uint64_t sub_1B201685C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B228E6F0;
  KeyPath = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  *(_QWORD *)(v0 + 32) = 0x79746976617247;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x6465657053;
  *(_QWORD *)(v0 + 88) = 0xE500000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  strcpy((char *)(v0 + 128), "Start Distance");
  *(_BYTE *)(v0 + 143) = -18;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  strcpy((char *)(v0 + 176), "End Distance");
  *(_BYTE *)(v0 + 189) = 0;
  *(_WORD *)(v0 + 190) = -5120;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v4;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v7 = swift_getKeyPath();
  v8 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 224) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 232) = 0x80000001B2347D10;
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v9 = swift_getKeyPath();
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v12 = v11;
  *(_QWORD *)(v0 + 272) = 0xD000000000000014;
  *(_QWORD *)(v0 + 280) = 0x80000001B2347D30;
  *(_QWORD *)(v0 + 288) = v9;
  *(_QWORD *)(v0 + 296) = v11;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v13 = swift_getKeyPath();
  *(_QWORD *)(v0 + 320) = 0x756F72676B636142;
  *(_QWORD *)(v0 + 328) = 0xEA0000000000646ELL;
  *(_QWORD *)(v0 + 336) = v13;
  *(_QWORD *)(v0 + 344) = v12;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v14 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 0x726F6C6F43;
  *(_QWORD *)(v0 + 376) = 0xE500000000000000;
  *(_QWORD *)(v0 + 384) = v14;
  *(_QWORD *)(v0 + 392) = v10;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  return v0;
}

uint64_t sub_1B2016AE0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22820B0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 1701869908;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = 5391432;
  *(_QWORD *)(v0 + 88) = 0xE300000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v4 = swift_getKeyPath();
  v5 = MEMORY[0x1E0DEB188];
  strcpy((char *)(v0 + 128), "Focal length");
  *(_BYTE *)(v0 + 141) = 0;
  *(_WORD *)(v0 + 142) = -5120;
  *(_QWORD *)(v0 + 144) = v4;
  *(_QWORD *)(v0 + 152) = v5;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0xD000000000000014;
  *(_QWORD *)(v0 + 184) = 0x80000001B2347BB0;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v5;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v7 = swift_getKeyPath();
  strcpy((char *)(v0 + 224), "Sensor height");
  *(_WORD *)(v0 + 238) = -4864;
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v5;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v8 = swift_getKeyPath();
  type metadata accessor for VFXCameraFillMode(0);
  *(_QWORD *)(v0 + 272) = 0x646F4D206C6C6946;
  *(_QWORD *)(v0 + 280) = 0xE900000000000065;
  *(_QWORD *)(v0 + 288) = v8;
  *(_QWORD *)(v0 + 296) = v9;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v10 = swift_getKeyPath();
  *(_QWORD *)(v0 + 320) = 1918985550;
  *(_QWORD *)(v0 + 328) = 0xE400000000000000;
  *(_QWORD *)(v0 + 336) = v10;
  *(_QWORD *)(v0 + 344) = v5;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v11 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 7496006;
  *(_QWORD *)(v0 + 376) = 0xE300000000000000;
  *(_QWORD *)(v0 + 384) = v11;
  *(_QWORD *)(v0 + 392) = v5;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v12 = swift_getKeyPath();
  v13 = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v0 + 416) = 0x70756F7247;
  *(_QWORD *)(v0 + 424) = 0xE500000000000000;
  *(_QWORD *)(v0 + 432) = v12;
  *(_QWORD *)(v0 + 440) = v13;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  v14 = swift_getKeyPath();
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  *(_QWORD *)(v0 + 464) = 0x66666F206D6C6946;
  *(_QWORD *)(v0 + 472) = 0xEB00000000746573;
  *(_QWORD *)(v0 + 480) = v14;
  *(_QWORD *)(v0 + 488) = v15;
  *(_QWORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  v16 = swift_getKeyPath();
  strcpy((char *)(v0 + 512), "Focus Distance");
  *(_BYTE *)(v0 + 527) = -18;
  *(_QWORD *)(v0 + 528) = v16;
  *(_QWORD *)(v0 + 536) = v5;
  *(_QWORD *)(v0 + 544) = 0;
  *(_BYTE *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  return v0;
}

char *sub_1B2016DD4()
{
  return sel_usesOrthographicProjection;
}

id sub_1B2016DE0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_usesOrthographicProjection);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2016E10(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUsesOrthographicProjection_, *a1);
}

char *sub_1B2016E24()
{
  return sel_wantsHDR;
}

id sub_1B2016E30@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_wantsHDR);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2016E60(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWantsHDR_, *a1);
}

char *sub_1B2016E74()
{
  return sel_focalLength;
}

id sub_1B2016E80@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_focalLength);
  *a2 = v4;
  return result;
}

id sub_1B2016EB0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFocalLength_, a3);
}

char *sub_1B2016EC4()
{
  return sel_fieldOfView;
}

id sub_1B2016ED0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_fieldOfView);
  *a2 = v4;
  return result;
}

id sub_1B2016F00(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFieldOfView_, a3);
}

char *sub_1B2016F14()
{
  return sel_sensorHeight;
}

id sub_1B2016F20@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_sensorHeight);
  *a2 = v4;
  return result;
}

id sub_1B2016F50(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSensorHeight_, a3);
}

char *sub_1B2016F64()
{
  return sel_fillMode;
}

id sub_1B2016F70@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_fillMode);
  *a2 = result;
  return result;
}

id sub_1B2016FA0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFillMode_, *a1);
}

char *sub_1B2016FB4()
{
  return sel_zNear;
}

id sub_1B2016FC0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_zNear);
  *a2 = v4;
  return result;
}

id sub_1B2016FF0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setZNear_, a3);
}

char *sub_1B2017004()
{
  return sel_zFar;
}

id sub_1B2017010@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_zFar);
  *a2 = v4;
  return result;
}

id sub_1B2017040(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setZFar_, a3);
}

char *sub_1B2017054()
{
  return sel_categoryBitMask;
}

id sub_1B2017060@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_categoryBitMask);
  *a2 = result;
  return result;
}

id sub_1B2017090(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCategoryBitMask_, *a1);
}

char *sub_1B20170A4()
{
  return sel_filmOffset;
}

id sub_1B20170B0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_filmOffset);
  *a2 = v4;
  return result;
}

id sub_1B20170E0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFilmOffset_, *a1);
}

char *sub_1B20170F4()
{
  return sel_focusDistance;
}

id sub_1B2017100@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_focusDistance);
  *a2 = v4;
  return result;
}

id sub_1B2017130(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFocusDistance_, a3);
}

void sub_1B2017144(uint64_t a1@<X8>)
{
  sub_1B2010E54(a1);
}

uint64_t sub_1B201716C()
{
  return 16;
}

uint64_t sub_1B2017178()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2017188()
{
  return sub_1B222892C();
}

__n128 sub_1B2017194(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_1B20171A0()
{
  return sel_shadingModel;
}

id sub_1B20171AC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_shadingModel);
  *a2 = result;
  return result;
}

id sub_1B20171DC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShadingModel_, *a1);
}

char *sub_1B20171F0()
{
  return sel_alphaCutoff;
}

id sub_1B20171FC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_alphaCutoff);
  *a2 = v4;
  return result;
}

id sub_1B201722C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAlphaCutoff_, a3);
}

char *sub_1B2017240()
{
  return sel_colorBufferWriteMask;
}

id sub_1B201724C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_colorBufferWriteMask);
  *a2 = result;
  return result;
}

id sub_1B201727C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorBufferWriteMask_, *a1);
}

char *sub_1B2017290()
{
  return sel_writesToDepthBuffer;
}

id sub_1B201729C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_writesToDepthBuffer);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20172CC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWritesToDepthBuffer_, *a1);
}

char *sub_1B20172E0()
{
  return sel_readsFromDepthBuffer;
}

id sub_1B20172EC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_readsFromDepthBuffer);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B201731C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setReadsFromDepthBuffer_, *a1);
}

char *sub_1B2017330()
{
  return sel_diffuse;
}

id sub_1B201733C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_diffuse);
  *a2 = result;
  return result;
}

char *sub_1B2017374()
{
  return sel_metalness;
}

id sub_1B2017380@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_metalness);
  *a2 = result;
  return result;
}

char *sub_1B20173B8()
{
  return sel_roughness;
}

id sub_1B20173C4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_roughness);
  *a2 = result;
  return result;
}

char *sub_1B20173FC()
{
  return sel_specular;
}

id sub_1B2017408@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_specular);
  *a2 = result;
  return result;
}

char *sub_1B2017440()
{
  return sel_normal;
}

id sub_1B201744C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_normal);
  *a2 = result;
  return result;
}

char *sub_1B2017484()
{
  return sel_reflective;
}

id sub_1B2017490@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_reflective);
  *a2 = result;
  return result;
}

char *sub_1B20174C8()
{
  return sel_transparent;
}

id sub_1B20174D4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_transparent);
  *a2 = result;
  return result;
}

char *sub_1B201750C()
{
  return sel_ambientOcclusion;
}

id sub_1B2017518@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_ambientOcclusion);
  *a2 = result;
  return result;
}

char *sub_1B2017550()
{
  return sel_selfIllumination;
}

id sub_1B201755C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_selfIllumination);
  *a2 = result;
  return result;
}

char *sub_1B2017594()
{
  return sel_emission;
}

id sub_1B20175A0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_emission);
  *a2 = result;
  return result;
}

char *sub_1B20175D8()
{
  return sel_multiply;
}

id sub_1B20175E4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_multiply);
  *a2 = result;
  return result;
}

char *sub_1B201761C()
{
  return sel_clearCoat;
}

id sub_1B2017628@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_clearCoat);
  *a2 = result;
  return result;
}

char *sub_1B2017660()
{
  return sel_clearCoatNormal;
}

id sub_1B201766C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_clearCoatNormal);
  *a2 = result;
  return result;
}

char *sub_1B20176A4()
{
  return sel_clearCoatRoughness;
}

id sub_1B20176B0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_clearCoatRoughness);
  *a2 = result;
  return result;
}

char *sub_1B20176E8()
{
  return sel_subsurface;
}

id sub_1B20176F4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_subsurface);
  *a2 = result;
  return result;
}

char *sub_1B201772C()
{
  return sel_subsurfaceRadius;
}

id sub_1B2017738@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_subsurfaceRadius);
  *a2 = result;
  return result;
}

char *sub_1B2017770()
{
  return sel_displacement;
}

id sub_1B201777C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_displacement);
  *a2 = result;
  return result;
}

void sub_1B20177B4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF62178)
  {
    sub_1B2017818();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF62178);
  }
}

void sub_1B2017818()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62180)
  {
    sub_1B1B9DAD4(255, &qword_1EEF5B4F0);
    sub_1B1B9DAD4(255, &qword_1EEF62188);
    v0 = sub_1B222A18C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62180);
  }
}

char *sub_1B201789C()
{
  return sel_minificationFilter;
}

id sub_1B20178A8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_minificationFilter);
  *a2 = result;
  return result;
}

id sub_1B20178D8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMinificationFilter_, *a1);
}

void sub_1B20178EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1B9DAD4(255, &qword_1EEF5B4F0);
    a3(255);
    v5 = sub_1B222A18C();
    if (!v6)
      atomic_store(v5, a2);
  }
}

char *sub_1B2017964()
{
  return sel_magnificationFilter;
}

id sub_1B2017970@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_magnificationFilter);
  *a2 = result;
  return result;
}

id sub_1B20179A0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMagnificationFilter_, *a1);
}

char *sub_1B20179B4()
{
  return sel_mipFilter;
}

id sub_1B20179C0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_mipFilter);
  *a2 = result;
  return result;
}

id sub_1B20179F0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMipFilter_, *a1);
}

char *sub_1B2017A04()
{
  return sel_wrapS;
}

id sub_1B2017A10@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_wrapS);
  *a2 = result;
  return result;
}

id sub_1B2017A40(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWrapS_, *a1);
}

char *sub_1B2017A54()
{
  return sel_wrapT;
}

id sub_1B2017A60@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_wrapT);
  *a2 = result;
  return result;
}

id sub_1B2017A90(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWrapT_, *a1);
}

char *sub_1B2017AA4()
{
  return sel_mappingChannel;
}

id sub_1B2017AB0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_mappingChannel);
  *a2 = result;
  return result;
}

id sub_1B2017AE0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMappingChannel_, *a1);
}

void sub_1B2017AF4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1B1B9DAD4(255, &qword_1EEF5B4F0);
    v3 = sub_1B222A18C();
    if (!v4)
      atomic_store(v3, a2);
  }
}

char *sub_1B2017B60()
{
  return sel_maxAnisotropy;
}

id sub_1B2017B6C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_maxAnisotropy);
  *a2 = v4;
  return result;
}

id sub_1B2017B9C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setMaxAnisotropy_, a3);
}

char *sub_1B2017BB0()
{
  return sel_contentsTransform;
}

id sub_1B2017BBC@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = objc_msgSend(*a1, sel_contentsTransform);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_1B2017BF0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContentsTransform_, *a1, a1[2], a1[4], a1[6]);
}

char *sub_1B2017C10()
{
  return sel_subdivisionLevel;
}

id sub_1B2017C1C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_subdivisionLevel);
  *a2 = result;
  return result;
}

id sub_1B2017C4C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSubdivisionLevel_, *a1);
}

char *sub_1B2017C60()
{
  return sel_parametricType;
}

id sub_1B2017C6C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_parametricType);
  *a2 = result;
  return result;
}

id sub_1B2017C9C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setParametricType_, *a1);
}

char *sub_1B2017CB0()
{
  return sel_width;
}

id sub_1B2017CBC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_width);
  *a2 = v4;
  return result;
}

id sub_1B2017CEC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setWidth_, a3);
}

char *sub_1B2017D00()
{
  return sel_height;
}

id sub_1B2017D0C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_height);
  *a2 = v4;
  return result;
}

id sub_1B2017D3C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setHeight_, a3);
}

char *sub_1B2017D50()
{
  return sel_length;
}

id sub_1B2017D5C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_length);
  *a2 = v4;
  return result;
}

id sub_1B2017D8C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setLength_, a3);
}

char *sub_1B2017DA0()
{
  return sel_chamferRadius;
}

id sub_1B2017DAC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_chamferRadius);
  *a2 = v4;
  return result;
}

id sub_1B2017DDC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setChamferRadius_, a3);
}

char *sub_1B2017DF0()
{
  return sel_primitiveType;
}

id sub_1B2017DFC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_primitiveType);
  *a2 = result;
  return result;
}

id sub_1B2017E2C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPrimitiveType_, *a1);
}

char *sub_1B2017E40()
{
  return sel_widthSegmentCount;
}

id sub_1B2017E4C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_widthSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B2017E7C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWidthSegmentCount_, *a1);
}

char *sub_1B2017E90()
{
  return sel_heightSegmentCount;
}

id sub_1B2017E9C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_heightSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B2017ECC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHeightSegmentCount_, *a1);
}

char *sub_1B2017EE0()
{
  return sel_lengthSegmentCount;
}

id sub_1B2017EEC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_lengthSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B2017F1C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLengthSegmentCount_, *a1);
}

char *sub_1B2017F30()
{
  return sel_chamferSegmentCount;
}

id sub_1B2017F3C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_chamferSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B2017F6C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setChamferSegmentCount_, *a1);
}

char *sub_1B2017F80()
{
  return sel_model;
}

id sub_1B2017F8C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_model);
  *a2 = result;
  return result;
}

id sub_1B2017FC4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setModel_, *a1);
}

char *sub_1B2017FD8()
{
  return sel_friction;
}

id sub_1B2017FE4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_friction);
  *a2 = v4;
  return result;
}

id sub_1B2018014(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFriction_, a3);
}

char *sub_1B2018028()
{
  return sel_restitution;
}

id sub_1B2018034@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_restitution);
  *a2 = v4;
  return result;
}

id sub_1B2018064(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setRestitution_, a3);
}

char *sub_1B2018078()
{
  return sel_damping;
}

id sub_1B2018084@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_damping);
  *a2 = v4;
  return result;
}

id sub_1B20180B4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setDamping_, a3);
}

char *sub_1B20180C8()
{
  return sel_angularDamping;
}

id sub_1B20180D4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_angularDamping);
  *a2 = v4;
  return result;
}

id sub_1B2018104(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAngularDamping_, a3);
}

char *sub_1B2018118()
{
  return sel_rollingFriction;
}

id sub_1B2018124@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_rollingFriction);
  *a2 = v4;
  return result;
}

id sub_1B2018154(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setRollingFriction_, a3);
}

char *sub_1B2018168()
{
  return sel_charge;
}

id sub_1B2018174@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_charge);
  *a2 = v4;
  return result;
}

id sub_1B20181A4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setCharge_, a3);
}

char *sub_1B20181B8()
{
  return sel_isAffectedByGravity;
}

id sub_1B20181C4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isAffectedByGravity);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20181F4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAffectedByGravity_, *a1);
}

char *sub_1B2018208()
{
  return sel_centerOfMassOffset;
}

id sub_1B2018214@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_centerOfMassOffset);
  *a2 = v4;
  return result;
}

id sub_1B2018244(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCenterOfMassOffset_, *a1);
}

char *sub_1B2018258()
{
  return sel_velocityFactor;
}

id sub_1B2018264@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_velocityFactor);
  *a2 = v4;
  return result;
}

id sub_1B2018294(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVelocityFactor_, *a1);
}

char *sub_1B20182A8()
{
  return sel_angularVelocityFactor;
}

id sub_1B20182B4@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_angularVelocityFactor);
  *a2 = v4;
  return result;
}

id sub_1B20182E4(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAngularVelocityFactor_, *a1);
}

char *sub_1B20182F8()
{
  return sel_continuousCollisionDetectionThreshold;
}

id sub_1B2018304@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_continuousCollisionDetectionThreshold);
  *a2 = v4;
  return result;
}

id sub_1B2018334(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setContinuousCollisionDetectionThreshold_, a3);
}

char *sub_1B2018348()
{
  return sel_collisionBitMask;
}

id sub_1B2018354@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_collisionBitMask);
  *a2 = result;
  return result;
}

id sub_1B2018384(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCollisionBitMask_, *a1);
}

char *sub_1B2018398()
{
  return sel_contactTestBitMask;
}

id sub_1B20183A4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_contactTestBitMask);
  *a2 = result;
  return result;
}

id sub_1B20183D4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactTestBitMask_, *a1);
}

char *sub_1B20183E8()
{
  return sel_allowsResting;
}

id sub_1B20183F4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_allowsResting);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2018424(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAllowsResting_, *a1);
}

char *sub_1B2018438()
{
  return sel_linearRestingThreshold;
}

id sub_1B2018444@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_linearRestingThreshold);
  *a2 = v4;
  return result;
}

id sub_1B2018474(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setLinearRestingThreshold_, a3);
}

char *sub_1B2018488()
{
  return sel_angularRestingThreshold;
}

id sub_1B2018494@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_angularRestingThreshold);
  *a2 = v4;
  return result;
}

id sub_1B20184C4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAngularRestingThreshold_, a3);
}

char *sub_1B20184D8()
{
  return sel_physicsBody;
}

id sub_1B20184E4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_physicsBody);
  *a2 = result;
  return result;
}

id sub_1B201851C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPhysicsBody_, *a1);
}

char *sub_1B2018530()
{
  return sel_fieldType;
}

id sub_1B201853C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_fieldType);
  *a2 = result;
  return result;
}

id sub_1B201856C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFieldType_, *a1);
}

char *sub_1B2018580()
{
  return sel_isActive;
}

id sub_1B201858C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isActive);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20185BC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setActive_, *a1);
}

char *sub_1B20185D0()
{
  return sel_falloffExponent;
}

id sub_1B20185DC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_falloffExponent);
  *a2 = v4;
  return result;
}

id sub_1B201860C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFalloffExponent_, a3);
}

char *sub_1B2018620()
{
  return sel_offset;
}

id sub_1B201862C@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_offset);
  *a2 = v4;
  return result;
}

id sub_1B201865C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOffset_, *a1);
}

char *sub_1B2018670()
{
  return sel_shape;
}

id sub_1B201867C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_shape);
  *a2 = result;
  return result;
}

id sub_1B20186AC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShape_, *a1);
}

char *sub_1B20186C0()
{
  return sel_cullMode;
}

id sub_1B20186CC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_cullMode);
  *a2 = result;
  return result;
}

id sub_1B20186FC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCullMode_, *a1);
}

char *sub_1B2018710()
{
  return sel_forceField;
}

id sub_1B201871C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_forceField);
  *a2 = result;
  return result;
}

id sub_1B2018754(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setForceField_, *a1);
}

char *sub_1B2018768()
{
  return sel_type;
}

id sub_1B2018774@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_type);
  *a2 = result;
  return result;
}

id sub_1B20187A4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setType_, *a1);
}

char *sub_1B20187B8()
{
  return sel_color;
}

uint64_t sub_1B20187C4(id *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2011BA8(a1, a2, a3, (SEL *)&selRef_color);
}

uint64_t sub_1B20187E0(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2011BE8(a1, a2, a3, a4, (SEL *)&selRef_setColor_);
}

char *sub_1B20187FC()
{
  return sel_temperature;
}

id sub_1B2018808@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_temperature);
  *a2 = v4;
  return result;
}

id sub_1B2018838(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setTemperature_, a3);
}

char *sub_1B201884C()
{
  return sel_attenuationDistance;
}

id sub_1B2018858@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_attenuationDistance);
  *a2 = v4;
  return result;
}

id sub_1B2018888(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAttenuationDistance_, a3);
}

char *sub_1B201889C()
{
  return sel_castsShadow;
}

id sub_1B20188A8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_castsShadow);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20188D8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCastsShadow_, *a1);
}

char *sub_1B20188EC()
{
  return sel_spotInnerAngle;
}

id sub_1B20188F8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_spotInnerAngle);
  *a2 = v4;
  return result;
}

id sub_1B2018928(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSpotInnerAngle_, a3);
}

char *sub_1B201893C()
{
  return sel_spotOuterAngle;
}

id sub_1B2018948@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_spotOuterAngle);
  *a2 = v4;
  return result;
}

id sub_1B2018978(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSpotOuterAngle_, a3);
}

char *sub_1B201898C()
{
  return sel_gobo;
}

id sub_1B2018998@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_gobo);
  *a2 = result;
  return result;
}

char *sub_1B20189D0()
{
  return sel_contents;
}

char *sub_1B20189E4()
{
  return sel_areaExtents;
}

id sub_1B20189F0@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_areaExtents);
  *a2 = v4;
  return result;
}

id sub_1B2018A20(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAreaExtents_, *a1);
}

char *sub_1B2018A34()
{
  return sel_drawsArea;
}

id sub_1B2018A40@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_drawsArea);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2018A70(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDrawsArea_, *a1);
}

char *sub_1B2018A84()
{
  return sel_doubleSided;
}

id sub_1B2018A90@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_doubleSided);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2018AC0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDoubleSided_, *a1);
}

char *sub_1B2018AD4()
{
  return sel_IESProfile;
}

id sub_1B2018AE0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_IESProfile);
  *a2 = result;
  return result;
}

id sub_1B2018B18(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIESProfile_, *a1);
}

void sub_1B2018B2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF621C0)
  {
    sub_1B1B9DAD4(255, &qword_1EEF621C8);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF621C0);
  }
}

char *sub_1B2018B90()
{
  return sel_probeType;
}

id sub_1B2018B9C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_probeType);
  *a2 = result;
  return result;
}

id sub_1B2018BCC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProbeType_, *a1);
}

char *sub_1B2018BE0()
{
  return sel_light;
}

id sub_1B2018BEC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_light);
  *a2 = result;
  return result;
}

id sub_1B2018C24(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLight_, *a1);
}

char *sub_1B2018C38()
{
  return sel_isHidden;
}

char *sub_1B2018C54()
{
  return sel_eulerAngles;
}

char *sub_1B2018C70()
{
  return sel_worldTransform;
}

char *sub_1B2018C8C()
{
  return sel_renderingOrder;
}

char *sub_1B2018CB0()
{
  return sel_physicsWorld;
}

id sub_1B2018CBC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_physicsWorld);
  *a2 = result;
  return result;
}

char *sub_1B2018CF4()
{
  return sel_gravity;
}

id sub_1B2018D00@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_gravity);
  *a2 = v4;
  return result;
}

id sub_1B2018D30(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGravity_, *a1);
}

char *sub_1B2018D44()
{
  return sel_speed;
}

id sub_1B2018D50@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_speed);
  *a2 = v4;
  return result;
}

id sub_1B2018D80(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSpeed_, a3);
}

char *sub_1B2018D94()
{
  return sel_fogStartDistance;
}

id sub_1B2018DA0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_fogStartDistance);
  *a2 = v4;
  return result;
}

id sub_1B2018DD0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFogStartDistance_, a3);
}

char *sub_1B2018DE4()
{
  return sel_fogEndDistance;
}

id sub_1B2018DF0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_fogEndDistance);
  *a2 = v4;
  return result;
}

id sub_1B2018E20(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFogEndDistance_, a3);
}

char *sub_1B2018E34()
{
  return sel_wantsScreenSpaceReflection;
}

id sub_1B2018E40@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_wantsScreenSpaceReflection);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2018E70(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWantsScreenSpaceReflection_, *a1);
}

char *sub_1B2018E84()
{
  return sel_lightingEnvironment;
}

id sub_1B2018E90@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_lightingEnvironment);
  *a2 = result;
  return result;
}

char *sub_1B2018EC8()
{
  return sel_background;
}

id sub_1B2018ED4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_background);
  *a2 = result;
  return result;
}

char *sub_1B2018F0C()
{
  return sel_fogColor;
}

uint64_t sub_1B2018F18(id *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2011BA8(a1, a2, a3, (SEL *)&selRef_fogColor);
}

uint64_t sub_1B2018F34(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2011BE8(a1, a2, a3, a4, (SEL *)&selRef_setFogColor_);
}

uint64_t initializeWithCopy for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for DiagnosticsTrackerInstance(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagnosticsTrackerInstance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsTrackerInstance()
{
  return &type metadata for DiagnosticsTrackerInstance;
}

uint64_t sub_1B2019188@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  return swift_unknownObjectWeakInit();
}

uint64_t *initializeBufferWithCopyOfBuffer for ScriptStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1B1B99F0C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

void destroy for ScriptStatus(uint64_t a1)
{
  sub_1B1D125C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for ScriptStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1B1B99F0C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1B1D125C0(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ScriptStatus(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1B1D125C0(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 0x18 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ScriptStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B2019308(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1B2019324(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_1B2019334(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *result = (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScriptStatus()
{
  return &type metadata for ScriptStatus;
}

ValueMetadata *type metadata accessor for ScriptHandle()
{
  return &type metadata for ScriptHandle;
}

unint64_t sub_1B2019380()
{
  unint64_t result;

  result = qword_1EEF621D0;
  if (!qword_1EEF621D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B0CA8, &type metadata for ScriptHandle);
    atomic_store(result, (unint64_t *)&qword_1EEF621D0);
  }
  return result;
}

uint64_t sub_1B20193C8()
{
  sub_1B201BADC();
  return sub_1B2228A58();
}

uint64_t sub_1B2019424()
{
  sub_1B201BADC();
  return sub_1B22289E0();
}

void sub_1B2019470(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63B0200;
}

uint64_t type metadata accessor for ParticleColorOverPosition.System()
{
  return objc_opt_self();
}

uint64_t sub_1B20194A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF62208, (uint64_t (*)(void))sub_1B201BD1C, (uint64_t)&type metadata for ParticleColorOverPosition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B201BD1C();
  sub_1B222A180();
  LOBYTE(v14[0]) = *(_BYTE *)v3;
  v16 = 0;
  sub_1B1A70F6C();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v14[0]) = *(_BYTE *)(v3 + 1);
    v16 = 1;
    sub_1B1A71D70();
    sub_1B2229958();
    v14[0] = *(_QWORD *)(v3 + 4);
    v16 = 2;
    sub_1B1BA05CC();
    sub_1B2229958();
    v11 = *(_QWORD *)(v3 + 16);
    v12 = *(_BYTE *)(v3 + 32);
    v18 = *(_QWORD *)(v3 + 24);
    v17 = v11;
    v14[0] = v11;
    v14[1] = v18;
    v15 = v12;
    v16 = 3;
    sub_1B1C16514(v3);
    sub_1B1D3DBB0();
    sub_1B2229958();
    sub_1B1B28C6C((uint64_t)&v17);
    sub_1B1B28C6C((uint64_t)&v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B20196B0()
{
  return "ParticleColorOverPosition";
}

void sub_1B20196C4(char *a1)
{
  sub_1B1F97A78(*a1);
}

uint64_t sub_1B20196D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20196F8 + 4 * byte_1B22B0D10[*v0]))(1701080941, 0xE400000000000000);
}

uint64_t sub_1B20196F8()
{
  return 0x4D73736572646461;
}

uint64_t sub_1B2019718()
{
  return 0x7469736F706D6F63;
}

uint64_t sub_1B2019738()
{
  return 1886216562;
}

uint64_t sub_1B2019744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2019A0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2019768()
{
  sub_1B201BD1C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2019790()
{
  sub_1B201BD1C();
  return sub_1B222A1E0();
}

double sub_1B20197B8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_1B201B760(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B20197FC(_QWORD *a1)
{
  return sub_1B20194A0(a1);
}

uint64_t sub_1B2019834()
{
  return sub_1B2019BD4();
}

uint64_t sub_1B201986C()
{
  return type metadata accessor for ParticleColorOverPosition.System();
}

uint64_t sub_1B2019888(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a1 + 4) != 0) ^ (*(_BYTE *)(a2 + 4) != 0);
}

double sub_1B20198A8@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  sub_1B20198E8((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1B20198E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unsigned __int32 v3;
  __int128 v4;
  simd_float4 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = _simd_pow_f4((simd_float4)xmmword_1B22B10A0, (simd_float4)xmmword_1B2268F30).u32[0];
  DWORD2(v4) = 0;
  *(_QWORD *)&v4 = v3;
  HIDWORD(v4) = 1.0;
  *(_OWORD *)(v2 + 32) = v4;
  *(_DWORD *)(v2 + 48) = 0;
  v5 = _simd_pow_f4((simd_float4)xmmword_1B22B10B0, (simd_float4)xmmword_1B2268F30);
  LODWORD(v6) = 0;
  DWORD2(v6) = 0;
  DWORD1(v6) = v5.i32[1];
  HIDWORD(v6) = 1.0;
  *(_OWORD *)(v2 + 64) = v6;
  *(_DWORD *)(v2 + 80) = 1065353216;
  v7 = sub_1B1C512B4(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  v8 = sub_1B2145310(v7);
  v10 = v9;
  result = swift_bridgeObjectRelease();
  *(_WORD *)a1 = 259;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_1B2019A0C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4D73736572646461 && a2 == 0xEB0000000065646FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1886216562 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B2019BD4()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  _QWORD *v3;

  v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  if (v1)
  {
    *(_OWORD *)(result + 16) = xmmword_1B226CD10;
    *(_QWORD *)(result + 32) = &type metadata for TransientOriginColor;
    *(_QWORD *)(result + 40) = &off_1E639F7A8;
    *(_QWORD *)(result + 48) = &type metadata for Color;
    v3 = (_QWORD *)(result + 56);
  }
  else
  {
    *(_OWORD *)(result + 16) = xmmword_1B226D240;
    *(_QWORD *)(result + 32) = &type metadata for Color;
    v3 = (_QWORD *)(result + 40);
  }
  *v3 = &off_1E63BA190;
  return result;
}

void sub_1B2019C88(float32x4_t a1, float a2, uint64_t a3, float32x4_t *a4, char a5, uint64_t a6)
{
  float32x4_t v7;
  float32x4_t v8;

  v7 = vsubq_f32(*a4, a1);
  v8 = vmulq_f32(v7, v7);
  (*(void (**)(uint64_t, float))(a6 + 24))(a6, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0])* a2);
  __asm { BR              X10 }
}

void sub_1B2019CF0(float32x4_t a1)
{
  float32x4_t *v1;
  float v2;

  *v1 = vmulq_n_f32(a1, v2);
}

uint64_t sub_1B2019D4C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  __int128 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  _BYTE v32[4];
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36[32];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43[15];
  _BYTE v44[40];
  _BYTE v45[80];
  float32x4_t v46[4];
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[7];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  simd_float4x4 v62;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v2)
    return swift_release();
  v3 = *(_QWORD **)(a1 + 8);
  swift_retain();
  sub_1B1D190E4((uint64_t)v3, (uint64_t)&v53);
  swift_retain();
  swift_release();
  v4 = v54;
  if ((_QWORD)v54)
  {
    v5 = v55;
    v6 = *((_QWORD *)&v54 + 1);
    v7 = v53;
    v8 = (unint64_t)v53 >> 8;
  }
  else
  {
    sub_1B20198E8((uint64_t)v32);
    v7 = v32[0];
    LOBYTE(v8) = v32[1];
    v4 = v33;
    v6 = v34;
    v5 = v35;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1E4D26C(v4, v6, v5, (uint64_t)v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1F55C64((uint64_t)v43, (uint64_t)v51, (uint64_t)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v52)
  {
    v57 = v51[4];
    v58 = v51[5];
    v59 = v51[6];
    v60 = v52;
    v53 = v51[0];
    v54 = v51[1];
    v55 = v51[2];
    v56 = v51[3];
    sub_1B1E7D33C((uint64_t)&v53);
    sub_1B1EDFE20((uint64_t)&v53, v8, 1, (uint64_t)v44);
    sub_1B1A08614(v43);
    sub_1B1F55C64((uint64_t)v44, (uint64_t)&v48, (uint64_t)&qword_1ED4BB3F0, (uint64_t)type metadata accessor for __vfx_sampler1d, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    if (*((_QWORD *)&v49 + 1) != 1)
    {
      v40 = v48;
      v41 = v49;
      v42 = v50;
      v10 = *(_OWORD *)(a1 + 104);
      v37 = *(_OWORD *)(a1 + 88);
      v38 = v10;
      v39 = *(_QWORD *)(a1 + 120);
      sub_1B19F1DDC((uint64_t)v36);
      *(double *)v11.i64 = sub_1B1E52854();
      v28 = v11;
      v29 = v12;
      v30 = v13;
      v31 = v14;
      swift_retain();
      sub_1B1D15764(v3, (uint64_t)v45);
      swift_release();
      sub_1B1F55C64((uint64_t)v45, (uint64_t)v46, (uint64_t)qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
      if ((v47 & 1) != 0)
      {
        swift_retain();
        *(double *)v16.i64 = sub_1B1E854C4((unint64_t)v3, v15);
        v27 = v16;
        v25 = v18;
        v26 = v17;
        v24 = v19;
        swift_release();
        v20 = v27;
        v22 = v25;
        v21 = v26;
        v23 = v24;
      }
      else
      {
        v20 = v46[0];
        v21 = v46[1];
        v22 = v46[2];
        v23 = v46[3];
      }
      v62.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v20.f32[0]), v29, *(float32x2_t *)v20.f32, 1), v30, v20, 2), v31, v20, 3);
      v62.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v21.f32[0]), v29, *(float32x2_t *)v21.f32, 1), v30, v21, 2), v31, v21, 3);
      v62.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v22.f32[0]), v29, *(float32x2_t *)v22.f32, 1), v30, v22, 2), v31, v22, 3);
      v62.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v23.f32[0]), v29, *(float32x2_t *)v23.f32, 1), v30, v23, 2), v31, v23, 3);
      __invert_f4(v62);
      __asm { BR              X10 }
    }
    sub_1B1A08614(v43);
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B201B760@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int32 v10;
  __int128 v11;
  simd_float4 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  simd_float4 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v26 = a2;
  sub_1B19F8E54(0, &qword_1EEF621F8, (uint64_t (*)(void))sub_1B201BD1C, (uint64_t)&type metadata for ParticleColorOverPosition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v24 - v7;
  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226CD10;
  v28 = (simd_float4)xmmword_1B2268F30;
  v10 = _simd_pow_f4((simd_float4)xmmword_1B22B10A0, (simd_float4)xmmword_1B2268F30).u32[0];
  DWORD2(v11) = 0;
  *(_QWORD *)&v11 = v10;
  HIDWORD(v11) = 1.0;
  *(_OWORD *)(v9 + 32) = v11;
  *(_DWORD *)(v9 + 48) = 0;
  v12 = _simd_pow_f4((simd_float4)xmmword_1B22B10B0, v28);
  LODWORD(v13) = 0;
  DWORD2(v13) = 0;
  DWORD1(v13) = v12.i32[1];
  HIDWORD(v13) = 1.0;
  *(_OWORD *)(v9 + 64) = v13;
  *(_DWORD *)(v9 + 80) = 1065353216;
  v14 = sub_1B1C512B4(v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B2145310(v14);
  v28.i64[0] = v15;
  swift_bridgeObjectRelease();
  sub_1B19FA070(a1, a1[3]);
  sub_1B201BD1C();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v16 = v26;
    v32 = 0;
    sub_1B1A70F28();
    sub_1B2229814();
    v17 = v29;
    v32 = 1;
    sub_1B1A71D2C();
    sub_1B2229814();
    v18 = v29;
    v32 = 2;
    sub_1B1BA0588();
    sub_1B2229814();
    v25 = v29;
    v19 = HIDWORD(v29);
    v32 = 3;
    sub_1B1D3DB38();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v27);
    v20 = v29;
    v21 = v30;
    v22 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_BYTE *)v16 = v17;
    *(_BYTE *)(v16 + 1) = v18;
    *(_BYTE *)(v16 + 4) = v25;
    *(_DWORD *)(v16 + 8) = v19;
    *(_QWORD *)(v16 + 16) = v20;
    *(_QWORD *)(v16 + 24) = v21;
    *(_BYTE *)(v16 + 32) = v22;
  }
  return result;
}

unint64_t sub_1B201BADC()
{
  unint64_t result;

  result = qword_1EEF621D8;
  if (!qword_1EEF621D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B0F2C, &type metadata for ParticleColorOverPosition.GradientMode);
    atomic_store(result, (unint64_t *)&qword_1EEF621D8);
  }
  return result;
}

uint64_t initializeWithCopy for ParticleColorOverPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleColorOverPosition(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ParticleColorOverPosition(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ParticleColorOverPosition()
{
  return &type metadata for ParticleColorOverPosition;
}

ValueMetadata *type metadata accessor for ParticleColorOverPosition.GradientMode()
{
  return &type metadata for ParticleColorOverPosition.GradientMode;
}

unint64_t sub_1B201BC74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF621E0;
  if (!qword_1EEF621E0)
  {
    sub_1B1A02758(255, &qword_1EEF621E8, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF621E0);
  }
  return result;
}

unint64_t sub_1B201BCD8()
{
  unint64_t result;

  result = qword_1EEF621F0;
  if (!qword_1EEF621F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B0E84, &type metadata for ParticleColorOverPosition.GradientMode);
    atomic_store(result, (unint64_t *)&qword_1EEF621F0);
  }
  return result;
}

unint64_t sub_1B201BD1C()
{
  unint64_t result;

  result = qword_1EEF62200;
  if (!qword_1EEF62200)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1048, &type metadata for ParticleColorOverPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62200);
  }
  return result;
}

uint64_t _s3VFX25ParticleColorOverPositionV12GradientModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B201BDAC + 4 * byte_1B22B0D45[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B201BDE0 + 4 * byte_1B22B0D40[v4]))();
}

uint64_t sub_1B201BDE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B201BDE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B201BDF0);
  return result;
}

uint64_t sub_1B201BDFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B201BE04);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B201BE08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B201BE10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverPosition.CodingKeys()
{
  return &type metadata for ParticleColorOverPosition.CodingKeys;
}

unint64_t sub_1B201BE30()
{
  unint64_t result;

  result = qword_1EEF62210;
  if (!qword_1EEF62210)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1020, &type metadata for ParticleColorOverPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62210);
  }
  return result;
}

unint64_t sub_1B201BE78()
{
  unint64_t result;

  result = qword_1EEF62218;
  if (!qword_1EEF62218)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B0F90, &type metadata for ParticleColorOverPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62218);
  }
  return result;
}

unint64_t sub_1B201BEC0()
{
  unint64_t result;

  result = qword_1EEF62220;
  if (!qword_1EEF62220)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B0FB8, &type metadata for ParticleColorOverPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62220);
  }
  return result;
}

uint64_t sub_1B201BF04(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  uint64_t v8;

  v4 = sub_1B1FFB880((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, a2, a3);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    sub_1B1A135B4((uint64_t)v7);
    if (v8)
    {
      sub_1B19F6724();
      if (swift_dynamicCast())
        __asm { BR              X10 }
      swift_release();
    }
    else
    {
      swift_release();
      sub_1B201C5E0((uint64_t)v7);
    }
  }
  return v5;
}

uint64_t sub_1B201C374(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  char v7;
  void (*v8)(uint64_t *, _QWORD);
  int32x2_t **v9;
  int32x2_t **v10;
  char v11;
  uint64_t v12;

  if (a3 == 0xFFFFFFFFLL)
  {
LABEL_2:
    v5 = 0;
    return v5 & 1;
  }
  v5 = 0;
  if (a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    if (HIDWORD(a3) != -1
      && *(_DWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a3 + 8) != HIDWORD(a3))
    {
      goto LABEL_2;
    }
    sub_1B1A11FDC((uint64_t)&type metadata for EmitterDescription);
    if ((v7 & 1) != 0)
      goto LABEL_2;
    swift_retain();
    v8 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
    v10 = v9;
    v11 = sub_1B1CCA044(*v9, a1);
    if ((v11 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *v10 = a1;
    }
    v5 = v11 ^ 1;
    v8(&v12, 0);
    swift_release();
  }
  return v5 & 1;
}

uint64_t sub_1B201C4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char v7;
  _DWORD *v8;
  void (*v9)(uint64_t *, _QWORD);
  BOOL v10;
  uint64_t v11;

  if (a3 == 0xFFFFFFFFLL)
    return 0;
  v5 = 0;
  if (a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    if (HIDWORD(a3) != -1
      && *(_DWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a3 + 8) != HIDWORD(a3))
    {
      return 0;
    }
    sub_1B1A11FDC((uint64_t)&type metadata for Parent);
    if ((v7 & 1) != 0)
      return 0;
    swift_retain();
    v9 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
    v10 = *v8 == (_DWORD)a1 && v8[1] == HIDWORD(a1);
    v5 = !v10;
    if (!v10)
      *(_QWORD *)v8 = a1;
    v9(&v11, 0);
    swift_release();
  }
  return v5;
}

uint64_t sub_1B201C5E0(uint64_t a1)
{
  uint64_t v2;

  sub_1B1F2F698();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B201C61C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B201C66C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int64_t v4;
  int32x2_t *v5;
  int32x2_t *v6;
  unint64_t v7;
  int32x2_t v8;
  unint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[7];
  char v18;
  _QWORD v19[3];
  char v20;

  sub_1B1D4BCB0(a1, (uint64_t)v19);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = (int32x2_t *)MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v17[0] = MEMORY[0x1E0DEE9D8];
    sub_1B202A38C(0, v4, 0);
    v5 = (int32x2_t *)v17[0];
    v6 = (int32x2_t *)(v2 + 32);
    v7 = *(_QWORD *)(v17[0] + 16);
    do
    {
      v8 = *v6;
      v17[0] = v5;
      v9 = (unint64_t)v5[3];
      if (v7 >= v9 >> 1)
      {
        sub_1B202A38C(v9 > 1, v7 + 1, 1);
        v5 = (int32x2_t *)v17[0];
      }
      v5[2] = (int32x2_t)(v7 + 1);
      v5[v7 + 4] = v8;
      v6 += 2;
      ++v7;
      --v4;
    }
    while (v4);
  }
  KeyPath = swift_getKeyPath();
  if ((_DWORD)v1 == -1 && !v3)
    goto LABEL_15;
  v11 = v19[0];
  swift_unownedRetainStrong();
  swift_release();
  if (swift_unknownObjectUnownedLoadStrong())
    swift_unknownObjectRelease();
  swift_unownedRetainStrong();
  v12 = sub_1B201C374(v5, KeyPath, v1);
  swift_release();
  Strong = swift_unknownObjectUnownedLoadStrong();
  v14 = Strong;
  if ((v12 & 1) != 0)
  {
    if (Strong)
      swift_unknownObjectRelease();
    if (v20 == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = __PAIR64__(v3, v1);
      v17[1] = v11;
      sub_1B201D12C(0);
      v17[5] = v15;
      v17[6] = &off_1E639B2E0;
      v17[2] = KeyPath;
      v17[3] = v5;
      v18 = 11;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1E2DB30((uint64_t)v17);
      swift_release();
      sub_1B1ADF058((uint64_t)v17);
    }
LABEL_15:
    swift_bridgeObjectRelease();
    swift_release();
    return sub_1B1A0256C((uint64_t)v19);
  }
  swift_bridgeObjectRelease();
  swift_release();
  if (v14)
    swift_unknownObjectRelease();
  return sub_1B1A0256C((uint64_t)v19);
}

uint64_t sub_1B201CA28(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  ValueMetadata *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  ValueMetadata *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t result;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66[8];
  _OWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;
  _BYTE v79[40];
  uint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;

  v2 = v1;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v86 = qword_1ED4D09F8;
  v87 = 0;
  v88 = 2;
  v89 = 0;
  v90 = 2;
  v91 = 0;
  swift_retain();
  sub_1B1E3D7C4(1, (uint64_t)&v60);
  swift_release();
  v80 = v60;
  v81 = v61;
  v82 = v62;
  v83 = v63 & 0xFFFFFFFFFFFFFFFELL | a1 & 1;
  v84 = v64;
  v85 = v65;
  sub_1B1E8FCE4(v1, (uint64_t)&v80, 0x200000000, v66);
  sub_1B1A18378((uint64_t)v66, (uint64_t)v67, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v67[0])
  {
    sub_1B19ED720((uint64_t)&v60);
    return MEMORY[0x1E0DEE9D8];
  }
  v74 = v67[0];
  v75 = v67[1];
  v76 = v68;
  if (v73 <= 0)
  {
    sub_1B19ED720((uint64_t)&v60);
    sub_1B19ED748(v66);
    return MEMORY[0x1E0DEE9D8];
  }
  v52 = v70;
  if (!v70)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v48 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_69:
    sub_1B19ED720((uint64_t)&v60);
    sub_1B19ED748(v66);
    sub_1B19ED748(v66);
    return (uint64_t)v48;
  }
  v51 = v69;
  v59 = v72[4];
  v58 = *(_BYTE *)(v71 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v57 = v72;
  v49 = v72 + 8;
  v50 = (uint64_t)(v72 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v4 = 0;
  v5 = 0;
  v48 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v55 = v5;
    v56 = v4;
    v6 = (unsigned int *)(v51 + 48 * v4);
    v7 = *v6;
    v8 = (uint64_t *)*((_QWORD *)v6 + 2);
    v9 = *((_QWORD *)v6 + 4);
    v10 = *((_QWORD *)v6 + 5);
    v53 = v6[1];
    v54 = *((_QWORD *)v6 + 3);
    if ((v58 & 1) != 0)
    {
      v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      os_unfair_lock_lock(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v59);
    sub_1B1A18378(v50, (uint64_t)v79, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v12 = v57[4];
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v57[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
    v57[7] = v13;
    v49[1] = 0;
    v49[2] = 0;
    *v49 = 0;
    swift_release();
    sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v8, v54, v9, (uint64_t)v57);
    if (v8)
    {
      if (!v9)
        goto LABEL_39;
      while (1)
      {
        v15 = *v8++;
        v14 = v15;
        v16 = swift_retain();
        if ((*(_BYTE *)(v10 + 184) & 1) != 0)
          goto LABEL_70;
        v17 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v14);
        v18 = *(_DWORD *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v17 + 8);
        swift_release();
        if (v17 == -1)
        {
          if (!v18)
            goto LABEL_15;
          swift_retain();
        }
        else
        {
          v19 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
          swift_retain();
          if ((v17 & 0x80000000) == 0 && *(_QWORD *)(v2 + v19 + 8) > v17)
          {
            v20 = *(_QWORD *)(v2 + v19);
            if (v18 == -1 || *(_DWORD *)(v20 + 12 * v17 + 8) == v18)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * *(__int16 *)(v20 + 12 * v17 + 6) + 32) + 16);
              v23 = *(_QWORD *)(v22 + 128);
              if (*(_QWORD *)(v23 + 16))
              {
                v24 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription);
                if ((v25 & 1) != 0)
                {
                  v26 = *(ValueMetadata **)(*(_QWORD *)(v22 + 24)
                                          + 16 * *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24)
                                          + 32);
                  swift_release();
                  if (v26 == &type metadata for EmitterDescription)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                      v27 = v48;
                    else
                      v27 = sub_1B1C695E8(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
                    v29 = *((_QWORD *)v27 + 2);
                    v28 = *((_QWORD *)v27 + 3);
                    if (v29 >= v28 >> 1)
                      v27 = sub_1B1C695E8(v28 > 1, v29 + 1, 1, v27);
                    *((_QWORD *)v27 + 2) = v29 + 1;
                    v48 = v27;
                    v30 = &v27[16 * v29];
                    *((_DWORD *)v30 + 8) = v17;
                    *((_DWORD *)v30 + 9) = v18;
                    *((_QWORD *)v30 + 5) = v2;
                  }
                  goto LABEL_15;
                }
              }
            }
          }
        }
        swift_release();
LABEL_15:
        if (!--v9)
          goto LABEL_39;
      }
    }
    v31 = v53;
    if ((_DWORD)v7 != (_DWORD)v53)
      break;
LABEL_39:
    v77[0] = v74;
    v77[1] = v75;
    v78 = v76;
    v5 = v55;
    sub_1B1F05D48(v57, (unsigned __int16 **)v77, (uint64_t)v79);
    sub_1B1F03804((char *)v10);
    ecs_stack_allocator_pop_snapshot(v59);
    if ((v58 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    }
    swift_release();
    v4 = v56 + 1;
    if (v56 + 1 == v52)
      goto LABEL_69;
  }
  while (1)
  {
    v32 = swift_retain();
    if ((*(_BYTE *)(v10 + 184) & 1) != 0)
      break;
    v33 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v7);
    v34 = *(_DWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v33 + 8);
    swift_release();
    if (v33 == -1)
    {
      if (!v34)
        goto LABEL_42;
      swift_retain();
    }
    else
    {
      v35 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
      swift_retain();
      if ((v33 & 0x80000000) == 0 && *(_QWORD *)(v2 + v35 + 8) > v33)
      {
        v36 = *(_QWORD *)(v2 + v35);
        if (v34 == -1 || *(_DWORD *)(v36 + 12 * v33 + 8) == v34)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * *(__int16 *)(v36 + 12 * v33 + 6) + 32) + 16);
          v39 = *(_QWORD *)(v38 + 128);
          if (*(_QWORD *)(v39 + 16))
          {
            v40 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription);
            if ((v41 & 1) != 0)
            {
              v42 = *(ValueMetadata **)(*(_QWORD *)(v38 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v40) + 32);
              swift_release();
              if (v42 == &type metadata for EmitterDescription)
              {
                v31 = v53;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  v43 = v48;
                else
                  v43 = sub_1B1C695E8(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
                v45 = *((_QWORD *)v43 + 2);
                v44 = *((_QWORD *)v43 + 3);
                if (v45 >= v44 >> 1)
                  v43 = sub_1B1C695E8(v44 > 1, v45 + 1, 1, v43);
                *((_QWORD *)v43 + 2) = v45 + 1;
                v48 = v43;
                v46 = &v43[16 * v45];
                *((_DWORD *)v46 + 8) = v33;
                *((_DWORD *)v46 + 9) = v34;
                *((_QWORD *)v46 + 5) = v2;
              }
              else
              {
                v31 = v53;
              }
            }
            else
            {
              swift_release();
              v31 = v53;
            }
            goto LABEL_42;
          }
        }
      }
    }
    swift_release();
LABEL_42:
    if (v31 == ++v7)
      goto LABEL_39;
  }
LABEL_70:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B201D12C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF62228)
  {
    sub_1B1A02758(255, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for EmitterDescription, v2, (uint64_t)&off_1E6391AC0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF62228);
  }
}

ValueMetadata *type metadata accessor for VFXEmitter()
{
  return &type metadata for VFXEmitter;
}

uint64_t sub_1B201D1B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1B1A06460();
  swift_bridgeObjectRetain();
  v1 = (_QWORD *)sub_1B2229280();
  swift_bridgeObjectRelease();
  if (v1[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_1B1FFEE34(v1);
    --v1[2];
    swift_bridgeObjectRelease();
    sub_1B1CB7230();
    sub_1B1A1F838(&qword_1EEF5D538, 255, (uint64_t (*)(uint64_t))sub_1B1CB7230, MEMORY[0x1E0DEAF38]);
    sub_1B1A06504();
    sub_1B22289BC();
    swift_bridgeObjectRelease();
    return sub_1B2228968();
  }
  return v2;
}

uint64_t sub_1B201D31C()
{
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B201D450@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain_n();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5 && *(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = sub_1B1DC3B00(v8, v9);
      if ((v7 & 1) != 0)
      {
        sub_1B19F8F0C(*(_QWORD *)(v5 + 56) + 88 * v6, a1);
      }
      else
      {
        *(_QWORD *)(a1 + 80) = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)a1 = 0u;
      }
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1B201D5A8()
{
  uint64_t v0;

  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B19F9FEC(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance();
}

uint64_t _s13ParameterBaseCMa()
{
  return objc_opt_self();
}

uint64_t sub_1B201D60C()
{
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B201D668()
{
  swift_bridgeObjectRetain();
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B201D6B0()
{
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B201D708(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) == *(_QWORD *)(*(_QWORD *)a2 + 40)
    && *(_QWORD *)(*(_QWORD *)a1 + 48) == *(_QWORD *)(*(_QWORD *)a2 + 48))
  {
    return 1;
  }
  else
  {
    return sub_1B2229D24();
  }
}

uint64_t sub_1B201D734()
{
  return sub_1B201D31C();
}

uint64_t _s11ParameterInCMa()
{
  return objc_opt_self();
}

uint64_t _s12ParameterOutCMa()
{
  return objc_opt_self();
}

uint64_t sub_1B201D798(uint64_t a1, uint64_t a2)
{
  return sub_1B1A1F838(&qword_1EEF62230, a2, (uint64_t (*)(uint64_t))_s13ParameterBaseCMa, (uint64_t)&unk_1B22B11E8);
}

uint64_t type metadata accessor for ParticleOpacityOverVelocity.System()
{
  return objc_opt_self();
}

uint64_t sub_1B201D7E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  _OWORD v14[2];

  v3 = v1;
  sub_1B201E5E4(0, &qword_1EEF62248, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B201E558();
  sub_1B222A180();
  v14[0] = *(_OWORD *)v3;
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)(v3 + 9);
  v13 = 0;
  sub_1B201E59C(0, (unint64_t *)&qword_1ED4B9F38, (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for Curve);
  sub_1B201E640((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C);
  sub_1B2229958();
  if (!v2)
  {
    *(_QWORD *)&v14[0] = *(_QWORD *)(v3 + 28);
    v13 = 1;
    sub_1B201E59C(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
    sub_1B201E698(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B201D9A4()
{
  return "OpacityOverVelocitySystem";
}

uint64_t sub_1B201D9B8(char *a1, char *a2)
{
  return sub_1B1F97F7C(*a1, *a2);
}

uint64_t sub_1B201D9C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x65676E6172;
  else
    return 0x6576727563;
}

uint64_t sub_1B201D9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B201DB1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B201DA14()
{
  sub_1B201E558();
  return sub_1B222A1D4();
}

uint64_t sub_1B201DA3C()
{
  sub_1B201E558();
  return sub_1B222A1E0();
}

double sub_1B201DA64@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  sub_1B201E2AC(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B201DAA8(_QWORD *a1)
{
  return sub_1B201D7E4(a1);
}

uint64_t sub_1B201DABC()
{
  return type metadata accessor for ParticleOpacityOverVelocity.System();
}

double sub_1B201DAD8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = sub_1B21451EC((uint64_t)&unk_1E63B3638);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  result = 0.0078125;
  *(_QWORD *)(a1 + 28) = 0x3F80000000000000;
  return result;
}

uint64_t sub_1B201DB1C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6576727563 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t *sub_1B201DBFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t v33;
  int8x16_t v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE v44[148];
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  char v55;
  float v56;
  float v57;
  uint64_t v58[8];
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _BYTE v66[40];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  swift_retain();
  sub_1B1B72F78((uint64_t)v54);
  v3 = v54[0];
  v4 = v54[1];
  v5 = v54[2];
  v6 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1EE00B0(v3, v4, v5, v6, 32, (uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a1 + 104);
  v51 = *(_OWORD *)(a1 + 88);
  v52 = v7;
  v53 = *(_QWORD *)(a1 + 120);
  sub_1B19F23E8((uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v56;
  v9 = v57;
  v49[0] = v45[0];
  v49[1] = v45[1];
  v50 = v46;
  sub_1B1E8FCE4(v2, (uint64_t)v49, 0x200000000, v58);
  sub_1B19F66A0((uint64_t)v58, (uint64_t)v59, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v59[0])
  {
    sub_1B19ED720((uint64_t)v45);
    return (uint64_t *)swift_release();
  }
  if (v65 <= 0 || (v40 = v62) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v45);
    goto LABEL_23;
  }
  v10 = 1.0 / (float)(v9 - v8);
  v11 = -(float)(v8 * v10);
  v12 = v64;
  v13 = v64[4];
  v43 = *(_BYTE *)(v63 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v47[0] = v59[0];
  v47[1] = v59[1];
  v48 = v60;
  v37 = (uint64_t)(v64 + 6);
  v38 = v61;
  v36 = v64 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v14 = 0;
  v15 = 0;
  v39 = v13;
  do
  {
    v16 = (unsigned int *)(v38 + 48 * v14);
    v17 = *v16;
    v19 = (uint64_t *)*((_QWORD *)v16 + 2);
    v18 = *((_QWORD *)v16 + 3);
    v21 = *((_QWORD *)v16 + 4);
    v20 = *((_QWORD *)v16 + 5);
    v41 = v16[1];
    v42 = v15;
    if ((v43 & 1) != 0)
    {
      v22 = *(os_unfair_lock_s **)(v20 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v22);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v13);
    sub_1B19F66A0(v37, (uint64_t)v66, &qword_1ED4B7FB0);
    v23 = v12[4];
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v12[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
    v12[7] = v24;
    v36[1] = 0;
    v36[2] = 0;
    *v36 = 0;
    swift_release();
    v25 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v19, v18, v21, (uint64_t)v12);
    v26 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v19, v18, v21, (uint64_t)v12);
    v27 = (float32x4_t *)v26;
    if (v19)
    {
      if (v21)
      {
        v15 = v42;
        do
        {
          v28 = *v27++;
          v29 = (int8x16_t)vmulq_f32(v28, v28);
          *v25 = vmulq_n_f32(*v25, fminf(fmaxf(sample_curve((uint64_t)v44, v11+ (float)(v10* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)))))), 0.0), 1.0));
          ++v25;
          --v21;
        }
        while (v21);
        goto LABEL_18;
      }
    }
    else if ((_DWORD)v17 != (_DWORD)v41)
    {
      v30 = v41 - v17;
      v31 = (float32x4_t *)(v26 + 16 * v17);
      v32 = &v25[v17];
      v15 = v42;
      do
      {
        v33 = *v31++;
        v34 = (int8x16_t)vmulq_f32(v33, v33);
        *v32 = vmulq_n_f32(*v32, fminf(fmaxf(sample_curve((uint64_t)v44, v11+ (float)(v10* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))))), 0.0), 1.0));
        ++v32;
        --v30;
      }
      while (v30);
      goto LABEL_18;
    }
    v15 = v42;
LABEL_18:
    sub_1B1F05D48(v12, (unsigned __int16 **)v47, (uint64_t)v66);
    sub_1B1F03804((char *)v20);
    v13 = v39;
    ecs_stack_allocator_pop_snapshot(v39);
    if ((v43 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 376));
    }
    swift_release();
    ++v14;
  }
  while (v14 != v40);
  sub_1B19ED720((uint64_t)v45);
LABEL_23:
  swift_release();
  sub_1B19ED748(v58);
  return sub_1B19ED748(v58);
}

uint64_t initializeWithCopy for ParticleOpacityOverVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleOpacityOverVelocity(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ParticleOpacityOverVelocity(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleOpacityOverVelocity(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityOverVelocity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityOverVelocity()
{
  return &type metadata for ParticleOpacityOverVelocity;
}

uint64_t sub_1B201E2AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;

  sub_1B201E5E4(0, &qword_1EEF62238, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v17 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B201E558();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B201E59C(0, (unint64_t *)&qword_1ED4B9F38, (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for Curve);
  v20 = 0;
  sub_1B201E640((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94);
  sub_1B2229814();
  v11 = v21;
  v18 = v22;
  v12 = v23;
  HIDWORD(v17) = v24;
  sub_1B201E59C(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
  v20 = 1;
  sub_1B201E698((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  v19 = v11;
  v13 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v14 = v21;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v19;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = BYTE4(v17);
  *(_QWORD *)(a2 + 28) = v14;
  return result;
}

unint64_t sub_1B201E558()
{
  unint64_t result;

  result = qword_1EEF62240;
  if (!qword_1EEF62240)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1420, &type metadata for ParticleOpacityOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62240);
  }
  return result;
}

void sub_1B201E59C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0DEB188]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1B201E5E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B201E558();
    v7 = a3(a1, &type metadata for ParticleOpacityOverVelocity.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B201E640(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B201E59C(255, (unint64_t *)&qword_1ED4B9F38, (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for Curve);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B201E698(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B201E59C(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityOverVelocity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B201E758 + 4 * byte_1B22B1255[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B201E78C + 4 * byte_1B22B1250[v4]))();
}

uint64_t sub_1B201E78C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B201E794(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B201E79CLL);
  return result;
}

uint64_t sub_1B201E7A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B201E7B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B201E7B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B201E7BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityOverVelocity.CodingKeys()
{
  return &type metadata for ParticleOpacityOverVelocity.CodingKeys;
}

unint64_t sub_1B201E7DC()
{
  unint64_t result;

  result = qword_1EEF62250;
  if (!qword_1EEF62250)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B13F8, &type metadata for ParticleOpacityOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62250);
  }
  return result;
}

unint64_t sub_1B201E824()
{
  unint64_t result;

  result = qword_1EEF62258;
  if (!qword_1EEF62258)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1368, &type metadata for ParticleOpacityOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62258);
  }
  return result;
}

unint64_t sub_1B201E86C()
{
  unint64_t result;

  result = qword_1EEF62260[0];
  if (!qword_1EEF62260[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1390, &type metadata for ParticleOpacityOverVelocity.CodingKeys);
    atomic_store(result, qword_1EEF62260);
  }
  return result;
}

void sub_1B201E8B0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B201E8E4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  sub_1B1B632F0(v1);
  v2 = ((uint64_t (*)(unint64_t))sub_1B201E8B0)(v1);
  sub_1B1B28D2C(v1);
  return (v2 << 8) | 5;
}

void sub_1B201EA30()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA38()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA40()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA48()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA50()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA58()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA60()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA68()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA70()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA78()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA80()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA88()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA90()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EA98()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAA0()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAA8()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAB0()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAB8()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAC0()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAC8()
{
  JUMPOUT(0x1B201EA1CLL);
}

void sub_1B201EAD0()
{
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B2229688();
  __break(1u);
  JUMPOUT(0x1B201EB80);
}

unint64_t sub_1B201EBC8(unint64_t a1)
{
  int v2;
  unint64_t result;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = a1 - 1;
  result = 0x8000000000000000;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      return 0x8000000000000008;
    case 2:
      return 0x8000000000000010;
    case 3:
      return 0x8000000000000018;
    case 4:
      v8 = sub_1B201EBC8(a1 >> 8);
      if ((~v8 & 0xF000000000000007) == 0)
        return 0xF000000000000007;
      v9 = v8;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v9;
      return result;
    case 5:
      v12 = sub_1B201EBC8(a1 >> 16);
      if ((~v12 & 0xF000000000000007) == 0)
        return 0xF000000000000007;
      v13 = v12;
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = BYTE1(a1);
      *(_QWORD *)(v14 + 24) = v13;
      return v14 | 0x1000000000000000;
    case 6:
      v15 = sub_1B201EBC8(a1 >> 8);
      if ((~v15 & 0xF000000000000007) == 0)
        return 0xF000000000000007;
      v16 = v15;
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v16;
      return v17 | 0x2000000000000000;
    case 7:
      return 0x8000000000000028;
    case 8:
      return 0x8000000000000030;
    case 9:
      return 0x8000000000000038;
    case 10:
      return 0x8000000000000040;
    case 11:
      return 0x8000000000000048;
    case 12:
      return 0x8000000000000050;
    case 13:
      v7 = 80;
      return v7 | 0x8000000000000008;
    case 14:
      return 0x8000000000000060;
    case 15:
      return 0x8000000000000070;
    case 16:
      return 0x8000000000000080;
    case 17:
      return 0x8000000000000088;
    case 18:
      v7 = 144;
      return v7 | 0x8000000000000008;
    case 19:
      return 0x80000000000000A0;
    case 20:
      v10 = swift_allocObject();
      v11 = 1;
      goto LABEL_42;
    case 21:
      return 0x80000000000000B0;
    case 22:
      return 0x8000000000000078;
    case 23:
      v19 = swift_allocObject();
      *(_BYTE *)(v19 + 16) = 0;
      return v19 | 0x4000000000000000;
    case 24:
      return 0x8000000000000068;
    case 25:
      return 0x8000000000000020;
    case 26:
      v20 = sub_1B201EBC8(a1 >> 16);
      if ((~v20 & 0xF000000000000007) == 0)
        return 0xF000000000000007;
      v21 = v20;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = BYTE1(a1);
      *(_QWORD *)(v22 + 24) = v21;
      return v22 | 0x3000000000000000;
    case 27:
      if (a1 >= 0x10000)
      {
        result = sub_1B222967C();
        __break(1u);
      }
      else
      {
        v4 = sub_1B1B494FC(a1 >> 8);
        if (v4 == 7)
        {
          return 0xF000000000000007;
        }
        else
        {
          v5 = v4;
          v6 = swift_allocObject();
          *(_BYTE *)(v6 + 16) = v5;
          return v6 | 0x6000000000000000;
        }
      }
      return result;
    case 28:
      v10 = swift_allocObject();
      v11 = 3;
      goto LABEL_42;
    case 29:
      v10 = swift_allocObject();
      v11 = 2;
LABEL_42:
      *(_BYTE *)(v10 + 16) = v11;
      return v10 | 0x4000000000000000;
    case 30:
      v18 = swift_allocObject();
      *(_BYTE *)(v18 + 16) = 0;
      return v18 | 0x5000000000000000;
    case 31:
      v7 = 176;
      return v7 | 0x8000000000000008;
    case 32:
      v18 = swift_allocObject();
      *(_BYTE *)(v18 + 16) = 1;
      return v18 | 0x5000000000000000;
    case 33:
      return 0x8000000000000090;
    case 34:
      v7 = 160;
      return v7 | 0x8000000000000008;
    default:
      return 0xF000000000000007;
  }
}

uint64_t sub_1B201EFA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[7];

  v3 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v1)
  {
    sub_1B19FA070(v9, v9[3]);
    v4 = sub_1B2229D90();
    v5 = v4;
    v6 = sub_1B201EBC8(v4);
    if ((~v6 & 0xF000000000000007) != 0)
    {
      v3 = v6;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      return v3;
    }
    v9[6] = v5;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v3 = 0x3A65707954796E41;
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v7 = 0x3A65707954796E41;
    *(_QWORD *)(v7 + 8) = 0xE900000000000020;
    *(_BYTE *)(v7 + 16) = 0;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_1B201F0F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B201EFA0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B201F11C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  v2 = *v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B201E8B0(v2);
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B2229E14();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B201F1BC()
{
  return swift_deallocObject();
}

uint64_t sub_1B201F1CC()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B201F1F0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

void sub_1B201F220()
{
  JUMPOUT(0x1B5E206E8);
}

uint64_t sub_1B201F22C()
{
  uint64_t v0;

  v0 = sub_1B2228B6C();
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v0);
  return sub_1B2228DF4() & 1;
}

uint64_t sub_1B201F284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v13 = sub_1B2229124();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v24 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228BB4();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v21, a6);
  MEMORY[0x1B5E20160](v21, a4, a6, a7, a8);
  v22 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1, a7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25, v16, a7);
}

void sub_1B201F3C4()
{
  JUMPOUT(0x1B5E20700);
}

void sub_1B201F3D0()
{
  sub_1B201F3C4();
}

uint64_t sub_1B201F3EC(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_1B201F3FC(uint64_t **a1, uint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  void (*v13)(_QWORD *);
  uint64_t v14;
  uint64_t v15;

  v7 = (uint64_t *)malloc(0x40uLL);
  *a1 = v7;
  v8 = a3[2];
  v9 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[5] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[6] = (uint64_t)v12;
  v13 = sub_1B201F53C(v7, *a2, *v3, v3[1], v8, v9, a3[4]);
  v15 = v14;
  v7[7] = (uint64_t)v13;
  (*(void (**)(char *))(*(_QWORD *)(v8 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v15, v9);
  return sub_1B201F4E8;
}

void sub_1B201F4E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_1B201F53C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  void *v16;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v15 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v15;
  v16 = malloc(*(_QWORD *)(v15 + 64));
  a1[2] = (uint64_t)v16;
  sub_1B201F284((uint64_t)v16, (uint64_t)v16 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, a4, a5, a6, a7);
  return sub_1B1E5AB0C;
}

uint64_t sub_1B201F60C()
{
  return sub_1B201F22C();
}

void sub_1B201F618()
{
  sub_1B201F220();
}

uint64_t sub_1B201F630@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = sub_1B201F758(a1, a2[2], a2[3], a2[4]);
  v6 = v5;
  result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  return result;
}

__n128 sub_1B201F67C@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1B201F68C(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22B1600, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B201F6C0(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22B1600, a1);
  return sub_1B2228DAC();
}

void sub_1B201F6F4()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B201F704()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B201F714(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x1B5E23E74](&unk_1B22B1600);
  result = MEMORY[0x1B5E23E74](&unk_1B22B15C8, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B201F758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  _QWORD v47[2];
  uint64_t v48;

  v8 = sub_1B2229124();
  MEMORY[0x1E0C80A78](v8, v9);
  v44 = (char *)&v34 - v10;
  v43 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v42 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v41 = (char *)&v34 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v40 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v18);
  v46 = (char *)&v34 - v20;
  MEMORY[0x1B5E206E8](a1, TupleTypeMetadata2, v19);
  v38 = a3;
  v45 = a4;
  v48 = sub_1B2228548();
  v47[1] = sub_1B2228B00();
  v37 = a2;
  v39 = sub_1B2228B6C();
  sub_1B2228AE8();
  if (MEMORY[0x1B5E20700](a1, TupleTypeMetadata2))
  {
    v21 = 0;
    v35 = &v46[*(int *)(TupleTypeMetadata2 + 48)];
    v36 = TupleTypeMetadata2;
    v34 = a1;
    v22 = v43;
    v23 = v41;
    v25 = v37;
    v24 = v38;
    v26 = v35;
    do
    {
      v27 = sub_1B2228B24();
      sub_1B1F3F71C(v27 & 1);
      if ((v27 & 1) != 0)
      {
        v28 = v46;
        (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v46, a1+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v21, TupleTypeMetadata2);
      }
      else
      {
        v47[0] = sub_1B2229460();
        v28 = v46;
        (*(void (**)(char *, _QWORD *, uint64_t))(v40 + 16))(v46, v47, TupleTypeMetadata2);
        swift_unknownObjectRelease();
      }
      ++v21;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v28, v25);
      v29 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      v30 = v42;
      v29(v42, v23, v25);
      sub_1B2228B48();
      v29(v30, v23, v25);
      v31 = *(_QWORD *)(v24 - 8);
      v32 = v44;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v44, v26, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v24);
      sub_1B22285A8();
      sub_1B22285C0();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v24);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v25);
      a1 = v34;
      TupleTypeMetadata2 = v36;
    }
    while (v21 != MEMORY[0x1B5E20700](v34, v36));
  }
  return v48;
}

unint64_t sub_1B201FA98(char *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *inited;
  uint64_t v13;
  char v14;

  sub_1B2228014();
  v8 = sub_1B22287B8();
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v8 == 2053403509 && v10 == 0xE400000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 6583157 && v10 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 6972015 && v10 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 7107699 && v10 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 6513249 && v10 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 7957616 && v10 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
      goto LABEL_10;
  }
  if ((a4 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for VFXCoreImporter();
    return sub_1B1F4FDBC(a1, a2);
  }
  type metadata accessor for MDLImporter();
  inited = (_QWORD *)swift_initStackObject();
  swift_retain();
  v13 = MEMORY[0x1E0DEE9D8];
  inited[4] = sub_1B1B80D74(MEMORY[0x1E0DEE9D8]);
  inited[5] = sub_1B1B80E68(v13);
  inited[6] = v13;
  inited[2] = a3;
  inited[3] = a2;
  sub_1B1F3A814((uint64_t)a1);
  swift_release();
  return 0;
}

uint64_t _s15RelationStorageVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s15RelationStorageVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t _s15RelationStorageVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *_s15RelationStorageVMa()
{
  return &_s15RelationStorageVN;
}

unint64_t sub_1B201FF60(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;

  v5 = v4;
  v8 = result;
  v9 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = a2;
    *(_QWORD *)(v10 + 24) = a3;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = sub_1B2020CF8;
    *(_QWORD *)(v11 + 24) = v10;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *(_QWORD *)(v5 + 208);
    *(_QWORD *)(v5 + 208) = 0x8000000000000000;
    v14 = sub_1B1DC3AC8(a2);
    v16 = v15;
    v17 = *(_QWORD *)(v13 + 16) + ((v15 & 1) == 0);
    if (*(_QWORD *)(v13 + 24) >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EAA4A8();
    }
    else
    {
      sub_1B1E94FD0(v17, isUniquelyReferenced_nonNull_native);
      v18 = sub_1B1DC3AC8(a2);
      if ((v16 & 1) != (v19 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v14 = v18;
    }
    *(_QWORD *)(v5 + 208) = v13;
    swift_bridgeObjectRelease();
    v20 = *(_QWORD **)(v5 + 208);
    swift_bridgeObjectRetain();
    if ((v16 & 1) == 0)
    {
      v21 = sub_1B2020CF8();
      sub_1B1EB32F8(v14, a2, v21, v22, v23, v20);
    }
    v24 = v20[7];
    swift_bridgeObjectRelease();
    v25 = (char **)(v24 + 24 * v14);
    v26 = *v25;
    v27 = swift_isUniquelyReferenced_nonNull_native();
    *v25 = v26;
    if ((v27 & 1) == 0)
    {
      v26 = sub_1B1C64334(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      *v25 = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      v26 = sub_1B1C64334(v28 > 1, v29 + 1, 1, v26);
      *v25 = v26;
    }
    *((_QWORD *)v26 + 2) = v29 + 1;
    v30 = &v26[16 * v29];
    *((_DWORD *)v30 + 8) = v8;
    *((_DWORD *)v30 + 9) = v9;
    *((_QWORD *)v30 + 5) = a4;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B20201AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v6;
  uint64_t (*v7)();
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  BOOL v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];

  v7 = sub_1B1E8DE94(v26, a2);
  v8 = *v6;
  if (*v6)
  {
    v9 = v6;
    v10 = *((_QWORD *)v8 + 2);
    if (v10)
    {
      v11 = 0;
      v12 = v8 + 44;
      while (1)
      {
        v13 = *(v12 - 3) == (_DWORD)a1 && *(v12 - 2) == HIDWORD(a1);
        v14 = v13 && *(v12 - 1) == (_DWORD)a4;
        if (v14 && *v12 == HIDWORD(a4))
          break;
        ++v11;
        v12 += 4;
        if (v10 == v11)
        {
          v11 = *((_QWORD *)v8 + 2);
          goto LABEL_36;
        }
      }
      if (v10 - 1 != v11)
      {
        v16 = v11 + 3;
        do
        {
          if (*(_OWORD *)&v8[16 * v16] != (_DWORD)a1
            || HIDWORD(*(_QWORD *)&v8[16 * v16]) != HIDWORD(a1)
            || *(_QWORD *)&v8[16 * v16 + 8] != (_DWORD)a4
            || HIDWORD(*(_OWORD *)&v8[16 * v16]) != HIDWORD(a4))
          {
            if (v16 - 2 != v11)
            {
              v25 = *(_OWORD *)&v8[16 * v16];
              v24 = *(_OWORD *)&v8[16 * v11 + 32];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *v9 = v8;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v8 = sub_1B1FFF054((uint64_t)v8);
                *v9 = v8;
              }
              *(_OWORD *)&v8[16 * v11 + 32] = v25;
              *(_OWORD *)&(*v9)[16 * v16] = v24;
              v8 = *v9;
            }
            ++v11;
          }
          v17 = v16 + 1;
          v18 = v16++ - 1;
        }
        while (v18 != *((_QWORD *)v8 + 2));
        v10 = v17 - 2;
      }
    }
    else
    {
      v11 = 0;
    }
LABEL_36:
    sub_1B1C94850(v11, v10);
  }
  return ((uint64_t (*)(_QWORD *, _QWORD))v7)(v26, 0);
}

uint64_t sub_1B2020330(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (*(_QWORD *)(*(_QWORD *)(v1 + 208) + 16) && (sub_1B1DC3AC8(a1), (v2 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return MEMORY[0x1E0DEE9D8];
}

BOOL sub_1B202037C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  return a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t sub_1B20203B0(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1A0895C();
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B202049C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B2020D18(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B20204D0(_QWORD *a1)
{
  return sub_1B20203B0(a1);
}

uint64_t sub_1B20204E8()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B20204FC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = a1();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1B2020528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(v2 + 208);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v5 = sub_1B1DC3AC8(a2);
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v5) + 16);
  v8 = swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = v8 + 44;
  while (*(_DWORD *)(v9 - 12) != (_DWORD)a1 || *(_DWORD *)(v9 - 8) != HIDWORD(a1))
  {
    v9 += 16;
    if (!--v7)
      goto LABEL_10;
  }
  v11 = *(_QWORD *)(v9 - 4);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B20205BC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  int8x16_t v16;
  int32x2_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int v26;
  char v27;
  uint64_t v29;
  int v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v4 = *(_QWORD *)result;
  v5 = *(_OWORD *)(result + 8);
  v6 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v6)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    goto LABEL_55;
  }
  v7 = a3;
  v8 = a2;
  v32 = *(_OWORD *)(result + 8);
  v33 = a4;
  v9 = HIDWORD(a2);
  v10 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  swift_bridgeObjectRetain();
  v11 = 0;
  v12 = MEMORY[0x1E0DEE9D8];
  v34 = v7;
  do
  {
    v16 = *(int8x16_t *)(v4 + 16 * v11 + 32);
    v17 = vceq_s32(vrev64_s32(*(int32x2_t *)v16.i8), (int32x2_t)0xFFFFFFFF00000000);
    if ((v17.i32[1] & v17.i32[0] & 1) != 0)
    {
LABEL_8:
      v18 = 0;
      v19 = 1;
      goto LABEL_9;
    }
    v18 = 0;
    v19 = 1;
    if ((v16.i32[0] & 0x80000000) == 0 && v10[1] > v16.i32[0])
    {
      if (v16.i32[1] != -1 && *(_DWORD *)(*v10 + 12 * v16.i32[0] + 8) != v16.i32[1])
        goto LABEL_8;
      v22 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 8 * *(int *)(*v10 + 12 * v16.i32[0]) + 32);
      v18 = *(_DWORD *)(v22 + 28);
      v19 = *(unsigned __int8 *)(v22 + 32);
    }
LABEL_9:
    if ((_BYTE)v9)
    {
      if (v9 != 1)
        goto LABEL_25;
      if (v19)
      {
        v20 = 1;
        goto LABEL_29;
      }
      if (v18 == v8)
      {
LABEL_25:
        v24 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (int32x2_t)0xFFFFFFFF00000000);
        if ((v24.i32[1] & v24.i32[0] & 1) != 0)
          goto LABEL_6;
        v20 = 1;
        goto LABEL_30;
      }
      v20 = 0;
LABEL_29:
      v25 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (int32x2_t)0xFFFFFFFF00000000);
      if ((v25.i32[1] & v25.i32[0] & 1) != 0)
        goto LABEL_46;
LABEL_30:
      v26 = 0;
      v27 = 1;
      if ((v16.i32[2] & 0x80000000) == 0 && v10[1] > v16.i32[2])
      {
        if (v16.i32[3] != -1 && *(_DWORD *)(*v10 + 12 * v16.i32[2] + 8) != v16.i32[3])
        {
LABEL_46:
          v26 = 0;
          v27 = 1;
          v30 = v9;
          if ((_BYTE)v9)
          {
LABEL_39:
            if (v30 != 1)
              goto LABEL_6;
            v31 = v26 == v8 ? 1 : v27;
            if ((v31 & 1) != 0 || v20)
              goto LABEL_6;
            goto LABEL_51;
          }
          goto LABEL_47;
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 8 * *(int *)(*v10 + 12 * v16.i32[2]) + 32);
        v26 = *(_DWORD *)(v29 + 28);
        v27 = *(_BYTE *)(v29 + 32);
      }
      v30 = v9;
      if ((_BYTE)v9)
        goto LABEL_39;
LABEL_47:
      if ((v27 & 1) != 0)
      {
        if (v20)
          goto LABEL_6;
      }
      else if (v20 || v26 == v8)
      {
        goto LABEL_6;
      }
      goto LABEL_51;
    }
    if ((v19 & 1) == 0)
    {
      v20 = v18 == v8;
      goto LABEL_29;
    }
    v23 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (int32x2_t)0xFFFFFFFF00000000);
    if ((v23.i32[1] & v23.i32[0] & 1) == 0)
    {
      v20 = 0;
      goto LABEL_30;
    }
LABEL_51:
    v35 = *(_OWORD *)(v4 + 16 * v11 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_1B202B1D8(0, *(_QWORD *)(v12 + 16) + 1, 1);
    v14 = *(_QWORD *)(v12 + 16);
    v13 = *(_QWORD *)(v12 + 24);
    v15 = v35;
    if (v14 >= v13 >> 1)
    {
      sub_1B202B1D8(v13 > 1, v14 + 1, 1);
      v15 = v35;
    }
    *(_QWORD *)(v12 + 16) = v14 + 1;
    *(_OWORD *)(v12 + 16 * v14 + 32) = v15;
    v7 = v34;
LABEL_6:
    ++v11;
  }
  while (v6 != v11);
  result = swift_bridgeObjectRelease();
  a4 = v33;
  v5 = v32;
LABEL_55:
  *(_QWORD *)a4 = v12;
  *(_OWORD *)(a4 + 8) = v5;
  return result;
}

uint64_t sub_1B20208D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  __int128 v36;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    v5 = a4;
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = 0;
    v34 = v5;
    while (1)
    {
      v9 = vceq_s32(vrev64_s32(*(int32x2_t *)(v5 + 16 * v8 + 32)), (int32x2_t)0xFFFFFFFF00000000);
      if ((v9.i32[1] & v9.i32[0] & 1) == 0)
      {
        v36 = *(_OWORD *)(v5 + 16 * v8 + 32);
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = a2;
        *(_QWORD *)(v10 + 24) = a3;
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = sub_1B2021190;
        *(_QWORD *)(v11 + 24) = v10;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v13 = *(_QWORD *)(v7 + 208);
        *(_QWORD *)(v7 + 208) = 0x8000000000000000;
        v14 = sub_1B1DC3AC8(a2);
        v16 = v15;
        v17 = *(_QWORD *)(v13 + 16) + ((v15 & 1) == 0);
        if (*(_QWORD *)(v13 + 24) >= v17)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1B1EAA4A8();
        }
        else
        {
          sub_1B1E94FD0(v17, isUniquelyReferenced_nonNull_native);
          v18 = sub_1B1DC3AC8(a2);
          if ((v16 & 1) != (v19 & 1))
          {
            result = sub_1B2229FC4();
            __break(1u);
            return result;
          }
          v14 = v18;
        }
        *(_QWORD *)(v7 + 208) = v13;
        swift_bridgeObjectRelease();
        v20 = *(_QWORD **)(v7 + 208);
        v21 = swift_bridgeObjectRetain();
        if ((v16 & 1) == 0)
        {
          v22 = (*(uint64_t (**)(uint64_t))(v11 + 16))(v21);
          v20[(v14 >> 6) + 8] |= 1 << v14;
          *(_QWORD *)(v20[6] + 8 * v14) = a2;
          v23 = (uint64_t *)(v20[7] + 24 * v14);
          *v23 = v22;
          v23[1] = v24;
          v23[2] = v25;
          ++v20[2];
        }
        v26 = v20[7];
        swift_bridgeObjectRelease();
        v27 = (char **)(v26 + 24 * v14);
        v28 = *v27;
        v29 = swift_isUniquelyReferenced_nonNull_native();
        *v27 = v28;
        if ((v29 & 1) == 0)
        {
          v28 = sub_1B1C64334(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
          *v27 = v28;
        }
        v31 = *((_QWORD *)v28 + 2);
        v30 = *((_QWORD *)v28 + 3);
        v32 = v36;
        if (v31 >= v30 >> 1)
        {
          v33 = sub_1B1C64334(v30 > 1, v31 + 1, 1, v28);
          v32 = v36;
          v28 = v33;
          *v27 = v33;
        }
        v5 = v34;
        *((_QWORD *)v28 + 2) = v31 + 1;
        *(_OWORD *)&v28[16 * v31 + 32] = v32;
        swift_release();
        swift_release();
      }
      if (v4 == ++v8)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B2020B94(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1B6AEE0();
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B202102C();
    sub_1B20210C4(&qword_1EEF622E8, (uint64_t (*)(void))sub_1B2021128, MEMORY[0x1E0DEAF10]);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B2020CA0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B2020EA4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B2020CCC(_QWORD *a1)
{
  return sub_1B2020B94(a1);
}

uint64_t sub_1B2020CE8()
{
  return swift_deallocObject();
}

uint64_t sub_1B2020CF8()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B2020D08()
{
  return swift_deallocObject();
}

uint64_t sub_1B2020D18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  v3 = a1[3];
  sub_1B19FA070(a1, v3);
  sub_1B222A12C();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B1A08878();
    sub_1B2229AA8();
    v3 = v7;
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B2229AA8();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t assignWithCopy for RelationsCoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RelationsCoder()
{
  return &type metadata for RelationsCoder;
}

ValueMetadata *type metadata accessor for RelationPair()
{
  return &type metadata for RelationPair;
}

uint64_t sub_1B2020EA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;

  v3 = a1[3];
  sub_1B19FA070(a1, v3);
  sub_1B222A12C();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v3;
  }
  sub_1B19FC264((uint64_t)v6, v7);
  sub_1B1B6AE04();
  sub_1B2229AA8();
  v3 = v5;
  result = swift_conformsToProtocol2();
  if (result)
  {
    result = swift_conformsToProtocol2();
    if (result)
    {
      sub_1B202102C();
      sub_1B19FC264((uint64_t)v6, v7);
      sub_1B20210C4((unint64_t *)&unk_1ED4BA360, (uint64_t (*)(void))sub_1B2021080, MEMORY[0x1E0DEAF40]);
      sub_1B2229AA8();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1B202102C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA358)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA358);
  }
}

unint64_t sub_1B2021080()
{
  unint64_t result;

  result = qword_1ED4B8408;
  if (!qword_1ED4B8408)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B174C, &type metadata for RelationPair);
    atomic_store(result, (unint64_t *)&qword_1ED4B8408);
  }
  return result;
}

uint64_t sub_1B20210C4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B202102C();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B2021128()
{
  unint64_t result;

  result = qword_1ED4B8400;
  if (!qword_1ED4B8400)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1724, &type metadata for RelationPair);
    atomic_store(result, (unint64_t *)&qword_1ED4B8400);
  }
  return result;
}

uint64_t sub_1B202116C()
{
  return swift_deallocObject();
}

uint64_t sub_1B202117C()
{
  return swift_deallocObject();
}

void sub_1B2021194(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, char a6, float32x4_t a7, float32x4_t a8, float a9)
{
  float32x4_t *v9;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v58;
  float32x4_t v59;

  v16 = v9 + 1;
  v18 = v9[2].i64[1];
  v17 = v9[3].i64[0];
  sub_1B19FA070((float32x4_t *)v9[1].i64, v18);
  v19 = (*(float (**)(uint64_t, uint64_t))(v17 + 56))(v18, v17);
  if (v19 > 0.0)
  {
    v20 = v19;
    if (v19 >= 1.0 || (v21 = drand48(), v20 > v21))
    {
      v22 = v9[12].i64[1];
      *(_QWORD *)(v9[11].i64[1] + 8 * v22) = a1;
      v9[12].i64[1] = v22 + 1;
    }
  }
  if (v9[4].i8[4] == 1)
  {
    v23 = vsubq_f32(a7, *a2);
    v58 = v23;
    v55 = *a3;
    v23.i32[3] = HIDWORD(*(unsigned __int128 *)a3);
    *a3 = v23;
    v24 = v9[2].i64[1];
    v25 = v9[3].i64[0];
    sub_1B19FA070(v16, v24);
    v26 = (*(float (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
    v27 = v9[2].i64[1];
    v28 = v9[3].i64[0];
    sub_1B19FA070(v16, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
    v30 = v58;
    v31 = vaddq_f32(v58, *v9);
    v32 = vmulq_f32(v31, a8);
    v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
    if (v33 < 0.0)
    {
      v34 = vmulq_n_f32(a8, v33);
      v30 = vmlaq_n_f32(vmulq_n_f32(v34, -v26), vsubq_f32(v31, v34), v29);
    }
    v30.i32[3] = v55.i32[3];
    v59 = v30;
    *a3 = v30;
  }
  else
  {
    v35 = v9[2].i64[1];
    v36 = v9[3].i64[0];
    sub_1B19FA070(v16, v35);
    v37 = (*(float (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
    v38 = v9[2].i64[1];
    v39 = v9[3].i64[0];
    sub_1B19FA070(v16, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 32))(v38, v39);
    v41 = vaddq_f32(*v9, *a3);
    v42 = vmulq_f32(v41, a8);
    v43 = *a2;
    v44 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
    if (v44 >= 0.0)
    {
      v47 = *a2;
      v46 = *a3;
    }
    else
    {
      v45 = vmulq_n_f32(a8, v44);
      v46 = vmlaq_n_f32(vmulq_n_f32(v45, -v37), vsubq_f32(v41, v45), v40);
      v47 = vmlaq_n_f32(vmlaq_f32(a7, (float32x4_t)vdupq_n_s32(0x38D1B717u), a8), v46, (float)(1.0 - a9) * v9[4].f32[0]);
    }
    v46.i32[3] = HIDWORD(*(unsigned __int128 *)a3);
    v59 = v46;
    *a3 = v46;
    v47.i32[3] = v43.i32[3];
    *a2 = v47;
  }
  v48 = v9[2].i64[1];
  v49 = v9[3].i64[0];
  sub_1B19FA070(v16, v48);
  v50 = (*(float (**)(uint64_t, uint64_t))(v49 + 80))(v48, v49);
  if (v50 > 0.0)
  {
    v51 = v50;
    if (v50 >= 1.0 || (v52 = drand48(), v51 > v52))
    {
      v53 = v9[14].i64[0];
      v54 = v9[13].i64[0] + 80 * v53;
      *(float32x4_t *)v54 = vaddq_f32(vmulq_f32(a8, (float32x4_t)vdupq_n_s32(0x3C23D70Au)), a7);
      *(float32x4_t *)(v54 + 16) = a8;
      *(float32x4_t *)(v54 + 32) = v59;
      *(_QWORD *)(v54 + 48) = a4;
      *(_QWORD *)(v54 + 56) = a5;
      *(_BYTE *)(v54 + 64) = a6 & 1;
      v9[14].i64[0] = v53 + 1;
    }
  }
}

BOOL sub_1B20214D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  _BYTE v5[40];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12[12];
  _QWORD v13[13];

  v13[12] = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v1 = qword_1ED4D09F8;
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleCollide;
  *(_QWORD *)(inited + 40) = &off_1E6384A48;
  v6 = v1;
  v7 = 0;
  v8 = 2;
  v9 = 0;
  v10 = 2;
  v11 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v5);
  swift_setDeallocating();
  swift_release();
  sub_1B1E8FCE4(v0, (uint64_t)v5, 0x200000000, v12);
  sub_1B19ED720((uint64_t)v5);
  sub_1B19ED688((uint64_t)v12, (uint64_t)v13);
  v3 = v13[0];
  if (v13[0])
    sub_1B19ED748(v12);
  return v3 != 0;
}

uint64_t sub_1B202164C()
{
  sub_1B2022F68();
  return sub_1B2228A94();
}

uint64_t sub_1B20216A8()
{
  sub_1B2022F68();
  return sub_1B2228A1C();
}

_DWORD *sub_1B20216F4@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1B2021700@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1B2021714@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1B2021728@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B202173C(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1B202176C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1B2021798@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1B20217BC(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1B20217D0(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1B20217E4(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1B20217F8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B202180C(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B2021820(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1B2021834(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B2021848()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_1B2021858(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B202186C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

double sub_1B20218C0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t sub_1B20218E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B2021924 + 4 * byte_1B22B1810[a1]))(0xD000000000000015, 0x80000001B2329A10);
}

uint64_t sub_1B2021924()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_1B202193C()
{
  return 0x6963697473616C65;
}

uint64_t sub_1B2021958()
{
  return 0x6E6F697463697266;
}

unint64_t sub_1B2021970()
{
  return 0xD000000000000010;
}

uint64_t sub_1B202198C()
{
  return 0x73726579616CLL;
}

uint64_t sub_1B20219A0()
{
  return 0x696E69666E497369;
}

uint64_t sub_1B20219BC()
{
  return 0x656C62756F447369;
}

uint64_t sub_1B20219E0()
{
  return 0x65747845666C6168;
}

uint64_t sub_1B2021A00()
{
  return 0x61746144666473;
}

uint64_t sub_1B2021A18()
{
  return 0x656469736E69;
}

uint64_t sub_1B2021A2C()
{
  return 0x615272656E726F63;
}

uint64_t sub_1B2021A4C()
{
  return 1752393069;
}

uint64_t sub_1B2021A5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B2021A9C + 4 * byte_1B22B181D[a1]))(0xD000000000000015, 0x80000001B2329A10);
}

uint64_t sub_1B2021A9C()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_1B2021AB4()
{
  return 0x6963697473616C65;
}

uint64_t sub_1B2021AD0()
{
  return 0x6E6F697463697266;
}

unint64_t sub_1B2021AE8()
{
  return 0xD000000000000010;
}

uint64_t sub_1B2021B04()
{
  return 0x73726579616CLL;
}

uint64_t sub_1B2021B18()
{
  return 0x696E69666E497369;
}

uint64_t sub_1B2021B34()
{
  return 0x656C62756F447369;
}

uint64_t sub_1B2021B58()
{
  return 0x65747845666C6168;
}

uint64_t sub_1B2021B78()
{
  return 0x61746144666473;
}

uint64_t sub_1B2021B90()
{
  return 0x656469736E69;
}

uint64_t sub_1B2021BA4()
{
  return 0x615272656E726F63;
}

uint64_t sub_1B2021BC4()
{
  return 1752393069;
}

uint64_t sub_1B2021BD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B2021A5C(*a1);
  v5 = v4;
  if (v3 == sub_1B2021A5C(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B2021C5C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B20218E4(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2021CBC()
{
  unsigned __int8 *v0;

  sub_1B20218E4(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2021CFC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B20218E4(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2021D58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B20226FC();
  *a1 = result;
  return result;
}

uint64_t sub_1B2021D84@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B20218E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2021DAC()
{
  unsigned __int8 *v0;

  return sub_1B2021A5C(*v0);
}

uint64_t sub_1B2021DB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B20226FC();
  *a1 = result;
  return result;
}

uint64_t sub_1B2021DD8()
{
  sub_1B1C389CC();
  return sub_1B222A1D4();
}

uint64_t sub_1B2021E00()
{
  sub_1B1C389CC();
  return sub_1B222A1E0();
}

uint64_t sub_1B2021E28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[3];
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  char v20;

  v1 = a1[10];
  v2 = a1[11];
  v3 = a1[23];
  v4 = a1[24];
  v5 = a1[25];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v20 = 5;
  if (v5 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v5 == *(_QWORD *)(v1 + 240) - *(_QWORD *)(v1 + 232))
    {
      sub_1B1BE90FC((uint64_t)v18, (uint64_t)v15);
      v17 = 0;
      v16 = 0uLL;
    }
    else
    {
      sub_1B1BE90FC((uint64_t)v18, (uint64_t)v15);
      *(_QWORD *)&v16 = v3;
      *((_QWORD *)&v16 + 1) = v4;
      v17 = v5;
    }
    v6 = *(_QWORD **)(v2 + 104);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 104) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = sub_1B1C631A0(0, v6[2] + 1, 1, v6);
      *(_QWORD *)(v2 + 104) = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = sub_1B1C631A0(v8 > 1, v9 + 1, 1, v6);
      *(_QWORD *)(v2 + 104) = v6;
    }
    v6[2] = v9 + 1;
    v10 = &v6[9 * v9];
    *((_OWORD *)v10 + 2) = v15[0];
    v11 = v15[1];
    v12 = v15[2];
    v13 = v16;
    v10[12] = v17;
    *((_OWORD *)v10 + 4) = v12;
    *((_OWORD *)v10 + 5) = v13;
    *((_OWORD *)v10 + 3) = v11;
  }
  sub_1B1B68F14((uint64_t)v18);
  return swift_release();
}

__n128 sub_1B2021F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = sub_1B1A12038((uint64_t)&type metadata for ParticleCollisionEvent, (uint64_t)&off_1E63A8020, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56) - v6;
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 208) + 80 * *(_QWORD *)(a1 + 24);
    v10 = v4 + 80 * v6;
    do
    {
      result = *(__n128 *)(v9 + v8);
      v11 = *(_OWORD *)(v9 + v8 + 16);
      v12 = *(_BYTE *)(v9 + v8 + 64);
      v13 = v10 + v8;
      v14 = *(_OWORD *)(v9 + v8 + 32);
      v15 = *(_OWORD *)(v9 + v8 + 48);
      *(__n128 *)v13 = result;
      *(_OWORD *)(v13 + 16) = v11;
      *(_OWORD *)(v13 + 32) = v14;
      *(_OWORD *)(v13 + 48) = v15;
      *(_BYTE *)(v13 + 64) = v12;
      v8 += 80;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B2022014()
{
  return type metadata accessor for ParticleCollide.CPUSystem();
}

void sub_1B2022030(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xFF00000000;
}

float sub_1B2022040@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float result;
  int v12;
  __int128 v13;
  uint64_t v14;

  sub_1B20226A0(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v13 = 0uLL;
  v14 = 0xFF00000000;
  sub_1B1C37430(a1, 1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    result = *(float *)&v14;
    v12 = HIDWORD(v14);
    *(_OWORD *)a2 = v13;
    *(float *)(a2 + 16) = result;
    *(_DWORD *)(a2 + 20) = v12;
  }
  return result;
}

uint64_t sub_1B2022128(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;

  sub_1B20226A0(0, &qword_1EEF5CA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  v11 = *v1;
  v12 = *((_QWORD *)v1 + 2);
  result = sub_1B1C36AB0(a1, (uint64_t)&v11 - v8);
  if (!v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

uint64_t sub_1B20221E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  int v29;
  unsigned int v30;
  unsigned __int8 v31;

  v2 = v1;
  v4 = *(_QWORD *)a1;
  v5 = (int *)(a1 + 40);
  swift_retain();
  sub_1B1BE9FDC(v5, (uint64_t)&v29);
  sub_1B1BE9FDC(&v29, (uint64_t)&v30);
  v6 = v31;
  v7 = v30;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(int *)(a1 + 8);
  swift_retain();
  v10 = (_DWORD)v9 == -1 && v8 == 0;
  if (!v10
    && (v9 & 0x80000000) == 0
    && *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v9
    && ((v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v8 == -1)
     || *(_DWORD *)(v11 + 12 * (int)v9 + 8) == v8))
  {
    v12 = sub_1B1D1F940(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v11 + 12 * (int)v9) + 32), *(_DWORD *)(v11 + 12 * (int)v9), *(_WORD *)(v11 + 12 * (int)v9 + 4), 24, v4);
    v14 = v25;
    v16 = v26;
    v28 = v27;
    swift_release();
    if ((v28 & 1) == 0)
    {
      v13 = HIDWORD(v12);
      v15 = HIDWORD(v14);
      v17 = HIDWORD(v16);
      goto LABEL_11;
    }
  }
  else
  {
    swift_release();
  }
  LODWORD(v12) = 0;
  LODWORD(v13) = 0;
  LODWORD(v14) = 0;
  LODWORD(v15) = 0;
  LODWORD(v16) = 0;
  LODWORD(v17) = 255;
LABEL_11:
  *(_DWORD *)(v2 + 64) = v12;
  *(_DWORD *)(v2 + 68) = v13;
  *(_DWORD *)(v2 + 72) = v14;
  *(_DWORD *)(v2 + 76) = v15;
  *(_DWORD *)(v2 + 80) = v16;
  *(_DWORD *)(v2 + 84) = v17;
  if ((_DWORD)v17)
  {
    sub_1B1E5267C();
    *(float *)(v2 + 160) = v18;
    if (v18 != 0.0)
    {
      *(double *)&v19 = sub_1B1E52854();
      *(_OWORD *)(v2 + 96) = v19;
      *(_OWORD *)(v2 + 112) = v20;
      *(_OWORD *)(v2 + 128) = v21;
      *(_OWORD *)(v2 + 144) = v22;
      if (v6)
        v23 = 0x200000000;
      else
        v23 = v7 | 0x100000000;
      sub_1B1C374BC(v4, v23);
      sub_1B1D52F24(v4, v23);
      sub_1B1D4CCCC(v4, v23);
      sub_1B1D72FD8(v4, v23);
      sub_1B1FC94F8(v4, v23);
      sub_1B1EE0408(v4, v23);
    }
  }
  return swift_release();
}

uint64_t sub_1B20223BC()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleCollide.CPUSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2022408(_QWORD *a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1B2022744(a1);
  sub_1B1B4F21C((uint64_t)a1);
  return v2;
}

const char *sub_1B2022454()
{
  return "ParticleColliders.CPU";
}

uint64_t sub_1B2022468()
{
  return qword_1EEF5DE18 + 5;
}

uint64_t type metadata accessor for ParticleCollide.GPUSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ParticleCollide()
{
  return &type metadata for ParticleCollide;
}

uint64_t sub_1B20224A8(_OWORD *a1)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  _DWORD v26[6];

  v25 = a1[1];
  v2 = *((_QWORD *)a1 + 2);
  swift_retain();
  *(double *)v3.i64 = sub_1B1E52854();
  v23 = v4;
  v24 = v3;
  v21 = v6;
  v22 = v5;
  swift_retain();
  v7 = sub_1B1D17710(*((unint64_t *)&v25 + 1));
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_release();
  if ((v13 & 1) != 0)
    v14 = 0;
  else
    v14 = v7;
  if ((v13 & 1) != 0)
    v15 = 0.0;
  else
    v15 = *((float *)&v7 + 1);
  if ((v13 & 1) != 0)
    v16 = 0.0;
  else
    v16 = *(float *)&v9;
  if ((v13 & 1) != 0)
    v17 = 0.0;
  else
    v17 = *((float *)&v9 + 1);
  if ((v13 & 1) != 0)
    v18 = 0.0;
  else
    v18 = *(float *)&v11;
  v26[0] = v14;
  *(float *)&v26[1] = v15;
  *(float *)&v26[2] = v16;
  if ((v13 & 1) != 0)
    v19 = 255;
  else
    v19 = HIDWORD(v11);
  *(float *)&v26[3] = v17;
  *(float *)&v26[4] = v18;
  v26[5] = v19;
  sub_1B1C3918C(v19, v2, a1, v15, v16, v17, v18, v24, v23, v22, v21);
  sub_1B1D537E8(v19, v2, (uint64_t)a1, v15, v16, v17, v18, v24, v23, v22, v21);
  sub_1B1D4DD7C((uint64_t)v26, v2, (uint64_t)a1, v24, v23, v22, v21);
  sub_1B1D73D3C(v19, v2, (uint64_t)a1, v15, v16, v17, v18, v24, v23, v22, v21);
  sub_1B1FCA9B0(v19, v2, (void **)a1, v15, v16, v17, v18, v24, v23, v22, v21);
  return swift_release();
}

const char *sub_1B2022670()
{
  return "ParticleColliders.GPU";
}

uint64_t sub_1B2022684()
{
  return type metadata accessor for ParticleCollide.GPUSystem();
}

void sub_1B20226A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1C389CC();
    v7 = a3(a1, &type metadata for ParticleCollidableCodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B20226FC()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD)
    return 13;
  else
    return v0;
}

uint64_t sub_1B2022744(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v2 = v1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0xFF00000000;
  *(_OWORD *)(v1 + 96) = xmmword_1B2244DB0;
  *(_OWORD *)(v1 + 112) = xmmword_1B2244DD0;
  *(_OWORD *)(v1 + 128) = xmmword_1B2244D90;
  *(_OWORD *)(v1 + 144) = xmmword_1B2244E20;
  *(_DWORD *)(v1 + 160) = 0;
  v4 = *a1;
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  swift_retain();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleCollisionEvent;
  *(_QWORD *)(inited + 40) = &off_1E63A8020;
  *(_QWORD *)(inited + 48) = &type metadata for NewEvent;
  *(_QWORD *)(inited + 56) = &off_1E63C1F70;
  sub_1B1B7AA28();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  v22 = a1;
  *(_QWORD *)(v6 + 32) = a1[4];
  *(_QWORD *)(v6 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v6 + 64) = &off_1E6387218;
  *(_QWORD *)(v6 + 96) = &type metadata for AnonymousEntity;
  *(_QWORD *)(v6 + 104) = &off_1E63832E0;
  v7 = v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  v8 = sub_1B1DADA68(inited);
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B1DAD000(v9, v6);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = sub_1B1DA8760(v10);
  if ((v14 & 1) != 0 || (v15 = sub_1B1DA87D4(v12, v13), (v15 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v16 = sub_1B1DA8838(v10, v12, (uint64_t)v8, v6);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v16 = v15;
    swift_bridgeObjectRelease();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v16 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_release();
  *(_QWORD *)(v2 + 16) = v17;
  v19 = *(_OWORD *)(v22 + 13);
  v25 = *(_OWORD *)(v22 + 11);
  v26 = v19;
  v27 = v22[15];
  sub_1B19EFB98((uint64_t)v23);
  v20 = v23[1];
  *(_OWORD *)(v2 + 24) = v23[0];
  *(_OWORD *)(v2 + 40) = v20;
  *(_QWORD *)(v2 + 56) = v24;
  return v2;
}

uint64_t getEnumTagSinglePayload for ParticleCollisionEvent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParticleCollisionEvent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 65) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleCollisionEvent()
{
  return &type metadata for ParticleCollisionEvent;
}

uint64_t destroy for CollisionHandler(uint64_t a1)
{
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
  return swift_release();
}

uint64_t initializeWithCopy for CollisionHandler(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollisionHandler(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1B1E354A4((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v4 = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  return a1;
}

__n128 initializeWithTake for CollisionHandler(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for CollisionHandler(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollisionHandler(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollisionHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionHandler()
{
  return &type metadata for CollisionHandler;
}

ValueMetadata *type metadata accessor for CollisionProperties()
{
  return &type metadata for CollisionProperties;
}

uint64_t storeEnumTagSinglePayload for ParticleCollidableCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1B2022E44 + 4 * byte_1B22B182F[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1B2022E78 + 4 * byte_1B22B182A[v4]))();
}

uint64_t sub_1B2022E78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2022E80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2022E88);
  return result;
}

uint64_t sub_1B2022E94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2022E9CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1B2022EA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2022EA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleCollidableCodingKeys()
{
  return &type metadata for ParticleCollidableCodingKeys;
}

ValueMetadata *type metadata accessor for CollisionLayerSet()
{
  return &type metadata for CollisionLayerSet;
}

unint64_t sub_1B2022ED8()
{
  unint64_t result;

  result = qword_1EEF622F0;
  if (!qword_1EEF622F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1A74, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF622F0);
  }
  return result;
}

unint64_t sub_1B2022F20()
{
  unint64_t result;

  result = qword_1EEF622F8;
  if (!qword_1EEF622F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1A44, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF622F8);
  }
  return result;
}

unint64_t sub_1B2022F68()
{
  unint64_t result;

  result = qword_1EEF62300;
  if (!qword_1EEF62300)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1A9C, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF62300);
  }
  return result;
}

unint64_t sub_1B2022FB0()
{
  unint64_t result;

  result = qword_1EEF62308;
  if (!qword_1EEF62308)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1AD4, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF62308);
  }
  return result;
}

unint64_t sub_1B2022FF4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B2023018();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B2023018()
{
  unint64_t result;

  result = qword_1EEF62310;
  if (!qword_1EEF62310)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1B9C, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF62310);
  }
  return result;
}

unint64_t sub_1B2023060()
{
  unint64_t result;

  result = qword_1EEF62318;
  if (!qword_1EEF62318)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1CB8, &type metadata for ParticleCollidableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62318);
  }
  return result;
}

unint64_t sub_1B20230A8()
{
  unint64_t result;

  result = qword_1EEF62320;
  if (!qword_1EEF62320)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1BF0, &type metadata for ParticleCollidableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62320);
  }
  return result;
}

unint64_t sub_1B20230F0()
{
  unint64_t result;

  result = qword_1EEF62328;
  if (!qword_1EEF62328)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1C18, &type metadata for ParticleCollidableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62328);
  }
  return result;
}

uint64_t sub_1B202315C(unsigned __int8 a1)
{
  if (a1 > 0x65u)
    return 0;
  else
    return qword_1B22B2190[(char)a1];
}

void sub_1B2023184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v3, v4);
  __asm { BR              X9 }
}

uint64_t sub_1B2024268(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1B2227E4C();
  if (v6)
    v6 += a1 - sub_1B2227E70();
  v7 = sub_1B2227E64();
  v8 = a2 - a1;
  if (v7 < a2 - a1)
    v8 = v7;
  v9 = v6 + v8;
  if (v6)
    v10 = v9;
  else
    v10 = 0;
  return a3(v6, v10);
}

unint64_t sub_1B20242F8()
{
  unint64_t result;

  result = qword_1EEF62338;
  if (!qword_1EEF62338)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2150, &type metadata for KTXLoadingError);
    atomic_store(result, (unint64_t *)&qword_1EEF62338);
  }
  return result;
}

uint64_t sub_1B202433C(int a1)
{
  uint64_t result;
  uint64_t v3;

  if (a1 <= 36165)
  {
    if (a1 > 33776)
    {
      if (a1 <= 35839)
      {
        if (a1 > 34835)
        {
          switch(a1)
          {
            case 34836:
              v3 = 37;
              goto LABEL_153;
            case 34837:
              v3 = 36;
              goto LABEL_153;
            case 34838:
            case 34839:
            case 34840:
            case 34841:
              goto LABEL_145;
            case 34842:
              v3 = 33;
              goto LABEL_153;
            case 34843:
              v3 = 32;
LABEL_153:
              result = v3;
              break;
            default:
              switch(a1)
              {
                case 35412:
                  result = 106;
                  break;
                case 35413:
                  result = 107;
                  break;
                case 35414:
                  result = 108;
                  break;
                case 35415:
                  result = 109;
                  break;
                default:
                  if (a1 != 35056)
                    goto LABEL_145;
                  result = 68;
                  break;
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 33777:
              return 110;
            case 33778:
              return 112;
            case 33779:
              return 114;
          }
LABEL_145:
          if (a1 > 35911)
          {
            result = 128;
            switch(a1)
            {
              case 37492:
                result = 130;
                break;
              case 37493:
                result = 131;
                break;
              case 37494:
                result = 132;
                break;
              case 37495:
                result = 133;
                break;
              case 37496:
                return result;
              case 37497:
                result = 129;
                break;
              default:
                if (a1 == 35912)
                {
                  result = 138;
                }
                else
                {
                  if (a1 != 35913)
                    return 140;
                  result = 139;
                }
                break;
            }
          }
          else
          {
            if (a1 > 34028)
            {
              if (a1 == 34029)
                return 136;
              if (a1 == 34030)
                return 137;
            }
            else
            {
              if (a1 == 33317)
                return 134;
              if (a1 == 33318)
                return 135;
            }
            return 140;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 35840:
            return 103;
          case 35841:
            return 102;
          case 35842:
            return 105;
          case 35843:
            return 104;
          case 35844:
          case 35845:
          case 35846:
          case 35847:
          case 35848:
          case 35849:
          case 35850:
          case 35851:
          case 35852:
          case 35853:
          case 35854:
          case 35855:
          case 35856:
          case 35857:
          case 35858:
          case 35859:
          case 35860:
          case 35861:
          case 35862:
          case 35863:
          case 35864:
          case 35865:
          case 35866:
          case 35867:
          case 35868:
          case 35869:
          case 35870:
          case 35871:
          case 35872:
          case 35873:
          case 35874:
          case 35875:
          case 35876:
          case 35877:
          case 35878:
          case 35879:
          case 35880:
          case 35881:
          case 35882:
          case 35883:
          case 35884:
          case 35885:
          case 35886:
          case 35887:
          case 35888:
          case 35889:
          case 35890:
          case 35891:
          case 35892:
          case 35893:
          case 35894:
          case 35895:
          case 35896:
          case 35897:
          case 35899:
          case 35900:
          case 35902:
          case 35903:
          case 35904:
          case 35906:
          case 35908:
          case 35909:
          case 35910:
          case 35911:
          case 35912:
          case 35913:
          case 35914:
          case 35915:
          case 35916:
            goto LABEL_145;
          case 35898:
            v3 = 38;
            goto LABEL_153;
          case 35901:
            v3 = 39;
            goto LABEL_153;
          case 35905:
            v3 = 28;
            goto LABEL_153;
          case 35907:
            v3 = 29;
            goto LABEL_153;
          case 35917:
            return 111;
          case 35918:
            return 113;
          case 35919:
            return 115;
          default:
            if (a1 == 36012)
            {
              result = 67;
            }
            else
            {
              if (a1 != 36013)
                goto LABEL_145;
              result = 69;
            }
            break;
        }
      }
    }
    else
    {
      v3 = 0;
      result = 44;
      switch(a1)
      {
        case 33189:
          result = 64;
          break;
        case 33190:
          result = 65;
          break;
        case 33191:
          result = 66;
          break;
        case 33192:
        case 33193:
        case 33194:
        case 33195:
        case 33196:
        case 33197:
        case 33198:
        case 33199:
        case 33200:
        case 33201:
        case 33202:
        case 33203:
        case 33204:
        case 33205:
        case 33206:
        case 33207:
        case 33208:
        case 33209:
        case 33210:
        case 33211:
        case 33212:
        case 33213:
        case 33214:
        case 33215:
        case 33216:
        case 33217:
        case 33218:
        case 33219:
        case 33220:
        case 33221:
        case 33222:
        case 33223:
        case 33224:
        case 33225:
        case 33226:
        case 33227:
        case 33228:
        case 33229:
        case 33230:
        case 33231:
        case 33232:
        case 33233:
        case 33234:
        case 33235:
        case 33236:
        case 33237:
        case 33238:
        case 33239:
        case 33240:
        case 33241:
        case 33242:
        case 33243:
        case 33244:
        case 33245:
        case 33246:
        case 33247:
        case 33248:
        case 33249:
        case 33250:
        case 33251:
        case 33252:
        case 33253:
        case 33254:
        case 33255:
        case 33256:
        case 33257:
        case 33258:
        case 33259:
        case 33260:
        case 33261:
        case 33262:
        case 33263:
        case 33264:
        case 33265:
        case 33266:
        case 33267:
        case 33268:
        case 33269:
        case 33270:
        case 33271:
        case 33272:
        case 33273:
        case 33274:
        case 33275:
        case 33276:
        case 33277:
        case 33278:
        case 33279:
        case 33280:
        case 33281:
        case 33282:
        case 33283:
        case 33284:
        case 33285:
        case 33286:
        case 33287:
        case 33288:
        case 33289:
        case 33290:
        case 33291:
        case 33292:
        case 33293:
        case 33294:
        case 33295:
        case 33296:
        case 33297:
        case 33298:
        case 33299:
        case 33300:
        case 33301:
        case 33302:
        case 33303:
        case 33304:
        case 33305:
        case 33306:
        case 33307:
        case 33308:
        case 33309:
        case 33310:
        case 33311:
        case 33312:
        case 33313:
        case 33314:
        case 33315:
        case 33316:
        case 33317:
        case 33318:
        case 33319:
        case 33320:
          goto LABEL_145;
        case 33321:
          goto LABEL_153;
        case 33322:
          v3 = 2;
          goto LABEL_153;
        case 33323:
          v3 = 4;
          goto LABEL_153;
        case 33324:
          v3 = 6;
          goto LABEL_153;
        case 33325:
          v3 = 30;
          goto LABEL_153;
        case 33326:
          v3 = 34;
          goto LABEL_153;
        case 33327:
          v3 = 31;
          goto LABEL_153;
        case 33328:
          v3 = 35;
          goto LABEL_153;
        case 33329:
          v3 = 40;
          goto LABEL_153;
        case 33330:
          v3 = 41;
          goto LABEL_153;
        case 33331:
          v3 = 42;
          goto LABEL_153;
        case 33332:
          v3 = 43;
          goto LABEL_153;
        case 33333:
          return result;
        case 33334:
          result = 45;
          break;
        case 33335:
          result = 46;
          break;
        case 33336:
          result = 47;
          break;
        case 33337:
          result = 48;
          break;
        case 33338:
          result = 49;
          break;
        case 33339:
          result = 50;
          break;
        case 33340:
          result = 51;
          break;
        default:
          switch(a1)
          {
            case 32847:
              v3 = 9;
              goto LABEL_153;
            case 32848:
              v3 = 10;
              goto LABEL_153;
            case 32849:
              v3 = 12;
              goto LABEL_153;
            case 32850:
              v3 = 14;
              goto LABEL_153;
            case 32851:
              v3 = 15;
              goto LABEL_153;
            case 32852:
              v3 = 16;
              goto LABEL_153;
            case 32853:
              v3 = 18;
              goto LABEL_153;
            case 32854:
              v3 = 19;
              goto LABEL_153;
            case 32855:
              v3 = 20;
              goto LABEL_153;
            case 32856:
              v3 = 21;
              goto LABEL_153;
            case 32857:
              v3 = 23;
              goto LABEL_153;
            case 32858:
              v3 = 25;
              goto LABEL_153;
            case 32859:
              v3 = 26;
              goto LABEL_153;
            default:
              if (a1 != 10768)
                goto LABEL_145;
              v3 = 8;
              break;
          }
          goto LABEL_153;
      }
    }
  }
  else if (a1 > 36974)
  {
    switch(a1)
    {
      case 37808:
        result = 74;
        break;
      case 37809:
        result = 75;
        break;
      case 37810:
        result = 76;
        break;
      case 37811:
        result = 77;
        break;
      case 37812:
        result = 78;
        break;
      case 37813:
        result = 79;
        break;
      case 37814:
        result = 80;
        break;
      case 37815:
        result = 81;
        break;
      case 37816:
        result = 82;
        break;
      case 37817:
        result = 83;
        break;
      case 37818:
        result = 84;
        break;
      case 37819:
        result = 85;
        break;
      case 37820:
        result = 86;
        break;
      case 37821:
        result = 87;
        break;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
        goto LABEL_145;
      case 37840:
        result = 88;
        break;
      case 37841:
        result = 89;
        break;
      case 37842:
        result = 90;
        break;
      case 37843:
        result = 91;
        break;
      case 37844:
        result = 92;
        break;
      case 37845:
        result = 93;
        break;
      case 37846:
        result = 94;
        break;
      case 37847:
        result = 95;
        break;
      case 37848:
        result = 96;
        break;
      case 37849:
        result = 97;
        break;
      case 37850:
        result = 98;
        break;
      case 37851:
        result = 99;
        break;
      case 37852:
        result = 100;
        break;
      case 37853:
        result = 101;
        break;
      default:
        switch(a1)
        {
          case 37488:
            result = 124;
            break;
          case 37489:
            result = 125;
            break;
          case 37490:
            result = 126;
            break;
          case 37491:
            result = 127;
            break;
          default:
            if (a1 != 36975)
              goto LABEL_145;
            v3 = 24;
            goto LABEL_153;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 36166:
        result = 70;
        break;
      case 36167:
        result = 71;
        break;
      case 36168:
        result = 72;
        break;
      case 36169:
        result = 73;
        break;
      case 36170:
      case 36171:
      case 36172:
      case 36173:
      case 36174:
      case 36175:
      case 36176:
      case 36177:
      case 36178:
      case 36179:
      case 36180:
      case 36181:
      case 36182:
      case 36183:
      case 36184:
      case 36185:
      case 36186:
      case 36187:
      case 36188:
      case 36189:
      case 36190:
      case 36191:
      case 36192:
      case 36193:
      case 36195:
      case 36196:
      case 36197:
      case 36198:
      case 36199:
      case 36200:
      case 36201:
      case 36202:
      case 36203:
      case 36204:
      case 36205:
      case 36206:
      case 36207:
      case 36210:
      case 36211:
      case 36212:
      case 36213:
      case 36216:
      case 36217:
      case 36218:
      case 36219:
      case 36222:
      case 36223:
      case 36224:
      case 36225:
      case 36228:
      case 36229:
      case 36230:
      case 36231:
      case 36234:
      case 36235:
      case 36236:
      case 36237:
      case 36240:
      case 36241:
      case 36242:
      case 36243:
      case 36244:
      case 36245:
      case 36246:
      case 36247:
      case 36248:
      case 36249:
      case 36250:
      case 36251:
      case 36252:
      case 36253:
      case 36254:
      case 36255:
      case 36256:
      case 36257:
      case 36258:
      case 36259:
      case 36260:
      case 36261:
      case 36262:
      case 36263:
      case 36264:
      case 36265:
      case 36266:
      case 36267:
      case 36268:
      case 36269:
      case 36270:
      case 36271:
      case 36272:
      case 36273:
      case 36274:
      case 36275:
      case 36276:
      case 36277:
      case 36278:
      case 36279:
      case 36280:
      case 36281:
      case 36282:
        goto LABEL_145;
      case 36194:
        v3 = 11;
        goto LABEL_153;
      case 36208:
        result = 63;
        break;
      case 36209:
        result = 57;
        break;
      case 36214:
        result = 61;
        break;
      case 36215:
        result = 55;
        break;
      case 36220:
        result = 59;
        break;
      case 36221:
        result = 53;
        break;
      case 36226:
        result = 62;
        break;
      case 36227:
        result = 56;
        break;
      case 36232:
        result = 60;
        break;
      case 36233:
        result = 54;
        break;
      case 36238:
        result = 58;
        break;
      case 36239:
        result = 52;
        break;
      case 36283:
        result = 116;
        break;
      case 36284:
        result = 117;
        break;
      case 36285:
        result = 118;
        break;
      case 36286:
        result = 119;
        break;
      default:
        switch(a1)
        {
          case 36756:
            v3 = 1;
            goto LABEL_153;
          case 36757:
            v3 = 5;
            goto LABEL_153;
          case 36758:
            v3 = 13;
            goto LABEL_153;
          case 36759:
            v3 = 22;
            goto LABEL_153;
          case 36760:
            v3 = 3;
            goto LABEL_153;
          case 36761:
            v3 = 7;
            goto LABEL_153;
          case 36762:
            v3 = 17;
            goto LABEL_153;
          case 36763:
            v3 = 27;
            goto LABEL_153;
          default:
            switch(a1)
            {
              case 36492:
                result = 122;
                break;
              case 36493:
                result = 123;
                break;
              case 36494:
                result = 120;
                break;
              case 36495:
                result = 121;
                break;
              default:
                goto LABEL_145;
            }
            break;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_1B2024A54()
{
  unint64_t result;

  result = qword_1EEF62340;
  if (!qword_1EEF62340)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF62340);
  }
  return result;
}

uint64_t sub_1B2024AAC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for KTXLoadingError(uint64_t a1)
{
  return sub_1B2024AD4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1B2024AD4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s3VFX15KTXLoadingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B2024AAC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for KTXLoadingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B2024AAC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1B2024AD4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for KTXLoadingError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1B2024AD4(v4, v5, v6);
  return a1;
}

uint64_t sub_1B2024BCC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KTXLoadingError()
{
  return &type metadata for KTXLoadingError;
}

double (*sub_1B2024BE4(_QWORD *a1, int a2, uint64_t a3))(_QWORD)
{
  uint64_t v4;
  double (*result)(_QWORD);

  if (*(_QWORD *)(a3 + 16) <= a2)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a3 + 8 * a2 + 32);
  result = nullsub_16;
  *a1 = v4;
  return result;
}

uint64_t sub_1B2024C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Position);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2024E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Mass);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2024FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Color);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B20251B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Velocity);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2025398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Scale);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2025574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Scale3);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2025750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Scale1);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B202592C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Scale2);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2025B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for AngularVelocity);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2025CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for Orientation);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2025EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleAngle);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B20260C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleAngleVelocity);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B20262A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleID);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B202648C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleParentID);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2026670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleTextureFrame);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2026850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticlePivot);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2026A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for LinearFactor);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2026C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for AngularFactor);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2026E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleAge);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2026FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleTarget);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B20271E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleRoughness);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B20273C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleMetalness);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B20275A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for ParticleEmission);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2027788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for UserData1);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B202796C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for UserData2);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2027B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for UserData3);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B2027D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_BYTE *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 48);
  v19 = v6;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = v7;
  v23 = v8;
  v9 = sub_1B216BBD8((uint64_t)&type metadata for UserData4);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v14 = v18;
    v15 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v13 + 88))(v15, &v18, v14, *((_QWORD *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 232) <= a3 && *(_QWORD *)(a1 + 240) > a3)
      return *(_QWORD *)(a1 + 128) + v9 + v10 * a3;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    v17 = sub_1B2228E90();
    *(_QWORD *)&v18 = 0;
    (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B23481F0);
    swift_release();
  }
  return 0;
}

uint64_t vfx_script_get_iteration_range(_:_:_:)(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  *a3 = v3;
  return result;
}

uint64_t vfx_script_get_arguments_buffer(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t vfx_script_event_stream_post_custom_c()
{
  sub_1B22288A8();
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_event_stream_post_custom_c(_:)()
{
  sub_1B22288A8();
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_log(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  v6 = sub_1B2228EA8();
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v6, &v8, a2, a3);
  return swift_release();
}

uint64_t vfx_script_log(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  v2 = sub_1B22288A8();
  v4 = v3;
  v5 = sub_1B2228EA8();
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1 + 88))(v5, &v7, v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_log(_:_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  v2 = sub_1B22288A8();
  v4 = v3;
  v5 = sub_1B2228EA8();
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1 + 88))(v5, &v7, v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_debug_mode()
{
  return 0;
}

Swift::Bool __swiftcall vfx_script_debug_mode()()
{
  return 0;
}

uint64_t vfx_script_graph_log(_:_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_1B22288A8();
  v7 = v6;
  v8 = sub_1B201EBC8(a2);
  if ((~v8 & 0xF000000000000007) != 0)
  {
    v9 = v8;
    sub_1B1D77964(v8);
    if (v10)
    {
      sub_1B20282D0(v10, v5, v7, a3, v10);
      sub_1B1BCBFE4(v9);
      return swift_bridgeObjectRelease();
    }
    sub_1B1BCBFE4(v9);
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v16 = v5;
  v17 = v7;
  sub_1B2228890();
  v12 = sub_1B201EBC8(a2);
  v13 = v12;
  if ((~v12 & 0xF000000000000007) == 0)
    v12 = 0x8000000000000000;
  sub_1B1D763B0(v12);
  sub_1B1BCBFE4(v13);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v14 = v16;
  v15 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v16 = 0;
  swift_retain();
  sub_1B1F1AD70(v15, &v16, v14, v17);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B20282D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unint64_t v15;

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED4BF430 != -1)
    swift_once();
  v14 = 0;
  v15 = 0xE000000000000000;
  swift_retain();
  sub_1B2228890();
  sub_1B2228890();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, a5);
  sub_1B2229CDC();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a5);
  v10 = v14;
  v11 = v15;
  v12 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v14 = 0;
  swift_retain();
  sub_1B1F1AD70(v12, &v14, v10, v11);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t vfx_script_graph_record_values(_:_:_:_:_:_:)(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v46 = a1;
  v47 = a2;
  v10 = sub_1B222826C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0DEE9D8];
  v49 = v11;
  v50 = v16;
  v48 = v14;
  if (a3)
  {
    HIDWORD(v44) = a5;
    v45 = a6;
    v17 = a3;
    v54 = MEMORY[0x1E0DEE9D8];
    sub_1B202B1F4(0, a3, 0);
    v15 = v54;
    v18 = (uint64_t *)(a4 + 8);
    while (1)
    {
      v19 = *v18;
      v20 = sub_1B201EBC8(*(v18 - 1));
      if ((~v20 & 0xF000000000000007) != 0)
      {
        v21 = v20;
        if (v19)
          v22 = v19 == 1;
        else
          v22 = 1;
        if (!v22)
        {
          sub_1B1D77964(v20);
          if (v25)
          {
            sub_1B1FF68E8(v21, v19, v25, (unint64_t *)&v51);
            sub_1B1BCBFE4(v21);
            goto LABEL_11;
          }
        }
        sub_1B1BCBFE4(v21);
      }
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
LABEL_11:
      v54 = v15;
      v24 = *(_QWORD *)(v15 + 16);
      v23 = *(_QWORD *)(v15 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1B202B1F4(v23 > 1, v24 + 1, 1);
        v15 = v54;
      }
      v18 += 2;
      *(_QWORD *)(v15 + 16) = v24 + 1;
      sub_1B1A18378((uint64_t)&v51, v15 + 40 * v24 + 32, (unint64_t *)&qword_1EEF5C6B8, (uint64_t)&type metadata for AnyValue);
      if (!--v17)
      {
        v11 = v49;
        v10 = v50;
        v14 = v48;
        a6 = v45;
        a5 = HIDWORD(v44);
        break;
      }
    }
  }
  v26 = MEMORY[0x1E0DEE9D8];
  if (!a5)
    goto LABEL_33;
  v27 = a5;
  v54 = MEMORY[0x1E0DEE9D8];
  sub_1B202B1F4(0, a5, 0);
  v26 = v54;
  v28 = (uint64_t *)(a6 + 8);
  do
  {
    v29 = *v28;
    v30 = sub_1B201EBC8(*(v28 - 1));
    if ((~v30 & 0xF000000000000007) == 0)
      goto LABEL_26;
    v31 = v30;
    if (v29)
      v32 = v29 == 1;
    else
      v32 = 1;
    if (v32 || (sub_1B1D77964(v30), !v35))
    {
      sub_1B1BCBFE4(v31);
LABEL_26:
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
      goto LABEL_27;
    }
    sub_1B1FF68E8(v31, v29, v35, (unint64_t *)&v51);
    sub_1B1BCBFE4(v31);
LABEL_27:
    v54 = v26;
    v34 = *(_QWORD *)(v26 + 16);
    v33 = *(_QWORD *)(v26 + 24);
    if (v34 >= v33 >> 1)
    {
      sub_1B202B1F4(v33 > 1, v34 + 1, 1);
      v26 = v54;
    }
    v28 += 2;
    *(_QWORD *)(v26 + 16) = v34 + 1;
    sub_1B1A18378((uint64_t)&v51, v26 + 40 * v34 + 32, (unint64_t *)&qword_1EEF5C6B8, (uint64_t)&type metadata for AnyValue);
    --v27;
  }
  while (v27);
  v11 = v49;
  v10 = v50;
  v14 = v48;
LABEL_33:
  v36 = *v46;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  swift_retain();
  v37(v14, v47, v10);
  v38 = *(_QWORD **)(v36 + 176);
  swift_retain();
  v39 = sub_1B1F23314((uint64_t)&type metadata for DiagnosticsTrackerInstance, (uint64_t)&off_1E63B16B0, v38);
  v41 = v40;
  swift_release();
  if (v39)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 32))(v14, v15, v26, ObjectType, v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

double vfx_script_clock_time(_:)(_QWORD *a1)
{
  return *(double *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
}

float vfx_script_clock_delta_time(_:)(_QWORD *a1)
{
  return *(float *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
}

BOOL vfx_script_clock_is_first_frame(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  return v3 == 1 && v2 == 0;
}

unint64_t vfx_script_clock_simulation_index(_:)(_QWORD *a1)
{
  unint64_t result;

  result = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 24);
  if ((result & 0x8000000000000000) != 0 || HIDWORD(result))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  return result;
}

unint64_t vfx_script_texture_sample1d(_:_:)(unint64_t result)
{
  if (result >= 2)
    return (*(uint64_t (**)(void))(result + 24))();
  return result;
}

unint64_t vfx_script_texture_sample1d_curve(unint64_t result, float a2)
{
  if (result > 1)
    return sub_1B202B218(result, a2);
  return result;
}

float vfx_script_texture_sample1d_curve(_:_:)(unint64_t a1, float a2)
{
  float v2;
  double v3;

  v2 = 0.0;
  if (a1 >= 2)
  {
    v3 = (*(double (**)(float))(a1 + 24))((float)((float)(a2 * (float)(*(float *)a1 + -1.0)) + 0.5) / *(float *)a1);
    return *(float *)&v3;
  }
  return v2;
}

uint64_t vfx_script_texture_sample2d(uint64_t a1)
{
  if ((unint64_t)a1 > 1)
    return sub_1B202B248(a1);
  return a1;
}

unint64_t vfx_script_texture_sample2d(_:_:)(unint64_t result)
{
  if (result >= 2)
    return (*(uint64_t (**)(void))(result + 40))();
  return result;
}

int32x2_t vfx_script_texture_sample2d_gradient_x(unint64_t a1, float32x2_t a2)
{
  if (a1 > 1)
    return sub_1B202B250(a1, a2);
  return 0;
}

void vfx_script_texture_sample2d_gradient_x(_:_:)(unint64_t a1, float32x2_t a2)
{
  if (a1 >= 2)
  {
    (*(void (**)(double))(a1 + 40))(COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)1008981770)));
    (*(void (**)(unint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x80000000BC23D70ALL)));
    (*(void (**)(unint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x3C23D70A00000000)));
    (*(void (**)(unint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0xBC23D70A80000000)));
  }
}

double vfx_script_texture_get_size2d(unint64_t a1)
{
  double result;

  if (a1 > 1)
    return *(double *)a1;
  __asm { FMOV            V0.2S, #1.0 }
  return result;
}

double vfx_script_texture_get_size2d(_:)(unint64_t a1)
{
  double result;

  if (a1 >= 2)
    return *(double *)a1;
  __asm { FMOV            V0.2S, #1.0 }
  return result;
}

uint64_t vfx_script_texture_sample3d(uint64_t a1)
{
  if ((unint64_t)a1 > 1)
    return sub_1B202B2FC(a1);
  return a1;
}

unint64_t vfx_script_texture_sample3d(_:_:)(unint64_t result)
{
  if (result >= 2)
    return (*(uint64_t (**)(void))(result + 72))();
  return result;
}

double vfx_script_texture_get_size3d(unint64_t a1)
{
  if (a1 > 1)
    return nullsub_16(a1);
  __asm { FMOV            V0.4S, #1.0 }
  return *(double *)&_Q0;
}

__n128 vfx_script_texture_get_size3d(_:)(unint64_t a1)
{
  __n128 result;

  if (a1 >= 2)
    return *(__n128 *)a1;
  else
    __asm { FMOV            V0.4S, #1.0 }
  return result;
}

_QWORD *vfx_script_color_ramp_create(_:_:_:_:_:)(uint64_t a1, char *a2, char *a3, uint64_t a4, unsigned __int8 a5)
{
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v9 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 17, 8);
  if (a5 >= 3u)
    v10 = 3;
  else
    v10 = a5;
  v11 = sub_1B1DC97B4(a2, a4);
  v12 = sub_1B1DC9670(a3, a4);
  *v9 = v11;
  v9[1] = v12;
  *((_BYTE *)v9 + 16) = v10;
  return v9;
}

_QWORD *vfx_script_color_ramp_destroy(_:_:)(uint64_t a1, unint64_t a2)
{
  return sub_1B2029170(a1, a2, (uint64_t)&type metadata for ColorRamp, 0x18uLL);
}

uint64_t vfx_script_color_ramp_copy(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void vfx_script_color_ramp_evaluate(uint64_t a1, float a2, double a3, double a4, __n128 a5)
{
  sub_1B20D4310(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, a3, a4, a5);
}

void vfx_script_color_ramp_evaluate(_:_:)(uint64_t a1, float a2, double a3, double a4, __n128 a5)
{
  sub_1B20D4310(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, a3, a4, a5);
}

_QWORD *vfx_script_curve_create(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 25, 8);
  v8 = sub_1B1DC9670(a2, a4);
  v9 = sub_1B1DC9670(a3, a4);
  *v7 = v8;
  v7[1] = v9;
  v7[2] = 0;
  *((_BYTE *)v7 + 24) = 1;
  return v7;
}

_QWORD *vfx_script_curve_create(_:_:_:_:)(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 25, 8);
  v8 = sub_1B1DC9670(a2, a4);
  v9 = sub_1B1DC9670(a3, a4);
  *v7 = v8;
  v7[1] = v9;
  v7[2] = 0;
  *((_BYTE *)v7 + 24) = 1;
  return v7;
}

{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 25, 8);
  v8 = sub_1B1DC9670(a2, a4);
  v9 = sub_1B1DC9670(a3, a4);
  *v7 = v8;
  v7[1] = v9;
  v7[2] = 0;
  *((_BYTE *)v7 + 24) = 1;
  return v7;
}

_QWORD *vfx_script_curve_destroy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;

  v5 = *(_QWORD **)(a1 + 16);
  sub_1B1A0DBF0(0, a2, a3, a4);
  swift_arrayDestroy();
  return ecs_stack_allocator_deallocate(v5, a2, 0x19uLL);
}

_QWORD *vfx_script_curve_destroy(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;

  v5 = *(_QWORD **)(a1 + 16);
  sub_1B1A0DBF0(0, a2, a3, a4);
  swift_arrayDestroy();
  return ecs_stack_allocator_deallocate(v5, a2, 0x19uLL);
}

uint64_t vfx_script_curve_copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_curve_copy(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *vfx_script_curve_create_setting_value(_:_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  v6 = *(char **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = ecs_stack_allocator_allocate(v8, 25, 8);
  *v9 = v6;
  v9[1] = v7;
  v9[2] = 0;
  *((_BYTE *)v9 + 24) = 1;
  if ((a3 & 0x8000000000000000) == 0 && *((_QWORD *)v6 + 2) > a3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_1B1FFEEAC((uint64_t)v6);
    *(float *)&v6[4 * a3 + 32] = a4;
    *v9 = v6;
  }
  return v9;
}

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  v6 = *(char **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = ecs_stack_allocator_allocate(v8, 25, 8);
  *v9 = v6;
  v9[1] = v7;
  v9[2] = 0;
  *((_BYTE *)v9 + 24) = 1;
  if ((a3 & 0x8000000000000000) == 0 && *((_QWORD *)v6 + 2) > a3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_1B1FFEEAC((uint64_t)v6);
    *(float *)&v6[4 * a3 + 32] = a4;
    *v9 = v6;
  }
  return v9;
}

_QWORD *vfx_script_curve_create_scaled(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = ecs_stack_allocator_allocate(v6, 25, 8);
  *v7 = v4;
  v7[1] = v5;
  v7[2] = 0;
  *((_BYTE *)v7 + 24) = 1;
  sub_1B1FFCEAC(a3);
  return v7;
}

_QWORD *vfx_script_curve_create_scaled(_:_:_:)(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = ecs_stack_allocator_allocate(v6, 25, 8);
  *v7 = v4;
  v7[1] = v5;
  v7[2] = 0;
  *((_BYTE *)v7 + 24) = 1;
  sub_1B1FFCEAC(a3);
  return v7;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = ecs_stack_allocator_allocate(v6, 25, 8);
  *v7 = v4;
  v7[1] = v5;
  v7[2] = 0;
  *((_BYTE *)v7 + 24) = 1;
  sub_1B1FFCEAC(a3);
  return v7;
}

void vfx_script_curve_evaluate(uint64_t a1, float a2)
{
  sub_1B1FFCF6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), a2);
}

void vfx_script_curve_evaluate(_:_:)(uint64_t a1, float a2)
{
  sub_1B1FFCF6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), a2);
}

_QWORD *vfx_script_string_create(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 16, 8);
  *v1 = sub_1B22288A8();
  v1[1] = v2;
  return v1;
}

_QWORD *vfx_script_string_create(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 16, 8);
  *v1 = sub_1B22288A8();
  v1[1] = v2;
  return v1;
}

{
  _QWORD *v1;
  uint64_t v2;

  v1 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 16), 16, 8);
  *v1 = sub_1B22288A8();
  v1[1] = v2;
  return v1;
}

_QWORD *vfx_script_string_destroy(uint64_t a1, unint64_t a2)
{
  return sub_1B2029170(a1, a2, MEMORY[0x1E0DEA968], 0x10uLL);
}

_QWORD *sub_1B2029170(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  v6 = *(_QWORD **)(a1 + 16);
  swift_arrayDestroy();
  return ecs_stack_allocator_deallocate(v6, a2, a4);
}

_QWORD *vfx_script_string_destroy(_:_:)(uint64_t a1, unint64_t a2)
{
  return sub_1B2029170(a1, a2, MEMORY[0x1E0DEA968], 0x10uLL);
}

uint64_t vfx_script_string_copy(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

Swift::Float __swiftcall vfx_script_array_float_sample(_:_:)(Swift::OpaquePointer a1, Swift::Float a2)
{
  uint64_t v2;
  float v5;
  float v6;
  uint64_t v7;
  float v8;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (!v2)
    return 0.0;
  if (a2 < 0.0 || a2 > 1.0)
  {
    a2 = fmodf(a2, 1.0);
    v5 = 1.0 - fabsf(a2);
    if (a2 < 0.0)
      a2 = v5;
  }
  v6 = (float)(v2 - 1);
  v7 = (uint64_t)(float)(a2 * v6);
  v8 = (float)(a2 - (float)((float)v7 / v6)) / (float)(1.0 / v6);
  return (float)(*((float *)a1._rawValue + (v7 + 1) % v2 + 8) * v8)
       + (float)(*((float *)a1._rawValue + v7 + 8) * (float)(1.0 - v8));
}

uint64_t vfx_script_particle_lookup_by_id(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = -1;
  sub_1B1FDFCF0(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, &v3, a2);
  return v3;
}

uint64_t vfx_script_particle_lookup_by_id(_:_:)(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = -1;
  v9 = -1;
  v4 = *((_DWORD *)a1 + 5);
  v5 = *((int *)a1 + 4);
  if (((_DWORD)v5 != -1 || v4 != 0) && (v5 & 0x80000000) == 0)
  {
    v7 = *a1;
    if (*(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5)
    {
      v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v4 == -1 || *(_DWORD *)(v8 + 12 * (int)v5 + 8) == v4)
      {
        sub_1B1FF17FC(*(_QWORD *)(*(_QWORD *)(v7 + 136) + 8 * *(int *)(v8 + 12 * (int)v5) + 32), *(_WORD *)(v8 + 12 * (int)v5 + 4), 656, &v9, a2);
        return v9;
      }
    }
  }
  return result;
}

uint64_t vfx_script_particle_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t vfx_script_particle_count(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

unint64_t vfx_script_particle_find_nearest_neighbors(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;

  v4 = 0;
  sub_1B1FDFDA8(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, a2, a3, &v4);
  return v4;
}

unint64_t vfx_script_particle_find_nearest_neighbors(_:_:_:_:_:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = 0;
  v10 = 0;
  v5 = *((_DWORD *)a1 + 5);
  v6 = *((int *)a1 + 4);
  if ((_DWORD)v6 != -1 || v5 != 0)
  {
    result = 0;
    if ((v6 & 0x80000000) == 0)
    {
      v8 = *a1;
      if (*(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v6)
      {
        v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if (v5 == -1 || *(_DWORD *)(v9 + 12 * (int)v6 + 8) == v5)
        {
          sub_1B1FF1884(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8 * *(int *)(v9 + 12 * (int)v6) + 32), *(_WORD *)(v9 + 12 * (int)v6 + 4), 656, a2, a3, &v10);
          return v10;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

double vfx_script_particle_get_world_position(int *a1, uint64_t a2)
{
  return vfx_script_particle_get_world_position(_:_:)(a1, a2);
}

double vfx_script_particle_get_world_position(_:_:)(int *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  double result;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  float32x4_t *v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20[3];
  _BYTE v21[80];
  _OWORD v22[4];
  char v23;

  v2 = a1[5];
  v3 = a1[4];
  result = 0.0;
  if (((_DWORD)v3 != -1 || v2 != 0) && (v3 & 0x80000000) == 0)
  {
    v7 = (uint64_t *)(*(_QWORD *)a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v7[1] > v3)
    {
      v9 = *v7;
      if (v2 == -1 || *(_DWORD *)(v9 + 12 * (int)v3 + 8) == v2)
      {
        sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 136) + 8 * *(int *)(v9 + 12 * (int)v3) + 32), *(_DWORD *)(v9 + 12 * (int)v3), *(_WORD *)(v9 + 12 * (int)v3 + 4), 64, *(_QWORD *)a1, (uint64_t)v21);
        sub_1B1A18378((uint64_t)v21, (uint64_t)v22, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
        if ((v23 & 1) == 0)
        {
          v16 = (float32x4_t)v22[2];
          v17 = (float32x4_t)v22[1];
          v18 = (float32x4_t)v22[3];
          v19 = (float32x4_t)v22[0];
          v10 = *(_QWORD *)a1;
          v11 = *((_QWORD *)a1 + 2);
          v12 = sub_1B1E56F5C(a2);
          if (v13 != -1)
          {
            v14 = (float32x4_t *)sub_1B2033918(v10, v12 | ((HIDWORD(v12) & 1) << 32), v13, v11, sub_1B2024C24);
            result = 0.0;
            if (v14)
              *(_QWORD *)&result = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v18, v16, *v14, 2), v17, *(float32x2_t *)v14->f32, 1), v19, COERCE_FLOAT(*v14)).u64[0];
            return result;
          }
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v15 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v20[0] = 0;
          swift_retain();
          sub_1B1F1AD70(v15, v20, 0xD000000000000021, 0x80000001B2348120);
          swift_release();
          swift_release();
        }
        return 0.0;
      }
    }
  }
  return result;
}

int *vfx_script_particle_set_world_position(_:_:_:)(int *result, uint64_t a2, float32x4_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  float32x4_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v21[3];
  _BYTE v22[80];
  _OWORD v23[4];
  char v24;

  v3 = result[5];
  v4 = result[4];
  if (((_DWORD)v4 != -1 || v3 != 0) && (v4 & 0x80000000) == 0)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t *)(*(_QWORD *)result + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v7[1] > v4)
    {
      v9 = *v7;
      if (v3 == -1 || *(_DWORD *)(v9 + 12 * (int)v4 + 8) == v3)
      {
        sub_1B1D1EF80(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 136) + 8 * *(int *)(v9 + 12 * (int)v4) + 32), *(_DWORD *)(v9 + 12 * (int)v4), *(_WORD *)(v9 + 12 * (int)v4 + 4), 64, *(_QWORD *)result, (uint64_t)v22);
        result = (int *)sub_1B1A18378((uint64_t)v22, (uint64_t)v23, &qword_1ED4B9808, (uint64_t)&type metadata for InverseWorldTransform);
        if ((v24 & 1) == 0)
        {
          v17 = (float32x4_t)v23[1];
          v18 = (float32x4_t)v23[0];
          v16 = (float32x4_t)v23[2];
          v19 = (float32x4_t)v23[3];
          v10 = *v6;
          v11 = v6[2];
          v12 = sub_1B1E56F5C(a2);
          if (v13 == -1)
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            swift_retain();
            v15 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v21[0] = 0;
            swift_retain();
            sub_1B1F1AD70(v15, v21, 0xD000000000000021, 0x80000001B2348120);
            swift_release();
            return (int *)swift_release();
          }
          else
          {
            result = (int *)sub_1B2033918(v10, v12 | ((HIDWORD(v12) & 1) << 32), v13, v11, sub_1B2024C24);
            if (result)
            {
              v14 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v19, v16, a3, 2), v17, *(float32x2_t *)a3.f32, 1), v18, a3.f32[0]);
              v14.i32[3] = 1.0;
              *(float32x4_t *)result = v14;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t vfx_script_get_call_parameter(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain();
  v2 = sub_1B22288A8();
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1B1DC3B00(v2, v3), (v5 & 1) != 0))
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v4);
  else
    v6 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

void vfx_script_set_current_state(_:_:_:)(_QWORD *a1, void *a2, float a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v5 = *(void **)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_world);
  swift_retain();
  v6 = v5;
  if (v5)
  {
    v7 = v6;
    v8 = objc_msgSend((id)objc_opt_self(), sel_worldWithWorldRef_, v6);
    v9 = v8;
    if (a2)
    {
      v12 = a2;
      v10 = (void *)objc_opt_self();
      objc_msgSend(v10, sel_begin);
      objc_msgSend(v10, sel_setAnimationDuration_, a3);
      v11 = objc_msgSend(v9, sel_stateManager);
      objc_msgSend(v11, sel_setActiveState_, v12);

      objc_msgSend(v10, sel_commit);
    }
    else
    {
      v12 = objc_msgSend(v8, sel_stateManager);
      objc_msgSend(v12, sel_setActiveState_, 0);
    }
    swift_release();

  }
  else
  {
    swift_release();
  }
}

void *vfx_script_get_state_by_id(_:_:)(_QWORD *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  void *v11;

  v1 = *(void **)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_world);
  swift_retain();
  v2 = v1;
  if (v1)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_opt_self(), sel_worldWithWorldRef_, v2);
    v5 = sub_1B22288A8();
    v7 = v6;
    v8 = objc_msgSend(v4, sel_stateManager);
    v9 = objc_msgSend(v8, sel_states);

    sub_1B1D78468();
    v10 = sub_1B2228AB8();

    swift_bridgeObjectRetain();
    v11 = sub_1B20319DC(v10, v5, v7);
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease_n();
    if (v11)

  }
  else
  {
    swift_release();
    return 0;
  }
  return v11;
}

uint64_t vfx_script_tick(_:_:_:)(uint64_t *a1, int a2, float a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  __CFString *v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v5 = *a1;
  v6 = *(_QWORD **)(*a1 + 176);
  swift_retain();
  swift_retain();
  v7 = (_QWORD *)sub_1B1F22B64((uint64_t)&type metadata for IncommingTickedEventsComponent, (uint64_t)&off_1E63B55F8, v6);
  swift_release();
  v8 = *(double *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  v9 = CFSTR("VFXTriggerTypeTicked");
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B1C65008(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v13 = v7[2];
  v12 = v7[3];
  if (v13 >= v12 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B1C65008(v12 > 1, v13 + 1, 1, v7);
    v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v7[2] = v13 + 1;
  v14 = &v7[3 * v13];
  v14[4] = v9;
  *((_DWORD *)v14 + 10) = a2;
  *((double *)v14 + 6) = v8 + a3;
  v15 = *(_QWORD **)(v5 + 176);
  MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v11);
  swift_retain();
  sub_1B1F22244((uint64_t)&type metadata for IncommingTickedEventsComponent, (uint64_t)&off_1E63B55F8, v15, (void (*)(uint64_t))sub_1B1B20B18);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1B2029FC8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B203096C(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032BC0, &qword_1EEF624B0);
  *v3 = result;
  return result;
}

uint64_t sub_1B2029FFC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202B35C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A018(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202B4C0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A034(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030AF8(a1, a2, a3, *v3, (unint64_t *)&unk_1ED4BAFD0, (uint64_t (*)(uint64_t))sub_1B1DB3570);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A060(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030AF8(a1, a2, a3, *v3, &qword_1ED4BAFC8, (uint64_t (*)(uint64_t))sub_1B1DB351C);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A08C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202B640(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A0A8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EAD0(a1, a2, a3, *v3, (void (*)(_QWORD))sub_1B1A19B14);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A0CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202B7B0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A0E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EAD0(a1, a2, a3, *v3, (void (*)(_QWORD))sub_1B2031C24);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A10C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202B908(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A128(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202BA60(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A144(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202BBE8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A160(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202BD40(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A17C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202BEA4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A198(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C024(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A1B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EAD0(a1, a2, a3, *v3, (void (*)(_QWORD))sub_1B1BDB5D0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A1D8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202C1E0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A1F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C344(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A210(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C808(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B1C79230, (unint64_t *)&qword_1EEF5CE10, (uint64_t)&type metadata for AuthoringNode.Port);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A244(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C684(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF625F0, (uint64_t (*)(uint64_t))sub_1B2033D50);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A270(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C684(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62538, (uint64_t (*)(uint64_t))sub_1B2032F1C);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A29C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EDA8(a1, a2, a3, *v3, &qword_1EEF62520, (uint64_t)&type metadata for Node.Port);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A2C8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C684(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62508, (uint64_t (*)(uint64_t))sub_1B2032E20);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A2F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C808(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B1C71E04, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968]);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A328(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EF0C(a1, a2, a3, *v3, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A354(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202C990(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A370(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202CB10(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A38C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202CC70(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A3A8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202CDC8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A3C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202CF38(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A3E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202F1F4(a1, a2, a3, (_QWORD *)*v3, sub_1B2033018, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A40C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202D0B4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202A428(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202C684(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62610, (uint64_t (*)(uint64_t))sub_1B2033DE8);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A454(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20328CC, &qword_1EEF62460);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A488(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032B54, &qword_1ED4BA2C8);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A4BC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031EAC, &qword_1ED4BA2D0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A4F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D550(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031D68, &qword_1ED4BA2D8);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A524(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032AE8, &qword_1EEF624A0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A558(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032134, &qword_1ED4BA2E0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A58C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D3CC(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031F18, &qword_1EEF62380);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A5C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D3CC(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031DD4, &qword_1EEF62360);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A5F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032860, &qword_1ED4BA2E8);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A628(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20326B0, &qword_1EEF62420);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A65C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B203256C, &qword_1EEF623F0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A690(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20320C8, &qword_1ED4BA2F0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A6C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032788, &qword_1EEF62440);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A6F8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032500, &qword_1EEF623E0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A72C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031E40, &qword_1EEF62370);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A760(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D550(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031CFC, &qword_1ED4BA2F8);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A794(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20321A0, &qword_1ED4BA300);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A7C8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032DB4, &qword_1EEF62500);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A7FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032938, &qword_1ED4BA308);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A830(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B203271C, &qword_1EEF62430);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A864(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B203220C, &qword_1ED4BA318);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A898(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032A10, &qword_1EEF62480);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A8CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20322E4, &qword_1ED4BA320);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A900(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20323BC, &qword_1EEF623C0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A934(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B203205C, &qword_1EEF623A0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A968(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032350, &qword_1ED4BA328);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A99C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20327F4, &qword_1EEF62450);
  *v3 = result;
  return result;
}

uint64_t sub_1B202A9D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032278, &qword_1EEF623B0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AA04(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032428, &qword_1EEF623D0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AA38(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20325D8, &qword_1EEF62400);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AA6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032644, &qword_1EEF62410);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AAA0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031F84, &qword_1EEF62390);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AAD4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B20329A4, &qword_1EEF62470);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AB08(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032A7C, &qword_1EEF62490);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AB3C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2032494, &qword_1ED4BA338);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AB70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D234(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1B2031FF0, &qword_1ED4BA340);
  *v3 = result;
  return result;
}

uint64_t sub_1B202ABA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, (unint64_t *)&unk_1ED4BAEF0, (uint64_t (*)(uint64_t))sub_1B20330DC);
  *v3 = result;
  return result;
}

uint64_t sub_1B202ABD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF625A0, (uint64_t (*)(uint64_t))sub_1B203306C);
  *v3 = result;
  return result;
}

uint64_t sub_1B202ABFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF625C0, (uint64_t (*)(uint64_t))sub_1B20330A4);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AC28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF625D0, (uint64_t (*)(uint64_t))sub_1B20330C0);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AC54(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62580, (uint64_t (*)(uint64_t))sub_1B2033034);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AC80(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF625B0, (uint64_t (*)(uint64_t))sub_1B2033088);
  *v3 = result;
  return result;
}

uint64_t sub_1B202ACAC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62590, (uint64_t (*)(uint64_t))sub_1B2033050);
  *v3 = result;
  return result;
}

uint64_t sub_1B202ACD8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D888(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202ACF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202DA28(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AD10(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202DBA8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AD2C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202DCE8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AD48(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202DE24(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AD64(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202DF7C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AD80(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202E0D4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AD9C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202E248(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202ADB8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202E3AC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202ADD4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202E510(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202ADF0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202E688(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AE0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202E7EC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AE28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202E950(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AE44(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EAD0(a1, a2, a3, *v3, (void (*)(_QWORD))sub_1B2032EB0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AE68(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202EC10(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AE84(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EDA8(a1, a2, a3, *v3, &qword_1EEF62578, (uint64_t)&type metadata for AuthoringNode.Port);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AEB0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202EF0C(a1, a2, a3, *v3, &qword_1EEF5E8F0, (uint64_t)&type metadata for AnyType);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AEDC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202F070(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AEF8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202F1F4(a1, a2, a3, (_QWORD *)*v3, sub_1B2032D10, (uint64_t (*)(_QWORD))sub_1B1C1912C);
  *v3 = result;
  return result;
}

uint64_t sub_1B202AF24(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202F3A0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AF40(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202F524(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AF5C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202F678(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AF78(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202F7F8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AF94(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202F928(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AFB0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202FA84(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AFCC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202FBF8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202AFE8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202FD50(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B004(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B202FF28(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B020(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B203008C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B03C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030228(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B058(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B2030388(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B074(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030524(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B090(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B203067C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B0AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030AF8(a1, a2, a3, *v3, &qword_1ED4BAFF8, (uint64_t (*)(uint64_t))sub_1B1C78EC8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B0D8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B2030C48(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B0F4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030DC8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B110(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B2030F44(a1, a2, a3, *v3, &qword_1EEF62630, (uint64_t)&_s21FunctionConstantCoderVN);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B13C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B20310BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B158(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B203123C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B174(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B20313BC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B190(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B203153C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B1AC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62528, (uint64_t (*)(uint64_t))sub_1B2032E8C);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B1D8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B20316A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B202B1F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B2031800(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B210(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t sub_1B202B218(uint64_t a1, float a2)
{
  return (*(uint64_t (**)(float))(a1 + 24))((float)((float)(a2 * (float)(*(float *)a1 + -1.0)) + 0.5) / *(float *)a1);
}

uint64_t sub_1B202B248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

int32x2_t sub_1B202B250(uint64_t a1, float32x2_t a2)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;

  v7 = COERCE_FLOAT32X2_T((*(double (**)(double))(a1 + 40))(COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)1008981770))));
  v6 = COERCE_FLOAT32X2_T((*(double (**)(uint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x80000000BC23D70ALL))));
  v5 = COERCE_FLOAT32X2_T((*(double (**)(uint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x3C23D70A00000000))));
  return vzip1_s32((int32x2_t)vsub_f32(v7, v6), (int32x2_t)vsub_f32(v5, COERCE_FLOAT32X2_T((*(double (**)(uint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0xBC23D70A80000000))))));
}

uint64_t sub_1B202B2FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 72))();
}

uint64_t sub_1B202B304(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202F1F4(a1, a2, a3, (_QWORD *)*v3, sub_1B2033E04, (uint64_t (*)(_QWORD))sub_1B2033E20);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B330(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B202D6E8(a1, a2, a3, (_QWORD *)*v3, &qword_1EEF62550, (uint64_t (*)(uint64_t))sub_1B2032F88);
  *v3 = result;
  return result;
}

uint64_t sub_1B202B35C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202B4C0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAF70, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[4 * v9] && v14 < &v15[4 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 4 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202B618(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B2030AF8(a1, a2, a3, a4, (unint64_t *)&unk_1ED4BAFD0, (uint64_t (*)(uint64_t))sub_1B1DB3570);
}

uint64_t sub_1B202B62C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B2030AF8(a1, a2, a3, a4, &qword_1ED4BAFC8, (uint64_t (*)(uint64_t))sub_1B1DB351C);
}

uint64_t sub_1B202B640(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BACA8, (uint64_t)&type metadata for ComponentStorageLayout.ComponentLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v15] && v13 < &v14[v15])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, v15);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202B7A4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B202EAD0(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1A19B14);
}

uint64_t sub_1B202B7B0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1ED4BAE48, (uint64_t (*)(uint64_t))sub_1B2031BA8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 32 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202B908(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAF28, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202BA60(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2032C30();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v9)
      memmove(v11 + 4, a4 + 4, 16 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 16 * v9 && v14 < v15 + 16 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1C798AC(0, &qword_1EEF624C0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202BBE8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF62350, (uint64_t)&type metadata for FieldRecord, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202BD40(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CB48, (uint64_t)&type metadata for Property.Description, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202BEA4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF62348, (uint64_t)&type metadata for Property, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9])
      memmove(v13, v14, 48 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[48 * v9] && v13 < &v14[48 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202C024(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C71BAC(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v9)
      memmove(v11 + 4, a4 + 4, 40 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 40 * v9 && v13 < v14 + 40 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B89D0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202C1D4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B202EAD0(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1BDB5D0);
}

uint64_t sub_1B202C1E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF624C8, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202C344(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2032CA4();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 104 * v9)
      memmove(v11 + 4, a4 + 4, 104 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 104 * v9 && v13 < v14 + 104 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1B9D790(0, &qword_1EEF5B378);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202C4E0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1DCC080();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 104 * v9)
      memmove(v11 + 4, a4 + 4, 104 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 104 * v9 && v13 < v14 + 104 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1C798AC(0, (unint64_t *)&qword_1EEF5C490);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202C684(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    sub_1B1791524(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    v14[2] = v12;
    v14[3] = 2 * (v16 >> 4);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 16 * v12)
      memmove(v14 + 4, a4 + 4, 16 * v12);
    a4[2] = 0;
  }
  else
  {
    if (v18 < v17 + 16 * v12 && v17 < v18 + 16 * v12)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B202C808(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t a7)
{
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v11 = a4[3];
    v12 = v11 >> 1;
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v13 <= a2)
      v13 = a2;
    if (v12 < a2)
      a2 = v13;
    else
      a2 = v12;
  }
  v14 = a4[2];
  if (a2 <= v14)
    v15 = a4[2];
  else
    v15 = a2;
  if (v15)
  {
    a5(0);
    v16 = (_QWORD *)swift_allocObject();
    v17 = j__malloc_size(v16);
    v18 = v17 - 32;
    if (v17 < 32)
      v18 = v17 - 17;
    v16[2] = v14;
    v16[3] = 2 * (v18 >> 4);
  }
  else
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v19 = (unint64_t)(v16 + 4);
  v20 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v16 != a4 || v19 >= v20 + 16 * v14)
      memmove(v16 + 4, a4 + 4, 16 * v14);
    a4[2] = 0;
  }
  else
  {
    if (v20 < v19 + 16 * v14 && v19 < v20 + 16 * v14)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1A02758(0, a6, a7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v16;
}

uint64_t sub_1B202C990(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CE48, (uint64_t)&type metadata for GraphCodeGen.CodeGenParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9])
      memmove(v13, v14, 48 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[48 * v9] && v13 < &v14[48 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202CB10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 32 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202CC70(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE30, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202CDC8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAD98, (uint64_t)&type metadata for GraphScriptGroup.Reference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v15] && v13 < &v14[v15])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202CF38(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CBD0, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9])
      memmove(v13, v14, 40 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[40 * v9] && v13 < &v14[40 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202D0B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAE18, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202D234(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v14 + 4;
  v17 = a4 + 4;
  v18 = 3 * v12;
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= &v17[v18])
      memmove(v14 + 4, a4 + 4, v18 * 8);
    a4[2] = 0;
  }
  else
  {
    if (v17 < &v16[v18] && v16 < &v17[v18])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1B9D790(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B202D3CC(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    v14[2] = v12;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v17 = v14 + 4;
  v18 = a4 + 4;
  v19 = 4 * v12;
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= &v18[v19])
      memmove(v14 + 4, a4 + 4, v19 * 8);
    a4[2] = 0;
  }
  else
  {
    if (v18 < &v17[v19] && v17 < &v18[v19])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1B9D790(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B202D550(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 48);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v14 + 4;
  v17 = a4 + 4;
  v18 = 6 * v12;
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= &v17[v18])
      memmove(v14 + 4, a4 + 4, v18 * 8);
    a4[2] = 0;
  }
  else
  {
    if (v17 < &v16[v18] && v16 < &v17[v18])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1B9D790(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B202D6E8(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    sub_1B1791524(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 24 * v12)
      memmove(v14 + 4, a4 + 4, 24 * v12);
    a4[2] = 0;
  }
  else
  {
    if (v17 < v16 + 24 * v12 && v16 < v17 + 24 * v12)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B202D888(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1ADF51C();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v9)
      memmove(v11 + 4, a4 + 4, 48 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 48 * v9 && v13 < v14 + 48 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1B9D790(0, (unint64_t *)&qword_1ED4BA350);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202DA28(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4BAF30, (uint64_t (*)(uint64_t))sub_1B19F8F98, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v9)
      memmove(v11 + 4, a4 + 4, 32 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 32 * v9 && v14 < v15 + 32 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B19F8F98();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202DBA8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78F00();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202DCE8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2031C90();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 32 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, v16);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202DE24(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAD58, (uint64_t)&type metadata for EntityInstance, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202DF7C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF62560, (uint64_t (*)(uint64_t))sub_1B1B9CCA4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E0D4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1ED4BAD40, (uint64_t (*)(uint64_t))sub_1B1C71D14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, 24 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E248(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAD90, (uint64_t)&type metadata for ShaderParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 80 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v15] && v13 < &v14[v15])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, v15);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E3AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAE00, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E510(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BADA0, (uint64_t)&type metadata for GraphScriptGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E674(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B2030F44(a1, a2, a3, a4, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant);
}

uint64_t sub_1B202E688(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BACF0, (uint64_t)&type metadata for ScriptParser.Argument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E7EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BACE8, (uint64_t)&type metadata for ScriptParser.ParsedScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v9])
      memmove(v14, v15, v9 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[64 * v9] && v14 < &v15[64 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202E950(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1AEB3CC();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v9)
      memmove(v11 + 4, a4 + 4, 8 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 8 * v9 && v14 < v15 + 8 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202EAD0(char a1, int64_t a2, char a3, char *a4, void (*a5)(_QWORD))
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (v9 <= a2)
      v9 = a2;
    if (v8 < a2)
      a2 = v9;
    else
      a2 = v8;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (a2 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = a2;
  if (v11)
  {
    a5(0);
    v12 = (char *)swift_allocObject();
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10])
      memmove(v15, v16, 16 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v16 < &v15[16 * v10] && v15 < &v16[16 * v10])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v15, v16, 16 * v10);
  }
  swift_release();
  return (uint64_t)v12;
}

uint64_t sub_1B202EC10(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C71BAC(0, (unint64_t *)&unk_1ED4B7A60, (unint64_t *)&qword_1ED4B8418);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v9)
      memmove(v11 + 4, a4 + 4, 16 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 16 * v9 && v14 < v15 + 16 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8418);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202EDA8(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v13 + 32;
  v17 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= &v17[16 * v11])
      memmove(v16, v17, 16 * v11);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v17 < &v16[16 * v11] && v16 < &v17[16 * v11])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B202EF0C(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v13 + 32;
  v17 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= &v17[8 * v11])
      memmove(v16, v17, 8 * v11);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v17 < &v16[8 * v11] && v16 < &v17[8 * v11])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B202F070(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAE10, (uint64_t)&type metadata for EntityComponentPropertyLite, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9])
      memmove(v13, v14, 56 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[56 * v9] && v13 < &v14[56 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202F1F4(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = *(_QWORD *)(a6(0) - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v17 = (_QWORD *)swift_allocObject();
    v18 = j__malloc_size(v17);
    v17[2] = v12;
    v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v17 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v17 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    v23 = *(_QWORD *)(v19 + 72) * v12;
    v24 = &v21[v23];
    v25 = (unint64_t)&v22[v23];
    if (v22 < v24 && (unint64_t)v21 < v25)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v17;
}

uint64_t sub_1B202F3A0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF624D8, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9])
      memmove(v13, v14, 56 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[56 * v9] && v13 < &v14[56 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202F524(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CBE0, (uint64_t)&type metadata for GraphScriptingConfig.EvaluationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 8 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, v16);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202F678(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5AB68, (uint64_t)&type metadata for Scheduler.Event, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[104 * v9])
      memmove(v13, v14, 104 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[104 * v9] && v13 < &v14[104 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202F7F8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2032FAC();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v9] && v13 < &v14[v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202F928(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2032D2C();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, 24 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202FA84(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAC98, (uint64_t)&type metadata for ChunksStorage.FilteredChunk, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, 24 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202FBF8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4BAF90, (uint64_t (*)(uint64_t))sub_1B1791068, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202FD50(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2033CE8();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 4;
  v15 = a4 + 4;
  if ((a1 & 1) != 0)
  {
    if (v11 < a4 || v14 >= &v15[8 * v9])
    {
      sub_1B1B9D790(0, (unint64_t *)&qword_1EEF5E938);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v11 != a4)
    {
      sub_1B1B9D790(0, (unint64_t *)&qword_1EEF5E938);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1B9D790(0, (unint64_t *)&qword_1EEF5E938);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B202FF28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF61B28, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B203008C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1ED4BAEC0, (uint64_t (*)(uint64_t))sub_1B2032D98, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v9)
      memmove(v11 + 4, a4 + 4, 24 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 24 * v9 && v13 < v14 + 24 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B2032D98(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2030228(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = v9 << 6;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2030388(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1BBD808();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 88 * v9)
      memmove(v11 + 4, a4 + 4, 88 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 88 * v9 && v13 < v14 + 88 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2030524(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAF10, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[4 * v9] && v14 < &v15[4 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 4 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B203067C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5CCB0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v9])
      memmove(v14, v15, v9 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[64 * v9] && v14 < &v15[64 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, v9 << 6);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B20307D4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5E8C0, (uint64_t (*)(uint64_t))sub_1B1DCC018, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v9)
      memmove(v11 + 4, a4 + 4, 40 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 40 * v9 && v13 < v14 + 40 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1DCC018();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B203096C(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    v14[2] = v12;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 32 * v12)
      memmove(v14 + 4, a4 + 4, 32 * v12);
    a4[2] = 0;
  }
  else
  {
    if (v18 < v17 + 32 * v12 && v17 < v18 + 32 * v12)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1C798AC(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B2030AF8(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1791524(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v13 + 32;
  v17 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= &v17[8 * v11])
      memmove(v16, v17, 8 * v11);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v17 < &v16[8 * v11] && v16 < &v17[8 * v11])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v16, v17, 8 * v11);
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B2030C48(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78E40();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v9)
      memmove(v11 + 4, a4 + 4, 8 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 8 * v9 && v14 < v15 + 8 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1A02758(0, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2030DC8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF62638, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9])
      memmove(v13, v14, 40 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[40 * v9] && v13 < &v14[40 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2030F44(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = j__malloc_size(v13);
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 112);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v13 + 32;
  v16 = a4 + 32;
  v17 = 112 * v11;
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v16 < &v15[v17] && v15 < &v16[v17])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B20310BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF62640, (uint64_t)&type metadata for RelationsCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B203123C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF62648, (uint64_t)&type metadata for EntityCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B20313BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF62600, (uint64_t (*)(uint64_t))sub_1B2033D6C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v9)
      memmove(v11 + 4, a4 + 4, 16 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 16 * v9 && v14 < v15 + 16 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B2033D6C();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B203153C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B20316A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BACD8, (uint64_t)&type metadata for RelationPair, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2031800(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B2033C7C();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v9)
      memmove(v11 + 4, a4 + 4, 40 * v9);
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 40 * v9 && v13 < v14 + 40 * v9)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1A02758(0, (unint64_t *)&qword_1EEF5C6B8, (uint64_t)&type metadata for AnyValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B2031998(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

void *sub_1B20319DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1B22296AC();
  if (!v6)
    goto LABEL_17;
LABEL_3:
  v7 = 0;
  while (1)
  {
    v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B5E21018](v7, a1) : *(id *)(a1 + 8 * v7 + 32);
    v9 = v8;
    v10 = objc_msgSend(v8, sel_identifier);
    v11 = sub_1B222874C();
    v13 = v12;

    if (v11 == a2 && v13 == a3)
      break;
    v15 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_15;

    if (v6 == ++v7)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B2031B58(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2024C24);
}

void sub_1B2031BA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA198)
  {
    sub_1B1C92290(255, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA198);
  }
}

void sub_1B2031C24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAD48)
  {
    sub_1B1C92290(255, &qword_1ED4B8A00, (unint64_t *)&qword_1ED4B89D0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAD48);
  }
}

void sub_1B2031C90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAF98)
  {
    sub_1B1B9A958(255, (unint64_t *)&qword_1ED4BB0E8, (void (*)(uint64_t))sub_1B1791068);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAF98);
  }
}

void sub_1B2031CFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEA8)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2F8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEA8);
  }
}

void sub_1B2031D68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE88)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2D8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE88);
  }
}

void sub_1B2031DD4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62358)
  {
    sub_1B1B9D790(255, &qword_1EEF62360);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62358);
  }
}

void sub_1B2031E40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62368)
  {
    sub_1B1B9D790(255, &qword_1EEF62370);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62368);
  }
}

void sub_1B2031EAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE80)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2D0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE80);
  }
}

void sub_1B2031F18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62378)
  {
    sub_1B1B9D790(255, &qword_1EEF62380);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62378);
  }
}

void sub_1B2031F84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62388)
  {
    sub_1B1B9D790(255, &qword_1EEF62390);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62388);
  }
}

void sub_1B2031FF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEE8)
  {
    sub_1B1B9D790(255, &qword_1ED4BA340);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEE8);
  }
}

void sub_1B203205C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62398)
  {
    sub_1B1B9D790(255, &qword_1EEF623A0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62398);
  }
}

void sub_1B20320C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEA0)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2F0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEA0);
  }
}

void sub_1B2032134()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE90)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2E0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE90);
  }
}

void sub_1B20321A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEB0)
  {
    sub_1B1B9D790(255, &qword_1ED4BA300);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEB0);
  }
}

void sub_1B203220C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEC8)
  {
    sub_1B1B9D790(255, &qword_1ED4BA318);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEC8);
  }
}

void sub_1B2032278()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF623A8)
  {
    sub_1B1B9D790(255, &qword_1EEF623B0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF623A8);
  }
}

void sub_1B20322E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAED0)
  {
    sub_1B1B9D790(255, &qword_1ED4BA320);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAED0);
  }
}

void sub_1B2032350()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAED8)
  {
    sub_1B1B9D790(255, &qword_1ED4BA328);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAED8);
  }
}

void sub_1B20323BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF623B8)
  {
    sub_1B1B9D790(255, &qword_1EEF623C0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF623B8);
  }
}

void sub_1B2032428()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF623C8)
  {
    sub_1B1B9D790(255, &qword_1EEF623D0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF623C8);
  }
}

void sub_1B2032494()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEE0)
  {
    sub_1B1B9D790(255, &qword_1ED4BA338);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEE0);
  }
}

void sub_1B2032500()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF623D8)
  {
    sub_1B1B9D790(255, &qword_1EEF623E0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF623D8);
  }
}

void sub_1B203256C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF623E8)
  {
    sub_1B1B9D790(255, &qword_1EEF623F0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF623E8);
  }
}

void sub_1B20325D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF623F8)
  {
    sub_1B1B9D790(255, &qword_1EEF62400);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF623F8);
  }
}

void sub_1B2032644()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62408)
  {
    sub_1B1B9D790(255, &qword_1EEF62410);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62408);
  }
}

void sub_1B20326B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62418)
  {
    sub_1B1B9D790(255, &qword_1EEF62420);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62418);
  }
}

void sub_1B203271C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62428)
  {
    sub_1B1B9D790(255, &qword_1EEF62430);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62428);
  }
}

void sub_1B2032788()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62438)
  {
    sub_1B1B9D790(255, &qword_1EEF62440);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62438);
  }
}

void sub_1B20327F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62448)
  {
    sub_1B1B9D790(255, &qword_1EEF62450);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62448);
  }
}

void sub_1B2032860()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE98)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2E8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE98);
  }
}

void sub_1B20328CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62458)
  {
    sub_1B1B9D790(255, &qword_1EEF62460);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62458);
  }
}

void sub_1B2032938()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAEB8)
  {
    sub_1B1B9D790(255, &qword_1ED4BA308);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAEB8);
  }
}

void sub_1B20329A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62468)
  {
    sub_1B1B9D790(255, &qword_1EEF62470);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62468);
  }
}

void sub_1B2032A10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62478)
  {
    sub_1B1B9D790(255, &qword_1EEF62480);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62478);
  }
}

void sub_1B2032A7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62488)
  {
    sub_1B1B9D790(255, &qword_1EEF62490);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62488);
  }
}

void sub_1B2032AE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62498)
  {
    sub_1B1B9D790(255, &qword_1EEF624A0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62498);
  }
}

void sub_1B2032B54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE78)
  {
    sub_1B1B9D790(255, &qword_1ED4BA2C8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE78);
  }
}

void sub_1B2032BC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF624A8)
  {
    sub_1B1C798AC(255, &qword_1EEF624B0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF624A8);
  }
}

void sub_1B2032C30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF624B8)
  {
    sub_1B1C798AC(255, &qword_1EEF624C0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF624B8);
  }
}

void sub_1B2032CA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF624D0)
  {
    sub_1B1B9D790(255, &qword_1EEF5B378);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF624D0);
  }
}

void sub_1B2032D10(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF624E0, (uint64_t (*)(uint64_t))sub_1B1C1912C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1B2032D2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF624E8)
  {
    sub_1B1A02758(255, &qword_1EEF624F0, (uint64_t)&type metadata for Position, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UnsafeSparseMutableBufferPointer.BufferAndStart);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF624E8);
  }
}

void sub_1B2032D98(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1ED4BA310, (void (*)(uint64_t))type metadata accessor for PropertyDescription);
}

void sub_1B2032DB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF624F8)
  {
    sub_1B1B9D790(255, &qword_1EEF62500);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF624F8);
  }
}

void sub_1B2032E20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62510)
  {
    sub_1B1B9A958(255, &qword_1EEF62518, (void (*)(uint64_t))type metadata accessor for Node);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62510);
  }
}

void sub_1B2032E8C(uint64_t a1)
{
  sub_1B1C19024(a1, &qword_1EEF62530, (void (*)(uint64_t))sub_1B2032E20);
}

void sub_1B2032EB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BADC0)
  {
    sub_1B1C92290(255, &qword_1ED4B9148, &qword_1ED4B9140);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BADC0);
  }
}

void sub_1B2032F1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62540)
  {
    sub_1B1B9A958(255, &qword_1EEF62548, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62540);
  }
}

void sub_1B2032F88(uint64_t a1)
{
  sub_1B1C19024(a1, &qword_1EEF62558, (void (*)(uint64_t))sub_1B2032F1C);
}

void sub_1B2032FAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62568)
  {
    sub_1B1A02758(255, &qword_1EEF62570, (uint64_t)&type metadata for RenderGraphNode.ResourceSemantic, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62568);
  }
}

void sub_1B2033018(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF59608, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1B2033034(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF62588, type metadata accessor for VFXCameraToneMappingMode);
}

void sub_1B2033050(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF62598, type metadata accessor for VFXCameraLensBlurFilterQuality);
}

void sub_1B203306C(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF625A8, type metadata accessor for VFXCameraFillMode);
}

void sub_1B2033088(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF625B8, type metadata accessor for VFXCameraProjectionDirection);
}

void sub_1B20330A4(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF625C8, type metadata accessor for VFXForceFieldType);
}

void sub_1B20330C0(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF625D8, type metadata accessor for MTLCompareFunction);
}

void sub_1B20330DC(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1ED4BA348, type metadata accessor for MTLCullMode);
}

uint64_t sub_1B20330F8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2024E04);
}

uint64_t sub_1B2033148(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2024FDC);
}

uint64_t sub_1B2033198(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B20251B8);
}

uint64_t sub_1B20331E8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2025398);
}

uint64_t sub_1B2033238(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2025574);
}

uint64_t sub_1B2033288(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2025750);
}

uint64_t sub_1B20332D8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B202592C);
}

uint64_t sub_1B2033328(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2025B08);
}

uint64_t sub_1B2033378(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2025CF4);
}

uint64_t sub_1B20333C8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2025EDC);
}

uint64_t sub_1B2033418(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B20260C8);
}

uint64_t sub_1B2033468(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B20262A8);
}

uint64_t sub_1B20334B8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B202648C);
}

uint64_t sub_1B2033508(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2026670);
}

uint64_t sub_1B2033558(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2026850);
}

uint64_t sub_1B20335A8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2026A3C);
}

uint64_t sub_1B20335F8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2026C24);
}

uint64_t sub_1B2033648(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2026E10);
}

uint64_t sub_1B2033698(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2026FF8);
}

uint64_t sub_1B20336E8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B20271E4);
}

uint64_t sub_1B2033738(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B20273C4);
}

uint64_t sub_1B2033788(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B20275A4);
}

uint64_t sub_1B20337D8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2027788);
}

uint64_t sub_1B2033828(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B202796C);
}

uint64_t sub_1B2033878(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2027B50);
}

uint64_t sub_1B20338C8(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B2033918(a1, a2, a3, a4, sub_1B2027D34);
}

uint64_t sub_1B2033918(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double (*v16)(_QWORD);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _BYTE v24[40];
  _BYTE v25[40];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD v38[4];
  uint64_t v39[12];
  _OWORD v40[5];
  __int128 v41;
  uint64_t v42;

  v5 = a5;
  v42 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if ((a2 & 0x100000000) != 0)
  {
    v9 = a4;
    v23 = a3;
    v10 = HIDWORD(a4);
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v11 = qword_1ED4D09F8;
    sub_1B1A19B14();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    *(_QWORD *)(inited + 32) = &type metadata for Particle;
    *(_QWORD *)(inited + 40) = &off_1E63C21B0;
    v32 = v11;
    v33 = 0;
    v34 = 2;
    v35 = 0;
    v36 = 2;
    v37 = 0;
    swift_retain();
    sub_1B1E68AF8(inited, 1, (uint64_t)v24);
    swift_setDeallocating();
    swift_release();
    sub_1B1C71BAC(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0);
    v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v13 + 56) = &type metadata for EmitterReference;
    *(_QWORD *)(v13 + 64) = &off_1E6387218;
    *(_DWORD *)(v13 + 32) = v9;
    *(_DWORD *)(v13 + 36) = v10;
    sub_1B1E68A14(v13, (uint64_t)v25);
    swift_setDeallocating();
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B89D0);
    swift_arrayDestroy();
    sub_1B19ED720((uint64_t)v24);
    sub_1B1E8FCE4(a1, (uint64_t)v25, 0x200000000, v39);
    sub_1B1A18378((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!*(_QWORD *)&v40[0])
    {
      sub_1B19ED720((uint64_t)v25);
      return 0;
    }
    v28 = v40[2];
    v29 = v40[3];
    v30 = v40[4];
    v31 = v41;
    v26 = v40[0];
    v27 = v40[1];
    if ((uint64_t)v41 <= v23)
    {
      sub_1B19ED720((uint64_t)v25);
      sub_1B19ED748(v39);
      return 0;
    }
    v8 = sub_1B1BEC018(v23);
    v7 = v14;
    sub_1B19ED720((uint64_t)v25);
    sub_1B19ED748(v39);
    v5 = a5;
  }
  else
  {
    v8 = a2;
  }
  v15 = *(_QWORD *)(a1 + 136);
  swift_retain();
  swift_retain();
  v16 = sub_1B2024BE4(v38, v8, v15);
  v18 = *v17;
  ((void (*)(_QWORD *, _QWORD))v16)(v38, 0);
  swift_release();
  swift_release();
  if (v18)
    return v5(v18, a1, v7);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  v21 = sub_1B2228E90();
  v38[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, unint64_t, unint64_t))(*(_QWORD *)v20 + 88))(v21, v38, 0xD000000000000031, 0x80000001B23481B0);
  swift_release();
  return 0;
}

void sub_1B2033C7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF625E0)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1EEF5C6B8, (uint64_t)&type metadata for AnyValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF625E0);
  }
}

void sub_1B2033CE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF625E8)
  {
    sub_1B1B9D790(255, (unint64_t *)&qword_1EEF5E938);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF625E8);
  }
}

void sub_1B2033D50(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF625F8, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
}

void sub_1B2033D6C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF62608)
  {
    sub_1B1791524(255, &qword_1EEF58810, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF62608);
  }
}

void sub_1B2033DE8(uint64_t a1)
{
  sub_1B1B9D5D0(a1, &qword_1EEF62618, (void (*)(uint64_t))type metadata accessor for Node);
}

void sub_1B2033E04(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF62620, (uint64_t (*)(uint64_t))sub_1B2033E20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1B2033E20(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF62628, type metadata accessor for EdgeCoder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t destroy for RenderFunctions(_QWORD *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[6])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[11])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for RenderFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
LABEL_3:
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v8 = *(_QWORD *)(a2 + 88);
      if (v8)
        goto LABEL_4;
LABEL_8:
      v14 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v14;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v10 = *(_QWORD *)(a2 + 128);
      if (v10)
        goto LABEL_5;
LABEL_9:
      v15 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      goto LABEL_10;
    }
  }
  v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  if (!v8)
    goto LABEL_8;
LABEL_4:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v10 = *(_QWORD *)(a2 + 128);
  if (!v10)
    goto LABEL_9;
LABEL_5:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  v16 = *(_QWORD *)(a2 + 160);
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v16;
  *(_QWORD *)(a1 + 168) = v17;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RenderFunctions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[3] = a2[3];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598((uint64_t)a1);
      v5 = a2[4];
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      a1[4] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)a2;
    v8 = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  v9 = a1 + 5;
  v10 = a2 + 5;
  v11 = a2[6];
  if (a1[6])
  {
    if (v11)
    {
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[8] = a2[8];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598((uint64_t)(a1 + 5));
      v12 = a2[9];
      v13 = *(_OWORD *)(a2 + 7);
      *v9 = *v10;
      *(_OWORD *)(a1 + 7) = v13;
      a1[9] = v12;
    }
  }
  else if (v11)
  {
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *v10;
    v15 = *(_OWORD *)(a2 + 7);
    a1[9] = a2[9];
    *v9 = v14;
    *(_OWORD *)(a1 + 7) = v15;
  }
  v16 = a1 + 10;
  v17 = a2 + 10;
  v18 = a2[11];
  if (a1[11])
  {
    if (v18)
    {
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[12] = a2[12];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[13] = a2[13];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598((uint64_t)(a1 + 10));
      v19 = a2[14];
      v20 = *((_OWORD *)a2 + 6);
      *v16 = *v17;
      *((_OWORD *)a1 + 6) = v20;
      a1[14] = v19;
    }
  }
  else if (v18)
  {
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *v17;
    v22 = *((_OWORD *)a2 + 6);
    a1[14] = a2[14];
    *v16 = v21;
    *((_OWORD *)a1 + 6) = v22;
  }
  v23 = a1 + 15;
  v24 = a2 + 15;
  v25 = a2[16];
  if (a1[16])
  {
    if (v25)
    {
      a1[15] = a2[15];
      a1[16] = a2[16];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[17] = a2[17];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[18] = a2[18];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[19] = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598((uint64_t)(a1 + 15));
      v26 = a2[19];
      v27 = *(_OWORD *)(a2 + 17);
      *v23 = *v24;
      *(_OWORD *)(a1 + 17) = v27;
      a1[19] = v26;
    }
  }
  else if (v25)
  {
    a1[15] = a2[15];
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    a1[19] = a2[19];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *v24;
    v29 = *(_OWORD *)(a2 + 17);
    a1[19] = a2[19];
    *v23 = v28;
    *(_OWORD *)(a1 + 17) = v29;
  }
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 initializeWithTake for RenderFunctions(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for RenderFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1B1B3D598(a1);
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
LABEL_6:
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1B1B3D598(a1 + 40);
  }
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
LABEL_11:
  if (*(_QWORD *)(a1 + 88))
  {
    v8 = *(_QWORD *)(a2 + 88);
    if (v8)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1B1B3D598(a1 + 80);
  }
  v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
LABEL_16:
  if (!*(_QWORD *)(a1 + 128))
  {
LABEL_20:
    v11 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v11;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a2 + 128);
  if (!v10)
  {
    sub_1B1B3D598(a1 + 120);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
LABEL_21:
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderFunctions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderFunctions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderFunctions()
{
  return &type metadata for RenderFunctions;
}

uint64_t sub_1B2034800()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v1 = v0[1];
  if (v1)
  {
    v2 = v0[3];
    v3 = v0[4];
    v4 = v0[2];
    v15 = *v0;
    v16 = v1;
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v2;
    v18 = v3;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v9 = sub_1B1BD24F0();
    sub_1B2228890();
    sub_1B1A025EC((uint64_t)(v0 + 5), (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1B1E27594);
    sub_1B1A025EC((uint64_t)v11, (uint64_t)&v19, (uint64_t (*)(_QWORD))sub_1B1E27594);
    if (*((_QWORD *)&v19 + 1))
    {
      v12 = v19;
      v13 = v20;
      v14 = v21;
      sub_1B1BD24F0();
    }
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v7 = v9;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = v0[16];
    v6 = v0[19];
    v15 = v0[15];
    v16 = v5;
    v17 = *(_OWORD *)(v0 + 17);
    v18 = v6;
    v10 = sub_1B1BD24F0();
    sub_1B2228890();
    sub_1B1A025EC((uint64_t)(v0 + 5), (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1B1E27594);
    sub_1B1A025EC((uint64_t)v11, (uint64_t)&v19, (uint64_t (*)(_QWORD))sub_1B1E27594);
    if (*((_QWORD *)&v19 + 1))
    {
      v12 = v19;
      v13 = v20;
      v14 = v21;
      sub_1B1BD24F0();
    }
    sub_1B2228890();
    swift_bridgeObjectRelease();
    return v10;
  }
  return v7;
}

void sub_1B20349E8()
{
  qword_1ED4B8CF0 = (uint64_t)&unk_1E63851F8;
}

uint64_t sub_1B20349FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  uint64_t v10;

  sub_1B1A025EC(v0, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B1E27594);
  sub_1B19F8C58(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
  sub_1B2034DE4();
  sub_1B19F8C58(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
  sub_1B1A025EC(v0 + 40, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1E27594);
  sub_1B19F8C58(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
  sub_1B2034DE4();
  sub_1B19F8C58(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
  sub_1B1A025EC(v0 + 80, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1B1E27594);
  sub_1B19F8C58(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
  sub_1B2034DE4();
  sub_1B19F8C58(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
  sub_1B1A025EC(v0 + 120, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1B1E27594);
  sub_1B19F8C58(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
  sub_1B2034DE4();
  sub_1B19F8C58(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
  v1 = *(_QWORD *)(v0 + 160);
  if (v1)
  {
    sub_1B222A084();
    v2 = *(_QWORD *)(v1 + 16);
    sub_1B222A078();
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = v1 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_1B2228824();
        swift_bridgeObjectRelease();
        v3 += 16;
        --v2;
      }
      while (v2);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1B222A084();
  }
  sub_1B1A025EC(v0 + 168, (uint64_t)&v5, (uint64_t (*)(_QWORD))sub_1B2034F78);
  sub_1B1A025EC((uint64_t)&v5, (uint64_t)&v10, (uint64_t (*)(_QWORD))sub_1B2034F78);
  return sub_1B222A078();
}

uint64_t sub_1B2034BD0()
{
  sub_1B222A06C();
  sub_1B20349FC();
  return sub_1B222A0C0();
}

uint64_t sub_1B2034C44()
{
  return sub_1B20349FC();
}

uint64_t sub_1B2034C9C()
{
  sub_1B222A06C();
  sub_1B20349FC();
  return sub_1B222A0C0();
}

BOOL sub_1B2034D0C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[11];
  _OWORD v14[11];

  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v13[10] = a1[10];
  v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  v7 = a2[9];
  v14[8] = a2[8];
  v14[9] = v7;
  v14[10] = a2[10];
  v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  v9 = a2[7];
  v14[6] = a2[6];
  v14[7] = v9;
  v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  v11 = a2[3];
  v14[2] = a2[2];
  v14[3] = v11;
  return sub_1B2035020((uint64_t *)v13, (uint64_t *)v14);
}

unint64_t sub_1B2034DA0()
{
  unint64_t result;

  result = qword_1EEF62658;
  if (!qword_1EEF62658)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2608, &type metadata for RenderFunctions);
    atomic_store(result, (unint64_t *)&qword_1EEF62658);
  }
  return result;
}

uint64_t sub_1B2034DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD v8[5];
  _BYTE v9[8];
  uint64_t v10;
  _BYTE v11[80];

  sub_1B1A025EC(v0, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1E27594);
  v1 = v8[4];
  sub_1B1A025EC(v0, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B1E27594);
  if (!v10)
    return sub_1B222A084();
  sub_1B222A084();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B2228824();
  v2 = *(_QWORD *)(v1 + 16);
  sub_1B222A078();
  if (v2)
  {
    v3 = v1 + 64;
    do
    {
      v4 = *(_QWORD *)(v3 - 32);
      v5 = *(_QWORD *)(v3 - 24);
      v6 = *(unsigned __int8 *)(v3 - 16);
      sub_1B1B2A86C(v3, (uint64_t)v11);
      sub_1B222A078();
      if (v6 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1B2228824();
      }
      else
      {
        sub_1B222A078();
      }
      v3 += 112;
      sub_1B1B29888();
      sub_1B1B40E74(v4, v5, v6);
      --v2;
    }
    while (v2);
  }
  sub_1B222A078();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_1B2034F78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA5E0)
  {
    sub_1B2034FCC();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA5E0);
  }
}

unint64_t sub_1B2034FCC()
{
  unint64_t result;

  result = qword_1ED4BA5D0;
  if (!qword_1ED4BA5D0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA5D0);
  }
  return result;
}

BOOL sub_1B2035020(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL8 result;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _BYTE v43[8];
  _BYTE v44[8];
  unint64_t v45;
  unint64_t v46;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v7 = *a2;
  v6 = a2[1];
  v8 = a2[3];
  v9 = a2[4];
  if (!v3)
  {
    if (!v6)
      goto LABEL_17;
LABEL_13:
    sub_1B1B410E4(v2, v3);
    sub_1B1B410E4(v7, v6);
    sub_1B1B41238(v2, v3);
    v12 = v7;
    v13 = v6;
LABEL_56:
    sub_1B1B41238(v12, v13);
    return 0;
  }
  if (!v6)
    goto LABEL_13;
  v38 = a1;
  v10 = v2 == v7 && v3 == v6;
  if (v10 || (sub_1B2229D24() & 1) != 0)
  {
    if (v4)
    {
      if (v8 && v4 == v8)
        goto LABEL_11;
    }
    else if (!v8)
    {
LABEL_11:
      sub_1B1B410E4(v2, v3);
      sub_1B1B410E4(v2, v3);
      sub_1B1B410E4(v7, v6);
      v11 = sub_1B1CC95F4(v5, v9);
      goto LABEL_16;
    }
  }
  sub_1B1B410E4(v2, v3);
  sub_1B1B410E4(v2, v3);
  sub_1B1B410E4(v7, v6);
  v11 = 0;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1B41238(v2, v3);
  a1 = v38;
  if ((v11 & 1) == 0)
    return 0;
LABEL_17:
  v14 = a1[5];
  v15 = a1[6];
  v16 = a1[8];
  v17 = a1[9];
  v18 = a2[5];
  v19 = a2[6];
  v20 = a2[8];
  v21 = a2[9];
  if (v15)
  {
    if (!v19)
      goto LABEL_55;
    v39 = a1;
    if (v14 == v18 && v15 == v19 || (sub_1B2229D24() & 1) != 0)
    {
      if (v16)
      {
        if (v20 && v16 == v20)
          goto LABEL_25;
      }
      else if (!v20)
      {
LABEL_25:
        sub_1B1B410E4(v14, v15);
        sub_1B1B410E4(v14, v15);
        sub_1B1B410E4(v18, v19);
        v22 = sub_1B1CC95F4(v17, v21);
        goto LABEL_30;
      }
    }
    sub_1B1B410E4(v14, v15);
    sub_1B1B410E4(v14, v15);
    sub_1B1B410E4(v18, v19);
    v22 = 0;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1B41238(v14, v15);
    a1 = v39;
    if ((v22 & 1) == 0)
      return 0;
    goto LABEL_31;
  }
  if (v19)
    goto LABEL_55;
LABEL_31:
  v14 = a1[10];
  v15 = a1[11];
  v23 = a1[13];
  v24 = a1[14];
  v18 = a2[10];
  v19 = a2[11];
  v25 = a2[13];
  v26 = a2[14];
  if (v15)
  {
    if (!v19)
      goto LABEL_55;
    v40 = a1;
    if (v14 == v18 && v15 == v19 || (sub_1B2229D24() & 1) != 0)
    {
      if (v23)
      {
        if (v25 && v23 == v25)
          goto LABEL_39;
      }
      else if (!v25)
      {
LABEL_39:
        sub_1B1B410E4(v14, v15);
        sub_1B1B410E4(v14, v15);
        sub_1B1B410E4(v18, v19);
        v27 = sub_1B1CC95F4(v24, v26);
        goto LABEL_44;
      }
    }
    sub_1B1B410E4(v14, v15);
    sub_1B1B410E4(v14, v15);
    sub_1B1B410E4(v18, v19);
    v27 = 0;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1B41238(v14, v15);
    a1 = v40;
    if ((v27 & 1) == 0)
      return 0;
    goto LABEL_45;
  }
  if (v19)
    goto LABEL_55;
LABEL_45:
  v14 = a1[15];
  v15 = a1[16];
  v28 = a1[18];
  v29 = a1[19];
  v18 = a2[15];
  v19 = a2[16];
  v30 = a2[18];
  v31 = a2[19];
  if (!v15)
  {
    if (!v19)
      goto LABEL_62;
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_55:
    sub_1B1B410E4(v14, v15);
    sub_1B1B410E4(v18, v19);
    sub_1B1B41238(v14, v15);
    v12 = v18;
    v13 = v19;
    goto LABEL_56;
  }
  v41 = a1;
  if (v14 == v18 && v15 == v19 || (sub_1B2229D24() & 1) != 0)
  {
    if (v28)
    {
      if (v30 && v28 == v30)
        goto LABEL_53;
    }
    else if (!v30)
    {
LABEL_53:
      sub_1B1B410E4(v14, v15);
      sub_1B1B410E4(v14, v15);
      sub_1B1B410E4(v18, v19);
      v32 = sub_1B1CC95F4(v29, v31);
      goto LABEL_61;
    }
  }
  sub_1B1B410E4(v14, v15);
  sub_1B1B410E4(v14, v15);
  sub_1B1B410E4(v18, v19);
  v32 = 0;
LABEL_61:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1B41238(v14, v15);
  a1 = v41;
  if ((v32 & 1) == 0)
    return 0;
LABEL_62:
  v34 = a1;
  v35 = (_QWORD *)a1[20];
  v36 = (_QWORD *)a2[20];
  if (!v35)
  {
    if (!v36)
      goto LABEL_67;
    return 0;
  }
  if (!v36 || (sub_1B1CC9D08(v35, v36) & 1) == 0)
    return 0;
LABEL_67:
  sub_1B1A025EC((uint64_t)(a2 + 21), (uint64_t)v44, (uint64_t (*)(_QWORD))sub_1B2034F78);
  sub_1B1A025EC((uint64_t)v44, (uint64_t)&v45, (uint64_t (*)(_QWORD))sub_1B2034F78);
  v37 = v45;
  sub_1B1A025EC((uint64_t)(v34 + 21), (uint64_t)v43, (uint64_t (*)(_QWORD))sub_1B2034F78);
  sub_1B1A025EC((uint64_t)v43, (uint64_t)&v46, (uint64_t (*)(_QWORD))sub_1B2034F78);
  result = __PAIR128__(v46, v37) == 0;
  if (v46)
  {
    if (v37)
      return v46 == v37;
  }
  return result;
}

uint64_t sub_1B203578C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(result)
  {
    case 1:
      v3 = v2 + 1;
      v4 = v2 + 2;
      v5 = v2 + 3;
      v6 = v2 + 4;
      goto LABEL_6;
    case 2:
      v3 = v2 + 6;
      v4 = v2 + 7;
      v5 = v2 + 8;
      v6 = v2 + 9;
      v2 += 5;
      goto LABEL_6;
    case 8:
      v3 = v2 + 11;
      v4 = v2 + 12;
      v5 = v2 + 13;
      v6 = v2 + 14;
      v2 += 10;
      goto LABEL_6;
    case 16:
      v3 = v2 + 16;
      v4 = v2 + 17;
      v5 = v2 + 18;
      v6 = v2 + 19;
      v2 += 15;
LABEL_6:
      v7 = *v6;
      v8 = *v5;
      v9 = *v4;
      v10 = *v3;
      *a2 = *v2;
      a2[1] = v10;
      a2[2] = v9;
      a2[3] = v8;
      a2[4] = v7;
      break;
    default:
      sub_1B2229430();
      sub_1B2228890();
      type metadata accessor for MTLRenderStages(0);
      sub_1B22295EC();
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

_QWORD *sub_1B20358EC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;

  result = sub_1B1C6A418(0, 6, (void (*)(__int128 *__return_ptr, uint64_t *))sub_1B2037ACC);
  *(_DWORD *)a1 = 1014350479;
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B2035930()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B2035984()
{
  return sub_1B2228824();
}

uint64_t sub_1B20359A0()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B20359F0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B2035A40(_QWORD *a1@<X8>)
{
  *a1 = 0x6169426874706564;
  a1[1] = 0xE900000000000073;
}

uint64_t sub_1B2035A60()
{
  return 0x6169426874706564;
}

uint64_t sub_1B2035A7C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B2035AD0()
{
  sub_1B2037C5C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2035AF8()
{
  sub_1B2037C5C();
  return sub_1B222A1E0();
}

_QWORD *sub_1B2035B20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  int v5;

  result = sub_1B2037AF0(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_1B2035B4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B2037CAC(0, &qword_1EEF62678, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2037C5C();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B2035C3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if ((*(_BYTE *)(result + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) & 1) == 0)
  {
    if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    {
      MEMORY[0x1E0C80A78](result, a2);
      v3 = *(_QWORD **)(v2 + 176);
      swift_retain();
      swift_retain();
      sub_1B1F22244((uint64_t)&type metadata for ShadowState, (uint64_t)&off_1E6373900, v3, sub_1B2037D08);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

void sub_1B2035D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  void *v23;
  _OWORD *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  unint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t *v85;
  uint64_t v86;
  os_unfair_lock_s *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  _QWORD *v117;
  size_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t *v126;
  uint64_t v127;
  os_unfair_lock_s *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  void *v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  char v158;
  uint64_t v159;
  _QWORD *v160;
  size_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int8x16_t v181;
  float32x4_t v182;
  uint64_t v183;
  float32x4_t v184;
  uint64_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  int v189;
  int v190;
  float32x4_t v191;
  uint64_t v192;
  uint64_t v193;
  id v194[2];
  uint64_t v195;
  uint64_t v196;
  id v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  int8x16_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float32x4_t v210[6];
  _BYTE v211[40];
  _QWORD v212[5];
  uint64_t v213;
  int v214;
  char v215;
  uint64_t v216;
  char v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  _OWORD v221[2];
  uint64_t v222;
  _OWORD v223[2];
  uint64_t v224;
  int v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  char v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  char v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  uint64_t v249;
  unint64_t v250;
  _BYTE v251[32];
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  _BYTE v255[48];
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE v263[1152];
  _BYTE v264[1152];
  _OWORD v265[9];
  _BYTE v266[80];
  _QWORD v267[12];
  _BYTE v268[16];
  uint64_t v269;
  _OWORD v270[2];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  _BYTE v277[40];
  uint64_t v278[15];
  _BYTE v279[40];
  uint64_t v280[18];

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = v2;
  v280[15] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    v8 = v5;
    v9 = v4;
    v10 = v3;
    v11 = (_QWORD *)thread_worker_index(v6);
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues) + 8 * *v11 + 8);
    v252 = 0;
    *(_OWORD *)(v14 + 1984) = 0u;
    *(_OWORD *)(v14 + 1968) = 0u;
    memset(&v255[8], 0, 40);
    v256 = xmmword_1B2246910;
    v257 = 1uLL;
    *(_QWORD *)&v258 = 0;
    v255[0] = 0;
    *((_QWORD *)&v258 + 1) = 1;
    v259 = 0uLL;
    *(_QWORD *)&v253 = v9;
    *((_QWORD *)&v253 + 1) = v12;
    *((_QWORD *)&v254 + 1) = 1;
    *(_QWORD *)&v254 = v13;
    sub_1B1BBF08C((uint64_t)v251, (uint64_t)&v255[8]);
    v265[5] = v256;
    v265[6] = v257;
    v265[7] = v258;
    v265[8] = v259;
    v265[1] = v254;
    v265[2] = *(_OWORD *)v255;
    v265[3] = *(_OWORD *)&v255[16];
    v265[4] = *(_OWORD *)&v255[32];
    v265[0] = v253;
    sub_1B206309C(3u, (uint64_t)v266);
    v15 = sub_1B206318C((uint64_t)v266, 1, 0, 2);
    sub_1B1BA80C0((uint64_t)v266);
    if (!v15)
    {
LABEL_138:
      sub_1B1BBF134(v265);
      return;
    }
    swift_unknownObjectRetain();
    v16 = sub_1B1BA147C(0, 2, v15, 2, 1, 0);
    swift_unknownObjectRelease();
    v17 = sub_1B2229454();
    sub_1B1BA77BC(v17, v18, v16);
    swift_bridgeObjectRelease();
    v172 = *(_QWORD *)(*(_QWORD *)v10 + 16);
    if (!v172)
    {
      swift_unknownObjectRelease();

      goto LABEL_138;
    }
    v170 = *(_QWORD *)v10 + 32;
    swift_bridgeObjectRetain();
    v22 = 0;
    v169 = v8;
    v204 = v9;
    v171 = v16;
    while (1)
    {
      v24 = (_OWORD *)(v170 + 160 * v22);
      v25 = *((float32x4_t *)v24 + 3);
      v26 = *((float32x4_t *)v24 + 4);
      v27 = *((float32x4_t *)v24 + 5);
      v28 = *((float32x4_t *)v24 + 6);
      v29 = *((float32x4_t *)v24 + 7);
      v30 = *((_QWORD *)v24 + 16);
      v198 = *(float32x4_t *)v24;
      v201 = *((int8x16_t *)v24 + 9);
      v31 = v8[23];
      v32 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*v24)), v27, *(float32x2_t *)v24, 1), v28, *(float32x4_t *)v24, 2), v29, *(float32x4_t *)v24, 3);
      v191 = *((float32x4_t *)v24 + 2);
      *(_OWORD *)v194 = v24[1];
      v33 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, *(float *)v194), v27, (float32x2_t)v24[1], 1), v28, *(float32x4_t *)v194, 2), v29, *(float32x4_t *)v194, 3);
      v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v191.f32[0]), v27, *(float32x2_t *)v191.f32, 1), v28, v191, 2), v29, v191, 3);
      v186 = v27;
      v187 = v26;
      v182 = v29;
      v184 = v28;
      v188 = v25;
      v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v25.f32[0]), v27, *(float32x2_t *)v25.f32, 1), v28, v25, 2), v29, v25, 3);
      v29.f32[0] = *(float *)&v32.i32[3] - *(float *)v32.i32;
      v29.f32[1] = *(float *)&v33.i32[3] - *(float *)v33.i32;
      v29.f32[2] = v34.f32[3] - v34.f32[0];
      v36 = (int32x4_t)vmulq_f32(v29, v29);
      v29.f32[3] = v35.f32[3] - v35.f32[0];
      v19.f32[0] = *(float *)&v32.i32[3] + *(float *)v32.i32;
      v19.f32[1] = *(float *)&v33.i32[3] + *(float *)v33.i32;
      v19.f32[2] = v34.f32[3] + v34.f32[0];
      v37 = (int32x4_t)vmulq_f32(v19, v19);
      v19.f32[3] = v35.f32[3] + v35.f32[0];
      v20.f32[0] = *(float *)&v32.i32[3] + *(float *)&v32.i32[1];
      v20.f32[1] = *(float *)&v33.i32[3] + *(float *)&v33.i32[1];
      v20.f32[2] = v34.f32[3] + v34.f32[1];
      v38 = (int32x4_t)vmulq_f32(v20, v20);
      v20.f32[3] = v35.f32[3] + v35.f32[1];
      v21.f32[0] = *(float *)&v32.i32[3] - *(float *)&v32.i32[1];
      v21.f32[1] = *(float *)&v33.i32[3] - *(float *)&v33.i32[1];
      v21.f32[2] = v34.f32[3] - v34.f32[1];
      v39 = (int32x4_t)vmulq_f32(v21, v21);
      v21.f32[3] = v35.f32[3] - v35.f32[1];
      v8[23] = v31 + 1;
      v25.f32[0] = *(float *)&v32.i32[3] - *(float *)&v32.i32[2];
      v25.f32[1] = *(float *)&v33.i32[3] - *(float *)&v33.i32[2];
      v25.f32[2] = v34.f32[3] - v34.f32[2];
      v40 = (int32x4_t)vmulq_f32(v25, v25);
      v25.f32[3] = v35.f32[3] - v35.f32[2];
      v41 = (float32x4_t)vzip2q_s32(v32, v33);
      v41.i32[2] = v34.i32[2];
      v42 = (int32x4_t)vmulq_f32(v41, v41);
      v41.i32[3] = v35.i32[2];
      v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1))).u32[0];
      *(float32x2_t *)v35.f32 = vrsqrte_f32((float32x2_t)v34.u32[0]);
      *(float32x2_t *)v35.f32 = vmul_f32(*(float32x2_t *)v35.f32, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32)));
      v43 = vmulq_n_f32(v29, vmul_f32(*(float32x2_t *)v35.f32, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32))).f32[0]);
      v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
      *(float32x2_t *)v26.f32 = vrsqrte_f32((float32x2_t)v35.u32[0]);
      *(float32x2_t *)v26.f32 = vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)));
      v44 = vmulq_n_f32(v19, vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32))).f32[0]);
      v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
      *(float32x2_t *)v28.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
      *(float32x2_t *)v28.f32 = vmul_f32(*(float32x2_t *)v28.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32)));
      v45 = vmulq_n_f32(v20, vmul_f32(*(float32x2_t *)v28.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32))).f32[0]);
      v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
      *(float32x2_t *)v29.f32 = vrsqrte_f32((float32x2_t)v28.u32[0]);
      *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)));
      v46 = vmulq_n_f32(v21, vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32))).f32[0]);
      v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
      *(float32x2_t *)v29.f32 = vrsqrte_f32((float32x2_t)v42.u32[0]);
      *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)));
      v47 = vmulq_n_f32(v41, vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32))).f32[0]);
      v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
      *(float32x2_t *)v40.i8 = vrsqrte_f32((float32x2_t)v42.u32[0]);
      *(float32x2_t *)v40.i8 = vmul_f32(*(float32x2_t *)v40.i8, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8)));
      v210[0] = v43;
      v210[1] = v44;
      v210[2] = v45;
      v210[3] = v46;
      v210[4] = v47;
      v210[5] = vmulq_n_f32(v25, vmul_f32(*(float32x2_t *)v40.i8, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8))).f32[0]);
      sub_1B1EDEBD0(v8, v210, v31);
      if (qword_1ED4B7DB8 != -1)
        swift_once();
      v239 = qword_1ED4D09F8;
      v240 = 0;
      v241 = 2;
      v242 = 0;
      v243 = 2;
      v244 = 0;
      swift_retain();
      sub_1B1E3C1C8(1, (uint64_t)v211);
      swift_release();
      sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v48 + 56) = &type metadata for DrawCallLayer;
      *(_QWORD *)(v48 + 64) = &off_1E6379C28;
      *(_BYTE *)(v48 + 32) = 0;
      sub_1B1E6892C(v212);
      swift_setDeallocating();
      sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
      swift_arrayDestroy();
      swift_deallocClassInstance();
      sub_1B19ED720((uint64_t)v211);
      sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v49 + 32) = &type metadata for FrustumCulled;
      *(_QWORD *)(v49 + 40) = &off_1E637AEE0;
      *(_QWORD *)(v49 + 48) = &type metadata for LODCulled;
      *(_QWORD *)(v49 + 56) = &off_1E63C3FF0;
      sub_1B1B44110(&v213, v49);
      swift_setDeallocating();
      swift_deallocClassInstance();
      sub_1B19ED720((uint64_t)v212);
      v50 = 1 << v31;
      if (v31 >= 0x40)
        v50 = 0;
      if (v31 > 0x40)
        v50 = 0;
      v233 = v213;
      v234 = v214;
      v235 = v215;
      v236 = v216;
      v237 = v217;
      v238 = v50;
      sub_1B1E8FCE4((uint64_t)v8, (uint64_t)&v233, 0x200000000, v267);
      sub_1B1A18378((uint64_t)v267, (uint64_t)v270, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (*(_QWORD *)&v270[0])
        break;
      sub_1B19ED720((uint64_t)&v213);
      v23 = v171;
LABEL_6:
      if (++v22 == v172)
      {
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        goto LABEL_138;
      }
    }
    v218 = v270[0];
    v219 = v270[1];
    v205 = v272;
    v220 = v271;
    v206 = v273;
    v173 = v274;
    v51 = v275;
    v175 = v276;
    sub_1B19ED720((uint64_t)&v213);
    v52 = swift_retain();
    v53 = sub_1B1F21904(v52);
    v55 = v54;
    v57 = v56;
    v207 = v7;
    swift_release();
    v58.i32[0] = 0;
    v59.i32[0] = v57 & 1;
    v60 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v59, v58), 0);
    v59.i64[0] = v53;
    v59.i64[1] = v55;
    v181 = vandq_s8(v59, v60);
    bzero(v264, 0x348uLL);
    memset(&v264[848], 0, 296);
    swift_getObjectType();
    *(double *)&v61 = sub_1B1F9C1A0();
    sub_1B1E15EC8(0, 0, v201.i64[0], v201.i64[1], 0, v62, v63, v64, v198, *(float32x4_t *)v194, v191, v188, v187, v186, v184, v182, xmmword_1B2244DB0, xmmword_1B2244DD0, xmmword_1B2244D90,
      xmmword_1B2244E20,
      xmmword_1B2244DB0,
      xmmword_1B2244DD0,
      xmmword_1B2244D90,
      xmmword_1B2244E20,
      v30,
      v61,
      *(_OWORD *)&v181);
    memcpy(v263, v264, sizeof(v263));
    swift_retain();
    v65 = (void *)sub_1B1D22DA8(0, 1152);
    v67 = v66;
    v69 = v68;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v253 = 0;
      *((_QWORD *)&v253 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v70 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v253 = 0;
      swift_retain();
      sub_1B1F1AD70(v70, (uint64_t *)&v253, 0xD000000000000034, 0x80000001B233A830);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      v71 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v72 = v65;
      memcpy(&v71[v67], v263, 0x480uLL);
      swift_release();
    }
    swift_retain();
    sub_1B2000304((uint64_t)&v249);
    swift_release();
    sub_1B1A18378((uint64_t)&v249, (uint64_t)v251, &qword_1EEF62680, (uint64_t)&type metadata for FrameConstantsStorage);
    sub_1B1A18378((uint64_t)v251, (uint64_t)&v253, &qword_1EEF62680, (uint64_t)&type metadata for FrameConstantsStorage);
    if (sub_1B2037D24((uint64_t)&v253) == 1 || (v180 = (uint64_t)v65, v178 = v22, !v260))
    {
      sub_1B2229688();
      __break(1u);
      return;
    }
    v73 = v261;
    v74 = v262;
    v75 = **(_QWORD **)(v204 + 496);
    v179 = v260;
    swift_unknownObjectRetain();
    if (!v75)
    {
      if (*(_QWORD *)(v204 + 376))
      {
        v245 = &unk_1EF028DD0;
        v165 = swift_dynamicCastObjCProtocolConditional();
        if (v165)
        {
          v166 = (void *)v165;
          swift_unknownObjectRetain();
          v197 = objc_msgSend(v166, sel_renderCommandEncoder);
          v249 = 0x646F636E45627573;
          v250 = 0xEB000000005B7265;
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v167 = (void *)sub_1B2228728();
          swift_bridgeObjectRelease();
          objc_msgSend(v197, sel_setLabel_, v167);

          v168 = *(_QWORD **)(v204 + 496);
          *v168 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v197);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
        }
      }
    }
    if (**(_QWORD **)(v204 + 496))
    {
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1B2118500(v180, v67, v69, 0, 1, ObjectType);
      sub_1B21185F0(v180, v67, v69, 0, 1, ObjectType);
      sub_1B2118500(v179, v73, v74, 0, 0, ObjectType);
      sub_1B21185F0(v179, v73, v74, 0, 0, ObjectType);
      v77 = sub_1B1F9C1A0();
      sub_1B20BFF98(v201, *(float32x2_t *)&v77);
      swift_unknownObjectRelease();
    }
    sub_1B206309C(3u, (uint64_t)v268);
    v78 = v269;
    if (v269 == 260)
      v79 = 260;
    else
      v79 = 0;
    sub_1B1BA80C0((uint64_t)v268);
    v225 = 2048;
    v226 = 0u;
    v227 = 0u;
    v228 = 0u;
    v229 = 0u;
    v230 = v78;
    v231 = v79;
    v232 = 1;
    v80 = v204;
    if (*(_QWORD *)(v204 + 376))
    {
      v247 = &unk_1EF028DD0;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        v7 = v207;
        if (v175 >= 1 && v206)
        {
          v81 = v51[4];
          v82 = *(unsigned __int8 *)(v173 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v223[0] = v218;
          v223[1] = v219;
          v224 = v220;
          swift_retain_n();
          sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
          v83 = 0;
          v183 = v81;
          v189 = v82;
          while (1)
          {
            v84 = (unsigned int *)(v205 + 48 * v83);
            v202 = *v84;
            v199 = v84[1];
            v85 = (uint64_t *)*((_QWORD *)v84 + 2);
            v195 = *((_QWORD *)v84 + 3);
            v86 = *((_QWORD *)v84 + 5);
            v192 = *((_QWORD *)v84 + 4);
            v208 = v7;
            if (v82)
            {
              v87 = *(os_unfair_lock_s **)(v86 + 376);
              swift_retain();
              os_unfair_lock_lock(v87);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v86 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v81);
            sub_1B1A18378((uint64_t)(v51 + 6), (uint64_t)v277, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v88 = v51[4];
            v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v51[6] = ecs_stack_allocator_allocate(v88, 48 * v89, 8);
            v51[7] = v89;
            v51[9] = 0;
            v51[10] = 0;
            v51[8] = 0;
            swift_release();
            v90 = v51[3];
            if (!*(_QWORD *)(*(_QWORD *)(v80 + 496) + 8 * v90))
            {
              if (*(_QWORD *)(v80 + 376))
              {
                v246 = &unk_1EF028DD0;
                v96 = swift_dynamicCastObjCProtocolConditional();
                if (v96)
                {
                  v97 = (void *)v96;
                  swift_unknownObjectRetain();
                  v174 = objc_msgSend(v97, sel_renderCommandEncoder);
                  v249 = 0x646F636E45627573;
                  v250 = 0xEB000000005B7265;
                  sub_1B2229A0C();
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B2228890();
                  v98 = (void *)sub_1B2228728();
                  swift_bridgeObjectRelease();
                  objc_msgSend(v174, sel_setLabel_, v98);

                  v99 = *(_QWORD *)(v80 + 496);
                  *(_QWORD *)(v99 + 8 * v90) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v174);
                  v81 = v183;
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                }
              }
            }
            v91 = *(void **)(*(_QWORD *)(v80 + 496) + 8 * v90);
            if (v91)
              break;
            v7 = v208;
LABEL_67:
            sub_1B1F05D48(v51, (unsigned __int16 **)v223, (uint64_t)v277);
            if (*(_QWORD *)(v51[13] + 16))
            {
              v114 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v114, v86);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v116 = v51[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v116 + 16));
              }
              else
              {
                v117 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v116 + 24) >= 2uLL)
                {
                  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                  v117 = (_QWORD *)swift_allocObject();
                  v118 = j__malloc_size(v117);
                  v117[2] = 0;
                  v117[3] = 2 * ((uint64_t)(v118 - 32) / 72);
                }
                v51[13] = v117;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v51[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v119 = *(char **)(v86 + 232);
                v120 = *(char **)(v86 + 256);
                if (v119 == v120)
                {
                  v121 = *(char **)(v86 + 240);
                }
                else
                {
                  sub_1B1A1059C(v120, v119);
                  v120 = *(char **)(v86 + 232);
                  v121 = *(char **)(v86 + 240);
                  if (v121 == v120)
                  {
                    v121 = 0;
                    v120 = 0;
                    *(_QWORD *)(v86 + 232) = 0;
                    *(_QWORD *)(v86 + 240) = 0;
                  }
                }
                *(_QWORD *)(v86 + 248) = v121;
                *(_QWORD *)(v86 + 256) = v120;
              }
            }
            ecs_stack_allocator_pop_snapshot(v81);
            v82 = v189;
            if ((v189 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 376));
            }
            swift_release();
            if (++v83 == v206)
              goto LABEL_132;
          }
          v92 = *(_QWORD *)(v86 + 48);
          v93 = *(_QWORD *)(v92 + 16);
          if (v85)
          {
            if (v93)
            {
              v94 = v92 + 56;
              while (*(ValueMetadata **)(v94 - 24) != &type metadata for DrawCallComponent)
              {
                v94 += 40;
                if (!--v93)
                  goto LABEL_45;
              }
              v105 = v94 - 8;
              v104 = *(_QWORD *)(v94 - 8);
              v103 = *(_QWORD *)(v105 + 8);
              if (v104 <= 1)
                v104 = 1;
              v106 = *(_QWORD *)(v86 + 128) + v103;
              v176 = v106 + *(_QWORD *)(v86 + 240) * v104;
              v107 = v51[4];
              swift_unknownObjectRetain();
              v95 = ecs_stack_allocator_allocate(v107, 8 * v192, 8);
              sub_1B1CC5A70(v85, v192, v106, (uint64_t)v95);
              v250 = 0;
              v249 = 0;
              swift_unownedRetainStrong();
              swift_unownedRetain();
              swift_release();
              v108 = (_QWORD *)swift_allocObject();
              v108[2] = v85;
              v108[3] = v195;
              v108[4] = v192;
              sub_1B1A18378((uint64_t)&v249, (uint64_t)(v108 + 5), (unint64_t *)&unk_1ED4B8AA0, (uint64_t)&type metadata for PackedRewriter);
              v108[7] = v95;
              v108[8] = &v95[v192];
              v108[9] = v106;
              v108[10] = v176;
              v108[11] = &type metadata for DrawCallComponent;
              v108[12] = &off_1E638BED8;
              v108[13] = &type metadata for DrawCallComponent;
              v108[14] = v86;
              v109 = v51[8];
              v110 = (_QWORD *)(v51[6] + 48 * v109);
              *v110 = &type metadata for DrawCallComponent;
              v110[1] = &off_1E638BED8;
              v110[2] = &type metadata for DrawCallComponent;
              v110[3] = v95;
              v110[4] = sub_1B2038494;
              v110[5] = v108;
              v81 = v183;
              v51[8] = v109 + 1;
            }
            else
            {
LABEL_45:
              swift_unknownObjectRetain();
              v95 = 0;
            }
            v7 = v208;
            v101 = v202;
            v102 = v199;
            if ((_DWORD)v202 == (_DWORD)v199)
              goto LABEL_66;
          }
          else
          {
            v7 = v208;
            if (v93)
            {
              v100 = (_QWORD *)(v92 + 56);
              v101 = v202;
              v102 = v199;
              while ((ValueMetadata *)*(v100 - 3) != &type metadata for DrawCallComponent)
              {
                v100 += 5;
                if (!--v93)
                  goto LABEL_61;
              }
              v95 = (_QWORD *)(*(_QWORD *)(v86 + 128) + *v100);
              swift_unknownObjectRetain();
              if ((_DWORD)v202 == (_DWORD)v199)
                goto LABEL_66;
            }
            else
            {
              v101 = v202;
              v102 = v199;
LABEL_61:
              swift_unknownObjectRetain();
              v95 = 0;
              if ((_DWORD)v101 == (_DWORD)v102)
                goto LABEL_66;
            }
          }
          v111 = v102 - v101;
          v112 = &v95[v101];
          memset(v278, 0, 112);
          do
          {
            ++v112;
            v113 = swift_retain();
            sub_1B1D60FC0(v113, &v225, v278, v91, (uint64_t)v265, 0);
            swift_release();
            --v111;
          }
          while (v111);
LABEL_66:
          swift_unknownObjectRelease();
          v80 = v204;
          goto LABEL_67;
        }
        goto LABEL_131;
      }
    }
    v7 = v207;
    if (v175 < 1 || !v206)
    {
LABEL_131:
      swift_retain_n();
      sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
LABEL_132:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B2037D3C((uint64_t)v251);
      swift_release_n();
      v8 = v169;
      v23 = v171;
      v22 = v178;
      goto LABEL_6;
    }
    v122 = v51[4];
    v123 = *(unsigned __int8 *)(v173 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v221[0] = v218;
    v221[1] = v219;
    v222 = v220;
    swift_retain_n();
    sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    v124 = 0;
    v185 = v122;
    v190 = v123;
    while (1)
    {
      v125 = (unsigned int *)(v205 + 48 * v124);
      v203 = *v125;
      v200 = v125[1];
      v126 = (uint64_t *)*((_QWORD *)v125 + 2);
      v127 = *((_QWORD *)v125 + 5);
      v209 = v7;
      v196 = *((_QWORD *)v125 + 3);
      v193 = *((_QWORD *)v125 + 4);
      if (v123)
      {
        v128 = *(os_unfair_lock_s **)(v127 + 376);
        swift_retain();
        os_unfair_lock_lock(v128);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v127 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v122);
      sub_1B1A18378((uint64_t)(v51 + 6), (uint64_t)v279, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v129 = v51[4];
      v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v51[6] = ecs_stack_allocator_allocate(v129, 48 * v130, 8);
      v51[7] = v130;
      v51[9] = 0;
      v51[10] = 0;
      v51[8] = 0;
      swift_release();
      v131 = v51[3];
      if (!*(_QWORD *)(*(_QWORD *)(v80 + 496) + 8 * v131))
      {
        if (*(_QWORD *)(v80 + 376))
        {
          v248 = &unk_1EF028DD0;
          v137 = swift_dynamicCastObjCProtocolConditional();
          if (v137)
          {
            v138 = (void *)v137;
            swift_unknownObjectRetain();
            v139 = objc_msgSend(v138, sel_renderCommandEncoder);
            v249 = 0x646F636E45627573;
            v250 = 0xEB000000005B7265;
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v140 = (void *)sub_1B2228728();
            swift_bridgeObjectRelease();
            objc_msgSend(v139, sel_setLabel_, v140);

            v141 = *(_QWORD *)(v204 + 496);
            *(_QWORD *)(v141 + 8 * v131) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v139);
            v122 = v185;
            swift_unknownObjectRelease();
            v80 = v204;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }
        }
      }
      v132 = *(void **)(*(_QWORD *)(v80 + 496) + 8 * v131);
      if (v132)
        break;
      v142 = v209;
LABEL_117:
      sub_1B1F05D48(v51, (unsigned __int16 **)v221, (uint64_t)v279);
      v7 = v142;
      if (*(_QWORD *)(v51[13] + 16))
      {
        v157 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v157, v127);
        swift_bridgeObjectRelease();
        v158 = swift_isUniquelyReferenced_nonNull_native();
        v159 = v51[13];
        if ((v158 & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v159 + 16));
        }
        else
        {
          v160 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v159 + 24) >= 2uLL)
          {
            sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
            v160 = (_QWORD *)swift_allocObject();
            v161 = j__malloc_size(v160);
            v160[2] = 0;
            v160[3] = 2 * ((uint64_t)(v161 - 32) / 72);
          }
          v51[13] = v160;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v51[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v162 = *(char **)(v127 + 232);
          v163 = *(char **)(v127 + 256);
          if (v162 == v163)
          {
            v164 = *(char **)(v127 + 240);
          }
          else
          {
            sub_1B1A1059C(v163, v162);
            v163 = *(char **)(v127 + 232);
            v164 = *(char **)(v127 + 240);
            if (v164 == v163)
            {
              v164 = 0;
              v163 = 0;
              *(_QWORD *)(v127 + 232) = 0;
              *(_QWORD *)(v127 + 240) = 0;
            }
          }
          *(_QWORD *)(v127 + 248) = v164;
          *(_QWORD *)(v127 + 256) = v163;
        }
      }
      ecs_stack_allocator_pop_snapshot(v122);
      v123 = v190;
      if ((v190 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v127 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v127 + 376));
      }
      swift_release();
      if (++v124 == v206)
        goto LABEL_132;
    }
    v133 = *(_QWORD *)(v127 + 48);
    v134 = *(_QWORD *)(v133 + 16);
    if (v126)
    {
      if (v134)
      {
        v135 = v133 + 56;
        while (*(ValueMetadata **)(v135 - 24) != &type metadata for DrawCallComponent)
        {
          v135 += 40;
          if (!--v134)
            goto LABEL_95;
        }
        v148 = v135 - 8;
        v147 = *(_QWORD *)(v135 - 8);
        v146 = *(_QWORD *)(v148 + 8);
        if (v147 <= 1)
          v147 = 1;
        v149 = *(_QWORD *)(v127 + 128) + v146;
        v177 = v149 + *(_QWORD *)(v127 + 240) * v147;
        v150 = v51[4];
        swift_unknownObjectRetain();
        v136 = ecs_stack_allocator_allocate(v150, 8 * v193, 8);
        sub_1B1CC5A70(v126, v193, v149, (uint64_t)v136);
        v250 = 0;
        v249 = 0;
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_release();
        v151 = (_QWORD *)swift_allocObject();
        v151[2] = v126;
        v151[3] = v196;
        v151[4] = v193;
        sub_1B1A18378((uint64_t)&v249, (uint64_t)(v151 + 5), (unint64_t *)&unk_1ED4B8AA0, (uint64_t)&type metadata for PackedRewriter);
        v151[7] = v136;
        v151[8] = &v136[v193];
        v151[9] = v149;
        v151[10] = v177;
        v151[11] = &type metadata for DrawCallComponent;
        v151[12] = &off_1E638BED8;
        v151[13] = &type metadata for DrawCallComponent;
        v151[14] = v127;
        v152 = v51[8];
        v153 = (_QWORD *)(v51[6] + 48 * v152);
        *v153 = &type metadata for DrawCallComponent;
        v153[1] = &off_1E638BED8;
        v153[2] = &type metadata for DrawCallComponent;
        v153[3] = v136;
        v153[4] = sub_1B2038494;
        v153[5] = v151;
        v51[8] = v152 + 1;
      }
      else
      {
LABEL_95:
        swift_unknownObjectRetain();
        v136 = 0;
      }
      v142 = v209;
      v144 = v203;
      v145 = v200;
      if ((_DWORD)v203 == (_DWORD)v200)
        goto LABEL_116;
    }
    else
    {
      v142 = v209;
      if (v134)
      {
        v143 = (_QWORD *)(v133 + 56);
        v144 = v203;
        v145 = v200;
        while ((ValueMetadata *)*(v143 - 3) != &type metadata for DrawCallComponent)
        {
          v143 += 5;
          if (!--v134)
            goto LABEL_111;
        }
        v136 = (_QWORD *)(*(_QWORD *)(v127 + 128) + *v143);
        swift_unknownObjectRetain();
        if ((_DWORD)v203 == (_DWORD)v200)
          goto LABEL_116;
      }
      else
      {
        v144 = v203;
        v145 = v200;
LABEL_111:
        swift_unknownObjectRetain();
        v136 = 0;
        if ((_DWORD)v144 == (_DWORD)v145)
          goto LABEL_116;
      }
    }
    v154 = v145 - v144;
    v155 = &v136[v144];
    memset(v280, 0, 112);
    do
    {
      ++v155;
      v156 = swift_retain();
      sub_1B1D60FC0(v156, &v225, v280, v132, (uint64_t)v265, 0);
      swift_release();
      --v154;
    }
    while (v154);
LABEL_116:
    swift_unknownObjectRelease();
    v80 = v204;
    v122 = v185;
    goto LABEL_117;
  }
}

uint64_t type metadata accessor for ShadowSystem()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for Shadow(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shadow(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Shadow(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Shadow()
{
  return &type metadata for Shadow;
}

const char *sub_1B2037A54()
{
  return "ShadowSystem";
}

uint64_t sub_1B2037A68()
{
  return qword_1EEF5DE38 + 1;
}

uint64_t sub_1B2037A78(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for ShadowState, (uint64_t)&off_1E6373900, v1);
  return swift_release();
}

void sub_1B2037ACC(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = sub_1B2037CA0();
  *a1 = v2;
}

_QWORD *sub_1B2037AF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;

  sub_1B2037CAC(0, &qword_1EEF62668, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = sub_1B1C6A418(0, 6, (void (*)(__int128 *__return_ptr, uint64_t *))sub_1B2037ACC);
  sub_1B19FA070(a1, a1[3]);
  sub_1B2037C5C();
  sub_1B222A150();
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1B222979C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B2037C5C()
{
  unint64_t result;

  result = qword_1EEF62670;
  if (!qword_1EEF62670)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2884, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62670);
  }
  return result;
}

double sub_1B2037CA0()
{
  return 0.0;
}

void sub_1B2037CAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B2037C5C();
    v7 = a3(a1, &type metadata for Shadow.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1B2037D08(uint64_t a1)
{
  uint64_t v1;

  sub_1B2035D18(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B2037D24(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 1224);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1B2037D3C(uint64_t a1)
{
  sub_1B2038234();
  return a1;
}

uint64_t sub_1B2038234()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = STACK[0x618];
  if (STACK[0x618])
  {
    v22 = STACK[0x768];
    v23 = STACK[0x770];
    v26 = STACK[0x758];
    v24 = STACK[0x748];
    v25 = STACK[0x750];
    v20 = STACK[0x740];
    v21 = STACK[0x760];
    v18 = STACK[0x730];
    v19 = STACK[0x738];
    v17 = STACK[0x728];
    v16 = STACK[0x720];
    v15 = STACK[0x700];
    v14 = STACK[0x6F8];
    v13 = STACK[0x6F0];
    v12 = STACK[0x6E8];
    v8 = STACK[0x6D0];
    v7 = STACK[0x6C8];
    v6 = STACK[0x6C0];
    v11 = STACK[0x6B8];
    v10 = STACK[0x6B0];
    v9 = STACK[0x6A8];
    v5 = STACK[0x6A0];
    v4 = STACK[0x698];
    v3 = STACK[0x690];
    v1 = STACK[0x688];
    v2 = STACK[0x680];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1F2F570(v2, v1, v3, v4, v5, v9, v10, v11, v6, v7, v8);
    sub_1B1F2F534(v12, v13, v14, v15);
    sub_1B1F2F570(v16, v17, v18, v19, v20, v24, v25, v26, v21, v22, v23);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B2038470()
{
  swift_unownedRelease();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for Shadow.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B20384D8 + 4 * byte_1B22B2670[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B20384F8 + 4 * byte_1B22B2675[v4]))();
}

_BYTE *sub_1B20384D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B20384F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2038500(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2038508(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2038510(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2038518(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Shadow.CodingKeys()
{
  return &type metadata for Shadow.CodingKeys;
}

__n128 initializeWithCopy for ShadowRenderingCommand(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for ShadowRenderingCommand(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ShadowRenderingCommand(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ShadowRenderingCommand()
{
  return &type metadata for ShadowRenderingCommand;
}

ValueMetadata *type metadata accessor for ShadowState()
{
  return &type metadata for ShadowState;
}

unint64_t sub_1B20385F8()
{
  unint64_t result;

  result = qword_1EEF62688;
  if (!qword_1EEF62688)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B285C, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62688);
  }
  return result;
}

unint64_t sub_1B2038640()
{
  unint64_t result;

  result = qword_1EEF62690;
  if (!qword_1EEF62690)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2794, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62690);
  }
  return result;
}

unint64_t sub_1B2038688()
{
  unint64_t result;

  result = qword_1EEF62698;
  if (!qword_1EEF62698)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B27BC, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62698);
  }
  return result;
}

uint64_t sub_1B20386D4(uint64_t a1, void *a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_1B2147E80(1);
  sub_1B2039F30((uint64_t)v5, v6);
  sub_1B203A85C((uint64_t)a2);
  if (v2)
  {
    swift_release();
  }
  else
  {
    type metadata accessor for GraphTypeResolver();
    v7 = swift_allocObject();
    swift_retain();
    v8 = a2;
    v9 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v7 + 32) = sub_1B1B7E514(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v7 + 40) = sub_1B1B7E6C8(v9);
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v8;
    *(_BYTE *)(v7 + 56) = a1 & 1;
    a1 = sub_1B1BDC0DC();
    v11 = swift_bridgeObjectRetain();
    v12 = sub_1B2039AA4(v11);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX16GraphDiagnostics_rawNodesByID] = v12;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1B20388EC(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 8);
  v21 = v1;
  v2 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                            + 152);
  v3 = swift_retain();
  v2(v22, v3);
  v4 = v22[0];
  v28 = v22[0];
  v27 = v22[1];
  sub_1B1B28C6C((uint64_t)&v27);
  v26 = v22[2];
  sub_1B1B28C6C((uint64_t)&v26);
  v25 = v22[3];
  sub_1B1B28C6C((uint64_t)&v25);
  v24 = v22[4];
  sub_1B1B28C6C((uint64_t)&v24);
  v23 = v22[5];
  sub_1B1B28C6C((uint64_t)&v23);
  v5 = *(_QWORD *)(v4 + 16);
  sub_1B1B28C6C((uint64_t)&v28);
  if (*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v5)
    v6 = v5;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v7 = sub_1B2134084(0, v6, v1);
  swift_release();
  v8 = sub_1B203ACC8(v7, (void (*)(__int128 *__return_ptr, uint64_t, __int128 *))sub_1B203AC68);
  swift_bridgeObjectRelease();
  v9 = v1;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B202A210(0, v10, 0);
    v11 = 0;
    v12 = v20;
    v13 = *(_QWORD *)(v20 + 16);
    v14 = 16 * v13;
    do
    {
      v15 = *(_QWORD *)(v8 + v11 + 32);
      if (v15)
        v16 = *(_QWORD *)(v8 + v11 + 40);
      else
        v16 = 0;
      v17 = *(_QWORD *)(v20 + 24);
      swift_retain();
      if (v13 >= v17 >> 1)
        sub_1B202A210(v17 > 1, v13 + 1, 1);
      *(_QWORD *)(v20 + 16) = v13 + 1;
      v18 = v20 + v14 + v11;
      *(_QWORD *)(v18 + 32) = v15;
      *(_QWORD *)(v18 + 40) = v16;
      v11 += 16;
      ++v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v9 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v12;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B2038B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7, void (*a8)(uint64_t *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t *), uint64_t a9, uint64_t a10)
{
  __int128 v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[3];
  _QWORD v31[6];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v15 = *(_OWORD *)(a10 + 16);
  v30[0] = *(_OWORD *)a10;
  v30[1] = v15;
  v30[2] = *(_OWORD *)(a10 + 32);
  v16 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(*a7
                                                                           + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                             + 152);
  v17 = swift_retain();
  v16(v31, v17);
  swift_release();
  v18 = v31[0];
  v36 = v31[1];
  v37 = v31[0];
  sub_1B1B28C6C((uint64_t)&v36);
  v35 = v31[2];
  sub_1B1B28C6C((uint64_t)&v35);
  v34 = v31[3];
  sub_1B1B28C6C((uint64_t)&v34);
  v33 = v31[4];
  sub_1B1B28C6C((uint64_t)&v33);
  v32 = v31[5];
  sub_1B1B28C6C((uint64_t)&v32);
  v19 = *(_QWORD *)(v18 + 8 * a1 + 32);
  sub_1B19F8CD0(v19);
  sub_1B1B28C6C((uint64_t)&v37);
  v20 = (a5 >> 59) & 2 | (a5 >> 2) & 1;
  if (v20)
  {
    if (v20 == 1)
    {
      sub_1B19F8CD0(a5 & 0xEFFFFFFFFFFFFFFBLL);
      sub_1B1D3590C(v19);
      v22 = v21;
      sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v19);
      if ((v22 & 1) == 0)
        goto LABEL_8;
LABEL_6:
      swift_retain();
      return a2;
    }
    sub_1B19F8D00(v19);
  }
  else
  {
    sub_1B19F8CD0(a5);
    sub_1B1D3590C(v19);
    v24 = v23;
    sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8D00);
    sub_1B19F8D00(v19);
    if ((v24 & 1) == 0)
      goto LABEL_6;
  }
LABEL_8:
  v28 = *(_QWORD *)(a10 + 8);
  if (a2)
  {
    v26 = a2;
    v27 = a3;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  swift_retain();
  swift_retain();
  a8(&v29, v30, &v28, a1, &v26);
  swift_release();
  swift_release();
  return v29;
}

uint64_t sub_1B2038D8C(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  void (*v4)(_QWORD *__return_ptr, uint64_t);
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v48;
  _QWORD *v50;
  _QWORD v51[6];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v4 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*a1 + 152);
  v5 = swift_retain();
  v4(v51, v5);
  swift_release();
  v50 = a1;
  v6 = a1[2];
  v7 = *(_QWORD *)(v6 + 16);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v57 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v7, 0);
    v9 = 0;
    v8 = v57;
    v10 = v57[2];
    v11 = 2 * v10;
    do
    {
      v12 = *(_QWORD *)(v6 + v9 * 8 + 32);
      v13 = *(_QWORD *)(v6 + v9 * 8 + 40);
      v57 = v8;
      v14 = v8[3];
      v15 = v10 + 1;
      swift_retain();
      if (v10 >= v14 >> 1)
      {
        sub_1B202A2C8(v14 > 1, v15, 1);
        v8 = v57;
      }
      v8[2] = v15;
      v16 = &v8[v11 + v9];
      v16[4] = v12;
      v16[5] = v13;
      v9 += 2;
      ++v10;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  v17 = v8[2];
  v18 = a3;
  if (!v17)
  {
LABEL_39:
    v57 = (_QWORD *)v51[0];
    sub_1B1B28C6C((uint64_t)&v57);
    v56 = v51[1];
    sub_1B1B28C6C((uint64_t)&v56);
    v55 = v51[2];
    sub_1B1B28C6C((uint64_t)&v55);
    v54 = v51[3];
    sub_1B1B28C6C((uint64_t)&v54);
    v53 = v51[4];
    sub_1B1B28C6C((uint64_t)&v53);
    v52 = v51[5];
    sub_1B1B28C6C((uint64_t)&v52);
    return swift_bridgeObjectRelease();
  }
  v19 = 0;
  v20 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v21 = v8 + 5;
  v48 = v8[2];
  while (1)
  {
    v22 = *(v21 - 1);
    if (!v22)
      goto LABEL_11;
    v23 = *v21;
    if (v19 >= *(_QWORD *)(v51[0] + 16))
      break;
    v24 = *(_QWORD *)(v51[0] + 8 * v19 + 32);
    sub_1B19F8CD0(v24);
    if (v20)
      goto LABEL_15;
LABEL_19:
    swift_retain();
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
    sub_1B1D3590C(v24);
    v28 = v27;
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
    sub_1B19F8D00(v24);
    if ((v28 & 1) != 0)
      goto LABEL_22;
LABEL_9:
    swift_release();
LABEL_10:
    v20 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
LABEL_11:
    ++v19;
    v21 += 2;
    if (v17 == v19)
      goto LABEL_39;
  }
  v24 = 0x8000000000000000;
  if (!v20)
    goto LABEL_19;
LABEL_15:
  if (v20 == 1)
  {
    swift_retain();
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
    sub_1B1D3590C(v24);
    v26 = v25;
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
    sub_1B19F8D00(v24);
    if ((v26 & 1) == 0)
      goto LABEL_22;
    goto LABEL_9;
  }
  swift_retain();
  sub_1B19F8D00(v24);
LABEL_22:
  v29 = *v18;
  if (*(_QWORD *)(*v18 + 16))
  {
    v30 = sub_1B1DC3AC8(v22);
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((v32 & 1) != 0)
    {
      v31 = *(_QWORD **)(*(_QWORD *)(v29 + 56) + 8 * v30);
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v31 = sub_1B1C63928(0, v31[2] + 1, 1, v31);
  v34 = v31[2];
  v33 = v31[3];
  if (v34 >= v33 >> 1)
    v31 = sub_1B1C63928(v33 > 1, v34 + 1, 1, v31);
  v31[2] = v34 + 1;
  v35 = &v31[3 * v34];
  v35[4] = v50;
  v35[5] = v23;
  v35[6] = v19;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57 = (_QWORD *)*v18;
  v37 = v57;
  *v18 = 0x8000000000000000;
  v38 = sub_1B1DC3AC8(v22);
  v40 = v39;
  v41 = v37[2] + ((v39 & 1) == 0);
  if (v37[3] >= v41)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EA8C78();
    goto LABEL_35;
  }
  sub_1B1E924A4(v41, isUniquelyReferenced_nonNull_native);
  v42 = sub_1B1DC3AC8(v22);
  if ((v40 & 1) == (v43 & 1))
  {
    v38 = v42;
LABEL_35:
    v44 = v57;
    if ((v40 & 1) != 0)
    {
      v45 = v57[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v45 + 8 * v38) = v31;
      v18 = a3;
    }
    else
    {
      v57[(v38 >> 6) + 8] |= 1 << v38;
      *(_QWORD *)(v44[6] + 8 * v38) = v22;
      *(_QWORD *)(v44[7] + 8 * v38) = v31;
      ++v44[2];
    }
    *v18 = (uint64_t)v44;
    swift_release();
    swift_bridgeObjectRelease();
    v17 = v48;
    goto LABEL_10;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B203921C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  void (*v5)(_QWORD *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v41;
  _QWORD v42[6];
  _QWORD v43[6];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                            + 152);
  v6 = swift_retain();
  v5(v42, v6);
  v7 = swift_release();
  v5(v43, v7);
  v8 = v43[0];
  v54 = v43[1];
  v55 = v43[0];
  sub_1B1B28C6C((uint64_t)&v54);
  v53 = v43[2];
  sub_1B1B28C6C((uint64_t)&v53);
  v52 = v43[3];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v43[4];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v43[5];
  sub_1B1B28C6C((uint64_t)&v50);
  v9 = *(_QWORD *)(v8 + 16);
  sub_1B1B28C6C((uint64_t)&v55);
  if (*(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) > v9)
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v10 = sub_1B2134084(0, v9, a1);
  v41 = a1;
  swift_release();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
LABEL_34:
    v49 = (_QWORD *)v42[0];
    sub_1B1B28C6C((uint64_t)&v49);
    v48 = v42[1];
    sub_1B1B28C6C((uint64_t)&v48);
    v47 = v42[2];
    sub_1B1B28C6C((uint64_t)&v47);
    v46 = v42[3];
    sub_1B1B28C6C((uint64_t)&v46);
    v45 = v42[4];
    sub_1B1B28C6C((uint64_t)&v45);
    v44 = v42[5];
    sub_1B1B28C6C((uint64_t)&v44);
    return swift_bridgeObjectRelease();
  }
  v12 = 0;
  v13 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v14 = (uint64_t *)(v10 + 40);
  while (1)
  {
    v15 = *(v14 - 1);
    if (!v15)
      goto LABEL_6;
    v16 = *v14;
    if (v12 >= *(_QWORD *)(v42[0] + 16))
    {
      v17 = 0x8000000000000000;
      if (!v13)
      {
LABEL_14:
        swift_retain();
        sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
        sub_1B1D3590C(v17);
        v21 = v20;
        sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
        sub_1B19F8D00(v17);
        if ((v21 & 1) != 0)
          goto LABEL_17;
        goto LABEL_5;
      }
    }
    else
    {
      v17 = *(_QWORD *)(v42[0] + 8 * v12 + 32);
      sub_1B19F8CD0(v17);
      if (!v13)
        goto LABEL_14;
    }
    if (v13 != 1)
      break;
    swift_retain();
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
    sub_1B1D3590C(v17);
    v19 = v18;
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
    sub_1B19F8D00(v17);
    if ((v19 & 1) == 0)
      goto LABEL_17;
LABEL_5:
    swift_release();
LABEL_6:
    ++v12;
    v14 += 2;
    if (v11 == v12)
      goto LABEL_34;
  }
  swift_retain();
  sub_1B19F8D00(v17);
LABEL_17:
  v22 = *a3;
  if (*(_QWORD *)(*a3 + 16))
  {
    v23 = sub_1B1DC3AC8(v15);
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((v25 & 1) != 0)
    {
      v24 = *(_QWORD **)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v24 = sub_1B1C640C0(0, v24[2] + 1, 1, v24);
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    v24 = sub_1B1C640C0(v26 > 1, v27 + 1, 1, v24);
  v24[2] = v27 + 1;
  v28 = &v24[3 * v27];
  v28[4] = v41;
  v28[5] = v16;
  v28[6] = v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v49 = (_QWORD *)*a3;
  v30 = v49;
  *a3 = 0x8000000000000000;
  v31 = sub_1B1DC3AC8(v15);
  v33 = v32;
  v34 = v30[2] + ((v32 & 1) == 0);
  if (v30[3] >= v34)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EA9D14();
    goto LABEL_30;
  }
  sub_1B1E9414C(v34, isUniquelyReferenced_nonNull_native);
  v35 = sub_1B1DC3AC8(v15);
  if ((v33 & 1) == (v36 & 1))
  {
    v31 = v35;
LABEL_30:
    v37 = v49;
    if ((v33 & 1) != 0)
    {
      v38 = v49[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v38 + 8 * v31) = v24;
    }
    else
    {
      v49[(v31 >> 6) + 8] |= 1 << v31;
      *(_QWORD *)(v37[6] + 8 * v31) = v15;
      *(_QWORD *)(v37[7] + 8 * v31) = v24;
      ++v37[2];
    }
    *a3 = (uint64_t)v37;
    swift_release();
    swift_bridgeObjectRelease();
    v13 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
    goto LABEL_6;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B20396B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __objc2_class **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  int *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD v31[2];

  sub_1B1792854(0, &qword_1EEF5C1F0, (void (*)(uint64_t))type metadata accessor for GraphError);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (_QWORD *)((char *)v31 - v6);
  v8 = *(__objc2_class ***)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  type metadata accessor for ImportErrorNode(0);
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    if (*(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX15ImportErrorNode_message + 8))
    {
      v31[0] = 0;
      v31[1] = 0xE000000000000000;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      strcpy((char *)v31, "Import error: ");
      HIBYTE(v31[1]) = -18;
      sub_1B2228890();
      swift_release();
      swift_bridgeObjectRelease();
      v11 = v31[0];
      v10 = v31[1];
      *v7 = a1;
      v12 = (int *)type metadata accessor for GraphError();
      v13 = (char *)v7 + v12[5];
      v14 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
      v15 = sub_1B222826C();
      v16 = *(_QWORD *)(v15 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    else
    {
      *v7 = a1;
      v12 = (int *)type metadata accessor for GraphError();
      v19 = (char *)v7 + v12[5];
      v20 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
      v21 = sub_1B222826C();
      v22 = *(_QWORD *)(v21 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      v10 = 0xEC000000726F7272;
      v11 = 0x652074726F706D49;
    }
    v23 = (char *)v7 + v12[6];
    *(_QWORD *)v23 = 1;
    v23[8] = -96;
    v24 = (_QWORD *)((char *)v7 + v12[7]);
    *v24 = v11;
    v24[1] = v10;
    type metadata accessor for GraphError();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v12 - 1) + 56))(v7, 0, 1, v12);
    sub_1B2039A50((uint64_t)v7, (uint64_t)a2);
    return swift_retain();
  }
  else if (*v8 == _TtC3VFX17DecodingErrorNode)
  {
    *a2 = a1;
    v25 = (int *)type metadata accessor for GraphError();
    v26 = (char *)a2 + v25[5];
    v27 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v28 = sub_1B222826C();
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    v30 = (char *)a2 + v25[6];
    *(_QWORD *)v30 = 1;
    v30[8] = -96;
    *(_OWORD *)((char *)a2 + v25[7]) = xmmword_1B22B28F0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v25 - 1) + 56))(a2, 0, 1, v25);
    return swift_retain();
  }
  else
  {
    v17 = type metadata accessor for GraphError();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
}

uint64_t sub_1B2039A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1EEF5C1F0, (void (*)(uint64_t))type metadata accessor for GraphError);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2039AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  uint64_t v29;
  char *v30;
  void *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD v47[2];
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  sub_1B203AAF0();
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v57 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v47 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v55 = (char *)v47 - v12;
  v13 = *(_QWORD *)(a1 + 64);
  v54 = a1 + 64;
  v61 = MEMORY[0x1E0DEE9E0];
  v14 = -1 << *(_BYTE *)(a1 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v47[1] = -1 << *(_BYTE *)(a1 + 32);
  v17 = (unint64_t)(63 - v14) >> 6;
  swift_bridgeObjectRetain();
  v58 = 0;
  v52 = a1;
  v53 = v17;
  v48 = a1 + 112;
  v49 = v17 - 6;
  v50 = v9;
  v51 = v3;
  if (v16)
    goto LABEL_7;
LABEL_8:
  v19 = v58 + 1;
  if (v58 + 1 < v53)
  {
    v20 = *(_QWORD *)(v54 + 8 * v19);
    if (v20)
      goto LABEL_22;
    v19 = v58 + 2;
    if (v58 + 2 < v53)
    {
      v20 = *(_QWORD *)(v54 + 8 * v19);
      if (v20)
        goto LABEL_22;
      v19 = v58 + 3;
      if (v58 + 3 < v53)
      {
        v20 = *(_QWORD *)(v54 + 8 * v19);
        if (v20)
          goto LABEL_22;
        v19 = v58 + 4;
        if (v58 + 4 < v53)
        {
          v20 = *(_QWORD *)(v54 + 8 * v19);
          if (v20)
            goto LABEL_22;
          v19 = v58 + 5;
          if (v58 + 5 < v53)
          {
            v20 = *(_QWORD *)(v54 + 8 * v19);
            if (!v20)
            {
              v21 = v58;
              do
              {
                if (v49 == v21)
                  goto LABEL_37;
                v20 = *(_QWORD *)(v48 + 8 * v21++);
              }
              while (!v20);
              v19 = v21 + 5;
            }
LABEL_22:
            v58 = v19;
            v59 = (v20 - 1) & v20;
            for (i = __clz(__rbit64(v20)) + (v19 << 6); ; i = __clz(__rbit64(v16)) | (v58 << 6))
            {
              v22 = *(_QWORD *)(a1 + 48);
              v23 = sub_1B222826C();
              v24 = *(_QWORD *)(v23 - 8);
              v56 = *(_QWORD *)(v24 + 72);
              v25 = (uint64_t)v55;
              (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v55, v22 + v56 * i, v23);
              v26 = *(_QWORD *)(a1 + 56) + 16 * i;
              v27 = *(void **)v26;
              v28 = *(_BYTE *)(v26 + 8);
              v29 = v25 + *(int *)(v3 + 48);
              *(_QWORD *)v29 = v27;
              *(_BYTE *)(v29 + 8) = v28;
              sub_1B1A025EC(v25, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B203AAF0);
              v30 = &v9[*(int *)(v3 + 48)];
              v31 = *(void **)v30;
              if (v30[8] == 1)
              {
                v60 = *(void **)v30;
                sub_1B1BE2C40(v27, v28);
                sub_1B1A203F8();
                swift_willThrowTypedImpl();
                sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B203AAF0);
                v16 = v59;
                if (!v59)
                  goto LABEL_8;
              }
              else
              {
                v32 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
                v32(v57, v9, v23);
                v33 = v61;
                v34 = *(_QWORD *)(v61 + 16);
                if (*(_QWORD *)(v61 + 24) <= v34)
                {
                  v35 = v34 + 1;
                  sub_1B1BE2C40(v27, v28);
                  sub_1B1BE2C40(v31, 0);
                  sub_1B1E943F4(v35, 1);
                  v33 = v61;
                }
                else
                {
                  sub_1B1BE2C40(v27, v28);
                  sub_1B1BE2C40(v31, 0);
                }
                sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
                v36 = sub_1B22285D8();
                v37 = v33 + 64;
                v38 = -1 << *(_BYTE *)(v33 + 32);
                v39 = v36 & ~v38;
                v40 = v39 >> 6;
                if (((-1 << v39) & ~*(_QWORD *)(v33 + 64 + 8 * (v39 >> 6))) != 0)
                {
                  v41 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v33 + 64 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
                }
                else
                {
                  v42 = (unint64_t)(63 - v38) >> 6;
                  do
                  {
                    if (v40 + 1 == v42)
                      v40 = 0;
                    else
                      ++v40;
                    v43 = *(_QWORD *)(v37 + 8 * v40);
                  }
                  while (v43 == -1);
                  v41 = __clz(__rbit64(~v43)) + (v40 << 6);
                }
                v16 = v59;
                v45 = v56;
                v44 = v57;
                *(_QWORD *)(v37 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
                v32((char *)(*(_QWORD *)(v33 + 48) + v41 * v45), v44, v23);
                *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v41) = v31;
                ++*(_QWORD *)(v33 + 16);
                sub_1B1B9CAE0(v31, 0);
                v3 = v51;
                a1 = v52;
                v9 = v50;
                if (!v16)
                  goto LABEL_8;
              }
LABEL_7:
              v59 = (v16 - 1) & v16;
            }
          }
        }
      }
    }
  }
LABEL_37:
  sub_1B19F8D30();
  return v61;
}

uint64_t sub_1B2039F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  void *v24;
  unint64_t v25;
  char v26;
  uint64_t (*v27)@<X0>(uint64_t@<X0>, uint64_t@<X2>, __int128 *@<X3>, uint64_t@<X8>);
  uint64_t v28;
  _QWORD **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  if (qword_1EEF572D8 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, a2);
  LOBYTE(v24) = v3;
  v25 = v4;
  v26 = v5;
  v27 = sub_1B203A1B8;
  v28 = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  sub_1B1C5A714((uint64_t)sub_1B203ABCC, (uint64_t)v23, v3, v4, v5, MEMORY[0x1E0DEE9D8]);
  v7 = sub_1B1C6A11C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = v7;
  swift_bridgeObjectRelease();
  v32 = sub_1B1B96ADC(v6);
  MEMORY[0x1E0C80A78](v32, v8);
  v28 = 0x1000000000000000;
  v29 = &v32;
  MEMORY[0x1E0C80A78](v9, v10);
  v24 = sub_1B203AC20;
  v25 = v11;
  v30 = sub_1B1C6D068(v6);
  v31 = v12;
  sub_1B1C5C9C4((uint64_t)sub_1B1BE2C54, (uint64_t)v23, 1, 0x1000000000000000uLL, 0, v6, (uint64_t)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = swift_bridgeObjectRetain();
  v14 = sub_1B1BAD65C(v13);
  v15 = swift_bridgeObjectRelease_n();
  MEMORY[0x1E0C80A78](v15, v16);
  v28 = v14;
  MEMORY[0x1E0C80A78](v17, v18);
  v24 = sub_1B203AC2C;
  v25 = v19;
  v20 = MEMORY[0x1E0DEE9D8];
  v30 = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
  v31 = v21;
  sub_1B1C5C9C4((uint64_t)sub_1B1BE3678, (uint64_t)v23, 1, 0x1000000000000000uLL, 0, v20, (uint64_t)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B203A1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  void (*v13)(_QWORD *__return_ptr);
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B50, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v24[-2] - v10;
  v12 = *a3;
  if (*(_QWORD *)a3)
    goto LABEL_4;
  v13 = *(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 8)
                                                                  + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                    + 152);
  v23 = *a3;
  v13(v24);
  v14 = v24[0];
  v29 = v24[1];
  v30 = v24[0];
  sub_1B1B28C6C((uint64_t)&v29);
  v28 = v24[2];
  sub_1B1B28C6C((uint64_t)&v28);
  v27 = v24[3];
  sub_1B1B28C6C((uint64_t)&v27);
  v26 = v24[4];
  sub_1B1B28C6C((uint64_t)&v26);
  v25 = v24[5];
  sub_1B1B28C6C((uint64_t)&v25);
  v15 = *(_QWORD *)(v14 + 8 * a2 + 32);
  sub_1B19F8CD0(v15);
  sub_1B1B28C6C((uint64_t)&v30);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B1D3590C(v15);
  v17 = v16;
  swift_release();
  sub_1B19F8D00(v15);
  v12 = v23;
  if ((v17 & 1) == 0)
  {
LABEL_4:
    *(_OWORD *)a4 = v12;
    return swift_retain();
  }
  else
  {
    type metadata accessor for ImplicitNoopNode(0);
    v18 = (_QWORD *)swift_allocObject();
    v19 = MEMORY[0x1E0DEE9D8];
    v18[3] = 0;
    v18[4] = 0;
    v18[2] = v19;
    sub_1B2228260();
    v20 = sub_1B222826C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 1, 1, v20);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    v21 = sub_1B20E4E94((uint64_t)v18, v19, (uint64_t)v11, 0, 0xF000000000000000);
    result = swift_release();
    *(_QWORD *)a4 = v21;
    *(_QWORD *)(a4 + 8) = 0;
  }
  return result;
}

uint64_t sub_1B203A3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B50, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  MEMORY[0x1E0C80A78](v4, v5);
  v46 = (char *)&v44 - v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 40);
  v9 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
  swift_retain();
  swift_retain();
  v10 = sub_1B1FF89C4();
  swift_release();
  if ((v10 & 1) == 0)
    return swift_release();
  v45 = v8;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(a2 + 16))
  {
    v12 = sub_1B1DC3AC8(v7);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v12);
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v14 = MEMORY[0x1E0DEE9D8];
  }
  v16 = *(_QWORD *)(v14 + 16);
  v47 = v7;
  if (v16)
  {
    v44 = (uint64_t *)v9;
    v48 = v11;
    sub_1B202A10C(0, v16, 0);
    v17 = v48;
    v18 = v48[2];
    v19 = 40;
    do
    {
      v20 = *(_QWORD *)(v14 + v19);
      v48 = v17;
      v21 = v17[3];
      if (v18 >= v21 >> 1)
      {
        sub_1B202A10C(v21 > 1, v18 + 1, 1);
        v17 = v48;
      }
      v17[2] = v18 + 1;
      v17[v18 + 4] = v20;
      v19 += 24;
      ++v18;
      --v16;
    }
    while (v16);
    v22 = swift_bridgeObjectRelease();
    v7 = v47;
    v9 = (uint64_t)v44;
  }
  else
  {
    v22 = swift_bridgeObjectRelease();
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  (*(void (**)(_QWORD **__return_ptr, uint64_t))(**(_QWORD **)(v7 + v9) + 152))(&v48, v22);
  v23 = v49;
  v59 = v49;
  v58 = v48;
  sub_1B1B28C6C((uint64_t)&v58);
  v57 = v50;
  sub_1B1B28C6C((uint64_t)&v57);
  v56 = v51;
  sub_1B1B28C6C((uint64_t)&v56);
  v55 = v52;
  sub_1B1B28C6C((uint64_t)&v55);
  v54 = v53;
  sub_1B1B28C6C((uint64_t)&v54);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = 0;
    v26 = v23 + 32;
    v44 = v17 + 6;
    do
    {
      v27 = *(_QWORD *)(v26 + 8 * v25);
      *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
      sub_1B19F8CD0(v27);
      sub_1B1D3590C(v27);
      v29 = v28;
      swift_release();
      if ((v29 & 1) != 0)
      {
        v30 = v17[2];
        if (!v30)
          goto LABEL_23;
        if (v17[4] != v25)
        {
          if (v30 == 1)
            goto LABEL_23;
          if (v17[5] != v25)
          {
            v41 = v30 - 2;
            if (!v41)
            {
LABEL_23:
              type metadata accessor for ImplicitDoNode(0);
              v31 = (_QWORD *)swift_allocObject();
              v31[4] = 0;
              v32 = MEMORY[0x1E0DEE9D8];
              v31[2] = MEMORY[0x1E0DEE9D8];
              v31[3] = 0;
              sub_1B2228260();
              v33 = sub_1B222826C();
              v34 = (uint64_t)v46;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v46, 1, 1, v33);
              type metadata accessor for AuthoringNode();
              swift_allocObject();
              v35 = sub_1B20E4E94((uint64_t)v31, v32, v34, 0, 0xF000000000000000);
              swift_release();
              v36 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
              v37 = *(_QWORD **)(v35 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
              swift_retain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v35 + v36) = v37;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v37 = sub_1B1FFEED4(v37);
                *(_QWORD *)(v35 + v36) = v37;
              }
              v39 = v45;
              v37[4] = v47;
              v37[5] = v25;
              swift_release();
              v40 = swift_retain();
              MEMORY[0x1B5E2064C](v40);
              if (*(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                sub_1B2228AF4();
              sub_1B2228B30();
              sub_1B2228AD0();
              sub_1B19F8D00(v27);
              swift_release();
              goto LABEL_18;
            }
            v42 = v44;
            while (1)
            {
              v43 = *v42++;
              if (v43 == v25)
                break;
              if (!--v41)
                goto LABEL_23;
            }
          }
        }
      }
      sub_1B19F8D00(v27);
LABEL_18:
      ++v25;
    }
    while (v25 != v24);
  }
  sub_1B1B28C6C((uint64_t)&v59);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B203A85C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[4];
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = *v1;
  v9 = a1;
  v10 = v3;
  v7[2] = sub_1B203AB60;
  v7[3] = &v8;
  v4 = MEMORY[0x1E0DEE9D8];
  v11[0] = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
  v11[1] = v5;
  sub_1B1C5C9C4((uint64_t)sub_1B1B28F5C, (uint64_t)v7, 1, 0x1000000000000000uLL, 0, v4, (uint64_t)v11);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v2)
    __break(1u);
  return result;
}

void sub_1B203A90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  sub_1B1792854(0, &qword_1EEF5C1F0, (void (*)(uint64_t))type metadata accessor for GraphError);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v21 - v6);
  v8 = type metadata accessor for GraphError();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B20396B0(*(_QWORD *)(a1 + 8), v7);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1B203AB80((uint64_t)v7);
  }
  else
  {
    sub_1B1A025EC((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for GraphError);
    sub_1B19E52CC((unint64_t *)&qword_1EEF5CE00, (uint64_t (*)(uint64_t))type metadata accessor for GraphError, (uint64_t)&unk_1B2281CE0);
    v13 = (void *)swift_allocError();
    sub_1B1BE2A1C((uint64_t)v12, v14);
    v15 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    v16 = *(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    v17 = v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a2 + v15) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = sub_1B1C63944(0, v16[2] + 1, 1, v16);
      *(_QWORD *)(a2 + v15) = v16;
    }
    v20 = v16[2];
    v19 = v16[3];
    if (v20 >= v19 >> 1)
    {
      v16 = sub_1B1C63944(v19 > 1, v20 + 1, 1, v16);
      *(_QWORD *)(a2 + v15) = v16;
    }
    v16[2] = v20 + 1;
    v16[v20 + 4] = v13;
    sub_1B1A04628((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for GraphError);

  }
}

void sub_1B203AAF0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF626A0)
  {
    sub_1B222826C();
    sub_1B1B9CA60();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF626A0);
  }
}

void sub_1B203AB60(uint64_t a1)
{
  uint64_t v1;

  sub_1B203A90C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B203AB78(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  return sub_1B203921C(*a1, a2, a3);
}

uint64_t sub_1B203AB80(uint64_t a1)
{
  uint64_t v2;

  sub_1B1792854(0, &qword_1EEF5C1F0, (void (*)(uint64_t))type metadata accessor for GraphError);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B203ABCC@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t result;
  _OWORD v6[3];

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[2] = a1[2];
  result = sub_1B20388EC((uint64_t)v6);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B203AC20(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B203921C(*a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1B203AC2C(uint64_t a1)
{
  uint64_t v1;

  return sub_1B203A3D4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B203AC44()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B203AC68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(uint64_t *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t *);
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  uint64_t v16;
  _OWORD v17[3];

  v5 = *(unsigned __int8 *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(unsigned __int8 *)(v3 + 32);
  v8 = *(_QWORD **)(v3 + 40);
  v9 = *(void (**)(uint64_t *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t *))(v3 + 48);
  v10 = *(_QWORD *)(v3 + 56);
  v11 = *(_OWORD **)(v3 + 64);
  v13 = *a2;
  v12 = a2[1];
  v14 = v11[1];
  v17[0] = *v11;
  v17[1] = v14;
  v17[2] = v11[2];
  result = sub_1B2038B70(a1, v13, v12, v5, v6, v7, v8, v9, v10, (uint64_t)v17);
  *a3 = result;
  a3[1] = v16;
  return result;
}

uint64_t sub_1B203ACC8(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t, __int128 *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = MEMORY[0x1E0DEE9D8];
  sub_1B202A270(0, 0, 0);
  v4 = v15;
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    v7 = a1 + 32;
    do
    {
      v13 = *(_OWORD *)(v7 + 16 * v6);
      swift_retain();
      a2(&v14, v6, &v13);
      swift_release();
      v8 = v14;
      v15 = v4;
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        v12 = v14;
        sub_1B202A270(v9 > 1, v10 + 1, 1);
        v8 = v12;
        v4 = v15;
      }
      ++v6;
      *(_QWORD *)(v4 + 16) = v10 + 1;
      *(_OWORD *)(v4 + 16 * v10 + 32) = v8;
    }
    while (v5 != v6);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B203ADF4(char *a1, unsigned __int8 *a2)
{
  return sub_1B1F2F738(*a1, *a2);
}

uint64_t sub_1B203AE00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B203EB60();
  *a1 = result;
  return result;
}

void sub_1B203AE2C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 0x6C6174656DLL;
  if (v2 != 1)
    v4 = 0x7466697773;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 99;
  if (!v5)
    v3 = 0xE500000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B203AE78()
{
  sub_1B203EDF0();
  return sub_1B2228A4C();
}

uint64_t sub_1B203AED4()
{
  sub_1B203EDF0();
  return sub_1B22289D4();
}

uint64_t sub_1B203AF20()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B203AFAC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B203B014()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B203B09C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C1790;
}

uint64_t sub_1B203B0AC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4C28207466697753;
  if (*v0 == 1)
    v1 = 0x6C6174654DLL;
  if (*v0)
    return v1;
  else
    return 67;
}

void sub_1B203B104()
{
  __int128 *v0;
  _BYTE v1[40];

  sub_1B1CAECBC(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

unint64_t sub_1B203B140()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD000000000000015;
}

void sub_1B203B2C4()
{
  __int128 *v0;
  _BYTE v1[40];

  sub_1B1CAECBC(v0, (uint64_t)v1);
  sub_1B203B104();
}

uint64_t sub_1B203B2F8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1B203B318();
  qword_1EEF626B0 = result;
  *(_QWORD *)algn_1EEF626B8 = v1;
  return result;
}

uint64_t sub_1B203B318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v23[2];
  id v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v0 = sub_1B2228110();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v23 - v7;
  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_defaultManager);
  v11 = objc_msgSend(v10, sel_temporaryDirectory);

  sub_1B22280C8();
  sub_1B22280A4();
  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v13 = sub_1B22280D4();
  v12(v8, v0);
  v14 = objc_msgSend(v9, sel_defaultManager);
  v15 = (void *)sub_1B2228728();
  v24 = 0;
  LODWORD(v8) = objc_msgSend(v14, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v15, 1, 0, &v24);

  if ((_DWORD)v8)
  {
    v16 = v24;
  }
  else
  {
    v17 = v24;
    v18 = (void *)sub_1B2227FB4();

    swift_willThrow();
    if (qword_1ED4BF430 != -1)
      swift_once();
    v24 = 0;
    v25 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v23[1] = v18;
    sub_1B1A203F8();
    sub_1B22295EC();
    v19 = (uint64_t)v24;
    v20 = v25;
    v21 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v24 = 0;
    swift_retain();
    sub_1B1F1AD70(v21, (uint64_t *)&v24, v19, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

  }
  return v13;
}

uint64_t sub_1B203B624()
{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v4[2];

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v1 = *(void **)(v0 + 64);
    if (v1)
    {
      if (dlclose(v1) == -1)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v4[1] = 0xE900000000000020;
        swift_retain();
        dlerror();
        sub_1B22288A8();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v2 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v4[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v2, v4, 0x3A65736F6C636C64, 0xE900000000000020);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  *(_QWORD *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CodeLoader()
{
  return objc_opt_self();
}

void sub_1B203B7B8()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B203B810()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B203B868()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B203B8C0()
{
  sub_1B2229688();
  __break(1u);
}

void (*sub_1B203B918(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4))(char *, uint64_t)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v31 = a1;
  v5 = v4;
  v32 = a2;
  v35 = sub_1B22287A0();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1B2228110();
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - v16;
  v18 = *(_QWORD *)(v4 + 80);
  if (v18)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    LOBYTE(v37) = *(_BYTE *)(v18 + 24);
    sub_1B22295EC();
    sub_1B2228890();
  }
  v38 = a3;
  v39 = a4;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v19 = v30;
  v37 = sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v20 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v20, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v21 = sub_1B2228890();
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 352))(v21);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v23 = objc_msgSend(v22, sel_temporaryDirectory);

  sub_1B22280C8();
  sub_1B22280A4();
  swift_bridgeObjectRelease();
  v38 = v31;
  v39 = v32;
  sub_1B2228788();
  sub_1B1A06460();
  sub_1B2229268();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v35);
  if (v19)
  {
    v24 = *(void (**)(char *, uint64_t))(v34 + 8);
    v25 = v36;
    v24(v13, v36);
    v24(v17, v25);
  }
  else
  {
    v24 = (void (*)(char *, uint64_t))sub_1B22280D4();
    v26 = *(void (**)(char *, uint64_t))(v34 + 8);
    v27 = v13;
    v28 = v36;
    v26(v27, v36);
    v26(v17, v28);
  }
  return v24;
}

uint64_t sub_1B203BCDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unsigned int v17;
  id v18;
  id v19;
  void *v20;
  int64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v2 = v1;
  v40 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v1 + 24))
  {
    v4 = *(_QWORD *)(v1 + 16);
    v5 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v38 = 6449516;
    v39 = 0xE300000000000000;
    sub_1B2228890();
    sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
    v6 = MEMORY[0x1E0DEA2D0];
    sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v6, MEMORY[0x1E0DEAF38]);
    sub_1B222895C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v4 = 6449516;
    v5 = 0xE300000000000000;
  }
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = qword_1EEF57510;
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  v39 = v7;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v9 = (void *)sub_1B2228728();
  v10 = (void *)sub_1B2228728();
  v11 = objc_msgSend(v9, sel_stringByAppendingPathComponent_, v10);

  v12 = sub_1B222874C();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)(v2 + 32) = v12;
  *(_QWORD *)(v2 + 40) = v14;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  swift_bridgeObjectRetain();
  v16 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v38 = 0;
  v17 = objc_msgSend(v15, sel_removeItemAtPath_error_, v16, &v38);

  if (v17)
  {
    v18 = (id)v38;
  }
  else
  {
    v19 = (id)v38;
    v20 = (void *)sub_1B2227FB4();

    swift_willThrow();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v38 = 0x20676E696B6E696CLL;
  v39 = 0xE800000000000000;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v37 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    sub_1B2029FFC(0, v21, 0);
    v22 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v23 = (void *)sub_1B2228728();
      v24 = objc_msgSend(v23, sel_lastPathComponent);

      v25 = sub_1B222874C();
      v27 = v26;
      swift_bridgeObjectRelease();

      v29 = *(_QWORD *)(v37 + 16);
      v28 = *(_QWORD *)(v37 + 24);
      if (v29 >= v28 >> 1)
        sub_1B2029FFC(v28 > 1, v29 + 1, 1);
      v22 += 16;
      *(_QWORD *)(v37 + 16) = v29 + 1;
      v30 = v37 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v25;
      *(_QWORD *)(v30 + 40) = v27;
      --v21;
    }
    while (v21);
  }
  else
  {
    swift_retain();
  }
  v31 = MEMORY[0x1E0DEA968];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8((unint64_t *)&qword_1ED4BA4A0, (unint64_t *)&qword_1ED4BA490, v31, MEMORY[0x1E0DEAF20]);
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v32 = v38;
  v33 = v39;
  v34 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v38 = 0;
  swift_retain();
  sub_1B1F1AD70(v34, &v38, v32, v33);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1BD61A8();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D1257C();
  swift_allocError();
  *(_QWORD *)v35 = 0xD000000000000027;
  *(_QWORD *)(v35 + 8) = 0x80000001B2348570;
  *(_QWORD *)(v35 + 16) = 0;
  *(_QWORD *)(v35 + 24) = 0;
  *(_BYTE *)(v35 + 32) = 3;
  return swift_willThrow();
}

uint64_t sub_1B203C2D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = sub_1B2228110();
  v19 = *(_QWORD *)(v2 - 8);
  v20 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0x6173726576696E75;
  v23 = 0xE90000000000006CLL;
  sub_1B2228890();
  v21 = sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v6 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v6, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (qword_1EEF57510 != -1)
    swift_once();
  v7 = (void *)sub_1B2228728();
  v8 = (void *)sub_1B2228728();
  v9 = objc_msgSend(v7, sel_stringByAppendingPathComponent_, v8);

  v10 = sub_1B222874C();
  v12 = v11;
  swift_bridgeObjectRelease();

  v22 = v10;
  v23 = v12;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228050();
  swift_bridgeObjectRelease();
  sub_1B222805C();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v22 = 0;
  v23 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v22 = 0xD00000000000001ALL;
  v23 = 0x80000001B23485D0;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v13 = v22;
  v14 = v23;
  v15 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v22 = 0;
  swift_retain();
  sub_1B1F1AD70(v15, &v22, v13, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  sub_1B1BD6670(a1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D1257C();
  swift_allocError();
  *(_QWORD *)v16 = 0xD000000000000027;
  *(_QWORD *)(v16 + 8) = 0x80000001B2348570;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_BYTE *)(v16 + 32) = 3;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v20);
}

uint64_t sub_1B203C6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v4 = v2;
  v7 = sub_1B2228110();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v39 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_1B2228728();
  v11 = objc_msgSend(v10, sel_lastPathComponent);

  v12 = sub_1B222874C();
  v14 = v13;

  v43 = v12;
  v44 = v14;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v15 = sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v38 = v3;
  v42 = v15;
  v16 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v16, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v44;
  *(_QWORD *)(v4 + 16) = v43;
  *(_QWORD *)(v4 + 24) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v4 + 24);
  v43 = *(_QWORD *)(v4 + 16);
  v44 = v18;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  if (qword_1EEF57510 != -1)
    swift_once();
  v19 = (void *)sub_1B2228728();
  v20 = (void *)sub_1B2228728();
  v21 = objc_msgSend(v19, sel_stringByAppendingPathComponent_, v20);

  v37 = sub_1B222874C();
  swift_bridgeObjectRelease();

  if (qword_1ED4BF430 != -1)
    swift_once();
  v43 = 0x6E696C69706D6F63;
  v44 = 0xEA00000000002067;
  swift_retain();
  v22 = (void *)sub_1B2228728();
  v23 = objc_msgSend(v22, sel_lastPathComponent);

  sub_1B222874C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v25 = v43;
  v24 = v44;
  v26 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v43 = 0;
  swift_retain();
  sub_1B1F1AD70(v26, &v43, v25, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v28 = *(_QWORD *)(v4 + 16);
  v27 = *(_QWORD *)(v4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1BD5BF4(a1, a2, v28, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v39;
  sub_1B2228050();
  v30 = v38;
  v31 = sub_1B2228710();
  if (v30)
  {

    v33 = 0;
    v34 = 0;
  }
  else
  {
    v33 = v31;
    v34 = v32;
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  sub_1B1D1257C();
  swift_allocError();
  *(_QWORD *)v35 = 0xD000000000000027;
  *(_QWORD *)(v35 + 8) = 0x80000001B2348570;
  *(_QWORD *)(v35 + 16) = v33;
  *(_QWORD *)(v35 + 24) = v34;
  *(_BYTE *)(v35 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_1B203CB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1B203C6C0(a1, a2);
  if (!v2)
  {
    v3 = v6;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 40) = v8;
    sub_1B203BCDC(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  return v3;
}

uint64_t sub_1B203CC3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;

  swift_bridgeObjectRetain();
  v2 = sub_1B203EE34();
  result = swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v0 + 64) = v2;
  return result;
}

uint64_t type metadata accessor for SwiftCodeLoader()
{
  return objc_opt_self();
}

uint64_t sub_1B203CCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v4 = v2;
  v7 = sub_1B2228110();
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_1B2228728();
  v11 = objc_msgSend(v10, sel_lastPathComponent);

  v12 = sub_1B222874C();
  v14 = v13;

  v41 = v12;
  v42 = v14;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v15 = sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v36 = v3;
  v40 = v15;
  v16 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v16, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v42;
  *(_QWORD *)(v4 + 16) = v41;
  *(_QWORD *)(v4 + 24) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v4 + 24);
  v41 = *(_QWORD *)(v4 + 16);
  v42 = v18;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  if (qword_1EEF57510 != -1)
    swift_once();
  v19 = (void *)sub_1B2228728();
  v20 = (void *)sub_1B2228728();
  v21 = objc_msgSend(v19, sel_stringByAppendingPathComponent_, v20);

  v35 = sub_1B222874C();
  swift_bridgeObjectRelease();

  if (qword_1ED4BF430 != -1)
    swift_once();
  v41 = 0x6E696C69706D6F63;
  v42 = 0xEA00000000002067;
  swift_retain();
  v22 = (void *)sub_1B2228728();
  v23 = objc_msgSend(v22, sel_lastPathComponent);

  sub_1B222874C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v25 = v41;
  v24 = v42;
  v26 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v41 = 0;
  swift_retain();
  sub_1B1F1AD70(v26, &v41, v25, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  sub_1B1BD5468(a1, a2);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v37;
  sub_1B2228050();
  v28 = v36;
  v29 = sub_1B2228710();
  if (v28)
  {

    v31 = 0;
    v32 = 0;
  }
  else
  {
    v31 = v29;
    v32 = v30;
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
  sub_1B1D1257C();
  swift_allocError();
  *(_QWORD *)v33 = 0xD000000000000027;
  *(_QWORD *)(v33 + 8) = 0x80000001B2348570;
  *(_QWORD *)(v33 + 16) = v31;
  *(_QWORD *)(v33 + 24) = v32;
  *(_BYTE *)(v33 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_1B203D130(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v4 = v2;
  v49 = *MEMORY[0x1E0C80C00];
  v7 = sub_1B2228110();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)sub_1B2228728();
  v12 = objc_msgSend(v11, sel_lastPathComponent);

  v13 = sub_1B222874C();
  v15 = v14;

  v47 = v13;
  v48 = v15;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v16 = sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v45 = v3;
  v46 = v16;
  v17 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v17, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v48;
  v4[2] = v47;
  v4[3] = v18;
  swift_bridgeObjectRelease();
  if (qword_1EEF57510 != -1)
    swift_once();
  v19 = v4[3];
  v47 = v4[2];
  v48 = v19;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v20 = (void *)sub_1B2228728();
  v21 = (void *)sub_1B2228728();
  v22 = objc_msgSend(v20, sel_stringByAppendingPathComponent_, v21);

  v23 = sub_1B222874C();
  v25 = v24;
  swift_bridgeObjectRelease();

  v4[4] = v23;
  v4[5] = v25;
  swift_bridgeObjectRelease();
  v26 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  swift_bridgeObjectRetain();
  v27 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v47 = 0;
  LODWORD(v23) = objc_msgSend(v26, sel_removeItemAtPath_error_, v27, &v47);

  if ((_DWORD)v23)
  {
    v28 = (id)v47;
  }
  else
  {
    v29 = (id)v47;
    v30 = (void *)sub_1B2227FB4();

    swift_willThrow();
    v45 = 0;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v47 = 0x6E696C69706D6F63;
  v48 = 0xEA00000000002067;
  swift_retain();
  v31 = (void *)sub_1B2228728();
  v32 = objc_msgSend(v31, sel_lastPathComponent);

  sub_1B222874C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v33 = v47;
  v34 = v48;
  v35 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v47 = 0;
  swift_retain();
  sub_1B1F1AD70(v35, &v47, v33, v34);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1BD57C0(a1, a2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228050();
  v36 = v45;
  v37 = sub_1B2228710();
  if (v36)
  {

    v39 = 0;
    v40 = 0;
  }
  else
  {
    v39 = v37;
    v40 = v38;
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  sub_1B1D1257C();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000027;
  *(_QWORD *)(v41 + 8) = 0x80000001B2348570;
  *(_QWORD *)(v41 + 16) = v39;
  *(_QWORD *)(v41 + 24) = v40;
  *(_BYTE *)(v41 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_1B203D6A4()
{
  uint64_t v0;
  const char *v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 40))
    v1 = (const char *)(sub_1B22287D0() + 32);
  else
    v1 = 0;
  v2 = dlopen(v1, 6);
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 64) = v2;
  if (!v2)
  {
    dlerror();
    v4 = sub_1B22288A8();
    v6 = v5;
    sub_1B1D1257C();
    swift_allocError();
    *(_QWORD *)v7 = v4;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_BYTE *)(v7 + 32) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t type metadata accessor for CCodeLoader()
{
  return objc_opt_self();
}

double sub_1B203D774()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  return result;
}

uint64_t sub_1B203D79C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  char *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v4 = v2;
  v58 = *MEMORY[0x1E0C80C00];
  v7 = sub_1B2228110();
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_1B2228728();
  v11 = objc_msgSend(v10, sel_lastPathComponent);

  v12 = sub_1B222874C();
  v14 = v13;

  v56 = v12;
  v57 = v14;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v15 = sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v54 = v3;
  v55 = v15;
  v16 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v16, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v57;
  v4[2] = v56;
  v4[3] = v17;
  swift_bridgeObjectRelease();
  if (qword_1EEF57510 != -1)
    swift_once();
  v18 = v4[3];
  v56 = v4[2];
  v57 = v18;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v19 = (void *)sub_1B2228728();
  v20 = (void *)sub_1B2228728();
  v21 = objc_msgSend(v19, sel_stringByAppendingPathComponent_, v20);

  v49 = sub_1B222874C();
  v50 = v22;
  swift_bridgeObjectRelease();

  v23 = v4[3];
  v56 = v4[2];
  v57 = v23;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v24 = (void *)sub_1B2228728();
  v25 = (void *)sub_1B2228728();
  v26 = objc_msgSend(v24, sel_stringByAppendingPathComponent_, v25);

  v27 = sub_1B222874C();
  v29 = v28;
  swift_bridgeObjectRelease();

  v4[4] = v27;
  v4[5] = v29;
  swift_bridgeObjectRelease();
  v30 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  swift_bridgeObjectRetain();
  v31 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v56 = 0;
  LODWORD(v27) = objc_msgSend(v30, sel_removeItemAtPath_error_, v31, &v56);

  if ((_DWORD)v27)
  {
    v32 = (id)v56;
  }
  else
  {
    v33 = (id)v56;
    v34 = (void *)sub_1B2227FB4();

    swift_willThrow();
    v54 = 0;
  }
  v35 = v51;
  if (qword_1ED4BF430 != -1)
    swift_once();
  v56 = 0x6E696C69706D6F63;
  v57 = 0xEA00000000002067;
  swift_retain();
  v36 = (void *)sub_1B2228728();
  v37 = objc_msgSend(v36, sel_lastPathComponent);

  sub_1B222874C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v38 = v56;
  v39 = v57;
  v40 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v56 = 0;
  swift_retain();
  sub_1B1F1AD70(v40, &v56, v38, v39);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1BD6B60(a1, a2, v49, v50);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228050();
  v41 = v54;
  v42 = sub_1B2228710();
  if (v41)
  {

    v44 = 0;
    v45 = 0;
  }
  else
  {
    v44 = v42;
    v45 = v43;
  }
  (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v53);
  sub_1B1D1257C();
  swift_allocError();
  *(_QWORD *)v46 = 0xD000000000000027;
  *(_QWORD *)(v46 + 8) = 0x80000001B2348570;
  *(_QWORD *)(v46 + 16) = v44;
  *(_QWORD *)(v46 + 24) = v45;
  *(_BYTE *)(v46 + 32) = 1;
  return swift_willThrow();
}

void sub_1B203DDB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14[2];

  v1 = v0;
  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = sub_1B2228110();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)v1[6];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B2228050();
  swift_bridgeObjectRelease();
  v8 = (void *)sub_1B2228074();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v14[0] = 0;
  v9 = objc_msgSend(v7, sel_newLibraryWithURL_error_, v8, v14);
  swift_unknownObjectRelease();

  v10 = v14[0];
  if (v9)
  {
    v1[9] = v9;
    swift_unknownObjectRelease();
    v11 = (void *)v1[9];
    if (v1[3])
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v12 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      v12 = 0;
    }
    objc_msgSend(v11, sel_setLabel_, v12);
    swift_unknownObjectRelease();

  }
  else
  {
    v13 = v10;
    sub_1B2227FB4();

    swift_willThrow();
  }
}

id sub_1B203DF68()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 72);
  swift_unknownObjectRetain();
  v2 = (void *)sub_1B2228728();
  v3 = objc_msgSend(v1, sel_newFunctionWithName_, v2);

  swift_unknownObjectRelease();
  if (!v3)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1D1257C();
    swift_allocError();
    *(_QWORD *)v4 = 0xD00000000000001ELL;
    *(_QWORD *)(v4 + 8) = 0x80000001B2348510;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_BYTE *)(v4 + 32) = 4;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1B203E074()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B203E07C()
{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v4[2];

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v1 = *(void **)(v0 + 64);
    if (v1)
    {
      if (dlclose(v1) == -1)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v4[1] = 0xE900000000000020;
        swift_retain();
        dlerror();
        sub_1B22288A8();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v2 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v4[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v2, v4, 0x3A65736F6C636C64, 0xE900000000000020);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  *(_QWORD *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalToolchainCodeLoader()
{
  return objc_opt_self();
}

void sub_1B203E218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v37 - v6;
  if (qword_1ED4BF430 != -1)
    swift_once();
  v41 = 0;
  v42 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v41 = (void *)0xD000000000000014;
  v42 = 0x80000001B2348530;
  v8 = (void *)sub_1B2228728();
  v9 = objc_msgSend(v8, sel_lastPathComponent);

  sub_1B222874C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v10 = (uint64_t)v41;
  v11 = v42;
  v12 = sub_1B2228E84();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v41 = 0;
  swift_retain();
  sub_1B1F1AD70(v12, (uint64_t *)&v41, v10, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v13 = (void *)sub_1B2228728();
  v14 = objc_msgSend(v13, sel_lastPathComponent);

  v15 = sub_1B222874C();
  v17 = v16;

  v41 = (void *)v15;
  v42 = v17;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v18 = v39;
  v40 = (id)sub_1B203EBA8(0, 5, 0xD00000000000001ALL, 0x80000001B2348550);
  v19 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v19, MEMORY[0x1E0DEAF38]);
  sub_1B222895C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v42;
  v21 = v38;
  v38[2] = v41;
  v21[3] = v20;
  swift_bridgeObjectRelease();
  sub_1B2228050();
  v22 = sub_1B2228110();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v7, 0, 1, v22);
  v24 = (uint64_t)v21 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL;
  sub_1B17927B4((uint64_t)v7, (uint64_t)v21 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL);
  sub_1B19EC90C(v24, (uint64_t)v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 48))(v3, 1, v22);
  sub_1B2228710();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v22);
    v25 = (void *)v21[6];
    swift_unknownObjectRetain();
    v26 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    v41 = 0;
    v40 = 0;
    v27 = objc_msgSend(v25, sel_newLibraryWithSource_options_warnings_error_, v26, 0, &v41, &v40);
    swift_unknownObjectRelease();

    v28 = v40;
    v29 = v41;
    if (v27)
    {
      v21[9] = v27;
      v30 = v28;
      v31 = v29;
      swift_unknownObjectRelease();
      v32 = (void *)v21[9];
      if (v21[3])
      {
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v33 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
        v33 = 0;
      }
      objc_msgSend(v32, sel_setLabel_, v33);
      swift_unknownObjectRelease();

      if (v31)
      {
        v36 = objc_msgSend(v31, sel_localizedDescription);
        sub_1B222874C();

      }
    }
    else
    {
      v34 = v40;
      v35 = v29;
      sub_1B2227FB4();

      swift_willThrow();
    }
  }
}

uint64_t sub_1B203E760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL;
  v2 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  return v0;
}

uint64_t sub_1B203E7D0()
{
  uint64_t v0;

  return sub_1B19EC9A4(v0 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL);
}

uint64_t sub_1B203E7E0()
{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v4[2];

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v1 = *(void **)(v0 + 64);
    if (v1)
    {
      if (dlclose(v1) == -1)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v4[1] = 0xE900000000000020;
        swift_retain();
        dlerror();
        sub_1B22288A8();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v2 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v4[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v2, v4, 0x3A65736F6C636C64, 0xE900000000000020);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  *(_QWORD *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  sub_1B19EC9A4(v0 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL);
  return swift_deallocClassInstance();
}

uint64_t sub_1B203E968()
{
  return type metadata accessor for MetalAPICodeLoader();
}

uint64_t type metadata accessor for MetalAPICodeLoader()
{
  uint64_t result;

  result = qword_1ED4B9248;
  if (!qword_1ED4B9248)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B203E9AC()
{
  unint64_t v0;

  sub_1B17928A0();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t storeEnumTagSinglePayload for Language(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B203EA64 + 4 * byte_1B22B290B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B203EA98 + 4 * byte_1B22B2906[v4]))();
}

uint64_t sub_1B203EA98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B203EAA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B203EAA8);
  return result;
}

uint64_t sub_1B203EAB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B203EABCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B203EAC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B203EAC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Language()
{
  return &type metadata for Language;
}

uint64_t sub_1B203EAE4()
{
  return sub_1B1BCBBF8(&qword_1EEF626C0, &qword_1EEF626C8, (uint64_t)&type metadata for Language, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1B203EB1C()
{
  unint64_t result;

  result = qword_1EEF626D0;
  if (!qword_1EEF626D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2AF4, &type metadata for Language);
    atomic_store(result, (unint64_t *)&qword_1EEF626D0);
  }
  return result;
}

uint64_t sub_1B203EB60()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B203EBA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = MEMORY[0x1E0DEE9D8];
  if (a2 != a1)
  {
    v19 = a2 - a1;
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1B202A1D8(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    v7 = 0;
    v4 = v21;
    if ((a4 & 0x2000000000000000) != 0)
      v8 = HIBYTE(a4) & 0xF;
    else
      v8 = a3 & 0xFFFFFFFFFFFFLL;
    v9 = v19;
    do
    {
      if (v8)
      {
        v10 = sub_1B2228830();
        v20 = 0;
        MEMORY[0x1B5E23FA0](&v20, 8);
        if (v10 > v20 * v10)
        {
          v11 = -(uint64_t)v10 % v10;
          while (v11 > v20 * v10)
          {
            v20 = 0;
            MEMORY[0x1B5E23FA0](&v20, 8);
          }
        }
        sub_1B2228860();
        v12 = sub_1B2228950();
        v14 = v13;
        v9 = v19;
      }
      else
      {
        v12 = 0;
        v14 = 0;
      }
      v21 = v4;
      v16 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B202A1D8(v15 > 1, v16 + 1, 1);
        v9 = v19;
        v4 = v21;
      }
      ++v7;
      *(_QWORD *)(v4 + 16) = v16 + 1;
      v17 = v4 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v14;
    }
    while (v7 != v9);
  }
  return v4;
}

uint64_t sub_1B203ED38(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
  {
    type metadata accessor for CCodeLoader();
LABEL_6:
    v1 = swift_allocObject();
    goto LABEL_7;
  }
  if (a1 != 1)
  {
    type metadata accessor for SwiftCodeLoader();
    goto LABEL_6;
  }
  type metadata accessor for MetalAPICodeLoader();
  v1 = swift_allocObject();
  v2 = v1 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL;
  v3 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
LABEL_7:
  *(_QWORD *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  return v1;
}

unint64_t sub_1B203EDF0()
{
  unint64_t result;

  result = qword_1ED4BA0A8;
  if (!qword_1ED4BA0A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2ABC, &type metadata for Language);
    atomic_store(result, (unint64_t *)&qword_1ED4BA0A8);
  }
  return result;
}

void *sub_1B203EE34()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_1B22287D0();
  v1 = dlopen((const char *)(v0 + 32), 6);
  swift_release();
  if (v1)
  {
    v2 = (void (*)(void))dlsym(v1, "main");
    if (v2)
    {
      v2();
    }
    else
    {
      dlerror();
      sub_1B22288A8();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    dlerror();
    v3 = sub_1B22288A8();
    v5 = v4;
    sub_1B1D1257C();
    swift_allocError();
    *(_QWORD *)v6 = v3;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 32) = 4;
    swift_willThrow();
  }
  return v1;
}

void *sub_1B203EEFC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v5;

  switch(a5)
  {
    case 0:
    case 3:
    case 4:
    case 5:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 2:
      v5 = result;
LABEL_4:
      result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *destroy for CodeLoader.Error(uint64_t a1)
{
  return sub_1B1D12474(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for CodeLoader.Error(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1B203EEFC(*(void **)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CodeLoader.Error(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1B203EEFC(*(void **)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1B1D12474(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CodeLoader.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1B1D12474(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeLoader.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodeLoader.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeLoader.Error()
{
  return &type metadata for CodeLoader.Error;
}

ValueMetadata *type metadata accessor for Scale3()
{
  return &type metadata for Scale3;
}

ValueMetadata *type metadata accessor for Scale()
{
  return &type metadata for Scale;
}

ValueMetadata *type metadata accessor for Scale2()
{
  return &type metadata for Scale2;
}

ValueMetadata *type metadata accessor for Scale1()
{
  return &type metadata for Scale1;
}

double sub_1B203F170(float32x4_t a1)
{
  float32x4_t v1;
  double result;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(a1, v1).u64[0];
  return result;
}

unint64_t sub_1B203F17C(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v11;
  int32x2_t v12;
  char v14;
  char v15;

  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  swift_retain();
  if ((a1 & 0x80000000) == 0
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v4 == -1)
     || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == (_DWORD)v4))
  {
    v5 = sub_1B1D1EE34(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(_DWORD *)(v6 + 12 * (int)a1), *(_WORD *)(v6 + 12 * (int)a1 + 4), 16, a2);
    v15 = v14;
    swift_release();
    if ((v15 & 1) == 0)
      return v5;
  }
  else
  {
    swift_release();
  }
  swift_retain();
  v7 = sub_1B1D15850(a1);
  v9 = v8;
  swift_release();
  if ((v9 & 1) == 0)
    return v7;
  swift_retain();
  v11 = sub_1B1D15844(a1);
  swift_release();
  if ((v11 & 0x100000000) == 0)
  {
    v12.i32[0] = v11;
    return vdupq_lane_s32(v12, 0).u64[0];
  }
  return 0;
}

uint64_t sub_1B203F2E4(uint64_t result, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[2];
  uint64_t v22;
  char v23;
  _QWORD v24[4];

  if ((a3 & 1) != 0)
  {
    if (a4 != 0xFFFFFFFF)
    {
      v11 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v11)
      {
        v12 = *(_BYTE *)(v11 + 80);
        MEMORY[0x1B5E240CC](v11 + 48);
        v11 = *(_QWORD *)(v11 + 56);
      }
      else
      {
        v12 = 0;
      }
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      v22 = v11;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v23 = v12;
      sub_1B1A02530((uint64_t)v21, (uint64_t)v24);
      sub_1B1E2D290((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, a4);
      sub_1B1A0256C((uint64_t)v24);
      sub_1B1E31340(1);
      swift_release();
      v15 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v15)
      {
        v16 = *(_BYTE *)(v15 + 80);
        MEMORY[0x1B5E240CC](v15 + 48);
        v15 = *(_QWORD *)(v15 + 56);
      }
      else
      {
        v16 = 0;
      }
      v22 = 0;
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      v22 = v15;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v23 = v16;
      sub_1B1A02530((uint64_t)v21, (uint64_t)v24);
      sub_1B1E2D290((uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, a4);
      sub_1B1A0256C((uint64_t)v24);
      sub_1B1E31340(1);
      swift_release();
      v19 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v19)
      {
        v20 = *(_BYTE *)(v19 + 80);
        MEMORY[0x1B5E240CC](v19 + 48);
        v19 = *(_QWORD *)(v19 + 56);
      }
      else
      {
        v20 = 0;
      }
      v22 = 0;
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      v22 = v19;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v23 = v20;
      sub_1B1A02530((uint64_t)v21, (uint64_t)v24);
      sub_1B1E2D290((uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, a4);
      sub_1B1A0256C((uint64_t)v24);
      sub_1B1E31340(1);
      return swift_release();
    }
  }
  else
  {
    v8 = result;
    if (a4 != 0xFFFFFFFF)
    {
      v9 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v9)
      {
        v10 = *(_BYTE *)(v9 + 80);
        MEMORY[0x1B5E240CC](v9 + 48);
        v9 = *(_QWORD *)(v9 + 56);
      }
      else
      {
        v10 = 0;
      }
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      v22 = v9;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v23 = v10;
      sub_1B1A02530((uint64_t)v21, (uint64_t)v24);
      sub_1B1E2D290((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, a4);
      sub_1B1A0256C((uint64_t)v24);
      sub_1B1E31340(1);
      swift_release();
      v13 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v13)
      {
        v14 = *(_BYTE *)(v13 + 80);
        MEMORY[0x1B5E240CC](v13 + 48);
        v13 = *(_QWORD *)(v13 + 56);
      }
      else
      {
        v14 = 0;
      }
      v22 = 0;
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      v22 = v13;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v23 = v14;
      sub_1B1A02530((uint64_t)v21, (uint64_t)v24);
      sub_1B1E2D290((uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, a4);
      sub_1B1A0256C((uint64_t)v24);
      sub_1B1E31340(1);
      swift_release();
      v24[0] = v8;
      v24[1] = a2;
      v17 = swift_retain();
      MEMORY[0x1E0C80A78](v17, v18);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B2040224);
      return swift_release();
    }
  }
  return result;
}

float sub_1B203F734(float a1)
{
  return a1 * 0.5;
}

float32x2_t sub_1B203F740(float32x2_t a1)
{
  return vmul_f32(a1, (float32x2_t)0x3F0000003F000000);
}

void sub_1B203F74C(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  float v4;

  v4 = sub_1B203FB1C(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1B203F774(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229DCC();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

ValueMetadata *sub_1B203F804()
{
  return &type metadata for Scale;
}

void sub_1B203F820(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v4;

  v4 = sub_1B203FCEC(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1B203F848(_QWORD *a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v3, v4);
  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v1, MEMORY[0x1E0DEDD30]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B203F94C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B203FF88(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B203F974(_QWORD *a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v3, v4);
  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v1, MEMORY[0x1E0DEDD60]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

__n128 sub_1B203FA70@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.4S, #1.0 }
  *a1 = result;
  return result;
}

__n128 sub_1B203FA7C(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const float *v8;
  float32x4_t *v9;
  float32x4_t v10;

  if (a8)
  {
    v8 = (const float *)(a1 + 4 * a4);
    v9 = (float32x4_t *)(a5 + 16 * a7);
    do
    {
      v10 = vld1q_dup_f32(v8++);
      v10.i32[3] = result.n128_i32[3];
      result = (__n128)v10;
      *v9++ = v10;
      --a8;
    }
    while (a8);
  }
  return result;
}

uint64_t sub_1B203FAA4(uint64_t result, double a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;

  if (a9)
  {
    v9 = (uint64_t *)(result + 8 * a5);
    __asm { FMOV            V0.4S, #1.0 }
    v15 = (_OWORD *)(a6 + 16 * a8);
    do
    {
      v16 = *v9++;
      *((_QWORD *)&v17 + 1) = __PAIR64__(a3.n128_u32[3], DWORD2(_Q0));
      *(_QWORD *)&v17 = v16;
      *v15++ = v17;
      --a9;
    }
    while (a9);
  }
  return result;
}

double sub_1B203FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 *v7;
  _DWORD *v8;
  __int128 v9;
  double result;

  if (a7)
  {
    v7 = (__int128 *)(a1 + 16 * a3);
    v8 = (_DWORD *)(a4 + 4 * a6);
    do
    {
      v9 = *v7++;
      result = *(double *)&v9;
      *v8++ = v9;
      --a7;
    }
    while (a7);
  }
  return result;
}

double sub_1B203FAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 *v7;
  _QWORD *v8;
  __int128 v9;
  double result;

  if (a7)
  {
    v7 = (__int128 *)(a1 + 16 * a3);
    v8 = (_QWORD *)(a4 + 8 * a6);
    do
    {
      v9 = *v7++;
      result = *(double *)&v9;
      *v8++ = v9;
      --a7;
    }
    while (a7);
  }
  return result;
}

float sub_1B203FB1C(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v14;
  _QWORD v16[4];

  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BAAF0, (uint64_t (*)(void))sub_1B1E88F28, (uint64_t)&type metadata for ValueCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067BAC(2000, v10, v11))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(v16, v16[3]);
      sub_1B2229D48();
      v2 = v12;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      sub_1B22297F0();
      v2 = v14;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

double sub_1B203FCEC(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  _QWORD v16[7];

  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BAAF0, (uint64_t (*)(void))sub_1B1E88F28, (uint64_t)&type metadata for ValueCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067BAC(2000, v10, v11))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(v16, v16[3]);
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v12, MEMORY[0x1E0DEDD40]);
      sub_1B2229D6C();
      v2 = *(double *)&v16[6];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v13, MEMORY[0x1E0DEDD40]);
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v2 = *(double *)v16;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B203FF88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;

  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BAAF0, (uint64_t (*)(void))sub_1B1E88F28, (uint64_t)&type metadata for ValueCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v15, v16);
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v11, MEMORY[0x1E0DEDD70]);
      sub_1B2229D6C();
      v14[0] = v14[1];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v15);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v12, MEMORY[0x1E0DEDD70]);
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14[0] = v15;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

_QWORD *sub_1B2040224(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F57E78(a1, *(_QWORD *)(v1 + 24), *(__n128 *)*(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for HalfSizeLegacyPatch()
{
  return &type metadata for HalfSizeLegacyPatch;
}

ValueMetadata *type metadata accessor for Velocity()
{
  return &type metadata for Velocity;
}

ValueMetadata *type metadata accessor for AngularVelocity()
{
  return &type metadata for AngularVelocity;
}

uint64_t sub_1B2040274@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B20407C4(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B204029C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B204051C(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B20402C4(_QWORD *a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v3, v4);
  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v1, MEMORY[0x1E0DEDDB8]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B20403C0()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B20403D8()
{
  return sub_1B2228824();
}

uint64_t sub_1B20403F0()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B2040408@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

void sub_1B2040414(_QWORD *a1@<X8>)
{
  *a1 = 0x30775F65756C6176;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B2040430@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B204043C()
{
  sub_1B2040A70();
  return sub_1B222A1D4();
}

uint64_t sub_1B2040464()
{
  sub_1B2040A70();
  return sub_1B222A1E0();
}

uint64_t sub_1B204048C()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B20404A0()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B20404B4@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

uint64_t sub_1B20404C0@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B20404CC()
{
  sub_1B2040AB4();
  return sub_1B222A1D4();
}

uint64_t sub_1B20404F4()
{
  sub_1B2040AB4();
  return sub_1B222A1E0();
}

uint64_t sub_1B204051C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  float32x4_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  __int128 v18;
  _OWORD v19[2];
  float32x4_t v20;
  uint64_t v21;

  sub_1B19F8E54(0, &qword_1EEF626F8, (uint64_t (*)(void))sub_1B2040AB4, (uint64_t)&type metadata for AngularVelocity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v19 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(2017, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B2040AB4();
    sub_1B222A150();
    if (!v1)
    {
      sub_1B1B4E740();
      sub_1B2229814();
      v13 = vmulq_f32(v20, v20);
      LODWORD(v14) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
      v15 = vrsqrte_f32((float32x2_t)LODWORD(v14));
      v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)LODWORD(v14), vmul_f32(v15, v15)));
      v19[0] = vmulq_n_f32(v20, vmul_f32(v16, vrsqrts_f32((float32x2_t)LODWORD(v14), vmul_f32(v16, v16))).f32[0]);
      v17 = atan2f(sqrtf(v14), v20.f32[3]);
      v18 = v19[0];
      *((float *)&v18 + 3) = v17 + v17;
      v19[0] = v18;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v20, v21);
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229D6C();
      v19[0] = v19[1];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v20);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B20407C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  sub_1B19F8E54(0, &qword_1EEF626E8, (uint64_t (*)(void))sub_1B2040A70, (uint64_t)&type metadata for Velocity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v16 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(1018, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B2040A70();
    sub_1B222A150();
    if (!v1)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229814();
      v16[0] = v17;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v16[0];
      HIDWORD(v14) = 0;
      v16[0] = v14;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v17, v18);
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v12, MEMORY[0x1E0DEDD70]);
      sub_1B2229D6C();
      v15 = v16[1];
      HIDWORD(v15) = 0;
      v16[0] = v15;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v17);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B2040A70()
{
  unint64_t result;

  result = qword_1EEF626F0;
  if (!qword_1EEF626F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3134, &type metadata for Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF626F0);
  }
  return result;
}

unint64_t sub_1B2040AB4()
{
  unint64_t result;

  result = qword_1EEF62700;
  if (!qword_1EEF62700)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B30E4, &type metadata for AngularVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62700);
  }
  return result;
}

ValueMetadata *type metadata accessor for AngularVelocity.CodingKeys()
{
  return &type metadata for AngularVelocity.CodingKeys;
}

uint64_t _s3VFX15AngularVelocityV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B2040B4C + 4 * byte_1B22B2DD4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B2040B6C + 4 * byte_1B22B2DD9[v4]))();
}

_BYTE *sub_1B2040B4C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B2040B6C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2040B74(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2040B7C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2040B84(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2040B8C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Velocity.CodingKeys()
{
  return &type metadata for Velocity.CodingKeys;
}

unint64_t sub_1B2040BAC()
{
  unint64_t result;

  result = qword_1EEF62708;
  if (!qword_1EEF62708)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2FCC, &type metadata for Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62708);
  }
  return result;
}

unint64_t sub_1B2040BF4()
{
  unint64_t result;

  result = qword_1EEF62710;
  if (!qword_1EEF62710)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B30BC, &type metadata for AngularVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62710);
  }
  return result;
}

unint64_t sub_1B2040C3C()
{
  unint64_t result;

  result = qword_1EEF62718;
  if (!qword_1EEF62718)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2FF4, &type metadata for AngularVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62718);
  }
  return result;
}

unint64_t sub_1B2040C84()
{
  unint64_t result;

  result = qword_1EEF62720;
  if (!qword_1EEF62720)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B301C, &type metadata for AngularVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62720);
  }
  return result;
}

unint64_t sub_1B2040CCC()
{
  unint64_t result;

  result = qword_1EEF62728;
  if (!qword_1EEF62728)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2F04, &type metadata for Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62728);
  }
  return result;
}

unint64_t sub_1B2040D14()
{
  unint64_t result;

  result = qword_1EEF62730;
  if (!qword_1EEF62730)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2F2C, &type metadata for Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62730);
  }
  return result;
}

uint64_t type metadata accessor for CompositeSystem()
{
  return objc_opt_self();
}

const char *sub_1B2040D7C()
{
  return "Composite";
}

uint64_t *sub_1B2040D90(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  float v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  _OWORD v54[2];
  _BYTE v55[24];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[160];
  uint64_t v65[20];
  _BYTE v66[80];
  _QWORD v67[10];
  _QWORD v68[10];
  _QWORD v69[11];
  uint64_t v70[101];
  _BYTE v71[80];
  _BYTE v72[80];
  _BYTE v73[80];
  _BYTE v74[80];
  _OWORD v75[11];
  _QWORD v76[6];
  __int16 v77;
  _QWORD v78[7];

  v1 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 272);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 == 2)
      goto LABEL_47;
    if ((v3 & 0x100000000) == 0)
      return result;
    v5 = *(float *)(v2 + 40);
    v4 = *(float *)(v2 + 44);
    sub_1B206309C(6u, (uint64_t)v66);
    swift_retain_n();
    swift_retain();
    v6 = sub_1B206318C((uint64_t)v66, 1, 0, 2);
    sub_1B1BA80C0((uint64_t)v66);
    swift_release();
    v7 = sub_1B1BA147C(v6, 2, 0, 2, 0, 0);
    v8 = sub_1B2229454();
    sub_1B1BA77BC(v8, v9, v7);
    v10 = sub_1B1BA7B7C(0);
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    v53 = (void *)v10;
    if (!v10)
    {
      swift_release();
      swift_release();

      return (uint64_t *)swift_unknownObjectRelease();
    }
    v52 = v7;
    v11 = *(_QWORD *)(v1 + 272);
    sub_1B206309C(0, (uint64_t)v67);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 264) + 40);
    v13 = *(_QWORD *)(v12 + 16);
    swift_retain();
    swift_retain();
    if (v13)
    {
      v14 = v67[1];
      v15 = v67[0];
      swift_bridgeObjectRetain();
      v16 = sub_1B1DC3B00(v15, v14);
      if ((v17 & 1) != 0)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v16);
        swift_unknownObjectRetain();
      }
      else
      {
        v50 = 0;
      }
      sub_1B1BA80C0((uint64_t)v67);
    }
    else
    {
      v50 = 0;
    }
    swift_release();
    sub_1B1BA80C0((uint64_t)v67);
    swift_release();
    v18 = *(_QWORD *)(v1 + 272);
    sub_1B206309C(4u, (uint64_t)v68);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 16) + 264) + 40);
    v20 = *(_QWORD *)(v19 + 16);
    swift_retain();
    swift_retain();
    if (v20)
    {
      v21 = v68[1];
      v22 = v68[0];
      swift_bridgeObjectRetain();
      v23 = sub_1B1DC3B00(v22, v21);
      if ((v24 & 1) != 0)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v23);
        swift_unknownObjectRetain();
      }
      else
      {
        v51 = 0;
      }
      sub_1B1BA80C0((uint64_t)v68);
    }
    else
    {
      v51 = 0;
    }
    swift_release();
    sub_1B1BA80C0((uint64_t)v68);
    swift_release();
    v25 = log2f(v5);
    v26 = log2f(v4);
    v49 = *(unsigned __int8 *)(v1 + 536);
    sub_1B1BA802C(v1 + 624, (uint64_t)v64);
    sub_1B1BA802C((uint64_t)v64, (uint64_t)v65);
    if (sub_1B1B3C438(v65) == 1)
    {
LABEL_47:
      result = (uint64_t *)sub_1B2229688();
      __break(1u);
      return result;
    }
    v27 = v3 & 0x10000;
    v28 = v3 & 0x1000000;
    v29 = v65[1];
    ObjectType = swift_getObjectType();
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 104);
    swift_unknownObjectRetain();
    v32 = v31(ObjectType, v29);
    swift_unknownObjectRelease();
    if (v32 == 1)
      v33 = 0;
    else
      v33 = 5;
    sub_1B1F9AEC4((uint64_t)v69);
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v34 = swift_allocObject();
    v35 = v28;
    LODWORD(v36) = v49 ^ 1;
    *(_OWORD *)(v34 + 16) = xmmword_1B226CAD0;
    *(_OWORD *)(v34 + 32) = xmmword_1B22B3190;
    *(_BYTE *)(v34 + 48) = 0;
    *(_QWORD *)(v34 + 64) = v28 >> 24;
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_QWORD *)(v34 + 120) = 0;
    *(_BYTE *)(v34 + 128) = 13;
    *(_OWORD *)(v34 + 144) = xmmword_1B22B31A0;
    *(_BYTE *)(v34 + 160) = 0;
    *(_QWORD *)(v34 + 176) = COERCE_UNSIGNED_INT((float)(1 - (uint64_t)v25));
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 225) = 0u;
    *(_OWORD *)(v34 + 256) = xmmword_1B22B31B0;
    *(_BYTE *)(v34 + 272) = 0;
    *(_QWORD *)(v34 + 288) = v27 >> 16;
    *(_QWORD *)(v34 + 344) = 0;
    *(_OWORD *)(v34 + 312) = 0u;
    *(_OWORD *)(v34 + 328) = 0u;
    *(_OWORD *)(v34 + 296) = 0u;
    *(_BYTE *)(v34 + 352) = 13;
    *(_OWORD *)(v34 + 368) = xmmword_1B22B31C0;
    *(_BYTE *)(v34 + 384) = 0;
    *(_QWORD *)(v34 + 400) = COERCE_UNSIGNED_INT((float)(1 - (uint64_t)v26));
    if (v28)
      v36 = v36;
    else
      v36 = 0;
    *(_OWORD *)(v34 + 408) = 0uLL;
    *(_OWORD *)(v34 + 424) = 0uLL;
    *(_OWORD *)(v34 + 440) = 0uLL;
    *(_OWORD *)(v34 + 449) = 0uLL;
    *(_QWORD *)&v54[0] = 0xD000000000000010;
    *((_QWORD *)&v54[0] + 1) = 0x80000001B23338F0;
    v54[1] = 0uLL;
    *(_QWORD *)v55 = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)&v55[8] = xmmword_1B22B31D0;
    v56 = 0;
    *(_QWORD *)&v57 = 0;
    *((_QWORD *)&v57 + 1) = MEMORY[0x1E0DEE9D8];
    v58 = 0uLL;
    v59 = 0uLL;
    v60 = 0uLL;
    v61 = 0uLL;
    v62 = 0uLL;
    v63 = 0uLL;
    v75[1] = 0uLL;
    v75[0] = v54[0];
    memset(&v75[5], 0, 96);
    v75[4] = v57;
    v75[2] = *(_OWORD *)v55;
    v75[3] = 0xE900000000000065;
    *(_OWORD *)(v34 + 480) = xmmword_1B22B31E0;
    *(_BYTE *)(v34 + 496) = 0;
    *(_QWORD *)(v34 + 512) = v36;
    *(_OWORD *)(v34 + 520) = 0uLL;
    *(_OWORD *)(v34 + 536) = 0uLL;
    *(_OWORD *)(v34 + 552) = 0uLL;
    *(_QWORD *)(v34 + 568) = 0;
    *(_BYTE *)(v34 + 576) = 13;
    v76[0] = 0;
    v76[1] = 0;
    v76[2] = 1;
    v76[3] = v33;
    v76[4] = 1;
    v76[5] = v33;
    v77 = 15;
    v78[0] = 0;
    v78[1] = 0;
    v78[2] = 2;
    memset(&v78[3], 0, 24);
    sub_1B1FD1C40((uint64_t *)v75, v69, 0, 0, v34, (uint64_t)v76, 3, (uint64_t)v78, (uint64_t)v70, 1, 1);
    sub_1B1BDB228((uint64_t *)v54);
    swift_retain();
    v37 = sub_1B1B32B58((uint64_t)v70, 0);
    v39 = v37;
    v40 = v38;
    if (v37 >= 3)
    {
      v41 = swift_unknownObjectRetain();
      sub_1B1B427DC(v41, v40);
      swift_release();
      swift_getObjectType();
      objc_msgSend(v53, sel_setRenderPipelineState_, v39);
      objc_msgSend(v53, sel_setFragmentTexture_atIndex_, v50, 0);
      objc_msgSend(v53, sel_setFragmentTexture_atIndex_, v51, 1);
      if (v35)
      {
        sub_1B206309C(7u, (uint64_t)v71);
        v42 = sub_1B206318C((uint64_t)v71, 1, 0, 2);
        sub_1B1BA80C0((uint64_t)v71);
        objc_msgSend(v53, sel_setFragmentTexture_atIndex_, v42, 2);
        if ((v49 & 1) == 0)
        {
          sub_1B206309C(0xEu, (uint64_t)v72);
          v43 = sub_1B206318C((uint64_t)v72, 1, 0, 2);
          sub_1B1BA80C0((uint64_t)v72);
          objc_msgSend(v53, sel_setFragmentTexture_atIndex_, v43, 5);
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      if (v27)
      {
        sub_1B206309C(8u, (uint64_t)v73);
        v44 = sub_1B206318C((uint64_t)v73, 1, 0, 2);
        sub_1B1BA80C0((uint64_t)v73);
        objc_msgSend(v53, sel_setFragmentTexture_atIndex_, v44, 3);
        swift_unknownObjectRelease();
        v45 = (uint64_t)v26 == 1;
      }
      else
      {
        v45 = 1;
      }
      v46 = v45;
      v47 = (uint64_t)v25 == 1 || v35 == 0;
      if (!v47 || (v46 & 1) == 0)
      {
        sub_1B206309C(5u, (uint64_t)v74);
        v48 = sub_1B206318C((uint64_t)v74, 1, 0, 2);
        sub_1B1BA80C0((uint64_t)v74);
        objc_msgSend(v53, sel_setFragmentTexture_atIndex_, v48, 4);
        swift_unknownObjectRelease();
      }
      sub_1B20BFD20(1);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1B1B427DC(v37, v38);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_unknownObjectRelease();
    return sub_1B1B41134(v70);
  }
  return result;
}

uint64_t sub_1B204163C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  sub_1B2042420(0, &qword_1EEF62748, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20423DC();
  sub_1B222A180();
  v14 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v13 = 1;
    sub_1B2229934();
    v12 = 2;
    sub_1B2229934();
    v11 = 3;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1B20417C0(char *a1)
{
  sub_1B1F99740(*a1);
}

uint64_t sub_1B20417CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20417F8 + 4 * byte_1B22B3220[*v0]))(0x737569646172, 0xE600000000000000);
}

uint64_t sub_1B20417F8()
{
  return 0x7053646E756F7261;
}

uint64_t sub_1B2041818()
{
  return 0x64656570536E69;
}

uint64_t sub_1B2041830()
{
  return 0x73656E7468676974;
}

uint64_t sub_1B204184C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B204196C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2041870()
{
  sub_1B20423DC();
  return sub_1B222A1D4();
}

uint64_t sub_1B2041898()
{
  sub_1B20423DC();
  return sub_1B222A1E0();
}

void sub_1B20418C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;
  int v7;

  v4 = sub_1B2042220(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

uint64_t sub_1B20418EC(_QWORD *a1)
{
  return sub_1B204163C(a1);
}

uint64_t sub_1B2041908()
{
  return type metadata accessor for VortexSystem();
}

double sub_1B2041924@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 3.96316838e17;
  *a1 = xmmword_1B22B3420;
  return result;
}

uint64_t type metadata accessor for VortexSystem()
{
  return objc_opt_self();
}

const char *sub_1B2041958()
{
  return "Vortex";
}

uint64_t sub_1B204196C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x737569646172 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7053646E756F7261 && a2 == 0xEB00000000646565 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656570536E69 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73656E7468676974 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t *sub_1B2041B40(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  __int128 v20;
  float v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int32x2_t v48;
  float v49;
  BOOL v50;
  float32x4_t v51;
  int8x16_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x2_t *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int32x2_t v72;
  float v73;
  float32x4_t v75;
  int8x16_t v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  _BYTE v107[16];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[2];
  uint64_t v113;
  uint64_t v114[8];
  _OWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _BYTE v122[80];
  _OWORD v123[2];
  uint64_t v124;
  _OWORD v125[2];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _BYTE v130[56];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD **)(a1 + 8);
  swift_retain_n();
  v4 = sub_1B1D18D94((unint64_t)v2);
  v6 = v5;
  v8 = v7;
  swift_release();
  if ((v8 & 1) != 0)
    v9 = 20.0;
  else
    v9 = *(float *)&v4;
  if ((v8 & 1) != 0)
    v10 = 300.0;
  else
    v10 = *((float *)&v4 + 1);
  if ((v8 & 1) != 0)
    v11 = 200.0;
  else
    v11 = *(float *)&v6;
  if ((v8 & 1) != 0)
    v12 = 0.3;
  else
    v12 = *((float *)&v6 + 1);
  swift_retain();
  sub_1B1D15764(v2, (uint64_t)v107);
  v14 = v108;
  v13 = v109;
  v16 = v110;
  v15 = v111;
  swift_release();
  sub_1B19F66A0((uint64_t)v107, (uint64_t)v122, qword_1ED4B8BB0);
  if ((v122[64] & 1) != 0)
  {
    v92 = (float32x4_t)xmmword_1B2244E20;
    v93 = (float32x4_t)xmmword_1B2244DD0;
  }
  else
  {
    v17.i64[0] = v14;
    v17.i64[1] = v13;
    v93 = v17;
    v17.i64[0] = v16;
    v17.i64[1] = v15;
    v92 = v17;
  }
  sub_1B1E5267C();
  v19 = v18;
  v20 = *(_OWORD *)(a1 + 104);
  v127 = *(_OWORD *)(a1 + 88);
  v128 = v20;
  v129 = *(_QWORD *)(a1 + 120);
  sub_1B19EFB98((uint64_t)v112);
  v125[0] = v112[0];
  v125[1] = v112[1];
  v126 = v113;
  sub_1B1E8FCE4(v3, (uint64_t)v125, 0x200000000, v114);
  sub_1B19F66A0((uint64_t)v114, (uint64_t)v115, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v115[0])
  {
    sub_1B19ED720((uint64_t)v112);
    return (uint64_t *)swift_release();
  }
  if (v121 <= 0 || (v103 = v118) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v112);
    goto LABEL_51;
  }
  v21 = v9 * v9;
  v91 = 1.0 - (float)(v12 * v19);
  v22 = v120;
  v23 = v120[4];
  v106 = *(_BYTE *)(v119 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v123[0] = v115[0];
  v123[1] = v115[1];
  v124 = v116;
  v101 = (uint64_t)(v120 + 6);
  v102 = v117;
  v100 = v120 + 8;
  v24 = (float)(1.0 / v9) * (float)(v12 * v19);
  v89 = vnegq_f32(v93);
  v90 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL);
  swift_retain();
  swift_retain();
  swift_retain();
  v25 = 0;
  v26 = 0;
  v99 = v23;
  do
  {
    v27 = (unsigned int *)(v102 + 48 * v25);
    v28 = *v27;
    v104 = v27[1];
    v105 = v26;
    v30 = (uint64_t *)*((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    v32 = *((_QWORD *)v27 + 4);
    v31 = *((_QWORD *)v27 + 5);
    if ((v106 & 1) != 0)
    {
      v33 = *(os_unfair_lock_s **)(v31 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v33);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v23);
    sub_1B19F66A0(v101, (uint64_t)v130, &qword_1ED4B7FB0);
    v34 = v22[4];
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v22[6] = ecs_stack_allocator_allocate(v34, 48 * v35, 8);
    v22[7] = v35;
    v100[1] = 0;
    v100[2] = 0;
    *v100 = 0;
    swift_release();
    v36 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v30, v29, v32, (uint64_t)v22);
    v37 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v30, v29, v32, (uint64_t)v22);
    if (v30)
    {
      if (!v32)
        goto LABEL_36;
      v26 = v105;
      v38 = v97;
      v39 = v98;
      v41 = v95;
      v40 = v96;
      v42 = v94;
      do
      {
        v43 = vsubq_f32(*v36, v92);
        v44 = (int8x16_t)vmulq_f32(v93, v43);
        v45 = (int8x16_t)vmulq_f32(v43, v43);
        v46 = (int8x16_t)vzip1q_s32((int32x4_t)v44, (int32x4_t)v45);
        v47 = (float32x4_t)vextq_s8(v46, v46, 8uLL);
        v48 = (int32x2_t)vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), vadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.f32));
        *(float32x2_t *)v45.i8 = vmul_f32((float32x2_t)v48, (float32x2_t)v48);
        v50 = *(float *)v45.i32 < v21;
        LODWORD(v49) = vsub_f32((float32x2_t)vdup_lane_s32(v48, 1), *(float32x2_t *)v45.i8).u32[0];
        v50 = v50 && v49 < v21;
        if (v50)
        {
          v51 = vsubq_f32(vmulq_n_f32(v93, *(float *)v48.i32), v43);
          v52 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL), v89), v51, v90);
          v53 = v24 * (float)(v9 - sqrtf(v49));
          *(float32x2_t *)v47.f32 = vmul_n_f32(*v37, v91);
          v47.i32[2] = vmuls_lane_f32(v91, *(float32x4_t *)v37->f32, 2);
          v54 = vmulq_n_f32(v51, v11 * v53);
          v55 = vaddq_f32(v54, v47);
          v47.i32[3] = v42.i32[3];
          v54.i32[3] = v41.i32[3];
          v56 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL), v10 * v53);
          v57 = vaddq_f32(v56, v55);
          v55.i32[3] = v40.i32[3];
          v56.i32[3] = v38.i32[3];
          v57.i32[3] = v39.i32[3];
          v58 = v57;
          v58.i32[3] = 0;
          v39 = v57;
          *(float32x4_t *)v37->f32 = v58;
          v41 = v54;
          v42 = v47;
          v38 = v56;
          v40 = v55;
        }
        v37 += 2;
        ++v36;
        --v32;
      }
      while (v32);
      v94 = v42;
      v95 = v41;
      v96 = v40;
      v97 = v38;
      v98 = v39;
      v23 = v99;
    }
    else
    {
      if ((_DWORD)v28 == (_DWORD)v104)
      {
LABEL_36:
        v23 = v99;
        v26 = v105;
        goto LABEL_46;
      }
      v59 = v104 - v28;
      v60 = &v37[2 * v28];
      v61 = &v36[v28];
      v23 = v99;
      v62 = v88;
      v26 = v105;
      v64 = v86;
      v63 = v87;
      v66 = v84;
      v65 = v85;
      do
      {
        v67 = vsubq_f32(*v61, v92);
        v68 = (int8x16_t)vmulq_f32(v93, v67);
        v69 = (int8x16_t)vmulq_f32(v67, v67);
        v70 = (int8x16_t)vzip1q_s32((int32x4_t)v68, (int32x4_t)v69);
        v71 = (float32x4_t)vextq_s8(v70, v70, 8uLL);
        v72 = (int32x2_t)vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), vadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v71.f32));
        *(float32x2_t *)v69.i8 = vmul_f32((float32x2_t)v72, (float32x2_t)v72);
        v50 = *(float *)v69.i32 < v21;
        LODWORD(v73) = vsub_f32((float32x2_t)vdup_lane_s32(v72, 1), *(float32x2_t *)v69.i8).u32[0];
        if (v50 && v73 < v21)
        {
          v75 = vsubq_f32(vmulq_n_f32(v93, *(float *)v72.i32), v67);
          v76 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), v89), v75, v90);
          v77 = v24 * (float)(v9 - sqrtf(v73));
          *(float32x2_t *)v71.f32 = vmul_n_f32(*v60, v91);
          v71.i32[2] = vmuls_lane_f32(v91, *(float32x4_t *)v60->f32, 2);
          v78 = vmulq_n_f32(v75, v11 * v77);
          v79 = vaddq_f32(v78, v71);
          v71.i32[3] = v66.i32[3];
          v78.i32[3] = v65.i32[3];
          v80 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), v76, 0xCuLL), v10 * v77);
          v81 = vaddq_f32(v80, v79);
          v79.i32[3] = v64.i32[3];
          v80.i32[3] = v63.i32[3];
          v81.i32[3] = v62.i32[3];
          v82 = v81;
          v82.i32[3] = 0;
          v62 = v81;
          *(float32x4_t *)v60->f32 = v82;
          v65 = v78;
          v66 = v71;
          v63 = v80;
          v64 = v79;
        }
        v60 += 2;
        ++v61;
        --v59;
      }
      while (v59);
      v84 = v66;
      v85 = v65;
      v86 = v64;
      v87 = v63;
      v88 = v62;
    }
LABEL_46:
    sub_1B1F05D48(v22, (unsigned __int16 **)v123, (uint64_t)v130);
    sub_1B1F03804((char *)v31);
    ecs_stack_allocator_pop_snapshot(v23);
    if ((v106 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 376));
    }
    swift_release();
    ++v25;
  }
  while (v25 != v103);
  sub_1B19ED720((uint64_t)v112);
LABEL_51:
  swift_release();
  sub_1B19ED748(v114);
  return sub_1B19ED748(v114);
}

ValueMetadata *type metadata accessor for Vortex()
{
  return &type metadata for Vortex;
}

float sub_1B2042220(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v10;
  _BYTE v12[16];

  sub_1B2042420(0, &qword_1EEF62738, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B20423DC();
  sub_1B222A150();
  if (!v1)
  {
    v12[15] = 0;
    sub_1B22297F0();
    v2 = v10;
    v12[14] = 1;
    sub_1B22297F0();
    v12[13] = 2;
    sub_1B22297F0();
    v12[12] = 3;
    sub_1B22297F0();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B20423DC()
{
  unint64_t result;

  result = qword_1EEF62740;
  if (!qword_1EEF62740)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B33C8, &type metadata for Vortex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62740);
  }
  return result;
}

void sub_1B2042420(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B20423DC();
    v7 = a3(a1, &type metadata for Vortex.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for Vortex.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B20424C8 + 4 * byte_1B22B3229[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B20424FC + 4 * byte_1B22B3224[v4]))();
}

uint64_t sub_1B20424FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2042504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B204250CLL);
  return result;
}

uint64_t sub_1B2042518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2042520);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B2042524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B204252C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Vortex.CodingKeys()
{
  return &type metadata for Vortex.CodingKeys;
}

unint64_t sub_1B204254C()
{
  unint64_t result;

  result = qword_1EEF62750;
  if (!qword_1EEF62750)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B33A0, &type metadata for Vortex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62750);
  }
  return result;
}

unint64_t sub_1B2042594()
{
  unint64_t result;

  result = qword_1EEF62758;
  if (!qword_1EEF62758)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3310, &type metadata for Vortex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62758);
  }
  return result;
}

unint64_t sub_1B20425DC()
{
  unint64_t result;

  result = qword_1EEF62760;
  if (!qword_1EEF62760)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3338, &type metadata for Vortex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62760);
  }
  return result;
}

uint64_t sub_1B2042620(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  uint64_t result;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _WORD v72[8];
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _QWORD v83[7];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _QWORD v89[7];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[7];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v101[7];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _QWORD v107[7];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _QWORD v113[7];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _QWORD v119[7];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _QWORD v125[7];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _QWORD v131[7];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _QWORD v137[7];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _QWORD v143[7];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _QWORD v149[7];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  _QWORD v155[7];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _QWORD v161[7];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  _QWORD v167[7];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _QWORD v173[7];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v3 = v2;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v175 = v169;
  v176 = v170;
  v177 = v171;
  v178 = v172;
  v174 = v168;
  v5 = sub_1B222A0B4();
  v173[0] = 0xD00000000000001CLL;
  v173[1] = 0x80000001B2348A30;
  v173[2] = 0;
  v173[3] = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  v173[4] = MEMORY[0x1E0DEE9D8];
  v173[5] = 0;
  v173[6] = v5;
  v7 = sub_1B1B3947C((uint64_t)v173, 0, a2);
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[64] = v7;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v169 = v163;
  v170 = v164;
  v171 = v165;
  v172 = v166;
  v168 = v162;
  v167[0] = 0xD000000000000015;
  v167[1] = 0x80000001B2348A50;
  v167[3] = 0;
  v167[2] = 0;
  v167[4] = v6;
  v167[5] = 0;
  v167[6] = sub_1B222A0B4();
  v10 = sub_1B1B3947C((uint64_t)v167, 0, a2);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[65] = v10;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v163 = v157;
  v164 = v158;
  v165 = v159;
  v166 = v160;
  v162 = v156;
  v161[0] = 0xD00000000000001DLL;
  v161[1] = 0x80000001B2348A70;
  v161[3] = 0;
  v161[2] = 0;
  v161[4] = v6;
  v161[5] = 0;
  v161[6] = sub_1B222A0B4();
  v13 = sub_1B1B3947C((uint64_t)v161, 0, a2);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[66] = v13;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v157 = v151;
  v158 = v152;
  v159 = v153;
  v160 = v154;
  v156 = v150;
  v155[0] = 0xD00000000000001ALL;
  v155[1] = 0x80000001B2348A90;
  v155[3] = 0;
  v155[2] = 0;
  v155[4] = v6;
  v155[5] = 0;
  v155[6] = sub_1B222A0B4();
  v16 = sub_1B1B3947C((uint64_t)v155, 0, a2);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[67] = v16;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v151 = v145;
  v152 = v146;
  v153 = v147;
  v154 = v148;
  v150 = v144;
  v149[0] = 0xD000000000000020;
  v149[1] = 0x80000001B2348AB0;
  v149[3] = 0;
  v149[2] = 0;
  v149[4] = v6;
  v149[5] = 0;
  v149[6] = sub_1B222A0B4();
  v19 = sub_1B1B3947C((uint64_t)v149, 0, a2);
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[68] = v19;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v145 = v139;
  v146 = v140;
  v147 = v141;
  v148 = v142;
  v144 = v138;
  v143[0] = 0xD000000000000018;
  v143[1] = 0x80000001B2348AE0;
  v143[3] = 0;
  v143[2] = 0;
  v143[4] = v6;
  v143[5] = 0;
  v143[6] = sub_1B222A0B4();
  v22 = sub_1B1B3947C((uint64_t)v143, 0, a2);
  v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[73] = v22;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v139 = v133;
  v140 = v134;
  v141 = v135;
  v142 = v136;
  v138 = v132;
  v137[0] = 0xD000000000000015;
  v137[1] = 0x80000001B2348B00;
  v137[3] = 0;
  v137[2] = 0;
  v137[4] = v6;
  v137[5] = 0;
  v137[6] = sub_1B222A0B4();
  v25 = sub_1B1B3947C((uint64_t)v137, 0, a2);
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[74] = v25;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v133 = v127;
  v134 = v128;
  v135 = v129;
  v136 = v130;
  v132 = v126;
  v131[0] = 0xD000000000000015;
  v131[1] = 0x80000001B2348B20;
  v131[3] = 0;
  v131[2] = 0;
  v131[4] = v6;
  v131[5] = 0;
  v131[6] = sub_1B222A0B4();
  v28 = sub_1B1B3947C((uint64_t)v131, 0, a2);
  v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[76] = v28;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v127 = v121;
  v128 = v122;
  v129 = v123;
  v130 = v124;
  v126 = v120;
  v125[0] = 0x656D5F6B636F6C62;
  v125[1] = 0xEF74726F73656772;
  v125[2] = 0;
  v125[3] = 0;
  v125[4] = v6;
  v125[5] = 0;
  v125[6] = sub_1B222A0B4();
  v31 = sub_1B1B3947C((uint64_t)v125, 0, a2);
  v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[77] = v31;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v122 = v116;
  v123 = v117;
  v124 = v118;
  v120 = v114;
  v121 = v115;
  v119[0] = 0x75735F656772656DLL;
  v119[1] = 0xEF73796172726162;
  v119[2] = 0;
  v119[3] = 0;
  v119[4] = v6;
  v119[5] = 0;
  v119[6] = sub_1B222A0B4();
  v34 = sub_1B1B3947C((uint64_t)v119, 0, a2);
  v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[78] = v34;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v116 = v110;
  v117 = v111;
  v118 = v112;
  v114 = v108;
  v115 = v109;
  v113[0] = 0xD000000000000010;
  v113[1] = 0x80000001B2348B40;
  v113[2] = 0;
  v113[3] = 0;
  v113[4] = v6;
  v113[5] = 0;
  v113[6] = sub_1B222A0B4();
  v37 = sub_1B1B3947C((uint64_t)v113, 0, a2);
  v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[79] = v37;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v110 = v104;
  v111 = v105;
  v112 = v106;
  v108 = v102;
  v109 = v103;
  v107[0] = 0xD000000000000014;
  v107[1] = 0x80000001B2348B60;
  v107[2] = 0;
  v107[3] = 0;
  v107[4] = v6;
  v107[5] = 0;
  v107[6] = sub_1B222A0B4();
  v40 = sub_1B1B3947C((uint64_t)v107, 0, a2);
  v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[69] = v40;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v104 = v98;
  v105 = v99;
  v106 = v100;
  v102 = v96;
  v103 = v97;
  v101[0] = 0xD000000000000015;
  v101[1] = 0x80000001B2348B80;
  v101[2] = 0;
  v101[3] = 0;
  v101[4] = v6;
  v101[5] = 0;
  v101[6] = sub_1B222A0B4();
  v43 = sub_1B1B3947C((uint64_t)v101, 0, a2);
  v45 = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[70] = v43;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v98 = v92;
  v99 = v93;
  v100 = v94;
  v96 = v90;
  v97 = v91;
  v95[0] = 0xD00000000000001BLL;
  v95[1] = 0x80000001B2348BA0;
  v95[2] = 0;
  v95[3] = 0;
  v95[4] = v6;
  v95[5] = 0;
  v95[6] = sub_1B222A0B4();
  v46 = sub_1B1B3947C((uint64_t)v95, 0, a2);
  v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[71] = v46;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v92 = v86;
  v93 = v87;
  v94 = v88;
  v90 = v84;
  v91 = v85;
  v89[0] = 0xD00000000000002FLL;
  v89[1] = 0x80000001B2348BC0;
  v89[2] = 0;
  v89[3] = 0;
  v89[4] = v6;
  v89[5] = 0;
  v89[6] = sub_1B222A0B4();
  v49 = sub_1B1B3947C((uint64_t)v89, 0, a2);
  v51 = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[72] = v49;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v86 = v80;
  v87 = v81;
  v88 = v82;
  v84 = v78;
  v85 = v79;
  v83[0] = 0xD00000000000001CLL;
  v83[1] = 0x80000001B2348BF0;
  v83[2] = 0;
  v83[3] = 0;
  v83[4] = v6;
  v83[5] = 0;
  v83[6] = sub_1B222A0B4();
  v52 = sub_1B1B3947C((uint64_t)v83, 0, a2);
  v54 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[75] = v52;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v80 = v69;
  v81 = v70;
  v82 = v71;
  v78 = v67;
  v79 = v68;
  strcpy((char *)v72, "generate_keys");
  v72[7] = -4864;
  v73 = 0;
  v74 = 0;
  v75 = v6;
  v76 = 0;
  v77 = sub_1B222A0B4();
  v55 = sub_1B1B3947C((uint64_t)v72, 0, a2);
  v57 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[80] = v55;
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v69 = v64;
  v70 = v65;
  v71 = v66;
  v67 = v62;
  v68 = v63;
  *(_QWORD *)&v62 = 0xD000000000000011;
  *((_QWORD *)&v62 + 1) = 0x80000001B2348C10;
  v63 = 0uLL;
  v64 = v6;
  *(_QWORD *)&v65 = sub_1B222A0B4();
  v58 = sub_1B1B3947C((uint64_t)&v62, 0, a2);
  v60 = v59;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = swift_unknownObjectRelease();
  v3[81] = v58;
  return result;
}

uint64_t sub_1B2043600(_WORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  char v16;
  ValueMetadata *v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  _WORD *v21;

  v11 = *(_QWORD *)(*(_QWORD *)(a6 + 288) + 128);
  v12 = (v11 + 127) & -v11;
  bzero(a1, (v11 + 247) & -v11);
  *(_DWORD *)a1 = 0;
  a1[2] = 0;
  a1[3] = v12;
  if (a5)
    v12 = a5;
  for (;
        a3;
        v12 = (v12 + sub_1B1F24AF8((uint64_t)v17) * a4 + *(_QWORD *)(*(_QWORD *)(a6 + 288) + 128) - 1) & -*(_QWORD *)(*(_QWORD *)(a6 + 288) + 128))
  {
    v13 = __clz(__rbit64(a3));
    if (v13 < 0x40 && ((1 << v13) & a3) != 0)
      a3 &= ~(1 << v13);
    v15 = sub_1B1C3498C(v13);
    if (v15 == 28)
      break;
    v16 = v15;
    v17 = sub_1B1C34734(v15);
    v18 = sub_1B1C34720(v16);
    v19 = word_1B22B34F6[v16];
    v20 = sub_1B1F24AF8((uint64_t)v17);
    v21 = &a1[4 * v18];
    *(_DWORD *)v21 = v12;
    v21[2] = v19;
    v21[3] = v20;
  }
  return v12;
}

uint64_t sub_1B2043738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  char *v16;
  id v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  uint64_t v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 512);
  swift_getObjectType();
  swift_unknownObjectRetain();
  v4 = sub_1B1F9CF68();
  if ((v4 & 0x8000000000000000) != 0
    || (v7 = v4, HIDWORD(v4))
    || (v8 = v5, (v5 & 0x8000000000000000) != 0)
    || HIDWORD(v5)
    || (v9 = v6, (v6 & 0x8000000000000000) != 0)
    || HIDWORD(v6))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    swift_retain();
    v10 = (void *)sub_1B1D22DA8(0, 16);
    v12 = v11;
    v24 = v13;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v25[0] = 0;
      v25[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v14 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v25[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v14, v25, 0xD000000000000033, 0x80000001B23489F0);
      swift_release();
      swift_release();
    }
    else
    {
      *(_QWORD *)&v15 = __PAIR64__(v8, v7);
      *((_QWORD *)&v15 + 1) = v9;
      v23 = v15;
      v16 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v17 = v10;
      *(_OWORD *)&v16[v12] = v23;
    }
    swift_release();
    ObjectType = swift_getObjectType();
    sub_1B211850C((uint64_t)v10, v12, v24, 0, 1, ObjectType);
    v19 = *(_QWORD *)(a2 + 368);
    v20 = swift_unknownObjectRetain();
    sub_1B211850C(v20, v19, 4, 0, 6, ObjectType);
    swift_unknownObjectRelease();
    v21 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v21, v19 + 96, 12, 0);
    swift_unknownObjectRelease();
    sub_1B1F40E74(v3);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B2043A84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v81;
  _BYTE __dst[656];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;

  v13 = a2[5];
  v14 = *((_BYTE *)a2 + 48);
  v15 = *((_BYTE *)a2 + 49);
  v16 = *((_BYTE *)a2 + 50);
  v17 = a2[7];
  v83 = *a2;
  v18 = *((_DWORD *)a2 + 16);
  v86 = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 68);
  v87 = v14;
  v19 = a2[9];
  v88 = v15;
  v20 = *((_BYTE *)a2 + 80);
  v89 = v16;
  v21 = a2[11];
  v22 = *((_DWORD *)a2 + 24);
  v90 = v17;
  v23 = a2[15];
  v91 = v18;
  LOBYTE(v18) = *((_BYTE *)a2 + 128);
  v92 = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 129);
  v93 = v19;
  LOBYTE(v19) = *((_BYTE *)a2 + 130);
  v94 = v20;
  v24 = a2[19];
  v95 = v21;
  LOBYTE(v21) = *((_BYTE *)a2 + 160);
  v98 = v23;
  v99 = v18;
  v25 = a2[21];
  v26 = a2[22];
  v100 = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 184);
  v101 = v19;
  v27 = a2[26];
  v103 = v24;
  LOBYTE(v24) = *((_BYTE *)a2 + 216);
  v104 = v21;
  v28 = a2[29];
  v105 = v25;
  v29 = *((_BYTE *)a2 + 240);
  v106 = v26;
  v30 = a2[33];
  v107 = v13;
  v31 = *((unsigned __int8 *)a2 + 272);
  v109 = v27;
  v32 = a2[35];
  v110 = v24;
  v112 = v28;
  v33 = a2[44];
  v34 = a2[45];
  v113 = v29;
  v115 = v30;
  v36 = a2[46];
  v35 = a2[47];
  v117 = v32;
  v122 = v33;
  v131 = *((_DWORD *)a2 + 114);
  v37 = a2[56];
  v84 = *(_OWORD *)(a2 + 1);
  v85 = *(_OWORD *)(a2 + 3);
  v96 = v22;
  v97 = *(_OWORD *)(a2 + 13);
  v102 = *(_OWORD *)(a2 + 17);
  v108 = *((_OWORD *)a2 + 12);
  v111 = *(_QWORD *)((char *)a2 + 220);
  v114 = *(_OWORD *)(a2 + 31);
  v116 = v31;
  v38 = *((_OWORD *)a2 + 18);
  v39 = *((_OWORD *)a2 + 19);
  v118 = v38;
  v119 = v39;
  v40 = *((_OWORD *)a2 + 21);
  v120 = *((_OWORD *)a2 + 20);
  v121 = v40;
  v123 = v34;
  v124 = v36;
  v41 = *((_OWORD *)a2 + 25);
  v126 = *((_OWORD *)a2 + 24);
  v127 = v41;
  v42 = *((_OWORD *)a2 + 27);
  v128 = *((_OWORD *)a2 + 26);
  v129 = v42;
  v43 = *((_OWORD *)a2 + 30);
  v132 = *((_OWORD *)a2 + 29);
  v133 = v43;
  v44 = *((_OWORD *)a2 + 32);
  v134 = *((_OWORD *)a2 + 31);
  v135 = v44;
  v45 = *((_OWORD *)a2 + 35);
  v46 = *((_OWORD *)a2 + 36);
  v47 = *((_OWORD *)a2 + 37);
  v48 = *((_OWORD *)a2 + 38);
  v49 = *((_OWORD *)a2 + 39);
  v50 = *((_OWORD *)a2 + 40);
  v51 = *((_OWORD *)a2 + 34);
  v136 = *((_OWORD *)a2 + 33);
  v137 = v51;
  v138 = v45;
  v139 = v46;
  v140 = v47;
  v141 = v48;
  v142 = v49;
  v143 = v50;
  v52 = v51;
  v125 = v35;
  v130 = v37;
  if (v34)
  {
    v53 = v51;
    if (v31)
      v54 = v37;
    else
      v54 = 0;
    v73 = v36;
    v74 = v35;
    v75 = v38;
    v72 = v39;
    ObjectType = swift_getObjectType();
    v56 = v75;
    v76 = a4;
    v57 = v56 + v54 * v72;
    v52 = v53;
    swift_unknownObjectRetain();
    sub_1B1C1FAFC((uint64_t)&v83);
    swift_unknownObjectRetain();
    v58 = swift_unknownObjectRetain();
    v59 = v57;
    a4 = v76;
    sub_1B211850C(v58, v59, v72, 0, 4, ObjectType);
    swift_unknownObjectRelease();
    sub_1B211850C(v34, v73, v74, 0, 5, ObjectType);
    swift_unknownObjectRelease();
    sub_1B1CDB618((uint64_t)&v83);
  }
  else
  {
    swift_unknownObjectRetain();
  }
  v60 = swift_getObjectType();
  sub_1B1F40E74(v52);
  memcpy(__dst, a2, sizeof(__dst));
  sub_1B1C1FAFC((uint64_t)__dst);
  sub_1B2043738(a1, (uint64_t)__dst);
  sub_1B1CDB618((uint64_t)__dst);
  v61 = a2[69];
  if (v61)
  {
    v62 = a2[45];
    v63 = a2[46];
    v64 = a2[47];
    v65 = a2[38];
    v66 = a2[36] + v65 * a4;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v67 = swift_unknownObjectRetain();
    sub_1B211850C(v67, v66, v65, 0, 4, v60);
    swift_unknownObjectRelease();
    sub_1B211850C(v62, v63, v64, 0, 5, v60);
    sub_1B211850C(a5, a6, a7, 0, 1, v60);
    sub_1B211850C(a8, a9, a10, 0, 6, v60);
    v68 = a2[45];
    v69 = a2[46] + 96;
    swift_unknownObjectRetain();
    sub_1B1F4106C(v61, v68, v69);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v71 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v81 = 0;
    swift_retain();
    sub_1B1F1AD70(v71, &v81, 0xD00000000000003ALL, 0x80000001B23489B0);
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B2043F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v25;

  v4 = *(_QWORD *)(a2 + 560);
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 360);
    v7 = *(_QWORD *)(a2 + 368);
    v8 = *(_QWORD *)(a2 + 376);
    ObjectType = swift_getObjectType();
    v10 = *(_QWORD *)(a2 + 304);
    v11 = v10 - v10 * *(_QWORD *)(a2 + 448) + *(_QWORD *)(a2 + 288);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v12 = swift_unknownObjectRetain();
    sub_1B211850C(v12, v11, v10, 0, 4, ObjectType);
    swift_unknownObjectRelease();
    sub_1B211850C(v6, v7, v8, 0, 5, ObjectType);
    v13 = *(_QWORD *)(a2 + 304);
    if (*(_BYTE *)(a2 + 272))
      v14 = *(_QWORD *)(a2 + 448);
    else
      v14 = 0;
    v15 = *(_QWORD *)(a2 + 288) + v14 * v13;
    v16 = swift_unknownObjectRetain();
    sub_1B211850C(v16, v15, v13, 0, 6, ObjectType);
    swift_unknownObjectRelease();
    v17 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v17, v7, v8, 0);
    swift_unknownObjectRelease();
    v18 = *(_QWORD *)(a2 + 432);
    v19 = *(_QWORD *)(a2 + 440);
    v20 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v20, v18, v19, 0);
    swift_unknownObjectRelease();
    sub_1B1F4106C(v4, a3, a4);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v22 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v25 = 0;
    swift_retain();
    sub_1B1F1AD70(v22, &v25, 0xD00000000000002BLL, 0x80000001B23488F0);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B204418C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ObjectType;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;

  v4 = *(_QWORD *)(a2 + 568);
  if (v4)
  {
    v5 = a4;
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_BYTE *)(a2 + 48);
    v9 = *(_BYTE *)(a2 + 49);
    v56 = *(_QWORD *)a2;
    v10 = *(_BYTE *)(a2 + 50);
    v59 = v7;
    v11 = *(_QWORD *)(a2 + 56);
    v60 = v8;
    v12 = *(_DWORD *)(a2 + 64);
    v61 = v9;
    v13 = *(_BYTE *)(a2 + 68);
    v62 = v10;
    v14 = *(_QWORD *)(a2 + 72);
    v63 = v11;
    LOBYTE(v11) = *(_BYTE *)(a2 + 80);
    v64 = v12;
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(_DWORD *)(a2 + 96);
    v65 = v13;
    v17 = *(_QWORD *)(a2 + 120);
    v66 = v14;
    LOBYTE(v14) = *(_BYTE *)(a2 + 128);
    v67 = v11;
    LOBYTE(v11) = *(_BYTE *)(a2 + 129);
    v68 = v15;
    LOBYTE(v15) = *(_BYTE *)(a2 + 130);
    v71 = v17;
    v18 = *(_QWORD *)(a2 + 152);
    v72 = v14;
    LOBYTE(v14) = *(_BYTE *)(a2 + 160);
    v73 = v11;
    v74 = v15;
    v19 = *(_QWORD *)(a2 + 168);
    v20 = *(_QWORD *)(a2 + 176);
    v76 = v18;
    LOBYTE(v18) = *(_BYTE *)(a2 + 184);
    v77 = v14;
    v21 = *(_QWORD *)(a2 + 208);
    v78 = v19;
    v79 = v20;
    LOBYTE(v19) = *(_BYTE *)(a2 + 216);
    v22 = *(_QWORD *)(a2 + 232);
    v80 = v18;
    LOBYTE(v18) = *(_BYTE *)(a2 + 240);
    v82 = v21;
    v23 = *(_QWORD *)(a2 + 264);
    v83 = v19;
    v24 = *(unsigned __int8 *)(a2 + 272);
    v85 = v22;
    v25 = *(_QWORD *)(a2 + 280);
    v75 = *(_OWORD *)(a2 + 136);
    v84 = *(_QWORD *)(a2 + 220);
    v86 = v18;
    v87 = *(_OWORD *)(a2 + 248);
    v26 = *(_QWORD *)(a2 + 352);
    v27 = *(_QWORD *)(a2 + 360);
    v88 = v23;
    LODWORD(v19) = *(_DWORD *)(a2 + 456);
    v95 = v26;
    v28 = *(_QWORD *)(a2 + 560);
    v104 = v19;
    v111 = v28;
    v30 = *(_QWORD *)(a2 + 368);
    v29 = *(_QWORD *)(a2 + 376);
    v31 = *(_OWORD *)(a2 + 24);
    v57 = *(_OWORD *)(a2 + 8);
    v58 = v31;
    v69 = v16;
    v70 = *(_OWORD *)(a2 + 104);
    v81 = *(_OWORD *)(a2 + 192);
    v32 = *(_OWORD *)(a2 + 288);
    v33 = *(_OWORD *)(a2 + 304);
    v34 = *(_OWORD *)(a2 + 336);
    v93 = *(_OWORD *)(a2 + 320);
    v94 = v34;
    v35 = *(_OWORD *)(a2 + 400);
    v99 = *(_OWORD *)(a2 + 384);
    v100 = v35;
    v36 = *(_OWORD *)(a2 + 432);
    v101 = *(_OWORD *)(a2 + 416);
    v102 = v36;
    v37 = *(_OWORD *)(a2 + 480);
    v105 = *(_OWORD *)(a2 + 464);
    v106 = v37;
    v38 = *(_OWORD *)(a2 + 512);
    v107 = *(_OWORD *)(a2 + 496);
    v108 = v38;
    v39 = *(_OWORD *)(a2 + 528);
    v40 = *(_OWORD *)(a2 + 544);
    v41 = *(_OWORD *)(a2 + 576);
    v42 = *(_OWORD *)(a2 + 592);
    v43 = *(_OWORD *)(a2 + 608);
    v44 = *(_OWORD *)(a2 + 624);
    v45 = *(_OWORD *)(a2 + 640);
    v46 = *(_QWORD *)(a2 + 448);
    v89 = v24;
    v90 = v25;
    v91 = v32;
    v92 = v33;
    v96 = v27;
    v97 = v30;
    v98 = v29;
    v103 = v46;
    v109 = v39;
    v110 = v40;
    v112 = v4;
    v113 = v41;
    v114 = v42;
    v115 = v43;
    v116 = v44;
    v117 = v45;
    if (v27)
    {
      if (v24)
        v47 = v46;
      else
        v47 = 0;
      v53 = v33;
      v54 = v32;
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1B1C1FAFC((uint64_t)&v56);
      swift_unknownObjectRetain();
      v49 = swift_unknownObjectRetain();
      v50 = v54 + v47 * v53;
      v5 = a4;
      sub_1B211850C(v49, v50, v53, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v27, v30, v29, 0, 5, ObjectType);
      swift_unknownObjectRelease();
      sub_1B1CDB618((uint64_t)&v56);
    }
    else
    {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_1B1F4106C(v4, a3, v5);
    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v51 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v56 = 0;
    swift_retain();
    sub_1B1F1AD70(v51, &v56, 0xD000000000000035, 0x80000001B23488B0);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B2044590(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t ObjectType;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  char v105;
  char v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;

  v29 = a24;
  v28 = a25;
  v30 = a2[5];
  v31 = *((_BYTE *)a2 + 48);
  v32 = *((_BYTE *)a2 + 49);
  v33 = *((_BYTE *)a2 + 50);
  v89 = *a2;
  v34 = a2[7];
  v92 = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 16);
  v93 = v31;
  v35 = *((_BYTE *)a2 + 68);
  v94 = v32;
  v36 = a2[9];
  v95 = v33;
  v37 = *((_BYTE *)a2 + 80);
  v96 = v34;
  v38 = a2[11];
  v39 = *((_DWORD *)a2 + 24);
  v97 = v30;
  v40 = a2[15];
  v98 = v35;
  v41 = *((_BYTE *)a2 + 128);
  v99 = v36;
  LOBYTE(v36) = *((_BYTE *)a2 + 129);
  v100 = v37;
  v42 = *((_BYTE *)a2 + 130);
  v101 = v38;
  v43 = a2[19];
  v104 = v40;
  LOBYTE(v40) = *((_BYTE *)a2 + 160);
  v105 = v41;
  v106 = v36;
  v44 = a2[21];
  v45 = a2[22];
  v107 = v42;
  v46 = *((_BYTE *)a2 + 184);
  v109 = v43;
  v47 = a2[26];
  v110 = v40;
  LOBYTE(v40) = *((_BYTE *)a2 + 216);
  v111 = v44;
  v112 = v45;
  v48 = a2[29];
  LOBYTE(v45) = *((_BYTE *)a2 + 240);
  v113 = v46;
  v49 = a2[33];
  v115 = v47;
  v50 = *((unsigned __int8 *)a2 + 272);
  v116 = v40;
  v51 = a2[35];
  v118 = v48;
  v119 = v45;
  v52 = a2[44];
  v53 = a2[45];
  v108 = *(_OWORD *)(a2 + 17);
  v117 = *(uint64_t *)((char *)a2 + 220);
  v120 = *(_OWORD *)(a2 + 31);
  v121 = v49;
  v55 = a2[46];
  v54 = a2[47];
  v128 = v52;
  v137 = *((_DWORD *)a2 + 114);
  v56 = a2[56];
  v90 = *(_OWORD *)(a2 + 1);
  v91 = *(_OWORD *)(a2 + 3);
  v102 = v39;
  v103 = *(_OWORD *)(a2 + 13);
  v114 = *((_OWORD *)a2 + 12);
  v122 = v50;
  v123 = v51;
  v57 = *((_OWORD *)a2 + 18);
  v58 = *((_OWORD *)a2 + 19);
  v124 = v57;
  v125 = v58;
  v59 = *((_OWORD *)a2 + 21);
  v126 = *((_OWORD *)a2 + 20);
  v127 = v59;
  v129 = v53;
  v130 = v55;
  v131 = v54;
  v60 = *((_OWORD *)a2 + 25);
  v132 = *((_OWORD *)a2 + 24);
  v133 = v60;
  v61 = *((_OWORD *)a2 + 27);
  v134 = *((_OWORD *)a2 + 26);
  v135 = v61;
  v136 = v56;
  v62 = *((_OWORD *)a2 + 30);
  v138 = *((_OWORD *)a2 + 29);
  v139 = v62;
  v63 = *((_OWORD *)a2 + 32);
  v140 = *((_OWORD *)a2 + 31);
  v141 = v63;
  v64 = *((_OWORD *)a2 + 34);
  v65 = *((_OWORD *)a2 + 37);
  v66 = *((_OWORD *)a2 + 38);
  v67 = *((_OWORD *)a2 + 39);
  v68 = *((_OWORD *)a2 + 40);
  v70 = *((_OWORD *)a2 + 35);
  v69 = *((_OWORD *)a2 + 36);
  v142 = *((_OWORD *)a2 + 33);
  v143 = v64;
  v144 = v70;
  v145 = v69;
  v146 = v65;
  v147 = v66;
  v148 = v67;
  v149 = v68;
  v88 = v69;
  if (v53)
  {
    if (v50)
      v71 = v56;
    else
      v71 = 0;
    v80 = v55;
    v81 = v54;
    v78 = v58;
    v79 = v57;
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1C1FAFC((uint64_t)&v89);
    swift_unknownObjectRetain();
    v73 = swift_unknownObjectRetain();
    v74 = v79 + v71 * v78;
    v28 = a25;
    sub_1B211850C(v73, v74, v78, 0, 4, ObjectType);
    swift_unknownObjectRelease();
    v75 = ObjectType;
    v29 = a24;
    sub_1B211850C(v53, v80, v81, 0, 5, v75);
    swift_unknownObjectRelease();
    sub_1B1CDB618((uint64_t)&v89);
  }
  else
  {
    swift_unknownObjectRetain();
  }
  v76 = swift_getObjectType();
  sub_1B211850C(a3, a4, a5, 0, 6, v76);
  sub_1B1F40DEC(a6, a7, a8, 0);
  sub_1B1F40DEC(a9, a10, a11, 0);
  sub_1B1F40DEC(a12, a13, a14, 0);
  sub_1B1F40DEC(a15, a16, a17, 0);
  sub_1B1F40DEC(a18, a19, a20, 0);
  sub_1B1F40DEC(a21, a22, a23, 0);
  sub_1B211850C(v29, v28, a26, 0, 1, v76);
  sub_1B1F4106C(v88, a27, a28);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2044A50(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, _QWORD *a6, unsigned __int32 a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v14;
  unint64_t v16;
  unint64_t v21;
  unsigned __int32 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  id v29;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD aBlock[6];
  uint64_t __dst[84];

  __dst[82] = *MEMORY[0x1E0C80C00];
  v14 = a6[14];
  if ((v14 & 0x8000000000000000) != 0
    || HIDWORD(v14)
    || (v16 = a6[48], (v16 & 0x8000000000000000) != 0)
    || HIDWORD(v16)
    || (swift_getObjectType(), v56 = a10, v21 = sub_1B1F9CF68(), (v21 & 0x8000000000000000) != 0)
    || (v22 = v21, HIDWORD(v21)))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v23 = (void *)sub_1B1D22DA8(0, 96);
    v58 = v24;
    v55 = v25;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      __dst[0] = 0;
      __dst[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v26 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      __dst[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v26, __dst, 0xD000000000000047, 0x80000001B2348920);
      swift_release();
      swift_release();
      v27 = v58;
    }
    else
    {
      v28 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v29 = v23;
      v30 = (__n128 *)&v28[v58];
      v27 = v58;
      v30->n128_u32[0] = v14;
      v30->n128_u32[1] = v16;
      v30->n128_u32[2] = a7;
      v30->n128_u8[12] = a8 & 1;
      v30->n128_u8[13] = a9 & 1;
      v30[1] = a1;
      v30[2] = a2;
      v30[3] = a3;
      v30[4] = a4;
      v30[5].n128_u32[0] = v22;
    }
    v31 = (uint64_t)v23;
    memcpy(__dst, a6, 0x290uLL);
    v32 = __dst[45];
    if (__dst[45])
    {
      v33 = __dst[47];
      v34 = __dst[46];
      if (LOBYTE(__dst[34]))
        v35 = __dst[56];
      else
        v35 = 0;
      ObjectType = swift_getObjectType();
      v37 = __dst[38];
      v38 = __dst[36] + __dst[38] * v35;
      sub_1B1C1FAFC((uint64_t)__dst);
      swift_unknownObjectRetain();
      v39 = swift_unknownObjectRetain();
      sub_1B211850C(v39, v38, v37, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v32, v34, v33, 0, 5, ObjectType);
      v27 = v58;
      swift_unknownObjectRelease();
      sub_1B1CDB618((uint64_t)__dst);
    }
    v40 = swift_getObjectType();
    sub_1B211850C(v31, v27, v55, 0, 1, v40);
    v41 = *(_QWORD *)(a12 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
    swift_retain();
    v42 = sub_1B1D22DA8(0, 4);
    v44 = v43;
    v46 = v45;
    swift_unknownObjectRetain();
    swift_release();
    sub_1B211850C(v42, v44, v46, 0, 6, v40);
    sub_1B1F40E74(v56);
    v47 = *(void **)(a13 + 368);
    v48 = (_QWORD *)swift_allocObject();
    v48[2] = v42;
    v48[3] = v44;
    v48[4] = v46;
    v48[5] = a12;
    v48[6] = a14;
    v48[7] = v41;
    aBlock[4] = sub_1B2048120;
    aBlock[5] = v48;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1B1BA0C14;
    aBlock[3] = &unk_1E63D4A10;
    v49 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v47, sel_addCompletedHandler_, v49);
    _Block_release(v49);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B2044F5C(int a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  int v8;
  unint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v8 = a6;
  v12 = HIDWORD(a6);
  objc_msgSend(a2, sel_storageMode);
  v13 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v14 = a2;
  LODWORD(v13) = *(_DWORD *)&v13[a3];
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(_DWORD *)(v16 + 24) = v8;
  *(_DWORD *)(v16 + 28) = v12;
  *(_QWORD *)(v16 + 32) = a7;
  *(_DWORD *)(v16 + 40) = (_DWORD)v13;
  v17 = a5 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock;
  v18 = *(os_unfair_lock_s **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock + 24);
  swift_retain();
  os_unfair_lock_lock(v18);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B2048178;
  *(_QWORD *)(v19 + 24) = v16;
  v20 = OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks;
  v21 = *(_QWORD **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a5 + v20) = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v21 = sub_1B1C62B5C(0, v21[2] + 1, 1, v21);
    *(_QWORD *)(a5 + v20) = v21;
  }
  v24 = v21[2];
  v23 = v21[3];
  if (v24 >= v23 >> 1)
    v21 = sub_1B1C62B5C(v23 > 1, v24 + 1, 1, v21);
  v21[2] = v24 + 1;
  v25 = &v21[2 * v24];
  v25[4] = sub_1B1CB734C;
  v25[5] = v19;
  *(_QWORD *)(a5 + v20) = v21;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 24));
  swift_release();
  return swift_release();
}

uint64_t sub_1B2045114(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v8;

  result = swift_weakLoadStrong();
  if (result)
  {
    if (a2 != 0xFFFFFFFFLL
      && (a2 & 0x80000000) == 0
      && (int)a2 < *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v8 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (HIDWORD(a2) == -1 || *(_DWORD *)(v8 + 12 * (int)a2 + 8) == HIDWORD(a2))
        sub_1B1FF1E00(*(_QWORD *)(*(_QWORD *)(result + 136) + 8 * *(int *)(v8 + 12 * (int)a2) + 32), *(_WORD *)(v8 + 12 * (int)a2 + 4), 656, result, a3, a4);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B20451F4(uint64_t result, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  char v6;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  if (result)
  {
    v3 = result;
    do
    {
      v4 = __clz(__rbit64(v3));
      if (v4 < 0x40 && ((1 << v4) & v3) != 0)
        v3 &= ~(1 << v4);
      v6 = sub_1B1C3498C(v4);
      if (v6 == 28)
        break;
      v7 = sub_1B1C34734(v6);
      v8 = *a2;
      swift_retain();
      if (v7 == &type metadata for Color)
      {
        v14 = *(_QWORD *)(v8 + 16);
        v15 = *(_QWORD *)(v14 + 128);
        if (*(_QWORD *)(v15 + 16))
        {
          v16 = sub_1B1DC3AC8((uint64_t)&type metadata for TransientOriginColor);
          if ((v17 & 1) != 0
            && *(ValueMetadata **)(*(_QWORD *)(v14 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16) + 32) == &type metadata for TransientOriginColor)
          {
            swift_release();
            return 1;
          }
        }
      }
      if ((v7 == &type metadata for Scale3 || v7 == &type metadata for Scale1 || v7 == &type metadata for Scale2)
        && (v9 = *(_QWORD *)(v8 + 16), v10 = *(_QWORD *)(v9 + 128), *(_QWORD *)(v10 + 16))
        && (v11 = sub_1B1DC3AC8((uint64_t)&type metadata for TransientOriginScale), (v12 & 1) != 0))
      {
        v13 = *(ValueMetadata **)(*(_QWORD *)(v9 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11) + 32);
        swift_release();
        if (v13 == &type metadata for TransientOriginScale)
          return 1;
      }
      else
      {
        swift_release();
      }
    }
    while (v3);
    return 0;
  }
  return result;
}

uint64_t sub_1B2045374(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 600);
  v4 = *(_QWORD *)(a2 + 360);
  v18 = *(_QWORD *)(a2 + 368);
  v5 = *(_QWORD *)(a2 + 376);
  v6 = *(_QWORD *)(a2 + 288);
  v7 = *(_QWORD *)(a2 + 304);
  if (*(_BYTE *)(a2 + 272))
    v8 = *(_QWORD *)(a2 + 448);
  else
    v8 = 0;
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v10 = swift_unknownObjectRetain();
  sub_1B211850C(v10, v6 + v8 * v7, v7, 0, 4, ObjectType);
  swift_unknownObjectRelease();
  sub_1B211850C(v4, v18, v5, 0, 5, ObjectType);
  v11 = *(_QWORD *)(a2 + 304);
  v12 = v11 - v11 * *(_QWORD *)(a2 + 448) + *(_QWORD *)(a2 + 288);
  v13 = swift_unknownObjectRetain();
  sub_1B1F40DEC(v13, v12, v11, 0);
  swift_unknownObjectRelease();
  v14 = swift_unknownObjectRetain();
  sub_1B1F40DEC(v14, v18, v5, 0);
  swift_unknownObjectRelease();
  v15 = *(_QWORD *)(a2 + 360);
  v16 = *(_QWORD *)(a2 + 368) + 96;
  swift_unknownObjectRetain();
  sub_1B1F4106C(v3, v15, v16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for ParticlePrepareGPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B204550C()
{
  return "ParticlePrepareGPUSystem";
}

uint64_t type metadata accessor for ParticlePostInitGPUSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2045540(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    v4 = a1[4];
    swift_retain();
    sub_1B1BEE528((uint64_t)a1);
    sub_1B1FEA358(v4, v2, v3, (uint64_t)a1);
    sub_1B1B4F21C((uint64_t)a1);
    swift_release();
  }
  return swift_release();
}

const char *sub_1B20455D0()
{
  return "ParticlePostInitSystem.GPU";
}

uint64_t sub_1B20455E4()
{
  uint64_t v0;

  sub_1B19E5A18(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleGPUDownload()
{
  return objc_opt_self();
}

uint64_t sub_1B2045628()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = "ParticleGPUDownload";
  *(_QWORD *)(result + 24) = 19;
  *(_BYTE *)(result + 32) = 2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1B2045664(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t ObjectType;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v84;

  v6 = 1;
  v7 = 1 << -(char)__clz(a3 - 1);
  if (a3)
    v6 = v7;
  if (a3 + 4095 <= 0)
    v8 = -(-(a3 + 4095) & 0xFFF);
  else
    v8 = (a3 + 4095) & 0xFFF;
  if (a3 + 4095 - v8 >= v6)
    v9 = v6;
  else
    v9 = a3 + 4095 - v8;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 288) + 128);
  v11 = v10 + 127;
  v12 = -v10;
  v13 = (v10 + 247) & -v10;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v78 = v13;
  v14 = sub_1B1BA2B0C(v13, 0);
  v81 = v15;
  v76 = v16;
  swift_bridgeObjectRelease();
  v82 = v14;
  v18 = objc_msgSend(v14, sel_storageMode);
  v19 = 0;
  if (v18 != (id)2)
  {
    v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v21 = v82;
    v19 = &v20[v81];
  }
  v22 = v11 & v12;
  v23 = sub_1B2043600(v19, v17, a1, v9, 0, a4);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v24 = sub_1B1BA2B0C(v13, 0);
  v79 = v25;
  v75 = v26;
  swift_bridgeObjectRelease();
  v80 = v24;
  v28 = objc_msgSend(v24, sel_storageMode);
  v29 = 0;
  if (v28 != (id)2)
  {
    v30 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v31 = v80;
    v29 = &v30[v79];
  }
  sub_1B2043600(v29, v27, a1, v9, v23, a4);
  v84 = 2 * v13;
  v77 = v22 + 2 * v23;
  v32 = 2 * v13 + 4 * v9 + v77;
  v33 = a2[33];
  v74 = v22;
  v71 = v9;
  v72 = 4 * v9;
  if (v33)
  {
    v34 = *(void **)(v33 + 24);
    swift_retain();
    v35 = objc_msgSend(v34, sel_label);
    v36 = *(void **)(v33 + 16);
    v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B00]), sel_init);
    v38 = v37;
    if (v32 <= 0x10000)
      v39 = 0x10000;
    else
      v39 = 2 * v13 + 4 * v9 + v77;
    objc_msgSend(v37, sel_setSize_, v39);
    objc_msgSend(v38, sel_setResourceOptions_, 544);
    v40 = objc_msgSend(v36, sel_newHeapWithDescriptor_, v38);

    *(_QWORD *)(v33 + 24) = v40;
    swift_unknownObjectRelease();
    objc_msgSend((id)swift_unknownObjectRetain(), (SEL)&selRef_setOutputTexture_, v35);
    swift_release();
    swift_unknownObjectRelease();

  }
  else
  {
    v41 = *(void **)(a4 + 16);
    type metadata accessor for PrivateHeap();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v41;
    v42 = objc_allocWithZone(MEMORY[0x1E0CC6B00]);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v43 = objc_msgSend(v42, sel_init);
    v44 = v43;
    if (v32 <= 0x10000)
      v45 = 0x10000;
    else
      v45 = 2 * v13 + 4 * v9 + v77;
    objc_msgSend(v43, sel_setSize_, v45);
    objc_msgSend(v44, sel_setResourceOptions_, 544);
    v46 = objc_msgSend(v41, sel_newHeapWithDescriptor_, v44);

    *(_QWORD *)(v33 + 24) = v46;
    swift_unknownObjectRetain();
    v47 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v46, sel_setLabel_, v47);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    a2[33] = v33;
  }
  v48 = *(void **)(v33 + 24);
  swift_retain();
  v49 = objc_msgSend(v48, sel_newBufferWithLength_options_, v84, objc_msgSend((id)swift_unknownObjectRetain(), sel_resourceOptions));
  swift_unknownObjectRelease();
  v50 = (void *)sub_1B2228728();
  objc_msgSend(v49, sel_setLabel_, v50);

  v51 = objc_msgSend(*(id *)(v33 + 24), sel_newBufferWithLength_options_, v77, objc_msgSend((id)swift_unknownObjectRetain(), sel_resourceOptions));
  swift_unknownObjectRelease();
  v52 = (void *)sub_1B2228728();
  objc_msgSend(v51, sel_setLabel_, v52);

  v53 = objc_msgSend(*(id *)(v33 + 24), sel_newBufferWithLength_options_, v72, objc_msgSend((id)swift_unknownObjectRetain(), sel_resourceOptions));
  swift_unknownObjectRelease();
  v54 = (void *)sub_1B2228728();
  objc_msgSend(v53, sel_setLabel_, v54);

  swift_unknownObjectRelease();
  a2[53] = v53;
  a2[54] = 0;
  a2[55] = v72;
  v55 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
  swift_getObjectType();
  v56 = (void *)sub_1B2228728();
  objc_msgSend(v55, sel_pushDebugGroup_, v56);

  swift_unknownObjectRetain();
  sub_1B1F9D7C0((uint64_t)v82, v81, v76, (uint64_t)v49, 0, v84, 0);
  swift_unknownObjectRetain();
  v57 = v13;
  sub_1B1F9D7C0((uint64_t)v80, v79, v75, (uint64_t)v49, v13, v13, 0);
  swift_unknownObjectRelease();
  v73 = (uint64_t)v51;
  sub_1B1F9D7A8();
  swift_unknownObjectRelease();
  objc_msgSend(v55, sel_popDebugGroup);
  swift_unknownObjectRelease();
  if ((uint64_t)a2[48] >= 1 && (uint64_t)a2[58] > 0 && (v58 = a2[35]) != 0 && (v59 = a2[45]) != 0)
  {
    v60 = a2[36];
    v68 = a2[37];
    v69 = a2[46];
    v70 = a2[47];
    v61 = (void *)a2[74];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v62 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
    ObjectType = swift_getObjectType();
    v64 = (void *)sub_1B2228728();
    objc_msgSend(v62, sel_pushDebugGroup_, v64);

    v65 = v60;
    sub_1B211850C(v58, v60, v68, 0, 6, ObjectType);
    sub_1B1F40DEC((uint64_t)v49, 0, v84, 0);
    sub_1B1F40DEC(v59, v69, v70, 0);
    sub_1B1F40DEC(v73, 0, v77, 0);
    v66 = v71;
    sub_1B1F410EC(v61, v71);
    objc_msgSend(v62, sel_setBufferOffset_atIndex_, v65 + v78, 6);
    v57 = v78;
    objc_msgSend(v62, sel_setBufferOffset_atIndex_, v78, 7);
    sub_1B1F410EC(v61, v71);
    objc_msgSend(v62, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    v66 = v9;
  }
  swift_unknownObjectRelease();
  a2[35] = v49;
  a2[36] = 0;
  a2[37] = v84;
  a2[38] = v57;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a2[45] = v73;
  a2[46] = 0;
  a2[47] = v77;
  swift_unknownObjectRelease();
  a2[39] = v82;
  a2[40] = v81;
  a2[41] = v76;
  swift_unknownObjectRelease();
  a2[42] = v80;
  a2[43] = v79;
  a2[44] = v75;
  result = swift_unknownObjectRelease();
  a2[50] = v73;
  a2[51] = 0;
  a2[52] = v74;
  a2[48] = v66;
  return result;
}

_QWORD *sub_1B2045F68(_QWORD *result, uint64_t a2, float a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v3 = result[53];
  if (v3)
  {
    v5 = result;
    v7 = result[55];
    v8 = 1 - result[56];
    v9 = result[54];
    swift_unknownObjectRetain();
    swift_retain();
    v10 = (void *)sub_1B1D22DA8(0, 4);
    v12 = v11;
    v19 = v13;
    v20 = v7;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v21[0] = 0;
      v21[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v14 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v21[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v14, v21, 0xD00000000000003ALL, 0x80000001B2348970);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      v15 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v16 = v10;
      *(float *)&v15[v12] = a3;
      swift_release();
    }
    v17 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
    v18 = (void *)sub_1B2228728();
    objc_msgSend(v17, sel_pushDebugGroup_, v18);

    sub_1B2043A84((uint64_t)v17, v5, a2, v8, (uint64_t)v10, v12, v19, v3, v9, v20);
    objc_msgSend(v17, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return (_QWORD *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B204623C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned __int32 v13;
  ValueMetadata *v14;
  ValueMetadata *v15;
  ValueMetadata *v16;
  char v17;
  void *v18;
  void *v19;
  ValueMetadata *v21;

  v11 = *(_QWORD *)(a2 + 296);
  v12 = *(_QWORD *)(a1 + 584);
  v13 = *(_DWORD *)(a1 + 456);
  *(_DWORD *)(a1 + 456) = sub_1B2130F84();
  swift_retain();
  v14 = sub_1B207CCB8(&type metadata for Color);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  v15 = sub_1B207CCB8(&type metadata for Scale1);
  swift_release();
  if (v15 || (swift_retain(), v16 = sub_1B207CCB8(&type metadata for Scale2), swift_release(), v16))
  {
    v17 = 1;
  }
  else
  {
    swift_retain();
    v21 = sub_1B207CCB8(&type metadata for Scale3);
    swift_release();
    v17 = v21 != 0;
  }
  v18 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v19 = (void *)sub_1B2228728();
  objc_msgSend(v18, sel_pushDebugGroup_, v19);

  sub_1B2044A50(a5, a6, a7, a8, (uint64_t)v18, (_QWORD *)a1, v13, v14 != 0, v17, v12, v11, a3, a2, a4);
  objc_msgSend(v18, sel_popDebugGroup);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2046440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 360);
  v3 = *(_QWORD *)(a1 + 368) + 108;
  swift_unknownObjectRetain();
  v4 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v5 = (void *)sub_1B2228728();
  objc_msgSend(v4, sel_pushDebugGroup_, v5);

  sub_1B204418C((uint64_t)v4, a1, v2, v3);
  objc_msgSend(v4, sel_popDebugGroup);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B204650C(_QWORD *a1, uint64_t *a2, uint64_t a3, float a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int *v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  id v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t result;
  int *v49;
  int v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int v74;
  uint64_t v75;
  int v76;
  float32x2_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  int v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x2_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  int *v104;
  int v105;
  _BOOL4 v106;
  _BOOL4 v107;
  _BOOL4 v108;
  int v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t v112;
  int32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  float v136;
  float v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float v144;
  int8x16_t v145;
  float32x2_t v146;
  float v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  uint64_t v151;
  int32x2_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t v159;
  float32x2_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  char *v167;
  char *v168;
  id v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  id v174;
  char *v175;
  char *v176;
  id v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  char *v183;
  char *v184;
  id v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  char *v190;
  char *v191;
  id v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  char *v198;
  char *v199;
  id v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  char *v206;
  char *v207;
  char *v208;
  id v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int *v214;
  int v215;
  uint64_t v216;
  BOOL v217;
  uint64_t v218;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 *v241;
  char *v242;
  uint64_t v243;
  __int128 v244;
  __int128 *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  __int128 *v249;
  char *v250;
  uint64_t v251;
  __int128 v252;
  __int128 *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  __int128 *v257;
  char *v258;
  __int128 v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  char *v269;
  id v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  void *v275;
  uint64_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  _BOOL4 v282;
  _BOOL4 v283;
  float32x4_t v284;
  float32x4_t *v285;
  int *v286;
  float32x4_t v287;
  _BOOL4 v288;
  float32x4_t v289;
  char v290;
  float32x4_t v291;
  int v292;
  __int128 v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  char *v300;
  __int128 v301;
  char *v302;
  __int128 v303;
  char *v304;
  int v305;
  __int128 v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  float32x4_t v316;
  uint64_t v317;
  char v318;
  float32x4_t v319;
  uint64_t v320;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v350[2];
  uint64_t v351;
  _OWORD v352[4];
  char v353;
  _QWORD v354[2];
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  char v358;
  _BYTE v359[80];
  _BYTE v360[80];
  uint64_t v361;

  v361 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v351 = v7;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return sub_1B2046440(a3);
  v10 = (uint64_t *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v11 = v7 + 32;
  v12 = 0;
  for (i = 0; i != v8; ++i)
  {
    v14 = (int *)(v11 + 8 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = v15 == -1 && v16 == 0;
    if (!v17 && (v15 & 0x80000000) == 0 && v10[1] > v15)
    {
      v18 = *v10;
      if (v16 == -1 || *(_DWORD *)(*v10 + 12 * v15 + 8) == v16)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a6 + 136) + 8 * *(int *)(v18 + 12 * v15) + 32);
        v21 = *(_QWORD *)(v20 + 48);
        v22 = *(_QWORD *)(v21 + 16);
        if (v22)
        {
          v23 = (ValueMetadata **)(v21 + 32);
          v24 = *(_QWORD *)(v21 + 16);
          while (*v23 != &type metadata for ParticleSubSpawn.State)
          {
            v23 += 5;
            if (!--v24)
              goto LABEL_5;
          }
          v25 = *(__int16 *)(v18 + 12 * v15 + 4);
          v26 = (_QWORD *)(v21 + 56);
          while ((ValueMetadata *)*(v26 - 3) != &type metadata for ParticleSpawnState)
          {
            v26 += 5;
            if (!--v22)
              goto LABEL_5;
          }
          if (*(uint64_t *)(*(_QWORD *)(v20 + 128) + *v26 + (v25 << 7) + 80) > 0)
            ++v12;
        }
      }
    }
LABEL_5:
    ;
  }
  if (v12 < 1)
    return sub_1B2046440(a3);
  v305 = v12;
  v27 = 144 * v12;
  swift_retain();
  v28 = (void *)sub_1B1D22DA8(0, v27);
  v343 = v29;
  v334 = v30;
  swift_unknownObjectRetain();
  swift_release();
  v31 = &selRef_setWeights_;
  v344 = v28;
  v32 = objc_msgSend(v28, sel_storageMode);
  v33 = 0;
  if (v32 != (id)2)
  {
    v34 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v35 = v344;
    v33 = &v34[v343];
  }
  v345 = v33;
  swift_bridgeObjectRetain();
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = xmmword_1B2244E20;
  v44 = xmmword_1B2244D90;
  v45 = xmmword_1B2244DD0;
  v46 = xmmword_1B2244DB0;
  v47 = a6;
  v348 = (uint64_t *)a3;
  do
  {
    v49 = (int *)(v11 + 8 * v42);
    v50 = v49[1];
    v51 = *v49;
    if (((_DWORD)v51 != -1 || v50 != 0) && (v51 & 0x80000000) == 0)
    {
      v53 = v10[1];
      if (v53 > v51)
      {
        v54 = *v10;
        v55 = *v10 + 12 * (int)v51;
        if (v50 == -1 || *(_DWORD *)(v55 + 8) == v50)
        {
          v57 = *(_QWORD *)(*(_QWORD *)(v47 + 136) + 8 * *(int *)(v54 + 12 * (int)v51) + 32);
          v58 = *(_QWORD *)(v57 + 48);
          v59 = *(_QWORD *)(v58 + 16);
          if (v59)
          {
            v60 = *(__int16 *)(v55 + 4);
            v61 = (_QWORD *)(v58 + 56);
            v62 = v61;
            v63 = v59;
            while ((ValueMetadata *)*(v62 - 3) != &type metadata for ParticleSubSpawn.State)
            {
              v62 += 5;
              if (!--v63)
                goto LABEL_32;
            }
            v64 = *(_QWORD *)(v57 + 128);
            v65 = (uint64_t *)(v64 + *v62 + (v60 << 6));
            v330 = *v65;
            v325 = v65[1];
            v332 = v65[2];
            v66 = v65[4];
            v341 = v65[3];
            v67 = v61;
            v68 = v59;
            while ((ValueMetadata *)*(v67 - 3) != &type metadata for ParticleSubSpawn)
            {
              v67 += 5;
              if (!--v68)
                goto LABEL_32;
            }
            v323 = v66;
            v69 = (int *)(v64 + *v67 + 24 * (int)v60);
            v70 = v69[1];
            v71 = *v69;
            v72 = *v69;
            v312 = *((unsigned __int8 *)v69 + 12);
            v73 = *((_BYTE *)v69 + 13);
            v315 = *((_BYTE *)v69 + 14);
            v318 = *((_BYTE *)v69 + 15);
            v74 = v69[4];
            while ((ValueMetadata *)*(v61 - 3) != &type metadata for ParticleSpawnState)
            {
              v61 += 5;
              if (!--v59)
                goto LABEL_31;
            }
            v75 = v64 + *v61 + (v60 << 7);
            if (*(uint64_t *)(v75 + 80) <= 0)
            {
LABEL_31:
              v31 = &selRef_setWeights_;
              goto LABEL_32;
            }
            v310 = v41;
            v346 = v36;
            v338 = v37;
            v335 = v38;
            v297 = v40;
            v299 = v39;
            v306 = v44;
            v308 = v43;
            v301 = v46;
            v303 = v45;
            v295 = *(_QWORD *)(v75 + 72);
            v293 = *(_OWORD *)(v75 + 88);
            v292 = *((unsigned __int8 *)v69 + 20);
            if ((_DWORD)v72 == -1 && !(_DWORD)v70 || (v71 & 0x80000000) != 0)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v97 = v325;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v80 = v330;
              v98 = (float32x4_t)v301;
              v99 = (float32x4_t)v303;
              v100 = (float32x4_t)v306;
              v101 = v308;
              v79 = v310;
              v31 = &selRef_setWeights_;
            }
            else
            {
              if (v53 <= v71)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v76 = *(_DWORD *)(v54 + 12 * (int)v71 + 8);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((_DWORD)v70 == -1 || v76 == (_DWORD)v70)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_1B1FE7404(a1, a6, a6, (uint64_t)a1, (uint64_t)v352);
                  v287 = (float32x4_t)v352[0];
                  v284 = (float32x4_t)v352[1];
                  v281 = (float32x4_t)v352[2];
                  v280 = (float32x4_t)v352[3];
                  v290 = v353;
                  swift_release();
                  sub_1B20480A0((uint64_t)v352, (uint64_t)v360);
                  if ((v360[65] & 1) != 0)
                    goto LABEL_208;
                  swift_retain();
                  sub_1B1FE7590((_QWORD *)(v72 | (v70 << 32)), a6, a6, v72 | (v70 << 32), (uint64_t)v354);
                  v77 = (float32x2_t)v354[0];
                  v276 = v354[1];
                  v277 = v355;
                  v278 = v356;
                  v279 = v357;
                  v78 = v358;
                  swift_release();
                  sub_1B20480A0((uint64_t)v354, (uint64_t)v359);
                  if ((v359[65] & 1) != 0)
                  {
LABEL_208:
                    sub_1B2229430();
                    sub_1B2228890();
                    sub_1B1BC3C70();
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2228890();
                    result = sub_1B2229688();
                    __break(1u);
                    return result;
                  }
                  v79 = v310;
                  v80 = v330;
                  v81 = v318;
                  v82 = v315;
                  v83 = v312;
                  if ((v290 & 1) != 0)
                  {
                    if ((v78 & 1) != 0)
                    {
                      v98 = (float32x4_t)v301;
                      v99 = (float32x4_t)v303;
                      v100 = (float32x4_t)v306;
                      v101 = v308;
                      goto LABEL_138;
                    }
                    v90 = v77;
                    v89 = v276;
                    v91 = v277.i64[1];
                    v92 = v277.i64[0];
                    v93 = v278.i64[1];
                    v94 = v278.i64[0];
                    v95 = v279.i64[1];
                    v96 = v279.i64[0];
                  }
                  else if ((v78 & 1) != 0)
                  {
                    v89 = v287.i64[1];
                    v90 = *(float32x2_t *)v287.f32;
                    v91 = v284.i64[1];
                    v92 = v284.i64[0];
                    v93 = v281.i64[1];
                    v94 = v281.i64[0];
                    v95 = v280.i64[1];
                    v96 = v280.i64[0];
                  }
                  else
                  {
                    *(float32x2_t *)v84.f32 = v77;
                    v84.i64[1] = v276;
                    v85 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v77.f32[0]), v284, v77, 1), v281, v84, 2), v280, v84, 3);
                    v86 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v277.f32[0]), v284, *(float32x2_t *)v277.f32, 1), v281, v277, 2), v280, v277, 3);
                    v87 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v278.f32[0]), v284, *(float32x2_t *)v278.f32, 1), v281, v278, 2), v280, v278, 3);
                    v88 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v279.f32[0]), v284, *(float32x2_t *)v279.f32, 1), v281, v279, 2), v280, v279, 3);
                    v89 = v85.i64[1];
                    v90 = *(float32x2_t *)v85.f32;
                    v91 = v86.i64[1];
                    v92 = v86.i64[0];
                    v93 = v87.i64[1];
                    v94 = v87.i64[0];
                    v95 = v88.i64[1];
                    v96 = v88.i64[0];
                  }
                  *(float32x2_t *)v98.f32 = v90;
                  v98.i64[1] = v89;
                  v99.i64[0] = v92;
                  v99.i64[1] = v91;
                  v100.i64[0] = v94;
                  v100.i64[1] = v93;
                  *(_QWORD *)&v101 = v96;
                  *((_QWORD *)&v101 + 1) = v95;
LABEL_138:
                  v31 = &selRef_setWeights_;
                  v97 = v325;
LABEL_73:
                  v102 = *(_QWORD *)(v80 + 16);
                  v103 = &v345[144 * v79];
                  *((_DWORD *)v103 + 20) = v74;
                  v104 = (int *)(v103 + 80);
                  if (v341)
                    v105 = v83;
                  else
                    v105 = 0;
                  v106 = v105 == 1 && *(_QWORD *)(v341 + 16) != 0;
                  v316 = v99;
                  v319 = v98;
                  v313 = v102;
                  v289 = (float32x4_t)v101;
                  v291 = v100;
                  v288 = v106;
                  v285 = (float32x4_t *)&v345[144 * v79];
                  v286 = v104;
                  if (v332)
                  {
                    v107 = *(_QWORD *)(v332 + 16) != 0;
                    if ((v82 & 1) != 0 && v97)
                    {
LABEL_82:
                      v283 = v107;
                      v282 = *(_QWORD *)(v97 + 16) != 0;
                      if ((v81 & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        goto LABEL_96;
                      }
LABEL_91:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v323)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v112 = *(_QWORD *)(v323 + 16);
                        swift_bridgeObjectRelease();
                        v17 = v112 == 0;
                        v31 = &selRef_setWeights_;
                        v109 = !v17;
LABEL_97:
                        v108 = v283;
                        v111 = v283;
                        v110 = v282;
                        if ((v73 & 1) != 0)
                          goto LABEL_99;
                        goto LABEL_98;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_96:
                      swift_bridgeObjectRelease();
                      v109 = 0;
                      goto LABEL_97;
                    }
                  }
                  else
                  {
                    if ((v82 & 1) == 0)
                    {
                      if ((v81 & 1) != 0)
                      {
                        v282 = 0;
                        v283 = 0;
                        goto LABEL_91;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v109 = 0;
                      v110 = 0;
                      v108 = 0;
                      v111 = 0;
                      goto LABEL_131;
                    }
                    v107 = 0;
                    if (v97)
                      goto LABEL_82;
                  }
                  v283 = v107;
                  if ((v81 & 1) != 0)
                  {
                    v282 = 0;
                    goto LABEL_91;
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v108 = v283;
                  v109 = 0;
                  v110 = 0;
                  v111 = v283;
LABEL_131:
                  if ((v73 & 1) != 0)
                  {
LABEL_99:
                    v113 = (int32x4_t)vmulq_f32(v319, v319);
                    v114 = vmulq_f32(v316, v316);
                    v115 = (int32x4_t)vmulq_f32(v291, v291);
                    v116 = vzip2q_s32(v113, v115);
                    v117 = (float32x4_t)vzip1q_s32(vzip1q_s32(v113, v115), (int32x4_t)v114);
                    v118 = (float32x4_t)vtrn2q_s32(v113, (int32x4_t)v114);
                    v118.i32[2] = v115.i32[1];
                    v119 = vaddq_f32((float32x4_t)vzip1q_s32(v116, vdupq_laneq_s32((int32x4_t)v114, 2)), vaddq_f32(v117, v118));
                    v114.i64[0] = 0x80000000800000;
                    v114.i64[1] = 0x80000000800000;
                    v120 = vcgeq_f32(v114, v119);
                    v119.i32[3] = 0;
                    v121 = vrsqrteq_f32(v119);
                    v122 = vmulq_f32(v121, vrsqrtsq_f32(v119, vmulq_f32(v121, v121)));
                    v123 = v120;
                    v123.i32[3] = 0;
                    v124 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v123), (int8x16_t)v119, (int8x16_t)vmulq_f32(v122, vrsqrtsq_f32(v119, vmulq_f32(v122, v122))));
                    v125 = vmulq_n_f32(v319, v124.f32[0]);
                    v126 = vmulq_lane_f32(v316, *(float32x2_t *)v124.f32, 1);
                    v127 = vmulq_laneq_f32(v291, v124, 2);
                    v128 = (int8x16_t)vuzp1q_s32((int32x4_t)v127, (int32x4_t)v127);
                    v129 = (int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126);
                    v130 = (int32x4_t)v125;
                    v47 = a6;
                    if (v120.i32[0])
                    {
                      v131 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v128, (int8x16_t)v127, 0xCuLL), vnegq_f32(v126)), v127, (float32x4_t)vextq_s8(v129, (int8x16_t)v126, 0xCuLL));
                      v130 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), v131, 0xCuLL);
                    }
                    v132 = (int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125);
                    v133 = v126;
                    v44 = v306;
                    v46 = v301;
                    v45 = v303;
                    if (v120.i32[1])
                    {
                      v134 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v132, (int8x16_t)v125, 0xCuLL), vnegq_f32(v127)), v125, (float32x4_t)vextq_s8(v128, (int8x16_t)v127, 0xCuLL));
                      v133 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v134, (int32x4_t)v134), v134, 0xCuLL);
                    }
                    if (v120.i32[2])
                    {
                      v135 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v129, (int8x16_t)v126, 0xCuLL), vnegq_f32(v125)), v126, (float32x4_t)vextq_s8(v132, (int8x16_t)v125, 0xCuLL));
                      v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), v135, 0xCuLL);
                    }
                    v136 = (float)(*(float *)v130.i32 + v133.f32[1]) + v127.f32[2];
                    v43 = v308;
                    if (v136 > 0.0)
                    {
                      v137 = sqrtf(v136 + 1.0);
                      v138 = (float32x4_t)vzip2q_s32((int32x4_t)v133, vuzp1q_s32((int32x4_t)v133, (int32x4_t)v127));
                      v138.i32[2] = v130.i32[1];
                      v139 = (float32x4_t)vtrn2q_s32((int32x4_t)v127, vzip2q_s32((int32x4_t)v127, v130));
                      v139.i32[2] = v133.i32[0];
                      v141 = vsubq_f32(v138, v139);
                      v138.f32[3] = v137;
                      v139.f32[3] = v137;
                      v140 = vmulq_f32(v138, v139);
                      v141.i32[3] = v140.i32[3];
LABEL_107:
                      v140.f32[0] = 0.5 / v137;
                      v142 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 0);
LABEL_116:
                      *v285 = v319;
                      v285[1] = v316;
                      v285[2] = v291;
                      v285[3] = v289;
                      v153 = &v345[144 * v310];
                      *((float32x4_t *)v153 + 4) = vmulq_f32(v141, v142);
                      *v286 = v74;
                      v153[84] = v288;
                      v153[85] = v111;
                      v153[86] = v108;
                      v153[87] = v110;
                      v153[88] = v109;
                      *((_DWORD *)v153 + 28) = v313;
                      *((_DWORD *)v153 + 29) = v297;
                      v40 = v313 + v297;
                      v153[89] = v292 == 2;
                      if (v288)
                        v154 = v313;
                      else
                        v154 = 0;
                      *((_DWORD *)v153 + 30) = v299;
                      *((_DWORD *)v153 + 31) = v335;
                      v39 = v154 + v299;
                      if (v111)
                        v155 = v313;
                      else
                        v155 = 0;
                      v38 = v155 + v335;
                      *((_OWORD *)v153 + 6) = v293;
                      if (v110)
                        v156 = v313;
                      else
                        v156 = 0;
                      *((_DWORD *)v153 + 32) = v338;
                      *((_DWORD *)v153 + 33) = v346;
                      v37 = v156 + v338;
                      if (v109)
                        v157 = v313;
                      else
                        v157 = 0;
                      v36 = v157 + v346;
                      v41 = v310 + 1;
                      *((_DWORD *)v153 + 34) = v295;
                      goto LABEL_32;
                    }
                    if (*(float *)v130.i32 < v133.f32[1] || *(float *)v130.i32 < v127.f32[2])
                    {
                      if (v133.f32[1] <= v127.f32[2])
                      {
                        v137 = sqrtf((float)((float)(v127.f32[2] + 1.0) - *(float *)v130.i32) - v133.f32[1]);
                        v158 = (float32x2_t)vzip2q_s32(v130, (int32x4_t)v133).u64[0];
                        v159 = (float32x2_t)__PAIR64__(v130.u32[1], LODWORD(v137));
                        v160 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 0);
                        *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)v130.i8, v160);
                        v160.f32[0] = v137;
                        v160.i32[0] = vmul_f32(v159, v160).u32[0];
                        v160.i32[1] = v140.i32[1];
                        *(float32x2_t *)v141.f32 = vadd_f32(v158, *(float32x2_t *)v127.f32);
                        *(float32x2_t *)&v141.u32[2] = v160;
                        goto LABEL_107;
                      }
                      v144 = sqrtf((float)((float)(v133.f32[1] + 1.0) - *(float *)v130.i32) - v127.f32[2]);
                      v145 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.i8, 1), v133);
                      *(int32x2_t *)v133.f32 = vdup_laneq_s32((int32x4_t)v133, 2);
                      v146 = vadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v127.f32);
                      v133.f32[0] = v144;
                      v133.i32[0] = vmul_f32(*(float32x2_t *)v133.f32, (float32x2_t)__PAIR64__(v127.u32[1], LODWORD(v144))).u32[0];
                      v133.i32[1] = v146.i32[1];
                      v152 = (int32x2_t)vsubq_f32(v127, (float32x4_t)vdupq_laneq_s32(v130, 2)).u64[0];
                      v142 = (float32x4_t)vextq_s8(vextq_s8(v145, v145, 4uLL), (int8x16_t)v133, 0xCuLL);
                      v142.i32[3] = v152.i32[0];
                      *(float *)v152.i32 = 0.5 / v144;
                    }
                    else
                    {
                      v147 = sqrtf((float)((float)(*(float *)v130.i32 + 1.0) - v133.f32[1]) - v127.f32[2]);
                      v148 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 0);
                      v149 = vadd_f32(*(float32x2_t *)v130.i8, v148);
                      v148.f32[0] = v147;
                      v142.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v130.u32[1], LODWORD(v147)), v148).u32[0];
                      v142.i32[1] = v149.i32[1];
                      v150 = (float32x2_t)vzip2q_s32(v130, (int32x4_t)v133).u64[0];
                      LODWORD(v151) = vadd_f32(v150, *(float32x2_t *)v127.f32).u32[0];
                      v152 = (int32x2_t)vsub_f32(v150, *(float32x2_t *)v127.f32);
                      HIDWORD(v151) = v152.i32[1];
                      v142.i64[1] = v151;
                      *(float *)v152.i32 = 0.5 / v147;
                    }
                    v141 = (float32x4_t)vdupq_lane_s32(v152, 0);
                    goto LABEL_116;
                  }
LABEL_98:
                  v111 = v108;
                  LOBYTE(v108) = 0;
                  goto LABEL_99;
                }
              }
              swift_bridgeObjectRetain();
              v97 = v325;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v80 = v330;
              v98 = (float32x4_t)v301;
              v99 = (float32x4_t)v303;
              v100 = (float32x4_t)v306;
              v101 = v308;
              v31 = &selRef_setWeights_;
              v79 = v310;
            }
            v81 = v318;
            v82 = v315;
            v83 = v312;
            goto LABEL_73;
          }
        }
      }
    }
LABEL_32:
    ++v42;
  }
  while (v42 != v8);
  v161 = v39;
  v336 = v38;
  v339 = v37;
  v347 = v36;
  v162 = v40;
  sub_1B1B28C6C((uint64_t)&v351);
  swift_retain();
  v163 = (void *)sub_1B1D22DA8(0, 16 * v162);
  v342 = v164;
  v331 = v165;
  v166 = objc_msgSend((id)swift_unknownObjectRetain(), v31[158]);
  v167 = 0;
  if (v166 != (id)2)
  {
    v168 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v169 = v163;
    v167 = &v168[v342];
  }
  v304 = v167;
  v333 = (uint64_t)v163;
  v170 = (void *)sub_1B1D22DA8(0, 16 * v161);
  v172 = v171;
  v327 = v173;
  v174 = objc_msgSend((id)swift_unknownObjectRetain(), (SEL)v31 + 2888);
  v175 = 0;
  if (v174 != (id)2)
  {
    v176 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v177 = v170;
    v175 = &v176[v172];
  }
  v300 = v175;
  v328 = v172;
  v329 = (uint64_t)v170;
  v178 = (void *)sub_1B1D22DA8(0, 16 * v336);
  v180 = v179;
  v324 = v181;
  v182 = objc_msgSend((id)swift_unknownObjectRetain(), (SEL)v31 + 2888);
  v183 = 0;
  if (v182 != (id)2)
  {
    v184 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v185 = v178;
    v183 = &v184[v180];
  }
  v298 = v183;
  v337 = (uint64_t)v178;
  v186 = (void *)sub_1B1D22DA8(0, 16 * v339);
  v340 = v187;
  v320 = v188;
  v189 = objc_msgSend((id)swift_unknownObjectRetain(), (SEL)v31 + 2888);
  v190 = 0;
  if (v189 != (id)2)
  {
    v191 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v192 = v186;
    v190 = &v191[v340];
  }
  v296 = v190;
  v322 = (uint64_t)v186;
  v193 = (void *)sub_1B1D22DA8(0, 16 * v347);
  v195 = v194;
  v314 = v196;
  v197 = objc_msgSend((id)swift_unknownObjectRetain(), (SEL)v31 + 2888);
  v198 = 0;
  if (v197 != (id)2)
  {
    v199 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v200 = v193;
    v198 = &v199[v195];
  }
  v294 = v198;
  v311 = v195;
  v317 = (uint64_t)v193;
  v326 = v180;
  v201 = (void *)sub_1B1D22DA8(0, 4 * v348[14]);
  v203 = v202;
  v309 = v204;
  v205 = objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  v206 = 0;
  v207 = v345;
  if (v205 != (id)2)
  {
    v208 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v209 = v201;
    v206 = &v208[v203];
  }
  v302 = v206;
  v307 = v203;
  swift_bridgeObjectRetain();
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v213 = a6;
  do
  {
    v214 = (int *)(v11 + 8 * v212);
    v215 = v214[1];
    v216 = *v214;
    v217 = (_DWORD)v216 == -1 && v215 == 0;
    if (!v217 && (v216 & 0x80000000) == 0 && v10[1] > v216)
    {
      v218 = *v10 + 12 * (int)v216;
      if (v215 == -1 || *(_DWORD *)(v218 + 8) == v215)
      {
        v220 = *(_QWORD *)(*(_QWORD *)(v213 + 136) + 8 * *(int *)(*v10 + 12 * (int)v216) + 32);
        v221 = *(_QWORD *)(v220 + 48);
        v222 = *(_QWORD *)(v221 + 16);
        if (v222)
        {
          v223 = *(__int16 *)(v218 + 4);
          v224 = (_QWORD *)(v221 + 56);
          v225 = (_QWORD *)(v221 + 56);
          v226 = *(_QWORD *)(v221 + 16);
          while ((ValueMetadata *)*(v225 - 3) != &type metadata for ParticleSubSpawn.State)
          {
            v225 += 5;
            if (!--v226)
              goto LABEL_153;
          }
          v227 = *(_QWORD *)(v220 + 128);
          v228 = (uint64_t *)(v227 + *v225 + (v223 << 6));
          v230 = *v228;
          v229 = v228[1];
          v231 = v228[2];
          v232 = v228[3];
          v233 = v228[4];
          v234 = v228[7];
          while ((ValueMetadata *)*(v224 - 3) != &type metadata for ParticleSpawnState)
          {
            v224 += 5;
            if (!--v222)
              goto LABEL_153;
          }
          if (*(uint64_t *)(v227 + *v224 + (v223 << 7) + 80) > 0)
          {
            v235 = *(_QWORD *)(v230 + 16);
            v236 = (int *)&v207[144 * v211];
            v237 = v236[30];
            v238 = v236[31];
            v240 = v236[32];
            v239 = v236[33];
            if (v235)
            {
              v241 = (__int128 *)(v230 + 32);
              v242 = &v304[16 * *(int *)&v207[144 * v211 + 116]];
              v243 = v235;
              do
              {
                v244 = *v241++;
                *(_OWORD *)v242 = v244;
                v242 += 16;
                --v243;
              }
              while (v243);
            }
            if (v232 && v235 && v207[144 * v211 + 84])
            {
              v245 = (__int128 *)(v232 + 32);
              v246 = &v300[16 * v237];
              v247 = v235;
              do
              {
                v248 = *v245++;
                *(_OWORD *)v246 = v248;
                v246 += 16;
                --v247;
              }
              while (v247);
            }
            if (v231 && v235 && *(_QWORD *)(v231 + 16))
            {
              v249 = (__int128 *)(v231 + 32);
              v250 = &v298[16 * v238];
              v251 = v235;
              do
              {
                v252 = *v249++;
                *(_OWORD *)v250 = v252;
                v250 += 16;
                --v251;
              }
              while (v251);
            }
            if (v229 && v235 && v207[144 * v211 + 87])
            {
              v253 = (__int128 *)(v229 + 32);
              v254 = &v296[16 * v240];
              v255 = v235;
              do
              {
                v256 = *v253++;
                *(_OWORD *)v254 = v256;
                v254 += 16;
                --v255;
              }
              while (v255);
            }
            if (v233 && v235 && v207[144 * v211 + 88])
            {
              v257 = (__int128 *)(v233 + 32);
              v258 = &v294[16 * v239];
              do
              {
                v259 = *v257++;
                *(_OWORD *)v258 = v259;
                v258 += 16;
                --v235;
              }
              while (v235);
            }
            v260 = *(_QWORD *)(v234 + 16);
            if (v260)
            {
              v261 = v201;
              v262 = v211;
              memcpy(&v302[4 * v210], (const void *)(v234 + 32), 4 * v260);
              v211 = v262;
              v201 = v261;
              v213 = a6;
              v210 += v260;
            }
            ++v211;
            v207 = v345;
          }
        }
      }
    }
LABEL_153:
    ++v212;
  }
  while (v212 != v8);
  sub_1B1B28C6C((uint64_t)&v351);
  swift_retain();
  v263 = (void *)sub_1B1D22DA8(0, 8);
  v265 = v264;
  v267 = v266;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v350[0] = 0;
    v350[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v268 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v350[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v268, v350, 0xD000000000000048, 0x80000001B2348840);
    swift_release();
    swift_release();
  }
  else
  {
    v269 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v270 = v263;
    v271 = &v269[v265];
    *(float *)v271 = a4;
    *((_DWORD *)v271 + 1) = v305;
  }
  swift_release();
  v272 = v348[45];
  v273 = v348[46] + 108;
  swift_unknownObjectRetain();
  v274 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v275 = (void *)sub_1B2228728();
  objc_msgSend(v274, sel_pushDebugGroup_, v275);

  sub_1B2044590((uint64_t)v274, v348, v333, v342, v331, v329, v328, v327, v337, v326, v324, v322, v340, v320, v317, v311, v314, (uint64_t)v344, v343,
    v334,
    (uint64_t)v201,
    v307,
    v309,
    (uint64_t)v263,
    v265,
    v267,
    v272,
    v273);
  objc_msgSend(v274, sel_popDebugGroup);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2047BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64x2_t v25;
  int16x8_t v26;
  _QWORD v27[5];
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  __int16 v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39[5];
  char v40;
  unsigned __int32 v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  __int16 v49;
  char v50;
  char v51;
  int v52;

  if (!*(_QWORD *)(a1 + 512))
    sub_1B2042620(a2, 0);
  *(_QWORD *)(a1 + 448) = 1 - *(_QWORD *)(a1 + 448);
  v10 = *(_QWORD *)(a1 + 464) + *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 464) = v10;
  v11 = swift_retain();
  result = sub_1B1C357CC(v11);
  v13 = *(_QWORD *)(a1 + 384);
  if (v13 < v10)
  {
    v14 = result;
    sub_1B1D1568C(*(_QWORD *)(a4 + 32));
    sub_1B2045664(v14, (_QWORD *)a1, v10, a2);
    result = swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(a1 + 384);
  }
  if (v13 >= 1)
  {
    sub_1B2045F68((_QWORD *)a1, a2, a5);
    v15 = *(_QWORD **)(a4 + 32);
    v16.n128_f64[0] = sub_1B1E52BDC();
    sub_1B204623C(a1, a2, a3, (uint64_t)v15, v16, v17, v18, v19);
    v20 = *(_QWORD *)(a1 + 360);
    v21 = *(_QWORD *)(a1 + 368) + 96;
    swift_unknownObjectRetain();
    v22 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
    v23 = (void *)sub_1B2228728();
    objc_msgSend(v22, sel_pushDebugGroup_, v23);

    sub_1B2043F30((uint64_t)v22, a1, v20, v21);
    objc_msgSend(v22, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (*(_BYTE *)(a1 + 50) == 1)
    {
      result = sub_1B1D154D4((uint64_t)v15, (uint64_t)v27);
      v24 = v27[0];
      if (v27[0])
      {
        v39[0] = v27[0];
        v39[1] = v27[1];
        v39[2] = v27[2];
        v39[3] = v27[3];
        v39[4] = v27[4];
        v40 = v28 & 1;
        v25 = (uint64x2_t)vdupq_n_s64(v28);
        v26 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v25, (uint64x2_t)xmmword_1B2295450), (int32x4_t)vshlq_u64(v25, (uint64x2_t)xmmword_1B2295440));
        *(int8x8_t *)v26.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v26), (int8x8_t)0x1000100010001);
        v41 = vmovn_s16(v26).u32[0];
        v42 = BYTE5(v28) & 1;
        v43 = v29;
        v44 = v30 & 1;
        v45 = v31 & 1;
        v46 = v32 & 1;
        v47 = v33;
        v48 = v34 & 1;
        v49 = v35;
        v50 = v36 & 1;
        v51 = v37 & 1;
        v52 = v38;
        sub_1B204650C(v15, v39, a1, a5, a2, a3);
        return sub_1B1A027DC(v24);
      }
    }
    else
    {
      return sub_1B2046440(a1);
    }
  }
  return result;
}

uint64_t sub_1B2047F08(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (*(uint64_t *)(result + 384) >= 1)
  {
    v1 = (uint64_t *)result;
    v2 = swift_retain();
    v3 = sub_1B1C357CC(v2);
    result = sub_1B20451F4(v3, v1);
    if ((result & 1) != 0)
    {
      v4 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
      v5 = (void *)sub_1B2228728();
      objc_msgSend(v4, sel_pushDebugGroup_, v5);

      sub_1B2045374((uint64_t)v4, (uint64_t)v1);
      objc_msgSend(v4, sel_popDebugGroup);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B2047FE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    swift_retain();
    sub_1B1E5267C();
    v5 = v4;
    v6 = a1[4];
    swift_retain();
    swift_retain();
    sub_1B1BEE528((uint64_t)a1);
    sub_1B1FEA108(v6, v2, v3, v2, (uint64_t)a1, v5);
    sub_1B1B4F21C((uint64_t)a1);
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1B20480A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1EEF61D08, (void (*)(uint64_t))sub_1B1C39138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B20480F4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B2048120(int a1)
{
  uint64_t v1;

  return sub_1B2044F5C(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1B2048130()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B2048154()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B2048178()
{
  uint64_t v0;

  return sub_1B2045114(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_1B2048188()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1B20481AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (*v0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
    v3 = *(_QWORD *)(v1 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v0[1] = v3;
    v4 = sub_1B19F435C(v2, (__n128)xmmword_1B2244DB0, (__n128)xmmword_1B2244DD0, (__n128)xmmword_1B2244D90, (__n128)xmmword_1B2244E20);
    swift_bridgeObjectRelease();
    v0[2] = v4;
    v5 = sub_1B19F435C(v2, (__n128)xmmword_1B2244DB0, (__n128)xmmword_1B2244DD0, (__n128)xmmword_1B2244D90, (__n128)xmmword_1B2244E20);
    swift_bridgeObjectRelease();
    v0[3] = v5;
    v6 = sub_1B19F435C(v2, (__n128)xmmword_1B2244DB0, (__n128)xmmword_1B2244DD0, (__n128)xmmword_1B2244D90, (__n128)xmmword_1B2244E20);
    swift_release();
    swift_bridgeObjectRelease();
    v0[4] = v6;
  }
}

uint64_t sub_1B20482A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  simd_float4x4 v11;
  unint64_t v12;
  unint64_t v13;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4 v18;
  uint64_t v19;
  simd_float4x4 v20;

  v1 = v0;
  swift_retain();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B204A41C(v2, v0);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v0 + 40) = v3;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202B090(0, v5, 0);
    v7 = 0;
    v6 = v19;
    v8 = *(_QWORD *)(v19 + 16);
    v9 = v8 << 6;
    v10 = v4 + 80;
    do
    {
      v11 = *(simd_float4x4 *)(v10 + v7 - 48);
      v12 = *(_QWORD *)(v19 + 24);
      v13 = v8 + 1;
      if (v8 >= v12 >> 1)
      {
        v17 = *(simd_float4 *)(v10 + v7 - 32);
        v18 = *(simd_float4 *)(v10 + v7 - 48);
        v15 = *(simd_float4 *)(v10 + v7);
        v16 = *(simd_float4 *)(v10 + v7 - 16);
        sub_1B202B090(v12 > 1, v8 + 1, 1);
        v11.columns[3] = v15;
        v11.columns[2] = v16;
        v11.columns[1] = v17;
        v11.columns[0] = v18;
      }
      v20 = __invert_f4(v11);
      *(_QWORD *)(v19 + 16) = v13;
      *(simd_float4x4 *)(v19 + v9 + v7 + 32) = v20;
      v7 += 64;
      v8 = v13;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v1 + 48) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20483F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SkeletonData()
{
  return objc_opt_self();
}

void sub_1B204845C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = 0;
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
  a1[4] = v1;
}

void sub_1B2048474(float32x4_t *a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v12;
  unint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v8 = *(_QWORD *)(a6 + 16);
  v9 = *(_QWORD *)(a5 + 16);
  v10 = v8 / v9;
  v12 = a2;
  v13 = v9 - 1;
  v14 = (float *)(a5 + 32);
  v15 = *(float *)(a5 + 32 + 4 * (v9 - 1));
  LODWORD(a2) = 0;
  if (v15 > 0.0)
  {
    v16 = v12;
    *(float *)&a2 = fmodf(v16, v15);
  }
  v17 = *v14;
  if (*(float *)&a2 < *v14)
  {
    v18 = 0;
    v19 = 0;
    if (v9 > v8)
      return;
    goto LABEL_15;
  }
  if (v9 == 1)
  {
LABEL_10:
    if (v9 <= v8)
    {
      v21 = (float32x4_t *)(a6 + 16 * v10 * v13 + 32);
      do
      {
        v22 = *v21++;
        *a1++ = v22;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v20 = 0;
    while (1)
    {
      v17 = *(float *)(a5 + 36 + 4 * v20);
      if (*(float *)&a2 < v17)
        break;
      if (v13 == ++v20)
        goto LABEL_10;
    }
    v18 = v20 & ~(v20 >> 63);
    v19 = v20 + 1;
    if (v9 <= v8)
    {
LABEL_15:
      v23 = 0;
      *(float *)&a2 = fminf(fmaxf((float)(*(float *)&a2 - v14[v18]) / (float)(v17 - v14[v18]), 0.0), 1.0);
      v24 = v18 * v10;
      v25 = v19 * v10;
      v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
      do
      {
        v27 = vmlaq_f32(*(float32x4_t *)(a6 + 32 + 16 * (v23 + v24)), v26, vsubq_f32(*(float32x4_t *)(a6 + 32 + 16 * (v23 + v25)), *(float32x4_t *)(a6 + 32 + 16 * (v23 + v24))));
        v27.i32[3] = a3.n128_i32[3];
        ++v23;
        *a1++ = v27;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_1B20485D0(_OWORD *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v7 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(a4 + 16);
  v9 = v7 / v8;
  v12 = v8 - 1;
  v13 = (float *)(a4 + 32);
  v14 = *(float *)(a4 + 32 + 4 * (v8 - 1));
  v15 = 0.0;
  if (v14 > 0.0)
  {
    v16 = a2;
    v15 = fmodf(v16, v14);
  }
  v17 = *v13;
  if (v15 < *v13)
  {
    v18 = 0;
    v19 = 0;
    v20 = *v13;
    if (v8 > v7)
      return;
    goto LABEL_15;
  }
  if (v8 == 1)
  {
LABEL_10:
    if (v8 <= v7)
    {
      v22 = (__int128 *)(a5 + 16 * v9 * v12 + 32);
      do
      {
        v23 = *v22++;
        *a1++ = v23;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v21 = 0;
    while (1)
    {
      v17 = *(float *)(a4 + 36 + 4 * v21);
      if (v15 < v17)
        break;
      if (v12 == ++v21)
        goto LABEL_10;
    }
    v18 = v21 & ~(v21 >> 63);
    v20 = v13[v18];
    v19 = v21 + 1;
    if (v8 <= v7)
    {
LABEL_15:
      v24 = 0;
      v25 = fminf(fmaxf((float)(v15 - v20) / (float)(v17 - v20), 0.0), 1.0);
      v26 = v18 * v9;
      v27 = v19 * v9;
      v28 = a5 + 32;
      do
      {
        v29 = v24 + 1;
        sub_1B1BE4440(*(float32x4_t *)(v28 + 16 * (v24 + v26)), *(float32x4_t *)(v28 + 16 * (v24 + v27)), v25);
        *a1++ = v30;
        v24 = v29;
        --v9;
      }
      while (v9);
    }
  }
}

uint64_t sub_1B2048730()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SkeletonAnimation()
{
  return objc_opt_self();
}

uint64_t sub_1B20487AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(v2, 1, ObjectType, a2);
}

double sub_1B20487F4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DB0;
  *(_OWORD *)(a1 + 32) = xmmword_1B2244DD0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1B2244D90;
  *(_OWORD *)(a1 + 64) = xmmword_1B2244E20;
  return result;
}

uint64_t sub_1B2048828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B20488F0(uint64_t a1)
{
  uint64_t v1;
  double v2;
  __int128 v3;
  uint64_t *result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v56[8];
  _OWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;
  _BYTE v69[40];
  _OWORD v70[2];
  uint64_t v71;

  v2 = *(double *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  v3 = *(_OWORD *)(v1 + 32);
  v70[0] = *(_OWORD *)(v1 + 16);
  v70[1] = v3;
  v71 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v70, 0x200000000, v56);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v56, (uint64_t)v57, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v57[0])
  {
    v64 = v57[0];
    v65 = v57[1];
    v66 = v58;
    if (v63 >= 1)
    {
      v47 = v60;
      if (v60)
      {
        v46 = v59;
        v5 = v62;
        v54 = *(unsigned __int8 *)(v61 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v53 = v62[4];
        v6 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v44 = v62 + 8;
        v45 = (uint64_t)(v62 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        do
        {
          v8 = (unsigned int *)(v46 + 48 * v7);
          v9 = *v8;
          v48 = v8[1];
          v49 = v7;
          v11 = *((_QWORD *)v8 + 4);
          v10 = *((_QWORD *)v8 + 5);
          v50 = *((_QWORD *)v8 + 3);
          v52 = (uint64_t *)*((_QWORD *)v8 + 2);
          if (v54)
          {
            v12 = *(os_unfair_lock_s **)(v10 + 376);
            swift_retain();
            os_unfair_lock_lock(v12);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v53);
          sub_1B19F66A0(v45, (uint64_t)v69, &qword_1ED4B7FB0);
          v13 = v5[4];
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v13, 48 * v14, 8);
          v5[7] = v14;
          v44[1] = 0;
          v44[2] = 0;
          *v44 = 0;
          swift_release();
          v15 = v50;
          v51 = v10;
          v16 = sub_1B1A12038((uint64_t)&type metadata for SkeletalAnimationPlayer, (uint64_t)&off_1E63ACB18, v52, v15, v11, (uint64_t)v5);
          if (v52)
          {
            if (v11)
            {
              for (i = 0; i != v11; ++i)
              {
                v19 = (int *)(v16 + 16 * i);
                v20 = (uint64_t *)*((_QWORD *)v19 + 1);
                if (v20)
                {
                  v21 = v19[1];
                  v22 = *v19;
                  v23 = (_DWORD)v22 == -1 && v21 == 0;
                  if (v23 || (v22 & 0x80000000) != 0 || v6[1] <= v22)
                    goto LABEL_56;
                  v24 = *v6 + 12 * (int)v22;
                  if (v21 != -1 && *(_DWORD *)(v24 + 8) != v21)
                    goto LABEL_56;
                  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v6 + 12 * (int)v22) + 32);
                  v27 = *(_QWORD *)(v26 + 48);
                  v28 = *(_QWORD *)(v27 + 16);
                  if (!v28)
                    goto LABEL_56;
                  v29 = *(__int16 *)(v24 + 4);
                  v30 = (_QWORD *)(v27 + 56);
                  while ((ValueMetadata *)*(v30 - 3) != &type metadata for Skeleton)
                  {
                    v30 += 5;
                    if (!--v28)
                      goto LABEL_56;
                  }
                  v18 = *(_QWORD *)(v26 + 128) + *v30 + 40 * v29;
                  swift_retain();
                  sub_1B204A628(v18, (uint64_t)v5, v20, v2);
                  swift_release();
                }
              }
            }
          }
          else if ((_DWORD)v9 != (_DWORD)v48)
          {
            do
            {
              v32 = (int *)(v16 + 16 * v9);
              v33 = (uint64_t *)*((_QWORD *)v32 + 1);
              if (v33)
              {
                v34 = v32[1];
                v35 = *v32;
                v36 = (_DWORD)v35 == -1 && v34 == 0;
                if (v36
                  || (v35 & 0x80000000) != 0
                  || v6[1] <= v35
                  || ((v37 = *v6 + 12 * (int)v35, v34 != -1) ? (v38 = *(_DWORD *)(v37 + 8) == v34) : (v38 = 1),
                      !v38
                   || (v39 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v6 + 12 * (int)v35) + 32),
                       v40 = *(_QWORD *)(v39 + 48),
                       (v41 = *(_QWORD *)(v40 + 16)) == 0)))
                {
LABEL_56:
                  swift_retain();
                  sub_1B2229430();
                  sub_1B2228890();
                  sub_1B1BC3C70();
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B2228890();
                  sub_1B2228890();
                  sub_1B2228890();
                  result = (uint64_t *)sub_1B2229688();
                  __break(1u);
                  return result;
                }
                v42 = *(__int16 *)(v37 + 4);
                v43 = (_QWORD *)(v40 + 56);
                while ((ValueMetadata *)*(v43 - 3) != &type metadata for Skeleton)
                {
                  v43 += 5;
                  if (!--v41)
                    goto LABEL_56;
                }
                v31 = *(_QWORD *)(v39 + 128) + *v43 + 40 * v42;
                swift_retain();
                sub_1B204A628(v31, (uint64_t)v5, v33, v2);
                swift_release();
              }
              ++v9;
            }
            while (v9 != v48);
          }
          v67[0] = v64;
          v67[1] = v65;
          v68 = v66;
          sub_1B1F05D48(v5, (unsigned __int16 **)v67, (uint64_t)v69);
          sub_1B1F03804((char *)v51);
          ecs_stack_allocator_pop_snapshot(v53);
          if ((v54 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 376));
          }
          swift_release();
          v7 = v49 + 1;
        }
        while (v49 + 1 != v47);
        sub_1B19ED748(v56);
      }
    }
    return sub_1B19ED748(v56);
  }
  return result;
}

uint64_t type metadata accessor for SkeletonAnimationSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2048F0C(uint64_t a1, uint64_t a2)
{
  return sub_1B2049890(a1, a2, 1, (void (*)(_OWORD *__return_ptr, uint64_t))sub_1B1E3EE0C);
}

const char *sub_1B2048F1C()
{
  return "SkeletonAnimationSystem";
}

uint64_t sub_1B2048F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B2048FFC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  char *v49;
  char *v50;
  char v51;
  char *v52;
  float32x4_t *v53;
  char *v54;
  char v55;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t *v87;
  char *v88;
  char *v89;
  char v90;
  char *v91;
  float32x4_t *v92;
  char *v93;
  char v94;
  float32x4_t *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  __int128 v110;
  float32x4_t v111;
  float32x4_t v112;
  __int128 v113;
  float32x4_t v114;
  float32x4_t v115;
  __int128 v116;
  float32x4_t v117;
  float32x4_t v118;
  __int128 v119;
  float32x4_t v120;
  float32x4_t v121;
  __int128 v122;
  float32x4_t v123;
  float32x4_t v124;
  __int128 v125;
  float32x4_t v126;
  float32x4_t v127;
  __int128 v128;
  float32x4_t v129;
  float32x4_t v130;
  __int128 v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  uint64_t v149[8];
  _OWORD v150[2];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _OWORD v157[2];
  uint64_t v158;
  _BYTE v159[40];
  _OWORD v160[2];
  uint64_t v161;

  v2 = *(_OWORD *)(v1 + 32);
  v160[0] = *(_OWORD *)(v1 + 16);
  v160[1] = v2;
  v161 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v160, 0x200000000, v149);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v149, (uint64_t)v150, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v150[0])
  {
    if (v156 >= 1)
    {
      v99 = v153;
      if (v153)
      {
        v104 = v155[4];
        v103 = *(unsigned __int8 *)(v154 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v157[0] = v150[0];
        v157[1] = v150[1];
        v158 = v151;
        v97 = (uint64_t)(v155 + 6);
        v98 = v152;
        v105 = v155;
        v96 = v155 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v4 = 0;
        v5 = 0;
        do
        {
          v101 = v5;
          v102 = v4;
          v6 = (unsigned int *)(v98 + 48 * v4);
          v7 = *v6;
          v8 = v6[1];
          v10 = (uint64_t *)*((_QWORD *)v6 + 2);
          v9 = *((_QWORD *)v6 + 3);
          v12 = *((_QWORD *)v6 + 4);
          v11 = *((_QWORD *)v6 + 5);
          if (v103)
          {
            v13 = *(os_unfair_lock_s **)(v11 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v104);
          sub_1B19F66A0(v97, (uint64_t)v159, &qword_1ED4B7FB0);
          v14 = v105[4];
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v105[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v105[7] = v15;
          v96[1] = 0;
          v96[2] = 0;
          *v96 = 0;
          swift_release();
          v100 = v11;
          v16 = sub_1B1A12038((uint64_t)&type metadata for Skeleton, (uint64_t)&off_1E63C2C18, v10, v9, v12, (uint64_t)v105);
          v108 = v16;
          if (v10)
          {
            if (v12)
            {
              v17 = 0;
              v107 = v12;
              do
              {
                v18 = *(_QWORD *)(v16 + 40 * v17);
                if (v18)
                {
                  v19 = v16 + 40 * v17;
                  v22 = *(_QWORD *)(v19 + 16);
                  v20 = (char **)(v19 + 16);
                  v21 = v22;
                  v23 = *(_QWORD *)(v22 + 16);
                  if (v23)
                  {
                    v24 = *(_QWORD *)(v16 + 40 * v17 + 8);
                    swift_retain();
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    *v20 = (char *)v21;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      *v20 = sub_1B1FFF0A4(v21);
                    v26 = v16 + 40 * v17;
                    v29 = *(_QWORD *)(v26 + 32);
                    v27 = (char **)(v26 + 32);
                    v28 = v29;
                    v30 = swift_isUniquelyReferenced_nonNull_native();
                    *v27 = (char *)v29;
                    if ((v30 & 1) == 0)
                      *v27 = sub_1B1FFF0A4(v28);
                    v31 = v16 + 40 * v17;
                    v34 = *(_QWORD *)(v31 + 24);
                    v32 = (char **)(v31 + 24);
                    v33 = v34;
                    v35 = swift_isUniquelyReferenced_nonNull_native();
                    *v32 = (char *)v34;
                    if ((v35 & 1) == 0)
                      *v32 = sub_1B1FFF0A4(v33);
                    v36 = 0;
                    v37 = 48;
                    do
                    {
                      v109 = *(float32x4_t *)(v24 + v37 - 16);
                      v137 = *(float32x4_t *)(v24 + v37);
                      v141 = *(float32x4_t *)(v24 + v37 + 16);
                      v145 = *(float32x4_t *)(v24 + v37 + 32);
                      v38 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8 * v36 + 32);
                      v39 = xmmword_1B2244DB0;
                      v40 = xmmword_1B2244DD0;
                      v41 = *v20;
                      v42 = xmmword_1B2244D90;
                      v43 = xmmword_1B2244E20;
                      if (v38 != -1)
                      {
                        v44 = &v41[64 * v38];
                        v39 = *((_OWORD *)v44 + 2);
                        v40 = *((_OWORD *)v44 + 3);
                        v42 = *((_OWORD *)v44 + 4);
                        v43 = *((_OWORD *)v44 + 5);
                      }
                      v115 = (float32x4_t)v43;
                      v121 = (float32x4_t)v42;
                      v127 = (float32x4_t)v40;
                      v133 = (float32x4_t)v39;
                      v45 = swift_isUniquelyReferenced_nonNull_native();
                      *v20 = v41;
                      if ((v45 & 1) == 0)
                      {
                        v41 = sub_1B1FFF0A4((uint64_t)v41);
                        *v20 = v41;
                      }
                      v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v141.f32[0]), v127, *(float32x2_t *)v141.f32, 1), v121, v141, 2), v115, v141, 3);
                      v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v145.f32[0]), v127, *(float32x2_t *)v145.f32, 1), v121, v145, 2), v115, v145, 3);
                      v48 = (float32x4_t *)&v41[v37];
                      v142 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v137.f32[0]), v127, *(float32x2_t *)v137.f32, 1), v121, v137, 2), v115, v137, 3);
                      v146 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v109.f32[0]), v127, *(float32x2_t *)v109.f32, 1), v121, v109, 2), v115, v109, 3);
                      v48[-1] = v146;
                      *v48 = v142;
                      v134 = v47;
                      v138 = v46;
                      v48[1] = v46;
                      v48[2] = v47;
                      v49 = &(*v32)[v37];
                      v122 = *(_OWORD *)v49;
                      v128 = *((_OWORD *)v49 - 1);
                      v110 = *((_OWORD *)v49 + 2);
                      v116 = *((_OWORD *)v49 + 1);
                      v50 = *v27;
                      v51 = swift_isUniquelyReferenced_nonNull_native();
                      *v27 = v50;
                      if ((v51 & 1) == 0)
                      {
                        v50 = sub_1B1FFF0A4((uint64_t)v50);
                        *v27 = v50;
                      }
                      v52 = &v50[v37];
                      *((_OWORD *)v52 - 1) = v128;
                      *(_OWORD *)v52 = v122;
                      *((_OWORD *)v52 + 1) = v116;
                      *((_OWORD *)v52 + 2) = v110;
                      v53 = (float32x4_t *)(*(_QWORD *)(v18 + 48) + v37);
                      v111 = v53[-1];
                      v117 = *v53;
                      v123 = v53[1];
                      v129 = v53[2];
                      v54 = *v32;
                      v55 = swift_isUniquelyReferenced_nonNull_native();
                      *v32 = v54;
                      if ((v55 & 1) == 0)
                      {
                        v54 = sub_1B1FFF0A4((uint64_t)v54);
                        *v32 = v54;
                      }
                      ++v36;
                      v56 = (float32x4_t *)&v54[v37];
                      v56[-1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v111.f32[0]), v142, *(float32x2_t *)v111.f32, 1), v138, v111, 2), v134, v111, 3);
                      *v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v117.f32[0]), v142, *(float32x2_t *)v117.f32, 1), v138, v117, 2), v134, v117, 3);
                      v56[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v123.f32[0]), v142, *(float32x2_t *)v123.f32, 1), v138, v123, 2), v134, v123, 3);
                      v56[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v129.f32[0]), v142, *(float32x2_t *)v129.f32, 1), v138, v129, 2), v134, v129, 3);
                      v37 += 64;
                    }
                    while (v23 != v36);
                    swift_release();
                    v12 = v107;
                    v16 = v108;
                  }
                }
                ++v17;
              }
              while (v17 != v12);
            }
          }
          else if ((_DWORD)v7 != (_DWORD)v8)
          {
            v106 = v8;
            do
            {
              v57 = *(_QWORD *)(v16 + 40 * v7);
              if (v57)
              {
                v58 = v16 + 40 * v7;
                v61 = *(_QWORD *)(v58 + 16);
                v60 = (char **)(v58 + 16);
                v59 = v61;
                v62 = *(_QWORD *)(v61 + 16);
                if (v62)
                {
                  v63 = *(_QWORD *)(v16 + 40 * v7 + 8);
                  swift_retain();
                  v64 = swift_isUniquelyReferenced_nonNull_native();
                  *v60 = (char *)v59;
                  if ((v64 & 1) == 0)
                    *v60 = sub_1B1FFF0A4(v59);
                  v65 = v16 + 40 * v7;
                  v68 = *(_QWORD *)(v65 + 32);
                  v66 = (char **)(v65 + 32);
                  v67 = v68;
                  v69 = swift_isUniquelyReferenced_nonNull_native();
                  *v66 = (char *)v68;
                  if ((v69 & 1) == 0)
                    *v66 = sub_1B1FFF0A4(v67);
                  v70 = v16 + 40 * v7;
                  v73 = *(_QWORD *)(v70 + 24);
                  v71 = (char **)(v70 + 24);
                  v72 = v73;
                  v74 = swift_isUniquelyReferenced_nonNull_native();
                  *v71 = (char *)v73;
                  if ((v74 & 1) == 0)
                    *v71 = sub_1B1FFF0A4(v72);
                  v75 = 0;
                  v76 = 48;
                  do
                  {
                    v112 = *(float32x4_t *)(v63 + v76 - 16);
                    v139 = *(float32x4_t *)(v63 + v76);
                    v143 = *(float32x4_t *)(v63 + v76 + 16);
                    v147 = *(float32x4_t *)(v63 + v76 + 32);
                    v77 = *(_QWORD *)(*(_QWORD *)(v57 + 40) + 8 * v75 + 32);
                    v78 = xmmword_1B2244DB0;
                    v79 = xmmword_1B2244DD0;
                    v80 = *v60;
                    v81 = xmmword_1B2244D90;
                    v82 = xmmword_1B2244E20;
                    if (v77 != -1)
                    {
                      v83 = &v80[64 * v77];
                      v78 = *((_OWORD *)v83 + 2);
                      v79 = *((_OWORD *)v83 + 3);
                      v81 = *((_OWORD *)v83 + 4);
                      v82 = *((_OWORD *)v83 + 5);
                    }
                    v118 = (float32x4_t)v82;
                    v124 = (float32x4_t)v81;
                    v130 = (float32x4_t)v79;
                    v135 = (float32x4_t)v78;
                    v84 = swift_isUniquelyReferenced_nonNull_native();
                    *v60 = v80;
                    if ((v84 & 1) == 0)
                    {
                      v80 = sub_1B1FFF0A4((uint64_t)v80);
                      *v60 = v80;
                    }
                    v85 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v143.f32[0]), v130, *(float32x2_t *)v143.f32, 1), v124, v143, 2), v118, v143, 3);
                    v86 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v147.f32[0]), v130, *(float32x2_t *)v147.f32, 1), v124, v147, 2), v118, v147, 3);
                    v87 = (float32x4_t *)&v80[v76];
                    v144 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v139.f32[0]), v130, *(float32x2_t *)v139.f32, 1), v124, v139, 2), v118, v139, 3);
                    v148 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v112.f32[0]), v130, *(float32x2_t *)v112.f32, 1), v124, v112, 2), v118, v112, 3);
                    v87[-1] = v148;
                    *v87 = v144;
                    v136 = v86;
                    v140 = v85;
                    v87[1] = v85;
                    v87[2] = v86;
                    v88 = &(*v71)[v76];
                    v125 = *(_OWORD *)v88;
                    v131 = *((_OWORD *)v88 - 1);
                    v113 = *((_OWORD *)v88 + 2);
                    v119 = *((_OWORD *)v88 + 1);
                    v89 = *v66;
                    v90 = swift_isUniquelyReferenced_nonNull_native();
                    *v66 = v89;
                    if ((v90 & 1) == 0)
                    {
                      v89 = sub_1B1FFF0A4((uint64_t)v89);
                      *v66 = v89;
                    }
                    v91 = &v89[v76];
                    *((_OWORD *)v91 - 1) = v131;
                    *(_OWORD *)v91 = v125;
                    *((_OWORD *)v91 + 1) = v119;
                    *((_OWORD *)v91 + 2) = v113;
                    v92 = (float32x4_t *)(*(_QWORD *)(v57 + 48) + v76);
                    v114 = v92[-1];
                    v120 = *v92;
                    v126 = v92[1];
                    v132 = v92[2];
                    v93 = *v71;
                    v94 = swift_isUniquelyReferenced_nonNull_native();
                    *v71 = v93;
                    if ((v94 & 1) == 0)
                    {
                      v93 = sub_1B1FFF0A4((uint64_t)v93);
                      *v71 = v93;
                    }
                    ++v75;
                    v95 = (float32x4_t *)&v93[v76];
                    v95[-1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v114.f32[0]), v144, *(float32x2_t *)v114.f32, 1), v140, v114, 2), v136, v114, 3);
                    *v95 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v120.f32[0]), v144, *(float32x2_t *)v120.f32, 1), v140, v120, 2), v136, v120, 3);
                    v95[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v126.f32[0]), v144, *(float32x2_t *)v126.f32, 1), v140, v126, 2), v136, v126, 3);
                    v95[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v132.f32[0]), v144, *(float32x2_t *)v132.f32, 1), v140, v132, 2), v136, v132, 3);
                    v76 += 64;
                  }
                  while (v62 != v75);
                  swift_release();
                  v16 = v108;
                  v8 = v106;
                }
              }
              ++v7;
            }
            while (v7 != v8);
          }
          v5 = v101;
          sub_1B1F05D48(v105, (unsigned __int16 **)v157, (uint64_t)v159);
          sub_1B1F03804((char *)v100);
          ecs_stack_allocator_pop_snapshot(v104);
          if ((v103 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 376));
          }
          swift_release();
          v4 = v102 + 1;
        }
        while (v102 + 1 != v99);
        sub_1B19ED748(v149);
      }
    }
    return sub_1B19ED748(v149);
  }
  return result;
}

uint64_t type metadata accessor for SkeletonSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2049880(uint64_t a1, uint64_t a2)
{
  return sub_1B2049890(a1, a2, 3, (void (*)(_OWORD *__return_ptr, uint64_t))sub_1B1E3B010);
}

uint64_t sub_1B2049890(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr, uint64_t))
{
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v6 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  a4(v9, a3);
  swift_release();
  v7 = v9[1];
  *(_OWORD *)(v6 + 16) = v9[0];
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 48) = v10;
  return v6;
}

const char *sub_1B204995C()
{
  return "SkeletonSystem";
}

uint64_t sub_1B2049974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t sub_1B2049A3C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  void *v5;
  void *v6;
  uint64_t v7[12];
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = result;
    v4 = *(_OWORD *)(v1 + 32);
    v30[0] = *(_OWORD *)(v1 + 16);
    v30[1] = v4;
    v31 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v30, 0x200000000, v7);
    sub_1B19F66A0((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0);
    if (v8)
    {
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      v23 = v12;
      v24 = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      v28 = v17;
      v29 = v18;
      v5 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
      v6 = (void *)sub_1B2228728();
      objc_msgSend(v5, sel_pushDebugGroup_, v6);

      sub_1B2049BB4(v5, v2, (uint64_t)&v19, v3);
      objc_msgSend(v5, sel_popDebugGroup);
      swift_unknownObjectRelease();
      sub_1B19ED748(v7);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2049BB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t *v24;
  uint64_t v25;
  simd_float4x4 *v26;
  uint64_t v27;
  simd_float4x4 *v28;
  float32x4_t *v29;
  uint64_t *v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[7];
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _BYTE v48[48];

  sub_1B1E2738C(0x73656D5F6E696B73, 0xE900000000000068, 0, (uint64_t)&unk_1E6381CD0, v42);
  v7 = sub_1B1B3947C((uint64_t)v42, 0, 0);
  v9 = v8;
  sub_1B1B1FB80((uint64_t)v42);

  objc_msgSend(a1, sel_setComputePipelineState_, v7);
  v10 = *(_OWORD *)(a3 + 16);
  v43 = *(_OWORD *)a3;
  v44 = v10;
  v45 = *(_QWORD *)(a3 + 32);
  if (*(uint64_t *)(a3 + 80) <= 0)
    return swift_unknownObjectRelease();
  v35 = *(_QWORD *)(a3 + 56);
  if (!v35)
    return swift_unknownObjectRelease();
  v33 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD **)(a3 + 72);
  v12 = v11[4];
  v13 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  sub_1B1D6631C(a3);
  v14 = 0;
  v32 = v13;
  v34 = v12;
  do
  {
    v15 = (unsigned int *)(v33 + 48 * v14);
    v37 = *v15;
    v36 = v15[1];
    v16 = *((_QWORD *)v15 + 3);
    v18 = *((_QWORD *)v15 + 4);
    v17 = *((_QWORD *)v15 + 5);
    v40 = v14;
    v38 = (uint64_t *)*((_QWORD *)v15 + 2);
    if (v13)
    {
      v19 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v19);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v12);
    sub_1B19F66A0((uint64_t)(v11 + 6), (uint64_t)v48, &qword_1ED4B7FB0);
    v20 = v11[4];
    v21 = v17;
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v11[6] = ecs_stack_allocator_allocate(v20, 48 * v22, 8);
    v11[7] = v22;
    v11[9] = 0;
    v11[10] = 0;
    v11[8] = 0;
    swift_release();
    v23 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for SkinnedMeshBinding, (uint64_t)&off_1E6395D68, v38, v16, v18, (uint64_t)v11);
    v24 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, v38, v16, v18, (uint64_t)v11);
    v39 = v21;
    v25 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v38, v16, v18, (uint64_t)v11);
    v26 = (simd_float4x4 *)v25;
    if (v38)
    {
      for (; v18; --v18)
      {
        sub_1B204A80C((uint64_t)v11, v23, v24, v26++, a4, a2, (uint64_t)a1, v7);
        v24 += 2;
        v23 += 5;
      }
    }
    else if ((_DWORD)v37 != (_DWORD)v36)
    {
      v27 = v36 - v37;
      v28 = (simd_float4x4 *)(v25 + (v37 << 6));
      v29 = &v23[5 * v37];
      v30 = &v24[2 * v37];
      do
      {
        sub_1B204A80C((uint64_t)v11, v29, v30, v28++, a4, a2, (uint64_t)a1, v7);
        v30 += 2;
        v29 += 5;
        --v27;
      }
      while (v27);
    }
    v46[0] = v43;
    v46[1] = v44;
    v47 = v45;
    sub_1B1F05D48(v11, (unsigned __int16 **)v46, (uint64_t)v48);
    sub_1B1F03804((char *)v39);
    v12 = v34;
    ecs_stack_allocator_pop_snapshot(v34);
    v13 = v32;
    if ((v32 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 376));
    }
    swift_release();
    v14 = v40 + 1;
  }
  while (v40 + 1 != v35);
  swift_unknownObjectRelease();
  return sub_1B1D66364(a3);
}

uint64_t type metadata accessor for SkinningSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SkinnedMeshBinding()
{
  return &type metadata for SkinnedMeshBinding;
}

uint64_t destroy for Skeleton()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Skeleton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Skeleton(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Skeleton(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Skeleton()
{
  return &type metadata for Skeleton;
}

uint64_t assignWithCopy for SkeletalAnimationPlayer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SkeletalAnimationPlayer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SkeletalAnimationPlayer()
{
  return &type metadata for SkeletalAnimationPlayer;
}

ValueMetadata *type metadata accessor for QuatfArrayAnimation()
{
  return &type metadata for QuatfArrayAnimation;
}

ValueMetadata *type metadata accessor for Float3ArrayAnimation()
{
  return &type metadata for Float3ArrayAnimation;
}

uint64_t sub_1B204A274()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1A1473C(1, 1, 1, (uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B204A338()
{
  return "Skinning";
}

uint64_t sub_1B204A350(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v8 = 0;
  v9 = a2 >> 16;
  v10 = a3 >> 16;
  for (i = (_QWORD *)(a1 + 40); ; i += 2)
  {
    v12 = *(i - 1);
    v13 = (*i & 0x2000000000000000) != 0 ? HIBYTE(*i) & 0xFLL : v12 & 0xFFFFFFFFFFFFLL;
    v14 = v12 == a4 && *i == a5;
    v15 = v14 && v9 == 0;
    v16 = v15 && v13 == v10;
    if (v16 || (sub_1B22299F4() & 1) != 0)
      break;
    if (v5 == ++v8)
      return 0;
  }
  return v8;
}

uint64_t sub_1B204A41C(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v28 = MEMORY[0x1E0DEE9D8];
    sub_1B202A10C(0, v2, 0);
    v5 = 0;
    v3 = v28;
    v27 = a1 + 32;
    do
    {
      v6 = (uint64_t *)(v27 + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      v9 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v9 = v8 & 0xFFFFFFFFFFFFLL;
      if (v9)
      {
        swift_bridgeObjectRetain();
        while (1)
        {
          v10 = sub_1B2228848();
          if (sub_1B2228950() == 47 && v11 == 0xE100000000000000)
            break;
          v13 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v13 & 1) != 0)
            goto LABEL_16;
          if (!(v10 >> 14))
          {
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRetain();
        v15 = sub_1B2228974();
        v17 = v16;
        v19 = v18;
        v21 = v20;
        swift_bridgeObjectRelease();
        v14 = sub_1B204A350(*(_QWORD *)(a2 + 16), v15, v17, v19, v21);
        LOBYTE(v17) = v22;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
          v14 = -1;
      }
      else
      {
LABEL_14:
        v14 = -1;
      }
      v24 = *(_QWORD *)(v28 + 16);
      v23 = *(_QWORD *)(v28 + 24);
      if (v24 >= v23 >> 1)
        sub_1B202A10C(v23 > 1, v24 + 1, 1);
      ++v5;
      *(_QWORD *)(v28 + 16) = v24 + 1;
      *(_QWORD *)(v28 + 8 * v24 + 32) = v14;
    }
    while (v5 != v2);
  }
  return v3;
}

uint64_t sub_1B204A628(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  float32x4_t *v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v8 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  v9 = (float32x4_t *)ecs_stack_allocator_allocate(v8, 16 * v7, 16);
  v10 = (float32x4_t *)ecs_stack_allocator_allocate(v8, 16 * v7, 16);
  v11 = (float32x4_t *)ecs_stack_allocator_allocate(v8, 16 * v7, 16);
  sub_1B2048474(v9, a4, v13, v12, a3[3], a3[4]);
  sub_1B20485D0(v10, a4, v14, a3[5], a3[6]);
  sub_1B2048474(v11, a4, v16, v15, a3[7], a3[8]);
  if (v7)
  {
    v17 = *(char **)(a1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_1B1FFF0A4((uint64_t)v17);
    v18 = (float32x4_t *)(v17 + 80);
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    do
    {
      v20 = *v9++;
      v21 = v20;
      v22 = *v10++;
      v23 = v22;
      v24 = *v11++;
      v21.i32[3] = 1.0;
      v25 = vabsq_f32(v24);
      v25.i32[3] = 0;
      v26 = vmulq_f32(v23, v23);
      v27 = vmulq_laneq_f32(v23, v23, 3);
      v28 = vmulq_lane_f32(v23, *(float32x2_t *)v23.f32, 1).f32[0];
      v29 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v25, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v24, v19));
      v26.f32[0] = 0.5 - v26.f32[0];
      *(float32x2_t *)v23.f32 = vmul_laneq_f32(*(float32x2_t *)v23.f32, v23, 2);
      v30 = vaddq_f32(v29, v29);
      v31.i32[3] = 0;
      v31.f32[0] = (float)(0.5 - v26.f32[1]) - v26.f32[2];
      v31.f32[1] = v28 + v27.f32[2];
      v32.i32[3] = 0;
      v32.f32[0] = v28 - v27.f32[2];
      v31.f32[2] = v23.f32[0] - v27.f32[1];
      v32.f32[1] = v26.f32[0] - v26.f32[2];
      v32.f32[2] = v23.f32[1] + v27.f32[0];
      *(int32x2_t *)v27.f32 = vrev64_s32(*(int32x2_t *)v27.f32);
      v33.i32[0] = vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v27.f32).u32[0];
      v33.i32[1] = vsub_f32(*(float32x2_t *)&v23, *(float32x2_t *)&v27).i32[1];
      v33.i64[1] = COERCE_UNSIGNED_INT(v26.f32[0] - v26.f32[1]);
      v18[-3] = vmulq_n_f32(v31, v30.f32[0]);
      v18[-2] = vmulq_lane_f32(v32, *(float32x2_t *)v30.f32, 1);
      v18[-1] = vmulq_laneq_f32(v33, v30, 2);
      *v18 = v21;
      v18 += 4;
      --v7;
    }
    while (v7);
    *(_QWORD *)(a1 + 8) = v17;
  }
  return ecs_stack_allocator_pop_snapshot(v8);
}

uint64_t sub_1B204A80C(uint64_t result, float32x4_t *a2, uint64_t *a3, simd_float4x4 *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t *v24;
  float32x4_t *v25;
  unint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  _QWORD v60[5];
  _QWORD v61[5];
  _QWORD v62[5];
  _QWORD v63[5];
  _QWORD v64[5];
  _QWORD v65[5];
  _QWORD v66[5];
  _OWORD v67[2];
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  uint64_t v83;
  simd_float4x4 v84;

  v8 = a2->i32[1];
  v9 = a2->i32[0];
  if (((_DWORD)v9 != -1 || v8 != 0)
    && (v9 & 0x80000000) == 0
    && *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v9)
  {
    v15 = result;
    v16 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v8 == -1 || *(_DWORD *)(v16 + 12 * (int)v9 + 8) == v8)
    {
      sub_1B1D1F0D0(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * *(int *)(v16 + 12 * (int)v9) + 32), *(_DWORD *)(v16 + 12 * (int)v9), *(_WORD *)(v16 + 12 * (int)v9 + 4), 40, a5, v60);
      result = sub_1B19F66A0((uint64_t)v60, (uint64_t)&v72, &qword_1EEF62768);
      if (*((_QWORD *)&v72 + 1))
      {
        v54 = a8;
        v77 = v74;
        v75 = v72;
        v76 = v73;
        v82[0] = v73;
        v17 = *(_QWORD *)(v73 + 16);
        v18 = *(_QWORD *)(v15 + 32);
        ecs_stack_allocator_push_snapshot(v18);
        v83 = v18;
        v19 = (int32x4_t *)ecs_stack_allocator_allocate(v18, v17 << 6, 16);
        v55 = a2[1];
        v56 = a2[2];
        v57 = a2[3];
        v58 = a2[4];
        v84 = __invert_f4(*a4);
        if (v17)
        {
          v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[0].f32[0]), v56, *(float32x2_t *)v84.columns[0].f32, 1), v57, (float32x4_t)v84.columns[0], 2), v58, (float32x4_t)v84.columns[0], 3);
          v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[1].f32[0]), v56, *(float32x2_t *)v84.columns[1].f32, 1), v57, (float32x4_t)v84.columns[1], 2), v58, (float32x4_t)v84.columns[1], 3);
          v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[2].f32[0]), v56, *(float32x2_t *)v84.columns[2].f32, 1), v57, (float32x4_t)v84.columns[2], 2), v58, (float32x4_t)v84.columns[2], 3);
          v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[3].f32[0]), v56, *(float32x2_t *)v84.columns[3].f32, 1), v57, (float32x4_t)v84.columns[3], 2), v58, (float32x4_t)v84.columns[3], 3);
          v24 = (float32x2_t *)(*((_QWORD *)&v76 + 1) + 48);
          v25 = (float32x4_t *)&v19[2];
          v26 = v17;
          do
          {
            v27 = *(float32x4_t *)v24[4].f32;
            v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v24->f32)), v21, *v24, 1), v22, *(float32x4_t *)v24->f32, 2), v23, *(float32x4_t *)v24->f32, 3);
            v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v24[2].f32)), v21, v24[2], 1), v22, *(float32x4_t *)v24[2].f32, 2), v23, *(float32x4_t *)v24[2].f32, 3);
            v25[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v24[-2].f32)), v21, v24[-2], 1), v22, *(float32x4_t *)v24[-2].f32, 2), v23, *(float32x4_t *)v24[-2].f32, 3);
            v25[-1] = v28;
            *v25 = v29;
            v25[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v27.f32[0]), v21, *(float32x2_t *)v27.f32, 1), v22, v27, 2), v23, v27, 3);
            v25 += 4;
            v24 += 8;
            --v26;
          }
          while (v26);
        }
        v30 = *(_QWORD *)(v15 + 24);
        swift_retain();
        v31 = (void *)sub_1B1D22DA8(v30, 48 * v17);
        v33 = v32;
        v35 = v34;
        swift_unknownObjectRetain();
        swift_release();
        v59 = v35;
        if (objc_msgSend(v31, sel_storageMode) == (id)2)
        {
          v36 = 0;
        }
        else
        {
          v37 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          v38 = v31;
          v36 = (uint64_t)v37 + v33;
        }
        matrix_transpose_batch(v36, v19, v17);
        v39 = *a3;
        if (v39)
        {
          sub_1B1E21AAC(0, (uint64_t)v61);
          sub_1B19F66A0((uint64_t)v61, (uint64_t)v67, &qword_1EEF62770);
          if (*(_QWORD *)&v67[0])
          {
            v69 = v67[0];
            v70 = v67[1];
            v71 = v68;
            sub_1B1E21AAC(9, (uint64_t)v62);
            sub_1B19F66A0((uint64_t)v62, (uint64_t)v66, &qword_1EEF62770);
            v40 = v66[0];
            if (v66[0])
            {
              v41 = v66[1];
              v42 = v66[2];
              sub_1B1E21AAC(8, (uint64_t)v63);
              sub_1B19F66A0((uint64_t)v63, (uint64_t)v65, &qword_1EEF62770);
              if (v65[0])
              {
                v52 = v65[2];
                v53 = v65[1];
                v51 = v65[0];
                swift_retain();
                sub_1B1BA4EE0((uint64_t)&v69, (uint64_t)v64);
                swift_getObjectType();
                v43 = v69;
                v50 = v42;
                v44 = v70;
                swift_unknownObjectRetain();
                sub_1B1F40DEC(v43, *((uint64_t *)&v43 + 1), v44, 0);
                sub_1B1B40274((uint64_t)v61);
                v45 = v64[1];
                v46 = v64[2];
                v47 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v47, v45, v46, 0);
                sub_1B1B40274((uint64_t)v64);
                swift_unknownObjectRetain();
                sub_1B1F40DEC(v40, v41, v50, 0);
                sub_1B1B40274((uint64_t)v62);
                v48 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v48, v33, v59, 0);
                swift_unknownObjectRelease();
                swift_unknownObjectRetain();
                sub_1B1F40DEC(v51, v53, v52, 0);
                sub_1B1B40274((uint64_t)v63);
                sub_1B1F410EC(v54, *(_QWORD *)(v39 + 48));
                sub_1B1B40274((uint64_t)v64);
                sub_1B1B40274((uint64_t)v63);
                sub_1B1B40274((uint64_t)v62);
                sub_1B1B40274((uint64_t)v61);
                swift_unknownObjectRelease();
                swift_release();
                ecs_stack_allocator_pop_snapshot(v83);
                sub_1B1F3BBF4((uint64_t)&v75, (uint64_t)&v81);
                sub_1B19ED720((uint64_t)&v81);
                v80 = *((_QWORD *)&v75 + 1);
                sub_1B1B28C6C((uint64_t)&v80);
                sub_1B1B28C6C((uint64_t)v82);
                v79 = *((_QWORD *)&v76 + 1);
                sub_1B1B28C6C((uint64_t)&v79);
                v78 = v77;
                v49 = &v78;
              }
              else
              {
                swift_retain();
                sub_1B1B40274((uint64_t)v62);
                sub_1B1B40274((uint64_t)v61);
                swift_unknownObjectRelease();
                swift_release();
                ecs_stack_allocator_pop_snapshot(v83);
                sub_1B1F3BBF4((uint64_t)&v75, (uint64_t)v64);
                sub_1B19ED720((uint64_t)v64);
                v81 = *((_QWORD *)&v75 + 1);
                sub_1B1B28C6C((uint64_t)&v81);
                sub_1B1B28C6C((uint64_t)v82);
                v80 = *((_QWORD *)&v76 + 1);
                sub_1B1B28C6C((uint64_t)&v80);
                v79 = v77;
                v49 = &v79;
              }
            }
            else
            {
              sub_1B1B40274((uint64_t)v61);
              swift_unknownObjectRelease();
              ecs_stack_allocator_pop_snapshot(v83);
              sub_1B1F3BBF4((uint64_t)&v75, (uint64_t)v65);
              sub_1B19ED720((uint64_t)v65);
              v64[0] = *((_QWORD *)&v75 + 1);
              sub_1B1B28C6C((uint64_t)v64);
              sub_1B1B28C6C((uint64_t)v82);
              v63[0] = *((_QWORD *)&v76 + 1);
              sub_1B1B28C6C((uint64_t)v63);
              v81 = v77;
              v49 = &v81;
            }
          }
          else
          {
            swift_unknownObjectRelease();
            ecs_stack_allocator_pop_snapshot(v83);
            sub_1B1F3BBF4((uint64_t)&v75, (uint64_t)&v69);
            sub_1B19ED720((uint64_t)&v69);
            v66[0] = *((_QWORD *)&v75 + 1);
            sub_1B1B28C6C((uint64_t)v66);
            sub_1B1B28C6C((uint64_t)v82);
            v65[0] = *((_QWORD *)&v76 + 1);
            sub_1B1B28C6C((uint64_t)v65);
            v64[0] = v77;
            v49 = v64;
          }
        }
        else
        {
          swift_unknownObjectRelease();
          ecs_stack_allocator_pop_snapshot(v83);
          sub_1B1F3BBF4((uint64_t)&v75, (uint64_t)&v69);
          sub_1B19ED720((uint64_t)&v69);
          *(_QWORD *)&v67[0] = *((_QWORD *)&v75 + 1);
          sub_1B1B28C6C((uint64_t)v67);
          sub_1B1B28C6C((uint64_t)v82);
          v66[0] = *((_QWORD *)&v76 + 1);
          sub_1B1B28C6C((uint64_t)v66);
          v65[0] = v77;
          v49 = v65;
        }
        return sub_1B1B28C6C((uint64_t)v49);
      }
    }
  }
  return result;
}

uint64_t sub_1B204AEF4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B204C310(0, &qword_1EEF62788, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B204C2CC();
  sub_1B222A180();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v2)
  {
    v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B2229958();
    v13 = v3[2];
    HIBYTE(v12) = 2;
    sub_1B1BA05CC();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B204B09C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F952E8(*a1, *a2);
}

uint64_t sub_1B204B0A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E69646165727073;
  if (*v0 != 1)
    v1 = 0x7469736F706D6F63;
  if (*v0)
    return v1;
  else
    return 0x65676E6172;
}

uint64_t sub_1B204B114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B204BD74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B204B138()
{
  sub_1B204C2CC();
  return sub_1B222A1D4();
}

uint64_t sub_1B204B160()
{
  sub_1B204C2CC();
  return sub_1B222A1E0();
}

double sub_1B204B188@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1B204C0C8(a1, (uint64_t)&v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B204B1C8(_QWORD *a1)
{
  return sub_1B204AEF4(a1);
}

uint64_t sub_1B204B1DC()
{
  return type metadata accessor for ParticleVelocityInit.System();
}

double sub_1B204B1F8()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v0 + 32) = &type metadata for Velocity;
  *(_QWORD *)(v0 + 40) = &off_1E63C30D0;
  *(_QWORD *)(v0 + 48) = &type metadata for Orientation;
  *(_QWORD *)(v0 + 56) = &off_1E6371540;
  return result;
}

double sub_1B204B250@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 1065353216;
  return result;
}

void sub_1B204B26C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[12];
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  _BYTE v51[40];
  _QWORD v52[10];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;

  v5 = v4;
  v6 = *(_OWORD *)(a3 + 104);
  v49[0] = *(_OWORD *)(a3 + 88);
  v49[1] = v6;
  v50 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v49, 0x200000000, v34);
  sub_1B19F66A0((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v35[0])
  {
    v42 = v35[0];
    v43 = v35[1];
    v44 = v36;
    v27 = v41;
    if (v41 >= 1 && (v7 = v38) != 0)
    {
      v8 = v40[4];
      v26 = v39;
      v9 = *(unsigned __int8 *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v23 = v40 + 8;
      v24 = (uint64_t)(v40 + 6);
      v10 = (uint64_t *)(v37 + 24);
      v25 = v9;
      v11 = v40;
      while (1)
      {
        v13 = *((unsigned int *)v10 - 6);
        v12 = *((unsigned int *)v10 - 5);
        v14 = *((unsigned int *)v10 - 4);
        v15 = *(v10 - 1);
        v16 = *v10;
        v17 = v10[1];
        v18 = v10[2];
        v57 = v5;
        v32 = v16;
        v33 = v15;
        v30 = v12;
        v31 = v17;
        if (v9)
        {
          v19 = *(os_unfair_lock_s **)(v18 + 376);
          swift_retain();
          os_unfair_lock_lock(v19);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v8);
        sub_1B19F66A0(v24, (uint64_t)v51, &qword_1ED4B7FB0);
        v20 = v11[4];
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v11[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
        v11[7] = v21;
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        swift_release();
        v52[0] = v26;
        v52[1] = v18;
        v52[2] = v11;
        v52[3] = v14;
        v52[4] = (v30 - v13 + v14);
        v52[5] = v27;
        v52[6] = v13;
        v52[7] = v30;
        v52[8] = 0;
        v52[9] = 0;
        v53 = 1;
        v54 = v33;
        v55 = v32;
        v56 = v31;
        v22 = v57;
        sub_1B204B568(v52, a4, a1);
        if (v22)
          break;
        v47[0] = v42;
        v47[1] = v43;
        v48 = v44;
        sub_1B1F05D48(v11, (unsigned __int16 **)v47, (uint64_t)v51);
        v5 = 0;
        sub_1B1F03804((char *)v18);
        ecs_stack_allocator_pop_snapshot(v8);
        v9 = v25;
        if (v25)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
        }
        swift_release();
        v10 += 6;
        if (!--v7)
          goto LABEL_12;
      }

      v45[0] = v42;
      v45[1] = v43;
      v46 = v44;
      sub_1B1F05D48(v11, (unsigned __int16 **)v45, (uint64_t)v51);
      sub_1B1F03804((char *)v18);
      ecs_stack_allocator_pop_snapshot(v8);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
      __break(1u);
    }
    else
    {
LABEL_12:
      sub_1B19ED748(v34);
    }
  }
}

void sub_1B204B568(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;

  v5 = (uint64_t *)a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v5, v6, v7, v8);
  v9 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v5, v6, v7, v8);
  v10 = v9;
  v12 = *(float *)(a2 + 8);
  v11 = *(float *)(a2 + 12);
  v14 = a1[6];
  v13 = a1[7];
  if (v12 == 0.0 && v11 == 0.0)
  {
    if (*(float *)a2 == *(float *)(a2 + 4))
    {
      if (v13 != v14)
      {
        v15 = *(unsigned __int8 *)(a2 + 16);
        sub_1B200B468(*(float32x4_t *)(v9 + 16 * v14));
        __asm { BR              X8 }
      }
    }
    else if (v13 != v14)
    {
      v19 = *(unsigned __int8 *)(a2 + 16);
      sub_1B200B468(*(float32x4_t *)(v9 + 16 * v14));
      __asm { BR              X9 }
    }
  }
  else
  {
    cosf(fminf(fmaxf(v11, 0.0), 3.1416));
    if (v13 != v14)
    {
      cosf(fminf(fmaxf(v12, 0.0), 3.1416));
      v16 = *(unsigned __int8 *)(a2 + 16);
      v17 = a3[1] ^ a3[3] ^ a3[2];
      v18 = (float)((9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17))) & 0xFFFFFF)
          * 0.000000059605;
      sub_1B200B468(*(float32x4_t *)(v10 + 16 * v14));
      __sincosf_stret(v18 * 6.2832);
      __asm { BR              X12 }
    }
  }
}

uint64_t type metadata accessor for ParticleVelocityInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B204BC28(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  _DWORD v17[4];
  char v18;
  int v19;

  v2 = *a1;
  v3 = a1[1];
  swift_retain_n();
  v4 = sub_1B1D17E5C(v3);
  v6 = v5;
  v8 = v7;
  swift_release();
  v9 = HIDWORD(v4);
  v10 = HIDWORD(v6);
  if (v8 == 4)
    v11 = 1065353216;
  else
    v11 = v4;
  if (v8 == 4)
  {
    LODWORD(v9) = 1065353216;
    v12 = 0;
  }
  else
  {
    v12 = v6;
  }
  if (v8 == 4)
  {
    LODWORD(v10) = 0;
    v13 = 0;
  }
  else
  {
    v13 = v8;
  }
  if (v8 == 4)
    v14 = 1065353216;
  else
    v14 = HIDWORD(v8);
  v17[0] = v11;
  v17[1] = v9;
  v17[2] = v12;
  v17[3] = v10;
  v18 = v13;
  v19 = v14;
  v15 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE9EA4(v15, v2, v2, (uint64_t)a1, (uint64_t)v17);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B204BD0C()
{
  return "ParticleVelocityInitSystem";
}

uint64_t type metadata accessor for ParticleVelocityInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B204BD44()
{
  return "SetVelocity.GPU";
}

uint64_t sub_1B204BD58()
{
  return type metadata accessor for ParticleVelocityInit.GPUSystem();
}

uint64_t sub_1B204BD74(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646165727073 && a2 == 0xEE0065676E615267 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B204BEFC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v24[5];
  char v25;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D17E5C(v3);
  v7 = v6;
  v9 = v8;
  swift_release();
  v10 = HIDWORD(v5);
  v11 = HIDWORD(v7);
  if (v9 == 4)
    v12 = 1065353216;
  else
    v12 = v5;
  if (v9 == 4)
  {
    LODWORD(v10) = 1065353216;
    v13 = 0;
  }
  else
  {
    v13 = v7;
  }
  if (v9 == 4)
  {
    LODWORD(v11) = 0;
    v14 = 0;
  }
  else
  {
    v14 = v9;
  }
  if (v9 == 4)
    v15 = 1065353216;
  else
    v15 = HIDWORD(v9);
  v24[0] = v12;
  v24[1] = v10;
  v24[2] = v13;
  v24[3] = v11;
  v24[4] = v15;
  v25 = v14;
  v16 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_velocity_uniforms(0);
    sub_1B1F40E1C((uint64_t)v24, 1, ObjectType, v18, v19, v20, v21, v22);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v16 == 0, 0, (uint64_t)a1, 0xD000000000000015, 0x80000001B2348E00, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ParticleVelocityInit(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleVelocityInit(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleVelocityInit()
{
  return &type metadata for ParticleVelocityInit;
}

uint64_t sub_1B204C0C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  sub_1B204C310(0, &qword_1EEF62778, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v16 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B204C2CC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B1B4D924();
  HIBYTE(v16) = 0;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v11 = v17;
  HIBYTE(v16) = 1;
  sub_1B2229814();
  v12 = v17;
  HIBYTE(v16) = 2;
  sub_1B1BA0588();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v17;
  v14 = HIDWORD(v17);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 20) = v14;
  return result;
}

unint64_t sub_1B204C2CC()
{
  unint64_t result;

  result = qword_1EEF62780;
  if (!qword_1EEF62780)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B398C, &type metadata for ParticleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62780);
  }
  return result;
}

void sub_1B204C310(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B204C2CC();
    v7 = a3(a1, &type metadata for ParticleVelocityInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleVelocityInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B204C3B8 + 4 * byte_1B22B3791[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B204C3EC + 4 * byte_1B22B378C[v4]))();
}

uint64_t sub_1B204C3EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B204C3F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B204C3FCLL);
  return result;
}

uint64_t sub_1B204C408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B204C410);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B204C414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B204C41C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleVelocityInit.CodingKeys()
{
  return &type metadata for ParticleVelocityInit.CodingKeys;
}

unint64_t sub_1B204C43C()
{
  unint64_t result;

  result = qword_1EEF62790;
  if (!qword_1EEF62790)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3964, &type metadata for ParticleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62790);
  }
  return result;
}

unint64_t sub_1B204C484()
{
  unint64_t result;

  result = qword_1EEF62798;
  if (!qword_1EEF62798)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B38D4, &type metadata for ParticleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62798);
  }
  return result;
}

unint64_t sub_1B204C4CC()
{
  unint64_t result;

  result = qword_1EEF627A0;
  if (!qword_1EEF627A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B38FC, &type metadata for ParticleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF627A0);
  }
  return result;
}

int64_t sub_1B204C510(_QWORD **a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int64_t result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_1B1FFEEFC(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  result = sub_1B204F9E4(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t sub_1B204C584(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1FFEEFC(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1B204F244(v5);
  *a1 = v2;
  return result;
}

void sub_1B204C5F0(unint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v2 = a1;
  v3 = HIDWORD(a1);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  v4 = *(_QWORD **)(v1 + 96);
  v53 = (_QWORD *)(v1 + 96);
  v5 = v4[2];
  v27 = v1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v4 + 5;
    while (1)
    {
      v9 = v7 + 1;
      if (LODWORD(v8[v6]) == v2 && HIDWORD(v8[v6]) == (_DWORD)v3)
        break;
      v6 += 12;
      ++v7;
      if (v5 == v9)
      {
        v7 = v4[2];
        goto LABEL_11;
      }
    }
    if (v5 - 1 != v7)
    {
      v16 = v6 * 8 + 216;
      v5 = v7 + 1;
      do
      {
        if (*(_QWORD *)((char *)v4 + v16 - 80) != v2
          || HIDWORD(*(_QWORD *)((char *)v4 + v16 - 80)) != (_DWORD)v3)
        {
          if (v5 != v7)
          {
            v40 = *(_QWORD *)((char *)v4 + v16 - 80);
            v20 = (uint64_t)&v4[12 * v7 + 4];
            v21 = *(_QWORD *)(v20 + 8);
            v51 = *(_QWORD *)(v20 + 16);
            v52 = *(_QWORD *)v20;
            v50 = *(_QWORD *)(v20 + 24);
            v49 = *(_BYTE *)(v20 + 32);
            v22 = *(_QWORD *)(v20 + 40);
            v47 = *(_QWORD *)(v20 + 56);
            v48 = *(_QWORD *)(v20 + 48);
            v46 = *(_QWORD *)(v20 + 64);
            v44 = *(_BYTE *)(v20 + 73);
            v45 = *(_BYTE *)(v20 + 72);
            v42 = *(_DWORD *)(v20 + 76);
            v43 = *(_BYTE *)(v20 + 74);
            v23 = *(_QWORD *)(v20 + 88);
            v41 = *(_QWORD *)(v20 + 80);
            v38 = *(_QWORD *)((char *)v4 + v16 - 72);
            v39 = *(_QWORD *)((char *)v4 + v16 - 88);
            v37 = *(_QWORD *)((char *)v4 + v16 - 64);
            v36 = *((_BYTE *)v4 + v16 - 56);
            v24 = *(_QWORD *)((char *)v4 + v16 - 48);
            v34 = *(_QWORD *)((char *)v4 + v16 - 32);
            v35 = *(_QWORD *)((char *)v4 + v16 - 40);
            v33 = *(_QWORD *)((char *)v4 + v16 - 24);
            v31 = *((_BYTE *)v4 + v16 - 15);
            v32 = *((_BYTE *)v4 + v16 - 16);
            v29 = *(_DWORD *)((char *)v4 + v16 - 12);
            v30 = *((_BYTE *)v4 + v16 - 14);
            v25 = *(_QWORD *)((char *)v4 + v16);
            v28 = *(_QWORD *)((char *)v4 + v16 - 8);
            swift_unknownObjectRetain();
            swift_retain();
            swift_unknownObjectRetain();
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v53 = v4;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v4 = sub_1B1FFEEFC(v4);
              *v53 = v4;
            }
            v17 = &v4[12 * v7];
            v17[4] = v39;
            v17[5] = v40;
            v17[6] = v38;
            v17[7] = v37;
            *((_BYTE *)v17 + 64) = v36;
            v17[9] = v24;
            v17[10] = v35;
            v17[11] = v34;
            v17[12] = v33;
            *((_BYTE *)v17 + 104) = v32;
            *((_BYTE *)v17 + 105) = v31;
            *((_BYTE *)v17 + 106) = v30;
            *((_DWORD *)v17 + 27) = v29;
            v17[14] = v28;
            v17[15] = v25;
            swift_release();
            swift_unknownObjectRelease();
            v18 = (_QWORD *)(*v53 + v16);
            *(v18 - 11) = v52;
            *(v18 - 10) = v21;
            *(v18 - 9) = v51;
            *(v18 - 8) = v50;
            *((_BYTE *)v18 - 56) = v49;
            *(v18 - 6) = v22;
            *(v18 - 5) = v48;
            *(v18 - 4) = v47;
            *(v18 - 3) = v46;
            *((_BYTE *)v18 - 16) = v45;
            *((_BYTE *)v18 - 15) = v44;
            *((_BYTE *)v18 - 14) = v43;
            *((_DWORD *)v18 - 3) = v42;
            *(v18 - 1) = v41;
            *v18 = v23;
            swift_release();
            swift_unknownObjectRelease();
            v4 = (_QWORD *)*v53;
          }
          ++v7;
        }
        ++v5;
        v16 += 96;
      }
      while (v5 != v4[2]);
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_11:
  sub_1B1C92798(v7, v5);
  v11 = *(char **)(v27 + 144);
  v12 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v27 + 144) = v11;
  if ((v12 & 1) == 0)
  {
    v11 = sub_1B1C63D98(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    *(_QWORD *)(v27 + 144) = v11;
  }
  v14 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  if (v14 >= v13 >> 1)
    v11 = sub_1B1C63D98(v13 > 1, v14 + 1, 1, v11);
  *((_QWORD *)v11 + 2) = v14 + 1;
  v15 = &v11[8 * v14];
  *((_DWORD *)v15 + 8) = v2;
  *((_DWORD *)v15 + 9) = v3;
  *(_QWORD *)(v27 + 144) = v11;
  *(_WORD *)(v27 + 160) = 257;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 56));
}

uint64_t sub_1B204C9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  char v35;
  __int128 v37;
  _QWORD v39[4];
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  int v47;
  __int128 v48;
  unsigned __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  int v59;
  __int128 v60;

  v9 = v8;
  v15 = (*(uint64_t (**)(void))(a2 + 8))();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  v17 = swift_retain();
  v16(v17, a1, a2);
  swift_release();
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  if (v18(a1, a2) != qword_1EEF5DE78)
    a3 = v18(a1, a2);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v21 = v20;
  v23 = v22;
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a7;
  v24[3] = a8;
  v24[4] = v15;
  v24[5] = a2;
  v25 = *(_QWORD *)(v9 + 24);
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_retain();
  sub_1B20513E4(v15, a6, v19, v21, v23, v15, a2, a3, (uint64_t)v39, a4, 1, 1, a5 & 1, (uint64_t)sub_1B20513B8, (uint64_t)v24, v25);
  v26 = v39[0];
  v27 = v39[2];
  v28 = v39[3];
  v29 = v40;
  v37 = v41;
  v30 = v42;
  v31 = v43;
  LOBYTE(v24) = v44;
  LOBYTE(v19) = v46;
  v33 = v47;
  v35 = v45;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 56));
  v49 = __PAIR128__(v39[1], v26);
  v50 = v27;
  v51 = v28;
  v52 = v29;
  v53 = v37;
  v54 = v30;
  v55 = v31;
  v56 = (char)v24;
  v57 = v35;
  v58 = v19;
  v59 = v33;
  v60 = v48;
  sub_1B2051678((uint64_t)v39);
  sub_1B1C91500(0, 0, &v49);
  sub_1B2051678((uint64_t)v39);
  sub_1B1C91500(0, 0, &v49);
  *(_WORD *)(v9 + 160) = 257;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 56));
  sub_1B20516AC((uint64_t)v39);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B204CBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 24);
  result = swift_retain();
  if (!v1)
    return result;
  v3 = *(os_unfair_lock_s **)(v0 + 56);
  os_unfair_lock_lock(v3);
  v4 = sub_1B204E0B8();
  if ((v5 & 1) != 0)
  {
    os_unfair_lock_unlock(v3);
    return swift_release();
  }
  v6 = *(_QWORD *)(v0 + 96) + 96 * v4;
  v29 = *(_QWORD *)(v6 + 32);
  v24 = *(unsigned int *)(v6 + 40);
  v22 = *(unsigned int *)(v6 + 44);
  v7 = *(_QWORD *)(v6 + 56);
  v31 = *(_QWORD *)(v6 + 48);
  v32 = *(unsigned __int8 *)(v6 + 64);
  v27 = *(_QWORD *)(v6 + 88);
  v28 = *(_QWORD *)(v6 + 80);
  v26 = *(_QWORD *)(v6 + 96);
  v8 = *(unsigned __int8 *)(v6 + 104);
  v9 = *(unsigned __int8 *)(v6 + 105);
  v10 = *(unsigned __int8 *)(v6 + 106);
  v11 = *(unsigned int *)(v6 + 108);
  v12 = *(void (**)(uint64_t, uint64_t))(v6 + 112);
  v30 = *(_QWORD *)(v6 + 72);
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v3);
  if (!v12)
    return swift_release();
  v13 = 256;
  if (!v9)
    v13 = 0;
  v14 = v13 | v8;
  v15 = 0x10000;
  if (!v10)
    v15 = 0;
  v16 = v14 | v15 | (v11 << 32);
  v17 = v24 | (v22 << 32);
  v18 = *(_OWORD *)(v0 + 64);
  v25 = v18;
  v23 = *(_QWORD *)(v0 + 80);
  v20 = *(_BYTE *)(v0 + 89);
  v21 = *(_BYTE *)(v0 + 88);
  *(_QWORD *)(v0 + 64) = v29;
  *(_QWORD *)(v0 + 72) = v31;
  *(_QWORD *)(v0 + 80) = v7;
  *(_BYTE *)(v0 + 88) = v32;
  *(_BYTE *)(v0 + 89) = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                              + 8 * *(_QWORD *)thread_worker_index(*(double *)&v18)
                              + 8)
                  + 32);
  swift_unknownObjectRetain();
  swift_retain();
  ecs_stack_allocator_push_snapshot(v19);
  v12(v1, 3);
  ecs_stack_allocator_pop_snapshot(v19);
  sub_1B2051350(v29, v17, v31, v7, v32, v30, v28, v27, v26, v16, (uint64_t)v12);
  swift_release();
  result = sub_1B2051350(v29, v17, v31, v7, v32, v30, v28, v27, v26, v16, (uint64_t)v12);
  *(_OWORD *)(v0 + 64) = v25;
  *(_QWORD *)(v0 + 80) = v23;
  *(_BYTE *)(v0 + 88) = v21;
  *(_BYTE *)(v0 + 89) = v20;
  return result;
}

uint64_t sub_1B204CE78(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjCClassFromMetadata;
  char v28;
  char v29;
  _OWORD v30[2];
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  char v36;
  int v37;
  __int128 v38;
  _OWORD v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;
  int v46;
  __int128 v47;

  v5 = v4;
  v10 = *(_QWORD *)(v4 + 96);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    result = swift_getObjCClassFromMetadata();
    v13 = (_QWORD *)(v10 + 32);
    while (*v13 != result)
    {
      v13 += 12;
      if (!--v11)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, v14);
    v28 = a4;
    v29 = a3;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    v17 = swift_retain();
    v16(v17, a1, v14);
    swift_release();
    swift_getObjectType();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(a1, v14);
    v19 = v18;
    v21 = v20;
    v22 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 24);
    swift_unknownObjectRetain();
    v23 = v22(a1, v14);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v15;
    *(_QWORD *)(v24 + 24) = a2;
    v25 = *(_QWORD *)(v5 + 24);
    swift_unknownObjectRetain();
    swift_retain();
    sub_1B20513E4(ObjCClassFromMetadata, 0xFFFFFFFFuLL, v26, v19, v21, v15, v14, v23, (uint64_t)v30, 1000, 0, v29 & 1, v28 & 1, (uint64_t)sub_1B2051704, v24, v25);
    v39[0] = v30[0];
    v39[1] = v30[1];
    v40 = v31;
    v41 = v32;
    v42 = v33;
    v43 = v34;
    v44 = v35;
    v45 = v36;
    v46 = v37;
    v47 = v38;
    sub_1B1C91500(0, 0, v39);
    result = swift_unknownObjectRelease();
    *(_BYTE *)(v5 + 160) = 1;
  }
  return result;
}

void sub_1B204D098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjCClassFromMetadata;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;

  v5 = v4;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 56));
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v9 = ObjCClassFromMetadata;
  v10 = *(_QWORD *)(v4 + 168);
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_1B1DC3B48(ObjCClassFromMetadata), (v12 & 1) != 0))
  {
    v13 = *(char **)(*(_QWORD *)(v10 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v14 = *((_QWORD *)v13 + 2);
    if (!v14)
      goto LABEL_9;
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v14)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1B1C66FD0(0, v14 + 1, 1, v13);
      v19 = *((_QWORD *)v13 + 2);
      v18 = *((_QWORD *)v13 + 3);
      if (v19 >= v18 >> 1)
        v13 = sub_1B1C66FD0(v18 > 1, v19 + 1, 1, v13);
      *((_QWORD *)v13 + 2) = v19 + 1;
      v20 = &v13[16 * v19];
      *((_QWORD *)v20 + 4) = a3;
      *((_QWORD *)v20 + 5) = a4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v22 = *(_QWORD *)(v5 + 168);
      *(_QWORD *)(v5 + 168) = 0x8000000000000000;
      sub_1B1B875E4((uint64_t)v13, v9, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v5 + 168) = v22;
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 160) = 257;
      goto LABEL_15;
    }
  }
  v15 = swift_getObjCClassFromMetadata();
  v16 = 32;
  v17 = v14;
  while (swift_getObjCClassFromMetadata() != v15)
  {
    v16 += 16;
    if (!--v17)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 56));
}

uint64_t sub_1B204D228(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  double v6;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 24);
  result = swift_retain();
  if (v4)
  {
    *(_QWORD *)thread_worker_index(v6) = 0;
    __asm { BR              X10 }
  }
  return result;
}

void sub_1B204D2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;

  if (*(uint64_t *)(v0 + 216) < 1)
  {
    if (!*(_BYTE *)(v0 + 225))
    {
LABEL_6:
      *(_BYTE *)(v0 + 225) = 1;
      sub_1B1DAAED0();
      v2 = *(_QWORD *)(v1 + 24);
      goto LABEL_7;
    }
  }
  else
  {
    v2 = v0;
    if ((*(_BYTE *)(v0 + 225) & 1) == 0)
    {
LABEL_7:
      if (*(_BYTE *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) == 1)
      {
        sub_1B204E7C8(2);
        *(_BYTE *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 0;
      }
      v3 = v0 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
      v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 72);
      if (v4)
      {
        sub_1B204E7C8(3);
        v5 = v4 - 1;
        if (v5)
        {
          v7 = vdupq_n_s64(1uLL);
          do
          {
            *(int64x2_t *)(v3 + 16) = vaddq_s64(*(int64x2_t *)(v3 + 16), v7);
            v6 = *(_QWORD *)(v3 + 88);
            if (v6 >= 240)
              v6 = 240;
            if (v6 <= 15)
              v6 = 15;
            *(double *)(v3 + 48) = *(double *)(v3 + 48) + 1.0 / (double)v6;
            sub_1B1DA8FBC();
            sub_1B204E7C8(3);
            --v5;
          }
          while (v5);
        }
      }
      JUMPOUT(0x1B204D32CLL);
    }
  }
  sub_1B1DAAE5C();
  goto LABEL_6;
}

void sub_1B204D314()
{
  JUMPOUT(0x1B204D320);
}

void sub_1B204D44C(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 56));
  v5 = *(_QWORD **)(v2 + 96);
  v6 = v5[2];
  if (v6)
  {
    v7 = 0;
    v8 = a2 & 1;
    do
    {
      if (LODWORD(v5[v7 + 5]) == (_DWORD)a1 && HIDWORD(v5[v7 + 5]) == HIDWORD(a1))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v2 + 96) = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v5 = sub_1B1FFEEFC(v5);
        BYTE1(v5[v7 + 13]) = v8;
        *(_QWORD *)(v2 + 96) = v5;
      }
      v7 += 12;
      --v6;
    }
    while (v6);
  }
  *(_WORD *)(v2 + 160) = 257;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 56));
}

void sub_1B204D500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v1 = v0;
    v2 = (uint64_t *)(v0 + 192);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4 = *v2;
    if (isUniquelyReferenced_nonNull_native)
    {
      sub_1B1DAE098(0, *(_QWORD *)(v4 + 16));
    }
    else
    {
      *v2 = (uint64_t)sub_1B1B1CEC4(0, *(_QWORD *)(v4 + 24) >> 1);
      swift_release();
    }
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      swift_isUniquelyReferenced_nonNull_native();
      v5 = *(_QWORD *)(v1 + 200);
      *(_QWORD *)(v1 + 200) = 0x8000000000000000;
      sub_1B2050FA8();
      sub_1B2229634();
      *(_QWORD *)(v1 + 200) = v5;
      swift_bridgeObjectRelease();
    }
  }
}

void sub_1B204D5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 56));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v3 + 152) = 0x8000000000000000;
  v8 = sub_1B1DC3B48(a1);
  v10 = v9;
  v11 = *(_QWORD *)(v7 + 16) + ((v9 & 1) == 0);
  if (*(_QWORD *)(v7 + 24) >= v11)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EA7990();
  }
  else
  {
    sub_1B1E901AC(v11, isUniquelyReferenced_nonNull_native);
    v12 = sub_1B1DC3B48(a1);
    if ((v10 & 1) != (v13 & 1))
    {
      sub_1B2229FC4();
      __break(1u);
      return;
    }
    v8 = v12;
  }
  *(_QWORD *)(v3 + 152) = v7;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v3 + 152);
  if ((v10 & 1) == 0)
    sub_1B1EB6E04(v8, a1, 0, *(_QWORD *)(v3 + 152));
  *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v8) += a2;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 56));
}

uint64_t sub_1B204D6E4()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t sub_1B204D6EC()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;

  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 32) = "lock-scheduler";
  *(_QWORD *)(v0 + 40) = 14;
  *(_BYTE *)(v0 + 48) = 2;
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_WORD *)(v0 + 88) = 256;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 96) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v0 + 112) = v2;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 136) = v2;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 152) = sub_1B1B95DE0(v2);
  *(_WORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = sub_1B1B96148(v2);
  *(_QWORD *)(v0 + 176) = v2;
  *(_QWORD *)(v0 + 184) = sub_1B1B96230(v2);
  *(_QWORD *)(v0 + 192) = v2;
  *(_QWORD *)(v0 + 200) = sub_1B1B96230(v2);
  *(_DWORD *)(v0 + 208) = 1065353216;
  return v0;
}

uint64_t sub_1B204D79C()
{
  uint64_t v0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 56), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B204D820()
{
  sub_1B204D79C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Scheduler()
{
  return objc_opt_self();
}

uint64_t sub_1B204D860()
{
  swift_unknownObjectRetain();
  return swift_retain();
}

uint64_t destroy for Scheduler.Event()
{
  return sub_1B204D8C8();
}

uint64_t sub_1B204D8C8()
{
  swift_release();
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for Scheduler.Event(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  sub_1B204D860();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return a1;
}

_QWORD *assignWithCopy for Scheduler.Event(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  sub_1B204D860();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  sub_1B204D8C8();
  return a1;
}

uint64_t assignWithTake for Scheduler.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = v3;
  sub_1B204D8C8();
  return a1;
}

uint64_t getEnumTagSinglePayload for Scheduler.Event(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 41);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Scheduler.Event(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = (unint64_t)-a2 << 8;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_QWORD *)(a1 + 96) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1B204DBDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83) >> 7;
}

uint64_t sub_1B204DBE8(uint64_t result)
{
  *(_QWORD *)(result + 80) &= ~0x80000000uLL;
  return result;
}

uint64_t sub_1B204DBF8(uint64_t result, int a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 80) & 0xFFFFFFFF00010101 | (a2 << 31);
  *(_QWORD *)(result + 40) = *(unsigned __int8 *)(result + 40);
  *(_QWORD *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Event()
{
  return &type metadata for Scheduler.Event;
}

_QWORD *initializeBufferWithCopyOfBuffer for JobQueue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for JobQueue(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for JobQueue(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for JobQueue()
{
  return &type metadata for JobQueue;
}

uint64_t destroy for Scheduler.Job()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Scheduler.Job(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Scheduler.Job(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Scheduler.Job(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Scheduler.Job(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Scheduler.Job(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Job()
{
  return &type metadata for Scheduler.Job;
}

ValueMetadata *type metadata accessor for Scheduler.SystemRegistrationOptions()
{
  return &type metadata for Scheduler.SystemRegistrationOptions;
}

unint64_t sub_1B204DF9C()
{
  unint64_t result;

  result = qword_1EEF627A8;
  if (!qword_1EEF627A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3B1C, &type metadata for Scheduler.SystemRegistrationOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF627A8);
  }
  return result;
}

unint64_t sub_1B204DFE4()
{
  unint64_t result;

  result = qword_1EEF627B0;
  if (!qword_1EEF627B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3AEC, &type metadata for Scheduler.SystemRegistrationOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF627B0);
  }
  return result;
}

unint64_t sub_1B204E02C()
{
  unint64_t result;

  result = qword_1EEF627B8;
  if (!qword_1EEF627B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3B44, &type metadata for Scheduler.SystemRegistrationOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF627B8);
  }
  return result;
}

unint64_t sub_1B204E074()
{
  unint64_t result;

  result = qword_1EEF627C0;
  if (!qword_1EEF627C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3B7C, &type metadata for Scheduler.SystemRegistrationOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF627C0);
  }
  return result;
}

uint64_t sub_1B204E0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  uint64_t result;
  _QWORD *i;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = 0;
  for (i = (_QWORD *)(v1 + 32); *i != ObjCClassFromMetadata; i += 12)
  {
    if (v2 == ++result)
      return 0;
  }
  return result;
}

void sub_1B204E11C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B204E154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v1, ObjectType, v0);
}

void sub_1B204E194()
{
  swift_getObjectType();
  JUMPOUT(0x1B204E180);
}

unint64_t sub_1B204E1B0(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t result;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v8 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    result = sub_1B1DC3B48(a1);
    if ((v10 & 1) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v8 + 56) + result) & 1) != 0)
        return result;
      sub_1B2229688();
      __break(1u);
    }
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *a2;
  *a2 = 0x8000000000000000;
  sub_1B1B876EC(0, a1, isUniquelyReferenced_nonNull_native);
  *a2 = v22;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v4 + 168);
  if (*(_QWORD *)(v12 + 16))
  {
    v13 = sub_1B1DC3B48(a1);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13) + 16);
      if (v15)
      {
        swift_bridgeObjectRetain();
        v16 = 32;
        do
        {
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          sub_1B204E1B0(ObjCClassFromMetadata, a2, a3);
          v16 += 16;
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease();
      }
    }
  }
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v23 = *a2;
  *a2 = 0x8000000000000000;
  sub_1B1B876EC(1, a1, v18);
  *a2 = v23;
  swift_bridgeObjectRelease();
  v19 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (unint64_t)sub_1B1C632AC(0, *(_QWORD *)(v19 + 16) + 1, 1, (char *)v19);
    v19 = result;
  }
  v21 = *(_QWORD *)(v19 + 16);
  v20 = *(_QWORD *)(v19 + 24);
  if (v21 >= v20 >> 1)
  {
    result = (unint64_t)sub_1B1C632AC(v20 > 1, v21 + 1, 1, (char *)v19);
    v19 = result;
  }
  *(_QWORD *)(v19 + 16) = v21 + 1;
  *(_QWORD *)(v19 + 8 * v21 + 32) = a1;
  *a3 = v19;
  return result;
}

uint64_t sub_1B204E3B8(uint64_t *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;

  v2 = (char *)MEMORY[0x1E0DEE9D8];
  v24 = sub_1B1B95DCC(MEMORY[0x1E0DEE9D8]);
  v3 = *a1;
  v4 = sub_1B1C632AC(0, *(_QWORD *)(*a1 + 16), 0, v2);
  v25 = v4;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = v3 + 96 * v5 + 24;
    do
    {
      --v5;
      v7 = *(_QWORD *)(v6 - 88);
      v6 -= 96;
      swift_unknownObjectRetain();
      swift_retain();
      sub_1B204E1B0(v7, (uint64_t *)&v24, (unint64_t *)&v25);
      swift_release();
      swift_unknownObjectRelease();
    }
    while (v5);
    swift_bridgeObjectRelease();
    v8 = (unint64_t)v25;
  }
  else
  {
    v8 = (unint64_t)v4;
  }
  v9 = sub_1B1B95DE0(MEMORY[0x1E0DEE9D8]);
  v23 = v9;
  v10 = *(_QWORD *)(v8 + 16);
  if (!v10)
  {
LABEL_19:
    sub_1B204C510((_QWORD **)a1, (uint64_t *)&v23);
    sub_1B204C584((_QWORD **)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v11 = v9;
  swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    v14 = *(_QWORD *)(v8 + 8 * v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = sub_1B1DC3B48(v14);
    v18 = v16;
    v19 = v11[2] + ((v16 & 1) == 0);
    if (v11[3] < v19)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      sub_1B1EA7990();
      if ((v18 & 1) != 0)
      {
LABEL_15:
        *(_QWORD *)(v11[7] + 8 * v17) = v12;
        goto LABEL_8;
      }
    }
LABEL_7:
    v11[(v17 >> 6) + 8] |= 1 << v17;
    v13 = 8 * v17;
    *(_QWORD *)(v11[6] + v13) = v14;
    *(_QWORD *)(v11[7] + v13) = v12;
    ++v11[2];
LABEL_8:
    --v10;
    swift_bridgeObjectRelease();
    ++v12;
    if (!v10)
    {
      v23 = v11;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  sub_1B1E901AC(v19, isUniquelyReferenced_nonNull_native);
  v20 = sub_1B1DC3B48(v14);
  if ((v18 & 1) == (v21 & 1))
  {
    v17 = v20;
    if ((v18 & 1) != 0)
      goto LABEL_15;
    goto LABEL_7;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

BOOL sub_1B204E60C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v4 = *(_QWORD *)(v1 + 96);
  v3 = v1 + 96;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = MEMORY[0x1E0DEE9E8];
  v24 = MEMORY[0x1E0DEE9E8];
  if (v5)
  {
    v21 = v3;
    v7 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v8 = (unsigned int *)(swift_bridgeObjectRetain() + 44);
    v22 = v5;
    do
    {
      v9 = (int)*(v8 - 1);
      v10 = *v8;
      if ((_DWORD)v9 != -1 || (_DWORD)v10 != 0)
      {
        if ((v9 & 0x80000000) != 0
          || v7[1] <= v9
          || ((v12 = (int *)(*v7 + 12 * (int)v9), (_DWORD)v10 != -1) ? (v13 = v12[2] == (_DWORD)v10) : (v13 = 1),
              !v13
           || (v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(*v7 + 12 * (int)v9 + 6) + 32)
                               + 16),
               v15 = *(_QWORD *)(v14 + 128),
               *(_QWORD *)(v15 + 16))
           && (v16 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), (v17 & 1) != 0)
           && *(ValueMetadata **)(*(_QWORD *)(v14 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16) + 32) == &type metadata for Tombstone
           || ((_DWORD)v10 == -1 || v12[2] == (_DWORD)v10)
           && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *v12 + 32) + 120) & 1) == 0))
        {
          sub_1B1B8B00C(&v23, v9 | (unint64_t)(v10 << 32));
        }
      }
      v8 += 24;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v6 = v24;
    v3 = v21;
    v5 = v22;
  }
  if (*(_QWORD *)(v6 + 16))
  {
    v18 = sub_1B2050984(v3, &v24);
    sub_1B1C92798(v18, *(_QWORD *)(*(_QWORD *)v3 + 16));
  }
  v19 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  swift_bridgeObjectRelease();
  return v5 != v19;
}

uint64_t sub_1B204E7C8(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  int v14;

  v3 = *(_QWORD *)(v1 + 24);
  result = swift_retain();
  if (v3)
  {
    sub_1B204EC74(a1, v3);
    thread_worker_index(v5);
    v14 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96);
    while (*(uint64_t *)(v1 + 120) > 0
         || *(_QWORD *)(*(_QWORD *)(v1 + 128) + 16)
         || *(_QWORD *)(*(_QWORD *)(v1 + 136) + 16))
    {
      sub_1B204EDAC();
      v6 = *(_QWORD *)(v1 + 112);
      v7 = *(_QWORD *)(v1 + 120) - 1;
      *(_QWORD *)(v1 + 120) = v7;
      v8 = v6 + 96 * v7;
      v9 = *(_QWORD *)(v8 + 48);
      v10 = *(_QWORD *)(v8 + 56);
      v11 = *(_BYTE *)(v8 + 64);
      LODWORD(v6) = *(unsigned __int8 *)(v8 + 105);
      v12 = *(unsigned __int8 *)(v8 + 106);
      *(_QWORD *)(v1 + 64) = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v1 + 72) = v9;
      *(_QWORD *)(v1 + 80) = v10;
      *(_WORD *)(v1 + 88) = v11;
      if ((_DWORD)v6 == 1 && (v12 ^ 1 | v14) != 0)
        __asm { BR              X8 }
      *(_QWORD *)(v1 + 64) = 0;
      *(_QWORD *)(v1 + 72) = 0;
      *(_BYTE *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 80) = 0;
      *(_BYTE *)(v1 + 89) = 1;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B204EC74(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  v4 = a1 == 3 || a1 == 0;
  if (v4 && sub_1B204E60C(a2) || *(_BYTE *)(v2 + 160) == 1)
  {
    *(_QWORD *)(v2 + 104) = *(_QWORD *)(v2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B204E3B8((uint64_t *)(v2 + 104));
    v6 = (uint64_t *)(v2 + 128);
    v5 = *(_QWORD *)(v3 + 128);
    *(_BYTE *)(v3 + 160) = 0;
    if (!*(_QWORD *)(v5 + 16) && !*(_QWORD *)(*(_QWORD *)(v3 + 136) + 16))
      *(_BYTE *)(v3 + 161) = 0;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v6;
    if (isUniquelyReferenced_nonNull_native)
    {
      sub_1B1C92798(0, *(_QWORD *)(v8 + 16));
    }
    else
    {
      *v6 = (uint64_t)sub_1B1B1C9EC(0, *(_QWORD *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    v9 = swift_isUniquelyReferenced_nonNull_native();
    v10 = *(_QWORD *)(v3 + 144);
    if (v9)
    {
      sub_1B1C928BC(0, *(_QWORD *)(v10 + 16));
    }
    else
    {
      *(_QWORD *)(v3 + 144) = sub_1B1B1C964(0, *(_QWORD *)(v10 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
  }
  v11 = *(_QWORD *)(v3 + 104);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 112) = v11;
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(v11 + 16);
  return swift_bridgeObjectRelease();
}

void sub_1B204EDAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  int32x2_t v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  _QWORD *v22;
  int32x2_t *v23;
  int32x2_t v24;
  int32x2_t *v25;
  int32x2_t v26;
  int32x2_t *v27;
  int32x2_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int32x2_t v34;
  int32x2_t v35;
  __int8 v36;
  int32x2_t v37;
  char isUniquelyReferenced_nonNull_native;
  int32x2_t v39;
  __int32 v40;
  __int8 v41;
  __int8 v42;
  int32x2_t v43;
  int32x2_t v44;
  __int8 v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;

  if (*(_BYTE *)(v0 + 161) == 1)
  {
    v1 = v0;
    v2 = *(_QWORD **)(v0 + 112);
    v61 = (uint64_t *)(v0 + 112);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16))
    {
      v3 = v2[2];
      if (v3
        && ((v4 = *(_QWORD *)(v1 + 120), v4 == v3)
         || (sub_1B1C92798(v4, v2[2]), v2 = (_QWORD *)*v61, (v3 = *(_QWORD *)(*v61 + 16)) != 0)))
      {
        v5 = 0;
        v6 = *(int32x2_t **)(v1 + 144);
        v7 = v6[2];
        v8 = v6 + 4;
        while (!*(_QWORD *)&v7)
        {
LABEL_7:
          if (++v5 == v3)
          {
            v5 = v3;
            goto LABEL_15;
          }
        }
        v9 = v8;
        v10 = v7;
        while (1)
        {
          v11 = vceq_s32(*v9, (int32x2_t)v2[12 * v5 + 5]);
          if ((v11.i32[0] & v11.i32[1] & 1) != 0)
            break;
          ++v9;
          if (!--*(_QWORD *)&v10)
            goto LABEL_7;
        }
        if (v5 + 1 != v3)
        {
          v3 = v5 + 1;
          do
          {
            v22 = v2 + 4;
            v23 = (int32x2_t *)&v2[12 * v3 + 4];
            v24 = v23[1];
            v25 = *(int32x2_t **)(v1 + 144);
            v26 = v25[2];
            if (v26)
            {
              v27 = v25 + 4;
              while (1)
              {
                v28 = vceq_s32(*v27, v24);
                if ((v28.i32[0] & v28.i32[1] & 1) != 0)
                  break;
                ++v27;
                if (!--*(_QWORD *)&v26)
                  goto LABEL_35;
              }
            }
            else
            {
LABEL_35:
              if (v5 != v3)
              {
                v29 = &v22[12 * v5];
                v60 = *v29;
                v30 = v29[1];
                v59 = v29[2];
                v58 = v29[3];
                v57 = *((_BYTE *)v29 + 32);
                v31 = v29[5];
                v56 = v29[6];
                v55 = v29[7];
                v54 = v29[8];
                v53 = *((_BYTE *)v29 + 72);
                v52 = *((_BYTE *)v29 + 73);
                v51 = *((_BYTE *)v29 + 74);
                v50 = *((_DWORD *)v29 + 19);
                v32 = v29[11];
                v48 = *v23;
                v49 = v29[10];
                v33 = &v22[12 * v3];
                v46 = (int32x2_t)v33[3];
                v47 = (int32x2_t)v33[2];
                v45 = *((_BYTE *)v33 + 32);
                v34 = (int32x2_t)v33[5];
                v35 = (int32x2_t)v33[7];
                v43 = (int32x2_t)v33[8];
                v44 = (int32x2_t)v33[6];
                v36 = *((_BYTE *)v33 + 72);
                v41 = *((_BYTE *)v33 + 74);
                v42 = *((_BYTE *)v33 + 73);
                v40 = *((_DWORD *)v33 + 19);
                v37 = (int32x2_t)v33[11];
                v39 = (int32x2_t)v33[10];
                swift_unknownObjectRetain();
                swift_retain();
                swift_unknownObjectRetain();
                swift_retain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *v61 = (uint64_t)v2;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v2 = sub_1B1FFEEFC(v2);
                  *v61 = (uint64_t)v2;
                }
                v20 = (int32x2_t *)&v2[12 * v5];
                v20[4] = v48;
                v20[5] = v24;
                v20[6] = v47;
                v20[7] = v46;
                v20[8].i8[0] = v45;
                v20[9] = v34;
                v20[10] = v44;
                v20[11] = v35;
                v20[12] = v43;
                v20[13].i8[0] = v36;
                v20[13].i8[1] = v42;
                v20[13].i8[2] = v41;
                v20[13].i32[1] = v40;
                v20[14] = v39;
                v20[15] = v37;
                swift_release();
                swift_unknownObjectRelease();
                v21 = *v61 + 96 * v3;
                *(_QWORD *)(v21 + 32) = v60;
                *(_QWORD *)(v21 + 40) = v30;
                *(_QWORD *)(v21 + 48) = v59;
                *(_QWORD *)(v21 + 56) = v58;
                *(_BYTE *)(v21 + 64) = v57;
                *(_QWORD *)(v21 + 72) = v31;
                *(_QWORD *)(v21 + 80) = v56;
                *(_QWORD *)(v21 + 88) = v55;
                *(_QWORD *)(v21 + 96) = v54;
                *(_BYTE *)(v21 + 104) = v53;
                *(_BYTE *)(v21 + 105) = v52;
                *(_BYTE *)(v21 + 106) = v51;
                *(_DWORD *)(v21 + 108) = v50;
                *(_QWORD *)(v21 + 112) = v49;
                *(_QWORD *)(v21 + 120) = v32;
                swift_release();
                swift_unknownObjectRelease();
                v2 = (_QWORD *)*v61;
              }
              ++v5;
            }
            ++v3;
          }
          while (v3 != v2[2]);
        }
      }
      else
      {
        v5 = 0;
      }
LABEL_15:
      sub_1B1C92798(v5, v3);
      v2 = *(_QWORD **)(v1 + 112);
      *(_QWORD *)(v1 + 120) = v2[2];
    }
    v12 = v2[2];
    if (v12)
    {
      v13 = *(_QWORD *)(v1 + 120);
      if (v13 != v12)
        sub_1B1C92798(v13, v12);
    }
    v14 = (uint64_t *)(v1 + 136);
    v62 = *(_QWORD *)(v1 + 128);
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    sub_1B19F5470(v15);
    sub_1B19F5470(*(_QWORD *)(v1 + 112));
    *(_QWORD *)(v1 + 112) = v62;
    sub_1B204E3B8(v61);
    *(_QWORD *)(v1 + 120) = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v17 = *(_QWORD *)(v1 + 128);
    if ((v16 & 1) != 0)
    {
      sub_1B1C92798(0, *(_QWORD *)(v17 + 16));
    }
    else
    {
      *(_QWORD *)(v1 + 128) = sub_1B1B1C9EC(0, *(_QWORD *)(v17 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    v18 = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v14;
    if (v18)
    {
      sub_1B1C92798(0, *(_QWORD *)(v19 + 16));
    }
    else
    {
      *v14 = (uint64_t)sub_1B1B1C9EC(0, *(_QWORD *)(v19 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    *(_BYTE *)(v1 + 161) = 0;
  }
}

uint64_t sub_1B204F244(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  int v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  char v121;
  char v122;
  char v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;

  v2 = v1;
  v4 = a1[1];
  result = sub_1B22299E8();
  if (result >= v4)
  {
    if ((unint64_t)v4 >= 2)
    {
      v9 = *a1;
      v10 = *a1 + 176;
      v11 = -1;
      for (i = 1; i != v4; ++i)
      {
        v13 = v9 + 96 * i;
        v14 = *(_QWORD *)(v13 + 56);
        v15 = *(_QWORD *)(v13 + 64);
        v16 = v11;
        v17 = (_OWORD *)v10;
        do
        {
          v33 = *((_QWORD *)v17 - 15);
          if (v33 >= v14 && (v14 < v33 || v15 >= *((_QWORD *)v17 - 14)))
            break;
          v18 = v17 - 5;
          v19 = *((_QWORD *)v17 - 10);
          result = (uint64_t)(v17 - 11);
          v20 = *((_BYTE *)v17 - 48);
          v21 = *((_BYTE *)v17 - 8);
          v22 = *((_BYTE *)v17 - 7);
          v23 = *((_BYTE *)v17 - 6);
          v24 = *((_DWORD *)v17 - 1);
          v25 = *(v17 - 4);
          v26 = *(_OWORD *)((char *)v17 - 40);
          v27 = *((_QWORD *)v17 - 9);
          v28 = *v17;
          v29 = *(v17 - 8);
          v18[2] = *(v17 - 9);
          v18[3] = v29;
          v30 = *(v17 - 6);
          v18[4] = *(v17 - 7);
          *v17 = v30;
          v31 = *(v17 - 10);
          *v18 = *(v17 - 11);
          v18[1] = v31;
          *(v17 - 6) = v28;
          v17 -= 6;
          *((_QWORD *)v17 - 10) = v19;
          *((_QWORD *)v17 - 9) = v27;
          *(v17 - 4) = v25;
          *((_BYTE *)v17 - 48) = v20;
          *(_OWORD *)((char *)v17 - 40) = v26;
          *((_QWORD *)v17 - 3) = v14;
          *((_QWORD *)v17 - 2) = v15;
          *((_BYTE *)v17 - 8) = v21;
          *((_BYTE *)v17 - 7) = v22;
          *((_BYTE *)v17 - 6) = v23;
          *((_DWORD *)v17 - 1) = v24;
        }
        while (!__CFADD__(v16++, 1));
        v10 += 96;
        --v11;
      }
    }
    return result;
  }
  v114 = result;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v110 = a1;
  if (v4 < 2)
  {
    v35 = MEMORY[0x1E0DEE9D8];
    v125 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v4 != 1)
    {
      v38 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v37 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_92;
    }
    v113 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_1B2228B0C();
    *(_QWORD *)(v8 + 16) = v7;
    v113 = v8;
    v125 = (char *)(v8 + 32);
  }
  v36 = 0;
  v112 = *a1 + 64;
  v126 = *a1;
  v111 = *a1 + 80;
  v37 = (char *)MEMORY[0x1E0DEE9D8];
  v115 = v4;
  do
  {
    v39 = v36++;
    if (v36 >= v4)
      goto LABEL_52;
    v40 = v126 + 96 * v36;
    v42 = *(_QWORD *)(v40 + 56);
    v41 = *(_QWORD *)(v40 + 64);
    v43 = v126 + 96 * v39;
    v44 = *(_QWORD *)(v43 + 56);
    if (v44 >= v42)
    {
      if (v42 >= v44)
      {
        v45 = v41 < *(_QWORD *)(v43 + 64);
        v36 = v39 + 2;
        if (v39 + 2 >= v4)
          goto LABEL_45;
      }
      else
      {
        v36 = v39 + 2;
        if (v39 + 2 >= v4)
          goto LABEL_52;
        v45 = 0;
      }
LABEL_32:
      if (v4 <= v36 + 1)
        v46 = v36 + 1;
      else
        v46 = v4;
      v47 = (uint64_t *)(v112 + 96 * v36);
      do
      {
        v48 = *(v47 - 1);
        v49 = *v47;
        if (v42 < v48)
        {
          if (!v45)
            goto LABEL_52;
        }
        else if (v48 >= v42)
        {
          if (((v45 ^ (v49 >= v41)) & 1) == 0)
            goto LABEL_45;
        }
        else if (v45)
        {
          goto LABEL_46;
        }
        v47 += 12;
        ++v36;
        v41 = v49;
        v42 = v48;
      }
      while (v36 < v4);
      v36 = v46;
LABEL_45:
      if (!v45)
        goto LABEL_52;
      goto LABEL_46;
    }
    v36 = v39 + 2;
    if (v39 + 2 < v4)
    {
      v45 = 1;
      goto LABEL_32;
    }
LABEL_46:
    if (v39 < v36)
    {
      v50 = 96 * v36;
      v51 = 96 * v39;
      v52 = v36;
      v109 = v39;
      do
      {
        if (v39 != --v52)
        {
          v53 = v2;
          v54 = v37;
          v55 = *(_QWORD *)(v126 + v51);
          v56 = v126 + v50;
          v57 = *(_BYTE *)(v126 + v51 + 32);
          v124 = v53;
          v122 = *(_BYTE *)(v126 + v51 + 73);
          v123 = *(_BYTE *)(v126 + v51 + 72);
          v120 = *(_DWORD *)(v126 + v51 + 76);
          v121 = *(_BYTE *)(v126 + v51 + 74);
          v116 = *(_OWORD *)(v126 + v51 + 16);
          v117 = *(_OWORD *)(v126 + v51 + 56);
          v58 = *(_QWORD *)(v126 + v51 + 8);
          v118 = *(_OWORD *)(v126 + v51 + 40);
          v119 = *(_OWORD *)(v126 + v51 + 80);
          memmove((void *)(v126 + v51), (const void *)(v126 + v50 - 96), 0x60uLL);
          *(_QWORD *)(v56 - 96) = v55;
          v37 = v54;
          *(_QWORD *)(v56 - 88) = v58;
          *(_OWORD *)(v56 - 80) = v116;
          *(_BYTE *)(v56 - 64) = v57;
          *(_OWORD *)(v56 - 56) = v118;
          *(_OWORD *)(v56 - 40) = v117;
          *(_BYTE *)(v56 - 24) = v123;
          v2 = v124;
          *(_BYTE *)(v56 - 23) = v122;
          *(_BYTE *)(v56 - 22) = v121;
          *(_DWORD *)(v56 - 20) = v120;
          *(_OWORD *)(v56 - 16) = v119;
        }
        ++v39;
        v50 -= 96;
        v51 += 96;
      }
      while (v39 < v52);
      v4 = v115;
      v39 = v109;
    }
LABEL_52:
    if (v36 < v4 && v36 - v39 < v114)
    {
      v59 = v39 + v114;
      if (v39 + v114 >= v4)
        v59 = v4;
      if (v36 != v59)
      {
        v60 = (_OWORD *)(v111 + 96 * v36);
        do
        {
          v61 = v126 + 96 * v36;
          v62 = *(_QWORD *)(v61 + 56);
          v63 = *(_QWORD *)(v61 + 64);
          v64 = v39;
          v65 = v60;
          do
          {
            v80 = *((_QWORD *)v65 - 15);
            if (v80 >= v62 && (v62 < v80 || v63 >= *((_QWORD *)v65 - 14)))
              break;
            v66 = v65 - 5;
            v67 = *((_QWORD *)v65 - 10);
            v68 = *((_BYTE *)v65 - 48);
            v69 = *((_BYTE *)v65 - 8);
            v70 = *((_BYTE *)v65 - 7);
            v71 = *((_BYTE *)v65 - 6);
            v72 = *((_DWORD *)v65 - 1);
            v73 = *(v65 - 4);
            v74 = *(_OWORD *)((char *)v65 - 40);
            v75 = *((_QWORD *)v65 - 9);
            v76 = *v65;
            v77 = *(v65 - 8);
            v66[2] = *(v65 - 9);
            v66[3] = v77;
            v78 = *(v65 - 6);
            v66[4] = *(v65 - 7);
            *v65 = v78;
            v79 = *(v65 - 10);
            *v66 = *(v65 - 11);
            v66[1] = v79;
            *(v65 - 6) = v76;
            v65 -= 6;
            *((_QWORD *)v65 - 10) = v67;
            *((_QWORD *)v65 - 9) = v75;
            *(v65 - 4) = v73;
            *((_BYTE *)v65 - 48) = v68;
            *(_OWORD *)((char *)v65 - 40) = v74;
            *((_QWORD *)v65 - 3) = v62;
            *((_QWORD *)v65 - 2) = v63;
            *((_BYTE *)v65 - 8) = v69;
            *((_BYTE *)v65 - 7) = v70;
            *((_BYTE *)v65 - 6) = v71;
            ++v64;
            *((_DWORD *)v65 - 1) = v72;
          }
          while (v36 != v64);
          ++v36;
          v60 += 6;
        }
        while (v36 != v59);
        v36 = v59;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v37 = sub_1B216CC74(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
    v83 = *((_QWORD *)v37 + 2);
    v82 = *((_QWORD *)v37 + 3);
    v38 = v83 + 1;
    if (v83 >= v82 >> 1)
      v37 = sub_1B216CC74(v82 > 1, v83 + 1, 1, v37);
    *((_QWORD *)v37 + 2) = v38;
    v84 = v37 + 32;
    v85 = &v37[16 * v83 + 32];
    *(_QWORD *)v85 = v39;
    *((_QWORD *)v85 + 1) = v36;
    if (v83)
    {
      while (1)
      {
        v86 = v38 - 1;
        if (v38 >= 4)
        {
          v91 = &v84[16 * v38];
          v92 = *((_QWORD *)v91 - 7) - *((_QWORD *)v91 - 8);
          v89 = *((_QWORD *)v91 - 5) - *((_QWORD *)v91 - 6);
          v90 = v38 - 2;
          v93 = &v84[16 * v38 - 32];
          v87 = *(_QWORD *)v93;
          v88 = *((_QWORD *)v93 + 1);
          if (v89 - v87 + v88 >= v92)
          {
            v96 = v89 < *(_QWORD *)&v84[16 * v86 + 8] - *(_QWORD *)&v84[16 * v86];
            goto LABEL_83;
          }
        }
        else
        {
          if (v38 != 3)
          {
            v94 = *(_QWORD *)&v84[16 * v38 - 24] - *(_QWORD *)&v84[16 * v38 - 32];
            v95 = *(_QWORD *)&v84[16 * v86 + 8] - *(_QWORD *)&v84[16 * v86];
LABEL_80:
            if (v95 < v94)
              goto LABEL_23;
            goto LABEL_85;
          }
          v87 = *((_QWORD *)v37 + 6);
          v88 = *((_QWORD *)v37 + 7);
          v89 = *((_QWORD *)v37 + 5) - *((_QWORD *)v37 + 4);
          v90 = 1;
        }
        v94 = v88 - v87;
        v95 = *(_QWORD *)&v84[16 * v86 + 8] - *(_QWORD *)&v84[16 * v86];
        if (v94 + v95 < v89)
          goto LABEL_80;
        v96 = v89 < v95;
LABEL_83:
        if (v96)
          v86 = v90;
LABEL_85:
        v97 = v37;
        v98 = &v84[16 * v86 - 16];
        v99 = *(_QWORD *)v98;
        v100 = &v84[16 * v86];
        v101 = *((_QWORD *)v100 + 1);
        sub_1B2050344((char *)(v126 + 96 * *(_QWORD *)v98), (char *)(v126 + 96 * *(_QWORD *)v100), v126 + 96 * v101, v125);
        if (v2)
          goto LABEL_88;
        *(_QWORD *)v98 = v99;
        *((_QWORD *)v98 + 1) = v101;
        v37 = v97;
        v102 = *((_QWORD *)v97 + 2);
        v38 = v102 - 1;
        memmove(&v84[16 * v86], v100 + 16, 16 * (v102 - 1 - v86));
        *((_QWORD *)v37 + 2) = v102 - 1;
        if (v102 <= 2)
          goto LABEL_23;
      }
    }
    v38 = 1;
LABEL_23:
    v4 = v115;
  }
  while (v36 < v115);
  v35 = v113;
LABEL_92:
  v113 = v35;
  if (v38 >= 2)
  {
    v103 = *v110;
    do
    {
      v104 = *(_QWORD *)&v37[16 * v38];
      v105 = &v37[16 * v38 + 16];
      v106 = *((_QWORD *)v105 + 1);
      sub_1B2050344((char *)(v103 + 96 * v104), (char *)(v103 + 96 * *(_QWORD *)v105), v103 + 96 * v106, v125);
      if (v2)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v37 = sub_1B216D510((uint64_t)v37);
      v107 = &v37[16 * v38];
      *(_QWORD *)v107 = v104;
      *((_QWORD *)v107 + 1) = v106;
      v108 = *((_QWORD *)v37 + 2);
      memmove(&v37[16 * v38 + 16], &v37[16 * v38 + 32], 16 * (v108 - v38));
      *((_QWORD *)v37 + 2) = v108 - 1;
      v38 = v108 - 1;
    }
    while (v108 > 2);
  }
LABEL_88:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v113 + 16) = 0;
  return swift_bridgeObjectRelease();
}

int64_t sub_1B204F9E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  char v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;

  v3 = v2;
  v5 = a1[1];
  result = sub_1B22299E8();
  if (result >= v5)
  {
    if (v5)
      return sub_1B20501D0(0, v5, 1, a1, a2);
  }
  else
  {
    v103 = result;
    if (v5 >= 0)
      v7 = v5;
    else
      v7 = v5 + 1;
    if (v5 < -1)
    {
      result = sub_1B222967C();
      __break(1u);
    }
    else
    {
      v99 = a1;
      if (v5 >= 2)
      {
        v8 = v7 >> 1;
        v9 = sub_1B2228B0C();
        *(_QWORD *)(v9 + 16) = v8;
        v102 = v9;
        v116 = (uint64_t *)(v9 + 32);
LABEL_12:
        v11 = 0;
        v101 = *a1 + 96;
        v118 = *a1;
        v100 = *a1 + 80;
        v12 = (char *)MEMORY[0x1E0DEE9D8];
        v105 = v5;
        while (1)
        {
          v14 = v11++;
          v104 = v12;
          v117 = v14;
          if (v11 >= v5)
            goto LABEL_47;
          v15 = *(_QWORD *)(v118 + 96 * v14);
          v16 = *a2;
          if (*(_QWORD *)(*a2 + 16) && (v17 = sub_1B1DC3B48(*(_QWORD *)(v118 + 96 * v11)), (v18 & 1) != 0))
            v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          else
            v19 = -1;
          v20 = *a2;
          if (*(_QWORD *)(*a2 + 16) && (v21 = sub_1B1DC3B48(v15), (v22 & 1) != 0))
            v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
          else
            v23 = -1;
          v14 = v117;
          v11 = v117 + 2;
          if (v117 + 2 < v105)
          {
            v24 = (uint64_t *)(v101 + 96 * v117);
            do
            {
              v25 = *v24;
              v26 = *a2;
              if (*(_QWORD *)(*a2 + 16) && (v27 = sub_1B1DC3B48(v24[12]), (v28 & 1) != 0))
                v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
              else
                v29 = -1;
              v30 = *a2;
              if (*(_QWORD *)(*a2 + 16) && (v31 = sub_1B1DC3B48(v25), (v32 & 1) != 0))
              {
                if (v19 < v23 == v29 >= *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31))
                  goto LABEL_37;
              }
              else if (v19 < v23 == v29 > -2)
              {
                goto LABEL_37;
              }
              ++v11;
              v24 += 12;
            }
            while (v105 != v11);
            v11 = v105;
LABEL_37:
            v12 = v104;
            v14 = v117;
          }
          if (v19 >= v23)
          {
            v5 = v105;
            if (v11 >= v105)
              goto LABEL_66;
            goto LABEL_48;
          }
          if (v14 >= v11)
            break;
          v33 = 96 * v11;
          v34 = 96 * v14;
          v35 = v14;
          v36 = v11;
          do
          {
            if (v35 != --v36)
            {
              v37 = *(_QWORD *)(v118 + v34);
              v38 = v118 + v33;
              v39 = v3;
              v40 = *(_BYTE *)(v118 + v34 + 32);
              v114 = *(_BYTE *)(v118 + v34 + 72);
              v111 = *(_BYTE *)(v118 + v34 + 74);
              v112 = *(_BYTE *)(v118 + v34 + 73);
              v110 = *(_DWORD *)(v118 + v34 + 76);
              v106 = *(_OWORD *)(v118 + v34 + 16);
              v107 = *(_OWORD *)(v118 + v34 + 56);
              v41 = *(_QWORD *)(v118 + v34 + 8);
              v108 = *(_OWORD *)(v118 + v34 + 40);
              v109 = *(_OWORD *)(v118 + v34 + 80);
              memmove((void *)(v118 + v34), (const void *)(v118 + v33 - 96), 0x60uLL);
              *(_QWORD *)(v38 - 96) = v37;
              *(_QWORD *)(v38 - 88) = v41;
              *(_OWORD *)(v38 - 80) = v106;
              *(_BYTE *)(v38 - 64) = v40;
              v3 = v39;
              *(_OWORD *)(v38 - 56) = v108;
              *(_OWORD *)(v38 - 40) = v107;
              *(_BYTE *)(v38 - 24) = v114;
              *(_BYTE *)(v38 - 23) = v112;
              *(_BYTE *)(v38 - 22) = v111;
              *(_DWORD *)(v38 - 20) = v110;
              *(_OWORD *)(v38 - 16) = v109;
              v12 = v104;
            }
            ++v35;
            v33 -= 96;
            v34 += 96;
          }
          while (v35 < v36);
          v5 = v105;
          v14 = v117;
          if (v11 >= v105)
            goto LABEL_66;
LABEL_48:
          if (v11 - v14 < v103)
          {
            v42 = v14 + v103;
            if (v14 + v103 >= v5)
              v42 = v5;
            v115 = v42;
            if (v11 != v42)
            {
              v113 = v3;
              v43 = (_OWORD *)(v100 + 96 * v11);
              while (1)
              {
                v44 = v14;
                v45 = v43;
                do
                {
                  v60 = *((_QWORD *)v45 - 22);
                  v61 = (uint64_t *)(v45 - 5);
                  v62 = *a2;
                  if (*(_QWORD *)(*a2 + 16) && (v63 = sub_1B1DC3B48(*v61), (v64 & 1) != 0))
                    v65 = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v63);
                  else
                    v65 = -1;
                  v66 = *a2;
                  if (!*(_QWORD *)(*a2 + 16) || (v67 = sub_1B1DC3B48(v60), (v68 & 1) == 0))
                  {
                    if (v65 >= -1)
                      break;
                    goto LABEL_56;
                  }
                  if (v65 >= *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67))
                    break;
LABEL_56:
                  v46 = *((_QWORD *)v45 - 10);
                  v47 = *((_BYTE *)v45 - 48);
                  v48 = *((_BYTE *)v45 - 8);
                  v49 = *((_BYTE *)v45 - 7);
                  v50 = *((_BYTE *)v45 - 6);
                  v51 = *((_DWORD *)v45 - 1);
                  v52 = *(v45 - 4);
                  v53 = *(_OWORD *)((char *)v45 - 40);
                  v54 = *(_OWORD *)((char *)v45 - 24);
                  v55 = *((_QWORD *)v45 - 9);
                  v56 = *v45;
                  v57 = *(v45 - 8);
                  *(v45 - 3) = *(v45 - 9);
                  *(v45 - 2) = v57;
                  v58 = *(v45 - 6);
                  *(v45 - 1) = *(v45 - 7);
                  *v45 = v58;
                  v59 = *(v45 - 10);
                  *(_OWORD *)v61 = *(v45 - 11);
                  *(v45 - 4) = v59;
                  *(v45 - 6) = v56;
                  v45 -= 6;
                  *((_QWORD *)v45 - 10) = v46;
                  *((_QWORD *)v45 - 9) = v55;
                  *(v45 - 4) = v52;
                  *((_BYTE *)v45 - 48) = v47;
                  *(_OWORD *)((char *)v45 - 40) = v53;
                  *(_OWORD *)((char *)v45 - 24) = v54;
                  *((_BYTE *)v45 - 8) = v48;
                  *((_BYTE *)v45 - 7) = v49;
                  *((_BYTE *)v45 - 6) = v50;
                  ++v44;
                  *((_DWORD *)v45 - 1) = v51;
                }
                while (v11 != v44);
                ++v11;
                v43 += 6;
                v14 = v117;
                if (v11 == v115)
                {
                  v3 = v113;
                  v11 = v115;
                  v12 = v104;
                  break;
                }
              }
            }
          }
LABEL_66:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = sub_1B216CC74(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
          v70 = *((_QWORD *)v12 + 2);
          v69 = *((_QWORD *)v12 + 3);
          v13 = v70 + 1;
          if (v70 >= v69 >> 1)
            v12 = sub_1B216CC74(v69 > 1, v70 + 1, 1, v12);
          *((_QWORD *)v12 + 2) = v13;
          v71 = v12 + 32;
          v72 = &v12[16 * v70 + 32];
          *(_QWORD *)v72 = v14;
          *((_QWORD *)v72 + 1) = v11;
          if (v70)
          {
            while (1)
            {
              v73 = v13 - 1;
              if (v13 >= 4)
              {
                v78 = &v71[16 * v13];
                v79 = *((_QWORD *)v78 - 7) - *((_QWORD *)v78 - 8);
                v76 = *((_QWORD *)v78 - 5) - *((_QWORD *)v78 - 6);
                v77 = v13 - 2;
                v80 = &v71[16 * v13 - 32];
                v74 = *(_QWORD *)v80;
                v75 = *((_QWORD *)v80 + 1);
                if (v76 - v74 + v75 >= v79)
                {
                  v83 = v76 < *(_QWORD *)&v71[16 * v73 + 8] - *(_QWORD *)&v71[16 * v73];
                  goto LABEL_81;
                }
              }
              else
              {
                if (v13 != 3)
                {
                  v81 = *(_QWORD *)&v71[16 * v13 - 24] - *(_QWORD *)&v12[16 * v13];
                  v82 = *(_QWORD *)&v71[16 * v73 + 8] - *(_QWORD *)&v71[16 * v73];
LABEL_78:
                  if (v82 < v81)
                    goto LABEL_14;
                  goto LABEL_83;
                }
                v74 = *((_QWORD *)v12 + 6);
                v75 = *((_QWORD *)v12 + 7);
                v76 = *((_QWORD *)v12 + 5) - *((_QWORD *)v12 + 4);
                v77 = 1;
              }
              v81 = v75 - v74;
              v82 = *(_QWORD *)&v71[16 * v73 + 8] - *(_QWORD *)&v71[16 * v73];
              if (v81 + v82 < v76)
                goto LABEL_78;
              v83 = v76 < v82;
LABEL_81:
              if (v83)
                v73 = v77;
LABEL_83:
              v84 = &v71[16 * v73 - 16];
              v85 = *(_QWORD *)v84;
              v86 = &v71[16 * v73];
              v87 = *((_QWORD *)v86 + 1);
              sub_1B2050624((uint64_t *)(v118 + 96 * *(_QWORD *)v84), (uint64_t *)(v118 + 96 * *(_QWORD *)v86), v118 + 96 * v87, v116, a2);
              if (v3)
                goto LABEL_97;
              *(_QWORD *)v84 = v85;
              *((_QWORD *)v84 + 1) = v87;
              v88 = *((_QWORD *)v12 + 2);
              v13 = v88 - 1;
              memmove(&v71[16 * v73], v86 + 16, 16 * (v88 - 1 - v73));
              *((_QWORD *)v12 + 2) = v88 - 1;
              if (v88 <= 2)
                goto LABEL_14;
            }
          }
          v13 = 1;
LABEL_14:
          v5 = v105;
          if (v11 >= v105)
          {
            v10 = v102;
            goto LABEL_90;
          }
        }
        v5 = v105;
LABEL_47:
        if (v11 >= v5)
          goto LABEL_66;
        goto LABEL_48;
      }
      v10 = MEMORY[0x1E0DEE9D8];
      v116 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
      if (v5 == 1)
      {
        v102 = MEMORY[0x1E0DEE9D8];
        goto LABEL_12;
      }
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_90:
      v89 = (uint64_t)v12;
      v102 = v10;
      v90 = v3;
      if (v13 < 2)
      {
LABEL_96:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v102 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      else
      {
        v91 = *v99;
        while (1)
        {
          v92 = *(_QWORD *)(v89 + 32 + 16 * (v13 - 2));
          v93 = (_QWORD *)(v89 + 32 + 16 * (v13 - 1));
          v94 = v93[1];
          sub_1B2050624((uint64_t *)(v91 + 96 * v92), (uint64_t *)(v91 + 96 * *v93), v91 + 96 * v94, v116, a2);
          if (v90)
            break;
          v95 = (char *)v89;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v95 = sub_1B216D510(v89);
          v89 = (uint64_t)v95;
          v96 = v95 + 32;
          v97 = &v95[16 * v13];
          *(_QWORD *)v97 = v92;
          *((_QWORD *)v97 + 1) = v94;
          v98 = *((_QWORD *)v95 + 2);
          memmove(&v96[16 * v13 - 16], &v96[16 * v13], 16 * (v98 - v13));
          *(_QWORD *)(v89 + 16) = v98 - 1;
          v13 = v98 - 1;
          if (v98 <= 2)
            goto LABEL_96;
        }
LABEL_97:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v102 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

unint64_t sub_1B20501D0(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  _OWORD *v32;

  v30 = result;
  if (a3 != a2)
  {
    v6 = a3;
    v7 = (_OWORD *)(*a4 + 96 * a3 + 80);
    do
    {
      v8 = v30;
      v32 = v7;
      do
      {
        v23 = *((_QWORD *)v7 - 22);
        v24 = (uint64_t *)(v7 - 5);
        v25 = *a5;
        if (*(_QWORD *)(*a5 + 16) && (result = sub_1B1DC3B48(*v24), (v26 & 1) != 0))
          v27 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * result);
        else
          v27 = -1;
        v28 = *a5;
        if (!*(_QWORD *)(*a5 + 16) || (result = sub_1B1DC3B48(v23), (v29 & 1) == 0))
        {
          if (v27 >= -1)
            break;
          goto LABEL_7;
        }
        if (v27 >= *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * result))
          break;
LABEL_7:
        v9 = *((_QWORD *)v7 - 10);
        v10 = *((_BYTE *)v7 - 48);
        v11 = *((_BYTE *)v7 - 8);
        v12 = *((_BYTE *)v7 - 7);
        v13 = *((_BYTE *)v7 - 6);
        v14 = *((_DWORD *)v7 - 1);
        v15 = *(v7 - 4);
        v16 = *(_OWORD *)((char *)v7 - 40);
        v17 = *(_OWORD *)((char *)v7 - 24);
        v18 = *((_QWORD *)v7 - 9);
        v19 = *v7;
        v20 = *(v7 - 8);
        *(v7 - 3) = *(v7 - 9);
        *(v7 - 2) = v20;
        v21 = *(v7 - 6);
        *(v7 - 1) = *(v7 - 7);
        *v7 = v21;
        v22 = *(v7 - 10);
        *(_OWORD *)v24 = *(v7 - 11);
        *(v7 - 4) = v22;
        *(v7 - 6) = v19;
        v7 -= 6;
        *((_QWORD *)v7 - 10) = v9;
        *((_QWORD *)v7 - 9) = v18;
        *(v7 - 4) = v15;
        *((_BYTE *)v7 - 48) = v10;
        *(_OWORD *)((char *)v7 - 40) = v16;
        *(_OWORD *)((char *)v7 - 24) = v17;
        *((_BYTE *)v7 - 8) = v11;
        *((_BYTE *)v7 - 7) = v12;
        *((_BYTE *)v7 - 6) = v13;
        ++v8;
        *((_DWORD *)v7 - 1) = v14;
      }
      while (v6 != v8);
      ++v6;
      v7 = v32 + 6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_1B2050344(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t result;
  char *v27;
  const void *v28;
  char *v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 96;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 96;
  v29 = __dst;
  v28 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      if (a4 != __src || &__src[96 * v11] <= a4)
        memmove(a4, __src, 96 * v11);
      v19 = &v4[96 * v11];
      v27 = v19;
      v29 = v6;
      if (v7 < v6 && v10 >= 96)
      {
        v20 = (char *)(a3 - 96);
        do
        {
          v21 = v20 + 96;
          v22 = *((_QWORD *)v19 - 5);
          v23 = *((_QWORD *)v6 - 5);
          if (v23 < v22 || (v22 >= v23 ? (v24 = *((_QWORD *)v19 - 4) < *((_QWORD *)v6 - 4)) : (v24 = 0), v24))
          {
            v25 = v6 - 96;
            if (v21 != v6 || v20 >= v6)
              memmove(v20, v6 - 96, 0x60uLL);
            v29 = v6 - 96;
            if (v25 <= v7)
              break;
          }
          else
          {
            v27 = v19 - 96;
            if (v21 < v19 || v20 >= v19 || v21 != v19)
              memmove(v20, v19 - 96, 0x60uLL);
            v25 = v6;
            v19 -= 96;
            if (v6 <= v7)
              break;
          }
          v20 -= 96;
          v6 = v25;
        }
        while (v19 > v4);
      }
LABEL_48:
      sub_1B216D250((void **)&v29, &v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    if (a4 != __dst || &__dst[96 * v9] <= a4)
      memmove(a4, __dst, 96 * v9);
    v12 = &v4[96 * v9];
    v27 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      v13 = v4;
      while (1)
      {
        v14 = *((_QWORD *)v6 + 7);
        v15 = *((_QWORD *)v13 + 7);
        if (v15 < v14 || (v14 >= v15 ? (v16 = *((_QWORD *)v6 + 8) < *((_QWORD *)v13 + 8)) : (v16 = 0), v16))
        {
          v18 = v6 + 96;
          v17 = v6;
          if (v7 == v6 && v7 < v18)
            goto LABEL_22;
        }
        else
        {
          v4 = v13 + 96;
          v17 = v13;
          v18 = v6;
          if (v7 == v13)
          {
            v13 += 96;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v13 += 96;
          }
        }
        memmove(v7, v17, 0x60uLL);
LABEL_22:
        v7 += 96;
        if (v13 < v12)
        {
          v6 = v18;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v28 = v4;
        v29 = v7;
        goto LABEL_48;
      }
    }
    goto LABEL_48;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B2050624(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  uint64_t *v37;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = (char *)a2 - (char *)__src;
  v10 = ((char *)a2 - (char *)__src) / 96;
  v11 = a3 - (_QWORD)a2;
  v12 = (uint64_t)(a3 - (_QWORD)a2) / 96;
  v41 = __src;
  v40 = __dst;
  if (v10 >= v12)
  {
    if (v11 < -95)
      goto LABEL_53;
    if (__dst != a2 || &a2[12 * v12] <= __dst)
      memmove(__dst, a2, 96 * v12);
    v23 = &v5[12 * v12];
    v39 = v23;
    v41 = v7;
    if (v8 >= v7 || v11 < 96)
    {
LABEL_52:
      sub_1B216D250((void **)&v41, (const void **)&v40, &v39);
      return 1;
    }
    v24 = (char *)(a3 - 96);
    v25 = v7;
    v37 = v5;
    while (1)
    {
      v27 = *(v25 - 12);
      v25 -= 12;
      v26 = v27;
      v28 = *a5;
      if (*(_QWORD *)(*a5 + 16) && (v29 = sub_1B1DC3B48(*(v23 - 12)), (v30 & 1) != 0))
        v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
      else
        v31 = -1;
      v32 = (uint64_t *)(v24 + 96);
      v33 = *a5;
      if (*(_QWORD *)(*a5 + 16) && (v34 = sub_1B1DC3B48(v26), (v35 & 1) != 0))
      {
        if (v31 < *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v34))
          goto LABEL_46;
      }
      else if (v31 < -1)
      {
LABEL_46:
        if (v32 != v7 || v24 >= (char *)v7)
          memmove(v24, v25, 0x60uLL);
        v41 = v25;
        goto LABEL_50;
      }
      v39 = v23 - 12;
      if (v32 < v23 || v24 >= (char *)v23 || v32 != v23)
        memmove(v24, v23 - 12, 0x60uLL);
      v25 = v7;
      v23 -= 12;
LABEL_50:
      if (v25 > v8)
      {
        v24 -= 96;
        v7 = v25;
        if (v23 > v37)
          continue;
      }
      goto LABEL_52;
    }
  }
  if (v9 >= -95)
  {
    if (__dst != __src || &__src[12 * v10] <= __dst)
      memmove(__dst, __src, 96 * v10);
    v13 = &v5[12 * v10];
    v39 = v13;
    if ((unint64_t)v7 < a3 && v9 >= 96)
    {
      while (1)
      {
        v14 = *v5;
        v15 = *a5;
        if (*(_QWORD *)(*a5 + 16) && (v16 = sub_1B1DC3B48(*v7), (v17 & 1) != 0))
          v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
        else
          v18 = -1;
        v19 = *a5;
        if (*(_QWORD *)(*a5 + 16) && (v20 = sub_1B1DC3B48(v14), (v21 & 1) != 0))
        {
          if (v18 < *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20))
            goto LABEL_19;
        }
        else if (v18 < -1)
        {
LABEL_19:
          v22 = v7 + 12;
          if (v8 < v7 || v8 >= v22 || v8 != v7)
            memmove(v8, v7, 0x60uLL);
          goto LABEL_23;
        }
        if (v8 != v5)
          memmove(v8, v5, 0x60uLL);
        v5 += 12;
        v40 = v5;
        v22 = v7;
LABEL_23:
        v8 += 12;
        if (v5 < v13)
        {
          v7 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        v41 = v8;
        goto LABEL_52;
      }
    }
    goto LABEL_52;
  }
LABEL_53:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B2050984(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t i;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v3)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = (uint64_t)&v2[12 * v4 + 4];
    v6 = *(_DWORD *)(v5 + 8);
    v7 = *(_DWORD *)(v5 + 12);
    if (v6 != -1 || v7 != 0)
    {
      v9 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        sub_1B222A06C();
        sub_1B222A09C();
        sub_1B222A09C();
        v10 = sub_1B222A0C0();
        v11 = -1 << *(_BYTE *)(v9 + 32);
        v12 = v10 & ~v11;
        if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          break;
      }
    }
LABEL_3:
    if (++v4 == v3)
      return v2[2];
  }
  v13 = ~v11;
  while (1)
  {
    v14 = (int *)(*(_QWORD *)(v9 + 48) + 8 * v12);
    v16 = *v14;
    v15 = v14[1];
    if (v16 == v6 && v15 == v7)
      break;
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_3;
  }
  for (i = v4 + 1; i != v2[2]; ++i)
  {
    v23 = v2 + 4;
    v24 = (uint64_t)&v2[12 * i + 4];
    v25 = *(_DWORD *)(v24 + 8);
    v26 = *(_DWORD *)(v24 + 12);
    v27 = v25 == -1 && v26 == 0;
    if (!v27
      && (v28 = *a2, *(_QWORD *)(*a2 + 16))
      && (sub_1B222A06C(),
          sub_1B222A09C(),
          sub_1B222A09C(),
          v29 = sub_1B222A0C0(),
          v30 = -1 << *(_BYTE *)(v28 + 32),
          v31 = v29 & ~v30,
          ((*(_QWORD *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0))
    {
      v32 = ~v30;
      while (1)
      {
        v33 = (int *)(*(_QWORD *)(v28 + 48) + 8 * v31);
        v35 = *v33;
        v34 = v33[1];
        if (v35 == v25 && v34 == v26)
          break;
        v31 = (v31 + 1) & v32;
        if (((*(_QWORD *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_34:
      if (v4 != i)
      {
        v37 = &v23[12 * v4];
        v38 = v37[1];
        v69 = v37[2];
        v70 = *v37;
        v68 = v37[3];
        v67 = *((_BYTE *)v37 + 32);
        v39 = v37[5];
        v65 = v37[7];
        v66 = v37[6];
        v64 = v37[8];
        v62 = *((_BYTE *)v37 + 73);
        v63 = *((_BYTE *)v37 + 72);
        v60 = *((_DWORD *)v37 + 19);
        v61 = *((_BYTE *)v37 + 74);
        v40 = v37[11];
        v58 = *(_QWORD *)v24;
        v59 = v37[10];
        v41 = *(_QWORD *)(v24 + 8);
        v42 = &v23[12 * i];
        v56 = v42[3];
        v57 = v42[2];
        v55 = *((_BYTE *)v42 + 32);
        v44 = v42[5];
        v43 = v42[6];
        v53 = v42[8];
        v54 = v42[7];
        v51 = *((_BYTE *)v42 + 73);
        v52 = *((_BYTE *)v42 + 72);
        v49 = *((_DWORD *)v42 + 19);
        v50 = *((_BYTE *)v42 + 74);
        v45 = v42[11];
        v48 = v42[10];
        swift_unknownObjectRetain();
        swift_retain();
        swift_unknownObjectRetain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = sub_1B1FFEEFC(v2);
        v19 = v2;
        v20 = v2 + 4;
        v21 = &v20[12 * v4];
        *v21 = v58;
        v21[1] = v41;
        v21[2] = v57;
        v21[3] = v56;
        *((_BYTE *)v21 + 32) = v55;
        v21[5] = v44;
        v21[6] = v43;
        v21[7] = v54;
        v21[8] = v53;
        *((_BYTE *)v21 + 72) = v52;
        *((_BYTE *)v21 + 73) = v51;
        *((_BYTE *)v21 + 74) = v50;
        *((_DWORD *)v21 + 19) = v49;
        v21[10] = v48;
        v21[11] = v45;
        swift_release();
        swift_unknownObjectRelease();
        v22 = &v20[12 * i];
        v2 = v19;
        *v22 = v70;
        v22[1] = v38;
        v22[2] = v69;
        v22[3] = v68;
        *((_BYTE *)v22 + 32) = v67;
        v22[5] = v39;
        v22[6] = v66;
        v22[7] = v65;
        v22[8] = v64;
        *((_BYTE *)v22 + 72) = v63;
        *((_BYTE *)v22 + 73) = v62;
        *((_BYTE *)v22 + 74) = v61;
        *((_DWORD *)v22 + 19) = v60;
        v22[10] = v59;
        v22[11] = v40;
        swift_release();
        swift_unknownObjectRelease();
        *(_QWORD *)a1 = v19;
      }
      ++v4;
    }
  }
  return v4;
}

uint64_t sub_1B2050DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t ObjectType;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  char v36;
  __int128 v38;
  _QWORD v40[4];
  char v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  int v48;
  __int128 v49;
  unsigned __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  int v60;
  __int128 v61;

  ObjectType = swift_getObjectType();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a10 + 32);
  v17 = swift_retain();
  v16(v17, a9, a10);
  swift_release();
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a10 + 24);
  if (v18(a9, a10) != qword_1EEF5DE78)
    a4 = v18(ObjectType, a10);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 16))(a9, a10);
  v21 = v20;
  v23 = v22;
  v24 = *(_QWORD *)(a8 + 24);
  swift_retain();
  swift_retain();
  v25 = swift_unknownObjectRetain();
  sub_1B20513E4(v25, a7, v19, v21, v23, a1, a10, a4, (uint64_t)v40, a5, 1, 1, a6 & 1, a2, a3, v24);
  v26 = v40[0];
  v27 = v40[2];
  v28 = v40[3];
  v29 = v41;
  v38 = v42;
  v30 = v43;
  v31 = v44;
  v32 = v45;
  LOBYTE(v24) = v46;
  v36 = v47;
  v33 = v48;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a8 + 56));
  v50 = __PAIR128__(v40[1], v26);
  v51 = v27;
  v52 = v28;
  v53 = v29;
  v54 = v38;
  v55 = v30;
  v56 = v31;
  v57 = v32;
  v58 = v24;
  v59 = v36;
  v60 = v33;
  v61 = v49;
  sub_1B2051678((uint64_t)v40);
  sub_1B1C91500(0, 0, &v50);
  sub_1B2051678((uint64_t)v40);
  sub_1B1C91500(0, 0, &v50);
  *(_WORD *)(a8 + 160) = 257;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a8 + 56));
  return sub_1B20516AC((uint64_t)v40);
}

void sub_1B2050FA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF627C8)
  {
    sub_1B205100C();
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF627C8);
  }
}

void sub_1B205100C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B7D0)
  {
    sub_1B1B9CE80();
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B7D0);
  }
}

uint64_t sub_1B2051060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  os_unfair_lock_s *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 24);
  result = swift_retain();
  if (!v4)
    return result;
  v6 = *(os_unfair_lock_s **)(a1 + 56);
  os_unfair_lock_lock(v6);
  type metadata accessor for HiddenSystem();
  v7 = sub_1B204E0B8();
  if ((v8 & 1) != 0)
  {
    os_unfair_lock_unlock(v6);
    return swift_release();
  }
  v31 = a2;
  v9 = *(_QWORD *)(a1 + 96) + 96 * v7;
  v35 = *(_QWORD *)(v9 + 32);
  v27 = *(unsigned int *)(v9 + 40);
  v25 = *(unsigned int *)(v9 + 44);
  v32 = *(_QWORD *)(v9 + 56);
  v33 = *(_QWORD *)(v9 + 48);
  v34 = *(unsigned __int8 *)(v9 + 64);
  v10 = *(_QWORD *)(v9 + 72);
  v36 = *(_QWORD *)(v9 + 80);
  v29 = *(_QWORD *)(v9 + 96);
  v30 = *(_QWORD *)(v9 + 88);
  v11 = *(unsigned __int8 *)(v9 + 104);
  v12 = *(unsigned __int8 *)(v9 + 105);
  v13 = *(unsigned __int8 *)(v9 + 106);
  v23 = *(unsigned int *)(v9 + 108);
  v14 = *(_QWORD *)(v9 + 112);
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v6);
  if (!v14)
    return swift_release();
  v15 = 256;
  if (!v12)
    v15 = 0;
  v16 = v15 | v11;
  v17 = 0x10000;
  if (!v13)
    v17 = 0;
  v18 = v16 | v17 | (v23 << 32);
  v19 = v27 | (v25 << 32);
  v20 = *(_OWORD *)(a1 + 64);
  v28 = v20;
  v26 = *(_QWORD *)(a1 + 80);
  v22 = *(_BYTE *)(a1 + 89);
  v24 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = v35;
  *(_QWORD *)(a1 + 72) = v33;
  *(_QWORD *)(a1 + 80) = v32;
  *(_BYTE *)(a1 + 88) = v34;
  *(_BYTE *)(a1 + 89) = 0;
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                              + 8 * *(_QWORD *)thread_worker_index(*(double *)&v20)
                              + 8)
                  + 32);
  swift_unknownObjectRetain();
  swift_retain();
  ecs_stack_allocator_push_snapshot(v21);
  sub_1B1AEC268(0, qword_1ED4B9FA8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  sub_1B2065D60(v31);
  swift_release();
  ecs_stack_allocator_pop_snapshot(v21);
  sub_1B2051350(v35, v19, v33, v32, v34, v10, v36, v30, v29, v18, v14);
  swift_release();
  result = sub_1B2051350(v35, v19, v33, v32, v34, v10, v36, v30, v29, v18, v14);
  *(_OWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 80) = v26;
  *(_BYTE *)(a1 + 88) = v24;
  *(_BYTE *)(a1 + 89) = v22;
  return result;
}

uint64_t sub_1B2051350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a11)
  {
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B205138C()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B20513B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v2 + 16))(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1B20513E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v36;

  v34 = HIDWORD(a2);
  v36 = a2;
  if (a2 == 0xFFFFFFFF)
  {
    swift_unknownObjectRetain();
    swift_retain();
LABEL_6:
    v24 = *(_QWORD *)(a16 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
    if (v24)
    {
      v27 = a3;
      v28 = sub_1B2229454();
      LODWORD(v24) = vfx_counters.addCounter(name:scope:kind:)(v28, v29, 0, 0, v24);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      result = swift_unknownObjectRelease();
      goto LABEL_8;
    }
    swift_release();
    swift_release();
    result = swift_unknownObjectRelease();
LABEL_11:
    v31 = a14;
    v30 = a7;
    v32 = a13;
    v27 = a3;
    goto LABEL_12;
  }
  swift_retain();
  v22 = sub_1B1D1568C(a2);
  v24 = v23;
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  if (!v24)
    goto LABEL_6;
  v33 = a8;
  v25 = *(_QWORD *)(a16 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    result = swift_release();
    LODWORD(v24) = 0;
    a8 = v33;
    goto LABEL_11;
  }
  sub_1B2228890();
  sub_1B2229454();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  LODWORD(v24) = vfx_counters.addCounter(name:scope:kind:)(v22, v24, 0, 0, v25);
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  result = swift_release();
  v27 = a3;
  a8 = v33;
LABEL_8:
  v31 = a14;
  v30 = a7;
  v32 = a13;
LABEL_12:
  *(_QWORD *)a9 = a1;
  *(_DWORD *)(a9 + 8) = v36;
  *(_DWORD *)(a9 + 12) = v34;
  *(_QWORD *)(a9 + 16) = v27;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = v30;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_BYTE *)(a9 + 72) = a11 & 1;
  *(_BYTE *)(a9 + 73) = a12 & 1;
  *(_BYTE *)(a9 + 74) = v32 & 1;
  *(_DWORD *)(a9 + 76) = v24;
  *(_QWORD *)(a9 + 80) = v31;
  *(_QWORD *)(a9 + 88) = a15;
  return result;
}

uint64_t sub_1B2051678(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1B20516AC(uint64_t a1)
{
  swift_release();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B20516E0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_1B2051704(uint64_t a1, char a2)
{
  sub_1B204E11C(a1, a2);
}

uint64_t storeEnumTagSinglePayload for Scheduler.Tag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B2051758 + 4 * byte_1B22B39F7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B205178C + 4 * byte_1B22B39F2[v4]))();
}

uint64_t sub_1B205178C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2051794(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B205179CLL);
  return result;
}

uint64_t sub_1B20517A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20517B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B20517B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20517BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Tag()
{
  return &type metadata for Scheduler.Tag;
}

uint64_t storeEnumTagSinglePayload for Scheduler.Action(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B2051824 + 4 * byte_1B22B3A01[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B2051858 + 4 * byte_1B22B39FC[v4]))();
}

uint64_t sub_1B2051858(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2051860(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2051868);
  return result;
}

uint64_t sub_1B2051874(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B205187CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B2051880(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2051888(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Action()
{
  return &type metadata for Scheduler.Action;
}

unint64_t sub_1B20518A8()
{
  unint64_t result;

  result = qword_1EEF627D0;
  if (!qword_1EEF627D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3CC8, &type metadata for Scheduler.Action);
    atomic_store(result, (unint64_t *)&qword_1EEF627D0);
  }
  return result;
}

unint64_t sub_1B20518F0()
{
  unint64_t result;

  result = qword_1EEF627D8;
  if (!qword_1EEF627D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3D30, &type metadata for Scheduler.Tag);
    atomic_store(result, (unint64_t *)&qword_1EEF627D8);
  }
  return result;
}

uint64_t sub_1B2051938(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B2052928(0, &qword_1EEF627E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20528E4();
  sub_1B222A180();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v2)
  {
    v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B2229958();
    v13 = v3[2];
    HIBYTE(v12) = 2;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B2051AD8()
{
  sub_1B20528E4();
  return sub_1B222A1D4();
}

uint64_t sub_1B2051B00()
{
  sub_1B20528E4();
  return sub_1B222A1E0();
}

double sub_1B2051B28@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1B20526F0(a1, &v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B2051B68(_QWORD *a1)
{
  return sub_1B2051938(a1);
}

uint64_t sub_1B2051B7C()
{
  return type metadata accessor for ParticleAngularVelocityInit.System();
}

double sub_1B2051B98()
{
  uint64_t v0;
  double result;

  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAD80, (void (*)(uint64_t))sub_1B19ED84C);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v0 + 32) = &type metadata for Orientation;
  *(_QWORD *)(v0 + 40) = &off_1E6371540;
  *(_QWORD *)(v0 + 48) = &type metadata for AngularVelocity;
  *(_QWORD *)(v0 + 56) = &off_1E63831C0;
  return result;
}

void sub_1B2051C00(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[12];
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  _QWORD v57[10];
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = v4;
  v6 = *(_OWORD *)(a3 + 104);
  v54[0] = *(_OWORD *)(a3 + 88);
  v54[1] = v6;
  v55 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v54, 0x200000000, v39);
  sub_1B1A18378((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v40[0])
  {
    v47 = v40[0];
    v48 = v40[1];
    v49 = v41;
    v32 = v46;
    if (v46 >= 1 && (v7 = v43) != 0)
    {
      v8 = v45;
      v62 = v45[4];
      v31 = v44;
      v9 = *(unsigned __int8 *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v27 = v45 + 13;
      v28 = v45 + 8;
      v29 = (uint64_t)(v45 + 6);
      v10 = (uint64_t *)(v42 + 24);
      v30 = v9;
      while (1)
      {
        v11 = *((unsigned int *)v10 - 6);
        v12 = *((unsigned int *)v10 - 5);
        v13 = *((unsigned int *)v10 - 4);
        v36 = *v10;
        v37 = *(v10 - 1);
        v14 = v10[2];
        v35 = v10[1];
        v38 = v7;
        v15 = v5;
        if (v9)
        {
          v16 = *(os_unfair_lock_s **)(v14 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v62);
        sub_1B1A18378(v29, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v17 = v8[4];
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v8[7] = v18;
        v28[1] = 0;
        v28[2] = 0;
        *v28 = 0;
        swift_release();
        v57[0] = v31;
        v57[1] = v14;
        v57[2] = v8;
        v57[3] = v13;
        v57[4] = (v12 - v11 + v13);
        v57[5] = v32;
        v57[6] = v11;
        v57[7] = v12;
        v57[8] = 0;
        v57[9] = 0;
        v58 = 1;
        v59 = v37;
        v60 = v36;
        v61 = v35;
        sub_1B205202C((uint64_t)v57, a4, a1);
        if (v15)
          break;
        v52[0] = v47;
        v52[1] = v48;
        v53 = v49;
        sub_1B1F05D48(v8, (unsigned __int16 **)v52, (uint64_t)v56);
        v5 = 0;
        if (*(_QWORD *)(v8[13] + 16))
        {
          v19 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v19, v14);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v21 = v8[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v21 + 16));
          }
          else
          {
            v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v21 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v22 = (_QWORD *)swift_allocObject();
              v23 = j__malloc_size(v22);
              v22[2] = 0;
              v22[3] = 2 * ((uint64_t)(v23 - 32) / 72);
            }
            *v27 = v22;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v8[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v24 = *(char **)(v14 + 232);
            v25 = *(char **)(v14 + 256);
            if (v24 == v25)
            {
              v26 = *(char **)(v14 + 240);
            }
            else
            {
              sub_1B1A1059C(v25, v24);
              v25 = *(char **)(v14 + 232);
              v26 = *(char **)(v14 + 240);
              if (v26 == v25)
              {
                v26 = 0;
                v25 = 0;
                *(_QWORD *)(v14 + 232) = 0;
                *(_QWORD *)(v14 + 240) = 0;
              }
            }
            *(_QWORD *)(v14 + 248) = v26;
            *(_QWORD *)(v14 + 256) = v25;
          }
        }
        ecs_stack_allocator_pop_snapshot(v62);
        v9 = v30;
        if ((v30 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
        }
        swift_release();
        v10 += 6;
        v7 = v38 - 1;
        if (v38 == 1)
          goto LABEL_24;
      }

      v50[0] = v47;
      v50[1] = v48;
      v51 = v49;
      sub_1B1F05D48(v8, (unsigned __int16 **)v50, (uint64_t)v56);
      sub_1B1F03804((char *)v14);
      ecs_stack_allocator_pop_snapshot(v62);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
      __break(1u);
    }
    else
    {
LABEL_24:
      sub_1B19ED748(v39);
    }
  }
}

void sub_1B205202C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  simd_float4 v14;
  float v17;
  float v18;
  float32x4_t v19;
  float v28;
  float32x4_t v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  simd_float4 v63;
  float v66;
  float v67;
  float32x4_t v68;
  float v73;
  float32x4_t v74;
  float v75;
  float32x2_t v76;
  float32x2_t v77;
  __int32 v78;
  simd_float4 x;
  simd_float4 xa;
  simd_float4 v81;
  float32x4_t v82;
  simd_float4 v83;
  float32x4_t v84;
  float v85;
  float v86;

  v6 = sub_1B1A12038((uint64_t)&type metadata for AngularVelocity, (uint64_t)&off_1E63831C0, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  v8 = v6;
  v10.i32[0] = *(_DWORD *)a2;
  v9.i32[0] = *(_DWORD *)(a2 + 4);
  if (*(float *)a2 == v9.f32[0]
    && *(float *)(a2 + 8) == *(float *)(a2 + 12)
    && *(float *)(a2 + 16) == *(float *)(a2 + 20))
  {
    v10.i32[1] = *(_DWORD *)(a2 + 8);
    v10.i32[2] = *(_DWORD *)(a2 + 16);
    v11 = vabsq_f32(v10);
    *(float *)v7.i32 = fmaxf(fmaxf(v11.f32[0], v11.f32[2]), v11.f32[1]);
    v12 = 0uLL;
    if (fabsf(*(float *)v7.i32) > 0.00000011921)
    {
      v13.i64[0] = 0x3F0000003F000000;
      v13.i64[1] = 0x3F0000003F000000;
      v14 = (simd_float4)vmulq_f32(vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(v7, 0)), v13);
      v14.i32[3] = 0;
      x = v14;
      v85 = *(float *)v7.i32;
      v81 = _simd_cos_f4(v14);
      _Q0 = _simd_sin_f4(x);
      _Q7 = v81;
      v17 = vmuls_lane_f32(v81.f32[1], (float32x4_t)v81, 2);
      v18 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
      v19.f32[0] = vmlas_n_f32(-(float)(v81.f32[0] * v18), v17, _Q0.f32[0]);
      _S4 = vmuls_lane_f32(v81.f32[0], *(float32x2_t *)_Q0.f32, 1);
      __asm { FMLA            S5, S4, V7.S[2] }
      _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
      __asm { FMLA            S6, S4, V0.S[2] }
      v28 = vmlas_n_f32(v18 * _Q0.f32[0], v17, v81.f32[0]);
      v19.i32[1] = _S5;
      v19.i32[2] = _S6;
      v29 = vmulq_f32(v19, v19);
      LODWORD(v30) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
      v31 = vrsqrte_f32((float32x2_t)LODWORD(v30));
      v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)LODWORD(v30), vmul_f32(v31, v31)));
      v82 = vmulq_n_f32(v19, vmul_f32(v32, vrsqrts_f32((float32x2_t)LODWORD(v30), vmul_f32(v32, v32))).f32[0]);
      v33 = atan2f(sqrtf(v30), v28);
      v12 = v82;
      v12.f32[3] = v85 * (float)(v33 + v33);
    }
    v34 = *(_QWORD *)(a1 + 48);
    v35 = *(_QWORD *)(a1 + 56) - v34;
    if (v35)
    {
      v36 = (float32x4_t *)(v8 + 16 * v34);
      do
      {
        *v36++ = v12;
        --v35;
      }
      while (v35);
    }
  }
  else
  {
    v38 = *(_QWORD *)(a1 + 48);
    v37 = *(_QWORD *)(a1 + 56);
    v39 = v37 - v38;
    if (v37 != v38)
    {
      v40 = a3[3];
      v41 = a3[4];
      v43 = a3[1];
      v42 = a3[2];
      v44 = v9.f32[0] - v10.f32[0];
      v45 = *(float *)(a2 + 8);
      v46 = *(float *)(a2 + 12) - v45;
      v47 = *(float *)(a2 + 16);
      v48 = *(float *)(a2 + 20) - v47;
      v49 = (float32x4_t *)(v6 + 16 * v38);
      v78 = *(_DWORD *)a2;
      do
      {
        v54 = v43 ^ v40;
        v55 = v42 ^ v41;
        v56 = v54 ^ v42;
        v57 = v43 ^ v42 ^ v41;
        v9.f32[0] = v10.f32[0]
                  + (float)(v44
                          * (float)((float)((9
                                           * ((((unint64_t)(5 * v42) >> 32) >> 25) | (640 * v42))) & 0xFFFFFF)
                                  * 0.000000059605));
        v58 = v54 ^ (v42 << 17) ^ v57;
        v59 = v58 ^ v54 ^ v42;
        v9.f32[1] = v45
                  + (float)(v46
                          * (float)((float)((9
                                           * ((((unint64_t)(5 * v56) >> 32) >> 25) | (640 * v56))) & 0xFFFFFF)
                                  * 0.000000059605));
        v9.f32[2] = v47
                  + (float)(v48
                          * (float)((float)((9
                                           * ((((unint64_t)(5 * v59) >> 32) >> 25) | (640 * v59))) & 0xFFFFFF)
                                  * 0.000000059605));
        v60 = vabsq_f32(v9);
        *(float *)v7.i32 = fmaxf(fmaxf(v60.f32[0], v60.f32[2]), v60.f32[1]);
        v61 = 0uLL;
        if (fabsf(*(float *)v7.i32) > 0.00000011921)
        {
          v62.i64[0] = 0x3F0000003F000000;
          v62.i64[1] = 0x3F0000003F000000;
          v63 = (simd_float4)vmulq_f32(vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(v7, 0)), v62);
          v63.i32[3] = 0;
          xa = v63;
          v86 = *(float *)v7.i32;
          v83 = _simd_cos_f4(v63);
          _Q0 = _simd_sin_f4(xa);
          _Q7 = v83;
          v66 = vmuls_lane_f32(v83.f32[1], (float32x4_t)v83, 2);
          v67 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
          v68.f32[0] = vmlas_n_f32(-(float)(v83.f32[0] * v67), v66, _Q0.f32[0]);
          _S4 = vmuls_lane_f32(v83.f32[0], *(float32x2_t *)_Q0.f32, 1);
          __asm { FMLA            S5, S4, V7.S[2] }
          _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
          __asm { FMLA            S6, S4, V0.S[2] }
          v73 = vmlas_n_f32(v67 * _Q0.f32[0], v66, v83.f32[0]);
          v68.i32[1] = _S5;
          v68.i32[2] = _S6;
          v74 = vmulq_f32(v68, v68);
          LODWORD(v75) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).u32[0];
          v76 = vrsqrte_f32((float32x2_t)LODWORD(v75));
          v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)LODWORD(v75), vmul_f32(v76, v76)));
          v84 = vmulq_n_f32(v68, vmul_f32(v77, vrsqrts_f32((float32x2_t)LODWORD(v75), vmul_f32(v77, v77))).f32[0]);
          v9.f32[0] = atan2f(sqrtf(v75), v73);
          v61 = v84;
          v10.i32[0] = v78;
          v61.f32[3] = v86 * (float)(v9.f32[0] + v9.f32[0]);
        }
        *v49++ = v61;
        v50 = __ROR8__(v55, 19);
        v51 = v56 ^ v50 ^ v57;
        v52 = v58 ^ (v56 << 17) ^ v51;
        v53 = v59 ^ __ROR8__(v56 ^ v50, 19);
        v42 = v52 ^ v59;
        v43 = v53 ^ v51;
        v40 = v52 ^ (v59 << 17);
        v41 = __ROR8__(v53, 19);
        --v39;
      }
      while (v39);
      a3[1] = v43;
      a3[2] = v42;
      a3[3] = v40;
      a3[4] = v41;
    }
  }
}

uint64_t type metadata accessor for ParticleAngularVelocityInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B2052440(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD v19[6];

  v2 = *a1;
  v3 = a1[1];
  swift_retain_n();
  v4 = sub_1B1D1828C(v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_release();
  v11 = HIDWORD(v4);
  v12 = HIDWORD(v6);
  if ((v10 & 1) != 0)
    v13 = -1068953638;
  else
    v13 = v4;
  if ((v10 & 1) != 0)
  {
    LODWORD(v11) = 1078530010;
    v14 = -1068953638;
  }
  else
  {
    v14 = v6;
  }
  if ((v10 & 1) != 0)
  {
    LODWORD(v12) = 1078530010;
    v15 = -1068953638;
  }
  else
  {
    v15 = v8;
  }
  if ((v10 & 1) != 0)
    v16 = 1078530010;
  else
    v16 = HIDWORD(v8);
  v19[0] = v13;
  v19[1] = v11;
  v19[2] = v14;
  v19[3] = v12;
  v19[4] = v15;
  v19[5] = v16;
  v17 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FEA520(v17, v2, v2, (uint64_t)a1, (uint64_t)v19);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B2052530()
{
  return "SetAngularVelocity.CPU";
}

uint64_t type metadata accessor for ParticleAngularVelocityInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B2052568()
{
  return "SetAngularVelocity.GPU";
}

uint64_t sub_1B205257C()
{
  return type metadata accessor for ParticleAngularVelocityInit.GPUSystem();
}

uint64_t sub_1B2052598(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD v26[6];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D1828C(v3);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_release();
  v12 = HIDWORD(v5);
  v13 = HIDWORD(v7);
  if ((v11 & 1) != 0)
    v14 = -1068953638;
  else
    v14 = v5;
  if ((v11 & 1) != 0)
  {
    LODWORD(v12) = 1078530010;
    v15 = -1068953638;
  }
  else
  {
    v15 = v7;
  }
  if ((v11 & 1) != 0)
  {
    LODWORD(v13) = 1078530010;
    v16 = -1068953638;
  }
  else
  {
    v16 = v9;
  }
  if ((v11 & 1) != 0)
    v17 = 1078530010;
  else
    v17 = HIDWORD(v9);
  v26[0] = v14;
  v26[1] = v12;
  v26[2] = v15;
  v26[3] = v13;
  v26[4] = v16;
  v26[5] = v17;
  v18 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_angular_velocity_uniforms(0);
    sub_1B1F40E1C((uint64_t)v26, 1, ObjectType, v20, v21, v22, v23, v24);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v18 == 0, 0, (uint64_t)a1, 0xD00000000000001DLL, 0x80000001B2349150, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleAngularVelocityInit()
{
  return &type metadata for ParticleAngularVelocityInit;
}

uint64_t sub_1B20526F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  sub_1B2052928(0, &qword_1ED4BAC28, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20528E4();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B1B4D924();
  HIBYTE(v15) = 0;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v11 = v16;
  HIBYTE(v15) = 1;
  sub_1B2229814();
  v12 = v16;
  HIBYTE(v15) = 2;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v16;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  return result;
}

unint64_t sub_1B20528E4()
{
  unint64_t result;

  result = qword_1ED4B9B98;
  if (!qword_1ED4B9B98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3F60, &type metadata for ParticleAngularVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9B98);
  }
  return result;
}

void sub_1B2052928(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B20528E4();
    v7 = a3(a1, &type metadata for ParticleAngularVelocityInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleAngularVelocityInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B20529D0 + 4 * byte_1B22B3D65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2052A04 + 4 * byte_1B22B3D60[v4]))();
}

uint64_t sub_1B2052A04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2052A0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2052A14);
  return result;
}

uint64_t sub_1B2052A20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2052A28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B2052A2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2052A34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAngularVelocityInit.CodingKeys()
{
  return &type metadata for ParticleAngularVelocityInit.CodingKeys;
}

unint64_t sub_1B2052A54()
{
  unint64_t result;

  result = qword_1EEF627E8;
  if (!qword_1EEF627E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3F38, &type metadata for ParticleAngularVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF627E8);
  }
  return result;
}

unint64_t sub_1B2052A9C()
{
  unint64_t result;

  result = qword_1ED4B9BA8[0];
  if (!qword_1ED4B9BA8[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3EA8, &type metadata for ParticleAngularVelocityInit.CodingKeys);
    atomic_store(result, qword_1ED4B9BA8);
  }
  return result;
}

unint64_t sub_1B2052AE4()
{
  unint64_t result;

  result = qword_1ED4B9BA0;
  if (!qword_1ED4B9BA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B3ED0, &type metadata for ParticleAngularVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9BA0);
  }
  return result;
}

void sub_1B2052B28()
{
  qword_1EEFD5828 = (uint64_t)&unk_1E637A760;
}

uint64_t sub_1B2052B3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (!*((_BYTE *)a1 + 8))
    return !*((_BYTE *)a2 + 8) && *(float *)&v2 == *(float *)&v3;
  if (*((_BYTE *)a1 + 8) != 1)
    return v4 == 2 && v3 == 0;
  if (v4 != 1)
    return 0;
  LODWORD(v3) = *(float *)&v2 == *(float *)&v3;
  if (*((float *)&v2 + 1) == *((float *)&v3 + 1))
    return v3;
  else
    return 0;
}

uint64_t sub_1B2052BBC@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1EEF57518 != -1)
    swift_once();
  *a1 = qword_1EEFD5828;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B2052C0C(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _BYTE v7[24];
  uint64_t v8;
  uint64_t v9;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  if (a3)
  {
    if (a3 == 1)
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B2229B98();
      if (!v3)
      {
        v9 = a2;
        sub_1B19FC264((uint64_t)v7, v8);
        sub_1B201E59C(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
        sub_1B201E698(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
        sub_1B2229BA4();
      }
    }
    else
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B2229B98();
    }
  }
  else
  {
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B2229B98();
    if (!v3)
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B2229B8C();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

unint64_t sub_1B2052DC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  char v5;

  result = sub_1B2053E90(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1B2052DEC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B2052C0C(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_1B2052E08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[25];
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B2054618(0, &qword_1EEF62810, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B20545D4();
  sub_1B222A180();
  sub_1B1B0719C((uint64_t *)v3, (uint64_t)&v14);
  sub_1B1B0719C(&v14, (uint64_t)v12);
  v13 = 0;
  sub_1B1A71EA8();
  sub_1B2229958();
  if (!v2)
  {
    *(_OWORD *)v12 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)&v12[9] = *(_OWORD *)(v3 + 25);
    v13 = 1;
    sub_1B201E59C(0, (unint64_t *)&qword_1ED4B9F38, (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for Curve);
    sub_1B201E640((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B2052F9C(char *a1, char *a2)
{
  return sub_1B1F9782C(*a1, *a2);
}

uint64_t sub_1B2052FA8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6576727563;
  else
    return 1701080941;
}

uint64_t sub_1B2052FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B205315C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2052FFC()
{
  sub_1B20545D4();
  return sub_1B222A1D4();
}

uint64_t sub_1B2053024()
{
  sub_1B20545D4();
  return sub_1B222A1E0();
}

double sub_1B205304C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1B20543F4(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B205308C(_QWORD *a1)
{
  return sub_1B2052E08(a1);
}

uint64_t sub_1B20530C4()
{
  return type metadata accessor for ParticleOpacityEvolutionSystem();
}

char *sub_1B20530E0@<X0>(uint64_t a1@<X8>)
{
  char *result;
  uint64_t v3;

  result = sub_1B21451EC((uint64_t)&unk_1E63AEA88);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleOpacityEvolutionSystem()
{
  return objc_opt_self();
}

const char *sub_1B2053148()
{
  return "ParticleOpacityEvolution";
}

uint64_t sub_1B205315C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6576727563 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B2053234(uint64_t a1)
{
  uint64_t j;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  float v8;
  float v9;
  __int128 v10;
  float v11;
  float v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t v33;
  int8x16_t v34;
  float v35;
  double v36;
  __int128 v37;
  float v38;
  _QWORD *v39;
  uint64_t v40;
  char i;
  float v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t v55;
  float32x4_t *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_unfair_lock_s *v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  uint64_t v70;
  float *v71;
  float v72;
  uint64_t v73;
  float *v74;
  float32x4_t *v75;
  float v76;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[148];
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114[5];
  char v115;
  uint64_t v116[8];
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[44];
  _DWORD v127[2];
  char v128;
  uint64_t v129;

  j = 0;
  v129 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  swift_retain();
  sub_1B1B730C0((uint64_t)v114);
  v5 = v114[2];
  v4 = v114[3];
  v6 = v114[4];
  v7 = v115;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1EE00B0(v5, v4, v6, v7, 32, (uint64_t)v101);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B0719C(v114, (uint64_t)&v125);
  sub_1B1B0719C(&v125, (uint64_t)v127);
  if (!v128)
  {
    v35 = *(float *)v127;
    v36 = *(double *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
    v37 = *(_OWORD *)(a1 + 104);
    v111 = *(_OWORD *)(a1 + 88);
    v112 = v37;
    v113 = *(_QWORD *)(a1 + 120);
    sub_1B1B70F2C((uint64_t)&v102);
    v108 = v102;
    v109 = v103;
    v110 = v104;
    sub_1B1E8FCE4(v3, (uint64_t)&v108, 0x200000000, v116);
    sub_1B1A18378((uint64_t)v116, (uint64_t)&v117, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v117)
    {
      if (v124 > 0)
      {
        v94 = v121;
        if (v121)
        {
          v38 = v36;
          v39 = v123;
          v40 = v123[4];
          i = *(_BYTE *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v105 = v117;
          v106 = v118;
          v107 = v119;
          v82 = (uint64_t)(v123 + 6);
          v85 = v120;
          v79 = v123 + 8;
          v42 = fminf((float)((float)(1.0 / v35) * v38) - floorf((float)(1.0 / v35) * v38), 1.0);
          swift_retain();
          swift_retain();
          swift_retain();
          v43 = 0;
          v91 = i;
          v88 = v40;
          do
          {
            v44 = (unsigned int *)(v85 + 48 * v43);
            v45 = *v44;
            v97 = v44[1];
            v47 = (uint64_t *)*((_QWORD *)v44 + 2);
            v46 = *((_QWORD *)v44 + 3);
            v48 = *((_QWORD *)v44 + 4);
            v49 = *((_QWORD *)v44 + 5);
            if ((i & 1) != 0)
            {
              v50 = *(os_unfair_lock_s **)(v49 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v50);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v49 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v40);
            sub_1B1A18378(v82, (uint64_t)v126, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v51 = v39[4];
            v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v39[6] = ecs_stack_allocator_allocate(v51, 48 * v52, 8);
            v39[7] = v52;
            v79[1] = 0;
            v79[2] = 0;
            *v79 = 0;
            swift_release();
            v53 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v47, v46, v48, (uint64_t)v39);
            v54 = (float32x4_t *)v53;
            if (v47)
            {
              for (i = v91; v48; --v48)
              {
                *v54 = vmulq_n_f32(*v54, fminf(fmaxf(sample_curve((uint64_t)v101, v42), 0.0), 1.0));
                ++v54;
              }
            }
            else
            {
              i = v91;
              if ((_DWORD)v45 != (_DWORD)v97)
              {
                v55 = v97 - v45;
                v56 = (float32x4_t *)(v53 + 16 * v45);
                do
                {
                  *v56 = vmulq_n_f32(*v56, fminf(fmaxf(sample_curve((uint64_t)v101, v42), 0.0), 1.0));
                  ++v56;
                  --v55;
                }
                while (v55);
              }
            }
            sub_1B1F05D48(v39, (unsigned __int16 **)&v105, (uint64_t)v126);
            sub_1B1F03804((char *)v49);
            v40 = v88;
            ecs_stack_allocator_pop_snapshot(v88);
            if ((i & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 376));
            }
            swift_release();
            ++v43;
          }
          while (v43 != v94);
          goto LABEL_57;
        }
LABEL_64:
        sub_1B19ED720((uint64_t)&v102);
        sub_1B19ED748(v116);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    sub_1B19ED720((uint64_t)&v102);
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  if (v128 == 1)
  {
    v9 = *(float *)v127;
    v8 = *(float *)&v127[1];
    v10 = *(_OWORD *)(a1 + 104);
    v111 = *(_OWORD *)(a1 + 88);
    v112 = v10;
    v113 = *(_QWORD *)(a1 + 120);
    sub_1B19F23E8((uint64_t)&v102);
    v108 = v102;
    v109 = v103;
    v110 = v104;
    sub_1B1E8FCE4(v3, (uint64_t)&v108, 0x200000000, v116);
    sub_1B1A18378((uint64_t)v116, (uint64_t)&v117, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v117)
    {
      if (v124 > 0)
      {
        v90 = v121;
        if (v121)
        {
          v11 = 1.0 / (float)(v8 - v9);
          v12 = -(float)(v9 * v11);
          v13 = v123;
          v14 = v123[4];
          v96 = *(_BYTE *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v105 = v117;
          v106 = v118;
          v107 = v119;
          v81 = (uint64_t)(v123 + 6);
          v84 = v120;
          v78 = v123 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          v15 = 0;
          v87 = v14;
          do
          {
            v16 = (unsigned int *)(v84 + 48 * v15);
            v17 = *v16;
            v93 = v16[1];
            v19 = (uint64_t *)*((_QWORD *)v16 + 2);
            v18 = *((_QWORD *)v16 + 3);
            v21 = *((_QWORD *)v16 + 4);
            v20 = *((_QWORD *)v16 + 5);
            v99 = j;
            if ((v96 & 1) != 0)
            {
              v22 = *(os_unfair_lock_s **)(v20 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v22);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v14);
            sub_1B1A18378(v81, (uint64_t)v126, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v23 = v13[4];
            v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v13[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
            v13[7] = v24;
            v78[1] = 0;
            v78[2] = 0;
            *v78 = 0;
            swift_release();
            v25 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v19, v18, v21, (uint64_t)v13);
            v26 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v19, v18, v21, (uint64_t)v13);
            v27 = (float32x4_t *)v26;
            if (v19)
            {
              for (; v21; --v21)
              {
                v28 = *v27++;
                v29 = (int8x16_t)vmulq_f32(v28, v28);
                *v25 = vmulq_n_f32(*v25, fminf(fmaxf(sample_curve((uint64_t)v101, v12+ (float)(v11* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)))))), 0.0), 1.0));
                ++v25;
              }
            }
            else if ((_DWORD)v17 != (_DWORD)v93)
            {
              v30 = v93 - v17;
              v31 = (float32x4_t *)(v26 + 16 * v17);
              v32 = &v25[v17];
              do
              {
                v33 = *v31++;
                v34 = (int8x16_t)vmulq_f32(v33, v33);
                *v32 = vmulq_n_f32(*v32, fminf(fmaxf(sample_curve((uint64_t)v101, v12+ (float)(v11* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))))), 0.0), 1.0));
                ++v32;
                --v30;
              }
              while (v30);
            }
            j = v99;
            sub_1B1F05D48(v13, (unsigned __int16 **)&v105, (uint64_t)v126);
            sub_1B1F03804((char *)v20);
            v14 = v87;
            ecs_stack_allocator_pop_snapshot(v87);
            if ((v96 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 376));
            }
            swift_release();
            ++v15;
          }
          while (v15 != v90);
LABEL_57:
          sub_1B19ED720((uint64_t)&v102);
          sub_1B19ED748(v116);
          sub_1B19ED748(v116);
          swift_bridgeObjectRelease();
          swift_release();
LABEL_65:
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        goto LABEL_64;
      }
LABEL_61:
      sub_1B19ED720((uint64_t)&v102);
      sub_1B19ED748(v116);
      goto LABEL_62;
    }
    goto LABEL_56;
  }
  v57 = *(_OWORD *)(a1 + 104);
  v111 = *(_OWORD *)(a1 + 88);
  v112 = v57;
  v113 = *(_QWORD *)(a1 + 120);
  sub_1B19F11C4((uint64_t)&v102);
  v108 = v102;
  v109 = v103;
  v110 = v104;
  sub_1B1E8FCE4(v3, (uint64_t)&v108, 0x200000000, v116);
  sub_1B1A18378((uint64_t)v116, (uint64_t)&v117, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!(_QWORD)v117)
    goto LABEL_56;
  if (v124 > 0 && (v89 = v121) != 0)
  {
    v58 = v123;
    v100 = v123[4];
    v98 = *(_BYTE *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v105 = v117;
    v106 = v118;
    v107 = v119;
    v83 = (uint64_t)(v123 + 6);
    v86 = v120;
    v80 = v123 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v59 = 0;
    do
    {
      v60 = j;
      v61 = (unsigned int *)(v86 + 48 * v59);
      v95 = *v61;
      v92 = v61[1];
      v62 = (uint64_t *)*((_QWORD *)v61 + 2);
      v63 = *((_QWORD *)v61 + 3);
      v65 = *((_QWORD *)v61 + 4);
      v64 = *((_QWORD *)v61 + 5);
      if ((v98 & 1) != 0)
      {
        v66 = *(os_unfair_lock_s **)(v64 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v66);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v64 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v100);
      sub_1B1A18378(v83, (uint64_t)v126, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v67 = v58[4];
      v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v58[6] = ecs_stack_allocator_allocate(v67, 48 * v68, 8);
      v58[7] = v68;
      v80[1] = 0;
      v80[2] = 0;
      *v80 = 0;
      swift_release();
      v69 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v62, v63, v65, (uint64_t)v58);
      v70 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v62, v63, v65, (uint64_t)v58);
      v71 = (float *)v70;
      if (v62)
      {
        for (j = v60; v65; --v65)
        {
          v72 = *v71++;
          *v69 = vmulq_n_f32(*v69, fminf(fmaxf(sample_curve((uint64_t)v101, v72), 0.0), 1.0));
          ++v69;
        }
      }
      else
      {
        j = v60;
        if ((_DWORD)v95 != (_DWORD)v92)
        {
          v73 = v92 - v95;
          v74 = (float *)(v70 + 4 * v95);
          v75 = &v69[v95];
          do
          {
            v76 = *v74++;
            *v75 = vmulq_n_f32(*v75, fminf(fmaxf(sample_curve((uint64_t)v101, v76), 0.0), 1.0));
            ++v75;
            --v73;
          }
          while (v73);
        }
      }
      sub_1B1F05D48(v58, (unsigned __int16 **)&v105, (uint64_t)v126);
      sub_1B1F03804((char *)v64);
      ecs_stack_allocator_pop_snapshot(v100);
      if ((v98 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v64 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v64 + 376));
      }
      swift_release();
      ++v59;
    }
    while (v59 != v89);
    sub_1B19ED720((uint64_t)&v102);
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)&v102);
    swift_release();
  }
  sub_1B19ED748(v116);
  sub_1B19ED748(v116);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B2053E90(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unsigned int v6;
  _QWORD v7[5];
  _BYTE v8[24];
  uint64_t v9;

  v3 = (unint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v8, v9);
    v4 = sub_1B2229A90();
    v3 = v4;
    switch(v4)
    {
      case 0:
        goto LABEL_11;
      case 2:
        sub_1B201E59C(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
        sub_1B19FC264((uint64_t)v8, v9);
        sub_1B201E698((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
        sub_1B2229AA8();
        v3 = v7[0];
        goto LABEL_11;
      case 1:
        sub_1B19FC264((uint64_t)v8, v9);
        sub_1B2229A84();
        v3 = v6;
LABEL_11:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
        return v3;
    }
    sub_1B19FA198((uint64_t)v8, (uint64_t)v7);
    sub_1B22294CC();
    swift_allocError();
    sub_1B222949C();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t destroy for ParticleOpacityEvolution()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParticleOpacityEvolution(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleOpacityEvolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t assignWithTake for ParticleOpacityEvolution(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleOpacityEvolution(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityEvolution(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityEvolution()
{
  return &type metadata for ParticleOpacityEvolution;
}

uint64_t getEnumTagSinglePayload for EvolutionMode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EvolutionMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B2054350(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1B2054368(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EvolutionMode()
{
  return &type metadata for EvolutionMode;
}

unint64_t sub_1B2054394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF627F0;
  if (!qword_1EEF627F0)
  {
    sub_1B1A02758(255, &qword_1EEF627F8, (uint64_t)&type metadata for EvolutionMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF627F0);
  }
  return result;
}

uint64_t sub_1B20543F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;

  sub_1B2054618(0, &qword_1EEF62800, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v16 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20545D4();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v20 = 0;
  sub_1B1A71E64();
  sub_1B2229814();
  v11 = v17;
  v12 = BYTE8(v17);
  sub_1B201E59C(0, (unint64_t *)&qword_1ED4B9F38, (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for Curve);
  v20 = 1;
  sub_1B201E640((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94);
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v18;
  v14 = v19;
  v16 = v17;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = v12;
  *(_OWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 40) = v14;
  return result;
}

unint64_t sub_1B20545D4()
{
  unint64_t result;

  result = qword_1EEF62808;
  if (!qword_1EEF62808)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B424C, &type metadata for ParticleOpacityEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62808);
  }
  return result;
}

void sub_1B2054618(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B20545D4();
    v7 = a3(a1, &type metadata for ParticleOpacityEvolution.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityEvolution.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B20546C0 + 4 * byte_1B22B3FB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B20546F4 + 4 * byte_1B22B3FB0[v4]))();
}

uint64_t sub_1B20546F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20546FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2054704);
  return result;
}

uint64_t sub_1B2054710(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2054718);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B205471C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2054724(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityEvolution.CodingKeys()
{
  return &type metadata for ParticleOpacityEvolution.CodingKeys;
}

unint64_t sub_1B2054744()
{
  unint64_t result;

  result = qword_1EEF62818;
  if (!qword_1EEF62818)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4224, &type metadata for ParticleOpacityEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62818);
  }
  return result;
}

unint64_t sub_1B205478C()
{
  unint64_t result;

  result = qword_1EEF62820;
  if (!qword_1EEF62820)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4194, &type metadata for ParticleOpacityEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62820);
  }
  return result;
}

unint64_t sub_1B20547D4()
{
  unint64_t result;

  result = qword_1EEF62828[0];
  if (!qword_1EEF62828[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B41BC, &type metadata for ParticleOpacityEvolution.CodingKeys);
    atomic_store(result, qword_1EEF62828);
  }
  return result;
}

uint64_t *sub_1B2054818()
{
  uint64_t v0;
  float v1;
  __int128 v2;
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float32x4_t *v25;
  float32x4_t *v26;
  unint64_t v27;
  float v28;
  float32x4_t v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[12];
  _OWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _BYTE v53[40];
  _OWORD v54[2];
  uint64_t v55;

  sub_1B1E5267C();
  v34 = v1;
  v2 = *(_OWORD *)(v0 + 32);
  v54[0] = *(_OWORD *)(v0 + 16);
  v54[1] = v2;
  v55 = *(_QWORD *)(v0 + 48);
  v3 = swift_retain();
  sub_1B1E8FCE4(v3, (uint64_t)v54, 0x200000000, v43);
  swift_release();
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v43, (uint64_t)v44, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v44[0])
  {
    if (v50 >= 1)
    {
      v40 = v47;
      if (v47)
      {
        v5 = 0;
        v6 = 0;
        v7 = v49;
        v8 = v49[4];
        v9 = *(unsigned __int8 *)(v48 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v51[0] = v44[0];
        v51[1] = v44[1];
        v52 = v45;
        v36 = (uint64_t)(v49 + 6);
        v37 = v46;
        v35 = v49 + 8;
        v38 = v9;
        v39 = v8;
        while (1)
        {
          v10 = (unsigned int *)(v37 + 48 * v5);
          v11 = *v10;
          v12 = (uint64_t *)*((_QWORD *)v10 + 2);
          v13 = *((_QWORD *)v10 + 3);
          v15 = *((_QWORD *)v10 + 4);
          v14 = *((_QWORD *)v10 + 5);
          v41 = v6;
          v42 = v10[1];
          if (v9)
          {
            v16 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B19F66A0(v36, (uint64_t)v53, &qword_1ED4B7FB0);
          v17 = v7[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v7[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v7[7] = v18;
          v35[1] = 0;
          v35[2] = 0;
          *v35 = 0;
          swift_release();
          v19 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngle, (uint64_t)&off_1E637BD88, v12, v13, v15, (uint64_t)v7);
          v20 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngleVelocity, (uint64_t)&off_1E63A3E30, v12, v13, v15, (uint64_t)v7);
          if ((_DWORD)v11 == (_DWORD)v42)
          {
            v6 = v41;
            goto LABEL_24;
          }
          v21 = v42 - v11;
          if ((unint64_t)(v42 - v11) < 8)
            break;
          v22 = v19 + 4 * v11;
          v23 = v20 + 4 * v11;
          if (v22 < v20 + 4 * v42 && v23 < v19 + 4 * v42)
            break;
          v11 += v21 & 0xFFFFFFFFFFFFFFF8;
          v25 = (float32x4_t *)(v23 + 16);
          v26 = (float32x4_t *)(v22 + 16);
          v27 = v21 & 0xFFFFFFFFFFFFFFF8;
          v28 = v34;
          do
          {
            v29 = vaddq_f32(*v26, vmulq_n_f32(*v25, v34));
            v26[-1] = vaddq_f32(v26[-1], vmulq_n_f32(v25[-1], v34));
            *v26 = v29;
            v25 += 2;
            v26 += 2;
            v27 -= 8;
          }
          while (v27);
          v6 = v41;
          if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_22;
LABEL_24:
          sub_1B1F05D48(v7, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B1F03804((char *)v14);
          v8 = v39;
          ecs_stack_allocator_pop_snapshot(v39);
          v9 = v38;
          if ((v38 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          if (++v5 == v40)
            return sub_1B19ED748(v43);
        }
        v28 = v34;
        v6 = v41;
LABEL_22:
        v30 = v42 - v11;
        v31 = (float *)(v19 + 4 * v11);
        v32 = (float *)(v20 + 4 * v11);
        do
        {
          v33 = *v32++;
          *v31 = *v31 + (float)(v28 * v33);
          ++v31;
          --v30;
        }
        while (v30);
        goto LABEL_24;
      }
    }
    return sub_1B19ED748(v43);
  }
  return result;
}

uint64_t type metadata accessor for ParticleIntegrateAngle.System()
{
  return objc_opt_self();
}

uint64_t sub_1B2054BA4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 120);
  sub_1B19F13C8((uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B2054C28()
{
  return "ParticleIntegrateAngle.CPU";
}

uint64_t sub_1B2054C3C()
{
  return type metadata accessor for ParticleIntegrateAngle.System();
}

ValueMetadata *type metadata accessor for ParticleIntegrateAngle()
{
  return &type metadata for ParticleIntegrateAngle;
}

uint64_t sub_1B2054C68()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = v0;
  v2 = sub_1B2228110();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  v0[6] = MEMORY[0x1E0DEE9D8];
  v8 = v0[2];
  v7 = v0[3];
  v9 = (void *)v0[4];
  v45 = v6;
  if (v9)
  {
    v10 = v1[5];
    ObjectType = swift_getObjectType();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8);
    swift_bridgeObjectRetain();
    v13 = v9;
    v12(v8, v7, ObjectType, v10);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v54 = 0;
    v55 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v14 = v54;
    v15 = v55;
    v16 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v54 = 0;
    swift_retain();
    sub_1B1F1AD70(v16, &v54, v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  v17 = sub_1B2228710();
  v44 = v2;
  v54 = v17;
  v55 = v18;
  v52 = 10;
  v53 = 0xE100000000000000;
  v48 = sub_1B1A06460();
  v19 = sub_1B2229214();
  swift_bridgeObjectRelease();
  v47 = *(_QWORD *)(v19 + 16);
  if (v47)
  {
    v42[1] = v19;
    v43 = v3;
    v20 = 0;
    v46 = v19 + 32;
    v21 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v22 = (uint64_t *)(v46 + 16 * v20);
      v24 = *v22;
      v23 = v22[1];
      v54 = v24;
      v55 = v23;
      v52 = 32;
      v53 = 0xE100000000000000;
      v50 = 0;
      v51 = 0xE000000000000000;
      v54 = sub_1B222922C();
      v55 = v25;
      v52 = 44;
      v53 = 0xE100000000000000;
      v26 = sub_1B2229214();
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v26 + 16);
      v49 = v26;
      if (v29)
        break;
LABEL_10:
      ++v20;
      swift_bridgeObjectRelease();
      if (v20 == v47)
      {
        swift_bridgeObjectRelease();
        v3 = v43;
        v37 = v44;
        goto LABEL_36;
      }
    }
    v30 = (uint64_t *)(v26 + 40);
    while (1)
    {
      v32 = *(v30 - 1);
      v31 = *v30;
      LODWORD(v52) = 0;
      MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v28);
      if ((v31 & 0x1000000000000000) == 0)
      {
        if ((v31 & 0x2000000000000000) != 0)
        {
          v54 = v32;
          v55 = v31 & 0xFFFFFFFFFFFFFFLL;
          switch((char)v32)
          {
            case 0:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
LABEL_20:
              swift_bridgeObjectRetain();
              goto LABEL_21;
            default:
              swift_bridgeObjectRetain();
              v33 = (_BYTE *)_swift_stdlib_strtof_clocale();
              if (v33)
LABEL_32:
                LOBYTE(v50) = *v33 == 0;
              else
LABEL_21:
                LOBYTE(v50) = 0;
              break;
          }
          goto LABEL_22;
        }
        if ((v32 & 0x1000000000000000) != 0)
        {
          switch(*(_BYTE *)(v31 + 32))
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              goto LABEL_20;
            default:
              swift_bridgeObjectRetain();
              v33 = (_BYTE *)_swift_stdlib_strtof_clocale();
              if (!v33)
                goto LABEL_21;
              goto LABEL_32;
          }
        }
      }
      swift_bridgeObjectRetain();
      sub_1B222940C();
LABEL_22:
      swift_bridgeObjectRelease();
      if ((_BYTE)v50)
        v34 = *(float *)&v52;
      else
        v34 = 0.0;
      v21 = v1[6];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B1C635D8(0, *(_QWORD *)(v21 + 16) + 1, 1, (char *)v21);
        v21 = isUniquelyReferenced_nonNull_native;
      }
      v36 = *(_QWORD *)(v21 + 16);
      v35 = *(_QWORD *)(v21 + 24);
      if (v36 >= v35 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B1C635D8(v35 > 1, v36 + 1, 1, (char *)v21);
        v21 = isUniquelyReferenced_nonNull_native;
      }
      v30 += 2;
      *(_QWORD *)(v21 + 16) = v36 + 1;
      *(float *)(v21 + 4 * v36 + 32) = v34;
      v1[6] = v21;
      if (!--v29)
        goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x1E0DEE9D8];
  v37 = v44;
LABEL_36:
  if (qword_1ED4BF430 != -1)
    swift_once();
  v54 = 0x203A767363;
  v55 = 0xE500000000000000;
  v52 = *(_QWORD *)(v21 + 16);
  swift_retain();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v38 = v54;
  v39 = v55;
  v40 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v54 = 0;
  swift_retain();
  sub_1B1F1AD70(v40, &v54, v38, v39);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v45, v37);
}

double sub_1B2055304@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1B2055488(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

void sub_1B2055350(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = MEMORY[0x1E0DEE9D8];
}

_BYTE *sub_1B2055370@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

_QWORD *assignWithCopy for CSVFileAsset(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[4];
  v5 = a2[5];
  v6 = (void *)a1[4];
  a1[4] = v4;
  v7 = v4;

  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CSVFileAsset()
{
  return &type metadata for CSVFileAsset;
}

uint64_t sub_1B2055488@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v14, v14[3]);
  sub_1B1BB5244();
  sub_1B2229D6C();
  v15 = v13;
  v5 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v11;
  v7 = v15;
  a2[4] = v12;
  a2[5] = v7;
  a2[6] = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1B20555C4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B205563C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;
  id v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = *(void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = v10;
    v11 = v10;
  }
  return v4;
}

void sub_1B20556F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();

}

uint64_t sub_1B2055730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8);
  v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  *v7 = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_1B2055790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_1B20557F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B2055854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  *v7 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t sub_1B20558B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B2055934 + 4 * byte_1B22B4420[v10]))();
  }
}

void sub_1B20559B8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1B2055AAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B2055B20);
}

void sub_1B2055AB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B2055ABCLL);
  JUMPOUT(0x1B2055B20);
}

void sub_1B2055AFC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B2055B20);
}

void sub_1B2055B04()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B2055B20);
}

uint64_t sub_1B2055B0C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1B2055B20);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1B2055B1CLL);
    JUMPOUT(0x1B2055B18);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for Locked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Locked);
}

uint64_t sub_1B2055B44(_QWORD *a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  char v15;

  v12 = a3;
  v13 = a2;
  sub_1B19F8E54(0, &qword_1EEF628C0, (uint64_t (*)(void))sub_1B2057C68, (uint64_t)&type metadata for GrowEmitterRuntime.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2057C68();
  sub_1B222A180();
  v14 = v13;
  v15 = 0;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  if (!v3)
  {
    v14.n128_u8[0] = 1;
    sub_1B2229940();
    v14 = v12;
    v15 = 2;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B2055D08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F93698(*a1, *a2);
}

uint64_t sub_1B2055D14()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E756F63;
  if (*v0 != 1)
    v1 = 0x614D6D6F646E6172;
  if (*v0)
    return v1;
  else
    return 7498084;
}

uint64_t sub_1B2055D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B20573FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2055D94()
{
  sub_1B2057C68();
  return sub_1B222A1D4();
}

uint64_t sub_1B2055DBC()
{
  sub_1B2057C68();
  return sub_1B222A1E0();
}

uint64_t sub_1B2055DE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = sub_1B2057A64(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = result;
    *(_OWORD *)(a2 + 32) = v6;
  }
  return result;
}

uint64_t sub_1B2055E14(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B2055B44(a1, *v1, v1[2]);
}

double sub_1B2055E34@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0078125;
  *(_OWORD *)(a1 + 32) = xmmword_1B2244DD0;
  return result;
}

uint64_t *sub_1B2055E4C(_QWORD *a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t *result;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  int v34;
  id v35;
  id v36;
  int32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  int v58;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int32 v75;
  unsigned int v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  __int128 v80;
  unsigned int v81;
  int32x4_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  _QWORD *v107;
  _OWORD v108[2];
  uint64_t v109;
  _OWORD v110[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123[12];
  _QWORD v124[7];
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129[10];
  char v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v5 = v4;
  v134 = *MEMORY[0x1E0C80C00];
  v7 = *(_OWORD *)(a3 + 104);
  v108[0] = *(_OWORD *)(a3 + 88);
  v108[1] = v7;
  v109 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v108, 0x200000000, v123);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v123, (uint64_t)v124, (unint64_t *)&qword_1ED4B7DE0);
  if (v124[0])
  {
    v90 = v128;
    if (v128 >= 1)
    {
      v89 = v125;
      if (v125)
      {
        v9 = 0;
        v88 = v124[5];
        v92 = v126;
        v102 = *(unsigned __int8 *)(v126 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v10 = v127;
        v87 = v127 + 8;
        v105 = v124[0] + 41;
        v106 = (unsigned __int16 *)v124[0];
        v101 = v127[4];
        v83 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v84 = *(_QWORD *)(a3 + 8);
        v91 = *(unsigned __int8 *)a4;
        v107 = v127;
        while (1)
        {
          v103 = v5;
          v11 = (unsigned int *)(v88 + 48 * v9);
          v13 = *v11;
          v12 = v11[1];
          v14 = v11[2];
          v15 = (uint64_t *)*((_QWORD *)v11 + 2);
          v16 = *((_QWORD *)v11 + 3);
          v18 = *((_QWORD *)v11 + 4);
          v17 = *((_QWORD *)v11 + 5);
          v100 = v9;
          if (v102)
          {
            v19 = *(os_unfair_lock_s **)(v17 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v19);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v101);
          v97 = v10[7];
          v98 = v10[6];
          v95 = v10[9];
          v96 = v10[8];
          v94 = v10[10];
          v20 = v10[4];
          v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v107[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
          v107[7] = v21;
          v10 = v107;
          v87[1] = 0;
          v87[2] = 0;
          *v87 = 0;
          swift_release();
          v22 = v92;
          v129[0] = v92;
          v129[1] = v17;
          v129[2] = (uint64_t)v107;
          v129[3] = v14;
          v129[4] = (v12 - v13 + v14);
          v129[5] = v90;
          v129[6] = v13;
          v129[7] = v12;
          v129[8] = 0;
          v129[9] = 0;
          v130 = 1;
          v131 = v15;
          v132 = v16;
          v133 = v18;
          v23 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v15, v16, v18, (uint64_t)v107);
          v99 = v17;
          v24 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v15, v16, v18, (uint64_t)v107);
          v25.i32[1] = 0;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          *(_QWORD *)&v120 = 0;
          *((_QWORD *)&v120 + 1) = 1;
          v121 = 0;
          v122 = 0;
          if (v91 == 2)
            break;
          v27 = v23;
          v28 = *(_QWORD *)(v92 + v83);
          v5 = v103;
          if (v28)
          {
            v26 = v103;
            v29 = *(_QWORD *)(v28 + 240);
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1B1FAE1BC(v91, 3, v29, v28, v91, 3, (uint64_t)v110);
            v30 = v110[0];
            v76 = (unsigned __int16)v111;
            v79 = WORD1(v111);
            v81 = WORD2(v111);
            v31 = v112;
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            v32 = 0;
            v22 = v92;
            v23 = v27;
            switch(v31)
            {
              case 10:
                v32 = 4;
                if ((_QWORD)v30)
                  goto LABEL_36;
                goto LABEL_40;
              case 11:
                v32 = 5;
                if (!(_QWORD)v30)
                  goto LABEL_40;
                goto LABEL_36;
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
                goto LABEL_19;
              case 25:
                goto LABEL_35;
              case 55:
                v32 = 1;
                if (!(_QWORD)v30)
                  goto LABEL_40;
                goto LABEL_36;
              case 70:
                v32 = 6;
                if (!(_QWORD)v30)
                  goto LABEL_40;
                goto LABEL_36;
              case 71:
                v32 = 7;
                if (!(_QWORD)v30)
                  goto LABEL_40;
                goto LABEL_36;
              case 80:
                v32 = 8;
                if (!(_QWORD)v30)
                  goto LABEL_40;
                goto LABEL_36;
              case 81:
                v32 = 9;
LABEL_35:
                if ((_QWORD)v30)
                  goto LABEL_36;
                goto LABEL_40;
              default:
                v23 = v27;
                if (v31 == 115)
                {
                  v32 = 2;
                  v22 = v92;
                  if (!(_QWORD)v30)
                  {
LABEL_40:
                    swift_bridgeObjectRelease();
                    goto LABEL_41;
                  }
                }
                else
                {
                  v22 = v92;
                  if (v31 != 125)
                  {
LABEL_19:
                    if (qword_1ED4BF430 != -1)
                      swift_once();
                    *(_QWORD *)&v110[0] = 0;
                    *((_QWORD *)&v110[0] + 1) = 0xE000000000000000;
                    swift_retain();
                    sub_1B2229430();
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v110[0] = 0xD00000000000001ALL;
                    *((_QWORD *)&v110[0] + 1) = 0x80000001B232F910;
                    sub_1B1F9A724(v31);
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    v33 = v110[0];
                    v34 = sub_1B2228E90();
                    if (qword_1ED4BF658 != -1)
                      swift_once();
                    *(_QWORD *)&v110[0] = 0;
                    swift_retain();
                    sub_1B1F1AD70(v34, (uint64_t *)v110, v33, *((uint64_t *)&v33 + 1));
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_unknownObjectRelease();
                    v22 = v92;
                    goto LABEL_41;
                  }
                  v32 = 3;
                  if (!(_QWORD)v30)
                    goto LABEL_40;
                }
LABEL_36:
                if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) != (id)2)
                {
                  v35 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v36 = (id)v30;
                  swift_unknownObjectRelease();
                  v37.i64[0] = __PAIR64__(v79, v76);
                  v37.i64[1] = __PAIR64__(v75, v81);
                  v82 = v37;
                  vfx_sampler3d_make((uint64_t)v35 + *((_QWORD *)&v30 + 1), v32, 2, 1, (uint64_t)v110, v37);
                  v78 = v110[1];
                  v80 = v110[0];
                  v74 = v112;
                  v77 = v111;
                  v73 = v113;
                  v39 = v114;
                  v38 = v115;
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease();
                  v116 = v80;
                  v117 = v78;
                  v118 = v77;
                  v119 = v74;
                  v120 = v73;
                  v25.i32[1] = v82.i32[1];
                  v75 = v82.i32[3];
                  v121 = v39;
                  v122 = v38;
                  v22 = v92;
                  goto LABEL_42;
                }
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease_n();
LABEL_41:
                v25.i32[1] = 0;
                v118 = 0u;
                v119 = 0u;
                v116 = 0u;
                v117 = 0u;
                *(_QWORD *)&v120 = 0;
                *((_QWORD *)&v120 + 1) = 1;
                v121 = 0;
                v122 = 0;
                break;
            }
            goto LABEL_42;
          }
LABEL_43:
          v41 = v107[6];
          v42 = v107[8];
          if (!v42)
          {
            v68 = v107[7];
            v69 = (_QWORD *)v107[4];
            v71 = v97;
            v70 = v98;
            v72 = v96;
            goto LABEL_81;
          }
          v104 = v5;
          for (i = 0; i != v42; ++i)
          {
            v45 = (uint64_t *)(v41 + 48 * i);
            v46 = *v45;
            v47 = (void (*)(uint64_t))v45[4];
            v48 = v10[9];
            if (v48)
              v49 = v46 == v48;
            else
              v49 = 0;
            if (v49 || !v106[11])
              goto LABEL_45;
            v50 = v106[9];
            v51 = (_QWORD *)(v105 + v106[8]);
            v52 = v45[2];
            v53 = v51;
            v54 = v50 >> 4;
            v55 = v105;
            if (v50 >= 0x10)
            {
              while (*v53 != v46)
              {
                ++v55;
                v53 += 2;
                if (!--v54)
                  goto LABEL_60;
              }
              v56 = *(unsigned __int8 *)(v55 + v106[10]);
              v57 = v56 > 5;
              v58 = (1 << v56) & 0x23;
              if (v57 || v58 == 0)
              {
LABEL_45:
                v44 = swift_retain();
                v47(v44);
                swift_release();
                goto LABEL_46;
              }
            }
LABEL_60:
            if (swift_conformsToProtocol2())
              v60 = v52;
            else
              v60 = 0;
            if (v60)
            {
              if (v50 < 0x10)
                goto LABEL_45;
              v61 = v51;
              v62 = v50 >> 4;
              v63 = v105;
              while (*v61 != v60)
              {
                ++v63;
                v61 += 2;
                if (!--v62)
                  goto LABEL_73;
              }
              v64 = *(unsigned __int8 *)(v63 + v106[10]);
              v57 = v64 > 5;
              v65 = (1 << v64) & 0x23;
              if (v57 || v65 == 0)
                goto LABEL_45;
LABEL_73:
              v67 = 16 * (v50 >> 4);
              while (*v51 != v60)
              {
                v51 += 2;
                v67 -= 16;
                if (!v67)
                  goto LABEL_45;
              }
            }
LABEL_46:
            v10 = v107;
          }
          v68 = v107[7];
          v41 = v107[6];
          v69 = (_QWORD *)v107[4];
          v71 = v97;
          v70 = v98;
          v72 = v96;
          if ((uint64_t)v107[8] >= 1)
            swift_arrayDestroy();
          v5 = v104;
LABEL_81:
          ecs_stack_allocator_deallocate(v69, v41, 48 * v68);
          v10[6] = v70;
          v10[7] = v71;
          v10[8] = v72;
          v10[9] = v95;
          v10[10] = v94;
          sub_1B1F03804((char *)v99);
          ecs_stack_allocator_pop_snapshot(v101);
          if ((v102 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 376));
          }
          swift_release();
          v9 = v100 + 1;
          if (v100 + 1 == v89)
            return sub_1B19ED748(v123);
        }
        v26 = v103;
LABEL_42:
        *(float *)v25.i32 = a4[8] + 0.000000001;
        v40 = vdupq_lane_s32(v25, 0);
        v40.i32[3] = 0;
        v93 = (float32x4_t)v40;
        swift_retain();
        sub_1B1FE9ABC(v84, v22, v129, (unsigned __int8 *)a4, a1, (uint64_t)&v116, v23, v24, v93, v84);
        v5 = v26;
        swift_release();
        goto LABEL_43;
      }
    }
    return sub_1B19ED748(v123);
  }
  return result;
}

uint64_t type metadata accessor for ParticleGrowEmitter.System()
{
  return objc_opt_self();
}

uint64_t sub_1B20567D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2056808 + 4 * byte_1B22B4498[a1]))(0x6573696F6ELL, 0xE500000000000000);
}

uint64_t sub_1B2056808()
{
  return 0x7269446E69616DLL;
}

uint64_t sub_1B2056820()
{
  return 0x537269446E69616DLL;
}

uint64_t sub_1B2056844()
{
  return 0x746E496573696F6ELL;
}

uint64_t sub_1B2056868()
{
  return 0x6163536573696F6ELL;
}

unint64_t sub_1B2056884()
{
  return 0xD000000000000010;
}

uint64_t sub_1B20568A0()
{
  return 0x676E654C70657473;
}

uint64_t sub_1B20568C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12;
  char v13;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF628D8, (uint64_t (*)(void))sub_1B2057F7C, (uint64_t)&type metadata for ParticleGrowEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2057F7C();
  sub_1B222A180();
  LOBYTE(v12) = *(_BYTE *)v3;
  v13 = 0;
  sub_1B1A7144C();
  sub_1B2229958();
  if (!v2)
  {
    v12 = *(_OWORD *)(v3 + 16);
    v13 = 1;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    LOBYTE(v12) = 2;
    sub_1B2229934();
    LOBYTE(v12) = 3;
    sub_1B2229934();
    LOBYTE(v12) = 4;
    sub_1B2229934();
    LOBYTE(v12) = 5;
    sub_1B2229940();
    LOBYTE(v12) = 6;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B2056B28()
{
  return "GrowEmitterSystem";
}

void sub_1B2056B3C(char *a1)
{
  sub_1B1F93F30(*a1);
}

uint64_t sub_1B2056B48()
{
  unsigned __int8 *v0;

  return sub_1B20567D8(*v0);
}

uint64_t sub_1B2056B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B205755C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2056B74()
{
  sub_1B2057F7C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2056B9C()
{
  sub_1B2057F7C();
  return sub_1B222A1E0();
}

double sub_1B2056BC4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B2057CAC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 12);
    *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)((char *)v7 + 12);
  }
  return result;
}

uint64_t sub_1B2056C0C(_QWORD *a1)
{
  return sub_1B20568C0(a1);
}

uint64_t sub_1B2056C20()
{
  return type metadata accessor for ParticleGrowEmitter.System();
}

double sub_1B2056C3C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  result = 524288.124;
  *(_QWORD *)(a1 + 32) = 0x412000003F800000;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = 500;
  *(_DWORD *)(a1 + 56) = 1036831949;
  return result;
}

void sub_1B2056C78(float32x4_t *a1, uint64_t *a2, unsigned __int8 *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, float32x4_t a9)
{
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  const float *v22;
  uint64_t *v23;
  float32x4_t v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int32 v31;
  int v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int32x4_t v64;
  float32x4_t v68;
  float v69;
  float v70;
  int8x16_t v71;
  float v72;
  float32x4_t v73;
  float v74;
  float v75;
  float v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  unsigned __int32 v80;
  float32x4_t v81;
  float32x2_t v83;
  float v84;
  float32x4_t v85;
  int32x2_t v86;
  float v87;
  uint64_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  uint64_t v109;
  __int32 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int32 v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  float32x4_t v123;
  __int32 v124;
  __int32 v125;
  float32x4_t v126;
  __int32 v127;
  __int32 v128;
  __int32 v129;
  __int32 v130;
  float32x4_t v131;
  uint64_t v132;
  float v133;
  int v134;
  int v135;
  float32x4_t v136;
  float32x4_t v137;
  _BYTE v138[80];
  float32x4_t v139[4];
  char v140;
  int v141;

  v14 = a2[6];
  v15 = a2[7];
  if (v14 != v15)
  {
    v19 = HIDWORD(a8);
    v20 = *a1;
    v21 = a1[1].i64[0];
    v141 = *a3;
    LODWORD(v133) = *(_QWORD *)(a3 + 36);
    v22 = (const float *)(a3 + 56);
    v132 = *((_QWORD *)a3 + 6);
    v117 = *a2;
    v23 = (uint64_t *)(*a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v24 = vld1q_dup_f32(v22);
    v131 = v24;
    v26 = (_DWORD)a8 == -1 && HIDWORD(a8) == 0;
    v118 = a8 << 32;
    v122 = (int)a8;
    v9.i32[0] = 1.0;
    v120 = *a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries;
    v121 = HIDWORD(a8);
    v112 = a6;
    v113 = a7;
    v111 = v15;
    while (1)
    {
      v27 = 0;
      v28 = v15 - v14;
      v114 = v14;
      v29 = a7 + 16 * v14;
      v30 = a6 + 16 * v14;
      v31 = v12.i32[3];
      v32 = HIDWORD(v13);
      v33 = v10.i32[3];
      v10 = v20;
      while (1)
      {
        if (v141 == 2)
        {
          v35 = a4[1];
          v34 = a4[2];
          v36 = a4[3] ^ v35;
          v37 = a4[4] ^ v34;
          v38 = v36 ^ v34;
          v39 = v37 ^ v35;
          v20.f32[0] = (float)((9 * ((((unint64_t)(5 * v34) >> 32) >> 25) | (640 * v34))) & 0xFFFFFF)
                     * 0.000000059605;
          v40 = v39 ^ v36 ^ (v34 << 17);
          v41 = __ROR8__(v37, 19);
          v42 = v40 ^ v38;
          v43 = v38 ^ v41 ^ v39;
          v44 = v40 ^ (v38 << 17) ^ v43;
          v45 = v42 ^ __ROR8__(v38 ^ v41, 19);
          a4[1] = v45 ^ v43;
          a4[2] = v44 ^ v42;
          a4[3] = v44 ^ (v42 << 17);
          a4[4] = __ROR8__(v45, 19);
          v20.f32[1] = (float)((9 * ((((unint64_t)(5 * v38) >> 32) >> 25) | (640 * v38))) & 0xFFFFFF)
                     * 0.000000059605;
          v20.f32[2] = (float)((9 * ((((unint64_t)(5 * v42) >> 32) >> 25) | (640 * v42))) & 0xFFFFFF)
                     * 0.000000059605;
          v46.i64[0] = 0xBF000000BF000000;
          v46.i64[1] = 0xBF000000BF000000;
          v47 = vaddq_f32(v20, v46);
          v47.i32[3] = v128;
        }
        else
        {
          v48 = vmulq_f32(vmulq_n_f32(v10, COERCE_FLOAT(*((_QWORD *)a3 + 5))), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu));
          v48.i32[3] = v11.i32[3];
          v123 = v48;
          v124 = v31;
          v134 = v32;
          v136 = v10;
          v127 = v33;
          v47 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(a5 + 72))(a5);
          v31 = v124;
          v33 = v127;
          v32 = v134;
          v10 = v136;
          v9.i32[0] = 1.0;
          v23 = (uint64_t *)v120;
          LODWORD(v19) = v121;
          v47.i32[3] = v130;
          v11 = v123;
        }
        v49 = (int8x16_t)vabsq_f32(v47);
        if (*(float *)v49.i32 <= 0.00000011921
          && (v49.i32[0] = vextq_s8(v49, v49, 8uLL).u32[0],
              *(int32x2_t *)v49.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v49.i8),
              (v49.i8[4] & 1) != 0)
          && (v49.i8[0] & 1) != 0)
        {
          v50 = (float32x4_t)xmmword_1B2244DD0;
        }
        else
        {
          v51 = (int32x4_t)vmulq_f32(v47, v47);
          v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
          v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
          v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
          v50 = vmulq_n_f32(v47, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
          v50.i32[3] = v129;
        }
        v12 = vmulq_n_f32(v50, v133);
        v12.i32[3] = v31;
        v54 = vaddq_f32(a1[2], v12);
        v55 = (int32x4_t)vmulq_f32(v54, v54);
        v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
        v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
        v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
        v10 = vaddq_f32(v10, vmulq_f32(v131, vmulq_n_f32(v54, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0])));
        v10.i32[3] = v33;
        v58 = v10;
        v58.i32[3] = v9.i32[0];
        *(float32x4_t *)(v30 + 16 * v27) = v58;
        v59 = vmulq_f32(v50, v50);
        v59.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u64[0];
        v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 0);
        v60.i32[3] = 0;
        v61 = vrsqrteq_f32(v60);
        v62 = vmulq_f32(v61, vrsqrtsq_f32(v60, vmulq_f32(v61, v61)));
        v63 = (int8x16_t)vmulq_f32(v62, vrsqrtsq_f32(v60, vmulq_f32(v62, v62)));
        v64 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v59.f32[0] != 0.0)), 0x1FuLL));
        v64.i32[3] = 0;
        __asm { FMOV            V3.4S, #1.0 }
        v73 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v64), v63, _Q3);
        v68 = vmulq_f32(v50, v73);
        _Q3.i32[0] = v68.i32[2];
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v69 = *(float *)vbslq_s8(v71, v9, _Q3).i32;
        *(float *)v71.i32 = v68.f32[1] / (float)(fabsf(v68.f32[2]) + *(float *)v9.i32);
        v70 = vmuls_lane_f32(*(float *)v71.i32, *(float32x2_t *)v68.f32, 1);
        *(float *)v71.i32 = -(float)(v68.f32[0] * *(float *)v71.i32);
        v72 = v68.f32[2] + (float)(v69 * v70);
        v73.f32[0] = v69 * *(float *)v71.i32;
        v74 = *(float *)v9.i32 - v70;
        v75 = vmuls_lane_f32(-v69, *(float32x2_t *)v68.f32, 1);
        v76 = v68.f32[2] + (float)(v72 + v74);
        if (v76 > 0.0)
        {
          v77 = (float32x2_t)vrev64_s32(*(int32x2_t *)v68.f32);
          *(int32x2_t *)v81.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), 0);
          v81.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v77.u32[1], LODWORD(v75)), v77).u32[0];
          v78 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v76 + *(float *)v9.i32)), v73.u32[0]);
          v79 = vmul_f32(v78, v78);
          v78.i32[0] = v71.i32[0];
          v80 = vsub_f32(*(float32x2_t *)v73.f32, v78).u32[0];
          v71.i32[1] = v79.i32[1];
          v81.i64[1] = v71.i64[0];
          *(float *)v71.i32 = 0.5 / v78.f32[1];
LABEL_29:
          v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 0);
          goto LABEL_30;
        }
        if (v72 < v74 || v72 < v68.f32[2])
        {
          if (v74 <= v68.f32[2])
          {
            v87 = sqrtf((float)((float)(v68.f32[2] + *(float *)v9.i32) - v72) - v74);
            v68.i32[0] = vsubq_f32(v68, v68).u32[0];
            v81.f32[1] = v68.f32[1] + v75;
            v81.f32[2] = v87 * v87;
            v81.f32[3] = v73.f32[0] - *(float *)v71.i32;
            *(float *)v71.i32 = 0.5 / v87;
            goto LABEL_29;
          }
          v84 = sqrtf((float)((float)(v74 + *(float *)v9.i32) - v72) - v68.f32[2]);
          v85.f32[0] = *(float *)v71.i32 + v73.f32[0];
          v83 = (float32x2_t)vrev64_s32(*(int32x2_t *)v68.f32);
          v85.f32[1] = v84 * v84;
          v86 = (int32x2_t)vadd_f32(v83, (float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v75)));
        }
        else
        {
          v84 = sqrtf((float)((float)(v72 + *(float *)v9.i32) - v74) - v68.f32[2]);
          v85.f32[0] = v84 * v84;
          v85.f32[1] = *(float *)v71.i32 + v73.f32[0];
          v86 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v75), v68.u32[0]), *(float32x2_t *)v68.f32);
        }
        *(int32x2_t *)&v85.u32[2] = v86;
        *(float *)v86.i32 = 0.5 / v84;
        v81 = (float32x4_t)vdupq_lane_s32(v86, 0);
LABEL_30:
        v20 = vmulq_f32(v81, v85);
        *(float32x4_t *)(v29 + 16 * v27) = v20;
        if (!v26 && v118 >= (uint64_t)0xFFFFFFFF00000001 && v122 < v23[1])
        {
          v88 = *v23;
          if ((_DWORD)v19 == -1 || *(_DWORD *)(v88 + 12 * (int)v122 + 8) == (_DWORD)v19)
          {
            v125 = v31;
            v135 = v32;
            v137 = v10;
            v126 = v11;
            sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v117 + 136) + 8 * *(int *)(v88 + 12 * (int)v122) + 32), *(_DWORD *)(v88 + 12 * (int)v122), *(_WORD *)(v88 + 12 * (int)v122 + 4), 64, v117, (uint64_t)v138);
            sub_1B19F66A0((uint64_t)v138, (uint64_t)v139, qword_1ED4B8BB0);
            if ((v140 & 1) != 0)
            {
              v23 = (uint64_t *)v120;
              LODWORD(v19) = v121;
              v9.i32[0] = 1.0;
            }
            else
            {
              v89 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v139[3], v139[2], *(float32x4_t *)(v30 + 16 * v27), 2), v139[1], *(float32x2_t *)(v30 + 16 * v27), 1), v139[0], COERCE_FLOAT(*(_OWORD *)(v30 + 16 * v27)));
              v20.i32[3] = v116;
              v9.i32[0] = 1.0;
              v89.i32[3] = 1.0;
              *(float32x4_t *)(v30 + 16 * v27) = v89;
              v23 = (uint64_t *)v120;
              LODWORD(v19) = v121;
            }
            v32 = v135;
            v10 = v137;
            v12.i32[3] = v125;
            v11 = v126;
          }
        }
        HIDWORD(v13) = v32;
        if (v132 < v21 + v27 + 1)
          break;
        ++v27;
        v31 = v12.i32[3];
        v33 = v10.i32[3];
        if (v28 == v27)
        {
          v109 = v21 + v27;
          v20 = v10;
          goto LABEL_43;
        }
      }
      v21 = 0;
      v109 = 0;
      v91 = a4[1];
      v90 = a4[2];
      v92 = a4[3] ^ v91;
      v93 = a4[4] ^ v90;
      v94 = v92 ^ v90;
      v95 = v93 ^ v91;
      v20.f32[0] = (float)((9 * ((((unint64_t)(5 * v90) >> 32) >> 25) | (640 * v90))) & 0xFFFFFF);
      v96 = v95 ^ v92 ^ (v90 << 17);
      v97 = __ROR8__(v93, 19);
      v98 = v96 ^ v94;
      v99 = v94 ^ v97 ^ v95;
      v100 = v96 ^ (v94 << 17) ^ v99;
      v101 = v98 ^ __ROR8__(v94 ^ v97, 19);
      a4[1] = v101 ^ v99;
      a4[2] = v100 ^ v98;
      v20.f32[0] = v20.f32[0] * 0.000000059605;
      v20.f32[1] = (float)((9 * ((((unint64_t)(5 * v94) >> 32) >> 25) | (640 * v94))) & 0xFFFFFF)
                 * 0.000000059605;
      v20.f32[2] = (float)((9 * ((((unint64_t)(5 * v98) >> 32) >> 25) | (640 * v98))) & 0xFFFFFF)
                 * 0.000000059605;
      __asm { FMOV            V1.4S, #-1.0 }
      v103.i64[0] = 0x4000000040000000;
      v103.i64[1] = 0x4000000040000000;
      v104 = vmlaq_f32(*((float32x4_t *)a3 + 1), a9, vsubq_f32(vmlaq_f32(_Q1, v103, v20), *((float32x4_t *)a3 + 1)));
      v105 = (int32x4_t)vmulq_f32(v104, v104);
      a4[3] = v100 ^ (v98 << 17);
      a4[4] = __ROR8__(v101, 19);
      v105.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v105, 2), vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1))).u32[0];
      v106 = vrsqrte_f32((float32x2_t)v105.u32[0]);
      v107 = vmul_f32(v106, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v106, v106)));
      v108 = vmulq_n_f32(v104, vmul_f32(v107, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v107, v107))).f32[0]);
      v108.i32[3] = v110;
      a1[2] = v108;
      a7 = v113;
      v15 = v111;
      a6 = v112;
      v14 = v114 + v27 + 1;
      v20 = 0uLL;
      if (~v114 + v111 == v27)
      {
LABEL_43:
        a1[1].i64[0] = v109;
        *a1 = v20;
        return;
      }
    }
  }
}

uint64_t sub_1B20573FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7498084 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614D6D6F646E6172 && a2 == 0xED00007269446E69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B205755C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6573696F6ELL && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7269446E69616DLL && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x537269446E69616DLL && a2 == 0xED00006461657270 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E496573696F6ELL && a2 == 0xEE00797469736E65 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6163536573696F6ELL && a2 == 0xEA0000000000656CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B232D150 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x676E654C70657473 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1B2057888(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE v13[16];
  __int128 v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  float v20[4];
  __int128 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;

  v2 = *a1;
  swift_retain();
  v3 = a1[1];
  swift_retain();
  sub_1B1D18DA0(v3, (uint64_t)v13);
  swift_release();
  v4 = v13[0];
  if (v13[0] == 3)
  {
    v4 = 0;
    v5 = xmmword_1B2244DD0;
    v6 = 1092616192;
    v7 = 1065353216;
    v8 = 1036831949;
    v9 = 500;
    v10 = 1065353216;
  }
  else
  {
    v8 = v19;
    v9 = v18;
    v6 = v16;
    v10 = v17;
    v7 = v15;
    v5 = v14;
  }
  LOBYTE(v20[0]) = v4;
  v21 = v5;
  v22 = v7;
  v23 = v6;
  v24 = v10;
  v25 = v9;
  v26 = v8;
  v11 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE9CD4(v11, v2, v2, (uint64_t)a1, v20);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

ValueMetadata *type metadata accessor for GrowEmitterRuntime()
{
  return &type metadata for GrowEmitterRuntime;
}

__n128 initializeWithCopy for ParticleGrowEmitter(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleGrowEmitter(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[60])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleGrowEmitter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 60) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGrowEmitter()
{
  return &type metadata for ParticleGrowEmitter;
}

uint64_t sub_1B2057A64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _OWORD v11[2];
  __int128 v12;
  char v13;

  sub_1B19F8E54(0, &qword_1EEF628B0, (uint64_t (*)(void))sub_1B2057C68, (uint64_t)&type metadata for GrowEmitterRuntime.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2057C68();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v13 = 0;
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    v11[1] = v12;
    LOBYTE(v12) = 1;
    v9 = sub_1B22297FC();
    v13 = 2;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v12;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B2057C68()
{
  unint64_t result;

  result = qword_1EEF628B8;
  if (!qword_1EEF628B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4810, &type metadata for GrowEmitterRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF628B8);
  }
  return result;
}

uint64_t sub_1B2057CAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t result;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;

  v26 = a2;
  sub_1B19F8E54(0, &qword_1EEF628C8, (uint64_t (*)(void))sub_1B2057F7C, (uint64_t)&type metadata for ParticleGrowEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v25 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2057F7C();
  v9 = v8;
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = (uint64_t)a1;
  v11 = v5;
  v12 = v26;
  v29 = 0;
  sub_1B1A71408();
  v13 = v27;
  sub_1B2229814();
  v14 = v28;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v29 = 1;
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v25 = v28;
  LOBYTE(v28) = 2;
  sub_1B22297F0();
  v16 = v15;
  LOBYTE(v28) = 3;
  sub_1B22297F0();
  v18 = v17;
  LOBYTE(v28) = 4;
  sub_1B22297F0();
  v20 = v19;
  LOBYTE(v28) = 5;
  v21 = sub_1B22297FC();
  LOBYTE(v28) = 6;
  sub_1B22297F0();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v13);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v10);
  *(_BYTE *)v12 = v14;
  *(_OWORD *)(v12 + 16) = v25;
  *(_DWORD *)(v12 + 32) = v16;
  *(_DWORD *)(v12 + 36) = v18;
  *(_DWORD *)(v12 + 40) = v20;
  *(_QWORD *)(v12 + 48) = v21;
  *(_DWORD *)(v12 + 56) = v23;
  return result;
}

unint64_t sub_1B2057F7C()
{
  unint64_t result;

  result = qword_1EEF628D0;
  if (!qword_1EEF628D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B47C0, &type metadata for ParticleGrowEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF628D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleGrowEmitter.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B205800C + 4 * byte_1B22B44A4[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B2058040 + 4 * byte_1B22B449F[v4]))();
}

uint64_t sub_1B2058040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2058048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2058050);
  return result;
}

uint64_t sub_1B205805C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2058064);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B2058068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2058070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleGrowEmitter.CodingKeys()
{
  return &type metadata for ParticleGrowEmitter.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for GrowEmitterRuntime.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B20580D8 + 4 * byte_1B22B44AE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B205810C + 4 * byte_1B22B44A9[v4]))();
}

uint64_t sub_1B205810C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2058114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B205811CLL);
  return result;
}

uint64_t sub_1B2058128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2058130);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B2058134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B205813C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GrowEmitterRuntime.CodingKeys()
{
  return &type metadata for GrowEmitterRuntime.CodingKeys;
}

unint64_t sub_1B205815C()
{
  unint64_t result;

  result = qword_1EEF628E0;
  if (!qword_1EEF628E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B46E0, &type metadata for GrowEmitterRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF628E0);
  }
  return result;
}

unint64_t sub_1B20581A4()
{
  unint64_t result;

  result = qword_1EEF628E8;
  if (!qword_1EEF628E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4798, &type metadata for ParticleGrowEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF628E8);
  }
  return result;
}

unint64_t sub_1B20581EC()
{
  unint64_t result;

  result = qword_1EEF628F0;
  if (!qword_1EEF628F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4708, &type metadata for ParticleGrowEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF628F0);
  }
  return result;
}

unint64_t sub_1B2058234()
{
  unint64_t result;

  result = qword_1EEF628F8;
  if (!qword_1EEF628F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4730, &type metadata for ParticleGrowEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF628F8);
  }
  return result;
}

unint64_t sub_1B205827C()
{
  unint64_t result;

  result = qword_1EEF62900;
  if (!qword_1EEF62900)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4650, &type metadata for GrowEmitterRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62900);
  }
  return result;
}

unint64_t sub_1B20582C4()
{
  unint64_t result;

  result = qword_1EEF62908;
  if (!qword_1EEF62908)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4678, &type metadata for GrowEmitterRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62908);
  }
  return result;
}

uint64_t sub_1B2058308@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a2;
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v3, v4);
  v22 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF62970, (uint64_t (*)(void))sub_1B205CD70, (uint64_t)&type metadata for SceneKitAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v23 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - v9;
  v11 = type metadata accessor for SceneKitAsset(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  sub_1B19FA070(a1, a1[3]);
  sub_1B205CD70();
  v16 = v24;
  sub_1B222A150();
  if (!v16)
  {
    v17 = v21;
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v18 = (uint64_t)v22;
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v23);
    sub_1B17927B4(v18, (uint64_t)v14);
    sub_1B1792810((uint64_t)v14, v17, type metadata accessor for SceneKitAsset);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1A04628((uint64_t)v14, type metadata accessor for SceneKitAsset);
}

uint64_t sub_1B205853C()
{
  return 0x7465737361;
}

uint64_t sub_1B2058550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7465737361 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B20585DC()
{
  sub_1B205CD70();
  return sub_1B222A1D4();
}

uint64_t sub_1B2058604()
{
  sub_1B205CD70();
  return sub_1B222A1E0();
}

uint64_t sub_1B205862C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B2058308(a1, a2);
}

uint64_t sub_1B2058640(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF62988, (uint64_t (*)(void))sub_1B205CD70, (uint64_t)&type metadata for SceneKitAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B205CD70();
  sub_1B222A180();
  sub_1B2228110();
  sub_1B19E52CC(&qword_1EEF62990, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  sub_1B2229904();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B2058770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_1B2228110();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_1B20587AC(char *a1, char *a2)
{
  return sub_1B1F9627C(*a1, *a2);
}

uint64_t sub_1B20587B8()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2058840()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20588A4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2058928@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B2058984(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746E457465737361;
  if (*v1)
    v2 = 0x676E6979616C70;
  v3 = 0xEB00000000797469;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B20589CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x676E6979616C70;
  else
    return 0x746E457465737361;
}

uint64_t sub_1B2058A10@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B2058A70()
{
  sub_1B205C628();
  return sub_1B222A1D4();
}

uint64_t sub_1B2058A98()
{
  sub_1B205C628();
  return sub_1B222A1E0();
}

uint64_t sub_1B2058AC0(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _DWORD v13[3];
  char v14;
  char v15;
  uint64_t v16;

  v13[2] = a3;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF62948, (uint64_t (*)(void))sub_1B205C628, (uint64_t)&type metadata for SceneKitAssetInstance.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B205C628();
  sub_1B222A180();
  v16 = a2;
  v15 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v3)
  {
    v14 = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

_QWORD *sub_1B2058C10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = sub_1B205C488(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1B2058C44(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B2058AC0(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
}

double sub_1B2058C60@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_1B2058C74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  v2 = (char *)a2 + *(int *)(a1 + 24);
  v3 = sub_1B2228110();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t sub_1B2058CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

_QWORD *sub_1B2058E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  unsigned __int8 *v25;
  __int128 v26;
  _QWORD *result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[8];
  _QWORD v38[12];
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  _BYTE v72[40];
  _OWORD v73[2];
  uint64_t v74;

  v2 = v1;
  v4 = 0;
  v5 = *(_OWORD *)(v1 + 32);
  v73[0] = *(_OWORD *)(v1 + 16);
  v73[1] = v5;
  v74 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v73, 0x200000000, v37);
  sub_1B19F66A0((uint64_t)v37, (uint64_t)v50, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v50[0])
  {
    if (v56 >= 1)
    {
      v31 = v53;
      if (v53)
      {
        v28 = v1;
        v30 = v52;
        v6 = v55;
        v36 = v55[4];
        v7 = *(unsigned __int8 *)(v54 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v34 = type metadata accessor for SceneKitRenderer(0);
        v57[0] = v50[0];
        v57[1] = v50[1];
        v58 = v51;
        swift_retain();
        swift_retain();
        swift_retain();
        v8 = 0;
        v29 = v7;
        while (1)
        {
          v9 = (unsigned int *)(v30 + 48 * v8);
          v33 = *v9;
          v32 = v9[1];
          v10 = (uint64_t *)*((_QWORD *)v9 + 2);
          v11 = *((_QWORD *)v9 + 3);
          v13 = *((_QWORD *)v9 + 4);
          v12 = *((_QWORD *)v9 + 5);
          v35 = v4;
          if (v7)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v36);
          sub_1B19F66A0((uint64_t)(v6 + 6), (uint64_t)v72, &qword_1ED4B7FB0);
          v15 = v6[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v6[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v6[7] = v16;
          v6[9] = 0;
          v6[10] = 0;
          v6[8] = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&off_1E63A60C8, v10, v11, v13, (uint64_t)v6);
          v18 = sub_1B1A12038(v34, (uint64_t)&off_1E638A890, v10, v11, v13, (uint64_t)v6);
          v19 = (id *)v18;
          if (v10)
          {
            if (v13)
            {
              v4 = v35;
              v20 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 72);
              v21 = (unsigned __int8 *)(v17 + 8);
              do
              {
                sub_1B205BA5C(a1, *((_QWORD *)v21 - 1), *v21, v19);
                v19 = (id *)((char *)v19 + v20);
                v21 += 12;
                --v13;
              }
              while (v13);
              goto LABEL_18;
            }
          }
          else if ((_DWORD)v33 != (_DWORD)v32)
          {
            v4 = v35;
            v22 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 72);
            v23 = v32 - v33;
            v24 = (id *)(v18 + v22 * v33);
            v25 = (unsigned __int8 *)(v17 + 12 * v33 + 8);
            do
            {
              sub_1B205BA5C(a1, *((_QWORD *)v25 - 1), *v25, v24);
              v24 = (id *)((char *)v24 + v22);
              v25 += 12;
              --v23;
            }
            while (v23);
            goto LABEL_18;
          }
          v4 = v35;
LABEL_18:
          sub_1B1F05D48(v6, (unsigned __int16 **)v57, (uint64_t)v72);
          sub_1B1F03804((char *)v12);
          ecs_stack_allocator_pop_snapshot(v36);
          v7 = v29;
          if ((v29 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          if (++v8 == v31)
          {
            sub_1B1A086DC(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            v2 = v28;
            break;
          }
        }
      }
    }
    sub_1B1A086DC(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v26 = *(_OWORD *)(v2 + 72);
  v70[0] = *(_OWORD *)(v2 + 56);
  v70[1] = v26;
  v71 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v70, 0x200000000, v38);
  result = (_QWORD *)sub_1B19F66A0((uint64_t)v38, (uint64_t)&v39, (unint64_t *)&qword_1ED4B7DE0);
  if (v39)
  {
    v59 = v39;
    v60 = v40;
    v61 = v41;
    v62 = v42;
    v63 = v43;
    v64 = v44;
    v65 = v45;
    v66 = v46;
    v67 = v47;
    v68 = v48;
    v69 = v49;
    swift_retain();
    swift_retain();
    sub_1B219D8A4((uint64_t)&v59, v2, a1);
    swift_release();
    swift_release();
    return sub_1B1A086DC(v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  return result;
}

id sub_1B2059260(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)sub_1B2228074();
  if (a2)
  {
    type metadata accessor for LoadingOption(0);
    sub_1B19E52CC(&qword_1EEF58568, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226C434);
    v5 = (void *)sub_1B2228524();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v14[0] = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_sceneWithURL_options_error_, v4, v5, v14);

  v7 = v14[0];
  if (v6)
  {
    v8 = sub_1B2228110();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14[0];
    sub_1B2227FB4();

    swift_willThrow();
    v12 = sub_1B2228110();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t type metadata accessor for SceneKitAssetSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B20593FC()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v28 = qword_1ED4D09F8;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  v32 = 2;
  v33 = 0;
  swift_retain();
  sub_1B1B12E88(1, 2, (uint64_t)&v11);
  swift_release();
  v1 = v12;
  v2 = v13;
  v3 = v15;
  v4 = v14 | 4;
  *(_QWORD *)(v0 + 16) = v11;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v22 = qword_1ED4D09F8;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  swift_retain();
  sub_1B1E3DEC4(1, (uint64_t)v16);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = type metadata accessor for SceneKitRenderer(0);
  *(_QWORD *)(inited + 40) = &off_1E638A8C0;
  sub_1B1B44110(&v17, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v16);
  v6 = v18;
  v7 = v19;
  v8 = v21;
  v9 = v20 | 4;
  *(_QWORD *)(v0 + 56) = v17;
  *(_DWORD *)(v0 + 64) = v6;
  *(_BYTE *)(v0 + 68) = v7;
  *(_QWORD *)(v0 + 72) = v9;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v8;
  return v0;
}

uint64_t sub_1B20595DC()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20593FC();
  return v0;
}

const char *sub_1B2059610()
{
  return "SceneKitAsset";
}

uint64_t sub_1B2059628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

_QWORD *sub_1B2059788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  char v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  double *v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  id *v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  _QWORD *v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  void *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  os_unfair_lock_s *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id *v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  float v122;
  float v123;
  float v124;
  float32x4_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  double v129;
  simd_float4x4 v130;
  double v131;
  double v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  void *v138;
  double v139;
  uint64_t v140;
  uint64_t ObjectType;
  double (*v142)(uint64_t, uint64_t);
  double v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  double v147;
  double v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id *v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  double v179;
  simd_float4x4 v180;
  double v181;
  double v182;
  id v183;
  void *v184;
  id v185;
  void *v186;
  id v187;
  void *v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  double (*v192)(uint64_t, uint64_t);
  double v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t);
  double v197;
  double v198;
  id v199;
  void *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _BYTE v254[160];
  uint64_t v255;
  uint64_t v256;
  _BYTE v257[160];
  simd_float4x4 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _BYTE v263[144];
  _BYTE v264[144];
  _BYTE v265[160];
  uint64_t v266[22];
  _QWORD v267[8];
  _QWORD v268[8];
  _QWORD v269[8];
  simd_float4x4 v270;
  simd_float4x4 v271;
  _OWORD v272[2];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  _OWORD v282[2];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _OWORD v289[2];
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  _OWORD v299[2];
  uint64_t v300;
  _OWORD v301[2];
  uint64_t v302;
  _OWORD v303[2];
  uint64_t v304;
  _BYTE v305[40];
  _OWORD v306[2];
  uint64_t v307;
  _BYTE v308[40];
  _OWORD v309[2];
  uint64_t v310;
  _BYTE v311[48];
  simd_float4x4 v312;
  simd_float4x4 v313;

  v2 = a1;
  v3 = *(_OWORD *)(v1 + 32);
  v306[0] = *(_OWORD *)(v1 + 16);
  v306[1] = v3;
  v307 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v306, 0x200000000, v267);
  result = (_QWORD *)sub_1B19F66A0((uint64_t)v267, (uint64_t)v289, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v289[0])
    return result;
  v296 = v289[0];
  v297 = v289[1];
  v298 = v290;
  v252 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    return sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v215 = v1;
  v5 = 0;
  v226 = v291;
  v6 = v292;
  v7 = v293;
  v242 = v294;
  v8 = v295;
  sub_1B1BDB378(v2);
  v251 = v2;
  if (v8 < 1 || !v6)
    goto LABEL_44;
  v237 = v242[4];
  v9 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v231 = type metadata accessor for SceneKitRenderer(0);
  v299[0] = v296;
  v299[1] = v297;
  v300 = v298;
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = 0;
  v224 = v6;
  v222 = v9;
  do
  {
    v248 = v5;
    v234 = v10;
    v11 = (unsigned int *)(v226 + 48 * v10);
    v12 = *v11;
    v14 = (uint64_t *)*((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    v16 = *((_QWORD *)v11 + 4);
    v15 = *((_QWORD *)v11 + 5);
    v228 = v11[1];
    if (v9)
    {
      v17 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v17);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v237);
    sub_1B19F66A0((uint64_t)(v242 + 6), (uint64_t)v311, &qword_1ED4B7FB0);
    v18 = v242[4];
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v242[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
    v242[7] = v19;
    v242[9] = 0;
    v242[10] = 0;
    v242[8] = 0;
    swift_release();
    v20 = sub_1B1A12038(v231, (uint64_t)&off_1E638A890, v14, v13, v16, (uint64_t)v242);
    if (!v14)
    {
      v2 = v251;
      if ((_DWORD)v12 == (_DWORD)v228)
        goto LABEL_27;
      v35 = *(_QWORD *)(*(_QWORD *)(v231 - 8) + 72);
      v36 = v228 - v12;
      v37 = (id *)(v20 + v35 * v12 + 8);
      while (1)
      {
        if (!*v37)
          goto LABEL_31;
        v44 = objc_msgSend(*v37, sel_scene);
        v45 = *(v37 - 1);
        if (v44)
        {
          v46 = v44;
          if (!v45)
          {

LABEL_31:
            v38 = *(_QWORD *)(v2 + v252);
            if (v38)
            {
              v39 = *(_QWORD *)(v38 + 16);
              swift_unknownObjectRetain();
            }
            else
            {
              v39 = 0;
            }
            v40 = objc_msgSend((id)objc_opt_self(), sel_rendererWithDevice_options_, v39, 0);
            swift_unknownObjectRelease();
            objc_msgSend(v40, sel_setScene_, *(v37 - 1));
            v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD59D0]), sel_init);
            v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD5960]), sel_init);
            objc_msgSend(v41, sel_setCamera_, v42);

            objc_msgSend(v40, sel_setPointOfView_, v41);
            objc_msgSend(v40, sel_setAutoenablesDefaultLighting_, 1);

            v43 = *v37;
            *v37 = v40;

            goto LABEL_34;
          }
          sub_1B205C394();
          v47 = v45;
          v48 = v46;
          v49 = sub_1B222901C();

          v2 = v251;
          if ((v49 & 1) == 0)
            goto LABEL_31;
        }
        else if (v45)
        {
          goto LABEL_31;
        }
LABEL_34:
        v37 = (id *)((char *)v37 + v35);
        if (!--v36)
          goto LABEL_27;
      }
    }
    v2 = v251;
    if (v16)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v231 - 8) + 72);
      v22 = (id *)(v20 + 8);
      do
      {
        if (!*v22)
          goto LABEL_14;
        v29 = objc_msgSend(*v22, sel_scene);
        v30 = *(v22 - 1);
        if (v29)
        {
          v31 = v29;
          if (!v30)
          {

LABEL_14:
            v23 = *(_QWORD *)(v2 + v252);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 16);
              swift_unknownObjectRetain();
            }
            else
            {
              v24 = 0;
            }
            v25 = objc_msgSend((id)objc_opt_self(), sel_rendererWithDevice_options_, v24, 0);
            swift_unknownObjectRelease();
            objc_msgSend(v25, sel_setScene_, *(v22 - 1));
            v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD59D0]), sel_init);
            v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD5960]), sel_init);
            objc_msgSend(v26, sel_setCamera_, v27);

            objc_msgSend(v25, sel_setPointOfView_, v26);
            objc_msgSend(v25, sel_setAutoenablesDefaultLighting_, 1);

            v28 = *v22;
            *v22 = v25;

            goto LABEL_17;
          }
          sub_1B205C394();
          v32 = v30;
          v33 = v31;
          v34 = sub_1B222901C();

          v2 = v251;
          if ((v34 & 1) == 0)
            goto LABEL_14;
        }
        else if (v30)
        {
          goto LABEL_14;
        }
LABEL_17:
        v22 = (id *)((char *)v22 + v21);
        --v16;
      }
      while (v16);
    }
LABEL_27:
    v5 = v248;
    sub_1B1F05D48(v242, (unsigned __int16 **)v299, (uint64_t)v311);
    sub_1B1F03804((char *)v15);
    ecs_stack_allocator_pop_snapshot(v237);
    v9 = v222;
    if ((v222 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
    }
    swift_release();
    v10 = v234 + 1;
  }
  while (v234 + 1 != v224);
  sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_44:
  v50 = *(_OWORD *)(v215 + 72);
  v309[0] = *(_OWORD *)(v215 + 56);
  v309[1] = v50;
  v310 = *(_QWORD *)(v215 + 88);
  sub_1B1E8FCE4(v2, (uint64_t)v309, 0x200000000, v268);
  sub_1B19F66A0((uint64_t)v268, (uint64_t)v282, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v282[0])
  {
    if (v288 >= 1)
    {
      v229 = v285;
      if (v285)
      {
        v249 = v5;
        v51 = v287;
        v227 = v284;
        v52 = v287[4];
        v53 = *(unsigned __int8 *)(v286 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v238 = type metadata accessor for SceneKitRenderer(0);
        v301[0] = v282[0];
        v301[1] = v282[1];
        v302 = v283;
        v221 = (uint64_t)(v51 + 6);
        v243 = v51;
        v218 = v51 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v54 = 0;
        v223 = v53;
        v225 = v52;
        do
        {
          v55 = (unsigned int *)(v227 + 48 * v54);
          v235 = *v55;
          v232 = v55[1];
          v57 = (uint64_t *)*((_QWORD *)v55 + 2);
          v56 = *((_QWORD *)v55 + 3);
          v58 = *((_QWORD *)v55 + 4);
          v59 = *((_QWORD *)v55 + 5);
          if (v53)
          {
            v60 = *(os_unfair_lock_s **)(v59 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v60);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v59 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v52);
          sub_1B19F66A0(v221, (uint64_t)v308, &qword_1ED4B7FB0);
          v61 = v243[4];
          v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v243[6] = ecs_stack_allocator_allocate(v61, 48 * v62, 8);
          v243[7] = v62;
          v218[1] = 0;
          v218[2] = 0;
          *v218 = 0;
          swift_release();
          v63 = sub_1B1A12038(v238, (uint64_t)&off_1E638A890, v57, v56, v58, (uint64_t)v243);
          v64 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v57, v56, v58, (uint64_t)v243);
          if (v57)
          {
            if (v58)
            {
              v65 = *(_QWORD *)(*(_QWORD *)(v238 - 8) + 72);
              v66 = (id *)(v63 + 8);
              v67 = (double *)(v64 + 32);
              do
              {
                v68 = *v66;
                v69 = objc_msgSend(v68, sel_scene);
                if (v69)
                {
                  v70 = v69;
                  v71 = objc_msgSend(v69, sel_rootNode);

                  objc_msgSend(v71, sel_setSimdTransform_, *(v67 - 4), *(v67 - 2), *v67, v67[2]);
                }
                v66 = (id *)((char *)v66 + v65);

                v67 += 8;
                --v58;
              }
              while (v58);
            }
          }
          else if ((_DWORD)v235 != (_DWORD)v232)
          {
            v72 = *(_QWORD *)(*(_QWORD *)(v238 - 8) + 72);
            v73 = v232 - v235;
            v74 = (double *)(v64 + (v235 << 6) + 32);
            v75 = (id *)(v63 + v72 * v235 + 8);
            do
            {
              v76 = *v75;
              v77 = objc_msgSend(v76, sel_scene);
              if (v77)
              {
                v78 = v77;
                v79 = objc_msgSend(v77, sel_rootNode);

                objc_msgSend(v79, sel_setSimdTransform_, *(v74 - 4), *(v74 - 2), *v74, v74[2]);
              }
              v75 = (id *)((char *)v75 + v72);

              v74 += 8;
              --v73;
            }
            while (v73);
          }
          sub_1B1F05D48(v243, (unsigned __int16 **)v301, (uint64_t)v308);
          sub_1B1F03804((char *)v59);
          v52 = v225;
          ecs_stack_allocator_pop_snapshot(v225);
          v53 = v223;
          if ((v223 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v59 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v59 + 376));
          }
          swift_release();
          ++v54;
        }
        while (v54 != v229);
        sub_1B1A086DC(v268, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v5 = v249;
        v2 = v251;
      }
    }
    sub_1B1A086DC(v268, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v80 = *(_QWORD **)(v2 + v252);
  if (v80)
  {
    if (v80[47])
    {
      v266[21] = (uint64_t)&unk_1EF010050;
      v233 = swift_dynamicCastObjCProtocolConditional();
      if (v233)
      {
        v81 = (void *)v80[49];
        if (v81)
        {
          swift_retain();
          swift_unknownObjectRetain();
          v82 = v81;
          v83 = objc_msgSend(v82, sel_colorAttachments);
          v84 = objc_msgSend(v83, sel_objectAtIndexedSubscript_, 0);

          v85 = objc_msgSend(v84, sel_texture);
          if (v85)
          {
            v86 = objc_msgSend(v82, sel_depthAttachment);
            v87 = objc_msgSend(v86, sel_texture);

            if (v87)
            {
              v200 = v82;
              swift_unknownObjectRetain();
              v88 = swift_unknownObjectRetain();
              v89 = sub_1B1BA147C(v88, 1, (uint64_t)v87, 1, 1, 0);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              sub_1B1E8FCE4(v2, (uint64_t)v306, 0x200000000, v269);
              sub_1B19F66A0((uint64_t)v269, (uint64_t)v272, (unint64_t *)&qword_1ED4B7DE0);
              if (*(_QWORD *)&v272[0])
              {
                v279 = v272[0];
                v280 = v272[1];
                v281 = v273;
                if (v278 <= 0)
                {
                  sub_1B1A086DC(v269, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);

                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();

                  swift_unknownObjectRelease();
                  swift_release();
                }
                else
                {
                  v205 = v275;
                  if (v275)
                  {
                    v90 = v277;
                    v204 = v274;
                    v91 = v277[4];
                    v209 = *(_BYTE *)(v276 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
                    v206 = type metadata accessor for SceneKitRenderer(0);
                    v253 = v80 + 78;
                    v210 = v90;
                    v201 = v90 + 8;
                    v202 = (uint64_t)(v90 + 6);
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    v92 = 0;
                    v230 = v80;
                    v236 = v89;
                    v203 = v91;
                    do
                    {
                      v208 = v92;
                      v93 = (unsigned int *)(v204 + 48 * v92);
                      v94 = *v93;
                      v244 = v93[1];
                      v96 = (uint64_t *)*((_QWORD *)v93 + 2);
                      v95 = *((_QWORD *)v93 + 3);
                      v98 = *((_QWORD *)v93 + 4);
                      v97 = *((_QWORD *)v93 + 5);
                      v250 = v5;
                      if ((v209 & 1) != 0)
                      {
                        v99 = *(os_unfair_lock_s **)(v97 + 376);
                        swift_retain();
                        os_unfair_lock_lock(v99);
                        os_unfair_lock_lock(*(os_unfair_lock_t *)(v97 + 344));
                      }
                      else
                      {
                        swift_retain();
                      }
                      ecs_stack_allocator_push_snapshot(v91);
                      sub_1B19F66A0(v202, (uint64_t)v305, &qword_1ED4B7FB0);
                      v100 = v210[4];
                      v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v97 + 40) + 16) + 32) + 16) + 1;
                      swift_retain();
                      v210[6] = ecs_stack_allocator_allocate(v100, 48 * v101, 8);
                      v210[7] = v101;
                      v201[1] = 0;
                      v201[2] = 0;
                      *v201 = 0;
                      swift_release();
                      v207 = v97;
                      v102 = sub_1B1A12038(v206, (uint64_t)&off_1E638A890, v96, v95, v98, (uint64_t)v210);
                      if (v96)
                      {
                        v103 = (uint64_t)v253;
                        if (v98)
                        {
                          v104 = *(_QWORD *)(*(_QWORD *)(v206 - 8) + 72);
                          v105 = (id *)(v102 + 8);
                          v211 = v104;
                          do
                          {
                            if (*v105)
                            {
                              v106 = *v105;
                              objc_msgSend(v106, sel_updateAtTime_, CACurrentMediaTime());
                              sub_1B19F66A0(v103, (uint64_t)v265, &qword_1ED4BF400);
                              sub_1B19F66A0((uint64_t)v265, (uint64_t)v266, &qword_1ED4BF400);
                              if (sub_1B1B3C438(v266) == 1)
                              {

                              }
                              else
                              {
                                v245 = (void *)v80[81];
                                swift_unknownObjectRetain();
                                v107 = objc_msgSend(v106, sel_pointOfView);
                                v108 = *(_QWORD *)(v251 + 176);
                                swift_retain();
                                os_unfair_recursive_lock_lock_with_options();
                                v109 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
                                if ((v111 & 1) != 0)
                                {
                                  v112 = *(_QWORD *)(v108 + 16) + v109;
                                  v113 = 32 * v110;
                                  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v108 + 32) + 32 * v110 + 24));
                                  os_unfair_recursive_lock_unlock();
                                  v114 = *(float32x4_t *)(v112 + 48);
                                  v115 = *(float32x4_t *)(v112 + 64);
                                  v116 = *(float32x4_t *)(v112 + 80);
                                  v117 = *(float32x4_t *)(v112 + 96);
                                  v118 = *(_OWORD *)(v112 + 304);
                                  v119 = *(_OWORD *)(v112 + 320);
                                  v120 = *(_OWORD *)(v112 + 336);
                                  v121 = *(_OWORD *)(v112 + 352);
                                  v122 = 0.0 - *(float *)(v112 + 848);
                                  v123 = 0.0 - *(float *)(v112 + 852);
                                  v124 = *(float *)(v112 + 856);
                                  v125 = vmulq_f32(v114, (float32x4_t)0);
                                  v258.columns[0] = (simd_float4)vmlaq_f32(vmlaq_f32(vmlaq_f32(v114, (float32x4_t)0, v115), (float32x4_t)0, v116), (float32x4_t)0, v117);
                                  v258.columns[1] = (simd_float4)vmlaq_f32(vmlaq_f32(vaddq_f32(v115, v125), (float32x4_t)0, v116), (float32x4_t)0, v117);
                                  v258.columns[2] = (simd_float4)vmlaq_f32(vaddq_f32(v116, vmlaq_f32(v125, (float32x4_t)0, v115)), (float32x4_t)0, v117);
                                  v258.columns[3] = (simd_float4)vaddq_f32(v117, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v114, v122), v115, v123), v116, 0.0 - v124));
                                  v259 = v118;
                                  v260 = v119;
                                  v261 = v120;
                                  v262 = v121;
                                  sub_1B1F24818((uint64_t)&v258);
                                  v126 = *(_QWORD *)(v108 + 32) + v113;
                                  v103 = (uint64_t)v253;
                                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v126 + 24));
                                  swift_release();
                                }
                                else
                                {
                                  os_unfair_recursive_lock_unlock();
                                  swift_release();
                                  sub_1B1F247F8((uint64_t)&v258);
                                }
                                sub_1B1E18620((uint64_t)&v258, (uint64_t)v264);
                                sub_1B1E18620((uint64_t)v264, (uint64_t)&v258);
                                sub_1B1E18620((uint64_t)v264, (uint64_t)v263);
                                v127 = sub_1B1E186DC((uint64_t)v263);
                                v130.columns[0] = (simd_float4)xmmword_1B2244DB0;
                                v130.columns[1] = (simd_float4)xmmword_1B2244DD0;
                                v128 = 1065353216;
                                v129 = 0.0078125;
                                v130.columns[2] = (simd_float4)xmmword_1B2244D90;
                                v130.columns[3] = (simd_float4)xmmword_1B2244E20;
                                v131 = 0.0;
                                v132 = 0.0;
                                if (v127 != 1)
                                {
                                  v130 = v258;
                                  v128 = v259;
                                  v129 = *(double *)&v260;
                                  v131 = *(double *)&v261;
                                  v132 = *(double *)&v262;
                                }
                                if (v107)
                                {
                                  v239 = v128;
                                  v216 = *(_QWORD *)&v131;
                                  v219 = *(_QWORD *)&v129;
                                  v213 = *(_QWORD *)&v132;
                                  v312 = __invert_f4(v130);
                                  objc_msgSend(v107, sel_setSimdWorldTransform_, *(double *)v312.columns[0].i64, *(double *)v312.columns[1].i64, *(double *)v312.columns[2].i64, *(double *)v312.columns[3].i64);
                                  v133 = objc_msgSend(v107, sel_camera);
                                  v130.columns[3].i64[0] = v213;
                                  v130.columns[2].i64[0] = v216;
                                  v130.columns[1].i64[0] = v219;
                                  v130.columns[0].i64[0] = v239;
                                  if (v133)
                                  {
                                    v134 = v133;
                                    sub_1B2228E6C();
                                    v258 = v270;
                                    objc_msgSend(v134, sel_setProjectionTransform_, &v258);
                                    objc_msgSend(v134, sel_setVignettingIntensity_, 0.0);
                                    objc_msgSend(v134, sel_setBloomIntensity_, 0.0);
                                    objc_msgSend(v134, sel_setMotionBlurIntensity_, 0.0);
                                    objc_msgSend(v134, sel_setWantsHDR_, 0);
                                    objc_msgSend(v134, sel_setWantsExposureAdaptation_, 0);
                                    objc_msgSend(v134, sel_setSaturation_, 1.0);
                                    objc_msgSend(v134, sel_setWantsDepthOfField_, 0);
                                    objc_msgSend(v134, sel_setContrast_, 0.0);
                                    objc_msgSend(v134, sel_setColorFringeStrength_, 0.0);
                                    objc_msgSend(v134, sel_setGrainIntensity_, 0.0);

                                  }
                                }
                                v240 = v106;
                                v135 = objc_msgSend(v106, sel_scene, *(double *)v130.columns[0].i64, *(double *)v130.columns[1].i64, *(double *)v130.columns[2].i64, *(double *)v130.columns[3].i64, *(double *)&v128, v129, v131, v132);
                                if (v135)
                                {
                                  v136 = v135;
                                  objc_msgSend(v135, sel_setWantsScreenSpaceReflection_, 0);
                                  v137 = objc_msgSend(v136, sel_background);
                                  objc_msgSend(v137, sel_setContents_, 0);

                                }
                                v138 = v107;
                                objc_msgSend((id)objc_opt_self(), sel_flush);
                                v139 = CACurrentMediaTime();
                                sub_1B19F66A0(v103, (uint64_t)v257, &qword_1ED4BF400);
                                sub_1B19F66A0((uint64_t)v257, (uint64_t)&v258, &qword_1ED4BF400);
                                if (sub_1B1B3C438((uint64_t *)&v258) == 1)
                                  goto LABEL_131;
                                v140 = v258.columns[0].i64[1];
                                ObjectType = swift_getObjectType();
                                v142 = *(double (**)(uint64_t, uint64_t))(v140 + 72);
                                swift_unknownObjectRetain();
                                v143 = v142(ObjectType, v140);
                                swift_unknownObjectRelease();
                                sub_1B19F66A0(v103, (uint64_t)v254, &qword_1ED4BF400);
                                sub_1B19F66A0((uint64_t)v254, (uint64_t)&v255, &qword_1ED4BF400);
                                if (sub_1B1B3C438(&v255) == 1)
                                  goto LABEL_131;
                                v144 = v256;
                                v145 = swift_getObjectType();
                                v146 = *(void (**)(uint64_t, uint64_t))(v144 + 72);
                                swift_unknownObjectRetain();
                                v146(v145, v144);
                                v148 = v147;
                                swift_unknownObjectRelease();
                                v149 = objc_msgSend(v245, sel_commandQueue);
                                swift_unknownObjectRetain();
                                objc_msgSend(v240, sel_renderAtTime_viewport_encoder_passDescriptor_commandQueue_, v233, v236, v149, v139, 0.0, 0.0, v143, v148);
                                swift_unknownObjectRelease();

                                swift_unknownObjectRelease_n();
                                v80 = v230;
                                v103 = (uint64_t)v253;
                                v104 = v211;
                              }
                            }
                            v105 = (id *)((char *)v105 + v104);
                            --v98;
                          }
                          while (v98);
                        }
                      }
                      else
                      {
                        v150 = (uint64_t)v253;
                        if ((_DWORD)v94 != (_DWORD)v244)
                        {
                          v151 = *(_QWORD *)(*(_QWORD *)(v206 - 8) + 72);
                          v152 = v244 - v94;
                          v153 = (id *)(v102 + v151 * v94 + 8);
                          v212 = v151;
                          do
                          {
                            if (*v153)
                            {
                              v154 = *v153;
                              objc_msgSend(v154, sel_updateAtTime_, CACurrentMediaTime());
                              sub_1B19F66A0(v150, (uint64_t)v265, &qword_1ED4BF400);
                              sub_1B19F66A0((uint64_t)v265, (uint64_t)v266, &qword_1ED4BF400);
                              if (sub_1B1B3C438(v266) == 1)
                              {

                              }
                              else
                              {
                                v241 = (void *)v80[81];
                                swift_unknownObjectRetain();
                                v155 = objc_msgSend(v154, sel_pointOfView);
                                v156 = *(_QWORD *)(v251 + 176);
                                swift_retain();
                                os_unfair_recursive_lock_lock_with_options();
                                v157 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
                                if ((v159 & 1) != 0)
                                {
                                  v160 = *(_QWORD *)(v156 + 16) + v157;
                                  v161 = 32 * v158;
                                  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v156 + 32) + 32 * v158 + 24));
                                  os_unfair_recursive_lock_unlock();
                                  v162 = *(float32x4_t *)(v160 + 48);
                                  v163 = *(float32x4_t *)(v160 + 64);
                                  v164 = *(float32x4_t *)(v160 + 80);
                                  v165 = *(float32x4_t *)(v160 + 96);
                                  v166 = *(_OWORD *)(v160 + 304);
                                  v167 = *(_OWORD *)(v160 + 320);
                                  v168 = *(_OWORD *)(v160 + 336);
                                  v169 = *(_OWORD *)(v160 + 352);
                                  v170 = vmulq_f32(v162, (float32x4_t)0);
                                  v171 = vmulq_n_f32(v162, 0.0 - *(float *)(v160 + 848));
                                  v172 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v162, (float32x4_t)0, v163), (float32x4_t)0, v164), (float32x4_t)0, v165);
                                  v173 = vmlaq_f32(vmlaq_f32(vaddq_f32(v163, v170), (float32x4_t)0, v164), (float32x4_t)0, v165);
                                  v174 = vmlaq_f32(vaddq_f32(v164, vmlaq_f32(v170, (float32x4_t)0, v163)), (float32x4_t)0, v165);
                                  v175 = vaddq_f32(v165, vmlaq_n_f32(vmlaq_n_f32(v171, v163, 0.0 - *(float *)(v160 + 852)), v164, 0.0 - *(float *)(v160 + 856)));
                                  v258.columns[0] = (simd_float4)v172;
                                  v258.columns[1] = (simd_float4)v173;
                                  v258.columns[2] = (simd_float4)v174;
                                  v258.columns[3] = (simd_float4)v175;
                                  v259 = v166;
                                  v260 = v167;
                                  v261 = v168;
                                  v262 = v169;
                                  sub_1B1F24818((uint64_t)&v258);
                                  v176 = *(_QWORD *)(v156 + 32) + v161;
                                  v150 = (uint64_t)v253;
                                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v176 + 24));
                                  swift_release();
                                }
                                else
                                {
                                  os_unfair_recursive_lock_unlock();
                                  swift_release();
                                  sub_1B1F247F8((uint64_t)&v258);
                                }
                                sub_1B1E18620((uint64_t)&v258, (uint64_t)v264);
                                sub_1B1E18620((uint64_t)v264, (uint64_t)&v258);
                                sub_1B1E18620((uint64_t)v264, (uint64_t)v263);
                                v177 = sub_1B1E186DC((uint64_t)v263);
                                v180.columns[0] = (simd_float4)xmmword_1B2244DB0;
                                v180.columns[1] = (simd_float4)xmmword_1B2244DD0;
                                v178 = 1065353216;
                                v179 = 0.0078125;
                                v180.columns[2] = (simd_float4)xmmword_1B2244D90;
                                v180.columns[3] = (simd_float4)xmmword_1B2244E20;
                                v181 = 0.0;
                                v182 = 0.0;
                                if (v177 != 1)
                                {
                                  v180 = v258;
                                  v178 = v259;
                                  v179 = *(double *)&v260;
                                  v181 = *(double *)&v261;
                                  v182 = *(double *)&v262;
                                }
                                if (v155)
                                {
                                  v246 = v178;
                                  v217 = *(_QWORD *)&v181;
                                  v220 = *(_QWORD *)&v179;
                                  v214 = *(_QWORD *)&v182;
                                  v313 = __invert_f4(v180);
                                  objc_msgSend(v155, sel_setSimdWorldTransform_, *(double *)v313.columns[0].i64, *(double *)v313.columns[1].i64, *(double *)v313.columns[2].i64, *(double *)v313.columns[3].i64);
                                  v183 = objc_msgSend(v155, sel_camera);
                                  v180.columns[3].i64[0] = v214;
                                  v180.columns[2].i64[0] = v217;
                                  v180.columns[1].i64[0] = v220;
                                  v180.columns[0].i64[0] = v246;
                                  if (v183)
                                  {
                                    v184 = v183;
                                    sub_1B2228E6C();
                                    v258 = v271;
                                    objc_msgSend(v184, sel_setProjectionTransform_, &v258);
                                    objc_msgSend(v184, sel_setVignettingIntensity_, 0.0);
                                    objc_msgSend(v184, sel_setBloomIntensity_, 0.0);
                                    objc_msgSend(v184, sel_setMotionBlurIntensity_, 0.0);
                                    objc_msgSend(v184, sel_setWantsHDR_, 0);
                                    objc_msgSend(v184, sel_setWantsExposureAdaptation_, 0);
                                    objc_msgSend(v184, sel_setSaturation_, 1.0);
                                    objc_msgSend(v184, sel_setWantsDepthOfField_, 0);
                                    objc_msgSend(v184, sel_setContrast_, 0.0);
                                    objc_msgSend(v184, sel_setColorFringeStrength_, 0.0);
                                    objc_msgSend(v184, sel_setGrainIntensity_, 0.0);

                                  }
                                }
                                v247 = v154;
                                v185 = objc_msgSend(v154, sel_scene, *(double *)v180.columns[0].i64, *(double *)v180.columns[1].i64, *(double *)v180.columns[2].i64, *(double *)v180.columns[3].i64, *(double *)&v178, v179, v181, v182);
                                if (v185)
                                {
                                  v186 = v185;
                                  objc_msgSend(v185, sel_setWantsScreenSpaceReflection_, 0);
                                  v187 = objc_msgSend(v186, sel_background);
                                  objc_msgSend(v187, sel_setContents_, 0);

                                }
                                v188 = v155;
                                objc_msgSend((id)objc_opt_self(), sel_flush);
                                v189 = CACurrentMediaTime();
                                sub_1B19F66A0(v150, (uint64_t)v257, &qword_1ED4BF400);
                                sub_1B19F66A0((uint64_t)v257, (uint64_t)&v258, &qword_1ED4BF400);
                                if (sub_1B1B3C438((uint64_t *)&v258) == 1)
                                  goto LABEL_131;
                                v190 = v258.columns[0].i64[1];
                                v191 = swift_getObjectType();
                                v192 = *(double (**)(uint64_t, uint64_t))(v190 + 72);
                                swift_unknownObjectRetain();
                                v193 = v192(v191, v190);
                                swift_unknownObjectRelease();
                                sub_1B19F66A0(v150, (uint64_t)v254, &qword_1ED4BF400);
                                sub_1B19F66A0((uint64_t)v254, (uint64_t)&v255, &qword_1ED4BF400);
                                if (sub_1B1B3C438(&v255) == 1)
                                {
LABEL_131:
                                  result = (_QWORD *)sub_1B2229688();
                                  __break(1u);
                                  return result;
                                }
                                v194 = v256;
                                v195 = swift_getObjectType();
                                v196 = *(void (**)(uint64_t, uint64_t))(v194 + 72);
                                swift_unknownObjectRetain();
                                v196(v195, v194);
                                v198 = v197;
                                swift_unknownObjectRelease();
                                v199 = objc_msgSend(v241, sel_commandQueue);
                                swift_unknownObjectRetain();
                                objc_msgSend(v247, sel_renderAtTime_viewport_encoder_passDescriptor_commandQueue_, v233, v236, v199, v189, 0.0, 0.0, v193, v198);
                                swift_unknownObjectRelease();

                                swift_unknownObjectRelease_n();
                                v80 = v230;
                                v150 = (uint64_t)v253;
                                v151 = v212;
                              }
                            }
                            v153 = (id *)((char *)v153 + v151);
                            --v152;
                          }
                          while (v152);
                        }
                      }
                      v303[0] = v279;
                      v303[1] = v280;
                      v304 = v281;
                      v5 = v250;
                      sub_1B1F05D48(v210, (unsigned __int16 **)v303, (uint64_t)v305);
                      sub_1B1F03804((char *)v207);
                      v91 = v203;
                      ecs_stack_allocator_pop_snapshot(v203);
                      if ((v209 & 1) != 0)
                      {
                        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v207 + 344));
                        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v207 + 376));
                      }
                      swift_release();
                      v92 = v208 + 1;
                      v89 = v236;
                    }
                    while (v208 + 1 != v205);
                  }
                  else
                  {
                    sub_1B1A086DC(v269, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
                  }
                  swift_unknownObjectRelease();

                  swift_unknownObjectRelease();
                  swift_release();

                  swift_unknownObjectRelease();
                }
                sub_1B1A086DC(v269, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
                sub_1B1A086DC(v269, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
              }
              else
              {
                swift_release();

                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
              }
            }
            else
            {
              swift_release();
              swift_unknownObjectRelease();

              swift_unknownObjectRelease();
            }
          }
          else
          {
            swift_release();
            swift_unknownObjectRelease();

          }
        }
      }
    }
  }
  return sub_1B1A086DC(v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t type metadata accessor for SceneKitSystem()
{
  return objc_opt_self();
}

char *sub_1B205B238(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    *((_QWORD *)a1 + 1) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = sub_1B2228110();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    v13 = v4;
    v14 = v6;
    if (v12(v9, 1, v10))
    {
      sub_1B17928A0();
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t sub_1B205B330(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_1B205B3B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (const void *)(a2 + v6);
  v9 = sub_1B2228110();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v4;
  v13 = v5;
  if (v11(v8, 1, v9))
  {
    sub_1B17928A0();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1B205B47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  v12 = *(int *)(a3 + 24);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_1B2228110();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *sub_1B205B5A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1B2228110();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_1B17928A0();
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1B205B660(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = sub_1B2228110();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_1B205B784()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B205B790(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_1B17928A0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

uint64_t sub_1B205B818()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B205B824(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    sub_1B17928A0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SceneKitRenderer(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1ED4B8E90);
}

void sub_1B205B8AC()
{
  unint64_t v0;

  sub_1B17928A0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for SceneKitAssetInstance()
{
  return &type metadata for SceneKitAssetInstance;
}

uint64_t sub_1B205B934()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[2];
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v14 = qword_1ED4D09F8;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  swift_retain();
  sub_1B1B6C6D4((uint64_t)v4);
  swift_release();
  v1 = v4[1];
  *(_OWORD *)(v0 + 16) = v4[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v5;
  v8 = qword_1ED4D09F8;
  v9 = 0;
  v10 = 2;
  v11 = 0;
  v12 = 2;
  v13 = 0;
  swift_retain();
  sub_1B19EDF5C((uint64_t)v6);
  swift_release();
  v2 = v6[1];
  *(_OWORD *)(v0 + 56) = v6[0];
  *(_OWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 88) = v7;
  return v0;
}

const char *sub_1B205BA44()
{
  return "SceneKit";
}

void sub_1B205BA5C(uint64_t a1, uint64_t a2, int a3, id *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t ObjectType;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t inited;
  void *v56;
  id v57;
  _QWORD *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, _QWORD, uint64_t, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v84 = a3;
  sub_1B1BB4174();
  v83 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v85 = (uint64_t)&v68 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v68 - v20;
  v22 = sub_1B2228110();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v72 = (char *)&v68 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v68 - v32;
  sub_1B1D19730(a2, &v87);
  if (*((_QWORD *)&v87 + 1))
  {
    v69 = v14;
    v71 = v26;
    v74 = v23;
    v79 = *((_QWORD *)&v87 + 1);
    v73 = v87;
    v35 = v88;
    v34 = v89;
    v36 = v91;
    v77 = v92;
    v78 = v93;
    v86 = v33;
    v81 = v88;
    v82 = a4;
    v80 = a1;
    v76 = v91;
    v75 = v90;
    if (v90)
    {
      v37 = v90;
      ObjectType = swift_getObjectType();
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8);
      v40 = v37;
      swift_bridgeObjectRetain();
      v39(v35, v34, ObjectType, v36);
      v41 = v86;

      v42 = v34;
    }
    else
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v87 = 0;
      *((_QWORD *)&v87 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v42 = v34;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v43 = v87;
      v44 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v87 = 0;
      swift_retain();
      sub_1B1F1AD70(v44, (uint64_t *)&v87, v43, *((uint64_t *)&v43 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRetain();
      v41 = v86;
      sub_1B2228050();
      a4 = v82;
    }
    v45 = v74;
    v74 = v42;
    swift_bridgeObjectRelease();
    v46 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    v46(v21, v41, v22);
    v70 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
    v70(v21, 0, 1, v22);
    v47 = (uint64_t)a4 + *(int *)(type metadata accessor for SceneKitRenderer(0) + 24);
    v48 = v85;
    sub_1B1792810(v47, v85, (uint64_t (*)(_QWORD))sub_1B17928A0);
    v49 = (uint64_t)&v10[*(int *)(v83 + 48)];
    sub_1B1792810((uint64_t)v21, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B17928A0);
    sub_1B1792810(v48, v49, (uint64_t (*)(_QWORD))sub_1B17928A0);
    v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (v50((uint64_t)v10, 1, v22) == 1)
    {
      sub_1B1A04628(v48, (uint64_t (*)(_QWORD))sub_1B17928A0);
      sub_1B1A04628((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B17928A0);
      if (v50(v49, 1, v22) == 1)
      {
        sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B17928A0);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v86, v22);
LABEL_17:
        sub_1B205C438(v73, v79, v81, v74, v75);
        a4 = v82;
        a1 = v80;
        goto LABEL_19;
      }
    }
    else
    {
      v51 = (uint64_t)v69;
      sub_1B1792810((uint64_t)v10, (uint64_t)v69, (uint64_t (*)(_QWORD))sub_1B17928A0);
      if (v50(v49, 1, v22) != 1)
      {
        v52 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v72, v49, v22);
        sub_1B19E52CC((unint64_t *)&qword_1EEF5D850, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        LODWORD(v83) = sub_1B22286E0();
        v53 = *(void (**)(char *, uint64_t))(v45 + 8);
        v53(v52, v22);
        sub_1B1A04628(v85, (uint64_t (*)(_QWORD))sub_1B17928A0);
        sub_1B1A04628((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B17928A0);
        v53((char *)v51, v22);
        sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B17928A0);
        if ((v83 & 1) != 0)
        {
          v53(v86, v22);
          goto LABEL_17;
        }
LABEL_18:
        sub_1B205C394();
        v54 = (uint64_t)v71;
        v46(v71, v86, v22);
        sub_1B1791524(0, (unint64_t *)&unk_1EEF62920, (uint64_t (*)(uint64_t))sub_1B205C3D0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1B226D240;
        v56 = (void *)*MEMORY[0x1E0CD5B88];
        *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CD5B88];
        *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEAFA0];
        *(_BYTE *)(inited + 40) = 0;
        v57 = v56;
        v58 = sub_1B1B81870(inited);
        v59 = sub_1B2059260(v54, (uint64_t)v58);
        sub_1B205C438(v73, v79, v81, v74, v75);
        a4 = v82;
        a1 = v80;

        *a4 = v59;
        sub_1B1A04628(v47, (uint64_t (*)(_QWORD))sub_1B17928A0);
        (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v86, v22);
        v70((char *)v47, 0, 1, v22);
        goto LABEL_19;
      }
      sub_1B1A04628(v85, (uint64_t (*)(_QWORD))sub_1B17928A0);
      sub_1B1A04628((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B17928A0);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v22);
    }
    sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B1BB4174);
    goto LABEL_18;
  }
LABEL_19:
  v60 = *a4;
  if (*a4 || (v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD5A10]), sel_init), (*a4 = v60) != 0))
    objc_msgSend(v60, sel_setPaused_, (v84 & 1) == 0);
  v61 = a4[1];
  if (!v61)
  {
    v62 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 16);
      swift_unknownObjectRetain();
    }
    else
    {
      v63 = 0;
    }
    v61 = objc_msgSend((id)objc_opt_self(), sel_rendererWithDevice_options_, v63, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v61, sel_setAutoenablesDefaultLighting_, 1);
    a4[1] = v61;
  }
  v64 = v61;
  objc_msgSend(v64, sel_setScene_, v60);
  v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD59D0]), sel_init);
  objc_msgSend(v64, sel_setPointOfView_, v65);

  v66 = objc_msgSend(v64, sel_pointOfView);
  v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD5960]), sel_init);
  objc_msgSend(v66, sel_setCamera_, v67);

}

unint64_t sub_1B205C394()
{
  unint64_t result;

  result = qword_1EEF62918;
  if (!qword_1EEF62918)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF62918);
  }
  return result;
}

void sub_1B205C3D0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5B5A0)
  {
    type metadata accessor for LoadingOption(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5B5A0);
  }
}

void sub_1B205C438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

_QWORD *sub_1B205C488(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;

  sub_1B19F8E54(0, &qword_1EEF62930, (uint64_t (*)(void))sub_1B205C628, (uint64_t)&type metadata for SceneKitAssetInstance.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B205C628();
  v10 = v9;
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    v15 = 1;
    if ((sub_1B222988C() & 1) != 0)
    {
      v13 = 1;
      sub_1B22297D8();
    }
    v14 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = (_QWORD *)v12[1];
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v10;
}

unint64_t sub_1B205C628()
{
  unint64_t result;

  result = qword_1EEF62938;
  if (!qword_1EEF62938)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4BB4, &type metadata for SceneKitAssetInstance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62938);
  }
  return result;
}

uint64_t *sub_1B205C66C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1B17928A0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_1B2228110();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1B205C73C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_1B2228110();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_1B205C7A4(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_1B205C844(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *sub_1B205C930(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_1B205C9D0(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1B205CABC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B205CAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B17928A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B205CB04()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B205CB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B17928A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SceneKitAsset(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1ED4B8870);
}

void sub_1B205CB64()
{
  unint64_t v0;

  sub_1B17928A0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for SceneKitAssetInstance.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B205CC18 + 4 * byte_1B22B4875[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B205CC4C + 4 * byte_1B22B4870[v4]))();
}

uint64_t sub_1B205CC4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B205CC54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B205CC5CLL);
  return result;
}

uint64_t sub_1B205CC68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B205CC70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B205CC74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B205CC7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SceneKitAssetInstance.CodingKeys()
{
  return &type metadata for SceneKitAssetInstance.CodingKeys;
}

unint64_t sub_1B205CC9C()
{
  unint64_t result;

  result = qword_1EEF62958;
  if (!qword_1EEF62958)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4B0C, &type metadata for SceneKitAssetInstance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62958);
  }
  return result;
}

unint64_t sub_1B205CCE4()
{
  unint64_t result;

  result = qword_1EEF62960;
  if (!qword_1EEF62960)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4A44, &type metadata for SceneKitAssetInstance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62960);
  }
  return result;
}

unint64_t sub_1B205CD2C()
{
  unint64_t result;

  result = qword_1EEF62968;
  if (!qword_1EEF62968)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4A6C, &type metadata for SceneKitAssetInstance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62968);
  }
  return result;
}

unint64_t sub_1B205CD70()
{
  unint64_t result;

  result = qword_1EEF62978;
  if (!qword_1EEF62978)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4CBC, &type metadata for SceneKitAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62978);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SceneKitAsset.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B205CDF4 + 4 * byte_1B22B487A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B205CE14 + 4 * byte_1B22B487F[v4]))();
}

_BYTE *sub_1B205CDF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B205CE14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B205CE1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B205CE24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B205CE2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B205CE34(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SceneKitAsset.CodingKeys()
{
  return &type metadata for SceneKitAsset.CodingKeys;
}

unint64_t sub_1B205CE54()
{
  unint64_t result;

  result = qword_1EEF62998;
  if (!qword_1EEF62998)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4C94, &type metadata for SceneKitAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62998);
  }
  return result;
}

unint64_t sub_1B205CE9C()
{
  unint64_t result;

  result = qword_1EEF629A0;
  if (!qword_1EEF629A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4C04, &type metadata for SceneKitAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF629A0);
  }
  return result;
}

unint64_t sub_1B205CEE4()
{
  unint64_t result;

  result = qword_1EEF629A8;
  if (!qword_1EEF629A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4C2C, &type metadata for SceneKitAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF629A8);
  }
  return result;
}

void sub_1B205CF28(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6389A70;
}

uint64_t sub_1B205CF38()
{
  sub_1B2061838();
  return sub_1B2228A70();
}

uint64_t sub_1B205CF94()
{
  sub_1B2061838();
  return sub_1B22289F8();
}

unint64_t sub_1B205CFE0()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t result;

  v1 = *v0;
  if (!*v0)
    return 7;
  result = __clz(__rbit64(v1));
  if (result > 6)
    return 7;
  if (((1 << result) & v1) != 0)
    *v0 = v1 & ~(1 << result);
  return result;
}

unint64_t sub_1B205D01C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t result;

  result = sub_1B205CFE0();
  *a1 = result;
  return result;
}

uint64_t sub_1B205D040(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t result;

  v7 = 4 * a3;
  ecs_stack_allocator_push_snapshot(a4);
  ecs_stack_allocator_allocate(a4, v7, 8);
  swift_retain();
  v8 = (void *)sub_1B1D22DA8(0, v7);
  v10 = v9;
  swift_unknownObjectRetain();
  swift_release();
  v11 = objc_msgSend(v8, sel_storageMode);
  v12 = 0;
  if (v11 != (id)2)
  {
    v13 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v14 = v8;
    v12 = (uint64_t)v13 + v10;
  }
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    radix_sort_float(a2, v12);
    ecs_stack_allocator_pop_snapshot(a4);
    return (uint64_t)v8;
  }
  return result;
}

double sub_1B205D1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  char v5;
  double result;
  uint64_t v7;
  simd_float4 v8;
  char v9;

  if ((*(_BYTE *)(a2 + 56) & 1) == 0)
  {
    v3 = swift_retain();
    sub_1B1F212D4(v3, &v8);
    v4 = *(double *)v8.i64;
    v5 = v9;
    swift_release();
    if ((v5 & 1) != 0)
    {
      *(_QWORD *)&result = 1065353216;
      return result;
    }
    return v4;
  }
  *(_QWORD *)&result = 1065353216;
  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      sub_1B1FE73F0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 64, (uint64_t)&v8);
      *(_QWORD *)&result = 1065353216;
      if ((v9 & 1) == 0)
        return *(double *)v8.i64;
    }
  }
  return result;
}

uint64_t sub_1B205D360(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  float *v22;
  uint64_t v23;
  __int128 v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  char *v31;
  id v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _BYTE v47[48];

  ecs_stack_allocator_push_snapshot(a2);
  v4 = v2[10];
  v5 = ecs_stack_allocator_allocate(a2, 4 * v4, 4);
  v34 = a2;
  if (v4 < 1)
  {
    v6 = 0;
  }
  else
  {
    v39 = v2[7];
    v6 = 0;
    if (v39)
    {
      v7 = 0;
      v8 = 0;
      v9 = (_QWORD *)v2[9];
      v10 = v9[4];
      v11 = *(unsigned __int8 *)(v2[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v35 = v2[5];
      v38 = v2;
      v37 = v11;
      v36 = v10;
      do
      {
        v44 = v8;
        v12 = (unsigned int *)(v35 + 48 * v7);
        v13 = *v12;
        v14 = v12[2];
        v15 = *((_QWORD *)v12 + 5);
        v40 = v12[1];
        v41 = *((_QWORD *)v12 + 4);
        v42 = *((_QWORD *)v12 + 3);
        v43 = (uint64_t *)*((_QWORD *)v12 + 2);
        if (v11)
        {
          v16 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A18378((uint64_t)(v9 + 6), (uint64_t)v47, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v17 = v9[4];
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v9[7] = v18;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v19 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v43, v42, v41, (uint64_t)v9);
        if ((v20 & 1) != 0)
        {
          v21 = v38;
          v10 = v36;
          v11 = v37;
        }
        else
        {
          v21 = v38;
          v11 = v37;
          if ((_DWORD)v13 != (_DWORD)v40)
          {
            v22 = (float *)(v19 + 16 * v13 + 12);
            v23 = v40 - v13;
            v10 = v36;
            while (1)
            {
              if (*v22 > 0.00000011921)
              {
                if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14))
                {
                  result = sub_1B222967C();
                  __break(1u);
                  return result;
                }
                *((_DWORD *)v5 + v6++) = v14;
              }
              v22 += 4;
              ++v14;
              if (!--v23)
                goto LABEL_18;
            }
          }
          v10 = v36;
        }
LABEL_18:
        v24 = *((_OWORD *)v21 + 1);
        v45[0] = *(_OWORD *)v21;
        v45[1] = v24;
        v46 = v21[4];
        v8 = v44;
        sub_1B1F05D48(v9, (unsigned __int16 **)v45, (uint64_t)v47);
        sub_1B1F03804((char *)v15);
        ecs_stack_allocator_pop_snapshot(v10);
        if ((v11 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
        }
        swift_release();
        ++v7;
      }
      while (v7 != v39);
    }
  }
  v25 = 4 * v6;
  swift_retain();
  v26 = (void *)sub_1B1D22DA8(0, 4 * v6);
  v28 = v27;
  swift_unknownObjectRetain();
  swift_release();
  v29 = objc_msgSend(v26, sel_storageMode);
  v30 = 0;
  if (v29 != (id)2)
  {
    v31 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v32 = v26;
    v30 = &v31[v28];
  }
  memcpy(v30, v5, v25);
  ecs_stack_allocator_pop_snapshot(v34);
  return (uint64_t)v26;
}

void *sub_1B205D724(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  _DWORD *v43;
  uint64_t v44;
  int *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _BYTE v76[48];

  v6 = v5;
  v10 = *(_QWORD *)(v5 + 80);
  swift_retain();
  v62 = 8 * v10;
  v11 = (void *)sub_1B1D22DA8(0, 8 * v10);
  v13 = v12;
  swift_unknownObjectRetain();
  swift_release();
  v65 = 0;
  if (objc_msgSend(v11, sel_storageMode) != (id)2)
  {
    v14 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v15 = v11;
    v65 = &v14[v13];
  }
  ecs_stack_allocator_push_snapshot(a5);
  v66 = ecs_stack_allocator_allocate(a5, 4 * v10, 8);
  v64 = a5;
  v63 = v11;
  if (objc_msgSend(a1, sel_storageMode) == (id)2)
  {
    v61 = 0;
  }
  else
  {
    v16 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v17 = a1;
    v61 = &v16[a2];
  }
  if (v10 >= 1)
  {
    v69 = *(_QWORD *)(v6 + 56);
    if (v69)
    {
      v18 = 0;
      v19 = 0;
      v20 = *(_QWORD **)(v6 + 72);
      v21 = v20[4];
      v22 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v23 = *(_OWORD *)(v6 + 16);
      v74[0] = *(_OWORD *)v6;
      v74[1] = v23;
      v24 = *(_QWORD *)(v6 + 40);
      v75 = *(_QWORD *)(v6 + 32);
      v68 = v24;
      v67 = v22;
      while (1)
      {
        v25 = (unsigned int *)(v68 + 48 * v18);
        v71 = *v25;
        v72 = v25[1];
        v73 = v19;
        v70 = v25[2];
        v26 = (uint64_t *)*((_QWORD *)v25 + 2);
        v27 = *((_QWORD *)v25 + 3);
        v29 = *((_QWORD *)v25 + 4);
        v28 = *((_QWORD *)v25 + 5);
        if (v22)
        {
          v30 = *(os_unfair_lock_s **)(v28 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v30);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v21);
        sub_1B1A18378((uint64_t)(v20 + 6), (uint64_t)v76, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v31 = v20[4];
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v20[6] = ecs_stack_allocator_allocate(v31, 48 * v32, 8);
        v20[7] = v32;
        v20[9] = 0;
        v20[10] = 0;
        v20[8] = 0;
        swift_release();
        v33 = sub_1B1A12038((uint64_t)&type metadata for ParticleParentID, (uint64_t)&off_1E63895A0, v26, v27, v29, (uint64_t)v20);
        if ((v34 & 1) != 0)
          break;
        v19 = v73;
        if ((_DWORD)v71 == (_DWORD)v72)
          goto LABEL_19;
        v35 = v72 - v71;
        if ((unint64_t)(v72 - v71) >= 0xC)
        {
          v37 = v70;
          v38 = v33 + 4 * v71;
          if ((unint64_t)v66 + 4 * v70 - v38 >= 0x20)
          {
            v36 = (v35 & 0xFFFFFFFFFFFFFFF8) + v71;
            v39 = (_OWORD *)((char *)v66 + 4 * v70 + 16);
            v40 = (__int128 *)(v38 + 16);
            v41 = v35 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v42 = *v40;
              *(v39 - 1) = *(v40 - 1);
              *v39 = v42;
              v39 += 2;
              v40 += 2;
              v41 -= 8;
            }
            while (v41);
            v22 = v67;
            if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_27;
          }
          else
          {
            v36 = v71;
            v22 = v67;
          }
        }
        else
        {
          v36 = v71;
          v22 = v67;
          v37 = v70;
        }
        v43 = (_DWORD *)v66 + v36 + v37 - v71;
        v44 = v72 - v36;
        v45 = (int *)(v33 + 4 * v36);
        do
        {
          v46 = *v45++;
          *v43++ = v46;
          --v44;
        }
        while (v44);
LABEL_27:
        sub_1B1F05D48(v20, (unsigned __int16 **)v74, (uint64_t)v76);
        sub_1B1F03804((char *)v28);
        ecs_stack_allocator_pop_snapshot(v21);
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
        }
        swift_release();
        if (++v18 == v69)
          goto LABEL_29;
      }
      v19 = v73;
      if ((_DWORD)v71 != (_DWORD)v72)
        bzero((char *)v66 + 4 * v70, 4 * (v72 - v71));
LABEL_19:
      v22 = v67;
      goto LABEL_27;
    }
    v47 = v65;
    bzero(v65, v62);
    v49 = v10;
    v48 = a5;
    v50 = v11;
    v51 = v66;
    v53 = v10 - 1;
    v52 = v61;
    goto LABEL_32;
  }
LABEL_29:
  v47 = v65;
  bzero(v65, v62);
  v49 = v10;
  v48 = v64;
  v50 = v63;
  v51 = v66;
  v53 = v10 - 1;
  v52 = v61;
  if (v10)
  {
LABEL_32:
    v55 = 0;
    do
    {
      v58 = *(unsigned int *)&v52[4 * v55];
      v59 = *((_DWORD *)v51 + v58);
      if (v55 < 1)
      {
        LODWORD(v60) = -1;
        LODWORD(v56) = -1;
        if (v55 < v53)
          goto LABEL_33;
      }
      else
      {
        v60 = *(unsigned int *)&v52[4 * v55 - 4];
        if (*((_DWORD *)v51 + v60) != v59)
          LODWORD(v60) = -1;
        if (v55 < v53)
        {
LABEL_33:
          v56 = *(unsigned int *)&v52[4 * v55 + 4];
          if (*((_DWORD *)v51 + v56) != v59)
            LODWORD(v56) = -1;
          goto LABEL_35;
        }
        LODWORD(v56) = -1;
      }
LABEL_35:
      ++v55;
      v57 = &v47[8 * v58];
      *(_DWORD *)v57 = v60;
      *((_DWORD *)v57 + 1) = v56;
    }
    while (v49 != v55);
  }
  ecs_stack_allocator_pop_snapshot(v48);
  return v50;
}

uint64_t sub_1B205DBF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v33[3];
  _BYTE v34[24];
  _QWORD v35[3];

  v10 = *(_QWORD *)(a2 + 640);
  if (v10)
  {
    v16 = a9;
    v17 = a10;
    sub_1B1A18378(a2 + 360, (uint64_t)v34, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    sub_1B1A18378((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    v18 = v35[0];
    if (v35[0])
    {
      v29 = a6;
      v19 = v35[1];
      v20 = v35[2];
      v21 = a8;
      if ((*(_BYTE *)(a2 + 272) & 1) != 0)
        v22 = *(_QWORD *)(a2 + 448);
      else
        v22 = 0;
      ObjectType = swift_getObjectType();
      v24 = *(_QWORD *)(a2 + 288);
      v25 = *(_QWORD *)(a2 + 304);
      v26 = v24 + v25 * v22;
      swift_unknownObjectRetain();
      sub_1B1B40D5C((uint64_t)v34);
      v27 = swift_unknownObjectRetain();
      sub_1B211850C(v27, v26, v25, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v18, v19, v20, 0, 5, ObjectType);
      sub_1B1B40274((uint64_t)v34);
      a8 = v21;
      v16 = a9;
      a6 = v29;
      v17 = a10;
    }
    else
    {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_1B1F40DEC(a3, a4, a5, 0);
    objc_msgSend(a1, sel_setBytes_length_atIndex_, a6, 48, 2);
    objc_msgSend(a1, sel_setComputePipelineState_, v10);
    sub_1B2061918(v17, (uint64_t)v33);
    sub_1B1F41264(a7, a8, v16, 0, v33[0], v33[1], v33[2]);
    return swift_unknownObjectRelease();
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B205DE0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[24];
  _QWORD v37[4];

  if (*(_QWORD *)(a2 + 616))
  {
    v22 = (void *)result;
    v34 = *(_QWORD *)(a2 + 616);
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1F40DEC(a3, a4, a5, 0);
    sub_1B1F40DEC(a6, a7, a8, 0);
    sub_1B1F40DEC(a9, a10, a11, 0);
    sub_1B1A18378(a2 + 360, (uint64_t)v36, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    sub_1B1A18378((uint64_t)v36, (uint64_t)v37, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    v24 = v37[0];
    if (v37[0])
    {
      v26 = v37[1];
      v25 = v37[2];
      if ((*(_BYTE *)(a2 + 272) & 1) != 0)
        v27 = *(_QWORD *)(a2 + 448);
      else
        v27 = 0;
      v28 = *(_QWORD *)(a2 + 304);
      v29 = *(_QWORD *)(a2 + 288) + v28 * v27;
      sub_1B1B40D5C((uint64_t)v36);
      v30 = swift_unknownObjectRetain();
      sub_1B211850C(v30, v29, v28, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v24, v26, v25, 0, 5, ObjectType);
      sub_1B1B40274((uint64_t)v36);
    }
    v31 = 4 * a12 + 15;
    if (v31 <= 0)
      v32 = -(-v31 & 0xF);
    else
      v32 = v31 & 0xF;
    v33 = v31 - v32;
    objc_msgSend(v22, sel_setThreadgroupMemoryLength_atIndex_, v31 - v32, 0);
    objc_msgSend(v22, sel_setThreadgroupMemoryLength_atIndex_, v33, 1);
    objc_msgSend(v22, sel_setComputePipelineState_, v34);
    sub_1B2061918(a12, (uint64_t)v35);
    sub_1B1F41264(a13, a14, a15, 0, v35[0], v35[1], v35[2]);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B205E05C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];
  _BYTE v62[24];
  _BYTE v63[24];
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v23 = *(_QWORD *)(a2 + 624);
  if (!v23)
    return result;
  v25 = a4;
  v27 = (void *)result;
  v28 = 1;
  v53 = 1 << -(char)__clz(a4 - 1);
  v55 = a2 + 360;
  swift_unknownObjectRetain();
  v29 = 2;
  v60 = 12;
  v30 = a3;
  v51 = v23;
  v52 = a3;
  v49 = v25;
  v50 = a5;
  while (1)
  {
    v37 = v28;
    v30 *= 2;
    if (!v25)
      break;
    if (v53 < v30)
      goto LABEL_15;
LABEL_10:
    if (v30 < 0 || HIDWORD(v30))
    {
      result = sub_1B222967C();
      __break(1u);
      return result;
    }
    *a5 = v30;
    ObjectType = swift_getObjectType();
    sub_1B1F40DEC(a6, a7, a8, 0);
    v59 = v29;
    sub_1B1F40DEC(a9, a10, a11, 0);
    sub_1B1F40DEC(a12, a13, a14, 0);
    sub_1B1F40DEC(a15, a16, a17, 0);
    sub_1B1A18378(v55, (uint64_t)v63, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    sub_1B1A18378((uint64_t)v63, (uint64_t)v64, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    v39 = v64[0];
    if (v64[0])
    {
      if ((*(_BYTE *)(a2 + 272) & 1) != 0)
        v31 = *(_QWORD *)(a2 + 448);
      else
        v31 = 0;
      v33 = v64[1];
      v32 = v64[2];
      v34 = *(_QWORD *)(a2 + 304);
      v35 = *(_QWORD *)(a2 + 288) + v34 * v31;
      sub_1B1B40D5C((uint64_t)v63);
      v36 = swift_unknownObjectRetain();
      sub_1B211850C(v36, v35, v34, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v39, v33, v32, 0, 5, ObjectType);
      sub_1B1B40274((uint64_t)v63);
      v23 = v51;
      a3 = v52;
      v25 = v49;
      a5 = v50;
    }
    objc_msgSend(v27, sel_setBytes_length_atIndex_, a5, 4, 8);
    objc_msgSend(v27, sel_setComputePipelineState_, v23);
    sub_1B2061918(a3, (uint64_t)&v65);
    sub_1B1F41264(a18, a19, a20, v60, v65, v66, v67);
    v60 += 12;
    v28 = v59;
    v29 = v37;
  }
  if (v30 <= 1)
    goto LABEL_10;
LABEL_15:
  v40 = *(_QWORD *)(a2 + 632);
  if (v40)
  {
    v41 = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1F40DEC(a6, a7, a8, 0);
    sub_1B1F40DEC(a12, a13, a14, 0);
    sub_1B1F40DEC(a21, a22, a23, 0);
    sub_1B1A18378(v55, (uint64_t)v62, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    sub_1B1A18378((uint64_t)v62, (uint64_t)&v65, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    v42 = v65;
    if (v65)
    {
      v43 = v66;
      v44 = v67;
      if ((*(_BYTE *)(a2 + 272) & 1) != 0)
        v45 = *(_QWORD *)(a2 + 448);
      else
        v45 = 0;
      v46 = *(_QWORD *)(a2 + 304);
      v47 = *(_QWORD *)(a2 + 288) + v46 * v45;
      sub_1B1B40D5C((uint64_t)v62);
      v48 = swift_unknownObjectRetain();
      sub_1B211850C(v48, v47, v46, 0, 4, v41);
      swift_unknownObjectRelease();
      sub_1B211850C(v42, v43, v44, 0, 5, v41);
      sub_1B1B40274((uint64_t)v62);
      a3 = v52;
    }
    objc_msgSend(v27, sel_setComputePipelineState_, v40);
    sub_1B2061918(a3, (uint64_t)v61);
    sub_1B1F41264(a18, a19, a20, 0, v61[0], v61[1], v61[2]);
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1B205E548(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v35[3];
  _BYTE v36[24];
  _QWORD v37[4];

  v12 = *(_QWORD *)(a2 + 648);
  if (v12)
  {
    v16 = a11;
    v17 = a12;
    v18 = a10;
    sub_1B1A18378(a2 + 360, (uint64_t)v36, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    sub_1B1A18378((uint64_t)v36, (uint64_t)v37, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
    v19 = v37[0];
    if (v37[0])
    {
      v29 = a8;
      v20 = v37[1];
      v21 = v37[2];
      if ((*(_BYTE *)(a2 + 272) & 1) != 0)
        v22 = *(_QWORD *)(a2 + 448);
      else
        v22 = 0;
      ObjectType = swift_getObjectType();
      v24 = *(_QWORD *)(a2 + 288);
      v25 = *(_QWORD *)(a2 + 304);
      v26 = v24 + v25 * v22;
      swift_unknownObjectRetain();
      sub_1B1B40D5C((uint64_t)v36);
      v27 = swift_unknownObjectRetain();
      sub_1B211850C(v27, v26, v25, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v19, v20, v21, 0, 5, ObjectType);
      sub_1B1B40274((uint64_t)v36);
      v16 = a11;
      v18 = a10;
      v17 = a12;
      a8 = v29;
    }
    else
    {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_1B1F40DEC(a3, a4, a5, 0);
    sub_1B1F40DEC(a6, a7, a8, 0);
    objc_msgSend(a1, sel_setComputePipelineState_, v12);
    sub_1B2061918(v17, (uint64_t)v35);
    sub_1B1F41264(a9, v18, v16, 0, v35[0], v35[1], v35[2]);
    return swift_unknownObjectRelease();
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t *sub_1B205E760(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  float32x4_t v42;
  __n128 v43[2];
  uint64_t v44[8];
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _BYTE v58[40];
  _OWORD v59[2];
  uint64_t v60;

  v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = (uint64_t)result;
    v4 = result[22];
    swift_retain();
    swift_retain();
    v5 = sub_1B1F219C4(v4);
    v7 = v6;
    v9 = v8;
    swift_release();
    v43[0] = 0uLL;
    v10 = *(_OWORD *)(v1 + 32);
    v59[0] = *(_OWORD *)(v1 + 16);
    v59[1] = v10;
    v60 = *(_QWORD *)(v1 + 48);
    sub_1B1E8FCE4(v3, (uint64_t)v59, 0x200000000, v44);
    sub_1B1A18378((uint64_t)v44, (uint64_t)&v45, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v45.i64[0])
    {
      v11 = v45;
      v12 = v46;
      v53 = v45;
      v54 = v46;
      v55 = v47;
      if (v52 > 0 && (v36 = v49) != 0)
      {
        v11.i32[0] = 0;
        v12.i32[0] = v9 & 1;
        v13 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v11), 0);
        v14.i64[0] = v5;
        v14.i64[1] = v7;
        v42 = (float32x4_t)vbslq_s8(v13, v14, (int8x16_t)xmmword_1B2244D90);
        v34 = v48;
        v15 = v51;
        v16 = v51[4];
        v40 = *(unsigned __int8 *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v32 = v51 + 8;
        v33 = (uint64_t)(v51 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v17 = 0;
        v41 = v15;
        v35 = v16;
        do
        {
          v18 = (unsigned int *)(v34 + 48 * v17);
          v19 = *v18;
          v20 = (uint64_t *)*((_QWORD *)v18 + 2);
          v37 = v18[1];
          v38 = *((_QWORD *)v18 + 3);
          v21 = *((_QWORD *)v18 + 4);
          v22 = *((_QWORD *)v18 + 5);
          v39 = v17;
          if (v40)
          {
            v23 = *(os_unfair_lock_s **)(v22 + 376);
            swift_retain();
            os_unfair_lock_lock(v23);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v22 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v16);
          sub_1B1A18378(v33, (uint64_t)v58, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v24 = v15[4];
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v41[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
          v41[7] = v25;
          v32[1] = 0;
          v32[2] = 0;
          *v32 = 0;
          swift_release();
          v26 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v20, v38, v21, (uint64_t)v41);
          v15 = v41;
          v27 = sub_1B1A12038((uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, v20, v38, v21, (uint64_t)v41);
          v28 = v27;
          if (v20)
          {
            for (; v21; --v21)
            {
              v29 = *v20++;
              sub_1B2060D1C(v42, v22, v29, v26, v28, v3, v43, v2);
              v28 += 656;
              v26 += 88;
            }
          }
          else if ((_DWORD)v19 != (_DWORD)v37)
          {
            v30 = v27 + 656 * v19;
            v31 = v26 + 88 * v19;
            do
            {
              sub_1B2060D1C(v42, v22, v19++, v31, v30, v3, v43, v2);
              v30 += 656;
              v31 += 88;
            }
            while (v37 != v19);
          }
          v56[0] = v53;
          v56[1] = v54;
          v57 = v55;
          sub_1B1F05D48(v41, (unsigned __int16 **)v56, (uint64_t)v58);
          sub_1B1F03804((char *)v22);
          v16 = v35;
          ecs_stack_allocator_pop_snapshot(v35);
          if ((v40 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v22 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v22 + 376));
          }
          swift_release();
          v17 = v39 + 1;
        }
        while (v39 + 1 != v36);
        swift_release();
        sub_1B19ED748(v44);
      }
      else
      {
        swift_release();
      }
      return sub_1B19ED748(v44);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticleSortSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B205EBF0()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B116A4(1, 2, (uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B205ECB0()
{
  return "ParticleSort";
}

uint64_t sub_1B205ECC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t ObjectType;
  void *v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = a2[76];
  v7 = ceilf(log2f((float)a4));
  v8 = v7 - log2f((float)a3);
  if ((uint64_t)v8 + 1 > 1)
    v9 = (uint64_t)v8 + 1;
  else
    v9 = 1;
  swift_unknownObjectRetain();
  swift_retain();
  v10 = sub_1B1D22DA8(0, 12 * v9);
  v12 = v11;
  v14 = v13;
  swift_unknownObjectRetain();
  swift_release();
  if (a3 < 0 || HIDWORD(a3) || (v63 = v14, v64 = v12, v66 = a3, HIDWORD(v9)))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v65 = v9;
    v15 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
    ObjectType = swift_getObjectType();
    v17 = (void *)sub_1B2228728();
    objc_msgSend(v15, sel_pushDebugGroup_, v17);

    v18 = a2[5];
    v19 = *((_BYTE *)a2 + 48);
    v20 = *((_BYTE *)a2 + 49);
    v67 = *a2;
    v21 = *((_BYTE *)a2 + 50);
    v70 = v18;
    v22 = a2[7];
    v71 = v19;
    v23 = *((_DWORD *)a2 + 16);
    v72 = v20;
    v24 = *((_BYTE *)a2 + 68);
    v73 = v21;
    v25 = a2[9];
    v74 = v22;
    LOBYTE(v22) = *((_BYTE *)a2 + 80);
    v75 = v23;
    v26 = a2[11];
    v27 = *((_DWORD *)a2 + 24);
    v76 = v24;
    v28 = a2[15];
    v77 = v25;
    LOBYTE(v25) = *((_BYTE *)a2 + 128);
    v78 = v22;
    LOBYTE(v22) = *((_BYTE *)a2 + 129);
    v79 = v26;
    LOBYTE(v26) = *((_BYTE *)a2 + 130);
    v82 = v28;
    v29 = a2[19];
    v83 = v25;
    LOBYTE(v25) = *((_BYTE *)a2 + 160);
    v84 = v22;
    v85 = v26;
    v30 = a2[21];
    v31 = a2[22];
    v87 = v29;
    LOBYTE(v29) = *((_BYTE *)a2 + 184);
    v88 = v25;
    v32 = a2[26];
    v89 = v30;
    v90 = v31;
    LOBYTE(v30) = *((_BYTE *)a2 + 216);
    v33 = a2[29];
    v91 = v29;
    LOBYTE(v29) = *((_BYTE *)a2 + 240);
    v93 = v32;
    v34 = a2[33];
    v94 = v30;
    v35 = *((unsigned __int8 *)a2 + 272);
    v96 = v33;
    v36 = a2[35];
    v97 = v29;
    v99 = v34;
    v37 = a2[44];
    v38 = a2[45];
    v101 = v36;
    v106 = v37;
    v115 = *((_DWORD *)a2 + 114);
    v39 = a2[77];
    v86 = *(_OWORD *)(a2 + 17);
    v92 = *((_OWORD *)a2 + 12);
    v95 = *(uint64_t *)((char *)a2 + 220);
    v98 = *(_OWORD *)(a2 + 31);
    v40 = *((_OWORD *)a2 + 18);
    v41 = *((_OWORD *)a2 + 19);
    v102 = v40;
    v103 = v41;
    v42 = *((_OWORD *)a2 + 21);
    v104 = *((_OWORD *)a2 + 20);
    v105 = v42;
    v43 = *((_OWORD *)a2 + 25);
    v110 = *((_OWORD *)a2 + 24);
    v111 = v43;
    v44 = *((_OWORD *)a2 + 27);
    v112 = *((_OWORD *)a2 + 26);
    v113 = v44;
    v45 = *((_OWORD *)a2 + 30);
    v116 = *((_OWORD *)a2 + 29);
    v117 = v45;
    v46 = *((_OWORD *)a2 + 32);
    v118 = *((_OWORD *)a2 + 31);
    v119 = v46;
    v47 = *((_OWORD *)a2 + 34);
    v48 = *((_OWORD *)a2 + 35);
    v49 = *((_OWORD *)a2 + 36);
    v50 = *((_OWORD *)a2 + 37);
    v51 = *((_OWORD *)a2 + 39);
    v52 = *((_OWORD *)a2 + 40);
    v120 = *((_OWORD *)a2 + 33);
    v121 = v47;
    v122 = v48;
    v123 = v49;
    v124 = v50;
    v126 = v39;
    v127 = v51;
    v128 = v52;
    v53 = a2[46];
    v54 = a2[47];
    v55 = *(_OWORD *)(a2 + 3);
    v56 = *(_OWORD *)(a2 + 13);
    v57 = a2[56];
    v68 = *(_OWORD *)(a2 + 1);
    v69 = v55;
    v80 = v27;
    v81 = v56;
    v100 = v35;
    v107 = v38;
    v108 = v53;
    v109 = v54;
    v114 = v57;
    v125 = v6;
    if (v38)
    {
      if (v35)
        v58 = v57;
      else
        v58 = 0;
      v59 = v41;
      v60 = v40 + v58 * v41;
      sub_1B1C1FAFC((uint64_t)&v67);
      swift_unknownObjectRetain();
      v61 = swift_unknownObjectRetain();
      sub_1B211850C(v61, v60, v59, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B211850C(v38, v53, v54, 0, 5, ObjectType);
      swift_unknownObjectRelease();
      sub_1B1CDB618((uint64_t)&v67);
    }
    sub_1B1F40DEC(v10, v64, v63, 0);
    objc_msgSend(v15, sel_setBytes_length_atIndex_, &v66, 4, 2);
    objc_msgSend(v15, sel_setBytes_length_atIndex_, &v65, 4, 3);
    sub_1B1F40E74(v6);
    objc_msgSend(v15, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_1B205F158(__n128 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t result;
  _DWORD v25[4];
  __n128 v26;
  char v27;
  uint64_t v28;

  v12 = a4;
  v28 = *MEMORY[0x1E0C80C00];
  v13 = 4 * *(_QWORD *)(a3 + 464);
  swift_retain();
  v14 = sub_1B1D22DA8(0, v13);
  v16 = v15;
  v18 = v17;
  swift_unknownObjectRetain();
  swift_release();
  if (v12)
  {
    v25[0] = (char)a4;
    v26 = a1;
    v27 = 0;
    v19 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
    v20 = (void *)sub_1B2228728();
    objc_msgSend(v19, sel_pushDebugGroup_, v20);

    sub_1B205DBF0(v19, a3, v14, v16, v18, (uint64_t)v25, a5, a6, a7, a8);
    objc_msgSend(v19, sel_popDebugGroup);
    swift_unknownObjectRelease();
    return v14;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B205F328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40 = *(_QWORD *)(a2 + 464);
  swift_retain();
  v10 = sub_1B1D22DA8(0, 4 * v40);
  v35 = v11;
  v36 = v10;
  v41 = v12;
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  v37 = sub_1B1D22DA8(0, 4 * v40);
  v38 = v13;
  v39 = v14;
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  v15 = sub_1B1D22DA8(0, 4 * v40);
  v17 = v16;
  v32 = v18;
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  v19 = sub_1B1D22DA8(0, 4 * v40);
  v21 = v20;
  v29 = v22;
  v30 = v20;
  v23 = v22;
  swift_unknownObjectRetain();
  swift_release();
  v46 = 0;
  v24 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v25 = (void *)sub_1B2228728();
  objc_msgSend(v24, sel_pushDebugGroup_, v25);

  sub_1B205DE0C((uint64_t)v24, a2, a3, a4, a5, v15, v17, v32, v19, v21, v23, a9, a6, a7, a8);
  objc_msgSend(v24, sel_popDebugGroup);
  swift_unknownObjectRelease();
  v26 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v27 = (void *)sub_1B2228728();
  objc_msgSend(v26, sel_pushDebugGroup_, v27);

  sub_1B205E05C((uint64_t)v26, a2, a9, v40, &v46, v37, v39, v38, a3, a4, a5, v15, v17, v32, v19, v30, v29, a6, a7,
    a8,
    v36,
    v35,
    v41);
  objc_msgSend(v26, sel_popDebugGroup);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v36;
}

uint64_t sub_1B205F64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v13 = 8 * *(_QWORD *)(a5 + 464);
  swift_retain();
  v14 = sub_1B1D22DA8(0, v13);
  v16 = v15;
  v18 = v17;
  swift_unknownObjectRetain();
  swift_release();
  v19 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v20 = (void *)sub_1B2228728();
  objc_msgSend(v19, sel_pushDebugGroup_, v20);

  sub_1B205E548(v19, a5, a1, a2, a3, v14, v16, v18, a6, a7, a8, a9);
  objc_msgSend(v19, sel_popDebugGroup);
  swift_unknownObjectRelease();
  return v14;
}

uint64_t sub_1B205F790(uint64_t a1, char a2)
{
  char v3;
  uint64_t result;

  sub_1B1B47B28();
  if ((v3 & 1) == 0)
    __asm { BR              X10 }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B205FB90(char a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _OWORD v41[2];
  uint64_t v42;
  _BYTE v43[40];
  _QWORD v44[10];
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v34 = v3[10];
  v7 = 4 * v34;
  v36 = ecs_stack_allocator_allocate(a2, 4 * v34, 4);
  v35 = ecs_stack_allocator_allocate(a2, 4 * v34, 4);
  v33 = a1;
  if (v34 >= 1)
  {
    v8 = v3[7];
    if (v8)
    {
      v29 = a3;
      v9 = (_QWORD *)v3[9];
      v10 = v9[4];
      v30 = v3[8];
      v31 = v10;
      v40 = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v11 = (uint64_t *)(v3[5] + 24);
      v32 = v3;
      do
      {
        v39 = v8;
        v13 = *((unsigned int *)v11 - 6);
        v12 = *((unsigned int *)v11 - 5);
        v14 = *((unsigned int *)v11 - 4);
        v15 = *(v11 - 1);
        v16 = v11[2];
        v37 = v11[1];
        v38 = *v11;
        if (v40)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A18378((uint64_t)(v9 + 6), (uint64_t)v43, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v44[0] = v30;
        v44[1] = v16;
        v44[2] = v9;
        v44[3] = v14;
        v44[4] = (v12 - v13 + v14);
        v44[5] = v34;
        v44[6] = v13;
        v44[7] = v12;
        v44[8] = 0;
        v44[9] = 0;
        v45 = 1;
        v46 = v15;
        v47 = v38;
        v48 = v37;
        sub_1B205F790((uint64_t)v44, v33);
        v20 = *((_OWORD *)v32 + 1);
        v41[0] = *(_OWORD *)v32;
        v41[1] = v20;
        v42 = v32[4];
        sub_1B1F05D48(v9, (unsigned __int16 **)v41, (uint64_t)v43);
        if (*(_QWORD *)(v9[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v16);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v9[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1BBF038();
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v9[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v9[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v16 + 232);
            v27 = *(char **)(v16 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v16 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v16 + 232);
              v28 = *(char **)(v16 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v16 + 232) = 0;
                *(_QWORD *)(v16 + 240) = 0;
              }
            }
            *(_QWORD *)(v16 + 248) = v28;
            *(_QWORD *)(v16 + 256) = v27;
          }
        }
        v10 = v31;
        ecs_stack_allocator_pop_snapshot(v31);
        if ((v40 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v11 += 6;
        v8 = v39 - 1;
      }
      while (v39 != 1);
      v7 = 4 * v34;
      a3 = v29;
    }
  }
  *a3 = v36;
  a3[1] = v7 >> 2;
  a3[2] = v35;
  a3[3] = v7 >> 2;
  a3[4] = 0;
}

uint64_t sub_1B205FFDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t result;

  v8 = 4 * a4;
  ecs_stack_allocator_push_snapshot(a5);
  ecs_stack_allocator_allocate(a5, v8, 8);
  swift_retain();
  v9 = (void *)sub_1B1D22DA8(0, v8);
  v11 = v10;
  swift_unknownObjectRetain();
  swift_release();
  v12 = objc_msgSend(v9, sel_storageMode);
  v13 = 0;
  if (v12 != (id)2)
  {
    v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v15 = v9;
    v13 = (uint64_t)v14 + v11;
  }
  if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    radix_sort_float_with_input_indices(a2, v13);
    ecs_stack_allocator_pop_snapshot(a5);
    return (uint64_t)v9;
  }
  return result;
}

uint64_t sub_1B206017C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t *v15;
  uint32x4_t *v16;
  unint64_t v17;
  float32x4_t v18;
  float *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  result = sub_1B1A12038((uint64_t)&type metadata for ParticleParentID, (uint64_t)&off_1E63895A0, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  if ((v7 & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = v9 - v8;
    if (v9 != v8)
    {
      v11 = (float)*(uint64_t *)(a1 + 40);
      if (v10 < 8)
        goto LABEL_12;
      v12 = a2 + 4 * (v8 + a3);
      v13 = result + 4 * v8;
      if (v12 < result + 4 * v9 && v13 < a2 + 4 * (v9 + a3))
        goto LABEL_12;
      v8 += v10 & 0xFFFFFFFFFFFFFFF8;
      v15 = (float32x4_t *)(v12 + 16);
      v16 = (uint32x4_t *)(v13 + 16);
      v17 = v10 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v18 = vaddq_f32(*v15, vmulq_n_f32(vcvtq_f32_u32(*v16), v11));
        v15[-1] = vaddq_f32(v15[-1], vmulq_n_f32(vcvtq_f32_u32(v16[-1]), v11));
        *v15 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_12:
        v19 = (float *)(a2 + 4 * (v8 + a3));
        v20 = v9 - v8;
        v21 = (unsigned int *)(result + 4 * v8);
        do
        {
          v22 = *v21++;
          *v19 = *v19 + (float)(v11 * (float)v22);
          ++v19;
          --v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

_QWORD *sub_1B206028C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v20 = ecs_stack_allocator_allocate(a2, 4 * *(_QWORD *)(v2 + 80), 4);
  if (a1 <= 6u && ((1 << a1) & 0x4C) != 0)
  {
    if (v24 < 1)
      return v20;
  }
  else if (v24 <= 0)
  {
    return v20;
  }
  if (v25[7])
  {
    v4 = (_QWORD *)v25[9];
    v26 = v4[4];
    v22 = (unsigned int *)v25[5];
    v23 = v25[8];
    v21 = a1;
    __asm { FMOV            V0.4S, #1.0 }
    v10 = *v22;
    v27 = v22[1];
    v11 = v22[2];
    v12 = *((_QWORD *)v22 + 2);
    v13 = *((_QWORD *)v22 + 3);
    v14 = *((_QWORD *)v22 + 4);
    v15 = *((_QWORD *)v22 + 5);
    if (*(_BYTE *)(v23 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach))
    {
      v16 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v26);
    sub_1B1A18378((uint64_t)(v4 + 6), (uint64_t)v28, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v4[4];
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v4[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v4[7] = v18;
    v4[9] = 0;
    v4[10] = 0;
    v4[8] = 0;
    swift_release();
    v29 = v23;
    v30 = v15;
    v31 = v4;
    v32 = v11;
    v33 = (v27 - v10 + v11);
    v34 = v24;
    v35 = v10;
    v36 = v27;
    v37 = 0;
    v38 = 0;
    v39 = 1;
    v40 = v12;
    v41 = v13;
    v42 = v14;
    __asm { BR              X8 }
  }
  return v20;
}

void sub_1B2060B64()
{
  sub_1B2229688();
  __break(1u);
}

id sub_1B2060BB0(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  id result;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = objc_msgSend(a1, sel_storageMode);
  if (result == (id)2)
  {
    v11 = 0;
    if (!a3)
      return result;
    goto LABEL_5;
  }
  v12 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  result = a1;
  v11 = &v12[a2];
  if (a3)
  {
LABEL_5:
    v13 = 0;
    v14 = a3 - 1;
    while (1)
    {
      v15 = *(unsigned int *)&v11[4 * v13];
      if ((_DWORD)v15)
        break;
      if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13))
      {
LABEL_17:
        result = (id)sub_1B222967C();
        __break(1u);
        return result;
      }
      *a5 = v13;
      if (v14 == *(_DWORD *)&v11[4 * v13])
        goto LABEL_13;
LABEL_6:
      if (a3 == ++v13)
        return result;
    }
    if (v14 != v15)
      goto LABEL_6;
LABEL_13:
    if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13))
      goto LABEL_17;
    *a4 = v13;
    goto LABEL_6;
  }
  return result;
}

void sub_1B2060D1C(float32x4_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 *a7, uint64_t a8)
{
  char v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  char v28;
  char v29;
  __int128 v30;
  int v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v144[4];
  unint64_t v145;
  uint64_t v146[82];
  _OWORD v147[41];
  _OWORD __dst[41];
  _OWORD v149[2];
  uint64_t v150;
  _OWORD v151[2];
  uint64_t v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  uint64_t v159;
  char v160;
  char v161;
  char v162;
  uint64_t v163;
  char v164;
  __int16 v165;
  char v166;
  char v167;
  int v168;
  uint64_t v169;

  v169 = a8;
  *(_QWORD *)(a5 + 232) = 0;
  *(_BYTE *)(a5 + 240) = 1;
  v12 = *(_BYTE *)(a4 + 41);
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(a5 + 168);
    if (!v13)
      return;
    v14 = *(unsigned __int8 *)(a4 + 45);
    if (v13 == 1)
    {
      if ((v14 & 1) != 0)
        return;
      v13 = 1;
      goto LABEL_33;
    }
    if ((v13 & 0x18) != 0)
    {
      v138 = a1;
      v141 = v14 ^ 1;
LABEL_11:
      swift_retain();
      v15 = sub_1B1A101F0(a3);
      swift_release();
      v16 = *(_QWORD *)(a4 + 32);
      v17 = *(_BYTE *)(a4 + 40);
      v18 = *(_BYTE *)(a4 + 42);
      v19 = *(_BYTE *)(a4 + 43);
      v20 = *(_BYTE *)(a4 + 44);
      v21 = *(_BYTE *)(a4 + 45);
      v22 = *(_BYTE *)(a4 + 56);
      v23 = *(_BYTE *)(a4 + 57);
      v24 = *(_BYTE *)(a4 + 58);
      v25 = *(_QWORD *)(a4 + 64);
      v26 = *(_BYTE *)(a4 + 72);
      v27 = *(_WORD *)(a4 + 74);
      v28 = *(_BYTE *)(a4 + 76);
      v29 = *(_BYTE *)(a4 + 77);
      v30 = *(_OWORD *)(a4 + 16);
      v151[0] = *(_OWORD *)a4;
      v31 = *(_DWORD *)(a4 + 80);
      v151[1] = v30;
      v152 = v16;
      v153 = v17;
      v154 = v12;
      v155 = v18;
      v156 = v19;
      v157 = v20;
      v158 = v21;
      v159 = *(_QWORD *)(a4 + 48);
      v160 = v22;
      v161 = v23;
      v162 = v24;
      v163 = v25;
      v164 = v26;
      v165 = v27;
      v166 = v28;
      v167 = v29;
      v168 = v31;
      *(double *)a1.i64 = sub_1B205D1D0(v15, (uint64_t)v151);
      *(float32x4_t *)a7 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v32, v138, 2), v33, *(float32x2_t *)v138.f32, 1), a1, v138.f32[0]);
      if ((v21 & 1) == 0)
        goto LABEL_34;
      goto LABEL_16;
    }
    if (!*(_BYTE *)(a4 + 45))
    {
LABEL_33:
      v141 = 1;
      goto LABEL_34;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a5 + 168);
    if (v13 < 2)
      return;
    if ((v13 & 0x18) != 0)
    {
      v138 = a1;
      v141 = 0;
      goto LABEL_11;
    }
    if ((*(_BYTE *)(a4 + 45) & 1) == 0)
    {
      v141 = 0;
LABEL_34:
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                  + 8 * *(_QWORD *)thread_worker_index(*(double *)a1.i64)
                                  + 8)
                      + 32);
      v149[0] = *(_OWORD *)(a5 + 56);
      v149[1] = *(_OWORD *)(a5 + 72);
      v150 = *(_QWORD *)(a5 + 88);
      sub_1B1E8FCE4(a6, (uint64_t)v149, 0x200000000, v146);
      sub_1B1A18378((uint64_t)v146, (uint64_t)v147, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (!*(_QWORD *)&v147[0])
        return;
      __dst[2] = v147[2];
      __dst[3] = v147[3];
      __dst[4] = v147[4];
      __dst[5] = v147[5];
      __dst[0] = v147[0];
      __dst[1] = v147[1];
      sub_1B206187C();
      v61 = swift_allocObject();
      *(_QWORD *)(v61 + 16) = v13;
      v137 = swift_retain();
      while (1)
      {
        v63 = __clz(__rbit64(v13));
        if (v63 > 6)
        {
LABEL_66:
          swift_release();
          swift_setDeallocating();
          swift_deallocClassInstance();
          if ((*(_BYTE *)(a5 + 184) & 1) == 0)
          {
            sub_1B19ED748(v146);
            return;
          }
          v103 = *(_QWORD *)(a5 + 176);
          if (*(_QWORD *)(v103 + 16))
          {
            v104 = sub_1B1DC4B3C(5u);
            if ((v105 & 1) != 0)
            {
              v106 = *(_QWORD *)(v103 + 56) + 24 * v104;
              v107 = *(_QWORD *)(v106 + 8);
              v108 = *(_QWORD *)(v106 + 16);
              v109 = (void *)swift_unknownObjectRetain();
              v110 = sub_1B205D724(v109, v107, v108, v169, v60);
              v112 = v111;
              v114 = v113;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              *(_QWORD *)(a5 + 192) = v110;
              *(_QWORD *)(a5 + 200) = v112;
              *(_QWORD *)(a5 + 208) = v114;
            }
          }
          v115 = *(_QWORD *)(a5 + 176);
          if (*(_QWORD *)(v115 + 16))
          {
            v116 = sub_1B1DC4B3C(*(_BYTE *)(a5 + 216));
            if ((v117 & 1) != 0)
            {
              v118 = *(_QWORD *)(*(_QWORD *)(v115 + 56) + 24 * v116 + 8);
              v119 = *(_QWORD *)&__dst[5];
              v120 = (void *)swift_unknownObjectRetain();
              sub_1B2060BB0(v120, v118, v119, (_DWORD *)(a5 + 220), (_DWORD *)(a5 + 224));
              sub_1B19ED748(v146);
              swift_unknownObjectRelease();
              return;
            }
          }
          sub_1B19ED748(v146);
          v133 = *(_QWORD *)&__dst[5] - 1;
          if (*(_QWORD *)&__dst[5] - 1 >= 0 && !HIDWORD(v133))
          {
            *(_QWORD *)(a5 + 220) = v133;
            return;
          }
LABEL_84:
          sub_1B222967C();
          __break(1u);
          return;
        }
        if (((1 << v63) & v13) != 0)
          *(_QWORD *)(v61 + 16) = v13 & ~(1 << v63);
        if (v141)
          break;
        if (!v63)
          goto LABEL_39;
        ecs_stack_allocator_push_snapshot(v60);
        v78 = sub_1B206028C(v63, v60);
        v80 = sub_1B205D040(v169, (uint64_t)v78, v79, v60);
        v82 = v81;
        v84 = v83;
        swift_unknownObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v144[0] = *(_QWORD *)(a5 + 176);
        *(_QWORD *)(a5 + 176) = 0x8000000000000000;
        sub_1B1B8A1B0(v80, v82, v84, v63, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(a5 + 176) = v144[0];
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_38:
        ecs_stack_allocator_pop_snapshot(v60);
LABEL_39:
        v13 = *(_QWORD *)(v61 + 16);
        if (!v13)
          goto LABEL_66;
      }
      if (!v63)
      {
        v86 = sub_1B205D360(v169, v60);
        v88 = v87;
        v90 = v89;
        swift_unknownObjectRetain();
        v91 = swift_isUniquelyReferenced_nonNull_native();
        v144[0] = *(_QWORD *)(a5 + 176);
        v92 = v144[0];
        *(_QWORD *)(a5 + 176) = 0x8000000000000000;
        v94 = sub_1B1DC4B3C(0);
        v95 = v93;
        v96 = *(_QWORD *)(v92 + 16) + ((v93 & 1) == 0);
        if (*(_QWORD *)(v92 + 24) >= v96)
        {
          if ((v91 & 1) != 0)
          {
            v99 = (_QWORD *)v144[0];
            if ((v93 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            sub_1B1EB27C4();
            v99 = (_QWORD *)v144[0];
            if ((v95 & 1) == 0)
              goto LABEL_64;
          }
        }
        else
        {
          sub_1B1EA2E14(v96, v91);
          v97 = sub_1B1DC4B3C(0);
          if ((v95 & 1) != (v98 & 1))
            goto LABEL_83;
          v94 = v97;
          v99 = (_QWORD *)v144[0];
          if ((v95 & 1) == 0)
          {
LABEL_64:
            v99[(v94 >> 6) + 8] |= 1 << v94;
            *(_BYTE *)(v99[6] + v94) = 0;
            v102 = (uint64_t *)(v99[7] + 24 * v94);
            *v102 = v86;
            v102[1] = v88;
            v102[2] = v90;
            ++v99[2];
            goto LABEL_65;
          }
        }
        v101 = (uint64_t *)(v99[7] + 24 * v94);
        swift_unknownObjectRelease();
        *v101 = v86;
        v101[1] = v88;
        v101[2] = v90;
LABEL_65:
        *(_QWORD *)(a5 + 176) = v99;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a5 + 232) = v90 / 4;
        *(_BYTE *)(a5 + 240) = 0;
        v61 = v137;
        goto LABEL_39;
      }
      ecs_stack_allocator_push_snapshot(v60);
      sub_1B205FB90(v63, v60, v144);
      v64 = v145;
      v65 = sub_1B205FFDC(v169, v144[0], v144[2], v145, v60);
      v67 = v66;
      v140 = v68;
      *(_QWORD *)(a5 + 232) = v64;
      *(_BYTE *)(a5 + 240) = 0;
      swift_unknownObjectRetain();
      v69 = swift_isUniquelyReferenced_nonNull_native();
      v144[0] = *(_QWORD *)(a5 + 176);
      v70 = v144[0];
      *(_QWORD *)(a5 + 176) = 0x8000000000000000;
      v72 = sub_1B1DC4B3C(v63);
      v73 = v71;
      v74 = *(_QWORD *)(v70 + 16) + ((v71 & 1) == 0);
      if (*(_QWORD *)(v70 + 24) < v74)
      {
        sub_1B1EA2E14(v74, v69);
        v75 = sub_1B1DC4B3C(v63);
        if ((v73 & 1) != (v76 & 1))
          goto LABEL_83;
        v72 = v75;
        v77 = (_QWORD *)v144[0];
        if ((v73 & 1) != 0)
          goto LABEL_57;
LABEL_36:
        v77[(v72 >> 6) + 8] |= 1 << v72;
        *(_BYTE *)(v77[6] + v72) = v63;
        v62 = (uint64_t *)(v77[7] + 24 * v72);
        *v62 = v65;
        v62[1] = v67;
        v62[2] = v140;
        ++v77[2];
LABEL_37:
        *(_QWORD *)(a5 + 176) = v77;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v61 = v137;
        goto LABEL_38;
      }
      if ((v69 & 1) != 0)
      {
        v77 = (_QWORD *)v144[0];
        if ((v71 & 1) == 0)
          goto LABEL_36;
      }
      else
      {
        sub_1B1EB27C4();
        v77 = (_QWORD *)v144[0];
        if ((v73 & 1) == 0)
          goto LABEL_36;
      }
LABEL_57:
      v100 = (uint64_t *)(v77[7] + 24 * v72);
      swift_unknownObjectRelease();
      *v100 = v65;
      v100[1] = v67;
      v100[2] = v140;
      goto LABEL_37;
    }
  }
LABEL_16:
  if (*(_QWORD *)(a5 + 360))
  {
    v34 = *(_QWORD *)(a5 + 464);
    if (v34 >= 1)
    {
      v35 = sub_1B205ECC4(v169, (uint64_t *)a5, 512, v34);
      v136 = v36;
      v139 = v35;
      v135 = v37;
      sub_1B206187C();
      v38 = swift_allocObject();
      *(_QWORD *)(v38 + 16) = v13;
      v134 = swift_retain();
      do
      {
        v39 = __clz(__rbit64(v13));
        if (v39 > 6)
          break;
        if (((1 << v39) & v13) != 0)
        {
          v13 &= ~(1 << v39);
          *(_QWORD *)(v38 + 16) = v13;
        }
        if (v39)
        {
          memcpy(__dst, (const void *)a5, sizeof(__dst));
          v40 = v169;
          v41 = sub_1B205F158(*a7, v169, (uint64_t)__dst, v39, v139, v136, v135, 512);
          v43 = v42;
          v45 = v44;
          memcpy(v147, (const void *)a5, sizeof(v147));
          v46 = sub_1B205F328(v40, (uint64_t)v147, v41, v43, v45, v139, v136, v135, 512);
          v48 = v47;
          v142 = v49;
          v50 = swift_isUniquelyReferenced_nonNull_native();
          v146[0] = *(_QWORD *)(a5 + 176);
          v51 = v146[0];
          *(_QWORD *)(a5 + 176) = 0x8000000000000000;
          v52 = sub_1B1DC4B3C(v39);
          v54 = v53;
          v55 = *(_QWORD *)(v51 + 16) + ((v53 & 1) == 0);
          if (*(_QWORD *)(v51 + 24) >= v55)
          {
            if ((v50 & 1) == 0)
              sub_1B1EB27C4();
          }
          else
          {
            sub_1B1EA2E14(v55, v50);
            v56 = sub_1B1DC4B3C(v39);
            if ((v54 & 1) != (v57 & 1))
            {
LABEL_83:
              sub_1B2229FC4();
              __break(1u);
              goto LABEL_84;
            }
            v52 = v56;
          }
          v38 = v134;
          v58 = v146[0];
          if ((v54 & 1) != 0)
          {
            v59 = (uint64_t *)(*(_QWORD *)(v146[0] + 56) + 24 * v52);
            swift_unknownObjectRelease();
            *v59 = v46;
            v59[1] = v48;
            v59[2] = v142;
          }
          else
          {
            sub_1B1EB461C(v52, v39, v46, v48, v142, (_QWORD *)v146[0]);
          }
          *(_QWORD *)(a5 + 176) = v58;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v13 = *(_QWORD *)(v134 + 16);
        }
      }
      while (v13);
      swift_release();
      swift_setDeallocating();
      swift_deallocClassInstance();
      if ((*(_BYTE *)(a5 + 184) & 1) != 0
        && (v121 = *(_QWORD *)(a5 + 176), *(_QWORD *)(v121 + 16))
        && (v122 = sub_1B1DC4B3C(5u), (v123 & 1) != 0))
      {
        v124 = *(_QWORD *)(v121 + 56) + 24 * v122;
        v125 = *(_QWORD *)(v124 + 8);
        v126 = *(_QWORD *)(v124 + 16);
        memcpy(v146, (const void *)a5, sizeof(v146));
        sub_1B1A18378((uint64_t)&v146[24], (uint64_t)v149, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
        v127 = swift_unknownObjectRetain();
        v128 = sub_1B205F64C(v127, v125, v126, v169, (uint64_t)v146, v139, v136, v135, 512);
        v130 = v129;
        v132 = v131;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        sub_1B1B40274((uint64_t)v149);
        *(_QWORD *)(a5 + 192) = v128;
        *(_QWORD *)(a5 + 200) = v130;
        *(_QWORD *)(a5 + 208) = v132;
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
}

unint64_t sub_1B2061838()
{
  unint64_t result;

  result = qword_1ED4B8E30;
  if (!qword_1ED4B8E30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5084, &type metadata for ParticleSortMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B8E30);
  }
  return result;
}

void sub_1B206187C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4842D0)
  {
    sub_1B20618D4();
    v0 = sub_1B2229484();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4842D0);
  }
}

unint64_t sub_1B20618D4()
{
  unint64_t result;

  result = qword_1ED484298;
  if (!qword_1ED484298)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5054, &type metadata for ParticleSortModeSet.Iterator);
    atomic_store(result, (unint64_t *)&qword_1ED484298);
  }
  return result;
}

int64x2_t sub_1B2061918@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64x2_t result;

  *(_QWORD *)a2 = a1;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a2 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSortModeSet.Iterator()
{
  return &type metadata for ParticleSortModeSet.Iterator;
}

ValueMetadata *type metadata accessor for ParticleSortModeSet()
{
  return &type metadata for ParticleSortModeSet;
}

uint64_t storeEnumTagSinglePayload for ParticleSortMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B2061998 + 4 * byte_1B22B4D4B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B20619CC + 4 * byte_1B22B4D46[v4]))();
}

uint64_t sub_1B20619CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20619D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20619DCLL);
  return result;
}

uint64_t sub_1B20619E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20619F0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B20619F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20619FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSortMode()
{
  return &type metadata for ParticleSortMode;
}

unint64_t sub_1B2061A1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF629B0;
  if (!qword_1EEF629B0)
  {
    sub_1B1A02758(255, &qword_1EEF629B8, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF629B0);
  }
  return result;
}

unint64_t sub_1B2061A80()
{
  unint64_t result;

  result = qword_1EEF629C0;
  if (!qword_1EEF629C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4EB4, &type metadata for ParticleSortModeSet);
    atomic_store(result, (unint64_t *)&qword_1EEF629C0);
  }
  return result;
}

unint64_t sub_1B2061AC8()
{
  unint64_t result;

  result = qword_1EEF629C8;
  if (!qword_1EEF629C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4E84, &type metadata for ParticleSortModeSet);
    atomic_store(result, (unint64_t *)&qword_1EEF629C8);
  }
  return result;
}

unint64_t sub_1B2061B10()
{
  unint64_t result;

  result = qword_1EEF629D0;
  if (!qword_1EEF629D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4EDC, &type metadata for ParticleSortModeSet);
    atomic_store(result, (unint64_t *)&qword_1EEF629D0);
  }
  return result;
}

unint64_t sub_1B2061B58()
{
  unint64_t result;

  result = qword_1EEF629D8;
  if (!qword_1EEF629D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4F14, &type metadata for ParticleSortModeSet);
    atomic_store(result, (unint64_t *)&qword_1EEF629D8);
  }
  return result;
}

unint64_t sub_1B2061BA0()
{
  unint64_t result;

  result = qword_1ED4842B8;
  if (!qword_1ED4842B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B4E5C, &type metadata for ParticleSortMode);
    atomic_store(result, (unint64_t *)&qword_1ED4842B8);
  }
  return result;
}

uint64_t sub_1B2061BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t (*v7)();
  _QWORD v9[4];

  v3 = sub_1B1E8DDEC(v9, 1u);
  if (*(_QWORD *)(v2 + 8))
    *(_QWORD *)(v2 + 16) = a1;
  ((void (*)(_QWORD *, _QWORD))v3)(v9, 0);
  v5 = sub_1B1E8DDEC(v9, 0xDu);
  if (*(_QWORD *)(v4 + 8))
    *(_QWORD *)(v4 + 16) = a1;
  ((void (*)(_QWORD *, _QWORD))v5)(v9, 0);
  v7 = sub_1B1E8DDEC(v9, 5u);
  if (*(_QWORD *)(v6 + 8))
    *(_QWORD *)(v6 + 16) = a1;
  return ((uint64_t (*)(_QWORD *, _QWORD))v7)(v9, 0);
}

uint64_t sub_1B2061C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  id v31;
  uint64_t result;
  _QWORD v33[20];
  _BYTE v34[160];
  uint64_t v35[20];
  _BYTE v36[32];
  uint64_t v37[4];
  _BYTE v38[88];
  uint64_t v39[2];
  float v40;
  char v41;

  v2 = v1;
  swift_retain();
  v4 = (id)sub_1B1E599C0();
  if (!v4)
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B50]), sel_init);
  v5 = v4;
  sub_1B1F9B468();
  swift_release();
  sub_1B206309C(4u, (uint64_t)v36);
  v6 = sub_1B206318C((uint64_t)v36, 1, 0, 2);
  v7 = objc_msgSend(v5, sel_colorAttachments);
  v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 0);

  v10 = nullsub_16(v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  objc_msgSend(v8, sel_setTexture_, v6);
  objc_msgSend(v8, sel_setLoadAction_, 2);
  objc_msgSend(v8, sel_setStoreAction_, 1);
  objc_msgSend(v8, sel_setClearColor_, v10, v12, v14, v16);
  objc_msgSend(v8, sel_setLevel_, 0);

  v17 = *(_QWORD *)(v2 + 24);
  if (v17 != 2)
  {
    sub_1B1BA80C0((uint64_t)v36);
    sub_1B2065790(v37, (uint64_t)v39);
    sub_1B2065790(v39, (uint64_t)&v40);
    if (v41 == 1)
    {
      v18 = -(uint64_t)log2f(v40);
      if ((v17 & 1) != 0)
      {
LABEL_6:
        sub_1B206309C(5u, (uint64_t)v35);
        v19 = sub_1B206318C((uint64_t)v35, 1, 0, 2);
        sub_1B1BA80C0((uint64_t)v35);
        v20 = objc_msgSend(v5, sel_depthAttachment);
        objc_msgSend(v20, sel_setTexture_, v19);
        objc_msgSend(v20, (SEL)&selRef_setReverbBlend_, 1);
        objc_msgSend(v20, sel_setStoreAction_, 0);
        objc_msgSend(v20, sel_setClearDepth_, 0.0);
        objc_msgSend(v20, sel_setLevel_, v18);
        swift_unknownObjectRelease();

LABEL_25:
        sub_1B1F9B834();
        swift_unknownObjectRelease();
        return (uint64_t)v5;
      }
    }
    else
    {
      v18 = 0;
      if ((v17 & 1) != 0)
        goto LABEL_6;
    }
    v21 = objc_msgSend((id)swift_unknownObjectRetain(), sel_supportsMemorylessRenderTargets);
    swift_unknownObjectRelease();
    if ((v17 & 0x100000000000000) != 0 || !v21)
    {
      sub_1B206309C(1u, (uint64_t)v38);
      v22 = 2;
    }
    else
    {
      sub_1B206309C(1u, (uint64_t)v38);
      v22 = 3;
    }
    v23 = sub_1B206318C((uint64_t)v38, 1, 0, v22);
    sub_1B1BA80C0((uint64_t)v38);
    v24 = *(_QWORD *)(v2 + 16);
    swift_retain();
    sub_1B19F66A0(v24 + 624, (uint64_t)v34, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v34, (uint64_t)v35, &qword_1ED4BF400);
    if (sub_1B1B3C438(v35) == 1)
    {
      swift_unknownObjectRetain();
      swift_release();
      v25 = 0;
    }
    else
    {
      sub_1B19F66A0((uint64_t)v34, (uint64_t)v33, &qword_1ED4BF400);
      v26 = v33[1];
      v27 = *(double *)&v33[2];
      v28 = v33[3];
      ObjectType = swift_getObjectType();
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v26 + 16))(v28, a1, ObjectType, v26, v27);
      swift_unknownObjectRetain();
      swift_release();
    }
    if (v23)
    {
      swift_unknownObjectRelease();
      if (v25)
      {
        swift_unknownObjectRelease();
        if (v23 == v25)
          v30 = 1;
        else
          v30 = 2;
        goto LABEL_24;
      }
    }
    else
    {
      if (!v25)
      {
        v30 = 1;
        goto LABEL_24;
      }
      swift_unknownObjectRelease();
    }
    v30 = 2;
LABEL_24:
    v31 = objc_msgSend(v5, sel_depthAttachment);
    objc_msgSend(v31, sel_setTexture_, v23);
    objc_msgSend(v31, sel_setLoadAction_, v30);
    objc_msgSend(v31, (SEL)&selRef_setMaximumDrawableCount_, (v17 >> 40) & 1);
    objc_msgSend(v31, sel_setClearDepth_, 0.0);
    objc_msgSend(v31, sel_setLevel_, v18);

    swift_unknownObjectRelease();
    goto LABEL_25;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B20621D0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v3 + 536) & 1) != 0)
  {
    sub_1B206309C(0, (uint64_t)v13);
    sub_1B1BA80C0((uint64_t)v13);
    v4 = v14;
    sub_1B206309C(0x12u, (uint64_t)v15);
    sub_1B1BA80C0((uint64_t)v15);
    v5 = v16;
    sub_1B206309C(1u, (uint64_t)v17);
    sub_1B1BA80C0((uint64_t)v17);
    v6 = v18;
    sub_1B206309C(0, (uint64_t)v19);
    result = sub_1B1BA80C0((uint64_t)v19);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = v21;
    if (v6 == 260)
      v12 = 260;
    else
      v12 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 592);
    if (v6 == 260)
      v12 = 260;
    else
      v12 = 0;
    sub_1B206309C(0xEu, (uint64_t)v13);
    sub_1B1BA80C0((uint64_t)v13);
    v10 = v14;
    sub_1B206309C(0xFu, (uint64_t)v15);
    sub_1B1BA80C0((uint64_t)v15);
    v8 = v16;
    sub_1B206309C(0x10u, (uint64_t)v17);
    sub_1B1BA80C0((uint64_t)v17);
    v9 = v18;
    sub_1B206309C(0x11u, (uint64_t)v19);
    result = sub_1B1BA80C0((uint64_t)v19);
    v5 = 0;
    v11 = 1;
    v4 = v20;
  }
  *a1 = v4;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v5;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = v6;
  a1[9] = v12;
  a1[10] = v11;
  return result;
}

uint64_t sub_1B2062324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t ObjectType;
  void *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _BYTE v35[160];
  uint64_t v36[20];
  _BYTE v37[160];
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  _BYTE v42[121];
  uint64_t v43[21];
  _BYTE v44[4];
  int v45;
  char v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  v5 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24));
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
    v6 = 1;
  else
    v6 = *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 24));
  swift_retain();
  v7 = (void *)sub_1B1BA16BC(v4, v6);
  swift_release();
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v2 + 16);
  swift_retain();
  sub_1B19F66A0(v8 + 624, (uint64_t)v42, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v42, (uint64_t)v43, &qword_1ED4BF400);
  if (sub_1B1B3C438(v43) == 1)
  {
    swift_release();
  }
  else
  {
    sub_1B19F66A0((uint64_t)v42, (uint64_t)&v38, &qword_1ED4BF400);
    v10 = v39;
    v11 = v40;
    v12 = v41;
    ObjectType = swift_getObjectType();
    v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v10 + 16))(v12, v4, ObjectType, v10, v11);
    swift_release();
    if (v14)
    {
      v15 = objc_msgSend(v14, sel_storageMode) != (id)3;
LABEL_23:
      v17 = 2;
      goto LABEL_24;
    }
  }
  v16 = *(_QWORD *)(v2 + 24);
  if (v16 == 2)
    goto LABEL_28;
  if ((v16 & 0x1000000000000) == 0)
  {
    v15 = 0;
    v17 = 0;
    v14 = 0;
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
  v19 = *(_QWORD *)(v18 + 16);
  swift_retain();
  if (!v19 || (v20 = sub_1B1DC3B00(0x445F45555141504FLL, 0xEC00000048545045), (v21 & 1) == 0))
  {
    swift_release();
    v22 = (unsigned __int16)objc_msgSend(v7, sel_width, RGTextureDescriptor.init()((uint64_t)v44).n128_f64[0]);
    v23 = (unsigned __int16)objc_msgSend(v7, sel_height);
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 592);
    v25 = objc_msgSend((id)swift_unknownObjectRetain(), sel_supportsMemorylessRenderTargets);
    swift_unknownObjectRelease();
    if (v25 && *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_canUseImGUI) != 1)
      v26 = 3;
    else
      v26 = 2;
    LOWORD(v52) = v22;
    WORD1(v52) = v23;
    HIDWORD(v52) = v45;
    v53 = 1;
    v54 = v46;
    v55 = v47;
    v56 = v24;
    v57 = v48;
    v58 = v26;
    v59 = 7;
    v60 = v49;
    v61 = v50;
    v62 = v51;
    swift_retain();
    v14 = (void *)sub_1B2062B30(0x445F45555141504FLL, 0xEC00000048545045, &v52);
    swift_release();
    v15 = 0;
    goto LABEL_23;
  }
  v14 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v20);
  swift_unknownObjectRetain();
  swift_release();
  v15 = 0;
  if (objc_msgSend(v14, sel_storageMode) == (id)3)
    v17 = 2;
  else
    v17 = 1;
LABEL_24:
  v27 = *(_QWORD *)(v2 + 16);
  swift_retain_n();
  sub_1B19F66A0(v27 + 624, (uint64_t)v37, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v37, (uint64_t)&v38, &qword_1ED4BF400);
  if (sub_1B1B3C438(&v38) != 1)
  {
    v28 = v39;
    swift_unknownObjectRetain();
    sub_1B2065808((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1B20657CC);
    swift_release();
    swift_unknownObjectRetain();
    sub_1B2065808((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1B1BA8218);
    v29 = swift_getObjectType();
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 104))(v29, v28);
    swift_unknownObjectRelease();
    v31 = *(_QWORD *)(v2 + 16);
    swift_retain();
    sub_1B19F66A0(v31 + 624, (uint64_t)v35, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v35, (uint64_t)v36, &qword_1ED4BF400);
    if (sub_1B1B3C438(v36) != 1)
    {
      v32 = v36[1];
      sub_1B2065808((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1B20657CC);
      swift_release();
      swift_unknownObjectRetain();
      sub_1B2065808((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1B1BA8218);
      v33 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v32 + 112))(v33, v32);
      swift_unknownObjectRelease();
      v9 = sub_1B1BA147C((uint64_t)v7, v30, (uint64_t)v14, v17, v15, 0);
      swift_release();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      return (uint64_t)v9;
    }
  }
LABEL_28:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void *sub_1B2062908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[10];
  _QWORD v25[10];
  _QWORD v26[10];

  v1 = v0;
  sub_1B206309C(6u, (uint64_t)v24);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 264) + 40);
  v3 = *(_QWORD *)(v2 + 16);
  swift_retain();
  if (!v3)
  {
LABEL_5:
    swift_release();
    sub_1B1BA80C0((uint64_t)v24);
    sub_1B206309C(4u, (uint64_t)v25);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 264) + 40);
    v10 = *(_QWORD *)(v9 + 16);
    swift_retain();
    if (v10)
    {
      v12 = v25[0];
      v11 = v25[1];
      swift_bridgeObjectRetain();
      v13 = sub_1B1DC3B00(v12, v11);
      if ((v14 & 1) != 0)
      {
        v8 = *(void **)(*(_QWORD *)(v9 + 56) + 8 * v13);
        swift_unknownObjectRetain();
        sub_1B1BA80C0((uint64_t)v25);
        swift_release();
        sub_1B1BA80C0((uint64_t)v25);
        return v8;
      }
      sub_1B1BA80C0((uint64_t)v25);
    }
    swift_release();
    sub_1B1BA80C0((uint64_t)v25);
    sub_1B206309C(0, (uint64_t)v26);
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 264) + 40);
    v16 = *(_QWORD *)(v15 + 16);
    swift_retain();
    if (v16)
    {
      v18 = v26[0];
      v17 = v26[1];
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v18, v17);
      if ((v20 & 1) != 0)
      {
        v8 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v19);
        swift_unknownObjectRetain();
        sub_1B1BA80C0((uint64_t)v26);
        swift_release();
        sub_1B1BA80C0((uint64_t)v26);
        return v8;
      }
      sub_1B1BA80C0((uint64_t)v26);
    }
    swift_release();
    sub_1B1BA80C0((uint64_t)v26);
    v21 = *(_QWORD *)(v1 + 16);
    v22 = *(_QWORD *)(v21 + 240);
    swift_retain_n();
    v8 = sub_1B1FAE198(0x42746C7561666544, 0xEF7865546B63616CLL, v22, v21);
    swift_release_n();
    return v8;
  }
  v5 = v24[0];
  v4 = v24[1];
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3B00(v5, v4);
  if ((v7 & 1) == 0)
  {
    sub_1B1BA80C0((uint64_t)v24);
    goto LABEL_5;
  }
  v8 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v6);
  swift_unknownObjectRetain();
  sub_1B1BA80C0((uint64_t)v24);
  swift_release();
  sub_1B1BA80C0((uint64_t)v24);
  return v8;
}

uint64_t sub_1B2062B30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v7;
  uint64_t v8;
  char v9;
  void *v10;
  __int128 v11;
  id v12;
  void *v13;
  void *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v4 = v3;
  v7 = *((_WORD *)a3 + 4);
  v8 = a3[8];
  v9 = *((_BYTE *)a3 + 10) & 1;
  v10 = *(void **)(v3 + 32);
  v17 = *a3;
  v18 = v7;
  v19 = v9;
  v11 = *((_OWORD *)a3 + 2);
  v20 = *((_OWORD *)a3 + 1);
  v21 = v11;
  v22 = *((_OWORD *)a3 + 3);
  v23 = v8;
  v24 = *((_DWORD *)a3 + 18);
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v17, v10);
  v12 = *(id *)(v3 + 32);
  v13 = sub_1B215F688(v12);

  if (v13)
  {
    v14 = (void *)sub_1B2228728();
    objc_msgSend(v13, sel_setLabel_, v14);

    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0x8000000000000000;
    sub_1B1B84668((uint64_t)v13, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v4 + 40) = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B2062CA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12;
  char v13;

  v3 = v1;
  sub_1B2065B60(0, &qword_1EEF629F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2065B1C();
  sub_1B222A180();
  *(_QWORD *)&v12 = *(_QWORD *)v3;
  v13 = 0;
  type metadata accessor for MTLPixelFormat(0);
  sub_1B19E52CC(&qword_1EEF638A0, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&protocol conformance descriptor for MTLPixelFormat);
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_1B2229934();
    LOBYTE(v12) = 2;
    sub_1B2229934();
    v12 = *(_OWORD *)(v3 + 16);
    v13 = 3;
    type metadata accessor for CGSize(0);
    sub_1B19E52CC(&qword_1EEF62A00, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9B9F0]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B2062E84(char *a1)
{
  sub_1B1F90580(*a1);
}

uint64_t sub_1B2062E90()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2062EBC + 4 * byte_1B22B50E0[*v0]))(0x74616D726F66, 0xE600000000000000);
}

uint64_t sub_1B2062EBC()
{
  return 0x615265757161706FLL;
}

unint64_t sub_1B2062EDC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B2062EF8()
{
  return 0x6F69736E656D6964;
}

uint64_t sub_1B2062F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B20655C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2062F38()
{
  sub_1B2065B1C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2062F60()
{
  sub_1B2065B1C();
  return sub_1B222A1E0();
}

double sub_1B2062F88@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];

  sub_1B20658E8(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B2062FC0(_QWORD *a1)
{
  return sub_1B2062CA8(a1);
}

double sub_1B2062FD4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

void sub_1B2062FE8()
{
  qword_1EEFD5830 = (uint64_t)&unk_1E6371ED0;
}

uint64_t sub_1B2062FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t (*v7)();
  _QWORD v9[4];

  v3 = sub_1B1E8DDEC(v9, 0);
  if (*(_QWORD *)(v2 + 8))
    *(_QWORD *)(v2 + 16) = a1;
  ((void (*)(_QWORD *, _QWORD))v3)(v9, 0);
  v5 = sub_1B1E8DDEC(v9, 4u);
  if (*(_QWORD *)(v4 + 8))
    *(_QWORD *)(v4 + 16) = a1;
  ((void (*)(_QWORD *, _QWORD))v5)(v9, 0);
  v7 = sub_1B1E8DDEC(v9, 6u);
  if (*(_QWORD *)(v6 + 8))
    *(_QWORD *)(v6 + 16) = a1;
  return ((uint64_t (*)(_QWORD *, _QWORD))v7)(v9, 0);
}

uint64_t sub_1B206309C@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;

  v4 = *(_QWORD *)(v2 + 56);
  v5 = 0uLL;
  if (*(_QWORD *)(v4 + 16))
  {
    v6 = sub_1B1DC3F80(a1);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v4 + 56) + 80 * v6;
      v9 = *(_QWORD *)v8;
      v17 = *(_OWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 32);
      v11 = *(_BYTE *)(v8 + 40);
      v12 = *(_QWORD *)(v8 + 48);
      v13 = *(_BYTE *)(v8 + 56);
      v14 = *(_QWORD *)(v8 + 64);
      v15 = *(_QWORD *)(v8 + 72);
      result = swift_bridgeObjectRetain();
      v5 = v17;
    }
    else
    {
      v9 = 0;
      result = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v5 = 0uLL;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v12;
  *(_BYTE *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v14;
  *(_QWORD *)(a2 + 72) = v15;
  return result;
}

uint64_t sub_1B206318C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  double (*v23)(uint64_t, uint64_t);
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t result;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[160];
  uint64_t v43[21];
  uint64_t v44;
  __int16 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52[2];
  uint64_t v53;
  __int16 v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char v62;

  v5 = v4;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 264) + 40);
  v13 = *(_QWORD *)(v12 + 16);
  swift_retain();
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 = sub_1B1DC3B00(v10, v11);
    if ((v15 & 1) != 0)
    {
      v16 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v14);
      swift_unknownObjectRetain();
      sub_1B1BA80C0(a1);
LABEL_27:
      swift_release();
      return (uint64_t)v16;
    }
    sub_1B1BA80C0(a1);
  }
  swift_release();
  if ((a2 & 1) == 0)
    return 0;
  v40 = a4;
  v41 = v10;
  v39 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 32);
  v36 = *(unsigned __int8 *)(a1 + 40);
  sub_1B2065588((uint64_t *)(a1 + 48), (uint64_t)v52);
  sub_1B2065588(v52, (uint64_t)&v61);
  v18 = 32;
  if (!v61)
    v18 = 1;
  if (v62)
    v19 = v18;
  else
    v19 = v61;
  v37 = *(_QWORD *)(a1 + 24);
  v38 = v19;
  v20 = *(_QWORD *)(v5 + 16);
  swift_retain();
  sub_1B19F66A0(v20 + 624, (uint64_t)v42, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v42, (uint64_t)v43, &qword_1ED4BF400);
  if (sub_1B1B3C438(v43) != 1)
  {
    v21 = v43[1];
    ObjectType = swift_getObjectType();
    v23 = *(double (**)(uint64_t, uint64_t))(v21 + 72);
    swift_unknownObjectRetain();
    v24 = v23(ObjectType, v21);
    v26 = v25;
    swift_release();
    swift_unknownObjectRelease();
    v27 = 5;
    if ((a3 & 1) != 0)
      v27 = 7;
    if (v36)
    {
      v28 = v24;
      v29 = (uint64_t)(float)(*(float *)&v17 * v28);
      v30 = v26;
      v17 = (uint64_t)(float)(*(float *)&v17 * v30);
    }
    else
    {
      v29 = v17;
    }
    if (v37 < 2)
      sub_1B210B50C(2, v39, v29, v17, 1, v38, 0, 1, (uint64_t)&v44, 1, v40, v27);
    else
      sub_1B210B50C(4, v39, v29, v17, 1, v38, 0, v37, (uint64_t)&v44, 1, v40, v27);
    v53 = v44;
    v54 = v45;
    v55 = v46;
    v56 = v47;
    v57 = v48;
    v58 = v49;
    v59 = v50;
    v60 = v51;
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 264) + 40);
    v32 = *(_QWORD *)(v31 + 16);
    swift_retain();
    if (v32)
    {
      swift_bridgeObjectRetain();
      v33 = sub_1B1DC3B00(v41, v11);
      if ((v34 & 1) != 0)
      {
        v16 = *(void **)(*(_QWORD *)(v31 + 56) + 8 * v33);
        swift_unknownObjectRetain();
        sub_1B1BA80C0(a1);
        if (sub_1B20F2C10(v16))
          goto LABEL_27;
        swift_unknownObjectRelease();
      }
      else
      {
        sub_1B1BA80C0(a1);
      }
    }
    v16 = (void *)sub_1B2062B30(v41, v11, &v53);
    goto LABEL_27;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void *sub_1B2063514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _BOOL8 v51;
  uint64_t v52;
  id v53;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  __int128 v60;
  _QWORD v61[20];
  _BYTE v62[160];
  uint64_t v63[20];
  _BYTE v64[80];
  _QWORD v65[2];
  __int128 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;

  v2 = v1;
  swift_retain();
  v3 = (id)sub_1B1E599C0();
  if (!v3)
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B50]), sel_init);
  v4 = v3;
  sub_1B1F9B468();
  swift_release();
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 16) + 536) & 1) != 0)
  {
    sub_1B206309C(0, (uint64_t)v65);
    v5 = sub_1B206318C((uint64_t)v65, 1, 0, 2);
    v6 = objc_msgSend(v4, sel_colorAttachments);
    v7 = objc_msgSend(v6, sel_objectAtIndexedSubscript_, 0);

    v9 = nullsub_16(v8);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    sub_1B1BA80C0((uint64_t)v65);
    objc_msgSend(v7, sel_setTexture_, v5);
    objc_msgSend(v7, sel_setLoadAction_, 2);
    objc_msgSend(v7, sel_setStoreAction_, 1);
    objc_msgSend(v7, sel_setClearColor_, v9, v11, v13, v15);
    objc_msgSend(v7, sel_setLevel_, 0);
    swift_unknownObjectRelease();

  }
  else
  {
    if (qword_1EEF57520 != -1)
      swift_once();
    v59 = *(_QWORD *)(qword_1EEFD5830 + 16);
    if (v59)
    {
      v56 = qword_1EEFD5830;
      swift_bridgeObjectRetain();
      v16 = 0;
      v57 = v1;
      v58 = v4;
      do
      {
        v37 = *(_QWORD *)(v2 + 56);
        v38 = 0uLL;
        if (*(_QWORD *)(v37 + 16))
        {
          v39 = sub_1B1DC3F80(*(_BYTE *)(v56 + v16 + 32));
          if ((v40 & 1) != 0)
          {
            v41 = *(_QWORD *)(v37 + 56) + 80 * v39;
            v17 = *(_QWORD *)v41;
            v18 = *(_QWORD *)(v41 + 8);
            v60 = *(_OWORD *)(v41 + 16);
            v19 = *(_QWORD *)(v41 + 32);
            v20 = *(_BYTE *)(v41 + 40);
            v21 = *(_QWORD *)(v41 + 48);
            v22 = *(_BYTE *)(v41 + 56);
            v23 = *(_QWORD *)(v41 + 64);
            v24 = *(_QWORD *)(v41 + 72);
            swift_bridgeObjectRetain();
            v38 = v60;
          }
          else
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v38 = 0uLL;
          }
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
        }
        v25 = v16 + 1;
        v65[0] = v17;
        v65[1] = v18;
        v66 = v38;
        v67 = v19;
        v68 = v20;
        v69 = v21;
        v70 = v22;
        v71 = v23;
        v72 = v24;
        v2 = v57;
        v26 = sub_1B206318C((uint64_t)v65, 1, 0, 2);
        v4 = v58;
        v27 = objc_msgSend(v58, sel_colorAttachments);
        v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, v16);
        swift_bridgeObjectRelease();

        v30 = nullsub_16(v29);
        v32 = v31;
        v34 = v33;
        v36 = v35;
        objc_msgSend(v28, sel_setTexture_, v26);
        objc_msgSend(v28, sel_setLoadAction_, 2);
        objc_msgSend(v28, sel_setStoreAction_, 1);
        objc_msgSend(v28, sel_setClearColor_, v30, v32, v34, v36);
        objc_msgSend(v28, sel_setLevel_, 0);
        swift_unknownObjectRelease();

        v16 = v25;
      }
      while (v59 != v25);
      swift_bridgeObjectRelease();
    }
  }
  sub_1B206309C(1u, (uint64_t)v64);
  v42 = (void *)sub_1B206318C((uint64_t)v64, 1, 0, 2);
  sub_1B1BA80C0((uint64_t)v64);
  if (v42)
  {
    v43 = *(_QWORD *)(v2 + 16);
    swift_retain();
    sub_1B19F66A0(v43 + 624, (uint64_t)v62, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v62, (uint64_t)v63, &qword_1ED4BF400);
    if (sub_1B1B3C438(v63) == 1)
    {
      swift_release();
    }
    else
    {
      sub_1B19F66A0((uint64_t)v62, (uint64_t)v61, &qword_1ED4BF400);
      v44 = v61[1];
      v45 = *(double *)&v61[2];
      v46 = v61[3];
      ObjectType = swift_getObjectType();
      v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v44 + 16))(v46, a1, ObjectType, v44, v45);
      swift_unknownObjectRetain();
      swift_release();
      swift_unknownObjectRelease();
      if (v48)
      {
        swift_unknownObjectRelease();
        if (v42 == (void *)v48)
          v49 = 1;
        else
          v49 = 2;
LABEL_24:
        v50 = objc_msgSend(v42, sel_storageMode);
        v51 = v50 != (id)3;
        if (v50 == (id)3)
          v52 = 2;
        else
          v52 = v49;
        v53 = objc_msgSend(v4, sel_depthAttachment);
        swift_unknownObjectRetain();
        objc_msgSend(v53, sel_setTexture_, v42);
        objc_msgSend(v53, sel_setLoadAction_, v52);
        objc_msgSend(v53, sel_setStoreAction_, v51);
        objc_msgSend(v53, sel_setClearDepth_, 0.0);
        objc_msgSend(v53, sel_setLevel_, 0);

        swift_unknownObjectRelease();
        sub_1B1F9B834();
        swift_unknownObjectRelease();
        return v4;
      }
    }
    v49 = 2;
    goto LABEL_24;
  }
  return v4;
}

uint64_t sub_1B2063B14()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RenderGraph()
{
  return objc_opt_self();
}

_QWORD *sub_1B2063B58()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[2] = 0;
  v0[3] = 2;
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = 115;
  v1 = sub_1B1B97D58((uint64_t)&unk_1E6372040);
  sub_1B2065874();
  swift_arrayDestroy();
  v0[7] = v1;
  return v0;
}

uint64_t type metadata accessor for RenderGraphSystemCleanup()
{
  return objc_opt_self();
}

uint64_t sub_1B2063BE0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 272);
    v2[4] = 0;
    v2[5] = 0;
    v2[3] = 2;
  }
  return result;
}

const char *sub_1B2063C08()
{
  return "RenderGraphCleanup";
}

uint64_t sub_1B2063C1C()
{
  return qword_1EEF5DE70 - 1;
}

uint64_t sub_1B2063C2C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned int v15;
  char v16;
  __int128 v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t (*v61)();
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  void *v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[20];
  uint64_t v136[4];
  unsigned __int8 v137;
  _BYTE v138[160];
  uint64_t v139[20];
  _OWORD v140[2];
  uint64_t v141;
  unsigned __int16 *v142;
  int v143;
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  _QWORD v148[12];
  _OWORD v149[2];
  uint64_t v150;
  _QWORD v151[12];
  _QWORD v152[11];
  _BYTE v153[40];
  _QWORD v154[10];
  _QWORD v155[11];
  _BYTE v156[12];
  unsigned int v157;
  char v158;
  _QWORD v159[12];
  _QWORD v160[12];
  uint64_t v161;
  int v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD v172[12];
  unsigned __int16 *v173;
  int v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _OWORD v184[2];
  uint64_t v185;
  _OWORD v186[2];
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  _OWORD v191[2];
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;

  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v2)
    return result;
  v3 = v1;
  v4 = result;
  v5 = 0;
  v113 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  if (*(_BYTE *)(result + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) != 1)
  {
    v17 = *(_OWORD *)(v1 + 32);
    v149[0] = *(_OWORD *)(v1 + 16);
    v149[1] = v17;
    v150 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v4, (uint64_t)v149, 0x200000000, v151);
    sub_1B19F66A0((uint64_t)v151, (uint64_t)&v173, (unint64_t *)&qword_1ED4B7DE0);
    if (!v173)
    {
      LODWORD(v8) = 0;
      v19 = 0;
      goto LABEL_37;
    }
    LODWORD(v8) = 0;
    v18 = *(unsigned __int8 *)(v2 + 322);
    v19 = v18 ^ 1;
    if ((v18 & 1) == 0 && v183 >= 1)
    {
      v123 = v180;
      if (v180)
      {
        v109 = v1;
        v112 = v4;
        v107 = v2;
        v121 = v179;
        v20 = v182;
        v21 = v182[4];
        v22 = *(unsigned __int8 *)(v181 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v142 = v173;
        v143 = v174;
        v144 = v175;
        v145 = v176;
        v146 = v177;
        v147 = v178;
        v115 = (uint64_t)(v182 + 6);
        sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        LODWORD(v8) = 0;
        v23 = 0;
        v117 = v22;
        v119 = v21;
        while (1)
        {
          v24 = (unsigned int *)(v121 + 48 * v23);
          v130 = *v24;
          v133 = v5;
          v126 = v24[1];
          v26 = (uint64_t *)*((_QWORD *)v24 + 2);
          v25 = *((_QWORD *)v24 + 3);
          v27 = *((_QWORD *)v24 + 4);
          v28 = *((_QWORD *)v24 + 5);
          if (v22)
          {
            v29 = *(os_unfair_lock_s **)(v28 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v29);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v21);
          sub_1B19F66A0(v115, (uint64_t)v148, &qword_1ED4B7FB0);
          v30 = v20[4];
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v20[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
          v20[7] = v31;
          v20[9] = 0;
          v20[10] = 0;
          v20[8] = 0;
          swift_release();
          v32 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v26, v25, v27, (uint64_t)v20);
          if (v26)
          {
            v5 = v133;
            v22 = v117;
            if (v27)
            {
              v21 = v119;
              do
              {
                v33 = *v32++;
                LODWORD(v8) = v8 | *(unsigned __int8 *)(v33 + 256);
                --v27;
              }
              while (v27);
              goto LABEL_32;
            }
          }
          else
          {
            v5 = v133;
            v22 = v117;
            if ((_DWORD)v130 != (_DWORD)v126)
            {
              v34 = v126 - v130;
              v35 = &v32[v130];
              v21 = v119;
              do
              {
                v36 = *v35++;
                LODWORD(v8) = v8 | *(unsigned __int8 *)(v36 + 256);
                --v34;
              }
              while (v34);
              goto LABEL_32;
            }
          }
          v21 = v119;
LABEL_32:
          sub_1B1F05D48(v20, &v142, (uint64_t)v148);
          sub_1B1F03804((char *)v28);
          ecs_stack_allocator_pop_snapshot(v21);
          if ((v22 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
          }
          swift_release();
          if (++v23 == v123)
          {
            sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            v19 = 1;
            v2 = v107;
            v3 = v109;
            v4 = v112;
            goto LABEL_37;
          }
        }
      }
      LODWORD(v8) = 0;
      v19 = 1;
    }
LABEL_37:
    v37 = *(_OWORD *)(v3 + 112);
    v140[0] = *(_OWORD *)(v3 + 96);
    v140[1] = v37;
    v141 = *(_QWORD *)(v3 + 128);
    sub_1B1E8FCE4(v4, (uint64_t)v140, 0x200000000, v159);
    sub_1B19F66A0((uint64_t)v159, (uint64_t)v172, (unint64_t *)&qword_1ED4B7DE0);
    v14 = v172[0] != 0;
    if (v172[0])
      sub_1B1A086DC(v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v193 = *(_OWORD *)(v3 + 56);
    v194 = *(_OWORD *)(v3 + 72);
    v195 = *(_QWORD *)(v3 + 88);
    sub_1B1E8FCE4(v4, (uint64_t)&v193, 0x200000000, v160);
    sub_1B19F66A0((uint64_t)v160, (uint64_t)&v161, (unint64_t *)&qword_1ED4B7DE0);
    if (!v161 || (v38 = *(unsigned __int8 *)(v2 + 323), (v38 & 1) != 0))
    {
      sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v15 = 0;
      v16 = 0;
      v39 = v19;
      goto LABEL_42;
    }
    if (v171 <= 0)
    {
      sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v39 = 0;
      v15 = 1;
      v16 = 0;
      if ((v19 & 1) != 0)
      {
        v129 = 1;
        v16 = 0;
        v132 = 1;
        goto LABEL_43;
      }
    }
    else
    {
      v122 = v168;
      if (v168)
      {
        v105 = *(unsigned __int8 *)(v2 + 323);
        v106 = v19;
        v111 = v14;
        v108 = v2;
        v120 = v167;
        v63 = v170;
        v64 = v170[4];
        v65 = *(_BYTE *)(v169 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        *(_QWORD *)&v188 = v161;
        DWORD2(v188) = v162;
        BYTE12(v188) = v163;
        *(_QWORD *)&v189 = v164;
        BYTE8(v189) = v165;
        v190 = v166;
        v114 = (uint64_t)(v170 + 6);
        sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        v66 = 0;
        v67 = 0;
        v116 = v65;
        v118 = v64;
        while (1)
        {
          v68 = v5;
          v69 = (unsigned int *)(v120 + 48 * v67);
          v71 = *v69;
          v70 = v69[1];
          v72 = *((_QWORD *)v69 + 4);
          v125 = (uint64_t *)*((_QWORD *)v69 + 2);
          v128 = *((_QWORD *)v69 + 3);
          v73 = *((_QWORD *)v69 + 5);
          v131 = v67;
          v134 = v68;
          if ((v65 & 1) != 0)
          {
            v74 = *(os_unfair_lock_s **)(v73 + 376);
            swift_retain();
            os_unfair_lock_lock(v74);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v73 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v64);
          sub_1B19F66A0(v114, (uint64_t)v191, &qword_1ED4B7FB0);
          v75 = v63[4];
          v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v63[6] = ecs_stack_allocator_allocate(v75, 48 * v76, 8);
          v63[7] = v76;
          v63[9] = 0;
          v63[10] = 0;
          v63[8] = 0;
          swift_release();
          v77 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v125, v128, v72, (uint64_t)v63);
          if (v125)
          {
            v79 = v131;
            v78 = v134;
            if (v72)
            {
              v80 = 0;
              v64 = v118;
              do
              {
                v81 = *(_QWORD *)(v77 + 8 * v80);
                if ((*(_WORD *)(v81 + 370) & 4) != 0)
                  v66 = 1;
                v82 = *(_QWORD *)(v81 + 304);
                v83 = *(_QWORD *)(v82 + 16);
                if (v83)
                {
                  v84 = (_BYTE *)(v82 + 32);
                  while (v84[24] != 3 || *v84 != 2)
                  {
                    v84 += 40;
                    if (!--v83)
                      goto LABEL_64;
                  }
                  v66 = 1;
                }
LABEL_64:
                LODWORD(v8) = v8 | *(unsigned __int8 *)(v81 + 256);
                ++v80;
              }
              while (v80 != v72);
              goto LABEL_77;
            }
          }
          else
          {
            v79 = v131;
            v78 = v134;
            if ((_DWORD)v71 != (_DWORD)v70)
            {
              v64 = v118;
              do
              {
                v86 = *(_QWORD *)(v77 + 8 * v71);
                if ((*(_WORD *)(v86 + 370) & 4) != 0)
                  v66 = 1;
                v87 = *(_QWORD *)(v86 + 304);
                v88 = *(_QWORD *)(v87 + 16);
                if (v88)
                {
                  v89 = (_BYTE *)(v87 + 32);
                  while (v89[24] != 3 || *v89 != 2)
                  {
                    v89 += 40;
                    if (!--v88)
                      goto LABEL_81;
                  }
                  v66 = 1;
                }
LABEL_81:
                ++v71;
                LODWORD(v8) = v8 | *(unsigned __int8 *)(v86 + 256);
              }
              while (v71 != v70);
              goto LABEL_77;
            }
          }
          v64 = v118;
LABEL_77:
          v5 = v78;
          sub_1B1F05D48(v63, (unsigned __int16 **)&v188, (uint64_t)v191);
          sub_1B1F03804((char *)v73);
          ecs_stack_allocator_pop_snapshot(v64);
          v65 = v116;
          if ((v116 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v73 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v73 + 376));
          }
          swift_release();
          v67 = v79 + 1;
          if (v67 == v122)
          {
            sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            v16 = v66 & 1;
            v2 = v108;
            v14 = v111;
            v38 = v105;
            LOBYTE(v19) = v106;
            goto LABEL_121;
          }
        }
      }
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v16 = 0;
LABEL_121:
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      if ((v19 & 1) != 0)
      {
        v39 = 1;
        if (!v38)
        {
          v132 = 1;
          v15 = 1;
          v129 = 1;
          goto LABEL_43;
        }
        v15 = 0;
      }
      else
      {
        v39 = 0;
        v15 = v38 ^ 1;
      }
    }
LABEL_42:
    v129 = v15;
    v15 = v39;
    v132 = 0;
    goto LABEL_43;
  }
  v193 = *(_OWORD *)(v1 + 136);
  v194 = *(_OWORD *)(v1 + 152);
  v195 = *(_QWORD *)(v1 + 168);
  swift_retain();
  sub_1B1E8FCE4(v4, (uint64_t)&v193, 0x200000000, v140);
  sub_1B19F66A0((uint64_t)v140, (uint64_t)&v173, (unint64_t *)&qword_1ED4B7DE0);
  v6 = v173;
  if (v173)
    sub_1B1A086DC(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v7 = *(_OWORD *)(v1 + 192);
  v191[0] = *(_OWORD *)(v1 + 176);
  v191[1] = v7;
  v192 = *(_QWORD *)(v1 + 208);
  sub_1B1E8FCE4(v4, (uint64_t)v191, 0x200000000, &v142);
  sub_1B19F66A0((uint64_t)&v142, (uint64_t)v172, (unint64_t *)&qword_1ED4B7DE0);
  v8 = v172[0];
  if (v172[0])
    sub_1B1A086DC(&v142, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v188 = *(_OWORD *)(v1 + 216);
  v189 = *(_OWORD *)(v1 + 232);
  v190 = *(_QWORD *)(v1 + 248);
  sub_1B1E8FCE4(v4, (uint64_t)&v188, 0x200000000, v148);
  sub_1B19F66A0((uint64_t)v148, (uint64_t)&v161, (unint64_t *)&qword_1ED4B7DE0);
  v9 = v161;
  if (v161)
    sub_1B1A086DC(v148, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v10 = *(_OWORD *)(v1 + 272);
  v186[0] = *(_OWORD *)(v1 + 256);
  v186[1] = v10;
  v187 = *(_QWORD *)(v1 + 288);
  sub_1B1E8FCE4(v4, (uint64_t)v186, 0x200000000, v149);
  sub_1B19F66A0((uint64_t)v149, (uint64_t)v160, (unint64_t *)&qword_1ED4B7DE0);
  v11 = v160[0];
  if (v160[0])
    sub_1B1A086DC(v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v185 = *(_QWORD *)(v1 + 328);
  v12 = *(_OWORD *)(v1 + 312);
  v184[0] = *(_OWORD *)(v1 + 296);
  v184[1] = v12;
  sub_1B1E8FCE4(v4, (uint64_t)v184, 0x200000000, v151);
  sub_1B19F66A0((uint64_t)v151, (uint64_t)v159, (unint64_t *)&qword_1ED4B7DE0);
  v13 = v159[0];
  if (v159[0])
    sub_1B1A086DC(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v14 = 0;
  LOBYTE(v8) = (v8 | (unint64_t)v6 | v9 | v11 | v13) != 0;
  v15 = 1;
  v129 = 1;
  v16 = 1;
  v132 = 1;
LABEL_43:
  v40 = v2 + 624;
  sub_1B19F66A0(v2 + 624, (uint64_t)v138, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v138, (uint64_t)v139, &qword_1ED4BF400);
  if (sub_1B1B3C438(v139) != 1)
  {
    v127 = v15;
    sub_1B19F66A0((uint64_t)v138, (uint64_t)v136, &qword_1ED4BF400);
    v41 = v136[1];
    v42 = *(double *)&v136[2];
    v43 = v136[3];
    ObjectType = swift_getObjectType();
    v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v41 + 16))(v43, v113, ObjectType, v41, v42);
    if (v45)
    {
      v46 = v45;
      v110 = v14;
      v124 = v16;
      v47 = v2;
      v48 = *(_QWORD *)(v2 + 272);
      sub_1B206309C(1u, (uint64_t)v152);
      v49 = *(_QWORD *)(*(_QWORD *)(v48 + 16) + 264);
      v50 = v152[0];
      v51 = v152[1];
      swift_unknownObjectRetain_n();
      swift_retain();
      swift_retain();
      sub_1B1AE7408((uint64_t)v152);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v135[0] = *(_QWORD *)(v49 + 40);
      *(_QWORD *)(v49 + 40) = 0x8000000000000000;
      sub_1B1B84668(v46, v50, v51, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v49 + 40) = v135[0];
      swift_bridgeObjectRelease();
      sub_1B1BA80C0((uint64_t)v152);
      sub_1B1BA80C0((uint64_t)v152);
      v2 = v47;
      v16 = v124;
      v14 = v110;
      swift_release();
      swift_unknownObjectRelease_n();
      swift_release();
    }
    v15 = v127;
  }
  sub_1B19F66A0(v40, (uint64_t)v135, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v135, (uint64_t)v136, &qword_1ED4BF400);
  if (sub_1B1B3C438(v136) == 1)
  {
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v53 = v137;
  v54 = swift_retain();
  v55 = sub_1B1F215A8(v54);
  v57 = v56;
  swift_release();
  if ((v57 & 1) != 0
    || (v16 |= sub_1B1FD568C((uint64_t)&type metadata for CameraDepthOfField, (uint64_t)&off_1E6390E50, v55),
        sub_1B1D19650(v55, (uint64_t)v153),
        sub_1B19F66A0((uint64_t)v153, (uint64_t)v156, (unint64_t *)&unk_1ED4B8AC8),
        (v158 & 1) != 0))
  {
    v58 = 0x3F80000000000000;
  }
  else
  {
    v59 = v157;
    swift_retain();
    v61 = sub_1B1E8DDEC(v155, 4u);
    if (*(_QWORD *)(v60 + 8))
    {
      v62 = v59;
      *(_QWORD *)(v60 + 32) = v59;
      *(_BYTE *)(v60 + 40) = 1;
      ((void (*)(_QWORD *, _QWORD))v61)(v155, 0);
      swift_release();
    }
    else
    {
      ((void (*)(_QWORD *, _QWORD))v61)(v155, 0);
      swift_release();
      v62 = v59;
    }
    v58 = v62 << 32;
  }
  v91 = *(_QWORD **)(v2 + 272);
  v92 = 0x100000000;
  if (!v132)
    v92 = 0;
  v93 = 0x10000000000;
  if (!v14)
    v93 = 0;
  v94 = 0x1000000000000;
  if (!v53)
    v94 = 0;
  v95 = 256;
  if (!v129)
    v95 = 0;
  v96 = 0x100000000000000;
  if (!v129)
    v96 = 0;
  v97 = v95 | v15 | v92 | v93 | v96 | v94;
  v98 = 0x10000;
  if ((v8 & 1) == 0)
    v98 = 0;
  v91[3] = v97;
  v91[4] = v58 | v98 | v16 & 1;
  v91[5] = 0x3F8000003F800000;
  if ((v15 & (v129 | v132)) == 1)
    return swift_release();
  sub_1B206309C(2u, (uint64_t)v154);
  v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91[2] + 264) + 40) + 16);
  swift_retain();
  swift_retain();
  if (!v99)
  {
LABEL_113:
    swift_release();
    sub_1B1BA80C0((uint64_t)v154);
    swift_release();
    return swift_release();
  }
  v100 = v154[1];
  v101 = v154[0];
  swift_bridgeObjectRetain();
  sub_1B1DC3B00(v101, v100);
  if ((v102 & 1) == 0)
  {
    sub_1B1BA80C0((uint64_t)v154);
    goto LABEL_113;
  }
  swift_unknownObjectRetain();
  sub_1B1BA80C0((uint64_t)v154);
  swift_release();
  sub_1B1BA80C0((uint64_t)v154);
  swift_release();
  v103 = swift_unknownObjectRetain();
  v104 = sub_1B1BA147C(v103, 2, 0, 2, 0, 0);
  swift_unknownObjectRelease();
  sub_1B1BA77BC(0x656C436874706544, 0xEA00000000007261, v104);
  if (sub_1B1BA7B7C(0))
  {
    swift_unknownObjectRetain();
    sub_1B1F9AEC4((uint64_t)v155);
    sub_1B1BA2FBC();

    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_release();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2064C24()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B2064C78()
{
  sub_1B2064C24();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RenderGraphSystem()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderGraph.RenderTargetDesc(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderGraph.RenderTargetDesc(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderGraph.RenderTargetDesc()
{
  return &type metadata for RenderGraph.RenderTargetDesc;
}

uint64_t getEnumTagSinglePayload for RenderGraph.RenderTarget(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderGraph.RenderTarget(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1B2064F84 + 4 * byte_1B22B50E9[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1B2064FB8 + 4 * byte_1B22B50E4[v4]))();
}

uint64_t sub_1B2064FB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2064FC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2064FC8);
  return result;
}

uint64_t sub_1B2064FD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2064FDCLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1B2064FE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2064FE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RenderGraph.RenderTarget()
{
  return &type metadata for RenderGraph.RenderTarget;
}

uint64_t getEnumTagSinglePayload for RenderGraph.Features(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderGraph.Features(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderGraph.Features()
{
  return &type metadata for RenderGraph.Features;
}

unint64_t sub_1B20650B0()
{
  unint64_t result;

  result = qword_1ED4BF450;
  if (!qword_1ED4BF450)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5218, &type metadata for RenderGraph.RenderTarget);
    atomic_store(result, (unint64_t *)&qword_1ED4BF450);
  }
  return result;
}

uint64_t sub_1B20650F4()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[25];
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[25];
  _OWORD v17[2];
  uint64_t v18;
  _BYTE v19[40];
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v74 = qword_1ED4D09F8;
  v75 = 0;
  v76 = 2;
  v77 = 0;
  v78 = 2;
  v79 = 0;
  swift_retain();
  sub_1B1E3C1C8(1, (uint64_t)v13);
  swift_release();
  sub_1B1B7AA28();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 56) = &type metadata for DrawCallLayer;
  *(_QWORD *)(inited + 64) = &off_1E6379C28;
  *(_BYTE *)(inited + 32) = 0;
  sub_1B1E6892C(v14);
  swift_setDeallocating();
  sub_1B1A12ED4();
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v13);
  v2 = v14[1];
  *(_OWORD *)(v0 + 16) = v14[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v15;
  v68 = qword_1ED4D09F8;
  v69 = 0;
  v70 = 2;
  v71 = 0;
  v72 = 2;
  v73 = 0;
  swift_retain();
  sub_1B1E3C1C8(1, (uint64_t)v16);
  swift_release();
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v3 + 56) = &type metadata for DrawCallLayer;
  *(_QWORD *)(v3 + 64) = &off_1E6379C28;
  *(_BYTE *)(v3 + 32) = 1;
  sub_1B1E6892C(v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v16);
  v4 = v17[1];
  *(_OWORD *)(v0 + 56) = v17[0];
  *(_OWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v0 + 88) = v18;
  v62 = qword_1ED4D09F8;
  v63 = 0;
  v64 = 2;
  v65 = 0;
  v66 = 2;
  v67 = 0;
  swift_retain();
  sub_1B1E3C1C8(1, (uint64_t)v19);
  swift_release();
  v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v5 + 56) = &type metadata for DrawCallLayer;
  *(_QWORD *)(v5 + 64) = &off_1E6379C28;
  *(_BYTE *)(v5 + 32) = 2;
  sub_1B1E6892C(v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  v6 = v20[1];
  *(_OWORD *)(v0 + 96) = v20[0];
  *(_OWORD *)(v0 + 112) = v6;
  *(_QWORD *)(v0 + 128) = v21;
  v56 = qword_1ED4D09F8;
  v57 = 0;
  v58 = 2;
  v59 = 0;
  v60 = 2;
  v61 = 0;
  swift_retain();
  sub_1B1B45E74((uint64_t)v22);
  swift_release();
  v7 = v22[1];
  *(_OWORD *)(v0 + 136) = v22[0];
  *(_OWORD *)(v0 + 152) = v7;
  *(_QWORD *)(v0 + 168) = v23;
  v50 = qword_1ED4D09F8;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  v54 = 2;
  v55 = 0;
  swift_retain();
  sub_1B1B46090((uint64_t)v24);
  swift_release();
  v8 = v24[1];
  *(_OWORD *)(v0 + 176) = v24[0];
  *(_OWORD *)(v0 + 192) = v8;
  *(_QWORD *)(v0 + 208) = v25;
  v44 = qword_1ED4D09F8;
  v45 = 0;
  v46 = 2;
  v47 = 0;
  v48 = 2;
  v49 = 0;
  swift_retain();
  sub_1B1B462AC((uint64_t)v26);
  swift_release();
  v9 = v26[1];
  *(_OWORD *)(v0 + 216) = v26[0];
  *(_OWORD *)(v0 + 232) = v9;
  *(_QWORD *)(v0 + 248) = v27;
  v38 = qword_1ED4D09F8;
  v39 = 0;
  v40 = 2;
  v41 = 0;
  v42 = 2;
  v43 = 0;
  swift_retain();
  sub_1B19EE164((uint64_t)v28);
  swift_release();
  v10 = v28[1];
  *(_OWORD *)(v0 + 256) = v28[0];
  *(_OWORD *)(v0 + 272) = v10;
  *(_QWORD *)(v0 + 288) = v29;
  v32 = qword_1ED4D09F8;
  v33 = 0;
  v34 = 2;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  swift_retain();
  sub_1B1B6C91C((uint64_t)v30);
  swift_release();
  v11 = v30[1];
  *(_OWORD *)(v0 + 296) = v30[0];
  *(_OWORD *)(v0 + 312) = v11;
  *(_QWORD *)(v0 + 328) = v31;
  return v0;
}

uint64_t sub_1B2065530()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20650F4();
  return v0;
}

const char *sub_1B2065564()
{
  return "RenderGraph";
}

uint64_t sub_1B2065578()
{
  return qword_1EEF5DE38 + 2;
}

uint64_t sub_1B2065588(uint64_t *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for RenderPass.Dimension(a2, a1);
  return a2;
}

uint64_t sub_1B20655C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615265757161706FLL && a2 == 0xEB000000006F6974 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B232CB20 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69736E656D6964 && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B2065790(uint64_t *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for RenderPass.Dimension(a2, a1);
  return a2;
}

uint64_t sub_1B20657CC(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1B2065808(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 152);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    v4);
  return a1;
}

void sub_1B2065874()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BF458)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BF458);
  }
}

ValueMetadata *type metadata accessor for RenderSettings()
{
  return &type metadata for RenderSettings;
}

uint64_t sub_1B20658E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];
  char v20;

  sub_1B2065B60(0, &qword_1EEF629E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v19 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2065B1C();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  type metadata accessor for MTLPixelFormat(0);
  v20 = 0;
  sub_1B19E52CC(&qword_1EEF63870, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&protocol conformance descriptor for MTLPixelFormat);
  sub_1B2229814();
  v11 = v19[0];
  LOBYTE(v19[0]) = 1;
  sub_1B22297F0();
  v13 = v12;
  LOBYTE(v19[0]) = 2;
  sub_1B22297F0();
  v15 = v14;
  type metadata accessor for CGSize(0);
  v20 = 3;
  sub_1B19E52CC(&qword_1EEF629F0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA08]);
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v16 = v19[0];
  v17 = v19[1];
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v15;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  return result;
}

unint64_t sub_1B2065B1C()
{
  unint64_t result;

  result = qword_1EEF629E8;
  if (!qword_1EEF629E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B53D4, &type metadata for RenderSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF629E8);
  }
  return result;
}

void sub_1B2065B60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B2065B1C();
    v7 = a3(a1, &type metadata for RenderSettings.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for RenderSettings.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B2065C08 + 4 * byte_1B22B50F3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B2065C3C + 4 * byte_1B22B50EE[v4]))();
}

uint64_t sub_1B2065C3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2065C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2065C4CLL);
  return result;
}

uint64_t sub_1B2065C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2065C60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B2065C64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2065C6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RenderSettings.CodingKeys()
{
  return &type metadata for RenderSettings.CodingKeys;
}

unint64_t sub_1B2065C8C()
{
  unint64_t result;

  result = qword_1EEF62A08;
  if (!qword_1EEF62A08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B53AC, &type metadata for RenderSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62A08);
  }
  return result;
}

unint64_t sub_1B2065CD4()
{
  unint64_t result;

  result = qword_1EEF62A10;
  if (!qword_1EEF62A10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B531C, &type metadata for RenderSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62A10);
  }
  return result;
}

unint64_t sub_1B2065D1C()
{
  unint64_t result;

  result = qword_1EEF62A18;
  if (!qword_1EEF62A18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5344, &type metadata for RenderSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62A18);
  }
  return result;
}

uint64_t *sub_1B2065D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  int v30;
  int v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36[8];
  uint64_t v37[12];
  uint64_t v38[12];
  uint64_t v39[8];
  _QWORD v40[7];
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[12];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[7];
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;

  v2 = v1;
  v4 = *(_OWORD *)(v1 + 32);
  v63[0] = *(_OWORD *)(v1 + 16);
  v63[1] = v4;
  v64 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v63, 0x200000000, v36);
  sub_1B19F66A0((uint64_t)v36, (uint64_t)v56, (unint64_t *)&qword_1ED4B7DE0);
  if (v56[0])
  {
    if (v58 >= 1)
    {
      v5 = v57;
      if (v57)
      {
        v6 = v56[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 48 * v5;
        v8 = (uint64_t *)(v6 + 40);
        do
        {
          v13 = *v8;
          v14 = *(os_unfair_lock_s **)(*v8 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          v15 = *(_DWORD *)(v13 + 24);
          swift_retain();
          *(_QWORD *)&v52 = 0;
          v50 = 0u;
          v51 = 0u;
          *(_QWORD *)&v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v16 = sub_1B1DA4ED8(v15, (uint64_t)&type metadata for EffectiveHiddenState, (uint64_t)&off_1E639B300, 0, 0, (uint64_t)&v50, (uint64_t)&v44);
          swift_release();
          sub_1B1A12E98((uint64_t)&v44);
          sub_1B1A12E98((uint64_t)&v50);
          if (sub_1B1A10B20(v16))
          {
            sub_1B1A10BB0(v16);
          }
          else
          {
            v9 = *(_QWORD *)(v13 + 232);
            v10 = *(_QWORD *)(v13 + 240);
            v11 = *(unsigned __int8 *)(v13 + 120);
            v12 = *(unsigned int *)(v13 + 28);
            LOBYTE(v50) = *(_BYTE *)(v13 + 32);
            sub_1B1FD8C68(v9, v10, v16, v11, v12 | ((unint64_t)v50 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          swift_release();
          v8 += 6;
          v7 -= 48;
        }
        while (v7);
        sub_1B19ED748(v36);
      }
    }
    sub_1B19ED748(v36);
  }
  v17 = *(_OWORD *)(v2 + 72);
  v61[0] = *(_OWORD *)(v2 + 56);
  v61[1] = v17;
  v62 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v61, 0x200000000, v37);
  sub_1B19F66A0((uint64_t)v37, (uint64_t)&v44, (unint64_t *)&qword_1ED4B7DE0);
  if ((_QWORD)v44)
  {
    v52 = v46;
    v53 = v47;
    v54 = v48;
    v55 = v49;
    v50 = v44;
    v51 = v45;
    sub_1B1BEB5D8(0);
    sub_1B19ED748(v37);
  }
  v18 = *(_OWORD *)(v2 + 112);
  v59[0] = *(_OWORD *)(v2 + 96);
  v59[1] = v18;
  v60 = *(_QWORD *)(v2 + 128);
  sub_1B1E8FCE4(a1, (uint64_t)v59, 0x200000000, v38);
  sub_1B19F66A0((uint64_t)v38, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v43[0])
  {
    v43[8] = v43[2];
    v43[9] = v43[3];
    v43[10] = v43[4];
    v43[11] = v43[5];
    v43[6] = v43[0];
    v43[7] = v43[1];
    sub_1B1BEB5D8(1);
    sub_1B19ED748(v38);
  }
  sub_1B1E8FCE4(a1, (uint64_t)v59, 0x200000000, v39);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1ED4B7DE0);
  if (v40[0])
  {
    if (v42 >= 1)
    {
      v20 = v41;
      if (v41)
      {
        v21 = v40[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v22 = 48 * v20;
        v23 = (uint64_t *)(v21 + 40);
        do
        {
          v28 = *v23;
          v29 = *(os_unfair_lock_s **)(*v23 + 376);
          swift_retain();
          os_unfair_lock_lock(v29);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
          v30 = *(_DWORD *)(v28 + 24);
          swift_retain();
          v35 = 0;
          memset(v34, 0, sizeof(v34));
          v33 = 0;
          memset(v32, 0, sizeof(v32));
          v31 = sub_1B1DA4ED8(v30, 0, 0, (uint64_t)&type metadata for EffectiveHiddenState, (uint64_t)&off_1E639B300, (uint64_t)v34, (uint64_t)v32);
          swift_release();
          sub_1B1A12E98((uint64_t)v32);
          sub_1B1A12E98((uint64_t)v34);
          if (sub_1B1A10B20(v31))
          {
            sub_1B1A10BB0(v31);
          }
          else
          {
            v24 = *(_QWORD *)(v28 + 232);
            v25 = *(_QWORD *)(v28 + 240);
            v26 = *(unsigned __int8 *)(v28 + 120);
            v27 = *(unsigned int *)(v28 + 28);
            LOBYTE(v34[0]) = *(_BYTE *)(v28 + 32);
            sub_1B1FD8C68(v24, v25, v31, v26, v27 | ((unint64_t)LOBYTE(v34[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
          swift_release();
          v23 += 6;
          v22 -= 48;
        }
        while (v22);
        sub_1B19ED748(v39);
      }
    }
    return sub_1B19ED748(v39);
  }
  return result;
}

uint64_t sub_1B2066218@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t result;
  _QWORD v7[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v7, v7[3]);
  v5 = sub_1B2229D3C();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v5 & 1;
  return result;
}

uint64_t sub_1B20662D8(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229DC0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B2066368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B2066430(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  char **v59;
  char *v60;
  char **v61;
  char v62;
  _QWORD *v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char **v74;
  char *v75;
  char v76;
  _QWORD *v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char *v103;
  char *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  double v109;
  BOOL v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  os_unfair_lock_s *v117;
  _QWORD *v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char **v136;
  char v137;
  char **v138;
  char *v139;
  char v140;
  _QWORD *v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  char v153;
  char **v154;
  char *v155;
  char **v156;
  char v157;
  _QWORD *v158;
  _DWORD *v159;
  int v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  char *v188;
  char *v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  _QWORD *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  int v202;
  _QWORD *v203;
  char **v204;
  char **v205;
  uint64_t v206;
  char **v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  signed int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  signed int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  _DWORD v235[6];
  uint64_t v236[8];
  _OWORD v237[2];
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  _OWORD v247[2];
  uint64_t v248;
  _BYTE v249[40];
  _OWORD v250[2];
  uint64_t v251;

  v2 = *(_OWORD *)(v1 + 32);
  v250[0] = *(_OWORD *)(v1 + 16);
  v250[1] = v2;
  v251 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v250, 0x200000000, v236);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v236, (uint64_t)v237, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v237[0])
  {
    v244 = v237[0];
    v245 = v237[1];
    v246 = v238;
    if (v243 >= 1)
    {
      v228 = v240;
      if (v240)
      {
        v226 = v239;
        v4 = v242;
        v232 = *(unsigned __int8 *)(v241 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v225 = (uint64_t)(v242 + 6);
        v233 = v242[4];
        v234 = (uint64_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v224 = v242 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v5 = 0;
        v6 = 0;
        v227 = v4;
        while (1)
        {
          v7 = (unsigned int *)(v226 + 48 * v5);
          v9 = *v7;
          v8 = v7[1];
          v11 = (uint64_t *)*((_QWORD *)v7 + 2);
          v10 = *((_QWORD *)v7 + 3);
          v13 = *((_QWORD *)v7 + 4);
          v12 = *((_QWORD *)v7 + 5);
          v230 = v6;
          v231 = v5;
          if (v232)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v233);
          sub_1B19F66A0(v225, (uint64_t)v249, &qword_1ED4B7FB0);
          v15 = v4[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v4[7] = v16;
          v224[1] = 0;
          v224[2] = 0;
          *v224 = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for SetActive, (uint64_t)&off_1E63C4CB0, v11, v10, v13, (uint64_t)v4);
          if (v11)
          {
            if (v13)
            {
              v18 = 0;
              v19 = &qword_1ED4B8000;
              while (2)
              {
                if (*(unsigned __int8 *)(v12 + 120) == *(unsigned __int8 *)(v17 + v18))
                  goto LABEL_17;
                v21 = v11[v18];
                v22 = *(_BYTE *)(v12 + 184);
                v23 = swift_retain();
                if ((v22 & 1) != 0)
                  goto LABEL_193;
                v24 = *(int *)(*(_QWORD *)(v12 + 168) + 4 * v21);
                v25 = *(_DWORD *)(*(_QWORD *)(v23 + v19[192]) + 12 * (int)v24 + 8);
                swift_release();
                v27 = (_DWORD)v24 == -1 && v25 == 0;
                if (v27
                  || (v24 & 0x80000000) != 0
                  || v234[1] <= v24
                  || ((v28 = *v234 + 12 * (int)v24, v25 != -1) ? (v29 = *(_DWORD *)(v28 + 8) == v25) : (v29 = 1), !v29))
                {
LABEL_17:
                  if (++v18 == v13)
                    goto LABEL_13;
                  continue;
                }
                break;
              }
              v30 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v24) + 32);
              if (*(unsigned __int8 *)(v17 + v18) == *(unsigned __int8 *)(v30 + 120))
                goto LABEL_79;
              v222 = *(unsigned __int8 *)(v17 + v18);
              if ((uint64_t)(*(_QWORD *)(v30 + 240) - *(_QWORD *)(v30 + 232)) >= 2)
              {
                v216 = *(__int16 *)(v28 + 4);
                v31 = *(unsigned int *)(v30 + 28);
                v214 = *(_DWORD *)(v30 + 24);
                v32 = *(_BYTE *)(v30 + 32);
                swift_retain();
                LOBYTE(v235[0]) = v32;
                v33 = v31 | ((unint64_t)v32 << 32);
                v19 = &qword_1ED4B8000;
                sub_1B1FD8FC0(v216, v214, v222, v33, 0, 0, 0, 0);
                goto LABEL_78;
              }
              v34 = *(_QWORD *)(v30 + 16);
              v217 = *(_DWORD *)(v30 + 188);
              v208 = *(int *)(v30 + 24);
              v211 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v24) + 32);
              v35 = *(os_unfair_lock_s **)(v34 + 128);
              swift_retain();
              swift_retain();
              os_unfair_lock_lock(v35);
              v36 = *(_QWORD **)(v34 + 96);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v34 + 96) = v36;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v36 = sub_1B1FFECDC(v36);
                *(_QWORD *)(v34 + 96) = v36;
              }
              v38 = v36 + 4;
              v39 = (uint64_t)&v36[5 * (int)v208 + 4];
              v40 = v217;
              if (v222)
              {
                v41 = &v38[5 * (int)v208];
                v44 = v41[1];
                v42 = v41 + 1;
                v43 = v44;
                v45 = v44 & 0x7FFFFFFFFFFFFFFFLL;
                if ((v44 & 0x7FFFFFFFFFFFFFFFLL) == 0)
                {
                  v49 = 0;
                  v48 = v34;
                  goto LABEL_66;
                }
                v46 = *(_QWORD *)v39;
                v47 = v45 == 1 || *(_DWORD *)(*(_QWORD *)v39 + 32) == v217;
                v48 = v34;
                if (!v47)
                {
                  if (*(_DWORD *)(v46 + 36) == v217)
                  {
                    v49 = 1;
LABEL_66:
                    v70 = v43 - 1;
                    *v42 = v43 - 1;
                    if (v49 != v43 - 1)
                    {
                      v197 = v49;
                      v201 = v38;
                      v71 = *(_QWORD *)v39;
                      v72 = *(_QWORD *)v39 + 32;
                      v194 = *(_DWORD *)(v72 + 4 * v49);
                      v192 = *(_DWORD *)(v72 + 4 * v70);
                      v205 = (char **)v39;
                      v73 = swift_isUniquelyReferenced_nonNull_native();
                      v74 = v205;
                      *v205 = (char *)v71;
                      if ((v73 & 1) == 0)
                      {
                        v103 = sub_1B1FFED2C(v71);
                        v74 = v205;
                        v71 = (uint64_t)v103;
                        *v205 = v103;
                      }
                      *(_DWORD *)(v71 + 4 * v197 + 32) = v192;
                      v75 = *v74;
                      v76 = swift_isUniquelyReferenced_nonNull_native();
                      *v205 = v75;
                      if ((v76 & 1) == 0)
                      {
                        v75 = sub_1B1FFED2C((uint64_t)v75);
                        *v205 = v75;
                      }
                      *(_DWORD *)&v75[4 * v70 + 32] = v194;
                      v48 = v34;
                      v40 = v217;
                      v38 = v201;
                    }
                    v77 = &v38[5 * (int)v208];
                    v79 = *((_DWORD *)v77 + 9);
                    v78 = (_DWORD *)v77 + 9;
                    if (v79 == v40)
                    {
                      *v78 = -1;
                      LODWORD(v38[5 * (int)v208 + 4]) = v40;
                    }
                    v19 = &qword_1ED4B8000;
LABEL_75:
                    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 80) + 8 * v208 + 32) + 200) & 1) != 0)
                      *(_BYTE *)(v48 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v48 + 128));
                    swift_release();
                    *(_BYTE *)(v211 + 120) = v222;
LABEL_78:
                    swift_release();
LABEL_79:
                    if (v234[1] > v24)
                    {
                      v80 = *v234;
                      if (v25 == -1 || *(_DWORD *)(v80 + 12 * (int)v24 + 8) == v25)
                      {
                        v81 = (int *)(v80 + 12 * (int)v24);
                        v82 = *((__int16 *)v81 + 2);
                        v83 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *v81 + 32);
                        thread_worker_index(v26);
                        v84 = *(_QWORD *)(v83 + 192);
                        if (v84)
                        {
                          v85 = *(_QWORD *)(v83 + 208);
                          v86 = 8 * (v82 >> 6);
                          *(_QWORD *)(v84 + v86) |= 1 << v82;
                          *(_QWORD *)(v85 + v86) &= ~(1 << v82);
                        }
                        if (*(_BYTE *)(*(_QWORD *)(v83 + 40) + 213) == 1)
                        {
                          v87 = *(_QWORD *)(v83 + 48);
                          v88 = *(_QWORD *)(v87 + 16);
                          if (v88)
                          {
                            v89 = (uint64_t *)(v87 + 56);
                            while ((ValueMetadata *)*(v89 - 3) != &type metadata for PropagateDirtiness)
                            {
                              v89 += 5;
                              if (!--v88)
                                goto LABEL_89;
                            }
                            v90 = *v89;
                          }
                          else
                          {
LABEL_89:
                            v90 = 0;
                          }
                          v91 = *(_QWORD *)(v83 + 128);
                          v92 = *(_BYTE *)(v83 + 184);
                          v93 = swift_retain();
                          if ((v92 & 1) != 0)
                            goto LABEL_193;
                          v94 = *(_DWORD *)(*(_QWORD *)(v83 + 168) + 4 * v82);
                          v95 = (unsigned int *)(v91 + v90 + 8 * v82);
                          v96 = *(unsigned int *)(*(_QWORD *)(v93 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                                + 12 * (int)v94
                                                + 8);
                          swift_release();
                          v97 = *v95;
                          v98 = v95[1];
                          if ((_DWORD)v97 != -1 || (_DWORD)v98 != 0)
                            sub_1B1B8A6C8(v235, v94 | (unint64_t)(v96 << 32), v97 | (v98 << 32));
                          v19 = &qword_1ED4B8000;
                        }
                      }
                    }
                    goto LABEL_17;
                  }
                  v66 = 0;
                  v67 = v45 - 2;
                  v68 = v46 + 40;
                  while (v67 != v66)
                  {
                    v69 = *(_DWORD *)(v68 + 4 * v66++);
                    if (v69 == v217)
                    {
                      v49 = v66 + 1;
                      goto LABEL_66;
                    }
                  }
                }
                v49 = 0;
                goto LABEL_66;
              }
              v50 = *(_QWORD *)v39;
              v51 = &v38[5 * (int)v208];
              v54 = v51[1];
              v52 = v51 + 1;
              v53 = v54;
              v55 = *(_QWORD *)(*(_QWORD *)v39 + 16);
              if (v54 == v55)
              {
LABEL_45:
                v56 = 0;
                goto LABEL_46;
              }
              v57 = *(_DWORD *)(v50 + 32 + 4 * v53);
              if (v57 == v217)
              {
                v19 = &qword_1ED4B8000;
                goto LABEL_55;
              }
              v56 = v53 + 1;
              if (v53 + 1 == v55)
              {
                v56 = 0;
                v19 = &qword_1ED4B8000;
LABEL_46:
                if (v56 == v53)
                {
LABEL_55:
                  *v52 = v53 + 1;
                  v63 = &v38[5 * (int)v208];
                  v65 = *((_DWORD *)v63 + 8);
                  v64 = v63 + 4;
                  v48 = v34;
                  if (v65 == v40)
                  {
                    HIDWORD(v38[5 * (int)v208 + 4]) = v40;
                    *v64 = -1;
                  }
                  goto LABEL_75;
                }
                v196 = v52;
                v200 = v38;
                v204 = (char **)v39;
                v193 = v53;
                v57 = *(_DWORD *)(v50 + 4 * v53 + 32);
              }
              else
              {
                if (*(_DWORD *)(v50 + 32 + 4 * v56) != v217)
                {
                  v100 = v55 - 2;
                  v101 = v53;
                  v19 = &qword_1ED4B8000;
                  while (v100 != v101)
                  {
                    v102 = *(_DWORD *)(v50 + 40 + 4 * v101++);
                    if (v102 == v217)
                    {
                      v56 = v101 + 1;
                      goto LABEL_46;
                    }
                  }
                  goto LABEL_45;
                }
                v193 = v53;
                v196 = v52;
                v200 = v38;
                v204 = (char **)v39;
              }
              v191 = v56;
              v190 = *(_DWORD *)(v50 + 4 * v56 + 32);
              v58 = swift_isUniquelyReferenced_nonNull_native();
              v59 = v204;
              *v204 = (char *)v50;
              if ((v58 & 1) == 0)
              {
                v104 = sub_1B1FFED2C(v50);
                v59 = v204;
                v50 = (uint64_t)v104;
                *v204 = v104;
              }
              *(_DWORD *)(v50 + 4 * v191 + 32) = v57;
              v60 = *v59;
              v61 = v59;
              v62 = swift_isUniquelyReferenced_nonNull_native();
              *v61 = v60;
              if ((v62 & 1) == 0)
              {
                v60 = sub_1B1FFED2C((uint64_t)v60);
                *v61 = v60;
              }
              v19 = &qword_1ED4B8000;
              v53 = v193;
              v52 = v196;
              *(_DWORD *)&v60[4 * v193 + 32] = v190;
              v40 = v217;
              v38 = v200;
              goto LABEL_55;
            }
          }
          else if ((_DWORD)v9 != (_DWORD)v8)
          {
            v20 = &qword_1ED4B8000;
            while (2)
            {
              if (*(unsigned __int8 *)(v12 + 120) == *(unsigned __int8 *)(v17 + v9))
                goto LABEL_104;
              v105 = *(_BYTE *)(v12 + 184);
              v106 = swift_retain();
              if ((v105 & 1) != 0)
                goto LABEL_193;
              v107 = *(int *)(*(_QWORD *)(v12 + 168) + 4 * v9);
              v108 = *(_DWORD *)(*(_QWORD *)(v106 + v20[192]) + 12 * (int)v107 + 8);
              swift_release();
              v110 = (_DWORD)v107 == -1 && v108 == 0;
              if (v110
                || (v107 & 0x80000000) != 0
                || v234[1] <= v107
                || ((v111 = *v234 + 12 * (int)v107, v108 != -1) ? (v112 = *(_DWORD *)(v111 + 8) == v108) : (v112 = 1),
                    !v112))
              {
LABEL_104:
                if (++v9 == v8)
                  goto LABEL_13;
                continue;
              }
              break;
            }
            v113 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v107) + 32);
            if (*(unsigned __int8 *)(v17 + v9) == *(unsigned __int8 *)(v113 + 120))
              goto LABEL_157;
            v223 = *(unsigned __int8 *)(v17 + v9);
            if ((uint64_t)(*(_QWORD *)(v113 + 240) - *(_QWORD *)(v113 + 232)) >= 2)
            {
              v220 = *(__int16 *)(v111 + 4);
              v114 = *(unsigned int *)(v113 + 28);
              v218 = *(_DWORD *)(v113 + 24);
              v115 = *(_BYTE *)(v113 + 32);
              swift_retain();
              LOBYTE(v235[0]) = v115;
              v20 = &qword_1ED4B8000;
              sub_1B1FD8FC0(v220, v218, v223, v114 | ((unint64_t)LOBYTE(v235[0]) << 32), 0, 0, 0, 0);
              goto LABEL_156;
            }
            v116 = *(_QWORD *)(v113 + 16);
            v219 = *(_DWORD *)(v113 + 188);
            v221 = *(int *)(v113 + 24);
            v117 = *(os_unfair_lock_s **)(v116 + 128);
            v215 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v107) + 32);
            swift_retain();
            swift_retain();
            os_unfair_lock_lock(v117);
            v118 = *(_QWORD **)(v116 + 96);
            v119 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v116 + 96) = v118;
            if ((v119 & 1) == 0)
            {
              v118 = sub_1B1FFECDC(v118);
              *(_QWORD *)(v116 + 96) = v118;
            }
            v120 = v118 + 4;
            v121 = v221;
            v122 = (uint64_t)&v118[5 * (int)v221 + 4];
            v123 = v223;
            v124 = v219;
            if (v223)
            {
              v125 = &v120[5 * (int)v221];
              v128 = v125[1];
              v126 = v125 + 1;
              v127 = v128;
              v129 = v128 & 0x7FFFFFFFFFFFFFFFLL;
              if ((v128 & 0x7FFFFFFFFFFFFFFFLL) != 0)
              {
                v130 = *(_QWORD *)v122;
                if (v129 != 1 && *(_DWORD *)(*(_QWORD *)v122 + 32) != v219)
                {
                  if (*(_DWORD *)(v130 + 36) == v219)
                  {
                    v132 = 1;
LABEL_131:
                    v133 = v127 - 1;
                    *v126 = v127 - 1;
                    if (v132 != v127 - 1)
                    {
                      v209 = v116;
                      v212 = v120;
                      v134 = *(_QWORD *)v122;
                      v135 = *(_QWORD *)v122 + 32;
                      v206 = v132;
                      v202 = *(_DWORD *)(v135 + 4 * v132);
                      v198 = *(_DWORD *)(v135 + 4 * v133);
                      v136 = (char **)v122;
                      v137 = swift_isUniquelyReferenced_nonNull_native();
                      *v136 = (char *)v134;
                      if ((v137 & 1) != 0)
                      {
                        v138 = v136;
                      }
                      else
                      {
                        v188 = sub_1B1FFED2C(v134);
                        v138 = v136;
                        v134 = (uint64_t)v188;
                        *v136 = v188;
                      }
                      *(_DWORD *)(v134 + 4 * v206 + 32) = v198;
                      v139 = *v138;
                      v140 = swift_isUniquelyReferenced_nonNull_native();
                      *v136 = v139;
                      if ((v140 & 1) == 0)
                      {
                        v139 = sub_1B1FFED2C((uint64_t)v139);
                        *v136 = v139;
                      }
                      *(_DWORD *)&v139[4 * v133 + 32] = v202;
                      v123 = v223;
                      v116 = v209;
                      v120 = v212;
                      v121 = v221;
                      v124 = v219;
                    }
                    v141 = &v120[5 * (int)v121];
                    v143 = *((_DWORD *)v141 + 9);
                    v142 = (_DWORD *)v141 + 9;
                    if (v143 == v124)
                    {
                      *v142 = -1;
                      LODWORD(v120[5 * (int)v121 + 4]) = v124;
                    }
                    v20 = &qword_1ED4B8000;
LABEL_153:
                    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v116 + 80) + 8 * v121 + 32) + 200) & 1) != 0)
                      *(_BYTE *)(v116 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v116 + 128));
                    swift_release();
                    *(_BYTE *)(v215 + 120) = v123;
LABEL_156:
                    swift_release();
LABEL_157:
                    if (v234[1] > v107)
                    {
                      v161 = *v234;
                      if (v108 == -1 || *(_DWORD *)(v161 + 12 * (int)v107 + 8) == v108)
                      {
                        v162 = (int *)(v161 + 12 * (int)v107);
                        v163 = *((__int16 *)v162 + 2);
                        v164 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *v162 + 32);
                        thread_worker_index(v109);
                        v165 = *(_QWORD *)(v164 + 192);
                        if (v165)
                        {
                          v166 = *(_QWORD *)(v164 + 208);
                          v167 = 8 * (v163 >> 6);
                          *(_QWORD *)(v165 + v167) |= 1 << v163;
                          *(_QWORD *)(v166 + v167) &= ~(1 << v163);
                        }
                        if (*(_BYTE *)(*(_QWORD *)(v164 + 40) + 213) == 1)
                        {
                          v168 = *(_QWORD *)(v164 + 48);
                          v169 = *(_QWORD *)(v168 + 16);
                          if (v169)
                          {
                            v170 = (uint64_t *)(v168 + 56);
                            while ((ValueMetadata *)*(v170 - 3) != &type metadata for PropagateDirtiness)
                            {
                              v170 += 5;
                              if (!--v169)
                                goto LABEL_167;
                            }
                            v171 = *v170;
                          }
                          else
                          {
LABEL_167:
                            v171 = 0;
                          }
                          v172 = *(_QWORD *)(v164 + 128);
                          v173 = *(_BYTE *)(v164 + 184);
                          v174 = swift_retain();
                          if ((v173 & 1) != 0)
                          {
LABEL_193:
                            result = (uint64_t *)sub_1B2229688();
                            __break(1u);
                            return result;
                          }
                          v175 = *(_DWORD *)(*(_QWORD *)(v164 + 168) + 4 * v163);
                          v176 = (unsigned int *)(v172 + v171 + 8 * v163);
                          v177 = *(unsigned int *)(*(_QWORD *)(v174 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                                 + 12 * (int)v175
                                                 + 8);
                          swift_release();
                          v178 = *v176;
                          v179 = v176[1];
                          if ((_DWORD)v178 != -1 || (_DWORD)v179 != 0)
                            sub_1B1B8A6C8(v235, v175 | (unint64_t)(v177 << 32), v178 | (v179 << 32));
                          v20 = &qword_1ED4B8000;
                        }
                      }
                    }
                    goto LABEL_104;
                  }
                  v181 = 0;
                  v182 = v129 - 2;
                  v183 = v130 + 40;
                  while (v182 != v181)
                  {
                    v184 = *(_DWORD *)(v183 + 4 * v181++);
                    if (v184 == v219)
                    {
                      v132 = v181 + 1;
                      goto LABEL_131;
                    }
                  }
                }
              }
              v132 = 0;
              goto LABEL_131;
            }
            v144 = *(_QWORD *)v122;
            v145 = &v120[5 * (int)v221];
            v148 = v145[1];
            v146 = v145 + 1;
            v147 = v148;
            v149 = *(_QWORD *)(*(_QWORD *)v122 + 16);
            if (v148 == v149)
            {
LABEL_141:
              v150 = 0;
              goto LABEL_142;
            }
            v151 = *(_DWORD *)(v144 + 32 + 4 * v147);
            if (v151 == v219)
            {
              v20 = &qword_1ED4B8000;
              goto LABEL_151;
            }
            v150 = v147 + 1;
            if (v147 + 1 == v149)
            {
              v150 = 0;
              v20 = &qword_1ED4B8000;
LABEL_142:
              if (v150 == v147)
              {
LABEL_151:
                *v146 = v147 + 1;
                v158 = &v120[5 * (int)v121];
                v160 = *((_DWORD *)v158 + 8);
                v159 = v158 + 4;
                v123 = 0;
                if (v160 == v124)
                {
                  HIDWORD(v120[5 * (int)v121 + 4]) = v124;
                  *v159 = -1;
                }
                goto LABEL_153;
              }
              v203 = v146;
              v207 = (char **)v122;
              v210 = v116;
              v213 = v120;
              v199 = v147;
              v151 = *(_DWORD *)(v144 + 4 * v147 + 32);
            }
            else
            {
              if (*(_DWORD *)(v144 + 32 + 4 * v150) != v219)
              {
                v185 = v149 - 2;
                v186 = v147;
                v20 = &qword_1ED4B8000;
                while (v185 != v186)
                {
                  v187 = *(_DWORD *)(v144 + 40 + 4 * v186++);
                  if (v187 == v219)
                  {
                    v150 = v186 + 1;
                    goto LABEL_142;
                  }
                }
                goto LABEL_141;
              }
              v199 = v147;
              v203 = v146;
              v207 = (char **)v122;
              v210 = v116;
              v213 = v120;
            }
            v152 = v150;
            v195 = *(_DWORD *)(v144 + 4 * v150 + 32);
            v153 = swift_isUniquelyReferenced_nonNull_native();
            v154 = v207;
            *v207 = (char *)v144;
            if ((v153 & 1) == 0)
            {
              v189 = sub_1B1FFED2C(v144);
              v154 = v207;
              v144 = (uint64_t)v189;
              *v207 = v189;
            }
            *(_DWORD *)(v144 + 4 * v152 + 32) = v151;
            v155 = *v154;
            v156 = v154;
            v157 = swift_isUniquelyReferenced_nonNull_native();
            *v156 = v155;
            if ((v157 & 1) == 0)
            {
              v155 = sub_1B1FFED2C((uint64_t)v155);
              *v156 = v155;
            }
            v20 = &qword_1ED4B8000;
            v147 = v199;
            v146 = v203;
            *(_DWORD *)&v155[4 * v199 + 32] = v195;
            v116 = v210;
            v120 = v213;
            v121 = v221;
            v124 = v219;
            goto LABEL_151;
          }
LABEL_13:
          v247[0] = v244;
          v247[1] = v245;
          v248 = v246;
          v4 = v227;
          v6 = v230;
          sub_1B1F05D48(v227, (unsigned __int16 **)v247, (uint64_t)v249);
          sub_1B1F03804((char *)v12);
          ecs_stack_allocator_pop_snapshot(v233);
          if ((v232 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          v5 = v231 + 1;
          if (v231 + 1 == v228)
          {
            sub_1B19ED748(v236);
            return sub_1B19ED748(v236);
          }
        }
      }
    }
    return sub_1B19ED748(v236);
  }
  return result;
}

uint64_t type metadata accessor for SetActiveSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B20673B0()
{
  uint64_t v0;
  int v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v13 = qword_1ED4D09F8;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  v17 = 2;
  v18 = 0;
  swift_retain();
  sub_1B1E3BDD8(1, (uint64_t)&v7);
  swift_release();
  v1 = v8;
  v2 = v9;
  v3 = v11;
  v4 = v12;
  v5 = v10 | 1;
  *(_QWORD *)(v0 + 16) = v7;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v5;
  *(_BYTE *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B2067490()
{
  return "SetActiveSystem";
}

uint64_t sub_1B20674A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = *(_QWORD *)(v2 + 96);
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t type metadata accessor for HiddenSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for EffectiveHiddenState()
{
  return &type metadata for EffectiveHiddenState;
}

uint64_t storeEnumTagSinglePayload for SetActive(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B206770C + 4 * byte_1B22B5435[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2067740 + 4 * byte_1B22B5430[v4]))();
}

uint64_t sub_1B2067740(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2067748(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2067750);
  return result;
}

uint64_t sub_1B206775C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2067764);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B2067768(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2067770(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetActive()
{
  return &type metadata for SetActive;
}

uint64_t sub_1B206778C()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[40];
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v41 = qword_1ED4D09F8;
  v42 = 0;
  v43 = 2;
  v44 = 0;
  v45 = 2;
  v46 = 0;
  swift_retain();
  sub_1B1E39288(0, (uint64_t)v14);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for EffectiveHiddenState;
  *(_QWORD *)(inited + 40) = &off_1E639B330;
  sub_1B1B44110(v15, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v14);
  v2 = v15[1];
  *(_OWORD *)(v0 + 16) = v15[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v16;
  v35 = qword_1ED4D09F8;
  v36 = 0;
  v37 = 2;
  v38 = 0;
  v39 = 2;
  v40 = 0;
  swift_retain();
  sub_1B1E39480(0, (uint64_t)&v17);
  swift_release();
  v3 = v18;
  v4 = v19;
  v5 = v21;
  v6 = v20 | 4;
  *(_QWORD *)(v0 + 56) = v17;
  *(_DWORD *)(v0 + 64) = v3;
  *(_BYTE *)(v0 + 68) = v4;
  *(_QWORD *)(v0 + 72) = v6;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v5;
  v29 = qword_1ED4D09F8;
  v30 = 0;
  v31 = 2;
  v32 = 0;
  v33 = 2;
  v34 = 0;
  swift_retain();
  sub_1B1E39480(0, (uint64_t)v22);
  swift_release();
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v7 + 32) = &type metadata for HiddenOrHasHiddenAncestor;
  *(_QWORD *)(v7 + 40) = &off_1E636CBB0;
  sub_1B1B44110(&v23, v7);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v22);
  v8 = v24;
  v9 = v25;
  v10 = v27;
  v11 = v28;
  v12 = v26 | 1;
  *(_QWORD *)(v0 + 96) = v23;
  *(_DWORD *)(v0 + 104) = v8;
  *(_BYTE *)(v0 + 108) = v9;
  *(_QWORD *)(v0 + 112) = v12;
  *(_BYTE *)(v0 + 120) = v10;
  *(_QWORD *)(v0 + 128) = v11;
  return v0;
}

uint64_t sub_1B20679F4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B206778C();
  return v0;
}

const char *sub_1B2067A28()
{
  return "HiddenSystem";
}

uint64_t sub_1B2067A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B202B158(0, v4, 0);
    v5 = v18;
    v7 = a1 + 36;
    do
    {
      v8 = *(_QWORD *)(v7 - 4);
      swift_unownedRetainStrong();
      v9 = sub_1B206F554(v8, a3);
      v11 = v10;
      v13 = v12;
      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
        sub_1B202B158(v14 > 1, v15 + 1, 1);
      v7 += 8;
      *(_QWORD *)(v18 + 16) = v15 + 1;
      v16 = v18 + 24 * v15;
      *(_QWORD *)(v16 + 32) = v9;
      *(_BYTE *)(v16 + 40) = v11 & 1;
      *(_QWORD *)(v16 + 48) = v13;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return v5;
}

BOOL sub_1B2067B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(sub_1B2068150(a2, a3, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  return v4 < a1;
}

BOOL sub_1B2067BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(sub_1B2068150(a2, a3, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  return v4 >= a1;
}

uint64_t sub_1B2067BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(sub_1B2068150(a1, a2, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  return v2;
}

uint64_t sub_1B2067C28(char *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char *v33;
  uint64_t (*v34)(uint64_t (**)(_QWORD, double));
  double v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v40;
  uint64_t v41;
  char **v42;
  _QWORD v44[2];
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _OWORD v51[2];
  _OWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = v3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v44 - v10;
  v12 = sub_1B2229610();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v49 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_retain();
    v16 = a1;
  }
  else
  {
    v44[1] = 0;
    v45 = a3;
    v46 = a2;
    v47 = v13;
    v48 = v12;
    v17 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount) & ~(*(uint64_t *)(v4
                                                                                           + OBJC_IVAR____TtC3VFX13EntityManager_entityCount) >> 63);
    swift_retain();
    v16 = sub_1B1C63D98(0, v17, 0, MEMORY[0x1E0DEE9D8]);
    v44[0] = v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
    v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v19 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
    if (v19)
    {
      v20 = 0;
      for (i = 0; i != v19; ++i)
      {
        v23 = *v18 + v20;
        if ((*(__int16 *)(v23 + 6) & 0x80000000) == 0)
        {
          v24 = *(_DWORD *)(v23 + 8);
          v26 = *((_QWORD *)v16 + 2);
          v25 = *((_QWORD *)v16 + 3);
          if (v26 >= v25 >> 1)
            v16 = sub_1B1C63D98(v25 > 1, v26 + 1, 1, v16);
          *((_QWORD *)v16 + 2) = v26 + 1;
          v22 = &v16[8 * v26];
          *((_DWORD *)v22 + 8) = i;
          *((_DWORD *)v22 + 9) = v24;
        }
        v20 += 12;
      }
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v44[0] + 24));
    v13 = v47;
    v12 = v48;
    LOBYTE(a3) = v45;
    a2 = v46;
  }
  swift_bridgeObjectRetain();
  swift_unownedRetain();
  swift_release();
  sub_1B206862C(a2, a3 & 1, (uint64_t)&v53);
  v27 = v54;
  v28 = v55;
  sub_1B19FA070(&v53, v54);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
  sub_1B2229604();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  v30 = (uint64_t)v49;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v49, v11, v12);
  if (*(_QWORD *)(v29 + 16) && (v31 = sub_1B1DC3F30(v30), (v32 & 1) != 0))
    sub_1B1A02864(*(_QWORD *)(v29 + 56) + 32 * v31, (uint64_t)v51);
  else
    memset(v51, 0, sizeof(v51));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v30, v12);
  sub_1B1A0DDAC(v51, v52);
  type metadata accessor for SerializationContext();
  swift_dynamicCast();
  v33 = v50;
  v34 = (uint64_t (*)(uint64_t (**)(_QWORD, double)))thread_serialization_context;
  v36 = (char **)thread_serialization_context(&thread_serialization_context, v35);
  v49 = *v36;
  *v36 = v33;
  v37 = v54;
  v38 = v55;
  sub_1B19FA070(&v53, v54);
  *(_QWORD *)&v52[0] = v16;
  *((_QWORD *)&v52[0] + 1) = v4;
  v39 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v38 + 32);
  v40 = sub_1B207018C();
  v41 = v39(v52, &type metadata for EntityManagerCoder, v40, v37, v38);
  v42 = (char **)v34(&thread_serialization_context);
  *v42 = v49;
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v53);
  return v41;
}

uint64_t sub_1B20680A8(uint64_t a1, uint64_t a2)
{
  return sub_1B2068150(a1, a2, MEMORY[0x1E0DEE238]);
}

BOOL sub_1B20680B8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1B222A144();
  v1 = sub_1B2068B98(v0);
  swift_bridgeObjectRelease();
  if (v1)
    swift_release();
  return v1 != 0;
}

uint64_t sub_1B20680FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(sub_1B2068150(a1, a2, MEMORY[0x1E0DEE268]) + 16);
  swift_retain();
  swift_release();
  return v2;
}

uint64_t sub_1B2068140(uint64_t a1, uint64_t a2)
{
  return sub_1B2068150(a1, a2, MEMORY[0x1E0DEE268]);
}

uint64_t sub_1B2068150(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a3();
  v4 = sub_1B2068B98(v3);
  swift_bridgeObjectRelease();
  if (v4)
    return v4;
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B20681E4(char a1, uint64_t a2, uint64_t a3, char a4, char a5, unint64_t a6, uint64_t a7, char a8)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = a8 & 1;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = sub_1B2229610();
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  type metadata accessor for SerializationContext();
  v22 = swift_allocObject();
  v23 = swift_retain();
  sub_1B20696D4(v23, a7, v9, a6 | ((HIDWORD(a6) & 1) << 32));
  *(_WORD *)(v22 + 82) = 257;
  *(_BYTE *)(v22 + 80) = a5;
  *(_BYTE *)(v22 + 81) = a4;
  __asm { BR              X10 }
}

uint64_t sub_1B2068388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  uint64_t *v9;
  uint64_t result;

  v4 = sub_1B2227CB4();
  swift_allocObject();
  v5 = sub_1B2227CA8();
  sub_1B2229604();
  v7 = *(_QWORD *)(v3 - 176);
  v6 = *(_QWORD *)(v3 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0, 1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v0, v6);
  *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 184);
  *(_QWORD *)(v3 - 120) = v1;
  swift_retain();
  v8 = (void (*)(uint64_t, _QWORD))sub_1B2227C90();
  sub_1B20E0F5C(v3 - 120, v2);
  v8(v3 - 152, 0);
  v9 = *(uint64_t **)(v3 - 160);
  v9[3] = v4;
  v9[4] = (uint64_t)&off_1E636CA90;
  result = swift_release();
  *v9 = v5;
  return result;
}

void sub_1B206862C(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  LODWORD(v21) = a2;
  v24 = a3;
  v20 = sub_1B2227CD8();
  v19[1] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v4);
  v19[2] = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v23 = sub_1B2229610();
  MEMORY[0x1E0C80A78](v23, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v22 = type metadata accessor for SerializationContext();
  v17 = swift_allocObject();
  v18 = swift_retain();
  v25 = 1;
  sub_1B20696D4(v18, 0, 1, 0x100000000);
  *(_WORD *)(v17 + 82) = 257;
  *(_BYTE *)(v17 + 81) = v21;
  v21 = a1;
  __asm { BR              X10 }
}

uint64_t sub_1B2068800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;

  v5 = sub_1B2227D20();
  swift_allocObject();
  v6 = sub_1B2227D14();
  sub_1B2229604();
  v7 = *(_QWORD *)(v4 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v7);
  *(_QWORD *)(v4 - 88) = *(_QWORD *)(v4 - 168);
  *(_QWORD *)(v4 - 112) = v0;
  swift_retain();
  v8 = (void (*)(uint64_t, _QWORD))sub_1B2227CFC();
  sub_1B20E0F5C(v4 - 112, v1);
  v8(v4 - 144, 0);
  if (*(_QWORD *)(v4 - 176) == 3)
  {
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE0E0];
    sub_1B1791524(0, &qword_1EEF5B2F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE0E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1B226CD10;
    sub_1B2227CCC();
    sub_1B2227CC0();
    *(_QWORD *)(v4 - 112) = v10;
    sub_1B19E52CC(&qword_1EEF5B2F8, v9, MEMORY[0x1E0CAE0F8]);
    sub_1B1791524(0, &qword_1EEF5B300, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B8A62C();
    sub_1B2229364();
    sub_1B2227CE4();
  }
  v11 = *(uint64_t **)(v4 - 152);
  v11[3] = v5;
  v11[4] = (uint64_t)&off_1E636CAB8;
  result = swift_release();
  *v11 = v6;
  return result;
}

uint64_t sub_1B2068B98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  char v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v15 - v4;
  v6 = sub_1B2229610();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)thread_serialization_context(&thread_serialization_context, v9))
    return swift_retain();
  sub_1B2229604();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
  if (*(_QWORD *)(a1 + 16) && (v13 = sub_1B1DC3F30((uint64_t)v11), (v14 & 1) != 0))
  {
    sub_1B1A02864(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  if (*((_QWORD *)&v17 + 1))
  {
    type metadata accessor for SerializationContext();
    if (swift_dynamicCast())
      return v15[1];
    else
      return 0;
  }
  else
  {
    sub_1B1A0DD70((uint64_t)&v16);
    return 0;
  }
}

uint64_t sub_1B2068D3C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B2068D8C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B2068DE0()
{
  sub_1B1E88F28();
  return sub_1B222A1D4();
}

uint64_t sub_1B2068E08()
{
  sub_1B1E88F28();
  return sub_1B222A1E0();
}

double sub_1B2068E30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a3 = xmmword_1B2244C80;
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t sub_1B2068E44()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1B2068E50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1B2229A0C();
  *a2 = a1;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t sub_1B2068EA4()
{
  sub_1B1C78FEC();
  return sub_1B222A1D4();
}

uint64_t sub_1B2068ECC()
{
  sub_1B1C78FEC();
  return sub_1B222A1E0();
}

uint64_t sub_1B2068EF4()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t sub_1B2068F44(char a1)
{
  if ((a1 & 1) != 0)
    return 0x72656E6E69;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_1B2068F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22B6198, a3);
  return sub_1B1F1DDE8();
}

uint64_t sub_1B2068FC4(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22B5D70, a1);
  return sub_1B2228A28();
}

uint64_t sub_1B2069010()
{
  MEMORY[0x1B5E23E74](&unk_1B22B5D70);
  return sub_1B2228A40();
}

uint64_t sub_1B2069060()
{
  MEMORY[0x1B5E23E74](&unk_1B22B5D70);
  return sub_1B2228A34();
}

uint64_t sub_1B20690B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2068EF4();
  *a1 = result;
  return result;
}

uint64_t sub_1B20690E8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B2068F44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B206911C()
{
  char *v0;

  return sub_1B2068F44(*v0);
}

uint64_t sub_1B2069130@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2068EF4();
  *a1 = result;
  return result;
}

uint64_t sub_1B2069160@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B19FABD8();
  *a1 = result;
  return result;
}

uint64_t sub_1B2069190(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22B6198, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B20691C4(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22B6198, a1);
  return sub_1B222A1E0();
}

uint64_t sub_1B20691F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  char *v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;

  v45 = a5;
  v44 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for VersionedContainer.CodingKeys(255, v10, v11, v12);
  MEMORY[0x1B5E23E74](&unk_1B22B6198, v13);
  v51 = sub_1B2229898();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v14);
  v16 = (char *)&v41 - v15;
  v48 = a2;
  v46 = a3;
  v43 = type metadata accessor for VersionedContainer(0, a2, a3, a4);
  v17 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v18);
  v20 = (uint64_t *)((char *)&v41 - v19);
  sub_1B19FA070(a1, a1[3]);
  v50 = v16;
  v21 = v52;
  sub_1B222A150();
  if (!v21)
  {
    v52 = v17;
    v23 = v47;
    v22 = v48;
    v54 = 0;
    v24 = v50;
    v25 = sub_1B22297FC();
    v41 = v20;
    *v20 = v25;
    v26 = a1[3];
    v27 = a1[4];
    v28 = v25;
    sub_1B19FA070(a1, v26);
    v29 = MEMORY[0x1E0DEE238];
    v42 = *(_QWORD *)(sub_1B2068150(v26, v27, MEMORY[0x1E0DEE238]) + 24);
    swift_release();
    v30 = a1[3];
    v31 = a1[4];
    sub_1B19FA070(a1, v30);
    v32 = v29;
    v33 = v51;
    *(_QWORD *)(sub_1B2068150(v30, v31, v32) + 24) = v28;
    swift_release();
    v53 = 1;
    v34 = v23;
    sub_1B2229814();
    v36 = v43;
    v37 = v41;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))((char *)v41 + *(int *)(v43 + 44), v34, v22);
    v38 = a1[3];
    v39 = a1[4];
    sub_1B19FA070(a1, v38);
    v40 = sub_1B2068150(v38, v39, MEMORY[0x1E0DEE238]);
    *(_QWORD *)(v40 + 24) = v42;
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v33);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v52 + 32))(v45, v37, v36);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B2069554(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14[4];
  char v15;
  char v16;

  v4 = a2[2];
  v5 = a2[3];
  v14[0] = a2[4];
  v14[1] = v4;
  v6 = type metadata accessor for VersionedContainer.CodingKeys(255, v4, v5, v14[0]);
  MEMORY[0x1B5E23E74](&unk_1B22B6198, v6);
  v7 = sub_1B22299C4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v14 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A180();
  v16 = 0;
  v12 = v14[3];
  sub_1B2229940();
  if (!v12)
  {
    v15 = 1;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B20696A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B20691F8(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1B20696C0(_QWORD *a1, _QWORD *a2)
{
  return sub_1B2069554(a1, a2);
}

uint64_t sub_1B20696D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 1;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = v8;
  *(_DWORD *)(v4 + 80) = 256;
  *(_WORD *)(v4 + 84) = 256;
  *(_BYTE *)(v4 + 86) = 1;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 128) = v8;
  *(_QWORD *)(v4 + 136) = v8;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 112) = sub_1B1B95EBC(v8);
  *(_QWORD *)(v4 + 120) = sub_1B1B95EBC(v8);
  v9 = sub_1B1B95FA4(v8);
  swift_release();
  *(_QWORD *)(v4 + 104) = v9;
  v10 = 2048;
  if ((a3 & 1) == 0)
    v10 = a2;
  *(_QWORD *)(v4 + 24) = v10;
  *(_DWORD *)(v4 + 32) = a4;
  *(_BYTE *)(v4 + 36) = BYTE4(a4) & 1;
  return v4;
}

uint64_t sub_1B2069798()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 88);
  if (v1)
  {
    v2 = swift_retain();
    v1(v2);
    sub_1B19E5A18((uint64_t)v1);
  }
  swift_bridgeObjectRelease();
  sub_1B19E5A18(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B206981C()
{
  sub_1B2069798();
  return swift_deallocClassInstance();
}

uint64_t sub_1B206983C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned int *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 36);
  type metadata accessor for SerializationContext();
  v5 = swift_allocObject();
  v6 = swift_retain();
  sub_1B20696D4(v6, v2, 0, v3 | ((unint64_t)v4 << 32));
  *(_BYTE *)(v5 + 80) = *(_BYTE *)(v1 + 80);
  *(_BYTE *)(v5 + 81) = *(_BYTE *)(v1 + 81);
  *(_BYTE *)(v5 + 82) = *(_BYTE *)(v1 + 82);
  *(_BYTE *)(v5 + 83) = *(_BYTE *)(v1 + 83);
  *(_BYTE *)(v5 + 84) = *(_BYTE *)(v1 + 84);
  *(_BYTE *)(v5 + 85) = *(_BYTE *)(v1 + 85);
  *(_BYTE *)(v5 + 86) = *(_BYTE *)(v1 + 86);
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(v1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v1 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 120) = *(_QWORD *)(v1 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 128) = *(_QWORD *)(v1 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 136) = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B2069964(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  sub_1B1B1F358();
  v47 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B222820C();
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v43 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v37 = v3;
    v15 = a3 & 1;
    v55 = MEMORY[0x1E0DEE9D8];
    sub_1B202B0AC(0, v13, 0);
    v16 = (uint64_t *)(a1 + 40);
    v17 = &qword_1ED4B8000;
    v39 = 0x80000001B2349960;
    v40 = 0x80000001B2349940;
    v38 = xmmword_1B226D240;
    v42 = a2;
    v41 = a3 & 1;
    while (v17[156])
    {
      v18 = *(v16 - 1);
      v19 = *v16;
      swift_bridgeObjectRetain();
      swift_retain();
      v20 = sub_1B1A0608C(v18, v19, a2, v15);
      swift_release();
      v52 = v20;
      if (v20)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v53 = 0;
        v54 = 0xE000000000000000;
        v51 = qword_1ED4D0FB0;
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v53 = 0xD000000000000015;
        v54 = v40;
        v49 = v19;
        sub_1B2228890();
        sub_1B2228890();
        v22 = v53;
        v21 = v54;
        v23 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v50 = v13;
        v24 = qword_1ED4D0FD0;
        v25 = qword_1ED4BF688;
        swift_retain();
        if (v25 != -1)
          swift_once();
        sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v38;
        *(_QWORD *)(v26 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v26 + 64) = sub_1B1B1F47C();
        *(_QWORD *)(v26 + 32) = v22;
        *(_QWORD *)(v26 + 40) = v21;
        swift_bridgeObjectRetain();
        sub_1B222835C();
        swift_bridgeObjectRelease();
        swift_retain();
        v48 = v24;
        v27 = v43;
        sub_1B2228200();
        v28 = v47[12];
        v29 = v47[16];
        v30 = v21;
        v31 = (uint64_t)v46;
        v32 = &v46[v47[20]];
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v46, v27, v45);
        *(_BYTE *)(v31 + v28) = v23;
        *(_QWORD *)(v31 + v29) = 0;
        *(_QWORD *)v32 = v22;
        *((_QWORD *)v32 + 1) = v30;
        swift_bridgeObjectRetain();
        sub_1B2228428();
        swift_release();
        sub_1B1A04628(v31, (uint64_t (*)(_QWORD))sub_1B1B1F358);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        a2 = v42;
        v15 = v41;
        v17 = &qword_1ED4B8000;
        v13 = v50;
      }
      v14 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202B0AC(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v55;
      }
      v34 = *(_QWORD *)(v14 + 16);
      v33 = *(_QWORD *)(v14 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1B202B0AC(v33 > 1, v34 + 1, 1);
        v14 = v55;
      }
      v16 += 2;
      *(_QWORD *)(v14 + 16) = v34 + 1;
      *(_QWORD *)(v14 + 8 * v34 + 32) = v52;
      if (!--v13)
      {
        v3 = v37;
        goto LABEL_19;
      }
    }
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
LABEL_19:
    *(_QWORD *)(v3 + 128) = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B2069E10()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B2029FFC(0, v2, 0);
    v4 = 0;
    v3 = v14;
    do
    {
      if (*(_QWORD *)(v1 + 8 * v4 + 32))
      {
        v5 = sub_1B222A210();
        v7 = v6;
        v13 = v6;
        swift_bridgeObjectRetain();
        v8 = sub_1B2228914();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
        {
          sub_1B2228854();
          sub_1B22287E8();
          v7 = v13;
        }
      }
      else
      {
        v5 = 0;
        v7 = 0xE000000000000000;
      }
      v10 = *(_QWORD *)(v14 + 16);
      v9 = *(_QWORD *)(v14 + 24);
      if (v10 >= v9 >> 1)
        sub_1B2029FFC(v9 > 1, v10 + 1, 1);
      ++v4;
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v11 = v14 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v5;
      *(_QWORD *)(v11 + 40) = v7;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1B2069F98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD **)(v1 + 128);
  v4 = v3[2];
  if (v4)
  {
    result = 0;
    while (1)
    {
      v6 = v3[result + 4];
      if (v6 && v6 == a1)
        break;
      if (v4 == ++result)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + 128) = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v3 = sub_1B1C694B8(0, v4 + 1, 1, v3);
      *(_QWORD *)(v1 + 128) = v3;
    }
    v10 = v3[2];
    v9 = v3[3];
    if (v10 >= v9 >> 1)
      v3 = sub_1B1C694B8(v9 > 1, v10 + 1, 1, v3);
    v3[2] = v10 + 1;
    v3[v10 + 4] = a1;
    *(_QWORD *)(v1 + 128) = v3;
    return v4;
  }
  return result;
}

uint64_t sub_1B206A068(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 136);
  v5 = v4[2];
  if (!v5)
  {
    v6 = 0;
LABEL_18:
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 136) = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v4 = sub_1B1C68E54(0, v6 + 1, 1, v4);
      *(_QWORD *)(v2 + 136) = v4;
    }
    v15 = v4[2];
    v14 = v4[3];
    if (v15 >= v14 >> 1)
      v4 = sub_1B1C68E54(v14 > 1, v15 + 1, 1, v4);
    v4[2] = v15 + 1;
    v4[v15 + 4] = a1;
    *(_QWORD *)(v2 + 136) = v4;
    return v6;
  }
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    v7 = (_QWORD *)v4[v6 + 4];
    if (!v7)
      goto LABEL_4;
    swift_retain();
    swift_retain();
    v8 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (!result)
      break;
    v10 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (!result)
      goto LABEL_26;
    if (v8 == v10 && v7[5] == a1[5])
    {
      if (v7[2] == a1[2] && v7[3] == a1[3])
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return v6;
      }
      v12 = sub_1B2229D24();
      swift_release();
      swift_release();
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
LABEL_4:
    if (v5 == ++v6)
    {
      swift_bridgeObjectRelease();
      v4 = *(_QWORD **)(v2 + 136);
      v6 = v4[2];
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1B206A24C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  id v36;

  v30 = a4;
  v8 = sub_1B2229124();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v27 - v11;
  v14 = type metadata accessor for DecodeOrNil(0, a2, a3, v13);
  v28 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v27 = (char *)&v27 - v16;
  v17 = a1[3];
  v31 = a1;
  sub_1B19FA070(a1, v17);
  sub_1B222A138();
  if (v4)
  {
    v36 = v4;
    v18 = v4;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    v19 = swift_dynamicCast();
    v26 = (uint64_t)v31;
    if (v19)
    {
      v20 = v34;
      if ((v34 & 0xE0) == 0x20)
      {
        sub_1B1BA857C(v32, v33, v34);
        if ((v20 & 1) != 0)
        {

          v25 = v27;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v27, 1, 1, a2);

          goto LABEL_13;
        }
      }
      else
      {
        sub_1B1BA857C(v32, v33, v34);
      }
    }

    if (qword_1ED4BF430 != -1)
      swift_once();
    v32 = 0;
    v33 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v36 = v4;
    sub_1B22295EC();
    v21 = v32;
    v22 = v33;
    v23 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v32 = 0;
    swift_retain();
    sub_1B1F1AD70(v23, &v32, v21, v22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    v25 = v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v27, 1, 1, a2);
  }
  else
  {
    sub_1B19FA070(&v32, v35);
    sub_1B2229D6C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v12, 0, 1, a2);
    v25 = v27;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v27, v12, v8);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v32);
    v26 = (uint64_t)v31;
  }
LABEL_13:
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v25, v29);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v26);
}

uint64_t sub_1B206A604@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B206A24C(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void sub_1B206A620()
{
  sub_1B2229688();
  __break(1u);
}

_QWORD *sub_1B206A678(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *i;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  uint64_t v44;
  uint64_t v45;

  v35 = a7;
  v36 = a4;
  v37 = a6;
  v11 = sub_1B2229124();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v30 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v7)
    goto LABEL_7;
  v32 = v18;
  v33 = v14;
  v34 = a1;
  v20 = sub_1B2228B6C();
  sub_1B19FC264((uint64_t)v43, v44);
  v45 = v36;
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v20, &v45);
  sub_1B2229AA8();
  v31 = v20;
  v21 = v39;
  v22 = a3;
  v23 = sub_1B2228B6C();
  sub_1B19FC264((uint64_t)v43, v44);
  v42 = v35;
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v23, &v42);
  sub_1B2229AA8();
  v24 = v39;
  v19 = (_QWORD *)MEMORY[0x1B5E206E8](v21, a2);
  if (v19 != (_QWORD *)MEMORY[0x1B5E206E8](v24, v22))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v28 = 0xD000000000000017;
    *(_QWORD *)(v28 + 8) = 0x80000001B23499C0;
    *(_BYTE *)(v28 + 16) = 96;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
    a1 = v34;
LABEL_7:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v19;
  }
  swift_getTupleTypeMetadata2();
  sub_1B2228B00();
  v41 = sub_1B2228560();
  v38 = v21;
  v36 = v24;
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF48], v31);
  sub_1B2228D34();
  v25 = v39;
  v26 = v40;
  for (i = v33; v26 != v25; ++v25)
  {
    sub_1B2228BB4();
    sub_1B2228BB4();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(i, 0, 1, v22);
    sub_1B22285A8();
    sub_1B22285C0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = (_QWORD *)v41;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
  return v19;
}

uint64_t sub_1B206AA1C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  nullsub_16(a2);
  v11 = sub_1B222856C();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DE9ED0], v11);
  v21 = sub_1B2228B9C();
  sub_1B19FC264((uint64_t)v19, v20);
  v12 = sub_1B2228B6C();
  v18 = a6;
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v12, &v18);
  sub_1B2229BA4();
  swift_bridgeObjectRelease();
  if (!v16)
  {
    v21 = a2;
    v13 = sub_1B2228584();
    swift_bridgeObjectRetain();
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DE9F98], v13);
    v21 = sub_1B2228B9C();
    sub_1B19FC264((uint64_t)v19, v20);
    v14 = sub_1B2228B6C();
    v17 = a9;
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v14, &v17);
    sub_1B2229BA4();
    swift_bridgeObjectRelease();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
}

_QWORD *sub_1B206AC30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  result = sub_1B206A678(a1, a2[2], a2[3], a2[4], a3, a2[6], a2[7]);
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_1B206AC68(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;

  return sub_1B206AA1C(a1, *v8, a2[2], a2[3], a5, a2[5], a2[6], a8, a2[8]);
}

uint64_t sub_1B206AC9C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B2072D6C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B206ACC4()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for BinaryCodingTypeRegistry();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1B1B975A4(MEMORY[0x1E0DEE9D8]);
  result = sub_1B206AD10();
  qword_1ED4D0DC8 = v0;
  return result;
}

uint64_t sub_1B206AD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_1B20700D8(0, &qword_1ED4B87E8, (uint64_t (*)(void))sub_1B206FD2C, (uint64_t (*)(void))sub_1B206FD70, (uint64_t)&type metadata for EntityCoder);
  v2 = v1;
  v3 = sub_1B206FD2C();
  v4 = sub_1B206FD70();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B867A8((uint64_t)&type metadata for EntityCoder, v3, v4, v2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + 16) = v36;
  swift_bridgeObjectRelease();
  sub_1B20700D8(0, &qword_1ED4B8810, (uint64_t (*)(void))sub_1B1C1ECE8, (uint64_t (*)(void))sub_1B1C1ED2C, (uint64_t)&type metadata for ComponentProperty);
  v7 = v6;
  v8 = sub_1B1C1ECE8();
  v9 = sub_1B1C1ED2C();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v37 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B867A8((uint64_t)&type metadata for ComponentProperty, v8, v9, v7, v10);
  *(_QWORD *)(v0 + 16) = v37;
  swift_bridgeObjectRelease();
  sub_1B206FDB4(0);
  v12 = v11;
  sub_1B19F8E54(0, &qword_1ED4B7D08, (uint64_t (*)(void))sub_1B1C1ECE8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
  v14 = v13;
  v15 = sub_1B206FE74(&qword_1ED4B7D00, (uint64_t)&unk_1B22B5A7C);
  v16 = sub_1B206FE74(&qword_1ED4B7CF8, (uint64_t)&unk_1B22B5A54);
  v17 = swift_isUniquelyReferenced_nonNull_native();
  v38 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B867A8(v14, v15, v16, v12, v17);
  *(_QWORD *)(v0 + 16) = v38;
  swift_bridgeObjectRelease();
  sub_1B206FED4(0);
  v19 = v18;
  sub_1B1A02758(0, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v21 = v20;
  v22 = sub_1B206FF60();
  v23 = sub_1B206FFD8();
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v39 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B867A8(v21, v22, v23, v19, v24);
  *(_QWORD *)(v0 + 16) = v39;
  swift_bridgeObjectRelease();
  sub_1B20700D8(0, &qword_1ED4B87F0, (uint64_t (*)(void))sub_1B2070050, (uint64_t (*)(void))sub_1B2070094, (uint64_t)&type metadata for RelationsCoder);
  v26 = v25;
  v27 = sub_1B2070050();
  v28 = sub_1B2070094();
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v40 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B867A8((uint64_t)&type metadata for RelationsCoder, v27, v28, v26, v29);
  *(_QWORD *)(v0 + 16) = v40;
  swift_bridgeObjectRelease();
  sub_1B20700D8(0, &qword_1ED4B8808, (uint64_t (*)(void))sub_1B2021080, (uint64_t (*)(void))sub_1B2021128, (uint64_t)&type metadata for RelationPair);
  v31 = v30;
  v32 = sub_1B2021080();
  v33 = sub_1B2021128();
  v34 = swift_isUniquelyReferenced_nonNull_native();
  v41 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B867A8((uint64_t)&type metadata for RelationPair, v32, v33, v31, v34);
  *(_QWORD *)(v0 + 16) = v41;
  return swift_bridgeObjectRelease();
}

void sub_1B206B06C(char *a1)
{
  sub_1B1F934C0(*a1);
}

void sub_1B206B078()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B206B0CC()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B206B170()
{
  __asm { BR              X10 }
}

uint64_t sub_1B206B1B4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B206B244()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B206B294()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206B338@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B206FCE4();
  *a1 = result;
  return result;
}

uint64_t sub_1B206B364()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B206B39C + 4 * byte_1B22B55B9[*v0]))();
}

void sub_1B206B39C(_QWORD *a1@<X8>)
{
  *a1 = 0x7365697469746E65;
  a1[1] = 0xE800000000000000;
}

void sub_1B206B3B8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F6974616C6572;
  a1[1] = 0xE900000000000073;
}

void sub_1B206B3D8(char *a1@<X8>)
{
  strcpy(a1, "componentTable");
  a1[15] = -18;
}

void sub_1B206B400(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "propertyTable");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1B206B428()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B206B460 + 4 * byte_1B22B55BE[*v0]))(0x6154797469746E65, 0xEB00000000656C62);
}

uint64_t sub_1B206B460()
{
  return 0x7365697469746E65;
}

uint64_t sub_1B206B478()
{
  return 0x6E6F6974616C6572;
}

uint64_t sub_1B206B494()
{
  return 0x6E656E6F706D6F63;
}

uint64_t sub_1B206B4B8()
{
  return 0x79747265706F7270;
}

uint64_t sub_1B206B4DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B206FCE4();
  *a1 = result;
  return result;
}

uint64_t sub_1B206B500()
{
  sub_1B2073474();
  return sub_1B222A1D4();
}

uint64_t sub_1B206B528()
{
  sub_1B2073474();
  return sub_1B222A1E0();
}

_QWORD *sub_1B206B550(_QWORD *result, char **a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int *v32;
  char v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int *v43;
  char v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;

  v5 = result[3];
  v6 = result[4];
  v7 = v6 - v5;
  if (v6 == v5)
    return result;
  v9 = a4;
  v10 = a2;
  v55 = a3 + 32;
  v11 = 4 * result[6];
  v12 = result[1];
  v54 = v12;
  while (1)
  {
    v14 = swift_retain();
    if ((*(_BYTE *)(v12 + 184) & 1) != 0)
      break;
    v15 = *(_DWORD *)(*(_QWORD *)(v12 + 168) + v11);
    v16 = *(unsigned int *)(*(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v15 + 8);
    swift_release();
    v17 = *v10;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v10 = v17;
    v58 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_1B1C63D98(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
      *v10 = v17;
    }
    v20 = *((_QWORD *)v17 + 2);
    v19 = *((_QWORD *)v17 + 3);
    if (v20 >= v19 >> 1)
      v17 = sub_1B1C63D98(v19 > 1, v20 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v20 + 1;
    v21 = &v17[8 * v20];
    *((_DWORD *)v21 + 8) = v15;
    *((_DWORD *)v21 + 9) = v16;
    *v10 = v17;
    v59 = *(_QWORD *)(v55 + 8 * *v9);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v23 = (_QWORD *)a5[13];
    a5[13] = 0x8000000000000000;
    v25 = sub_1B1DC3B14(v59);
    v26 = v24;
    v27 = v23[2] + ((v24 & 1) == 0);
    if (v23[3] >= v27)
    {
      if ((v22 & 1) != 0)
      {
        v30 = v23;
        if ((v24 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        sub_1B1EB296C();
        v30 = v23;
        if ((v26 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      sub_1B1EA30F8(v27, v22);
      v28 = sub_1B1DC3B14(v59);
      if ((v26 & 1) != (v29 & 1))
        goto LABEL_39;
      v25 = v28;
      v30 = v23;
      if ((v26 & 1) == 0)
      {
LABEL_14:
        v30[(v25 >> 6) + 8] |= 1 << v25;
        *(_DWORD *)(v30[6] + 4 * v25) = v59;
        v31 = (unsigned int *)(v30[7] + 8 * v25);
        *v31 = v15;
        v31[1] = v16;
        ++v30[2];
        goto LABEL_18;
      }
    }
    v32 = (unsigned int *)(v30[7] + 8 * v25);
    *v32 = v15;
    v32[1] = v16;
LABEL_18:
    a5[13] = v30;
    swift_bridgeObjectRelease();
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v34 = (_QWORD *)a5[14];
    a5[14] = 0x8000000000000000;
    v36 = sub_1B1DC3CA4(v59 | ((unint64_t)HIDWORD(v59) << 32));
    v37 = v35;
    v38 = v34[2] + ((v35 & 1) == 0);
    if (v34[3] >= v38)
    {
      if ((v33 & 1) != 0)
      {
        v41 = v34;
        if ((v35 & 1) == 0)
          goto LABEL_21;
      }
      else
      {
        sub_1B1EA9B9C();
        v41 = v34;
        if ((v37 & 1) == 0)
          goto LABEL_21;
      }
    }
    else
    {
      sub_1B1E93E90(v38, v33);
      v39 = sub_1B1DC3CA4(v59 | ((unint64_t)HIDWORD(v59) << 32));
      if ((v37 & 1) != (v40 & 1))
        goto LABEL_37;
      v36 = v39;
      v41 = v34;
      if ((v37 & 1) == 0)
      {
LABEL_21:
        v41[(v36 >> 6) + 8] |= 1 << v36;
        *(_QWORD *)(v41[6] + 8 * v36) = v59;
        v42 = (unsigned int *)(v41[7] + 8 * v36);
        *v42 = v15;
        v42[1] = v16;
        ++v41[2];
        goto LABEL_25;
      }
    }
    v43 = (unsigned int *)(v41[7] + 8 * v36);
    *v43 = v15;
    v43[1] = v16;
LABEL_25:
    a5[14] = v41;
    swift_bridgeObjectRelease();
    v44 = swift_isUniquelyReferenced_nonNull_native();
    v45 = (_QWORD *)a5[15];
    a5[15] = 0x8000000000000000;
    v46 = v15 | (unint64_t)(v16 << 32);
    v47 = sub_1B1DC3CA4(v46);
    v49 = v48;
    v50 = v45[2] + ((v48 & 1) == 0);
    if (v45[3] >= v50)
    {
      v10 = a2;
      if ((v44 & 1) == 0)
        sub_1B1EA9B9C();
      v9 = a4;
      v53 = v45;
      if ((v49 & 1) != 0)
        goto LABEL_32;
    }
    else
    {
      sub_1B1E93E90(v50, v44);
      v51 = sub_1B1DC3CA4(v46);
      if ((v49 & 1) != (v52 & 1))
      {
LABEL_37:
        sub_1B2229FC4();
        __break(1u);
        break;
      }
      v47 = v51;
      v10 = a2;
      v9 = a4;
      v53 = v45;
      if ((v49 & 1) != 0)
      {
LABEL_32:
        *(_QWORD *)(v53[7] + 8 * v47) = v59;
        goto LABEL_5;
      }
    }
    v53[(v47 >> 6) + 8] |= 1 << v47;
    v13 = (unsigned int *)(v53[6] + 8 * v47);
    *v13 = v15;
    v13[1] = v16;
    *(_QWORD *)(v53[7] + 8 * v47) = v59;
    ++v53[2];
LABEL_5:
    v12 = v54;
    a5[15] = v53;
    result = (_QWORD *)swift_bridgeObjectRelease();
    ++*v9;
    v11 += 4;
    v7 = v58 - 1;
    if (v58 == 1)
      return result;
  }
  sub_1B2229688();
  __break(1u);
LABEL_39:
  result = (_QWORD *)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B206BA20(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6)
{
  int64_t v7;
  uint64_t v8;
  uint64_t v10;
  int64_t v11;
  uint64_t DynamicType;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  signed int v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = *(_QWORD *)(a5 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A1B4(0, v7, 0);
    v10 = a5 + 32;
    v8 = v44;
    v11 = v7;
    do
    {
      sub_1B19FA198(v10, (uint64_t)v41);
      sub_1B19FA070(v41, v42);
      DynamicType = swift_getDynamicType();
      v13 = v43;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202A1B4(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v44;
      }
      v15 = *(_QWORD *)(v8 + 16);
      v14 = *(_QWORD *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B202A1B4(v14 > 1, v15 + 1, 1);
        v8 = v44;
      }
      *(_QWORD *)(v8 + 16) = v15 + 1;
      v16 = v8 + 16 * v15;
      *(_QWORD *)(v16 + 32) = DynamicType;
      *(_QWORD *)(v16 + 40) = v13;
      v10 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  thread_worker_index(a6);
  v17 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  v18 = swift_bridgeObjectRetain();
  v19 = sub_1B1DAD000(v18, MEMORY[0x1E0DEE9D8]);
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = sub_1B1DA8760(v19);
  if ((v23 & 1) != 0 || (v24 = sub_1B1DA87D4(v21, v22), v25 = v24, (v24 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v25 = sub_1B1DA8838(v19, v21, v8, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v26 = *(os_unfair_lock_s **)(v17 + 24);
  swift_retain();
  os_unfair_lock_unlock(v26);
  swift_release();
  swift_bridgeObjectRelease();
  v27 = sub_1B1DA61CC(a3);
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * (int)v27 + 32);
  v29 = *(os_unfair_lock_s **)(v28 + 376);
  swift_retain();
  os_unfair_lock_lock(v29);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
  sub_1B1A02758(0, &qword_1ED4BAF28, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v27 << 16 >> 48;
  sub_1B1FD9320((_QWORD *)inited, v25, a4 & 1, a2 | ((HIDWORD(a2) & 1) << 32), 0, 0, 0, 0);
  swift_setDeallocating();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
  if (!v7)
    return swift_release();
  v31 = a5 + 32;
  swift_bridgeObjectRetain();
  do
  {
    sub_1B19FA198(v31, (uint64_t)v41);
    sub_1B19FA070(v41, v42);
    v32 = swift_getDynamicType();
    v33 = v43;
    v34 = sub_1B1F24AA4(v32);
    if (v34 >= 1)
    {
      MEMORY[0x1E0C80A78](v34, v35);
      sub_1B1FE298C(v32, v33, a3, (void (*)(uint64_t))sub_1B20736DC);
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
    v31 += 40;
    --v7;
  }
  while (v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B206BE00(_QWORD *a1, _QWORD *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  _BYTE v54[24];
  uint64_t v55;

  v4 = v3;
  v50 = a3;
  sub_1B19F8E54(0, &qword_1EEF62AE8, (uint64_t (*)(void))sub_1B2073474, (uint64_t)&type metadata for EntityManagerCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v51 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v47 - v10;
  v12 = a1[3];
  v49 = a1;
  sub_1B19FA070(a1, v12);
  sub_1B2073474();
  sub_1B222A180();
  LOBYTE(v52[0]) = 0;
  sub_1B22298B0();
  v13 = a2[2];
  if (v13)
  {
    v48 = v8;
    swift_bridgeObjectRetain();
    v14 = 0;
    while (1)
    {
      v52[0] = a2[v14 + 4];
      sub_1B19FC264((uint64_t)v54, v55);
      sub_1B20736E8();
      sub_1B2229BA4();
      if (v3)
        break;
      if (v13 == ++v14)
      {
        swift_bridgeObjectRelease();
        v8 = v48;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v48);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRetain_n();
    v15 = (uint64_t)v50;
    swift_unownedRetain();
    v16 = sub_1B2067A40((uint64_t)a2, (uint64_t)a2, v15);
    swift_bridgeObjectRelease();
    v52[0] = v16;
    v53 = 1;
    sub_1B20700D8(0, &qword_1ED4B87E8, (uint64_t (*)(void))sub_1B206FD2C, (uint64_t (*)(void))sub_1B206FD70, (uint64_t)&type metadata for EntityCoder);
    sub_1B207372C(&qword_1EEF62AF8, (uint64_t)&unk_1B22A1070);
    sub_1B2229958();
    if (v4)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v8);
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = v49;
      v18 = v49[3];
      v19 = v49[4];
      sub_1B19FA070(v49, v18);
      v20 = MEMORY[0x1E0DEE268];
      LODWORD(v48) = *(unsigned __int8 *)(sub_1B2068150(v18, v19, MEMORY[0x1E0DEE268]) + 86);
      swift_release();
      v21 = v17[3];
      v22 = v17[4];
      sub_1B19FA070(v17, v21);
      *(_BYTE *)(sub_1B2068150(v21, v22, v20) + 86) = 0;
      swift_release();
      v23 = v17[3];
      v24 = v17[4];
      sub_1B19FA070(v17, v23);
      v25 = *(_QWORD *)(sub_1B2068150(v23, v24, v20) + 136);
      swift_bridgeObjectRetain();
      swift_release();
      v52[0] = v25;
      v53 = 4;
      sub_1B206FED4(0);
      sub_1B19E52CC(&qword_1EEF62B00, (uint64_t (*)(uint64_t))sub_1B206FED4, (uint64_t)&unk_1B22A1070);
      sub_1B2229958();
      swift_bridgeObjectRelease();
      v27 = v17[3];
      v28 = v17[4];
      sub_1B19FA070(v17, v27);
      v29 = MEMORY[0x1E0DEE268];
      v30 = sub_1B2068150(v27, v28, MEMORY[0x1E0DEE268]);
      *(_BYTE *)(v30 + 86) = v48;
      swift_release();
      v31 = v17[3];
      v32 = v17[4];
      sub_1B19FA070(v17, v31);
      v33 = sub_1B2068150(v31, v32, v29);
      if (v13)
      {
        sub_1B1B9D218();
        v34 = sub_1B22296DC();
      }
      else
      {
        v34 = MEMORY[0x1E0DEE9E0];
      }
      v52[0] = v34;
      swift_bridgeObjectRetain_n();
      sub_1B206F1AC(a2, a2, 1, v52);
      swift_bridgeObjectRelease_n();
      *(_QWORD *)(v33 + 112) = v52[0];
      swift_release();
      swift_bridgeObjectRelease();
      v35 = v50;
      swift_unownedRetainStrong();
      v36 = swift_bridgeObjectRetain();
      v37 = sub_1B1F027AC(v36);
      swift_release();
      v38 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v38, v39);
      *(&v47 - 4) = (uint64_t)a2;
      *(&v47 - 3) = (uint64_t)v35;
      v40 = v49;
      *(&v47 - 2) = (uint64_t)v49;
      v41 = sub_1B1BA93DC((void (*)(__int128 *__return_ptr, __int128 *))sub_1B207378C, (uint64_t)(&v47 - 6), v37);
      swift_bridgeObjectRelease();
      v52[0] = v41;
      v53 = 2;
      sub_1B1A02758(0, &qword_1ED4BA3A8, (uint64_t)&type metadata for RelationsCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B20737AC();
      sub_1B2229958();
      swift_bridgeObjectRelease();
      v53 = 3;
      v50 = v11;
      sub_1B22298B0();
      v42 = v40[3];
      v43 = v40[4];
      sub_1B19FA070(v40, v42);
      sub_1B2068150(v42, v43, MEMORY[0x1E0DEE268]);
      v44 = (_QWORD *)sub_1B2069E10();
      swift_release();
      v45 = v44[2];
      v49 = v44;
      if (v45)
      {
        v46 = v44 + 5;
        do
        {
          sub_1B19FC264((uint64_t)v52, v52[3]);
          swift_bridgeObjectRetain();
          sub_1B2229B68();
          v46 += 2;
          swift_bridgeObjectRelease();
          --v45;
        }
        while (v45);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v8);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v52);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v54);
}

uint64_t sub_1B206C504@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  swift_unownedRetainStrong();
  v7 = a2[3];
  v8 = a2[4];
  sub_1B19FA070(a2, v7);
  v9 = *(_QWORD *)(sub_1B2068150(v7, v8, MEMORY[0x1E0DEE268]) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  v10 = sub_1B2020330(v5);
  swift_bridgeObjectRetain();
  v11 = sub_1B20713DC(v10, v9);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v11;
  return result;
}

uint64_t sub_1B206C5F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B207210C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B206C61C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B206BE00(a1, *(_QWORD **)v1, *(char **)(v1 + 8));
}

uint64_t sub_1B206C634@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v47 = a2;
  sub_1B2073CF0();
  MEMORY[0x1E0C80A78](v4, v5);
  v46 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v45 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v45 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v45 - v17;
  sub_1B19F8E54(0, &qword_1ED4BAA90, (uint64_t (*)(void))sub_1B2073D64, (uint64_t)&type metadata for ComponentCoder.CodingKeys_pre2000, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v49 = *(_QWORD *)(v19 - 8);
  v50 = v19;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 56);
  v20(v18, 1, 1);
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  v21 = a1[3];
  v22 = a1[4];
  sub_1B19FA070(a1, v21);
  v23 = *(_QWORD *)(sub_1B2068150(v21, v22, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  v48 = v23;
  if (v23 > 1999)
  {
    v51 = v18;
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v2)
    {
      sub_1B2073DA8((uint64_t)&v52, (uint64_t)&v53);
      sub_1B19FC264((uint64_t)&v53, *((uint64_t *)&v54 + 1));
      sub_1B1B6AE04();
      sub_1B2229AA8();
      goto LABEL_8;
    }
    sub_1B1A04628((uint64_t)v51, (uint64_t (*)(_QWORD))sub_1B2073CF0);
LABEL_20:
    sub_1B1CC62CC((uint64_t)&v53, &qword_1ED4BB028, &qword_1ED4BB020, MEMORY[0x1E0DED218]);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B2073D64();
  sub_1B222A150();
  sub_1B1A04628((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1B2073CF0);
  if (v2)
    goto LABEL_20;
  v24 = v50;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20)(v14, 0, 1, v50);
  sub_1B2073E50((uint64_t)v14, (uint64_t)v18);
  v51 = v18;
  sub_1B2073E0C((uint64_t)v18, (uint64_t)v10);
  v25 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 48))(v10, 1, v24);
  LOBYTE(v58) = 0;
  sub_1B1B6AE04();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v24);
  v26 = v52;
  result = swift_conformsToProtocol2();
  if (result)
    goto LABEL_9;
  __break(1u);
LABEL_8:
  v26 = v52;
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
LABEL_9:
  v28 = result;
  v29 = v48;
  v30 = a1[3];
  v31 = a1[4];
  sub_1B19FA070(a1, v30);
  LODWORD(v30) = *(unsigned __int8 *)(sub_1B2068150(v30, v31, MEMORY[0x1E0DEE238]) + 84);
  swift_release();
  v48 = v28;
  if ((_DWORD)v30 == 1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v52 = 0x676E69646F636564;
    *((_QWORD *)&v52 + 1) = 0xE900000000000020;
    swift_retain();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v32 = v52;
    v33 = sub_1B2228E84();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v52 = 0;
    swift_retain();
    sub_1B1F1AD70(v33, (uint64_t *)&v52, v32, *((uint64_t *)&v32 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = v48;
  }
  v34 = a1[3];
  v35 = a1[4];
  sub_1B19FA070(a1, v34);
  v36 = sub_1B2068150(v34, v35, MEMORY[0x1E0DEE238]);
  *(_QWORD *)(v36 + 56) = v26;
  *(_QWORD *)(v36 + 64) = v28;
  swift_release();
  if (v29 > 1999)
  {
    sub_1B1F286A4((uint64_t)&v53, v26, (uint64_t)&v52);
  }
  else
  {
    v37 = v46;
    sub_1B2073E0C((uint64_t)v51, v46);
    v39 = v49;
    v38 = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v37, 1, v50);
    LOBYTE(v58) = 1;
    sub_1B2073D64();
    sub_1B1F283A0(v37, (uint64_t)&v58, v26, (uint64_t)&type metadata for ComponentCoder.CodingKeys_pre2000, (uint64_t)&v52);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  }
  sub_1B1A02518(&v52, (uint64_t)v56);
  v40 = a1[3];
  v41 = a1[4];
  sub_1B19FA070(a1, v40);
  v42 = sub_1B2068150(v40, v41, MEMORY[0x1E0DEE238]);
  *(_QWORD *)(v42 + 56) = 0;
  *(_QWORD *)(v42 + 64) = 0;
  swift_release();
  sub_1B1A04628((uint64_t)v51, (uint64_t (*)(_QWORD))sub_1B2073CF0);
  sub_1B1CC62CC((uint64_t)&v53, &qword_1ED4BB028, &qword_1ED4BB020, MEMORY[0x1E0DED218]);
  v43 = v56[1];
  v44 = v47;
  *v47 = v56[0];
  v44[1] = v43;
  *((_QWORD *)v44 + 4) = v57;
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B206D288(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t DynamicType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33[2];
  uint64_t v34;
  uint64_t v35[5];
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  v3 = v2;
  v4 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FA198(v1, (uint64_t)&v36);
  sub_1B19FA070(&v36, v38);
  DynamicType = swift_getDynamicType();
  v7 = v39;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v36);
  v8 = a1[3];
  v9 = a1[4];
  sub_1B19FA070(a1, v8);
  v10 = MEMORY[0x1E0DEE268];
  v11 = sub_1B2068150(v8, v9, MEMORY[0x1E0DEE268]);
  *(_QWORD *)(v11 + 56) = DynamicType;
  *(_QWORD *)(v11 + 64) = v7;
  swift_release();
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  LODWORD(v12) = *(unsigned __int8 *)(sub_1B2068150(v12, v13, v10) + 84);
  swift_release();
  if ((_DWORD)v12 == 1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v36 = 0x676E69646F636E65;
    v37 = 0xE900000000000020;
    swift_retain();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v14 = v36;
    v15 = v37;
    v16 = sub_1B2228E84();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v36 = 0;
    swift_retain();
    sub_1B1F1AD70(v16, &v36, v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1B19FA198(v4, (uint64_t)v35);
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
  sub_1B1A025A0(0, &qword_1EEF61EA0);
  if (swift_dynamicCast())
  {
    sub_1B1A02518(v33, (uint64_t)&v36);
    v35[0] = DynamicType;
    sub_1B19FC264((uint64_t)v40, v41);
    sub_1B1B6AEE0();
    sub_1B2229BA4();
    if (!v2)
    {
      sub_1B19FA070(&v36, v38);
      sub_1B1E8D2BC((uint64_t)v40);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v36);
      goto LABEL_19;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v36);
  }
  else
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    sub_1B1CC62CC((uint64_t)v33, &qword_1EEF62BC8, &qword_1EEF61EA0, MEMORY[0x1E0DEA0F8]);
    v36 = 0;
    v37 = 0xE000000000000000;
    sub_1B2229430();
    v17 = sub_1B222A210();
    v19 = v18;
    swift_bridgeObjectRelease();
    v36 = v17;
    v37 = v19;
    sub_1B2228890();
    v20 = v36;
    v21 = v37;
    sub_1B1B6AE48();
    v3 = swift_allocError();
    *(_QWORD *)v22 = v20;
    *(_QWORD *)(v22 + 8) = v21;
    *(_BYTE *)(v22 + 16) = 64;
    swift_willThrow();
  }
  v23 = a1[3];
  v24 = a1[4];
  sub_1B19FA070(a1, v23);
  LODWORD(v23) = *(unsigned __int8 *)(sub_1B2068150(v23, v24, MEMORY[0x1E0DEE268]) + 83);
  swift_release();
  if ((_DWORD)v23 == 1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v36 = 0;
    v37 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v35[0] = v3;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    v25 = v36;
    v26 = v37;
    v27 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v36 = 0;
    swift_retain();
    sub_1B1F1AD70(v27, &v36, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v28 = v3;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = -32;
  }
  swift_willThrow();
LABEL_19:
  v29 = a1[3];
  v30 = a1[4];
  sub_1B19FA070(a1, v29);
  v31 = sub_1B2068150(v29, v30, MEMORY[0x1E0DEE268]);
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 64) = 0;
  swift_release();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v40);
}

uint64_t sub_1B206D864@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B206C634(a1, a2);
}

uint64_t sub_1B206D878(_QWORD *a1)
{
  return sub_1B206D288(a1);
}

uint64_t sub_1B206D88C(_QWORD *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[5];
  _BYTE v23[24];
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;

  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  v11 = sub_1B2068150(v9, v10, MEMORY[0x1E0DEE268]);
  *(_QWORD *)(v11 + 40) = a2;
  *(_BYTE *)(v11 + 48) = 0;
  swift_release();
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v25, v26);
  sub_1B2229BB0();
  if (!v4)
  {
    if ((a3 & 1) == 0)
    {
      sub_1B19FC264((uint64_t)v25, v26);
      sub_1B2229B74();
    }
    sub_1B19FC264((uint64_t)v25, v26);
    sub_1B2229B5C();
    v12 = *(_QWORD *)(a4 + 16);
    if (v12)
    {
      v13 = (_QWORD *)(a4 + 32);
      swift_bridgeObjectRetain();
      do
      {
        v14 = v13[3];
        v15 = v13[4];
        v16 = sub_1B19FA070(v13, v14);
        v22[3] = v14;
        v22[4] = *(_QWORD *)(v15 + 8);
        v17 = sub_1B1A137F4(v22);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v17, v16, v14);
        sub_1B19FC264((uint64_t)v23, v24);
        sub_1B2073430();
        sub_1B2229BA4();
        sub_1B1EF87F0((uint64_t)v22);
        v13 += 5;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v25);
  v18 = a1[3];
  v19 = a1[4];
  sub_1B19FA070(a1, v18);
  v20 = sub_1B2068150(v18, v19, MEMORY[0x1E0DEE268]);
  *(_QWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 48) = 1;
  return swift_release();
}

uint64_t sub_1B206DB58(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v11[5];

  v6 = a4[3];
  v7 = a4[4];
  v8 = sub_1B19FA070(a4, v6);
  v11[3] = v6;
  v11[4] = *(_QWORD *)(v7 + 8);
  v9 = sub_1B1A137F4(v11);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v9, v8, v6);
  sub_1B1F28160((uint64_t)v11, a1, a2);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
}

uint64_t sub_1B206DBEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  uint64_t v6;

  result = sub_1B2071534(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B206DC24(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B206D88C(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B206DC44()
{
  return sub_1B2227D08();
}

uint64_t (*sub_1B206DC64(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1B2227CFC();
  return sub_1B1C6BBC4;
}

uint64_t sub_1B206DCAC()
{
  return sub_1B2227CF0();
}

uint64_t sub_1B206DCCC()
{
  return sub_1B2227C9C();
}

uint64_t (*sub_1B206DCEC(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1B2227C90();
  return sub_1B1C6BBC4;
}

uint64_t sub_1B206DD34()
{
  return sub_1B2227C84();
}

uint64_t sub_1B206DD54()
{
  return sub_1B2227F30();
}

uint64_t (*sub_1B206DD74(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1B2227F24();
  return sub_1B1C6BBC4;
}

uint64_t sub_1B206DDBC()
{
  return sub_1B2227F18();
}

uint64_t sub_1B206DDDC()
{
  return sub_1B2227EE8();
}

uint64_t (*sub_1B206DDFC(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1B2227EDC();
  return sub_1B1C6BBC4;
}

uint64_t sub_1B206DE44()
{
  return sub_1B2227ED0();
}

uint64_t type metadata accessor for SerializationContext()
{
  return objc_opt_self();
}

uint64_t sub_1B206DE84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v31 - v8;
  v10 = sub_1B2229610();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v31 - v17;
  sub_1B2229604();
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v19(v9, 1, v10);
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v18, v9, v10);
  v21 = *a1;
  v22 = sub_1B1DC3F30((uint64_t)v18);
  sub_1B1A02864(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)v31);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  sub_1B1A0DDAC(v31, &v32);
  v23 = type metadata accessor for SerializationContext();
  swift_dynamicCast();
  v24 = sub_1B206983C();
  swift_release();
  sub_1B2229604();
  v19(v5, 1, v10);
  v20(v14, v5, v10);
  v33 = v23;
  *(_QWORD *)&v32 = v24;
  swift_retain();
  sub_1B20E0F5C((uint64_t)&v32, (uint64_t)v14);
  v25 = (uint64_t *)thread_serialization_context();
  v26 = *v25;
  *v25 = v24;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v26;
  v28 = *(_QWORD *)(v24 + 88);
  *(_QWORD *)(v24 + 88) = sub_1B206F184;
  *(_QWORD *)(v24 + 96) = v27;
  sub_1B19E5A18(v28);
  return swift_release();
}

char *sub_1B206E0E8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, unint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  NSObject *v24;
  os_signpost_type_t v25;
  char *v26;
  os_signpost_id_t v27;
  uint64_t v28;
  os_signpost_type_t v29;
  os_signpost_id_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v43 = a8;
  v10 = v9;
  v36 = a1;
  v37 = a7;
  v40 = a3;
  v41 = a6;
  v38 = a4;
  v39 = a5;
  v35 = a2;
  v42 = a9 & 1;
  v11 = sub_1B2228380();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B22283B0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v21 = sub_1B1B40EC8(v16, (uint64_t)qword_1ED4D0E48);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v21, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v10 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v11);
  v22 = (uint8_t *)swift_slowAlloc();
  v33 = v12;
  v34 = v11;
  v23 = v22;
  *(_WORD *)v22 = 0;
  v24 = sub_1B2228398();
  v25 = sub_1B2228FA4();
  v26 = v15;
  v27 = sub_1B2228374();
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v24, v25, v27, "EntityManager.unserialize", "", v23, 2u);
  v28 = v44;
  sub_1B206E38C(v40, v10, v38 & 1, v39 & 1, v41 & 1, v37 | ((HIDWORD(v37) & 1) << 32), v43, v42, &v45, v36, v35);
  if (v28)
  {

  }
  else
  {
    v29 = sub_1B2228F98();
    v30 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v24, v29, v30, "EntityManager.unserialize", "", v23, 2u);

    v26 = v45;
    MEMORY[0x1B5E23F88](v23, -1, -1);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  return v26;
}

uint64_t sub_1B206E38C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t (**)(_QWORD, double));
  double v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_OWORD *__return_ptr, ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  _OWORD v50[2];
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  int v54;

  v54 = a5;
  v43 = a4;
  v42 = a9;
  v46 = a11;
  v44 = a7;
  v45 = a10;
  v15 = a8 & 1;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v41 - v18;
  v20 = sub_1B2229610();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B20681E4(a1, a2, a3, v43, v54, a6 | ((HIDWORD(a6) & 1) << 32), v44, v15);
  v25 = v52;
  v26 = v53;
  sub_1B19FA070(v51, v52);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
  sub_1B2229604();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v19, v20);
  if (*(_QWORD *)(v27 + 16) && (v28 = sub_1B1DC3F30((uint64_t)v24), (v29 & 1) != 0))
    sub_1B1A02864(*(_QWORD *)(v27 + 56) + 32 * v28, (uint64_t)v49);
  else
    memset(v49, 0, sizeof(v49));
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  sub_1B1A0DDAC(v49, v50);
  type metadata accessor for SerializationContext();
  swift_dynamicCast();
  v30 = v48;
  v31 = (uint64_t (*)(uint64_t (**)(_QWORD, double)))thread_serialization_context;
  v33 = (uint64_t *)thread_serialization_context(&thread_serialization_context, v32);
  v34 = *v33;
  *v33 = v30;
  v35 = v52;
  v36 = v53;
  sub_1B19FA070(v51, v52);
  v37 = *(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v36 + 32);
  v38 = sub_1B2070148();
  v39 = v47;
  v37(v50, &type metadata for EntityManagerCoder, v45, v46, &type metadata for EntityManagerCoder, v38, v35, v36);
  if (v39)
  {
    *(_QWORD *)v31(&thread_serialization_context) = v34;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unownedRelease();
    *v42 = v30;
    *(_QWORD *)v31(&thread_serialization_context) = v34;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v51);
}

uint64_t sub_1B206E648(char *a1, char *a2)
{
  return sub_1B1F971BC(*a1, *a2);
}

uint64_t sub_1B206E654()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206E6C8()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B206E718()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206E788@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B206E794(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (!*v1)
    v2 = 0x797469746E65;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B206E7C8()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 0x797469746E65;
}

uint64_t sub_1B206E7F8@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B206E804()
{
  sub_1B2073358();
  return sub_1B222A1D4();
}

uint64_t sub_1B206E82C()
{
  sub_1B2073358();
  return sub_1B222A1E0();
}

uint64_t sub_1B206E854(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v13 = a2;
  sub_1B19F8E54(0, qword_1EEF62B10, (uint64_t (*)(void))sub_1B2073358, (uint64_t)&type metadata for EntityComponentReference.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2073358();
  sub_1B222A180();
  v15 = a3;
  v14 = 1;
  sub_1B1B6AEE0();
  sub_1B2229958();
  if (!v3)
  {
    v15 = v13;
    v14 = 0;
    sub_1B1A0895C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B206E9B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B2072FF4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B206E9E8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B206E854(a1, *v1, v1[1]);
}

uint64_t sub_1B206EA00(char *a1, char *a2)
{
  return sub_1B1F95634(*a1, *a2);
}

uint64_t sub_1B206EA0C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206EA8C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B206EAE8()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206EB64@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B206EB70(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7865646E69;
  if (*v1)
    v2 = 0x69746172656E6567;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xEA00000000006E6FLL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B206EBB0()
{
  _BYTE *v0;

  if (*v0)
    return 0x69746172656E6567;
  else
    return 0x7865646E69;
}

uint64_t sub_1B206EBEC@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B206EBF8()
{
  sub_1B2073E94();
  return sub_1B222A1D4();
}

uint64_t sub_1B206EC20()
{
  sub_1B2073E94();
  return sub_1B222A1E0();
}

uint64_t sub_1B206EC48(char *a1, char *a2)
{
  return sub_1B1F903C0(*a1, *a2);
}

uint64_t sub_1B206EC54()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206ECCC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B206ED20()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206ED94@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B206EDA0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (*v1)
    v2 = 0x73746E65746E6F63;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B206EDD8()
{
  _BYTE *v0;

  if (*v0)
    return 0x73746E65746E6F63;
  else
    return 1701869940;
}

uint64_t sub_1B206EE0C@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B206EE18()
{
  sub_1B2073D64();
  return sub_1B222A1D4();
}

uint64_t sub_1B206EE40()
{
  sub_1B2073D64();
  return sub_1B222A1E0();
}

uint64_t sub_1B206EE68(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F8E01C(*a1, *a2);
}

uint64_t sub_1B206EE74()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206EF10()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B206EF88()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B206F020@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B206FC9C();
  *a1 = result;
  return result;
}

void sub_1B206F04C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xEA00000000007374;
  v5 = 0x6E656E6F706D6F63;
  if (v2 != 1)
  {
    v5 = 0x657669746361;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7865646E69;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B206F0A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E656E6F706D6F63;
  if (*v0 != 1)
    v1 = 0x657669746361;
  if (*v0)
    return v1;
  else
    return 0x7865646E69;
}

uint64_t sub_1B206F100@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B206FC9C();
  *a1 = result;
  return result;
}

uint64_t sub_1B206F124()
{
  sub_1B20733A8();
  return sub_1B222A1D4();
}

uint64_t sub_1B206F14C()
{
  sub_1B20733A8();
  return sub_1B222A1E0();
}

uint64_t sub_1B206F174()
{
  return swift_deallocObject();
}

_QWORD *sub_1B206F184()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)thread_serialization_context();
  *result = v1;
  return result;
}

void sub_1B206F1AC(_QWORD *a1, _QWORD *a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;

  v5 = a1[2];
  if (!v5)
    goto LABEL_6;
  v6 = a2[2];
  if (!v6)
    goto LABEL_6;
  v9 = a1[4];
  v10 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)*a4;
  v13 = sub_1B1DC3CA4(v9);
  v15 = v14;
  v16 = v12[2] + ((v14 & 1) == 0);
  if (v12[3] < v16)
  {
    sub_1B1E93E90(v16, a3 & 1);
    v13 = sub_1B1DC3CA4(v9);
    if ((v15 & 1) != (v17 & 1))
    {
LABEL_5:
      sub_1B2229FC4();
      __break(1u);
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
LABEL_8:
    if ((v15 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
    goto LABEL_8;
  v20 = v13;
  sub_1B1EA9B9C();
  v13 = v20;
  if ((v15 & 1) != 0)
  {
LABEL_9:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1B2229430();
      sub_1B2228890();
      sub_1B22295EC();
      sub_1B2228890();
      sub_1B2229688();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

    }
    return;
  }
LABEL_12:
  v21 = (_QWORD *)*a4;
  *(_QWORD *)(*a4 + 8 * (v13 >> 6) + 64) |= 1 << v13;
  v22 = 8 * v13;
  *(_QWORD *)(v21[6] + v22) = v9;
  *(_QWORD *)(v21[7] + v22) = v10;
  ++v21[2];
  if (v5 != 1 && v6 != 1)
  {
    v23 = a1 + 5;
    v24 = v6 - 2;
    v25 = a2 + 5;
    for (i = v5 - 2; ; --i)
    {
      v27 = *v23;
      v28 = *v25;
      v29 = *v23;
      v30 = (_QWORD *)*a4;
      v31 = sub_1B1DC3CA4(*v23);
      v33 = v32;
      if (v30[3] < (int64_t)(v30[2] + ((v32 & 1) == 0)))
      {
        sub_1B1E93E90(v30[2] + ((v32 & 1) == 0), 1);
        v31 = sub_1B1DC3CA4(v29);
        if ((v33 & 1) != (v34 & 1))
          break;
      }
      if ((v33 & 1) != 0)
        goto LABEL_9;
      v35 = (_QWORD *)*a4;
      *(_QWORD *)(*a4 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v36 = 8 * v31;
      *(_QWORD *)(v35[6] + v36) = v27;
      *(_QWORD *)(v35[7] + v36) = v28;
      ++v35[2];
      if (!i || !v24)
        goto LABEL_14;
      --v24;
      ++v25;
      ++v23;
    }
    goto LABEL_5;
  }
LABEL_14:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1B206F554(unint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _BOOL4 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t result;
  _DWORD v60[2];
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;

  sub_1B1B1F358();
  v71 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v70 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B222820C();
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v67 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0DEE9D8];
  v79 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v60[1] = sub_1B1DA5684(a1);
  v73 = a2;
  v11 = sub_1B1FE162C(a1);
  v12 = v11;
  *(_QWORD *)&v75 = v10;
  v13 = *(_QWORD *)(v11 + 16);
  v61 = a1;
  if (v13)
  {
    v14 = 0;
    v64 = 0xD000000000000071;
    v63 = 0x80000001B2349B00;
    v62 = xmmword_1B226D240;
    v66 = v11;
    v65 = v13;
    do
    {
      v74 = *(_OWORD *)(v12 + 16 * v14 + 32);
      v18 = v74;
      if (swift_conformsToProtocol2())
        v19 = v18;
      else
        v19 = 0;
      if (!v19)
      {
        if (sub_1B1FD50CC(v18))
        {
          v31 = v75;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202A1B4(0, *(_QWORD *)(v31 + 16) + 1, 1);
            v31 = v75;
          }
          v15 = v74;
          v17 = *(_QWORD *)(v31 + 16);
          v16 = *(_QWORD *)(v31 + 24);
          if (v17 >= v16 >> 1)
          {
            sub_1B202A1B4(v16 > 1, v17 + 1, 1);
            v15 = v74;
            v31 = v75;
          }
          *(_QWORD *)(v31 + 16) = v17 + 1;
          *(_OWORD *)(v31 + 16 * v17 + 32) = v15;
        }
        else
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          v77 = 0;
          v78 = 0xE000000000000000;
          *(_QWORD *)&v74 = qword_1ED4D0FB0;
          swift_retain();
          sub_1B2229430();
          sub_1B222A210();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v21 = v77;
          v20 = v78;
          v22 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v23 = qword_1ED4D0FD0;
          v24 = qword_1ED4BF688;
          swift_retain();
          if (v24 != -1)
            swift_once();
          sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = v62;
          *(_QWORD *)(v25 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v25 + 64) = sub_1B1B1F47C();
          *(_QWORD *)(v25 + 32) = v21;
          *(_QWORD *)(v25 + 40) = v20;
          swift_bridgeObjectRetain();
          sub_1B222835C();
          swift_bridgeObjectRelease();
          swift_retain();
          v26 = v67;
          sub_1B2228200();
          v27 = (uint64_t)v70;
          v28 = v71[12];
          v72 = v23;
          v29 = v71[16];
          v30 = &v70[v71[20]];
          (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v70, v26, v69);
          *(_BYTE *)(v27 + v28) = v22;
          *(_QWORD *)(v27 + v29) = 0;
          *(_QWORD *)v30 = v21;
          *((_QWORD *)v30 + 1) = v20;
          swift_bridgeObjectRetain();
          sub_1B2228428();
          swift_release();
          sub_1B1A04628(v27, (uint64_t (*)(_QWORD))sub_1B1B1F358);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v12 = v66;
          v13 = v65;
        }
      }
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
    v32 = v75;
    a1 = v61;
  }
  else
  {
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v74 = *(_QWORD *)(v32 + 16);
  if ((_QWORD)v74)
  {
    v33 = 0;
    v34 = (_QWORD *)(v73 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v72 = v32 + 32;
    v36 = (_DWORD)a1 == -1 && HIDWORD(a1) == 0;
    LODWORD(v71) = v36;
    v69 = v32;
    v70 = (char *)(a1 << 32);
    while ((v71 & 1) == 0)
    {
      if ((uint64_t)v70 < (uint64_t)0xFFFFFFFF00000001)
        break;
      if ((int)a1 >= v34[1])
        break;
      v37 = *(_OWORD *)(v72 + 16 * v33);
      v38 = *v34 + 12 * (int)a1;
      v39 = *(__int16 *)(v38 + 4);
      if (HIDWORD(a1) != -1 && *(_DWORD *)(v38 + 8) != HIDWORD(a1))
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v73 + 136) + 8 * *(int *)(*v34 + 12 * (int)a1) + 32);
      v41 = *(_QWORD *)(v40 + 48);
      v42 = *(_QWORD *)(v41 + 16);
      if (!v42)
        break;
      ++v33;
      v43 = v37;
      v44 = v41 + 56;
      while (*(_QWORD *)(v44 - 24) != (_QWORD)v37)
      {
        v44 += 40;
        if (!--v42)
          goto LABEL_51;
      }
      v47 = v44 - 8;
      v46 = *(_QWORD *)(v44 - 8);
      v45 = *(_QWORD *)(v47 + 8);
      if (v46 <= 1)
        v46 = 1;
      v48 = *(_QWORD *)(v40 + 128) + v45 + v46 * v39;
      v76 = v37;
      v49 = sub_1B1A137F4((uint64_t *)&v75);
      sub_1B1F28148(v48, v43, (uint64_t)v49);
      sub_1B1A02518(&v75, (uint64_t)&v77);
      sub_1B19FA198((uint64_t)&v77, (uint64_t)&v75);
      v50 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v50 = sub_1B1C670C0(0, v50[2] + 1, 1, v50);
        v79 = v50;
      }
      v52 = v50[2];
      v51 = v50[3];
      if (v52 >= v51 >> 1)
        v79 = sub_1B1C670C0(v51 > 1, v52 + 1, 1, v50);
      v53 = v76;
      v54 = sub_1B19FC264((uint64_t)&v75, v76);
      v55 = MEMORY[0x1E0C80A78](v54, v54);
      v57 = (char *)v60 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v58 + 16))(v57, v55);
      sub_1B1DACB58(v52, (uint64_t)v57, (uint64_t *)&v79, v53, *((uint64_t *)&v53 + 1));
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v75);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v77);
      if (v33 == (_QWORD)v74)
      {
        swift_release();
        a1 = v61;
        goto LABEL_50;
      }
    }
LABEL_51:
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    swift_release();
LABEL_50:
    swift_release();
    return a1;
  }
  return result;
}

uint64_t sub_1B206FC9C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B206FCE4()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

unint64_t sub_1B206FD2C()
{
  unint64_t result;

  result = qword_1ED4B7D58;
  if (!qword_1ED4B7D58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5ACC, &type metadata for EntityCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D58);
  }
  return result;
}

unint64_t sub_1B206FD70()
{
  unint64_t result;

  result = qword_1ED4B7D50;
  if (!qword_1ED4B7D50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5AA4, &type metadata for EntityCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D50);
  }
  return result;
}

void sub_1B206FDB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1ED4B8800)
  {
    sub_1B19F8E54(255, &qword_1ED4B7D08, (uint64_t (*)(void))sub_1B1C1ECE8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    v3 = v2;
    v4 = sub_1B206FE74(&qword_1ED4B7D00, (uint64_t)&unk_1B22B5A7C);
    v5 = sub_1B206FE74(&qword_1ED4B7CF8, (uint64_t)&unk_1B22B5A54);
    v6 = type metadata accessor for ParallelCoder(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1ED4B8800);
  }
}

uint64_t type metadata accessor for DecodeOrNil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DecodeOrNil);
}

uint64_t sub_1B206FE74(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B19F8E54(255, &qword_1ED4B7D08, (uint64_t (*)(void))sub_1B1C1ECE8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B206FED4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1ED4B8818)
  {
    sub_1B1A02758(255, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = v2;
    v4 = sub_1B206FF60();
    v5 = sub_1B206FFD8();
    v6 = type metadata accessor for ParallelCoder(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1ED4B8818);
  }
}

unint64_t sub_1B206FF60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4B8F00;
  if (!qword_1ED4B8F00)
  {
    sub_1B1A02758(255, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1B1C1ECE8();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F00);
  }
  return result;
}

unint64_t sub_1B206FFD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4B8EF8;
  if (!qword_1ED4B8EF8)
  {
    sub_1B1A02758(255, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1B1C1ED2C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EF8);
  }
  return result;
}

unint64_t sub_1B2070050()
{
  unint64_t result;

  result = qword_1ED4B8AC0;
  if (!qword_1ED4B8AC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B17E0, &type metadata for RelationsCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B8AC0);
  }
  return result;
}

unint64_t sub_1B2070094()
{
  unint64_t result;

  result = qword_1ED4B8AB8;
  if (!qword_1ED4B8AB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B17B8, &type metadata for RelationsCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B8AB8);
  }
  return result;
}

void sub_1B20700D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3();
    v10 = a4();
    v11 = type metadata accessor for ParallelCoder(a1, a5, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

unint64_t sub_1B2070148()
{
  unint64_t result;

  result = qword_1ED4B9230;
  if (!qword_1ED4B9230)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B59DC, &type metadata for EntityManagerCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B9230);
  }
  return result;
}

unint64_t sub_1B207018C()
{
  unint64_t result;

  result = qword_1EEF62A20[0];
  if (!qword_1EEF62A20[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B59B4, &type metadata for EntityManagerCoder);
    atomic_store(result, qword_1EEF62A20);
  }
  return result;
}

uint64_t destroy for EntityManagerCoder()
{
  swift_bridgeObjectRelease();
  return swift_unownedRelease();
}

_QWORD *_s3VFX18EntityManagerCoderVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_unownedRetain();
  a1[1] = v3;
  return a1;
}

_QWORD *assignWithCopy for EntityManagerCoder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = swift_unownedRetain();
  swift_unownedRelease();
  return a1;
}

_OWORD *assignWithTake for EntityManagerCoder(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_unownedRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EntityManagerCoder()
{
  return &type metadata for EntityManagerCoder;
}

uint64_t storeEnumTagSinglePayload for ValueCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B207031C + 4 * byte_1B22B55C3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B207033C + 4 * byte_1B22B55C8[v4]))();
}

_BYTE *sub_1B207031C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B207033C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2070344(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B207034C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2070354(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B207035C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ValueCodingKeys()
{
  return &type metadata for ValueCodingKeys;
}

uint64_t sub_1B2070378()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2229124();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B20703E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1B20704BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1B2070518(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1B20705B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_1B2070690(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1B2070728(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_1B2070808(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1B2070948(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1B2070AF0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1B2070AF8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_1B2070B20(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EntityCoder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EntityCoder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EntityCoder()
{
  return &type metadata for EntityCoder;
}

uint64_t sub_1B2070BFC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B2070C78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_1B2070D1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1B2070D3C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1B2070D8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1B2070DDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1B2070E2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1B2070E7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B2070F3C + 4 * byte_1B22B55DB[(v8 - 1)]))();
}

void sub_1B2070F9C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for VersionedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VersionedContainer);
}

ValueMetadata *type metadata accessor for EntityComponentReference()
{
  return &type metadata for EntityComponentReference;
}

void type metadata accessor for FastDictCoder()
{
  JUMPOUT(0x1B5E23DD8);
}

uint64_t destroy for StringCodingKeys()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StringCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StringCodingKeys(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StringCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StringCodingKeys()
{
  return &type metadata for StringCodingKeys;
}

unint64_t sub_1B2071278()
{
  unint64_t result;

  result = qword_1EEF62AA8;
  if (!qword_1EEF62AA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5914, &type metadata for ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62AA8);
  }
  return result;
}

unint64_t sub_1B20712C0()
{
  unint64_t result;

  result = qword_1ED4B8D68;
  if (!qword_1ED4B8D68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B58C4, &type metadata for ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D68);
  }
  return result;
}

unint64_t sub_1B2071308()
{
  unint64_t result;

  result = qword_1ED4B8D60;
  if (!qword_1ED4B8D60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B58EC, &type metadata for ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D60);
  }
  return result;
}

unint64_t sub_1B2071350()
{
  unint64_t result;

  result = qword_1ED4B8EA0;
  if (!qword_1ED4B8EA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5824, &type metadata for StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EA0);
  }
  return result;
}

unint64_t sub_1B2071398()
{
  unint64_t result;

  result = qword_1ED4B8EA8;
  if (!qword_1ED4B8EA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B584C, &type metadata for StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EA8);
  }
  return result;
}

uint64_t sub_1B20713DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v4 = 0;
  v5 = a1 + 32;
  v6 = MEMORY[0x1E0DEE9D8];
  do
  {
    v7 = v4;
    while (1)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v16 = *(_OWORD *)(v5 + 16 * v7);
        sub_1B1DC3CA4(*(_QWORD *)(v5 + 16 * v7));
        if ((v8 & 1) != 0)
        {
          if (*(_QWORD *)(a2 + 16))
          {
            sub_1B1DC3CA4(DWORD2(v16) | ((unint64_t)HIDWORD(v16) << 32));
            if ((v9 & 1) != 0)
              break;
          }
        }
      }
      if (v2 == ++v7)
        return v6;
    }
    v17 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_1B202B1D8(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v11 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    v12 = v11 + 1;
    if (v11 >= v10 >> 1)
    {
      v13 = v11 + 1;
      v15 = v11;
      sub_1B202B1D8(v10 > 1, v11 + 1, 1);
      v11 = v15;
      v12 = v13;
      v6 = v17;
    }
    v4 = v7 + 1;
    *(_QWORD *)(v6 + 16) = v12;
    *(_OWORD *)(v6 + 16 * v11 + 32) = v16;
  }
  while (v2 - 1 != v7);
  return v6;
}

uint64_t sub_1B2071534(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  char v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t DynamicType;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  _QWORD *v87;

  sub_1B19F8E54(0, &qword_1ED4BAA50, (uint64_t (*)(void))sub_1B20733A8, (uint64_t)&type metadata for EntityCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v74 - v7;
  v9 = MEMORY[0x1E0DEE9D8];
  v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  v12 = *(_QWORD *)(sub_1B2068150(v10, v11, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  if (v12 > 1999)
  {
    v13 = a1[4];
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      sub_1B19FA070(&v83, v84);
      v15 = sub_1B2229A54();
      v17 = v16;
      sub_1B19FC264((uint64_t)&v83, v84);
      v14 = sub_1B2229AB4();
      if ((v17 & 1) != 0 || v15 != 3)
      {
        v75 = 1;
      }
      else
      {
        sub_1B19FC264((uint64_t)&v83, v84);
        v75 = sub_1B2229A6C();
      }
      sub_1B19FC264((uint64_t)&v83, v84);
      sub_1B2229A3C();
      sub_1B1A02518(&v80, (uint64_t)v85);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v83);
      goto LABEL_12;
    }
LABEL_10:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return v13;
  }
  v13 = a1[3];
  sub_1B19FA070(a1, v13);
  sub_1B20733A8();
  sub_1B222A150();
  if (v1)
    goto LABEL_10;
  LOBYTE(v83) = 0;
  v14 = sub_1B2229838();
  LOBYTE(v80) = 1;
  sub_1B2229748();
  sub_1B1A02518(&v83, (uint64_t)v85);
  LOBYTE(v83) = 2;
  v19 = sub_1B2229784();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v75 = (v19 == 2) | v19;
LABEL_12:
  v20 = a1[3];
  v21 = a1[4];
  sub_1B19FA070(a1, v20);
  v22 = *(_QWORD *)(sub_1B2068150(v20, v21, MEMORY[0x1E0DEE238]) + 104);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(_QWORD *)(v22 + 16) && (v23 = sub_1B1DC3B14(v14), (v24 & 1) != 0))
  {
    v25 = (unsigned int *)(*(_QWORD *)(v22 + 56) + 8 * v23);
    v26 = *v25;
    v27 = v25[1];
  }
  else
  {
    v27 = 0;
    v26 = -1;
  }
  swift_bridgeObjectRelease();
  if (v26 != -1 || (_DWORD)v27)
  {
    v28 = a1[3];
    v29 = a1[4];
    sub_1B19FA070(a1, v28);
    v30 = MEMORY[0x1E0DEE238];
    v31 = sub_1B2068150(v28, v29, MEMORY[0x1E0DEE238]);
    v13 = v26 | (unint64_t)(v27 << 32);
    *(_QWORD *)(v31 + 40) = v13;
    *(_BYTE *)(v31 + 48) = 0;
    swift_release();
    v32 = a1[3];
    v33 = a1[4];
    sub_1B19FA070(a1, v32);
    *(_QWORD *)(sub_1B2068150(v32, v33, v30) + 72) = v9;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B19FA070(v85, v86);
    v34 = sub_1B2229A54();
    if ((v35 & 1) == 0)
    {
      for (i = v34; i; --i)
      {
        sub_1B19FC264((uint64_t)v85, v86);
        sub_1B20733EC();
        sub_1B2229AA8();
        sub_1B1A02518(&v79, (uint64_t)&v80);
        sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
        sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B8C70);
        swift_dynamicCast();
        sub_1B1A02518(&v78, (uint64_t)&v83);
        sub_1B19FA198((uint64_t)&v83, (uint64_t)&v80);
        v44 = v87;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v44 = sub_1B1C670C0(0, v44[2] + 1, 1, v44);
          v87 = v44;
        }
        v46 = v44[2];
        v45 = v44[3];
        if (v46 >= v45 >> 1)
          v87 = sub_1B1C670C0(v45 > 1, v46 + 1, 1, v44);
        v37 = v81;
        v38 = v82;
        v39 = sub_1B19FC264((uint64_t)&v80, v81);
        v40 = MEMORY[0x1E0C80A78](v39, v39);
        v42 = (char *)&v74 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v43 + 16))(v42, v40);
        sub_1B1DACB58(v46, (uint64_t)v42, (uint64_t *)&v87, v37, v38);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v80);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v83);
      }
      v47 = a1[3];
      v48 = a1[4];
      sub_1B19FA070(a1, v47);
      v49 = *(_QWORD *)(sub_1B2068150(v47, v48, MEMORY[0x1E0DEE238]) + 72);
      swift_bridgeObjectRetain();
      swift_release();
      v74 = v49;
      v77 = *(_QWORD *)(v49 + 16);
      if (v77)
      {
        v50 = 0;
        v76 = v74 + 32;
        do
        {
          sub_1B19FA198(v76 + 40 * v50, (uint64_t)&v83);
          sub_1B19FA070(&v83, v84);
          DynamicType = swift_getDynamicType();
          v52 = v87;
          v53 = v87[2];
          if (v53)
          {
            v54 = DynamicType;
            v55 = (uint64_t)(v87 + 4);
            swift_bridgeObjectRetain();
            do
            {
              sub_1B19FA198(v55, (uint64_t)&v80);
              sub_1B19FA070(&v80, v81);
              v56 = swift_getDynamicType();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v80);
              if (v56 == v54)
              {
                swift_bridgeObjectRelease();
                goto LABEL_30;
              }
              v55 += 40;
              --v53;
            }
            while (v53);
            swift_bridgeObjectRelease();
          }
          sub_1B19FA198((uint64_t)&v83, (uint64_t)&v80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v52 = sub_1B1C670C0(0, v52[2] + 1, 1, v52);
            v87 = v52;
          }
          v58 = v52[2];
          v57 = v52[3];
          if (v58 >= v57 >> 1)
            v87 = sub_1B1C670C0(v57 > 1, v58 + 1, 1, v52);
          v59 = v81;
          v60 = v82;
          v61 = sub_1B19FC264((uint64_t)&v80, v81);
          v62 = MEMORY[0x1E0C80A78](v61, v61);
          v64 = (char *)&v74 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v65 + 16))(v64, v62);
          sub_1B1DACB58(v58, (uint64_t)v64, (uint64_t *)&v87, v59, v60);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v80);
LABEL_30:
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v83);
          ++v50;
        }
        while (v50 != v77);
      }
      swift_bridgeObjectRelease();
    }
    v66 = a1[3];
    v67 = a1[4];
    sub_1B19FA070(a1, v66);
    v68 = sub_1B2068150(v66, v67, MEMORY[0x1E0DEE238]);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v70 = *(_QWORD *)(v68 + 72);
    if (isUniquelyReferenced_nonNull_native)
    {
      sub_1B1C94AB8(0, *(_QWORD *)(v70 + 16));
      swift_release();
    }
    else
    {
      *(_QWORD *)(v68 + 72) = sub_1B1B1CFE8(0, *(_QWORD *)(v70 + 24) >> 1);
      swift_release();
      swift_bridgeObjectRelease();
    }
    v71 = a1[3];
    v72 = a1[4];
    sub_1B19FA070(a1, v71);
    v73 = sub_1B2068150(v71, v72, MEMORY[0x1E0DEE238]);
    *(_QWORD *)(v73 + 40) = 0;
    *(_BYTE *)(v73 + 48) = 1;
    swift_release();
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v85);
  swift_bridgeObjectRetain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1B207210C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(void);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;

  sub_1B19F8E54(0, &qword_1ED4BAB90, (uint64_t (*)(void))sub_1B2073474, (uint64_t)&type metadata for EntityManagerCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v115 = *(_QWORD *)(v2 - 8);
  v116 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v107 - v4;
  v6 = a1[3];
  v7 = a1[4];
  sub_1B19FA070(a1, v6);
  v8 = sub_1B2068150(v6, v7, MEMORY[0x1E0DEE238]);
  v9 = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_release();
  v10 = *(unsigned int *)(v8 + 32);
  v11 = *(unsigned __int8 *)(v8 + 36);
  v12 = a1[3];
  v117 = a1;
  sub_1B19FA070(a1, v12);
  sub_1B2073474();
  v13 = v118;
  sub_1B222A150();
  if (v13)
  {
    swift_release();
    swift_unownedRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v117);
LABEL_4:
    swift_unownedRelease();
    return v11;
  }
  v112 = v11;
  v113 = v10;
  v114 = v9;
  v118 = (_QWORD *)v8;
  sub_1B1A02758(0, &qword_1ED4BA410, (uint64_t)&type metadata for EntityTableEntryCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  LOBYTE(v121) = 0;
  sub_1B20734B8();
  sub_1B2229814();
  v111 = v5;
  v15 = v122;
  v16 = *((_QWORD *)v122 + 2);
  v11 = (uint64_t)v117;
  if (v16)
  {
    v110 = 0;
    v121 = MEMORY[0x1E0DEE9D8];
    sub_1B202A38C(0, v16, 0);
    v17 = 0;
    v18 = v121;
    v19 = *(_QWORD *)(v121 + 16);
    do
    {
      v20 = *(_QWORD *)&v15[8 * v17 + 32];
      v121 = v18;
      v21 = *(_QWORD *)(v18 + 24);
      if (v19 >= v21 >> 1)
      {
        sub_1B202A38C(v21 > 1, v19 + 1, 1);
        v18 = v121;
      }
      ++v17;
      *(_QWORD *)(v18 + 16) = v19 + 1;
      *(_QWORD *)(v18 + 8 * v19++ + 32) = v20;
    }
    while (v16 != v17);
    swift_bridgeObjectRelease();
    v22 = v110;
  }
  else
  {
    v22 = 0;
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
  }
  v110 = *(_QWORD *)(v18 + 16);
  v23 = v114;
  swift_unownedRetainStrong();
  v24 = v23 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  v25 = (char *)MEMORY[0x1E0DEE9D8];
  v26 = sub_1B1DAD000(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8]);
  v28 = v27;
  v29 = sub_1B1DA8760(v26);
  if ((v30 & 1) != 0 || (v31 = sub_1B1DA87D4(v28, v29), (v31 & 0x100000000) != 0))
    LODWORD(v31) = sub_1B1DA8838(v26, v28, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8]);
  v32 = *(_QWORD *)(*(_QWORD *)(v23 + 80) + 8 * (int)v31 + 32);
  v33 = *(os_unfair_lock_s **)(v24 + 24);
  swift_retain();
  os_unfair_lock_unlock(v33);
  swift_release();
  v121 = 0;
  v122 = v25;
  swift_unownedRetainStrong();
  v34 = **(_QWORD **)(v23 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_release();
  v35 = *(_QWORD *)(v11 + 24);
  v36 = *(_QWORD *)(v11 + 32);
  sub_1B19FA070((_QWORD *)v11, v35);
  v37 = MEMORY[0x1E0DEE238];
  v38 = sub_1B2068150(v35, v36, MEMORY[0x1E0DEE238]);
  v39 = *(unsigned int *)(v38 + 32);
  v40 = *(_BYTE *)(v38 + 36);
  swift_release();
  swift_bridgeObjectRetain();
  v41 = v118;
  swift_retain();
  LOBYTE(v120) = v40;
  v109 = v32;
  sub_1B1F0FEAC(0, v32, 1, v39 | ((unint64_t)v40 << 32), v110, v34, &v122, v18, &v121, v41);
  swift_bridgeObjectRelease_n();
  swift_release();
  v42 = v122;
  v43 = *(_QWORD *)(v11 + 24);
  v44 = *(_QWORD *)(v11 + 32);
  sub_1B19FA070((_QWORD *)v11, v43);
  swift_bridgeObjectRetain_n();
  v45 = *(_QWORD *)(sub_1B2068150(v43, v44, v37) + 24);
  swift_release();
  if (v45 >= 1107)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    LOBYTE(v119) = 3;
    sub_1B1E0F91C();
    v46 = v116;
    v47 = v111;
    sub_1B2229814();
    if (v22)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(v47, v46);
LABEL_45:
      swift_release();
      swift_release();
      swift_unownedRelease();
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    v22 = 0;
    v48 = v120;
    v49 = *(_QWORD *)(v11 + 24);
    v50 = *(_QWORD *)(v11 + 32);
    sub_1B19FA070((_QWORD *)v11, v49);
    v51 = MEMORY[0x1E0DEE238];
    sub_1B2068150(v49, v50, MEMORY[0x1E0DEE238]);
    v52 = *(_QWORD *)(v11 + 24);
    v53 = *(_QWORD *)(v11 + 32);
    sub_1B19FA070((_QWORD *)v11, v52);
    v54 = *(_QWORD *)(sub_1B2068150(v52, v53, v51) + 24);
    swift_release();
    sub_1B2069964(v48, v54, 0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  v55 = *(_QWORD *)(v11 + 24);
  v56 = *(_QWORD *)(v11 + 32);
  sub_1B19FA070((_QWORD *)v11, v55);
  v57 = *(_QWORD *)(sub_1B2068150(v55, v56, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  v58 = v116;
  v59 = v111;
  v60 = v22;
  if (v57 >= 2002)
  {
    v61 = *(_QWORD *)(v11 + 24);
    v62 = *(_QWORD *)(v11 + 32);
    sub_1B19FA070((_QWORD *)v11, v61);
    v63 = MEMORY[0x1E0DEE238];
    v64 = *(unsigned __int8 *)(sub_1B2068150(v61, v62, MEMORY[0x1E0DEE238]) + 86);
    swift_release();
    v65 = *(_QWORD *)(v11 + 24);
    v66 = *(_QWORD *)(v11 + 32);
    sub_1B19FA070((_QWORD *)v11, v65);
    *(_BYTE *)(sub_1B2068150(v65, v66, v63) + 86) = 0;
    swift_release();
    v67 = *(_QWORD *)(v11 + 24);
    v68 = *(_QWORD *)(v11 + 32);
    sub_1B19FA070((_QWORD *)v11, v67);
    v69 = *(_QWORD *)(sub_1B2068150(v67, v68, v63) + 24);
    swift_release();
    if (v69 < 2012)
    {
      sub_1B1A02758(0, &qword_1EEF62AD8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      LOBYTE(v119) = 4;
      sub_1B2073664();
      sub_1B2229814();
      if (!v60)
      {
        LODWORD(v108) = v64;
        v73 = sub_1B1C51890(v120);
        swift_bridgeObjectRelease();
LABEL_33:
        v79 = *(_QWORD *)(v11 + 24);
        v80 = *(_QWORD *)(v11 + 32);
        sub_1B19FA070((_QWORD *)v11, v79);
        v81 = MEMORY[0x1E0DEE238];
        *(_QWORD *)(sub_1B2068150(v79, v80, MEMORY[0x1E0DEE238]) + 136) = v73;
        swift_release();
        swift_bridgeObjectRelease();
        v82 = *(_QWORD *)(v11 + 24);
        v83 = *(_QWORD *)(v11 + 32);
        sub_1B19FA070((_QWORD *)v11, v82);
        v84 = sub_1B2068150(v82, v83, v81);
        *(_BYTE *)(v84 + 86) = (_BYTE)v108;
        swift_release();
        v58 = v116;
        goto LABEL_34;
      }
    }
    else
    {
      sub_1B206FDB4(0);
      LOBYTE(v119) = 4;
      sub_1B19E52CC(&qword_1ED4B87F8, (uint64_t (*)(uint64_t))sub_1B206FDB4, (uint64_t)&unk_1B22A1098);
      sub_1B2229814();
      if (!v60)
      {
        LODWORD(v108) = v64;
        v70 = *(_QWORD *)(v120 + 16);
        if (v70)
        {
          v110 = 0;
          v119 = MEMORY[0x1E0DEE9D8];
          v107 = v120;
          sub_1B202B0D8(0, v70, 0);
          v71 = v107;
          v72 = 0;
          v73 = v119;
          v74 = *(_QWORD *)(v119 + 16);
          do
          {
            v75 = *(_QWORD *)(v71 + 8 * v72 + 32);
            v119 = v73;
            v76 = *(_QWORD *)(v73 + 24);
            swift_retain();
            if (v74 >= v76 >> 1)
            {
              sub_1B202B0D8(v76 > 1, v74 + 1, 1);
              v71 = v107;
              v73 = v119;
            }
            ++v72;
            *(_QWORD *)(v73 + 16) = v74 + 1;
            *(_QWORD *)(v73 + 8 * v74++ + 32) = v75;
          }
          while (v70 != v72);
          swift_bridgeObjectRelease();
          v60 = v110;
          v59 = v111;
        }
        else
        {
          swift_bridgeObjectRelease();
          v73 = MEMORY[0x1E0DEE9D8];
        }
        goto LABEL_33;
      }
    }
    swift_unownedRelease();
    swift_bridgeObjectRelease();
    v77 = *(_QWORD *)(v11 + 24);
    v78 = *(_QWORD *)(v11 + 32);
    sub_1B19FA070((_QWORD *)v11, v77);
    *(_BYTE *)(sub_1B2068150(v77, v78, MEMORY[0x1E0DEE238]) + 86) = v64;
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v59, v58);
LABEL_46:
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v11);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
LABEL_34:
  v85 = *(_QWORD *)(v11 + 24);
  v86 = *(_QWORD *)(v11 + 32);
  sub_1B19FA070((_QWORD *)v11, v85);
  v87 = *(_QWORD *)(sub_1B2068150(v85, v86, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  if (v87 >= 2004)
  {
    sub_1B1A02758(0, &qword_1ED4BA3A8, (uint64_t)&type metadata for RelationsCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    LOBYTE(v119) = 2;
    sub_1B20735EC();
    sub_1B2229814();
    if (v60)
    {
LABEL_44:
      (*(void (**)(char *, uint64_t))(v115 + 8))(v59, v58);
      goto LABEL_45;
    }
    v88 = v42;
    v89 = *(_QWORD *)(v120 + 16);
    v90 = v114;
    if (v89)
    {
      v91 = (uint64_t *)(v120 + 48);
      do
      {
        v92 = *(v91 - 2);
        v93 = *(v91 - 1);
        v94 = *v91;
        v91 += 3;
        swift_unownedRetainStrong();
        swift_bridgeObjectRetain();
        sub_1B20208D8(v90, v92, v93, v94);
        swift_bridgeObjectRelease();
        swift_release();
        --v89;
      }
      while (v89);
    }
    swift_bridgeObjectRelease();
    v60 = 0;
    v59 = v111;
    v42 = v88;
    v58 = v116;
  }
  v95 = *(_QWORD *)(v11 + 24);
  v96 = *(_QWORD *)(v11 + 32);
  sub_1B19FA070((_QWORD *)v11, v95);
  v97 = *(_QWORD *)(sub_1B2068150(v95, v96, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  if (v97 > 2011)
  {
    sub_1B20700D8(0, &qword_1ED4B87E8, (uint64_t (*)(void))sub_1B206FD2C, (uint64_t (*)(void))sub_1B206FD70, (uint64_t)&type metadata for EntityCoder);
    LOBYTE(v119) = 1;
    sub_1B207372C(&qword_1ED4B87E0, (uint64_t)&unk_1B22A1098);
  }
  else
  {
    sub_1B1A02758(0, &qword_1EEF62AC8, (uint64_t)&type metadata for EntityCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    LOBYTE(v119) = 1;
    sub_1B2073574();
  }
  sub_1B2229814();
  if (v60)
    goto LABEL_44;
  v110 = 0;
  v108 = v42;
  v98 = *(_QWORD *)(v120 + 16);
  if (v98)
  {
    v99 = (uint64_t *)(v120 + 48);
    v101 = v113;
    v100 = v114;
    v102 = v112;
    do
    {
      v103 = *(v99 - 2);
      v104 = *((_BYTE *)v99 - 8);
      v105 = *v99;
      v99 += 3;
      swift_unownedRetainStrong();
      swift_bridgeObjectRetain();
      LOBYTE(v120) = v102;
      sub_1B206BA20(v100, v101 | ((unint64_t)v102 << 32), v103, v104, v105, v106);
      swift_bridgeObjectRelease();
      swift_release();
      --v98;
    }
    while (v98);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v111, v116);
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v11);
  v11 = (uint64_t)v108;
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return v11;
}

uint64_t sub_1B2072D6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v20[4];

  sub_1B19F8E54(0, &qword_1ED4BABD8, (uint64_t (*)(void))sub_1B2073E94, (uint64_t)&type metadata for EntityTableEntryCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v20[-1] - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  v11 = *(_QWORD *)(sub_1B2068150(v9, v10, MEMORY[0x1E0DEE238]) + 24);
  swift_release();
  if (v11 >= 2000)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      v12 = a1[3];
      v13 = a1[4];
      sub_1B19FA070(a1, v12);
      v14 = *(_QWORD *)(sub_1B2068150(v12, v13, MEMORY[0x1E0DEE238]) + 24);
      swift_release();
      sub_1B19FA070(v20, v20[3]);
      if (v14 > 2007)
      {
        v16 = sub_1B2229D78();
        v17 = 0xFFFFFFFFLL;
      }
      else
      {
        v15 = sub_1B2229D90();
        v16 = v15;
        v17 = HIDWORD(v15);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
      goto LABEL_10;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B2073E94();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v20[0]) = 0;
  v16 = sub_1B2229838();
  LOBYTE(v20[0]) = 1;
  v17 = sub_1B2229838();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_10:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v16 | (unint64_t)(v17 << 32);
}

uint64_t sub_1B2072FF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD v12[2];
  uint64_t v13;

  sub_1B19F8E54(0, &qword_1EEF62AB0, (uint64_t (*)(void))sub_1B2073358, (uint64_t)&type metadata for EntityComponentReference.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2073358();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v13) = 1;
  sub_1B1B6AE04();
  sub_1B2229814();
  LOBYTE(v13) = 0;
  sub_1B1A08878();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v9 = v12[0];
  v10 = (unint64_t)v12[1] << 32;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10 | v9;
}

unint64_t sub_1B2073358()
{
  unint64_t result;

  result = qword_1EEF62AB8;
  if (!qword_1EEF62AB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B61E8, &type metadata for EntityComponentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62AB8);
  }
  return result;
}

uint64_t type metadata accessor for VersionedContainer.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VersionedContainer.CodingKeys);
}

unint64_t sub_1B20733A8()
{
  unint64_t result;

  result = qword_1ED4B7D38;
  if (!qword_1ED4B7D38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6148, &type metadata for EntityCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D38);
  }
  return result;
}

unint64_t sub_1B20733EC()
{
  unint64_t result;

  result = qword_1ED4B8A20;
  if (!qword_1ED4B8A20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6120, &type metadata for ComponentCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A20);
  }
  return result;
}

unint64_t sub_1B2073430()
{
  unint64_t result;

  result = qword_1EEF62AC0;
  if (!qword_1EEF62AC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B60F8, &type metadata for ComponentCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF62AC0);
  }
  return result;
}

unint64_t sub_1B2073474()
{
  unint64_t result;

  result = qword_1ED4B9218;
  if (!qword_1ED4B9218)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B60A8, &type metadata for EntityManagerCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9218);
  }
  return result;
}

unint64_t sub_1B20734B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA418;
  if (!qword_1ED4BA418)
  {
    sub_1B1A02758(255, &qword_1ED4BA410, (uint64_t)&type metadata for EntityTableEntryCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B2073530();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA418);
  }
  return result;
}

unint64_t sub_1B2073530()
{
  unint64_t result;

  result = qword_1ED4B9800;
  if (!qword_1ED4B9800)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6080, &type metadata for EntityTableEntryCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B9800);
  }
  return result;
}

unint64_t sub_1B2073574()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF62AD0;
  if (!qword_1EEF62AD0)
  {
    sub_1B1A02758(255, &qword_1EEF62AC8, (uint64_t)&type metadata for EntityCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B206FD2C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF62AD0);
  }
  return result;
}

unint64_t sub_1B20735EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA3B0;
  if (!qword_1ED4BA3B0)
  {
    sub_1B1A02758(255, &qword_1ED4BA3A8, (uint64_t)&type metadata for RelationsCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B2070050();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA3B0);
  }
  return result;
}

unint64_t sub_1B2073664()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF62AE0;
  if (!qword_1EEF62AE0)
  {
    sub_1B1A02758(255, &qword_1EEF62AD8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1ECE8();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF62AE0);
  }
  return result;
}

uint64_t sub_1B20736DC(uint64_t a1)
{
  uint64_t v1;

  return sub_1B206DB58(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32));
}

unint64_t sub_1B20736E8()
{
  unint64_t result;

  result = qword_1EEF62AF0;
  if (!qword_1EEF62AF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6058, &type metadata for EntityTableEntryCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF62AF0);
  }
  return result;
}

uint64_t sub_1B207372C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B20700D8(255, &qword_1ED4B87E8, (uint64_t (*)(void))sub_1B206FD2C, (uint64_t (*)(void))sub_1B206FD70, (uint64_t)&type metadata for EntityCoder);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B207378C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B206C504(a1, *(_QWORD **)(v2 + 32), a2);
}

unint64_t sub_1B20737AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF62B08;
  if (!qword_1EEF62B08)
  {
    sub_1B1A02758(255, &qword_1ED4BA3A8, (uint64_t)&type metadata for RelationsCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B2070094();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF62B08);
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityTableEntryCoder()
{
  return &type metadata for EntityTableEntryCoder;
}

uint64_t storeEnumTagSinglePayload for EntityManagerCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B2073880 + 4 * byte_1B22B55F6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B20738B4 + 4 * byte_1B22B55F1[v4]))();
}

uint64_t sub_1B20738B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20738BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20738C4);
  return result;
}

uint64_t sub_1B20738D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20738D8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B20738DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20738E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EntityManagerCoder.CodingKeys()
{
  return &type metadata for EntityManagerCoder.CodingKeys;
}

ValueMetadata *type metadata accessor for ComponentCoder()
{
  return &type metadata for ComponentCoder;
}

uint64_t storeEnumTagSinglePayload for EntityCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B207395C + 4 * byte_1B22B5600[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2073990 + 4 * byte_1B22B55FB[v4]))();
}

uint64_t sub_1B2073990(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2073998(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20739A0);
  return result;
}

uint64_t sub_1B20739AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20739B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B20739B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20739C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EntityCoder.CodingKeys()
{
  return &type metadata for EntityCoder.CodingKeys;
}

ValueMetadata *type metadata accessor for EntityComponentReference.CodingKeys()
{
  return &type metadata for EntityComponentReference.CodingKeys;
}

unint64_t sub_1B20739F4()
{
  unint64_t result;

  result = qword_1EEF62B98;
  if (!qword_1EEF62B98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5CF8, &type metadata for EntityComponentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62B98);
  }
  return result;
}

void sub_1B2073A38()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B2073A4C()
{
  unint64_t result;

  result = qword_1EEF62BA0;
  if (!qword_1EEF62BA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5ED8, &type metadata for EntityCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62BA0);
  }
  return result;
}

unint64_t sub_1B2073A94()
{
  unint64_t result;

  result = qword_1EEF62BA8;
  if (!qword_1EEF62BA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5FC8, &type metadata for EntityManagerCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62BA8);
  }
  return result;
}

unint64_t sub_1B2073ADC()
{
  unint64_t result;

  result = qword_1EEF62BB0;
  if (!qword_1EEF62BB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5FF0, &type metadata for EntityTableEntryCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF62BB0);
  }
  return result;
}

unint64_t sub_1B2073B24()
{
  unint64_t result;

  result = qword_1ED4B9228;
  if (!qword_1ED4B9228)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5F00, &type metadata for EntityManagerCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9228);
  }
  return result;
}

unint64_t sub_1B2073B6C()
{
  unint64_t result;

  result = qword_1ED4B9220;
  if (!qword_1ED4B9220)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5F28, &type metadata for EntityManagerCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9220);
  }
  return result;
}

unint64_t sub_1B2073BB4()
{
  unint64_t result;

  result = qword_1ED4B7D48;
  if (!qword_1ED4B7D48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5E10, &type metadata for EntityCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D48);
  }
  return result;
}

unint64_t sub_1B2073BFC()
{
  unint64_t result;

  result = qword_1ED4B7D40;
  if (!qword_1ED4B7D40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5E38, &type metadata for EntityCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D40);
  }
  return result;
}

void sub_1B2073C40()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B2073C50()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B2073C64()
{
  unint64_t result;

  result = qword_1EEF62BB8;
  if (!qword_1EEF62BB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5C30, &type metadata for EntityComponentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62BB8);
  }
  return result;
}

unint64_t sub_1B2073CAC()
{
  unint64_t result;

  result = qword_1EEF62BC0;
  if (!qword_1EEF62BC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5C58, &type metadata for EntityComponentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62BC0);
  }
  return result;
}

void sub_1B2073CF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAA98)
  {
    sub_1B19F8E54(255, &qword_1ED4BAA90, (uint64_t (*)(void))sub_1B2073D64, (uint64_t)&type metadata for ComponentCoder.CodingKeys_pre2000, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAA98);
  }
}

unint64_t sub_1B2073D64()
{
  unint64_t result;

  result = qword_1ED4B8A08;
  if (!qword_1ED4B8A08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6484, &type metadata for ComponentCoder.CodingKeys_pre2000);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A08);
  }
  return result;
}

uint64_t sub_1B2073DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1CC6310(0, &qword_1ED4BB028, &qword_1ED4BB020, MEMORY[0x1E0DED218], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2073E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B2073CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2073E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B2073CF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B2073E94()
{
  unint64_t result;

  result = qword_1ED4B97E8;
  if (!qword_1ED4B97E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6434, &type metadata for EntityTableEntryCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B97E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityTableEntryCoder.CodingKeys()
{
  return &type metadata for EntityTableEntryCoder.CodingKeys;
}

uint64_t _s3VFX24EntityComponentReferenceV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B2073F34 + 4 * byte_1B22B560A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2073F68 + 4 * byte_1B22B5605[v4]))();
}

uint64_t sub_1B2073F68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2073F70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2073F78);
  return result;
}

uint64_t sub_1B2073F84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2073F8CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B2073F90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2073F98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComponentCoder.CodingKeys_pre2000()
{
  return &type metadata for ComponentCoder.CodingKeys_pre2000;
}

unint64_t sub_1B2073FB8()
{
  unint64_t result;

  result = qword_1EEF62BD0;
  if (!qword_1EEF62BD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B631C, &type metadata for ComponentCoder.CodingKeys_pre2000);
    atomic_store(result, (unint64_t *)&qword_1EEF62BD0);
  }
  return result;
}

unint64_t sub_1B2074000()
{
  unint64_t result;

  result = qword_1EEF62BD8;
  if (!qword_1EEF62BD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B640C, &type metadata for EntityTableEntryCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62BD8);
  }
  return result;
}

unint64_t sub_1B2074048()
{
  unint64_t result;

  result = qword_1ED4B97F8;
  if (!qword_1ED4B97F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6344, &type metadata for EntityTableEntryCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B97F8);
  }
  return result;
}

unint64_t sub_1B2074090()
{
  unint64_t result;

  result = qword_1ED4B97F0;
  if (!qword_1ED4B97F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B636C, &type metadata for EntityTableEntryCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B97F0);
  }
  return result;
}

unint64_t sub_1B20740D8()
{
  unint64_t result;

  result = qword_1ED4B8A18;
  if (!qword_1ED4B8A18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6254, &type metadata for ComponentCoder.CodingKeys_pre2000);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A18);
  }
  return result;
}

unint64_t sub_1B2074120()
{
  unint64_t result;

  result = qword_1ED4B8A10;
  if (!qword_1ED4B8A10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B627C, &type metadata for ComponentCoder.CodingKeys_pre2000);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A10);
  }
  return result;
}

_QWORD *sub_1B2074164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = swift_allocObject();
  v3 = OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  v4 = v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  *(_OWORD *)v4 = xmmword_1B2244C80;
  v5 = (uint64_t)a1 + v3;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  swift_retain();
  swift_retain();
  sub_1B2075BD8(v5, v4);
  v6 = (char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  v7 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 8);
  v8 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 32);
  v9 = *((_BYTE *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 40);
  v10 = *(_WORD *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 42);
  v11 = v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  *(_QWORD *)v11 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath);
  *(_QWORD *)(v11 + 8) = v7;
  *(_OWORD *)(v11 + 16) = *((_OWORD *)v6 + 1);
  *(_QWORD *)(v11 + 32) = v8;
  *(_BYTE *)(v11 + 40) = v9;
  *(_WORD *)(v11 + 42) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v12 = sub_1B1BCE388(a1);
  swift_release();
  return v12;
}

uint64_t sub_1B2074248()
{
  uint64_t v0;
  BOOL v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  sub_1B1FA3530(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)&v10);
  if (v10)
    v1 = 0;
  else
    v1 = v11 == 1;
  if (v1)
  {
    sub_1B1FA35C8((uint64_t)&v10);
    v7 = 0xE400000000000000;
    v5 = 1718379859;
  }
  else
  {
    sub_1B19FC2D0((uint64_t)&v10, (uint64_t)&v12);
    v2 = MEMORY[0x1B5E240CC](&v12);
    swift_unknownObjectRelease();
    if (v2)
    {
      if (MEMORY[0x1B5E240CC](&v12)
        && (v3 = v13,
            ObjectType = swift_getObjectType(),
            v5 = (*(uint64_t (**)(uint64_t, unint64_t))(v3 + 8))(ObjectType, v3),
            v7 = v6,
            swift_unknownObjectRelease(),
            v7))
      {
        sub_1B19FC350((uint64_t)&v12);
      }
      else
      {
        sub_1B19FC350((uint64_t)&v12);
        swift_bridgeObjectRelease();
        v7 = 0xE800000000000000;
        v5 = 0x3E656D616E6F6E3CLL;
      }
    }
    else
    {
      sub_1B19FC350((uint64_t)&v12);
      v7 = 0xEC0000003E646576;
      v5 = 0x6C6F7365726E753CLL;
    }
  }
  v12 = v5;
  v13 = v7;
  sub_1B2228890();
  v10 = 0;
  v11 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2229304();
  v10 = sub_1B222A210();
  v11 = v8;
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1B207440C()
{
  uint64_t v0;
  BOOL v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  _BYTE v9[8];
  uint64_t v10;

  sub_1B1FA3530(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)v8);
  if (v8[0])
    v1 = 0;
  else
    v1 = v8[1] == 1;
  if (v1)
  {
    sub_1B1FA35C8((uint64_t)v8);
    return 1718379859;
  }
  else
  {
    sub_1B19FC2D0((uint64_t)v8, (uint64_t)v9);
    if (MEMORY[0x1B5E240CC](v9))
    {
      v2 = v10;
      ObjectType = swift_getObjectType();
      v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
      v6 = v5;
      swift_unknownObjectRelease();
      if (!v6)
        v4 = 0x3E656D616E6F6E3CLL;
    }
    else
    {
      strcpy((char *)v8, "<unresolved:");
      BYTE5(v8[1]) = 0;
      HIWORD(v8[1]) = -5120;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v4 = v8[0];
    }
    sub_1B19FC350((uint64_t)v9);
  }
  return v4;
}

uint64_t sub_1B2074534()
{
  type metadata accessor for InspectorSetWorldValueNode(0);
  swift_dynamicCastClass();
  type metadata accessor for SetWorldValueNode(0);
  swift_dynamicCastClass();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B207440C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1B6A77C();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B20746B4()
{
  uint64_t v0;
  BOOL v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20[2];

  sub_1B1FA3530(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)&v18);
  if (v18)
    v1 = 0;
  else
    v1 = v19 == 1;
  if (v1)
  {
    sub_1B1FA35C8((uint64_t)&v18);
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v12 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v20[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v12, v20, 0xD000000000000055, 0x80000001B2349E20);
    swift_release();
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  sub_1B19FC2D0((uint64_t)&v18, (uint64_t)v20);
  v2 = MEMORY[0x1B5E240CC](v20);
  swift_unknownObjectRelease();
  if (!v2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v18 = 0;
    v19 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v18 = 0xD000000000000028;
    v19 = 0x80000001B2349DB0;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v13 = v18;
    v14 = v19;
    v15 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v18 = 0;
    swift_retain();
    sub_1B1F1AD70(v15, &v18, v13, v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B19FC350((uint64_t)v20);
    return MEMORY[0x1E0DEE9D8];
  }
  sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 8);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 32);
  v8 = *(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 40);
  v9 = *(_WORD *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 42);
  type metadata accessor for SetWorldValueNode(0);
  if (swift_dynamicCastClass())
    v10 = 2;
  else
    v10 = 1;
  v11 = swift_allocObject();
  v17 = *(_OWORD *)(v4 + 16);
  sub_1B1A00060((uint64_t)v20, v11 + 16);
  *(_QWORD *)(v11 + 48) = v6;
  *(_QWORD *)(v11 + 56) = v5;
  *(_OWORD *)(v11 + 64) = v17;
  *(_QWORD *)(v11 + 80) = v7;
  *(_BYTE *)(v11 + 88) = v8;
  *(_WORD *)(v11 + 90) = v9;
  *(_QWORD *)(v3 + 32) = v11 | 0x1000000000000000;
  *(_BYTE *)(v3 + 40) = v10;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 56) = 1;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B19FC350((uint64_t)v20);
  return v3;
}

void sub_1B2074A08()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B2074A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t ObjectType;
  _QWORD v8[4];
  _BYTE v9[32];

  v4 = v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  sub_1B1FA3530(v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)v8);
  if (v8[0])
    v5 = 0;
  else
    v5 = v8[1] == 1;
  if (v5)
    return sub_1B1FA35C8((uint64_t)v8);
  sub_1B19FC2D0((uint64_t)v8, (uint64_t)v9);
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(a2 + 16))(v9, ObjectType, a2);
  sub_1B1FA35C8(v4);
  return sub_1B19FC2D0((uint64_t)v9, v4);
}

uint64_t sub_1B2074AF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int16 v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  _BYTE v14[24];
  uint64_t v15;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B1FA3530(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)&v8);
  sub_1B19FC264((uint64_t)v14, v15);
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF60B50, (uint64_t)&type metadata for VFXBridgeableReference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B2075F68(&qword_1EEF62C58, (uint64_t (*)(void))sub_1B19FC3E4, MEMORY[0x1E0DEE988]);
  sub_1B2229BA4();
  sub_1B1FA35C8((uint64_t)&v8);
  if (!v2)
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 32);
    v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 40);
    v6 = *(_WORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 42);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath);
    v9 = *(_OWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 8);
    v10 = v3;
    v11 = v4;
    v12 = v5;
    v13 = v6;
    sub_1B19FC264((uint64_t)v14, v15);
    sub_1B1CAD980();
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
}

uint64_t sub_1B2074C58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  _BYTE v15[24];
  uint64_t v16;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A12C();
  if (!v2)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1EEF60B50, (uint64_t)&type metadata for VFXBridgeableReference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B19FC264((uint64_t)v15, v16);
    sub_1B2075F68(&qword_1EEF62C50, (uint64_t (*)(void))sub_1B19FC28C, MEMORY[0x1E0DEE9A0]);
    sub_1B2229AA8();
    sub_1B1FA3604((uint64_t)&v9, v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target);
    sub_1B19FC264((uint64_t)v15, v16);
    sub_1B1CAD7DC();
    sub_1B2229AA8();
    v4 = v11;
    v5 = v12;
    v6 = v13;
    v7 = v14;
    v8 = v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
    *(_QWORD *)v8 = v9;
    *(_OWORD *)(v8 + 8) = v10;
    *(_QWORD *)(v8 + 24) = v4;
    *(_QWORD *)(v8 + 32) = v5;
    *(_BYTE *)(v8 + 40) = v6;
    *(_WORD *)(v8 + 42) = v7;
    swift_release();
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
  }
  return result;
}

void sub_1B2074DE4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B2074E10()
{
  uint64_t v0;

  sub_1B1FA35C8(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2074E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1FA35C8(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B2074EE0()
{
  return type metadata accessor for _WorldValueNode(0);
}

uint64_t type metadata accessor for _WorldValueNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62BE0);
}

uint64_t sub_1B2074EFC()
{
  return sub_1B20759F0();
}

uint64_t sub_1B2074F10(_QWORD *a1)
{
  return sub_1B2074AF0(a1);
}

uint64_t sub_1B2074F24(_QWORD *a1)
{
  return sub_1B2074C58(a1);
}

uint64_t sub_1B2074F38(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 368))(a1 & 1);
}

uint64_t sub_1B2074F50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226CD10;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000008;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
  if (swift_conformsToProtocol2())
    v6 = v5;
  else
    v6 = 0;
  if (v6)
  {
    v7 = 0x8000000000000020;
  }
  else
  {
    v8 = sub_1B1D76F30(v5);
    if ((~v8 & 0xF000000000000007) != 0)
      v7 = v8;
    else
      v7 = 0x8000000000000000;
  }
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v3 + 40) = v9 | 0x6000000000000000;
  sub_1B1C71E04();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = sub_1B1B6A77C();
  v13 = v12;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 56) = v13;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  *(_QWORD *)(v14 + 32) = result | 0x6000000000000000;
  *a1 = v3;
  a1[1] = v14;
  a1[2] = (uint64_t)&unk_1E638FBB8;
  a1[3] = v10;
  v16 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v16;
  return result;
}

uint64_t sub_1B207512C()
{
  return sub_1B2075C34();
}

uint64_t sub_1B2075140()
{
  return type metadata accessor for SetWorldValueNode(0);
}

uint64_t type metadata accessor for SetWorldValueNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62BF0);
}

uint64_t sub_1B2075160()
{
  return type metadata accessor for InspectorSetWorldValueNode(0);
}

uint64_t type metadata accessor for InspectorSetWorldValueNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C00);
}

double sub_1B207517C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t inited;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1B1A02758(0, &qword_1EEF5E8F0, (uint64_t)&type metadata for AnyType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
  if (swift_conformsToProtocol2())
    v5 = v4;
  else
    v5 = 0;
  if (v5)
  {
    v6 = 0x8000000000000020;
  }
  else
  {
    v7 = sub_1B1D76F30(v4);
    v6 = 0x8000000000000000;
    if ((~v7 & 0xF000000000000007) != 0)
      v6 = v7;
  }
  *(_QWORD *)(inited + 32) = v6;
  sub_1B1BCF75C(inited, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1B1C71E04();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = sub_1B1B6A77C();
  v11 = v10;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v11;
  v12 = v17;
  v18 = v16;
  sub_1B1B28C6C((uint64_t)&v18);
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  return result;
}

uint64_t sub_1B20752E8()
{
  return type metadata accessor for GetWorldValueNode(0);
}

uint64_t type metadata accessor for GetWorldValueNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C10);
}

uint64_t sub_1B2075304()
{
  return swift_updateClassMetadata2();
}

double sub_1B2075338@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t inited;
  uint64_t v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  __int128 v8;

  sub_1B1A02758(0, &qword_1EEF5E8F0, (uint64_t)&type metadata for AnyType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind);
  *(_QWORD *)(inited + 32) = v4 | 0x5000000000000000;
  sub_1B1BCF75C(inited, v7);
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = v7[1];
  *a1 = v7[0];
  a1[1] = v5;
  result = *(double *)&v8;
  a1[2] = v8;
  return result;
}

uint64_t sub_1B2075408()
{
  return 0x666552646C726F57;
}

_QWORD *sub_1B207542C(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = *((_BYTE *)a1
                                                                   + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind);
  sub_1B1A00060((uint64_t)a1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B2075488()
{
  uint64_t v0;
  _BYTE v2[32];
  uint64_t v3;
  unint64_t v4;

  v3 = 0;
  v4 = 0xE000000000000000;
  sub_1B1A00060(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v2);
  sub_1B22295EC();
  sub_1B19FC350((uint64_t)v2);
  return v3;
}

uint64_t sub_1B20754EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[32];
  _BYTE v5[24];
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  v4[0] = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind);
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2075B94();
  sub_1B2229BA4();
  if (!v2)
  {
    sub_1B1A00060(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v4);
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B19FC3E4();
    sub_1B2229BA4();
    sub_1B19FC350((uint64_t)v4);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B20755F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[32];
  _BYTE v5[24];
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A12C();
  if (!v2)
  {
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B2075B50();
    sub_1B2229AA8();
    *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = v4[0];
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B19FC28C();
    sub_1B2229AA8();
    sub_1B1D8EB3C((uint64_t)v4, v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1B2075714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v1 = v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference;
  sub_1B1A00060(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)&v9);
  v2 = MEMORY[0x1B5E240CC](&v9);
  sub_1B19FC350((uint64_t)&v9);
  swift_unknownObjectRelease();
  if (!v2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v9 = 0;
    v10 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v9 = 0xD000000000000028;
    v10 = 0x80000001B2349DB0;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v3 = v9;
    v4 = v10;
    v5 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v9 = 0;
    swift_retain();
    sub_1B1F1AD70(v5, &v9, v3, v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  sub_1B1A00060(v1, (uint64_t)&v9);
  v7 = swift_allocObject();
  sub_1B19FC2D0((uint64_t)&v9, v7 + 16);
  *(_QWORD *)(v6 + 32) = v7 | 0x2000000000000000;
  *(_BYTE *)(v6 + 40) = 1;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 1;
  return v6;
}

void sub_1B2075910()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B207593C()
{
  uint64_t v0;

  return sub_1B19FC350(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
}

uint64_t sub_1B207594C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B19FC350(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
  return swift_deallocClassInstance();
}

uint64_t sub_1B20759C0()
{
  return type metadata accessor for WorldReferenceNode(0);
}

uint64_t type metadata accessor for WorldReferenceNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C20);
}

uint64_t sub_1B20759DC()
{
  return sub_1B20759F0();
}

uint64_t sub_1B20759F0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B2075A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  _BYTE v7[32];
  _BYTE v8[32];

  ObjectType = swift_getObjectType();
  v5 = v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference;
  sub_1B1A00060(v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v7);
  sub_1B1F02EAC((uint64_t)v7, ObjectType, a2, (uint64_t)v8);
  sub_1B19FC350((uint64_t)v7);
  return sub_1B1D8EB3C((uint64_t)v8, v5);
}

uint64_t sub_1B2075AB4(_QWORD *a1)
{
  return sub_1B20754EC(a1);
}

uint64_t sub_1B2075AC8(_QWORD *a1)
{
  return sub_1B20755F8(a1);
}

unint64_t sub_1B2075ADC()
{
  return 0xD000000000000016;
}

uint64_t sub_1B2075AF8()
{
  return type metadata accessor for ImplicitWorldReferenceNode(0);
}

uint64_t type metadata accessor for ImplicitWorldReferenceNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C30);
}

uint64_t sub_1B2075B14()
{
  return swift_deallocObject();
}

uint64_t sub_1B2075B24()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1B2075B50()
{
  unint64_t result;

  result = qword_1EEF62C40;
  if (!qword_1EEF62C40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292040, &type metadata for AnyType.WorldReferenceKind);
    atomic_store(result, (unint64_t *)&qword_1EEF62C40);
  }
  return result;
}

unint64_t sub_1B2075B94()
{
  unint64_t result;

  result = qword_1EEF62C48;
  if (!qword_1EEF62C48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292018, &type metadata for AnyType.WorldReferenceKind);
    atomic_store(result, (unint64_t *)&qword_1EEF62C48);
  }
  return result;
}

uint64_t sub_1B2075BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF60B50, (uint64_t)&type metadata for VFXBridgeableReference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2075C34()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  type metadata accessor for PartialComposeNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
    if (v1 >> 60 == 1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
      {
        type metadata accessor for NilNode(0);
        swift_retain();
        v3 = 0;
        for (i = 0; i != v2; ++i)
        {
          if (!swift_dynamicCastClass())
          {
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            swift_release();
            swift_bridgeObjectRelease();
          }
          v3 += 16;
        }
        swift_release();
        v5 = 0;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
    }
    swift_arrayDestroy();
  }
  else
  {
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return 0x6D6172617025;
  }
  return v5;
}

uint64_t sub_1B2075F44()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B2075F68(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1EEF60B50, (uint64_t)&type metadata for VFXBridgeableReference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B2075FE4()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B2076020()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  type metadata accessor for PartialComposeNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
    if (v1 >> 60 == 1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
      {
        type metadata accessor for NilNode(0);
        swift_retain();
        v3 = 0;
        for (i = 0; i != v2; ++i)
        {
          if (!swift_dynamicCastClass())
          {
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            swift_release();
            swift_bridgeObjectRelease();
          }
          v3 += 16;
        }
        swift_release();
        v5 = 0;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
    }
    swift_arrayDestroy();
  }
  else
  {
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return 0x6D6172617025;
  }
  return v5;
}

uint64_t sub_1B2076330()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  type metadata accessor for PartialComposeNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
    if (v1 >> 60 == 1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
      {
        type metadata accessor for NilNode(0);
        swift_retain();
        v3 = 0;
        for (i = 0; i != v2; ++i)
        {
          if (!swift_dynamicCastClass())
          {
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            swift_release();
            swift_bridgeObjectRelease();
          }
          v3 += 16;
        }
        swift_release();
        v5 = 0;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
    }
    swift_arrayDestroy();
  }
  else
  {
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return 0x6D6172617025;
  }
  return v5;
}

uint64_t sub_1B2076640()
{
  uint64_t v0;
  uint64_t v2;
  _OWORD v3[2];
  uint64_t v4;

  type metadata accessor for EntityAssetNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
    return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
  type metadata accessor for ConstantNode(0);
  v2 = swift_dynamicCastClass();
  if (v2)
    sub_1B1A02864(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v3);
  else
    memset(v3, 0, sizeof(v3));
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast())
    return v4;
  else
    return 0;
}

uint64_t sub_1B2076718()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _OWORD v3[2];
  uint64_t v4;

  type metadata accessor for WorldReferenceNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    sub_1B1A00060(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v3);
    MEMORY[0x1B5E240CC](v3);
    sub_1B19FC350((uint64_t)v3);
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  else
  {
    type metadata accessor for ConstantNode(0);
    v2 = swift_dynamicCastClass();
    if (v2)
      sub_1B1A02864(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v3);
    else
      memset(v3, 0, sizeof(v3));
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B1AE965C();
    if (swift_dynamicCast())
      return v4;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B2076838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  _BYTE v10[80];
  _WORD v11[2];
  unsigned __int8 v12;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 32);
  v4 = OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor;
  v5 = *(__int128 **)(v3 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
  swift_retain();
  if (!v5)
  {
    v5 = (__int128 *)sub_1B2078044();
    *(_QWORD *)(v3 + v4) = v5;
  }
  RGContext.tryResolve(textureReference:)(v5, a1, (uint64_t)v10);
  swift_release();
  sub_1B207A150((uint64_t)v10, (uint64_t)v11);
  if ((unint64_t)v12 << 16 == 0x20000)
    return 0;
  LOWORD(v6) = v11[0];
  LOWORD(v7) = v11[1];
  *(float *)&v9 = (float)v6;
  *((float *)&v9 + 1) = (float)v7;
  return v9;
}

uint64_t sub_1B2076914()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;
  __objc2_class **v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 88);
  sub_1B1BCCD2C(*(_QWORD *)(v0 + 24));
  sub_1B1B632F0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D76C18(v1);
  v3 = v2;
  sub_1B1B28D2C(v1);
  if ((v3 & 1) == 0)
    return 0;
  v4 = *(__objc2_class ***)(*(_QWORD *)(v0 + 16) + 144);
  if (*v4 != _TtC3VFX21TextureDescriptorNode)
    return 0;
  v7 = OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor;
  v5 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
  if (!v5)
  {
    swift_retain();
    v5 = sub_1B2078044();
    *(__objc2_class **)((char *)v4 + v7) = (__objc2_class *)v5;
    swift_release();
  }
  return v5;
}

unint64_t sub_1B20769D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 40);
  swift_retain();
  if (sub_1B1C5FD80(v1) == 3)
  {
    swift_release();
    return 0;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
    return 0xD000000000000016;
  }
}

uint64_t sub_1B2076ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[2];
  uint64_t v5;

  type metadata accessor for EntityAssetNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
    swift_retain_n();
  }
  else
  {
    type metadata accessor for ConstantNode(0);
    v2 = swift_dynamicCastClass();
    if (v2)
      sub_1B1A02864(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v4);
    else
      memset(v4, 0, sizeof(v4));
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_retain_n();
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release_n();
      return 0;
    }
    v1 = v5;
  }
  *(_QWORD *)&v4[0] = 0;
  *((_QWORD *)&v4[0] + 1) = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v4[0] = 0xD000000000000016;
  *((_QWORD *)&v4[0] + 1) = 0x80000001B234A120;
  v5 = v1;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_release_n();
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v4[0];
}

uint64_t sub_1B2076C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;

  v5 = (int *)type metadata accessor for GraphError();
  sub_1B1BE2940();
  v6 = swift_allocError();
  v8 = v7;
  *v7 = 0;
  v9 = (char *)v7 + v5[5];
  v10 = sub_1B222826C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (char *)v8 + v5[6];
  *(_QWORD *)v11 = 0;
  v11[8] = 97;
  v12 = (_QWORD *)((char *)v8 + v5[7]);
  *v12 = a1;
  v12[1] = a2;
  v13 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
  v14 = *(_QWORD **)(v2 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + v13) = v14;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C63944(0, v14[2] + 1, 1, v14);
    v14 = (_QWORD *)result;
    *(_QWORD *)(v2 + v13) = result;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)sub_1B1C63944(v16 > 1, v17 + 1, 1, v14);
    v14 = (_QWORD *)result;
    *(_QWORD *)(v2 + v13) = result;
  }
  v14[2] = v17 + 1;
  v14[v17 + 4] = v6;
  return result;
}

uint64_t sub_1B2076E28()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for RenderGraphDiagnostics()
{
  return objc_opt_self();
}

uint64_t sub_1B2076EAC(uint64_t a1)
{
  return sub_1B2079B84(a1, (uint64_t (*)(uint64_t))sub_1B1BCE388);
}

uint64_t sub_1B2076EB8()
{
  return type metadata accessor for RenderGraphNode(0);
}

uint64_t type metadata accessor for RenderGraphNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C78);
}

uint64_t sub_1B2076ED4()
{
  return 0x6F577265646E6552;
}

uint64_t sub_1B2076EF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t DynamicType;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[4];

  v2 = MEMORY[0x1E0DED1E8];
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B228E6F0;
  v4 = swift_allocObject();
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v5 | 0x5000000000000000;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v3 + 40) = v6 | 0x6000000000000000;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0x80000000000000B0;
  *(_QWORD *)(v3 + 48) = v9 | 0x6000000000000000;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0x80000000000000B0;
  *(_QWORD *)(v3 + 56) = v10 | 0x6000000000000000;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0x8000000000000010;
  *(_QWORD *)(v3 + 64) = v11 | 0x6000000000000000;
  v12 = swift_allocObject();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0x80000000000000A0;
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v3 + 72) = v12 | 0x6000000000000000;
  v14 = swift_allocObject();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0x80000000000000A0;
  *(_QWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v3 + 80) = v14 | 0x6000000000000000;
  v16 = swift_allocObject();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0x8000000000000098;
  *(_QWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v3 + 88) = v16 | 0x6000000000000000;
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5C7D0, (uint64_t)&type metadata for AnyValue, (uint64_t (*)(_QWORD, uint64_t))v2);
  v18 = swift_allocObject();
  v19 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v18 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v18 + 16) = xmmword_1B228E6F0;
  *(_OWORD *)(v18 + 32) = xmmword_1B22847E0;
  *(_QWORD *)(v18 + 104) = v19;
  *(_OWORD *)(v18 + 72) = xmmword_1B22847E0;
  *(_QWORD *)(v18 + 144) = MEMORY[0x1E0DEE190];
  *(_OWORD *)(v18 + 112) = xmmword_1B22B6670;
  *(_QWORD *)(v18 + 184) = v19;
  *(_OWORD *)(v18 + 152) = xmmword_1B22847E0;
  v26[3] = MEMORY[0x1E0DEAFA0];
  LOBYTE(v26[0]) = 0;
  sub_1B19FA070(v26, MEMORY[0x1E0DEAFA0]);
  DynamicType = swift_getDynamicType();
  v21 = sub_1B1D76F30(DynamicType);
  if ((~v21 & 0xF000000000000007) != 0)
  {
    v22 = v21;
    sub_1B1A02864((uint64_t)v26, v18 + 200);
    *(_QWORD *)(v18 + 192) = v22;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
    *(_QWORD *)(v18 + 264) = v19;
    *(_OWORD *)(v18 + 232) = xmmword_1B22847E0;
    *(_OWORD *)(v18 + 272) = xmmword_1B22847E0;
    *(_QWORD *)(v18 + 344) = v19;
    *(_QWORD *)(v18 + 304) = v19;
    *(_QWORD *)(v18 + 312) = 0x8000000000000000;
    *(_QWORD *)(v18 + 320) = 0;
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1B226CD10;
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = 0x80000000000000A0;
    *(_QWORD *)(v23 + 32) = v24 | 0x6000000000000000;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0x80000000000000A0;
    *(_QWORD *)(v23 + 40) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v23;
    a1[2] = (uint64_t)&unk_1E6385468;
    a1[3] = (uint64_t)&unk_1E6385388;
    a1[4] = (uint64_t)&unk_1E6385428;
    a1[5] = v18;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void *sub_1B2077320()
{
  return &unk_1E6385360;
}

uint64_t sub_1B207732C()
{
  return type metadata accessor for RenderWorldNode(0);
}

uint64_t type metadata accessor for RenderWorldNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C88);
}

uint64_t sub_1B2077348()
{
  return 0x6873696C627550;
}

uint64_t sub_1B2077360@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 2;
  *(_QWORD *)(v3 + 16) = v4 | 0x4000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x80000000000000A0;
  *(_QWORD *)(v2 + 40) = result | 0x6000000000000000;
  v6 = MEMORY[0x1E0DEE9D8];
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E6395C08;
  a1[3] = (uint64_t)&unk_1E6395BC8;
  a1[4] = v6;
  a1[5] = v6;
  return result;
}

uint64_t sub_1B2077450()
{
  return type metadata accessor for PublishTextureNode(0);
}

uint64_t type metadata accessor for PublishTextureNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62C98);
}

uint64_t sub_1B207746C()
{
  return 0x746E6573657250;
}

uint64_t sub_1B2077484@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x80000000000000A0;
  *(_QWORD *)(v2 + 32) = result | 0x6000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E6371B80;
  a1[3] = (uint64_t)&unk_1E6371B50;
  a1[4] = v4;
  a1[5] = v4;
  return result;
}

uint64_t sub_1B2077528()
{
  return type metadata accessor for PresentNode(0);
}

uint64_t type metadata accessor for PresentNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62CA8);
}

uint64_t sub_1B2077544()
{
  return 1920298050;
}

uint64_t sub_1B2077554@<X0>(uint64_t *a1@<X8>)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t DynamicType;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];

  v2 = MEMORY[0x1E0DED1E8];
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226CD10;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x80000000000000A0;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000050;
  *(_QWORD *)(v3 + 40) = v5 | 0x6000000000000000;
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5C7D0, (uint64_t)&type metadata for AnyValue, (uint64_t (*)(_QWORD, uint64_t))v2);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  *(_OWORD *)(v6 + 32) = xmmword_1B22847F0;
  v12[3] = MEMORY[0x1E0DEB188];
  LODWORD(v12[0]) = 1092616192;
  sub_1B19FA070(v12, MEMORY[0x1E0DEB188]);
  DynamicType = swift_getDynamicType();
  v8 = sub_1B1D76F30(DynamicType);
  if ((~v8 & 0xF000000000000007) != 0)
  {
    v9 = v8;
    sub_1B1A02864((uint64_t)v12, v6 + 80);
    *(_QWORD *)(v6 + 72) = v9;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0x80000000000000A0;
    *(_QWORD *)(v10 + 32) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v10;
    a1[2] = (uint64_t)&unk_1E63BEBA0;
    a1[3] = (uint64_t)&unk_1E63BEB30;
    a1[4] = (uint64_t)&unk_1E63BEB70;
    a1[5] = v6;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void *sub_1B20777BC()
{
  return &unk_1E63BEB00;
}

uint64_t sub_1B20777C8()
{
  return type metadata accessor for BlurNode(0);
}

uint64_t type metadata accessor for BlurNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62CB8);
}

uint64_t sub_1B20777E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x80000000000000A0;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x80000000000000A0;
  *(_QWORD *)(v4 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E63C3738;
  a1[3] = (uint64_t)&unk_1E63C36D8;
  v6 = MEMORY[0x1E0DEE9D8];
  a1[4] = (uint64_t)&unk_1E63C3708;
  a1[5] = v6;
  return result;
}

void *sub_1B20778EC()
{
  return &unk_1E63C36A8;
}

uint64_t sub_1B20778F8()
{
  return type metadata accessor for BloomNode(0);
}

uint64_t type metadata accessor for BloomNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62CC8);
}

unint64_t sub_1B2077914()
{
  return 0xD000000000000011;
}

double sub_1B2077930@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000098;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  v6 = swift_allocObject();
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v6 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v5 + 16) = v6 | 0x1000000000000000;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E63A5F68;
  a1[3] = (uint64_t)&unk_1E63A5F08;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[4] = (uint64_t)&unk_1E63A5F38;
  a1[5] = v8;
  return result;
}

uint64_t sub_1B2077A58()
{
  return type metadata accessor for ResolveResolutionNode(0);
}

uint64_t type metadata accessor for ResolveResolutionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62CD8);
}

uint64_t sub_1B2077A74()
{
  return 0x65727574786554;
}

uint64_t sub_1B2077A8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 16) = v4 | 0x4000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x80000000000000A0;
  *(_QWORD *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  a1[2] = (uint64_t)&unk_1E63A9428;
  a1[3] = (uint64_t)&unk_1E63A93C8;
  v7 = MEMORY[0x1E0DEE9D8];
  a1[4] = (uint64_t)&unk_1E63A93F8;
  a1[5] = v7;
  return result;
}

void *sub_1B2077BB4()
{
  return &unk_1E63A9398;
}

uint64_t sub_1B2077BC0()
{
  return type metadata accessor for RenderGraphTextureNode(0);
}

uint64_t type metadata accessor for RenderGraphTextureNode(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1EEF62CE8);
}

unint64_t sub_1B2077BDC()
{
  return 0xD000000000000011;
}

uint64_t sub_1B2077BF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DynamicType;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD v22[4];

  v2 = MEMORY[0x1E0DED1E8];
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B2280B20;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x80000000000000B8;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000050;
  *(_QWORD *)(v3 + 40) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000030;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v3 + 48) = v6 | 0x6000000000000000;
  v8 = swift_allocObject();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0x8000000000000030;
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v3 + 56) = v8 | 0x6000000000000000;
  v10 = swift_allocObject();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0x8000000000000030;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v3 + 64) = v10 | 0x6000000000000000;
  v12 = swift_allocObject();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0x8000000000000030;
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v3 + 72) = v12 | 0x6000000000000000;
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5C7D0, (uint64_t)&type metadata for AnyValue, (uint64_t (*)(_QWORD, uint64_t))v2);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B2280B20;
  v15 = RGResourceIdentifierFinalColor((CFX::RG::ResourceIdentifier *)v14);
  *(_QWORD *)(v14 + 64) = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v14 + 32) = 0x80000000000000B8;
  *(_QWORD *)(v14 + 40) = v15;
  v22[3] = MEMORY[0x1E0DEB188];
  LODWORD(v22[0]) = 1065353216;
  sub_1B19FA070(v22, MEMORY[0x1E0DEB188]);
  DynamicType = swift_getDynamicType();
  v17 = sub_1B1D76F30(DynamicType);
  if ((~v17 & 0xF000000000000007) != 0)
  {
    v18 = v17;
    sub_1B1A02864((uint64_t)v22, v14 + 80);
    *(_QWORD *)(v14 + 72) = v18;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
    v19 = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v14 + 144) = MEMORY[0x1E0DEB418];
    *(_OWORD *)(v14 + 112) = xmmword_1B22847E0;
    *(_QWORD *)(v14 + 184) = v19;
    *(_OWORD *)(v14 + 152) = xmmword_1B22847E0;
    *(_QWORD *)(v14 + 224) = v19;
    *(_OWORD *)(v14 + 192) = xmmword_1B22847E0;
    *(_QWORD *)(v14 + 264) = v19;
    *(_OWORD *)(v14 + 232) = xmmword_1B22847E0;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1B226D240;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0x8000000000000098;
    *(_QWORD *)(v20 + 32) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v20;
    a1[2] = (uint64_t)&unk_1E63A6B78;
    a1[3] = (uint64_t)&unk_1E63A6AC8;
    a1[4] = (uint64_t)&unk_1E63A6B48;
    a1[5] = v14;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B2077F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
  if (v1)
    RGTextureReferenceDescriptorDestroy(v1);
  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v2 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v3 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance();
}

uint64_t sub_1B2077FE4()
{
  return type metadata accessor for TextureDescriptorNode(0);
}

uint64_t type metadata accessor for TextureDescriptorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1EEF62D10);
}

uint64_t sub_1B2078000()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B2078044()
{
  uint64_t v0;
  float v1;
  CFX::RG::ResourceIdentifier *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  float v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  type metadata accessor for ConstantNode(0);
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    sub_1B1A02864(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  swift_retain();
  v1 = 0.0;
  if (swift_dynamicCast())
    v1 = v11;
  v2 = (CFX::RG::ResourceIdentifier *)swift_release();
  if (v1 > 10.0)
    v1 = 10.0;
  v3 = RGResourceIdentifierFinalColor(v2);
  v4 = 1.0;
  if (v1 > 0.0)
    v4 = v1;
  v12 = RGTextureReferenceDescriptorCreate(v3, v4);
  v5 = swift_dynamicCastClass();
  if (v5)
  {
    sub_1B1A02864(v5 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_release();
    RGTextureReferenceDescriptor.width.setter(v10, 0);
  }
  else
  {
    v10 = 0;
    swift_release();
  }
  v6 = swift_dynamicCastClass();
  if (v6)
  {
    sub_1B1A02864(v6 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_release();
    RGTextureReferenceDescriptor.height.setter(v10, 0);
  }
  else
  {
    v10 = 0;
    swift_release();
  }
  v7 = swift_dynamicCastClass();
  if (v7)
  {
    sub_1B1A02864(v7 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_release();
    RGTextureReferenceDescriptor.depth.setter(v10, 0);
  }
  else
  {
    LOBYTE(v10) = 0;
    swift_release();
  }
  v8 = swift_dynamicCastClass();
  if (v8)
  {
    sub_1B1A02864(v8 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_release();
    RGTextureReferenceDescriptor.sampleCount.setter(v10, 0);
  }
  else
  {
    swift_release();
  }
  return v12;
}

_QWORD *sub_1B20783C8()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor) = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  return v0;
}

_QWORD *sub_1B2078428(_QWORD *a1)
{
  *(_QWORD *)(swift_allocObject() + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor) = 0;
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B207846C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B1C50E58(v5);
  swift_bridgeObjectRelease();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1B1C50E58(v7);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = &unk_1E63911E8;
  a1[3] = v6;
  v10 = MEMORY[0x1E0DEE9D8];
  a1[4] = v8;
  a1[5] = v10;
  return result;
}

uint64_t sub_1B2078524()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1B207846C(&v12);
  v0 = v13;
  v23 = v13;
  v22 = v12;
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = v14;
  sub_1B1B28C6C((uint64_t)&v21);
  v20 = v15;
  sub_1B1B28C6C((uint64_t)&v20);
  v19 = v16;
  sub_1B1B28C6C((uint64_t)&v19);
  v18 = v17;
  sub_1B1B28C6C((uint64_t)&v18);
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B202AF78(0, v1, 0);
    v2 = v11;
    v3 = (unint64_t *)(v0 + 32);
    do
    {
      v4 = *v3++;
      *(_QWORD *)(swift_allocObject() + 16) = 0x80000000000000A0;
      sub_1B19F8CD0(v4);
      sub_1B1D3590C(v4);
      v6 = v5;
      swift_release();
      sub_1B19F8D00(v4);
      if ((v6 & 1) != 0)
        v7 = 0;
      else
        v7 = 3;
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_1B202AF78(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_BYTE *)(v11 + v9 + 32) = v7;
      --v1;
    }
    while (v1);
    sub_1B1B28C6C((uint64_t)&v23);
  }
  else
  {
    sub_1B1B28C6C((uint64_t)&v23);
    return MEMORY[0x1E0DEE9D8];
  }
  return v2;
}

uint64_t sub_1B20786C0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20786F4();
  return v0;
}

_QWORD *sub_1B20786F4()
{
  _QWORD *v0;
  _OWORD *v1;
  uint64_t v2;

  v1 = (_OWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  *v1 = 0u;
  v1[1] = 0u;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames) = v2;
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes) = v2;
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames) = v2;
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v2;
  sub_1B2228260();
  swift_retain();
  sub_1B2078A40();
  swift_release();
  return v0;
}

_QWORD *sub_1B2078784(uint64_t a1)
{
  swift_allocObject();
  return sub_1B20787BC(a1);
}

_QWORD *sub_1B20787BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames) = v3;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes) = v3;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames) = v3;
  v4 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  v6 = v4[1];
  v7 = v4[2];
  v8 = v4[3];
  *(_QWORD *)v2 = v5;
  *(_QWORD *)(v2 + 8) = v6;
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 24) = v8;
  sub_1B1C79790(v5);
  v9 = (_QWORD *)swift_retain();
  v10 = sub_1B1BCE388(v9);
  swift_retain();
  sub_1B2078A40();
  swift_release();
  swift_release();
  return v10;
}

unint64_t sub_1B207886C()
{
  return 0x8000000000000000;
}

uint64_t sub_1B2078874()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  if (!v2)
    goto LABEL_21;
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[1];
  swift_retain();
  sub_1B1C79790(v2);
  v6 = sub_1B2076640();
  v8 = v7;
  swift_release();
  if ((v8 & 1) != 0)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = v6;
  if ((v8 & 1) != 0)
    v10 = 0;
  else
    v10 = HIDWORD(v6);
  if ((_DWORD)v9 == -1 && (_DWORD)v10 == 0)
    goto LABEL_20;
  v12 = v9 | (v10 << 32);
  swift_retain();
  v13 = sub_1B1D16900(v12);
  swift_release();
  if (!v13)
    goto LABEL_20;
  v14 = sub_1B1DCC654(v13);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v16 = sub_1B1E8DC78(v14, v15, v13);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    v23 = 0;
    return v23 & 1;
  }
  if ((sub_1B1D48E74(v16, v2) & 1) != 0 && (sub_1B1CC984C(v18, v5) & 1) != 0 && (sub_1B1CC984C(v20, v3) & 1) != 0)
    v23 = sub_1B1CC984C(v22, v4);
  else
    v23 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23 & 1;
}

uint64_t sub_1B2078A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  ValueMetadata *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  ValueMetadata *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  ValueMetadata *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(void);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v1 = v0;
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 320);
  *(_QWORD *)(v3 + 16) = v4();
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v122 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes) = v2;
  swift_bridgeObjectRelease();
  v121 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames) = &unk_1E63911B0;
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x1E0DEE9D8];
  v120 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v119 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames) = v5;
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  result = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  if (result)
  {
    v8 = v6[1];
    v9 = *(_QWORD *)(v8 + 16);
    v118 = v6[2];
    v116 = v6[3];
    if (v9)
    {
      v117 = v4;
      sub_1B1C79790(result);
      swift_bridgeObjectRetain();
      v10 = 72;
      do
      {
        v11 = v8;
        v12 = *(_QWORD **)(v8 + v10);
        v13 = (ValueMetadata *)v12[5];
        if (v13 == &type metadata for Entity
          && (sub_1B222A06C(),
              sub_1B222A078(),
              v14 = sub_1B222A0C0(),
              sub_1B222A06C(),
              sub_1B222A078(),
              v14 == sub_1B222A0C0()))
        {
          swift_retain();
          v15 = 0x80000000000000A0;
        }
        else
        {
          swift_retain();
          v15 = sub_1B1D76F30((uint64_t)v13);
          if ((~v15 & 0xF000000000000007) == 0)
            goto LABEL_89;
        }
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = v15;
        v17 = *(_QWORD **)(v1 + v122);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v122) = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v17 = sub_1B1C6534C(0, v17[2] + 1, 1, v17);
          *(_QWORD *)(v1 + v122) = v17;
        }
        v20 = v17[2];
        v19 = v17[3];
        if (v20 >= v19 >> 1)
          v17 = sub_1B1C6534C(v19 > 1, v20 + 1, 1, v17);
        v17[2] = v20 + 1;
        v17[v20 + 4] = v16 | 0x6000000000000000;
        *(_QWORD *)(v1 + v122) = v17;
        v22 = v12[2];
        v21 = v12[3];
        v23 = *(_QWORD **)(v1 + v121);
        swift_bridgeObjectRetain();
        v24 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v121) = v23;
        if ((v24 & 1) == 0)
        {
          v23 = sub_1B1C63044(0, v23[2] + 1, 1, v23);
          *(_QWORD *)(v1 + v121) = v23;
        }
        v26 = v23[2];
        v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          v23 = sub_1B1C63044(v25 > 1, v26 + 1, 1, v23);
          *(_QWORD *)(v1 + v121) = v23;
        }
        v23[2] = v26 + 1;
        v27 = &v23[2 * v26];
        v27[4] = v22;
        v27[5] = v21;
        swift_release();
        v10 += 48;
        --v9;
        v8 = v11;
      }
      while (v9);
      v28 = swift_bridgeObjectRelease();
      v29 = ((uint64_t (*)(uint64_t))v117)(v28);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = swift_bridgeObjectRetain();
      v29 = ((uint64_t (*)(uint64_t))v4)(v30);
    }
    v31 = v29;
    *(_BYTE *)(swift_allocObject() + 16) = 3;
    sub_1B1D76C18(v31);
    v33 = v32;
    swift_release();
    sub_1B1B28D2C(v31);
    if ((v33 & 1) != 0)
    {
      v34 = swift_allocObject();
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = 0x8000000000000098;
      *(_QWORD *)(v34 + 16) = v35;
      v36 = *(_QWORD **)(v1 + v122);
      v37 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + v122) = v36;
      if ((v37 & 1) == 0)
      {
        v36 = sub_1B1C6534C(0, v36[2] + 1, 1, v36);
        *(_QWORD *)(v1 + v122) = v36;
      }
      v39 = v36[2];
      v38 = v36[3];
      if (v39 >= v38 >> 1)
        v36 = sub_1B1C6534C(v38 > 1, v39 + 1, 1, v36);
      v36[2] = v39 + 1;
      v36[v39 + 4] = v34 | 0x6000000000000000;
      *(_QWORD *)(v1 + v122) = v36;
      v40 = *(_QWORD **)(v1 + v121);
      v41 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + v121) = v40;
      if ((v41 & 1) == 0)
      {
        v40 = sub_1B1C63044(0, v40[2] + 1, 1, v40);
        *(_QWORD *)(v1 + v121) = v40;
      }
      v43 = v40[2];
      v42 = v40[3];
      if (v43 >= v42 >> 1)
      {
        v40 = sub_1B1C63044(v42 > 1, v43 + 1, 1, v40);
        *(_QWORD *)(v1 + v121) = v40;
      }
      v40[2] = v43 + 1;
      v44 = &v40[2 * v43];
      v44[4] = 0x7470697263736564;
      v44[5] = 0xEA0000000000726FLL;
    }
    v45 = v118;
    v46 = *(_QWORD *)(v118 + 16);
    if (v46)
    {
      swift_bridgeObjectRetain();
      v47 = 72;
      while (1)
      {
        v48 = *(_QWORD **)(v45 + v47);
        v49 = swift_allocObject();
        v50 = swift_allocObject();
        *(_QWORD *)(v50 + 16) = 0x8000000000000098;
        *(_QWORD *)(v49 + 16) = v50;
        v51 = *(_QWORD **)(v1 + v122);
        swift_retain();
        v52 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v122) = v51;
        if ((v52 & 1) == 0)
        {
          v51 = sub_1B1C6534C(0, v51[2] + 1, 1, v51);
          *(_QWORD *)(v1 + v122) = v51;
        }
        v54 = v51[2];
        v53 = v51[3];
        if (v54 >= v53 >> 1)
          v51 = sub_1B1C6534C(v53 > 1, v54 + 1, 1, v51);
        v51[2] = v54 + 1;
        v51[v54 + 4] = v49 | 0x6000000000000000;
        *(_QWORD *)(v1 + v122) = v51;
        v55 = v48[2];
        v56 = v48[3];
        v57 = *(_QWORD **)(v1 + v121);
        swift_bridgeObjectRetain();
        v58 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v121) = v57;
        if ((v58 & 1) == 0)
        {
          v57 = sub_1B1C63044(0, v57[2] + 1, 1, v57);
          *(_QWORD *)(v1 + v121) = v57;
        }
        v60 = v57[2];
        v59 = v57[3];
        if (v60 >= v59 >> 1)
        {
          v57 = sub_1B1C63044(v59 > 1, v60 + 1, 1, v57);
          *(_QWORD *)(v1 + v121) = v57;
        }
        v57[2] = v60 + 1;
        v61 = &v57[2 * v60];
        v61[4] = v55;
        v61[5] = v56;
        v62 = (ValueMetadata *)v48[5];
        if (v62 != &type metadata for Entity
          || (sub_1B222A06C(),
              sub_1B222A078(),
              v63 = sub_1B222A0C0(),
              sub_1B222A06C(),
              sub_1B222A078(),
              v64 = 0x80000000000000A0,
              v63 != sub_1B222A0C0()))
        {
          v64 = sub_1B1D76F30((uint64_t)v62);
          if ((~v64 & 0xF000000000000007) == 0)
            goto LABEL_89;
        }
        v65 = swift_allocObject();
        *(_QWORD *)(v65 + 16) = v64;
        v66 = *(_QWORD **)(v1 + v120);
        v67 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v120) = v66;
        if ((v67 & 1) != 0)
        {
          v68 = v120;
        }
        else
        {
          v76 = sub_1B1C6534C(0, v66[2] + 1, 1, v66);
          v68 = v120;
          v66 = v76;
          *(_QWORD *)(v1 + v120) = v76;
        }
        v70 = v66[2];
        v69 = v66[3];
        if (v70 >= v69 >> 1)
        {
          v77 = sub_1B1C6534C(v69 > 1, v70 + 1, 1, v66);
          v68 = v120;
          v66 = v77;
        }
        v66[2] = v70 + 1;
        v66[v70 + 4] = v65 | 0x6000000000000000;
        *(_QWORD *)(v1 + v68) = v66;
        v71 = *(_QWORD **)(v1 + v119);
        swift_bridgeObjectRetain();
        v72 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v119) = v71;
        if ((v72 & 1) == 0)
        {
          v71 = sub_1B1C63044(0, v71[2] + 1, 1, v71);
          *(_QWORD *)(v1 + v119) = v71;
        }
        v74 = v71[2];
        v73 = v71[3];
        if (v74 >= v73 >> 1)
        {
          v71 = sub_1B1C63044(v73 > 1, v74 + 1, 1, v71);
          *(_QWORD *)(v1 + v119) = v71;
        }
        v71[2] = v74 + 1;
        v75 = &v71[2 * v74];
        v75[4] = v55;
        v75[5] = v56;
        swift_release();
        v47 += 48;
        --v46;
        v45 = v118;
        if (!v46)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v78 = *(_QWORD *)(v116 + 16);
    if (v78)
    {
      v79 = (uint64_t *)(v116 + 72);
      while (1)
      {
        v80 = *v79;
        v81 = *(ValueMetadata **)(*v79 + 40);
        if (v81 == &type metadata for Entity
          && (sub_1B222A06C(),
              sub_1B222A078(),
              v82 = sub_1B222A0C0(),
              sub_1B222A06C(),
              sub_1B222A078(),
              v82 == sub_1B222A0C0()))
        {
          swift_retain();
          v83 = 0x80000000000000A0;
        }
        else
        {
          swift_retain();
          v83 = sub_1B1D76F30((uint64_t)v81);
          if ((~v83 & 0xF000000000000007) == 0)
            break;
        }
        v84 = swift_allocObject();
        *(_QWORD *)(v84 + 16) = v83;
        v85 = *(_QWORD **)(v1 + v122);
        v86 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v122) = v85;
        if ((v86 & 1) == 0)
        {
          v85 = sub_1B1C6534C(0, v85[2] + 1, 1, v85);
          *(_QWORD *)(v1 + v122) = v85;
        }
        v88 = v85[2];
        v87 = v85[3];
        if (v88 >= v87 >> 1)
          v85 = sub_1B1C6534C(v87 > 1, v88 + 1, 1, v85);
        v85[2] = v88 + 1;
        v85[v88 + 4] = v84 | 0x6000000000000000;
        *(_QWORD *)(v1 + v122) = v85;
        v89 = *(_QWORD *)(v80 + 16);
        v90 = *(_QWORD *)(v80 + 24);
        v91 = *(_QWORD **)(v1 + v121);
        swift_bridgeObjectRetain();
        v92 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v121) = v91;
        if ((v92 & 1) == 0)
        {
          v91 = sub_1B1C63044(0, v91[2] + 1, 1, v91);
          *(_QWORD *)(v1 + v121) = v91;
        }
        v94 = v91[2];
        v93 = v91[3];
        if (v94 >= v93 >> 1)
        {
          v91 = sub_1B1C63044(v93 > 1, v94 + 1, 1, v91);
          *(_QWORD *)(v1 + v121) = v91;
        }
        v91[2] = v94 + 1;
        v95 = &v91[2 * v94];
        v95[4] = v89;
        v95[5] = v90;
        if (v81 != &type metadata for Entity
          || (sub_1B222A06C(),
              sub_1B222A078(),
              v96 = sub_1B222A0C0(),
              sub_1B222A06C(),
              sub_1B222A078(),
              v97 = 0x80000000000000A0,
              v96 != sub_1B222A0C0()))
        {
          v97 = sub_1B1D76F30((uint64_t)v81);
          if ((~v97 & 0xF000000000000007) == 0)
            break;
        }
        v98 = swift_allocObject();
        *(_QWORD *)(v98 + 16) = v97;
        v99 = *(_QWORD **)(v1 + v120);
        v100 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v120) = v99;
        if ((v100 & 1) != 0)
        {
          v101 = v120;
        }
        else
        {
          v109 = sub_1B1C6534C(0, v99[2] + 1, 1, v99);
          v101 = v120;
          v99 = v109;
          *(_QWORD *)(v1 + v120) = v109;
        }
        v103 = v99[2];
        v102 = v99[3];
        if (v103 >= v102 >> 1)
        {
          v110 = sub_1B1C6534C(v102 > 1, v103 + 1, 1, v99);
          v101 = v120;
          v99 = v110;
        }
        v99[2] = v103 + 1;
        v99[v103 + 4] = v98 | 0x6000000000000000;
        *(_QWORD *)(v1 + v101) = v99;
        v104 = *(_QWORD **)(v1 + v119);
        swift_bridgeObjectRetain();
        v105 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + v119) = v104;
        if ((v105 & 1) == 0)
        {
          v104 = sub_1B1C63044(0, v104[2] + 1, 1, v104);
          *(_QWORD *)(v1 + v119) = v104;
        }
        v107 = v104[2];
        v106 = v104[3];
        if (v107 >= v106 >> 1)
        {
          v104 = sub_1B1C63044(v106 > 1, v107 + 1, 1, v104);
          *(_QWORD *)(v1 + v119) = v104;
        }
        v104[2] = v107 + 1;
        v108 = &v104[2 * v107];
        v108[4] = v89;
        v108[5] = v90;
        swift_release();
        v79 += 6;
        if (!--v78)
          goto LABEL_81;
      }
LABEL_89:
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
LABEL_81:
    result = swift_bridgeObjectRelease();
  }
  v111 = *(_QWORD **)(v1 + v120);
  if (!v111[2])
  {
    v112 = swift_allocObject();
    *(_QWORD *)(v112 + 16) = 0x80000000000000A0;
    result = swift_isUniquelyReferenced_nonNull_native();
    v113 = v120;
    *(_QWORD *)(v1 + v120) = v111;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1C6534C(0, 1, 1, v111);
      v113 = v120;
      v111 = (_QWORD *)result;
      *(_QWORD *)(v1 + v120) = result;
    }
    v115 = v111[2];
    v114 = v111[3];
    if (v115 >= v114 >> 1)
    {
      result = (uint64_t)sub_1B1C6534C(v114 > 1, v115 + 1, 1, v111);
      v113 = v120;
      v111 = (_QWORD *)result;
    }
    v111[2] = v115 + 1;
    v111[v115 + 4] = v112 | 0x6000000000000000;
    *(_QWORD *)(v1 + v113) = v111;
  }
  return result;
}

uint64_t sub_1B20798D8()
{
  uint64_t v0;

  sub_1B1A027DC(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B207993C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1A027DC(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B20799EC()
{
  sub_1B207993C();
  return swift_deallocClassInstance();
}

uint64_t sub_1B2079A10()
{
  return type metadata accessor for CustomFunctionNode(0);
}

uint64_t type metadata accessor for CustomFunctionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62D28);
}

uint64_t sub_1B2079A2C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B2079A80()
{
  return 0x53657475706D6F43;
}

uint64_t sub_1B2079AA4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 1;
  return v0 | 0x4000000000000000;
}

uint64_t sub_1B2079AD8(uint64_t a1)
{
  return sub_1B2079B84(a1, (uint64_t (*)(uint64_t))sub_1B20787BC);
}

uint64_t sub_1B2079AE8()
{
  return type metadata accessor for ComputeShaderNode(0);
}

uint64_t type metadata accessor for ComputeShaderNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF62D38);
}

uint64_t sub_1B2079B08(_QWORD *a1)
{
  return sub_1B2079F08(a1);
}

uint64_t sub_1B2079B1C(_QWORD *a1)
{
  return sub_1B2079DF0(a1);
}

uint64_t sub_1B2079B30()
{
  return 0x657263736C6C7546;
}

uint64_t sub_1B2079B54()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 3;
  return v0 | 0x4000000000000000;
}

uint64_t sub_1B2079B84(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  swift_allocObject();
  return a2(a1);
}

uint64_t sub_1B2079BC8()
{
  return type metadata accessor for FullscreenQuadNode(0);
}

uint64_t type metadata accessor for FullscreenQuadNode(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1EEF62D48);
}

uint64_t sub_1B2079BE4()
{
  return swift_updateClassMetadata2();
}

uint64_t destroy for TexturePreview()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for TexturePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TexturePreview(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for TexturePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TexturePreview()
{
  return &type metadata for TexturePreview;
}

_QWORD *initializeBufferWithCopyOfBuffer for RenderGraphDiagnostics.RendererInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RenderGraphDiagnostics.RendererInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for RenderGraphDiagnostics.RendererInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RenderGraphDiagnostics.RendererInfo()
{
  return &type metadata for RenderGraphDiagnostics.RendererInfo;
}

uint64_t sub_1B2079DF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[4];

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A138();
  if (!v2)
  {
    sub_1B19FA070(v8, v8[3]);
    sub_1B1A02758(0, &qword_1EEF62D60, (uint64_t)&type metadata for MetalFunctionReflection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B207A038(&qword_1EEF62D68, (uint64_t (*)(void))sub_1B2079FF4, MEMORY[0x1E0DEE9A0]);
    sub_1B2229D6C();
    v4 = (_OWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
    *v4 = v6;
    v4[1] = v7;
    sub_1B1A027DC(v5);
    sub_1B2078A40();
    sub_1B2078A40();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  }
  return result;
}

uint64_t sub_1B2079F08(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1A02758(0, &qword_1EEF62D60, (uint64_t)&type metadata for MetalFunctionReflection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B207A038(&qword_1EEF62D78, (uint64_t (*)(void))sub_1B207A0B4, MEMORY[0x1E0DEE988]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

unint64_t sub_1B2079FF4()
{
  unint64_t result;

  result = qword_1EEF62D70;
  if (!qword_1EEF62D70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F808, &type metadata for MetalFunctionReflection);
    atomic_store(result, (unint64_t *)&qword_1EEF62D70);
  }
  return result;
}

uint64_t sub_1B207A038(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, &qword_1EEF62D60, (uint64_t)&type metadata for MetalFunctionReflection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B207A0B4()
{
  unint64_t result;

  result = qword_1EEF62D80;
  if (!qword_1EEF62D80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F7E0, &type metadata for MetalFunctionReflection);
    atomic_store(result, (unint64_t *)&qword_1EEF62D80);
  }
  return result;
}

uint64_t sub_1B207A0F8()
{
  return swift_deallocObject();
}

uint64_t sub_1B207A108()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B207A12C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B207A150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B207A194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B207A194()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF62D90)
  {
    type metadata accessor for TextureDescriptor(255);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF62D90);
  }
}

uint64_t storeEnumTagSinglePayload for RenderGraphNode.ResourceSemantic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B207A234 + 4 * byte_1B22B668D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B207A268 + 4 * byte_1B22B6688[v4]))();
}

uint64_t sub_1B207A268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207A270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B207A278);
  return result;
}

uint64_t sub_1B207A284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B207A28CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B207A290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207A298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RenderGraphNode.ResourceSemantic()
{
  return &type metadata for RenderGraphNode.ResourceSemantic;
}

unint64_t sub_1B207A2B8()
{
  unint64_t result;

  result = qword_1EEF62D98;
  if (!qword_1EEF62D98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6884, &type metadata for RenderGraphNode.ResourceSemantic);
    atomic_store(result, (unint64_t *)&qword_1EEF62D98);
  }
  return result;
}

uint64_t sub_1B207A300()
{
  uint64_t v0;
  char v1;

  v0 = sub_1B222A210();
  swift_bridgeObjectRetain();
  v1 = sub_1B2228914();
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    sub_1B2228854();
    sub_1B22287E8();
  }
  return v0;
}

uint64_t sub_1B207A3C8(char *a1, char *a2)
{
  return sub_1B1F937B0(*a1, *a2);
}

uint64_t sub_1B207A3D4()
{
  return sub_1B1FB2C58();
}

uint64_t sub_1B207A3DC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B207A43C()
{
  return sub_1B1DB5958();
}

uint64_t sub_1B207A444@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B207A4A0(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000012;
  else
    v2 = 0xD000000000000010;
  v3 = 0x80000001B2328EA0;
  if (*v1)
    v3 = 0x80000001B2328EC0;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1B207A4E4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0xD000000000000010;
}

uint64_t sub_1B207A524@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B207A584()
{
  sub_1B207B204();
  return sub_1B222A1D4();
}

uint64_t sub_1B207A5AC()
{
  sub_1B207B204();
  return sub_1B222A1E0();
}

_QWORD *sub_1B207A5D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B207AF14(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B207A600(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B207AD08(a1, *(_QWORD *)v1, *(_QWORD **)(v1 + 8));
}

uint64_t sub_1B207A618@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for CustomParameters();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = v3;
  v2[4] = v3;
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v3;
  v4[3] = v3;
  v4[4] = v3;
  result = sub_1B1C6C500(v3);
  *a1 = v2;
  a1[1] = v4;
  a1[2] = result;
  a1[3] = v6;
  return result;
}

uint64_t sub_1B207A694(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  _QWORD *v29;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = a1;
    for (i = (uint64_t *)(a2 + 40); ; i += 2)
    {
      v11 = *(i - 1);
      v10 = *i;
      v12 = *(_QWORD *)(a1 + 16);
      swift_bridgeObjectRetain();
      v29 = a4;
      if (v12)
      {
        swift_bridgeObjectRetain();
        v13 = sub_1B1DC3B00(v11, v10);
        if ((v14 & 1) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
          swift_retain();
        }
        else
        {
          v15 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = 0;
      }
      swift_retain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = sub_1B1DC3B00(v11, v10);
      v19 = v17;
      v20 = a3[2] + ((v17 & 1) == 0);
      if (a3[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v17 & 1) == 0)
            goto LABEL_17;
        }
        else
        {
          sub_1B1EA9B84();
          if ((v19 & 1) == 0)
            goto LABEL_17;
        }
      }
      else
      {
        sub_1B1E93E78(v20, isUniquelyReferenced_nonNull_native);
        v21 = sub_1B1DC3B00(v11, v10);
        if ((v19 & 1) != (v22 & 1))
        {
          result = sub_1B2229FC4();
          __break(1u);
          return result;
        }
        v18 = v21;
        if ((v19 & 1) == 0)
        {
LABEL_17:
          a3[(v18 >> 6) + 8] |= 1 << v18;
          v23 = (uint64_t *)(a3[6] + 16 * v18);
          *v23 = v11;
          v23[1] = v10;
          *(_QWORD *)(a3[7] + 8 * v18) = v15;
          ++a3[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          a4 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            a4 = sub_1B1C63044(0, v29[2] + 1, 1, v29);
          v25 = a4[2];
          v24 = a4[3];
          a1 = v28;
          if (v25 >= v24 >> 1)
            a4 = sub_1B1C63044(v24 > 1, v25 + 1, 1, a4);
          a4[2] = v25 + 1;
          v26 = &a4[2 * v25];
          v26[4] = v11;
          v26[5] = v10;
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
      *(_QWORD *)(a3[7] + 8 * v18) = v15;
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v28;
      a4 = v29;
LABEL_4:
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)a3;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (uint64_t)a3;
}

_OWORD *sub_1B207A970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];

  sub_1B1F7AB8C(a1, a2, (uint64_t)&v7);
  if (v8)
  {
    sub_1B1A0DDAC(&v7, v9);
  }
  else
  {
    sub_1B1F7AB8C(a1, a2, (uint64_t)v9);
    sub_1B1A0DD70((uint64_t)&v7);
  }
  sub_1B1A0DCD4((uint64_t)v9, (uint64_t)&v7);
  if (v8)
  {
    sub_1B1A0DD70((uint64_t)v9);
    return sub_1B1A0DDAC(&v7, (_OWORD *)a3);
  }
  else
  {
    *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEB418];
    *(_QWORD *)a3 = 0;
    sub_1B1A0DD70((uint64_t)v9);
    return (_OWORD *)sub_1B1A0DD70((uint64_t)&v7);
  }
}

_OWORD *sub_1B207AA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B207A970(a1, a2, a3);
}

uint64_t sub_1B207AA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F7ACC0(a2, a3, a1);
  sub_1B1F7ACC0(a2, a3, a1);
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
}

unint64_t sub_1B207AAB4()
{
  return 0xD000000000000013;
}

_QWORD *sub_1B207AAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = sub_1B1C6A62C(v1, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B207AB34(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t result;

  result = sub_1B1F7B494(a1, a2, a3);
  if (!result)
    return sub_1B1F7B494(a1, a2, a3);
  return result;
}

uint64_t destroy for MaterialParameters()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MaterialParameters(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MaterialParameters(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MaterialParameters(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MaterialParameters()
{
  return &type metadata for MaterialParameters;
}

uint64_t sub_1B207AD08(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  _QWORD *v17;

  v15[2] = *a3;
  sub_1B207B248(0, &qword_1EEF62DB0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v15 - v10;
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v12 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v17 = 0;
  swift_retain();
  sub_1B1F1AD70(v12, (uint64_t *)&v17, 0xD00000000000002ELL, 0x80000001B234A160);
  swift_release();
  swift_release();
  sub_1B19FA070(a1, a1[3]);
  sub_1B207B204();
  sub_1B222A180();
  v17 = (_QWORD *)a2;
  v16 = 0;
  sub_1B207B2A4(&qword_1ED4B8D88, (uint64_t)&unk_1B22A6824);
  v13 = v15[1];
  sub_1B2229958();
  if (!v13)
  {
    v17 = a3;
    v16 = 1;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

_QWORD *sub_1B207AF14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *inited;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;

  sub_1B207B248(0, &qword_1EEF62DA0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v21 = v2;
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v19 - v5;
  type metadata accessor for CustomParameters();
  inited = (_QWORD *)swift_initStackObject();
  v8 = MEMORY[0x1E0DEE9D8];
  inited[2] = MEMORY[0x1E0DEE9D8];
  inited[3] = v8;
  inited[4] = v8;
  v9 = (_QWORD *)swift_initStackObject();
  v9[2] = v8;
  v9[3] = v8;
  v9[4] = v8;
  v10 = sub_1B1C6C500(v8);
  v22 = v11;
  v23 = v10;
  v12 = a1[3];
  v24 = a1;
  sub_1B19FA070(a1, v12);
  sub_1B207B204();
  v13 = v25;
  sub_1B222A150();
  if (v13)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v24);
    swift_release();
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = v3;
    v26 = 0;
    sub_1B207B2A4(&qword_1ED4B8D90, (uint64_t)&unk_1B22A684C);
    sub_1B2229814();
    swift_retain();
    swift_release();
    inited = v27;
    swift_release();
    v26 = 1;
    sub_1B2229814();
    swift_release();
    v15 = (_QWORD *)sub_1B1F7B1A8();
    v19 = v15;
    v17 = v16;
    v20 = sub_1B1F7B1A8();
    sub_1B207A694(v20, v18, v15, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v21);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v24);
  }
  return inited;
}

unint64_t sub_1B207B204()
{
  unint64_t result;

  result = qword_1EEF62DA8;
  if (!qword_1EEF62DA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6B40, &type metadata for MaterialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62DA8);
  }
  return result;
}

void sub_1B207B248(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B207B204();
    v7 = a3(a1, &type metadata for MaterialParameters.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B207B2A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CustomParameters();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MaterialParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B207B330 + 4 * byte_1B22B6975[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B207B364 + 4 * byte_1B22B6970[v4]))();
}

uint64_t sub_1B207B364(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207B36C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B207B374);
  return result;
}

uint64_t sub_1B207B380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B207B388);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B207B38C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207B394(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameters.CodingKeys()
{
  return &type metadata for MaterialParameters.CodingKeys;
}

unint64_t sub_1B207B3B4()
{
  unint64_t result;

  result = qword_1EEF62DB8;
  if (!qword_1EEF62DB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6B18, &type metadata for MaterialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62DB8);
  }
  return result;
}

unint64_t sub_1B207B3FC()
{
  unint64_t result;

  result = qword_1EEF62DC0;
  if (!qword_1EEF62DC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6A50, &type metadata for MaterialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62DC0);
  }
  return result;
}

unint64_t sub_1B207B444()
{
  unint64_t result;

  result = qword_1EEF62DC8;
  if (!qword_1EEF62DC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6A78, &type metadata for MaterialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62DC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SineMoveAction()
{
  return &type metadata for SineMoveAction;
}

ValueMetadata *type metadata accessor for RotateAction()
{
  return &type metadata for RotateAction;
}

uint64_t sub_1B207B4A8(_QWORD *a1, double a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v12;
  __n128 v13;
  char v14;

  v12 = a3;
  sub_1B19F8E54(0, &qword_1EEF62DF8, (uint64_t (*)(void))sub_1B207C734, (uint64_t)&type metadata for RotateAction.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B207C734();
  sub_1B222A180();
  v13.n128_u8[0] = 0;
  sub_1B2229934();
  if (!v3)
  {
    v13 = v12;
    v14 = 1;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B207B630(char *a1, char *a2)
{
  return sub_1B1F8EDA4(*a1, *a2);
}

uint64_t sub_1B207B63C()
{
  _BYTE *v0;

  if (*v0)
    return 1936291937;
  else
    return 0x656C676E61;
}

uint64_t sub_1B207B66C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B207BEA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B207B690()
{
  sub_1B207C734();
  return sub_1B222A1D4();
}

uint64_t sub_1B207B6B8()
{
  sub_1B207C734();
  return sub_1B222A1E0();
}

void sub_1B207B6E0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  __int128 v5;

  v4 = sub_1B207C2F8(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_OWORD *)(a2 + 16) = v5;
  }
}

uint64_t sub_1B207B70C(_QWORD *a1, double a2)
{
  __n128 *v2;

  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B207B4A8(a1, a2, v2[1]);
}

double sub_1B207B728@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1078530010;
  result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  return result;
}

uint64_t sub_1B207B744(_QWORD *a1, double a2, double a3, double a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v14;
  __n128 v15;
  char v16;

  v14 = a5;
  sub_1B19F8E54(0, &qword_1EEF62DE0, (uint64_t (*)(void))sub_1B207C6F0, (uint64_t)&type metadata for SineMoveAction.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B207C6F0();
  sub_1B222A180();
  v15.n128_u8[0] = 0;
  sub_1B2229934();
  if (!v5)
  {
    v15.n128_u8[0] = 1;
    sub_1B2229934();
    v15.n128_u8[0] = 2;
    sub_1B2229934();
    v15 = v14;
    v16 = 3;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

void sub_1B207B92C(char *a1)
{
  sub_1B1F90D84(*a1);
}

uint64_t sub_1B207B938()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B207B96C + 4 * byte_1B22B6B90[*v0]))(0x647574696C706D61, 0xE900000000000065);
}

uint64_t sub_1B207B96C()
{
  return 0x636E657571657266;
}

uint64_t sub_1B207B984()
{
  return 0x6968536573616870;
}

uint64_t sub_1B207B9A0()
{
  return 0x61746C6564;
}

uint64_t sub_1B207B9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B207BF80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B207B9D8()
{
  sub_1B207C6F0();
  return sub_1B222A1D4();
}

uint64_t sub_1B207BA00()
{
  sub_1B207C6F0();
  return sub_1B222A1E0();
}

void sub_1B207BA28(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;
  __int128 v7;

  v4 = sub_1B207C4C4(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_OWORD *)(a2 + 16) = v7;
  }
}

uint64_t sub_1B207BA58(_QWORD *a1, double a2, double a3, double a4)
{
  __n128 *v4;

  LODWORD(a2) = v4->n128_u32[0];
  LODWORD(a3) = v4->n128_u32[1];
  LODWORD(a4) = v4->n128_u32[2];
  return sub_1B207B744(a1, a2, a3, a4, v4[1]);
}

double sub_1B207BA78@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)a1 = _D0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DB0;
  return result;
}

uint64_t sub_1B207BA94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  sub_1B19F8E54(0, &qword_1EEF62E40, (uint64_t (*)(void))sub_1B207CAD0, (uint64_t)&type metadata for SineYAction.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B207CAD0();
  sub_1B222A180();
  v13 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v12 = 1;
    sub_1B2229934();
    v11 = 2;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B207BBFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F8E960(*a1, *a2);
}

uint64_t sub_1B207BC08()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x636E657571657266;
  if (*v0 != 1)
    v1 = 0x6968536573616870;
  if (*v0)
    return v1;
  else
    return 0x647574696C706D61;
}

uint64_t sub_1B207BC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B207BD38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B207BC90()
{
  sub_1B207CAD0();
  return sub_1B222A1D4();
}

uint64_t sub_1B207BCB8()
{
  sub_1B207CAD0();
  return sub_1B222A1E0();
}

void sub_1B207BCE0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;

  v4 = sub_1B207C14C(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
  }
}

uint64_t sub_1B207BD0C(_QWORD *a1)
{
  return sub_1B207BA94(a1);
}

double sub_1B207BD28@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1B207BD38(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x647574696C706D61 && a2 == 0xE900000000000065;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6968536573616870 && a2 == 0xEA00000000007466)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B207BEA8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C676E61 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936291937 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B207BF80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x647574696C706D61 && a2 == 0xE900000000000065;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6968536573616870 && a2 == 0xEA00000000007466 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61746C6564 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

float sub_1B207C14C(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v10;
  _BYTE v12[16];

  sub_1B19F8E54(0, &qword_1EEF62E30, (uint64_t (*)(void))sub_1B207CAD0, (uint64_t)&type metadata for SineYAction.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B207CAD0();
  sub_1B222A150();
  if (!v1)
  {
    v12[15] = 0;
    sub_1B22297F0();
    v2 = v10;
    v12[14] = 1;
    sub_1B22297F0();
    v12[13] = 2;
    sub_1B22297F0();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

float sub_1B207C2F8(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  __int128 v12;
  char v13;
  __int128 v14;

  sub_1B19F8E54(0, &qword_1EEF62DE8, (uint64_t (*)(void))sub_1B207C734, (uint64_t)&type metadata for RotateAction.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B207C734();
  sub_1B222A150();
  if (!v1)
  {
    LOBYTE(v14) = 0;
    sub_1B22297F0();
    v2 = v10;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v13 = 1;
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v14;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

float sub_1B207C4C4(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  __int128 v12;
  char v13;
  __int128 v14;

  sub_1B19F8E54(0, &qword_1EEF62DD0, (uint64_t (*)(void))sub_1B207C6F0, (uint64_t)&type metadata for SineMoveAction.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B207C6F0();
  sub_1B222A150();
  if (!v1)
  {
    LOBYTE(v14) = 0;
    sub_1B22297F0();
    v2 = v10;
    LOBYTE(v14) = 1;
    sub_1B22297F0();
    LOBYTE(v14) = 2;
    sub_1B22297F0();
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v13 = 3;
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v14;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B207C6F0()
{
  unint64_t result;

  result = qword_1EEF62DD8;
  if (!qword_1EEF62DD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6F18, &type metadata for SineMoveAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62DD8);
  }
  return result;
}

unint64_t sub_1B207C734()
{
  unint64_t result;

  result = qword_1EEF62DF0;
  if (!qword_1EEF62DF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6EC8, &type metadata for RotateAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62DF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RotateAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B207C7C4 + 4 * byte_1B22B6B99[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B207C7F8 + 4 * byte_1B22B6B94[v4]))();
}

uint64_t sub_1B207C7F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207C800(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B207C808);
  return result;
}

uint64_t sub_1B207C814(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B207C81CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B207C820(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207C828(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RotateAction.CodingKeys()
{
  return &type metadata for RotateAction.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SineMoveAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B207C890 + 4 * byte_1B22B6BA3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B207C8C4 + 4 * byte_1B22B6B9E[v4]))();
}

uint64_t sub_1B207C8C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207C8CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B207C8D4);
  return result;
}

uint64_t sub_1B207C8E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B207C8E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B207C8EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207C8F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SineMoveAction.CodingKeys()
{
  return &type metadata for SineMoveAction.CodingKeys;
}

ValueMetadata *type metadata accessor for SineYAction()
{
  return &type metadata for SineYAction;
}

unint64_t sub_1B207C924()
{
  unint64_t result;

  result = qword_1EEF62E00;
  if (!qword_1EEF62E00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6DE8, &type metadata for SineMoveAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E00);
  }
  return result;
}

unint64_t sub_1B207C96C()
{
  unint64_t result;

  result = qword_1EEF62E08;
  if (!qword_1EEF62E08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6EA0, &type metadata for RotateAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E08);
  }
  return result;
}

unint64_t sub_1B207C9B4()
{
  unint64_t result;

  result = qword_1EEF62E10;
  if (!qword_1EEF62E10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6E10, &type metadata for RotateAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E10);
  }
  return result;
}

unint64_t sub_1B207C9FC()
{
  unint64_t result;

  result = qword_1EEF62E18;
  if (!qword_1EEF62E18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6E38, &type metadata for RotateAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E18);
  }
  return result;
}

unint64_t sub_1B207CA44()
{
  unint64_t result;

  result = qword_1EEF62E20;
  if (!qword_1EEF62E20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6D58, &type metadata for SineMoveAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E20);
  }
  return result;
}

unint64_t sub_1B207CA8C()
{
  unint64_t result;

  result = qword_1EEF62E28;
  if (!qword_1EEF62E28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6D80, &type metadata for SineMoveAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E28);
  }
  return result;
}

unint64_t sub_1B207CAD0()
{
  unint64_t result;

  result = qword_1EEF62E38;
  if (!qword_1EEF62E38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7030, &type metadata for SineYAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E38);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SineYAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B207CB60 + 4 * byte_1B22B6BAD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B207CB94 + 4 * byte_1B22B6BA8[v4]))();
}

uint64_t sub_1B207CB94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207CB9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B207CBA4);
  return result;
}

uint64_t sub_1B207CBB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B207CBB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B207CBBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B207CBC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SineYAction.CodingKeys()
{
  return &type metadata for SineYAction.CodingKeys;
}

unint64_t sub_1B207CBE4()
{
  unint64_t result;

  result = qword_1EEF62E48;
  if (!qword_1EEF62E48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7008, &type metadata for SineYAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E48);
  }
  return result;
}

unint64_t sub_1B207CC2C()
{
  unint64_t result;

  result = qword_1EEF62E50;
  if (!qword_1EEF62E50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6F78, &type metadata for SineYAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E50);
  }
  return result;
}

unint64_t sub_1B207CC74()
{
  unint64_t result;

  result = qword_1EEF62E58;
  if (!qword_1EEF62E58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B6FA0, &type metadata for SineYAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62E58);
  }
  return result;
}

ValueMetadata *sub_1B207CCB8(ValueMetadata *a1)
{
  ValueMetadata *v2;

  if (a1 != &type metadata for Color
    || (v2 = &type metadata for TransientOriginColor, !sub_1B1E36538((uint64_t)&type metadata for TransientOriginColor)))
  {
    if (a1 != &type metadata for Scale3 && a1 != &type metadata for Scale1 && a1 != &type metadata for Scale2)
      return 0;
    v2 = &type metadata for TransientOriginScale;
    if (!sub_1B1E36538((uint64_t)&type metadata for TransientOriginScale))
      return 0;
  }
  return v2;
}

uint64_t *sub_1B207CD70(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  _OWORD *v68;
  unsigned int v69;
  __int128 v70;
  uint64_t v71;
  _OWORD *v72;
  unsigned int *v73;
  unsigned int v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_unfair_lock_s *v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  __int128 *v88;
  __int128 v89;
  uint64_t v90;
  __int128 *v91;
  _DWORD *v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_unfair_lock_s *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  __int128 v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_unfair_lock_s *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  __int128 *v127;
  __int128 v128;
  uint64_t v129;
  __int128 *v130;
  _QWORD *v131;
  __int128 v132;
  __int128 v133;
  _QWORD *v134;
  int v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_unfair_lock_s *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  _OWORD *v147;
  __int128 v148;
  uint64_t v149;
  _OWORD *v150;
  __int128 *v151;
  __int128 v152;
  __int128 v153;
  uint64_t *result;
  _QWORD *v155;
  int v156;
  uint64_t v157;
  unsigned int *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  os_unfair_lock_s *v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  __int128 *v168;
  __int128 v169;
  uint64_t v170;
  __int128 *v171;
  _OWORD *v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  int v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int16 *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237[8];
  uint64_t v238[8];
  uint64_t v239[8];
  uint64_t v240[8];
  uint64_t v241[8];
  uint64_t v242[8];
  uint64_t v243[8];
  _OWORD v244[2];
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _OWORD v251[2];
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _OWORD v258[2];
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  _OWORD v265[2];
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _OWORD v272[2];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  _OWORD v279[2];
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD v286[7];
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _OWORD v291[2];
  uint64_t v292;
  _OWORD v293[2];
  uint64_t v294;
  _OWORD v295[2];
  uint64_t v296;
  _OWORD v297[2];
  uint64_t v298;
  _OWORD v299[2];
  uint64_t v300;
  _OWORD v301[2];
  uint64_t v302;
  _BYTE v303[40];
  _OWORD v304[2];
  uint64_t v305;
  _BYTE v306[40];
  _OWORD v307[2];
  uint64_t v308;
  _BYTE v309[40];
  _OWORD v310[2];
  uint64_t v311;
  _BYTE v312[40];
  _OWORD v313[2];
  uint64_t v314;
  _BYTE v315[40];
  _OWORD v316[2];
  uint64_t v317;
  _BYTE v318[40];
  _OWORD v319[2];
  uint64_t v320;
  _OWORD v321[2];
  uint64_t v322;

  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v322 = *(_QWORD *)(v1 + 48);
  v321[1] = v3;
  v321[0] = v2;
  sub_1B1E8FCE4(a1, (uint64_t)v321, 0x200000000, v237);
  sub_1B19F66A0((uint64_t)v237, (uint64_t)v286, (unint64_t *)&qword_1ED4B7DE0);
  v230 = (unsigned __int16 *)v286[0];
  if (v286[0])
  {
    if (v290 >= 1)
    {
      v180 = v287;
      if (v287)
      {
        v4 = v289;
        v179 = v286[5];
        v5 = v289[4];
        v6 = *(unsigned __int8 *)(v288 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v178 = v289 + 8;
        v223 = v286[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        v174 = v5;
        v177 = v6;
        while (1)
        {
          v8 = (_QWORD *)(v179 + 48 * v7);
          v9 = (uint64_t *)v8[2];
          v10 = v8[3];
          v11 = v8[4];
          v12 = v8[5];
          if (v6)
          {
            v13 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v5);
          v188 = v4[7];
          v195 = v4[6];
          v181 = v4[8];
          v209 = v4[10];
          v216 = v4[9];
          v14 = v4[4];
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          v16 = (char *)v12;
          swift_retain();
          v4[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v4[7] = v15;
          v178[1] = 0;
          v178[2] = 0;
          *v178 = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v9, v10, v11, (uint64_t)v4);
          v18 = sub_1B1A12038((uint64_t)&type metadata for TransientOriginColor, (uint64_t)&off_1E639F7A8, v9, v10, v11, (uint64_t)v4);
          memcpy((void *)(v17 + 16 * *((_QWORD *)v16 + 29)), (const void *)(v18 + 16 * *((_QWORD *)v16 + 29)), 16 * (*((_QWORD *)v16 + 31) - *((_QWORD *)v16 + 29)));
          v202 = v16;
          memcpy((void *)(v18 + 16 * *((_QWORD *)v16 + 31)), (const void *)(v17 + 16 * *((_QWORD *)v16 + 31)), 16 * (*((_QWORD *)v16 + 30) - *((_QWORD *)v16 + 31)));
          v19 = v4[6];
          v20 = v4[8];
          if (!v20)
          {
            v46 = v4[7];
            v47 = (_QWORD *)v4[4];
            v49 = v195;
            v50 = v202;
            v52 = v181;
            v51 = v188;
            v6 = v177;
            goto LABEL_47;
          }
          for (i = 0; i != v20; ++i)
          {
            v23 = (uint64_t *)(v19 + 48 * i);
            v24 = *v23;
            v25 = (void (*)(uint64_t))v23[4];
            v26 = v4[9];
            if (v26)
              v27 = v24 == v26;
            else
              v27 = 0;
            if (v27 || !v230[11])
              goto LABEL_11;
            v28 = v230[9];
            v29 = (_QWORD *)(v223 + v230[8]);
            v30 = v23[2];
            v31 = v29;
            v32 = v28 >> 4;
            v33 = v223;
            if (v28 >= 0x10)
            {
              while (*v31 != v24)
              {
                ++v33;
                v31 += 2;
                if (!--v32)
                  goto LABEL_26;
              }
              v34 = *(unsigned __int8 *)(v33 + v230[10]);
              v35 = v34 > 5;
              v36 = (1 << v34) & 0x23;
              if (v35 || v36 == 0)
              {
LABEL_11:
                v22 = swift_retain();
                v25(v22);
                swift_release();
                continue;
              }
            }
LABEL_26:
            if (swift_conformsToProtocol2())
              v38 = v30;
            else
              v38 = 0;
            if (v38)
            {
              if (v28 < 0x10)
                goto LABEL_11;
              v39 = v29;
              v40 = v28 >> 4;
              v41 = v223;
              while (*v39 != v38)
              {
                ++v41;
                v39 += 2;
                if (!--v40)
                  goto LABEL_39;
              }
              v42 = *(unsigned __int8 *)(v41 + v230[10]);
              v35 = v42 > 5;
              v43 = (1 << v42) & 0x23;
              if (v35 || v43 == 0)
                goto LABEL_11;
LABEL_39:
              v45 = 16 * (v28 >> 4);
              while (*v29 != v38)
              {
                v29 += 2;
                v45 -= 16;
                if (!v45)
                  goto LABEL_11;
              }
            }
          }
          v46 = v4[7];
          v19 = v4[6];
          v47 = (_QWORD *)v4[4];
          if ((uint64_t)v4[8] >= 1)
          {
            v48 = v4[7];
            swift_arrayDestroy();
            v46 = v48;
          }
          v5 = v174;
          v6 = v177;
          v49 = v195;
          v50 = v202;
          v52 = v181;
          v51 = v188;
LABEL_47:
          ecs_stack_allocator_deallocate(v47, v19, 48 * v46);
          v4[6] = v49;
          v4[7] = v51;
          v4[8] = v52;
          v4[9] = v216;
          v4[10] = v209;
          sub_1B1F03804(v50);
          ecs_stack_allocator_pop_snapshot(v5);
          if ((v6 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v50 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v50 + 47));
          }
          swift_release();
          if (++v7 == v180)
          {
            sub_1B19ED748(v237);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v237);
  }
  v53 = *(_OWORD *)(v175 + 112);
  v319[0] = *(_OWORD *)(v175 + 96);
  v319[1] = v53;
  v320 = *(_QWORD *)(v175 + 128);
  sub_1B1E8FCE4(a1, (uint64_t)v319, 0x200000000, v238);
  sub_1B19F66A0((uint64_t)v238, (uint64_t)v279, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v279[0])
  {
    v57 = 0;
    goto LABEL_74;
  }
  if (v285 < 1 || (v210 = v282) == 0)
  {
    v57 = 0;
    goto LABEL_73;
  }
  v54 = v284;
  v55 = v284[4];
  v224 = *(unsigned __int8 *)(v283 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v291[0] = v279[0];
  v291[1] = v279[1];
  v292 = v280;
  v189 = (uint64_t)(v284 + 6);
  v196 = v281;
  v182 = v284 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v56 = 0;
  v57 = 0;
  v203 = v55;
  do
  {
    v58 = (unsigned int *)(v196 + 48 * v56);
    v59 = *v58;
    v217 = v58[1];
    v61 = (uint64_t *)*((_QWORD *)v58 + 2);
    v60 = *((_QWORD *)v58 + 3);
    v63 = *((_QWORD *)v58 + 4);
    v62 = *((_QWORD *)v58 + 5);
    v231 = v57;
    if (v224)
    {
      v64 = *(os_unfair_lock_s **)(v62 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v64);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v62 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v55);
    sub_1B19F66A0(v189, (uint64_t)v318, &qword_1ED4B7FB0);
    v65 = v54[4];
    v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v54[6] = ecs_stack_allocator_allocate(v65, 48 * v66, 8);
    v54[7] = v66;
    v182[1] = 0;
    v182[2] = 0;
    *v182 = 0;
    swift_release();
    v67 = (unsigned int *)sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v61, v60, v63, (uint64_t)v54);
    v68 = (_OWORD *)sub_1B1A12038((uint64_t)&type metadata for TransientOriginScale, (uint64_t)&off_1E639F880, v61, v60, v63, (uint64_t)v54);
    if (v61)
    {
      if (!v63)
        goto LABEL_65;
      v57 = v231;
      do
      {
        v69 = *v67++;
        *(_QWORD *)&v70 = __PAIR64__(1.0, v69);
        *((_QWORD *)&v70 + 1) = COERCE_UNSIGNED_INT(1.0);
        *v68++ = v70;
        --v63;
      }
      while (v63);
    }
    else
    {
      if ((_DWORD)v59 == (_DWORD)v217)
      {
LABEL_65:
        v57 = v231;
        goto LABEL_68;
      }
      v71 = v217 - v59;
      v72 = &v68[v59];
      v73 = &v67[v59];
      v57 = v231;
      do
      {
        v74 = *v73++;
        *(_QWORD *)&v75 = __PAIR64__(1.0, v74);
        *((_QWORD *)&v75 + 1) = COERCE_UNSIGNED_INT(1.0);
        *v72++ = v75;
        --v71;
      }
      while (v71);
    }
LABEL_68:
    sub_1B1F05D48(v54, (unsigned __int16 **)v291, (uint64_t)v318);
    sub_1B1F03804((char *)v62);
    v55 = v203;
    ecs_stack_allocator_pop_snapshot(v203);
    if ((v224 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
    }
    swift_release();
    ++v56;
  }
  while (v56 != v210);
  sub_1B19ED748(v238);
LABEL_73:
  sub_1B19ED748(v238);
LABEL_74:
  v316[0] = *(_OWORD *)(v175 + 136);
  v316[1] = *(_OWORD *)(v175 + 152);
  v317 = *(_QWORD *)(v175 + 168);
  sub_1B1E8FCE4(a1, (uint64_t)v316, 0x200000000, v239);
  sub_1B19F66A0((uint64_t)v239, (uint64_t)v272, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v272[0])
  {
    if (v278 >= 1)
    {
      v204 = v275;
      if (v275)
      {
        v76 = v277;
        v225 = v277[4];
        v218 = *(unsigned __int8 *)(v276 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v293[0] = v272[0];
        v293[1] = v272[1];
        v294 = v273;
        v190 = (uint64_t)(v277 + 6);
        v197 = v274;
        v183 = v277 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v77 = 0;
        while (1)
        {
          v78 = (unsigned int *)(v197 + 48 * v77);
          v79 = *v78;
          v211 = v78[1];
          v80 = (uint64_t *)*((_QWORD *)v78 + 2);
          v81 = *((_QWORD *)v78 + 3);
          v83 = *((_QWORD *)v78 + 4);
          v82 = *((_QWORD *)v78 + 5);
          v232 = v57;
          if (v218)
          {
            v84 = *(os_unfair_lock_s **)(v82 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v84);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v82 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v225);
          sub_1B19F66A0(v190, (uint64_t)v315, &qword_1ED4B7FB0);
          v85 = v76[4];
          v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v76[6] = ecs_stack_allocator_allocate(v85, 48 * v86, 8);
          v76[7] = v86;
          v183[1] = 0;
          v183[2] = 0;
          *v183 = 0;
          swift_release();
          v87 = (_DWORD *)sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v80, v81, v83, (uint64_t)v76);
          v88 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for TransientOriginScale, (uint64_t)&off_1E639F880, v80, v81, v83, (uint64_t)v76);
          if (v80)
          {
            if (v83)
            {
              v57 = v232;
              do
              {
                v89 = *v88++;
                *v87++ = v89;
                --v83;
              }
              while (v83);
              goto LABEL_91;
            }
          }
          else if ((_DWORD)v79 != (_DWORD)v211)
          {
            v90 = v211 - v79;
            v91 = &v88[v79];
            v92 = &v87[v79];
            v57 = v232;
            do
            {
              v93 = *v91++;
              *v92++ = v93;
              --v90;
            }
            while (v90);
            goto LABEL_91;
          }
          v57 = v232;
LABEL_91:
          sub_1B1F05D48(v76, (unsigned __int16 **)v293, (uint64_t)v315);
          sub_1B1F03804((char *)v82);
          ecs_stack_allocator_pop_snapshot(v225);
          if ((v218 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v82 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v82 + 376));
          }
          swift_release();
          if (++v77 == v204)
          {
            sub_1B19ED748(v239);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v239);
  }
  v94 = *(_OWORD *)(v175 + 192);
  v313[0] = *(_OWORD *)(v175 + 176);
  v313[1] = v94;
  v314 = *(_QWORD *)(v175 + 208);
  sub_1B1E8FCE4(a1, (uint64_t)v313, 0x200000000, v240);
  sub_1B19F66A0((uint64_t)v240, (uint64_t)v265, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v265[0])
  {
    if (v271 >= 1)
    {
      v205 = v268;
      if (v268)
      {
        v95 = v270;
        v226 = v270[4];
        v219 = *(unsigned __int8 *)(v269 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v295[0] = v265[0];
        v295[1] = v265[1];
        v296 = v266;
        v191 = (uint64_t)(v270 + 6);
        v198 = v267;
        v184 = v270 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v96 = 0;
        while (1)
        {
          v97 = (unsigned int *)(v198 + 48 * v96);
          v98 = *v97;
          v212 = v97[1];
          v99 = (uint64_t *)*((_QWORD *)v97 + 2);
          v100 = *((_QWORD *)v97 + 3);
          v102 = *((_QWORD *)v97 + 4);
          v101 = *((_QWORD *)v97 + 5);
          v233 = v57;
          if (v219)
          {
            v103 = *(os_unfair_lock_s **)(v101 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v103);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v101 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v226);
          sub_1B19F66A0(v191, (uint64_t)v312, &qword_1ED4B7FB0);
          v104 = v95[4];
          v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v95[6] = ecs_stack_allocator_allocate(v104, 48 * v105, 8);
          v95[7] = v105;
          v184[1] = 0;
          v184[2] = 0;
          *v184 = 0;
          swift_release();
          v106 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, v99, v100, v102, (uint64_t)v95);
          v107 = (_OWORD *)sub_1B1A12038((uint64_t)&type metadata for TransientOriginScale, (uint64_t)&off_1E639F880, v99, v100, v102, (uint64_t)v95);
          if (v99)
          {
            if (v102)
            {
              v57 = v233;
              do
              {
                v108 = *v106++;
                *(_QWORD *)&v109 = v108;
                *((_QWORD *)&v109 + 1) = 1065353216;
                *v107++ = v109;
                --v102;
              }
              while (v102);
              goto LABEL_112;
            }
          }
          else if ((_DWORD)v98 != (_DWORD)v212)
          {
            v110 = v212 - v98;
            v111 = &v107[v98];
            v112 = &v106[v98];
            v57 = v233;
            do
            {
              v113 = *v112++;
              *(_QWORD *)&v114 = v113;
              *((_QWORD *)&v114 + 1) = 1065353216;
              *v111++ = v114;
              --v110;
            }
            while (v110);
            goto LABEL_112;
          }
          v57 = v233;
LABEL_112:
          sub_1B1F05D48(v95, (unsigned __int16 **)v295, (uint64_t)v312);
          sub_1B1F03804((char *)v101);
          ecs_stack_allocator_pop_snapshot(v226);
          if ((v219 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 376));
          }
          swift_release();
          if (++v96 == v205)
          {
            sub_1B19ED748(v240);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v240);
  }
  v310[0] = *(_OWORD *)(v175 + 216);
  v310[1] = *(_OWORD *)(v175 + 232);
  v311 = *(_QWORD *)(v175 + 248);
  sub_1B1E8FCE4(a1, (uint64_t)v310, 0x200000000, v241);
  sub_1B19F66A0((uint64_t)v241, (uint64_t)v258, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v258[0])
  {
    if (v264 >= 1)
    {
      v206 = v261;
      if (v261)
      {
        v115 = v263;
        v227 = v263[4];
        v220 = *(unsigned __int8 *)(v262 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v297[0] = v258[0];
        v297[1] = v258[1];
        v298 = v259;
        v192 = (uint64_t)(v263 + 6);
        v199 = v260;
        v185 = v263 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v116 = 0;
        while (1)
        {
          v117 = (unsigned int *)(v199 + 48 * v116);
          v118 = *v117;
          v213 = v117[1];
          v119 = (uint64_t *)*((_QWORD *)v117 + 2);
          v120 = *((_QWORD *)v117 + 3);
          v122 = *((_QWORD *)v117 + 4);
          v121 = *((_QWORD *)v117 + 5);
          v234 = v57;
          if (v220)
          {
            v123 = *(os_unfair_lock_s **)(v121 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v123);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v121 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v227);
          sub_1B19F66A0(v192, (uint64_t)v309, &qword_1ED4B7FB0);
          v124 = v115[4];
          v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v115[6] = ecs_stack_allocator_allocate(v124, 48 * v125, 8);
          v115[7] = v125;
          v185[1] = 0;
          v185[2] = 0;
          *v185 = 0;
          swift_release();
          v126 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, v119, v120, v122, (uint64_t)v115);
          v127 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for TransientOriginScale, (uint64_t)&off_1E639F880, v119, v120, v122, (uint64_t)v115);
          if (v119)
          {
            if (v122)
            {
              v57 = v234;
              do
              {
                v128 = *v127++;
                *v126++ = v128;
                --v122;
              }
              while (v122);
              goto LABEL_133;
            }
          }
          else if ((_DWORD)v118 != (_DWORD)v213)
          {
            v129 = v213 - v118;
            v130 = &v127[v118];
            v131 = &v126[v118];
            v57 = v234;
            do
            {
              v132 = *v130++;
              *v131++ = v132;
              --v129;
            }
            while (v129);
            goto LABEL_133;
          }
          v57 = v234;
LABEL_133:
          sub_1B1F05D48(v115, (unsigned __int16 **)v297, (uint64_t)v309);
          sub_1B1F03804((char *)v121);
          ecs_stack_allocator_pop_snapshot(v227);
          if ((v220 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v121 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v121 + 376));
          }
          swift_release();
          if (++v116 == v206)
          {
            sub_1B19ED748(v241);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v241);
  }
  v133 = *(_OWORD *)(v175 + 272);
  v307[0] = *(_OWORD *)(v175 + 256);
  v307[1] = v133;
  v308 = *(_QWORD *)(v175 + 288);
  sub_1B1E8FCE4(a1, (uint64_t)v307, 0x200000000, v242);
  sub_1B19F66A0((uint64_t)v242, (uint64_t)v251, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v251[0])
  {
    if (v257 >= 1)
    {
      v214 = v254;
      if (v254)
      {
        v134 = v256;
        v235 = v256[4];
        v135 = *(unsigned __int8 *)(v255 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v299[0] = v251[0];
        v299[1] = v251[1];
        v300 = v252;
        v200 = (uint64_t)(v256 + 6);
        v207 = v253;
        v193 = v256 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v136 = 0;
        v186 = v135;
        while (1)
        {
          v137 = (unsigned int *)(v207 + 48 * v136);
          v228 = *v137;
          v221 = v137[1];
          v138 = (uint64_t *)*((_QWORD *)v137 + 2);
          v139 = *((_QWORD *)v137 + 3);
          v141 = *((_QWORD *)v137 + 4);
          v140 = *((_QWORD *)v137 + 5);
          if (v135)
          {
            v142 = v57;
            v143 = *(os_unfair_lock_s **)(v140 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v143);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v140 + 344));
            swift_release();
          }
          else
          {
            v142 = v57;
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v235);
          sub_1B19F66A0(v200, (uint64_t)v306, &qword_1ED4B7FB0);
          v144 = v134[4];
          v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v140 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v134[6] = ecs_stack_allocator_allocate(v144, 48 * v145, 8);
          v134[7] = v145;
          v193[1] = 0;
          v193[2] = 0;
          *v193 = 0;
          swift_release();
          v146 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, v138, v139, v141, (uint64_t)v134);
          v147 = (_OWORD *)sub_1B1A12038((uint64_t)&type metadata for TransientOriginScale, (uint64_t)&off_1E639F880, v138, v139, v141, (uint64_t)v134);
          if (v138)
          {
            if (v141)
            {
              v57 = v142;
              v135 = v186;
              do
              {
                v148 = *v146++;
                *v147++ = v148;
                --v141;
              }
              while (v141);
              goto LABEL_154;
            }
          }
          else if ((_DWORD)v228 != (_DWORD)v221)
          {
            v149 = v221 - v228;
            v150 = &v147[v228];
            v151 = &v146[v228];
            v57 = v142;
            v135 = v186;
            do
            {
              v152 = *v151++;
              *v150++ = v152;
              --v149;
            }
            while (v149);
            goto LABEL_154;
          }
          v57 = v142;
          v135 = v186;
LABEL_154:
          sub_1B1F05D48(v134, (unsigned __int16 **)v299, (uint64_t)v306);
          sub_1B1F03804((char *)v140);
          ecs_stack_allocator_pop_snapshot(v235);
          if ((v135 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v140 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v140 + 376));
          }
          swift_release();
          if (++v136 == v214)
          {
            sub_1B19ED748(v242);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v242);
  }
  v305 = *(_QWORD *)(v175 + 328);
  v153 = *(_OWORD *)(v175 + 312);
  v304[0] = *(_OWORD *)(v175 + 296);
  v304[1] = v153;
  sub_1B1E8FCE4(a1, (uint64_t)v304, 0x200000000, v243);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v243, (uint64_t)v244, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v244[0])
  {
    if (v250 >= 1)
    {
      v215 = v247;
      if (v247)
      {
        v155 = v249;
        v236 = v249[4];
        v156 = *(unsigned __int8 *)(v248 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v301[0] = v244[0];
        v301[1] = v244[1];
        v302 = v245;
        v201 = (uint64_t)(v249 + 6);
        v208 = v246;
        v194 = v249 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v157 = 0;
        v187 = v156;
        while (1)
        {
          v158 = (unsigned int *)(v208 + 48 * v157);
          v229 = *v158;
          v222 = v158[1];
          v159 = (uint64_t *)*((_QWORD *)v158 + 2);
          v160 = *((_QWORD *)v158 + 3);
          v162 = *((_QWORD *)v158 + 4);
          v161 = *((_QWORD *)v158 + 5);
          if (v156)
          {
            v163 = v57;
            v164 = *(os_unfair_lock_s **)(v161 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v164);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v161 + 344));
            swift_release();
          }
          else
          {
            v163 = v57;
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v236);
          sub_1B19F66A0(v201, (uint64_t)v303, &qword_1ED4B7FB0);
          v165 = v155[4];
          v166 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v161 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v155[6] = ecs_stack_allocator_allocate(v165, 48 * v166, 8);
          v155[7] = v166;
          v194[1] = 0;
          v194[2] = 0;
          *v194 = 0;
          swift_release();
          v167 = (_OWORD *)sub_1B1A12038((uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, v159, v160, v162, (uint64_t)v155);
          v168 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for TransientOriginScale, (uint64_t)&off_1E639F880, v159, v160, v162, (uint64_t)v155);
          if (v159)
          {
            if (!v162)
              goto LABEL_172;
            v57 = v163;
            v156 = v187;
            do
            {
              v169 = *v168++;
              *v167++ = v169;
              --v162;
            }
            while (v162);
          }
          else
          {
            if ((_DWORD)v229 == (_DWORD)v222)
            {
LABEL_172:
              v57 = v163;
              v156 = v187;
              goto LABEL_175;
            }
            v170 = v222 - v229;
            v171 = &v168[v229];
            v172 = &v167[v229];
            v57 = v163;
            v156 = v187;
            do
            {
              v173 = *v171++;
              *v172++ = v173;
              --v170;
            }
            while (v170);
          }
LABEL_175:
          sub_1B1F05D48(v155, (unsigned __int16 **)v301, (uint64_t)v303);
          sub_1B1F03804((char *)v161);
          ecs_stack_allocator_pop_snapshot(v236);
          if ((v156 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v161 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v161 + 376));
          }
          swift_release();
          if (++v157 == v215)
          {
            sub_1B19ED748(v243);
            return sub_1B19ED748(v243);
          }
        }
      }
    }
    return sub_1B19ED748(v243);
  }
  return result;
}

uint64_t type metadata accessor for TransientPushSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TransientOriginScale()
{
  return &type metadata for TransientOriginScale;
}

ValueMetadata *type metadata accessor for TransientOriginColor()
{
  return &type metadata for TransientOriginColor;
}

uint64_t sub_1B207E364()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v29[40];
  _OWORD v30[2];
  uint64_t v31;
  _BYTE v32[40];
  _OWORD v33[2];
  uint64_t v34;
  _BYTE v35[40];
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _BYTE v42[40];
  _OWORD v43[2];
  uint64_t v44;
  _BYTE v45[40];
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BYTE v52[40];
  _OWORD v53[2];
  uint64_t v54;
  _BYTE v55[40];
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _BYTE v62[40];
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v107 = qword_1ED4D09F8;
  v108 = 0;
  v109 = 2;
  v110 = 0;
  v111 = 2;
  v112 = 0;
  swift_retain();
  sub_1B19EE56C((uint64_t)v29);
  swift_release();
  sub_1B1A19B14();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v1 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v1 + 40) = &off_1E6371918;
  sub_1B1B44110(v30, v1);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v29);
  v2 = v30[1];
  *(_OWORD *)(v0 + 16) = v30[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v31;
  v101 = qword_1ED4D09F8;
  v102 = 0;
  v103 = 2;
  v104 = 0;
  v105 = 2;
  v106 = 0;
  swift_retain();
  sub_1B19EE770((uint64_t)v32);
  swift_release();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v3 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v3 + 40) = &off_1E6371918;
  sub_1B1B44110(v33, v3);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v32);
  *(_OWORD *)(v0 + 56) = v33[0];
  *(_OWORD *)(v0 + 72) = v33[1];
  *(_QWORD *)(v0 + 88) = v34;
  v95 = qword_1ED4D09F8;
  v96 = 0;
  v97 = 2;
  v98 = 0;
  v99 = 2;
  v100 = 0;
  swift_retain();
  sub_1B19EE974((uint64_t)v35);
  swift_release();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v4 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v4 + 40) = &off_1E6371918;
  sub_1B1B44110(&v36, v4);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v35);
  v5 = v37;
  v6 = v38;
  v7 = v40;
  v8 = v41;
  v9 = v39 | 8;
  *(_QWORD *)(v0 + 96) = v36;
  *(_DWORD *)(v0 + 104) = v5;
  *(_BYTE *)(v0 + 108) = v6;
  *(_QWORD *)(v0 + 112) = v9;
  *(_BYTE *)(v0 + 120) = v7;
  *(_QWORD *)(v0 + 128) = v8;
  v89 = qword_1ED4D09F8;
  v90 = 0;
  v91 = 2;
  v92 = 0;
  v93 = 2;
  v94 = 0;
  swift_retain();
  sub_1B19EE974((uint64_t)v42);
  swift_release();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v10 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v10 + 40) = &off_1E6371918;
  sub_1B1B44110(v43, v10);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v42);
  v11 = v43[1];
  *(_OWORD *)(v0 + 136) = v43[0];
  *(_OWORD *)(v0 + 152) = v11;
  *(_QWORD *)(v0 + 168) = v44;
  v83 = qword_1ED4D09F8;
  v84 = 0;
  v85 = 2;
  v86 = 0;
  v87 = 2;
  v88 = 0;
  swift_retain();
  sub_1B19EEB78((uint64_t)v45);
  swift_release();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v12 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v12 + 40) = &off_1E6371918;
  sub_1B1B44110(&v46, v12);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v45);
  v13 = v47;
  v14 = v48;
  v15 = v50;
  v16 = v51;
  v17 = v49 | 8;
  *(_QWORD *)(v0 + 176) = v46;
  *(_DWORD *)(v0 + 184) = v13;
  *(_BYTE *)(v0 + 188) = v14;
  *(_QWORD *)(v0 + 192) = v17;
  *(_BYTE *)(v0 + 200) = v15;
  *(_QWORD *)(v0 + 208) = v16;
  v77 = qword_1ED4D09F8;
  v78 = 0;
  v79 = 2;
  v80 = 0;
  v81 = 2;
  v82 = 0;
  swift_retain();
  sub_1B19EEB78((uint64_t)v52);
  swift_release();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v18 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v18 + 40) = &off_1E6371918;
  sub_1B1B44110(v53, v18);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v52);
  v19 = v53[1];
  *(_OWORD *)(v0 + 216) = v53[0];
  *(_OWORD *)(v0 + 232) = v19;
  *(_QWORD *)(v0 + 248) = v54;
  v71 = qword_1ED4D09F8;
  v72 = 0;
  v73 = 2;
  v74 = 0;
  v75 = 2;
  v76 = 0;
  swift_retain();
  sub_1B19EED7C((uint64_t)v55);
  swift_release();
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v20 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v20 + 40) = &off_1E6371918;
  sub_1B1B44110(&v56, v20);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v55);
  v21 = v57;
  v22 = v58;
  v23 = v60;
  v24 = v61;
  v25 = v59 | 8;
  *(_QWORD *)(v0 + 256) = v56;
  *(_DWORD *)(v0 + 264) = v21;
  *(_BYTE *)(v0 + 268) = v22;
  *(_QWORD *)(v0 + 272) = v25;
  *(_BYTE *)(v0 + 280) = v23;
  *(_QWORD *)(v0 + 288) = v24;
  v65 = qword_1ED4D09F8;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  v69 = 2;
  v70 = 0;
  swift_retain();
  sub_1B19EED7C((uint64_t)v62);
  swift_release();
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v26 + 32) = &type metadata for ParticleGPU;
  *(_QWORD *)(v26 + 40) = &off_1E6371918;
  sub_1B1B44110(v63, v26);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v62);
  v27 = v63[1];
  *(_OWORD *)(v0 + 296) = v63[0];
  *(_OWORD *)(v0 + 312) = v27;
  *(_QWORD *)(v0 + 328) = v64;
  return v0;
}

uint64_t sub_1B207E954()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B207E364();
  return v0;
}

const char *sub_1B207E988()
{
  return "TransientPush";
}

uint64_t sub_1B207E99C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v25;
  uint64_t v28;

  v25 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v28 = v6;
      v8 = v7 | (v6 << 6);
      goto LABEL_22;
    }
    v9 = v6 + 1;
    if (v6 + 1 >= v5)
      return swift_release();
    v10 = *(_QWORD *)(v25 + 8 * v9);
    if (!v10)
    {
      v9 = v6 + 2;
      if (v6 + 2 >= v5)
        return swift_release();
      v10 = *(_QWORD *)(v25 + 8 * v9);
      if (!v10)
      {
        v9 = v6 + 3;
        if (v6 + 3 >= v5)
          return swift_release();
        v10 = *(_QWORD *)(v25 + 8 * v9);
        if (!v10)
        {
          v9 = v6 + 4;
          if (v6 + 4 >= v5)
            return swift_release();
          v10 = *(_QWORD *)(v25 + 8 * v9);
          if (!v10)
          {
            v9 = v6 + 5;
            if (v6 + 5 >= v5)
              return swift_release();
            v10 = *(_QWORD *)(v25 + 8 * v9);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_21:
    v4 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v9 << 6);
    v28 = v9;
LABEL_22:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
    v13 = *(_QWORD *)(v11 + 24);
    v12 = *(_QWORD *)(v11 + 32);
    v14 = *(_QWORD **)a2;
    v15 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    if (v15)
    {
      v16 = v14[4] == v13 && v14[5] == v12;
      if (v16 || (sub_1B2229D24() & 1) != 0)
      {
LABEL_4:
        swift_retain();
        v6 = v28;
        goto LABEL_5;
      }
      v17 = v15 - 1;
      if (v15 != 1)
      {
        v21 = v14[6] == v13 && v14[7] == v12;
        if (v21 || (sub_1B2229D24() & 1) != 0)
          goto LABEL_4;
        v22 = v14 + 9;
        while (--v17)
        {
          if (*(v22 - 1) != v13 || *v22 != v12)
          {
            v22 += 2;
            if ((sub_1B2229D24() & 1) == 0)
              continue;
          }
          goto LABEL_4;
        }
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = sub_1B1C63044(0, v15 + 1, 1, v14);
    v19 = v14[2];
    v18 = v14[3];
    if (v19 >= v18 >> 1)
      v14 = sub_1B1C63044(v18 > 1, v19 + 1, 1, v14);
    v6 = v28;
    v14[2] = v19 + 1;
    v20 = &v14[2 * v19];
    v20[4] = v13;
    v20[5] = v12;
    *(_QWORD *)a2 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_release();
  }
  while (v5 - 6 != v6)
  {
    v10 = *(_QWORD *)(a1 + 8 * v6++ + 112);
    if (v10)
    {
      v9 = v6 + 5;
      goto LABEL_21;
    }
  }
  return swift_release();
}

uint64_t sub_1B207EC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;

  v0 = swift_bridgeObjectRetain();
  sub_1B207FF18(v0, sub_1B20802F8);
  v2 = v1;
  v4 = v3;
  swift_bridgeObjectRelease();
  if (!v2)
    return 0;
  swift_bridgeObjectRelease();
  v5 = *(void (**)(uint64_t))(*(_QWORD *)v4 + 1024);
  v6 = swift_bridgeObjectRetain();
  v5(v6);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B207EE24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F2FA98(*a1, *a2);
}

uint64_t sub_1B207EE30()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B207EEC4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B207EF34()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B207EFC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B20800EC();
  *a1 = result;
  return result;
}

void sub_1B207EFF0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x6E69746C697542;
  if (v2 != 1)
  {
    v5 = 1919251285;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C61636F4CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B207F044(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v7[3];
  uint64_t v8;

  v2 = v1;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9D8];
  v4 = swift_bridgeObjectRetain();
  sub_1B207E99C(v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 40) + 16) != *(_QWORD *)(v8 + 16))
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v7[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v5 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v7[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v5, v7, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 40) = MEMORY[0x1E0DEE9E0];
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B207F248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = v3;
  v8 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v8, v9);
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = sub_1B1B7E38C(MEMORY[0x1E0DEE9D8]);
  v4[2] = a1;
  v4[3] = a2;
  swift_bridgeObjectRelease();
  sub_1B2228788();
  sub_1B2228704();
  v12 = sub_1B207FD94();
  swift_bridgeObjectRelease();
  if (v12)
  {
    sub_1B207F044(v12);
    swift_release();
  }
  v10 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a3, v10);
  return v4;
}

uint64_t sub_1B207F4E4(char *a1, char *a2)
{
  return sub_1B1F95A1C(*a1, *a2);
}

uint64_t sub_1B207F4F0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B207F574()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B207F5D4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B207F654@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B207F6B0(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x73747865746E6F63;
  if (*v1)
    v2 = 0xD000000000000012;
  v3 = 0x80000001B23294E0;
  if (!*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B207F6F4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x73747865746E6F63;
}

uint64_t sub_1B207F734@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B207F794()
{
  sub_1B207FC34();
  return sub_1B222A1D4();
}

uint64_t sub_1B207F7BC()
{
  sub_1B207FC34();
  return sub_1B222A1E0();
}

_QWORD *sub_1B207F7E4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1B207FCDC(0, &qword_1EEF62E60, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  v1[5] = sub_1B1B7E38C(MEMORY[0x1E0DEE9D8]);
  sub_1B19FA070(a1, a1[3]);
  sub_1B207FC34();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
  }
  else
  {
    sub_1B207FC78();
    v13 = 0;
    sub_1B1DFC4B8();
    sub_1B2229814();
    v1[5] = v14;
    swift_bridgeObjectRelease();
    sub_1B1E0F4C4();
    v13 = 1;
    sub_1B1EDBD38();
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v14;
    if (v14 == 1)
      v11 = swift_bridgeObjectRetain();
    v1[4] = v11;
    swift_bridgeObjectRelease();
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v1;
}

uint64_t sub_1B207F9CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v1;
  sub_1B207FCDC(0, &qword_1EEF62E70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B207FC34();
  sub_1B222A180();
  v14 = *(_QWORD *)(v3 + 40);
  HIBYTE(v13) = 0;
  sub_1B207FC78();
  sub_1B1DFC8A8();
  sub_1B2229958();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v12 = *(_QWORD *)(v3 + 32);
  if (!v12)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v14 = v12;
  HIBYTE(v13) = 1;
  sub_1B19FA1DC();
  sub_1B207FD38((unint64_t *)&qword_1EEF5AC40, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  swift_bridgeObjectRetain();
  sub_1B2229958();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B207FB6C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t _s11TemplateSetCMa()
{
  return objc_opt_self();
}

_QWORD *sub_1B207FBC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  v5 = swift_allocObject();
  result = sub_1B207F7E4(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B207FC14(_QWORD *a1)
{
  return sub_1B207F9CC(a1);
}

unint64_t sub_1B207FC34()
{
  unint64_t result;

  result = qword_1EEF62E68;
  if (!qword_1EEF62E68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B73D4, &_s11TemplateSetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF62E68);
  }
  return result;
}

void sub_1B207FC78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5EA38)
  {
    _s7ContextCMa();
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5EA38);
  }
}

void sub_1B207FCDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B207FC34();
    v7 = a3(a1, &_s11TemplateSetC10CodingKeysON, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B207FD38(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B19FA1DC();
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B207FD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _QWORD v11[2];

  v1 = sub_1B22287A0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228788();
  v6 = sub_1B2228758();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  sub_1B2227CB4();
  swift_allocObject();
  sub_1B2227CA8();
  if (v8 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  else
  {
    _s11TemplateSetCMa();
    sub_1B1A0DC90(v6, v8);
    sub_1B1A1F838(&qword_1EEF62E78, v10, (uint64_t (*)(uint64_t))_s11TemplateSetCMa, (uint64_t)&unk_1B22B71FC);
    sub_1B2227C84();
    sub_1B1A0DAC8(v6, v8);
    if (v0)
    {
      swift_release();
      return sub_1B1A0DAC8(v6, v8);
    }
    else
    {
      sub_1B1A0DAC8(v6, v8);
      swift_release();
      return v11[1];
    }
  }
}

uint64_t sub_1B207FF18(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((a2(v15, v14, v16) & 1) != 0)
    {
      swift_release();
      return v15;
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (v8 + 1 >= v7)
      break;
    v12 = *(_QWORD *)(v18 + 8 * v11);
    if (!v12)
    {
      v11 = v8 + 2;
      if (v8 + 2 >= v7)
        break;
      v12 = *(_QWORD *)(v18 + 8 * v11);
      if (!v12)
      {
        v11 = v8 + 3;
        if (v8 + 3 >= v7)
          break;
        v12 = *(_QWORD *)(v18 + 8 * v11);
        if (!v12)
        {
          v11 = v8 + 4;
          if (v8 + 4 >= v7)
            break;
          v12 = *(_QWORD *)(v18 + 8 * v11);
          if (!v12)
          {
            v11 = v8 + 5;
            if (v8 + 5 >= v7)
              break;
            v12 = *(_QWORD *)(v18 + 8 * v11);
            if (!v12)
            {
              while (v7 - 6 != v8)
              {
                v12 = *(_QWORD *)(a1 + 8 * v8++ + 112);
                if (v12)
                {
                  v11 = v8 + 5;
                  goto LABEL_18;
                }
              }
              break;
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v8 = v11;
  }
  swift_release();
  return 0;
}

uint64_t sub_1B20800EC()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B2080134@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;

  sub_1B1A06460();
  v2 = (_QWORD *)sub_1B2229280();
  v3 = v2;
  if (v2[2] == 4)
  {
    v4 = v2[4];
    v5 = v2[5];
    v6 = v2[6];
    v7 = v2[7];
    swift_bridgeObjectRetain();
    MEMORY[0x1B5E20388](v4, v5, v6, v7);
    swift_bridgeObjectRelease();
    v8 = sub_1B2229730();
    swift_bridgeObjectRelease();
    v9 = 3;
    if (v8 < 3)
      v9 = v8;
    v33 = v9;
    v10 = v3[8];
    v11 = v3[9];
    v12 = v3[10];
    v13 = v3[11];
    swift_bridgeObjectRetain();
    v14 = MEMORY[0x1B5E20388](v10, v11, v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = v3[12];
    v18 = v3[13];
    v19 = v3[14];
    v20 = v3[15];
    swift_bridgeObjectRetain();
    v21 = MEMORY[0x1B5E20388](v17, v18, v19, v20);
    v23 = v22;
    swift_bridgeObjectRelease();
    v24 = v3[16];
    v25 = v3[17];
    v26 = v3[18];
    v27 = v3[19];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x1B5E20388](v24, v25, v26, v27);
    v30 = v29;
    result = swift_bridgeObjectRelease();
    v32 = v33;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v32 = 0;
    v14 = 0;
    v16 = 0;
    v21 = 0;
    v23 = 0;
    v28 = 0;
    v30 = 0;
  }
  *a1 = v32;
  a1[1] = v14;
  a1[2] = v16;
  a1[3] = v21;
  a1[4] = v23;
  a1[5] = v28;
  a1[6] = v30;
  return result;
}

uint64_t sub_1B20802F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a3 + 24) == *(_QWORD *)(v3 + 16) && *(_QWORD *)(a3 + 32) == *(_QWORD *)(v3 + 24))
    return 1;
  else
    return sub_1B2229D24();
}

uint64_t _s8TemplateV8CategoryOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B208036C + 4 * byte_1B22B719D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B20803A0 + 4 * byte_1B22B7198[v4]))();
}

uint64_t sub_1B20803A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20803A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20803B0);
  return result;
}

uint64_t sub_1B20803BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20803C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B20803C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20803D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TemplateV8CategoryOMa()
{
  return &_s8TemplateV8CategoryON;
}

uint64_t _s8TemplateVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s8TemplateVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s8TemplateVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s8TemplateVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *_s8TemplateVMa()
{
  return &_s8TemplateVN;
}

uint64_t _s11TemplateSetC10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B2080654 + 4 * byte_1B22B71A7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2080688 + 4 * byte_1B22B71A2[v4]))();
}

uint64_t sub_1B2080688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2080690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2080698);
  return result;
}

uint64_t sub_1B20806A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20806ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B20806B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20806B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11TemplateSetC10CodingKeysOMa()
{
  return &_s11TemplateSetC10CodingKeysON;
}

unint64_t sub_1B20806D8()
{
  unint64_t result;

  result = qword_1EEF62E80;
  if (!qword_1EEF62E80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B730C, &_s11TemplateSetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF62E80);
  }
  return result;
}

unint64_t sub_1B2080720()
{
  unint64_t result;

  result = qword_1EEF62E88;
  if (!qword_1EEF62E88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B73AC, &_s8TemplateV8CategoryON);
    atomic_store(result, (unint64_t *)&qword_1EEF62E88);
  }
  return result;
}

unint64_t sub_1B2080768()
{
  unint64_t result;

  result = qword_1EEF62E90;
  if (!qword_1EEF62E90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7244, &_s11TemplateSetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF62E90);
  }
  return result;
}

unint64_t sub_1B20807B0()
{
  unint64_t result;

  result = qword_1EEF62E98;
  if (!qword_1EEF62E98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B726C, &_s11TemplateSetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF62E98);
  }
  return result;
}

uint64_t sub_1B20807F4()
{
  return type metadata accessor for WrapAroundCamera.System();
}

double sub_1B2080810@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = 524288.124;
  *(_QWORD *)(a1 + 16) = 0x412000003F800000;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 36) = 1;
  return result;
}

uint64_t type metadata accessor for WrapAroundCamera.System()
{
  return objc_opt_self();
}

uint64_t sub_1B2080854(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2080890 + 4 * byte_1B22B7430[a1]))(0x7366664F7466656CLL, 0xEA00000000007465);
}

uint64_t sub_1B2080890()
{
  return 0x66664F7468676972;
}

uint64_t sub_1B20808B0()
{
  return 0x657366664F706F74;
}

uint64_t sub_1B20808CC()
{
  return 0x664F6D6F74746F62;
}

uint64_t sub_1B20808EC()
{
  return 1918985582;
}

uint64_t sub_1B20808FC()
{
  return 7496038;
}

uint64_t sub_1B208090C()
{
  return 0x7073726550657375;
}

uint64_t sub_1B2080930()
{
  return 0x756C6F56776F6873;
}

uint64_t sub_1B208094C()
{
  return 0x6172656D6163;
}

uint64_t sub_1B2080960(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B208099C + 4 * byte_1B22B7439[a1]))(0x7366664F7466656CLL, 0xEA00000000007465);
}

uint64_t sub_1B208099C()
{
  return 0x66664F7468676972;
}

uint64_t sub_1B20809BC()
{
  return 0x657366664F706F74;
}

uint64_t sub_1B20809D8()
{
  return 0x664F6D6F74746F62;
}

uint64_t sub_1B20809F8()
{
  return 1918985582;
}

uint64_t sub_1B2080A08()
{
  return 7496038;
}

uint64_t sub_1B2080A18()
{
  return 0x7073726550657375;
}

uint64_t sub_1B2080A3C()
{
  return 0x756C6F56776F6873;
}

uint64_t sub_1B2080A58()
{
  return 0x6172656D6163;
}

const char *sub_1B2080A70()
{
  return "WrapAroundCamera.CPU";
}

void sub_1B2080A84(char *a1)
{
  sub_1B1F92268(*a1);
}

uint64_t sub_1B2080A90()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB4624((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B2080AD4(uint64_t a1)
{
  char *v1;

  sub_1B1DB4624(a1, *v1);
}

uint64_t sub_1B2080ADC()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB4624((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

uint64_t sub_1B2080B1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2080F78();
  *a1 = result;
  return result;
}

uint64_t sub_1B2080B48@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B2080854(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2080B70()
{
  unsigned __int8 *v0;

  return sub_1B2080960(*v0);
}

uint64_t sub_1B2080B78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2080F78();
  *a1 = result;
  return result;
}

uint64_t sub_1B2080B9C()
{
  sub_1B20827F8();
  return sub_1B222A1D4();
}

uint64_t sub_1B2080BC4()
{
  sub_1B20827F8();
  return sub_1B222A1E0();
}

uint64_t sub_1B2080BEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v13[12];
  _BYTE v14[28];

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF62ED0, (uint64_t (*)(void))sub_1B20827F8, (uint64_t)&type metadata for WrapAroundCamera.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v13[-v9 - 8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B20827F8();
  sub_1B222A180();
  v13[0] = 0;
  sub_1B2229934();
  if (!v2)
  {
    v13[0] = 1;
    sub_1B2229934();
    v13[0] = 2;
    sub_1B2229934();
    v13[0] = 3;
    sub_1B2229934();
    v13[0] = 4;
    sub_1B2229934();
    v13[0] = 5;
    sub_1B2229934();
    v13[0] = 6;
    sub_1B222991C();
    v13[0] = 7;
    sub_1B222991C();
    sub_1B19F66A0(v3 + 28, (uint64_t)v14, &qword_1EEF62EC0);
    sub_1B19F66A0((uint64_t)v14, (uint64_t)v13, &qword_1EEF62EC0);
    v14[27] = 8;
    sub_1B19F900C(0, &qword_1EEF62EC0);
    sub_1B208283C(&qword_1EEF62ED8, (uint64_t (*)(void))sub_1B1A0895C, MEMORY[0x1E0DEE988]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B2080EA8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[21];

  sub_1B2082448(a1, (uint64_t)&v6);
  if (!v2)
  {
    result = *(double *)&v6;
    v5 = *(_OWORD *)v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 29) = *(_QWORD *)&v7[13];
  }
  return result;
}

uint64_t sub_1B2080EEC(_QWORD *a1)
{
  return sub_1B2080BEC(a1);
}

uint64_t type metadata accessor for WrapAroundCamera.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B2080F48()
{
  return "WrapAroundCamera.GPU";
}

uint64_t sub_1B2080F5C()
{
  return type metadata accessor for WrapAroundCamera.GPUSystem();
}

uint64_t sub_1B2080F78()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_1B2080FC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  simd_float4 v33;
  simd_float4 v34;
  simd_float4 v35;
  simd_float4 v36;
  float32x4_t v37;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  _BYTE v57[64];
  simd_float4 v58;
  simd_float4 v59;
  simd_float4 v60;
  simd_float4 v61;
  _OWORD v62[2];
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  simd_float4 v66;
  simd_float4 v67;
  simd_float4 v68;
  simd_float4 v69;
  float32x4_t v70;
  float32x4_t v71;
  _BYTE v72[184];
  _DWORD v73[6];
  uint64_t v74;
  unsigned int v75;
  unsigned __int8 v76;
  _BYTE v77[80];
  simd_float4x4 v78;
  char v79;
  simd_float4x4 v80;
  simd_float4x4 v81;

  v4 = *a1;
  swift_retain();
  v5 = a1[1];
  swift_retain();
  sub_1B1D17A5C(v5, (uint64_t)v73);
  swift_release();
  if (v74 == 2)
  {
    v6 = 0;
    v7 = 0.0;
    v8 = 1.0;
    v9 = 10.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
  }
  else
  {
    v12 = *(float *)v73;
    v11 = *(float *)&v73[1];
    v10 = *(float *)&v73[2];
    v7 = *(float *)&v73[3];
    v8 = *(float *)&v73[4];
    v9 = *(float *)&v73[5];
    v6 = v74 & 1;
    if (((v75 | ((unint64_t)v76 << 32)) & 0x100000000) == 0)
    {
      *((_QWORD *)&v14 + 1) = v75;
      *(_QWORD *)&v14 = v74;
      v13 = v14 >> 32;
      goto LABEL_7;
    }
  }
  v15 = sub_1B1E126A4();
  if ((v16 & 1) != 0)
  {
LABEL_10:
    swift_release();
    sub_1B208240C((uint64_t)v62);
    goto LABEL_29;
  }
  v13 = v15;
LABEL_7:
  v17 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v17)
    goto LABEL_10;
  v18 = *(_QWORD *)(v17 + 224);
  if (*(_QWORD *)(v18 + 16))
  {
    v19 = *(_QWORD *)(v18 + 40);
    ObjectType = swift_getObjectType();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1B1BA0944(ObjectType, v19);
    v22 = v21;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_retain();
    v22 = 1.0;
  }
  sub_1B1D178C4(v13, v62);
  if (v63.u8[0] == 2)
  {
    v23 = sub_1B1D1798C(v13);
    if ((v23 & 0xFF00000000) == 0x200000000)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v24 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v62[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v24, (uint64_t *)v62, 0xD00000000000001DLL, 0x80000001B234A390);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_10;
    }
    v29 = (float)-*(float *)&v23 - v12;
    v30 = v11 + *(float *)&v23;
    goto LABEL_24;
  }
  v25 = tanf(*(float *)v62 * 0.5);
  v26 = 1.0;
  if (!v6)
    v26 = v9;
  v27 = v26 * v25;
  v28 = -(float)(v26 * v25);
  v29 = (float)-(float)(v22 * (float)(v26 * v25)) - v12;
  v30 = v11 + (float)(v22 * v27);
  v31 = v28 - v7;
  v32 = v10 + v27;
  if (!v6)
  {
LABEL_24:
    v33.f32[0] = sub_1B1C31CF0(v29, v30);
    goto LABEL_25;
  }
  *(double *)v33.i64 = sub_1B1C31C64(0, v29, v30, v31, v32, v8, v9);
LABEL_25:
  v60 = v34;
  v61 = v33;
  v58 = v36;
  v59 = v35;
  sub_1B1D15764((_QWORD *)v13, (uint64_t)v77);
  sub_1B19F66A0((uint64_t)v77, (uint64_t)&v78, qword_1ED4B8BB0);
  if ((v79 & 1) != 0)
  {
    *(_OWORD *)&v57[48] = xmmword_1B2244E20;
    *(_OWORD *)&v57[32] = xmmword_1B2244D90;
    *(_OWORD *)&v57[16] = xmmword_1B2244DD0;
    *(_OWORD *)v57 = xmmword_1B2244DB0;
  }
  else
  {
    *(simd_float4x4 *)v57 = __invert_f4(v78);
  }
  v80.columns[1] = v60;
  v80.columns[0] = v61;
  v80.columns[3] = v58;
  v80.columns[2] = v59;
  v81 = __invert_f4(v80);
  v37 = vaddq_f32((float32x4_t)v81.columns[2], (float32x4_t)v81.columns[3]);
  v81.columns[3] = (simd_float4)vmlaq_f32((float32x4_t)v81.columns[3], (float32x4_t)0, (float32x4_t)v81.columns[2]);
  __asm { FMOV            V2.4S, #-1.0 }
  v81.columns[3] = (simd_float4)vmlaq_f32(vmlaq_f32((float32x4_t)v81.columns[3], (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[1]), (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[0]);
  v42 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v81.columns[3], 3);
  v43.i32[0] = 0;
  v44 = (int8x16_t)vdupq_n_s32(0x322BCC77u);
  v45 = vmlaq_f32(vmlaq_f32(v37, (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[1]), (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[0]);
  v81.columns[0] = (simd_float4)vdupq_laneq_s32((int32x4_t)v45, 3);
  v55 = vdivq_f32(v45, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32((float32x4_t)v81.columns[0], v43)), 0), (int8x16_t)v81.columns[0], v44));
  v56 = vdivq_f32((float32x4_t)v81.columns[3], (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v42, v43)), 0), (int8x16_t)v42, v44));
  *(double *)v46.i64 = sub_1B1E52BDC();
  v51 = v46;
  v52 = v47;
  v53 = v48;
  v54 = v49;
  swift_release();
  swift_release();
  LOBYTE(v62[0]) = v6;
  v62[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v51.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v51.f32, 1), *(float32x4_t *)&v57[32], v51, 2), *(float32x4_t *)&v57[48], v51, 3);
  v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v52.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v52.f32, 1), *(float32x4_t *)&v57[32], v52, 2), *(float32x4_t *)&v57[48], v52, 3);
  v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v53.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v53.f32, 1), *(float32x4_t *)&v57[32], v53, 2), *(float32x4_t *)&v57[48], v53, 3);
  v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v54.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v54.f32, 1), *(float32x4_t *)&v57[32], v54, 2), *(float32x4_t *)&v57[48], v54, 3);
  v66 = v61;
  v67 = v60;
  v68 = v59;
  v69 = v58;
  v70 = v56;
  v71 = v55;
  nullsub_16(v62);
LABEL_29:
  sub_1B2082220((uint64_t)v62, (uint64_t)v72);
  return sub_1B2082220((uint64_t)v72, a2);
}

uint64_t sub_1B208147C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t result;
  simd_float4x4 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  simd_float4x4 v41;
  simd_float4x4 v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  _BYTE v51[176];
  unsigned __int8 v52[16];
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  simd_float4x4 v70;

  v2 = *(_OWORD *)(a1 + 96);
  v66 = *(_OWORD *)(a1 + 80);
  v67 = v2;
  v3 = *(_OWORD *)(a1 + 128);
  v68 = *(_OWORD *)(a1 + 112);
  v69 = v3;
  v4 = *(_OWORD *)(a1 + 32);
  v63[0] = *(_OWORD *)(a1 + 16);
  v63[1] = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v64 = *(_OWORD *)(a1 + 48);
  v65 = v5;
  sub_1B2080FC0((uint64_t *)v63, (uint64_t)v51);
  sub_1B2082220((uint64_t)v51, (uint64_t)v52);
  result = sub_1B20823F0(v52);
  if ((_DWORD)result != 1)
  {
    v7.columns[0] = (simd_float4)v53;
    v7.columns[1] = (simd_float4)v54;
    v7.columns[2] = (simd_float4)v55;
    v7.columns[3] = (simd_float4)v56;
    if (v52[0] == 1)
    {
      v39 = v62;
      v40 = v61;
      v8 = v61.f32[2];
      v9 = vmuls_lane_f32(v61.f32[2], v61, 2);
      v10 = vmuls_lane_f32(v9, v61, 2);
      v11 = v62.f32[2];
      v12 = vmuls_lane_f32(vmuls_lane_f32(v62.f32[2], v62, 2), v62, 2) - v10;
      v41.columns[0] = (simd_float4)v53;
      v41.columns[1] = (simd_float4)v54;
      v41.columns[2] = (simd_float4)v55;
      v41.columns[3] = (simd_float4)v56;
      v42 = __invert_f4(v7);
      v43 = v40;
      v44 = v39;
      v45 = 1.0 / (float)(v11 - v8);
      v46 = (float)-v8 / (float)(v11 - v8);
      v47 = 1.0 / v12;
      v48 = (float)-(float)(v8 * v9) / v12;
      v49 = v10;
      v50 = v12;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        ObjectType = swift_getObjectType();
        type metadata accessor for particle_wrap_around_camera_perspective_uniforms(0);
        sub_1B1F40E1C((uint64_t)&v41, 1, ObjectType, v15, v16, v17, v18, v19);
      }
      v20 = v13 == 0;
      v21 = *(_QWORD *)&v63[0];
      v22 = v64;
      swift_retain();
      sub_1B1B1FC34(a1);
      v23 = 0x80000001B234A400;
      v24 = v22;
      v25 = v21;
      v26 = v20;
      v27 = a1;
      v28 = 0xD000000000000027;
    }
    else
    {
      v70.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v54.f32[0]), v58, *(float32x2_t *)v54.f32, 1), v59, v54, 2), v60, v54, 3);
      v70.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v55.f32[0]), v58, *(float32x2_t *)v55.f32, 1), v59, v55, 2), v60, v55, 3);
      v70.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v53.f32[0]), v58, *(float32x2_t *)v53.f32, 1), v59, v53, 2), v60, v53, 3);
      v70.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v56.f32[0]), v58, *(float32x2_t *)v56.f32, 1), v59, v56, 2), v60, v56, 3);
      v41 = v70;
      v42 = __invert_f4(v70);
      v29 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v30 = swift_getObjectType();
        type metadata accessor for particle_wrap_around_camera_orthographic_uniforms(0);
        sub_1B1F40E1C((uint64_t)&v41, 1, v30, v31, v32, v33, v34, v35);
      }
      v36 = v29 == 0;
      v37 = *(_QWORD *)&v63[0];
      v38 = v64;
      swift_retain();
      sub_1B1B1FC34(a1);
      v28 = 0xD000000000000028;
      v23 = 0x80000001B234A3D0;
      v24 = v38;
      v25 = v37;
      v26 = v36;
      v27 = a1;
    }
    sub_1B1FE6FB8(v24, v25, v26, 0, v27, v28, v23, 0);
    sub_1B1B1FC88(a1);
    return swift_release();
  }
  return result;
}

float sub_1B208175C(float32x4_t *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7, float a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float a17, float a18, uint64_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23)
{
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x16_t v30;
  float v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float result;
  __int128 v37;

  v26 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a6, a5, *a1, 2), a4, *(float32x2_t *)a1->f32, 1), a3, COERCE_FLOAT(*a1));
  v37 = *(_OWORD *)(a2 + 144);
  v27 = vsub_f32(*(float32x2_t *)(a2 + 160), *(float32x2_t *)&v37);
  *(float32x2_t *)a5.f32 = vmla_n_f32(*(float32x2_t *)&v37, v27, vmuls_lane_f32(a7, v26, 2) + a8);
  v28 = vdiv_f32(vsub_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)a5.f32), vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0xC0000000C0000000));
  *(int32x2_t *)a5.f32 = vdup_n_s32(0x3F7FFFFFu);
  v29 = vminnm_f32(vsub_f32(v28, vrndm_f32(v28)), *(float32x2_t *)a5.f32);
  a3.f32[0] = (float)(vmuls_lane_f32(vmuls_lane_f32(v26.f32[2], v26, 2), v26, 2) * a9) + a10;
  a3.f32[0] = a18 + (float)(fminf(a3.f32[0] - floorf(a3.f32[0]), 1.0) * a17);
  a5.i32[0] = 1.0;
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  LODWORD(v31) = vbslq_s8(v30, (int8x16_t)a5, (int8x16_t)a3).u32[0];
  if (a3.f32[0] == 0.0)
    v31 = 0.0;
  v32 = powf(fabsf(a3.f32[0]), 0.33333) * v31;
  v33 = vmla_n_f32(*(float32x2_t *)&v37, v27, (float)(v32 * a7) + a8);
  v34 = vmla_f32(v33, v29, vsub_f32(vsub_f32(0, v33), v33));
  v35 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(a23, a22, v32), a21, v34, 1), a20, v34.f32[0]);
  result = 1.0;
  v35.i32[3] = 1.0;
  *a1 = v35;
  return result;
}

uint64_t *sub_1B20818B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  float v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  float32x4_t *v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  float32x2_t *v51;
  float32x4_t v52;
  __int32 v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x2_t *v61;
  float32x4_t v62;
  __int32 v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int32 v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  uint64_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  __int32 v98;
  float32x4_t v99;
  char v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  _QWORD *v104;
  float32x4_t v105;
  uint64_t v106;
  float32x4_t v107;
  uint64_t v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  uint64_t v112;
  char v113[16];
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  char v124[16];
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  _BYTE v135[184];
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139[8];
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unsigned __int8 v148[16];
  simd_float4x4 v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  simd_float4 v163;
  uint64_t v164;
  _BYTE v165[56];
  simd_float4x4 v166;
  simd_float4x4 v167;
  simd_float4x4 v168;

  v2 = *(_QWORD *)a1;
  swift_retain();
  sub_1B2080FC0((uint64_t *)a1, (uint64_t)v135);
  sub_1B2082220((uint64_t)v135, (uint64_t)v148);
  if (sub_1B20823F0(v148) == 1)
    return (uint64_t *)swift_release();
  v3 = 0;
  if (v148[0] == 1)
  {
    v97 = v150;
    v99 = v151;
    v103 = v152;
    v105 = v153;
    v111 = v154;
    v107 = (float32x4_t)v149.columns[3];
    v109 = v155;
    v93 = (float32x4_t)v149.columns[0];
    v95 = (float32x4_t)v149.columns[1];
    v101 = (float32x4_t)v149.columns[2];
    v166 = __invert_f4(v149);
    v89 = (float32x4_t)v166.columns[1];
    v91 = (float32x4_t)v166.columns[0];
    v85 = (float32x4_t)v166.columns[3];
    v87 = (float32x4_t)v166.columns[2];
    v166.columns[1] = *(simd_float4 *)(a1 + 104);
    v162 = *(_OWORD *)(a1 + 88);
    v163 = v166.columns[1];
    v164 = *(_QWORD *)(a1 + 120);
    sub_1B1E40AF4(2, (uint64_t)&v136);
    v159 = v136;
    v160 = v137;
    v161 = v138;
    sub_1B1E8FCE4(v2, (uint64_t)&v159, 0x200000000, v139);
    sub_1B19F66A0((uint64_t)v139, (uint64_t)&v140, (unint64_t *)&qword_1ED4B7DE0);
    if ((_QWORD)v140)
    {
      if (v147 > 0)
      {
        v78 = v144;
        if (v144)
        {
          v4 = 1.0 / (float)(v109.f32[2] - v111.f32[2]);
          v5 = (float)-v111.f32[2] / (float)(v109.f32[2] - v111.f32[2]);
          v6 = vmuls_lane_f32(v111.f32[2], v111, 2);
          v7 = vmuls_lane_f32(v6, v111, 2);
          v8 = vmuls_lane_f32(vmuls_lane_f32(v109.f32[2], v109, 2), v109, 2) - v7;
          v9 = 1.0 / v8;
          v10 = v146;
          v11 = v146[4];
          v12 = *(_BYTE *)(v145 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v156 = v140;
          v157 = v141;
          v158 = v142;
          v74 = (uint64_t)(v146 + 6);
          v75 = v143;
          v73 = v146 + 8;
          v13 = (float)-(float)(v111.f32[2] * v6) / v8;
          swift_retain();
          swift_retain();
          swift_retain();
          v14 = 0;
          v72 = v12;
          v76 = v11;
          while (1)
          {
            v83 = v3;
            v15 = (unsigned int *)(v75 + 48 * v14);
            v81 = *v15;
            v79 = v15[1];
            v17 = (uint64_t *)*((_QWORD *)v15 + 2);
            v16 = *((_QWORD *)v15 + 3);
            v19 = *((_QWORD *)v15 + 4);
            v18 = *((_QWORD *)v15 + 5);
            if ((v12 & 1) != 0)
            {
              v20 = *(os_unfair_lock_s **)(v18 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v20);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v11);
            sub_1B19F66A0(v74, (uint64_t)v165, &qword_1ED4B7FB0);
            v21 = v10[4];
            v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v10[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
            v10[7] = v22;
            v73[1] = 0;
            v73[2] = 0;
            *v73 = 0;
            swift_release();
            v23 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v17, v16, v19, (uint64_t)v10);
            v30 = (float32x4_t *)v23;
            if (v17)
            {
              if (!v19)
                goto LABEL_17;
              v3 = v83;
              v12 = v72;
              do
              {
                v113[0] = 1;
                v114 = v93;
                v115 = v95;
                v116 = v101;
                v117 = v107;
                v118 = v97;
                v119 = v99;
                v120 = v103;
                v121 = v105;
                v122 = v111;
                v123 = v109;
                sub_1B208175C(v30++, (uint64_t)v113, v93, v95, v101, v107, v4, v5, v9, v13, v24, v25, v26, v27, v28, v29, v8, v7, v71,
                  v91,
                  v89,
                  v87,
                  v85);
                --v19;
              }
              while (v19);
            }
            else
            {
              if ((_DWORD)v81 == (_DWORD)v79)
              {
LABEL_17:
                v3 = v83;
                v12 = v72;
                goto LABEL_20;
              }
              v31 = v79 - v81;
              v32 = (float32x4_t *)(v23 + 16 * v81);
              v3 = v83;
              v12 = v72;
              do
              {
                v124[0] = 1;
                v125 = v93;
                v126 = v95;
                v127 = v101;
                v128 = v107;
                v129 = v97;
                v130 = v99;
                v131 = v103;
                v132 = v105;
                v133 = v111;
                v134 = v109;
                sub_1B208175C(v32++, (uint64_t)v124, v93, v95, v101, v107, v4, v5, v9, v13, v24, v25, v26, v27, v28, v29, v8, v7, v71,
                  v91,
                  v89,
                  v87,
                  v85);
                --v31;
              }
              while (v31);
            }
LABEL_20:
            sub_1B1F05D48(v10, (unsigned __int16 **)&v156, (uint64_t)v165);
            sub_1B1F03804((char *)v18);
            v11 = v76;
            ecs_stack_allocator_pop_snapshot(v76);
            if ((v12 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
            }
            swift_release();
            if (++v14 == v78)
              goto LABEL_44;
          }
        }
      }
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  v167.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[0].f32[0]), v151, *(float32x2_t *)v149.columns[0].f32, 1), v152, (float32x4_t)v149.columns[0], 2), v153, (float32x4_t)v149.columns[0], 3);
  v167.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[1].f32[0]), v151, *(float32x2_t *)v149.columns[1].f32, 1), v152, (float32x4_t)v149.columns[1], 2), v153, (float32x4_t)v149.columns[1], 3);
  v167.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[2].f32[0]), v151, *(float32x2_t *)v149.columns[2].f32, 1), v152, (float32x4_t)v149.columns[2], 2), v153, (float32x4_t)v149.columns[2], 3);
  v167.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[3].f32[0]), v151, *(float32x2_t *)v149.columns[3].f32, 1), v152, (float32x4_t)v149.columns[3], 2), v153, (float32x4_t)v149.columns[3], 3);
  v94 = (float32x4_t)v167.columns[1];
  v96 = (float32x4_t)v167.columns[0];
  v90 = (float32x4_t)v167.columns[3];
  v92 = (float32x4_t)v167.columns[2];
  v168 = __invert_f4(v167);
  v86 = (float32x4_t)v168.columns[1];
  v88 = (float32x4_t)v168.columns[0];
  v80 = (float32x4_t)v168.columns[3];
  v82 = (float32x4_t)v168.columns[2];
  v168.columns[1] = *(simd_float4 *)(a1 + 104);
  v162 = *(_OWORD *)(a1 + 88);
  v163 = v168.columns[1];
  v164 = *(_QWORD *)(a1 + 120);
  sub_1B1E40AF4(2, (uint64_t)&v136);
  v159 = v136;
  v160 = v137;
  v161 = v138;
  sub_1B1E8FCE4(v2, (uint64_t)&v159, 0x200000000, v139);
  sub_1B19F66A0((uint64_t)v139, (uint64_t)&v140, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v140)
  {
LABEL_41:
    sub_1B19ED720((uint64_t)&v136);
    return (uint64_t *)swift_release();
  }
  if (v147 > 0)
  {
    v110 = v144;
    if (v144)
    {
      v33 = v146;
      v34 = v146[4];
      v35 = *(_BYTE *)(v145 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v156 = v140;
      v157 = v141;
      v108 = v143;
      v158 = v142;
      v106 = (uint64_t)(v146 + 6);
      v104 = v146 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v36 = 0;
      __asm { FMOV            V9.2S, #-1.0 }
      v100 = v35;
      v102 = v34;
      do
      {
        v84 = v3;
        v42 = (unsigned int *)(v108 + 48 * v36);
        v43 = *v42;
        v112 = v42[1];
        v45 = (uint64_t *)*((_QWORD *)v42 + 2);
        v44 = *((_QWORD *)v42 + 3);
        v47 = *((_QWORD *)v42 + 4);
        v46 = *((_QWORD *)v42 + 5);
        if ((v35 & 1) != 0)
        {
          v48 = *(os_unfair_lock_s **)(v46 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v48);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v46 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v34);
        sub_1B19F66A0(v106, (uint64_t)v165, &qword_1ED4B7FB0);
        v49 = v33[4];
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v33[6] = ecs_stack_allocator_allocate(v49, 48 * v50, 8);
        v33[7] = v50;
        v104[1] = 0;
        v104[2] = 0;
        *v104 = 0;
        swift_release();
        v51 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v45, v44, v47, (uint64_t)v33);
        if (v45)
        {
          if (v47)
          {
            v52.i32[3] = v98;
            do
            {
              v53 = v52.i32[3];
              v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(_OWORD *)v51->f32)), v94, *v51, 1), v92, *(float32x4_t *)v51->f32, 2), v90, *(float32x4_t *)v51->f32, 3);
              *(float32x2_t *)v55.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v54.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000);
              v55.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
              v56 = v55;
              v56.i32[3] = 0;
              v57 = vsubq_f32(v55, vrndmq_f32(v56));
              v57.i32[3] = 0;
              v58 = vminnmq_f32(v57, (float32x4_t)xmmword_1B2244EB0);
              *(float32x2_t *)v56.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), _D9);
              v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v56.f32[0]), v86, *(float32x2_t *)v56.f32, 1), v82, v58, 2), v80, v54, 3);
              v52.i32[3] = v53;
              v59 = v52;
              v59.i32[3] = 1.0;
              *(float32x4_t *)v51->f32 = v59;
              v51 += 2;
              --v47;
            }
            while (v47);
            v98 = v52.i32[3];
          }
        }
        else if ((_DWORD)v43 != (_DWORD)v112)
        {
          v60 = v112 - v43;
          v61 = &v51[2 * v43];
          v62.i32[3] = v77;
          do
          {
            v63 = v62.i32[3];
            v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(_OWORD *)v61->f32)), v94, *v61, 1), v92, *(float32x4_t *)v61->f32, 2), v90, *(float32x4_t *)v61->f32, 3);
            *(float32x2_t *)v65.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v64.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000);
            v65.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
            v66 = v65;
            v66.i32[3] = 0;
            v67 = vsubq_f32(v65, vrndmq_f32(v66));
            v67.i32[3] = 0;
            v68 = vminnmq_f32(v67, (float32x4_t)xmmword_1B2244EB0);
            *(float32x2_t *)v66.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), _D9);
            v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v66.f32[0]), v86, *(float32x2_t *)v66.f32, 1), v82, v68, 2), v80, v64, 3);
            v62.i32[3] = v63;
            v69 = v62;
            v69.i32[3] = 1.0;
            *(float32x4_t *)v61->f32 = v69;
            v61 += 2;
            --v60;
          }
          while (v60);
          v77 = v62.i32[3];
        }
        v3 = v84;
        v34 = v102;
        v35 = v100;
        sub_1B1F05D48(v33, (unsigned __int16 **)&v156, (uint64_t)v165);
        sub_1B1F03804((char *)v46);
        ecs_stack_allocator_pop_snapshot(v102);
        if ((v100 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v46 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v46 + 376));
        }
        swift_release();
        ++v36;
      }
      while (v36 != v110);
LABEL_44:
      sub_1B19ED720((uint64_t)&v136);
      goto LABEL_45;
    }
  }
LABEL_43:
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B19ED720((uint64_t)&v136);
LABEL_45:
  swift_release();
  sub_1B19ED748(v139);
  return sub_1B19ED748(v139);
}

uint64_t sub_1B2082220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B2082264(0, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B2082264(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_1EEF62EA0)
  {
    sub_1B20822B8(255, a2);
    v2 = sub_1B2229124();
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1EEF62EA0);
  }
}

void sub_1B20822B8(uint64_t a1, uint64_t a2)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_1EEF62EA8)
  {
    MEMORY[0x1E0C80A78](0, a2);
    type metadata accessor for simd_float4x4(255);
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EEF62EA8);
  }
}

uint64_t sub_1B20823F0(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

double sub_1B208240C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

uint64_t sub_1B2082448@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  int v26;
  int v27;
  char *v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  char v40;
  char v41;

  v36 = a2;
  sub_1B19F8E54(0, &qword_1EEF62EB0, (uint64_t (*)(void))sub_1B20827F8, (uint64_t)&type metadata for WrapAroundCamera.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v35 - v8;
  v40 = 1;
  v10 = a1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20827F8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v11 = v6;
  v12 = v36;
  LOBYTE(v37) = 0;
  sub_1B22297F0();
  v13 = v5;
  v15 = v14;
  LOBYTE(v37) = 1;
  sub_1B22297F0();
  v16 = v10;
  v18 = v17;
  LOBYTE(v37) = 2;
  sub_1B22297F0();
  v20 = v19;
  LOBYTE(v37) = 3;
  sub_1B22297F0();
  v22 = v21;
  LOBYTE(v37) = 4;
  sub_1B22297F0();
  v24 = v23;
  LOBYTE(v37) = 5;
  sub_1B22297F0();
  v27 = v26;
  LOBYTE(v37) = 6;
  v28 = v9;
  v29 = sub_1B22297D8();
  LOBYTE(v37) = 7;
  v30 = v28;
  v39 = sub_1B22297D8();
  v31 = v16[3];
  v32 = v16[4];
  sub_1B19FA070(v16, v31);
  if (sub_1B2067BAC(1084, v31, v32))
  {
    sub_1B19F900C(0, &qword_1EEF62EC0);
    v41 = 8;
    sub_1B208283C(&qword_1EEF62EC8, (uint64_t (*)(void))sub_1B1A08878, MEMORY[0x1E0DEE9A0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v13);
    v33 = v37;
    v34 = v38;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v13);
    v33 = 0;
    v34 = v40;
  }
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
  *(_DWORD *)v12 = v15;
  *(_DWORD *)(v12 + 4) = v18;
  *(_DWORD *)(v12 + 8) = v20;
  *(_DWORD *)(v12 + 12) = v22;
  *(_DWORD *)(v12 + 16) = v24;
  *(_DWORD *)(v12 + 20) = v27;
  *(_BYTE *)(v12 + 24) = v29 & 1;
  *(_BYTE *)(v12 + 25) = v39 & 1;
  *(_QWORD *)(v12 + 28) = v33;
  *(_BYTE *)(v12 + 36) = v34;
  return result;
}

unint64_t sub_1B20827F8()
{
  unint64_t result;

  result = qword_1EEF62EB8;
  if (!qword_1EEF62EB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7640, &type metadata for WrapAroundCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62EB8);
  }
  return result;
}

uint64_t sub_1B208283C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B19F900C(255, &qword_1EEF62EC0);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WrapAroundCamera.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B20828FC + 4 * byte_1B22B7447[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B2082930 + 4 * byte_1B22B7442[v4]))();
}

uint64_t sub_1B2082930(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2082938(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2082940);
  return result;
}

uint64_t sub_1B208294C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2082954);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B2082958(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2082960(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WrapAroundCamera.CodingKeys()
{
  return &type metadata for WrapAroundCamera.CodingKeys;
}

uint64_t getEnumTagSinglePayload for WrapAroundCamera(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 37))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WrapAroundCamera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 37) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 37) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for WrapAroundCamera()
{
  return &type metadata for WrapAroundCamera;
}

unint64_t sub_1B2082A30()
{
  unint64_t result;

  result = qword_1EEF62EE0;
  if (!qword_1EEF62EE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7618, &type metadata for WrapAroundCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62EE0);
  }
  return result;
}

unint64_t sub_1B2082A78()
{
  unint64_t result;

  result = qword_1EEF62EE8;
  if (!qword_1EEF62EE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7550, &type metadata for WrapAroundCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62EE8);
  }
  return result;
}

unint64_t sub_1B2082AC0()
{
  unint64_t result;

  result = qword_1EEF62EF0;
  if (!qword_1EEF62EF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7578, &type metadata for WrapAroundCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62EF0);
  }
  return result;
}

uint64_t sub_1B2082B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[32];

  sub_1B1A00060(v0, (uint64_t)v3);
  v1 = MEMORY[0x1B5E240CC](v3);
  sub_1B19FC350((uint64_t)v3);
  if (v1)
  {
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (result)
      return result;
    swift_unknownObjectRelease();
  }
  return 0;
}

void sub_1B2082B70(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;
  unint64_t v11;

  if (a1)
  {
    swift_unknownObjectWeakInit();
    v9 = &off_1E63CAFC0;
    swift_unknownObjectWeakAssign();
    v3 = a1;
    v4 = objc_msgSend(v3, sel_identifier);
    v5 = sub_1B222874C();
    v7 = v6;

    v10 = v5;
    v11 = v7;
    sub_1B19FC350(v1);
    sub_1B19FC2D0((uint64_t)&v8, v1);

  }
  else
  {
    swift_unknownObjectWeakInit();
    v9 = 0;
    swift_unknownObjectWeakAssign();
    v10 = 0x3E6C6C756E3CLL;
    v11 = 0xE600000000000000;
    sub_1B19FC350(v1);
    sub_1B19FC2D0((uint64_t)&v8, v1);
  }
}

uint64_t sub_1B2082C6C(_QWORD *a1)
{
  return sub_1B2082C80(a1);
}

uint64_t sub_1B2082C80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[7];

  v2 = sub_1B2228110();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v27 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_1B19FA070(a1, v13);
  if (sub_1B2067B64(2031, v13, v14))
  {
    v28 = v9;
    *(_QWORD *)&v29 = v6;
    v27 = v3;
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C78FEC();
    v15 = v12;
    v16 = v30;
    result = sub_1B222A150();
    if (!v16)
    {
      *(_QWORD *)&v31 = 0;
      BYTE8(v31) = 1;
      *(_QWORD *)&v32 = 0x7465737361;
      *((_QWORD *)&v32 + 1) = 0xE500000000000000;
      sub_1B1FC8AAC();
      v18 = v29;
      sub_1B2229814();
      v19 = sub_1B222805C();
      v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v18, v2);
      sub_1B20F15F4(v19, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v8);
    }
  }
  else
  {
    v22 = v35[6];
    sub_1B19FA070(a1, a1[3]);
    v23 = v30;
    result = sub_1B222A138();
    if (!v23)
    {
      sub_1B19FA070(v35, v35[3]);
      sub_1B1BB5244();
      sub_1B2229D6C();
      v29 = v32;
      v30 = v31;
      v24 = v33;
      v25 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v26 = v29;
      *(_OWORD *)v22 = v30;
      *(_OWORD *)(v22 + 16) = v26;
      *(_QWORD *)(v22 + 32) = v24;
      *(_QWORD *)(v22 + 40) = v25;
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v35);
    }
  }
  return result;
}

uint64_t sub_1B2082F38(uint64_t a1, float a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < 2)
    return 0;
  v4 = v2 - 1;
  if (v2 != 2)
  {
    v5 = 0;
    result = v4;
    while (1)
    {
      v7 = v5 + v4 / 2;
      if (*(float *)(a1 + 32 + 4 * v7) <= a2)
        v5 = v7;
      else
        result = v7;
      v4 = result - v5;
      if (result <= v5)
        return 0;
      if (v4 == 1)
        goto LABEL_10;
    }
  }
  v5 = 0;
  result = 1;
LABEL_10:
  v8 = a1 + 32;
  if (*(float *)(v8 + 4 * result) >= a2)
  {
    if (*(float *)(v8 + 4 * v5) <= a2)
      return v5;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B2082FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = a2 - 1;
  if ((unint64_t)(a2 - 1) < 0x35 && ((0x1FF1FFFFFFFFFFuLL >> v2) & 1) != 0)
  {
    v3 = sub_1B1BA2B0C(qword_1B22B88B8[v2] * a1, 0);
    if (!v3)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v6[1] = 0x80000001B234A630;
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v4 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v6[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v4, v6, 0xD000000000000010, 0x80000001B234A630);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    return (uint64_t)v3;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

char *sub_1B20831FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  id v8;

  if (a4 != 28 || objc_msgSend(a1, sel_storageMode) == (id)2)
    return 0;
  v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v8 = a1;
  return &v7[a2];
}

char *sub_1B2083298(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  id v8;

  if (a4 != 29 || objc_msgSend(a1, sel_storageMode) == (id)2)
    return 0;
  v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v8 = a1;
  return &v7[a2];
}

char *sub_1B2083334(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  id v8;

  if (a4 != 30 || objc_msgSend(a1, sel_storageMode) == (id)2)
    return 0;
  v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v8 = a1;
  return &v7[a2];
}

char *sub_1B20833D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  id v8;

  if (a4 != 31 || objc_msgSend(a1, sel_storageMode) == (id)2)
    return 0;
  v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v8 = a1;
  return &v7[a2];
}

char *sub_1B2083474(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  id v8;

  if (a4 != 45 || objc_msgSend(a1, sel_storageMode) == (id)2)
    return 0;
  v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v8 = a1;
  return &v7[a2];
}

char *sub_1B2083504(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  id v8;

  if (a4 != 18 || objc_msgSend(a1, sel_storageMode) == (id)2)
    return 0;
  v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v8 = a1;
  return &v7[a2];
}

void sub_1B20835A0(char *a1)
{
  sub_1B1F2FD80(*a1);
}

void sub_1B20835AC()
{
  char *v0;

  sub_1B1DB5748(0, *v0);
}

void sub_1B20835B8(uint64_t a1)
{
  char *v1;

  sub_1B1DB4280(a1, *v1);
}

void sub_1B20835C0(uint64_t a1)
{
  char *v1;

  sub_1B1DB5748(a1, *v1);
}

uint64_t sub_1B20835C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B20945E0();
  *a1 = result;
  return result;
}

uint64_t sub_1B20835F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B2083624 + 4 * byte_1B22B76B0[*v0]))();
}

void sub_1B2083624(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x797469636F6C6576;
  a1[1] = v1;
}

void sub_1B208363C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616D726F6ELL;
  a1[1] = 0xE600000000000000;
}

void sub_1B2083654(_QWORD *a1@<X8>)
{
  *a1 = 0x7461746E6569726FLL;
  a1[1] = 0xEB000000006E6F69;
}

void sub_1B2083678(_QWORD *a1@<X8>)
{
  *a1 = 0x726F6C6F63;
  a1[1] = 0xE500000000000000;
}

void sub_1B2083690(_QWORD *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

void sub_1B20836A4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "jointIndices");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B20836C8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "jointWeights");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B20836EC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63952F0;
}

uint64_t sub_1B20836FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  if (a1)
  {
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v6;
    *v6 = 0x8000000000000000;
    sub_1B1B89F54(a1, a2, a3, a4, a5, a6, isUniquelyReferenced_nonNull_native);
    *v6 = v15;
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B1B84078(a5, a6);
    return swift_unknownObjectRelease();
  }
}

_QWORD *sub_1B20837D8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1B1B7EAB8(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  a1[1] = 0x636143746E696F50;
  a1[2] = 0xEA00000000006568;
  a1[3] = 0;
  return result;
}

uint64_t sub_1B2083820()
{
  sub_1B208C5C4();
  return sub_1B2228A70();
}

uint64_t sub_1B208387C()
{
  sub_1B208C5C4();
  return sub_1B22289F8();
}

void sub_1B20838C8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E636E970;
}

uint64_t sub_1B20838D8(__int16 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 1) != 0)
  {
    sub_1B2228890();
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1B2228890();
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  sub_1B2228890();
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    sub_1B2228890();
    if ((a1 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_12:
  sub_1B2228890();
  if ((a1 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((a1 & 0x400) != 0)
LABEL_7:
    sub_1B2228890();
LABEL_8:
  v2 = sub_1B214E3E8();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B2083A40()
{
  sub_1B209411C();
  return sub_1B2228A88();
}

uint64_t sub_1B2083A9C()
{
  sub_1B209411C();
  return sub_1B2228A10();
}

uint64_t sub_1B2083AE8()
{
  __int16 *v0;

  return sub_1B20838D8(*v0);
}

double sub_1B2083AF0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v6;

  *(_QWORD *)&v6 = 0;
  *((_QWORD *)&v6 + 1) = 0xE000000000000000;
  sub_1B2082C80(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0xE000000000000000;
    *(_OWORD *)(a2 + 32) = 0uLL;
  }
  return result;
}

uint64_t sub_1B2083B80()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B2083B9C()
{
  return sub_1B2228824();
}

uint64_t sub_1B2083BB8()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B2083BD4@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

void sub_1B2083BE0(_QWORD *a1@<X8>)
{
  *a1 = 0x636E657265666572;
  a1[1] = 0xE900000000000065;
}

uint64_t sub_1B2083C00()
{
  return 0x636E657265666572;
}

uint64_t sub_1B2083C1C@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B2083C28()
{
  sub_1B2093108();
  return sub_1B222A1D4();
}

uint64_t sub_1B2083C50()
{
  sub_1B2093108();
  return sub_1B222A1E0();
}

uint64_t sub_1B2083C78@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[6];
  _QWORD *v18;

  v18 = a2;
  sub_1B19F8E54(0, &qword_1EEF62F20, (uint64_t (*)(void))sub_1B2093108, (uint64_t)&type metadata for PointCacheFromModel.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v13[-v8];
  v14 = 0;
  swift_unknownObjectWeakInit();
  v14 = 0;
  v10 = swift_unknownObjectWeakAssign();
  v15 = 0x3E6C6C756E3CLL;
  v16 = 0xE600000000000000;
  sub_1B19FC2D0(v10, (uint64_t)v17);
  v17[4] = 0;
  v17[5] = 0xE000000000000000;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2093108();
  sub_1B222A150();
  if (!v2)
  {
    v11 = v18;
    sub_1B19FC28C();
    sub_1B2229814();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    sub_1B1D8EB3C((uint64_t)v13, (uint64_t)v17);
    sub_1B209314C(v17, v11);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F2E288((uint64_t)v17);
}

uint64_t sub_1B2083E24@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B2083C78(a1, a2);
}

uint64_t sub_1B2083E38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF62F30, (uint64_t (*)(void))sub_1B2093108, (uint64_t)&type metadata for PointCacheFromModel.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2093108();
  sub_1B222A180();
  sub_1B19FC3E4();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B2083F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD v3[4];

  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  result = sub_1B19FC2D0((uint64_t)v3, a1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  return result;
}

uint64_t sub_1B2083FB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;
  __int16 v7;
  uint64_t v8;

  result = sub_1B20933B0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
    *(_WORD *)(a2 + 18) = v7;
    *(_QWORD *)(a2 + 24) = v8;
  }
  return result;
}

uint64_t sub_1B2083FF4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B208401C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16) | (*(unsigned __int16 *)(v1 + 18) << 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B208401C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v17 = a5;
  v18 = a3;
  HIDWORD(v16) = a4;
  sub_1B19F8E54(0, &qword_1EEF62F50, (uint64_t (*)(void))sub_1B20935FC, (uint64_t)&type metadata for PointCacheGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v16 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20935FC();
  sub_1B222A180();
  v20 = a2;
  v19 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v5)
  {
    v14 = HIDWORD(v16);
    LOBYTE(v20) = 1;
    sub_1B2229940();
    LOBYTE(v20) = v14;
    v19 = 2;
    sub_1B1A70E34();
    sub_1B2229958();
    LOWORD(v20) = HIWORD(v14);
    v19 = 3;
    sub_1B2093684();
    sub_1B2229958();
    LOBYTE(v20) = 4;
    sub_1B22299B8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

double sub_1B2084214@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) = 1000;
  *(_BYTE *)(a1 + 16) = 2;
  *(_WORD *)(a1 + 18) = 23;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1B208423C()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B2084258()
{
  return sub_1B2228824();
}

uint64_t sub_1B2084274()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B2084290@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

void sub_1B208429C(_QWORD *a1@<X8>)
{
  *a1 = 0x7461507465737361;
  a1[1] = 0xE900000000000068;
}

uint64_t sub_1B20842BC()
{
  return 0x7461507465737361;
}

uint64_t sub_1B20842D8@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B20842E4()
{
  sub_1B2093828();
  return sub_1B222A1D4();
}

uint64_t sub_1B208430C()
{
  sub_1B2093828();
  return sub_1B222A1E0();
}

uint64_t sub_1B2084334@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B20936C8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B2084360(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF62F70, (uint64_t (*)(void))sub_1B2093828, (uint64_t)&type metadata for REMeshAssetPointCache.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2093828();
  sub_1B222A180();
  sub_1B2229910();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

_QWORD *sub_1B2084464@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1B1B7EE30(MEMORY[0x1E0DEE9D8]);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = result;
  return result;
}

uint64_t *sub_1B2084498(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  void *v5;
  void *v6;
  id v7;
  __int128 v8;
  id v9;
  __int128 v10;
  uint64_t *result;
  uint64_t v12[12];
  uint64_t v13[12];
  uint64_t v14[12];
  uint64_t v15[12];
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD v110[2];
  uint64_t v111;

  v3 = *(_OWORD *)(v1 + 32);
  v110[0] = *(_OWORD *)(v1 + 16);
  v110[1] = v3;
  v111 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v110, 0x200000000, v12);
  sub_1B1A18378((uint64_t)v12, (uint64_t)&v49, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v49)
  {
    v99 = v49;
    v100 = v50;
    v101 = v51;
    v102 = v52;
    v103 = v53;
    v104 = v54;
    v105 = v55;
    v106 = v56;
    v107 = v57;
    v108 = v58;
    v109 = v59;
    swift_retain();
    sub_1B219DEAC((uint64_t)&v99, a1);
    swift_release();
    sub_1B19ED748(v12);
  }
  v4 = *(_OWORD *)(v1 + 112);
  v97[0] = *(_OWORD *)(v1 + 96);
  v97[1] = v4;
  v98 = *(_QWORD *)(v1 + 128);
  sub_1B1E8FCE4(a1, (uint64_t)v97, 0x200000000, v13);
  sub_1B1A18378((uint64_t)v13, (uint64_t)&v38, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v38)
  {
    v86 = v38;
    v87 = v39;
    v88 = v40;
    v89 = v41;
    v90 = v42;
    v91 = v43;
    v92 = v44;
    v93 = v45;
    v94 = v46;
    v95 = v47;
    v96 = v48;
    swift_retain();
    sub_1B219E664((uint64_t)&v86, a1);
    swift_release();
    sub_1B19ED748(v13);
  }
  v5 = (void *)MEMORY[0x1B5E240CC](a1 + 56);
  if (v5)
  {
    v6 = v5;
    if ((objc_msgSend(v5, sel_respondsToSelector_, sel_resourceManager) & 1) != 0)
    {
      v7 = objc_msgSend(v6, sel_resourceManager);
      swift_unknownObjectRelease();
      v8 = *(_OWORD *)(v1 + 72);
      v84[0] = *(_OWORD *)(v1 + 56);
      v84[1] = v8;
      v85 = *(_QWORD *)(v1 + 88);
      sub_1B1E8FCE4(a1, (uint64_t)v84, 0x200000000, v14);
      sub_1B1A18378((uint64_t)v14, (uint64_t)&v27, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (v27)
      {
        v73 = v27;
        v74 = v28;
        v75 = v29;
        v76 = v30;
        v77 = v31;
        v78 = v32;
        v79 = v33;
        v80 = v34;
        v81 = v35;
        v82 = v36;
        v83 = v37;
        v9 = v7;
        sub_1B219E940((uint64_t)&v73, v9);

        sub_1B19ED748(v14);
      }
      else
      {

      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  v10 = *(_OWORD *)(v1 + 152);
  v71[0] = *(_OWORD *)(v1 + 136);
  v71[1] = v10;
  v72 = *(_QWORD *)(v1 + 168);
  sub_1B1E8FCE4(a1, (uint64_t)v71, 0x200000000, v15);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v15, (uint64_t)&v16, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v16)
  {
    v60 = v16;
    v61 = v17;
    v62 = v18;
    v63 = v19;
    v64 = v20;
    v65 = v21;
    v66 = v22;
    v67 = v23;
    v68 = v24;
    v69 = v25;
    v70 = v26;
    sub_1B2187724((uint64_t)&v60);
    return sub_1B19ED748(v15);
  }
  return result;
}

uint64_t sub_1B208480C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;

  v2 = v1;
  v4 = v1[2];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[12];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[17];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[7];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  swift_getObjectType();
  return sub_1B204D6E4();
}

uint64_t sub_1B2084A90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __int16 a6, uint64_t a7)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _QWORD *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char v139;
  char v140;
  uint64_t v141;
  __n128 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  float v148;
  unint64_t v149;
  unint64_t v150;
  float v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  float32x4_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  __n128 v168;
  float32x4_t v169;
  uint64_t v170;
  __n128 v171;
  float32x4_t v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  uint64_t v176;
  float v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  float v181;
  unint64_t v182;
  uint64_t v183;
  float v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  float32x4_t v188;
  __int128 v189;
  char *v190;
  char *v191;
  __int128 v192;
  char *v193;
  char *v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  double (*v206)(_QWORD, __n128, __n128);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float32x4_t v210;
  unint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  __int16 v221;
  char *v222;
  uint64_t v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double (*v241)(_QWORD, __n128, __n128);
  uint64_t v242;
  int64x2_t v243;
  _QWORD v244[7];
  _OWORD v245[7];
  uint64_t v246;
  _OWORD v247[7];
  uint64_t v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    v8 = a4 < 1;
  else
    v8 = 1;
  if (!v8)
  {
    if (!a2)
    {
      sub_1B2091148();
      swift_allocError();
      *v26 = 0;
      return swift_willThrow();
    }
    v10 = v7;
    v13 = result;
    *(_QWORD *)(result + 24) = a4;
    v226 = a7 + 0x76E15D3EFEFDCBBFLL;
    v227 = 0xC5004E441C522FB3 * a7 - 0x3AFFB1BBE3ADD04DLL;
    v228 = 0x77710069854EE241 - a7;
    v229 = 0x39109BB02ACBE635 * a7;
    swift_retain();
    swift_retain();
    v220 = a5;
    v221 = a6;
    if ((a6 & 1) != 0)
    {
      v15 = sub_1B2082FD0(a4, 30);
      sub_1B20836FC(v15, v16, v17, v18, 0x6E6F697469736F70, 0xE800000000000000);
    }
    if ((a6 & 2) != 0)
    {
      v19 = sub_1B2082FD0(a4, 30);
      sub_1B20836FC(v19, v20, v21, v22, 0x6C616D726F6ELL, 0xE600000000000000);
    }
    if ((a6 & 4) != 0)
    {
      v27 = sub_1B2082FD0(a4, 31);
      v23 = (uint64_t *)v13;
      sub_1B20836FC(v27, v28, v29, v30, 0x726F6C6F63, 0xE500000000000000);
      v24 = sub_1B208FF30(a3);
      v25 = v31 & 1;
    }
    else
    {
      v23 = (uint64_t *)v13;
      v24 = 0;
      v25 = 1;
    }
    if ((a6 & 0x10) != 0)
    {
      v32 = *(_QWORD *)(a2 + 24);
      if (v32)
      {
        if (*(_WORD *)(v32 + 172))
        {
          v224 = v24;
          v33 = sub_1B1BA2B0C(8 * a4, 0);
          if (v33)
          {
            v36 = (uint64_t)v33;
            v37 = v34;
            v38 = v35;
            swift_unknownObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v236 = *v23;
            *v23 = 0x8000000000000000;
            sub_1B1B89F54(v36, v37, v38, 18, 0x646E49746E696F6ALL, 0xEC00000073656369, isUniquelyReferenced_nonNull_native);
            *v23 = v236;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v237 = 0x80000001B234A700;
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v40 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v236 = 0;
            swift_retain();
            sub_1B1F1AD70(v40, &v236, 0xD000000000000036, 0x80000001B234A700);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            sub_1B1B84078(0x646E49746E696F6ALL, 0xEC00000073656369);
            swift_unknownObjectRelease();
          }
          v41 = sub_1B2082FD0(a4, 31);
          if (v41)
          {
            v45 = v41;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            swift_unknownObjectRetain();
            v49 = swift_isUniquelyReferenced_nonNull_native();
            v236 = *v23;
            *v23 = 0x8000000000000000;
            sub_1B1B89F54(v45, v46, v47, v48, 0x696557746E696F6ALL, 0xEC00000073746867, v49);
            *v23 = v236;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_1B1B84078(0x696557746E696F6ALL, 0xEC00000073746867);
            swift_unknownObjectRelease();
          }
          v24 = v224;
        }
      }
    }
    v50 = (_QWORD *)swift_retain();
    sub_1B20901E4(v50, &v230);
    swift_release();
    v208 = v230;
    v51 = *(_QWORD *)(v230 + 16);
    v211 = *(_QWORD *)(v234 + 16);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = 0u;
    v53 = v52 + 16;
    *(_OWORD *)(v52 + 32) = 0u;
    *(_QWORD *)(v52 + 48) = 0;
    v219 = v52;
    *(_OWORD *)(v52 + 56) = xmmword_1B2246910;
    if ((v25 & 1) == 0 && (sub_1B1DA4E70(v24) & 1) != 0)
    {
      sub_1B20F03D8(v24, &v243);
      sub_1B1A18378((uint64_t)&v243, (uint64_t)v245, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
      if (v246)
      {
        v247[4] = v245[4];
        v247[5] = v245[5];
        v247[6] = v245[6];
        v248 = v246;
        v247[0] = v245[0];
        v247[1] = v245[1];
        v247[2] = v245[2];
        v247[3] = v245[3];
        sub_1B1EDFCF8((uint64_t)v247, 1, 1, (uint64_t)v244);
        v202 = v244[1];
        v203 = v244[0];
        v200 = v244[3];
        v201 = v244[2];
        v54 = v244[5];
        v198 = v244[6];
        v199 = v244[4];
        sub_1B1A08614(v243.i64);
        sub_1B1B4D278((uint64_t)v244, v53, (unint64_t *)&qword_1EEF61C50, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler2d);
        goto LABEL_34;
      }
      v55 = *(_QWORD *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
      v236 = 0;
      v237 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B1FF35D8(v24);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v56 = v236;
      v57 = v237;
      v58 = sub_1B2228E90();
      v236 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(_QWORD *)v55 + 88))(v58, &v236, v56, v57);
      swift_release();
      swift_bridgeObjectRelease();
    }
    v202 = 0;
    v203 = 0;
    v200 = 0;
    v201 = 0;
    v198 = 0;
    v199 = 0;
    v54 = 1;
LABEL_34:
    v59 = v23;
    v60 = *v23;
    if (*(_QWORD *)(*v23 + 16) && (v61 = sub_1B1DC3B00(0x6E6F697469736F70, 0xE800000000000000), (v62 & 1) != 0))
    {
      v63 = (_QWORD *)(*(_QWORD *)(v60 + 56) + 32 * v61);
      v64 = v23;
      v65 = v63[1];
      v66 = v63[2];
      v67 = v63[3];
      v68 = (void *)swift_unknownObjectRetain();
      v69 = sub_1B2083334(v68, v65, v66, v67);
      v71 = v70;
      LOBYTE(v66) = v72;
      v59 = v64;
      swift_unknownObjectRelease();
      v73 = v66 & 1;
    }
    else
    {
      v69 = 0;
      v71 = 0;
      v73 = 1;
    }
    v74 = *v59;
    v206 = (double (*)(_QWORD, __n128, __n128))v54;
    if (*(_QWORD *)(*v59 + 16) && (v75 = sub_1B1DC3B00(0x6C616D726F6ELL, 0xE600000000000000), (v76 & 1) != 0))
    {
      v77 = (_QWORD *)(*(_QWORD *)(v74 + 56) + 32 * v75);
      v78 = v77[1];
      v79 = v77[2];
      v80 = v77[3];
      v81 = (void *)swift_unknownObjectRetain();
      v82 = sub_1B2083334(v81, v78, v79, v80);
      v84 = v83;
      LOBYTE(v79) = v85;
      swift_unknownObjectRelease();
      v86 = v79 & 1;
    }
    else
    {
      v82 = 0;
      v84 = 0;
      v86 = 1;
    }
    v87 = *v59;
    v205 = v51;
    if (*(_QWORD *)(*v59 + 16) && (v88 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000), (v89 & 1) != 0))
    {
      v90 = (_QWORD *)(*(_QWORD *)(v87 + 56) + 32 * v88);
      v91 = v90[1];
      v92 = v86;
      v93 = v84;
      v94 = v73;
      v95 = v82;
      v96 = v90[2];
      v97 = v90[3];
      v98 = (void *)swift_unknownObjectRetain();
      v99 = v97;
      v82 = v95;
      v73 = v94;
      v84 = v93;
      v86 = v92;
      v51 = v205;
      v222 = sub_1B20833D8(v98, v91, v96, v99);
      v218 = v100;
      LOBYTE(v96) = v101;
      swift_unknownObjectRelease();
      v102 = v96 & 1;
    }
    else
    {
      v222 = 0;
      v218 = 0;
      v102 = 1;
    }
    v225 = v102;
    v103 = *v59;
    if (*(_QWORD *)(*v59 + 16) && (v104 = sub_1B1DC3B00(0x646E49746E696F6ALL, 0xEC00000073656369), (v105 & 1) != 0))
    {
      v106 = (_QWORD *)(*(_QWORD *)(v103 + 56) + 32 * v104);
      v107 = v106[1];
      v108 = v86;
      v109 = v84;
      v110 = v73;
      v111 = v82;
      v112 = v71;
      v113 = v69;
      v114 = v106[2];
      v115 = v106[3];
      v116 = (void *)swift_unknownObjectRetain();
      v117 = v115;
      v69 = v113;
      v71 = v112;
      v82 = v111;
      v73 = v110;
      v84 = v109;
      v86 = v108;
      v51 = v205;
      v118 = sub_1B2083504(v116, v107, v114, v117);
      v216 = v119;
      v217 = (uint64_t)v118;
      LOBYTE(v114) = v120;
      swift_unknownObjectRelease();
      v121 = v114 & 1;
    }
    else
    {
      v216 = 0;
      v217 = 0;
      v121 = 1;
    }
    v215 = v121;
    v122 = *v59;
    if (*(_QWORD *)(*v59 + 16) && (v123 = sub_1B1DC3B00(0x696557746E696F6ALL, 0xEC00000073746867), (v124 & 1) != 0))
    {
      v125 = (_QWORD *)(*(_QWORD *)(v122 + 56) + 32 * v123);
      v126 = v125[1];
      v127 = v86;
      v128 = v84;
      v129 = v73;
      v130 = v82;
      v131 = v71;
      v132 = v69;
      v133 = v125[2];
      v134 = v125[3];
      v135 = (void *)swift_unknownObjectRetain();
      v136 = v134;
      v69 = v132;
      v71 = v131;
      v82 = v130;
      v73 = v129;
      v84 = v128;
      v86 = v127;
      v51 = v205;
      v137 = sub_1B20833D8(v135, v126, v133, v136);
      v213 = v138;
      v214 = (uint64_t)v137;
      LOBYTE(v133) = v139;
      swift_unknownObjectRelease();
      v140 = v133 & 1;
    }
    else
    {
      v213 = 0;
      v214 = 0;
      v140 = 1;
    }
    v212 = v140;
    v141 = 0;
    v204 = -(uint64_t)v51;
    v207 = v208 + 32;
    v142.n128_u64[1] = 1052050675;
    v209 = (uint64_t)v206;
    v143 = v220;
    v144 = a4;
    while (1)
    {
      if (v143)
      {
        if (v143 != 1)
        {
          v173 = v235;
          v174 = *(_QWORD *)(v235 + 16);
          if (v174)
            v175 = *(float *)(v235 + 4 * v174 + 28);
          else
            v175 = 0.0;
          sub_1B1C4E760(0.0, v175);
          v178 = sub_1B2082F38(v173, v177);
          v179 = v228 ^ v226 ^ v227;
          v180 = v229 ^ v227 ^ v226;
          v181 = (float)((9 * ((((5 * v227) >> 32) >> 25) | (640 * v227))) & 0xFFFFFF) * 0.000000059605;
          v182 = v180 ^ v228 ^ v226 ^ (v227 << 17);
          v183 = __ROR8__(v229 ^ v227, 19);
          v226 = v179 ^ v183 ^ v180;
          v227 = v182 ^ v179;
          v228 = v182 ^ (v179 << 17);
          v229 = __ROR8__(v179 ^ v183, 19);
          v184 = sqrtf((float)((9 * ((((5 * v179) >> 32) >> 25) | (640 * v179))) & 0xFFFFFF) * 0.000000059605);
          *(float *)&v185 = 1.0 - v184;
          *(float *)&v186 = (float)(1.0 - v181) * v184;
          *(float *)&v187 = v181 * v184;
          v188.i64[0] = __PAIR64__(v186, v185);
          v188.i64[1] = v187;
          sub_1B2086894(v141, v178, &v230, (uint64_t)v69, v188, v71, v73, (uint64_t)v82, v84, v86, (uint64_t)v222, v218, v225, v219, v217, v216, v215, v214, v213,
            v212);
          v143 = v220;
          goto LABEL_56;
        }
        if ((v221 & 0x400) != 0)
        {
          v143 = v220;
          v145 = sub_1B1C86D20(v211);
          v146 = v228 ^ v226 ^ v227;
          v147 = v229 ^ v227 ^ v226;
          v148 = (float)((9 * ((((5 * v227) >> 32) >> 25) | (640 * v227))) & 0xFFFFFF) * 0.000000059605;
          v149 = v147 ^ v228 ^ v226 ^ (v227 << 17);
          v150 = v146 ^ __ROR8__(v229 ^ v227, 19);
          v226 = v150 ^ v147;
          v227 = v149 ^ v146;
          v228 = v149 ^ (v146 << 17);
          v229 = __ROR8__(v150, 19);
          v151 = sqrtf((float)((9 * ((((5 * v146) >> 32) >> 25) | (640 * v146))) & 0xFFFFFF) * 0.000000059605);
          *(float *)&v152 = 1.0 - v151;
          *(float *)&v153 = (float)(1.0 - v148) * v151;
          *(float *)&v154 = v148 * v151;
          v155.i64[0] = __PAIR64__(v153, v152);
          v155.i64[1] = v154;
          sub_1B2086894(v141, v145, &v230, (uint64_t)v69, v155, v71, v73, (uint64_t)v82, v84, v86, (uint64_t)v222, v218, v225, v219, v217, v216, v215, v214, v213,
            v212);
LABEL_56:
          v144 = a4;
          goto LABEL_57;
        }
        v156 = v227;
        v157 = 9 * __ROR8__(5 * v227, 57);
        v158 = v228 ^ v226;
        v159 = v229 ^ v227;
        v160 = v228 ^ v226 ^ v227;
        v161 = v229 ^ v227 ^ v226;
        v226 = v161;
        v227 = v160;
        v162 = __ROR8__(v159, 19);
        v163 = v158 ^ (v156 << 17);
        v228 = v163;
        v229 = v162;
        v164 = ((unint64_t)v157 * (unsigned __int128)v51) >> 64;
        if (v51 > v157 * v51 && v204 % v51 > v157 * v51)
        {
          do
          {
            v165 = 9 * __ROR8__(5 * v160, 57);
            v166 = v161 ^ v163;
            v167 = v160 ^ v162;
            v163 ^= v161 ^ (v160 << 17);
            v160 ^= v166;
            v161 ^= v167;
            v162 = __ROR8__(v167, 19);
          }
          while (v204 % v51 > v165 * v51);
          v226 = v161;
          v227 = v160;
          v164 = ((unint64_t)v165 * (unsigned __int128)v51) >> 64;
          v228 = v163;
          v229 = v162;
        }
        v168 = *(__n128 *)(v231 + 16 * v164 + 32);
        v169 = *(float32x4_t *)(v232 + 16 * v164 + 32);
        v142.n128_u64[0] = *(_QWORD *)(v233 + 8 * v164 + 32);
        if ((v73 & 1) != 0)
        {
          if ((v86 & 1) != 0)
            goto LABEL_67;
        }
        else
        {
          v189 = *(_OWORD *)(v207 + 16 * v164);
          v190 = &v69[12 * v141];
          *(_QWORD *)v190 = v189;
          *((_DWORD *)v190 + 2) = DWORD2(v189);
          if ((v86 & 1) != 0)
          {
LABEL_67:
            if ((v225 & 1) == 0)
              goto LABEL_81;
            goto LABEL_57;
          }
        }
        v191 = &v82[12 * v141];
        *(_QWORD *)v191 = v168.n128_u64[0];
        *((_DWORD *)v191 + 2) = v168.n128_u32[2];
        if ((v225 & 1) == 0)
        {
LABEL_81:
          if (v209 == 1)
          {
            *(float32x4_t *)&v222[16 * v141] = v169;
            v209 = 1;
          }
          else
          {
            v236 = v203;
            v237 = v202;
            v238 = v201;
            v239 = v200;
            v240 = v199;
            v241 = (double (*)(_QWORD, __n128, __n128))v209;
            v242 = v198;
            v197 = v169;
            *(double *)v195.i64 = ((double (*)(uint64_t *, __n128, __n128))v209)(&v236, v142, v168);
            v144 = a4;
            v142 = (__n128)vmulq_f32(v197, v195);
            *(__n128 *)&v222[16 * v141] = v142;
          }
        }
      }
      else
      {
        if ((v221 & 0x400) != 0)
        {
          v143 = v220;
          v176 = sub_1B1C86D20(v211);
          sub_1B2086894(v141, v176, &v230, (uint64_t)v69, (float32x4_t)xmmword_1B22B8A60, v71, v73, (uint64_t)v82, v84, v86, (uint64_t)v222, v218, v225, v219, v217, v216, v215, v214, v213,
            v212);
          goto LABEL_56;
        }
        v170 = 16 * (v141 % (uint64_t)v51);
        v171 = *(__n128 *)(v231 + v170 + 32);
        v172 = *(float32x4_t *)(v232 + v170 + 32);
        v142.n128_u64[0] = *(_QWORD *)(v233 + 8 * (v141 % (uint64_t)v51) + 32);
        if ((v73 & 1) != 0)
        {
          if ((v86 & 1) != 0)
            goto LABEL_72;
        }
        else
        {
          v192 = *(_OWORD *)(v207 + 16 * (v141 % (uint64_t)v51));
          v193 = &v69[12 * v141];
          *(_QWORD *)v193 = v192;
          *((_DWORD *)v193 + 2) = DWORD2(v192);
          if ((v86 & 1) != 0)
          {
LABEL_72:
            if ((v225 & 1) == 0)
              goto LABEL_85;
            goto LABEL_57;
          }
        }
        v194 = &v82[12 * v141];
        *(_QWORD *)v194 = v171.n128_u64[0];
        *((_DWORD *)v194 + 2) = v171.n128_u32[2];
        if ((v225 & 1) == 0)
        {
LABEL_85:
          if (v206 == (double (*)(_QWORD, __n128, __n128))1)
          {
            *(float32x4_t *)&v222[16 * v141] = v172;
            v209 = 1;
          }
          else
          {
            v236 = v203;
            v237 = v202;
            v238 = v201;
            v239 = v200;
            v240 = v199;
            v241 = v206;
            v242 = v198;
            v210 = v172;
            *(double *)v196.i64 = v206(&v236, v142, v171);
            v144 = a4;
            v142 = (__n128)vmulq_f32(v210, v196);
            *(__n128 *)&v222[16 * v141] = v142;
            v209 = (uint64_t)v206;
          }
          v51 = v205;
        }
      }
LABEL_57:
      if (++v141 == v144)
      {
        sub_1B209119C((uint64_t)&v230);
        swift_release();
        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for PointCacheGeneratorSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2085B6C()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v50 = qword_1ED4D09F8;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  v54 = 2;
  v55 = 0;
  swift_retain();
  sub_1B1E3F1FC(1, (uint64_t)&v15);
  swift_release();
  v1 = v16;
  v2 = v17;
  v3 = v19;
  v4 = v18 | 4;
  *(_QWORD *)(v0 + 16) = v15;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v44 = qword_1ED4D09F8;
  v45 = 0;
  v46 = 2;
  v47 = 0;
  v48 = 2;
  v49 = 0;
  swift_retain();
  sub_1B1E3F3F4(1, (uint64_t)v20);
  swift_release();
  v5 = v20[1];
  *(_OWORD *)(v0 + 56) = v20[0];
  *(_OWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 88) = v21;
  v38 = qword_1ED4D09F8;
  v39 = 0;
  v40 = 2;
  v41 = 0;
  v42 = 2;
  v43 = 0;
  swift_retain();
  sub_1B1E3D5CC(1, (uint64_t)&v22);
  swift_release();
  v6 = v23;
  v7 = v24;
  v8 = v26;
  v9 = v25 | 4;
  *(_QWORD *)(v0 + 96) = v22;
  *(_DWORD *)(v0 + 104) = v6;
  *(_BYTE *)(v0 + 108) = v7;
  *(_QWORD *)(v0 + 112) = v9;
  *(_BYTE *)(v0 + 120) = 2;
  *(_QWORD *)(v0 + 128) = v8;
  v32 = qword_1ED4D09F8;
  v33 = 0;
  v34 = 2;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  swift_retain();
  sub_1B1E3F5EC(1, (uint64_t)&v27);
  swift_release();
  v10 = v28;
  v11 = v29;
  v12 = v31;
  v13 = v30 | 4;
  *(_QWORD *)(v0 + 136) = v27;
  *(_DWORD *)(v0 + 144) = v10;
  *(_BYTE *)(v0 + 148) = v11;
  *(_QWORD *)(v0 + 152) = v13;
  *(_BYTE *)(v0 + 160) = 2;
  *(_QWORD *)(v0 + 168) = v12;
  return v0;
}

uint64_t sub_1B2085D70()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B2085B6C();
  return v0;
}

const char *sub_1B2085DA4()
{
  return "PointCacheGeneratorSystem";
}

void sub_1B2085DBC(char *a1)
{
  sub_1B1F94178(*a1);
}

void sub_1B2085DC8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B2085E18()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B2085E9C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B2085EDC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B2085F4C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B2085F98()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B208601C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B208F5AC();
  *a1 = result;
  return result;
}

uint64_t sub_1B2086048()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B208607C + 4 * byte_1B22B76C7[*v0]))();
}

void sub_1B208607C(_QWORD *a1@<X8>)
{
  *a1 = 0x746E756F63;
  a1[1] = 0xE500000000000000;
}

void sub_1B2086094(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "distribution");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B20860B8(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6F6974706FLL;
  a1[1] = 0xE700000000000000;
}

void sub_1B20860D4(_QWORD *a1@<X8>)
{
  *a1 = 1684366707;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1B20860E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B208611C + 4 * byte_1B22B76CC[*v0]))(0x69746E456873656DLL, 0xEA00000000007974);
}

uint64_t sub_1B208611C()
{
  return 0x746E756F63;
}

uint64_t sub_1B2086130()
{
  return 0x7562697274736964;
}

uint64_t sub_1B2086150()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1B2086168()
{
  return 1684366707;
}

uint64_t sub_1B2086178@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B208F5AC();
  *a1 = result;
  return result;
}

uint64_t sub_1B208619C()
{
  sub_1B20935FC();
  return sub_1B222A1D4();
}

uint64_t sub_1B20861C4()
{
  sub_1B20935FC();
  return sub_1B222A1E0();
}

double sub_1B20861EC(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  int8x16_t v4;
  __int8 v5;
  double result;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;

  v3 = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(v2 + 8) + 32 + 16 * *(_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * a1 + 32)), a2.f32[0]), vmulq_lane_f32(*(float32x4_t *)(*(_QWORD *)(v2 + 8) + 32 + 16 * *(_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * a1 + 40)), *(float32x2_t *)a2.f32, 1)), vmulq_laneq_f32(*(float32x4_t *)(*(_QWORD *)(v2 + 8) + 32 + 16 * *(_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * a1 + 48)), a2, 2));
  v4 = (int8x16_t)vabsq_f32(v3);
  if (*(float *)v4.i32 > 0.00000011921
    || (v4.i32[0] = vextq_s8(v4, v4, 8uLL).u32[0],
        *(int32x2_t *)v4.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v4.i8),
        (v4.i8[4] & 1) == 0)
    || (v5 = v4.i8[0], result = 0.0, (v5 & 1) == 0))
  {
    v7 = (int32x4_t)vmulq_f32(v3, v3);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
    *(_QWORD *)&result = vmulq_n_f32(v3, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]).u64[0];
  }
  return result;
}

__n128 sub_1B208629C(uint64_t a1, int32x4_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int32x4_t v12;
  char *v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned __int16 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int32x4_t v27;
  uint64_t v28;
  float v29;
  float v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int32x4_t v41;
  uint64_t v42;
  float v43;
  float v44;
  unsigned __int16 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  _DWORD *v56;
  __int128 v57;
  _WORD *v58;
  _DWORD *v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  int32x4_t v75;
  __int128 v76;
  uint64_t v77;
  int32x4_t v78;
  __int128 v79;
  uint64_t v80;
  int32x4_t v81;
  __int128 v82;
  _QWORD v83[2];

  v3 = 0;
  v4 = (_QWORD *)(v2[6] + 24 * a1);
  v5 = v4[4];
  v6 = v4[5];
  v7 = v4[6];
  v8 = v2[4] + 32;
  v9 = *(_QWORD *)(v8 + 8 * v5);
  v10 = v2[5] + 32;
  v11 = *(_OWORD *)(v10 + 16 * v5);
  v12 = vdupq_lane_s32(*(int32x2_t *)a2.i8, 0);
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v65 = v12;
  v68 = v11;
  do
  {
    v81 = v12;
    v15 = *(float *)((unint64_t)&v81 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v82 = v11;
    v16 = v15 * *(float *)((unint64_t)&v82 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    if (v16 > 0.0)
    {
      v80 = v9;
      v17 = *(_WORD *)((unint64_t)&v80 & 0xFFFFFFFFFFFFFFF9 | (2 * (v3 & 3)));
      v18 = *((_QWORD *)v13 + 2);
      if (v18)
      {
        if (*((unsigned __int16 *)v13 + 16) == v17)
        {
          v14 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_23;
          goto LABEL_3;
        }
        if (v18 != 1)
        {
          if (*((unsigned __int16 *)v13 + 20) == v17)
          {
            v14 = 1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              goto LABEL_23;
            v14 = 1;
            goto LABEL_3;
          }
          if (v18 != 2)
          {
            v22 = 48;
            v14 = 2;
            while (*(unsigned __int16 *)&v13[v22] != v17)
            {
              ++v14;
              v22 += 8;
              if (v18 == v14)
                goto LABEL_9;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_23:
              v13 = sub_1B1FFF0E0((uint64_t)v13);
LABEL_3:
            v12 = v65;
            v11 = v68;
            *(float *)&v13[8 * v14 + 36] = v16 + *(float *)&v13[8 * v14 + 36];
            goto LABEL_4;
          }
        }
      }
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1B1C69AE0(0, v18 + 1, 1, v13);
      v20 = *((_QWORD *)v13 + 2);
      v19 = *((_QWORD *)v13 + 3);
      v12 = v65;
      v11 = v68;
      if (v20 >= v19 >> 1)
      {
        v23 = sub_1B1C69AE0(v19 > 1, v20 + 1, 1, v13);
        v12 = v65;
        v11 = v68;
        v13 = v23;
      }
      *((_QWORD *)v13 + 2) = v20 + 1;
      v21 = &v13[8 * v20];
      *((_WORD *)v21 + 16) = v17;
      *((float *)v21 + 9) = v16;
    }
LABEL_4:
    ++v3;
  }
  while (v3 != 4);
  v24 = 0;
  v25 = *(_QWORD *)(v8 + 8 * v6);
  v26 = *(_OWORD *)(v10 + 16 * v6);
  v27 = vdupq_lane_s32(*(int32x2_t *)a2.i8, 1);
  v66 = v27;
  v69 = v26;
  do
  {
    v78 = v27;
    v29 = *(float *)((unint64_t)&v78 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    v79 = v26;
    v30 = v29 * *(float *)((unint64_t)&v79 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    if (v30 > 0.0)
    {
      v77 = v25;
      v31 = *(_WORD *)((unint64_t)&v77 & 0xFFFFFFFFFFFFFFF9 | (2 * (v24 & 3)));
      v32 = *((_QWORD *)v13 + 2);
      if (v32)
      {
        if (*((unsigned __int16 *)v13 + 16) == v31)
        {
          v28 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_46;
          goto LABEL_26;
        }
        if (v32 != 1)
        {
          if (*((unsigned __int16 *)v13 + 20) == v31)
          {
            v28 = 1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              goto LABEL_46;
            v28 = 1;
            goto LABEL_26;
          }
          if (v32 != 2)
          {
            v36 = 48;
            v28 = 2;
            while (*(unsigned __int16 *)&v13[v36] != v31)
            {
              ++v28;
              v36 += 8;
              if (v32 == v28)
                goto LABEL_32;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_46:
              v13 = sub_1B1FFF0E0((uint64_t)v13);
LABEL_26:
            v27 = v66;
            v26 = v69;
            *(float *)&v13[8 * v28 + 36] = v30 + *(float *)&v13[8 * v28 + 36];
            goto LABEL_27;
          }
        }
      }
LABEL_32:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1B1C69AE0(0, v32 + 1, 1, v13);
      v34 = *((_QWORD *)v13 + 2);
      v33 = *((_QWORD *)v13 + 3);
      v27 = v66;
      v26 = v69;
      if (v34 >= v33 >> 1)
      {
        v37 = sub_1B1C69AE0(v33 > 1, v34 + 1, 1, v13);
        v27 = v66;
        v26 = v69;
        v13 = v37;
      }
      *((_QWORD *)v13 + 2) = v34 + 1;
      v35 = &v13[8 * v34];
      *((_WORD *)v35 + 16) = v31;
      *((float *)v35 + 9) = v30;
    }
LABEL_27:
    ++v24;
  }
  while (v24 != 4);
  v38 = 0;
  v39 = *(_QWORD *)(v8 + 8 * v7);
  v40 = *(_OWORD *)(v10 + 16 * v7);
  v41 = vdupq_laneq_s32(a2, 2);
  v67 = v41;
  v70 = v40;
  do
  {
    v75 = v41;
    v43 = *(float *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
    v76 = v40;
    v44 = v43 * *(float *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
    if (v44 > 0.0)
    {
      v74 = v39;
      v45 = *(_WORD *)((unint64_t)&v74 & 0xFFFFFFFFFFFFFFF9 | (2 * (v38 & 3)));
      v46 = *((_QWORD *)v13 + 2);
      if (v46)
      {
        if (*((unsigned __int16 *)v13 + 16) == v45)
        {
          v42 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_69;
          goto LABEL_49;
        }
        if (v46 != 1)
        {
          if (*((unsigned __int16 *)v13 + 20) == v45)
          {
            v42 = 1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              goto LABEL_69;
            v42 = 1;
            goto LABEL_49;
          }
          if (v46 != 2)
          {
            v50 = 48;
            v42 = 2;
            while (*(unsigned __int16 *)&v13[v50] != v45)
            {
              ++v42;
              v50 += 8;
              if (v46 == v42)
                goto LABEL_55;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_69:
              v13 = sub_1B1FFF0E0((uint64_t)v13);
LABEL_49:
            v41 = v67;
            v40 = v70;
            *(float *)&v13[8 * v42 + 36] = v44 + *(float *)&v13[8 * v42 + 36];
            goto LABEL_50;
          }
        }
      }
LABEL_55:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1B1C69AE0(0, v46 + 1, 1, v13);
      v48 = *((_QWORD *)v13 + 2);
      v47 = *((_QWORD *)v13 + 3);
      v41 = v67;
      v40 = v70;
      if (v48 >= v47 >> 1)
      {
        v51 = sub_1B1C69AE0(v47 > 1, v48 + 1, 1, v13);
        v41 = v67;
        v40 = v70;
        v13 = v51;
      }
      *((_QWORD *)v13 + 2) = v48 + 1;
      v49 = &v13[8 * v48];
      *((_WORD *)v49 + 16) = v45;
      *((float *)v49 + 9) = v44;
    }
LABEL_50:
    ++v38;
  }
  while (v38 != 4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1B1FFF0E0((uint64_t)v13);
  v52 = *((_QWORD *)v13 + 2);
  v83[0] = v13 + 32;
  v83[1] = v52;
  sub_1B208C608(v83);
  v53 = *((_QWORD *)v13 + 2);
  if (v53 <= 4)
  {
    if (v53)
      goto LABEL_75;
    v57 = 0uLL;
  }
  else
  {
    v53 = 4;
LABEL_75:
    v54 = 0;
    v55 = 0uLL;
    v56 = v13 + 36;
    v57 = 0uLL;
    do
    {
      v58 = (_WORD *)((unint64_t)&v73 & 0xFFFFFFFFFFFFFFF9 | (2 * (v54 & 3)));
      v59 = (_DWORD *)((unint64_t)&v72 & 0xFFFFFFFFFFFFFFF3 | (4 * (v54 & 3)));
      v60 = v54 + 1;
      v61 = *((_WORD *)v56 - 2);
      v62 = *v56;
      v56 += 2;
      v73 = v57;
      *v58 = v61;
      *(_QWORD *)&v57 = v73;
      v72 = v55;
      *v59 = v62;
      v55 = v72;
      v54 = v60;
    }
    while (v53 != v60);
  }
  v71 = v57;
  swift_bridgeObjectRelease();
  return (__n128)v71;
}

void sub_1B2086894(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, float32x4_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  unint64_t v35;
  __n128 v36;
  float32x4_t v37;
  unint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  float32x4_t v44;
  double (*v45)(_QWORD, double);
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v61;
  __n128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  double (*v68)(_QWORD, double);
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v24 = (_QWORD *)(a3[6] + 24 * a2);
  v25 = v24[4];
  v26 = v24[5];
  v27 = v24[6];
  v28 = *a3 + 32;
  v53 = *(float32x4_t *)(v28 + 16 * v26);
  v54 = *(float32x4_t *)(v28 + 16 * v25);
  v52 = *(float32x4_t *)(v28 + 16 * v27);
  *(double *)&v29 = sub_1B20861EC(a2, a5);
  v57 = v29;
  v30 = a3[3];
  v31 = a3[2] + 32;
  v55 = *(float32x4_t *)(v31 + 16 * v25);
  v56 = *(float32x4_t *)(v31 + 16 * v26);
  v58 = *(float32x4_t *)(v31 + 16 * v27);
  v32 = *(float32x2_t *)(v30 + 32 + 8 * v25);
  v33 = *(float32x2_t *)(v30 + 32 + 8 * v26);
  v34 = *(float32x2_t *)(v30 + 32 + 8 * v27);
  v35 = sub_1B208629C(a2, (int32x4_t)a5).n128_u64[0];
  v37 = a5;
  v38 = v35;
  if ((a7 & 1) == 0)
  {
    v39 = vaddq_f32(vaddq_f32(vmulq_n_f32(v54, a5.f32[0]), vmulq_lane_f32(v53, *(float32x2_t *)a5.f32, 1)), vmulq_laneq_f32(v52, a5, 2));
    v40 = a4 + 12 * a1;
    *(_QWORD *)v40 = v39.i64[0];
    *(_DWORD *)(v40 + 8) = v39.i32[2];
  }
  if ((a10 & 1) != 0)
  {
    v41 = a17;
    if ((a13 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    v43 = a8 + 12 * a1;
    *(_QWORD *)v43 = v57;
    *(_DWORD *)(v43 + 8) = DWORD2(v57);
    v41 = a17;
    if ((a13 & 1) != 0)
    {
LABEL_5:
      v42 = a20;
      if ((v41 & 1) != 0)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  v44 = vaddq_f32(vaddq_f32(vmulq_n_f32(v55, a5.f32[0]), vmulq_lane_f32(v56, *(float32x2_t *)a5.f32, 1)), vmulq_laneq_f32(v58, a5, 2));
  v45 = *(double (**)(_QWORD, double))(a14 + 56);
  if (v45 != (double (*)(_QWORD, double))1)
  {
    v61 = v44;
    v63 = v36;
    v46 = *(_QWORD *)(a14 + 64);
    v47 = COERCE_DOUBLE(vadd_f32(vadd_f32(vmul_n_f32(v32, v37.f32[0]), vmul_lane_f32(v33, *(float32x2_t *)v37.f32, 1)), vmul_laneq_f32(v34, v37, 2)));
    v48 = *(_QWORD *)(a14 + 48);
    v49 = *(_QWORD *)(a14 + 40);
    v50 = *(_OWORD *)(a14 + 24);
    v64 = *(_QWORD *)(a14 + 16);
    v65 = v50;
    v66 = v49;
    v67 = v48;
    v68 = v45;
    v69 = v46;
    *(double *)v51.i64 = v45(&v64, v47);
    v36 = v63;
    v44 = vmulq_f32(v61, v51);
  }
  *(float32x4_t *)(a11 + 16 * a1) = v44;
  v42 = a20;
  if ((v41 & 1) != 0)
  {
LABEL_6:
    if ((v42 & 1) != 0)
      return;
    goto LABEL_7;
  }
LABEL_13:
  *(_QWORD *)(a15 + 8 * a1) = v38;
  if ((v42 & 1) != 0)
    return;
LABEL_7:
  *(__n128 *)(a18 + 16 * a1) = v36;
}

char *sub_1B2086AD0()
{
  uint64_t v0;
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  ValueMetadata *v22;
  _UNKNOWN **v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v1 = sub_1B1C62F18(0, 4, 0, MEMORY[0x1E0DEE9D8]);
  v2 = v1;
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v4 = *((_QWORD *)v1 + 2);
    v3 = *((_QWORD *)v1 + 3);
    if (v4 >= v3 >> 1)
      v2 = sub_1B1C62F18(v3 > 1, v4 + 1, 1, v1);
    *((_QWORD *)v2 + 2) = v4 + 1;
    v5 = &v2[16 * v4];
    *((_QWORD *)v5 + 4) = &type metadata for Position;
    *((_QWORD *)v5 + 5) = &off_1E63C2398;
    if ((*(_BYTE *)(v0 + 25) & 1) == 0)
    {
LABEL_3:
      if ((*(_BYTE *)(v0 + 26) & 1) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(v0 + 25) & 1) == 0)
  {
    goto LABEL_3;
  }
  v7 = *((_QWORD *)v2 + 2);
  v6 = *((_QWORD *)v2 + 3);
  if (v7 >= v6 >> 1)
    v2 = sub_1B1C62F18(v6 > 1, v7 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v7 + 1;
  v8 = &v2[16 * v7];
  *((_QWORD *)v8 + 4) = &type metadata for Color;
  *((_QWORD *)v8 + 5) = &off_1E63BA190;
  if ((*(_BYTE *)(v0 + 26) & 1) == 0)
  {
LABEL_4:
    if ((*(_BYTE *)(v0 + 27) & 1) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_13:
  v10 = *((_QWORD *)v2 + 2);
  v9 = *((_QWORD *)v2 + 3);
  if (v10 >= v9 >> 1)
    v2 = sub_1B1C62F18(v9 > 1, v10 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v10 + 1;
  v11 = &v2[16 * v10];
  *((_QWORD *)v11 + 4) = &type metadata for Velocity;
  *((_QWORD *)v11 + 5) = &off_1E63C30D0;
  if ((*(_BYTE *)(v0 + 27) & 1) == 0)
  {
LABEL_5:
    if ((*(_BYTE *)(v0 + 28) & 1) == 0)
      return v2;
LABEL_19:
    swift_retain();
    v15 = sub_1B1D171AC(*(_QWORD *)v0);
    swift_release();
    if (v15)
    {
      if (*(_QWORD *)(v15 + 16) && (v16 = sub_1B1DC3B00(1702521203, 0xE400000000000000), (v17 & 1) != 0))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 32 * v16 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18 == 30)
        {
          v26 = *((_QWORD *)v2 + 2);
          v25 = *((_QWORD *)v2 + 3);
          if (v26 >= v25 >> 1)
            v2 = sub_1B1C62F18(v25 > 1, v26 + 1, 1, v2);
          *((_QWORD *)v2 + 2) = v26 + 1;
          v21 = &v2[16 * v26];
          v22 = &type metadata for Scale3;
          v23 = &off_1E63BC558;
          goto LABEL_30;
        }
        if (v18 == 29)
        {
          v28 = *((_QWORD *)v2 + 2);
          v27 = *((_QWORD *)v2 + 3);
          if (v28 >= v27 >> 1)
            v2 = sub_1B1C62F18(v27 > 1, v28 + 1, 1, v2);
          *((_QWORD *)v2 + 2) = v28 + 1;
          v21 = &v2[16 * v28];
          v22 = &type metadata for Scale2;
          v23 = &off_1E63BC3F0;
          goto LABEL_30;
        }
        if (v18 != 28)
          return v2;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    v20 = *((_QWORD *)v2 + 2);
    v19 = *((_QWORD *)v2 + 3);
    if (v20 >= v19 >> 1)
      v2 = sub_1B1C62F18(v19 > 1, v20 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v20 + 1;
    v21 = &v2[16 * v20];
    v22 = &type metadata for Scale1;
    v23 = &off_1E63BC288;
LABEL_30:
    *((_QWORD *)v21 + 4) = v22;
    *((_QWORD *)v21 + 5) = v23;
    return v2;
  }
LABEL_16:
  v13 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  if (v13 >= v12 >> 1)
    v2 = sub_1B1C62F18(v12 > 1, v13 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v13 + 1;
  v14 = &v2[16 * v13];
  *((_QWORD *)v14 + 4) = &type metadata for Orientation;
  *((_QWORD *)v14 + 5) = &off_1E6371540;
  if ((*(_BYTE *)(v0 + 28) & 1) != 0)
    goto LABEL_19;
  return v2;
}

uint64_t sub_1B2086E0C()
{
  return type metadata accessor for PointCacheEmitter.System();
}

uint64_t sub_1B2086E28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2086E60 + 4 * byte_1B22B76D1[a1]))(0x636143746E696F70, 0xEA00000000006568);
}

uint64_t sub_1B2086E60()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B2086E84()
{
  return 0x5074697265686E69;
}

uint64_t sub_1B2086EA8()
{
  return 0x4374697265686E69;
}

uint64_t sub_1B2086EC8()
{
  return 0x5674697265686E69;
}

unint64_t sub_1B2086EEC()
{
  return 0xD000000000000012;
}

uint64_t sub_1B2086F2C()
{
  return 0x72546E6F69746F6DLL;
}

uint64_t sub_1B2086F50()
{
  return 0x5374697265686E69;
}

uint64_t sub_1B2086F70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2086FA8 + 4 * byte_1B22B76DB[a1]))(0x636143746E696F70, 0xEA00000000006568);
}

uint64_t sub_1B2086FA8()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B2086FCC()
{
  return 0x5074697265686E69;
}

uint64_t sub_1B2086FF0()
{
  return 0x4374697265686E69;
}

uint64_t sub_1B2087010()
{
  return 0x5674697265686E69;
}

unint64_t sub_1B2087034()
{
  return 0xD000000000000012;
}

uint64_t sub_1B2087074()
{
  return 0x72546E6F69746F6DLL;
}

uint64_t sub_1B2087098()
{
  return 0x5374697265686E69;
}

uint64_t sub_1B20870B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t, uint64_t);

  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8);
  v5(v2, 0, ObjectType, a2);
  return v5(v2 + 8, 0, ObjectType, a2);
}

double sub_1B2087120@<D0>(uint64_t a1@<X8>)
{
  __int128 v1;
  double result;

  *(_QWORD *)&v1 = 0xFFFFFFFFLL;
  *((_QWORD *)&v1 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)a1 = v1;
  *(_QWORD *)(a1 + 16) = 0x400000003F800000;
  *(_QWORD *)&result = 65793;
  *(_DWORD *)(a1 + 24) = 65793;
  *(_WORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1B208714C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B2086F70(*a1);
  v5 = v4;
  if (v3 == sub_1B2086F70(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B20871D4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B2086E28(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2087234()
{
  unsigned __int8 *v0;

  sub_1B2086E28(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2087274()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B2086E28(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20872D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B208F31C();
  *a1 = result;
  return result;
}

uint64_t sub_1B20872FC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B2086E28(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2087324()
{
  unsigned __int8 *v0;

  return sub_1B2086F70(*v0);
}

uint64_t sub_1B208732C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B208F31C();
  *a1 = result;
  return result;
}

uint64_t sub_1B2087350()
{
  sub_1B2093070();
  return sub_1B222A1D4();
}

uint64_t sub_1B2087378()
{
  sub_1B2093070();
  return sub_1B222A1E0();
}

uint64_t sub_1B20873A0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF62F18, (uint64_t (*)(void))sub_1B2093070, (uint64_t)&type metadata for PointCacheEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2093070();
  sub_1B222A180();
  v14 = *v3;
  v13 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v2)
  {
    v14 = v3[2];
    v13 = 1;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    LOBYTE(v14) = 2;
    sub_1B222991C();
    LOBYTE(v14) = 3;
    sub_1B222991C();
    LOBYTE(v14) = 4;
    sub_1B222991C();
    LOBYTE(v14) = 5;
    sub_1B222991C();
    v14 = v3[1];
    v13 = 6;
    sub_1B2229958();
    LOBYTE(v14) = *((_BYTE *)v3 + 29);
    v13 = 7;
    sub_1B1A71890();
    sub_1B2229958();
    LOBYTE(v14) = 8;
    sub_1B2229934();
    LOBYTE(v14) = 9;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B2087694@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  sub_1B2092C88(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B20876D8(_QWORD *a1)
{
  return sub_1B20873A0(a1);
}

uint64_t sub_1B20876EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  const float *v84;
  float32x4_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char *v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  char *v107;
  __int128 v108;
  int v109;
  uint64_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float v132;
  float32x4_t v133;
  float v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v140;
  int8x16_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  char *v147;
  __int128 v148;
  float v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  uint64_t v153;
  int32x2_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  uint64_t v158;
  int8x16_t *v159;
  char *v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  int8x16_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char v172;
  char v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  char v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t *v200;
  float32x2_t *v201;
  float32x4_t *v202;
  float32x2_t *v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  char v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  int8x16_t v229;
  float32x4_t v230;
  int8x16_t v231;
  float32x4_t v232;
  float32x4_t v233;
  __int32 v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  uint64_t v239;
  _OWORD *v240;
  char *v241;
  __int128 v242;
  float32x2_t v243;
  float32x2_t v244;
  char v245;
  uint64_t v246;
  char *v247;
  char *v248;
  float v249;
  uint64_t v250;
  char v251;
  int v252;
  char v253;
  uint64_t v254;
  float32x4_t *v255;
  float32x4_t *v256;
  float32x4_t *v257;
  float32x4_t v258;
  int8x16_t v263;
  uint64_t v264;
  float32x2_t v265;
  float32x2_t v266;
  float32x2_t v267;
  unsigned __int32 v268;
  float32x4_t v269;
  int8x16_t v270;
  float32x4_t v271;
  uint64_t v272;
  float32x4_t v273;
  uint16x4_t v274;
  uint64_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t *v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  uint64_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t *v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  uint32x4_t v295;
  int64x2_t v296;
  int64x2_t v297;
  uint64_t v298;
  uint64_t v299;
  float32x4_t *v300;
  __int32 v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t *v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  const float *v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  uint64_t v323;
  float32x4_t *v324;
  uint64_t v325;
  uint64_t v326;
  float v327;
  float32x4_t v328;
  float v329;
  float32x4_t v330;
  float32x4_t *v331;
  float32x4_t v332;
  float32x4_t v333;
  float v334;
  float32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  int32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  int32x4_t v350;
  float32x4_t v351;
  float v352;
  int8x16_t v353;
  float v354;
  float v355;
  float v356;
  float32x2_t v358;
  float v359;
  int32x2_t v360;
  float v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  float32x4_t *v365;
  float32x4_t *v366;
  float32x4_t *v367;
  int8x16_t v369;
  float32x4_t v370;
  uint64_t v371;
  float32x4_t v372;
  uint16x4_t v373;
  float32x4_t *v374;
  float32x4_t *v375;
  uint32x4_t v376;
  int64x2_t v377;
  int64x2_t v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  int32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  int32x4_t v400;
  float32x4_t v401;
  float v402;
  float v403;
  int8x16_t v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float32x2_t v409;
  float32x2_t v410;
  float32x2_t v411;
  unsigned __int32 v412;
  float32x4_t v413;
  float32x2_t v415;
  float v416;
  float32x4_t v417;
  int32x2_t v418;
  float v419;
  float32x4_t v420;
  char v421;
  float v422;
  uint64_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  __int32 v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  uint64_t v432;
  uint64_t v433;
  char v434;
  float32x4_t *v435;
  char *v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  float32x4_t *v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  float32x4_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  float32x4_t v452;
  uint64_t v453;
  char *v454;
  float32x4_t v455;
  uint64_t v456;
  float32x4_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  _BYTE v462[9];
  _BYTE v463[72];
  _BYTE v464[40];
  float32x4_t v465[4];
  char v466;
  _OWORD v467[2];
  uint64_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  char v472;
  uint64_t v473;
  char v474[8];
  uint64_t v475;
  uint64_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  char v481;

  v4 = v3;
  v7 = a1;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 32);
  ecs_stack_allocator_push_snapshot(v9);
  v10 = sub_1B1D171AC(*(_QWORD *)v3);
  v461 = v11;
  if (!v10)
    return ecs_stack_allocator_pop_snapshot(v9);
  v12 = v10;
  swift_retain();
  sub_1B1E5267C();
  if (v461 < 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ecs_stack_allocator_pop_snapshot(v9);
  }
  v14 = v13;
  v460 = v9;
  v448 = *(unsigned int *)(a3 + 8);
  v450 = v8;
  v445 = *(unsigned int *)(a3 + 12);
  v15 = a2;
  v16 = *(_QWORD *)(v7 + 24);
  v17 = *(_QWORD *)(v7 + 56);
  v456 = *(_QWORD *)(v7 + 48);
  v453 = v15;
  v18 = *(_QWORD *)(v15 + 104);
  if ((*(_BYTE *)(v3 + 25) & 1) != 0)
  {
    if (*(_QWORD *)(v12 + 16))
    {
      v19 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(v12 + 56) + 32 * v19;
        v22 = *(void **)v21;
        v23 = *(_QWORD *)(v21 + 8);
        if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
        {
          swift_unknownObjectRelease();
          v24 = 0;
        }
        else
        {
          v26 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          v27 = v22;
          swift_unknownObjectRelease();
          v24 = &v26[v23];
        }
        v28 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, *(uint64_t **)(v7 + 88), *(_QWORD *)(v7 + 96), *(_QWORD *)(v7 + 104), v450);
        v29 = v17 - v456;
        if (v17 != v456)
        {
          v30 = v16 + v18;
          v31 = (_OWORD *)(v28 + 16 * v456);
          do
          {
            *v31++ = *(_OWORD *)&v24[16 * (v30 % v461)];
            ++v30;
            --v29;
          }
          while (v29);
        }
      }
    }
  }
  if ((*(_BYTE *)(v4 + 28) & 1) != 0 && *(_QWORD *)(v12 + 16))
  {
    v32 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v33 & 1) != 0)
    {
      v34 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 32 * v32);
      v35 = v34[1];
      v458 = v7;
      v36 = v12;
      v37 = v34[2];
      v38 = v34[3];
      v39 = (void *)swift_unknownObjectRetain();
      v40 = v38;
      v12 = v36;
      v7 = v458;
      v41 = sub_1B20831FC(v39, v35, v37, v40);
      LOBYTE(v37) = v42;
      swift_unknownObjectRelease();
      if ((v37 & 1) == 0)
      {
        v43 = sub_1B1B47D58();
        if ((v44 & 1) != 0)
        {
          v80 = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(v458 + 88), *(_QWORD *)(v458 + 96), *(_QWORD *)(v458 + 104), v450);
          v81 = v17 - v456;
          if (v17 != v456)
          {
            v82 = v16 + v18;
            v83 = (float32x4_t *)(v80 + 16 * v456);
            do
            {
              v84 = (const float *)&v41[4 * (v82 % v461)];
              v85 = vld1q_dup_f32(v84);
              v85.i32[3] = 0;
              *v83++ = v85;
              ++v82;
              --v81;
            }
            while (v81);
          }
        }
        else
        {
          v45 = v17 - v456;
          if (v17 != v456)
          {
            v46 = v16 + v18;
            v47 = (_DWORD *)(v43 + 4 * v456);
            do
            {
              *v47++ = *(_DWORD *)&v41[4 * (v46 % v461)];
              ++v46;
              --v45;
            }
            while (v45);
          }
        }
        goto LABEL_44;
      }
    }
    if (!*(_QWORD *)(v12 + 16))
      goto LABEL_44;
    v48 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v49 & 1) != 0)
    {
      v50 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 32 * v48);
      v51 = v50[1];
      v459 = v7;
      v52 = v12;
      v53 = v50[2];
      v54 = v50[3];
      v55 = (void *)swift_unknownObjectRetain();
      v56 = v54;
      v12 = v52;
      v7 = v459;
      v57 = sub_1B2083298(v55, v51, v53, v56);
      LOBYTE(v53) = v58;
      swift_unknownObjectRelease();
      if ((v53 & 1) == 0)
      {
        v59 = sub_1B1B47DC8();
        if ((v60 & 1) != 0)
        {
          v86 = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(v459 + 88), *(_QWORD *)(v459 + 96), *(_QWORD *)(v459 + 104), v450);
          v88 = v17 - v456;
          if (v17 != v456)
          {
            v89 = v16 + v18;
            v90 = (_OWORD *)(v86 + 16 * v456);
            do
            {
              *(_QWORD *)&v87 = *(_QWORD *)&v57[8 * (v89 % v461)];
              *v90++ = v87;
              ++v89;
              --v88;
            }
            while (v88);
          }
        }
        else
        {
          v61 = v17 - v456;
          if (v17 != v456)
          {
            v62 = v16 + v18;
            v63 = (_QWORD *)(v59 + 8 * v456);
            do
            {
              *v63++ = *(_QWORD *)&v57[8 * (v62 % v461)];
              ++v62;
              --v61;
            }
            while (v61);
          }
        }
        goto LABEL_44;
      }
    }
    if (!*(_QWORD *)(v12 + 16))
      goto LABEL_44;
    v64 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v65 & 1) == 0)
      goto LABEL_44;
    v441 = v17;
    v66 = v18;
    v67 = v16;
    v68 = v12;
    v69 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 32 * v64);
    v70 = v69[1];
    v71 = v69[2];
    v72 = v69[3];
    v73 = (void *)swift_unknownObjectRetain();
    v74 = sub_1B2083334(v73, v70, v71, v72);
    LOBYTE(v71) = v75;
    swift_unknownObjectRelease();
    if ((v71 & 1) != 0)
    {
      v12 = v68;
      v16 = v67;
      goto LABEL_70;
    }
    v76 = sub_1B1B47E38();
    v12 = v68;
    if ((v78 & 1) == 0)
    {
      v79 = v441 - v456;
      v16 = v67;
      if (v441 != v456)
      {
        v18 = v66;
        v239 = v16 + v66;
        v240 = (_OWORD *)(v76 + 16 * v456);
        do
        {
          v241 = &v74[12 * (v239 % v461)];
          *(_QWORD *)&v242 = *(_QWORD *)v241;
          DWORD2(v242) = *((_DWORD *)v241 + 2);
          HIDWORD(v242) = v77;
          *v240++ = v242;
          ++v239;
          --v79;
        }
        while (v79);
        goto LABEL_71;
      }
LABEL_70:
      v18 = v66;
LABEL_71:
      v17 = v441;
      goto LABEL_44;
    }
    v142 = sub_1B19F6500(*(_QWORD *)(v7 + 8), v7);
    v144 = v441 - v456;
    v16 = v67;
    v18 = v66;
    v17 = v441;
    if (v441 != v456)
    {
      v145 = v16 + v18;
      v146 = (_OWORD *)(v142 + 16 * v456);
      do
      {
        v147 = &v74[12 * (v145 % v461)];
        *(_QWORD *)&v148 = *(_QWORD *)v147;
        DWORD2(v148) = *((_DWORD *)v147 + 2);
        HIDWORD(v148) = v143;
        *v146++ = v148;
        ++v145;
        --v144;
      }
      while (v144);
    }
  }
LABEL_44:
  if (*(_QWORD *)(v12 + 16) && (v91 = sub_1B1DC3B00(0x797469636F6C6576, 0xE800000000000000), (v92 & 1) != 0))
  {
    v93 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 32 * v91);
    v94 = v93[1];
    v95 = v93[2];
    v96 = v93[3];
    v97 = swift_unknownObjectRetain();
  }
  else
  {
    v97 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
  }
  if ((*(_BYTE *)(v4 + 26) & 1) == 0)
    goto LABEL_87;
  if (v97)
  {
    v98 = (void *)swift_unknownObjectRetain();
    v99 = sub_1B2083334(v98, v94, v95, v96);
    v101 = v100;
    swift_unknownObjectRelease();
    if ((v101 & 1) == 0)
    {
      v102 = sub_1B19F6400(*(_QWORD *)(v7 + 8), v7);
      if ((*(_BYTE *)(v453 + 49) & 1) != 0
        || (v103 = v102,
            sub_1B1D15764((_QWORD *)(v448 | (v445 << 32)), (uint64_t)v462),
            sub_1B1A18378((uint64_t)v462, (uint64_t)&v469, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform),
            v102 = v103,
            (v472 & 1) != 0))
      {
        v104 = v17 - v456;
        if (v17 != v456)
        {
          v105 = v16 + v18;
          v106 = (_OWORD *)(v102 + 16 * v456);
          do
          {
            v107 = &v99[12 * (v105 % v461)];
            *(_QWORD *)&v108 = *(_QWORD *)v107;
            *((_QWORD *)&v108 + 1) = *((unsigned int *)v107 + 2);
            *v106++ = v108;
            ++v105;
            --v104;
          }
          while (v104);
        }
        goto LABEL_86;
      }
      v110 = v17 - v456;
      if (v17 == v456)
      {
LABEL_86:
        sub_1B208CE04(v102, v456, v17, (uint64_t *)(v453 + 8), *(float *)(v4 + 16), *(float *)(v4 + 20));
LABEL_87:
        v109 = 0;
        goto LABEL_88;
      }
      v111 = (int32x4_t)vmulq_f32(v469, v469);
      v112 = (int32x4_t)vmulq_f32(v470, v470);
      v113 = (int32x4_t)vmulq_f32(v471, v471);
      v114 = vzip2q_s32(v111, v113);
      v115 = (float32x4_t)vzip1q_s32(vzip1q_s32(v111, v113), v112);
      v116 = (float32x4_t)vtrn2q_s32(v111, v112);
      v116.i32[2] = v113.i32[1];
      v117 = vaddq_f32((float32x4_t)vzip1q_s32(v114, vdupq_laneq_s32(v112, 2)), vaddq_f32(v115, v116));
      v116.i64[0] = 0x80000000800000;
      v116.i64[1] = 0x80000000800000;
      v118 = (int8x16_t)vcgeq_f32(v116, v117);
      v117.i32[3] = 0;
      v119 = vrsqrteq_f32(v117);
      v120 = vmulq_f32(v119, vrsqrtsq_f32(v117, vmulq_f32(v119, v119)));
      v121 = (int32x4_t)v118;
      v121.i32[3] = 0;
      v122 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v121), (int8x16_t)v117, (int8x16_t)vmulq_f32(v120, vrsqrtsq_f32(v117, vmulq_f32(v120, v120))));
      v123 = vmulq_n_f32(v469, v122.f32[0]);
      v124 = vmulq_lane_f32(v470, *(float32x2_t *)v122.f32, 1);
      v125 = vmulq_laneq_f32(v471, v122, 2);
      v126 = (int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125);
      v127 = (float32x4_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124);
      v128 = (int32x4_t)v123;
      if (v118.i32[0])
      {
        v129 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v126, (int8x16_t)v125, 0xCuLL), vnegq_f32(v124)), v125, (float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v124, 0xCuLL));
        v128 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v129, (int32x4_t)v129), v129, 0xCuLL);
      }
      v130 = (float32x4_t)vuzp1q_s32((int32x4_t)v123, (int32x4_t)v123);
      v131 = v124;
      if (v118.i32[1])
      {
        v126 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v123, 0xCuLL), vnegq_f32(v125)), v123, (float32x4_t)vextq_s8(v126, (int8x16_t)v125, 0xCuLL));
        v131 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), v126, 0xCuLL);
      }
      if (v118.i32[2])
      {
        v118 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v124, 0xCuLL), vnegq_f32(v123)), v124, (float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v123, 0xCuLL));
        v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), v118, 0xCuLL);
      }
      v132 = (float)(*(float *)v128.i32 + v131.f32[1]) + v125.f32[2];
      if (v132 > 0.0)
      {
        v133 = (float32x4_t)vzip2q_s32((int32x4_t)v131, vuzp1q_s32((int32x4_t)v131, (int32x4_t)v125));
        v133.i32[2] = v128.i32[1];
        v134 = sqrtf(v132 + 1.0);
        v135 = (float32x4_t)vtrn2q_s32((int32x4_t)v125, vzip2q_s32((int32x4_t)v125, v128));
        v135.i32[2] = v131.i32[0];
        v137 = vsubq_f32(v133, v135);
        v133.f32[3] = v134;
        v135.f32[3] = v134;
        v136 = vmulq_f32(v133, v135);
        v137.i32[3] = v136.i32[3];
LABEL_68:
        v136.f32[0] = 0.5 / v134;
        v138 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 0);
        goto LABEL_84;
      }
      if (*(float *)v128.i32 < v131.f32[1] || *(float *)v128.i32 < v125.f32[2])
      {
        if (v131.f32[1] <= v125.f32[2])
        {
          v134 = sqrtf((float)((float)(v125.f32[2] + 1.0) - *(float *)v128.i32) - v131.f32[1]);
          *(float32x2_t *)v137.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v128, (int32x4_t)v131), *(float32x2_t *)v125.f32);
          v243 = (float32x2_t)__PAIR64__(v128.u32[1], LODWORD(v134));
          v244 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.f32, 0);
          *(float32x2_t *)v136.f32 = vsub_f32(*(float32x2_t *)v128.i8, v244);
          v244.f32[0] = v134;
          v244.i32[0] = vmul_f32(v243, v244).u32[0];
          v244.i32[1] = v136.i32[1];
          *(float32x2_t *)&v137.u32[2] = v244;
          goto LABEL_68;
        }
        v149 = sqrtf((float)((float)(v131.f32[1] + 1.0) - *(float *)v128.i32) - v125.f32[2]);
        *(int32x2_t *)v118.i8 = vdup_laneq_s32((int32x4_t)v131, 2);
        v140 = v118;
        *(float *)v140.i32 = v149;
        v140.i32[0] = vmul_f32(*(float32x2_t *)v140.i8, (float32x2_t)__PAIR64__(v125.u32[1], LODWORD(v149))).u32[0];
        v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 1);
        v140.i32[1] = vadd_f32(*(float32x2_t *)&v118, *(float32x2_t *)&v125).i32[1];
        v141 = (int8x16_t)vaddq_f32(v127, v131);
        v154 = (int32x2_t)vsubq_f32(v125, (float32x4_t)vdupq_laneq_s32(v128, 2)).u64[0];
        v138 = (float32x4_t)vextq_s8(vextq_s8(v141, v141, 4uLL), v140, 0xCuLL);
        v138.i32[3] = v154.i32[0];
      }
      else
      {
        v149 = sqrtf((float)((float)(*(float *)v128.i32 + 1.0) - v131.f32[1]) - v125.f32[2]);
        v150 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.f32, 0);
        v151 = vadd_f32(*(float32x2_t *)v128.i8, v150);
        v150.f32[0] = v149;
        v138.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v128.u32[1], LODWORD(v149)), v150).u32[0];
        v138.i32[1] = v151.i32[1];
        v152 = (float32x2_t)vzip2q_s32(v128, (int32x4_t)v131).u64[0];
        LODWORD(v153) = vadd_f32(v152, *(float32x2_t *)v125.f32).u32[0];
        v154 = (int32x2_t)vsub_f32(v152, *(float32x2_t *)v125.f32);
        HIDWORD(v153) = v154.i32[1];
        v138.i64[1] = v153;
      }
      *(float *)v154.i32 = 0.5 / v149;
      v137 = (float32x4_t)vdupq_lane_s32(v154, 0);
LABEL_84:
      v155 = vmulq_f32(v137, v138);
      v156 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v155, (int32x4_t)v155), (int8x16_t)v155, 0xCuLL);
      v157 = vnegq_f32(v155);
      v158 = v16 + v18;
      v159 = (int8x16_t *)(v103 + 16 * v456);
      do
      {
        v160 = &v99[12 * (v158 % v461)];
        v130.i64[0] = *(_QWORD *)v160;
        v161 = v130;
        v161.i32[2] = *((_DWORD *)v160 + 2);
        v130.i32[2] = v161.i32[2];
        v162 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v161, (int32x4_t)v161), (int8x16_t)v161, 0xCuLL), v157), v161, v156);
        v163 = (int8x16_t)vaddq_f32(v162, v162);
        v164 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v163, (int32x4_t)v163), v163, 0xCuLL);
        v161.i32[3] = v126.i32[3];
        v165 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v164, (int32x4_t)v164), (int8x16_t)v164, 0xCuLL), v157), v164, v156);
        v126 = (int8x16_t)vaddq_f32(vaddq_f32(v130, vmulq_laneq_f32(v164, v155, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v165, (int32x4_t)v165), v165, 0xCuLL));
        v130.i32[3] = v127.i32[3];
        v126.i32[3] = 0;
        ++v158;
        *v159++ = v126;
        v126.i32[3] = v161.i32[3];
        --v110;
      }
      while (v110);
      goto LABEL_86;
    }
    v109 = 0;
  }
  else
  {
    v109 = 1;
  }
LABEL_88:
  v166 = (void *)sub_1B208CEB0(v12, 0x6E6F697469736F70, 0xE800000000000000);
  if (!v166
    || (v439 = v18,
        v170 = v16,
        v171 = sub_1B2083334(v166, v167, v168, v169),
        v173 = v172,
        swift_unknownObjectRelease(),
        (v173 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v174 = (void *)sub_1B208CEB0(v12, 0x6C616D726F6ELL, 0xE600000000000000);
    if (v174)
    {
      v436 = sub_1B2083334(v174, v175, v176, v177);
      v433 = v178;
      v180 = v179;
      swift_unknownObjectRelease();
      v181 = v180 & 1;
    }
    else
    {
      v436 = 0;
      v433 = 0;
      v181 = 1;
    }
    v434 = v181;
    v437 = (uint64_t)v171;
    v438 = v109;
    v442 = v17;
    if (*(_QWORD *)(v12 + 16) && (v183 = sub_1B1DC3B00(0x7461746E6569726FLL, 0xEB000000006E6F69), (v184 & 1) != 0))
    {
      v185 = v12;
      v186 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 32 * v183);
      v187 = v186[1];
      v188 = v186[2];
      v189 = v186[3];
      v190 = (void *)swift_unknownObjectRetain();
      v191 = sub_1B20833D8(v190, v187, v188, v189);
      v193 = v192;
      LOBYTE(v189) = v194;
      swift_unknownObjectRelease();
      v195 = v189 & 1;
    }
    else
    {
      v185 = v12;
      v191 = 0;
      v193 = 0;
      v195 = 1;
    }
    sub_1B1D15764((_QWORD *)(v448 | (v445 << 32)), (uint64_t)v463);
    v449 = v4;
    sub_1B1D19578(*(_QWORD *)(v4 + 8), (uint64_t)v464);
    sub_1B1A18378((uint64_t)v464, (uint64_t)v467, &qword_1EEF62768, (uint64_t)&type metadata for Skeleton);
    if (*((_QWORD *)&v467[0] + 1))
    {
      v479.i64[0] = v468;
      v477 = (float32x4_t)v467[0];
      v478 = (float32x4_t)v467[1];
      v196 = *(_QWORD *)(v450 + 32);
      ecs_stack_allocator_push_snapshot(v196);
      v473 = v478.i64[0];
      v197 = *(_QWORD *)(v478.i64[0] + 16);
      v198 = (float32x4_t *)ecs_stack_allocator_allocate(v196, v197 << 6, 16);
      v199 = (float32x4_t *)ecs_stack_allocator_allocate(v196, v197 << 6, 16);
      v200 = (uint64_t *)v199;
      if (v197)
      {
        v201 = (float32x2_t *)(v478.i64[1] + 48);
        v202 = v198 + 2;
        v203 = (float32x2_t *)(v479.i64[0] + 48);
        v204 = v199 + 2;
        v182 = v460;
        do
        {
          v205 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v201->f32)), (float32x4_t)xmmword_1B2244DD0, *v201, 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v201->f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v201->f32, 3);
          v206 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v201[2].f32)), (float32x4_t)xmmword_1B2244DD0, v201[2], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v201[2].f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v201[2].f32, 3);
          v207 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v201[4].f32)), (float32x4_t)xmmword_1B2244DD0, v201[4], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v201[4].f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v201[4].f32, 3);
          v202[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v201[-2].f32)), (float32x4_t)xmmword_1B2244DD0, v201[-2], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v201[-2].f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v201[-2].f32, 3);
          v202[-1] = v205;
          *v202 = v206;
          v202[1] = v207;
          v202 += 4;
          v208 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v203->f32)), (float32x4_t)xmmword_1B2244DD0, *v203, 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v203->f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v203->f32, 3);
          v209 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v203[2].f32)), (float32x4_t)xmmword_1B2244DD0, v203[2], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v203[2].f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v203[2].f32, 3);
          v210 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v203[4].f32)), (float32x4_t)xmmword_1B2244DD0, v203[4], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v203[4].f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v203[4].f32, 3);
          v204[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)v203[-2].f32)), (float32x4_t)xmmword_1B2244DD0, v203[-2], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)v203[-2].f32, 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)v203[-2].f32, 3);
          v204[-1] = v208;
          v201 += 8;
          *v204 = v209;
          v204[1] = v210;
          v204 += 4;
          v203 += 8;
          --v197;
        }
        while (v197);
        if (!*(_QWORD *)(v185 + 16))
          goto LABEL_116;
      }
      else
      {
        v182 = v460;
        if (!*(_QWORD *)(v185 + 16))
        {
LABEL_116:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_117;
        }
      }
      v212 = sub_1B1DC3B00(0x646E49746E696F6ALL, 0xEC00000073656369);
      if ((v213 & 1) == 0)
        goto LABEL_116;
      v446 = v200;
      v451 = (uint64_t *)v198;
      v214 = (_QWORD *)(*(_QWORD *)(v185 + 56) + 32 * v212);
      v215 = v214[1];
      v216 = v214[2];
      v217 = v214[3];
      v218 = (void *)swift_unknownObjectRetain();
      v443 = sub_1B2083504(v218, v215, v216, v217);
      LOBYTE(v215) = v219;
      swift_unknownObjectRelease();
      if ((v215 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v182 = v460;
        goto LABEL_117;
      }
      v182 = v460;
      if (!*(_QWORD *)(v185 + 16))
        goto LABEL_116;
      v220 = sub_1B1DC3B00(0x696557746E696F6ALL, 0xEC00000073746867);
      if ((v221 & 1) == 0)
        goto LABEL_116;
      v222 = *(_QWORD *)(v185 + 56) + 32 * v220;
      v223 = *(void **)v222;
      v224 = *(_QWORD *)(v222 + 8);
      v225 = *(_QWORD *)(v222 + 16);
      v226 = *(_QWORD *)(v222 + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v454 = sub_1B20833D8(v223, v224, v225, v226);
      LOBYTE(v224) = v227;
      v182 = v460;
      swift_unknownObjectRelease();
      if ((v224 & 1) != 0)
      {
LABEL_117:
        ecs_stack_allocator_pop_snapshot(v196);
        swift_release();
        swift_unknownObjectRelease();
        sub_1B1B4D278((uint64_t)&v477, (uint64_t)v474, &qword_1EEF60FC8, (uint64_t (*)(uint64_t))type metadata accessor for SkeletonData);
        sub_1B19ED720((uint64_t)v474);
        v475 = v477.i64[1];
        sub_1B1B28C6C((uint64_t)&v475);
        sub_1B1B28C6C((uint64_t)&v473);
        v476 = v478.i64[1];
        sub_1B1B28C6C((uint64_t)&v476);
        v465[0].i64[0] = v479.i64[0];
        sub_1B1B28C6C((uint64_t)v465);
        return ecs_stack_allocator_pop_snapshot(v182);
      }
      v228 = *(_QWORD *)(v7 + 8);
      v444 = sub_1B19F629C(v228, v7);
      if (v438)
        v423 = sub_1B19F6400(v228, v7);
      else
        v423 = 0;
      v245 = *(_BYTE *)(v449 + 27);
      if ((v245 & 1) != 0)
        v246 = sub_1B19F623C(v228, v7);
      else
        v246 = 0;
      v247 = v443;
      v248 = v454;
      v249 = *(float *)(v449 + 32) / v14;
      if (((v438 & 1) != 0 || (*(_BYTE *)(v449 + 24) & 1) != 0) && v249 > 0.0)
      {
        v250 = v17 - v456;
        if (v17 != v456)
        {
          v251 = *(_BYTE *)(v449 + 24);
          v252 = *(unsigned __int8 *)(v449 + 29);
          if ((v245 & 1) != 0)
            v253 = v434;
          else
            v253 = 1;
          v254 = v170 + v439;
          v255 = (float32x4_t *)(v444 + 16 * v456);
          v256 = (float32x4_t *)(v423 + 16 * v456);
          v257 = (float32x4_t *)(v246 + 16 * v456);
          v258 = 0uLL;
          __asm { FMOV            V25.4S, #1.0 }
          v231.i32[0] = 1.0;
          v263.i64[0] = 0x8000000080000000;
          v263.i64[1] = 0x8000000080000000;
          v264 = v456;
          v422 = *(float *)(v449 + 32) / v14;
          v421 = v253;
          v420 = _Q25;
          do
          {
            v272 = v254 % v461;
            v273 = *(float32x4_t *)&v248[16 * (v254 % v461)];
            v274 = *(uint16x4_t *)&v247[8 * (v254 % v461)];
            v275 = (uint64_t)v274.i16[0] << 6;
            v276 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275), v273.f32[0]), v258);
            v277 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275 + 16), v273.f32[0]), v258);
            v278 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275 + 32), v273.f32[0]), v258);
            v279 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275 + 48), v273.f32[0]), v258);
            v280 = (float32x4_t *)((char *)v446 + v275);
            v281 = v280[3];
            v282 = vaddq_f32(vmulq_n_f32(*v280, v273.f32[0]), v258);
            v283 = vaddq_f32(vmulq_n_f32(v280[1], v273.f32[0]), v258);
            v284 = vaddq_f32(vmulq_n_f32(v280[2], v273.f32[0]), v258);
            v285 = (uint64_t)v274.i16[1] << 6;
            v286 = vaddq_f32(v276, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285), *(float32x2_t *)v273.f32, 1));
            v287 = vaddq_f32(v277, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285 + 16), *(float32x2_t *)v273.f32, 1));
            v288 = vaddq_f32(v278, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285 + 32), *(float32x2_t *)v273.f32, 1));
            v289 = vaddq_f32(v279, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285 + 48), *(float32x2_t *)v273.f32, 1));
            v290 = (float32x4_t *)((char *)v446 + v285);
            v291 = v290[3];
            v292 = vaddq_f32(v282, vmulq_lane_f32(*v290, *(float32x2_t *)v273.f32, 1));
            v293 = vaddq_f32(v283, vmulq_lane_f32(v290[1], *(float32x2_t *)v273.f32, 1));
            v294 = vaddq_f32(v284, vmulq_lane_f32(v290[2], *(float32x2_t *)v273.f32, 1));
            v295 = vmovl_u16(v274);
            v296.i64[0] = v295.u32[2];
            v296.i64[1] = v295.u32[3];
            v297 = vshrq_n_s64(vshlq_n_s64(v296, 0x30uLL), 0x30uLL);
            v298 = v297.i64[1];
            v299 = v297.i64[0] << 6;
            v300 = (float32x4_t *)&v451[8 * v297.i64[0]];
            v301 = v233.i32[3];
            v302 = vaddq_f32(v286, vmulq_laneq_f32(*v300, v273, 2));
            v303 = (float32x4_t *)((char *)v446 + v299);
            v304 = vaddq_f32(v292, vmulq_laneq_f32(*v303, v273, 2));
            v305 = vaddq_f32(v293, vmulq_laneq_f32(v303[1], v273, 2));
            v306 = vaddq_f32(v294, vmulq_laneq_f32(v303[2], v273, 2));
            v307 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v281, v273.f32[0]), v258), vmulq_lane_f32(v291, *(float32x2_t *)v273.f32, 1)), vmulq_laneq_f32(v303[3], v273, 2));
            v298 <<= 6;
            v308 = vaddq_f32(v302, vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298), v273, 3));
            v309 = vaddq_f32(vaddq_f32(v287, vmulq_laneq_f32(v300[1], v273, 2)), vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298 + 16), v273, 3));
            v310 = vaddq_f32(vaddq_f32(v288, vmulq_laneq_f32(v300[2], v273, 2)), vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298 + 32), v273, 3));
            v311 = vaddq_f32(vaddq_f32(v289, vmulq_laneq_f32(v300[3], v273, 2)), vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298 + 48), v273, 3));
            v312 = (float32x4_t *)((char *)v446 + v298);
            v313 = vmulq_laneq_f32(*v312, v273, 3);
            v314 = vmulq_laneq_f32(v312[1], v273, 3);
            v315 = vmulq_laneq_f32(v312[2], v273, 3);
            v316 = vmulq_laneq_f32(v312[3], v273, 3);
            v317 = vaddq_f32(v304, v313);
            v318 = (const float *)(v437 + 12 * (v254 % v461));
            v319 = vld1q_dup_f32(v318++);
            v320 = vaddq_f32(v307, v316);
            v307.i32[0] = *(_DWORD *)(v437 + 12 * (v254 % v461) + 8);
            v321 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v320, vaddq_f32(v306, v315), v307.f32[0]), vaddq_f32(v305, v314), *v318), v317, v319);
            v233 = v321;
            v233.i32[3] = v301;
            v322 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v311, v310, v307.f32[0]), v309, *v318), v308, v319);
            if ((v251 & 1) != 0)
            {
              if (v252)
              {
                if (v252 == 1)
                {
                  v323 = v250;
                  v324 = v255;
                  v440 = v256;
                  v435 = v257;
                  v432 = v264;
                  v431 = v232;
                  v429 = v322;
                  v430 = v233;
                  v427 = v310;
                  v428 = v234;
                  v425 = v308;
                  v426 = v309;
                  v424 = v321;
                  v325 = sub_1B2130F84();
                  v308 = v425;
                  v309 = v426;
                  v310 = v427;
                  v234 = v428;
                  v322 = v429;
                  v233 = v430;
                  v232 = v431;
                  v264 = v432;
                  v263.i64[0] = 0x8000000080000000;
                  v263.i64[1] = 0x8000000080000000;
                  v231.i32[0] = 1.0;
                  _Q25 = v420;
                  v258 = 0uLL;
                  v256 = v440;
                  v255 = v324;
                  v253 = v421;
                  v250 = v323;
                  v249 = v422;
                  v248 = v454;
                  v326 = v325 & 0xFFFFFF;
                  v257 = v435;
                  v327 = (float)(unint64_t)v326 * 0.000000059605;
                  v328 = vsubq_f32(v429, v424);
                  v329 = vmuls_lane_f32(v327, v328, 2);
                  *(float32x2_t *)v330.f32 = vadd_f32(*(float32x2_t *)v424.f32, vmul_n_f32(*(float32x2_t *)v328.f32, v327));
                  v330.f32[2] = v424.f32[2] + v329;
                  v247 = v443;
                  v331 = (float32x4_t *)(v444 + 16 * v432);
                  v332 = vaddq_f32(*v324, v330);
                }
                else
                {
                  v316.f32[0] = (float)(1.0 / (float)v461) * (float)v272;
                  v333 = vsubq_f32(v322, v321);
                  v334 = vmuls_lane_f32(v316.f32[0], v333, 2);
                  *(float32x2_t *)v316.f32 = vadd_f32(*(float32x2_t *)v321.f32, vmul_n_f32(*(float32x2_t *)v333.f32, v316.f32[0]));
                  v316.f32[2] = v321.f32[2] + v334;
                  v331 = (float32x4_t *)(v444 + 16 * v264);
                  v332 = vaddq_f32(v316, *v255);
                }
              }
              else
              {
                v332 = v233;
                v331 = v255;
              }
              v332.i32[3] = v231.i32[0];
              *v331 = v332;
            }
            v322.i32[3] = v234;
            if (v438)
            {
              v335 = vmulq_n_f32(vsubq_f32(v322, v233), v249);
              v335.i32[3] = v232.i32[3];
              v232 = v335;
              v335.i32[3] = 0;
              *v256 = v335;
            }
            if ((v253 & 1) != 0)
              goto LABEL_141;
            v336 = (int32x4_t)vmulq_f32(v308, v308);
            v337 = (int32x4_t)vmulq_f32(v309, v309);
            v338 = (int32x4_t)vmulq_f32(v310, v310);
            v339 = vzip2q_s32(v336, v338);
            v340 = (float32x4_t)vzip1q_s32(vzip1q_s32(v336, v338), v337);
            v341 = (float32x4_t)vtrn2q_s32(v336, v337);
            v341.i32[2] = v338.i32[1];
            v342 = vaddq_f32((float32x4_t)vzip1q_s32(v339, vdupq_laneq_s32(v337, 2)), vaddq_f32(v340, v341));
            v343 = vceqzq_f32(v342);
            v343.i32[3] = 0;
            v344 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v343), (int8x16_t)v342, (int8x16_t)vdivq_f32(_Q25, v342));
            v345 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vmulq_laneq_f32(v310, v344, 2), *(float *)&v436[12 * v272 + 8]), vmulq_lane_f32(v309, *(float32x2_t *)v344.f32, 1), *(float *)&v436[12 * v272 + 4]), vmulq_n_f32(v308, v344.f32[0]), *(float *)&v436[12 * v272]);
            v346 = vmulq_f32(v345, v345);
            v346.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v346, 2), vaddq_f32(v346, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v346.f32, 1))).u64[0];
            v347 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v346.f32, 0);
            v347.i32[3] = 0;
            v348 = vrsqrteq_f32(v347);
            v349 = vmulq_f32(v348, vrsqrtsq_f32(v347, vmulq_f32(v348, v348)));
            v353 = (int8x16_t)vmulq_f32(v345, vmulq_f32(v349, vrsqrtsq_f32(v347, vmulq_f32(v349, v349))));
            v350 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v346.f32[0] != 0.0)), 0x1FuLL));
            v350.i32[3] = 0;
            v270 = (int8x16_t)vcltzq_s32(v350);
            v351 = (float32x4_t)vbslq_s8(v270, v353, (int8x16_t)v345);
            v349.i32[0] = v351.i32[2];
            v337.i32[0] = vbslq_s8(v263, v231, (int8x16_t)v349).i32[0];
            *(float *)v270.i32 = v351.f32[1] / (float)(fabsf(v351.f32[2]) + *(float *)v231.i32);
            *(float *)v339.i32 = vmuls_lane_f32(*(float *)v270.i32, *(float32x2_t *)v351.f32, 1);
            *(float *)v270.i32 = -(float)(v351.f32[0] * *(float *)v270.i32);
            v352 = v351.f32[2] + (float)(*(float *)v337.i32 * *(float *)v339.i32);
            *(float *)v353.i32 = *(float *)v337.i32 * *(float *)v270.i32;
            v354 = *(float *)v231.i32 - *(float *)v339.i32;
            v355 = vmuls_lane_f32(-*(float *)v337.i32, *(float32x2_t *)v351.f32, 1);
            v356 = v351.f32[2] + (float)(v352 + v354);
            if (v356 > 0.0)
            {
              v265 = (float32x2_t)vrev64_s32(*(int32x2_t *)v351.f32);
              *(int32x2_t *)v269.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v351.f32, *(float32x2_t *)v351.f32), 0);
              v269.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v265.u32[1], LODWORD(v355)), v265).u32[0];
              v266 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v356 + *(float *)v231.i32)), v353.u32[0]);
              v267 = vmul_f32(v266, v266);
              v266.i32[0] = v270.i32[0];
              v268 = vsub_f32(*(float32x2_t *)v353.i8, v266).u32[0];
              v270.i32[1] = v267.i32[1];
              v269.i64[1] = v270.i64[0];
              *(float *)v270.i32 = 0.5 / v266.f32[1];
            }
            else
            {
              if (v352 >= v354 && v352 >= v351.f32[2])
              {
                v359 = sqrtf((float)((float)(v352 + *(float *)v231.i32) - v354) - v351.f32[2]);
                v271.f32[0] = v359 * v359;
                v271.f32[1] = *(float *)v270.i32 + *(float *)v353.i32;
                v360 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v355), v351.u32[0]), *(float32x2_t *)v351.f32);
LABEL_160:
                *(int32x2_t *)&v271.u32[2] = v360;
                *(float *)v360.i32 = 0.5 / v359;
                v269 = (float32x4_t)vdupq_lane_s32(v360, 0);
                goto LABEL_140;
              }
              if (v354 > v351.f32[2])
              {
                v359 = sqrtf((float)((float)(v354 + *(float *)v231.i32) - v352) - v351.f32[2]);
                v271.f32[0] = *(float *)v270.i32 + *(float *)v353.i32;
                v358 = (float32x2_t)vrev64_s32(*(int32x2_t *)v351.f32);
                v271.f32[1] = v359 * v359;
                v360 = (int32x2_t)vadd_f32(v358, (float32x2_t)__PAIR64__(v358.u32[1], LODWORD(v355)));
                goto LABEL_160;
              }
              v361 = sqrtf((float)((float)(v351.f32[2] + *(float *)v231.i32) - v352) - v354);
              v269.i32[0] = vsubq_f32(v351, v351).u32[0];
              v269.f32[1] = v351.f32[1] + v355;
              v269.f32[2] = v361 * v361;
              v269.f32[3] = *(float *)v353.i32 - *(float *)v270.i32;
              *(float *)v270.i32 = 0.5 / v361;
            }
            v271 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v270.i8, 0);
LABEL_140:
            *v257 = vmulq_f32(v269, v271);
LABEL_141:
            ++v254;
            ++v255;
            ++v256;
            ++v257;
            ++v264;
            --v250;
          }
          while (v250);
        }
LABEL_163:
        v182 = v460;
        if (v438)
          sub_1B208CE04(v423, v456, v442, (uint64_t *)(v453 + 8), *(float *)(v449 + 16), *(float *)(v449 + 20));
        goto LABEL_117;
      }
      v362 = v17 - v456;
      if (v17 == v456)
        goto LABEL_163;
      v363 = *(_BYTE *)(v449 + 24);
      v364 = v170 + v439;
      v365 = (float32x4_t *)(v444 + 16 * v456);
      v366 = (float32x4_t *)(v423 + 16 * v456);
      v367 = (float32x4_t *)(v246 + 16 * v456);
      __asm { FMOV            V1.4S, #1.0 }
      v229.i32[0] = 1.0;
      v369.i64[0] = 0x8000000080000000;
      v369.i64[1] = 0x8000000080000000;
      while (1)
      {
        v371 = v364 % v461;
        v372 = *(float32x4_t *)&v454[16 * (v364 % v461)];
        v373 = *(uint16x4_t *)&v443[8 * (v364 % v461)];
        v374 = (float32x4_t *)&v451[8 * (uint64_t)v373.i16[0]];
        v375 = (float32x4_t *)&v451[8 * (uint64_t)v373.i16[1]];
        v376 = vmovl_u16(v373);
        v377.i64[0] = v376.u32[2];
        v377.i64[1] = v376.u32[3];
        v378 = vshrq_n_s64(vshlq_n_s64(v377, 0x30uLL), 0x30uLL);
        v379 = (float32x4_t *)&v451[8 * v378.i64[0]];
        v380 = (float32x4_t *)&v451[8 * v378.i64[1]];
        v381 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(*v374, v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(*v375, *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(*v379, v372, 2)), vmulq_laneq_f32(*v380, v372, 3));
        v382 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v374[1], v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(v375[1], *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(v379[1], v372, 2)), vmulq_laneq_f32(v380[1], v372, 3));
        v383 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v374[2], v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(v375[2], *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(v379[2], v372, 2)), vmulq_laneq_f32(v380[2], v372, 3));
        if ((v363 & 1) != 0)
        {
          v384 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v374[3], v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(v375[3], *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(v379[3], v372, 2)), vmulq_laneq_f32(v380[3], v372, 3)), v383, *(float *)(v437 + 12 * v371 + 8)), v382, *(float *)(v437 + 12 * v371 + 4)), v381, *(float *)(v437 + 12 * v371));
          v384.i32[3] = 1.0;
          *v365 = v384;
        }
        if (!(((v245 & 1) == 0) & ~(_BYTE)v438 | v434 & 1))
          break;
        v370 = v230;
LABEL_167:
        ++v364;
        ++v365;
        ++v366;
        ++v367;
        v230 = v370;
        if (!--v362)
          goto LABEL_163;
      }
      v385 = (int32x4_t)vmulq_f32(v381, v381);
      v386 = (int32x4_t)vmulq_f32(v382, v382);
      v387 = (int32x4_t)vmulq_f32(v383, v383);
      v388 = vzip2q_s32(v385, v387);
      v389 = (float32x4_t)vzip1q_s32(vzip1q_s32(v385, v387), v386);
      v390 = (float32x4_t)vtrn2q_s32(v385, v386);
      v390.i32[2] = v387.i32[1];
      v391 = vaddq_f32((float32x4_t)vzip1q_s32(v388, vdupq_laneq_s32(v386, 2)), vaddq_f32(v389, v390));
      v392 = vceqzq_f32(v391);
      v392.i32[3] = 0;
      v393 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v392), (int8x16_t)v391, (int8x16_t)vdivq_f32(_Q1, v391));
      v394 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vmulq_laneq_f32(v383, v393, 2), *(float *)&v436[12 * v371 + 8]), vmulq_lane_f32(v382, *(float32x2_t *)v393.f32, 1), *(float *)&v436[12 * v371 + 4]), vmulq_n_f32(v381, v393.f32[0]), *(float *)&v436[12 * v371]);
      v370 = v394;
      v370.i32[3] = v230.i32[3];
      if (v438)
      {
        v395 = v370;
        v395.i32[3] = 0;
        *v366 = v395;
      }
      if ((v245 & 1) == 0)
        goto LABEL_167;
      v396 = vmulq_f32(v394, v394);
      v396.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v396, 2), vaddq_f32(v396, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v396.f32, 1))).u64[0];
      v397 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v396.f32, 0);
      v397.i32[3] = 0;
      v398 = vrsqrteq_f32(v397);
      v399 = vmulq_f32(v398, vrsqrtsq_f32(v397, vmulq_f32(v398, v398)));
      v400 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v396.f32[0] != 0.0)), 0x1FuLL));
      v400.i32[3] = 0;
      v404 = (int8x16_t)vcltzq_s32(v400);
      v401 = (float32x4_t)vbslq_s8(v404, (int8x16_t)vmulq_f32(v394, vmulq_f32(v399, vrsqrtsq_f32(v397, vmulq_f32(v399, v399)))), (int8x16_t)v394);
      v399.i32[0] = v401.i32[2];
      v402 = *(float *)vbslq_s8(v369, v229, (int8x16_t)v399).i32;
      *(float *)v404.i32 = v401.f32[1] / (float)(fabsf(v401.f32[2]) + 1.0);
      v403 = vmuls_lane_f32(*(float *)v404.i32, *(float32x2_t *)v401.f32, 1);
      *(float *)v404.i32 = -(float)(v401.f32[0] * *(float *)v404.i32);
      v405 = v401.f32[2] + (float)(v402 * v403);
      v394.f32[0] = v402 * *(float *)v404.i32;
      v406 = 1.0 - v403;
      v407 = vmuls_lane_f32(-v402, *(float32x2_t *)v401.f32, 1);
      v408 = v401.f32[2] + (float)(v405 + v406);
      if (v408 > 0.0)
      {
        v409 = (float32x2_t)vrev64_s32(*(int32x2_t *)v401.f32);
        *(int32x2_t *)v413.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v401.f32, *(float32x2_t *)v401.f32), 0);
        v413.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v409.u32[1], LODWORD(v407)), v409).u32[0];
        v410 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v408 + 1.0)), v394.u32[0]);
        v411 = vmul_f32(v410, v410);
        v410.i32[0] = v404.i32[0];
        v412 = vsub_f32(*(float32x2_t *)v394.f32, v410).u32[0];
        v404.i32[1] = v411.i32[1];
        v413.i64[1] = v404.i64[0];
        *(float *)v404.i32 = 0.5 / v410.f32[1];
LABEL_185:
        v417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v404.i8, 0);
        goto LABEL_186;
      }
      if (v405 < v406 || v405 < v401.f32[2])
      {
        if (v406 <= v401.f32[2])
        {
          v419 = sqrtf((float)((float)(v401.f32[2] + 1.0) - v405) - v406);
          v401.i32[0] = vsubq_f32(v401, v401).u32[0];
          v413.f32[1] = v401.f32[1] + v407;
          v413.f32[2] = v419 * v419;
          v413.f32[3] = v394.f32[0] - *(float *)v404.i32;
          *(float *)v404.i32 = 0.5 / v419;
          goto LABEL_185;
        }
        v416 = sqrtf((float)((float)(v406 + 1.0) - v405) - v401.f32[2]);
        v417.f32[0] = *(float *)v404.i32 + v394.f32[0];
        v415 = (float32x2_t)vrev64_s32(*(int32x2_t *)v401.f32);
        v417.f32[1] = v416 * v416;
        v418 = (int32x2_t)vadd_f32(v415, (float32x2_t)__PAIR64__(v415.u32[1], LODWORD(v407)));
      }
      else
      {
        v416 = sqrtf((float)((float)(v405 + 1.0) - v406) - v401.f32[2]);
        v417.f32[0] = v416 * v416;
        v417.f32[1] = *(float *)v404.i32 + v394.f32[0];
        v418 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v407), v401.u32[0]), *(float32x2_t *)v401.f32);
      }
      *(int32x2_t *)&v417.u32[2] = v418;
      *(float *)v418.i32 = 0.5 / v416;
      v413 = (float32x4_t)vdupq_lane_s32(v418, 0);
LABEL_186:
      *v367 = vmulq_f32(v413, v417);
      goto LABEL_167;
    }
    v211 = v439 + v170 - v456;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1A18378((uint64_t)v463, (uint64_t)v465, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
    if ((v466 & 1) != 0)
    {
      v479 = 0u;
      v480 = 0u;
      v477 = 0u;
      v478 = 0u;
      v481 = 1;
    }
    else
    {
      v447 = v465[0];
      v452 = v465[1];
      v455 = v465[2];
      v457 = v465[3];
      *(double *)v235.i64 = sub_1B1E52854();
      v477 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v447.f32[0]), v236, *(float32x2_t *)v447.f32, 1), v237, v447, 2), v238, v447, 3);
      v478 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v452.f32[0]), v236, *(float32x2_t *)v452.f32, 1), v237, v452, 2), v238, v452, 3);
      v479 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v455.f32[0]), v236, *(float32x2_t *)v455.f32, 1), v237, v455, 2), v238, v455, 3);
      v480 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v457.f32[0]), v236, *(float32x2_t *)v457.f32, 1), v237, v457, 2), v238, v457, 3);
      v481 = 0;
    }
    sub_1B208CF20((uint64_t)&v477, v4, v7, v211, v461, v437, v438, (uint64_t)v436, v433, v434, v453, (uint64_t)v191, v193, v195);
  }
  swift_release();
  swift_unknownObjectRelease();
  v182 = v460;
  return ecs_stack_allocator_pop_snapshot(v182);
}

uint64_t *sub_1B2089204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69[12];
  _QWORD v70[7];
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _QWORD v77[10];
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v3 = *(_OWORD *)(a3 + 104);
  v75[0] = *(_OWORD *)(a3 + 88);
  v75[1] = v3;
  v76 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v75, 0x200000000, v69);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v69, (uint64_t)v70, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v68 = (unsigned __int16 *)v70[0];
  if (v70[0])
  {
    v56 = v74;
    if (v74 >= 1)
    {
      v55 = v71;
      if (v71)
      {
        v5 = 0;
        v54 = v70[5];
        v53 = v72;
        v6 = *(unsigned __int8 *)(v72 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v7 = v73[4];
        v50 = v73 + 8;
        v67 = v70[0] + 41;
        v52 = v6;
        v82 = v73;
        v51 = v7;
        do
        {
          v8 = (unsigned int *)(v54 + 48 * v5);
          v9 = *v8;
          v10 = v8[1];
          v11 = v8[2];
          v12 = *((_QWORD *)v8 + 2);
          v13 = *((_QWORD *)v8 + 3);
          v14 = *((_QWORD *)v8 + 5);
          v63 = v5;
          v64 = *((_QWORD *)v8 + 4);
          if (v6)
          {
            v15 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          v16 = v82;
          v60 = v82[7];
          v61 = v82[6];
          v59 = v82[8];
          v65 = v82[10];
          v66 = v82[9];
          v17 = v82[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v16[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v16[7] = v18;
          v50[1] = 0;
          v50[2] = 0;
          *v50 = 0;
          swift_release();
          v77[0] = v53;
          v77[1] = v14;
          v62 = v14;
          v77[2] = v16;
          v77[3] = v11;
          v77[4] = (v10 - v9 + v11);
          v77[5] = v56;
          v77[6] = v9;
          v77[7] = v10;
          v77[8] = 0;
          v77[9] = 0;
          v78 = 1;
          v79 = v12;
          v80 = v13;
          v19 = v16;
          v81 = v64;
          sub_1B20876EC((uint64_t)v77, a1, a3);
          v20 = v16[6];
          v21 = v19[8];
          if (!v21)
          {
            v47 = v19[7];
            v48 = (_QWORD *)v19[4];
            v49 = v63;
            goto LABEL_46;
          }
          for (i = 0; i != v21; ++i)
          {
            v24 = (uint64_t *)(v20 + 48 * i);
            v25 = *v24;
            v26 = (void (*)(uint64_t))v24[4];
            v27 = v19[9];
            if (v27)
              v28 = v25 == v27;
            else
              v28 = 0;
            if (v28 || !v68[11])
              goto LABEL_11;
            v29 = v68[9];
            v30 = (_QWORD *)(v67 + v68[8]);
            v31 = v24[2];
            v32 = v30;
            v33 = v29 >> 4;
            v34 = v67;
            if (v29 >= 0x10)
            {
              while (*v32 != v25)
              {
                ++v34;
                v32 += 2;
                if (!--v33)
                  goto LABEL_26;
              }
              v35 = *(unsigned __int8 *)(v34 + v68[10]);
              v36 = v35 > 5;
              v37 = (1 << v35) & 0x23;
              if (v36 || v37 == 0)
              {
LABEL_11:
                v23 = swift_retain();
                v26(v23);
                swift_release();
                goto LABEL_12;
              }
            }
LABEL_26:
            if (swift_conformsToProtocol2())
              v39 = v31;
            else
              v39 = 0;
            if (v39)
            {
              if (v29 < 0x10)
                goto LABEL_11;
              v40 = v30;
              v41 = v29 >> 4;
              v42 = v67;
              while (*v40 != v39)
              {
                ++v42;
                v40 += 2;
                if (!--v41)
                  goto LABEL_39;
              }
              v43 = *(unsigned __int8 *)(v42 + v68[10]);
              v36 = v43 > 5;
              v44 = (1 << v43) & 0x23;
              if (v36 || v44 == 0)
                goto LABEL_11;
LABEL_39:
              v46 = 16 * (v29 >> 4);
              while (*v30 != v39)
              {
                v30 += 2;
                v46 -= 16;
                if (!v46)
                  goto LABEL_11;
              }
            }
LABEL_12:
            v19 = v82;
          }
          v47 = v82[7];
          v20 = v82[6];
          v48 = (_QWORD *)v82[4];
          v49 = v63;
          if ((uint64_t)v82[8] >= 1)
            swift_arrayDestroy();
LABEL_46:
          ecs_stack_allocator_deallocate(v48, v20, 48 * v47);
          v19[6] = v61;
          v19[7] = v60;
          v19[8] = v59;
          v19[9] = v66;
          v19[10] = v65;
          sub_1B1F03804((char *)v62);
          v7 = v51;
          ecs_stack_allocator_pop_snapshot(v51);
          v6 = v52;
          if ((v52 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
          }
          swift_release();
          v5 = v49 + 1;
        }
        while (v5 != v55);
      }
    }
    return sub_1B19ED748(v69);
  }
  return result;
}

uint64_t type metadata accessor for PointCacheEmitter.System()
{
  return objc_opt_self();
}

uint64_t sub_1B20896A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int16x8_t v4;
  unsigned __int32 v5;
  unsigned __int32 v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  int8x16_t v14;
  uint64_t v15;
  __n128 v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  unsigned __int32 v24;
  unsigned __int32 v25;
  int v26;
  int v27;
  unsigned __int32 v28;
  char v29;
  char v30;
  int v31;

  v2 = *a1;
  swift_retain();
  v3 = a1[1];
  swift_retain();
  sub_1B1D17CD4(v3, &v17);
  swift_release();
  if (v20 == 2)
  {
    v5 = 0;
    v6 = 0;
    LOBYTE(v7) = 0;
    LOBYTE(v8) = 0;
    v4.i64[0] = 0x100010001;
    v9 = 0;
    v10 = 0x40000000;
    v11 = 1065353216;
    v12 = -1;
    v13 = -1;
  }
  else
  {
    v9 = v21;
    v11 = v18;
    v10 = v19;
    v13 = v17.n128_u32[2];
    v6 = v17.n128_u32[3];
    v12 = v17.n128_u32[0];
    v5 = v17.n128_u32[1];
    v14 = (int8x16_t)vdupq_n_s64(v20);
    v7 = HIDWORD(v20) & 1;
    v8 = v20 >> 40;
    v4 = (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1B22B8A70)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1B22B8A80))));
    *(int8x8_t *)v4.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v4), (int8x8_t)0x1000100010001);
  }
  v22 = v12;
  v23 = v5;
  v24 = v13;
  v25 = v6;
  v26 = v11;
  v27 = v10;
  v28 = vmovn_s16(v4).u32[0];
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v15 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE95B8(v15, v2, v2, (uint64_t)a1);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B20897EC()
{
  return "PointCacheEmitter.CPU";
}

uint64_t type metadata accessor for PointCacheEmitter.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B2089824()
{
  return "PointCacheEmitter.GPU";
}

uint64_t sub_1B2089838()
{
  return type metadata accessor for PointCacheEmitter.GPUSystem();
}

unint64_t sub_1B2089854()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
    return 0xD000000000000017;
  else
    return 0xD000000000000013;
}

uint64_t sub_1B2089894(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t result;
  char *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  unint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  unsigned __int8 *v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  const char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  __int128 v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  int *v213;
  __int128 v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  unint64_t v222;
  __int128 v223;
  uint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;

  v227 = *MEMORY[0x1E0C80C00];
  sub_1B1B1F358();
  v213 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v212 = (char *)&v194 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_1B222820C();
  v210 = *(char **)(v211 - 8);
  MEMORY[0x1E0C80A78](v211, v10);
  v209 = (char *)&v194 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1B2229070();
  v219 = *(uint64_t **)(v12 - 8);
  v220 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v194 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A0DC90(a1, a2);
  v221 = (uint64_t *)a1;
  v222 = a2;
  sub_1B1E8CE00(0, a1, a2);
  if (!v17)
    goto LABEL_26;
  v18 = v16;
  v19 = v17;
  v20 = sub_1B2228830();
  if (v18 != 0x656863616370 || v19 != 0xE600000000000000)
  {
    v21 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_6;
LABEL_26:
    sub_1B1FA7AB4();
    swift_allocError();
    *v59 = 0;
    v59[1] = 0;
    swift_willThrow();
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)&v223 = v20 + 1;
  sub_1B1E8CE00(v20 + 1, (uint64_t)v221, v222);
  v218 = a3;
  if (!v23)
  {
    v205 = 0;
    v26 = MEMORY[0x1E0DEE9D8];
    goto LABEL_31;
  }
  v24 = v22;
  v25 = v23;
  v205 = 0;
  v26 = MEMORY[0x1E0DEE9D8];
  LODWORD(v217) = *MEMORY[0x1E0CB2398];
  *(_QWORD *)&v214 = v3;
  do
  {
LABEL_8:
    v27 = a3;
    v28 = v223;
    while (1)
    {
      *(_QWORD *)&v223 = v28 + sub_1B2228830() + 1;
      v31 = objc_allocWithZone(MEMORY[0x1E0CB3900]);
      swift_bridgeObjectRetain();
      v32 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v33 = objc_msgSend(v31, sel_initWithString_, v32);

      sub_1B2229058();
      v35 = v34;
      swift_bridgeObjectRelease();
      if (!v35)
        break;
LABEL_9:
      swift_bridgeObjectRelease();

      v28 = v223;
      sub_1B1E8CE00(v223, (uint64_t)v221, v222);
      v24 = v29;
      v25 = v30;
      if (!v30)
      {
        v3 = v214;
        a3 = v27;
        goto LABEL_31;
      }
    }
    sub_1B2229058();
    v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
      sub_1B2229058();
      v39 = v38;
      swift_bridgeObjectRelease();
      if (!v39)
      {
        swift_bridgeObjectRelease();
        v225 = 0;
        v226 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v182 = 0xD000000000000012;
        v183 = "format != binary '";
        goto LABEL_123;
      }
      v41 = v219;
      v40 = v220;
      ((void (*)(char *, _QWORD, uint64_t))v219[13])(v15, v217, v220);
      v42 = sub_1B2229088();
      ((void (*)(char *, uint64_t))v41[1])(v15, v40);
      if ((v42 & 0x100000000) != 0 || *(float *)&v42 != 1.0)
      {
        swift_bridgeObjectRelease();
        v225 = 0;
        v226 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v182 = 0xD000000000000010;
        v183 = "version != 1.0 '";
LABEL_123:
        v225 = (_QWORD *)v182;
        v226 = (unint64_t)(v183 - 32) | 0x8000000000000000;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v184 = (uint64_t)v225;
        v185 = v226;
        sub_1B1FA7AB4();
        swift_allocError();
        *v186 = v184;
        v186[1] = v185;
LABEL_124:
        swift_willThrow();

LABEL_27:
        v60 = (uint64_t)v221;
        return sub_1B1A0DADC(v60, v222);
      }
      goto LABEL_9;
    }
    sub_1B2229058();
    v44 = v43;
    swift_bridgeObjectRelease();
    a3 = v27;
    if (!v44)
    {
      sub_1B2229058();
      v46 = v45;
      swift_bridgeObjectRelease();
      if (v46)
      {
        sub_1B2229058();
        v48 = v47;
        swift_bridgeObjectRelease();
        if (v48)
        {
          swift_bridgeObjectRelease();
          v215 = 8;
          __asm { BR              X8; loc_1B2089D74 }
        }
        swift_bridgeObjectRelease();
        sub_1B1FA7AB4();
        swift_allocError();
        *v190 = v24;
        v190[1] = v25;
        goto LABEL_124;
      }
      swift_bridgeObjectRelease();
      sub_1B2229058();
      v50 = v49;

      swift_bridgeObjectRelease();
      if (v50 || (sub_1B1E8CE00(v223, (uint64_t)v221, v222), v24 = v51, (v25 = v52) == 0))
      {
        v3 = v214;
        break;
      }
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    v54 = v219;
    v53 = v220;
    ((void (*)(char *, _QWORD, uint64_t))v219[13])(v15, v217, v220);
    v205 = sub_1B222907C();
    v56 = v55;
    ((void (*)(char *, uint64_t))v54[1])(v15, v53);
    if ((v56 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v191 = *(_QWORD *)(v214 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
      swift_retain();
      v192 = sub_1B2228E90();
      v225 = 0;
      (*(void (**)(uint64_t, _QWORD **, unint64_t, unint64_t))(*(_QWORD *)v191 + 88))(v192, &v225, 0xD000000000000016, 0x80000001B234A670);
      swift_release();
      sub_1B1FA7AB4();
      swift_allocError();
      *v193 = 0;
      v193[1] = 0;
      goto LABEL_124;
    }

    sub_1B1E8CE00(v223, (uint64_t)v221, v222);
    v24 = v57;
    v25 = v58;
    v3 = v214;
  }
  while (v58);
LABEL_31:
  v195 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v195)
  {
    swift_bridgeObjectRelease();
    v63 = v221;
    return sub_1B1A0DADC((uint64_t)v63, v222);
  }
  v62 = *(char **)(v26 + 16);
  v63 = v221;
  v202 = v26;
  if (!v62)
  {
    swift_retain();
    v73 = v223;
    goto LABEL_76;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v64 = (uint64_t *)(v26 + 40);
  v204 = 0x80000001B2331FD0;
  v208 = (char *)0x80000001B234A630;
  v207 = 0x80000001B234A650;
  v206 = xmmword_1B226D240;
  while (2)
  {
    v69 = *((unsigned __int8 *)v64 - 8);
    v70 = *v64;
    if (*v64 != 3)
    {
      swift_bridgeObjectRelease_n();
      v225 = 0;
      v226 = 0xE000000000000000;
      sub_1B2229430();
      LOBYTE(v224) = v69;
      sub_1B22295EC();
      sub_1B2228890();
      v224 = v70;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v187 = (uint64_t)v225;
      v188 = v226;
      sub_1B1FA7AB4();
      swift_allocError();
      *v189 = v187;
      v189[1] = v188;
      swift_willThrow();
      swift_release();
      v60 = (uint64_t)v63;
      return sub_1B1A0DADC(v60, v222);
    }
    v219 = v64;
    v220 = (uint64_t)v62;
    v71 = 30;
    v225 = 0;
    v226 = 0xE000000000000000;
    sub_1B2228890();
    LOBYTE(v224) = v69;
    sub_1B22295EC();
    v73 = (uint64_t)v225;
    v72 = v226;
    v26 = 12 * v205;
    if (12 * v205 >= 1)
    {
      v68 = *(char **)(v195 + 16);
      swift_bridgeObjectRetain();
      v74 = objc_msgSend(v68, sel_newBufferWithLength_options_, v26, 0);
      if (v74)
      {
        v75 = v74;
        v76 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        objc_msgSend(v75, sel_setLabel_, v76);
        swift_bridgeObjectRelease();

        goto LABEL_55;
      }
      if (qword_1ED4BF430 != -1)
        swift_once();
      v225 = 0;
      v226 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v224 = v26;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v224 = 0;
      type metadata accessor for MTLResourceOptions(0);
      sub_1B22295EC();
      v77 = (uint64_t)v225;
      v78 = v226;
      v79 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v225 = 0;
      swift_retain();
      sub_1B1F1AD70(v79, (uint64_t *)&v225, v77, v78);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    v225 = 0;
    v226 = 0xE000000000000000;
    v215 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v225 = (_QWORD *)0xD000000000000010;
    v226 = (unint64_t)v208;
    sub_1B2228890();
    sub_1B2228890();
    v224 = v26;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v80 = (uint64_t)v225;
    v73 = v226;
    v81 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v216 = v72;
    v217 = v69;
    v82 = qword_1ED4D0FD0;
    v68 = (char *)qword_1ED4BF688;
    swift_retain();
    if (v68 != (char *)-1)
      swift_once();
    sub_1B20930B4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440);
    v83 = swift_allocObject();
    *(_OWORD *)(v83 + 16) = v206;
    *(_QWORD *)(v83 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v83 + 64) = sub_1B1B1F47C();
    *(_QWORD *)(v83 + 32) = v80;
    *(_QWORD *)(v83 + 40) = v73;
    swift_bridgeObjectRetain();
    sub_1B222835C();
    swift_bridgeObjectRelease();
    swift_retain();
    v84 = v209;
    sub_1B2228200();
    v69 = (uint64_t)v212;
    *(_QWORD *)&v214 = v82;
    v85 = v213[12];
    v86 = v213[16];
    v63 = (uint64_t *)&v212[v213[20]];
    (*((void (**)(char *, char *, uint64_t))v210 + 4))(v212, v84, v211);
    *(_BYTE *)(v69 + v85) = v81;
    *(_QWORD *)(v69 + v86) = 0;
    *v63 = v80;
    v63[1] = v73;
    swift_bridgeObjectRetain();
    sub_1B2228428();
    swift_release();
    sub_1B1A04628(v69, (uint64_t (*)(_QWORD))sub_1B1B1F358);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v26 = 0;
    v71 = 0;
    v75 = 0;
    LODWORD(v69) = v217;
    a3 = v218;
LABEL_55:
    v87 = v69;
    v217 = v26;
    v88 = 0xE600000000000000;
    v89 = 0x6C616D726F6ELL;
    switch(v87)
    {
      case 0:
        v88 = 0xE800000000000000;
        v89 = 0x6E6F697469736F70;
        if (v75)
          goto LABEL_65;
        goto LABEL_57;
      case 1:
        v88 = 0xE800000000000000;
        v89 = 0x797469636F6C6576;
        if (!v75)
          goto LABEL_57;
        goto LABEL_65;
      case 2:
        if (!v75)
        {
LABEL_57:
          swift_bridgeObjectRetain();
          v90 = sub_1B1DC3B00(v89, v88);
          v92 = v91;
          swift_bridgeObjectRelease();
          if ((v92 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v94 = *a3;
            v225 = (_QWORD *)*a3;
            *a3 = 0x8000000000000000;
            v63 = v221;
            v26 = v202;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1B1EB1E14();
              v94 = (uint64_t)v225;
            }
            swift_bridgeObjectRelease();
            sub_1B1EA73E4(v90, v94);
            *a3 = v94;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v73 = v223;
            v67 = v219;
            v68 = (char *)v220;
            goto LABEL_37;
          }
          swift_bridgeObjectRelease();
          v63 = v221;
          v73 = v223;
LABEL_36:
          v67 = v219;
          v68 = (char *)v220;
          v26 = v202;
LABEL_37:
          v64 = v67 + 2;
          v62 = v68 - 1;
          if (!v62)
          {
            swift_bridgeObjectRelease();
LABEL_76:
            a3[3] = v205;
            v107 = *a3;
            if (*(_QWORD *)(*a3 + 16)
              && (v108 = sub_1B1DC3B00(0x6E6F697469736F70, 0xE800000000000000), (v109 & 1) != 0))
            {
              v110 = (_QWORD *)(*(_QWORD *)(v107 + 56) + 32 * v108);
              v111 = v110[1];
              v112 = v110[2];
              v113 = v110[3];
              v114 = (void *)swift_unknownObjectRetain();
              v115 = v112;
              v73 = v223;
              v199 = sub_1B2083334(v114, v111, v115, v113);
              swift_unknownObjectRelease();
            }
            else
            {
              v199 = 0;
            }
            v116 = *a3;
            if (*(_QWORD *)(*a3 + 16)
              && (v117 = sub_1B1DC3B00(0x797469636F6C6576, 0xE800000000000000), (v118 & 1) != 0))
            {
              v119 = (_QWORD *)(*(_QWORD *)(v116 + 56) + 32 * v117);
              v120 = v119[1];
              v121 = v119[2];
              v122 = v119[3];
              v123 = (void *)swift_unknownObjectRetain();
              v124 = v121;
              v73 = v223;
              v198 = sub_1B2083334(v123, v120, v124, v122);
              swift_unknownObjectRelease();
            }
            else
            {
              v198 = 0;
            }
            v125 = *a3;
            if (*(_QWORD *)(*a3 + 16)
              && (v126 = sub_1B1DC3B00(0x6C616D726F6ELL, 0xE600000000000000), (v127 & 1) != 0))
            {
              v128 = (_QWORD *)(*(_QWORD *)(v125 + 56) + 32 * v126);
              v129 = v128[1];
              v130 = v128[2];
              v131 = v128[3];
              v132 = (void *)swift_unknownObjectRetain();
              v133 = v130;
              v73 = v223;
              v197 = sub_1B2083334(v132, v129, v133, v131);
              swift_unknownObjectRelease();
            }
            else
            {
              v197 = 0;
            }
            v134 = *a3;
            if (*(_QWORD *)(*a3 + 16) && (v135 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000), (v136 & 1) != 0))
            {
              v137 = (_QWORD *)(*(_QWORD *)(v134 + 56) + 32 * v135);
              v138 = v137[1];
              v139 = v137[2];
              v140 = v137[3];
              v141 = (void *)swift_unknownObjectRetain();
              v142 = v139;
              v73 = v223;
              *(_QWORD *)&v206 = sub_1B20833D8(v141, v138, v142, v140);
              swift_unknownObjectRelease();
            }
            else
            {
              *(_QWORD *)&v206 = 0;
            }
            v143 = *a3;
            if (*(_QWORD *)(*a3 + 16) && (v144 = sub_1B1DC3B00(1702521203, 0xE400000000000000), (v145 & 1) != 0))
            {
              v146 = (_QWORD *)(*(_QWORD *)(v143 + 56) + 32 * v144);
              v147 = v146[1];
              v148 = v146[2];
              v149 = v146[3];
              v150 = (void *)swift_unknownObjectRetain();
              v151 = v148;
              v73 = v223;
              v201 = sub_1B20831FC(v150, v147, v151, v149);
              swift_unknownObjectRelease();
            }
            else
            {
              v201 = 0;
            }
            v152 = *a3;
            if (*(_QWORD *)(*a3 + 16) && (v153 = sub_1B1DC3B00(1702521203, 0xE400000000000000), (v154 & 1) != 0))
            {
              v155 = (_QWORD *)(*(_QWORD *)(v152 + 56) + 32 * v153);
              v156 = v155[1];
              v157 = a3;
              v158 = v155[2];
              v159 = v155[3];
              v160 = (void *)swift_unknownObjectRetain();
              v161 = v159;
              a3 = v157;
              v200 = sub_1B2083298(v160, v156, v158, v161);
              swift_unknownObjectRelease();
            }
            else
            {
              v200 = 0;
            }
            v162 = *a3;
            if (*(_QWORD *)(*a3 + 16) && (v163 = sub_1B1DC3B00(1702521203, 0xE400000000000000), (v164 & 1) != 0))
            {
              v165 = (_QWORD *)(*(_QWORD *)(v162 + 56) + 32 * v163);
              v166 = v165[1];
              v167 = v165[2];
              v168 = v165[3];
              v169 = (void *)swift_unknownObjectRetain();
              v170 = v168;
              v63 = v221;
              v196 = sub_1B2083334(v169, v166, v167, v170);
              swift_unknownObjectRelease();
            }
            else
            {
              v196 = 0;
            }
            if (v205)
            {
              v213 = 0;
              v215 = v26 + 32;
              v220 = (int)v63;
              __asm { FMOV            V0.4S, #1.0 }
              v214 = _Q0;
              v176 = v222 >> 62;
              do
              {
                v216 = *(_QWORD *)(v26 + 16);
                if (v216)
                {
                  v204 = (unint64_t)&v196[12 * (_QWORD)v213];
                  v203 = v204 + 8;
                  v212 = &v197[12 * (_QWORD)v213];
                  v211 = (uint64_t)(v212 + 8);
                  v210 = &v198[12 * (_QWORD)v213];
                  v209 = v210 + 8;
                  v208 = &v199[12 * (_QWORD)v213];
                  v207 = (unint64_t)(v208 + 8);
                  swift_bridgeObjectRetain();
                  v177 = 0;
                  while (2)
                  {
                    v179 = (unsigned __int8 *)(v215 + 16 * (_QWORD)v177);
                    v180 = *((_QWORD *)v179 + 1);
                    if (v180)
                    {
                      v218 = (uint64_t *)*v179;
                      v219 = v177;
                      v217 = v73 + 4 * v180;
                      __asm { BR              X8 }
                    }
                    v181 = DWORD2(v214);
                    switch(*v179)
                    {
                      case 0u:
                        *(_QWORD *)v208 = v214;
                        v178 = &v228;
                        goto LABEL_111;
                      case 1u:
                        *(_QWORD *)v210 = v214;
                        v178 = &v229;
                        goto LABEL_111;
                      case 2u:
                        *(_QWORD *)v212 = v214;
                        v178 = &v230;
LABEL_111:
                        *(_DWORD *)*(v178 - 32) = v181;
                        goto LABEL_112;
                      case 4u:
                        *(_OWORD *)(v206 + 16 * (_QWORD)v213) = v214;
                        goto LABEL_112;
                      case 5u:
                        sub_1B2229688();
                        __break(1u);
                        goto LABEL_129;
                      default:
LABEL_112:
                        v177 = (uint64_t *)((char *)v177 + 1);
                        if (v177 != (uint64_t *)v216)
                          continue;
                        v26 = v202;
                        swift_bridgeObjectRelease();
                        break;
                    }
                    break;
                  }
                }
                v213 = (int *)((char *)v213 + 1);
              }
              while (v213 != (int *)v205);
            }
            swift_bridgeObjectRelease();
            swift_release();
            return sub_1B1A0DADC((uint64_t)v63, v222);
          }
          continue;
        }
LABEL_65:
        swift_unknownObjectRetain();
        v95 = swift_isUniquelyReferenced_nonNull_native();
        v225 = (_QWORD *)*a3;
        v96 = (uint64_t)v225;
        *a3 = 0x8000000000000000;
        v97 = sub_1B1DC3B00(v89, v88);
        v99 = v98;
        v100 = *(_QWORD *)(v96 + 16) + ((v98 & 1) == 0);
        if (*(_QWORD *)(v96 + 24) >= v100)
        {
          v101 = v88;
          if ((v95 & 1) != 0)
          {
LABEL_69:
            v104 = v71;
          }
          else
          {
            v104 = v71;
            sub_1B1EB1E14();
          }
          v73 = v223;
          v105 = v225;
          if ((v99 & 1) != 0)
          {
            v106 = (_QWORD *)(v225[7] + 32 * v97);
            swift_unknownObjectRelease();
            *v106 = v75;
            v106[1] = 0;
            v106[2] = v217;
            v106[3] = v104;
          }
          else
          {
            v225[(v97 >> 6) + 8] |= 1 << v97;
            v65 = (uint64_t *)(v105[6] + 16 * v97);
            *v65 = v89;
            v65[1] = v101;
            v66 = (_QWORD *)(v105[7] + 32 * v97);
            *v66 = v75;
            v66[1] = 0;
            v66[2] = v217;
            v66[3] = v104;
            ++v105[2];
            swift_bridgeObjectRetain();
          }
          a3 = v218;
          *v218 = (uint64_t)v105;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v63 = v221;
          goto LABEL_36;
        }
        sub_1B1EA2094(v100, v95);
        v101 = v88;
        v102 = sub_1B1DC3B00(v89, v88);
        if ((v99 & 1) == (v103 & 1))
        {
          v97 = v102;
          goto LABEL_69;
        }
LABEL_129:
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      default:
        goto LABEL_37;
    }
  }
}

char *sub_1B208B624(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int v5;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;

  v5 = a3;
  v7 = HIDWORD(a3);
  swift_retain();
  if (v5 == -1 && !(_DWORD)v7
    || v5 < 0
    || v5 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v7 != -1)
    && *(_DWORD *)(v8 + 12 * v5 + 8) != (_DWORD)v7)
  {
    swift_release();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  v11 = sub_1B1D1F024(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * v5) + 32), *(_DWORD *)(v8 + 12 * v5), *(_WORD *)(v8 + 12 * v5 + 4), 32, a2);
  swift_release();
  if (!v11)
    return (char *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v11 + 16) && (sub_1B1DC3B00(0x6E6F697469736F70, 0xE800000000000000), (v12 & 1) != 0))
  {
    v9 = sub_1B1C62F18(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v14 = *((_QWORD *)v9 + 2);
    v13 = *((_QWORD *)v9 + 3);
    v15 = v14 + 1;
    if (v14 >= v13 >> 1)
    {
      v60 = sub_1B1C62F18(v13 > 1, v14 + 1, 1, v9);
      v15 = v14 + 1;
      v9 = v60;
    }
    *((_QWORD *)v9 + 2) = v15;
    v16 = &v9[16 * v14];
    *((_QWORD *)v16 + 4) = &type metadata for Position;
    *((_QWORD *)v16 + 5) = &off_1E63C2398;
  }
  else
  {
    v9 = (char *)MEMORY[0x1E0DEE9D8];
  }
  if ((a4 & 0x100) != 0)
  {
    if (*(_QWORD *)(v11 + 16))
    {
      sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000);
      if ((v17 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1B1C62F18(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v19 = *((_QWORD *)v9 + 2);
        v18 = *((_QWORD *)v9 + 3);
        v20 = v19 + 1;
        if (v19 >= v18 >> 1)
        {
          v61 = sub_1B1C62F18(v18 > 1, v19 + 1, 1, v9);
          v20 = v19 + 1;
          v9 = v61;
        }
        *((_QWORD *)v9 + 2) = v20;
        v21 = &v9[16 * v19];
        *((_QWORD *)v21 + 4) = &type metadata for Color;
        *((_QWORD *)v21 + 5) = &off_1E63BA190;
      }
    }
  }
  if ((a4 & 0x1000000) != 0)
  {
    if (!*(_QWORD *)(v11 + 16))
      goto LABEL_57;
    v27 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v28 & 1) != 0)
    {
      v29 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 32 * v27);
      v30 = v29[1];
      v31 = v29[2];
      v32 = v29[3];
      v33 = (void *)swift_unknownObjectRetain();
      sub_1B20831FC(v33, v30, v31, v32);
      LOBYTE(v30) = v34;
      swift_unknownObjectRelease();
      if ((v30 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1B1C62F18(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v36 = *((_QWORD *)v9 + 2);
        v35 = *((_QWORD *)v9 + 3);
        if (v36 >= v35 >> 1)
          v9 = sub_1B1C62F18(v35 > 1, v36 + 1, 1, v9);
        *((_QWORD *)v9 + 2) = v36 + 1;
        v37 = &v9[16 * v36];
        *((_QWORD *)v37 + 4) = &type metadata for Scale1;
        *((_QWORD *)v37 + 5) = &off_1E63BC288;
      }
    }
    if (!*(_QWORD *)(v11 + 16))
      goto LABEL_57;
    v38 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v39 & 1) != 0)
    {
      v40 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 32 * v38);
      v41 = v40[1];
      v42 = v40[2];
      v43 = v40[3];
      v44 = (void *)swift_unknownObjectRetain();
      sub_1B2083298(v44, v41, v42, v43);
      LOBYTE(v41) = v45;
      swift_unknownObjectRelease();
      if ((v41 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1B1C62F18(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v47 = *((_QWORD *)v9 + 2);
        v46 = *((_QWORD *)v9 + 3);
        if (v47 >= v46 >> 1)
          v9 = sub_1B1C62F18(v46 > 1, v47 + 1, 1, v9);
        *((_QWORD *)v9 + 2) = v47 + 1;
        v48 = &v9[16 * v47];
        *((_QWORD *)v48 + 4) = &type metadata for Scale2;
        *((_QWORD *)v48 + 5) = &off_1E63BC3F0;
      }
    }
    if (!*(_QWORD *)(v11 + 16))
      goto LABEL_57;
    v49 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v50 & 1) != 0)
    {
      v51 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 32 * v49);
      v52 = v51[1];
      v53 = v51[2];
      v54 = v51[3];
      v55 = (void *)swift_unknownObjectRetain();
      sub_1B2083334(v55, v52, v53, v54);
      LOBYTE(v52) = v56;
      swift_unknownObjectRelease();
      if ((v52 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1B1C62F18(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v58 = *((_QWORD *)v9 + 2);
        v57 = *((_QWORD *)v9 + 3);
        if (v58 >= v57 >> 1)
          v9 = sub_1B1C62F18(v57 > 1, v58 + 1, 1, v9);
        *((_QWORD *)v9 + 2) = v58 + 1;
        v59 = &v9[16 * v58];
        *((_QWORD *)v59 + 4) = &type metadata for Scale3;
        *((_QWORD *)v59 + 5) = &off_1E63BC558;
      }
    }
  }
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  sub_1B1DC3B00(0x7461746E6569726FLL, 0xEB000000006E6F69);
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_1B1C62F18(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v25 = *((_QWORD *)v9 + 2);
    v24 = *((_QWORD *)v9 + 3);
    if (v25 >= v24 >> 1)
      v9 = sub_1B1C62F18(v24 > 1, v25 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v25 + 1;
    v26 = &v9[16 * v25];
    *((_QWORD *)v26 + 4) = &type metadata for Orientation;
    *((_QWORD *)v26 + 5) = &off_1E6371540;
  }
  return v9;
}

uint64_t sub_1B208BB94(_QWORD *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, int32x4_t a7, float32x4_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23,uint64_t a24,char a25)
{
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t result;
  char v40;
  __int32 v41;
  __int32 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  float *v59;
  float32x4_t v60;
  float32x4_t v62;
  float32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v73;

  v73 = sub_1B1B47C08();
  v29 = v28;
  v71 = sub_1B1B47EA8();
  v31 = v30;
  v69 = sub_1B1B47B28();
  v33 = v32;
  v68 = sub_1B1B47D58();
  v35 = v34;
  v36 = sub_1B1B47DC8();
  v38 = v37;
  result = sub_1B1B47E38();
  v44 = a1[6];
  v45 = a1[7] - v44;
  if (v45)
  {
    v46 = 0;
    v47 = (a25 | v40) & 1;
    v48 = a1[3];
    _S0 = a7.u32[3];
    v50 = (float32x4_t)vdupq_laneq_s32(a7, 3);
    v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a7, a7), (int8x16_t)a7, 0xCuLL);
    v52 = vnegq_f32((float32x4_t)a7);
    v53 = result + 16 * v44;
    v54 = a11 + 16 * v48;
    v55 = a14 + 16 * v48;
    result = a17 + 4 * v48;
    v56 = a20 + 8 * v48;
    v57 = 12 * v48 + 8;
    v58 = (_DWORD *)(a23 + v57);
    v59 = (float *)(a2 + v57);
    do
    {
      if (((a10 | v29) & 1) != 0)
      {
        if (((a13 | v31) & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        v60 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a6, a5, *v59), a4, *(v59 - 1)), a3, *(v59 - 2));
        v60.i32[3] = 1.0;
        *(float32x4_t *)(v73 + 16 * v44 + 16 * v46) = v60;
        if (((a13 | v31) & 1) != 0)
        {
LABEL_7:
          if (((a16 | v33) & 1) != 0)
            goto LABEL_8;
          goto LABEL_14;
        }
      }
      _Q16 = *(float32x4_t *)(v54 + 16 * v46);
      _Q18 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q16, (int32x4_t)_Q16), (int8x16_t)_Q16, 0xCuLL), v52), _Q16, v51);
      v62 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32((float32x4_t)a7, _Q16, 3), v50, _Q16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q18, (int32x4_t)_Q18), _Q18, 0xCuLL));
      __asm { FMLA            S18, S0, V16.S[3] }
      v62.i32[3] = _Q18.i32[0];
      *(float32x4_t *)(v71 + 16 * v44 + 16 * v46) = v62;
      if (((a16 | v33) & 1) != 0)
      {
LABEL_8:
        if (((a19 | v35) & 1) != 0)
          goto LABEL_9;
        goto LABEL_15;
      }
LABEL_14:
      _Q16 = *(float32x4_t *)(v55 + 16 * v46);
      *(float32x4_t *)(v69 + 16 * v44 + 16 * v46) = _Q16;
      if (((a19 | v35) & 1) != 0)
      {
LABEL_9:
        if (((a22 | v38) & 1) != 0)
          goto LABEL_10;
        goto LABEL_16;
      }
LABEL_15:
      *(float *)(v68 + 4 * v44 + 4 * v46) = a8.f32[0] * *(float *)(result + 4 * v46);
      if (((a22 | v38) & 1) != 0)
      {
LABEL_10:
        if ((v47 & 1) == 0)
          goto LABEL_17;
        goto LABEL_4;
      }
LABEL_16:
      *(float32x2_t *)(v36 + 8 * v44 + 8 * v46) = vmul_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)(v56 + 8 * v46));
      if ((v47 & 1) == 0)
      {
LABEL_17:
        _Q16.i64[0] = *((_QWORD *)v58 - 1);
        _Q16.i32[2] = *v58;
        v67 = vmulq_f32(_Q16, a8);
        _Q16.i32[3] = v42;
        v67.i32[3] = v41;
        *(float32x4_t *)(v53 + 16 * v46) = v67;
      }
LABEL_4:
      ++v46;
      v58 += 3;
      v59 += 3;
    }
    while (v45 != v46);
  }
  return result;
}

uint64_t type metadata accessor for PointCacheSpawner.System()
{
  return objc_opt_self();
}

uint64_t sub_1B208BE64(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B208BE9C + 4 * byte_1B22B770D[a1]))(0x636143746E696F70, 0xEA00000000006568);
}

unint64_t sub_1B208BE9C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B208BEBC()
{
  return 0x4374697265686E69;
}

unint64_t sub_1B208BEDC()
{
  return 0xD000000000000012;
}

uint64_t sub_1B208BEF8()
{
  return 0x5374697265686E69;
}

uint64_t sub_1B208BF18(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _DWORD v13[2];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v13[1] = a3;
  sub_1B19F8E54(0, &qword_1EEF63040, (uint64_t (*)(void))sub_1B209459C, (uint64_t)&type metadata for PointCacheSpawner.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B209459C();
  sub_1B222A180();
  v19 = a2;
  v18 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v3)
  {
    v17 = 1;
    sub_1B222991C();
    v16 = 2;
    sub_1B222991C();
    v15 = 3;
    sub_1B222991C();
    v14 = 4;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

const char *sub_1B208C0E4()
{
  return "PointCacheSpawner.CPU";
}

void sub_1B208C0F8(char *a1)
{
  sub_1B1F92F4C(*a1);
}

uint64_t sub_1B208C104()
{
  unsigned __int8 *v0;

  return sub_1B208BE64(*v0);
}

uint64_t sub_1B208C10C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B208F364(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B208C130()
{
  sub_1B209459C();
  return sub_1B222A1D4();
}

uint64_t sub_1B208C158()
{
  sub_1B209459C();
  return sub_1B222A1E0();
}

uint64_t sub_1B208C180@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;

  result = sub_1B2093180(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_BYTE *)(a2 + 9) = BYTE1(v5) & 1;
    *(_BYTE *)(a2 + 10) = BYTE2(v5) & 1;
    *(_BYTE *)(a2 + 11) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_1B208C1CC(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(v1 + 9))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(_BYTE *)(v1 + 10))
    v4 = 0x10000;
  else
    v4 = 0;
  if (*(_BYTE *)(v1 + 11))
    v5 = 0x1000000;
  else
    v5 = 0;
  return sub_1B208BF18(a1, *(_QWORD *)v1, v3 | v4 | v5);
}

char *sub_1B208C224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 | *(unsigned __int8 *)(v2 + 8);
  if (*(_BYTE *)(v2 + 10))
    v5 = 0x10000;
  else
    v5 = 0;
  if (*(_BYTE *)(v2 + 11))
    v6 = 0x1000000;
  else
    v6 = 0;
  return sub_1B208B624(a1, a2, *(_QWORD *)v2, v4 | v5 | v6);
}

uint64_t sub_1B208C26C()
{
  return type metadata accessor for PointCacheSpawner.System();
}

double sub_1B208C288@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 16843009;
  return result;
}

uint64_t type metadata accessor for PointCacheSpawner.GPUSystem()
{
  return objc_opt_self();
}

uint64_t destroy for PointCacheFromModel()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PointCacheFromModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PointCacheFromModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PointCacheFromModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(__n128 *)(v3 + 16) = result;
  *(_OWORD *)(v3 + 32) = v5;
  return result;
}

_QWORD *assignWithTake for PointCacheFromModel(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PointCacheFromModel(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheFromModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointCacheFromModel()
{
  return &type metadata for PointCacheFromModel;
}

ValueMetadata *type metadata accessor for PointCacheFileAsset()
{
  return &type metadata for PointCacheFileAsset;
}

uint64_t getEnumTagSinglePayload for PointCacheGenerator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheGenerator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointCacheGenerator()
{
  return &type metadata for PointCacheGenerator;
}

ValueMetadata *type metadata accessor for REMeshAssetPointCache()
{
  return &type metadata for REMeshAssetPointCache;
}

const char *sub_1B208C594()
{
  return "PointCacheSpawner.GPU";
}

uint64_t sub_1B208C5A8()
{
  return type metadata accessor for PointCacheSpawner.GPUSystem();
}

unint64_t sub_1B208C5C4()
{
  unint64_t result;

  result = qword_1EEF62EF8;
  if (!qword_1EEF62EF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8734, &type metadata for PointCache.Distribution);
    atomic_store(result, (unint64_t *)&qword_1EEF62EF8);
  }
  return result;
}

uint64_t sub_1B208C608(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  float v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v30;
  float *v31;
  float v32;
  uint64_t v33;
  float *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if ((unint64_t)v3 >= 2)
    {
      v9 = *v2;
      v10 = *v2 + 4;
      v11 = -1;
      for (i = 1; i != v3; ++i)
      {
        v13 = *(float *)(v9 + 8 * i + 4);
        v14 = v11;
        v15 = v10;
        do
        {
          if (*(float *)v15 >= v13)
            break;
          v16 = *(_WORD *)(v15 + 4);
          *(_QWORD *)(v15 + 4) = *(_QWORD *)(v15 - 4);
          *(_WORD *)(v15 - 4) = v16;
          *(float *)v15 = v13;
          v15 -= 8;
        }
        while (!__CFADD__(v14++, 1));
        v10 += 8;
        --v11;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 >= -1)
    {
      v6 = result;
      if (v3 < 2)
      {
        v18 = MEMORY[0x1E0DEE9D8];
        __dst = (float *)(MEMORY[0x1E0DEE9D8] + 32);
        if (v3 != 1)
        {
          v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          v21 = (char *)MEMORY[0x1E0DEE9D8];
          if (v22 < 2)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v18 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
LABEL_73:
          v63 = *v2;
          do
          {
            v64 = *(_QWORD *)&v21[16 * v22];
            v65 = &v21[16 * v22 + 16];
            v66 = *((_QWORD *)v65 + 1);
            sub_1B208CB80((float *)(v63 + 8 * v64), (float *)(v63 + 8 * *(_QWORD *)v65), v63 + 8 * v66, __dst);
            if (v1)
              break;
            v67 = v21;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v67 = sub_1B216D510((uint64_t)v21);
            v68 = v67 + 32;
            v69 = &v67[16 * v22];
            *(_QWORD *)v69 = v64;
            *((_QWORD *)v69 + 1) = v66;
            v21 = v67;
            v70 = *((_QWORD *)v67 + 2);
            memmove(&v68[16 * v22 - 16], &v68[16 * v22], 16 * (v70 - v22));
            *((_QWORD *)v21 + 2) = v70 - 1;
            v22 = v70 - 1;
          }
          while (v70 > 2);
          goto LABEL_69;
        }
        v72 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v7 = v5 >> 1;
        sub_1B2091220();
        v8 = sub_1B2228B0C();
        *(_QWORD *)(v8 + 16) = v7;
        v72 = v8;
        __dst = (float *)(v8 + 32);
      }
      v19 = 0;
      v71 = v2;
      v20 = *v2;
      v21 = (char *)MEMORY[0x1E0DEE9D8];
      v73 = v6;
      v74 = v3;
      do
      {
        v23 = v19++;
        if (v19 < v3)
        {
          v24 = *(float *)(v20 + 8 * v19 + 4);
          v25 = *(float *)(v20 + 8 * v23 + 4);
          v19 = v23 + 2;
          if (v23 + 2 < v3)
          {
            v26 = (float *)(v20 + 20 + 8 * v23);
            v27 = v24;
            while (1)
            {
              v28 = v27;
              v27 = *v26;
              if (v25 < v24 == v28 >= *v26)
                break;
              ++v19;
              v26 += 2;
              if (v3 == v19)
              {
                v19 = v3;
                break;
              }
            }
          }
          if (v25 < v24 && v23 < v19)
          {
            v36 = 8 * v19;
            v37 = 8 * v23;
            v38 = v19;
            v39 = v23;
            do
            {
              if (v39 != --v38)
              {
                v40 = v20 + v36;
                v41 = *(_WORD *)(v20 + v37);
                v42 = *(_DWORD *)(v20 + v37 + 4);
                *(_QWORD *)(v20 + v37) = *(_QWORD *)(v20 + v36 - 8);
                *(_WORD *)(v40 - 8) = v41;
                *(_DWORD *)(v40 - 4) = v42;
              }
              ++v39;
              v36 -= 8;
              v37 += 8;
            }
            while (v39 < v38);
          }
        }
        if (v19 < v3 && v19 - v23 < v6)
        {
          v30 = v23 + v6;
          if (v23 + v6 >= v3)
            v30 = v3;
          if (v19 != v30)
          {
            v31 = (float *)(v20 + 8 * v19);
            do
            {
              v32 = *(float *)(v20 + 8 * v19 + 4);
              v33 = v23;
              v34 = v31;
              do
              {
                if (*(v34 - 1) >= v32)
                  break;
                v35 = *(_WORD *)v34;
                *(_QWORD *)v34 = *((_QWORD *)v34 - 1);
                *((_WORD *)v34 - 4) = v35;
                *(v34 - 1) = v32;
                ++v33;
                v34 -= 2;
              }
              while (v19 != v33);
              ++v19;
              v31 += 2;
            }
            while (v19 != v30);
            v19 = v30;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = sub_1B216CC74(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
        v44 = *((_QWORD *)v21 + 2);
        v43 = *((_QWORD *)v21 + 3);
        v22 = v44 + 1;
        if (v44 >= v43 >> 1)
          v21 = sub_1B216CC74(v43 > 1, v44 + 1, 1, v21);
        *((_QWORD *)v21 + 2) = v22;
        v45 = v21 + 32;
        v46 = &v21[16 * v44 + 32];
        *(_QWORD *)v46 = v23;
        *((_QWORD *)v46 + 1) = v19;
        if (v44)
        {
          while (1)
          {
            v47 = v22 - 1;
            if (v22 >= 4)
            {
              v52 = &v45[16 * v22];
              v53 = *((_QWORD *)v52 - 7) - *((_QWORD *)v52 - 8);
              v50 = *((_QWORD *)v52 - 5) - *((_QWORD *)v52 - 6);
              v51 = v22 - 2;
              v54 = &v45[16 * v22 - 32];
              v48 = *(_QWORD *)v54;
              v49 = *((_QWORD *)v54 + 1);
              if (v50 - v48 + v49 >= v53)
              {
                v57 = v50 < *(_QWORD *)&v45[16 * v47 + 8] - *(_QWORD *)&v45[16 * v47];
LABEL_63:
                if (v57)
                  v47 = v51;
                goto LABEL_65;
              }
            }
            else
            {
              if (v22 != 3)
              {
                v55 = *(_QWORD *)&v45[16 * v22 - 24] - *(_QWORD *)&v21[16 * v22];
                v56 = *(_QWORD *)&v45[16 * v47 + 8] - *(_QWORD *)&v45[16 * v47];
                goto LABEL_60;
              }
              v48 = *((_QWORD *)v21 + 6);
              v49 = *((_QWORD *)v21 + 7);
              v50 = *((_QWORD *)v21 + 5) - *((_QWORD *)v21 + 4);
              v51 = 1;
            }
            v55 = v49 - v48;
            v56 = *(_QWORD *)&v45[16 * v47 + 8] - *(_QWORD *)&v45[16 * v47];
            if (v55 + v56 >= v50)
            {
              v57 = v50 < v56;
              goto LABEL_63;
            }
LABEL_60:
            if (v56 < v55)
              goto LABEL_21;
LABEL_65:
            v58 = &v45[16 * v47 - 16];
            v59 = *(_QWORD *)v58;
            v60 = &v45[16 * v47];
            v61 = *((_QWORD *)v60 + 1);
            sub_1B208CB80((float *)(v20 + 8 * *(_QWORD *)v58), (float *)(v20 + 8 * *(_QWORD *)v60), v20 + 8 * v61, __dst);
            if (v1)
            {
              v18 = v72;
              goto LABEL_69;
            }
            *(_QWORD *)v58 = v59;
            *((_QWORD *)v58 + 1) = v61;
            v62 = *((_QWORD *)v21 + 2);
            v22 = v62 - 1;
            memmove(&v45[16 * v47], v60 + 16, 16 * (v62 - 1 - v47));
            *((_QWORD *)v21 + 2) = v62 - 1;
            if (v62 <= 2)
              goto LABEL_21;
          }
        }
        v22 = 1;
LABEL_21:
        v6 = v73;
        v3 = v74;
      }
      while (v19 < v74);
      v18 = v72;
      v2 = v71;
      if (v22 < 2)
        goto LABEL_69;
      goto LABEL_73;
    }
    result = sub_1B222967C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B208CB80(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  float *v15;
  char *v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t result;
  char *v21;
  float *v22;
  float *v23;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v23 = __src;
  v22 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = (char *)&v4[2 * v13];
      v21 = v16;
      v23 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (float *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 2;
          if (*(v6 - 1) >= *((float *)v16 - 1))
          {
            v21 = v16 - 8;
            if (v18 < (float *)v16 || v17 >= (float *)v16 || v18 != (float *)v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v19 = v6;
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_43;
          }
          else
          {
            v19 = v6 - 2;
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = *(_QWORD *)v19;
            v23 = v6 - 2;
            if (v19 <= v7)
              goto LABEL_43;
          }
          v17 -= 2;
          v6 = v19;
          if (v16 <= (char *)v4)
            goto LABEL_43;
        }
      }
      goto LABEL_43;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = (char *)&v4[2 * v10];
    v21 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (v4[1] >= v6[1])
        {
          if (v7 != v4 || v7 >= v4 + 2)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v22 = v4 + 2;
          v15 = v6;
          v4 += 2;
        }
        else
        {
          v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 2;
        if (v4 >= (float *)v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v23 = v7;
    }
LABEL_43:
    sub_1B216CEB8((void **)&v23, (const void **)&v22, &v21);
    return 1;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B208CE04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, float a5, float a6)
{
  uint64_t v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if (a5 == a6)
  {
    v6 = a3 - a2;
    if (a3 != a2)
    {
      v7 = (float32x4_t *)(result + 16 * a2);
      do
      {
        *v7 = vmulq_n_f32(*v7, a5);
        ++v7;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v8 = a3 - a2;
    if (a3 != a2)
    {
      v9 = a4[2];
      v10 = a4[3];
      v11 = a6 - a5;
      v12 = (float32x4_t *)(result + 16 * a2);
      v13 = *a4;
      v14 = a4[1];
      do
      {
        v15 = 9 * ((((unint64_t)(5 * v14) >> 32) >> 25) | (640 * v14));
        v16 = v13 ^ v9;
        v17 = v14 ^ v10;
        v9 ^= v13 ^ (v14 << 17);
        v14 ^= v16;
        v13 ^= v17;
        v10 = __ROR8__(v17, 19);
        *v12 = vmulq_n_f32(*v12, (float)(v11 * (float)((float)(*(_QWORD *)&v15 & 0xFFFFFFLL) * 0.000000059605)) + a5);
        ++v12;
        --v8;
      }
      while (v8);
      *a4 = v13;
      a4[1] = v14;
      a4[2] = v9;
      a4[3] = v10;
    }
  }
  return result;
}

uint64_t sub_1B208CEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a1 + 16) && (sub_1B1DC3B00(a2, a3), (v3 & 1) != 0))
    return swift_unknownObjectRetain();
  else
    return 0;
}

uint64_t sub_1B208CF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  int8x16_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float v64;
  float32x4_t v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t *v76;
  int8x16_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  unsigned __int32 v85;
  float32x4_t v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  float v95;
  float v96;
  float v97;
  float32x4_t v98;
  float v99;
  float v100;
  float v101;
  float32x2_t v103;
  float v104;
  int32x2_t v105;
  float v106;
  float v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  uint64_t v121;
  __int32 v122;
  __int32 v123;
  float32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  float32x4_t v129;
  uint64_t v130;
  float32x4_t *v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  float32x4_t v136;
  int8x16_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  __int32 v141;
  float32x4_t v142;
  float32x4_t v143;
  uint64_t v144;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v148;
  float32x4_t v149;
  uint64_t v150;
  float32x4_t *v151;
  float32x4_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v159;
  float32x4_t *v160;
  int8x16_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x2_t v165;
  unsigned __int32 v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  __int32 v170;
  __int32 v171;
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int8x16_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int32x4_t v182;
  float32x4_t v183;
  float v184;
  float v185;
  float v186;
  float32x4_t v187;
  float v188;
  float v189;
  float v190;
  float32x2_t v192;
  float v193;
  int32x2_t v194;
  float v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  char v208;

  result = sub_1B1B4D278(a1, (uint64_t)&v204, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
  if ((v208 & 1) == 0)
  {
    v41 = (int32x4_t)vmulq_f32(v204, v204);
    v42 = vmulq_f32(v205, v205);
    v43 = (int32x4_t)vmulq_f32(v206, v206);
    v44 = vzip2q_s32(v41, v43);
    v45 = (float32x4_t)vzip1q_s32(vzip1q_s32(v41, v43), (int32x4_t)v42);
    v46 = (float32x4_t)vtrn2q_s32(v41, (int32x4_t)v42);
    v46.i32[2] = v43.i32[1];
    v47 = vaddq_f32((float32x4_t)vzip1q_s32(v44, vdupq_laneq_s32((int32x4_t)v42, 2)), vaddq_f32(v45, v46));
    v42.i64[0] = 0x80000000800000;
    v42.i64[1] = 0x80000000800000;
    v48 = vcgeq_f32(v42, v47);
    v47.i32[3] = 0;
    v49 = vrsqrteq_f32(v47);
    v50 = vmulq_f32(v49, vrsqrtsq_f32(v47, vmulq_f32(v49, v49)));
    v51 = v48;
    v51.i32[3] = 0;
    v52 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)v47, (int8x16_t)vmulq_f32(v50, vrsqrtsq_f32(v47, vmulq_f32(v50, v50))));
    v53 = vmulq_n_f32(v204, v52.f32[0]);
    v54 = vmulq_lane_f32(v205, *(float32x2_t *)v52.f32, 1);
    v55 = vmulq_laneq_f32(v206, v52, 2);
    v56 = (int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55);
    v57 = (int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54);
    v58 = (int32x4_t)v53;
    if (v48.i32[0])
    {
      v59 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v56, (int8x16_t)v55, 0xCuLL), vnegq_f32(v54)), v55, (float32x4_t)vextq_s8(v57, (int8x16_t)v54, 0xCuLL));
      v58 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL);
    }
    v60 = (int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53);
    v61 = v54;
    if (v48.i32[1])
    {
      v62 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v60, (int8x16_t)v53, 0xCuLL), vnegq_f32(v55)), v53, (float32x4_t)vextq_s8(v56, (int8x16_t)v55, 0xCuLL));
      v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), v62, 0xCuLL);
    }
    if (v48.i32[2])
    {
      v63 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v57, (int8x16_t)v54, 0xCuLL), vnegq_f32(v53)), v54, (float32x4_t)vextq_s8(v60, (int8x16_t)v53, 0xCuLL));
      v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), v63, 0xCuLL);
    }
    v64 = (float)(*(float *)v58.i32 + v61.f32[1]) + v55.f32[2];
    if (v64 > 0.0)
    {
      v65 = (float32x4_t)vzip2q_s32((int32x4_t)v61, vuzp1q_s32((int32x4_t)v61, (int32x4_t)v55));
      v65.i32[2] = v58.i32[1];
      v66 = sqrtf(v64 + 1.0);
      v67 = (float32x4_t)vtrn2q_s32((int32x4_t)v55, vzip2q_s32((int32x4_t)v55, v58));
      v67.i32[2] = v61.i32[0];
      v69 = vsubq_f32(v65, v67);
      v65.f32[3] = v66;
      v67.f32[3] = v66;
      v68 = vmulq_f32(v65, v67);
      v69.i32[3] = v68.i32[3];
      goto LABEL_52;
    }
    if (*(float *)v58.i32 < v61.f32[1] || *(float *)v58.i32 < v55.f32[2])
    {
      if (v61.f32[1] <= v55.f32[2])
      {
        v66 = sqrtf((float)((float)(v55.f32[2] + 1.0) - *(float *)v58.i32) - v61.f32[1]);
        *(float32x2_t *)v69.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v58, (int32x4_t)v61), *(float32x2_t *)v55.f32);
        v114 = (float32x2_t)__PAIR64__(v58.u32[1], LODWORD(v66));
        v115 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.f32, 0);
        *(float32x2_t *)v68.f32 = vsub_f32(*(float32x2_t *)v58.i8, v115);
        v115.f32[0] = v66;
        v114.i32[0] = vmul_f32(v114, v115).u32[0];
        v114.i32[1] = v68.i32[1];
        *(float32x2_t *)&v69.u32[2] = v114;
LABEL_52:
        v68.f32[0] = 0.5 / v66;
        v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 0);
        if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        {
LABEL_53:
          v196 = v207;
          v200 = v205;
          v201 = v204;
          v198 = v69;
          v199 = v206;
          v197 = v113;
          result = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a3 + 88), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 16));
          v113 = v197;
          v69 = v198;
          v116 = *(_QWORD *)(a3 + 48);
          v117 = *(_QWORD *)(a3 + 56) - v116;
          if (v117)
          {
            v118 = v116 + a4;
            v119 = (float32x4_t *)(result + 16 * v116);
            do
            {
              v120 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v196, v199, *(float *)(a6 + 12 * (v118 % a5) + 8)), v200, *(float *)(a6 + 12 * (v118 % a5) + 4)), v201, *(float *)(a6 + 12 * (v118 % a5)));
              v120.i32[3] = 1.0;
              *v119++ = v120;
              ++v118;
              --v117;
            }
            while (v117);
          }
        }
LABEL_56:
        v202 = vmulq_f32(v69, v113);
        if ((a7 & 1) != 0 && (a10 & 1) == 0)
        {
          v121 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, *(uint64_t **)(a3 + 88), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 16));
          v125 = *(_QWORD *)(a3 + 48);
          v126 = *(_QWORD *)(a3 + 56);
          v127 = v126 - v125;
          if (v126 != v125)
          {
            v128 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL);
            v129 = vnegq_f32(v202);
            v130 = v125 + a4;
            v131 = (float32x4_t *)(v121 + 16 * v125);
            do
            {
              v132 = a8 + 12 * (v130 % a5);
              v124.i64[0] = *(_QWORD *)v132;
              v133 = v124;
              v133.i32[2] = *(_DWORD *)(v132 + 8);
              v124.i32[2] = v133.i32[2];
              v134 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v133, (int32x4_t)v133), (int8x16_t)v133, 0xCuLL), v129), v133, v128);
              v135 = (int8x16_t)vaddq_f32(v134, v134);
              v136 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), v135, 0xCuLL);
              v133.i32[3] = v123;
              v137 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), (int8x16_t)v136, 0xCuLL), v129), v136, v128);
              v138 = vaddq_f32(vaddq_f32(v124, vmulq_laneq_f32(v136, v202, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v137, (int32x4_t)v137), v137, 0xCuLL));
              v124.i32[3] = v122;
              v138.i32[3] = 0;
              ++v130;
              *v131++ = v138;
              v123 = v133.i32[3];
              --v127;
            }
            while (v127);
          }
          result = sub_1B208CE04(v121, v125, v126, (uint64_t *)(a11 + 8), *(float *)(a2 + 16), *(float *)(a2 + 20));
        }
        if ((*(_BYTE *)(a2 + 27) & 1) == 0)
          return result;
        result = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, *(uint64_t **)(a3 + 88), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 16));
        if ((a14 & 1) == 0)
        {
          v144 = *(_QWORD *)(a3 + 48);
          v145 = *(_QWORD *)(a3 + 56) - v144;
          if (v145)
          {
            v146 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v202, 3);
            _S1 = v202.i32[3];
            v148 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL);
            v149 = vnegq_f32(v202);
            v150 = v144 + a4;
            v151 = (float32x4_t *)(result + 16 * v144);
            do
            {
              _Q4 = *(float32x4_t *)(a12 + 16 * (v150 % a5));
              _Q6 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL), v149), _Q4, v148);
              v154 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v202, _Q4, 3), v146, _Q4), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q6, (int32x4_t)_Q6), _Q6, 0xCuLL));
              __asm { FMLA            S6, S1, V4.S[3] }
              v154.i32[3] = _Q6.i32[0];
              *v151++ = v154;
              ++v150;
              --v145;
            }
            while (v145);
          }
          return result;
        }
        if ((a10 & 1) != 0)
          return result;
        v155 = *(_QWORD *)(a3 + 48);
        v156 = *(_QWORD *)(a3 + 56) - v155;
        if (!v156)
          return result;
        v157 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL);
        v158 = vnegq_f32(v202);
        v159 = v155 + a4;
        v160 = (float32x4_t *)(result + 16 * v155);
        __asm { FMOV            V2.4S, #1.0 }
        v139.i32[0] = 1.0;
        v162.i64[0] = 0x8000000080000000;
        v162.i64[1] = 0x8000000080000000;
        while (1)
        {
          v170 = v143.i32[3];
          v171 = v142.i32[3];
          v172 = a8 + 12 * (v159 % a5);
          v140.i64[0] = *(_QWORD *)v172;
          v173 = v140;
          v173.i32[2] = *(_DWORD *)(v172 + 8);
          v140.i32[2] = v173.i32[2];
          v174 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v173, (int32x4_t)v173), (int8x16_t)v173, 0xCuLL), v158), v173, v157);
          v175 = (int8x16_t)vaddq_f32(v174, v174);
          v176 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v175, (int32x4_t)v175), v175, 0xCuLL);
          v142 = vaddq_f32(v140, vmulq_laneq_f32(v176, v202, 3));
          v142.i32[3] = v171;
          v177 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v176, (int32x4_t)v176), (int8x16_t)v176, 0xCuLL), v158), v176, v157);
          v143 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v177, (int32x4_t)v177), v177, 0xCuLL);
          v143.i32[3] = v170;
          v168 = vaddq_f32(v142, v143);
          v178 = vmulq_f32(v168, v168);
          v178.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).u64[0];
          v179 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 0);
          v179.i32[3] = 0;
          v180 = vrsqrteq_f32(v179);
          v181 = vmulq_f32(v180, vrsqrtsq_f32(v179, vmulq_f32(v180, v180)));
          v182 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v178.f32[0] != 0.0)), 0x1FuLL));
          v182.i32[3] = 0;
          v187 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v182), (int8x16_t)vmulq_f32(v181, vrsqrtsq_f32(v179, vmulq_f32(v181, v181))), _Q2);
          v183 = vmulq_f32(v168, v187);
          v181.i32[0] = v183.i32[2];
          v184 = *(float *)vbslq_s8(v162, v139, (int8x16_t)v181).i32;
          v168.f32[0] = v183.f32[1] / (float)(fabsf(v183.f32[2]) + 1.0);
          v185 = vmuls_lane_f32(v168.f32[0], *(float32x2_t *)v183.f32, 1);
          v168.f32[0] = -(float)(v183.f32[0] * v168.f32[0]);
          v186 = v183.f32[2] + (float)(v184 * v185);
          v187.f32[0] = v184 * v168.f32[0];
          v188 = 1.0 - v185;
          v189 = vmuls_lane_f32(-v184, *(float32x2_t *)v183.f32, 1);
          v190 = v183.f32[2] + (float)(v186 + v188);
          if (v190 > 0.0)
          {
            v163 = (float32x2_t)vrev64_s32(*(int32x2_t *)v183.f32);
            *(int32x2_t *)v167.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32), 0);
            v167.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v163.u32[1], LODWORD(v189)), v163).u32[0];
            v164 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v190 + 1.0)), v187.u32[0]);
            v165 = vmul_f32(v164, v164);
            v164.i32[0] = v168.i32[0];
            v166 = vsub_f32(*(float32x2_t *)v187.f32, v164).u32[0];
            v168.i32[1] = v165.i32[1];
            v167.i64[1] = v168.i64[0];
            v168.f32[0] = 0.5 / v164.f32[1];
          }
          else
          {
            if (v186 >= v188 && v186 >= v183.f32[2])
            {
              v193 = sqrtf((float)((float)(v186 + 1.0) - v188) - v183.f32[2]);
              v169.f32[0] = v193 * v193;
              v169.f32[1] = v168.f32[0] + v187.f32[0];
              v194 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v189), v183.u32[0]), *(float32x2_t *)v183.f32);
LABEL_83:
              *(int32x2_t *)&v169.u32[2] = v194;
              *(float *)v194.i32 = 0.5 / v193;
              v167 = (float32x4_t)vdupq_lane_s32(v194, 0);
              goto LABEL_74;
            }
            if (v188 > v183.f32[2])
            {
              v193 = sqrtf((float)((float)(v188 + 1.0) - v186) - v183.f32[2]);
              v169.f32[0] = v168.f32[0] + v187.f32[0];
              v192 = (float32x2_t)vrev64_s32(*(int32x2_t *)v183.f32);
              v169.f32[1] = v193 * v193;
              v194 = (int32x2_t)vadd_f32(v192, (float32x2_t)__PAIR64__(v192.u32[1], LODWORD(v189)));
              goto LABEL_83;
            }
            v195 = sqrtf((float)((float)(v183.f32[2] + 1.0) - v186) - v188);
            v167.i32[0] = vsubq_f32(v183, v183).u32[0];
            v167.f32[1] = v183.f32[1] + v189;
            v167.f32[2] = v195 * v195;
            v167.f32[3] = v187.f32[0] - v168.f32[0];
            v168.f32[0] = 0.5 / v195;
          }
          v169 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v168.f32, 0);
LABEL_74:
          v140.i32[3] = v141;
          *v160++ = vmulq_f32(v167, v169);
          ++v159;
          if (!--v156)
            return result;
        }
      }
      v107 = sqrtf((float)((float)(v61.f32[1] + 1.0) - *(float *)v58.i32) - v55.f32[2]);
      *(int32x2_t *)v54.f32 = vdup_laneq_s32((int32x4_t)v61, 2);
      v71 = (int8x16_t)v54;
      *(float *)v71.i32 = v107;
      v71.i32[0] = vmul_f32(*(float32x2_t *)v71.i8, (float32x2_t)__PAIR64__(v55.u32[1], LODWORD(v107))).u32[0];
      v71.i32[1] = vadd_f32(*(float32x2_t *)&v54, *(float32x2_t *)&v55).i32[1];
      v72 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 1), v61);
      v112 = (int32x2_t)vsubq_f32(v55, (float32x4_t)vdupq_laneq_s32(v58, 2)).u64[0];
      v113 = (float32x4_t)vextq_s8(vextq_s8(v72, v72, 4uLL), v71, 0xCuLL);
      v113.i32[3] = v112.i32[0];
    }
    else
    {
      v107 = sqrtf((float)((float)(*(float *)v58.i32 + 1.0) - v61.f32[1]) - v55.f32[2]);
      v108 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.f32, 0);
      v109 = vadd_f32(*(float32x2_t *)v58.i8, v108);
      v108.f32[0] = v107;
      v113.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v58.u32[1], LODWORD(v107)), v108).u32[0];
      v113.i32[1] = v109.i32[1];
      v110 = (float32x2_t)vzip2q_s32(v58, (int32x4_t)v61).u64[0];
      LODWORD(v111) = vadd_f32(v110, *(float32x2_t *)v55.f32).u32[0];
      v112 = (int32x2_t)vsub_f32(v110, *(float32x2_t *)v55.f32);
      HIDWORD(v111) = v112.i32[1];
      v113.i64[1] = v111;
    }
    *(float *)v112.i32 = 0.5 / v107;
    v69 = (float32x4_t)vdupq_lane_s32(v112, 0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      goto LABEL_53;
    goto LABEL_56;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    result = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a3 + 88), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 16));
    v21 = *(_QWORD *)(a3 + 48);
    v22 = *(_QWORD *)(a3 + 56) - v21;
    if (v22)
    {
      v23 = v21 + a4;
      v24 = (_OWORD *)(result + 16 * v21);
      do
      {
        v25 = a6 + 12 * (v23 % a5);
        *(_QWORD *)&v26 = *(_QWORD *)v25;
        DWORD2(v26) = *(_DWORD *)(v25 + 8);
        HIDWORD(v26) = 1.0;
        *v24++ = v26;
        ++v23;
        --v22;
      }
      while (v22);
    }
  }
  if ((a7 & 1) != 0 && (a10 & 1) == 0)
  {
    v27 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, *(uint64_t **)(a3 + 88), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 16));
    v28 = *(_QWORD *)(a3 + 48);
    v29 = *(_QWORD *)(a3 + 56);
    v30 = v29 - v28;
    if (v29 != v28)
    {
      v31 = v28 + a4;
      v32 = (_OWORD *)(v27 + 16 * v28);
      do
      {
        v33 = a8 + 12 * (v31 % a5);
        *(_QWORD *)&v34 = *(_QWORD *)v33;
        *((_QWORD *)&v34 + 1) = *(unsigned int *)(v33 + 8);
        *v32++ = v34;
        ++v31;
        --v30;
      }
      while (v30);
    }
    result = sub_1B208CE04(v27, v28, v29, (uint64_t *)(a11 + 8), *(float *)(a2 + 16), *(float *)(a2 + 20));
  }
  if ((*(_BYTE *)(a2 + 27) & 1) != 0)
  {
    result = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, *(uint64_t **)(a3 + 88), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 16));
    if ((a14 & 1) == 0)
    {
      v37 = *(_QWORD *)(a3 + 48);
      v38 = *(_QWORD *)(a3 + 56) - v37;
      if (v38)
      {
        v39 = v37 + a4;
        v40 = (_OWORD *)(result + 16 * v37);
        do
        {
          *v40++ = *(_OWORD *)(a12 + 16 * (v39 % a5));
          ++v39;
          --v38;
        }
        while (v38);
      }
      return result;
    }
    if ((a10 & 1) != 0)
      return result;
    v73 = *(_QWORD *)(a3 + 48);
    v74 = *(_QWORD *)(a3 + 56) - v73;
    if (!v74)
      return result;
    v75 = v73 + a4;
    v76 = (float32x4_t *)(result + 16 * v73);
    __asm { FMOV            V0.4S, #1.0 }
    v35.i32[0] = 1.0;
    v81.i64[0] = 0x8000000080000000;
    v81.i64[1] = 0x8000000080000000;
    do
    {
      v88 = a8 + 12 * (v75 % a5);
      v36.i64[0] = *(_QWORD *)v88;
      v36.i32[2] = *(_DWORD *)(v88 + 8);
      v89 = vmulq_f32(v36, v36);
      v89.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).u64[0];
      v90 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0);
      v90.i32[3] = 0;
      v91 = vrsqrteq_f32(v90);
      v92 = vmulq_f32(v91, vrsqrtsq_f32(v90, vmulq_f32(v91, v91)));
      v93 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v89.f32[0] != 0.0)), 0x1FuLL));
      v93.i32[3] = 0;
      v98 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v93), (int8x16_t)vmulq_f32(v92, vrsqrtsq_f32(v90, vmulq_f32(v92, v92))), _Q0);
      v94 = vmulq_f32(v36, v98);
      v92.i32[0] = v94.i32[2];
      v95 = *(float *)vbslq_s8(v81, v35, (int8x16_t)v92).i32;
      v36.f32[0] = v94.f32[1] / (float)(fabsf(v94.f32[2]) + 1.0);
      v96 = vmuls_lane_f32(v36.f32[0], *(float32x2_t *)v94.f32, 1);
      v36.f32[0] = -(float)(v94.f32[0] * v36.f32[0]);
      v97 = v94.f32[2] + (float)(v95 * v96);
      v98.f32[0] = v95 * v36.f32[0];
      v99 = 1.0 - v96;
      v100 = vmuls_lane_f32(-v95, *(float32x2_t *)v94.f32, 1);
      v101 = v94.f32[2] + (float)(v97 + v99);
      if (v101 > 0.0)
      {
        v82 = (float32x2_t)vrev64_s32(*(int32x2_t *)v94.f32);
        *(int32x2_t *)v86.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32), 0);
        v86.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v82.u32[1], LODWORD(v100)), v82).u32[0];
        v83 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v101 + 1.0)), v98.u32[0]);
        v84 = vmul_f32(v83, v83);
        v83.i32[0] = v36.i32[0];
        v85 = vsub_f32(*(float32x2_t *)v98.f32, v83).u32[0];
        v36.i32[1] = v84.i32[1];
        v86.i64[1] = v36.i64[0];
        v36.f32[0] = 0.5 / v83.f32[1];
      }
      else
      {
        if (v97 >= v99 && v97 >= v94.f32[2])
        {
          v104 = sqrtf((float)((float)(v97 + 1.0) - v99) - v94.f32[2]);
          v87.f32[0] = v104 * v104;
          v87.f32[1] = v36.f32[0] + v98.f32[0];
          v105 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v100), v94.u32[0]), *(float32x2_t *)v94.f32);
LABEL_47:
          *(int32x2_t *)&v87.u32[2] = v105;
          *(float *)v105.i32 = 0.5 / v104;
          v86 = (float32x4_t)vdupq_lane_s32(v105, 0);
          goto LABEL_38;
        }
        if (v99 > v94.f32[2])
        {
          v104 = sqrtf((float)((float)(v99 + 1.0) - v97) - v94.f32[2]);
          v87.f32[0] = v36.f32[0] + v98.f32[0];
          v103 = (float32x2_t)vrev64_s32(*(int32x2_t *)v94.f32);
          v87.f32[1] = v104 * v104;
          v105 = (int32x2_t)vadd_f32(v103, (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v100)));
          goto LABEL_47;
        }
        v106 = sqrtf((float)((float)(v94.f32[2] + 1.0) - v97) - v99);
        v86.i32[0] = vsubq_f32(v94, v94).u32[0];
        v86.f32[1] = v94.f32[1] + v100;
        v86.f32[2] = v106 * v106;
        v86.f32[3] = v98.f32[0] - v36.f32[0];
        v36.f32[0] = 0.5 / v106;
      }
      v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0);
LABEL_38:
      v36 = vmulq_f32(v86, v87);
      *v76++ = v36;
      ++v75;
      --v74;
    }
    while (v74);
  }
  return result;
}

void sub_1B208DA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  os_unfair_lock_s *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _QWORD *v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  size_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int32x4_t v170;
  int8x16_t v171;
  int8x16_t v172;
  float32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int8x16_t v183;
  int8x16_t v184;
  float v185;
  float32x2_t v186;
  float32x2_t v187;
  float32x2_t v188;
  uint64_t v189;
  int32x2_t v190;
  int8x16_t v191;
  uint64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  _QWORD *v195;
  uint64_t v196;
  int v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  os_unfair_lock_s *v203;
  uint64_t v204;
  uint64_t v205;
  float32x4_t v206;
  float32x2_t v207;
  uint64_t v208;
  float32x4_t v209;
  _QWORD *v210;
  uint64_t v211;
  float32x4_t v212;
  uint64_t v213;
  _QWORD *v214;
  float32x4_t v215;
  int v216;
  uint64_t v217;
  float32x4_t v218;
  uint64_t v219;
  int v220;
  float32x4_t v221;
  float32x4_t v222;
  uint64_t v223;
  float32x4_t v224;
  int32x4_t v225;
  uint64_t v226;
  float32x4_t v227;
  float32x4_t v228;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int8 v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 v237;
  uint64_t v238;
  uint64_t v239;
  unsigned __int8 v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  float32x4_t v250;
  float32x4_t v251;
  uint64_t v252;
  float32x4_t v253;
  uint64_t v254;
  float32x4_t v255;
  uint64_t v256;
  void *v257;
  void *v258;
  _QWORD *v259;
  float32x4_t v260;
  float32x4_t v261;
  uint64_t v262;
  uint64_t v263;
  float32x4_t v264;
  float32x4_t v265;
  uint64_t v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  uint64_t v270;
  _BYTE v271[40];
  _QWORD v272[3];
  char v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  _OWORD v278[2];
  uint64_t v279;
  _OWORD v280[2];
  uint64_t v281;
  _OWORD v282[2];
  uint64_t v283;
  uint64_t v284;
  int v285;
  char v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  char v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296[12];
  _BYTE v297[24];
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  char v301;
  _OWORD v302[2];
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  _OWORD v309[4];
  char v310;
  _OWORD v311[2];
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _BYTE v318[40];
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _BYTE v329[40];
  uint64_t v330;

  v6 = v5;
  v330 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 272) == 1)
  {
    v10 = *(_QWORD *)(a1 + 464);
    if (v10 < a3)
    {
      v11 = *(_QWORD *)(a5 + 8);
      sub_1B1BEE528(a5);
      sub_1B1FEA64C(v11, a4, a1, a3, v10, a5);
      sub_1B1B4F21C(a5);
    }
    return;
  }
  v13 = sub_1B1C8DF10(*(_DWORD *)(*(_QWORD *)a1 + 204));
  if (v13 == a3)
    return;
  v14 = v13;
  if (*(_QWORD *)(a2 + 16))
  {
    v15 = sub_1B1DC3B00(0x6E6F697469736F70, 0xE800000000000000);
    if ((v16 & 1) != 0)
    {
      v17 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v15);
      v18 = v17[1];
      v19 = v17[2];
      v20 = v17[3];
      v21 = (void *)swift_unknownObjectRetain();
      v22 = sub_1B2083334(v21, v18, v19, v20);
      v247 = v23;
      v248 = (uint64_t)v22;
      LOBYTE(v19) = v24;
      swift_unknownObjectRelease();
      v25 = v19 & 1;
    }
    else
    {
      v247 = 0;
      v248 = 0;
      v25 = 1;
    }
    v246 = v25;
    if (*(_QWORD *)(a2 + 16))
    {
      v27 = sub_1B1DC3B00(0x7461746E6569726FLL, 0xEB000000006E6F69);
      if ((v28 & 1) != 0)
      {
        v29 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v27);
        v30 = v29[1];
        v31 = v29[2];
        v32 = v29[3];
        v33 = (void *)swift_unknownObjectRetain();
        v34 = sub_1B20833D8(v33, v30, v31, v32);
        v244 = v35;
        v245 = (uint64_t)v34;
        LOBYTE(v31) = v36;
        swift_unknownObjectRelease();
        v37 = v31 & 1;
      }
      else
      {
        v244 = 0;
        v245 = 0;
        v37 = 1;
      }
      v243 = v37;
      if (*(_QWORD *)(a2 + 16) && (v38 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000), (v39 & 1) != 0))
      {
        v40 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v38);
        v41 = v40[1];
        v42 = v40[2];
        v43 = v40[3];
        v44 = (void *)swift_unknownObjectRetain();
        v45 = sub_1B20833D8(v44, v41, v42, v43);
        v241 = v46;
        v242 = (uint64_t)v45;
        LOBYTE(v42) = v47;
        swift_unknownObjectRelease();
        v26 = v42 & 1;
      }
      else
      {
        v241 = 0;
        v242 = 0;
        v26 = 1;
      }
    }
    else
    {
      v244 = 0;
      v245 = 0;
      v241 = 0;
      v242 = 0;
      v26 = 1;
      v243 = 1;
    }
  }
  else
  {
    v244 = 0;
    v245 = 0;
    v247 = 0;
    v248 = 0;
    v241 = 0;
    v242 = 0;
    v26 = 1;
    v243 = 1;
    v246 = 1;
  }
  v240 = v26;
  if (*(_QWORD *)(a2 + 16))
  {
    v48 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
    if ((v49 & 1) != 0)
    {
      v50 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v48);
      v51 = v50[1];
      v52 = v50[2];
      v53 = v50[3];
      v54 = (void *)swift_unknownObjectRetain();
      v55 = sub_1B20831FC(v54, v51, v52, v53);
      v238 = v56;
      v239 = (uint64_t)v55;
      LOBYTE(v52) = v57;
      swift_unknownObjectRelease();
      v58 = v52 & 1;
    }
    else
    {
      v238 = 0;
      v239 = 0;
      v58 = 1;
    }
    v237 = v58;
    if (*(_QWORD *)(a2 + 16))
    {
      v60 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
      if ((v61 & 1) != 0)
      {
        v62 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v60);
        v63 = v62[1];
        v64 = v62[2];
        v65 = v62[3];
        v66 = (void *)swift_unknownObjectRetain();
        v67 = sub_1B2083298(v66, v63, v64, v65);
        v235 = v68;
        v236 = (uint64_t)v67;
        LOBYTE(v64) = v69;
        swift_unknownObjectRelease();
        v70 = v64 & 1;
      }
      else
      {
        v235 = 0;
        v236 = 0;
        v70 = 1;
      }
      v234 = v70;
      if (*(_QWORD *)(a2 + 16) && (v71 = sub_1B1DC3B00(1702521203, 0xE400000000000000), (v72 & 1) != 0))
      {
        v73 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v71);
        v74 = v73[1];
        v75 = v73[2];
        v76 = v73[3];
        v77 = (void *)swift_unknownObjectRetain();
        v78 = sub_1B2083334(v77, v74, v75, v76);
        v232 = v79;
        v233 = (uint64_t)v78;
        LOBYTE(v75) = v80;
        swift_unknownObjectRelease();
        v59 = v75 & 1;
      }
      else
      {
        v232 = 0;
        v233 = 0;
        v59 = 1;
      }
    }
    else
    {
      v235 = 0;
      v236 = 0;
      v232 = 0;
      v233 = 0;
      v59 = 1;
      v234 = 1;
    }
  }
  else
  {
    v235 = 0;
    v236 = 0;
    v238 = 0;
    v239 = 0;
    v232 = 0;
    v233 = 0;
    v59 = 1;
    v234 = 1;
    v237 = 1;
  }
  v231 = v59;
  v257 = v6;
  v81 = *(_QWORD *)(a5 + 32);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v82 = qword_1ED4D09F8;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v83 + 32) = &type metadata for Particle;
  *(_QWORD *)(v83 + 40) = &off_1E63C21B0;
  v290 = v82;
  v291 = 0;
  v292 = 2;
  v293 = 0;
  v294 = 2;
  v295 = 0;
  swift_retain();
  sub_1B1E68AF8(v83, 1, (uint64_t)v271);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  sub_1B20930B4(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0);
  v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v84 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v84 + 64) = &off_1E6387218;
  *(_QWORD *)(v84 + 32) = v81;
  sub_1B1E68A14(v84, (uint64_t)v272);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v271);
  v284 = v272[0];
  v285 = 0;
  v286 = 2;
  v287 = v272[2];
  v288 = v273;
  v289 = v274;
  v86 = v14 - a3;
  if (v14 < a3)
  {
    v87 = a3 - v14;
    v88 = a4;
    v89 = *(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index(v85)
                    + 8);
    v90 = a5;
    v91 = *(unsigned int *)(a5 + 40);
    v92 = *(_BYTE *)(a5 + 44);
    v93 = swift_retain();
    LOBYTE(v319) = v92;
    sub_1B1F0A3A0(v93, v91 | ((unint64_t)v92 << 32), v87, v89);
    swift_release();
    goto LABEL_96;
  }
  v88 = a4;
  sub_1B1E8FCE4(a4, (uint64_t)&v284, 0x200000000, v296);
  sub_1B1A18378((uint64_t)v296, (uint64_t)v311, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v311[0])
    goto LABEL_94;
  if (v317 <= 0 || (v226 = v314) == 0)
  {
    sub_1B19ED748(v296);
LABEL_94:
    v90 = a5;
    goto LABEL_96;
  }
  v94 = 0;
  v95 = v316;
  v96 = v316[4];
  v97 = *(unsigned __int8 *)(v315 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v217 = (uint64_t)(v316 + 6);
  v259 = v316 + 13;
  v214 = v316 + 8;
  v278[0] = v311[0];
  v278[1] = v311[1];
  v211 = v313;
  v279 = v312;
  v223 = v96;
  v220 = v97;
  do
  {
    v98 = (unsigned int *)(v211 + 48 * v94);
    v100 = *v98;
    v99 = v98[1];
    v254 = *((_QWORD *)v98 + 2);
    v101 = *((_QWORD *)v98 + 5);
    v252 = *((_QWORD *)v98 + 4);
    v249 = v94;
    if (v97)
    {
      v102 = *(os_unfair_lock_s **)(v101 + 376);
      swift_retain();
      os_unfair_lock_lock(v102);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v101 + 344));
    }
    else
    {
      swift_retain();
    }
    v267 = v101;
    ecs_stack_allocator_push_snapshot(v96);
    sub_1B1A18378(v217, (uint64_t)v329, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v103 = v95[4];
    v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v105 = (_QWORD *)v267;
    v95[6] = ecs_stack_allocator_allocate(v103, 48 * v104, 8);
    v95[7] = v104;
    v214[1] = 0;
    v214[2] = 0;
    *v214 = 0;
    swift_release();
    v106 = v254;
    if (v254)
    {
      v107 = v252;
      if (v252)
      {
        v108 = 0;
        do
        {
          v109 = v86 - 1;
          if (v86 >= 1)
          {
            v110 = *(_QWORD *)(v106 + 8 * v108);
            v111 = v105[29];
            if (v110 < v105[32] || v110 >= v111)
            {
              v300 = 0;
              v299 = 0u;
              v298 = 0u;
              v301 = 5;
              v113 = *v259;
              if (*(_QWORD *)(*v259 + 16))
              {
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B1F09F2C(v113 + 32, (uint64_t)v302);
                sub_1B1BE90FC((uint64_t)v302, (uint64_t)&v319);
                sub_1B1BE90FC((uint64_t)&v298, (uint64_t)&v322);
                __asm { BR              X9 }
              }
              swift_retain();
              v114 = v105[30] - v111;
              v115 = ecs_stack_allocator_allocate(v95[4], 8 * v114, 8);
              *v115 = v110;
              sub_1B1BE90FC((uint64_t)&v298, (uint64_t)&v319);
              *(_QWORD *)&v322 = v115;
              *((_QWORD *)&v322 + 1) = v114;
              v323 = 1;
              v116 = (_QWORD *)v95[13];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v95[13] = v116;
              v109 = v86 - 1;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v116 = sub_1B1C631A0(0, v116[2] + 1, 1, v116);
                *v259 = v116;
              }
              v119 = v116[2];
              v118 = v116[3];
              if (v119 >= v118 >> 1)
              {
                v116 = sub_1B1C631A0(v118 > 1, v119 + 1, 1, v116);
                *v259 = v116;
              }
              v116[2] = v119 + 1;
              v120 = &v116[9 * v119];
              *((_OWORD *)v120 + 2) = v319;
              v121 = v320;
              v122 = v321;
              v123 = v322;
              v120[12] = v323;
              *((_OWORD *)v120 + 4) = v122;
              *((_OWORD *)v120 + 5) = v123;
              *((_OWORD *)v120 + 3) = v121;
              v105 = (_QWORD *)v267;
              v106 = v254;
              v107 = v252;
              sub_1B1B68F14((uint64_t)&v298);
              swift_release();
            }
            v86 = v109;
          }
          ++v108;
        }
        while (v108 != v107);
      }
    }
    else if ((_DWORD)v100 != (_DWORD)v99)
    {
      v263 = v99;
      do
      {
        if (v86 >= 1)
        {
          v133 = v105[29];
          if (v100 < v105[32] || v100 >= v133)
          {
            v300 = 0;
            v299 = 0u;
            v298 = 0u;
            v301 = 5;
            v135 = *v259;
            if (*(_QWORD *)(*v259 + 16))
            {
              swift_retain();
              swift_bridgeObjectRetain();
              sub_1B1F09F2C(v135 + 32, (uint64_t)v302);
              sub_1B1BE90FC((uint64_t)v302, (uint64_t)&v319);
              sub_1B1BE90FC((uint64_t)&v298, (uint64_t)&v322);
              __asm { BR              X9 }
            }
            swift_retain();
            v136 = v105[30] - v133;
            v137 = ecs_stack_allocator_allocate(v95[4], 8 * v136, 8);
            *v137 = v100;
            sub_1B1BE90FC((uint64_t)&v298, (uint64_t)&v319);
            *(_QWORD *)&v322 = v137;
            *((_QWORD *)&v322 + 1) = v136;
            v323 = 1;
            v138 = (_QWORD *)v95[13];
            v139 = swift_isUniquelyReferenced_nonNull_native();
            v95[13] = v138;
            if ((v139 & 1) == 0)
            {
              v138 = sub_1B1C631A0(0, v138[2] + 1, 1, v138);
              *v259 = v138;
            }
            v141 = v138[2];
            v140 = v138[3];
            if (v141 >= v140 >> 1)
            {
              v138 = sub_1B1C631A0(v140 > 1, v141 + 1, 1, v138);
              *v259 = v138;
            }
            v138[2] = v141 + 1;
            v142 = &v138[9 * v141];
            *((_OWORD *)v142 + 2) = v319;
            v143 = v320;
            v144 = v321;
            v145 = v322;
            v142[12] = v323;
            *((_OWORD *)v142 + 4) = v144;
            *((_OWORD *)v142 + 5) = v145;
            *((_OWORD *)v142 + 3) = v143;
            v105 = (_QWORD *)v267;
            v99 = v263;
            sub_1B1B68F14((uint64_t)&v298);
            swift_release();
          }
          --v86;
        }
        ++v100;
      }
      while (v100 != v99);
    }
    sub_1B1F05D48(v95, (unsigned __int16 **)v278, (uint64_t)v329);
    v96 = v223;
    if (*(_QWORD *)(v95[13] + 16))
    {
      v124 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v124, v267);
      swift_bridgeObjectRelease();
      v125 = swift_isUniquelyReferenced_nonNull_native();
      v126 = v95[13];
      if ((v125 & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v126 + 16));
      }
      else
      {
        v127 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v126 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v127 = (_QWORD *)swift_allocObject();
          v128 = j__malloc_size(v127);
          v127[2] = 0;
          v127[3] = 2 * ((uint64_t)(v128 - 32) / 72);
        }
        *v259 = v127;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v95[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v129 = v267;
        v130 = *(char **)(v267 + 232);
        v131 = *(char **)(v267 + 256);
        if (v130 == v131)
        {
          v132 = *(char **)(v267 + 240);
        }
        else
        {
          sub_1B1A1059C(v131, v130);
          v131 = *(char **)(v267 + 232);
          v132 = *(char **)(v267 + 240);
          if (v132 == v131)
          {
            v132 = 0;
            v131 = 0;
            *(_QWORD *)(v267 + 232) = 0;
            *(_QWORD *)(v267 + 240) = 0;
          }
          v129 = v267;
        }
        *(_QWORD *)(v129 + 248) = v132;
        *(_QWORD *)(v129 + 256) = v131;
      }
    }
    ecs_stack_allocator_pop_snapshot(v223);
    v97 = v220;
    if ((v220 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v267 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v267 + 376));
    }
    swift_release();
    v94 = v249 + 1;
  }
  while (v249 + 1 != v226);
  sub_1B19ED748(v296);
  v6 = v257;
  v88 = a4;
  v90 = a5;
LABEL_96:
  sub_1B1D15764(*(_QWORD **)(v90 + 8), (uint64_t)v297);
  sub_1B1A18378((uint64_t)v297, (uint64_t)v309, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v310 & 1) != 0)
  {
    v255 = (float32x4_t)xmmword_1B2244E20;
    v268 = (float32x4_t)xmmword_1B2244D90;
    v264 = (float32x4_t)xmmword_1B2244DD0;
    v260 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v260 = (float32x4_t)v309[0];
    v264 = (float32x4_t)v309[1];
    v268 = (float32x4_t)v309[2];
    v255 = (float32x4_t)v309[3];
  }
  *(double *)v146.i64 = sub_1B1E52854();
  v150 = v149;
  v151 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v260.f32[0]), v147, *(float32x2_t *)v260.f32, 1), v149, v260, 2), v148, v260, 3);
  v152 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v264.f32[0]), v147, *(float32x2_t *)v264.f32, 1), v149, v264, 2), v148, v264, 3);
  v153 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v268.f32[0]), v147, *(float32x2_t *)v268.f32, 1), v149, v268, 2), v148, v268, 3);
  v154 = (int32x4_t)vmulq_f32(v151, v151);
  v155 = (int32x4_t)vmulq_f32(v152, v152);
  v156 = (int32x4_t)vmulq_f32(v153, v153);
  v157 = vdupq_laneq_s32(v155, 2);
  v158 = (float32x4_t)vtrn2q_s32(v154, v155);
  v158.i32[2] = v156.i32[1];
  v159 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v154, v156), v157), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v154, v156), v155), v158));
  v158.i64[0] = 0x80000000800000;
  v158.i64[1] = 0x80000000800000;
  v160 = vcgeq_f32(v158, v159);
  v159.i32[3] = 0;
  v161 = vrsqrteq_f32(v159);
  v162 = vmulq_f32(v161, vrsqrtsq_f32(v159, vmulq_f32(v161, v161)));
  v163 = v160;
  v163.i32[3] = 0;
  v164 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v163), (int8x16_t)v159, (int8x16_t)vmulq_f32(v162, vrsqrtsq_f32(v159, vmulq_f32(v162, v162))));
  v251 = v152;
  v253 = v151;
  v165 = vmulq_n_f32(v151, v164.f32[0]);
  v166 = vmulq_lane_f32(v152, *(float32x2_t *)v164.f32, 1);
  v250 = v153;
  v167 = vmulq_laneq_f32(v153, v164, 2);
  v168 = (int8x16_t)vuzp1q_s32((int32x4_t)v167, (int32x4_t)v167);
  v169 = (int8x16_t)vuzp1q_s32((int32x4_t)v166, (int32x4_t)v166);
  v170 = (int32x4_t)v165;
  if (v160.i32[0])
  {
    v171 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v168, (int8x16_t)v167, 0xCuLL), vnegq_f32(v166)), v167, (float32x4_t)vextq_s8(v169, (int8x16_t)v166, 0xCuLL));
    v170 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v171, (int32x4_t)v171), v171, 0xCuLL);
  }
  v172 = (int8x16_t)vuzp1q_s32((int32x4_t)v165, (int32x4_t)v165);
  v173 = v166;
  if (v160.i32[1])
  {
    v174 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v172, (int8x16_t)v165, 0xCuLL), vnegq_f32(v167)), v165, (float32x4_t)vextq_s8(v168, (int8x16_t)v167, 0xCuLL));
    v173 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v174, (int32x4_t)v174), v174, 0xCuLL);
  }
  if (v160.i32[2])
  {
    v175 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v169, (int8x16_t)v166, 0xCuLL), vnegq_f32(v165)), v166, (float32x4_t)vextq_s8(v172, (int8x16_t)v165, 0xCuLL));
    v166 = (float32x4_t)vuzp1q_s32((int32x4_t)v175, (int32x4_t)v175);
    v167 = (float32x4_t)vextq_s8((int8x16_t)v166, v175, 0xCuLL);
  }
  v176 = (float)(*(float *)v170.i32 + v173.f32[1]) + v167.f32[2];
  v224 = v150;
  v227 = v148;
  v218 = v146;
  v221 = v147;
  v265 = (float32x4_t)v155;
  v269 = (float32x4_t)v156;
  v261 = (float32x4_t)v157;
  v215 = (float32x4_t)v154;
  if (v176 > 0.0)
  {
    v177 = (float32x4_t)vzip2q_s32((int32x4_t)v173, vuzp1q_s32((int32x4_t)v173, (int32x4_t)v167));
    v177.i32[2] = v170.i32[1];
    v178 = sqrtf(v176 + 1.0);
    v179 = (float32x4_t)vtrn2q_s32((int32x4_t)v167, vzip2q_s32((int32x4_t)v167, v170));
    v179.i32[2] = v173.i32[0];
    v180 = vsubq_f32(v177, v179);
    v177.f32[3] = v178;
    v179.f32[3] = v178;
    v181 = vmulq_f32(v177, v179);
    v180.i32[3] = v181.i32[3];
    v212 = v180;
LABEL_107:
    v181.f32[0] = 0.5 / v178;
    v209 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v181.f32, 0);
    goto LABEL_116;
  }
  if (*(float *)v170.i32 < v173.f32[1] || *(float *)v170.i32 < v167.f32[2])
  {
    if (v173.f32[1] <= v167.f32[2])
    {
      v178 = sqrtf((float)((float)(v167.f32[2] + 1.0) - *(float *)v170.i32) - v173.f32[1]);
      *(float32x2_t *)v206.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v170, (int32x4_t)v173), *(float32x2_t *)v167.f32);
      v207 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.f32, 0);
      *(float32x2_t *)v181.f32 = vsub_f32(*(float32x2_t *)v170.i8, v207);
      v207.f32[0] = v178;
      LODWORD(v208) = vmul_f32((float32x2_t)__PAIR64__(v170.u32[1], LODWORD(v178)), v207).u32[0];
      HIDWORD(v208) = v181.i32[1];
      v206.i64[1] = v208;
      v212 = v206;
      goto LABEL_107;
    }
    v185 = sqrtf((float)((float)(v173.f32[1] + 1.0) - *(float *)v170.i32) - v167.f32[2]);
    *(int32x2_t *)v166.f32 = vdup_laneq_s32((int32x4_t)v173, 2);
    v183 = (int8x16_t)v166;
    *(float *)v183.i32 = v185;
    v183.i32[0] = vmul_f32(*(float32x2_t *)v183.i8, (float32x2_t)__PAIR64__(v167.u32[1], LODWORD(v185))).u32[0];
    v183.i32[1] = vadd_f32(*(float32x2_t *)&v166, *(float32x2_t *)&v167).i32[1];
    v184 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v170.i8, 1), v173);
    v190 = (int32x2_t)vsubq_f32(v167, (float32x4_t)vdupq_laneq_s32(v170, 2)).u64[0];
    v191 = vextq_s8(vextq_s8(v184, v184, 4uLL), v183, 0xCuLL);
    v191.i32[3] = v190.i32[0];
  }
  else
  {
    v185 = sqrtf((float)((float)(*(float *)v170.i32 + 1.0) - v173.f32[1]) - v167.f32[2]);
    v186 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.f32, 0);
    v187 = vadd_f32(*(float32x2_t *)v170.i8, v186);
    v186.f32[0] = v185;
    v191.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v170.u32[1], LODWORD(v185)), v186).u32[0];
    v191.i32[1] = v187.i32[1];
    v188 = (float32x2_t)vzip2q_s32(v170, (int32x4_t)v173).u64[0];
    LODWORD(v189) = vadd_f32(v188, *(float32x2_t *)v167.f32).u32[0];
    v190 = (int32x2_t)vsub_f32(v188, *(float32x2_t *)v167.f32);
    HIDWORD(v189) = v190.i32[1];
    v191.i64[1] = v189;
  }
  *(float *)v190.i32 = 0.5 / v185;
  v209 = (float32x4_t)v191;
  v212 = (float32x4_t)vdupq_lane_s32(v190, 0);
LABEL_116:
  sub_1B1E8FCE4(v88, (uint64_t)&v284, 0x200000000, &v298);
  sub_1B1A18378((uint64_t)&v298, (uint64_t)v302, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v302[0])
  {
    v275 = v302[0];
    v276 = v302[1];
    v277 = v303;
    v230 = v308;
    if (v308 <= 0)
    {
      sub_1B19ED720((uint64_t)v272);
      sub_1B19ED748((uint64_t *)&v298);
    }
    else
    {
      v258 = v6;
      v192 = v305;
      if (v305)
      {
        v193 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v218, v255.f32[0]), v221, *(float32x2_t *)v255.f32, 1), v224, v255, 2), v227, v255, 3);
        v225 = (int32x4_t)vmulq_f32(v212, v209);
        v228 = v193;
        v194.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(vaddq_f32(v261, vaddq_f32(v265, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v265.f32, 1))).f32[0])), COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v215, 2), vaddq_f32(v215, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v215.f32, 1))).f32[0])));
        v194.i64[1] = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v269, 2), vaddq_f32(v269, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v269.f32, 1))).f32[0]));
        v222 = v194;
        v195 = v307;
        v196 = v307[4];
        v219 = v306;
        v197 = *(unsigned __int8 *)(v306 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v213 = (uint64_t)(v307 + 6);
        v210 = v307 + 8;
        v198 = (uint64_t *)(v304 + 24);
        v216 = v197;
        while (1)
        {
          v270 = v192;
          v199 = *((unsigned int *)v198 - 6);
          v200 = *((unsigned int *)v198 - 5);
          v201 = *((unsigned int *)v198 - 4);
          v266 = *(v198 - 1);
          v262 = *v198;
          v202 = v198[2];
          v256 = v198[1];
          if (v197)
          {
            v203 = *(os_unfair_lock_s **)(v202 + 376);
            swift_retain();
            os_unfair_lock_lock(v203);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v202 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v196);
          sub_1B1A18378(v213, (uint64_t)v318, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v204 = v195[4];
          v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v195[6] = ecs_stack_allocator_allocate(v204, 48 * v205, 8);
          v195[7] = v205;
          v210[1] = 0;
          v210[2] = 0;
          *v210 = 0;
          swift_release();
          *(_QWORD *)&v319 = v219;
          *((_QWORD *)&v319 + 1) = v202;
          *(_QWORD *)&v320 = v195;
          *((_QWORD *)&v320 + 1) = v201;
          *(_QWORD *)&v321 = (v200 - v199 + v201);
          *((_QWORD *)&v321 + 1) = v230;
          *(_QWORD *)&v322 = v199;
          *((_QWORD *)&v322 + 1) = v200;
          v323 = 0;
          v324 = 0;
          v325 = 1;
          v326 = v266;
          v327 = v262;
          v328 = v256;
          sub_1B208BB94(&v319, v248, v253, v251, v250, v228, v225, v222, v247, v246, v245, v244, v243, v242, v241, v240, v239, v238, v237,
            v236,
            v235,
            v234,
            v233,
            v232,
            v231);
          if (v258)
            break;
          v282[0] = v275;
          v282[1] = v276;
          v283 = v277;
          sub_1B1F05D48(v195, (unsigned __int16 **)v282, (uint64_t)v318);
          v258 = 0;
          sub_1B1F03804((char *)v202);
          ecs_stack_allocator_pop_snapshot(v196);
          v197 = v216;
          if (v216)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v202 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v202 + 376));
          }
          swift_release();
          v198 += 6;
          v192 = v270 - 1;
          if (v270 == 1)
            goto LABEL_127;
        }

        v280[0] = v275;
        v280[1] = v276;
        v281 = v277;
        sub_1B1F05D48(v195, (unsigned __int16 **)v280, (uint64_t)v318);
        sub_1B1F03804((char *)v202);
        ecs_stack_allocator_pop_snapshot(v196);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v202 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v202 + 376));
        __break(1u);
      }
      else
      {
LABEL_127:
        sub_1B19ED720((uint64_t)v272);
        sub_1B19ED748((uint64_t *)&v298);
      }
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v272);
  }
}

uint64_t sub_1B208F31C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

uint64_t sub_1B208F364(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x636143746E696F70 && a2 == 0xEA00000000006568;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B232D290 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4374697265686E69 && a2 == 0xEC000000726F6C6FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B23289F0 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5374697265686E69 && a2 == 0xEB00000000657A69)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1B208F5AC()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B208F5F4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = result;
    result = sub_1B1DC40B0(0);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * result);
      v7 = *(_QWORD *)(v6 + OBJC_IVAR___VFXREBindingMeshData_buffer);
      v8 = *(unsigned __int16 *)(v6 + OBJC_IVAR___VFXREBindingMeshData_offset);
      v9 = *(unsigned int *)(v6 + OBJC_IVAR___VFXREBindingMeshData_length);
      v10 = *(_QWORD *)(v6 + OBJC_IVAR___VFXREBindingMeshData_format);
      a2[3] = v9 / sub_1B1F9C91C(v10);
      swift_unknownObjectRetain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = *a2;
      *a2 = 0x8000000000000000;
      sub_1B1B89F54(v7, v8, v9, v10, 0x6E6F697469736F70, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
      *a2 = v27;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v4 + 16);
      if (*(_QWORD *)(v12 + 16) && (v13 = sub_1B1DC40B0(2), (v14 & 1) != 0))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
        v16 = *(unsigned __int16 *)(v15 + OBJC_IVAR___VFXREBindingMeshData_offset);
        v17 = *(unsigned int *)(v15 + OBJC_IVAR___VFXREBindingMeshData_length);
        v18 = *(_QWORD *)(v15 + OBJC_IVAR___VFXREBindingMeshData_format);
        v19 = swift_unknownObjectRetain();
      }
      else
      {
        v19 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
      }
      sub_1B20836FC(v19, v16, v17, v18, 0x6C616D726F6ELL, 0xE600000000000000);
      if (*(_QWORD *)(v12 + 16) && (v20 = sub_1B1DC40B0(4), (v21 & 1) != 0))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20);
        v23 = *(unsigned __int16 *)(v22 + OBJC_IVAR___VFXREBindingMeshData_offset);
        v24 = *(unsigned int *)(v22 + OBJC_IVAR___VFXREBindingMeshData_length);
        v25 = *(_QWORD *)(v22 + OBJC_IVAR___VFXREBindingMeshData_format);
        v26 = swift_unknownObjectRetain();
      }
      else
      {
        v26 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
      }
      sub_1B20836FC(v26, v23, v24, v25, 0x726F6C6F63, 0xE500000000000000);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B208F850(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;

  v44 = a3;
  v45 = a2;
  v5 = sub_1B2228110();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[2];
  v9 = a1[3];
  v11 = (void *)a1[4];
  if (v11)
  {
    v12 = a1[5];
    ObjectType = swift_getObjectType();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
    swift_bridgeObjectRetain();
    v15 = v11;
    v14(v10, v9, ObjectType, v12);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v48 = 0;
    v49 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v16 = v48;
    v17 = v49;
    v18 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v48 = 0;
    swift_retain();
    sub_1B1F1AD70(v18, &v48, v16, v17);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  sub_1B2228014();
  v19 = sub_1B22287B8();
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = v19 == 0x656863616370 && v21 == 0xE600000000000000;
  if (v22 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = sub_1B2228128();
    v25 = v3;
    if (!v3)
    {
      v26 = v23;
      v27 = v24;
      sub_1B2089894(v23, v24, v45);
      sub_1B1A0DADC(v26, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v8, v47);
    }
    goto LABEL_35;
  }
  v28 = v19 == 6513249 && v21 == 0xE300000000000000;
  if (v28 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1B1F3BA48();
    if (!v3)
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v8, v47);
    v25 = v3;
    goto LABEL_35;
  }
  v29 = v19 == 7957616 && v21 == 0xE300000000000000;
  if (v29 || (sub_1B2229D24() & 1) != 0 || v19 == 1887005808 && v21 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v30 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
LABEL_34:
    v31 = sub_1B2228128();
    v25 = v3;
    if (!v3)
    {
      v37 = v31;
      v38 = v32;
      v39 = sub_1B222805C();
      sub_1B1FA5180(v37, v38, v39, v40, (uint64_t)v45);
      swift_bridgeObjectRelease();
      sub_1B1A0DADC(v37, v38);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v8, v47);
    }
LABEL_35:
    if (qword_1ED4BF430 != -1)
      swift_once();
    v48 = 0;
    v49 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v50 = v25;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    sub_1B2228890();
    v33 = v48;
    v34 = v49;
    v35 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v48 = 0;
    swift_retain();
    sub_1B1F1AD70(v35, &v48, v33, v34);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v8, v47);
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v48 = 0;
  v49 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v48 = 0xD000000000000013;
  v49 = 0x80000001B234A5B0;
  sub_1B2228014();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v41 = v48;
  v42 = v49;
  v43 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v48 = 0;
  swift_retain();
  sub_1B1F1AD70(v43, &v48, v41, v42);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v8, v47);
}

uint64_t sub_1B208FF30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __objc2_class *Class;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[248];
  _BYTE v13[248];
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v1 = *(_QWORD *)(a1 + 32);
  sub_1B1D16FF8(v1, (uint64_t)&v14);
  v2 = v15;
  if (!v15)
    return 0;
  v3 = v14;
  v4 = v16;
  if (!v16)
  {
LABEL_6:
    sub_1B1D15F04(v1, (uint64_t)v12);
    sub_1B1A18378((uint64_t)v12, (uint64_t)v13, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
    sub_1B1A18378((uint64_t)v13, (uint64_t)&v14, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
    if (sub_1B1B3C438(&v14) == 1)
    {
      sub_1B1D2DD24(v3, v2);
    }
    else if (*(_QWORD *)(v17 + 16))
    {
      v11 = v3;
      v6 = *(_QWORD *)(v17 + 32);
      v7 = *(_QWORD *)(v17 + 40);
      v10 = *(_QWORD *)(v17 + 48);
      v8 = *(unsigned __int8 *)(v17 + 56);
      swift_bridgeObjectRetain();
      sub_1B1CC60E4(v6, v7, v10, v8);
      sub_1B1CC6104((uint64_t)v13);
      sub_1B1D2DD24(v11, v2);
      swift_bridgeObjectRelease();
      if (v8 == 2)
        return v6;
      sub_1B1CC62AC(v6, v7, v10, v8);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1B1CC6104((uint64_t)v13);
      sub_1B1D2DD24(v3, v2);
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  Class = (__objc2_class *)object_getClass(v16);
  if (Class == _TtC3VFX13PBRParameters)
  {
    swift_unknownObjectRetain();
    sub_1B1D2DD24(v3, v2);
    v6 = v4[4];
  }
  else
  {
    if (Class != _TtC3VFX16PrelitParameters)
      goto LABEL_6;
    swift_unknownObjectRetain();
    sub_1B1D2DD24(v3, v2);
    v6 = v4[2];
  }
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1B20901E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  uint64_t j;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t k;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t m;
  uint64_t result;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  char *v123;
  uint64_t *v124;
  _QWORD v125[2];
  uint64_t v126;
  uint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  __int128 v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  int *v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  id v140;
  uint64_t v141;

  sub_1B1B1F358();
  v135 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v134 = (char *)v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B222820C();
  v132 = *(_QWORD *)(v7 - 8);
  v133 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v131 = (char *)v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[3])
  {
    v127 = a2;
    v128 = a1;
    v10 = a1[5];
    v11 = a1[6];
    v140 = *(id *)(v10 + 16);
    if (v140)
    {
      v125[1] = v10;
      v126 = v11;
      v139 = v10 + 32;
      swift_bridgeObjectRetain();
      v12 = 0;
      v13 = (char *)MEMORY[0x1E0DEE9D8];
      v130 = xmmword_1B226D240;
      v129 = 0x80000001B234A7B0;
      do
      {
        v14 = (_QWORD *)(v139 + ((_QWORD)v12 << 7));
        v15 = (void *)v14[4];
        v16 = v14[11];
        if (*v14 == 3)
        {
          if (v15)
          {
            v17 = v14[5];
            v19 = v14[9];
            v18 = v14[10];
            if (v18 == 2)
            {
              swift_unknownObjectRetain_n();
              swift_bridgeObjectRetain();
              if (objc_msgSend(v15, sel_storageMode) == (id)2)
                goto LABEL_88;
              v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
              v21 = v15;
              if (v19 > 0)
              {
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v141 = v16;
                v138 = v21;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v13 = sub_1B1C699D8(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
                v23 = 0;
                v24 = &v20[v17];
                v25 = *((_QWORD *)v13 + 2);
                v26 = 24 * v25;
                do
                {
                  if (__OFADD__(v23, 3))
                    v27 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v27 = v23 + 3;
                  v28 = &v24[2 * v23];
                  v29 = *(unsigned __int16 *)v28;
                  v30 = *((unsigned __int16 *)v28 + 1);
                  v31 = *((unsigned __int16 *)v28 + 2);
                  v32 = *((_QWORD *)v13 + 3);
                  v33 = v25 + 1;
                  if (v25 >= v32 >> 1)
                    v13 = sub_1B1C699D8(v32 > 1, v25 + 1, 1, v13);
                  *((_QWORD *)v13 + 2) = v33;
                  v34 = &v13[v26];
                  *((_QWORD *)v34 + 4) = v29;
                  *((_QWORD *)v34 + 5) = v30;
                  *((_QWORD *)v34 + 6) = v31;
                  v26 += 24;
                  v25 = v33;
                  v23 = v27;
                }
                while (v27 < v19);
              }
            }
            else
            {
              if (v18 != 4)
                goto LABEL_88;
              swift_unknownObjectRetain_n();
              swift_bridgeObjectRetain();
              if (objc_msgSend(v15, sel_storageMode) == (id)2)
                goto LABEL_88;
              v47 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
              v15;
              if (v19 > 0)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v13 = sub_1B1C699D8(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
                v48 = 0;
                v49 = &v47[v17];
                v50 = *((_QWORD *)v13 + 2);
                v51 = 24 * v50;
                do
                {
                  if (__OFADD__(v48, 3))
                    v52 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v52 = v48 + 3;
                  v53 = &v49[4 * v48];
                  v54 = *(_QWORD *)v53;
                  v55 = *((unsigned int *)v53 + 2);
                  v56 = *((_QWORD *)v13 + 3);
                  v57 = v50 + 1;
                  if (v50 >= v56 >> 1)
                    v13 = sub_1B1C699D8(v56 > 1, v50 + 1, 1, v13);
                  *(_QWORD *)&v58 = v54;
                  *((_QWORD *)&v58 + 1) = HIDWORD(v54);
                  *((_QWORD *)v13 + 2) = v57;
                  v59 = &v13[v51];
                  *((_OWORD *)v59 + 2) = v58;
                  *((_QWORD *)v59 + 6) = v55;
                  v51 += 24;
                  v50 = v57;
                  v48 = v52;
                }
                while (v52 < v19);
              }
            }
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n();
          }
        }
        else
        {
          v35 = qword_1ED4BF430;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          if (v35 != -1)
            swift_once();
          v137 = qword_1ED4D0FB0;
          swift_retain();
          v36 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v141 = v16;
          v138 = v12;
          v37 = qword_1ED4D0FD0;
          v38 = qword_1ED4BF688;
          swift_retain();
          if (v38 != -1)
            swift_once();
          sub_1B20930B4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440);
          v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = v130;
          *(_QWORD *)(v39 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v39 + 64) = sub_1B1B1F47C();
          v40 = v129;
          *(_QWORD *)(v39 + 32) = 0xD00000000000001CLL;
          *(_QWORD *)(v39 + 40) = v40;
          sub_1B222835C();
          swift_bridgeObjectRelease();
          swift_retain();
          v41 = v131;
          sub_1B2228200();
          v42 = v135[12];
          v43 = v135[16];
          v44 = v135[20];
          v136 = v37;
          v45 = (uint64_t)v134;
          v46 = &v134[v44];
          (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v134, v41, v133);
          *(_BYTE *)(v45 + v42) = v36;
          *(_QWORD *)(v45 + v43) = 0;
          *(_QWORD *)v46 = 0xD00000000000001CLL;
          *((_QWORD *)v46 + 1) = v40;
          sub_1B2228428();
          swift_release();
          sub_1B1A04628(v45, (uint64_t (*)(_QWORD))sub_1B1B1F358);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
          v12 = v138;
        }
        v12 = (char *)v12 + 1;
      }
      while (v12 != v140);
      swift_bridgeObjectRelease();
      v11 = v126;
    }
    else
    {
      v13 = (char *)MEMORY[0x1E0DEE9D8];
    }
    v60 = sub_1B19F4348(v11, (__n128)0);
    swift_bridgeObjectRelease();
    v61 = sub_1B1E218F4(0);
    if (v61 && v11)
    {
      v63 = v61;
      v64 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v60 = (uint64_t)sub_1B1FFEF10(v60);
      v65 = 0;
      v66 = (_DWORD *)(v63 + 8);
      do
      {
        *(_QWORD *)&v67 = *((_QWORD *)v66 - 1);
        DWORD2(v67) = *v66;
        v66 = (_DWORD *)((char *)v66 + v64);
        *((_QWORD *)&v67 + 1) = DWORD2(v67);
        *(_OWORD *)(v60 + 16 * v65++ + 32) = v67;
      }
      while (v11 != v65);
    }
    v68 = sub_1B19F4348(v11, (__n128)0);
    swift_bridgeObjectRelease();
    v69 = sub_1B1E218F4(1);
    if (v69 && v11)
    {
      v71 = v69;
      v72 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v68 = (uint64_t)sub_1B1FFEF10(v68);
      v73 = 0;
      v74 = (_DWORD *)(v71 + 8);
      do
      {
        *(_QWORD *)&v75 = *((_QWORD *)v74 - 1);
        DWORD2(v75) = *v74;
        v74 = (_DWORD *)((char *)v74 + v72);
        *((_QWORD *)&v75 + 1) = DWORD2(v75);
        *(_OWORD *)(v68 + 16 * v73++ + 32) = v75;
      }
      while (v11 != v73);
    }
    v76 = sub_1B19F4420(v11, 0.0);
    swift_bridgeObjectRelease();
    v77 = sub_1B1E218F4(2);
    if (v77 && v11)
    {
      v79 = (_QWORD *)v77;
      v80 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v76 = (uint64_t)sub_1B1FFEF9C(v76);
      for (i = 0; i != v11; ++i)
      {
        *(_QWORD *)(v76 + 8 * i + 32) = *v79;
        v79 = (_QWORD *)((char *)v79 + v80);
      }
    }
    __asm { FMOV            V0.4S, #1.0 }
    v87 = sub_1B19F4688(v11, _Q0);
    swift_bridgeObjectRelease();
    v88 = sub_1B1E218F4(4);
    if (v88 && v11)
    {
      v90 = (_OWORD *)v88;
      v91 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v87 = (uint64_t)sub_1B1791044(v87);
      for (j = 0; j != v11; ++j)
      {
        *(_OWORD *)(v87 + 16 * j + 32) = *v90;
        v90 = (_OWORD *)((char *)v90 + v91);
      }
    }
    v93 = sub_1B19F4768(v11, 0.0);
    swift_bridgeObjectRelease();
    v94 = sub_1B1E218F4(9);
    if (v94 && v11)
    {
      v96 = (_QWORD *)v94;
      v97 = v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v93 = (uint64_t)sub_1B1FFF0CC(v93);
      for (k = 0; k != v11; ++k)
      {
        *(_QWORD *)(v93 + 8 * k + 32) = *v96;
        v96 = (_QWORD *)((char *)v96 + v97);
      }
    }
    v99 = sub_1B19F4688(v11, (__n128)0);
    swift_bridgeObjectRelease();
    v100 = sub_1B1E218F4(8);
    if (v100 && v11)
    {
      v103 = (__int128 *)v100;
      v104 = v101;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v99 = (uint64_t)sub_1B1791044(v99);
      for (m = 0; m != v11; ++m)
      {
        v102 = *v103;
        *(_OWORD *)(v99 + 16 * m + 32) = *v103;
        v103 = (__int128 *)((char *)v103 + v104);
      }
    }
    LODWORD(v102) = 0;
    result = sub_1B19F3E1C(*((_QWORD *)v13 + 2) + 1, *(int32x2_t *)&v102);
    v107 = (char *)result;
    v108 = *((_QWORD *)v13 + 2);
    if (v108)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v107 = sub_1B1FFEEAC((uint64_t)v107);
      v109 = 0;
      v110 = v60 + 32;
      v111 = (uint64_t *)(v13 + 48);
      do
      {
        v112 = *(v111 - 2);
        v113 = *(v111 - 1);
        v114 = *v111;
        v111 += 3;
        v115 = *(float32x4_t *)(v110 + 16 * v112);
        v116 = vsubq_f32(*(float32x4_t *)(v110 + 16 * v114), v115);
        v117 = vsubq_f32(*(float32x4_t *)(v110 + 16 * v113), v115);
        v118 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), (int8x16_t)v117, 0xCuLL), vnegq_f32(v116)), v117, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL));
        v119 = vmulq_f32(v118, v118);
        *(float *)&v107[4 * v109++ + 36] = sqrtf(v119.f32[1] + (float)(v119.f32[2] + v119.f32[0])) * 0.5;
      }
      while (v108 != v109);
      result = swift_bridgeObjectRelease();
      v120 = *((_QWORD *)v13 + 2);
      if (v120)
      {
        v121 = 0;
        v122 = *((float *)v107 + 8);
        do
        {
          v123 = &v107[4 * v121];
          v122 = v122 + *((float *)v123 + 9);
          *((float *)v123 + 9) = v122;
          ++v121;
        }
        while (v120 != v121);
      }
    }
    v124 = v127;
    *v127 = v60;
    v124[1] = v68;
    v124[2] = v87;
    v124[3] = v76;
    v124[4] = v93;
    v124[5] = v99;
    v124[6] = (uint64_t)v13;
    v124[7] = (uint64_t)v107;
  }
  else
  {
LABEL_88:
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void sub_1B2090C58(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  VFXMTLMesh *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  VFXMTLMesh *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char v57;
  id v58;
  id v59;
  _QWORD v60[4];
  uint64_t v61;

  v4 = v3;
  v8 = sub_1B1B7EAB8(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  *a2 = v8;
  a2[3] = 0;
  sub_1B1A00060(a1, (uint64_t)v60);
  v9 = MEMORY[0x1B5E240CC](v60);
  sub_1B19FC350((uint64_t)v60);
  if (v9)
  {
    objc_opt_self();
    v10 = (void *)swift_dynamicCastObjCClass();
    v11 = v10;
    if (v10)
    {
      v12 = objc_msgSend(v10, sel_nodeRef);
      if (v12)
      {
        v20 = v12;
        v21 = (void *)sub_1B1868F58((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
        if (v21)
        {
          v22 = v21;
          v23 = objc_msgSend(a3, sel_renderResourceForDeformerStack_node_dataKind_, v22, v20, 1);
          v24 = (VFXMTLMesh *)(id)sub_1B186FCC4((uint64_t)v23);

          v4 = v3;
          if (v24)
            goto LABEL_15;
        }
        else
        {

        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1B1A00060(a1, (uint64_t)v60);
  v25 = MEMORY[0x1B5E240CC](v60);
  sub_1B19FC350((uint64_t)v60);
  if (v25)
  {
    objc_opt_self();
    v26 = (void *)swift_dynamicCastObjCClass();
    if (v26)
    {
      v27 = objc_msgSend(v26, sel_model);
      swift_unknownObjectRelease();
      if (v27)
      {
        v28 = objc_msgSend(v27, sel_mesh);

        if (v28)
        {
          v29 = objc_msgSend(v28, sel_meshRef);
          v30 = v28;
          v31 = v29;
          v24 = sub_1B18FB1C0((uint64_t)a3, (uint64_t)v31, 1);

          if (v24)
          {
LABEL_15:
            v32 = v24;
            v33 = sub_1B186FCC4((uint64_t)v32);
            a2[3] = v33;
            v36 = (id)sub_1B1955C8C((uint64_t)v32, 0, v34, v35);
            if (v36)
            {
              v39 = (uint64_t)v36;
              v40 = (id)sub_1B18FD780((uint64_t)v32);
              v41 = objc_msgSend(v40, sel_attributes);

              v42 = objc_msgSend(v41, sel_objectAtIndexedSubscript_, 0);
              if (v42)
              {
                swift_unknownObjectRetain();
                v58 = objc_msgSend(v42, sel_offset);
                v43 = sub_1B1F9C91C((uint64_t)objc_msgSend(v42, sel_format));
                v61 = v4;
                v44 = v43 * v33;
                v45 = objc_msgSend(v42, sel_format);
                swift_unknownObjectRetain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v60[0] = *a2;
                *a2 = 0x8000000000000000;
                v47 = v44;
                v4 = v61;
                sub_1B1B89F54(v39, (uint64_t)v58, v47, (uint64_t)v45, 0x6E6F697469736F70, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
                *a2 = v60[0];

                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_unknownObjectRelease();
              }
            }
            v48 = (id)sub_1B1955C8C((uint64_t)v32, (const char *)1, v37, v38);
            if (v48)
            {
              v49 = (uint64_t)v48;
              v50 = (id)sub_1B18FD780((uint64_t)v32);
              v51 = objc_msgSend(v50, sel_attributes);

              v52 = objc_msgSend(v51, sel_objectAtIndexedSubscript_, 1);
              if (v52)
              {
                swift_unknownObjectRetain();
                v59 = objc_msgSend(v52, sel_offset);
                v53 = sub_1B1F9C91C((uint64_t)objc_msgSend(v52, sel_format));
                v54 = a2[3];
                v61 = v4;
                v55 = v54 * v53;
                v56 = objc_msgSend(v52, sel_format);
                swift_unknownObjectRetain();
                v57 = swift_isUniquelyReferenced_nonNull_native();
                v60[0] = *a2;
                *a2 = 0x8000000000000000;
                sub_1B1B89F54(v49, (uint64_t)v59, v55, (uint64_t)v56, 0x6C616D726F6ELL, 0xE600000000000000, v57);
                *a2 = v60[0];

                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease();
                goto LABEL_25;
              }
              swift_unknownObjectRelease();
            }

          }
        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
LABEL_25:

}

unint64_t sub_1B2091148()
{
  unint64_t result;

  result = qword_1EEF62F00;
  if (!qword_1EEF62F00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B86A4, &type metadata for PointCacheError);
    atomic_store(result, (unint64_t *)&qword_1EEF62F00);
  }
  return result;
}

uint64_t sub_1B209118C()
{
  return swift_deallocObject();
}

uint64_t sub_1B209119C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1B2091220()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CD00)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CD00);
  }
}

uint64_t sub_1B2091288(uint64_t a1)
{
  __int128 v2;
  __int32 v3;
  unsigned __int32 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  int v23;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  unint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v87;
  int8x16_t v88;
  float v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  uint64_t v93;
  int32x2_t v94;
  uint64_t v95;
  uint64_t ObjectType;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  _BOOL8 v133;
  float32x2_t v134;
  float32x2_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  __int128 v155;
  float32x4_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  __n128 v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t v175;
  int v176;
  __int32 v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  _QWORD v184[10];
  _BYTE v185[72];
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v169 = *(_OWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 16);
  swift_retain();
  sub_1B1D17CD4(*((uint64_t *)&v2 + 1), &v170);
  swift_release();
  v166 = (uint64_t *)a1;
  if (v171.u8[8] == 2)
  {
    v167 = 0;
    LODWORD(v161) = 0;
    LODWORD(v162) = 0;
    v3 = 0;
    v160 = 1;
    v157 = 0x400000003F800000;
    v4 = -1;
    LODWORD(v158) = 1;
    LODWORD(v159) = 1;
  }
  else
  {
    v3 = v172.i32[0];
    v157 = v171.i64[0];
    v158 = ((unint64_t)v171.i64[1] >> 8) & 1;
    v159 = ((unint64_t)v171.i64[1] >> 16) & 1;
    v4 = v170.n128_u32[0];
    v167 = v170.n128_u64[0] & 0xFFFFFFFF00000000;
    v160 = v171.i8[8] & 1;
    v161 = ((unint64_t)v171.i64[1] >> 24) & 1;
    v162 = HIDWORD(v171.i64[1]) & 1;
  }
  swift_retain();
  sub_1B1D15764(*((_QWORD **)&v2 + 1), (uint64_t)v184);
  v5 = v184[0];
  v6 = v184[1];
  v7 = v184[2];
  v8 = v184[3];
  v9 = v184[4];
  v10 = v184[5];
  v11 = v184[6];
  v12 = v184[7];
  swift_release();
  sub_1B1A18378((uint64_t)v184, (uint64_t)v185, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v185[64] & 1) != 0)
  {
    v155 = xmmword_1B2244E20;
    v153 = (float32x4_t)xmmword_1B2244D90;
    v151 = (float32x4_t)xmmword_1B2244DD0;
    v149 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    *(_QWORD *)&v13 = v5;
    *((_QWORD *)&v13 + 1) = v6;
    v149 = (float32x4_t)v13;
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = v8;
    v151 = (float32x4_t)v13;
    *(_QWORD *)&v13 = v9;
    *((_QWORD *)&v13 + 1) = v10;
    v153 = (float32x4_t)v13;
    *(_QWORD *)&v13 = v11;
    *((_QWORD *)&v13 + 1) = v12;
    v155 = v13;
  }
  swift_retain();
  v14 = sub_1B1D171AC(v167 | v4);
  v16 = v15;
  swift_release();
  if (v14)
  {
    if (!*(_QWORD *)(v14 + 16))
    {
      v20 = 0;
      v146 = 0;
      v147 = 0;
      v21 = 0;
      goto LABEL_22;
    }
    v17 = sub_1B1DC3B00(0x6E6F697469736F70, 0xE800000000000000);
    if ((v18 & 1) != 0)
    {
      v19 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 32 * v17);
      v20 = v19[3];
      v146 = v19[2];
      v147 = v19[1];
      v21 = *v19;
      swift_unknownObjectRetain();
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_22;
    }
    else
    {
      v21 = 0;
      v146 = 0;
      v147 = 0;
      v20 = 0;
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_22;
    }
    v25 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000);
    if ((v26 & 1) != 0)
    {
      v27 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 32 * v25);
      v144 = v27[2];
      v145 = v27[1];
      v148 = v27[3];
      v168 = *v27;
      swift_unknownObjectRetain();
      if (*(_QWORD *)(v14 + 16))
      {
LABEL_23:
        v30 = sub_1B1DC3B00(0x6C616D726F6ELL, 0xE600000000000000);
        if ((v31 & 1) != 0)
        {
          v32 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 32 * v30);
          v29 = *v32;
          v28 = v32[3];
          v142 = v32[2];
          v143 = v32[1];
          swift_unknownObjectRetain();
          if (!*(_QWORD *)(v14 + 16))
            goto LABEL_29;
        }
        else
        {
          v29 = 0;
          v142 = 0;
          v143 = 0;
          v28 = 0;
          if (!*(_QWORD *)(v14 + 16))
            goto LABEL_29;
        }
        v33 = sub_1B1DC3B00(0x797469636F6C6576, 0xE800000000000000);
        if ((v34 & 1) != 0)
        {
          v35 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 32 * v33);
          v36 = v35[3];
          v140 = v35[2];
          v141 = v35[1];
          v165 = *v35;
          swift_unknownObjectRetain();
          goto LABEL_30;
        }
LABEL_29:
        v165 = 0;
        v140 = 0;
        v141 = 0;
        v36 = 0;
LABEL_30:
        if (*(_QWORD *)(v14 + 16))
        {
          v37 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
          if ((v38 & 1) != 0)
          {
            v39 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 32 * v37);
            v40 = v39[3];
            v138 = v39[2];
            v139 = v39[1];
            v164 = *v39;
            swift_unknownObjectRetain();
            if (!*(_QWORD *)(v14 + 16))
              goto LABEL_38;
          }
          else
          {
            v164 = 0;
            v138 = 0;
            v139 = 0;
            v40 = 0;
            if (!*(_QWORD *)(v14 + 16))
              goto LABEL_38;
          }
          v41 = sub_1B1DC3B00(0x7461746E6569726FLL, 0xEB000000006E6F69);
          if ((v42 & 1) != 0)
          {
            v43 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 32 * v41);
            v44 = v43[3];
            v136 = v43[2];
            v137 = v43[1];
            v163 = *v43;
            swift_unknownObjectRetain();
LABEL_39:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(double *)v45.i64 = sub_1B1E53FDC();
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_53;
            v49 = v148;
            v50 = (float32x4_t)v155;
            if (HIDWORD(v16))
              goto LABEL_53;
            if (!v21)
              goto LABEL_54;
            if (v20 >= 0x100)
              goto LABEL_53;
            if (!v168)
              goto LABEL_55;
            while (v49 >= 0x100)
            {
LABEL_53:
              while (1)
              {
                sub_1B222967C();
                __break(1u);
LABEL_54:
                LOBYTE(v20) = 0;
                if (v168)
                  break;
LABEL_55:
                LOBYTE(v49) = 0;
                if (v29)
                  goto LABEL_46;
LABEL_56:
                v28 = 0;
                if (v163)
                  goto LABEL_48;
LABEL_57:
                v44 = 0;
                if (v165)
                  goto LABEL_50;
LABEL_58:
                v36 = 0;
                if (!v164)
                  goto LABEL_59;
LABEL_52:
                if (v40 < 0x100)
                  goto LABEL_60;
              }
            }
            if (!v29)
              goto LABEL_56;
LABEL_46:
            if (v28 >= 0x100)
              goto LABEL_53;
            if (!v163)
              goto LABEL_57;
LABEL_48:
            if (v44 >= 0x100)
              goto LABEL_53;
            if (!v165)
              goto LABEL_58;
LABEL_50:
            if (v36 >= 0x100)
              goto LABEL_53;
            if (v164)
              goto LABEL_52;
LABEL_59:
            LOBYTE(v40) = 0;
LABEL_60:
            v51 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v149.f32[0]), v46, *(float32x2_t *)v149.f32, 1), v47, v149, 2), v48, v149, 3);
            v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v151.f32[0]), v46, *(float32x2_t *)v151.f32, 1), v47, v151, 2), v48, v151, 3);
            v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v153.f32[0]), v46, *(float32x2_t *)v153.f32, 1), v47, v153, 2), v48, v153, 3);
            v54 = vmulq_n_f32(v45, v50.f32[0]);
            v55 = (int32x4_t)vmulq_f32(v51, v51);
            v56 = vmulq_f32(v52, v52);
            v57 = (int32x4_t)vmulq_f32(v53, v53);
            v58 = vzip2q_s32(v55, v57);
            v59 = (float32x4_t)vzip1q_s32(vzip1q_s32(v55, v57), (int32x4_t)v56);
            v60 = (float32x4_t)vtrn2q_s32(v55, (int32x4_t)v56);
            v60.i32[2] = v57.i32[1];
            v61 = vaddq_f32((float32x4_t)vzip1q_s32(v58, vdupq_laneq_s32((int32x4_t)v56, 2)), vaddq_f32(v59, v60));
            v56.i64[0] = 0x80000000800000;
            v56.i64[1] = 0x80000000800000;
            v62 = vcgeq_f32(v56, v61);
            v61.i32[3] = 0;
            v63 = vrsqrteq_f32(v61);
            v64 = vmulq_f32(v63, vrsqrtsq_f32(v61, vmulq_f32(v63, v63)));
            v65 = v62;
            v65.i32[3] = 0;
            v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v65), (int8x16_t)v61, (int8x16_t)vmulq_f32(v64, vrsqrtsq_f32(v61, vmulq_f32(v64, v64))));
            v67 = vmulq_n_f32(v51, v66.f32[0]);
            v68 = vmulq_lane_f32(v52, *(float32x2_t *)v66.f32, 1);
            v69 = vmulq_laneq_f32(v53, v66, 2);
            v70 = (int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69);
            v71 = (int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68);
            v72 = (int32x4_t)v67;
            if (v62.i32[0])
            {
              v73 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v70, (int8x16_t)v69, 0xCuLL), vnegq_f32(v68)), v69, (float32x4_t)vextq_s8(v71, (int8x16_t)v68, 0xCuLL));
              v72 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), v73, 0xCuLL);
            }
            v74 = vmlaq_lane_f32(v54, v46, *(float32x2_t *)v50.f32, 1);
            v75 = (int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67);
            v76 = v68;
            if (v62.i32[1])
            {
              v77 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v75, (int8x16_t)v67, 0xCuLL), vnegq_f32(v69)), v67, (float32x4_t)vextq_s8(v70, (int8x16_t)v69, 0xCuLL));
              v76 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), v77, 0xCuLL);
            }
            v78 = vmlaq_laneq_f32(v74, v47, v50, 2);
            if (v62.i32[2])
            {
              v79 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v71, (int8x16_t)v68, 0xCuLL), vnegq_f32(v67)), v68, (float32x4_t)vextq_s8(v75, (int8x16_t)v67, 0xCuLL));
              v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL);
            }
            v80 = vmlaq_laneq_f32(v78, v48, v50, 3);
            v81 = (float)(*(float *)v72.i32 + v76.f32[1]) + v69.f32[2];
            if (v81 > 0.0)
            {
              v82 = (float32x4_t)vzip2q_s32((int32x4_t)v76, vuzp1q_s32((int32x4_t)v76, (int32x4_t)v69));
              v82.i32[2] = v72.i32[1];
              v83 = (float32x4_t)vtrn2q_s32((int32x4_t)v69, vzip2q_s32((int32x4_t)v69, v72));
              v83.i32[2] = v76.i32[0];
              v84 = vsubq_f32(v82, v83);
              v82.i32[3] = sqrtf(v81 + 1.0);
              v83.i32[3] = v82.i32[3];
              v72 = (int32x4_t)vmulq_f32(v82, v83);
              v84.i32[3] = v72.i32[3];
              *(float *)v72.i32 = 0.5 / v82.f32[3];
LABEL_68:
              v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 0);
LABEL_77:
              v154 = v52;
              v156 = v51;
              v170 = (__n128)v51;
              v171 = v52;
              v150 = v80;
              v152 = v53;
              v172 = v53;
              v173 = v80;
              v174 = vmulq_f32(v84, v85);
              v175 = v157;
              v176 = v16;
              v177 = v3;
              v178 = v20;
              v179 = v49;
              v180 = v28;
              v181 = v44;
              v182 = v36;
              v183 = v40;
              v95 = *v166;
              if (*v166)
              {
                ObjectType = swift_getObjectType();
                type metadata accessor for emitter_pointcache_uniforms(0);
                sub_1B1F40E1C((uint64_t)&v170, 1, ObjectType, v97, v98, v99, v100, v101);
                if (v21)
                  v102 = v146;
                else
                  v102 = 0;
                if (v21)
                  v103 = v147;
                else
                  v103 = 0;
                swift_getObjectType();
                v104 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v104, v103, v102, 0);
                swift_unknownObjectRelease();
                v105 = v168;
                if (v168)
                  v106 = v144;
                else
                  v106 = 0;
                if (v168)
                  v107 = v145;
                else
                  v107 = 0;
                swift_getObjectType();
                v108 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v108, v107, v106, 0);
                swift_unknownObjectRelease();
                if (v29)
                  v109 = v142;
                else
                  v109 = 0;
                if (v29)
                  v110 = v143;
                else
                  v110 = 0;
                swift_getObjectType();
                v111 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v111, v110, v109, 0);
                swift_unknownObjectRelease();
                v112 = v165;
                if (v165)
                  v113 = v140;
                else
                  v113 = 0;
                if (v165)
                  v114 = v141;
                else
                  v114 = 0;
                swift_getObjectType();
                v115 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v115, v114, v113, 0);
                swift_unknownObjectRelease();
                v116 = v164;
                if (v164)
                  v117 = v138;
                else
                  v117 = 0;
                if (v164)
                  v118 = v139;
                else
                  v118 = 0;
                swift_getObjectType();
                v119 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v119, v118, v117, 0);
                swift_unknownObjectRelease();
                v120 = v163;
                if (v163)
                  v121 = v136;
                else
                  v121 = 0;
                if (v163)
                  v122 = v137;
                else
                  v122 = 0;
                swift_getObjectType();
                v123 = swift_unknownObjectRetain();
                sub_1B1F40DEC(v123, v122, v121, 0);
                swift_unknownObjectRelease();
              }
              else
              {
                v105 = v168;
                v116 = v164;
                v112 = v165;
                v120 = v163;
              }
              sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v124 = swift_allocObject();
              v125 = v124;
              *(_OWORD *)(v124 + 16) = xmmword_1B2280B20;
              if (v21)
                v126 = v160;
              else
                v126 = 0;
              *(_OWORD *)(v124 + 32) = xmmword_1B22B8A90;
              if (v105)
                v127 = v158;
              else
                v127 = 0;
              *(_BYTE *)(v124 + 48) = 0;
              *(_QWORD *)(v124 + 64) = v126;
              if (v112 | v29)
                v128 = v159;
              else
                v128 = 0;
              *(_OWORD *)(v124 + 72) = 0u;
              *(_OWORD *)(v124 + 88) = 0u;
              if (v120 | v29)
                v129 = v161;
              else
                v129 = 0;
              *(_OWORD *)(v124 + 104) = 0uLL;
              *(_QWORD *)(v124 + 120) = 0;
              *(_BYTE *)(v124 + 128) = 13;
              *(_OWORD *)(v124 + 144) = xmmword_1B22B8AA0;
              *(_BYTE *)(v124 + 160) = 0;
              *(_QWORD *)(v124 + 176) = v127;
              *(_OWORD *)(v124 + 184) = 0uLL;
              *(_OWORD *)(v124 + 200) = 0uLL;
              *(_OWORD *)(v124 + 216) = 0uLL;
              *(_QWORD *)(v124 + 232) = 0;
              *(_BYTE *)(v124 + 240) = 13;
              *(_OWORD *)(v124 + 256) = xmmword_1B22B8AB0;
              *(_BYTE *)(v124 + 272) = 0;
              *(_QWORD *)(v124 + 288) = v128;
              *(_QWORD *)(v124 + 344) = 0;
              *(_OWORD *)(v124 + 312) = 0uLL;
              *(_OWORD *)(v124 + 328) = 0uLL;
              *(_OWORD *)(v124 + 296) = 0uLL;
              *(_BYTE *)(v124 + 352) = 13;
              *(_OWORD *)(v124 + 368) = xmmword_1B22B8AC0;
              *(_BYTE *)(v124 + 384) = 0;
              *(_QWORD *)(v124 + 400) = v129;
              *(_OWORD *)(v124 + 408) = 0uLL;
              *(_OWORD *)(v124 + 424) = 0uLL;
              *(_OWORD *)(v124 + 440) = 0uLL;
              *(_QWORD *)(v124 + 456) = 0;
              *(_BYTE *)(v124 + 464) = 13;
              if (v116)
                v130 = v162;
              else
                v130 = 0;
              *(_OWORD *)(v124 + 480) = xmmword_1B22B8AD0;
              *(_BYTE *)(v124 + 496) = 0;
              *(_QWORD *)(v124 + 512) = v130;
              *(_QWORD *)(v124 + 568) = 0;
              *(_OWORD *)(v124 + 536) = 0uLL;
              *(_OWORD *)(v124 + 552) = 0uLL;
              *(_OWORD *)(v124 + 520) = 0uLL;
              v131 = (float32x4_t)vdupq_n_s32(0x358637BDu);
              *(_BYTE *)(v124 + 576) = 13;
              v133 = (vminvq_u32((uint32x4_t)vcgtq_f32(v131, vabsq_f32(vaddq_f32(v156, (float32x4_t)xmmword_1B22684D0)))) & 0x80000000) == 0
                  || (vminvq_u32((uint32x4_t)vcgtq_f32(v131, vabsq_f32(vaddq_f32(v154, (float32x4_t)xmmword_1B22684F0)))) & 0x80000000) == 0
                  || (v132 = (float32x4_t)vdupq_n_s32(0x358637BDu),
                      (vminvq_u32((uint32x4_t)vcgtq_f32(v132, vabsq_f32(vaddq_f32(v152, (float32x4_t)xmmword_1B22684E0)))) & 0x80000000) == 0)|| (vminvq_u32((uint32x4_t)vcgtq_f32(v132, vabsq_f32(vaddq_f32(v150, (float32x4_t)xmmword_1B2245B70)))) & 0x80000000) == 0;
              *(_OWORD *)(v124 + 592) = xmmword_1B22B8AE0;
              *(_BYTE *)(v124 + 608) = 0;
              *(_QWORD *)(v124 + 624) = v133;
              *(_QWORD *)(v124 + 680) = 0;
              *(_OWORD *)(v124 + 632) = 0uLL;
              *(_OWORD *)(v124 + 648) = 0uLL;
              *(_OWORD *)(v124 + 664) = 0uLL;
              *(_BYTE *)(v124 + 688) = 13;
              swift_retain();
              sub_1B1B1FC34((uint64_t)v166);
              sub_1B1FE6FB8(v169, v2, v95 == 0, v125, (uint64_t)v166, 0xD000000000000012, 0x80000001B234A810, 0);
              sub_1B1B1FC88((uint64_t)v166);
              swift_release();
              swift_setDeallocating();
              swift_arrayDestroy();
              swift_deallocClassInstance();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              return swift_unknownObjectRelease();
            }
            if (*(float *)v72.i32 < v76.f32[1] || *(float *)v72.i32 < v69.f32[2])
            {
              if (v76.f32[1] <= v69.f32[2])
              {
                *(float32x2_t *)v84.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v72, (int32x4_t)v76), *(float32x2_t *)v69.f32);
                v134 = (float32x2_t)__PAIR64__(v72.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v69.f32[2] + 1.0) - *(float *)v72.i32) - v76.f32[1])));
                v135 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 0);
                *(float32x2_t *)v72.i8 = vsub_f32(*(float32x2_t *)v72.i8, v135);
                v135.i32[0] = v134.i32[0];
                v135.i32[0] = vmul_f32(v134, v135).u32[0];
                v135.i32[1] = v72.i32[1];
                *(float32x2_t *)&v84.u32[2] = v135;
                *(float *)v72.i32 = 0.5 / v134.f32[0];
                goto LABEL_68;
              }
              v89 = sqrtf((float)((float)(v76.f32[1] + 1.0) - *(float *)v72.i32) - v69.f32[2]);
              *(int32x2_t *)v48.f32 = vdup_laneq_s32((int32x4_t)v76, 2);
              v87 = (int8x16_t)v48;
              *(float *)v87.i32 = v89;
              v87.i32[0] = vmul_f32(*(float32x2_t *)v87.i8, (float32x2_t)__PAIR64__(v69.u32[1], LODWORD(v89))).u32[0];
              v87.i32[1] = vadd_f32(*(float32x2_t *)&v48, *(float32x2_t *)&v69).i32[1];
              v88 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 1), v76);
              v94 = (int32x2_t)vsubq_f32(v69, (float32x4_t)vdupq_laneq_s32(v72, 2)).u64[0];
              v85 = (float32x4_t)vextq_s8(vextq_s8(v88, v88, 4uLL), v87, 0xCuLL);
              v85.i32[3] = v94.i32[0];
            }
            else
            {
              v89 = sqrtf((float)((float)(*(float *)v72.i32 + 1.0) - v76.f32[1]) - v69.f32[2]);
              v90 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 0);
              v91 = vadd_f32(*(float32x2_t *)v72.i8, v90);
              v90.f32[0] = v89;
              v85.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v72.u32[1], LODWORD(v89)), v90).u32[0];
              v85.i32[1] = v91.i32[1];
              v92 = (float32x2_t)vzip2q_s32(v72, (int32x4_t)v76).u64[0];
              LODWORD(v93) = vadd_f32(v92, *(float32x2_t *)v69.f32).u32[0];
              v94 = (int32x2_t)vsub_f32(v92, *(float32x2_t *)v69.f32);
              HIDWORD(v93) = v94.i32[1];
              v85.i64[1] = v93;
            }
            *(float *)v94.i32 = 0.5 / v89;
            v84 = (float32x4_t)vdupq_lane_s32(v94, 0);
            goto LABEL_77;
          }
        }
        else
        {
          v40 = 0;
          v138 = 0;
          v139 = 0;
          v164 = 0;
        }
LABEL_38:
        v163 = 0;
        v136 = 0;
        v137 = 0;
        v44 = 0;
        goto LABEL_39;
      }
LABEL_21:
      v28 = 0;
      v142 = 0;
      v143 = 0;
      v29 = 0;
      goto LABEL_29;
    }
LABEL_22:
    v168 = 0;
    v144 = 0;
    v145 = 0;
    v148 = 0;
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_23;
    goto LABEL_21;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v170.n128_u64[0] = 0;
  v170.n128_u64[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v170.n128_u64[0] = 0xD000000000000014;
  v170.n128_u64[1] = 0x80000001B234A7F0;
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v22 = v170;
  v23 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v170.n128_u64[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v23, (uint64_t *)&v170, v22.n128_i64[0], v22.n128_i64[1]);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B2092144(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float32x4_t v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v86;
  int8x16_t v87;
  float v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  uint64_t v92;
  int32x2_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t ObjectType;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x2_t v112;
  float32x2_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  unint64_t v130;
  uint64_t v131;
  _OWORD v132[6];
  int v133;
  char v134;
  char v135;
  char v136;
  char v137;
  _QWORD v138[10];
  _BYTE v139[80];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v2 = *(_OWORD *)(a1 + 96);
  v144 = *(_OWORD *)(a1 + 80);
  v145 = v2;
  v3 = *(_OWORD *)(a1 + 128);
  v146 = *(_OWORD *)(a1 + 112);
  v147 = v3;
  v4 = *(_OWORD *)(a1 + 32);
  v140 = *(_OWORD *)(a1 + 16);
  v141 = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v142 = *(_OWORD *)(a1 + 48);
  v143 = v5;
  v6 = v140;
  swift_retain_n();
  if (*((_QWORD *)&v140 + 1) != 0xFFFFFFFFLL
    && (DWORD2(v140) & 0x80000000) == 0
    && *(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > SDWORD2(v140)
    && ((v7 = *(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(v140) == -1)
     || *(_DWORD *)(v7 + 12 * SDWORD2(v140) + 8) == HIDWORD(v140)))
  {
    v9 = sub_1B1D1FA30(*(_QWORD *)(*(_QWORD *)(v140 + 136) + 8 * *(int *)(v7 + 12 * SDWORD2(v140)) + 32), *(_DWORD *)(v7 + 12 * SDWORD2(v140)), *(_WORD *)(v7 + 12 * SDWORD2(v140) + 4), 12, v140);
    v23 = v22;
    swift_release();
    if (v23 != 2)
    {
      v8 = HIDWORD(v9);
      if ((_DWORD)v9 != -1)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    swift_release();
  }
  LODWORD(v8) = 0;
  LODWORD(v9) = -1;
LABEL_8:
  if (!(_DWORD)v8)
    return swift_release();
LABEL_9:
  if ((v9 & 0x80000000) != 0)
    return swift_release();
  if (*(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= (int)v9)
    return swift_release();
  v10 = *(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v8 != -1 && *(_DWORD *)(v10 + 12 * (int)v9 + 8) != (_DWORD)v8)
    return swift_release();
  v11 = sub_1B1D1F024(*(_QWORD *)(*(_QWORD *)(v140 + 136) + 8 * *(int *)(v10 + 12 * (int)v9) + 32), *(_DWORD *)(v10 + 12 * (int)v9), *(_WORD *)(v10 + 12 * (int)v9 + 4), 32, v140);
  if (!v11)
    return swift_release();
  v131 = v11;
  v130 = v12;
  swift_retain();
  sub_1B1D15764((_QWORD *)(DWORD2(v140) | ((unint64_t)HIDWORD(v140) << 32)), (uint64_t)v138);
  v13 = v138[0];
  v14 = v138[1];
  v15 = v138[2];
  v16 = v138[3];
  v18 = v138[4];
  v17 = v138[5];
  v20 = v138[6];
  v19 = v138[7];
  swift_release();
  sub_1B1A18378((uint64_t)v138, (uint64_t)v139, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v139[64] & 1) != 0)
  {
    v129 = (float32x4_t)xmmword_1B2244E20;
    v125 = (float32x4_t)xmmword_1B2244D90;
    v124 = (float32x4_t)xmmword_1B2244DD0;
    v123 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v24.i64[0] = v13;
    v24.i64[1] = v14;
    v123 = v24;
    v24.i64[0] = v15;
    v24.i64[1] = v16;
    v124 = v24;
    v24.i64[0] = v18;
    v24.i64[1] = v17;
    v125 = v24;
    v24.i64[0] = v20;
    v24.i64[1] = v19;
    v129 = v24;
  }
  *(double *)v25.i64 = sub_1B1E52854();
  v122 = v25;
  v126 = v26;
  v127 = v27;
  v128 = v28;
  if (!*(_QWORD *)(v131 + 16) || (v29 = sub_1B1DC3B00(0x6E6F697469736F70, 0xE800000000000000), (v30 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v31 = (_QWORD *)(*(_QWORD *)(v131 + 56) + 32 * v29);
  v32 = v31[1];
  v33 = v31[2];
  v34 = v31[3];
  v35 = *(_QWORD *)(v131 + 16);
  swift_unknownObjectRetain();
  if (v35)
  {
    v36 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000);
    if ((v37 & 1) != 0)
    {
      v38 = (uint64_t *)(*(_QWORD *)(v131 + 56) + 32 * v36);
      v118 = v38[1];
      v39 = v38[2];
      v40 = v38[3];
      v121 = *v38;
      swift_unknownObjectRetain();
    }
    else
    {
      v121 = 0;
      v118 = 0;
      v39 = 0;
      v40 = 0;
    }
    v119 = v39;
    if (*(_QWORD *)(v131 + 16) && (v41 = sub_1B1DC3B00(1702521203, 0xE400000000000000), (v42 & 1) != 0))
    {
      v43 = (uint64_t *)(*(_QWORD *)(v131 + 56) + 32 * v41);
      v35 = v43[3];
      v116 = v43[2];
      v117 = v43[1];
      v120 = *v43;
      swift_unknownObjectRetain();
    }
    else
    {
      v120 = 0;
      v116 = 0;
      v117 = 0;
      v35 = 0;
    }
  }
  else
  {
    v40 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v116 = 0;
    v117 = 0;
  }
  if (*(_QWORD *)(v131 + 16) && (v44 = sub_1B1DC3B00(0x7461746E6569726FLL, 0xEB000000006E6F69), (v45 & 1) != 0))
  {
    v46 = (uint64_t *)(*(_QWORD *)(v131 + 56) + 32 * v44);
    v47 = *v46;
    v48 = v46[3];
    v114 = v46[2];
    v115 = v46[1];
    swift_unknownObjectRetain();
  }
  else
  {
    v47 = 0;
    v114 = 0;
    v115 = 0;
    v48 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v130 & 0x8000000000000000) != 0 || HIDWORD(v130) || v34 >= 0x100)
    goto LABEL_91;
  if (v121)
  {
    if (v40 >= 0x100)
    {
LABEL_91:
      result = sub_1B222967C();
      __break(1u);
      return result;
    }
  }
  else
  {
    LOBYTE(v40) = 0;
  }
  if (v120)
  {
    if (v35 >= 0x100)
      goto LABEL_91;
  }
  else
  {
    LOBYTE(v35) = 0;
  }
  if (v47)
  {
    if (v48 >= 0x100)
      goto LABEL_91;
  }
  else
  {
    LOBYTE(v48) = 0;
  }
  v49 = vmulq_n_f32(v122, v129.f32[0]);
  v50 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v123.f32[0]), v126, *(float32x2_t *)v123.f32, 1), v127, v123, 2), v128, v123, 3);
  v51 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v124.f32[0]), v126, *(float32x2_t *)v124.f32, 1), v127, v124, 2), v128, v124, 3);
  v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v125.f32[0]), v126, *(float32x2_t *)v125.f32, 1), v127, v125, 2), v128, v125, 3);
  v53 = vmulq_f32(v50, v50);
  v54 = vmulq_f32(v51, v51);
  v55 = vmulq_f32(v52, v52);
  v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2);
  v57 = (float32x4_t)vtrn2q_s32((int32x4_t)v53, (int32x4_t)v54);
  v57.i32[2] = v55.i32[1];
  v58 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v53, (int32x4_t)v55), (int32x4_t)v56), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v53, (int32x4_t)v55), (int32x4_t)v54), v57));
  v59.i64[0] = 0x80000000800000;
  v59.i64[1] = 0x80000000800000;
  v60 = (int8x16_t)vcgeq_f32(v59, v58);
  v58.i32[3] = 0;
  v61 = vrsqrteq_f32(v58);
  v62 = vmulq_f32(v61, vrsqrtsq_f32(v58, vmulq_f32(v61, v61)));
  v63 = (int32x4_t)v60;
  v63.i32[3] = 0;
  v64 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v63), (int8x16_t)v58, (int8x16_t)vmulq_f32(v62, vrsqrtsq_f32(v58, vmulq_f32(v62, v62))));
  v65 = vmulq_n_f32(v50, v64.f32[0]);
  v66 = vmulq_lane_f32(v51, *(float32x2_t *)v64.f32, 1);
  v67 = vmulq_laneq_f32(v52, v64, 2);
  v68 = (int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67);
  v69 = (int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66);
  v70 = (int32x4_t)v65;
  if (v60.i32[0])
  {
    v71 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v68, (int8x16_t)v67, 0xCuLL), vnegq_f32(v66)), v67, (float32x4_t)vextq_s8(v69, (int8x16_t)v66, 0xCuLL));
    v70 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), v71, 0xCuLL);
  }
  v72 = vmlaq_lane_f32(v49, v126, *(float32x2_t *)v129.f32, 1);
  v73 = (int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65);
  v74 = v66;
  if (v60.i32[1])
  {
    v75 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v73, (int8x16_t)v65, 0xCuLL), vnegq_f32(v67)), v65, (float32x4_t)vextq_s8(v68, (int8x16_t)v67, 0xCuLL));
    v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL);
  }
  v76 = vmlaq_laneq_f32(v72, v127, v129, 2);
  if (v60.i32[2])
  {
    v60 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v69, (int8x16_t)v66, 0xCuLL), vnegq_f32(v65)), v66, (float32x4_t)vextq_s8(v73, (int8x16_t)v65, 0xCuLL));
    v67 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), v60, 0xCuLL);
  }
  v77 = vmlaq_laneq_f32(v76, v128, v129, 3);
  v78 = (float)(*(float *)v70.i32 + v74.f32[1]) + v67.f32[2];
  if (v78 <= 0.0)
  {
    if (*(float *)v70.i32 < v74.f32[1] || *(float *)v70.i32 < v67.f32[2])
    {
      if (v74.f32[1] <= v67.f32[2])
      {
        v80 = sqrtf((float)((float)(v67.f32[2] + 1.0) - *(float *)v70.i32) - v74.f32[1]);
        *(float32x2_t *)v83.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v70, (int32x4_t)v74), *(float32x2_t *)v67.f32);
        v112 = (float32x2_t)__PAIR64__(v70.u32[1], LODWORD(v80));
        v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.f32, 0);
        *(float32x2_t *)v82.f32 = vsub_f32(*(float32x2_t *)v70.i8, v113);
        v113.f32[0] = v80;
        v113.i32[0] = vmul_f32(v112, v113).u32[0];
        v113.i32[1] = v82.i32[1];
        *(float32x2_t *)&v83.u32[2] = v113;
        goto LABEL_60;
      }
      v88 = sqrtf((float)((float)(v74.f32[1] + 1.0) - *(float *)v70.i32) - v67.f32[2]);
      *(int32x2_t *)v60.i8 = vdup_laneq_s32((int32x4_t)v74, 2);
      v86 = v60;
      *(float *)v86.i32 = v88;
      v86.i32[0] = vmul_f32(*(float32x2_t *)v86.i8, (float32x2_t)__PAIR64__(v67.u32[1], LODWORD(v88))).u32[0];
      v86.i32[1] = vadd_f32(*(float32x2_t *)&v60, *(float32x2_t *)&v67).i32[1];
      v87 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.i8, 1), v74);
      v93 = (int32x2_t)vsubq_f32(v67, (float32x4_t)vdupq_laneq_s32(v70, 2)).u64[0];
      v84 = (float32x4_t)vextq_s8(vextq_s8(v87, v87, 4uLL), v86, 0xCuLL);
      v84.i32[3] = v93.i32[0];
    }
    else
    {
      v88 = sqrtf((float)((float)(*(float *)v70.i32 + 1.0) - v74.f32[1]) - v67.f32[2]);
      v89 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.f32, 0);
      v90 = vadd_f32(*(float32x2_t *)v70.i8, v89);
      v89.f32[0] = v88;
      v84.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v70.u32[1], LODWORD(v88)), v89).u32[0];
      v84.i32[1] = v90.i32[1];
      v91 = (float32x2_t)vzip2q_s32(v70, (int32x4_t)v74).u64[0];
      LODWORD(v92) = vadd_f32(v91, *(float32x2_t *)v67.f32).u32[0];
      v93 = (int32x2_t)vsub_f32(v91, *(float32x2_t *)v67.f32);
      HIDWORD(v92) = v93.i32[1];
      v84.i64[1] = v92;
    }
    *(float *)v93.i32 = 0.5 / v88;
    v83 = (float32x4_t)vdupq_lane_s32(v93, 0);
    goto LABEL_69;
  }
  v79 = (float32x4_t)vzip2q_s32((int32x4_t)v74, vuzp1q_s32((int32x4_t)v74, (int32x4_t)v67));
  v79.i32[2] = v70.i32[1];
  v80 = sqrtf(v78 + 1.0);
  v81 = (float32x4_t)vtrn2q_s32((int32x4_t)v67, vzip2q_s32((int32x4_t)v67, v70));
  v81.i32[2] = v74.i32[0];
  v83 = vsubq_f32(v79, v81);
  v79.f32[3] = v80;
  v81.f32[3] = v80;
  v82 = vmulq_f32(v79, v81);
  v83.i32[3] = v82.i32[3];
LABEL_60:
  v82.f32[0] = 0.5 / v80;
  v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 0);
LABEL_69:
  *(_QWORD *)&v94 = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(vaddq_f32(v56, vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).f32[0])), COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0])));
  *((_QWORD *)&v94 + 1) = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]));
  v132[0] = v50;
  v132[1] = v51;
  v132[2] = v52;
  v132[3] = v77;
  v132[4] = vmulq_f32(v83, v84);
  v132[5] = v94;
  v133 = v130;
  v134 = v34;
  v135 = v40;
  v136 = v35;
  v137 = v48;
  v95 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for pointcache_spawner_uniforms(0);
    sub_1B1F40E1C((uint64_t)v132, 1, ObjectType, v97, v98, v99, v100, v101);
    swift_getObjectType();
    v102 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v102, v32, v33, 0);
    swift_unknownObjectRelease();
    if (v121)
      v103 = v119;
    else
      v103 = 0;
    if (v121)
      v104 = v118;
    else
      v104 = 0;
    swift_getObjectType();
    v105 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v105, v104, v103, 0);
    swift_unknownObjectRelease();
    if (v120)
      v106 = v116;
    else
      v106 = 0;
    if (v120)
      v107 = v117;
    else
      v107 = 0;
    swift_getObjectType();
    v108 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v108, v107, v106, 0);
    swift_unknownObjectRelease();
    if (v47)
      v109 = v114;
    else
      v109 = 0;
    if (v47)
      v110 = v115;
    else
      v110 = 0;
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1F40DEC(v47, v110, v109, 0);
    swift_unknownObjectRelease();
  }
  v111 = v142;
  swift_retain();
  sub_1B1B1FC34(a1);
  sub_1B1FE6FB8(v111, v6, v95 == 0, 0, a1, 0xD000000000000012, 0x80000001B234A870, 0);
  sub_1B1B1FC88(a1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release_n();
}

uint64_t sub_1B2092B18(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = *(unsigned __int8 *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96);
  swift_retain();
  if (v3 != 1)
    return swift_release();
  sub_1B1E5267C();
  v5 = v4;
  v6 = a1[1];
  swift_retain();
  v7 = sub_1B1D17D98(v6);
  v9 = v8;
  swift_release();
  v10 = v9 == 2 ? 0xFFFFFFFFLL : v7;
  v11 = sub_1B1D171AC(v10);
  if (!v11)
    return swift_release();
  v15 = v11;
  v16 = v12;
  v17 = v13;
  v18 = v14;
  sub_1B1BEE528((uint64_t)a1);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1FEBA78(v6, v2, a1, v2, v15, v16, v17, v18, v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B4F21C((uint64_t)a1);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2092C88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char v19;
  float v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  sub_1B19F8E54(0, &qword_1EEF62F08, (uint64_t (*)(void))sub_1B2093070, (uint64_t)&type metadata for PointCacheEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v26 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v21 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2093070();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v29 = 0;
  sub_1B1A08878();
  sub_1B2229814();
  v11 = v27;
  sub_1B1B4D924();
  v29 = 1;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v13 = v27;
  LOBYTE(v27) = 2;
  v14 = sub_1B22297D8();
  LOBYTE(v27) = 3;
  v15 = sub_1B22297D8();
  LOBYTE(v27) = 4;
  v25 = sub_1B22297D8();
  LOBYTE(v27) = 5;
  v24 = sub_1B22297D8();
  v29 = 6;
  sub_1B22297B4();
  if (v28)
    v16 = -1;
  else
    v16 = v27;
  v23 = v16;
  if (v28)
    v17 = 0;
  else
    v17 = HIDWORD(v27);
  v29 = 7;
  sub_1B1A7184C();
  sub_1B22297B4();
  v18 = v27;
  if (v27 == 3)
    v18 = 0;
  v22 = v18;
  LOBYTE(v27) = 8;
  v21 = sub_1B222979C();
  LOBYTE(v27) = 9;
  v19 = sub_1B2229784();
  if ((v21 & 0x100000000) != 0)
    v20 = 0.0;
  else
    v20 = *(float *)&v21;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v26);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v23;
  *(_DWORD *)(a2 + 12) = v17;
  *(_QWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v14 & 1;
  *(_BYTE *)(a2 + 25) = v15 & 1;
  *(_BYTE *)(a2 + 26) = v25 & 1;
  *(_BYTE *)(a2 + 27) = v24 & 1;
  *(_BYTE *)(a2 + 28) = v19 & 1;
  *(_BYTE *)(a2 + 29) = v22;
  *(float *)(a2 + 32) = v20;
  return result;
}

unint64_t sub_1B2093070()
{
  unint64_t result;

  result = qword_1EEF62F10;
  if (!qword_1EEF62F10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8654, &type metadata for PointCacheEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62F10);
  }
  return result;
}

void sub_1B20930B4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B1A025A0(255, a3);
    v4 = sub_1B2229A18();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1B2093108()
{
  unint64_t result;

  result = qword_1EEF62F28;
  if (!qword_1EEF62F28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B85F4, &type metadata for PointCacheFromModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62F28);
  }
  return result;
}

_QWORD *sub_1B209314C(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for PointCacheFromModel(a2, a1);
  return a2;
}

uint64_t sub_1B2093180(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD v11[2];
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  sub_1B19F8E54(0, &qword_1EEF63030, (uint64_t (*)(void))sub_1B209459C, (uint64_t)&type metadata for PointCacheSpawner.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B209459C();
  sub_1B222A150();
  if (!v1)
  {
    v16 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v17;
    v15 = 1;
    sub_1B22297D8();
    v14 = 2;
    sub_1B22297D8();
    v13 = 3;
    v11[1] = sub_1B22297D8();
    v12 = 4;
    sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B20933B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD v11[3];
  char v12;
  uint64_t v13;

  sub_1B19F8E54(0, &qword_1EEF62F38, (uint64_t (*)(void))sub_1B20935FC, (uint64_t)&type metadata for PointCacheGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B20935FC();
  sub_1B222A150();
  if (!v1)
  {
    v12 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v13;
    LOBYTE(v13) = 1;
    sub_1B22297FC();
    v12 = 2;
    sub_1B1A70DF0();
    sub_1B2229814();
    v12 = 3;
    sub_1B2093640();
    sub_1B2229814();
    v11[2] = (unsigned __int16)v13;
    LOBYTE(v13) = 4;
    sub_1B22297C0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B20935FC()
{
  unint64_t result;

  result = qword_1EEF62F40;
  if (!qword_1EEF62F40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B85A4, &type metadata for PointCacheGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62F40);
  }
  return result;
}

unint64_t sub_1B2093640()
{
  unint64_t result;

  result = qword_1EEF62F48;
  if (!qword_1EEF62F48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B857C, &type metadata for PointCache.BakingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF62F48);
  }
  return result;
}

unint64_t sub_1B2093684()
{
  unint64_t result;

  result = qword_1EEF62F58;
  if (!qword_1EEF62F58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8554, &type metadata for PointCache.BakingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF62F58);
  }
  return result;
}

uint64_t sub_1B20936C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  sub_1B19F8E54(0, &qword_1EEF62F60, (uint64_t (*)(void))sub_1B2093828, (uint64_t)&type metadata for REMeshAssetPointCache.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v13 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v12 - v6;
  sub_1B1B7EE30(MEMORY[0x1E0DEE9D8]);
  v8 = sub_1B19FA070(a1, a1[3]);
  sub_1B2093828();
  v9 = (uint64_t)v8;
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v13;
    v9 = sub_1B22297CC();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v10);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v9;
}

unint64_t sub_1B2093828()
{
  unint64_t result;

  result = qword_1EEF62F68;
  if (!qword_1EEF62F68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8504, &type metadata for REMeshAssetPointCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62F68);
  }
  return result;
}

ValueMetadata *type metadata accessor for REMeshAssetPointCache.CodingKeys()
{
  return &type metadata for REMeshAssetPointCache.CodingKeys;
}

ValueMetadata *type metadata accessor for PointCacheGenerator.CodingKeys()
{
  return &type metadata for PointCacheGenerator.CodingKeys;
}

uint64_t _s3VFX21REMeshAssetPointCacheV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B20938D4 + 4 * byte_1B22B771E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B20938F4 + 4 * byte_1B22B7723[v4]))();
}

_BYTE *sub_1B20938D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B20938F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B20938FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2093904(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B209390C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2093914(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PointCacheFromModel.CodingKeys()
{
  return &type metadata for PointCacheFromModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PointCacheEmitter.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B209397C + 4 * byte_1B22B772D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B20939B0 + 4 * byte_1B22B7728[v4]))();
}

uint64_t sub_1B20939B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20939B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20939C0);
  return result;
}

uint64_t sub_1B20939CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20939D4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B20939D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20939E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointCacheEmitter.CodingKeys()
{
  return &type metadata for PointCacheEmitter.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PointCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B2093A48 + 4 * byte_1B22B7737[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2093A7C + 4 * byte_1B22B7732[v4]))();
}

uint64_t sub_1B2093A7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2093A84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2093A8CLL);
  return result;
}

uint64_t sub_1B2093A98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2093AA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B2093AA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2093AAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointCacheError()
{
  return &type metadata for PointCacheError;
}

uint64_t initializeWithCopy for TypedBufferSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TypedBufferSlice(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for TypedBufferSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for TypedBufferSlice()
{
  return &type metadata for TypedBufferSlice;
}

uint64_t getEnumTagSinglePayload for PCacheError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PCacheError()
{
  return &type metadata for PCacheError;
}

_QWORD *initializeWithCopy for PointCacheRuntime(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PointCacheRuntime(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for PointCacheRuntime(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for PointCacheRuntime()
{
  return &type metadata for PointCacheRuntime;
}

uint64_t getEnumTagSinglePayload for PointCacheEmitter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheEmitter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointCacheEmitter()
{
  return &type metadata for PointCacheEmitter;
}

ValueMetadata *type metadata accessor for PointCacheSpawner()
{
  return &type metadata for PointCacheSpawner;
}

ValueMetadata *type metadata accessor for PointCache.BakingOptions()
{
  return &type metadata for PointCache.BakingOptions;
}

ValueMetadata *type metadata accessor for PointCache()
{
  return &type metadata for PointCache;
}

uint64_t storeEnumTagSinglePayload for PointCache.Distribution(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B2093E9C + 4 * byte_1B22B7741[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2093ED0 + 4 * byte_1B22B773C[v4]))();
}

uint64_t sub_1B2093ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2093ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2093EE0);
  return result;
}

uint64_t sub_1B2093EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2093EF4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B2093EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2093F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointCache.Distribution()
{
  return &type metadata for PointCache.Distribution;
}

uint64_t storeEnumTagSinglePayload for PointCacheProperty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B2093F68 + 4 * byte_1B22B774B[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B2093F9C + 4 * byte_1B22B7746[v4]))();
}

uint64_t sub_1B2093F9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2093FA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2093FACLL);
  return result;
}

uint64_t sub_1B2093FB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2093FC0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B2093FC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2093FCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointCacheProperty()
{
  return &type metadata for PointCacheProperty;
}

uint64_t sub_1B2093FE8()
{
  return sub_1B1B4DEE4(&qword_1EEF62F78, &qword_1EEF62F80, (uint64_t)&type metadata for PointCacheProperty);
}

uint64_t sub_1B2094014()
{
  return sub_1B1B4DEE4(&qword_1EEF62F88, &qword_1EEF62F90, (uint64_t)&type metadata for PointCache.Distribution);
}

unint64_t sub_1B2094044()
{
  unint64_t result;

  result = qword_1EEF62F98;
  if (!qword_1EEF62F98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7DA4, &type metadata for PointCache.Distribution);
    atomic_store(result, (unint64_t *)&qword_1EEF62F98);
  }
  return result;
}

unint64_t sub_1B209408C()
{
  unint64_t result;

  result = qword_1EEF62FA0;
  if (!qword_1EEF62FA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7DFC, &type metadata for PointCache.BakingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF62FA0);
  }
  return result;
}

unint64_t sub_1B20940D4()
{
  unint64_t result;

  result = qword_1EEF62FA8;
  if (!qword_1EEF62FA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7DCC, &type metadata for PointCache.BakingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF62FA8);
  }
  return result;
}

unint64_t sub_1B209411C()
{
  unint64_t result;

  result = qword_1EEF62FB0;
  if (!qword_1EEF62FB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7E24, &type metadata for PointCache.BakingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF62FB0);
  }
  return result;
}

unint64_t sub_1B2094164()
{
  unint64_t result;

  result = qword_1EEF62FB8;
  if (!qword_1EEF62FB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7E5C, &type metadata for PointCache.BakingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF62FB8);
  }
  return result;
}

unint64_t sub_1B20941B0()
{
  unint64_t result;

  result = qword_1EEF62FC0;
  if (!qword_1EEF62FC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B80DC, &type metadata for PointCacheError);
    atomic_store(result, (unint64_t *)&qword_1EEF62FC0);
  }
  return result;
}

unint64_t sub_1B20941F8()
{
  unint64_t result;

  result = qword_1EEF62FC8;
  if (!qword_1EEF62FC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B81CC, &type metadata for PointCacheEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62FC8);
  }
  return result;
}

unint64_t sub_1B2094240()
{
  unint64_t result;

  result = qword_1EEF62FD0;
  if (!qword_1EEF62FD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B82BC, &type metadata for PointCacheFromModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62FD0);
  }
  return result;
}

unint64_t sub_1B2094288()
{
  unint64_t result;

  result = qword_1EEF62FD8;
  if (!qword_1EEF62FD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B83AC, &type metadata for PointCacheGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62FD8);
  }
  return result;
}

unint64_t sub_1B20942D0()
{
  unint64_t result;

  result = qword_1EEF62FE0;
  if (!qword_1EEF62FE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B849C, &type metadata for REMeshAssetPointCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62FE0);
  }
  return result;
}

unint64_t sub_1B2094318()
{
  unint64_t result;

  result = qword_1EEF62FE8;
  if (!qword_1EEF62FE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B7D04, &type metadata for PointCacheProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF62FE8);
  }
  return result;
}

unint64_t sub_1B2094360()
{
  unint64_t result;

  result = qword_1EEF62FF0;
  if (!qword_1EEF62FF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B83D4, &type metadata for REMeshAssetPointCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62FF0);
  }
  return result;
}

unint64_t sub_1B20943A8()
{
  unint64_t result;

  result = qword_1EEF62FF8;
  if (!qword_1EEF62FF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B83FC, &type metadata for REMeshAssetPointCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62FF8);
  }
  return result;
}

unint64_t sub_1B20943F0()
{
  unint64_t result;

  result = qword_1EEF63000;
  if (!qword_1EEF63000)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B82E4, &type metadata for PointCacheGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63000);
  }
  return result;
}

unint64_t sub_1B2094438()
{
  unint64_t result;

  result = qword_1EEF63008;
  if (!qword_1EEF63008)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B830C, &type metadata for PointCacheGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63008);
  }
  return result;
}

unint64_t sub_1B2094480()
{
  unint64_t result;

  result = qword_1EEF63010;
  if (!qword_1EEF63010)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B81F4, &type metadata for PointCacheFromModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63010);
  }
  return result;
}

unint64_t sub_1B20944C8()
{
  unint64_t result;

  result = qword_1EEF63018;
  if (!qword_1EEF63018)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B821C, &type metadata for PointCacheFromModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63018);
  }
  return result;
}

unint64_t sub_1B2094510()
{
  unint64_t result;

  result = qword_1EEF63020;
  if (!qword_1EEF63020)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8104, &type metadata for PointCacheEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63020);
  }
  return result;
}

unint64_t sub_1B2094558()
{
  unint64_t result;

  result = qword_1EEF63028;
  if (!qword_1EEF63028)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B812C, &type metadata for PointCacheEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63028);
  }
  return result;
}

unint64_t sub_1B209459C()
{
  unint64_t result;

  result = qword_1EEF63038;
  if (!qword_1EEF63038)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8864, &type metadata for PointCacheSpawner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63038);
  }
  return result;
}

uint64_t sub_1B20945E0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t _s3VFX19PointCacheGeneratorV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B2094674 + 4 * byte_1B22B7755[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B20946A8 + 4 * byte_1B22B7750[v4]))();
}

uint64_t sub_1B20946A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20946B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20946B8);
  return result;
}

uint64_t sub_1B20946C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20946CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B20946D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20946D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointCacheSpawner.CodingKeys()
{
  return &type metadata for PointCacheSpawner.CodingKeys;
}

unint64_t sub_1B20946F8()
{
  unint64_t result;

  result = qword_1EEF63048;
  if (!qword_1EEF63048)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B883C, &type metadata for PointCacheSpawner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63048);
  }
  return result;
}

unint64_t sub_1B2094740()
{
  unint64_t result;

  result = qword_1EEF63050;
  if (!qword_1EEF63050)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B87AC, &type metadata for PointCacheSpawner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63050);
  }
  return result;
}

unint64_t sub_1B2094788()
{
  unint64_t result;

  result = qword_1EEF63058;
  if (!qword_1EEF63058)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B87D4, &type metadata for PointCacheSpawner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63058);
  }
  return result;
}

uint64_t sub_1B20947CC(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = a1();
  return a3(v4);
}

uint64_t sub_1B2094804(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v2 + 12 * (int)result + 8) == HIDWORD(result))
      return sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v2 + 12 * (int)result) + 32));
  }
  return result;
}

uint64_t sub_1B20948BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v2 + 12 * (int)result + 8) == HIDWORD(result))
      return sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v2 + 12 * (int)result) + 32));
  }
  return result;
}

void sub_1B2094974()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues + 8);
  v48 = *(uint64_t **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  if (v48)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = 0;
    v46 = (_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v55 = OBJC_IVAR____TtC3VFX13EntityManager_logger;
    v4 = *(uint64_t **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    v47 = &v48[v1];
    while (1)
    {
      v52 = v3;
      v50 = *v4;
      v51 = v4;
      v5 = *(_QWORD *)(*v4 + 88);
      v53 = v5 + 56;
      v6 = 1 << *(_BYTE *)(v5 + 32);
      v7 = v6 < 64 ? ~(-1 << v6) : -1;
      v8 = v7 & *(_QWORD *)(v5 + 56);
      v9 = (unint64_t)(v6 + 63) >> 6;
      swift_bridgeObjectRetain();
      v10 = 0;
      v54 = v9;
      v49 = v9 - 4;
      while (v8)
      {
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v12 = v11 | (v10 << 6);
LABEL_15:
        v13 = (int *)(*(_QWORD *)(v5 + 48) + 16 * v12);
        v15 = *v13;
        v14 = v13[1];
        v16 = v13[2];
        v17 = v13[3];
        if (v15 == v16 && v14 == v17)
        {
          v19 = *(_QWORD *)(v56 + v55);
          v57 = 0;
          v58 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v20 = v57;
          v21 = v58;
          v22 = sub_1B2228E90();
          v57 = 0;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(_QWORD *)v19 + 88))(v22, &v57, v20, v21);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v52 = 1;
          if (v16 != -1 || v17 != 0)
          {
            v52 = 1;
            if ((v16 & 0x80000000) == 0 && v46[1] > v16)
            {
              v52 = 1;
              if (v17 == -1 || *(_DWORD *)(*v46 + 12 * v16 + 8) == v17)
              {
                v27 = (int *)(*v46 + 12 * v16);
                v28 = *((__int16 *)v27 + 2);
                v29 = *(_QWORD *)(*(_QWORD *)(v56 + 136) + 8 * *v27 + 32);
                thread_worker_index();
                v30 = *(_QWORD *)(v29 + 192);
                if (v30)
                {
                  v31 = *(_QWORD *)(v29 + 208);
                  v32 = 8 * (v28 >> 6);
                  *(_QWORD *)(v30 + v32) |= 1 << v28;
                  *(_QWORD *)(v31 + v32) &= ~(1 << v28);
                }
                v52 = 1;
                if (*(_BYTE *)(*(_QWORD *)(v29 + 40) + 213) == 1)
                {
                  v33 = *(_QWORD *)(v29 + 48);
                  v34 = *(_QWORD *)(v33 + 16);
                  if (v34)
                  {
                    v35 = (uint64_t *)(v33 + 56);
                    while ((ValueMetadata *)*(v35 - 3) != &type metadata for PropagateDirtiness)
                    {
                      v35 += 5;
                      if (!--v34)
                        goto LABEL_50;
                    }
                    v36 = *v35;
                  }
                  else
                  {
LABEL_50:
                    v36 = 0;
                  }
                  v37 = *(_QWORD *)(v29 + 128);
                  v38 = *(_BYTE *)(v29 + 184);
                  v39 = swift_retain();
                  if ((v38 & 1) != 0)
                  {
                    sub_1B2229688();
                    __break(1u);
                    return;
                  }
                  v40 = *(_DWORD *)(*(_QWORD *)(v29 + 168) + 4 * v28);
                  v41 = (unsigned int *)(v37 + v36 + 8 * v28);
                  v42 = *(unsigned int *)(*(_QWORD *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                        + 12 * (int)v40
                                        + 8);
                  swift_release();
                  v43 = *v41;
                  v44 = v41[1];
                  v52 = 1;
                  if ((_DWORD)v43 != -1 || (_DWORD)v44 != 0)
                  {
                    sub_1B1B8A6C8(&v57, v40 | (unint64_t)(v42 << 32), v43 | (v44 << 32));
                    v52 = 1;
                  }
                }
              }
            }
          }
        }
      }
      v23 = v10 + 1;
      if (v10 + 1 >= v54)
        goto LABEL_58;
      v24 = *(_QWORD *)(v53 + 8 * v23);
      if (v24)
        break;
      v23 = v10 + 2;
      if (v10 + 2 >= v54)
        goto LABEL_58;
      v24 = *(_QWORD *)(v53 + 8 * v23);
      if (v24)
        break;
      v23 = v10 + 3;
      if (v10 + 3 >= v54)
        goto LABEL_58;
      v24 = *(_QWORD *)(v53 + 8 * v23);
      if (v24)
        break;
      while (v49 != v10)
      {
        v24 = *(_QWORD *)(v5 + 8 * v10++ + 88);
        if (v24)
        {
          v23 = v10 + 3;
          goto LABEL_31;
        }
      }
LABEL_58:
      swift_release();
      if (*(_QWORD *)(*(_QWORD *)(v50 + 88) + 16))
      {
        swift_isUniquelyReferenced_nonNull_native();
        v57 = *(_QWORD *)(v50 + 88);
        *(_QWORD *)(v50 + 88) = 0x8000000000000000;
        sub_1B1DB363C();
        sub_1B2229388();
        *(_QWORD *)(v50 + 88) = v57;
        swift_bridgeObjectRelease();
      }
      v4 = v48;
      if (v51 + 1 != v47)
        v4 = v51 + 1;
      v3 = (v51 + 1 != v47) & v52;
      if (!((v51 + 1 != v47) | v52 & 1))
        return;
    }
LABEL_31:
    v8 = (v24 - 1) & v24;
    v12 = __clz(__rbit64(v24)) + (v23 << 6);
    v10 = v23;
    goto LABEL_15;
  }
}

uint64_t sub_1B2094EFC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  thread_worker_index();
  v6 = v2 << 16 >> 48;
  if (a1[24])
    sub_1B1D3B184(v2 << 16 >> 48, v3, v4, v5, a1[24], a1[25], a1[26]);
  return sub_1B1FE2568(a1[5], (uint64_t)a1, v6);
}

uint64_t sub_1B2094F98(uint64_t a1)
{
  return sub_1B2094FA4(a1, (uint64_t (*)(_QWORD, uint64_t))sub_1B1D3B278);
}

uint64_t sub_1B2094FA4(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return a2(*(__int16 *)(v3 + 12 * (int)a1 + 4), 2) & 1;
  }
  else
  {
    return 0;
  }
}

