_DWORD *sub_1B1E123AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E123B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E123BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E123C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s8MetadataV36RandomNumberGeneratorXoshiroWithSeedV10CodingKeysOMa()
{
  return &_s8MetadataV36RandomNumberGeneratorXoshiroWithSeedV10CodingKeysON;
}

unint64_t sub_1B1E123E4()
{
  unint64_t result;

  result = qword_1EEF5EFE8;
  if (!qword_1EEF5EFE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296768, &_s8MetadataV36RandomNumberGeneratorXoshiroWithSeedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5EFE8);
  }
  return result;
}

unint64_t sub_1B1E1242C()
{
  unint64_t result;

  result = qword_1EEF5EFF0;
  if (!qword_1EEF5EFF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22966A0, &_s8MetadataV36RandomNumberGeneratorXoshiroWithSeedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5EFF0);
  }
  return result;
}

unint64_t sub_1B1E12474()
{
  unint64_t result;

  result = qword_1EEF5EFF8;
  if (!qword_1EEF5EFF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22966C8, &_s8MetadataV36RandomNumberGeneratorXoshiroWithSeedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5EFF8);
  }
  return result;
}

uint64_t sub_1B1E124B8(char a1)
{
  unint64_t *v1;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  uint64_t v7;

  v3 = *v1;
  if ((a1 & 1) == 0)
  {
    *v1 = MEMORY[0x1E0DEE9D8];
    return swift_bridgeObjectRelease();
  }
  if ((v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v3 = *v1,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    *v1 = (unint64_t)sub_1B1B1C804(0, v7);
    return swift_bridgeObjectRelease();
  }
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return sub_1B1C93410(0, v5);
}

uint64_t sub_1B1E125C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    MEMORY[0x1E0C80A78](v2, v4);
    swift_retain();
    swift_retain();
    sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v3, (void (*)(uint64_t))sub_1B1E1817C);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E126A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[5];
  __int128 v16;
  _OWORD v17[10];
  uint64_t v18[12];
  _QWORD v19[12];
  _OWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1
    && (sub_1B19F66A0(v1 + 624, (uint64_t)v15, &qword_1ED4BF400),
        sub_1B19F66A0((uint64_t)v15, (uint64_t)v17, &qword_1ED4BF400),
        sub_1B1B3C438((uint64_t *)v17) != 1))
  {
    v4 = *(_QWORD *)(v1 + 632);
    ObjectType = swift_getObjectType();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 144);
    swift_retain();
    swift_unknownObjectRetain();
    v2 = v6(ObjectType, v4);
    swift_release();
    swift_unknownObjectRelease();
    v3 = v2 & 0xFF00000000;
    v2 = v2;
  }
  else
  {
    v2 = 0;
    v3 = 0x200000000;
  }
  if (qword_1ED4B8610 != -1)
    swift_once();
  v30[0] = xmmword_1ED4D0B80;
  v30[1] = *(_OWORD *)algn_1ED4D0B90;
  v31 = qword_1ED4D0BA0;
  v7 = v3 | v2;
  sub_1B1E8FCE4(v0, (uint64_t)v30, v7, v18);
  sub_1B19F66A0((uint64_t)v18, (uint64_t)v15, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v15[0]
    && (v17[2] = v15[2], v17[3] = v15[3], v17[4] = v15[4], v17[5] = v16, v17[0] = v15[0], v17[1] = v15[1], (_QWORD)v16))
  {
    sub_1B1BEC018(0);
    v9 = v8;
    swift_retain();
    v10 = sub_1B1A101F0(v9);
    swift_release();
    v11 = v18;
  }
  else
  {
    if (qword_1EEF57388 != -1)
      swift_once();
    v28[0] = xmmword_1EEFD5608;
    v28[1] = unk_1EEFD5618;
    v29 = qword_1EEFD5628;
    sub_1B1E8FCE4(v0, (uint64_t)v28, v7, v19);
    sub_1B19F66A0((uint64_t)v19, (uint64_t)v20, (unint64_t *)&qword_1ED4B7DE0);
    if (*(_QWORD *)&v20[0])
    {
      v24 = v20[2];
      v25 = v20[3];
      v26 = v20[4];
      v27 = v21;
      v22 = v20[0];
      v23 = v20[1];
      if ((_QWORD)v21)
      {
        sub_1B1BEC018(0);
        v13 = v12;
        swift_retain();
        v10 = sub_1B1A101F0(v13);
        swift_release();
        sub_1B19ED748(v18);
      }
      else
      {
        sub_1B19ED748(v18);
        v10 = 0;
      }
      v11 = v19;
    }
    else
    {
      v10 = 0;
      v11 = v18;
    }
  }
  sub_1B19ED748(v11);
  return v10;
}

uint64_t sub_1B1E129A0@<X0>(__int128 *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[9];
  _OWORD v13[9];
  _BYTE v14[144];
  _BYTE v15[144];

  v2 = swift_retain();
  sub_1B1F217F0(v2, v13);
  swift_release();
  sub_1B1E18620((uint64_t)v13, (uint64_t)v14);
  sub_1B1E18620((uint64_t)v14, (uint64_t)v12);
  sub_1B1E18620((uint64_t)v14, (uint64_t)v15);
  result = sub_1B1E186DC((uint64_t)v15);
  if ((_DWORD)result == 1)
  {
    v4 = xmmword_1B2244E20;
    v5 = xmmword_1B2244D90;
    v6 = xmmword_1B2244DD0;
    v7 = xmmword_1B2244DB0;
    v8 = xmmword_1B2244DB0;
    v9 = xmmword_1B2244DD0;
    v10 = xmmword_1B2244D90;
    v11 = xmmword_1B2244E20;
  }
  else
  {
    v8 = v12[0];
    v9 = v12[1];
    v10 = v12[2];
    v11 = v12[3];
    v7 = v12[4];
    v6 = v12[5];
    v5 = v12[6];
    v4 = v12[7];
  }
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4] = v7;
  a1[5] = v6;
  a1[6] = v5;
  a1[7] = v4;
  return result;
}

void sub_1B1E12A74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(v0 + 1592);
  if (v1)
  {
    v2 = *(void **)(v0 + 24);
    if (v2)
    {
      swift_bridgeObjectRetain();
      if (objc_msgSend(v2, sel_storageMode) == (id)2)
      {
        swift_bridgeObjectRelease();
        return;
      }
      objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v3 = v2;
      if (*(_QWORD *)(v0 + 1408)
        && (v4 = *(void **)(v0 + 1328)) != 0
        && objc_msgSend(*(id *)(v0 + 1328), sel_storageMode) != (id)2)
      {
        objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v5 = v4;
        if (*(_QWORD *)(v1 + 16))
LABEL_9:
          __asm { BR              X9 }
      }
      else if (*(_QWORD *)(v1 + 16))
      {
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
      *(_BYTE *)(v0 + 1610) = 1;
    }
  }
}

uint64_t sub_1B1E12D88()
{
  uint64_t v0;

  sub_1B222A0CC();
  sub_1B1C317B4();
  sub_1B1C317B4();
  sub_1B1C317B4();
  sub_1B1C317B4();
  sub_1B1C31828();
  if (*(_DWORD *)(v0 + 832) >= 2u)
  {
    sub_1B1C317B4();
    sub_1B1C317B4();
    sub_1B1C317B4();
    sub_1B1C317B4();
    sub_1B1C31828();
  }
  sub_1B1C31828();
  sub_1B1C317B4();
  sub_1B222A09C();
  return sub_1B222A0B4();
}

void sub_1B1E12EB4(char a1)
{
  uint64_t v1;
  int8x16_t v2;
  __int128 v3;
  int8x16_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x2_t v20;
  int8x16_t v21;
  simd_float4x4 v22;
  simd_float4x4 v23;

  v2 = *(int8x16_t *)(v1 + 816);
  *(float32x2_t *)&v3 = vdiv_f32((float32x2_t)0xC000000040000000, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1));
  *((_QWORD *)&v3 + 1) = 0x3F800000BF800000;
  *(_OWORD *)(v1 + 848) = v3;
  if ((a1 & 1) != 0)
  {
    v21 = *(int8x16_t *)(v1 + 960);
  }
  else
  {
    *(_OWORD *)(v1 + 960) = 0u;
    v21 = v2;
  }
  v22 = __invert_f4(*(simd_float4x4 *)(v1 + 128));
  v4 = *(int8x16_t *)(v1 + 928);
  v5 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
  v6 = vdiv_f32(v5, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  *(float32x2_t *)v4.i8 = vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v4.i8);
  v7 = vadd_f32(v6, v6);
  __asm { FMOV            V8.2S, #-1.0 }
  *(float32x2_t *)v4.i8 = vsub_f32(_D8, vmul_f32(v6, vadd_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8)));
  v6.i32[0] = v7.i32[1];
  v13.i32[0] = v4.i32[1];
  v14 = vmulq_f32((float32x4_t)v22.columns[0], (float32x4_t)0);
  *(float32x4_t *)(v1 + 672) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v22.columns[0], v7.f32[0]), (float32x4_t)0, (float32x4_t)v22.columns[1]), (float32x4_t)0, (float32x4_t)v22.columns[2]), (float32x4_t)0, (float32x4_t)v22.columns[3]);
  *(float32x4_t *)(v1 + 688) = vmlaq_f32(vmlaq_f32(vmlsq_lane_f32(v14, (float32x4_t)v22.columns[1], v6, 0), (float32x4_t)0, (float32x4_t)v22.columns[2]), (float32x4_t)0, (float32x4_t)v22.columns[3]);
  *(float32x4_t *)(v1 + 704) = vmlaq_f32(vaddq_f32((float32x4_t)v22.columns[2], vmlaq_f32(v14, (float32x4_t)0, (float32x4_t)v22.columns[1])), (float32x4_t)0, (float32x4_t)v22.columns[3]);
  *(float32x4_t *)(v1 + 720) = vaddq_f32((float32x4_t)v22.columns[3], vmlaq_f32(vmlsq_lane_f32(vmulq_n_f32((float32x4_t)v22.columns[0], *(float *)v4.i32), (float32x4_t)v22.columns[1], v13, 0), (float32x4_t)0, (float32x4_t)v22.columns[2]));
  if (*(_DWORD *)(v1 + 832) >= 2u)
  {
    v20 = v5;
    v23 = __invert_f4(*(simd_float4x4 *)(v1 + 192));
    v15 = *(int8x16_t *)(v1 + 944);
    v16 = vdiv_f32(v20, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    *(float32x2_t *)v15.i8 = vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v15.i8);
    v17 = vadd_f32(v16, v16);
    *(float32x2_t *)v15.i8 = vsub_f32(_D8, vmul_f32(v16, vadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)));
    v16.i32[0] = v17.i32[1];
    v18.i32[0] = v15.i32[1];
    v19 = vmulq_f32((float32x4_t)v23.columns[0], (float32x4_t)0);
    *(float32x4_t *)(v1 + 736) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v23.columns[0], v17.f32[0]), (float32x4_t)0, (float32x4_t)v23.columns[1]), (float32x4_t)0, (float32x4_t)v23.columns[2]), (float32x4_t)0, (float32x4_t)v23.columns[3]);
    *(float32x4_t *)(v1 + 752) = vmlaq_f32(vmlaq_f32(vmlsq_lane_f32(v19, (float32x4_t)v23.columns[1], v16, 0), (float32x4_t)0, (float32x4_t)v23.columns[2]), (float32x4_t)0, (float32x4_t)v23.columns[3]);
    *(float32x4_t *)(v1 + 768) = vmlaq_f32(vaddq_f32((float32x4_t)v23.columns[2], vmlaq_f32(v19, (float32x4_t)0, (float32x4_t)v23.columns[1])), (float32x4_t)0, (float32x4_t)v23.columns[3]);
    *(float32x4_t *)(v1 + 784) = vaddq_f32((float32x4_t)v23.columns[3], vmlaq_f32(vmlsq_lane_f32(vmulq_n_f32((float32x4_t)v23.columns[0], *(float *)v15.i32), (float32x4_t)v23.columns[1], v18, 0), (float32x4_t)0, (float32x4_t)v23.columns[2]));
  }
}

double sub_1B1E1303C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void sub_1B1E1304C(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
}

uint64_t sub_1B1E13060()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(v0 + 32);
  v2 = (unint64_t *)(v0 + 32);
  v3 = v4;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  if ((v4 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v3 = *v2,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    *v2 = (unint64_t)sub_1B1B1C804(0, v8);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = sub_1B1C93410(0, v6);
  }
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

uint64_t sub_1B1E13178()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(v0 + 80);
  v2 = (unint64_t *)(v0 + 80);
  v3 = v4;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  if ((v4 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v3 = *v2,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    *v2 = (unint64_t)sub_1B1B1C804(0, v8);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = sub_1B1C93410(0, v6);
  }
  *(_BYTE *)(v1 + 96) = 0;
  return result;
}

uint64_t sub_1B1E13298()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(v0 + 24);
  v2 = (unint64_t *)(v0 + 24);
  v3 = v4;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  if ((v4 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v3 = *v2,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    *v2 = (unint64_t)sub_1B1B1C804(0, v8);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = sub_1B1C93410(0, v6);
  }
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_1B1E133AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  *(_DWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_DWORD *)(v0 + 64) = 0;
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(v0 + 80);
  v2 = (unint64_t *)(v0 + 80);
  v3 = v4;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  if ((v4 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v3 = *v2,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    *v2 = (unint64_t)sub_1B1B1C804(0, v8);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = sub_1B1C93410(0, v6);
  }
  *(_BYTE *)(v1 + 96) = 0;
  return result;
}

uint64_t sub_1B1E134D0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 1224) + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v2 = *(_QWORD *)(v0 + 1224);
    *(_QWORD *)(v0 + 1224) = 0x8000000000000000;
    sub_1B1E181B4();
    sub_1B2229634();
    *(_QWORD *)(v0 + 1224) = v2;
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  bzero((void *)(v0 + 48), 0x348uLL);
  *(_QWORD *)(v0 + 1184) = 0;
  *(_OWORD *)(v0 + 1168) = 0u;
  *(_OWORD *)(v0 + 1152) = 0u;
  *(_OWORD *)(v0 + 1136) = 0u;
  *(_OWORD *)(v0 + 1120) = 0u;
  *(_OWORD *)(v0 + 1104) = 0u;
  *(_OWORD *)(v0 + 1088) = 0u;
  *(_OWORD *)(v0 + 1072) = 0u;
  *(_OWORD *)(v0 + 1056) = 0u;
  *(_OWORD *)(v0 + 1040) = 0u;
  *(_OWORD *)(v0 + 1008) = 0u;
  *(_OWORD *)(v0 + 1024) = 0u;
  *(_OWORD *)(v0 + 976) = 0u;
  *(_OWORD *)(v0 + 992) = 0u;
  *(_OWORD *)(v0 + 944) = 0u;
  *(_OWORD *)(v0 + 960) = 0u;
  *(_OWORD *)(v0 + 912) = 0u;
  *(_OWORD *)(v0 + 928) = 0u;
  *(_OWORD *)(v0 + 896) = 0u;
  *(_QWORD *)(v0 + 1216) = 0;
  *(_OWORD *)(v0 + 1200) = 0u;
  result = sub_1B1E13060();
  if (*(_QWORD *)(v0 + 1408))
    result = sub_1B1E13178();
  if (*(_QWORD *)(v0 + 1456))
    result = sub_1B1E13298();
  if (*(_QWORD *)(v0 + 1568))
    result = sub_1B1E133AC();
  *(_BYTE *)(v0 + 1610) = 0;
  return result;
}

double sub_1B1E135F0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  double result;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B95BF0(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 9) = 0;
  bzero((void *)(a1 + 20), 0x364uLL);
  *(_QWORD *)(a1 + 1184) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_QWORD *)(a1 + 1224) = v3;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1240) = v2;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1304) = v2;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1324) = 0u;
  *(_OWORD *)(a1 + 1340) = 0u;
  *(_OWORD *)(a1 + 1356) = 0u;
  *(_OWORD *)(a1 + 1372) = 0u;
  *(_OWORD *)(a1 + 1388) = 0u;
  *(_OWORD *)(a1 + 1404) = 0u;
  *(_OWORD *)(a1 + 1420) = 0u;
  *(_OWORD *)(a1 + 1436) = 0u;
  *(_OWORD *)(a1 + 1452) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_QWORD *)(a1 + 1600) = 1065353216;
  *(_DWORD *)(a1 + 1607) = 0;
  return result;
}

uint64_t sub_1B1E136FC(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  size_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v6 = result;
    swift_bridgeObjectRetain();
    v7 = a2 + 40;
    do
    {
      if (*(_BYTE *)(v7 + 32) == 2)
      {
        v8 = *(_QWORD *)(v7 + 16);
        v9 = *(unsigned __int8 *)(v7 - 8);
        swift_bridgeObjectRetain();
        v10 = (char *)objc_msgSend(a3, sel_constantData_, v9);
        v12 = 0;
        v13[0] = 0;
        v11 = (void *)sub_1B2228728();
        LODWORD(v9) = objc_msgSend(a3, sel_constantOffsetAndSize__::, v9, v11, v13, &v12);

        if ((_DWORD)v9)
          memcpy((void *)(v6 + v8), &v10[v13[0]], v12);
        swift_bridgeObjectRelease();
      }
      v7 += 48;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_1B1E13840()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1A14B9C(1, 1, 1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1ED4D0B80 = v1[0];
  *(_OWORD *)algn_1ED4D0B90 = v1[1];
  qword_1ED4D0BA0 = v2;
  return result;
}

double sub_1B1E138EC()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1B12C5C(1, 1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD5608 = v1[0];
  unk_1EEFD5618 = v1[1];
  qword_1EEFD5628 = v2;
  return result;
}

double sub_1B1E13994()
{
  float32x4_t *v0;
  double result;

  *(_QWORD *)&result = vmlaq_f32(vmlaq_f32(vmlaq_f32(v0[3], (float32x4_t)0, v0[4]), (float32x4_t)0, v0[5]), (float32x4_t)0, v0[6]).u64[0];
  return result;
}

uint64_t sub_1B1E139F8(uint64_t result, __int16 a2, float a3, float a4)
{
  *(float *)(result + 1600) = a3;
  *(float *)(result + 1604) = a4;
  *(_BYTE *)(result + 1608) = a2 & 1;
  *(_BYTE *)(result + 1609) = HIBYTE(a2) & 1;
  return result;
}

uint64_t sub_1B1E13A14()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1E13A48();
  return v0;
}

uint64_t sub_1B1E13A48()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[40];
  _OWORD v8[2];
  uint64_t v9;
  _BYTE v10[40];
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v35 = qword_1ED4D09F8;
  v36 = 0;
  v37 = 2;
  v38 = 0;
  v39 = 2;
  v40 = 0;
  swift_retain();
  sub_1B1B6C0B0((uint64_t)v7);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 40) = &off_1E638A420;
  sub_1B1B44110(v8, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v7);
  v2 = v8[1];
  *(_OWORD *)(v0 + 16) = v8[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v9;
  v29 = qword_1ED4D09F8;
  v30 = 0;
  v31 = 2;
  v32 = 0;
  v33 = 2;
  v34 = 0;
  swift_retain();
  sub_1B1B6C2A0((uint64_t)v10);
  swift_release();
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v3 + 32) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(v3 + 40) = &off_1E638A420;
  sub_1B1B44110(v11, v3);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v10);
  *(_OWORD *)(v0 + 56) = v11[0];
  *(_OWORD *)(v0 + 72) = v11[1];
  *(_QWORD *)(v0 + 88) = v12;
  v23 = qword_1ED4D09F8;
  v24 = 0;
  v25 = 2;
  v26 = 0;
  v27 = 2;
  v28 = 0;
  swift_retain();
  sub_1B1B1124C(1, 2, (uint64_t)v13);
  swift_release();
  v4 = v13[1];
  *(_OWORD *)(v0 + 96) = v13[0];
  *(_OWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 128) = v14;
  v17 = qword_1ED4D09F8;
  v18 = 0;
  v19 = 2;
  v20 = 0;
  v21 = 2;
  v22 = 0;
  swift_retain();
  sub_1B1B11478(1, 2, (uint64_t)v15);
  swift_release();
  v5 = v15[1];
  *(_OWORD *)(v0 + 136) = v15[0];
  *(_OWORD *)(v0 + 152) = v5;
  *(_QWORD *)(v0 + 168) = v16;
  return v0;
}

const char *sub_1B1E13CD8()
{
  return "Camera";
}

uint64_t sub_1B1E13CEC()
{
  return qword_1EEF5DE78;
}

uint64_t sub_1B1E13CF8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;

  v2 = v1;
  v4 = v1[2];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[7];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[12];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[17];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

void sub_1B1E13F68()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B1E13FC4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int32x4_t *v43;
  uint64_t v44;
  float v45;
  float v46;
  char v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  int32x2_t v53;
  float v54;
  float v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x2x2_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int v62;
  float v63;
  float *v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int32x4_t *v91;
  uint64_t v92;
  float v93;
  float v94;
  char v95;
  float v96;
  float v97;
  float v98;
  float v99;
  int v100;
  int32x2_t v101;
  float v102;
  float v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  float32x2x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int v110;
  float v111;
  float *v112;
  float *i32;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  __int128 v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  os_unfair_lock_s *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t i;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  float32x2_t *v155;
  char v156;
  char v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float32x2_t v163;
  float32x2_t v164;
  __int128 v165;
  int32x4_t v166;
  __int128 v167;
  __int128 v168;
  int32x4_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  float32x2_t *v197;
  char v198;
  char v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float32x2_t v205;
  float32x2_t v206;
  __int128 v207;
  int32x4_t v208;
  __int128 v209;
  __int128 v210;
  int32x4_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t (*v219)(uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  _QWORD v234[2];
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  __int128 v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  int *v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  _OWORD v266[2];
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _OWORD v273[2];
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280[12];
  uint64_t v281[12];
  _OWORD v282[2];
  uint64_t v283;
  _OWORD v284[2];
  uint64_t v285;
  _BYTE v286[40];
  _OWORD v287[2];
  uint64_t v288;
  _BYTE v289[40];
  _OWORD v290[2];
  uint64_t v291;

  v3 = v2;
  sub_1B1B1F358();
  v253 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v252 = (char *)v234 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B222820C();
  v250 = *(_QWORD *)(v9 - 8);
  v251 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v249 = (char *)v234 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v12)
    return;
  if ((a2 & 1) != 0)
  {
    sub_1B19F66A0(v12 + 624, (uint64_t)v266, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v266, (uint64_t)v273, &qword_1ED4BF400);
    if (sub_1B1B3C438((uint64_t *)v273) == 1)
    {
      sub_1B2229688();
      __break(1u);
      return;
    }
    v13 = *((_QWORD *)&v273[0] + 1);
    v14 = *(_QWORD *)&v273[0];
    ObjectType = swift_getObjectType();
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 144);
    swift_unknownObjectRetain_n();
    swift_retain();
    v264 = v13;
    v17 = v16(ObjectType, v13);
    swift_unknownObjectRelease();
    v18 = v17 & 0xFFFFFFFFFFLL;
  }
  else
  {
    if (!*(_QWORD *)(*(_QWORD *)(v12 + 224) + 16))
      return;
    swift_retain();
    v14 = 0;
    v264 = 0;
    v18 = 0x200000000;
  }
  v19 = *(_OWORD *)(v3 + 112);
  v290[0] = *(_OWORD *)(v3 + 96);
  v290[1] = v19;
  v291 = *(_QWORD *)(v3 + 128);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  sub_1B1E8FCE4(a1, (uint64_t)v290, v18, v280);
  sub_1B19F66A0((uint64_t)v280, (uint64_t)v273, (unint64_t *)&qword_1ED4B7DE0);
  v257 = v12;
  v265 = v14;
  if (!*(_QWORD *)&v273[0])
  {
    v23 = 0;
    goto LABEL_102;
  }
  if (v279 < 1 || (v243 = v276) == 0)
  {
    v23 = 0;
    goto LABEL_101;
  }
  v234[1] = v20;
  v235 = v18;
  v236 = v3;
  v237 = a1;
  v245 = v278[4];
  v21 = *(unsigned __int8 *)(v277 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v282[0] = v273[0];
  v282[1] = v273[1];
  v283 = v274;
  v240 = v278 + 6;
  v241 = v275;
  v246 = (unint64_t)v278;
  v239 = v278 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v22 = 0;
  v23 = 0;
  *((_QWORD *)&_Q0 + 1) = 2;
  v254 = xmmword_1B226D240;
  *(_QWORD *)&v247 = "ra";
  v238 = 0x80000001B233DD70;
  __asm { FMOV            V0.2S, #1.0 }
  v261 = _Q0;
  v262 = xmmword_1B2244E20;
  LODWORD(v242) = v21;
  do
  {
    v248 = v23;
    v244 = v22;
    v28 = (unsigned int *)(v241 + 48 * v22);
    v29 = *v28;
    v256 = v28[1];
    v30 = (uint64_t *)*((_QWORD *)v28 + 2);
    v31 = *((_QWORD *)v28 + 3);
    v32 = *((_QWORD *)v28 + 5);
    *(_QWORD *)&v260 = *((_QWORD *)v28 + 4);
    if (v21)
    {
      v33 = *(os_unfair_lock_s **)(v32 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v33);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v245);
    sub_1B19F66A0((uint64_t)v240, (uint64_t)v289, &qword_1ED4B7FB0);
    v34 = (_QWORD *)v246;
    v35 = *(_QWORD *)(v246 + 32);
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
    v258 = (char *)v32;
    swift_retain();
    v34[6] = ecs_stack_allocator_allocate(v35, 48 * v36, 8);
    v34[7] = v36;
    v37 = v239;
    v239[1] = 0;
    v37[2] = 0;
    *v37 = 0;
    swift_release();
    v38 = v260;
    v259 = sub_1B1A12038((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1E6393BD0, v30, v31, v260, (uint64_t)v34);
    *(_QWORD *)&v263 = sub_1B1A12038((uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A398, v30, v31, v38, (uint64_t)v34);
    if (!v30)
    {
      if ((_DWORD)v29 == (_DWORD)v256)
        goto LABEL_57;
      v88 = v259;
      while (1)
      {
        if (v14)
        {
          swift_unknownObjectRetain();
          v89 = v264;
        }
        else
        {
          v114 = *(_QWORD *)(v257 + 224);
          v115 = *(_QWORD *)(v114 + 16);
          if (!v115)
          {
LABEL_88:
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v260 = qword_1ED4D0FB0;
            swift_retain();
            v124 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v125 = qword_1ED4D0FD0;
            v126 = qword_1ED4BF688;
            swift_retain();
            if (v126 != -1)
              swift_once();
            sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v127 = swift_allocObject();
            *(_OWORD *)(v127 + 16) = v254;
            *(_QWORD *)(v127 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v127 + 64) = sub_1B1B1F47C();
            v128 = v238;
            *(_QWORD *)(v127 + 32) = 0xD000000000000035;
            *(_QWORD *)(v127 + 40) = v128;
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v255 = v125;
            v129 = v124;
            v130 = v249;
            sub_1B2228200();
            v131 = (uint64_t)v252;
            v132 = v253[12];
            v133 = v253[16];
            v134 = &v252[v253[20]];
            (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v252, v130, v251);
            *(_BYTE *)(v131 + v132) = v129;
            *(_QWORD *)(v131 + v133) = 0;
            *(_QWORD *)v134 = 0xD000000000000035;
            *((_QWORD *)v134 + 1) = v128;
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v131);
            swift_release();
            swift_release();
            v14 = v265;
            v88 = v259;
            goto LABEL_75;
          }
          v116 = *((_DWORD *)v258 + 7);
          v117 = v258[32];
          swift_bridgeObjectRetain_n();
          *(_QWORD *)&v260 = v114;
          v118 = (uint64_t *)(v114 + 40);
          do
          {
            v89 = *v118;
            if (v117)
            {
              swift_unknownObjectRetain();
LABEL_96:
              swift_bridgeObjectRelease_n();
              goto LABEL_97;
            }
            v119 = swift_getObjectType();
            v120 = *(uint64_t (**)(uint64_t, uint64_t))(v89 + 144);
            swift_unknownObjectRetain();
            if ((v120(v119, v89) & 0xFFFFFFFFFFLL) == 0x200000000)
              goto LABEL_96;
            v121 = v120(v119, v89);
            if ((v121 & 0xFE00000000) == 0 && v116 == (_DWORD)v121)
              goto LABEL_96;
            swift_unknownObjectRelease();
            v118 += 2;
            --v115;
          }
          while (v115);
          swift_bridgeObjectRelease_n();
          v123 = *(_QWORD *)(v257 + 224);
          if (!*(_QWORD *)(v123 + 16))
            goto LABEL_88;
          v89 = *(_QWORD *)(v123 + 40);
          swift_unknownObjectRetain();
LABEL_97:
          v14 = v265;
          v88 = v259;
        }
        v90 = v88 + 20 * v29;
        v91 = (int32x4_t *)(v263 + (v29 << 6));
        v92 = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B1BA0944(v92, v89);
        v94 = v93;
        v95 = sub_1B1BA09AC(*(_BYTE *)(v90 + 4), v92, v89);
        if ((v95 & 1) != 0)
          v96 = *(float *)v90;
        else
          v96 = v94 * *(float *)v90;
        if ((v95 & 1) != 0)
          v97 = *(float *)v90 / v94;
        else
          v97 = *(float *)v90;
        v98 = *(float *)(v90 + 8);
        v99 = *(float *)(v90 + 12);
        v100 = *(unsigned __int8 *)(v90 + 16);
        swift_unknownObjectRelease_n();
        *(float *)v101.i32 = fmaxf(v98, -100000.0);
        v102 = *(float *)v101.i32 + 0.0001;
        if (v99 > (float)(*(float *)v101.i32 + 0.0001))
          v102 = v99;
        if (v100)
          v103 = v102;
        else
          v103 = *(float *)v101.i32;
        if (!v100)
          *(float *)v101.i32 = v102;
        *(float *)v101.i32 = v103 - *(float *)v101.i32;
        *(float32x2_t *)v104.i8 = vdiv_f32((float32x2_t)__PAIR64__(LODWORD(v103), v261), (float32x2_t)vdup_lane_s32(v101, 0));
        v105.i64[0] = 0;
        v105.i32[2] = 0;
        *(float *)&v105.i32[3] = (float)(v96 - v96) / (float)((float)-v96 - v96);
        v106.i32[0] = 0;
        v106.i32[2] = 0;
        *(float *)&v106.i32[1] = 2.0 / (float)(v97 + v97);
        v104.i64[1] = v104.i64[0];
        v107 = (float32x2x2_t)vzip2q_s32(v105, v104);
        v108 = vzip1q_s32((int32x4_t)v106.u64[0], (int32x4_t)0);
        *(float *)&v106.i32[3] = (float)(v97 - v97) / (float)((float)-v97 - v97);
        v109 = vzip2q_s32(v106, (int32x4_t)v262);
        v110 = 0;
        v111 = 2.0 / (float)(v96 + v96);
        v112 = (float *)v91;
        vst2_f32(v112, *(float32x2x2_t *)((char *)&v108 - 8));
        v112 += 4;
        *(int32x4_t *)v112 = vzip2q_s32((int32x4_t)0, v108);
        i32 = (float *)v91[2].i32;
        vst2_f32(i32, v107);
        v91[3] = vzip2q_s32((int32x4_t)v107, v109);
LABEL_75:
        if (++v29 == v256)
          goto LABEL_57;
      }
    }
    if (v38)
    {
      v39 = 0;
      v40 = v259;
      do
      {
        if (v14)
        {
          swift_unknownObjectRetain();
          v41 = v264;
        }
        else
        {
          v66 = *(_QWORD *)(v257 + 224);
          v67 = *(_QWORD *)(v66 + 16);
          if (!v67)
          {
LABEL_46:
            if (qword_1ED4BF430 != -1)
              swift_once();
            v256 = qword_1ED4D0FB0;
            swift_retain();
            v76 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v77 = qword_1ED4D0FD0;
            v78 = qword_1ED4BF688;
            swift_retain();
            if (v78 != -1)
              swift_once();
            sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v79 = swift_allocObject();
            *(_OWORD *)(v79 + 16) = v254;
            *(_QWORD *)(v79 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v79 + 64) = sub_1B1B1F47C();
            v80 = v247 | 0x8000000000000000;
            *(_QWORD *)(v79 + 32) = 0xD000000000000035;
            *(_QWORD *)(v79 + 40) = v80;
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v255 = v77;
            v81 = v76;
            v82 = v249;
            sub_1B2228200();
            v83 = (uint64_t)v252;
            v84 = v253[12];
            v85 = v253[16];
            v86 = &v252[v253[20]];
            (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v252, v82, v251);
            *(_BYTE *)(v83 + v84) = v81;
            *(_QWORD *)(v83 + v85) = 0;
            *(_QWORD *)v86 = 0xD000000000000035;
            *((_QWORD *)v86 + 1) = v80;
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v83);
            swift_release();
            swift_release();
            v14 = v265;
            v40 = v259;
            goto LABEL_33;
          }
          v68 = *((_DWORD *)v258 + 7);
          v69 = v258[32];
          swift_bridgeObjectRetain_n();
          v256 = v66;
          v70 = (uint64_t *)(v66 + 40);
          do
          {
            v41 = *v70;
            if (v69)
            {
              swift_unknownObjectRetain();
LABEL_54:
              swift_bridgeObjectRelease_n();
              goto LABEL_55;
            }
            v71 = swift_getObjectType();
            v72 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 144);
            swift_unknownObjectRetain();
            if ((v72(v71, v41) & 0xFFFFFFFFFFLL) == 0x200000000)
              goto LABEL_54;
            v73 = v72(v71, v41);
            if ((v73 & 0xFE00000000) == 0 && v68 == (_DWORD)v73)
              goto LABEL_54;
            swift_unknownObjectRelease();
            v70 += 2;
            --v67;
          }
          while (v67);
          swift_bridgeObjectRelease_n();
          v75 = *(_QWORD *)(v257 + 224);
          if (!*(_QWORD *)(v75 + 16))
            goto LABEL_46;
          v41 = *(_QWORD *)(v75 + 40);
          swift_unknownObjectRetain();
LABEL_55:
          v14 = v265;
          v40 = v259;
        }
        v42 = v40 + 20 * v39;
        v43 = (int32x4_t *)(v263 + (v39 << 6));
        v44 = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B1BA0944(v44, v41);
        v46 = v45;
        v47 = sub_1B1BA09AC(*(_BYTE *)(v42 + 4), v44, v41);
        if ((v47 & 1) != 0)
          v48 = *(float *)v42;
        else
          v48 = v46 * *(float *)v42;
        if ((v47 & 1) != 0)
          v49 = *(float *)v42 / v46;
        else
          v49 = *(float *)v42;
        v50 = *(float *)(v42 + 8);
        v51 = *(float *)(v42 + 12);
        v52 = *(unsigned __int8 *)(v42 + 16);
        swift_unknownObjectRelease_n();
        *(float *)v53.i32 = fmaxf(v50, -100000.0);
        v54 = *(float *)v53.i32 + 0.0001;
        if (v51 > (float)(*(float *)v53.i32 + 0.0001))
          v54 = v51;
        if (v52)
          v55 = v54;
        else
          v55 = *(float *)v53.i32;
        if (!v52)
          *(float *)v53.i32 = v54;
        *(float *)v53.i32 = v55 - *(float *)v53.i32;
        *(float32x2_t *)v56.i8 = vdiv_f32((float32x2_t)__PAIR64__(LODWORD(v55), v261), (float32x2_t)vdup_lane_s32(v53, 0));
        v57.i64[0] = 0;
        v57.i32[2] = 0;
        *(float *)&v57.i32[3] = (float)(v48 - v48) / (float)((float)-v48 - v48);
        v58.i32[0] = 0;
        v58.i32[2] = 0;
        *(float *)&v58.i32[1] = 2.0 / (float)(v49 + v49);
        v56.i64[1] = v56.i64[0];
        v59 = (float32x2x2_t)vzip2q_s32(v57, v56);
        v60 = vzip1q_s32((int32x4_t)v58.u64[0], (int32x4_t)0);
        *(float *)&v58.i32[3] = (float)(v49 - v49) / (float)((float)-v49 - v49);
        v61 = vzip2q_s32(v58, (int32x4_t)v262);
        v62 = 0;
        v63 = 2.0 / (float)(v48 + v48);
        v64 = (float *)v43;
        vst2_f32(v64, *(float32x2x2_t *)((char *)&v60 - 8));
        v64 += 4;
        *(int32x4_t *)v64 = vzip2q_s32((int32x4_t)0, v60);
        v65 = (float *)v43[2].i32;
        vst2_f32(v65, v59);
        v43[3] = vzip2q_s32((int32x4_t)v59, v61);
LABEL_33:
        ++v39;
      }
      while (v39 != (_QWORD)v260);
    }
LABEL_57:
    v23 = v248;
    sub_1B1F05D48((_QWORD *)v246, (unsigned __int16 **)v282, (uint64_t)v289);
    v87 = v258;
    sub_1B1F03804(v258);
    ecs_stack_allocator_pop_snapshot(v245);
    v21 = (int)v242;
    if ((v242 & 1) != 0)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v87 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v87 + 47));
    }
    swift_release();
    v22 = v244 + 1;
  }
  while (v244 + 1 != v243);
  sub_1B19ED748(v280);
  v3 = v236;
  a1 = v237;
  v18 = v235;
LABEL_101:
  sub_1B19ED748(v280);
LABEL_102:
  v135 = *(_OWORD *)(v3 + 152);
  v287[0] = *(_OWORD *)(v3 + 136);
  v287[1] = v135;
  v288 = *(_QWORD *)(v3 + 168);
  sub_1B1E8FCE4(a1, (uint64_t)v287, v18, v281);
  sub_1B19F66A0((uint64_t)v281, (uint64_t)v266, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v266[0])
  {
    swift_release();
    swift_unknownObjectRelease();
    return;
  }
  if (v272 <= 0)
    goto LABEL_167;
  v243 = v269;
  if (!v269)
    goto LABEL_167;
  v136 = v271;
  v137 = v271[4];
  LODWORD(v245) = *(unsigned __int8 *)(v270 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v284[0] = v266[0];
  v284[1] = v266[1];
  v285 = v267;
  v239 = v271 + 6;
  v240 = (_QWORD *)v268;
  v238 = (unint64_t)(v271 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  v138 = 0;
  v247 = xmmword_1B226D240;
  v246 = (unint64_t)"ra";
  v237 = 0x80000001B233DD70;
  v241 = v137;
  v242 = v136;
  while (2)
  {
    v248 = v23;
    v244 = v138;
    v139 = (unsigned int *)&v240[6 * v138];
    v140 = *v139;
    v141 = (uint64_t *)*((_QWORD *)v139 + 2);
    v142 = *((_QWORD *)v139 + 3);
    v143 = *((_QWORD *)v139 + 4);
    v144 = *((_QWORD *)v139 + 5);
    v255 = v139[1];
    v256 = v143;
    if ((v245 & 1) != 0)
    {
      v145 = *(os_unfair_lock_s **)(v144 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v145);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v144 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v137);
    sub_1B19F66A0((uint64_t)v239, (uint64_t)v286, &qword_1ED4B7FB0);
    v146 = v136[4];
    v147 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v144 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v136[6] = ecs_stack_allocator_allocate(v146, 48 * v147, 8);
    v136[7] = v147;
    v148 = (_QWORD *)v238;
    *(_QWORD *)(v238 + 8) = 0;
    v148[2] = 0;
    *v148 = 0;
    swift_release();
    v149 = v256;
    v259 = sub_1B1A12038((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EDD0, v141, v142, v256, (uint64_t)v136);
    *(_QWORD *)&v254 = v144;
    v258 = (char *)sub_1B1A12038((uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A398, v141, v142, v149, (uint64_t)v136);
    if (!v141)
    {
      if ((_DWORD)v140 == (_DWORD)v255)
        goto LABEL_138;
      while (1)
      {
        if (v14)
        {
          swift_unknownObjectRetain();
          v193 = v264;
        }
        else
        {
          v213 = *(_QWORD *)(v257 + 224);
          v214 = *(_QWORD *)(v213 + 16);
          if (!v214)
          {
LABEL_155:
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v263 = qword_1ED4D0FB0;
            swift_retain();
            v223 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v224 = qword_1ED4D0FD0;
            v225 = qword_1ED4BF688;
            swift_retain();
            if (v225 != -1)
              swift_once();
            sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v226 = swift_allocObject();
            *(_OWORD *)(v226 + 16) = v247;
            *(_QWORD *)(v226 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v226 + 64) = sub_1B1B1F47C();
            v227 = v237;
            *(_QWORD *)(v226 + 32) = 0xD000000000000035;
            *(_QWORD *)(v226 + 40) = v227;
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            *(_QWORD *)&v262 = v224;
            v228 = v223;
            v229 = v249;
            sub_1B2228200();
            v230 = (uint64_t)v252;
            v231 = v253[12];
            v232 = v253[16];
            v233 = &v252[v253[20]];
            (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v252, v229, v251);
            *(_BYTE *)(v230 + v231) = v228;
            *(_QWORD *)(v230 + v232) = 0;
            *(_QWORD *)v233 = 0xD000000000000035;
            *((_QWORD *)v233 + 1) = v227;
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v230);
            swift_release();
            swift_release();
            goto LABEL_142;
          }
          v215 = *(_DWORD *)(v254 + 28);
          v216 = *(unsigned __int8 *)(v254 + 32);
          swift_bridgeObjectRetain_n();
          *(_QWORD *)&v263 = v213;
          v217 = (uint64_t *)(v213 + 40);
          do
          {
            v193 = *v217;
            if (v216)
            {
              swift_unknownObjectRetain();
LABEL_163:
              swift_bridgeObjectRelease_n();
              goto LABEL_141;
            }
            v218 = swift_getObjectType();
            v219 = *(uint64_t (**)(uint64_t, uint64_t))(v193 + 144);
            swift_unknownObjectRetain();
            if ((v219(v218, v193) & 0xFFFFFFFFFFLL) == 0x200000000)
              goto LABEL_163;
            v220 = v219(v218, v193);
            if ((v220 & 0xFE00000000) == 0 && v215 == (_DWORD)v220)
              goto LABEL_163;
            swift_unknownObjectRelease();
            v217 += 2;
            --v214;
          }
          while (v214);
          swift_bridgeObjectRelease_n();
          v222 = *(_QWORD *)(v257 + 224);
          if (!*(_QWORD *)(v222 + 16))
            goto LABEL_155;
          v193 = *(_QWORD *)(v222 + 40);
          swift_unknownObjectRetain();
        }
LABEL_141:
        v194 = v259;
        v195 = &v258[64 * v140];
        v196 = swift_getObjectType();
        v197 = (float32x2_t *)(v194 + 48 * v140);
        v198 = v197[4].i8[1];
        swift_unknownObjectRetain();
        v199 = sub_1B1BA09AC(v198, v196, v193) & 1;
        v200 = v197->f32[0];
        sub_1B1BA0944(v196, v193);
        v202 = v201;
        v203 = v197[3].f32[0];
        v204 = v197[3].f32[1];
        LOBYTE(v194) = v197[4].i8[0];
        v205 = v197[5];
        v206 = sub_1B1BA08F0(v196, v193);
        sub_1B1C31954(v194, v199, v200, v202, v203, v204, v205, *(_QWORD *)&v206, 0);
        v262 = (__int128)v208;
        v263 = v207;
        v260 = v210;
        v261 = v209;
        swift_unknownObjectRelease_n();
        v211 = (int32x4_t)v262;
        *(_OWORD *)v195 = v263;
        *((int32x4_t *)v195 + 1) = v211;
        v212 = v260;
        *((_OWORD *)v195 + 2) = v261;
        *((_OWORD *)v195 + 3) = v212;
LABEL_142:
        ++v140;
        v14 = v265;
        if (v140 == v255)
          goto LABEL_138;
      }
    }
    if (v149)
    {
      for (i = 0; i != v256; ++i)
      {
        if (v14)
        {
          swift_unknownObjectRetain();
          v151 = v264;
        }
        else
        {
          v171 = *(_QWORD *)(v257 + 224);
          v172 = *(_QWORD *)(v171 + 16);
          if (!v172)
          {
LABEL_128:
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v263 = qword_1ED4D0FB0;
            swift_retain();
            v181 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v182 = qword_1ED4D0FD0;
            v183 = qword_1ED4BF688;
            swift_retain();
            if (v183 != -1)
              swift_once();
            sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v184 = swift_allocObject();
            *(_OWORD *)(v184 + 16) = v247;
            *(_QWORD *)(v184 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v184 + 64) = sub_1B1B1F47C();
            v185 = v246 | 0x8000000000000000;
            *(_QWORD *)(v184 + 32) = 0xD000000000000035;
            *(_QWORD *)(v184 + 40) = v185;
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            *(_QWORD *)&v262 = v182;
            v186 = v181;
            v187 = v249;
            sub_1B2228200();
            v188 = (uint64_t)v252;
            v189 = v253[12];
            v190 = v253[16];
            v191 = &v252[v253[20]];
            (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v252, v187, v251);
            *(_BYTE *)(v188 + v189) = v186;
            *(_QWORD *)(v188 + v190) = 0;
            *(_QWORD *)v191 = 0xD000000000000035;
            *((_QWORD *)v191 + 1) = v185;
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v188);
            swift_release();
            swift_release();
            goto LABEL_115;
          }
          v173 = *(_DWORD *)(v254 + 28);
          v174 = *(unsigned __int8 *)(v254 + 32);
          swift_bridgeObjectRetain_n();
          *(_QWORD *)&v263 = v171;
          v175 = (uint64_t *)(v171 + 40);
          do
          {
            v151 = *v175;
            if (v174)
            {
              swift_unknownObjectRetain();
LABEL_136:
              swift_bridgeObjectRelease_n();
              goto LABEL_114;
            }
            v176 = swift_getObjectType();
            v177 = *(uint64_t (**)(uint64_t, uint64_t))(v151 + 144);
            swift_unknownObjectRetain();
            if ((v177(v176, v151) & 0xFFFFFFFFFFLL) == 0x200000000)
              goto LABEL_136;
            v178 = v177(v176, v151);
            if ((v178 & 0xFE00000000) == 0 && v173 == (_DWORD)v178)
              goto LABEL_136;
            swift_unknownObjectRelease();
            v175 += 2;
            --v172;
          }
          while (v172);
          swift_bridgeObjectRelease_n();
          v180 = *(_QWORD *)(v257 + 224);
          if (!*(_QWORD *)(v180 + 16))
            goto LABEL_128;
          v151 = *(_QWORD *)(v180 + 40);
          swift_unknownObjectRetain();
        }
LABEL_114:
        v152 = v259;
        v153 = &v258[64 * i];
        v154 = swift_getObjectType();
        v155 = (float32x2_t *)(v152 + 48 * i);
        v156 = v155[4].i8[1];
        swift_unknownObjectRetain();
        v157 = sub_1B1BA09AC(v156, v154, v151) & 1;
        v158 = v155->f32[0];
        sub_1B1BA0944(v154, v151);
        v160 = v159;
        v161 = v155[3].f32[0];
        v162 = v155[3].f32[1];
        LOBYTE(v152) = v155[4].i8[0];
        v163 = v155[5];
        v164 = sub_1B1BA08F0(v154, v151);
        sub_1B1C31954(v152, v157, v158, v160, v161, v162, v163, *(_QWORD *)&v164, 0);
        v262 = (__int128)v166;
        v263 = v165;
        v260 = v168;
        v261 = v167;
        swift_unknownObjectRelease_n();
        v169 = (int32x4_t)v262;
        *(_OWORD *)v153 = v263;
        *((int32x4_t *)v153 + 1) = v169;
        v170 = v260;
        *((_OWORD *)v153 + 2) = v261;
        *((_OWORD *)v153 + 3) = v170;
LABEL_115:
        v14 = v265;
      }
    }
LABEL_138:
    v136 = v242;
    v23 = v248;
    sub_1B1F05D48(v242, (unsigned __int16 **)v284, (uint64_t)v286);
    v192 = v254;
    sub_1B1F03804((char *)v254);
    v137 = v241;
    ecs_stack_allocator_pop_snapshot(v241);
    if ((v245 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v192 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v192 + 376));
    }
    swift_release();
    v138 = v244 + 1;
    if (v244 + 1 != v243)
      continue;
    break;
  }
  sub_1B19ED748(v281);
LABEL_167:
  swift_release();
  swift_unknownObjectRelease();
  sub_1B19ED748(v281);
}

uint64_t type metadata accessor for CameraSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1E15754()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t sub_1B1E15760()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t sub_1B1E1576C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1B1E15774()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1B1E15780()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

const char *sub_1B1E15790()
{
  return "PreUpdateCamera";
}

uint64_t sub_1B1E157A4()
{
  return qword_1EEF5DE00 - 2;
}

void sub_1B1E157B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  int v28;
  int v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35[8];
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[7];
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;

  v2 = v1;
  v3 = a1;
  v4 = *(_OWORD *)(v1 + 32);
  v48[0] = *(_OWORD *)(v1 + 16);
  v48[1] = v4;
  v49 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v48, 0x200000000, v35);
  sub_1B19F66A0((uint64_t)v35, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0);
  if (v43[0])
  {
    if (v45 >= 1)
    {
      v5 = v44;
      if (v44)
      {
        v30 = v3;
        v6 = v43[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 48 * v5;
        v8 = (uint64_t *)(v6 + 40);
        do
        {
          v13 = *v8;
          v14 = *(os_unfair_lock_s **)(*v8 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          v15 = *(_DWORD *)(v13 + 24);
          swift_retain();
          v39 = 0;
          memset(v38, 0, sizeof(v38));
          v37 = 0;
          memset(v36, 0, sizeof(v36));
          v16 = sub_1B1DA4ED8(v15, (uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A398, 0, 0, (uint64_t)v38, (uint64_t)v36);
          swift_release();
          sub_1B1A12E98((uint64_t)v36);
          sub_1B1A12E98((uint64_t)v38);
          if (sub_1B1A10B20(v16))
          {
            sub_1B1A10BB0(v16);
          }
          else
          {
            v9 = *(_QWORD *)(v13 + 232);
            v10 = *(_QWORD *)(v13 + 240);
            v11 = *(unsigned __int8 *)(v13 + 120);
            v12 = *(unsigned int *)(v13 + 28);
            LOBYTE(v38[0]) = *(_BYTE *)(v13 + 32);
            sub_1B1FD8C68(v9, v10, v16, v11, v12 | ((unint64_t)LOBYTE(v38[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          swift_release();
          v8 += 6;
          v7 -= 48;
        }
        while (v7);
        sub_1B19ED748(v35);
        v3 = v30;
      }
    }
    sub_1B19ED748(v35);
  }
  v17 = *(_OWORD *)(v2 + 72);
  v46[0] = *(_OWORD *)(v2 + 56);
  v46[1] = v17;
  v47 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(v3, (uint64_t)v46, 0x200000000, v36);
  sub_1B19F66A0((uint64_t)v36, (uint64_t)v38, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v38[0])
  {
    if (v42 >= 1)
    {
      v18 = v41;
      if (v41)
      {
        v19 = v40;
        swift_retain();
        swift_retain();
        swift_retain();
        v20 = 48 * v18;
        v21 = (uint64_t *)(v19 + 40);
        do
        {
          v26 = *v21;
          v27 = *(os_unfair_lock_s **)(*v21 + 376);
          swift_retain();
          os_unfair_lock_lock(v27);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
          v28 = *(_DWORD *)(v26 + 24);
          swift_retain();
          v34 = 0;
          memset(v33, 0, sizeof(v33));
          v32 = 0;
          memset(v31, 0, sizeof(v31));
          v29 = sub_1B1DA4ED8(v28, (uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A398, 0, 0, (uint64_t)v33, (uint64_t)v31);
          swift_release();
          sub_1B1A12E98((uint64_t)v31);
          sub_1B1A12E98((uint64_t)v33);
          if (sub_1B1A10B20(v29))
          {
            sub_1B1A10BB0(v29);
          }
          else
          {
            v22 = *(_QWORD *)(v26 + 232);
            v23 = *(_QWORD *)(v26 + 240);
            v24 = *(unsigned __int8 *)(v26 + 120);
            v25 = *(unsigned int *)(v26 + 28);
            LOBYTE(v33[0]) = *(_BYTE *)(v26 + 32);
            sub_1B1FD8C68(v22, v23, v29, v24, v25 | ((unint64_t)LOBYTE(v33[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
          swift_release();
          v21 += 6;
          v20 -= 48;
        }
        while (v20);
        sub_1B19ED748((uint64_t *)v36);
      }
    }
    sub_1B19ED748((uint64_t *)v36);
  }
  sub_1B1E13FC4(v3, 0);
}

uint64_t type metadata accessor for PreUpdateCameraSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E15BC4()
{
  return "PreRenderCamera";
}

uint64_t sub_1B1E15BD8()
{
  return qword_1EEF5DE30 - 2;
}

void sub_1B1E15BE8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) & 1) == 0)
    sub_1B1E13FC4(a1, 1);
}

uint64_t type metadata accessor for PreRenderCameraSystem()
{
  return objc_opt_self();
}

void sub_1B1E15C28(float32x4_t *a1, uint64_t a2, char a3, float32x4_t a4)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  simd_float4x4 v27;
  simd_float4x4 v28;
  simd_float4x4 v29;
  simd_float4x4 v30;

  v27 = *(simd_float4x4 *)a2;
  v8 = vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)a2, (float32x4_t)0, (float32x4_t)v27.columns[1]), (float32x4_t)0, (float32x4_t)v27.columns[2]), (float32x4_t)0, (float32x4_t)v27.columns[3]);
  v9 = vmulq_f32(*(float32x4_t *)a2, (float32x4_t)0);
  v10 = vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v27.columns[1], v9), (float32x4_t)0, (float32x4_t)v27.columns[2]), (float32x4_t)0, (float32x4_t)v27.columns[3]);
  v11 = vmlaq_f32(vaddq_f32((float32x4_t)v27.columns[2], vmlaq_f32(v9, (float32x4_t)0, (float32x4_t)v27.columns[1])), (float32x4_t)0, (float32x4_t)v27.columns[3]);
  v26 = a4;
  v12 = vaddq_f32((float32x4_t)v27.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, a4.f32[0]), (float32x4_t)v27.columns[1], *(float32x2_t *)a4.f32, 1), (float32x4_t)v27.columns[2], a4, 2));
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v11;
  a1[3] = v12;
  v13 = a1[16];
  v14 = a1[17];
  v15 = a1[18];
  v16 = a1[19];
  a1[8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v8.f32[0]), v14, *(float32x2_t *)v8.f32, 1), v15, v8, 2), v16, v8, 3);
  a1[9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v10.f32[0]), v14, *(float32x2_t *)v10.f32, 1), v15, v10, 2), v16, v10, 3);
  a1[10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v11.f32[0]), v14, *(float32x2_t *)v11.f32, 1), v15, v11, 2), v16, v11, 3);
  a1[11] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v12.f32[0]), v14, *(float32x2_t *)v12.f32, 1), v15, v12, 2), v16, v12, 3);
  v28 = __invert_f4(v27);
  a1[32] = vsubq_f32((float32x4_t)v28.columns[3], v26);
  if (a1[52].i32[0] >= 2u)
  {
    v29 = *(simd_float4x4 *)(a2 + 64);
    v17 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v29.columns[0], (float32x4_t)0, (float32x4_t)v29.columns[1]), (float32x4_t)0, (float32x4_t)v29.columns[2]), (float32x4_t)0, (float32x4_t)v29.columns[3]);
    v18 = vmulq_f32((float32x4_t)v29.columns[0], (float32x4_t)0);
    v19 = vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v29.columns[1], v18), (float32x4_t)0, (float32x4_t)v29.columns[2]), (float32x4_t)0, (float32x4_t)v29.columns[3]);
    v20 = vmlaq_f32(vaddq_f32((float32x4_t)v29.columns[2], vmlaq_f32(v18, (float32x4_t)0, (float32x4_t)v29.columns[1])), (float32x4_t)0, (float32x4_t)v29.columns[3]);
    v21 = vaddq_f32((float32x4_t)v29.columns[3], vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v29.columns[0], v26.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1), (float32x4_t)v29.columns[1]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), (float32x4_t)v29.columns[2]));
    a1[4] = v17;
    a1[5] = v19;
    a1[6] = v20;
    a1[7] = v21;
    v22 = a1[20];
    v23 = a1[21];
    v24 = a1[22];
    v25 = a1[23];
    a1[12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v17.f32[0]), v23, *(float32x2_t *)v17.f32, 1), v24, v17, 2), v25, v17, 3);
    a1[13] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v19.f32[0]), v23, *(float32x2_t *)v19.f32, 1), v24, v19, 2), v25, v19, 3);
    a1[14] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v20.f32[0]), v23, *(float32x2_t *)v20.f32, 1), v24, v20, 2), v25, v20, 3);
    a1[15] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v21.f32[0]), v23, *(float32x2_t *)v21.f32, 1), v24, v21, 2), v25, v21, 3);
    v30 = __invert_f4(v29);
    a1[33] = vsubq_f32((float32x4_t)v30.columns[3], v26);
  }
  sub_1B1E15DEC();
  sub_1B1E12EB4(a3 & 1);
}

void sub_1B1E15DEC()
{
  uint64_t v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  simd_float4x4 v13;

  v1 = *(float32x4_t *)(v0 + 256);
  v2 = *(float32x4_t *)(v0 + 272);
  v4 = *(float32x4_t *)(v0 + 288);
  v3 = *(float32x4_t *)(v0 + 304);
  v5 = *(float32x4_t *)(v0 + 16);
  v6 = *(float32x4_t *)(v0 + 32);
  v7 = *(float32x4_t *)(v0 + 48);
  v8 = vmulq_f32(*(float32x4_t *)v0, (float32x4_t)0);
  v9 = vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)v0, (float32x4_t)0, v5), (float32x4_t)0, v6), (float32x4_t)0, v7);
  v10 = vmlaq_f32(vmlaq_f32(vaddq_f32(v5, v8), (float32x4_t)0, v6), (float32x4_t)0, v7);
  v11 = vmlaq_f32(vaddq_f32(v6, vmlaq_f32(v8, (float32x4_t)0, v5)), (float32x4_t)0, v7);
  v12 = vaddq_f32(v7, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v0, 0.0 - *(float *)(v0 + 800)), v5, 0.0 - *(float *)(v0 + 804)), v6, 0.0 - *(float *)(v0 + 808)));
  v13.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1, v9.f32[0]), v2, *(float32x2_t *)v9.f32, 1), v4, v9, 2), v3, v9, 3);
  v13.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1, v10.f32[0]), v2, *(float32x2_t *)v10.f32, 1), v4, v10, 2), v3, v10, 3);
  v13.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1, v11.f32[0]), v2, *(float32x2_t *)v11.f32, 1), v4, v11, 2), v3, v11, 3);
  v13.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1, v12.f32[0]), v2, *(float32x2_t *)v12.f32, 1), v4, v12, 2), v3, v12, 3);
  *(simd_float4x4 *)(v0 + 544) = __invert_f4(v13);
  *(simd_float4x4 *)(v0 + 608) = __invert_f4(*(simd_float4x4 *)(v0 + 128));
}

void sub_1B1E15EC8(__int32 a1, char a2, uint64_t a3, uint64_t a4, char a5, int a6, int a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,uint64_t a25,uint64_t a26,__int128 a27)
{
  uint64_t v27;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v41;
  int v42;
  int v43;
  uint64_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  simd_float4 v59;
  simd_float4 v60;
  simd_float4 v61;
  simd_float4 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  simd_float4 v68;
  float32x4_t v70;
  float32x4_t v72;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x2_t v85;
  simd_float4x4 v86;
  simd_float4x4 v87;
  simd_float4x4 v88;
  simd_float4x4 v89;

  v80 = vmlaq_f32(vmlaq_f32(vmlaq_f32(a9, (float32x4_t)0, a10), (float32x4_t)0, a11), (float32x4_t)0, a12);
  v34 = vmulq_f32(a9, (float32x4_t)0);
  v79 = vmlaq_f32(vmlaq_f32(vaddq_f32(v34, a10), (float32x4_t)0, a11), (float32x4_t)0, a12);
  *(float32x4_t *)v27 = v80;
  *(float32x4_t *)(v27 + 16) = v79;
  v75 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a9, *(float *)&a27), a10, *(float32x2_t *)&a27, 1), a11, (float32x4_t)a27, 2), a12);
  v76 = vmlaq_f32(vaddq_f32(vmlaq_f32(v34, (float32x4_t)0, a10), a11), (float32x4_t)0, a12);
  *(float32x4_t *)(v27 + 32) = v76;
  *(float32x4_t *)(v27 + 48) = v75;
  v86.columns[0] = (simd_float4)a13;
  *(float32x4_t *)(v27 + 256) = a13;
  *(float32x4_t *)(v27 + 272) = a14;
  v86.columns[1] = (simd_float4)a14;
  v86.columns[2] = (simd_float4)a15;
  *(float32x4_t *)(v27 + 288) = a15;
  *(float32x4_t *)(v27 + 304) = a16;
  v86.columns[3] = (simd_float4)a16;
  v87 = __invert_f4(v86);
  v61 = v87.columns[1];
  v62 = v87.columns[0];
  *(simd_float4x4 *)(v27 + 384) = v87;
  v59 = v87.columns[3];
  v60 = v87.columns[2];
  v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v79.f32[0]), a14, *(float32x2_t *)v79.f32, 1), a15, v79, 2), a16, v79, 3);
  v66 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v80.f32[0]), a14, *(float32x2_t *)v80.f32, 1), a15, v80, 2), a16, v80, 3);
  *(float32x4_t *)(v27 + 128) = v66;
  *(float32x4_t *)(v27 + 144) = v65;
  v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v75.f32[0]), a14, *(float32x2_t *)v75.f32, 1), a15, v75, 2), a16, v75, 3);
  v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v76.f32[0]), a14, *(float32x2_t *)v76.f32, 1), a15, v76, 2), a16, v76, 3);
  *(float32x4_t *)(v27 + 160) = v64;
  *(float32x4_t *)(v27 + 176) = v63;
  v87.columns[0] = (simd_float4)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)a17, (float32x4_t)0, (float32x4_t)a18), (float32x4_t)0, (float32x4_t)a19), (float32x4_t)0, (float32x4_t)a20);
  v87.columns[1] = (simd_float4)vmulq_f32((float32x4_t)a17, (float32x4_t)0);
  v87.columns[2] = (simd_float4)vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v87.columns[1], (float32x4_t)a18), (float32x4_t)0, (float32x4_t)a19), (float32x4_t)0, (float32x4_t)a20);
  v87.columns[1] = (simd_float4)vmlaq_f32(vaddq_f32(vmlaq_f32((float32x4_t)v87.columns[1], (float32x4_t)0, (float32x4_t)a18), (float32x4_t)a19), (float32x4_t)0, (float32x4_t)a20);
  v87.columns[3] = (simd_float4)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a17, *(float *)&a27), (float32x4_t)a18, *(float32x2_t *)&a27, 1), (float32x4_t)a19, (float32x4_t)a27, 2), (float32x4_t)a20);
  v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a21, v87.columns[0].f32[0]), (float32x4_t)a22, *(float32x2_t *)v87.columns[0].f32, 1), (float32x4_t)a23, (float32x4_t)v87.columns[0], 2), (float32x4_t)a24, (float32x4_t)v87.columns[0], 3);
  v87.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a21, v87.columns[2].f32[0]), (float32x4_t)a22, *(float32x2_t *)v87.columns[2].f32, 1), (float32x4_t)a23, (float32x4_t)v87.columns[2], 2), (float32x4_t)a24, (float32x4_t)v87.columns[2], 3);
  v70 = v35;
  *(float32x4_t *)(v27 + 992) = v35;
  *(simd_float4 *)(v27 + 1008) = v87.columns[0];
  v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a21, v87.columns[1].f32[0]), (float32x4_t)a22, *(float32x2_t *)v87.columns[1].f32, 1), (float32x4_t)a23, (float32x4_t)v87.columns[1], 2), (float32x4_t)a24, (float32x4_t)v87.columns[1], 3);
  *(float32x4_t *)(v27 + 1024) = v72;
  v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a21, v87.columns[3].f32[0]), (float32x4_t)a22, *(float32x2_t *)v87.columns[3].f32, 1), (float32x4_t)a23, (float32x4_t)v87.columns[3], 2), (float32x4_t)a24, (float32x4_t)v87.columns[3], 3);
  v68 = v87.columns[0];
  *(float32x4_t *)(v27 + 1040) = v67;
  v87.columns[0] = (simd_float4)a9;
  v87.columns[1] = (simd_float4)a10;
  v87.columns[2] = (simd_float4)a11;
  v87.columns[3] = (simd_float4)a12;
  _Q0 = __invert_f4(v87);
  _Q0.columns[0] = (simd_float4)vsubq_f32((float32x4_t)_Q0.columns[3], (float32x4_t)a27);
  *(simd_float4 *)(v27 + 512) = _Q0.columns[0];
  if ((a5 & 1) != 0)
  {
    _Q0.columns[1].i32[0] = 1;
    _Q0.columns[2].i32[0] = a1;
    _Q0.columns[2] = (simd_float4)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)_Q0.columns[2], (int8x16_t)_Q0.columns[1]), 0), (int8x16_t)xmmword_1B227DB80, (int8x16_t)xmmword_1B2244E10);
  }
  else
  {
    _Q0.columns[2].i64[0] = a3;
    _Q0.columns[2].i64[1] = a4;
  }
  _Q0.columns[1] = (simd_float4)v65;
  _Q0.columns[3] = (simd_float4)v63;
  v74 = (int8x16_t)_Q0.columns[2];
  *(simd_float4 *)(v27 + 928) = _Q0.columns[2];
  __asm { FMOV            V2.2S, #1.0 }
  v41.i64[0] = a26;
  v41.u64[1] = (unint64_t)vdiv_f32(*(float32x2_t *)_Q0.columns[2].f32, (float32x2_t)a26);
  *(_OWORD *)(v27 + 800) = a27;
  *(int8x16_t *)(v27 + 816) = v41;
  v78 = v41;
  if ((_BYTE)a1)
  {
    *(float32x4_t *)(v27 + 64) = v80;
    *(float32x4_t *)(v27 + 80) = v79;
    *(float32x4_t *)(v27 + 96) = v76;
    *(float32x4_t *)(v27 + 112) = v75;
    *(float32x4_t *)(v27 + 320) = a13;
    *(float32x4_t *)(v27 + 336) = a14;
    *(float32x4_t *)(v27 + 352) = a15;
    *(float32x4_t *)(v27 + 368) = a16;
    *(simd_float4 *)(v27 + 448) = v62;
    *(simd_float4 *)(v27 + 464) = v61;
    *(simd_float4 *)(v27 + 480) = v60;
    *(simd_float4 *)(v27 + 496) = v59;
    *(float32x4_t *)(v27 + 192) = v66;
    *(float32x4_t *)(v27 + 208) = v65;
    *(float32x4_t *)(v27 + 224) = v64;
    *(float32x4_t *)(v27 + 240) = v63;
    *(float32x4_t *)(v27 + 1056) = v70;
    *(simd_float4 *)(v27 + 1072) = v68;
    *(float32x4_t *)(v27 + 1088) = v72;
    _Q0.columns[2] = (simd_float4)v67;
    *(float32x4_t *)(v27 + 1104) = v67;
    *(simd_float4 *)(v27 + 528) = _Q0.columns[0];
    _Q0.columns[0].i32[0] = 1;
    _Q0.columns[2].i32[0] = a1;
    *(int8x16_t *)(v27 + 944) = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)_Q0.columns[2], (int8x16_t)_Q0.columns[0]), 0), (int8x16_t)xmmword_1B227DB90, (int8x16_t)xmmword_1B2244E10);
    v42 = a2 & 1;
    v43 = 2;
  }
  else
  {
    v42 = 0;
    v43 = 1;
  }
  *(_DWORD *)(v27 + 836) = v42;
  *(_DWORD *)(v27 + 832) = v43;
  *(_QWORD *)(v27 + 864) = a25;
  *(float *)&v44 = *(float *)&a25 / *((float *)&a25 + 1);
  *((float *)&v44 + 1) = (float)(*((float *)&a25 + 1) - *(float *)&a25)
                       / vmuls_lane_f32(*(float *)&a25, (float32x2_t)a25, 1);
  *(_QWORD *)(v27 + 872) = v44;
  *(float32x2_t *)_Q0.columns[0].f32 = vdiv_f32((float32x2_t)0xC000000040000000, (float32x2_t)vdup_lane_s32((int32x2_t)a26, 1));
  _Q0.columns[0].i64[1] = 0x3F800000BF800000;
  *(simd_float4 *)(v27 + 848) = _Q0.columns[0];
  _Q0.columns[0].i64[0] = 0;
  _Q0.columns[0].i16[5] = 0;
  _Q0.columns[0].i16[7] = 0;
  *(simd_float4 *)(v27 + 960) = _Q0.columns[0];
  _Q0.columns[0] = (simd_float4)v66;
  _Q0.columns[2] = (simd_float4)v64;
  v88 = __invert_f4(_Q0);
  v45 = (float32x2_t)vextq_s8(v78, v78, 8uLL).u64[0];
  v46 = vdiv_f32(v45, (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
  v47 = vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v74.i8);
  v48 = vadd_f32(v46, v46);
  v49 = vadd_f32(v47, v47);
  __asm { FMOV            V8.2S, #-1.0 }
  v51 = vsub_f32(_D8, vmul_f32(v46, v49));
  v49.i32[0] = v48.i32[1];
  v52.i32[0] = v51.i32[1];
  v53 = vmulq_f32((float32x4_t)v88.columns[0], (float32x4_t)0);
  *(float32x4_t *)(v27 + 672) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v88.columns[0], v48.f32[0]), (float32x4_t)0, (float32x4_t)v88.columns[1]), (float32x4_t)0, (float32x4_t)v88.columns[2]), (float32x4_t)0, (float32x4_t)v88.columns[3]);
  *(float32x4_t *)(v27 + 688) = vmlaq_f32(vmlaq_f32(vmlsq_lane_f32(v53, (float32x4_t)v88.columns[1], v49, 0), (float32x4_t)0, (float32x4_t)v88.columns[2]), (float32x4_t)0, (float32x4_t)v88.columns[3]);
  *(float32x4_t *)(v27 + 704) = vmlaq_f32(vaddq_f32((float32x4_t)v88.columns[2], vmlaq_f32(v53, (float32x4_t)0, (float32x4_t)v88.columns[1])), (float32x4_t)0, (float32x4_t)v88.columns[3]);
  *(float32x4_t *)(v27 + 720) = vaddq_f32((float32x4_t)v88.columns[3], vmlaq_f32(vmlsq_lane_f32(vmulq_n_f32((float32x4_t)v88.columns[0], v51.f32[0]), (float32x4_t)v88.columns[1], v52, 0), (float32x4_t)0, (float32x4_t)v88.columns[2]));
  if ((_BYTE)a1)
  {
    v85 = v45;
    v89 = __invert_f4(*(simd_float4x4 *)(v27 + 192));
    v54 = *(int8x16_t *)(v27 + 944);
    v55 = vdiv_f32(v85, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
    *(float32x2_t *)v54.i8 = vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v54.i8);
    v56 = vadd_f32(v55, v55);
    *(float32x2_t *)v54.i8 = vsub_f32(_D8, vmul_f32(v55, vadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8)));
    v55.i32[0] = v56.i32[1];
    v57.i32[0] = v54.i32[1];
    v58 = vmulq_f32((float32x4_t)v89.columns[0], (float32x4_t)0);
    *(float32x4_t *)(v27 + 736) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v89.columns[0], v56.f32[0]), (float32x4_t)0, (float32x4_t)v89.columns[1]), (float32x4_t)0, (float32x4_t)v89.columns[2]), (float32x4_t)0, (float32x4_t)v89.columns[3]);
    *(float32x4_t *)(v27 + 752) = vmlaq_f32(vmlaq_f32(vmlsq_lane_f32(v58, (float32x4_t)v89.columns[1], v55, 0), (float32x4_t)0, (float32x4_t)v89.columns[2]), (float32x4_t)0, (float32x4_t)v89.columns[3]);
    *(float32x4_t *)(v27 + 768) = vmlaq_f32(vaddq_f32((float32x4_t)v89.columns[2], vmlaq_f32(v58, (float32x4_t)0, (float32x4_t)v89.columns[1])), (float32x4_t)0, (float32x4_t)v89.columns[3]);
    *(float32x4_t *)(v27 + 784) = vaddq_f32((float32x4_t)v89.columns[3], vmlaq_f32(vmlsq_lane_f32(vmulq_n_f32((float32x4_t)v89.columns[0], *(float *)v54.i32), (float32x4_t)v89.columns[1], v57, 0), (float32x4_t)0, (float32x4_t)v89.columns[2]));
  }
  sub_1B1E15DEC();
}

uint64_t sub_1B1E163EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  BOOL v7;

  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  v3 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 16);
  v4 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 24);
  v5 = *(double *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  *(_DWORD *)v1 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  *(float *)(v1 + 4) = v5;
  if ((v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 12) = v4;
    v7 = v2 == 1 && v3 == 0;
    *(_BYTE *)(v1 + 8) = v7;
  }
  return result;
}

uint64_t sub_1B1E164D0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;

  v0 = swift_retain();
  v1 = sub_1B1F214E4(v0);
  v3 = v2;
  v5 = v4;
  swift_release();
  if (v1 >= 2)
  {
    v8 = swift_unknownObjectRetain();
    sub_1B1F40DEC(v8, v3, v5, 0);
    sub_1B1D2E668(v1);
    return sub_1B1D2E668(v1);
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v6 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v9 = 0;
    swift_retain();
    sub_1B1F1AD70(v6, &v9, 0xD00000000000002BLL, 0x80000001B233DB30);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B1E16648(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;

  v4 = a1[159];
  if (!v4)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v12 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v19 = 0;
    swift_retain();
    sub_1B1F1AD70(v12, &v19, 0xD000000000000042, 0x80000001B233DB60);
    swift_release();
    return swift_release();
  }
  v8 = a1[160];
  v9 = a1[161];
  v10 = swift_unknownObjectRetain();
  sub_1B2118500(v10, v8, v9, 0, 0, a4);
  sub_1B21185F0(v4, v8, v9, 0, 0, a4);
  if ((*(_BYTE *)(a3 + 24) & 4) != 0)
  {
    sub_1B21185FC(v4, v8, v9, 0, 0, a4);
    sub_1B2118608(v4, v8, v9, 0, 0, a4);
    v11 = 27;
  }
  else
  {
    v11 = 3;
  }
  sub_1B1D60ED0(a1[163], 1, v11);
  v13 = a1[150];
  if (!v13)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v18 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v19 = 0;
    swift_retain();
    sub_1B1F1AD70(v18, &v19, 0xD000000000000040, 0x80000001B233DBB0);
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
  v14 = a1[151];
  v15 = a1[152];
  v16 = swift_unknownObjectRetain();
  sub_1B2118500(v16, v14, v15, 0, 1, a4);
  sub_1B21185F0(v13, v14, v15, 0, 1, a4);
  if ((*(_BYTE *)(a3 + 24) & 4) != 0)
  {
    sub_1B21185FC(v13, v14, v15, 0, 1, a4);
    sub_1B2118608(v13, v14, v15, 0, 1, a4);
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

float32x4_t sub_1B1E16954@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  float32x4_t result;
  char *v6;
  id v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v21;

  v3 = *(void **)(a1 + 1200);
  if (v3 && (v4 = *(_QWORD *)(a1 + 1208), objc_msgSend(*(id *)(a1 + 1200), sel_storageMode) != (id)2))
  {
    v6 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v7 = v3;
    v8 = *(float32x4_t *)&v6[v4 + 544];
    v9 = *(float32x4_t *)&v6[v4 + 560];
    v10 = *(float32x4_t *)&v6[v4 + 576];
    v11 = *(float32x4_t *)&v6[v4 + 592];
    v12 = vnegq_f32(v8);
    v13 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v14 = vaddq_f32(v11, vmlaq_f32(vsubq_f32(v9, v8), v13, v10));
    v15 = vaddq_f32(v11, vmlaq_f32(vaddq_f32(v8, v9), v13, v10));
    __asm { FMOV            V7.4S, #-1.0 }
    v21 = vaddq_f32(v11, vmlaq_f32(vmlaq_f32(v12, _Q7, v9), v13, v10));
    v10.i64[0] = vextq_s8(*(int8x16_t *)&v6[v4 + 816], *(int8x16_t *)&v6[v4 + 816], 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
    *a2 = v14;
    a2[1] = vmulq_n_f32(vsubq_f32(v15, v14), v10.f32[0]);
    result = vmulq_lane_f32(vsubq_f32(v21, v14), *(float32x2_t *)v10.f32, 1);
    a2[2] = result;
  }
  else
  {
    result.i64[0] = 0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t sub_1B1E16A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v6;
  int v7;
  uint64_t v8;
  const char *v9;
  id v10;
  id v11;
  uint64_t result;
  id v13;
  uint64_t v14;
  char v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  sub_1B1E134D0();
  if (!*(_QWORD *)(a1 + 1312))
  {
    if (qword_1ED4B7878 != -1)
      swift_once();
    if (byte_1ED4D097C == 1)
    {
      v6 = sub_1B1B2EC54(0xD000000000000018, 0x80000001B233DCB0, 0, MEMORY[0x1E0DEE9D8], 0);
      if (v3)
      {

        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_retain();
        v7 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v25[0] = 0;
        swift_retain();
        v8 = 0xD000000000000045;
        v9 = "PrepareUpdateSystem failed: missing global_constants_encoder function";
LABEL_22:
        sub_1B1F1AD70(v7, v25, v8, (unint64_t)(v9 - 32) | 0x8000000000000000);
        swift_release();
        return swift_release();
      }
      v10 = objc_msgSend(v6, sel_newArgumentEncoderWithBufferIndex_, 0);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1312) = v10;
    }
  }
  if (!*(_QWORD *)(a1 + 1232))
  {
    if (qword_1ED4B7878 != -1)
      swift_once();
    if (byte_1ED4D097C == 1)
    {
      v11 = sub_1B1B2EC54(0xD000000000000016, 0x80000001B233DC40, 0, MEMORY[0x1E0DEE9D8], 0);
      if (v3)
      {

        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_retain();
        v7 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v25[0] = 0;
        swift_retain();
        v8 = 0xD000000000000043;
        v9 = "PrepareUpdateSystem failed: missing pass_constants_encoder function";
        goto LABEL_22;
      }
      v13 = objc_msgSend(v11, sel_newArgumentEncoderWithBufferIndex_, 0);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1232) = v13;
    }
  }
  sub_1B1E163EC(a3);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_BYTE *)(a1 + 16);
  v16 = *(_DWORD *)(a1 + 20);
  swift_retain();
  v17 = (id)sub_1B1D22DA8(0, 16);
  v19 = v18;
  v21 = v20;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v25[0] = 0;
    v25[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v22 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v25[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v22, v25, 0xD000000000000035, 0x80000001B233DC00);
    swift_release();
    swift_release();
  }
  else
  {
    v23 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v17 = v17;
    v24 = &v23[v19];
    *(_QWORD *)v24 = v14;
    v24[8] = v15;
    *((_DWORD *)v24 + 3) = v16;
  }
  swift_release();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v21;
  return result;
}

uint64_t type metadata accessor for PrepareUpdateSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1E16F14(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v3, (void (*)(uint64_t))sub_1B1E1A568);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E16FCC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v3, (void (*)(uint64_t))sub_1B1E1819C);
    swift_release();
    return swift_release();
  }
  return result;
}

const char *sub_1B1E17084()
{
  return "PrepareUpdate";
}

uint64_t sub_1B1E17098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _BYTE v23[160];
  uint64_t v24[20];
  uint64_t v25[12];
  uint64_t v26[12];
  _OWORD v27[5];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[5];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _BYTE v47[160];
  uint64_t v48[20];

  v3 = v2;
  v5 = a2 + 624;
  sub_1B19F66A0(a2 + 624, (uint64_t)v47, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v47, (uint64_t)v48, &qword_1ED4BF400);
  if (sub_1B1B3C438(v48) != 1)
  {
    v6 = v48[1];
    ObjectType = swift_getObjectType();
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 64);
    swift_unknownObjectRetain();
    v9 = v8(ObjectType, v6);
    swift_unknownObjectRelease();
    if (v9 != 0xFFFFFFFFLL)
    {
      v18 = v9 & 0xFFFFFFFF00000000;
      return v18 | v9;
    }
    sub_1B19F66A0(v5, (uint64_t)v23, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v23, (uint64_t)v24, &qword_1ED4BF400);
    if (sub_1B1B3C438(v24) != 1)
    {
      v10 = v24[1];
      v11 = swift_getObjectType();
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 144);
      swift_unknownObjectRetain();
      v13 = v12(v11, v10);
      swift_unknownObjectRelease();
      v14 = *(_OWORD *)(v3 + 32);
      v45[0] = *(_OWORD *)(v3 + 16);
      v45[1] = v14;
      v46 = *(_QWORD *)(v3 + 48);
      v15 = v13 & 0xFFFFFFFFFFLL;
      sub_1B1E8FCE4(a1, (uint64_t)v45, v15, v25);
      sub_1B19F66A0((uint64_t)v25, (uint64_t)v35, (unint64_t *)&qword_1ED4B7DE0);
      if (*(_QWORD *)&v35[0])
      {
        v39 = v35[2];
        v40 = v35[3];
        v41 = v35[4];
        v42 = v36;
        v37 = v35[0];
        v38 = v35[1];
        if ((_QWORD)v36)
        {
          sub_1B1BEC018(0);
          v17 = v16;
          swift_retain();
          v9 = sub_1B1A101F0(v17);
          swift_release();
          v18 = v9 & 0xFFFFFFFF00000000;
          sub_1B19ED748(v25);
          return v18 | v9;
        }
        sub_1B19ED748(v25);
      }
      v19 = *(_OWORD *)(v3 + 72);
      v43[0] = *(_OWORD *)(v3 + 56);
      v43[1] = v19;
      v44 = *(_QWORD *)(v3 + 88);
      sub_1B1E8FCE4(a1, (uint64_t)v43, v15, v26);
      sub_1B19F66A0((uint64_t)v26, (uint64_t)v27, (unint64_t *)&qword_1ED4B7DE0);
      if (*(_QWORD *)&v27[0])
      {
        v31 = v27[2];
        v32 = v27[3];
        v33 = v27[4];
        v34 = v28;
        v29 = v27[0];
        v30 = v27[1];
        if ((_QWORD)v28)
        {
          sub_1B1BEC018(0);
          v21 = v20;
          swift_retain();
          v9 = sub_1B1A101F0(v21);
          swift_release();
          v18 = v9 & 0xFFFFFFFF00000000;
          sub_1B19ED748(v26);
          return v18 | v9;
        }
        sub_1B19ED748(v26);
      }
      v18 = 0;
      LODWORD(v9) = -1;
      return v18 | v9;
    }
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E173F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[160];
  uint64_t v13[20];
  _BYTE v14[160];
  uint64_t v15[20];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = result;
    sub_1B19F66A0(v1 + 624, (uint64_t)v14, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v14, (uint64_t)v15, &qword_1ED4BF400);
    if (sub_1B1B3C438(v15) == 1)
      goto LABEL_6;
    v3 = v15[1];
    ObjectType = swift_getObjectType();
    v5 = *(void (**)(uint64_t, uint64_t))(v3 + 72);
    swift_unknownObjectRetain();
    swift_retain();
    v5(ObjectType, v3);
    swift_unknownObjectRelease();
    sub_1B19F66A0(v1 + 624, (uint64_t)v12, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v12, (uint64_t)v13, &qword_1ED4BF400);
    if (sub_1B1B3C438(v13) == 1)
    {
LABEL_6:
      result = sub_1B2229688();
      __break(1u);
    }
    else
    {
      v6 = v13[1];
      v7 = swift_getObjectType();
      v8 = *(void (**)(uint64_t, uint64_t))(v6 + 160);
      swift_unknownObjectRetain();
      v8(v7, v6);
      v9 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = *(_QWORD **)(v2 + 176);
      swift_retain();
      sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v11, sub_1B1E18218);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

void sub_1B1E17634(uint64_t a1, float64_t a2, float64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int32 a7)
{
  _QWORD *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float64x2_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 *v62;
  __int128 v68;
  __n64 v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  id v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  float32x4_t v137;
  __int128 v138;
  simd_float4 v139;
  __int128 v140;
  simd_float4 v141;
  __int128 v142;
  simd_float4 v143;
  __int128 v144;
  simd_float4 v145;
  __int128 v146;
  simd_float4 v147;
  float32x4_t v148;
  __int128 v149;
  simd_float4 v150;
  float32x4_t v151;
  __int128 v152;
  simd_float4 v153;
  float32x4_t v154;
  __int128 v155;
  unsigned int v156;
  __int128 v157;
  float v158;
  __int128 v159;
  __int128 v161;
  __int128 v163;
  simd_float4 v164;
  __int128 v165;
  float32x4_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  float32x4_t v170;
  __int128 v171;
  __int128 v172;
  __n128 v173;
  __int128 v174;
  uint64_t v175[2];
  _BYTE v176[80];
  _BYTE v177[80];
  _BYTE v178[80];
  _OWORD v179[4];
  char v180;
  _OWORD v181[4];
  char v182;
  _OWORD v183[4];
  char v184;
  uint64_t v185;
  simd_float4x4 v186;
  simd_float4x4 v187;
  simd_float4x4 v188;

  v185 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)sub_1B1E17098(a5, a6);
  *(_QWORD *)a1 = v11;
  v158 = sub_1B1E1823C(a5, (unint64_t)v11);
  v156 = v12;
  sub_1B1D15764(v11, (uint64_t)v176);
  sub_1B19F66A0((uint64_t)v176, (uint64_t)v183, qword_1ED4B8BB0);
  v13 = xmmword_1B2244E20;
  v14 = xmmword_1B2244D90;
  v15 = xmmword_1B2244DD0;
  v16 = xmmword_1B2244DB0;
  v166 = (float32x4_t)xmmword_1B2244DB0;
  v168 = xmmword_1B2244DD0;
  v170 = (float32x4_t)xmmword_1B2244D90;
  v172 = xmmword_1B2244E20;
  if ((v184 & 1) == 0)
  {
    v16 = v183[0];
    v15 = v183[1];
    v14 = v183[2];
    v13 = v183[3];
  }
  v147 = (simd_float4)v14;
  v150 = (simd_float4)v15;
  v153 = (simd_float4)v16;
  v164 = (simd_float4)v13;
  sub_1B1D1745C(v11, (uint64_t)v177);
  sub_1B19F66A0((uint64_t)v177, (uint64_t)v181, &qword_1ED4B99A0);
  v17 = xmmword_1B2244DB0;
  v18 = xmmword_1B2244DD0;
  v19 = xmmword_1B2244D90;
  v20 = xmmword_1B2244E20;
  if ((v182 & 1) == 0)
  {
    v17 = v181[0];
    v18 = v181[1];
    v19 = v181[2];
    v20 = v181[3];
  }
  v139 = (simd_float4)v20;
  v141 = (simd_float4)v19;
  v143 = (simd_float4)v18;
  v145 = (simd_float4)v17;
  sub_1B1D15DE8(v11, (uint64_t)v178);
  sub_1B19F66A0((uint64_t)v178, (uint64_t)v179, &qword_1ED4B8E80);
  if ((v180 & 1) == 0)
  {
    v166 = (float32x4_t)v179[0];
    v168 = v179[1];
    v170 = (float32x4_t)v179[2];
    v172 = v179[3];
  }
  v186.columns[0] = v153;
  v186.columns[1] = v150;
  v186.columns[2] = v147;
  v186.columns[3] = v164;
  v187 = __invert_f4(v186);
  v154 = (float32x4_t)v187.columns[0];
  v151 = (float32x4_t)v187.columns[1];
  v148 = (float32x4_t)v187.columns[2];
  v137 = (float32x4_t)v187.columns[3];
  v187.columns[0] = v145;
  v187.columns[2] = v141;
  v187.columns[1] = v143;
  v187.columns[3] = v139;
  v188 = __invert_f4(v187);
  v21.f64[0] = a2;
  v21.f64[1] = a3;
  sub_1B1E15EC8(a7, *(_DWORD *)(a6 + 24) & 1, 0, 0, 1, v22, v23, v24, v154, v151, v148, v137, v166, (float32x4_t)v168, v170, (float32x4_t)v172, *(_OWORD *)v188.columns, *(_OWORD *)&v188.columns[1], *(_OWORD *)&v188.columns[2],
    *(_OWORD *)&v188.columns[3],
    *(_OWORD *)&v166,
    v168,
    *(_OWORD *)&v170,
    v172,
    __SPAIR64__(v156, LODWORD(v158)),
    *(_QWORD *)&vcvt_f32_f64(v21),
    *(_OWORD *)&v164);
  v25 = OBJC_IVAR____TtC3VFX13EntityManager_world;
  v26 = *(void **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_world);
  v27 = v26;
  if (v26)
  {
    v28 = v27;
    v36 = sub_1B187B428((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35);

    v37 = *(id *)(a5 + v25);
    v45 = sub_1B187B38C((uint64_t)v37, v38, v39, v40, v41, v42, v43, v44);

    v46 = *(id *)(a5 + v25);
    sub_1B187B2F0((uint64_t)v46, v47, v48, v49, v50, v51, v52, v53);

    v54 = *(id *)(a5 + v25);
    v62 = (__n128 *)sub_1B187B514((uint64_t)v54, v55, v56, v57, v58, v59, v60, v61);

    v173 = *v62;
  }
  else
  {
    v45 = 0.0;
    __asm { FMOV            V0.4S, #1.0 }
    v173 = _Q0;
    v36 = 0.0;
  }
  *(__n64 *)&v68 = sub_1B1E18498(v36, v45);
  v171 = v68;
  *(_OWORD *)(a1 + 1168) = v68;
  v69.n64_u64[0] = sub_1B1E184D8(v173).n64_u64[0];
  *(__n64 *)(a1 + 1184) = v69;
  if ((*(_BYTE *)(a6 + 537) & 1) == 0)
  {
    v70 = v69.n64_u64[0];
    v174 = *(_OWORD *)(a1 + 48);
    v169 = *(_OWORD *)(a1 + 64);
    v167 = *(_OWORD *)(a1 + 80);
    v165 = *(_OWORD *)(a1 + 96);
    v163 = *(_OWORD *)(a1 + 112);
    v161 = *(_OWORD *)(a1 + 128);
    v159 = *(_OWORD *)(a1 + 144);
    v157 = *(_OWORD *)(a1 + 160);
    v155 = *(_OWORD *)(a1 + 176);
    v152 = *(_OWORD *)(a1 + 192);
    v149 = *(_OWORD *)(a1 + 208);
    v146 = *(_OWORD *)(a1 + 224);
    v142 = *(_OWORD *)(a1 + 256);
    v144 = *(_OWORD *)(a1 + 240);
    v138 = *(_OWORD *)(a1 + 288);
    v140 = *(_OWORD *)(a1 + 272);
    v135 = *(_OWORD *)(a1 + 320);
    v136 = *(_OWORD *)(a1 + 304);
    v133 = *(_OWORD *)(a1 + 352);
    v134 = *(_OWORD *)(a1 + 336);
    v131 = *(_OWORD *)(a1 + 384);
    v132 = *(_OWORD *)(a1 + 368);
    v129 = *(_OWORD *)(a1 + 416);
    v130 = *(_OWORD *)(a1 + 400);
    v127 = *(_OWORD *)(a1 + 448);
    v128 = *(_OWORD *)(a1 + 432);
    v125 = *(_OWORD *)(a1 + 480);
    v126 = *(_OWORD *)(a1 + 464);
    v123 = *(_OWORD *)(a1 + 512);
    v124 = *(_OWORD *)(a1 + 496);
    v121 = *(_OWORD *)(a1 + 544);
    v122 = *(_OWORD *)(a1 + 528);
    v71 = *(_DWORD *)(a1 + 928);
    v86 = *(_OWORD *)(a1 + 560);
    v87 = *(_OWORD *)(a1 + 576);
    v88 = *(_OWORD *)(a1 + 592);
    v89 = *(_OWORD *)(a1 + 608);
    v90 = *(_OWORD *)(a1 + 624);
    v91 = *(_OWORD *)(a1 + 640);
    v92 = *(_OWORD *)(a1 + 656);
    v93 = *(_OWORD *)(a1 + 672);
    v94 = *(_OWORD *)(a1 + 688);
    v95 = *(_OWORD *)(a1 + 704);
    v96 = *(_OWORD *)(a1 + 720);
    v97 = *(_OWORD *)(a1 + 736);
    v98 = *(_OWORD *)(a1 + 752);
    v99 = *(_OWORD *)(a1 + 768);
    v100 = *(_OWORD *)(a1 + 784);
    v101 = *(_OWORD *)(a1 + 800);
    v102 = *(_OWORD *)(a1 + 816);
    v103 = *(_OWORD *)(a1 + 832);
    v104 = *(_OWORD *)(a1 + 848);
    v105 = *(_OWORD *)(a1 + 864);
    v72 = *(_QWORD *)(a1 + 880);
    v73 = *(_QWORD *)(a1 + 912);
    v74 = *(_QWORD *)(a1 + 920);
    v75 = *(_DWORD *)(a1 + 932);
    v76 = *(_QWORD *)(a1 + 936);
    v106 = *(_OWORD *)(a1 + 896);
    v107 = *(_OWORD *)(a1 + 944);
    v108 = *(_OWORD *)(a1 + 960);
    v109 = *(_OWORD *)(a1 + 976);
    v110 = *(_OWORD *)(a1 + 992);
    v111 = *(_OWORD *)(a1 + 1008);
    v112 = *(_OWORD *)(a1 + 1024);
    v113 = *(_OWORD *)(a1 + 1040);
    v114 = *(_OWORD *)(a1 + 1056);
    v115 = *(_OWORD *)(a1 + 1072);
    v116 = *(_OWORD *)(a1 + 1088);
    v117 = *(_OWORD *)(a1 + 1104);
    v118 = *(_OWORD *)(a1 + 1120);
    v119 = *(_OWORD *)(a1 + 1136);
    v120 = *(_OWORD *)(a1 + 1152);
    swift_retain();
    v77 = (void *)sub_1B1D22DA8(0, 1152);
    v79 = v78;
    v81 = v80;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v175[0] = 0;
      v175[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v82 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v175[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v82, v175, 0xD000000000000034, 0x80000001B233A830);
      swift_release();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1200) = v77;
    }
    else
    {
      v83 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v84 = v77;
      v85 = &v83[v79];
      *(_OWORD *)v85 = v174;
      *((_OWORD *)v85 + 1) = v169;
      *((_OWORD *)v85 + 2) = v167;
      *((_OWORD *)v85 + 3) = v165;
      *((_OWORD *)v85 + 4) = v163;
      *((_OWORD *)v85 + 5) = v161;
      *((_OWORD *)v85 + 6) = v159;
      *((_OWORD *)v85 + 7) = v157;
      *((_OWORD *)v85 + 8) = v155;
      *((_OWORD *)v85 + 9) = v152;
      *((_OWORD *)v85 + 10) = v149;
      *((_OWORD *)v85 + 11) = v146;
      *((_OWORD *)v85 + 12) = v144;
      *((_OWORD *)v85 + 13) = v142;
      *((_OWORD *)v85 + 14) = v140;
      *((_OWORD *)v85 + 15) = v138;
      *((_OWORD *)v85 + 16) = v136;
      *((_OWORD *)v85 + 17) = v135;
      *((_OWORD *)v85 + 18) = v134;
      *((_OWORD *)v85 + 19) = v133;
      *((_OWORD *)v85 + 20) = v132;
      *((_OWORD *)v85 + 21) = v131;
      *((_OWORD *)v85 + 22) = v130;
      *((_OWORD *)v85 + 23) = v129;
      *((_OWORD *)v85 + 24) = v128;
      *((_OWORD *)v85 + 25) = v127;
      *((_OWORD *)v85 + 26) = v126;
      *((_OWORD *)v85 + 27) = v125;
      *((_OWORD *)v85 + 28) = v124;
      *((_OWORD *)v85 + 29) = v123;
      *((_OWORD *)v85 + 30) = v122;
      *((_OWORD *)v85 + 31) = v121;
      *((_OWORD *)v85 + 32) = v86;
      *((_OWORD *)v85 + 33) = v87;
      *((_OWORD *)v85 + 34) = v88;
      *((_OWORD *)v85 + 35) = v89;
      *((_OWORD *)v85 + 36) = v90;
      *((_OWORD *)v85 + 37) = v91;
      *((_OWORD *)v85 + 38) = v92;
      *((_OWORD *)v85 + 39) = v93;
      *((_OWORD *)v85 + 40) = v94;
      *((_OWORD *)v85 + 41) = v95;
      *((_OWORD *)v85 + 42) = v96;
      *((_OWORD *)v85 + 43) = v97;
      *((_OWORD *)v85 + 44) = v98;
      *((_OWORD *)v85 + 45) = v99;
      *((_OWORD *)v85 + 46) = v100;
      *((_OWORD *)v85 + 47) = v101;
      *((_OWORD *)v85 + 48) = v102;
      *((_OWORD *)v85 + 49) = v103;
      *((_OWORD *)v85 + 50) = v104;
      *((_OWORD *)v85 + 51) = v105;
      *((_QWORD *)v85 + 104) = v72;
      *((_OWORD *)v85 + 53) = v106;
      *((_QWORD *)v85 + 108) = v73;
      *((_QWORD *)v85 + 109) = v74;
      *((_DWORD *)v85 + 220) = v71;
      *((_DWORD *)v85 + 221) = v75;
      *((_QWORD *)v85 + 111) = v76;
      *((_OWORD *)v85 + 56) = v107;
      *((_OWORD *)v85 + 57) = v108;
      *((_OWORD *)v85 + 58) = v109;
      *((_OWORD *)v85 + 59) = v110;
      *((_OWORD *)v85 + 60) = v111;
      *((_OWORD *)v85 + 61) = v112;
      *((_OWORD *)v85 + 62) = v113;
      *((_OWORD *)v85 + 63) = v114;
      *((_OWORD *)v85 + 64) = v115;
      *((_OWORD *)v85 + 65) = v116;
      *((_OWORD *)v85 + 66) = v117;
      *((_OWORD *)v85 + 67) = v118;
      *((_OWORD *)v85 + 68) = v119;
      *((_OWORD *)v85 + 69) = v120;
      *((_OWORD *)v85 + 70) = v171;
      *((_QWORD *)v85 + 142) = v70;
      swift_release();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1200) = v84;
    }
    *(_QWORD *)(a1 + 1208) = v79;
    *(_QWORD *)(a1 + 1216) = v81;
  }
}

uint64_t type metadata accessor for PrepareRenderSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1E17EC4()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[2];
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v14 = qword_1ED4D09F8;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  swift_retain();
  sub_1B1A14B9C(1, 1, 1, (uint64_t)v4);
  swift_release();
  v1 = v4[1];
  *(_OWORD *)(v0 + 16) = v4[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v5;
  v8 = qword_1ED4D09F8;
  v9 = 0;
  v10 = 2;
  v11 = 0;
  v12 = 2;
  v13 = 0;
  swift_retain();
  sub_1B1B12C5C(1, 1, (uint64_t)v6);
  swift_release();
  v2 = v6[1];
  *(_OWORD *)(v0 + 56) = v6[0];
  *(_OWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 88) = v7;
  return v0;
}

const char *sub_1B1E17FE8()
{
  return "PrepareRender";
}

uint64_t sub_1B1E17FFC(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v1);
  return swift_release();
}

uint64_t sub_1B1E18050()
{
  sub_1B1E1A480();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E18078()
{
  sub_1B1E1A480();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E180A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1E1A428();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E1A480();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1E18160(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1E16648(a1, v1[3], v1[4], v1[2]);
}

uint64_t sub_1B1E1817C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1B1E1819C(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E16A44(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1B1E181B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5F008)
  {
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5F008);
  }
}

void sub_1B1E18218(uint64_t a1)
{
  uint64_t v1;

  sub_1B1E17634(a1, *(float64_t *)(v1 + 40), *(float64_t *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 56));
}

float sub_1B1E1823C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  float result;
  float32x4_t v6;
  float v7;
  float v8;
  uint64_t v9;
  double v10;
  double v11;
  int64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  float v17;
  _BYTE v18[80];
  _BYTE v19[24];
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  char v23;

  v4 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v12 = a2 << 32;
    v13 = a2;
    if ((uint64_t)(a2 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a2 < *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (HIDWORD(a2) == -1 || *(_DWORD *)(v14 + 12 * (int)a2 + 8) == HIDWORD(a2))
      {
        v15 = (unsigned int *)(v14 + 12 * (int)a2);
        sub_1B1D1D75C(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * (int)*v15 + 32), *v15 | ((unint64_t)*((unsigned __int16 *)v15 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v15+ 2) << 32), 48, a1, (uint64_t)v19);
        if (v21.u8[0] != 2)
          return v20;
      }
    }
    if (v12 >= (uint64_t)0xFFFFFFFF00000001
      && (int)a2 < *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (((_DWORD)v4 == -1 || *(_DWORD *)(v16 + 12 * v13 + 8) == (_DWORD)v4)
        && (sub_1B1D1EB50(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(v16 + 12 * v13) + 32), *(_DWORD *)(v16 + 12 * v13), *(_WORD *)(v16 + 12 * v13 + 4), 20, a1) & 0xFF00000000) != 0x200000000)
      {
        return v17;
      }
    }
  }
  sub_1B1D15DE8((_QWORD *)a2, (uint64_t)v18);
  sub_1B19F66A0((uint64_t)v18, (uint64_t)v19, &qword_1ED4B8E80);
  result = 0.0;
  if ((v23 & 1) == 0)
  {
    v7 = v21.f32[3];
    v6 = v22;
    v8 = v21.f32[2];
    if (v21.f32[2] > 0.0)
    {
      v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, *(float *)&v21), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)&v21, 1), (float32x4_t)xmmword_1B2244DF0, v21, 2), (float32x4_t)xmmword_1B2244E10, v21, 3).i64[1];
      v7 = *((float *)&v9 + 1);
      v8 = *(float *)&v9;
      v6 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v22.f32[0]), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v22.f32, 1), (float32x4_t)xmmword_1B2244DF0, v22, 2), (float32x4_t)xmmword_1B2244E10, v22, 3);
    }
    v6.f32[0] = v6.f32[2] / v8;
    v10 = v6.f32[2] / (v8 + 1.0);
    v11 = (v6.f32[2] + -1.0) / v8;
    if (v7 == 0.0)
      v10 = v11;
    *(float *)&v10 = v10;
    LODWORD(result) = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)&v10), 0), (int8x8_t)vrev64_s32((int32x2_t)__PAIR64__(LODWORD(v10), v6.u32[0])), (int8x8_t)__PAIR64__(LODWORD(v10), v6.u32[0])).u32[0];
  }
  return result;
}

__n64 sub_1B1E18498(float a1, float a2)
{
  float v2;
  float v3;
  __n64 result;

  v2 = fmaxf(a1, 0.0);
  v3 = fmaxf(a2, 0.0);
  result.n64_u64[0] = 0;
  if (v2 != v3)
  {
    result.n64_f32[0] = 1.0 / (float)(v3 - v2);
    result.n64_f32[1] = -(float)(v2 * result.n64_f32[0]);
  }
  return result;
}

__n64 sub_1B1E184D8(__n128 a1)
{
  unsigned __int32 v1;
  unsigned int v2;
  unsigned int v3;
  __int16 v4;
  unsigned int v5;
  __int16 v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  __n64 result;
  unsigned __int16 v29;

  v1 = HIWORD(a1.n128_u32[0]) & 0x8000;
  v2 = (a1.n128_u32[0] >> 23);
  v3 = v2 - 112;
  v4 = v1 | 0x7BFF;
  if (v2 == 255)
    v4 = v1 | ((a1.n128_u32[0] & 0x7FFFFF) != 0) | 0x7C00;
  v5 = v2 - 113;
  if (v2 >= 0x71)
    v6 = v4;
  else
    v6 = a1.n128_u16[1] & 0x8000;
  v7 = HIWORD(a1.n128_u32[0]) & 0x8000 | (a1.n128_u32[0] >> 13) & 0x3FF | (v3 << 10);
  if (v5 > 0x1D)
    LOWORD(v7) = v6;
  v8 = HIWORD(a1.n128_u32[1]) & 0x8000;
  v9 = (a1.n128_u32[1] >> 23);
  v10 = v9 - 112;
  v11 = v8 | 0x7BFF;
  if (v9 == 255)
    v11 = v8 | ((a1.n128_u32[1] & 0x7FFFFF) != 0) | 0x7C00;
  v12 = v9 - 113;
  if (v9 >= 0x71)
    v13 = v11;
  else
    v13 = a1.n128_u16[3] & 0x8000;
  v14 = HIWORD(a1.n128_u32[1]) & 0x8000 | (a1.n128_u32[1] >> 13) & 0x3FF | (v10 << 10);
  if (v12 > 0x1D)
    LOWORD(v14) = v13;
  v15 = HIWORD(a1.n128_u32[2]) & 0x8000;
  v16 = (a1.n128_u32[2] >> 23);
  v17 = v16 - 112;
  v18 = v15 | 0x7BFF;
  if (v16 == 255)
    v18 = v15 | ((a1.n128_u32[2] & 0x7FFFFF) != 0) | 0x7C00;
  v19 = v16 - 113;
  if (v16 >= 0x71)
    v20 = v18;
  else
    v20 = a1.n128_u16[5] & 0x8000;
  v21 = HIWORD(a1.n128_u32[2]) & 0x8000 | (a1.n128_u32[2] >> 13) & 0x3FF | (v17 << 10);
  if (v19 > 0x1D)
    LOWORD(v21) = v20;
  v22 = HIWORD(a1.n128_u32[3]) & 0x8000;
  v23 = (a1.n128_u32[3] >> 23);
  v24 = v23 - 112;
  v25 = v23 - 113;
  v26 = v22 | 0x7BFF;
  if (v23 == 255)
    v26 = v22 | ((a1.n128_u32[3] & 0x7FFFFF) != 0) | 0x7C00;
  if (v23 >= 0x71)
    v27 = v26;
  else
    v27 = a1.n128_u16[7] & 0x8000;
  result.n64_u16[0] = v7;
  result.n64_u16[1] = v14;
  if (v25 <= 0x1D)
    v29 = a1.n128_u16[7] & 0x8000 | (a1.n128_u32[3] >> 13) & 0x3FF | (v24 << 10);
  else
    v29 = v27;
  result.n64_u16[2] = v21;
  result.n64_u16[3] = v29;
  return result;
}

uint64_t sub_1B1E18620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, (unint64_t *)&unk_1ED4BA6F0, (uint64_t (*)(uint64_t))sub_1B1E1867C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1E1867C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA6E0)
  {
    type metadata accessor for simd_float4x4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA6E0);
  }
}

uint64_t sub_1B1E186DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

ValueMetadata *type metadata accessor for DebugSelectedCamera()
{
  return &type metadata for DebugSelectedCamera;
}

uint64_t initializeBufferWithCopyOfBuffer for REFrameConfiguration(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for REFrameConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshImportOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for REFrameConfiguration()
{
  return &type metadata for REFrameConfiguration;
}

uint64_t destroy for FrameConstantsStorage(_QWORD *a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a1[176])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  if (a1[182])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  if (a1[196])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FrameConstantsStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x480uLL);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(a2 + 1200);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1216) = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a2 + 1248);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a2 + 1304);
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)(a2 + 1312);
  *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
  *(_DWORD *)(a1 + 1324) = *(_DWORD *)(a2 + 1324);
  v14 = *(_QWORD *)(a2 + 1408);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v14)
  {
    *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
    *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
    *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a2 + 1344);
    *(_OWORD *)(a1 + 1360) = *(_OWORD *)(a2 + 1360);
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
    *(_QWORD *)(a1 + 1408) = v14;
    *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 1416);
    *(_BYTE *)(a1 + 1424) = *(_BYTE *)(a2 + 1424);
    *(_DWORD *)(a1 + 1428) = *(_DWORD *)(a2 + 1428);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v4 = *(_QWORD *)(a2 + 1456);
    if (v4)
      goto LABEL_3;
LABEL_6:
    v9 = *(_OWORD *)(a2 + 1448);
    *(_OWORD *)(a1 + 1432) = *(_OWORD *)(a2 + 1432);
    *(_OWORD *)(a1 + 1448) = v9;
    *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
    v5 = *(_QWORD *)(a2 + 1568);
    if (v5)
      goto LABEL_4;
LABEL_7:
    v10 = *(_OWORD *)(a2 + 1568);
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
    *(_OWORD *)(a1 + 1568) = v10;
    *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
    v11 = *(_OWORD *)(a2 + 1504);
    *(_OWORD *)(a1 + 1488) = *(_OWORD *)(a2 + 1488);
    *(_OWORD *)(a1 + 1504) = v11;
    v12 = *(_OWORD *)(a2 + 1536);
    *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
    *(_OWORD *)(a1 + 1536) = v12;
    goto LABEL_8;
  }
  v6 = *(_OWORD *)(a2 + 1408);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1408) = v6;
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a2 + 1424);
  v7 = *(_OWORD *)(a2 + 1344);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1344) = v7;
  v8 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1360) = *(_OWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1376) = v8;
  v4 = *(_QWORD *)(a2 + 1456);
  if (!v4)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
  *(_OWORD *)(a1 + 1440) = *(_OWORD *)(a2 + 1440);
  *(_QWORD *)(a1 + 1456) = v4;
  *(_QWORD *)(a1 + 1464) = *(_QWORD *)(a2 + 1464);
  *(_BYTE *)(a1 + 1472) = *(_BYTE *)(a2 + 1472);
  *(_DWORD *)(a1 + 1476) = *(_DWORD *)(a2 + 1476);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v5 = *(_QWORD *)(a2 + 1568);
  if (!v5)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
  *(_QWORD *)(a1 + 1568) = v5;
  *(_QWORD *)(a1 + 1576) = *(_QWORD *)(a2 + 1576);
  *(_BYTE *)(a1 + 1584) = *(_BYTE *)(a2 + 1584);
  *(_DWORD *)(a1 + 1588) = *(_DWORD *)(a2 + 1588);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_WORD *)(a1 + 1608) = *(_WORD *)(a2 + 1608);
  *(_BYTE *)(a1 + 1610) = *(_BYTE *)(a2 + 1610);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FrameConstantsStorage(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = (_BYTE *)(a2 + 1320);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a2 + 880);
  *(_DWORD *)(a1 + 884) = *(_DWORD *)(a2 + 884);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_DWORD *)(a1 + 928) = *(_DWORD *)(a2 + 928);
  *(_DWORD *)(a1 + 932) = *(_DWORD *)(a2 + 932);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(a2 + 1200);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1216) = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a2 + 1248);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(a2 + 1272);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1288) = *(_QWORD *)(a2 + 1288);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  *(_DWORD *)(a1 + 1300) = *(_DWORD *)(a2 + 1300);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a2 + 1304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)(a2 + 1312);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
  *(_DWORD *)(a1 + 1324) = *(_DWORD *)(a2 + 1324);
  v5 = (_OWORD *)(a1 + 1328);
  v6 = (_OWORD *)(a2 + 1328);
  v7 = *(_QWORD *)(a2 + 1408);
  if (*(_QWORD *)(a1 + 1408))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
      *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a2 + 1344);
      *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a2 + 1360);
      *(_WORD *)(a1 + 1364) = *(_WORD *)(a2 + 1364);
      *(_WORD *)(a1 + 1366) = *(_WORD *)(a2 + 1366);
      *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
      *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a2 + 1408);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 1416);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_BYTE *)(a1 + 1424) = v4[104];
      *(_DWORD *)(a1 + 1428) = *(_DWORD *)(a2 + 1428);
    }
    else
    {
      sub_1B1E19420(a1 + 1328, &qword_1EEF5F018, (uint64_t (*)(uint64_t))type metadata accessor for external_scene_constants, (uint64_t)&off_1E63C8D28);
      v11 = *(_OWORD *)(a2 + 1344);
      v10 = *(_OWORD *)(a2 + 1360);
      *v5 = *v6;
      *(_OWORD *)(a1 + 1344) = v11;
      *(_OWORD *)(a1 + 1360) = v10;
      v13 = *(_OWORD *)(a2 + 1392);
      v12 = *(_OWORD *)(a2 + 1408);
      v14 = *(_OWORD *)(a2 + 1376);
      *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a2 + 1424);
      *(_OWORD *)(a1 + 1392) = v13;
      *(_OWORD *)(a1 + 1408) = v12;
      *(_OWORD *)(a1 + 1376) = v14;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
    *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
    *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a2 + 1344);
    v8 = *(_OWORD *)(a2 + 1360);
    v9 = *(_OWORD *)(a2 + 1376);
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
    *(_OWORD *)(a1 + 1376) = v9;
    *(_OWORD *)(a1 + 1360) = v8;
    *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a2 + 1408);
    *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 1416);
    *(_BYTE *)(a1 + 1424) = *(_BYTE *)(a2 + 1424);
    *(_DWORD *)(a1 + 1428) = *(_DWORD *)(a2 + 1428);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    v15 = *v6;
    v16 = *(_OWORD *)(a2 + 1360);
    *(_OWORD *)(a1 + 1344) = *(_OWORD *)(a2 + 1344);
    *(_OWORD *)(a1 + 1360) = v16;
    *v5 = v15;
    v17 = *(_OWORD *)(a2 + 1376);
    v18 = *(_OWORD *)(a2 + 1392);
    v19 = *(_OWORD *)(a2 + 1408);
    *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a2 + 1424);
    *(_OWORD *)(a1 + 1392) = v18;
    *(_OWORD *)(a1 + 1408) = v19;
    *(_OWORD *)(a1 + 1376) = v17;
  }
  v20 = (_OWORD *)(a1 + 1432);
  v21 = (_OWORD *)(a2 + 1432);
  v22 = *(_QWORD *)(a2 + 1456);
  if (*(_QWORD *)(a1 + 1456))
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a2 + 1440);
      *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a2 + 1448);
      *(_QWORD *)(a1 + 1456) = *(_QWORD *)(a2 + 1456);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1464) = *(_QWORD *)(a2 + 1464);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_BYTE *)(a1 + 1472) = v4[152];
      *(_DWORD *)(a1 + 1476) = *(_DWORD *)(a2 + 1476);
    }
    else
    {
      sub_1B1E19420(a1 + 1432, &qword_1EEF5F020, (uint64_t (*)(uint64_t))type metadata accessor for external_scene_buffers, (uint64_t)&off_1E63C8990);
      v24 = *(_OWORD *)(a2 + 1448);
      v23 = *(_OWORD *)(a2 + 1464);
      *v20 = *v21;
      *(_OWORD *)(a1 + 1448) = v24;
      *(_OWORD *)(a1 + 1464) = v23;
    }
  }
  else if (v22)
  {
    *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
    *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a2 + 1440);
    *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a2 + 1448);
    *(_QWORD *)(a1 + 1456) = *(_QWORD *)(a2 + 1456);
    *(_QWORD *)(a1 + 1464) = *(_QWORD *)(a2 + 1464);
    *(_BYTE *)(a1 + 1472) = *(_BYTE *)(a2 + 1472);
    *(_DWORD *)(a1 + 1476) = *(_DWORD *)(a2 + 1476);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    v25 = *v21;
    v26 = *(_OWORD *)(a2 + 1464);
    *(_OWORD *)(a1 + 1448) = *(_OWORD *)(a2 + 1448);
    *(_OWORD *)(a1 + 1464) = v26;
    *v20 = v25;
  }
  v27 = (_OWORD *)(a1 + 1488);
  v28 = (_OWORD *)(a2 + 1488);
  v29 = *(_QWORD *)(a2 + 1568);
  if (*(_QWORD *)(a1 + 1568))
  {
    if (v29)
    {
      *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a2 + 1488);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a2 + 1496);
      *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
      *(_WORD *)(a1 + 1520) = *(_WORD *)(a2 + 1520);
      *(_BYTE *)(a1 + 1522) = *(_BYTE *)(a2 + 1522);
      *(_BYTE *)(a1 + 1523) = *(_BYTE *)(a2 + 1523);
      *(_DWORD *)(a1 + 1524) = *(_DWORD *)(a2 + 1524);
      *(_WORD *)(a1 + 1528) = *(_WORD *)(a2 + 1528);
      *(_WORD *)(a1 + 1530) = *(_WORD *)(a2 + 1530);
      *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
      *(_DWORD *)(a1 + 1552) = *(_DWORD *)(a2 + 1552);
      *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a2 + 1568);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1576) = *(_QWORD *)(a2 + 1576);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_BYTE *)(a1 + 1584) = v4[264];
      *(_DWORD *)(a1 + 1588) = *(_DWORD *)(a2 + 1588);
    }
    else
    {
      sub_1B1E19420(a1 + 1488, qword_1EEF5F028, (uint64_t (*)(uint64_t))type metadata accessor for external_entity_constants, (uint64_t)&off_1E63C90B0);
      v33 = *(_OWORD *)(a2 + 1504);
      v32 = *(_OWORD *)(a2 + 1520);
      *v27 = *v28;
      *(_OWORD *)(a1 + 1504) = v33;
      *(_OWORD *)(a1 + 1520) = v32;
      v35 = *(_OWORD *)(a2 + 1552);
      v34 = *(_OWORD *)(a2 + 1568);
      v36 = *(_OWORD *)(a2 + 1536);
      *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
      *(_OWORD *)(a1 + 1552) = v35;
      *(_OWORD *)(a1 + 1568) = v34;
      *(_OWORD *)(a1 + 1536) = v36;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a2 + 1488);
    *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a2 + 1496);
    *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
    v30 = *(_OWORD *)(a2 + 1520);
    v31 = *(_OWORD *)(a2 + 1536);
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
    *(_OWORD *)(a1 + 1536) = v31;
    *(_OWORD *)(a1 + 1520) = v30;
    *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a2 + 1568);
    *(_QWORD *)(a1 + 1576) = *(_QWORD *)(a2 + 1576);
    *(_BYTE *)(a1 + 1584) = *(_BYTE *)(a2 + 1584);
    *(_DWORD *)(a1 + 1588) = *(_DWORD *)(a2 + 1588);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    v37 = *v28;
    v38 = *(_OWORD *)(a2 + 1520);
    *(_OWORD *)(a1 + 1504) = *(_OWORD *)(a2 + 1504);
    *(_OWORD *)(a1 + 1520) = v38;
    *v27 = v37;
    v39 = *(_OWORD *)(a2 + 1536);
    v40 = *(_OWORD *)(a2 + 1552);
    v41 = *(_OWORD *)(a2 + 1568);
    *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
    *(_OWORD *)(a1 + 1552) = v40;
    *(_OWORD *)(a1 + 1568) = v41;
    *(_OWORD *)(a1 + 1536) = v39;
  }
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 1600) = *(_DWORD *)(a2 + 1600);
  *(_DWORD *)(a1 + 1604) = *(_DWORD *)(a2 + 1604);
  *(_BYTE *)(a1 + 1608) = v4[288];
  *(_BYTE *)(a1 + 1609) = v4[289];
  *(_BYTE *)(a1 + 1610) = v4[290];
  return a1;
}

uint64_t sub_1B1E19420(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;

  sub_1B1E19468(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t type metadata accessor for FrameConstantsStorage.ConstantStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FrameConstantsStorage.ConstantStorage);
}

void sub_1B1E19468(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for FrameConstantsStorage.ConstantStorage(a1, v7, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void *initializeWithTake for FrameConstantsStorage(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x64BuLL);
}

uint64_t assignWithTake for FrameConstantsStorage(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = (_BYTE *)(a2 + 1320);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  v14 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v14;
  v15 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v15;
  v16 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v16;
  v17 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v17;
  v18 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v18;
  v19 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v19;
  v20 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v20;
  v21 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v21;
  v22 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v22;
  v23 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v23;
  v24 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v24;
  v25 = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 656) = v25;
  v26 = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = v26;
  v27 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v27;
  v28 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v28;
  v29 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v29;
  v30 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = v30;
  v31 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v31;
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_DWORD *)(a1 + 928) = *(_DWORD *)(a2 + 928);
  *(_DWORD *)(a1 + 932) = *(_DWORD *)(a2 + 932);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  v32 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = v32;
  v33 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 992) = v33;
  v34 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v34;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(a2 + 1200);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 1208) = *(_OWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a2 + 1248);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(a2 + 1272);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a2 + 1304);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)(a2 + 1312);
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
  *(_DWORD *)(a1 + 1324) = *(_DWORD *)(a2 + 1324);
  if (*(_QWORD *)(a1 + 1408))
  {
    if (*(_QWORD *)(a2 + 1408))
    {
      *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
      *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a2 + 1344);
      *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a2 + 1360);
      *(_DWORD *)(a1 + 1364) = *(_DWORD *)(a2 + 1364);
      *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
      *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a2 + 1408);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 1416);
      swift_unknownObjectRelease();
      *(_BYTE *)(a1 + 1424) = v4[104];
      *(_DWORD *)(a1 + 1428) = *(_DWORD *)(a2 + 1428);
      goto LABEL_6;
    }
    sub_1B1E19420(a1 + 1328, &qword_1EEF5F018, (uint64_t (*)(uint64_t))type metadata accessor for external_scene_constants, (uint64_t)&off_1E63C8D28);
  }
  v35 = *(_OWORD *)(a2 + 1408);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1408) = v35;
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a2 + 1424);
  v36 = *(_OWORD *)(a2 + 1344);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1344) = v36;
  v37 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1360) = *(_OWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1376) = v37;
LABEL_6:
  if (*(_QWORD *)(a1 + 1456))
  {
    if (*(_QWORD *)(a2 + 1456))
    {
      *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
      swift_unknownObjectRelease();
      *(_OWORD *)(a1 + 1440) = *(_OWORD *)(a2 + 1440);
      *(_QWORD *)(a1 + 1456) = *(_QWORD *)(a2 + 1456);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1464) = *(_QWORD *)(a2 + 1464);
      swift_unknownObjectRelease();
      *(_BYTE *)(a1 + 1472) = v4[152];
      *(_DWORD *)(a1 + 1476) = *(_DWORD *)(a2 + 1476);
      goto LABEL_11;
    }
    sub_1B1E19420(a1 + 1432, &qword_1EEF5F020, (uint64_t (*)(uint64_t))type metadata accessor for external_scene_buffers, (uint64_t)&off_1E63C8990);
  }
  v38 = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1432) = *(_OWORD *)(a2 + 1432);
  *(_OWORD *)(a1 + 1448) = v38;
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
LABEL_11:
  if (!*(_QWORD *)(a1 + 1568))
  {
LABEL_15:
    v39 = *(_OWORD *)(a2 + 1568);
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
    *(_OWORD *)(a1 + 1568) = v39;
    *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
    v40 = *(_OWORD *)(a2 + 1504);
    *(_OWORD *)(a1 + 1488) = *(_OWORD *)(a2 + 1488);
    *(_OWORD *)(a1 + 1504) = v40;
    v41 = *(_OWORD *)(a2 + 1536);
    *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
    *(_OWORD *)(a1 + 1536) = v41;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(a2 + 1568))
  {
    sub_1B1E19420(a1 + 1488, qword_1EEF5F028, (uint64_t (*)(uint64_t))type metadata accessor for external_entity_constants, (uint64_t)&off_1E63C90B0);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a2 + 1488);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
  *(_DWORD *)(a1 + 1520) = *(_DWORD *)(a2 + 1520);
  *(_DWORD *)(a1 + 1524) = *(_DWORD *)(a2 + 1524);
  *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a2 + 1528);
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  *(_DWORD *)(a1 + 1552) = *(_DWORD *)(a2 + 1552);
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a2 + 1568);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1576) = *(_QWORD *)(a2 + 1576);
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 1584) = v4[264];
  *(_DWORD *)(a1 + 1588) = *(_DWORD *)(a2 + 1588);
LABEL_16:
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_BYTE *)(a1 + 1608) = v4[288];
  *(_BYTE *)(a1 + 1609) = v4[289];
  *(_BYTE *)(a1 + 1610) = v4[290];
  return a1;
}

uint64_t getEnumTagSinglePayload for FrameConstantsStorage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 1611))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 1224);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FrameConstantsStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 1610) = 0;
    *(_WORD *)(result + 1608) = 0;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 1611) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 1224) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 1611) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameConstantsStorage()
{
  return &type metadata for FrameConstantsStorage;
}

uint64_t sub_1B1E19C10()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B1E19CB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((v7 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v12 = (a1 + v6 + 24) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 24) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v14(v12, v13, v4);
    v15 = (_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)((v7 + v13) & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t sub_1B1E19DD4(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1E19E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + a1) & ~v6;
  v8 = (v6 + 24 + a2) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_unknownObjectRetain();
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = (_QWORD *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *sub_1B1E19F0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 24) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 24) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v10 + v9;
  v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v11 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v13 + 8);
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(v13 + 12);
  return a1;
}

uint64_t sub_1B1E19FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  v7 = (v5 + 24 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = v8 + v6;
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *v10;
  v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  return a1;
}

uint64_t sub_1B1E1A09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + a1) & ~v7;
  v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_bridgeObjectRelease();
  v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_unknownObjectRelease();
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  return a1;
}

uint64_t sub_1B1E1A164(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 24) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((v8 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B1E1A1F8 + 4 * byte_1B2296804[v11]))();
  }
}

void sub_1B1E1A288(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 24) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 24) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1B1E1A398()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B1E1A410);
}

void sub_1B1E1A3A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B1E1A3A8);
  JUMPOUT(0x1B1E1A410);
}

void sub_1B1E1A3EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1E1A410);
}

void sub_1B1E1A3F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1E1A410);
}

uint64_t sub_1B1E1A3FC@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x1B1E1A410);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x1B1E1A40CLL);
    JUMPOUT(0x1B1E1A408);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 24) & a3);
}

void sub_1B1E1A428()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5F110)
  {
    sub_1B1E1A480();
    v0 = sub_1B22299C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5F110);
  }
}

unint64_t sub_1B1E1A480()
{
  unint64_t result;

  result = qword_1EEF5F118;
  if (!qword_1EEF5F118)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296B6C, &type metadata for DebugSelectedCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F118);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugSelectedCamera.CodingKeys()
{
  return &type metadata for DebugSelectedCamera.CodingKeys;
}

unint64_t sub_1B1E1A4D8()
{
  unint64_t result;

  result = qword_1EEF5F120;
  if (!qword_1EEF5F120)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296B1C, &type metadata for DebugSelectedCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F120);
  }
  return result;
}

unint64_t sub_1B1E1A520()
{
  unint64_t result;

  result = qword_1EEF5F128;
  if (!qword_1EEF5F128)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296B44, &type metadata for DebugSelectedCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F128);
  }
  return result;
}

uint64_t sub_1B1E1A568(uint64_t a1)
{
  return sub_1B1E1819C(a1);
}

uint64_t sub_1B1E1A57C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;

  v5 = v4;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v9 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v10 = (unsigned int *)(v9 + 12 * (int)result);
      sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * (int)*v10 + 32), a2, *v10 | ((unint64_t)*((unsigned __int16 *)v10 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v10+ 2) << 32), v5, &v11);
      result = v11;
      if (v11)
        return sub_1B1E1AA44(v11, a3, a2);
    }
  }
  *a4 = 0u;
  a4[1] = 0u;
  return result;
}

uint64_t sub_1B1E1A668(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;

  v10 = result;
  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v11 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v12 = (unsigned int *)(v11 + 12 * (int)a2);
      result = sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * (int)*v12 + 32), a3, *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32), v5, &v14);
      if (v14)
      {
        result = sub_1B1E1B868(v10, v14, a5, a3);
        if ((result & 1) == 0)
        {
          MEMORY[0x1E0C80A78](result, v13);
          return sub_1B1FE298C(a3, a4, a2, (void (*)(uint64_t))sub_1B1E1D7AC);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1E1A7B0@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;

  v11 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
  {
LABEL_2:
    v12 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v12, 1, a4);
  }
  v12 = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v14 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v11 == -1 || *(_DWORD *)(v14 + 12 * (int)a1 + 8) == (_DWORD)v11)
    {
      v15 = (unsigned int *)(v14 + 12 * (int)a1);
      v16 = sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * (int)*v15 + 32), a2, *v15 | ((unint64_t)*((unsigned __int16 *)v15 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v15 + 2) << 32), v5, &v17);
      if (v17)
      {
        sub_1B1E1A9A0(v16, v17, a3, a2);
        v12 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v12, 1, a4);
      }
      goto LABEL_2;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v12, 1, a4);
}

BOOL sub_1B1E1A8CC(uint64_t a1, uint64_t a2, float32x2_t *a3, char a4, uint64_t a5, uint64_t a6, float32x2_t *a7, char a8)
{
  uint64_t v8;
  BOOL v13;
  uint64_t v14;
  float *v15;
  float *v16;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8 != *(_QWORD *)(a5 + 16))
    return 0;
  if (v8)
    v13 = a1 == a5;
  else
    v13 = 1;
  if (!v13)
  {
    if (*(float *)(a1 + 32) != *(float *)(a5 + 32))
      return 0;
    v14 = v8 - 1;
    if (v14)
    {
      v15 = (float *)(a5 + 36);
      v16 = (float *)(a1 + 36);
      while (*v16 == *v15)
      {
        ++v15;
        ++v16;
        if (!--v14)
          goto LABEL_7;
      }
      return 0;
    }
  }
LABEL_7:
  if (!sub_1B1CC94F4(a2, a6))
    return 0;
  if (!a3)
  {
    if (!a7)
      return a4 == a8;
    return 0;
  }
  if (!a7 || (sub_1B1CC9F30(a3, a7) & 1) == 0)
    return 0;
  return a4 == a8;
}

uint64_t sub_1B1E1A9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t sub_1B1E1AA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD v10[4];

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2229514();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a3);
    swift_retain();
    swift_getAtPartialKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
  }
  else
  {
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    v10[1] = a2;
    sub_1B2229328();
    sub_1B22295EC();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1E1ABC0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    LOBYTE(v7) = v4;
    goto LABEL_10;
  }
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
LABEL_6:
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    LODWORD(v7) = v4;
    goto LABEL_10;
  }
  sub_1B22295E0();
  if (swift_dynamicCastClass()
    || (sub_1B22295E0(), swift_dynamicCastClass())
    || (sub_1B19F8E54(255, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]), sub_1B22295E0(), swift_dynamicCastClass()))
  {
LABEL_9:
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    *(_QWORD *)&v7 = v4;
    goto LABEL_10;
  }
  sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B19F8E54(255, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_6;
  sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_9;
  sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  type metadata accessor for simd_float2x2(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  type metadata accessor for simd_float2x3(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_30;
  type metadata accessor for simd_float2x4(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_30;
  type metadata accessor for simd_float3x2(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    v7 = v4;
    *(_QWORD *)&v8 = v5;
    goto LABEL_10;
  }
  type metadata accessor for simd_float3x3(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_28;
  type metadata accessor for simd_float3x4(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_28;
  type metadata accessor for simd_float4x2(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
LABEL_30:
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    v7 = v4;
    v8 = v5;
    goto LABEL_10;
  }
  type metadata accessor for simd_float4x3(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass()
    || (type metadata accessor for simd_float4x4(255), sub_1B22295E0(), swift_dynamicCastClass()))
  {
LABEL_28:
    sub_1B1A02864(a1, (uint64_t)&v7);
    swift_retain();
    swift_dynamicCast();
    goto LABEL_10;
  }
  type metadata accessor for simd_quatf(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_9;
  sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
LABEL_2:
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    v7 = v4;
LABEL_10:
    swift_setAtWritableKeyPath();
    return swift_release();
  }
  sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_9;
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    v7 = v4;
    LOBYTE(v8) = v5;
    goto LABEL_10;
  }
  sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    swift_dynamicCast();
    v7 = v4;
    *(_QWORD *)&v8 = v5;
    BYTE8(v8) = BYTE8(v5);
    goto LABEL_10;
  }
  sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_9;
  sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
    goto LABEL_9;
  v3 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B22295E0();
  if (swift_dynamicCastClass()
    || (sub_1B1A02758(255, (unint64_t *)&qword_1ED4BB150, v3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]), sub_1B22295E0(), swift_dynamicCastClass()))
  {
    sub_1B1A02864(a1, (uint64_t)&v6);
    swift_retain();
    goto LABEL_10;
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2229328();
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E1B868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int8 v59;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int32x2_t v66;
  int32x2_t v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float32x2_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x4_t v87;
  uint32x2_t v88;
  unsigned int v89;
  char *v90;
  uint64_t v91;
  uint32x4_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x2_t v100;
  int8x8_t v101;
  int8x8_t v102;
  char *v103;
  uint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  char *v107;
  uint64_t v108;
  int8x16_t v109;
  int8x16_t v110;
  char *v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int32 v126;
  __int32 v127;
  uint64_t v129;
  uint64_t v130;
  float32x4_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float32x4_t v138;
  int v139;
  uint64_t v140;
  int v141;
  BOOL v142;
  char *v143;
  uint64_t v144;
  float32x4_t v145;
  float32x2_t *v146;
  char v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  float v158;
  float v159;
  float v160;
  char *v161;
  char *v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  uint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;

  v169.i64[0] = a2;
  v168.i64[0] = a1;
  v167.i64[0] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v166.i64[0] = (uint64_t)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v165.i64[0] = (uint64_t)&v161 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v164.i64[0] = (uint64_t)&v161 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v163.i64[0] = (uint64_t)&v161 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v162 = (char *)&v161 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v161 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v161 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v161 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v161 - v32;
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v161 - v36;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v161 - v40;
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v161 - v44;
  MEMORY[0x1E0C80A78](v46, v47);
  v49 = (char *)&v161 - v48;
  v171.i64[0] = v50;
  sub_1B22295E0();
  v170 = a3;
  if (swift_dynamicCastClass())
  {
    v51 = v167.i64[0];
    v52 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v167.i64[0] + 16))(v49, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v52);
    v53 = v182;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    if (*(_OWORD *)&v53 == *(_OWORD *)&v186)
      LOBYTE(v54) = 1;
    else
      LOBYTE(v54) = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_8;
  }
  v55 = v41;
  v161 = v45;
  v56 = v167.i64[0];
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v57 = v161;
    v58 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    v59 = v182.i8[0];
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    LOBYTE(v54) = v59 ^ v186.i8[0] ^ 1;
    return v54 & 1;
  }
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v61 = v161;
    v62 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v62);
    LODWORD(v54) = v182.i32[0];
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    LOBYTE(v54) = (_DWORD)v54 == v186.i32[0];
    return v54 & 1;
  }
  sub_1B22295E0();
  if (swift_dynamicCastClass() || (sub_1B22295E0(), swift_dynamicCastClass()))
  {
    v63 = v161;
    v64 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v63, v64);
    v54 = v182.i64[0];
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    LOBYTE(v54) = v54 == v186.i64[0];
    return v54 & 1;
  }
  sub_1B19F8E54(255, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v65 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v65);
    v66 = *(int32x2_t *)v182.f32;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v67 = vceq_s32(v66, *(int32x2_t *)v186.f32);
LABEL_17:
    LOBYTE(v54) = v67.i8[0] & v67.i8[4];
    return v54 & 1;
  }
  sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v68 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v37, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v68);
    v171 = v182;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v69 = v171;
    v70 = 0;
    v71 = v186;
    goto LABEL_95;
  }
  sub_1B19F8E54(255, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v72 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v33, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v72);
    v171 = v182;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v73 = 0;
LABEL_99:
    v178 = v171;
    v157 = *(_DWORD *)((unint64_t)&v178 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
    v179 = v186;
    LOBYTE(v54) = v157 == *(_DWORD *)((unint64_t)&v179 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
    while (v73 != 3)
    {
      ++v73;
      if ((v54 & 1) != 0)
        goto LABEL_99;
      LOBYTE(v54) = 0;
    }
    return v54 & 1;
  }
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v74 = v161;
    v75 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v74, v75);
    v76 = v182.f32[0];
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    LOBYTE(v54) = v76 == v186.f32[0];
    return v54 & 1;
  }
  sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v77 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v29, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v77);
    v78 = *(float32x2_t *)v182.f32;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v67 = vceq_f32(v78, *(float32x2_t *)v186.f32);
    goto LABEL_17;
  }
  sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B22295E0();
  v79 = v170;
  if (swift_dynamicCastClass())
  {
    v80 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v25, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v25, v80);
    v171 = v182;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v81 = 0;
LABEL_103:
    v176 = v171;
    v158 = *(float *)((unint64_t)&v176 & 0xFFFFFFFFFFFFFFF3 | (4 * (v81 & 3)));
    v177 = v186;
    LOBYTE(v54) = v158 == *(float *)((unint64_t)&v177 & 0xFFFFFFFFFFFFFFF3 | (4 * (v81 & 3)));
    while (v81 != 2)
    {
      ++v81;
      if ((v54 & 1) != 0)
        goto LABEL_103;
      LOBYTE(v54) = 0;
    }
    return v54 & 1;
  }
  sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v82 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v21, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v21, v82);
    v171 = v182;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v83 = 0;
LABEL_107:
    v174 = v171;
    v159 = *(float *)((unint64_t)&v174 & 0xFFFFFFFFFFFFFFF3 | (4 * (v83 & 3)));
    v175 = v186;
    LOBYTE(v54) = v159 == *(float *)((unint64_t)&v175 & 0xFFFFFFFFFFFFFFF3 | (4 * (v83 & 3)));
    while (v83 != 3)
    {
      ++v83;
      if ((v54 & 1) != 0)
        goto LABEL_107;
      LOBYTE(v54) = 0;
    }
    return v54 & 1;
  }
  type metadata accessor for simd_float2x2(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v84 = v161;
    v85 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v84, v85);
    v86 = v182;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v87 = v186;
    swift_release();
    v88 = (uint32x2_t)vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)&v86.u32[2], *(float32x2_t *)&v87.u32[2]), (int8x8_t)vceq_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v87.f32));
LABEL_36:
    v89 = vpmin_u32(v88, v88).u32[0];
LABEL_43:
    LODWORD(v54) = v89 >> 31;
    return v54 & 1;
  }
  type metadata accessor for simd_float2x3(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v90 = v161;
    v91 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v90, v91);
    v171 = v188;
    v169 = v189;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v182);
    swift_dynamicCast();
    v167 = v187;
    v168 = v186;
    swift_release();
    v92 = (uint32x4_t)vandq_s8((int8x16_t)vceqq_f32(v169, v167), (int8x16_t)vceqq_f32(v171, v168));
LABEL_39:
    v92.i32[3] = v92.i32[2];
LABEL_42:
    v89 = vminvq_u32(v92);
    goto LABEL_43;
  }
  type metadata accessor for simd_float2x4(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v93 = v161;
    v94 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v93, v94);
    v171 = v188;
    v169 = v189;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v182);
    swift_dynamicCast();
    v167 = v187;
    v168 = v186;
    swift_release();
    v92 = (uint32x4_t)vandq_s8((int8x16_t)vceqq_f32(v169, v167), (int8x16_t)vceqq_f32(v171, v168));
    goto LABEL_42;
  }
  type metadata accessor for simd_float3x2(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v95 = v161;
    v96 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v95, v96);
    v97 = v182;
    v98 = *(float32x2_t *)v183.f32;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
    swift_dynamicCast();
    v99 = v186;
    v100 = *(float32x2_t *)v187.f32;
    swift_release();
    v101 = vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)&v97.u32[2], *(float32x2_t *)&v99.u32[2]), (int8x8_t)vceq_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v99.f32));
    v102 = (int8x8_t)vceq_f32(v98, v100);
LABEL_46:
    v88 = (uint32x2_t)vand_s8(v101, v102);
    goto LABEL_36;
  }
  type metadata accessor for simd_float3x3(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v103 = v161;
    v104 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v103, v104);
    v169 = v188;
    v167 = v189;
    v171 = v190;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v186);
    swift_dynamicCast();
    v165 = v183;
    v166 = v182;
    v168 = v184;
    swift_release();
    v105 = vandq_s8((int8x16_t)vceqq_f32(v167, v165), (int8x16_t)vceqq_f32(v169, v166));
    v106 = (int8x16_t)vceqq_f32(v171, v168);
LABEL_49:
    v92 = (uint32x4_t)vandq_s8(v105, v106);
    goto LABEL_39;
  }
  type metadata accessor for simd_float3x4(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v107 = v161;
    v108 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v107, v108);
    v169 = v188;
    v167 = v189;
    v171 = v190;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v186);
    swift_dynamicCast();
    v165 = v183;
    v166 = v182;
    v168 = v184;
    swift_release();
    v109 = vandq_s8((int8x16_t)vceqq_f32(v167, v165), (int8x16_t)vceqq_f32(v169, v166));
    v110 = (int8x16_t)vceqq_f32(v171, v168);
LABEL_52:
    v92 = (uint32x4_t)vandq_s8(v109, v110);
    goto LABEL_42;
  }
  type metadata accessor for simd_float4x2(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v111 = v161;
    v112 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v111, v112);
    v113 = v188;
    v114 = v189;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v182);
    swift_dynamicCast();
    v115 = v186;
    v116 = v187;
    swift_release();
    v101 = vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)&v113.u32[2], *(float32x2_t *)&v115.u32[2]), (int8x8_t)vceq_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v115.f32));
    v102 = vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v116.f32), (int8x8_t)vceq_f32(*(float32x2_t *)&v114.u32[2], *(float32x2_t *)&v116.u32[2]));
    goto LABEL_46;
  }
  type metadata accessor for simd_float4x3(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v117 = v161;
    v118 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v117, v118);
    v166 = v189;
    v167 = v188;
    v171 = v190;
    v169 = v191;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v186);
    swift_dynamicCast();
    v163 = v183;
    v164 = v182;
    v168 = v184;
    v165 = v185;
    swift_release();
    v105 = vandq_s8((int8x16_t)vceqq_f32(v166, v163), (int8x16_t)vceqq_f32(v167, v164));
    v106 = vandq_s8((int8x16_t)vceqq_f32(v171, v168), (int8x16_t)vceqq_f32(v169, v165));
    goto LABEL_49;
  }
  type metadata accessor for simd_float4x4(255);
  sub_1B22295E0();
  if (swift_dynamicCastClass())
  {
    v119 = v161;
    v120 = v171.i64[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
    swift_retain();
    swift_getAtKeyPath();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v119, v120);
    v166 = v189;
    v167 = v188;
    v171 = v190;
    v169 = v191;
    sub_1B1A02864(v168.i64[0], (uint64_t)&v186);
    swift_dynamicCast();
    v163 = v183;
    v164 = v182;
    v168 = v184;
    v165 = v185;
    swift_release();
    v109 = vandq_s8((int8x16_t)vceqq_f32(v166, v163), (int8x16_t)vceqq_f32(v167, v164));
    v110 = vandq_s8((int8x16_t)vceqq_f32(v171, v168), (int8x16_t)vceqq_f32(v169, v165));
    goto LABEL_52;
  }
  type metadata accessor for simd_quatf(255);
  sub_1B22295E0();
  if (!swift_dynamicCastClass())
  {
    sub_1B22295E0();
    if (swift_dynamicCastClass())
    {
      v124 = v163.i64[0];
      v125 = v171.i64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v163.i64[0], v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v124, v125);
      v126 = v182.i32[0];
      v127 = v182.i32[1];
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      LOBYTE(v54) = v126 == v186.i32[0] && v127 == v186.i32[1];
      return v54 & 1;
    }
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    sub_1B22295E0();
    if (swift_dynamicCastClass())
    {
      v129 = v164.i64[0];
      v130 = v171.i64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v164.i64[0], v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v129, v130);
      v131 = v182;
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      LOBYTE(v54) = v131.i64[0] == v186.i64[0] && v131.i64[1] == v186.i64[1];
      return v54 & 1;
    }
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    sub_1B22295E0();
    if (swift_dynamicCastClass())
    {
      v133 = v165.i64[0];
      v134 = v171.i64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v165.i64[0], v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v133, v134);
      v135 = v182.i64[0];
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      LOBYTE(v54) = *((float *)&v135 + 1) == v186.f32[1] && *(float *)&v135 == v186.f32[0];
      return v54 & 1;
    }
    sub_1B22295E0();
    if (swift_dynamicCastClass())
    {
      v136 = v166.i64[0];
      v137 = v171.i64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v166.i64[0], v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v136, v137);
      v138 = v182;
      v139 = v183.u8[0];
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      v140 = v186.i64[1];
      v141 = v187.u8[0];
      if (sub_1B1CC9434(v138.i64[0], v186.i64[0]))
      {
        v142 = sub_1B1CC94F4(v138.i64[1], v140);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        LOBYTE(v54) = v142 && v139 == v141;
        return v54 & 1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_86;
    }
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    sub_1B22295E0();
    if (swift_dynamicCastClass())
    {
      v143 = v161;
      v144 = v171.i64[0];
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v143, v144);
      v145 = v182;
      v146 = (float32x2_t *)v183.i64[0];
      v147 = v183.i8[8];
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      LOBYTE(v54) = sub_1B1E1A8CC(v145.i64[0], v145.i64[1], v146, v147, v186.i64[0], v186.i64[1], (float32x2_t *)v187.i64[0], v187.i8[8]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      return v54 & 1;
    }
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B22295E0();
    if (swift_dynamicCastClass())
    {
      v148 = v161;
      v149 = v171.i64[0];
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v148, v149);
      v150 = (_QWORD *)v182.i64[0];
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      v151 = sub_1B1CC9D08(v150, v186.i64[0]);
    }
    else
    {
      sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B22295E0();
      if (!swift_dynamicCastClass())
      {
        v155 = MEMORY[0x1E0DEE9B8] + 8;
        sub_1B22295E0();
        if (!swift_dynamicCastClass())
        {
          sub_1B1A02758(255, (unint64_t *)&qword_1ED4BB150, v155, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          sub_1B22295E0();
          if (!swift_dynamicCastClass())
          {
            v188.i64[0] = 0;
            v188.i64[1] = 0xE000000000000000;
            sub_1B2229430();
            sub_1B2228890();
            v182.i64[0] = v79;
            sub_1B2229328();
            sub_1B22295EC();
            sub_1B2229688();
            __break(1u);
LABEL_95:
            v180 = v69;
            v156 = *(_DWORD *)((unint64_t)&v180 & 0xFFFFFFFFFFFFFFF3 | (4 * (v70 & 3)));
            v181 = v71;
            LOBYTE(v54) = v156 == *(_DWORD *)((unint64_t)&v181 & 0xFFFFFFFFFFFFFFF3 | (4 * (v70 & 3)));
            while (v70 != 2)
            {
              ++v70;
              if ((v54 & 1) != 0)
                goto LABEL_95;
              LOBYTE(v54) = 0;
            }
            return v54 & 1;
          }
        }
LABEL_86:
        LOBYTE(v54) = 0;
        return v54 & 1;
      }
      v152 = v161;
      v153 = v171.i64[0];
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v161, v169.i64[0], v171.i64[0]);
      swift_retain();
      swift_getAtKeyPath();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v152, v153);
      v154 = v182.i64[0];
      sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
      swift_dynamicCast();
      v151 = sub_1B1CC94F4(v154, v186.i64[0]);
    }
    LOBYTE(v54) = v151;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return v54 & 1;
  }
  v121 = v162;
  v122 = v171.i64[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v162, v169.i64[0], v171.i64[0]);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v121, v122);
  v171 = v182;
  sub_1B1A02864(v168.i64[0], (uint64_t)&v188);
  swift_dynamicCast();
  v123 = 0;
LABEL_111:
  v172 = v171;
  v160 = *(float *)((unint64_t)&v172 & 0xFFFFFFFFFFFFFFF3 | (4 * (v123 & 3)));
  v173 = v186;
  LOBYTE(v54) = v160 == *(float *)((unint64_t)&v173 & 0xFFFFFFFFFFFFFFF3 | (4 * (v123 & 3)));
  while (v123 != 3)
  {
    ++v123;
    if ((v54 & 1) != 0)
      goto LABEL_111;
    LOBYTE(v54) = 0;
  }
  return v54 & 1;
}

uint64_t sub_1B1E1D678(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[6];

  v4 = *(_QWORD *)(*a3 + *MEMORY[0x1E0DEC880]);
  v6[2] = a4;
  v6[3] = a3;
  v6[4] = a1;
  return sub_1B1FE0614(v4, a2, (void (*)(char *))sub_1B1E1D768, (uint64_t)v6, v4, a4);
}

uint64_t sub_1B1E1D6D0(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v3 + 16))((char *)&v7 - v4, v5, v2);
  return swift_setAtWritableKeyPath();
}

uint64_t sub_1B1E1D768(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E1D6D0(a1, *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1E1D784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1E1ABC0(a4);
}

uint64_t sub_1B1E1D7AC()
{
  uint64_t v0;

  return sub_1B1E1ABC0(*(_QWORD *)(v0 + 32));
}

void sub_1B1E1D7CC(id a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unsigned __int16 *v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  int v30;
  __int16 v31;
  __int16 v32;
  int v33;
  __int16 v34;
  __int16 v35;
  int v36;
  __int16 v37;
  __int16 v38;
  int v39;
  __int16 v40;
  __int16 v41;
  int v42;
  __int16 v43;
  __int16 v44;
  int v45;
  __int16 v46;
  __int16 v47;
  int v48;
  __int16 v49;
  __int16 v50;
  int v51;
  __int16 v52;
  __int16 v53;
  int v54;
  __int16 v55;
  __int16 v56;
  int v57;
  __int16 v58;
  __int16 v59;
  int v60;
  __int16 v61;
  __int16 v62;
  int v63;
  __int16 v64;
  __int16 v65;
  int v66;
  __int16 v67;
  __int16 v68;
  int v69;
  __int16 v70;
  __int16 v71;
  int v72;
  __int16 v73;
  __int16 v74;
  int v75;
  __int16 v76;
  __int16 v77;
  int v78;
  __int16 v79;
  __int16 v80;
  int v81;
  __int16 v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  int v87;
  int v88;
  __int16 v89;
  __int16 v90;
  int v91;
  __int16 v92;
  __int16 v93;
  int v94;
  __int16 v95;
  __int16 v96;
  int v97;
  __int16 v98;
  __int16 v99;
  int v100;
  __int16 v101;
  __int16 v102;
  int v103;
  __int16 v104;
  __int16 v105;
  int v106;
  __int16 v107;
  __int16 v108;
  int v109;
  __int16 v110;
  __int16 v111;
  int v112;
  __int16 v113;
  __int16 v114;
  int v115;
  __int16 v116;
  __int16 v117;

  v4 = 0;
  v82 = *(_WORD *)(a3 + 100);
  v84 = *(_DWORD *)(a3 + 96);
  v78 = *(_DWORD *)(a3 + 104);
  v80 = *(_WORD *)(a3 + 102);
  v74 = *(_WORD *)(a3 + 110);
  v76 = *(_WORD *)(a3 + 108);
  v70 = *(_WORD *)(a3 + 116);
  v72 = *(_DWORD *)(a3 + 112);
  v66 = *(_DWORD *)(a3 + 120);
  v68 = *(_WORD *)(a3 + 118);
  v62 = *(_WORD *)(a3 + 126);
  v64 = *(_WORD *)(a3 + 124);
  v58 = *(_WORD *)(a3 + 132);
  v60 = *(_DWORD *)(a3 + 128);
  v54 = *(_DWORD *)(a3 + 136);
  v56 = *(_WORD *)(a3 + 134);
  v50 = *(_WORD *)(a3 + 142);
  v52 = *(_WORD *)(a3 + 140);
  v46 = *(_WORD *)(a3 + 148);
  v48 = *(_DWORD *)(a3 + 144);
  v42 = *(_DWORD *)(a3 + 152);
  v44 = *(_WORD *)(a3 + 150);
  v38 = *(_WORD *)(a3 + 158);
  v40 = *(_WORD *)(a3 + 156);
  v34 = *(_WORD *)(a3 + 164);
  v36 = *(_DWORD *)(a3 + 160);
  v5 = (unsigned __int16 *)&v90;
  v30 = *(_DWORD *)(a3 + 168);
  v32 = *(_WORD *)(a3 + 166);
  v26 = a3;
  v27 = *(_WORD *)(a3 + 174);
  v28 = *(_WORD *)(a3 + 172);
  do
  {
    v88 = v84;
    v89 = v82;
    v90 = v80;
    v91 = v78;
    v92 = v76;
    v93 = v74;
    v94 = v72;
    v95 = v70;
    v96 = v68;
    v97 = v66;
    v98 = v64;
    v99 = v62;
    v100 = v60;
    v101 = v58;
    v102 = v56;
    v103 = v54;
    v104 = v52;
    v105 = v50;
    v106 = v48;
    v107 = v46;
    v108 = v44;
    v109 = v42;
    v110 = v40;
    v111 = v38;
    v112 = v36;
    v113 = v34;
    v114 = v32;
    v115 = v30;
    v116 = v28;
    v117 = v27;
    v6 = *(unsigned int *)(v5 - 3);
    v86 = *(v5 - 1);
    v7 = *v5;
    v5 += 4;
    v8 = v4 + 1;
    v9 = objc_msgSend(a1, sel_attributes, v26);
    v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, v4);

    objc_msgSend(v10, sel_setBufferIndex_, v7 + 21);
    v11 = objc_msgSend(a1, sel_attributes);
    v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, v4);

    objc_msgSend(v12, sel_setOffset_, v6);
    v13 = objc_msgSend(a1, sel_attributes);
    v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, v4);

    objc_msgSend(v14, sel_setFormat_, v86);
    v4 = v8;
  }
  while (v8 != 10);
  v85 = *(_WORD *)(v26 + 20);
  v87 = *(_DWORD *)(v26 + 16);
  v81 = *(_DWORD *)(v26 + 24);
  v83 = *(_WORD *)(v26 + 22);
  v77 = *(_WORD *)(v26 + 30);
  v79 = *(_WORD *)(v26 + 28);
  v73 = *(_WORD *)(v26 + 36);
  v75 = *(_DWORD *)(v26 + 32);
  v69 = *(_DWORD *)(v26 + 40);
  v71 = *(_WORD *)(v26 + 38);
  v65 = *(_WORD *)(v26 + 46);
  v67 = *(_WORD *)(v26 + 44);
  v61 = *(_WORD *)(v26 + 52);
  v63 = *(_DWORD *)(v26 + 48);
  v57 = *(_DWORD *)(v26 + 56);
  v59 = *(_WORD *)(v26 + 54);
  v53 = *(_WORD *)(v26 + 62);
  v55 = *(_WORD *)(v26 + 60);
  v49 = *(_WORD *)(v26 + 68);
  v51 = *(_DWORD *)(v26 + 64);
  v45 = *(_DWORD *)(v26 + 72);
  v47 = *(_WORD *)(v26 + 70);
  v41 = *(_WORD *)(v26 + 78);
  v43 = *(_WORD *)(v26 + 76);
  v37 = *(_WORD *)(v26 + 84);
  v39 = *(_DWORD *)(v26 + 80);
  v15 = (unsigned __int16 *)&v90;
  v33 = *(_DWORD *)(v26 + 88);
  v35 = *(_WORD *)(v26 + 86);
  v29 = *(_WORD *)(v26 + 94);
  v31 = *(_WORD *)(v26 + 92);
  for (i = 21; i != 31; ++i)
  {
    v88 = v87;
    v89 = v85;
    v90 = v83;
    v91 = v81;
    v92 = v79;
    v93 = v77;
    v94 = v75;
    v95 = v73;
    v96 = v71;
    v97 = v69;
    v98 = v67;
    v99 = v65;
    v100 = v63;
    v101 = v61;
    v102 = v59;
    v103 = v57;
    v104 = v55;
    v105 = v53;
    v106 = v51;
    v107 = v49;
    v108 = v47;
    v109 = v45;
    v110 = v43;
    v111 = v41;
    v112 = v39;
    v113 = v37;
    v114 = v35;
    v115 = v33;
    v116 = v31;
    v117 = v29;
    v17 = *(unsigned int *)(v15 - 3);
    v18 = *(v15 - 1);
    v19 = *v15;
    v15 += 4;
    v20 = objc_msgSend(a1, sel_layouts);
    v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, i);

    objc_msgSend(v21, sel_setStepFunction_, v19);
    v22 = objc_msgSend(a1, sel_layouts);
    v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, i);

    objc_msgSend(v23, sel_setStepRate_, v18);
    v24 = objc_msgSend(a1, sel_layouts);
    v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, i);

    objc_msgSend(v25, sel_setStride_, v17);
  }
}

uint64_t sub_1B1E1DD8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F8DB40(*a1, *a2);
}

uint64_t sub_1B1E1DD98()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1DE28()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E1DE94()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1DF20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E236F8();
  *a1 = result;
  return result;
}

void sub_1B1E1DF4C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE400000000000000;
  v5 = 1702521203;
  if (v2 != 1)
  {
    v5 = 0x656469727473;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x74657366666FLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1E1DF9C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1702521203;
  if (*v0 != 1)
    v1 = 0x656469727473;
  if (*v0)
    return v1;
  else
    return 0x74657366666FLL;
}

uint64_t sub_1B1E1DFE8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E236F8();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E1E00C()
{
  sub_1B1E25008();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E1E034()
{
  sub_1B1E25008();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E1E05C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  sub_1B1E24FB4();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B2229610();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5F180, (uint64_t (*)(void))sub_1B1E25008, (uint64_t)&type metadata for MeshBuffer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v25 = v11;
  v23 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v22 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E25008();
  v24 = v14;
  sub_1B222A180();
  sub_1B19FA070(a1, a1[3]);
  v15 = sub_1B222A144();
  sub_1B2229604();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_1B1DC3F30((uint64_t)v10), (v17 & 1) != 0))
  {
    sub_1B1A02864(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  v18 = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (*((_QWORD *)&v27 + 1))
  {
    type metadata accessor for MeshBinaryData();
    if ((swift_dynamicCast() & 1) != 0)
      __asm { BR              X12 }
  }
  else
  {
    sub_1B1A0DD70((uint64_t)&v26);
  }
  v19 = v24;
  sub_1B1E2504C();
  swift_allocError();
  *v20 = 0xD000000000000018;
  v20[1] = 0x80000001B233DEF0;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v19, v18);
}

unint64_t sub_1B1E1E4A4()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD000000000000010;
}

unint64_t sub_1B1E1E520()
{
  return sub_1B1E1E4A4();
}

double sub_1B1E1E528@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_1B1E24B90(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1E1E56C(_QWORD *a1)
{
  return sub_1B1E1E05C(a1);
}

uint64_t sub_1B1E1E5A4()
{
  uint64_t v0;

  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    sub_1B222A084();
  }
  else
  {
    sub_1B222A084();
    sub_1B222A078();
  }
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1E63C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  if (v1 == 1)
    return sub_1B222A084();
  sub_1B222A084();
  return sub_1B222A078();
}

uint64_t sub_1B1E1E6B0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  if (v1 != 1)
    sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1E74C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return sub_1B1E23588((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1B1E1E794()
{
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1E1E924(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1E1E964 + 4 * byte_1B2296BC4[a1]))(0x766974696D697270, 0xED00006570795465);
}

uint64_t sub_1B1E1E964()
{
  return 0x7453786574726576;
}

uint64_t sub_1B1E1E988()
{
  return 0x6F43786574726576;
}

uint64_t sub_1B1E1E9A8()
{
  return 0x6C6169726574616DLL;
}

uint64_t sub_1B1E1E9CC()
{
  return 0x73656369646E69;
}

uint64_t sub_1B1E1E9E4()
{
  return 0x756F437865646E69;
}

uint64_t sub_1B1E1EA00()
{
  return 0x7479427865646E69;
}

uint64_t sub_1B1E1EA24()
{
  return 7235949;
}

uint64_t sub_1B1E1EA34()
{
  return 7889261;
}

uint64_t sub_1B1E1EA44()
{
  return 0x44664F6C6576656CLL;
}

uint64_t sub_1B1E1EA68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1E1EAA8 + 4 * byte_1B2296BCE[a1]))(0x766974696D697270, 0xED00006570795465);
}

uint64_t sub_1B1E1EAA8()
{
  return 0x7453786574726576;
}

uint64_t sub_1B1E1EACC()
{
  return 0x6F43786574726576;
}

uint64_t sub_1B1E1EAEC()
{
  return 0x6C6169726574616DLL;
}

uint64_t sub_1B1E1EB10()
{
  return 0x73656369646E69;
}

uint64_t sub_1B1E1EB28()
{
  return 0x756F437865646E69;
}

uint64_t sub_1B1E1EB44()
{
  return 0x7479427865646E69;
}

uint64_t sub_1B1E1EB68()
{
  return 7235949;
}

uint64_t sub_1B1E1EB78()
{
  return 7889261;
}

uint64_t sub_1B1E1EB88()
{
  return 0x44664F6C6576656CLL;
}

BOOL sub_1B1E1EBAC(__n128 *a1, __n128 *a2)
{
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v13[8];
  __n128 v14[8];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return sub_1B1E235E8(v13, v14);
}

uint64_t sub_1B1E1EC1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1E1EA68(*a1);
  v5 = v4;
  if (v3 == sub_1B1E1EA68(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1E1ECA4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1E1E924(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1ED04()
{
  unsigned __int8 *v0;

  sub_1B1E1E924(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E1ED44()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1E1E924(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1EDA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E23A78();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E1EDCC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1E1E924(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1E1EDF4()
{
  unsigned __int8 *v0;

  return sub_1B1E1EA68(*v0);
}

uint64_t sub_1B1E1EDFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E23A78();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E1EE20()
{
  sub_1B1E25618();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E1EE48()
{
  sub_1B1E25618();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E1EE70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _BYTE v17[24];
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5F1C0, (uint64_t (*)(void))sub_1B1E25618, (uint64_t)&type metadata for MeshPart.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E25618();
  sub_1B222A180();
  v17[0] = 0;
  sub_1B222994C();
  if (!v2)
  {
    if (*(_QWORD *)(v3 + 32))
    {
      v12 = *(_BYTE *)(v3 + 64);
      v13 = *(_QWORD *)(v3 + 56);
      *(_QWORD *)v17 = *(_QWORD *)(v3 + 32);
      *(_OWORD *)&v17[8] = *(_OWORD *)(v3 + 40);
      v18 = v13;
      v19 = v12 & 1;
      v20 = 4;
      sub_1B1E25790();
      swift_unknownObjectRetain();
      sub_1B2229958();
      v17[0] = 5;
      sub_1B2229940();
      v17[0] = 6;
      sub_1B2229940();
      swift_unknownObjectRelease();
    }
    if (*(_QWORD *)(v3 + 16))
    {
      v17[0] = 2;
      sub_1B2229940();
    }
    if (*(_QWORD *)(v3 + 8))
    {
      v17[0] = 1;
      sub_1B2229940();
    }
    v17[0] = 3;
    sub_1B2229940();
    v14 = *(float32x4_t *)(v3 + 96);
    v15 = *(float32x4_t *)(v3 + 112);
    v16 = v14;
    *(float32x4_t *)v17 = vsubq_f32(v14, v15);
    v20 = 7;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    *(float32x4_t *)v17 = vaddq_f32(v16, v15);
    v20 = 8;
    sub_1B2229958();
    if (*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16))
    {
      *(_QWORD *)v17 = *(_QWORD *)(v3 + 88);
      v20 = 9;
      sub_1B1A02758(0, &qword_1EEF5F1A8, (uint64_t)&type metadata for MeshBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1E25718();
      sub_1B2229958();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1E1F208@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_1B1E25140(a1, (uint64_t *)v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1B1E1F258(_QWORD *a1)
{
  return sub_1B1E1EE70(a1);
}

uint64_t sub_1B1E1F26C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F9671C(*a1, *a2);
}

uint64_t sub_1B1E1F278()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746152706574735FLL;
  if (*v0 != 1)
    v1 = 0x6E7546706574735FLL;
  if (*v0)
    return v1;
  else
    return 0x6564697274735FLL;
}

uint64_t sub_1B1E1F2E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E23740(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E1F308()
{
  sub_1B1E261A0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E1F330()
{
  sub_1B1E261A0();
  return sub_1B222A1E0();
}

void sub_1B1E1F35C(_QWORD *a1@<X8>)
{
  *a1 = 0x1000100000000;
}

unint64_t sub_1B1E1F36C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1B1E1F66C(a1, &qword_1EEF5F290, (uint64_t (*)(void))sub_1B1E261A0, (uint64_t)&type metadata for VertexLayoutDescriptor.Buffer.CodingKeys, a2);
}

uint64_t sub_1B1E1F398(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1E1F3C8(a1, *v1, &qword_1EEF5F2A0, (uint64_t (*)(void))sub_1B1E261A0, (uint64_t)&type metadata for VertexLayoutDescriptor.Buffer.CodingKeys);
}

uint64_t sub_1B1E1F3C8(_QWORD *a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  char v17;
  char v18;

  sub_1B19F8E54(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v15 - v11;
  sub_1B19FA070(a1, a1[3]);
  a4();
  sub_1B222A180();
  v18 = 0;
  v13 = v15[1];
  sub_1B22299AC();
  if (!v13)
  {
    v17 = 1;
    sub_1B22299A0();
    v16 = 2;
    sub_1B22299A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1E1F524(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F96854(*a1, *a2);
}

uint64_t sub_1B1E1F530()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x74616D726F665FLL;
  if (*v0 != 1)
    v1 = 0x497265666675625FLL;
  if (*v0)
    return v1;
  else
    return 0x74657366666F5FLL;
}

uint64_t sub_1B1E1F594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E238C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E1F5B8()
{
  sub_1B1E2615C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E1F5E0()
{
  sub_1B1E2615C();
  return sub_1B222A1E0();
}

BOOL sub_1B1E1F608(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6);
}

unint64_t sub_1B1E1F640@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1B1E1F66C(a1, &qword_1EEF5F278, (uint64_t (*)(void))sub_1B1E2615C, (uint64_t)&type metadata for VertexLayoutDescriptor.Attribute.CodingKeys, a2);
}

unint64_t sub_1B1E1F66C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, unint64_t *a5@<X8>)
{
  uint64_t v5;
  unint64_t result;

  result = sub_1B1E257D4(a1, a2, a3, a4);
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t sub_1B1E1F6B0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1E1F3C8(a1, *v1, &qword_1EEF5F288, (uint64_t (*)(void))sub_1B1E2615C, (uint64_t)&type metadata for VertexLayoutDescriptor.Attribute.CodingKeys);
}

uint64_t sub_1B1E1F6E0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VertexLayoutDescriptor()
{
  return objc_opt_self();
}

uint64_t sub_1B1E1F710()
{
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  sub_1B222A09C();
  sub_1B222A090();
  sub_1B222A090();
  return sub_1B222A09C();
}

uint64_t sub_1B1E1FA94()
{
  sub_1B222A06C();
  sub_1B1E1F710();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E1FAD4()
{
  return sub_1B1E1F710();
}

uint64_t sub_1B1E1FAF4()
{
  sub_1B222A06C();
  sub_1B1E1F710();
  return sub_1B222A0C0();
}

unint64_t sub_1B1E1FB30()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char *v7;
  __int16 v9;
  __int16 v10;
  int v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  int v17;
  int v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  int v23;
  int v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  int v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  int v41;
  int v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  int v53;
  int v54;
  __int16 v55;
  __int16 v56;
  int v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  __int16 v63;
  __int16 v64;
  int v65;
  __int16 v66;
  __int16 v67;
  int v68;
  __int16 v69;
  __int16 v70;
  int v71;
  __int16 v72;
  __int16 v73;
  int v74;
  __int16 v75;
  __int16 v76;
  int v77;
  __int16 v78;
  __int16 v79;
  int v80;
  __int16 v81;
  __int16 v82;
  int v83;
  __int16 v84;
  __int16 v85;
  unint64_t v86;
  unint64_t v87;

  v1 = 0;
  v86 = 0xD000000000000019;
  v87 = 0x80000001B233DF10;
  v59 = *(_WORD *)(v0 + 100);
  v57 = *(_DWORD *)(v0 + 104);
  v58 = *(_WORD *)(v0 + 102);
  v55 = *(_WORD *)(v0 + 110);
  v56 = *(_WORD *)(v0 + 108);
  v51 = *(_WORD *)(v0 + 116);
  v53 = *(_DWORD *)(v0 + 112);
  v47 = *(_DWORD *)(v0 + 120);
  v49 = *(_WORD *)(v0 + 118);
  v43 = *(_WORD *)(v0 + 126);
  v45 = *(_WORD *)(v0 + 124);
  v39 = *(_WORD *)(v0 + 132);
  v41 = *(_DWORD *)(v0 + 128);
  v35 = *(_DWORD *)(v0 + 136);
  v37 = *(_WORD *)(v0 + 134);
  v31 = *(_WORD *)(v0 + 142);
  v33 = *(_WORD *)(v0 + 140);
  v27 = *(_WORD *)(v0 + 148);
  v29 = *(_DWORD *)(v0 + 144);
  v23 = *(_DWORD *)(v0 + 152);
  v25 = *(_WORD *)(v0 + 150);
  v19 = *(_WORD *)(v0 + 158);
  v21 = *(_WORD *)(v0 + 156);
  v15 = *(_WORD *)(v0 + 164);
  v17 = *(_DWORD *)(v0 + 160);
  v2 = (char *)&v60 + 6;
  v11 = *(_DWORD *)(v0 + 168);
  v13 = *(_WORD *)(v0 + 166);
  v9 = *(_WORD *)(v0 + 172);
  v3 = *(_WORD *)(v0 + 174);
  do
  {
    WORD2(v60) = v59;
    HIWORD(v60) = v58;
    LODWORD(v61) = v57;
    WORD2(v61) = v56;
    HIWORD(v61) = v55;
    v62 = v53;
    v63 = v51;
    v64 = v49;
    v65 = v47;
    v66 = v45;
    v67 = v43;
    v68 = v41;
    v69 = v39;
    v70 = v37;
    v71 = v35;
    v72 = v33;
    v73 = v31;
    v74 = v29;
    v75 = v27;
    v76 = v25;
    v77 = v23;
    v78 = v21;
    v79 = v19;
    v80 = v17;
    v81 = v15;
    v82 = v13;
    v83 = v11;
    v84 = v9;
    v85 = v3;
    v4 = *((unsigned __int16 *)v2 - 1);
    if (*((_WORD *)v2 - 1))
    {
      HIDWORD(v60) = 0;
      v61 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      type metadata accessor for vfx_vertex_attribute(0);
      sub_1B22295EC();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B1F9C4B8(v4);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    ++v1;
    v2 += 8;
  }
  while (v1 != 10);
  sub_1B2228890();
  v5 = 0;
  v52 = *(_WORD *)(v0 + 36);
  v54 = *(_DWORD *)(v0 + 32);
  v48 = *(_DWORD *)(v0 + 40);
  v50 = *(_WORD *)(v0 + 38);
  v44 = *(_WORD *)(v0 + 46);
  v46 = *(_WORD *)(v0 + 44);
  v40 = *(_WORD *)(v0 + 52);
  v42 = *(_DWORD *)(v0 + 48);
  v36 = *(_DWORD *)(v0 + 56);
  v38 = *(_WORD *)(v0 + 54);
  v32 = *(_WORD *)(v0 + 62);
  v34 = *(_WORD *)(v0 + 60);
  v28 = *(_WORD *)(v0 + 68);
  v30 = *(_DWORD *)(v0 + 64);
  v24 = *(_DWORD *)(v0 + 72);
  v26 = *(_WORD *)(v0 + 70);
  v20 = *(_WORD *)(v0 + 78);
  v22 = *(_WORD *)(v0 + 76);
  v16 = *(_WORD *)(v0 + 84);
  v18 = *(_DWORD *)(v0 + 80);
  v12 = *(_DWORD *)(v0 + 88);
  v14 = *(_WORD *)(v0 + 86);
  v10 = *(_WORD *)(v0 + 92);
  v6 = *(_WORD *)(v0 + 94);
  v7 = (char *)&v60 + 6;
  do
  {
    v62 = v54;
    v63 = v52;
    v64 = v50;
    v65 = v48;
    v66 = v46;
    v67 = v44;
    v68 = v42;
    v69 = v40;
    v70 = v38;
    v71 = v36;
    v72 = v34;
    v73 = v32;
    v74 = v30;
    v75 = v28;
    v76 = v26;
    v77 = v24;
    v78 = v22;
    v79 = v20;
    v80 = v18;
    v81 = v16;
    v82 = v14;
    v83 = v12;
    v84 = v10;
    v85 = v6;
    v7 += 8;
    HIDWORD(v60) = 0;
    v61 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    HIDWORD(v60) = 1530557029;
    v61 = 0xE800000000000000;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    ++v5;
  }
  while (v5 != 10);
  return v86;
}

unint64_t sub_1B1E20230()
{
  return sub_1B1E1FB30();
}

uint64_t sub_1B1E20250(uint64_t a1, _QWORD *a2)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v17[5];
  _OWORD v18[5];
  _OWORD v19[5];
  _OWORD v20[5];

  v2 = *(_OWORD **)a1;
  v3 = (_OWORD *)*a2;
  v4 = *(_OWORD *)(*(_QWORD *)a1 + 144);
  v19[2] = *(_OWORD *)(*(_QWORD *)a1 + 128);
  v19[3] = v4;
  v19[4] = v2[10];
  v5 = v2[7];
  v19[0] = v2[6];
  v19[1] = v5;
  v6 = v3[6];
  v7 = v3[7];
  v8 = v3[10];
  v20[3] = v3[9];
  v20[4] = v8;
  v9 = v3[8];
  v20[1] = v7;
  v20[2] = v9;
  v20[0] = v6;
  if ((sub_1B1DC3354(v19, v20) & 1) != 0)
  {
    v10 = v2[4];
    v17[2] = v2[3];
    v17[3] = v10;
    v11 = v2[5];
    v12 = v2[2];
    v17[0] = v2[1];
    v17[1] = v12;
    v13 = v3[4];
    v18[2] = v3[3];
    v18[3] = v13;
    v18[4] = v3[5];
    v14 = v3[1];
    v18[1] = v3[2];
    v17[4] = v11;
    v18[0] = v14;
    v15 = sub_1B1DC3354(v17, v18);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

id sub_1B1E20308()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  qword_1ED4B84F0 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1E20338()
{
  _QWORD *result;

  result = sub_1B1B9827C(MEMORY[0x1E0DEE9D8]);
  off_1ED4B8508 = result;
  return result;
}

uint64_t sub_1B1E2035C(char *a1, char *a2)
{
  return sub_1B1F8F168(*a1, *a2);
}

uint64_t sub_1B1E20368()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E203EC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E2044C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E204CC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1E20528(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x73726566667562;
  if (*v1)
    v2 = 0x7475626972747461;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xEA00000000007365;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1E2056C()
{
  _BYTE *v0;

  if (*v0)
    return 0x7475626972747461;
  else
    return 0x73726566667562;
}

uint64_t sub_1B1E205AC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1E2060C()
{
  sub_1B1E25D90();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E20634()
{
  sub_1B1E25D90();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E2065C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  __int16 *v14;
  int v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BYTE v59[24];
  uint64_t v60;
  int v61;
  __int16 v62;
  __int16 v63;
  int v64;
  __int16 v65;
  __int16 v66;
  int v67;
  __int16 v68;
  __int16 v69;
  int v70;
  __int16 v71;
  __int16 v72;
  int v73;
  __int16 v74;
  __int16 v75;
  int v76;
  __int16 v77;
  __int16 v78;
  int v79;
  __int16 v80;
  __int16 v81;
  int v82;
  __int16 v83;
  __int16 v84;
  int v85;
  __int16 v86;
  __int16 v87;
  int v88;
  __int16 v89;
  __int16 v90;
  char v91[8];
  uint64_t v92;
  int v93;
  int v94;

  sub_1B19F8E54(0, &qword_1EEF5F200, (uint64_t (*)(void))sub_1B1E25D90, (uint64_t)&type metadata for VertexLayout.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v28 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E25D90();
  sub_1B222A180();
  LOBYTE(v61) = 0;
  v30 = v7;
  v29 = v10;
  sub_1B22298B0();
  v11 = 0;
  v12 = *(_DWORD *)(a3 + 16);
  v93 = *(unsigned __int16 *)(a3 + 20);
  v94 = v12;
  v13 = *(unsigned __int16 *)(a3 + 22);
  v57 = *(_DWORD *)(a3 + 24);
  v58 = v13;
  v56 = *(unsigned __int16 *)(a3 + 28);
  v55 = *(unsigned __int16 *)(a3 + 30);
  v54 = *(_DWORD *)(a3 + 32);
  v53 = *(unsigned __int16 *)(a3 + 36);
  v52 = *(unsigned __int16 *)(a3 + 38);
  v51 = *(_DWORD *)(a3 + 40);
  v50 = *(unsigned __int16 *)(a3 + 44);
  v49 = *(unsigned __int16 *)(a3 + 46);
  v48 = *(_DWORD *)(a3 + 48);
  v47 = *(unsigned __int16 *)(a3 + 52);
  v46 = *(unsigned __int16 *)(a3 + 54);
  v45 = *(_DWORD *)(a3 + 56);
  v44 = *(unsigned __int16 *)(a3 + 60);
  v43 = *(unsigned __int16 *)(a3 + 62);
  v42 = *(_DWORD *)(a3 + 64);
  v41 = *(unsigned __int16 *)(a3 + 68);
  v40 = *(unsigned __int16 *)(a3 + 70);
  v39 = *(_DWORD *)(a3 + 72);
  v38 = *(unsigned __int16 *)(a3 + 76);
  v37 = *(unsigned __int16 *)(a3 + 78);
  v36 = *(_DWORD *)(a3 + 80);
  v35 = *(unsigned __int16 *)(a3 + 84);
  v34 = *(unsigned __int16 *)(a3 + 86);
  v33 = *(_DWORD *)(a3 + 88);
  v32 = *(unsigned __int16 *)(a3 + 92);
  v14 = &v63;
  v27 = a3;
  v31 = *(unsigned __int16 *)(a3 + 94);
  while (1)
  {
    v61 = v94;
    v62 = v93;
    v63 = v58;
    v64 = v57;
    v65 = v56;
    v66 = v55;
    v67 = v54;
    v68 = v53;
    v69 = v52;
    v70 = v51;
    v71 = v50;
    v72 = v49;
    v73 = v48;
    v74 = v47;
    v75 = v46;
    v76 = v45;
    v77 = v44;
    v78 = v43;
    v79 = v42;
    v80 = v41;
    v81 = v40;
    v82 = v39;
    v83 = v38;
    v84 = v37;
    v85 = v36;
    v86 = v35;
    v87 = v34;
    v88 = v33;
    v89 = v32;
    v90 = v31;
    v15 = *(_DWORD *)(v14 - 3);
    if (v15)
      break;
LABEL_2:
    ++v11;
    v14 += 4;
    if (v11 == 10)
    {
      LOBYTE(v61) = 1;
      sub_1B22298B0();
      v18 = 0;
      v19 = *(_DWORD *)(v27 + 96);
      v93 = *(unsigned __int16 *)(v27 + 100);
      v94 = v19;
      v20 = *(unsigned __int16 *)(v27 + 102);
      v57 = *(_DWORD *)(v27 + 104);
      v58 = v20;
      v56 = *(unsigned __int16 *)(v27 + 108);
      v55 = *(unsigned __int16 *)(v27 + 110);
      v54 = *(_DWORD *)(v27 + 112);
      v53 = *(unsigned __int16 *)(v27 + 116);
      v52 = *(unsigned __int16 *)(v27 + 118);
      v51 = *(_DWORD *)(v27 + 120);
      v50 = *(unsigned __int16 *)(v27 + 124);
      v49 = *(unsigned __int16 *)(v27 + 126);
      v48 = *(_DWORD *)(v27 + 128);
      v47 = *(unsigned __int16 *)(v27 + 132);
      v46 = *(unsigned __int16 *)(v27 + 134);
      v45 = *(_DWORD *)(v27 + 136);
      v44 = *(unsigned __int16 *)(v27 + 140);
      v43 = *(unsigned __int16 *)(v27 + 142);
      v42 = *(_DWORD *)(v27 + 144);
      v41 = *(unsigned __int16 *)(v27 + 148);
      v40 = *(unsigned __int16 *)(v27 + 150);
      v39 = *(_DWORD *)(v27 + 152);
      v38 = *(unsigned __int16 *)(v27 + 156);
      v37 = *(unsigned __int16 *)(v27 + 158);
      v36 = *(_DWORD *)(v27 + 160);
      v35 = *(unsigned __int16 *)(v27 + 164);
      v34 = *(unsigned __int16 *)(v27 + 166);
      v33 = *(_DWORD *)(v27 + 168);
      v21 = &v63;
      v32 = *(unsigned __int16 *)(v27 + 172);
      v31 = *(unsigned __int16 *)(v27 + 174);
      while (1)
      {
        v61 = v94;
        v62 = v93;
        v63 = v58;
        v64 = v57;
        v65 = v56;
        v66 = v55;
        v67 = v54;
        v68 = v53;
        v69 = v52;
        v70 = v51;
        v71 = v50;
        v72 = v49;
        v73 = v48;
        v74 = v47;
        v75 = v46;
        v76 = v45;
        v77 = v44;
        v78 = v43;
        v79 = v42;
        v80 = v41;
        v81 = v40;
        v82 = v39;
        v83 = v38;
        v84 = v37;
        v85 = v36;
        v86 = v35;
        v87 = v34;
        v88 = v33;
        v89 = v32;
        v90 = v31;
        v22 = *(v21 - 1);
        if (v22)
        {
          v23 = *(_DWORD *)(v21 - 3);
          v24 = *v21;
          sub_1B19FC264((uint64_t)v59, v60);
          sub_1B2229B98();
          if (v3)
          {
LABEL_12:
            (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v59);
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v91);
          }
          v61 = v23;
          v62 = v22;
          v63 = v24;
          sub_1B19FC264((uint64_t)v59, v60);
          sub_1B1E25EA0();
          sub_1B2229BA4();
        }
        ++v18;
        v21 += 4;
        if (v18 == 10)
          goto LABEL_12;
      }
    }
  }
  v16 = *(v14 - 1);
  v17 = *v14;
  sub_1B19FC264((uint64_t)v91, v92);
  sub_1B2229B98();
  if (!v3)
  {
    v61 = v15;
    v62 = v16;
    v63 = v17;
    sub_1B19FC264((uint64_t)v91, v92);
    sub_1B1E25E5C();
    sub_1B2229BA4();
    goto LABEL_2;
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v91);
}

uint64_t sub_1B1E20E98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B1E2596C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1E20EC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1E2065C(a1, a2, *(_QWORD *)(v2 + 8));
}

uint64_t type metadata accessor for AttributeTable()
{
  return objc_opt_self();
}

void sub_1B1E20EF8(char *a1)
{
  sub_1B1F99154(*a1);
}

void sub_1B1E20F04()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1E20F4C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1E20FDC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1E21014()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1E21090()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1E210D4()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E21164@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E23A30();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E21190()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1E211BC + 4 * byte_1B2296BE7[*v0]))();
}

void sub_1B1E211BC(_QWORD *a1@<X8>)
{
  *a1 = 0x73726566667562;
  a1[1] = 0xE700000000000000;
}

void sub_1B1E211D8(_QWORD *a1@<X8>)
{
  *a1 = 0x7374726170;
  a1[1] = 0xE500000000000000;
}

void sub_1B1E211F0(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43786574726576;
  a1[1] = 0xEB00000000746E75;
}

void sub_1B1E21214(_QWORD *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
}

uint64_t sub_1B1E21234()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1E21260 + 4 * byte_1B2296BEC[*v0]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_1B1E21260()
{
  return 0x73726566667562;
}

uint64_t sub_1B1E21278()
{
  return 0x7374726170;
}

uint64_t sub_1B1E2128C()
{
  return 0x6F43786574726576;
}

uint64_t sub_1B1E212AC()
{
  return 0x696669746E656469;
}

uint64_t sub_1B1E212C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E23A30();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E212EC()
{
  sub_1B1E25EE4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E21314()
{
  sub_1B1E25EE4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E2133C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12;
  char v13;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5F2A8, (uint64_t (*)(void))sub_1B1E25EE4, (uint64_t)&type metadata for Mesh.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E25EE4();
  sub_1B222A180();
  v12 = *(_OWORD *)(v3 + 16);
  v13 = 0;
  sub_1B1A02758(0, &qword_1ED4B7778, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1E261E4();
  sub_1B2229958();
  if (!v2)
  {
    *(_QWORD *)&v12 = *(_QWORD *)(v3 + 32);
    v13 = 1;
    sub_1B1A02758(0, &qword_1EEF5F1A8, (uint64_t)&type metadata for MeshBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1E25718();
    sub_1B2229958();
    *(_QWORD *)&v12 = *(_QWORD *)(v3 + 40);
    v13 = 2;
    sub_1B1A02758(0, &qword_1EEF5F240, (uint64_t)&type metadata for MeshPart, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1E262A0();
    sub_1B2229958();
    LOBYTE(v12) = 3;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

_QWORD *sub_1B1E21568(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  char v22;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5F218, (uint64_t (*)(void))sub_1B1E25EE4, (uint64_t)&type metadata for Mesh.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v19 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - v8;
  v1[6] = 0;
  v1[2] = 0;
  v1[3] = 0;
  v10 = MEMORY[0x1E0DEE9D8];
  v1[4] = MEMORY[0x1E0DEE9D8];
  v1[5] = v10;
  v1[7] = 0;
  v1[8] = 0;
  v11 = a1[3];
  v20 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1E25EE4();
  v18 = v9;
  sub_1B222A150();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v12 = v6;
    sub_1B1A02758(0, &qword_1ED4B7778, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v22 = 0;
    sub_1B1E25F28();
    v13 = v19;
    v14 = v18;
    sub_1B2229814();
    *((_OWORD *)v3 + 1) = v21;
    swift_release();
    sub_1B1A02758(0, &qword_1EEF5F1A8, (uint64_t)&type metadata for MeshBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v22 = 1;
    sub_1B1E256A0();
    sub_1B2229814();
    v3[4] = v21;
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, &qword_1EEF5F240, (uint64_t)&type metadata for MeshPart, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v22 = 2;
    sub_1B1E25FE4();
    sub_1B2229814();
    v3[5] = v21;
    swift_bridgeObjectRelease();
    LOBYTE(v21) = 3;
    v16 = sub_1B22297FC();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v13);
    v3[6] = v16;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
  return v3;
}

uint64_t sub_1B1E21824()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Mesh()
{
  return objc_opt_self();
}

_QWORD *sub_1B1E21880@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  type metadata accessor for Mesh();
  v5 = swift_allocObject();
  result = sub_1B1E21568(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1E218D4(_QWORD *a1)
{
  return sub_1B1E2133C(a1);
}

uint64_t sub_1B1E218F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;

  v2 = *(_QWORD *)(v1 + 24);
  if (!v2)
    return 0;
  v3 = *(_OWORD *)(v2 + 112);
  v4 = *(_OWORD *)(v2 + 128);
  v5 = *(_OWORD *)(v2 + 144);
  v6 = *(_QWORD *)(v2 + 160);
  v7 = *(_DWORD *)(v2 + 168);
  v8 = *(_DWORD *)(v2 + 172);
  v28 = *(_OWORD *)(v2 + 96);
  v29 = v3;
  v30 = v4;
  v31 = v5;
  v32 = v6;
  v33 = v7;
  v34 = v8;
  v9 = (unsigned int *)&v28 + 2 * a1;
  if (!*((_WORD *)v9 + 2))
    return 0;
  v10 = *v9;
  v11 = *((unsigned __int16 *)v9 + 3);
  v12 = *(_DWORD *)(v2 + 24);
  v13 = *(_DWORD *)(v2 + 32);
  v14 = *(_DWORD *)(v2 + 40);
  v15 = *(_DWORD *)(v2 + 48);
  v16 = *(_DWORD *)(v2 + 56);
  v17 = *(_DWORD *)(v2 + 64);
  v18 = *(_DWORD *)(v2 + 72);
  v19 = *(_DWORD *)(v2 + 80);
  v20 = *(_DWORD *)(v2 + 88);
  LODWORD(v28) = *(_DWORD *)(v2 + 16);
  DWORD2(v28) = v12;
  LODWORD(v29) = v13;
  DWORD2(v29) = v14;
  LODWORD(v30) = v15;
  DWORD2(v30) = v16;
  LODWORD(v31) = v17;
  DWORD2(v31) = v18;
  LODWORD(v32) = v19;
  v33 = v20;
  v21 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v21 + 16) <= v11)
    return 0;
  v22 = v21 + 40 * v11;
  v23 = *(void **)(v22 + 32);
  v24 = *(_QWORD *)(v22 + 40);
  swift_retain();
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v25 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v26 = v23;
    swift_release();
    swift_unknownObjectRelease();
    return (uint64_t)v25 + v24 + v10;
  }
  return result;
}

uint64_t sub_1B1E21AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _WORD *v4;
  __int128 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t result;
  __int128 v31;
  _BYTE v32[4];
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;

  v4 = *(_WORD **)(v2 + 24);
  v5 = 0uLL;
  if (!v4)
    goto LABEL_4;
  v6 = v4[50];
  v7 = v4[51];
  v8 = v4[54];
  v9 = v4[55];
  v10 = v4[58];
  v11 = v4[59];
  v12 = v4[62];
  v13 = v4[63];
  v14 = v4[66];
  v15 = v4[67];
  v16 = v4[70];
  v17 = v4[71];
  v18 = v4[74];
  v19 = v4[75];
  v20 = v4[78];
  v21 = v4[79];
  v22 = v4[82];
  v23 = v4[83];
  v24 = v4[86];
  v25 = v4[87];
  v33 = v6;
  v35 = v8;
  v37 = v10;
  v39 = v12;
  v41 = v14;
  v43 = v16;
  v45 = v18;
  v47 = v20;
  v49 = v22;
  v51 = v24;
  v26 = &v32[8 * a1];
  if (*((_WORD *)v26 + 2))
  {
    v34 = v7;
    v36 = v9;
    v38 = v11;
    v40 = v13;
    v42 = v15;
    v44 = v17;
    v46 = v19;
    v48 = v21;
    v50 = v23;
    v52 = v25;
    v27 = *(_QWORD *)(v2 + 32) + 40 * *((unsigned __int16 *)v26 + 3);
    v31 = *(_OWORD *)(v27 + 40);
    v28 = *(_QWORD *)(v27 + 56);
    v29 = *(_BYTE *)(v27 + 64);
    result = swift_unknownObjectRetain();
    v5 = v31;
  }
  else
  {
LABEL_4:
    result = 0;
    v28 = 0;
    v29 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_OWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 24) = v28;
  *(_BYTE *)(a2 + 32) = v29;
  return result;
}

uint64_t sub_1B1E21BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, float32x4_t *a5@<X8>, float32x4_t a6@<Q0>, float32x4_t a7@<Q1>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x2_t v63;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  BOOL v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x2_t v75;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  uint32x4_t v108;
  char *v109;
  id v110;
  uint64_t v111;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float v142;
  float v143;
  float32x4_t v144;
  float32x4_t v145;
  float v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x2_t v151;
  float32x4_t v153;
  float32x4_t v154;
  float v155;
  BOOL v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int32x2_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  uint32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  uint32x4_t v194;
  float v195;
  float32x4_t *v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  __int32 v203;
  __int32 v204;
  __int32 v205;
  __int32 v206;
  float32x4_t v207;
  __int32 v208;
  float32x4_t v209;
  float32x4_t v210;
  __int32 v211;
  float32x4_t v212;
  float v214;
  float32x4_t v216;
  uint64_t v217;
  float v218;
  uint64_t v219;
  float32x4_t v220;
  float32x4_t v221;

  result = *(_QWORD *)(a4 + 40);
  v9 = *(_QWORD *)(result + 16);
  if (!v9)
    goto LABEL_77;
  v196 = a5;
  v12 = result + 32;
  swift_bridgeObjectRetain();
  v13 = 0;
  v219 = v9;
  v217 = v12;
  while (1)
  {
    v14 = (_QWORD *)(v12 + (v13 << 7));
    v15 = (void *)v14[4];
    if (*v14 != 3 || v15 == 0)
      goto LABEL_5;
    v17 = v14[5];
    v18 = v14[9];
    v19 = v14[10];
    if (v19 != 2)
      break;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    if (objc_msgSend(v15, sel_storageMode) == (id)2)
      goto LABEL_84;
    v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v21 = v15;
    if (v18 >= 1)
    {
      v22 = 0;
      v23.i64[0] = 0xBF000000BF000000;
      v23.i64[1] = 0xBF000000BF000000;
      v24.i64[0] = 0x3F0000003F000000;
      v24.i64[1] = 0x3F0000003F000000;
      v25.i32[3] = v211;
      v27.i32[3] = v208;
      v26 = v209;
      v29.i32[3] = v206;
      v28 = v207;
      v31 = v199;
      v30 = v200;
      v32 = v198;
      while (1)
      {
        _VF = __OFADD__(v22, 3);
        v37 = v22 + 3;
        v38 = &v20[2 * v22 + v17];
        v39 = a1 + *(unsigned __int16 *)v38 * a2;
        v25.i64[0] = *(_QWORD *)v39;
        v25.i32[2] = *(_DWORD *)(v39 + 8);
        v40 = a1 + *((unsigned __int16 *)v38 + 1) * a2;
        v27.i64[0] = *(_QWORD *)v40;
        v27.i32[2] = *(_DWORD *)(v40 + 8);
        v41 = a1 + *((unsigned __int16 *)v38 + 2) * a2;
        v29.i64[0] = *(_QWORD *)v41;
        v29.i32[2] = *(_DWORD *)(v41 + 8);
        if (_VF)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v37;
        v42 = vsubq_f32(v27, v25);
        v43 = vsubq_f32(v29, v25);
        v44 = vnegq_f32(v42);
        v45 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL), v44), v43, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL));
        v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
        v47 = vmulq_f32(v45, v45);
        v47.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), v47)).u64[0];
        v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 0);
        v48.i32[3] = 0;
        v49 = vrsqrteq_f32(v48);
        v50 = vmulq_f32(v49, vrsqrtsq_f32(v48, vmulq_f32(v49, v49)));
        v51 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v47.f32[0] != 0.0)), 0x1FuLL));
        v51.i32[3] = 0;
        v52 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)vmulq_f32(v46, vmulq_f32(v50, vrsqrtsq_f32(v48, vmulq_f32(v50, v50)))), (int8x16_t)v46);
        if ((a3 & 1) != 0)
        {
          v53 = vmulq_f32(v52, a7);
          v54 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0];
          v55 = -1.0;
          if (v54 < 0.0)
          {
            v56 = vmulq_f32(v25, v52);
            v57 = vmulq_f32(v52, a6);
            v55 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)))).f32[0]/ v54;
          }
          if (v55 <= 1.0)
            v58 = v55;
          else
            v58 = -1.0;
          if (v58 >= 0.0)
          {
            v59 = vmulq_n_f32(a7, v58);
            v59.i32[3] = v31.i32[3];
            v60 = vaddq_f32(v59, a6);
            v61 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v43, 8uLL), v44), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v42, (int8x16_t)v42, 0xCuLL), (int8x16_t)v42, 8uLL), v43);
            v62 = vmulq_f32(v61, v61);
            v63 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).u64[0];
            if (fabsf(*(float *)v63.i32) >= 1.1755e-38)
            {
              v77 = vsubq_f32(v29, v60);
              v78 = vsubq_f32(v27, v60);
              v79 = vsubq_f32(v25, v60);
              v80 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL), (int8x16_t)v78, 8uLL);
              v81 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL), (int8x16_t)v77, 8uLL);
              v82 = vmlaq_f32(vmulq_f32(v81, vnegq_f32(v78)), v80, v77);
              v83 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), (int8x16_t)v79, 8uLL);
              v84 = vmlaq_f32(vmulq_f32(v83, vnegq_f32(v77)), v81, v79);
              v85 = vmlaq_f32(vmulq_f32(v80, vnegq_f32(v79)), v83, v78);
              v86 = (int32x4_t)vmulq_f32(v61, v82);
              v87 = (int32x4_t)vmulq_f32(v61, v84);
              v88 = (int32x4_t)vmulq_f32(v61, v85);
              v89 = vdupq_laneq_s32(v87, 2);
              v90 = (float32x4_t)vzip1q_s32(vzip1q_s32(v86, v88), v87);
              v91 = (float32x4_t)vtrn2q_s32(v86, v87);
              v91.i32[2] = v88.i32[1];
              _Q3 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v86, v88), v89), vaddq_f32(v90, v91)), (float32x4_t)vdupq_lane_s32(v63, 0));
            }
            else
            {
              __asm { FMOV            V3.4S, #-1.0 }
            }
            v60.i32[3] = v28.i32[3];
            v92 = (uint32x4_t)vcgeq_f32(v24, vabsq_f32(vaddq_f32(_Q3, v23)));
            v92.i32[3] = v92.i32[2];
            if ((vminvq_u32(v92) & 0x80000000) != 0)
            {
              v216 = v60;
              v218 = v58;
              v220 = v52;
              goto LABEL_75;
            }
            v31 = v59;
            v28 = v60;
          }
        }
        else
        {
          v33 = v52;
          v33.i32[3] = v32.i32[3];
          v34 = vmulq_f32(v33, a7);
          v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0];
          if (v35 != 0.0
            && ((v67 = vmulq_f32(v25, v52),
                 v68 = vmulq_f32(v33, a6),
                 v69 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1)))).f32[0]/ v35, v69 >= 0.0)? (v70 = v69 <= 1.0): (v70 = 0), v70))
          {
            v71 = vmulq_n_f32(a7, v69);
            v71.i32[3] = v30.i32[3];
            v72 = vaddq_f32(v71, a6);
            v73 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v43, 8uLL), v44), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v42, (int8x16_t)v42, 0xCuLL), (int8x16_t)v42, 8uLL), v43);
            v74 = vmulq_f32(v73, v73);
            v75 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).u64[0];
            if (fabsf(*(float *)v75.i32) >= 1.1755e-38)
            {
              v93 = vsubq_f32(v29, v72);
              v94 = vsubq_f32(v27, v72);
              v95 = vsubq_f32(v25, v72);
              v96 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v94, (int8x16_t)v94, 0xCuLL), (int8x16_t)v94, 8uLL);
              v97 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v93, (int8x16_t)v93, 0xCuLL), (int8x16_t)v93, 8uLL);
              v98 = vmlaq_f32(vmulq_f32(v97, vnegq_f32(v94)), v96, v93);
              v99 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v95, (int8x16_t)v95, 0xCuLL), (int8x16_t)v95, 8uLL);
              v100 = vmlaq_f32(vmulq_f32(v99, vnegq_f32(v93)), v97, v95);
              v101 = vmlaq_f32(vmulq_f32(v96, vnegq_f32(v95)), v99, v94);
              v102 = (int32x4_t)vmulq_f32(v73, v98);
              v103 = (int32x4_t)vmulq_f32(v73, v100);
              v104 = (int32x4_t)vmulq_f32(v73, v101);
              v105 = vdupq_laneq_s32(v103, 2);
              v106 = (float32x4_t)vzip1q_s32(vzip1q_s32(v102, v104), v103);
              v107 = (float32x4_t)vtrn2q_s32(v102, v103);
              v107.i32[2] = v104.i32[1];
              _Q3 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v102, v104), v105), vaddq_f32(v106, v107)), (float32x4_t)vdupq_lane_s32(v75, 0));
            }
            else
            {
              __asm { FMOV            V3.4S, #-1.0 }
            }
            v72.i32[3] = v26.i32[3];
            v108 = (uint32x4_t)vcgeq_f32(v24, vabsq_f32(vaddq_f32(_Q3, v23)));
            v108.i32[3] = v108.i32[2];
            if ((vminvq_u32(v108) & 0x80000000) != 0)
            {
              v216 = v72;
              v218 = v69;
              v221 = v52;
              v214 = v35;
              goto LABEL_80;
            }
            v32 = v33;
            v30 = v71;
            v26 = v72;
          }
          else
          {
            v32 = v33;
          }
        }
        if (v22 >= v18)
        {
          v198 = v32;
          v199 = v31;
          v200 = v30;
          v207 = v28;
          v209 = v26;
          break;
        }
      }
    }
LABEL_4:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    v9 = v219;
    v12 = v217;
LABEL_5:
    if (++v13 == v9)
    {
      result = swift_bridgeObjectRelease();
      a5 = v196;
LABEL_77:
      a5[1] = 0u;
      a5[2] = 0u;
      *a5 = 0u;
      a5[3].i8[0] = 1;
      return result;
    }
  }
  if (v19 != 4
    || (swift_unknownObjectRetain_n(), swift_bridgeObjectRetain(), objc_msgSend(v15, sel_storageMode) == (id)2))
  {
LABEL_84:
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v109 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v110 = v15;
  if (v18 < 1)
    goto LABEL_4;
  v111 = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  v113.i64[0] = 0xBF000000BF000000;
  v113.i64[1] = 0xBF000000BF000000;
  v114.i64[0] = 0x3F0000003F000000;
  v114.i64[1] = 0x3F0000003F000000;
  v115 = v212;
  v116 = v210;
  v118.i32[3] = v204;
  v117.i32[3] = v205;
  v119 = v202;
  v120.i32[3] = v203;
  v121 = v201;
  v122 = v197;
  while (1)
  {
    v126 = &v109[4 * v111 + v17];
    v127 = a1 + *(unsigned int *)v126 * a2;
    v117.i64[0] = *(_QWORD *)v127;
    v117.i32[2] = *(_DWORD *)(v127 + 8);
    _VF = __OFADD__(v111, 3);
    v111 += 3;
    v128 = a1 + *((unsigned int *)v126 + 1) * a2;
    v118.i64[0] = *(_QWORD *)v128;
    v118.i32[2] = *(_DWORD *)(v128 + 8);
    v129 = a1 + *((unsigned int *)v126 + 2) * a2;
    v120.i64[0] = *(_QWORD *)v129;
    v120.i32[2] = *(_DWORD *)(v129 + 8);
    if (_VF)
      v111 = 0x7FFFFFFFFFFFFFFFLL;
    v130 = vsubq_f32(v118, v117);
    v131 = vsubq_f32(v120, v117);
    v132 = vnegq_f32(v130);
    v133 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL), v132), v131, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v130), (int8x16_t)v130, 0xCuLL));
    v134 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v133, (int32x4_t)v133), (int8x16_t)v133, 0xCuLL);
    v135 = vmulq_f32(v133, v133);
    v135.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), v135)).u64[0];
    v136 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 0);
    v136.i32[3] = 0;
    v137 = vrsqrteq_f32(v136);
    v138 = vmulq_f32(v137, vrsqrtsq_f32(v136, vmulq_f32(v137, v137)));
    v139 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v135.f32[0] != 0.0)), 0x1FuLL));
    v139.i32[3] = 0;
    v140 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v139), (int8x16_t)vmulq_f32(v134, vmulq_f32(v138, vrsqrtsq_f32(v136, vmulq_f32(v138, v138)))), (int8x16_t)v134);
    if ((a3 & 1) == 0)
      break;
    v141 = vmulq_f32(v140, a7);
    v142 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v141, 2), vaddq_f32(v141, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 1))).f32[0];
    v143 = -1.0;
    if (v142 < 0.0)
    {
      v144 = vmulq_f32(v117, v140);
      v145 = vmulq_f32(v140, a6);
      v143 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), vaddq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1)))).f32[0]/ v142;
    }
    if (v143 <= 1.0)
      v146 = v143;
    else
      v146 = -1.0;
    if (v146 >= 0.0)
    {
      v147 = vmulq_n_f32(a7, v146);
      v147.i32[3] = v121.i32[3];
      v148 = vaddq_f32(v147, a6);
      v149 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v131, (int8x16_t)v131, 0xCuLL), (int8x16_t)v131, 8uLL), v132), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v130, (int8x16_t)v130, 0xCuLL), (int8x16_t)v130, 8uLL), v131);
      v150 = vmulq_f32(v149, v149);
      v151 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 2), vaddq_f32(v150, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.f32, 1))).u64[0];
      if (fabsf(*(float *)v151.i32) >= 1.1755e-38)
      {
        v179 = vsubq_f32(v120, v148);
        v180 = vsubq_f32(v118, v148);
        v181 = vsubq_f32(v117, v148);
        v182 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v180, (int8x16_t)v180, 0xCuLL), (int8x16_t)v180, 8uLL);
        v183 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v179, (int8x16_t)v179, 0xCuLL), (int8x16_t)v179, 8uLL);
        v184 = vmlaq_f32(vmulq_f32(v183, vnegq_f32(v180)), v182, v179);
        v185 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v181, (int8x16_t)v181, 0xCuLL), (int8x16_t)v181, 8uLL);
        v186 = vmlaq_f32(vmulq_f32(v185, vnegq_f32(v179)), v183, v181);
        v187 = vmlaq_f32(vmulq_f32(v182, vnegq_f32(v181)), v185, v180);
        v188 = (int32x4_t)vmulq_f32(v149, v184);
        v189 = (int32x4_t)vmulq_f32(v149, v186);
        v190 = (int32x4_t)vmulq_f32(v149, v187);
        v191 = vdupq_laneq_s32(v189, 2);
        v192 = (float32x4_t)vzip1q_s32(vzip1q_s32(v188, v190), v189);
        v193 = (float32x4_t)vtrn2q_s32(v188, v189);
        v193.i32[2] = v190.i32[1];
        _Q4 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v188, v190), v191), vaddq_f32(v192, v193)), (float32x4_t)vdupq_lane_s32(v151, 0));
      }
      else
      {
        __asm { FMOV            V4.4S, #-1.0 }
      }
      v148.i32[3] = v116.i32[3];
      v194 = (uint32x4_t)vcgeq_f32(v114, vabsq_f32(vaddq_f32(_Q4, v113)));
      v194.i32[3] = v194.i32[2];
      if ((vminvq_u32(v194) & 0x80000000) != 0)
      {
        v216 = v148;
        v218 = v146;
        v220 = v140;
LABEL_75:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        goto LABEL_83;
      }
      v121 = v147;
      v116 = v148;
    }
LABEL_48:
    if (v111 >= v18)
    {
      v197 = v122;
      v201 = v121;
      v202 = v119;
      v210 = v116;
      v212 = v115;
      goto LABEL_4;
    }
  }
  v123 = v140;
  v123.i32[3] = v122.i32[3];
  v124 = vmulq_f32(v123, a7);
  v125 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 2), vaddq_f32(v124, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v124.f32, 1))).f32[0];
  if (v125 == 0.0
    || ((v153 = vmulq_f32(v117, v140),
         v154 = vmulq_f32(v123, a6),
         v155 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v153, 2), vaddq_f32(v153, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v153.f32, 1)))).f32[0]/ v125, v155 >= 0.0)? (v156 = v155 <= 1.0): (v156 = 0), !v156))
  {
LABEL_47:
    v122 = v123;
    goto LABEL_48;
  }
  v157 = vmulq_n_f32(a7, v155);
  v157.i32[3] = v119.i32[3];
  v158 = vaddq_f32(v157, a6);
  v159 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v131, (int8x16_t)v131, 0xCuLL), (int8x16_t)v131, 8uLL), v132), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v130, (int8x16_t)v130, 0xCuLL), (int8x16_t)v130, 8uLL), v131);
  v160 = vmulq_f32(v159, v159);
  v161 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v160, 2), vaddq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v160.f32, 1))).u64[0];
  v162 = _Q0;
  if (fabsf(*(float *)v161.i32) >= 1.1755e-38)
  {
    v163 = vsubq_f32(v120, v158);
    v164 = vsubq_f32(v118, v158);
    v165 = vsubq_f32(v117, v158);
    v166 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v164, (int8x16_t)v164, 0xCuLL), (int8x16_t)v164, 8uLL);
    v167 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v163, (int8x16_t)v163, 0xCuLL), (int8x16_t)v163, 8uLL);
    v168 = vmlaq_f32(vmulq_f32(v167, vnegq_f32(v164)), v166, v163);
    v169 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v165, (int8x16_t)v165, 0xCuLL), (int8x16_t)v165, 8uLL);
    v170 = vmlaq_f32(vmulq_f32(v169, vnegq_f32(v163)), v167, v165);
    v171 = vmlaq_f32(vmulq_f32(v166, vnegq_f32(v165)), v169, v164);
    v172 = (int32x4_t)vmulq_f32(v159, v168);
    v173 = (int32x4_t)vmulq_f32(v159, v170);
    v174 = (int32x4_t)vmulq_f32(v159, v171);
    v175 = vdupq_laneq_s32(v173, 2);
    v176 = (float32x4_t)vzip1q_s32(vzip1q_s32(v172, v174), v173);
    v177 = (float32x4_t)vtrn2q_s32(v172, v173);
    v177.i32[2] = v174.i32[1];
    v162 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v172, v174), v175), vaddq_f32(v176, v177)), (float32x4_t)vdupq_lane_s32(v161, 0));
  }
  v158.i32[3] = v115.i32[3];
  v178 = (uint32x4_t)vcgeq_f32(v114, vabsq_f32(vaddq_f32(v162, v113)));
  v178.i32[3] = v178.i32[2];
  if ((vminvq_u32(v178) & 0x80000000) == 0)
  {
    v119 = v157;
    v115 = v158;
    goto LABEL_47;
  }
  v216 = v158;
  v218 = v155;
  v221 = v140;
  v214 = v125;
LABEL_80:
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease_n();
  v195 = -1.0;
  if (v214 > 0.0)
    v195 = 1.0;
  v220 = vmulq_n_f32(v221, -v195);
LABEL_83:
  result = swift_bridgeObjectRelease();
  v196->i64[0] = LODWORD(v218);
  v196->i64[1] = 0;
  v196[1] = v216;
  v196[2] = v220;
  v196[3].i8[0] = 0;
  return result;
}

uint64_t sub_1B1E226F8()
{
  uint64_t v0;

  sub_1B1A0DADC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MeshBinaryData()
{
  return objc_opt_self();
}

uint64_t destroy for MeshPart()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MeshPart(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshPart(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for MeshPart(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshPart(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshPart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshPart()
{
  return &type metadata for MeshPart;
}

_QWORD *initializeBufferWithCopyOfBuffer for VertexLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for VertexLayout()
{
  return swift_release();
}

_QWORD *assignWithCopy for VertexLayout(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for VertexLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for VertexLayout()
{
  return &type metadata for VertexLayout;
}

ValueMetadata *type metadata accessor for VertexLayoutDescriptor.Attribute()
{
  return &type metadata for VertexLayoutDescriptor.Attribute;
}

ValueMetadata *type metadata accessor for VertexLayoutDescriptor.Buffer()
{
  return &type metadata for VertexLayoutDescriptor.Buffer;
}

uint64_t initializeWithCopy for MeshBuffer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for MeshBuffer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffer()
{
  return &type metadata for MeshBuffer;
}

unint64_t sub_1B1E22C20()
{
  unint64_t result;

  result = qword_1EEF5F138;
  if (!qword_1EEF5F138)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296EB0, &type metadata for VertexLayout);
    atomic_store(result, (unint64_t *)&qword_1EEF5F138);
  }
  return result;
}

uint64_t sub_1B1E22C64(uint64_t a1, uint64_t a2)
{
  return sub_1B1A1F838(&qword_1EEF5F140, a2, (uint64_t (*)(uint64_t))type metadata accessor for VertexLayoutDescriptor, (uint64_t)&unk_1B2296F28);
}

unint64_t sub_1B1E22C94()
{
  unint64_t result;

  result = qword_1EEF5F148;
  if (!qword_1EEF5F148)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297058, &type metadata for MeshBuffer);
    atomic_store(result, (unint64_t *)&qword_1EEF5F148);
  }
  return result;
}

void sub_1B1E22CD8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;

  v6 = *(void **)(a4 + 16);
  if (a1)
    v7 = a2 - a1;
  else
    v7 = 0;
  *a3 = objc_msgSend(v6, sel_newBufferWithBytes_length_options_, a1, v7, 0);
  swift_unknownObjectRelease();
  v8 = *a3;
  if (v8)
  {
    swift_unknownObjectRetain();
    sub_1B222805C();
    v9 = (void *)sub_1B2228728();
    v10 = objc_msgSend(v9, sel_stringByDeletingPathExtension);

    sub_1B222874C();
    swift_bridgeObjectRelease();

    v11 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setLabel_, v11);
    swift_unknownObjectRelease();

  }
}

uint64_t sub_1B1E22DD4(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  __int16 v7;
  __int16 v8;
  int v9;
  __int16 v10;
  __int16 v11;
  int v12;
  __int16 v13;
  __int16 v14;
  int v15;
  __int16 v16;
  __int16 v17;
  int v18;
  __int16 v19;
  __int16 v20;
  int v21;
  __int16 v22;
  __int16 v23;
  int v24;
  __int16 v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  id v58;
  _WORD *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  float v63;
  float32x4_t v64;
  __int16 v65;
  char *v66;
  id v67;
  char *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  float *v79;
  char *v80;
  id v81;
  float *v82;
  unint64_t v83;
  unint64_t v84;
  float v85;
  float *v86;
  unint64_t v87;
  float32x2_t *v88;
  float32x2_t v89;
  char isUniquelyReferenced_nonNull_native;
  float32x2_t *v91;
  __int128 v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  float *v96;
  __int16 v97;
  int v98;
  uint64_t v99;
  __int16 v100;
  __int16 v101;
  uint64_t v102;
  __int16 v104;
  float v105;
  float32x4_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  __int16 v111;
  __int16 v112;
  int v113;
  __int16 v114;
  __int16 v115;
  int v116;
  __int16 v117;
  __int16 v118;
  int v119;
  __int16 v120;
  __int16 v121;
  int v122;
  __int16 v123;
  __int16 v124;
  int v125;
  __int16 v126;
  __int16 v127;
  int v128;
  __int16 v129;
  __int16 v130;
  int v131;
  __int16 v132;
  __int16 v133;
  float32x4x3_t v134;
  float32x4x3_t v135;

  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return result;
  v4 = result;
  v101 = *(_WORD *)(v3 + 102);
  v107 = *(_DWORD *)(v3 + 104);
  v104 = *(_WORD *)(v3 + 108);
  v5 = *(_WORD *)(v3 + 110);
  v6 = *(_DWORD *)(v3 + 112);
  v7 = *(_WORD *)(v3 + 116);
  v8 = *(_WORD *)(v3 + 118);
  v9 = *(_DWORD *)(v3 + 120);
  v10 = *(_WORD *)(v3 + 124);
  v11 = *(_WORD *)(v3 + 126);
  v12 = *(_DWORD *)(v3 + 128);
  v13 = *(_WORD *)(v3 + 132);
  v14 = *(_WORD *)(v3 + 134);
  v15 = *(_DWORD *)(v3 + 136);
  v16 = *(_WORD *)(v3 + 140);
  v17 = *(_WORD *)(v3 + 142);
  v18 = *(_DWORD *)(v3 + 144);
  v19 = *(_WORD *)(v3 + 148);
  v20 = *(_WORD *)(v3 + 150);
  v21 = *(_DWORD *)(v3 + 152);
  v22 = *(_WORD *)(v3 + 156);
  v23 = *(_WORD *)(v3 + 158);
  v24 = *(_DWORD *)(v3 + 160);
  v25 = *(_WORD *)(v3 + 164);
  v26 = *(_WORD *)(v3 + 166);
  v27 = *(_DWORD *)(v3 + 168);
  v28 = *(_WORD *)(v3 + 172);
  v100 = *(_WORD *)(v3 + 174);
  v97 = *(_WORD *)(v3 + 100);
  v98 = *(_DWORD *)(v3 + 96);
  LODWORD(v108) = v98;
  WORD2(v108) = v97;
  HIWORD(v108) = v101;
  LODWORD(v109) = v107;
  WORD2(v109) = v104;
  HIWORD(v109) = v5;
  v110 = v6;
  v111 = v7;
  v112 = v8;
  v113 = v9;
  v114 = v10;
  v115 = v11;
  v116 = v12;
  v117 = v13;
  v118 = v14;
  v119 = v15;
  v120 = v16;
  v121 = v17;
  v122 = v18;
  v123 = v19;
  v124 = v20;
  v125 = v21;
  v126 = v22;
  v127 = v23;
  v128 = v24;
  v129 = v25;
  v130 = v26;
  v131 = v27;
  v132 = v28;
  v99 = v4;
  v29 = &v108 + v4;
  v30 = *((unsigned __int16 *)v29 + 2);
  if ((_DWORD)v30 == 26)
  {
    HIWORD(v108) = v101;
    HIWORD(v109) = v5;
    v112 = v8;
    v115 = v11;
    v118 = v14;
    v121 = v17;
    v124 = v20;
    v127 = v23;
    v130 = v26;
    v133 = v100;
    v42 = v102;
    v48 = *(_QWORD *)(v102 + 32) + 40 * *((unsigned __int16 *)v29 + 3);
    v49 = *(void **)(v48 + 32);
    v50 = *(_QWORD *)(v48 + 40);
    swift_retain();
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      swift_unknownObjectRelease();
      v51 = *(_QWORD *)(v102 + 48);
      if (!v51)
        goto LABEL_35;
      v52 = 0;
    }
    else
    {
      v57 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v58 = v49;
      swift_unknownObjectRelease();
      v51 = *(_QWORD *)(v102 + 48);
      if (!v51)
        goto LABEL_35;
      v52 = &v57[v50];
    }
    v59 = v52 + 4;
    do
    {
      v60 = (unsigned __int16)*(v59 - 1);
      v61 = (unsigned __int16)*v59;
      *(float *)&v62 = sub_1B189E3A8((unsigned __int16)*(v59 - 2));
      v106.i64[0] = v62;
      v105 = sub_1B189E3A8(v60);
      v63 = sub_1B189E3A8(v61);
      v64 = v106;
      v64.f32[1] = v105;
      v64.f32[2] = v63;
      v106 = vmulq_n_f32(v64, a2);
      LOWORD(v60) = sub_1B189E3F8(v106.f32[0]);
      LOWORD(v61) = sub_1B189E3F8(v106.f32[1]);
      v65 = sub_1B189E3F8(v106.f32[2]);
      *(v59 - 2) = v60;
      *(v59 - 1) = v61;
      *v59 = v65;
      v59 += 4;
      --v51;
    }
    while (v51);
    goto LABEL_35;
  }
  if ((_DWORD)v30 != 30)
  {
    v53 = qword_1ED4BF430;
    swift_retain();
    if (v53 != -1)
      swift_once();
    v108 = 0;
    v109 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v108 = 0xD00000000000001ELL;
    v109 = 0x80000001B233DFB0;
    sub_1B1F9C4B8(v30);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v54 = v108;
    v55 = v109;
    v56 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v108 = 0;
    swift_retain();
    sub_1B1F1AD70(v56, &v108, v54, v55);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v42 = v102;
    goto LABEL_35;
  }
  LODWORD(v108) = v98;
  WORD2(v108) = v97;
  HIWORD(v108) = v101;
  LODWORD(v109) = v107;
  WORD2(v109) = v104;
  HIWORD(v109) = v5;
  v110 = v6;
  v111 = v7;
  v112 = v8;
  v113 = v9;
  v114 = v10;
  v115 = v11;
  v116 = v12;
  v117 = v13;
  v118 = v14;
  v119 = v15;
  v120 = v16;
  v121 = v17;
  v122 = v18;
  v123 = v19;
  v124 = v20;
  v125 = v21;
  v126 = v22;
  v127 = v23;
  v128 = v24;
  v129 = v25;
  v130 = v26;
  v131 = v27;
  v132 = v28;
  v133 = v100;
  v31 = v4;
  v32 = *((unsigned __int16 *)&v108 + 4 * v4 + 3);
  v33 = *(_DWORD *)(v3 + 24);
  LODWORD(v108) = *(_DWORD *)(v3 + 16);
  v34 = *(_DWORD *)(v3 + 32);
  LODWORD(v109) = v33;
  v35 = *(_DWORD *)(v3 + 40);
  v110 = v34;
  v36 = *(_DWORD *)(v3 + 48);
  v113 = v35;
  v37 = *(_DWORD *)(v3 + 56);
  v116 = v36;
  v38 = *(_DWORD *)(v3 + 64);
  v119 = v37;
  v39 = *(_DWORD *)(v3 + 72);
  v122 = v38;
  v40 = *(_DWORD *)(v3 + 80);
  v125 = v39;
  v41 = *(_DWORD *)(v3 + 88);
  v128 = v40;
  v131 = v41;
  v42 = v102;
  v43 = *(_QWORD *)(v102 + 32) + 40 * v32;
  v44 = *((unsigned int *)&v108 + 2 * v32);
  v46 = *(void **)(v43 + 32);
  v45 = *(_QWORD *)(v43 + 40);
  swift_retain();
  v47 = objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  if ((_DWORD)v44)
  {
    if (v47 == (id)2)
    {
      swift_unknownObjectRelease();
      v68 = 0;
    }
    else
    {
      v66 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v67 = v46;
      swift_unknownObjectRelease();
      v68 = &v66[v45];
      v31 = v99;
    }
    v69 = *(_DWORD *)(v3 + 104);
    v70 = *(_DWORD *)(v3 + 112);
    v71 = *(_DWORD *)(v3 + 120);
    v72 = *(_DWORD *)(v3 + 128);
    v73 = *(_DWORD *)(v3 + 136);
    v74 = *(_DWORD *)(v3 + 144);
    v75 = *(_DWORD *)(v3 + 152);
    v76 = *(_DWORD *)(v3 + 160);
    v77 = *(_DWORD *)(v3 + 168);
    LODWORD(v108) = *(_DWORD *)(v3 + 96);
    LODWORD(v109) = v69;
    v110 = v70;
    v113 = v71;
    v116 = v72;
    v119 = v73;
    v122 = v74;
    v125 = v75;
    v128 = v76;
    v131 = v77;
    v78 = *(_QWORD *)(v102 + 48);
    if (v78)
    {
      v79 = (float *)&v68[*((unsigned int *)&v108 + 2 * v31) + 8];
      do
      {
        *((float32x2_t *)v79 - 1) = vmul_n_f32(*(float32x2_t *)(v79 - 2), a2);
        *v79 = *v79 * a2;
        v79 = (float *)((char *)v79 + v44);
        --v78;
      }
      while (v78);
    }
    goto LABEL_35;
  }
  if (v47 == (id)2)
  {
    swift_unknownObjectRelease();
    v82 = 0;
  }
  else
  {
    v80 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v81 = v46;
    swift_unknownObjectRelease();
    v82 = (float *)&v80[v45];
  }
  v83 = *(_QWORD *)(v102 + 48);
  if (v83)
  {
    if (v83 >= 0xC)
    {
      v84 = 0;
      v93 = !is_mul_ok(v83 - 1, 0xCuLL);
      v94 = 3 * (v83 - 1);
      if (&v82[v94 + 2] >= v82 + 2 && !v93 && &v82[v94 + 1] >= v82 + 1 && !v93 && &v82[v94] >= v82)
      {
        v85 = a2;
        if (!v93)
        {
          v84 = v83 & 0xFFFFFFFFFFFFFFFCLL;
          v95 = v83 & 0xFFFFFFFFFFFFFFFCLL;
          v96 = v82;
          do
          {
            v134 = vld3q_f32(v96);
            v135.val[0] = vmulq_n_f32(v134.val[0], a2);
            v135.val[1] = vmulq_n_f32(v134.val[1], a2);
            v135.val[2] = vmulq_n_f32(v134.val[2], a2);
            vst3q_f32(v96, v135);
            v96 += 12;
            v95 -= 4;
          }
          while (v95);
          v85 = a2;
          if (v83 == v84)
            goto LABEL_35;
        }
        goto LABEL_33;
      }
    }
    else
    {
      v84 = 0;
    }
    v85 = a2;
LABEL_33:
    v86 = &v82[3 * v84 + 2];
    v87 = v83 - v84;
    do
    {
      *((float32x2_t *)v86 - 1) = vmul_n_f32(*(float32x2_t *)(v86 - 2), v85);
      *v86 = *v86 * v85;
      v86 += 3;
      --v87;
    }
    while (v87);
  }
LABEL_35:
  v88 = *(float32x2_t **)(v42 + 40);
  v89 = v88[2];
  if (v89)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v42 + 40) = v88;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v88 = (float32x2_t *)sub_1B1FFEF74(v88);
    v91 = v88 + 18;
    do
    {
      *(float32x2_t *)&v92 = vmul_n_f32(*v91, a2);
      *((float *)&v92 + 2) = v91[1].f32[0] * a2;
      HIDWORD(v92) = 0;
      *(_OWORD *)v91->f32 = v92;
      v91 += 16;
      --*(_QWORD *)&v89;
    }
    while (v89);
    *(_QWORD *)(v42 + 40) = v88;
  }
  return swift_release();
}

uint64_t sub_1B1E23588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
    return 0;
  }
  v2 = *(unsigned __int8 *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)) & ~(_DWORD)v2;
  return v2;
}

BOOL sub_1B1E235E8(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;

  if (a1->n128_u64[0] != a2->n128_u64[0]
    || a1->n128_u64[1] != a2->n128_u64[1]
    || a1[1].n128_u64[0] != a2[1].n128_u64[0]
    || a1[1].n128_u64[1] != a2[1].n128_u64[1])
  {
    return 0;
  }
  v4 = a1[2].n128_u64[0];
  v5 = a2[2].n128_u64[0];
  if (v4)
  {
    if (!v5 || v4 != v5 || a1[2].n128_u64[1] != a2[2].n128_u64[1] || a1[3].n128_u64[0] != a2[3].n128_u64[0])
      return 0;
    if ((a1[4].n128_u8[0] & 1) != 0)
    {
      if ((a2[4].n128_u8[0] & 1) == 0)
        return 0;
    }
    else if ((a2[4].n128_u8[0] & 1) != 0 || a1[3].n128_u64[1] != a2[3].n128_u64[1])
    {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (a1[4].n128_u64[1] == a2[4].n128_u64[1]
    && a1[5].n128_u64[0] == a2[5].n128_u64[0]
    && (sub_1B1CC9568(a1[5].n128_i64[1], a2[5].n128_i64[1]) & 1) != 0)
  {
    return sub_1B1BF3DFC(a1[6], a1[7], a2[6], a2[7]);
  }
  return 0;
}

uint64_t sub_1B1E236F8()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B1E23740(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6564697274735FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746152706574735FLL && a2 == 0xE900000000000065 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E7546706574735FLL && a2 == 0xED00006E6F697463)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B1E238C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74657366666F5FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616D726F665FLL && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x497265666675625FLL && a2 == 0xEC0000007865646ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B1E23A30()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B1E23A78()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

uint64_t sub_1B1E23AC0(_OWORD *a1)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char isUniquelyReferenced_nonNull_native;
  void *v17;

  if (qword_1ED4B8500 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4B84F0, sel_lock);
  if (qword_1ED4B8518 != -1)
    swift_once();
  if (*((_QWORD *)off_1ED4B8508 + 2) && (v2 = sub_1B1DC4AE4((uint64_t)a1), (v3 & 1) != 0))
  {
    v4 = *(_QWORD *)(*((_QWORD *)off_1ED4B8508 + 7) + 8 * v2);
    v5 = (void *)qword_1ED4B84F0;
    swift_retain();
  }
  else
  {
    v6 = (_OWORD *)swift_allocObject();
    v7 = a1[2];
    v8 = a1[3];
    v9 = a1[4];
    v6[1] = a1[1];
    v6[2] = v7;
    v6[3] = v8;
    v6[4] = v9;
    v10 = a1[6];
    v11 = a1[7];
    v12 = a1[8];
    v13 = a1[9];
    v14 = a1[10];
    v6[5] = a1[5];
    v6[6] = v10;
    v6[7] = v11;
    v6[8] = v12;
    v6[9] = v13;
    v6[10] = v14;
    v4 = *((_QWORD *)off_1ED4B8508 + 2);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = off_1ED4B8508;
    off_1ED4B8508 = (_UNKNOWN *)0x8000000000000000;
    sub_1B1B88400(v4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
    off_1ED4B8508 = v17;
    swift_release();
    swift_bridgeObjectRelease();
    v5 = (void *)qword_1ED4B84F0;
  }
  objc_msgSend(v5, sel_unlock);
  return v4;
}

uint64_t sub_1B1E23C48(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)sub_1B2228728();
  v3 = objc_msgSend(v2, sel_stringByDeletingPathExtension);

  sub_1B222874C();
  v4 = (void *)sub_1B2228728();
  v5 = (void *)sub_1B2228728();
  v6 = objc_msgSend(v4, sel_stringByAppendingPathExtension_, v5);

  if (v6)
  {
    a1 = sub_1B222874C();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1B1E23D3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD v59[3];
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  sub_1B1E24FB4();
  MEMORY[0x1E0C80A78](v10, v11);
  v61 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_1B2229610();
  v59[2] = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v13);
  v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B2228110();
  MEMORY[0x1E0C80A78](v16, v17);
  v66 = (char *)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v68 = (char *)v59 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v59 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v69 = (char *)v59 - v29;
  v30 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v30)
  {
    v59[1] = v15;
    v67 = v28;
    v72 = 0;
    v65 = a3;
    v64 = v30;
    if (a3)
    {
      ObjectType = swift_getObjectType();
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      v33 = a3;
      v34 = a4;
      v32(a1, a2, ObjectType, a4);

    }
    else
    {
      v34 = a4;
      v35 = qword_1ED4BF430;
      swift_retain();
      if (v35 != -1)
        swift_once();
      v70 = 0;
      v71 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v37 = v70;
      v36 = v71;
      v38 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v70 = 0;
      swift_retain();
      sub_1B1F1AD70(v38, &v70, v37, v36);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRetain();
      sub_1B2228050();
      a3 = v65;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v39 = sub_1B1E23C48(a1);
    v41 = v40;
    swift_bridgeObjectRelease();
    if (a3)
    {
      v42 = swift_getObjectType();
      v43 = a3;
      v44 = v39;
      v45 = v34;
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8);
      v47 = v43;
      swift_bridgeObjectRetain();
      v46(v44, v41, v42, v34);
      sub_1B222802C();
      v62 = v48;
      v49 = v67;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v25, v16);
      swift_bridgeObjectRelease();
      v50 = swift_getObjectType();
      v51 = v47;
      swift_bridgeObjectRetain();
      v52 = v68;
      v46(v44, v41, v50, v45);

    }
    else
    {
      v53 = qword_1ED4BF430;
      swift_bridgeObjectRetain();
      v52 = v68;
      if (v53 != -1)
        swift_once();
      v70 = 0;
      v71 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v54 = v70;
      v55 = v71;
      v56 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v70 = 0;
      swift_retain();
      sub_1B1F1AD70(v56, &v70, v54, v55);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRetain();
      sub_1B2228050();
      v62 = v41;
      v49 = v67;
    }
    v63 = v41;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v66, v52, v16);
    sub_1B2228128();
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1B1E24B90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v38 = a2;
  sub_1B1E24FB4();
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1B2229610();
  v6 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v7);
  v39 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF5F158, (uint64_t (*)(void))sub_1B1E25008, (uint64_t)&type metadata for MeshBuffer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v35 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E25008();
  v15 = v42;
  sub_1B222A150();
  if (!v15)
  {
    v36 = v11;
    v37 = a1;
    v42 = v14;
    v16 = v38;
    sub_1B19FA070(a1, a1[3]);
    v17 = sub_1B222A144();
    v18 = v41;
    sub_1B2229604();
    v19 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v40);
    v20 = (uint64_t)v39;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v39, v18, v19);
    v21 = v20;
    if (*(_QWORD *)(v17 + 16))
    {
      v22 = sub_1B1DC3F30(v20);
      v23 = v16;
      if ((v24 & 1) != 0)
      {
        sub_1B1A02864(*(_QWORD *)(v17 + 56) + 32 * v22, (uint64_t)&v43);
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
      }
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
      v23 = v16;
    }
    v25 = v10;
    v26 = v42;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v19);
    if (*((_QWORD *)&v44 + 1))
    {
      sub_1B1E25090();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v27 = v45;
        LOBYTE(v43) = 0;
        swift_unknownObjectRetain();
        v28 = sub_1B22297FC();
        LOBYTE(v43) = 1;
        v29 = sub_1B22297FC();
        sub_1B1A02758(0, &qword_1ED4BA580, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        LOBYTE(v45) = 2;
        sub_1B1CDB03C((unint64_t *)&qword_1ED4BA590, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEE9A0]);
        sub_1B2229814();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v25);
        v32 = v43;
        v33 = BYTE8(v43);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v37);
        result = swift_unknownObjectRelease();
        *(_QWORD *)v23 = v27;
        *(_QWORD *)(v23 + 8) = v28;
        *(_QWORD *)(v23 + 16) = v29;
        *(_QWORD *)(v23 + 24) = v32;
        *(_BYTE *)(v23 + 32) = v33;
        return result;
      }
    }
    else
    {
      sub_1B1A0DD70((uint64_t)&v43);
    }
    v30 = v36;
    sub_1B1E2504C();
    swift_allocError();
    *v31 = 0xD000000000000018;
    v31[1] = 0x80000001B233DED0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v10);
    a1 = v37;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

void sub_1B1E24FB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA860)
  {
    sub_1B2229610();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA860);
  }
}

unint64_t sub_1B1E25008()
{
  unint64_t result;

  result = qword_1EEF5F160;
  if (!qword_1EEF5F160)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229786C, &type metadata for MeshBuffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F160);
  }
  return result;
}

unint64_t sub_1B1E2504C()
{
  unint64_t result;

  result = qword_1EEF5F170;
  if (!qword_1EEF5F170)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229782C, &type metadata for MeshBuffer.Error);
    atomic_store(result, (unint64_t *)&qword_1EEF5F170);
  }
  return result;
}

unint64_t sub_1B1E25090()
{
  unint64_t result;

  result = qword_1ED4B7A00;
  if (!qword_1ED4B7A00)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B7A00);
  }
  return result;
}

uint64_t sub_1B1E250E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1ED4BA580, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1E25140@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  char v59;

  sub_1B19F8E54(0, &qword_1EEF5F190, (uint64_t (*)(void))sub_1B1E25618, (uint64_t)&type metadata for MeshPart.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v53 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v40 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E25618();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    v52 = a2;
    v54.i8[0] = 1;
    v10 = sub_1B22297A8();
    if ((v11 & 1) != 0)
      v12 = 0;
    else
      v12 = v10;
    v54.i8[0] = 2;
    v13 = sub_1B22297A8();
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = v13;
    v54.i8[0] = 3;
    v50 = sub_1B22297FC();
    v51 = v15;
    v59 = 4;
    sub_1B1E2565C();
    sub_1B22297B4();
    v49 = v12;
    v17 = v54.i64[0];
    v47 = v55;
    v48 = v54.i64[1];
    v46 = v56;
    v18 = v57;
    v54.i8[0] = 5;
    swift_unknownObjectRetain();
    v19 = sub_1B22297A8();
    v58 = v18;
    if ((v20 & 1) != 0)
      v21 = 0;
    else
      v21 = v19;
    v54.i8[0] = 6;
    v22 = sub_1B22297A8();
    if ((v23 & 1) != 0)
      v24 = 0;
    else
      v24 = v22;
    v45 = v24;
    sub_1B1A02758(0, &qword_1EEF5F1A8, (uint64_t)&type metadata for MeshBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v59 = 9;
    sub_1B1E256A0();
    sub_1B22297B4();
    v44 = v21;
    if (v54.i64[0])
      v25 = v54.i64[0];
    else
      v25 = MEMORY[0x1E0DEE9D8];
    v54.i8[0] = 0;
    swift_bridgeObjectRetain();
    v26 = sub_1B2229808();
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v28 = v27;
    v59 = 7;
    v29 = sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
    v43.i64[0] = v28;
    v42.i64[0] = v29;
    sub_1B2229814();
    v41 = v26;
    v40 = v54;
    v59 = 8;
    sub_1B2229814();
    v30 = v54;
    v31 = v40;
    v31.i32[3] = 1.0;
    v30.i32[3] = 1.0;
    v32.i64[0] = 0x3F0000003F000000;
    v32.i64[1] = 0x3F0000003F000000;
    v42 = vmulq_f32(vsubq_f32(v30, v31), v32);
    v43 = vmulq_f32(vaddq_f32(v31, v30), v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v53);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    result = swift_unknownObjectRelease();
    v33 = (float32x4_t *)v52;
    v34 = v49;
    *v52 = v41;
    v33->i64[1] = v34;
    v35 = v50;
    v33[1].i64[0] = v51;
    v33[1].i64[1] = v35;
    v36 = v48;
    v33[2].i64[0] = v17;
    v33[2].i64[1] = v36;
    v37 = v46;
    v33[3].i64[0] = v47;
    v33[3].i64[1] = v37;
    v33[4].i8[0] = v58;
    v38 = v45;
    v33[4].i64[1] = v44;
    v33[5].i64[0] = v38;
    v33[5].i64[1] = v25;
    v39 = v42;
    v33[6] = v43;
    v33[7] = v39;
  }
  return result;
}

unint64_t sub_1B1E25618()
{
  unint64_t result;

  result = qword_1EEF5F198;
  if (!qword_1EEF5F198)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22977DC, &type metadata for MeshPart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F198);
  }
  return result;
}

unint64_t sub_1B1E2565C()
{
  unint64_t result;

  result = qword_1EEF5F1A0;
  if (!qword_1EEF5F1A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22970E8, &type metadata for MeshBuffer);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1A0);
  }
  return result;
}

unint64_t sub_1B1E256A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5F1B0;
  if (!qword_1EEF5F1B0)
  {
    sub_1B1A02758(255, &qword_1EEF5F1A8, (uint64_t)&type metadata for MeshBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1E2565C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1B0);
  }
  return result;
}

unint64_t sub_1B1E25718()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5F1D0;
  if (!qword_1EEF5F1D0)
  {
    sub_1B1A02758(255, &qword_1EEF5F1A8, (uint64_t)&type metadata for MeshBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1E25790();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1D0);
  }
  return result;
}

unint64_t sub_1B1E25790()
{
  unint64_t result;

  result = qword_1EEF5F1D8;
  if (!qword_1EEF5F1D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22970C0, &type metadata for MeshBuffer);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1D8);
  }
  return result;
}

unint64_t sub_1B1E257D4(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v19 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v18 - v10;
  sub_1B19FA070(a1, a1[3]);
  a3();
  sub_1B222A150();
  if (v4)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v12 = v8;
  v22 = 0;
  v13 = v19;
  v14 = sub_1B2229868();
  v21 = 1;
  v15 = sub_1B222985C();
  v20 = 2;
  v16 = sub_1B222985C();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v13);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return ((unint64_t)v15 << 32) | (v16 << 48) | v14;
}

uint64_t sub_1B1E2596C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t inited;
  char v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  int v30;
  int v31;

  sub_1B19F8E54(0, &qword_1EEF5F1E0, (uint64_t (*)(void))sub_1B1E25D90, (uint64_t)&type metadata for VertexLayout.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v24 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v21 - v6;
  v8 = sub_1B19FA070(a1, a1[3]);
  sub_1B1E25D90();
  v9 = (uint64_t)v8;
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    v25 = v4;
    type metadata accessor for VertexLayoutDescriptor();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = 0x1000100000000;
    *(_QWORD *)(inited + 24) = 0x1000100000000;
    *(_QWORD *)(inited + 32) = 0x1000100000000;
    *(_QWORD *)(inited + 40) = 0x1000100000000;
    *(_QWORD *)(inited + 48) = 0x1000100000000;
    *(_QWORD *)(inited + 56) = 0x1000100000000;
    *(_QWORD *)(inited + 64) = 0x1000100000000;
    *(_QWORD *)(inited + 72) = 0x1000100000000;
    *(_QWORD *)(inited + 80) = 0x1000100000000;
    *(_OWORD *)(inited + 96) = 0u;
    *(_QWORD *)(inited + 88) = 0x1000100000000;
    *(_OWORD *)(inited + 112) = 0u;
    *(_OWORD *)(inited + 128) = 0u;
    *(_OWORD *)(inited + 144) = 0u;
    *(_OWORD *)(inited + 160) = 0u;
    LOBYTE(v26[0]) = 0;
    sub_1B2229748();
    v23 = inited + 96;
    sub_1B19FA070(v28, v29);
    v11 = sub_1B2229ACC();
    v21 = a1;
    v22 = v7;
    if ((v11 & 1) == 0)
    {
      do
      {
        sub_1B19FC264((uint64_t)v28, v29);
        v12 = sub_1B2229A90();
        sub_1B19FC264((uint64_t)v28, v29);
        sub_1B1E25DD4();
        sub_1B2229AA8();
        v13 = HIDWORD(v26[0]);
        v14 = (_DWORD *)(inited + 16 + 8 * v12);
        *v14 = v26[0];
        v14[1] = v13;
        sub_1B19FA070(v28, v29);
      }
      while ((sub_1B2229ACC() & 1) == 0);
    }
    LOBYTE(v30) = 1;
    v15 = v24;
    v16 = v22;
    sub_1B2229748();
    while (1)
    {
      sub_1B19FA070(v26, v27);
      if ((sub_1B2229ACC() & 1) != 0)
        break;
      sub_1B19FC264((uint64_t)v26, v27);
      v17 = sub_1B2229A90();
      sub_1B19FC264((uint64_t)v26, v27);
      sub_1B1E25E18();
      sub_1B2229AA8();
      v18 = v31;
      v19 = (_DWORD *)(v23 + 8 * v17);
      *v19 = v30;
      v19[1] = v18;
    }
    v9 = sub_1B1E23AC0((_OWORD *)inited);
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v15);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v21);
  }
  return v9;
}

unint64_t sub_1B1E25D90()
{
  unint64_t result;

  result = qword_1EEF5F1E8;
  if (!qword_1EEF5F1E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229778C, &type metadata for VertexLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1E8);
  }
  return result;
}

unint64_t sub_1B1E25DD4()
{
  unint64_t result;

  result = qword_1EEF5F1F0;
  if (!qword_1EEF5F1F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296D08, &type metadata for VertexLayoutDescriptor.Buffer);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1F0);
  }
  return result;
}

unint64_t sub_1B1E25E18()
{
  unint64_t result;

  result = qword_1EEF5F1F8;
  if (!qword_1EEF5F1F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296DA8, &type metadata for VertexLayoutDescriptor.Attribute);
    atomic_store(result, (unint64_t *)&qword_1EEF5F1F8);
  }
  return result;
}

unint64_t sub_1B1E25E5C()
{
  unint64_t result;

  result = qword_1EEF5F208;
  if (!qword_1EEF5F208)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296CE0, &type metadata for VertexLayoutDescriptor.Buffer);
    atomic_store(result, (unint64_t *)&qword_1EEF5F208);
  }
  return result;
}

unint64_t sub_1B1E25EA0()
{
  unint64_t result;

  result = qword_1EEF5F210;
  if (!qword_1EEF5F210)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296D80, &type metadata for VertexLayoutDescriptor.Attribute);
    atomic_store(result, (unint64_t *)&qword_1EEF5F210);
  }
  return result;
}

unint64_t sub_1B1E25EE4()
{
  unint64_t result;

  result = qword_1EEF5F220;
  if (!qword_1EEF5F220)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229773C, &type metadata for Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F220);
  }
  return result;
}

unint64_t sub_1B1E25F28()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5F230;
  if (!qword_1EEF5F230)
  {
    sub_1B1A02758(255, &qword_1ED4B7778, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1B1E25FA0();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5F230);
  }
  return result;
}

unint64_t sub_1B1E25FA0()
{
  unint64_t result;

  result = qword_1EEF5F238;
  if (!qword_1EEF5F238)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296F00, &type metadata for VertexLayout);
    atomic_store(result, (unint64_t *)&qword_1EEF5F238);
  }
  return result;
}

unint64_t sub_1B1E25FE4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5F248;
  if (!qword_1EEF5F248)
  {
    sub_1B1A02758(255, &qword_1EEF5F240, (uint64_t)&type metadata for MeshPart, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1E2605C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5F248);
  }
  return result;
}

unint64_t sub_1B1E2605C()
{
  unint64_t result;

  result = qword_1EEF5F250;
  if (!qword_1EEF5F250)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296FE0, &type metadata for MeshPart);
    atomic_store(result, (unint64_t *)&qword_1EEF5F250);
  }
  return result;
}

void sub_1B1E260A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1EEF5F258)
  {
    v2 = type metadata accessor for Mesh();
    v4 = sub_1B1A1F838(&qword_1EEF5F260, v3, (uint64_t (*)(uint64_t))type metadata accessor for Mesh, (uint64_t)&unk_1B2296E48);
    v6 = sub_1B1A1F838(&qword_1EEF5F268, v5, (uint64_t (*)(uint64_t))type metadata accessor for Mesh, (uint64_t)&unk_1B2296E20);
    v7 = type metadata accessor for VersionedContainer(a1, v2, v4, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1EEF5F258);
  }
}

void sub_1B1E26140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1B1E22CD8(a1, a2, *(void ***)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_1B1E2615C()
{
  unint64_t result;

  result = qword_1EEF5F280;
  if (!qword_1EEF5F280)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22976EC, &type metadata for VertexLayoutDescriptor.Attribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F280);
  }
  return result;
}

unint64_t sub_1B1E261A0()
{
  unint64_t result;

  result = qword_1EEF5F298;
  if (!qword_1EEF5F298)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229769C, &type metadata for VertexLayoutDescriptor.Buffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F298);
  }
  return result;
}

unint64_t sub_1B1E261E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5F2B0;
  if (!qword_1EEF5F2B0)
  {
    sub_1B1A02758(255, &qword_1ED4B7778, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1B1E2625C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2B0);
  }
  return result;
}

unint64_t sub_1B1E2625C()
{
  unint64_t result;

  result = qword_1EEF5F2B8;
  if (!qword_1EEF5F2B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296ED8, &type metadata for VertexLayout);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2B8);
  }
  return result;
}

unint64_t sub_1B1E262A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5F2C0;
  if (!qword_1EEF5F2C0)
  {
    sub_1B1A02758(255, &qword_1EEF5F240, (uint64_t)&type metadata for MeshPart, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1E26318();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2C0);
  }
  return result;
}

unint64_t sub_1B1E26318()
{
  unint64_t result;

  result = qword_1EEF5F2C8;
  if (!qword_1EEF5F2C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296FB8, &type metadata for MeshPart);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for VertexLayoutDescriptor.Buffer.CodingKeys()
{
  return &type metadata for VertexLayoutDescriptor.Buffer.CodingKeys;
}

ValueMetadata *type metadata accessor for VertexLayoutDescriptor.Attribute.CodingKeys()
{
  return &type metadata for VertexLayoutDescriptor.Attribute.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Mesh.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1E263CC + 4 * byte_1B2296BFA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1E26400 + 4 * byte_1B2296BF5[v4]))();
}

uint64_t sub_1B1E26400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E26408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E26410);
  return result;
}

uint64_t sub_1B1E2641C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E26424);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1E26428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E26430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Mesh.CodingKeys()
{
  return &type metadata for Mesh.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for VertexLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1E26498 + 4 * byte_1B2296C04[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1E264CC + 4 * byte_1B2296BFF[v4]))();
}

uint64_t sub_1B1E264CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E264D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E264DCLL);
  return result;
}

uint64_t sub_1B1E264E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E264F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1E264F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E264FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VertexLayout.CodingKeys()
{
  return &type metadata for VertexLayout.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MeshPart.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B1E26564 + 4 * byte_1B2296C0E[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B1E26598 + 4 * byte_1B2296C09[v4]))();
}

uint64_t sub_1B1E26598(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E265A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E265A8);
  return result;
}

uint64_t sub_1B1E265B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E265BCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B1E265C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E265C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshPart.CodingKeys()
{
  return &type metadata for MeshPart.CodingKeys;
}

ValueMetadata *type metadata accessor for MeshBuffer.Error()
{
  return &type metadata for MeshBuffer.Error;
}

uint64_t _s3VFX22VertexLayoutDescriptorC6BufferV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1E26640 + 4 * byte_1B2296C18[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1E26674 + 4 * byte_1B2296C13[v4]))();
}

uint64_t sub_1B1E26674(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E2667C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E26684);
  return result;
}

uint64_t sub_1B1E26690(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E26698);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1E2669C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E266A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffer.CodingKeys()
{
  return &type metadata for MeshBuffer.CodingKeys;
}

unint64_t sub_1B1E266C4()
{
  unint64_t result;

  result = qword_1EEF5F2D0;
  if (!qword_1EEF5F2D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22971EC, &type metadata for MeshBuffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2D0);
  }
  return result;
}

unint64_t sub_1B1E26710()
{
  unint64_t result;

  result = qword_1EEF5F2D8;
  if (!qword_1EEF5F2D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297324, &type metadata for MeshPart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2D8);
  }
  return result;
}

unint64_t sub_1B1E26758()
{
  unint64_t result;

  result = qword_1EEF5F2E0;
  if (!qword_1EEF5F2E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297414, &type metadata for VertexLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2E0);
  }
  return result;
}

unint64_t sub_1B1E267A0()
{
  unint64_t result;

  result = qword_1EEF5F2E8;
  if (!qword_1EEF5F2E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297504, &type metadata for Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2E8);
  }
  return result;
}

unint64_t sub_1B1E267E8()
{
  unint64_t result;

  result = qword_1EEF5F2F0;
  if (!qword_1EEF5F2F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22975BC, &type metadata for VertexLayoutDescriptor.Attribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2F0);
  }
  return result;
}

unint64_t sub_1B1E26830()
{
  unint64_t result;

  result = qword_1EEF5F2F8;
  if (!qword_1EEF5F2F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297674, &type metadata for VertexLayoutDescriptor.Buffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F2F8);
  }
  return result;
}

unint64_t sub_1B1E26878()
{
  unint64_t result;

  result = qword_1EEF5F300;
  if (!qword_1EEF5F300)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22975E4, &type metadata for VertexLayoutDescriptor.Buffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F300);
  }
  return result;
}

unint64_t sub_1B1E268C0()
{
  unint64_t result;

  result = qword_1EEF5F308;
  if (!qword_1EEF5F308)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229760C, &type metadata for VertexLayoutDescriptor.Buffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F308);
  }
  return result;
}

unint64_t sub_1B1E26908()
{
  unint64_t result;

  result = qword_1EEF5F310;
  if (!qword_1EEF5F310)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229752C, &type metadata for VertexLayoutDescriptor.Attribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F310);
  }
  return result;
}

unint64_t sub_1B1E26950()
{
  unint64_t result;

  result = qword_1EEF5F318;
  if (!qword_1EEF5F318)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297554, &type metadata for VertexLayoutDescriptor.Attribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F318);
  }
  return result;
}

unint64_t sub_1B1E26998()
{
  unint64_t result;

  result = qword_1EEF5F320;
  if (!qword_1EEF5F320)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229743C, &type metadata for Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F320);
  }
  return result;
}

unint64_t sub_1B1E269E0()
{
  unint64_t result;

  result = qword_1EEF5F328;
  if (!qword_1EEF5F328)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297464, &type metadata for Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F328);
  }
  return result;
}

unint64_t sub_1B1E26A28()
{
  unint64_t result;

  result = qword_1EEF5F330;
  if (!qword_1EEF5F330)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229734C, &type metadata for VertexLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F330);
  }
  return result;
}

unint64_t sub_1B1E26A70()
{
  unint64_t result;

  result = qword_1EEF5F338;
  if (!qword_1EEF5F338)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297374, &type metadata for VertexLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F338);
  }
  return result;
}

unint64_t sub_1B1E26AB8()
{
  unint64_t result;

  result = qword_1EEF5F340;
  if (!qword_1EEF5F340)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229725C, &type metadata for MeshPart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F340);
  }
  return result;
}

unint64_t sub_1B1E26B00()
{
  unint64_t result;

  result = qword_1EEF5F348;
  if (!qword_1EEF5F348)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297284, &type metadata for MeshPart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F348);
  }
  return result;
}

unint64_t sub_1B1E26B48()
{
  unint64_t result;

  result = qword_1EEF5F350;
  if (!qword_1EEF5F350)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297124, &type metadata for MeshBuffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F350);
  }
  return result;
}

unint64_t sub_1B1E26B90()
{
  unint64_t result;

  result = qword_1EEF5F358;
  if (!qword_1EEF5F358)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229714C, &type metadata for MeshBuffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F358);
  }
  return result;
}

uint64_t sub_1B1E26BD8(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26[5];
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[8];
  _BYTE v33[8];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[72];
  uint64_t v44;

  sub_1B222A0CC();
  v3 = *((_QWORD *)v1 + 4);
  if (*((_QWORD *)v1 + 5))
    v4 = *((_QWORD *)v1 + 5);
  else
    v4 = MEMORY[0x1E0DEE9D8];
  v5 = v1[1];
  v35 = *v1;
  v36 = v5;
  v37 = v3;
  v6 = (void *)*((_QWORD *)&v5 + 1);
  swift_bridgeObjectRetain();
  sub_1B1BD35A8(v4, a1, v6, v26);
  swift_bridgeObjectRelease();
  sub_1B1E27550((uint64_t)v26, (uint64_t)v27);
  if (*((_QWORD *)&v27[0] + 1))
  {
    v29 = v27[0];
    v30 = v27[1];
    v31 = v28;
    sub_1B2228824();
    v7 = v31;
    v34 = v31;
    sub_1B222A078();
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v7 + 64;
      do
      {
        v10 = *(_QWORD *)(v9 - 32);
        v11 = *(_QWORD *)(v9 - 24);
        v12 = *(unsigned __int8 *)(v9 - 16);
        sub_1B1B2A86C(v9, (uint64_t)v43);
        sub_1B222A078();
        if (v12 == 1)
        {
          swift_bridgeObjectRetain();
          sub_1B2228824();
        }
        else
        {
          sub_1B222A078();
        }
        v9 += 112;
        sub_1B1B29888();
        sub_1B1B40E74(v10, v11, v12);
        --v8;
      }
      while (v8);
    }
    sub_1B1E275E8((uint64_t)&v30 + 8, (uint64_t)v33, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
    sub_1B1E275E8((uint64_t)v33, (uint64_t)&v44, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
    sub_1B222A078();
    swift_bridgeObjectRelease();
    sub_1B1E275E8((uint64_t)&v30, (uint64_t)v32, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650);
    sub_1B1B40274((uint64_t)v32);
    sub_1B1B40274((uint64_t)v33);
    v13 = &v34;
  }
  else
  {
    sub_1B1E275E8((uint64_t)&v36, (uint64_t)&v44, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650);
    v14 = v37;
    *(_QWORD *)&v29 = v37;
    swift_bridgeObjectRetain();
    sub_1B1B40D5C((uint64_t)&v44);
    swift_unknownObjectRetain();
    sub_1B1B28C44((uint64_t)&v29);
    sub_1B2228824();
    v15 = *(_QWORD *)(v14 + 16);
    sub_1B222A078();
    if (v15)
    {
      v16 = v14 + 64;
      do
      {
        v17 = *(_QWORD *)(v16 - 32);
        v18 = *(_QWORD *)(v16 - 24);
        v19 = *(unsigned __int8 *)(v16 - 16);
        sub_1B1B2A86C(v16, (uint64_t)v43);
        sub_1B222A078();
        if (v19 == 1)
        {
          swift_bridgeObjectRetain();
          sub_1B2228824();
        }
        else
        {
          sub_1B222A078();
        }
        v16 += 112;
        sub_1B1B29888();
        sub_1B1B40E74(v17, v18, v19);
        --v15;
      }
      while (v15);
    }
    sub_1B222A078();
    swift_bridgeObjectRelease();
    sub_1B1B40274((uint64_t)&v44);
    swift_unknownObjectRelease();
    v13 = (uint64_t *)&v29;
  }
  sub_1B1B28C6C((uint64_t)v13);
  v40 = v23;
  v41 = v24;
  v42 = v25;
  v38 = v21;
  v39 = v22;
  return sub_1B222A0B4();
}

uint64_t sub_1B1E26F40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;

  sub_1B2229430();
  v1 = *v0;
  v2 = v0[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1C7B528(v0[5]);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  if (v2)
  {
    v3 = objc_msgSend((id)swift_unknownObjectRetain(), sel_label);
    if (v3)
    {
      v4 = v3;
      sub_1B222874C();
      swift_unknownObjectRelease();

    }
    else
    {
      sub_1B22295EC();
      swift_unknownObjectRelease();
    }
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A0C0();
  sub_1B1B40D84();
  sub_1B2228944();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1E270F4()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E27138()
{
  return sub_1B222A078();
}

uint64_t sub_1B1E27160()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1E271A0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5[3];
  uint64_t v6;
  __int128 v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1B1E271F8(v5, v7);
}

BOOL sub_1B1E271F8(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[8];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v4 = a1[1];
  v15 = *a1;
  v16 = v4;
  v17 = *((_QWORD *)a1 + 4);
  v11 = *a2;
  v12 = a2[1];
  v13 = *((_QWORD *)a2 + 4);
  if (v15 == v11 || (v5 = sub_1B2229D24(), result = 0, (v5 & 1) != 0))
  {
    sub_1B1E275E8((uint64_t)&v12 + 8, (uint64_t)v14, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
    sub_1B1E275E8((uint64_t)v14, (uint64_t)&v20, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
    v7 = v20;
    sub_1B1E275E8((uint64_t)&v16 + 8, (uint64_t)v18, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
    sub_1B1E275E8((uint64_t)v18, (uint64_t)&v19, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
    if (v19)
    {
      result = 0;
      if (!v7 || v19 != v7)
        return result;
    }
    else if (v7)
    {
      return 0;
    }
    if ((sub_1B1CC95F4(v17, v13) & 1) != 0)
    {
      v8 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a1 + 5))
      {
        if (v8)
        {
          swift_bridgeObjectRetain();
          v9 = swift_bridgeObjectRetain();
          v10 = sub_1B1CC95F4(v9, v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v10 & 1) != 0)
            return *((_QWORD *)a1 + 6) == *((_QWORD *)a2 + 6);
        }
      }
      else if (!v8)
      {
        return *((_QWORD *)a1 + 6) == *((_QWORD *)a2 + 6);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1B1E2738C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[80];

  sub_1B222A0CC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  swift_bridgeObjectRelease();
  if (a4)
  {
    sub_1B222A084();
    sub_1B222A078();
    v10 = *(_QWORD *)(a4 + 16);
    if (v10)
    {
      v16 = a1;
      swift_bridgeObjectRetain();
      v11 = a4 + 64;
      do
      {
        v12 = *(_QWORD *)(v11 - 32);
        v13 = *(_QWORD *)(v11 - 24);
        v14 = *(unsigned __int8 *)(v11 - 16);
        sub_1B1B2A86C(v11, (uint64_t)v17);
        sub_1B222A078();
        if (v14 == 1)
        {
          swift_bridgeObjectRetain();
          sub_1B2228824();
        }
        else
        {
          sub_1B222A078();
        }
        v11 += 112;
        sub_1B1B29888();
        sub_1B1B40E74(v12, v13, v14);
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease_n();
      a1 = v16;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1B222A084();
  }
  result = sub_1B222A0B4();
  *a5 = a1;
  a5[1] = a2;
  a5[2] = 0;
  a5[3] = a3;
  a5[4] = MEMORY[0x1E0DEE9D8];
  a5[5] = a4;
  a5[6] = result;
  return result;
}

uint64_t sub_1B1E27550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1E27594();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1E27594()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7880)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7880);
  }
}

uint64_t sub_1B1E275E8(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  sub_1B1E27638(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_1B1E27638(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B19F8F48(255, a3);
    v4 = sub_1B2229124();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for ComputePipelineDescriptor()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ComputePipelineDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ComputePipelineDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for ComputePipelineDescriptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for ComputePipelineDescriptor()
{
  return &type metadata for ComputePipelineDescriptor;
}

unint64_t sub_1B1E2787C()
{
  unint64_t result;

  result = qword_1EEF5F360;
  if (!qword_1EEF5F360)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22978DC, &type metadata for ComputePipelineDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF5F360);
  }
  return result;
}

uint64_t sub_1B1E278C0(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55[48];
  uint64_t v56;

  v45 = *(_QWORD *)(a1 + 16);
  v43 = *(_QWORD *)(a2 + 16);
  if (v43 >= v45)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  v56 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, v4, 0);
  v5 = v56;
  v39 = a2;
  v40 = a1;
  if (v4)
  {
    v41 = a2 + 32;
    v42 = a1 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = 0;
    v44 = 0;
    v7 = 0;
    while (1)
    {
      v49 = v4;
      v50 = v5;
      if ((v6 & 1) != 0)
      {
        v48 = v7;
        v8 = 0;
        v9 = 0;
        v54 = 0;
        v10 = 0uLL;
        v53 = 0u;
        v46 = 1;
      }
      else
      {
        v11 = v45;
        if (v7 != v45)
        {
          v11 = v7 + 1;
          if (v44 != v43)
          {
            v17 = *(_QWORD *)(v42 + 16 * v7 + 8);
            v18 = (uint64_t *)(v41 + 40 * v44);
            v20 = *v18;
            v19 = v18[1];
            v21 = v18[2];
            v22 = v18[3];
            v23 = v18[4];
            ++v44;
            *(_QWORD *)&v51 = *(_QWORD *)(v42 + 16 * v7);
            *((_QWORD *)&v51 + 1) = v17;
            *(_QWORD *)&v52 = v20;
            *((_QWORD *)&v52 + 1) = v19;
            *(_QWORD *)&v53 = v21;
            *((_QWORD *)&v53 + 1) = v22;
            v54 = v23;
            swift_bridgeObjectRetain();
            sub_1B19FA2B4(v20, v19);
            v46 = 0;
            v8 = *((_QWORD *)&v51 + 1);
            v9 = v51;
            v48 = v11;
            goto LABEL_12;
          }
        }
        v8 = 0;
        v9 = 0;
        v54 = 0;
        v10 = 0uLL;
        v53 = 0u;
        v46 = 1;
        v48 = v11;
      }
      v51 = v10;
      v52 = v10;
LABEL_12:
      sub_1B19FA278((uint64_t)&v52, (uint64_t)v55);
      v12 = v52;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B1E03DBC();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v13 = v9;
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v12, *((unint64_t *)&v12 + 1));
      v5 = v50;
      v56 = v50;
      v15 = *(_QWORD *)(v50 + 16);
      v14 = *(_QWORD *)(v50 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B2029FFC(v14 > 1, v15 + 1, 1);
        v5 = v56;
      }
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v8;
      v7 = v48;
      v4 = v49 - 1;
      v6 = v46;
      if (v49 == 1)
      {
        v24 = v45;
        v25 = v43;
        if ((v46 & 1) != 0)
          goto LABEL_25;
        goto LABEL_20;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = 0;
  v44 = 0;
  v24 = v45;
  v25 = v43;
LABEL_20:
  if (v7 != v24 && v44 != v25)
  {
    v28 = ~v44 + v25;
    v29 = (uint64_t *)(v40 + 16 * v7 + 40);
    v30 = (uint64_t *)(v39 + 40 * v44 + 32);
    v31 = ~v7 + v24;
    do
    {
      v47 = v28;
      v32 = *(v29 - 1);
      v33 = *v29;
      sub_1B19FA278((uint64_t)v30, (uint64_t)&v51);
      v34 = *v30;
      v35 = v30[1];
      swift_bridgeObjectRetain_n();
      sub_1B1B9C750((uint64_t)&v51);
      sub_1B2228890();
      sub_1B1E03DBC();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v34, v35);
      v56 = v5;
      v37 = *(_QWORD *)(v5 + 16);
      v36 = *(_QWORD *)(v5 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_1B2029FFC(v36 > 1, v37 + 1, 1);
        v5 = v56;
      }
      *(_QWORD *)(v5 + 16) = v37 + 1;
      v38 = v5 + 16 * v37;
      *(_QWORD *)(v38 + 32) = v32;
      *(_QWORD *)(v38 + 40) = v33;
      if (!v31)
        break;
      v30 += 5;
      v28 = v47 - 1;
      v29 += 2;
      --v31;
    }
    while (v47);
  }
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B1E27CA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v4 = (_QWORD *)v3[10];
  v5 = v4[2];
  if (v5)
  {
    v8 = result;
    v9 = v4[4] == result && v4[5] == a2;
    if (v9 || (result = sub_1B2229D24(), (result & 1) != 0))
    {
      v10 = 0;
      goto LABEL_8;
    }
    if (v5 == 1)
      return result;
    v18 = v4[6] == v8 && v4[7] == a2;
    if (v18 || (result = sub_1B2229D24(), (result & 1) != 0))
    {
      v10 = 1;
LABEL_8:
      v11 = (_QWORD *)v3[11];
      sub_1B1B9C750(a3);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v3[11] = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v11 = sub_1B1FFEEE8(v11);
        v3[11] = v11;
      }
      sub_1B1D3AF48(a3, (uint64_t)&v11[5 * v10 + 4]);
      v13 = v3[12];
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        v14 = sub_1B22296AC();
        if (v10 < 0)
          return swift_bridgeObjectRelease();
      }
      else
      {
        v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v10 < 0)
          return swift_bridgeObjectRelease();
      }
      if (v10 < v14)
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          v22 = MEMORY[0x1B5E21018](v10, v13);
          swift_bridgeObjectRelease();
          v23 = *(_QWORD *)(v22 + 56);
          v24 = *(_QWORD *)(v22 + 64);
          sub_1B19FA278(a3, v22 + 56);
          sub_1B1B9C750(a3);
          sub_1B19F9FEC(v23, v24);
          return swift_unknownObjectRelease();
        }
        else
        {
          v15 = *(_QWORD *)(v13 + 8 * v10 + 32);
          swift_retain();
          swift_bridgeObjectRelease();
          v16 = *(_QWORD *)(v15 + 56);
          v17 = *(_QWORD *)(v15 + 64);
          sub_1B19FA278(a3, v15 + 56);
          sub_1B1B9C750(a3);
          sub_1B19F9FEC(v16, v17);
          return swift_release();
        }
      }
      return swift_bridgeObjectRelease();
    }
    v19 = v4 + 9;
    v20 = 2;
    while (v5 != v20)
    {
      v10 = v20;
      if (*(v19 - 1) != v8 || *v19 != a2)
      {
        result = sub_1B2229D24();
        v20 = v10 + 1;
        v19 += 2;
        if ((result & 1) == 0)
          continue;
      }
      goto LABEL_8;
    }
  }
  return result;
}

_QWORD *sub_1B1E27F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  _QWORD *i;
  BOOL v20;
  uint64_t v21;

  v3 = *(_QWORD **)(v2 + 80);
  v4 = (_QWORD *)v3[2];
  if (v4)
  {
    v7 = v3[4] == a1 && v3[5] == a2;
    if (!v7 && (sub_1B2229D24() & 1) == 0)
    {
      if (v4 == (_QWORD *)1)
        return 0;
      v8 = v3[6] == a1 && v3[7] == a2;
      if (!v8 && (sub_1B2229D24() & 1) == 0)
      {
        v18 = (char *)v4 - 2;
        if (v4 == (_QWORD *)2)
          return 0;
        for (i = v3 + 9; ; i += 2)
        {
          v20 = *(i - 1) == a1 && *i == a2;
          if (v20 || (sub_1B2229D24() & 1) != 0)
            break;
          v4 = 0;
          if (!--v18)
            return v4;
        }
      }
    }
    v9 = (_QWORD *)(*(_QWORD *)(v2 + 88) + 40 * sub_1B1DB99B0(a1, a2, v3));
    v10 = v9[4];
    v11 = v9[5];
    v12 = v9[6];
    v13 = v9[7];
    v14 = v9[8];
    sub_1B19FA2B4(v10, v11);
    swift_bridgeObjectRetain();
    v15 = sub_1B1E280AC();
    v21 = v16;
    _s12ParameterOutCMa();
    v4 = (_QWORD *)swift_allocObject();
    swift_weakInit();
    swift_weakAssign();
    v4[3] = a1;
    v4[4] = a2;
    v4[5] = v15;
    v4[6] = v21;
    v4[7] = v10;
    v4[8] = v11;
    v4[9] = v12;
    v4[10] = v13;
    v4[11] = v14;
  }
  return v4;
}

uint64_t sub_1B1E280AC()
{
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 6245961;
}

unint64_t sub_1B1E2814C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1E278C0(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD000000000000012;
}

uint64_t _s12ContextEntryCMa()
{
  return objc_opt_self();
}

unint64_t sub_1B1E282CC()
{
  return sub_1B1E2814C();
}

uint64_t destroy for EntityKeyPath()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for EntityKeyPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EntityKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  return a1;
}

__n128 initializeWithTake for EntityKeyPath(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EntityKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityKeyPath(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 52))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityKeyPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 52) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityKeyPath()
{
  return &type metadata for EntityKeyPath;
}

ValueMetadata *type metadata accessor for ComponentProperty()
{
  return &type metadata for ComponentProperty;
}

uint64_t sub_1B1E2854C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
}

uint64_t sub_1B1E28574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1B5E20D60](a1, a2);
  v8 = (*(uint64_t (**)(uint64_t))(a4 + 40))(v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1E285E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t result;
  _BYTE v13[24];
  uint64_t v14;

  v5 = a1[3];
  v6 = a1[4];
  sub_1B19FA070(a1, v5);
  LODWORD(v5) = *(unsigned __int8 *)(sub_1B2068140(v5, v6) + 86);
  swift_release();
  if ((_DWORD)v5 == 1)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A168();
    v7 = a1[3];
    v8 = a1[4];
    sub_1B19FA070(a1, v7);
    sub_1B2068140(v7, v8);
    sub_1B206A068((_QWORD *)a2);
    swift_release();
    sub_1B19FC264((uint64_t)v13, v14);
    sub_1B2229DFC();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B2229304();
  if (!swift_conformsToProtocol2())
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1B19FC264((uint64_t)v13, v14);
  sub_1B1B6AEE0();
  sub_1B2229BA4();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  v9 = sub_1B2229304();
  if (!swift_conformsToProtocol2())
    goto LABEL_14;
  if (swift_conformsToProtocol2())
    v10 = v9;
  else
    v10 = 0;
  if (v10)
  {
    sub_1B19FC264((uint64_t)v13, v14);
    swift_bridgeObjectRetain();
    sub_1B2229B68();
    swift_bridgeObjectRelease();
    v11 = *(_WORD *)(a2 + 210);
    sub_1B19FC264((uint64_t)v13, v14);
    sub_1B2229B74();
    if ((v11 & 0x400) != 0)
    {
      sub_1B19FC264((uint64_t)v13, v14);
      sub_1B1E2A6F0();
      sub_1B2229BA4();
      sub_1B19FC264((uint64_t)v13, v14);
      sub_1B1CBB97C();
      sub_1B2229BA4();
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  }
LABEL_15:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E28924()
{
  uint64_t result;

  sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (result)
  {
    sub_1B222A078();
    sub_1B222A078();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1E289A4()
{
  uint64_t result;

  sub_1B222A06C();
  sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (result)
  {
    sub_1B222A078();
    sub_1B222A078();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    return sub_1B222A0C0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1E28A44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1E29770(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1E28A6C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1E285E4(a1, *v1);
}

uint64_t sub_1B1E28A84()
{
  return sub_1B1E289A4();
}

uint64_t sub_1B1E28A8C()
{
  return sub_1B1E28924();
}

uint64_t sub_1B1E28A94()
{
  uint64_t result;

  sub_1B222A06C();
  sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (result)
  {
    sub_1B222A078();
    sub_1B222A078();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    return sub_1B222A0C0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1E28B30(_QWORD **a1, _QWORD **a2)
{
  return sub_1B1E29668(*a1, *a2);
}

unint64_t sub_1B1E28B40()
{
  unint64_t result;

  result = qword_1EEF5F370;
  if (!qword_1EEF5F370)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22979D4, &type metadata for ComponentProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF5F370);
  }
  return result;
}

uint64_t sub_1B1E28B84(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
    return sub_1B1E29668(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8));
  else
    return 0;
}

uint64_t sub_1B1E28BAC(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1A0895C();
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B1C1ED2C();
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B1E28C98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B1E2A1A4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1E28CC8(_QWORD *a1)
{
  return sub_1B1E28BAC(a1);
}

uint64_t sub_1B1E28CE0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7[5];
  _QWORD v8[6];

  v3 = v1[1];
  v8[3] = &type metadata for Entity;
  v8[4] = &off_1E63BB108;
  v8[0] = *v1;
  v4 = sub_1B19FA070(v8, (uint64_t)&type metadata for Entity);
  v7[3] = (uint64_t)&type metadata for Entity;
  v7[4] = (uint64_t)&off_1E63BB108;
  v5 = sub_1B1A137F4(v7);
  *v5 = sub_1B1E33C2C(*v4);
  sub_1B1B6C05C();
  swift_dynamicCast();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  *a1 = v8[5];
  a1[1] = v3;
  return swift_retain();
}

uint64_t sub_1B1E28DA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  __int128 v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B1A0895C();
  sub_1B2229BA4();
  if (!v2)
  {
    v6 = *(_OWORD *)(v1 + 8);
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B1E2A5DC(v1);
    sub_1B1CAD980();
    sub_1B2229BA4();
    sub_1B1BA80C0((uint64_t)&v6);
    swift_release();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

BOOL sub_1B1E28EC8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  int v6;
  _OWORD v7[3];
  int v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 48);
  return sub_1B1E295B4((uint64_t)v5, (uint64_t)v7);
}

double sub_1B1E28F20@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  int v8;

  sub_1B1E2A47C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_DWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B1E28F6C(_QWORD *a1)
{
  return sub_1B1E28DA4(a1);
}

uint64_t sub_1B1E28FAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v12[5];
  _QWORD v13[6];

  v3 = *v1;
  v13[3] = &type metadata for Entity;
  v13[4] = &off_1E63BB108;
  v13[0] = v3;
  v4 = sub_1B19FA070(v13, (uint64_t)&type metadata for Entity);
  v12[3] = (uint64_t)&type metadata for Entity;
  v12[4] = (uint64_t)&off_1E63BB108;
  v5 = sub_1B1A137F4(v12);
  *v5 = sub_1B1E33C2C(*v4);
  sub_1B1B6C05C();
  swift_dynamicCast();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  v7 = v1[1];
  v6 = v1[2];
  v8 = v1[5];
  v9 = *((_BYTE *)v1 + 48);
  v10 = *((_WORD *)v1 + 25);
  *(_QWORD *)a1 = v13[5];
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 3);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 50) = v10;
  swift_bridgeObjectRetain();
  return swift_retain();
}

double sub_1B1E2909C@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;
  int v6;

  sub_1B1E28FAC((uint64_t)v4);
  v2 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v2;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = v6;
  return result;
}

void sub_1B1E290E4(char *a1)
{
  sub_1B1F92500(*a1);
}

void sub_1B1E290F0()
{
  char *v0;

  sub_1B1FB2ABC(*v0);
}

void sub_1B1E290F8(uint64_t a1)
{
  char *v1;

  sub_1B1DB4580(a1, *v1);
}

void sub_1B1E29100(uint64_t a1)
{
  char *v1;

  sub_1B1DB5AA8(a1, *v1);
}

uint64_t sub_1B1E29108@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E29728();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E29134()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1E2916C + 4 * byte_1B2297980[*v0]))();
}

void sub_1B1E2916C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "propertyPath");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B1E29190(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "propertyType");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B1E291B4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001B2328AE0;
}

uint64_t sub_1B1E291D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B1E2920C + 4 * byte_1B2297984[*v0]))(0xD000000000000013, 0x80000001B2328AB0);
}

uint64_t sub_1B1E2920C()
{
  return 0x79747265706F7270;
}

unint64_t sub_1B1E29238()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1E29254@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E29728();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E29278()
{
  sub_1B1E2A668();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E292A0()
{
  sub_1B1E2A668();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E292C8(char *a1, char *a2)
{
  return sub_1B1F9697C(*a1, *a2);
}

uint64_t sub_1B1E292D4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E29354()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E293B0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E2942C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1E29488(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x797469746E65;
  if (*v1)
    v2 = 0xD000000000000011;
  v3 = 0x80000001B23298D0;
  if (!*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1E294C8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x797469746E65;
}

uint64_t sub_1B1E29504@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1E29564()
{
  sub_1B1E2A438();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E2958C()
{
  sub_1B1E2A438();
  return sub_1B222A1E0();
}

BOOL sub_1B1E295B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  result = *(_DWORD *)a1 == *(_DWORD *)a2
        && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
        && (v2 = *(_QWORD *)(a1 + 8),
            v3 = *(_QWORD *)(a1 + 16),
            v4 = *(_QWORD *)(a2 + 8),
            v5 = *(_QWORD *)(a2 + 16),
            v6 = sub_1B2229304(),
            v6 == sub_1B2229304())
        && (v2 == v4 && v3 == v5 || (sub_1B2229D24() & 1) != 0);
  return result;
}

uint64_t sub_1B1E29668(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  v6 = sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (v4 != v6 || a1[5] != a2[5])
    return 0;
  if (a1[2] == a2[2] && a1[3] == a2[3])
    return 1;
  return sub_1B2229D24();
}

uint64_t sub_1B1E29728()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B1E29770(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  sub_1B1E2A610(0, &qword_1ED4BAB28, (void (*)(void))sub_1B1E2A668);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v54 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  LOBYTE(v9) = sub_1B2067BAC(2002, v9, v10);
  sub_1B19FA198((uint64_t)a1, (uint64_t)v63);
  if ((v9 & 1) != 0)
  {
    v11 = v64;
    v12 = v65;
    sub_1B19FA070(v63, v64);
    LOBYTE(v11) = *(_BYTE *)(sub_1B20680A8(v11, v12) + 86);
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v63);
    if ((v11 & 1) != 0)
    {
      v8 = (char *)a1[4];
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v1)
      {
        sub_1B19FA070(&v60, *((uint64_t *)&v61 + 1));
        v13 = sub_1B2229D78();
        v14 = a1[3];
        v8 = (char *)a1[4];
        sub_1B19FA070(a1, v14);
        v15 = sub_1B20680A8(v14, (uint64_t)v8);
        if (v13 < 0 || (v16 = *(_QWORD *)(v15 + 136), *(_QWORD *)(v16 + 16) <= v13))
        {
          swift_release();
        }
        else
        {
          v8 = *(char **)(v16 + 8 * v13 + 32);
          swift_retain();
          swift_release();
          if (v8)
            goto LABEL_38;
        }
        v58 = 0;
        v59 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v58 = 0xD000000000000015;
        v59 = 0x80000001B233E120;
        LODWORD(v66) = v13;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v31 = v58;
        v32 = v59;
        sub_1B1B6AE48();
        swift_allocError();
        *(_QWORD *)v33 = v31;
        *(_QWORD *)(v33 + 8) = v32;
        *(_BYTE *)(v33 + 16) = 0;
        swift_willThrow();
LABEL_38:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v60);
      }
LABEL_39:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      return (uint64_t)v8;
    }
  }
  else
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v63);
  }
  v17 = a1[3];
  v18 = a1[4];
  sub_1B19FA070(a1, v17);
  if (sub_1B2067B64(2002, v17, v18))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E2A668();
    sub_1B222A150();
    if (v1)
      goto LABEL_39;
    LOBYTE(v58) = 0;
    sub_1B1B6AE04();
    sub_1B2229814();
    v19 = v60;
    if (swift_conformsToProtocol2())
    {
      LOBYTE(v60) = 1;
      v55 = sub_1B22297CC();
      v56 = v34;
      v35 = swift_conformsToProtocol2();
      if (v35)
        v36 = v35;
      else
        v36 = 0;
      v54 = v19;
      if (v35)
        v37 = v19;
      else
        v37 = 0;
      if (v37)
      {
        v38 = a1[3];
        v39 = a1[4];
        sub_1B19FA070(a1, v38);
        v40 = sub_1B2067BF4(v38, v39);
        v41 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 16);
        v42 = v37;
        v57 = (char *)v36;
        if ((v41(v40, 0, v37, v36) & 1) != 0)
        {
          LOBYTE(v60) = 2;
          sub_1B1E2A6AC();
          sub_1B2229814();
          v43 = v58;
          LOBYTE(v66) = 3;
          sub_1B1CBB838();
          sub_1B2229814();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          v53 = *((_QWORD *)&v60 + 1);
          v52 = v60;
          v21 = v55;
          v23 = v56;
          v25 = v42;
LABEL_48:
          v60 = 0u;
          v61 = 0u;
          v8 = (char *)(*((uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, _QWORD, uint64_t, _QWORD, char, _QWORD, char, _QWORD, _QWORD, __int128 *, _WORD, uint64_t, char *))v57
                        + 8))(v21, v23, v43, v52, v53, 0, 1, 0, 1, 0, 1, 0, 0, &v60, 0, v25, v57);
          swift_bridgeObjectRelease();
          sub_1B1A0DD70((uint64_t)&v60);
          goto LABEL_39;
        }
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        v21 = v55;
        v23 = v56;
        v8 = v57;
        v25 = v37;
LABEL_43:
        *((_QWORD *)&v61 + 1) = v25;
        v62 = v8;
        sub_1B1A137F4((uint64_t *)&v60);
        (*(void (**)(uint64_t))(*((_QWORD *)v8 + 1) + 8))(v25);
        if (sub_1B1E28574(v21, v23, v25, (uint64_t)v8))
        {
          v45 = a1[3];
          v46 = a1[4];
          sub_1B19FA070(a1, v45);
          v47 = sub_1B2067BF4(v45, v46);
          v8 = (char *)sub_1B1BF6D88(v47, 0);
          swift_retain();
          swift_release();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v60);
          if ((v8[112] & 1) != 0)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            *(_QWORD *)&v60 = 0;
            *((_QWORD *)&v60 + 1) = 0xE000000000000000;
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v60 = 0xD000000000000011;
            *((_QWORD *)&v60 + 1) = 0x80000001B233E100;
            sub_1B222A210();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v50 = v60;
            sub_1B1B6AE48();
            swift_allocError();
            *(_OWORD *)v51 = v50;
            *(_BYTE *)(v51 + 16) = 33;
            swift_willThrow();
            swift_release();
          }
        }
        else
        {
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v60);
          *(_QWORD *)&v60 = 0;
          *((_QWORD *)&v60 + 1) = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v60 = 0xD000000000000011;
          *((_QWORD *)&v60 + 1) = 0x80000001B233E0E0;
          sub_1B222A210();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v48 = v60;
          sub_1B1B6AE48();
          swift_allocError();
          *(_OWORD *)v49 = v48;
          *(_BYTE *)(v49 + 16) = 32;
          swift_willThrow();
        }
        goto LABEL_39;
      }
      goto LABEL_51;
    }
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v8 = (char *)a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
    goto LABEL_39;
  sub_1B19FC264((uint64_t)&v60, *((uint64_t *)&v61 + 1));
  sub_1B1B6AE04();
  sub_1B2229AA8();
  v20 = v58;
  if (!swift_conformsToProtocol2())
    goto LABEL_50;
  sub_1B19FC264((uint64_t)&v60, *((uint64_t *)&v61 + 1));
  v21 = sub_1B2229A60();
  v23 = v22;
  v24 = swift_conformsToProtocol2();
  if (v24)
    v8 = (char *)v24;
  else
    v8 = 0;
  if (v24)
    v25 = v20;
  else
    v25 = 0;
  if (v25)
  {
    v26 = a1[3];
    v27 = a1[4];
    sub_1B19FA070(a1, v26);
    if (sub_1B2067B64(2033, v26, v27))
    {
      v28 = a1[3];
      v29 = a1[4];
      sub_1B19FA070(a1, v28);
      v30 = sub_1B2067BF4(v28, v29);
      if (((*((uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))v8 + 2))(v30, 0, v25, v8) & 1) == 0)
      {
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v60);
        goto LABEL_43;
      }
      v57 = v8;
    }
    else
    {
      v57 = v8;
      sub_1B19FC264((uint64_t)&v60, *((uint64_t *)&v61 + 1));
      if ((sub_1B2229A6C() & 1) == 0)
      {
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v60);
        v8 = v57;
        goto LABEL_43;
      }
    }
    sub_1B19FC264((uint64_t)&v60, *((uint64_t *)&v61 + 1));
    sub_1B1E2A6AC();
    sub_1B2229AA8();
    v43 = v66;
    sub_1B19FC264((uint64_t)&v60, *((uint64_t *)&v61 + 1));
    sub_1B1CBB838();
    sub_1B2229AA8();
    v52 = v58;
    v53 = v59;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v60);
    goto LABEL_48;
  }
LABEL_51:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E2A1A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD v14[2];
  _DWORD v15[6];
  uint64_t v16;

  sub_1B1E2A610(0, &qword_1ED4BABE8, (void (*)(void))sub_1B1E2A438);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (!sub_1B2067B64(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      sub_1B19FC264((uint64_t)v15, v16);
      sub_1B1A08878();
      sub_1B2229AA8();
      v12 = v14[0];
      v11 = v14[1];
      sub_1B19FC264((uint64_t)v15, v16);
      sub_1B1C1ECE8();
      sub_1B2229AA8();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E2A438();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v14[0]) = 0;
  sub_1B1A08878();
  sub_1B2229814();
  v12 = v15[0];
  v11 = v15[1];
  LOBYTE(v14[0]) = 1;
  sub_1B1C1ECE8();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_7:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v12 | (unint64_t)(v11 << 32);
}

unint64_t sub_1B1E2A438()
{
  unint64_t result;

  result = qword_1ED4B9968;
  if (!qword_1ED4B9968)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297E10, &type metadata for EntityComponentProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9968);
  }
  return result;
}

uint64_t sub_1B1E2A47C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  _BYTE v12[24];
  uint64_t v13;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v12, v13);
  sub_1B1A08878();
  sub_1B2229AA8();
  sub_1B19FC264((uint64_t)v12, v13);
  sub_1B1CAD7DC();
  sub_1B2229AA8();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = v10;
  *(_WORD *)(a2 + 50) = v11;
  return result;
}

uint64_t sub_1B1E2A5DC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void sub_1B1E2A610(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_1B2229898();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1B1E2A668()
{
  unint64_t result;

  result = qword_1ED4B8EC8;
  if (!qword_1ED4B8EC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297DC0, &type metadata for ComponentProperty.CodingKeys_pre2002);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EC8);
  }
  return result;
}

unint64_t sub_1B1E2A6AC()
{
  unint64_t result;

  result = qword_1ED4B9190;
  if (!qword_1ED4B9190)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1894, &type metadata for TypeCoder_pre2035);
    atomic_store(result, (unint64_t *)&qword_1ED4B9190);
  }
  return result;
}

unint64_t sub_1B1E2A6F0()
{
  unint64_t result;

  result = qword_1EEF5F378;
  if (!qword_1EEF5F378)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A186C, &type metadata for TypeCoder_pre2035);
    atomic_store(result, (unint64_t *)&qword_1EEF5F378);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ComponentProperty.CodingKeys_pre2002(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1E2A780 + 4 * byte_1B229798D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1E2A7B4 + 4 * byte_1B2297988[v4]))();
}

uint64_t sub_1B1E2A7B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E2A7BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E2A7C4);
  return result;
}

uint64_t sub_1B1E2A7D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E2A7D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1E2A7DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E2A7E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComponentProperty.CodingKeys_pre2002()
{
  return &type metadata for ComponentProperty.CodingKeys_pre2002;
}

uint64_t storeEnumTagSinglePayload for EntityComponentProperty.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1E2A84C + 4 * byte_1B2297997[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1E2A880 + 4 * byte_1B2297992[v4]))();
}

uint64_t sub_1B1E2A880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E2A888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E2A890);
  return result;
}

uint64_t sub_1B1E2A89C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E2A8A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1E2A8A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E2A8B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EntityComponentProperty.CodingKeys()
{
  return &type metadata for EntityComponentProperty.CodingKeys;
}

uint64_t assignWithCopy for EntityComponentProperty(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for EntityComponentProperty(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EntityComponentProperty()
{
  return &type metadata for EntityComponentProperty;
}

unint64_t sub_1B1E2A960()
{
  unint64_t result;

  result = qword_1EEF5F380;
  if (!qword_1EEF5F380)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297CA8, &type metadata for EntityComponentProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F380);
  }
  return result;
}

unint64_t sub_1B1E2A9A8()
{
  unint64_t result;

  result = qword_1EEF5F388;
  if (!qword_1EEF5F388)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297D98, &type metadata for ComponentProperty.CodingKeys_pre2002);
    atomic_store(result, (unint64_t *)&qword_1EEF5F388);
  }
  return result;
}

unint64_t sub_1B1E2A9F0()
{
  unint64_t result;

  result = qword_1ED4B8ED8;
  if (!qword_1ED4B8ED8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297CD0, &type metadata for ComponentProperty.CodingKeys_pre2002);
    atomic_store(result, (unint64_t *)&qword_1ED4B8ED8);
  }
  return result;
}

unint64_t sub_1B1E2AA38()
{
  unint64_t result;

  result = qword_1ED4B8ED0;
  if (!qword_1ED4B8ED0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297CF8, &type metadata for ComponentProperty.CodingKeys_pre2002);
    atomic_store(result, (unint64_t *)&qword_1ED4B8ED0);
  }
  return result;
}

unint64_t sub_1B1E2AA80()
{
  unint64_t result;

  result = qword_1ED4B9978;
  if (!qword_1ED4B9978)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297BE0, &type metadata for EntityComponentProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9978);
  }
  return result;
}

unint64_t sub_1B1E2AAC8()
{
  unint64_t result;

  result = qword_1ED4B9970;
  if (!qword_1ED4B9970)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297C08, &type metadata for EntityComponentProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9970);
  }
  return result;
}

uint64_t sub_1B1E2AB0C()
{
  return 0x726F74636166;
}

uint64_t sub_1B1E2AB20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726F74636166 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1E2ABAC()
{
  sub_1B1E2BE78();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E2ABD4()
{
  sub_1B1E2BE78();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E2ABFC@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  sub_1B1E2BEBC(0, &qword_1EEF5F390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E2BE78();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B22297F0();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v12;
  return result;
}

uint64_t sub_1B1E2AD2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1E2BEBC(0, &qword_1EEF5F3A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E2BE78();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B1E2AE1C(_DWORD *a1@<X8>)
{
  *a1 = 1063675494;
}

uint64_t sub_1B1E2AE2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1E2AF8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float32x4_t *v41;
  _OWORD *v42;
  uint64_t v43;
  float v44;
  float32x2_t v45;
  int32x2_t v46;
  float v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  __n128 v72;
  int v73;
  int v74;
  int8x16_t v75;
  float v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float32x2_t v103;
  int32x2_t v104;
  float v105;
  uint64_t v106;
  float *v107;
  float32x4_t *v108;
  _OWORD *v109;
  float v110;
  float32x2_t v111;
  int32x2_t v112;
  float v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  __n128 v138;
  int v139;
  int v140;
  int8x16_t v141;
  float v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  int8x16_t v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float32x4_t v156;
  int8x16_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float32x2_t v169;
  int32x2_t v170;
  float v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  int8x16_t v181;
  float v182;
  float v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  __n128 v190;
  __n128 v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float32x4_t v199;
  float v200;
  float v201;
  float v202;
  float v203;
  uint64_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  uint64_t v209;
  __n128 v210;
  float32x4_t v211;
  __n128 v212;
  float32x4_t v213;
  uint64_t v214[8];
  _OWORD v215[2];
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD v225[7];
  uint64_t v226;
  uint64_t v227;
  _OWORD v228[2];
  uint64_t v229;
  _BYTE v230[40];
  _OWORD v231[2];
  uint64_t v232;
  _OWORD v233[2];
  uint64_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240[2];

  v2 = v1;
  v4 = *(_OWORD *)(v1 + 72);
  v233[0] = *(_OWORD *)(v1 + 56);
  v233[1] = v4;
  v234 = *(_QWORD *)(v1 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v233, 0x200000000, v214);
  sub_1B19F66A0((uint64_t)v214, (uint64_t)v225, (unint64_t *)&qword_1ED4B7DE0);
  if (v225[0])
  {
    if (v227 >= 1)
    {
      v5 = v226;
      if (v226)
      {
        v6 = v225[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 48 * v5;
        v8 = (uint64_t *)(v6 + 40);
        do
        {
          v13 = *v8;
          v14 = *(os_unfair_lock_s **)(*v8 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          v15 = *(_DWORD *)(v13 + 24);
          swift_retain();
          v219 = 0;
          v217 = 0u;
          v218 = 0u;
          v216 = 0;
          memset(v215, 0, sizeof(v215));
          v16 = sub_1B1DA4ED8(v15, (uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, 0, 0, (uint64_t)&v217, (uint64_t)v215);
          swift_release();
          sub_1B1A12E98((uint64_t)v215);
          sub_1B1A12E98((uint64_t)&v217);
          if (sub_1B1A10B20(v16))
          {
            sub_1B1A10BB0(v16);
          }
          else
          {
            v9 = *(_QWORD *)(v13 + 232);
            v10 = *(_QWORD *)(v13 + 240);
            v11 = *(unsigned __int8 *)(v13 + 120);
            v12 = *(unsigned int *)(v13 + 28);
            LOBYTE(v217) = *(_BYTE *)(v13 + 32);
            sub_1B1FD8C68(v9, v10, v16, v11, v12 | ((unint64_t)v217 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          swift_release();
          v8 += 6;
          v7 -= 48;
        }
        while (v7);
        sub_1B19ED748(v214);
      }
    }
    sub_1B19ED748(v214);
  }
  v17 = *(_OWORD *)(v2 + 32);
  v231[0] = *(_OWORD *)(v2 + 16);
  v231[1] = v17;
  v232 = *(_QWORD *)(v2 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v231, 0x200000000, v215);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v215, (uint64_t)&v217, (unint64_t *)&qword_1ED4B7DE0);
  if ((_QWORD)v217)
  {
    if (v224 >= 1)
    {
      v177 = v221;
      if (v221)
      {
        v19 = v223[4];
        v20 = *(unsigned __int8 *)(v222 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v228[0] = v217;
        v228[1] = v218;
        v229 = v219;
        v173 = (uint64_t)(v223 + 6);
        v174 = v220;
        v180 = v223;
        v172 = v223 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v21 = 0;
        v22 = 0;
        v175 = v20;
        v176 = v19;
        while (1)
        {
          v178 = v21;
          v23 = (unsigned int *)(v174 + 48 * v21);
          v24 = *v23;
          v25 = (uint64_t *)*((_QWORD *)v23 + 2);
          v26 = *((_QWORD *)v23 + 3);
          v28 = *((_QWORD *)v23 + 4);
          v27 = *((_QWORD *)v23 + 5);
          v209 = v22;
          v204 = v23[1];
          if (v20)
          {
            v29 = *(os_unfair_lock_s **)(v27 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v29);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v19);
          sub_1B19F66A0(v173, (uint64_t)v230, &qword_1ED4B7FB0);
          v30 = v180[4];
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v180[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
          v180[7] = v31;
          v172[1] = 0;
          v172[2] = 0;
          *v172 = 0;
          swift_release();
          v32 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v25, v26, v28, (uint64_t)v180);
          v33 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v25, v26, v28, (uint64_t)v180);
          v179 = v27;
          v34 = sub_1B1A12038((uint64_t)&type metadata for SmoothMotion, (uint64_t)&off_1E63779C8, v25, v26, v28, (uint64_t)v180);
          v35 = (float *)v34;
          __asm { FMOV            V0.4S, #1.0 }
          v181 = _Q0;
          if (v25)
          {
            if (v28)
            {
              v41 = (float32x4_t *)(v32 + 32);
              v42 = (_OWORD *)(v33 + 32);
              v43 = v178;
              v22 = v209;
              do
              {
                v70 = *((float32x4_t *)v42 - 2);
                v69 = *((float32x4_t *)v42 - 1);
                v71 = *(float32x4_t *)v42;
                v72 = *((__n128 *)v42 + 1);
                v182 = *v35;
                v205 = *v41;
                v210 = (__n128)v41[1];
                v192 = v41[-2];
                v194 = v41[-1];
                v240[0] = 0uLL;
                v239 = 0uLL;
                v238.i32[2] = 0;
                v238.i64[0] = 0;
                v237.i32[2] = 0;
                v237.i64[0] = 0;
                v236.i32[2] = 0;
                v236.i64[0] = 0;
                v235.i32[2] = 0;
                v235.i64[0] = 0;
                v186 = v69;
                v188 = v70;
                v184 = v71;
                v190 = v72;
                v73 = sub_1B1802048(v240, (__n128 *)&v238, &v236, v70, v69, v71, v72);
                v74 = sub_1B1802048(&v239, (__n128 *)&v237, &v235, v192, v194, v205, v210);
                if (v73)
                {
                  v64 = v188;
                  v54 = (float32x4_t)v190;
                  v68 = v184;
                  v66 = v186;
                  if (v74)
                  {
                    v75 = (int8x16_t)vmulq_f32(v240[0], v239);
                    v206 = v239;
                    v211 = v240[0];
                    v76 = 1.0;
                    if (vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL))) >= 0.0)
                    {
                      v90 = vsubq_f32(v240[0], v239);
                      v91 = (int8x16_t)vmulq_f32(v90, v90);
                      v92 = vaddq_f32(v240[0], v239);
                      v93 = (int8x16_t)vmulq_f32(v92, v92);
                      v94 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v91.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)))));
                      v95 = v94 + v94;
                      v96 = 1.0;
                      if ((float)(v94 + v94) != 0.0)
                        v96 = sinf(v94 + v94) / v95;
                      v84 = v182;
                      v97 = (float)(1.0 - v182) * v95;
                      if (v97 != 0.0)
                      {
                        v197 = v96;
                        v98 = sinf((float)(1.0 - v182) * v95);
                        v96 = v197;
                        v84 = v182;
                        v76 = v98 / v97;
                      }
                      v99 = v84 * v95;
                      v100 = 1.0;
                      if (v99 != 0.0)
                      {
                        v198 = v96;
                        v101 = sinf(v99);
                        v96 = v198;
                        v84 = v182;
                        v100 = v101 / v99;
                      }
                      v102 = v96;
                      v103 = vrecpe_f32((float32x2_t)LODWORD(v96));
                      v104 = (int32x2_t)vmul_f32(v103, vrecps_f32((float32x2_t)LODWORD(v102), v103));
                      v105 = vmul_f32((float32x2_t)v104, vrecps_f32((float32x2_t)LODWORD(v102), (float32x2_t)v104)).f32[0];
                      *(float *)v104.i32 = (float)(1.0 - v182) * (float)(v105 * v76);
                      v48 = vmlaq_f32(vmulq_n_f32(v206, v84 * (float)(v105 * v100)), v211, (float32x4_t)vdupq_lane_s32(v104, 0));
                    }
                    else
                    {
                      v77 = vaddq_f32(v240[0], v239);
                      v78 = (int8x16_t)vmulq_f32(v77, v77);
                      v79 = vsubq_f32(v240[0], v239);
                      v80 = (int8x16_t)vmulq_f32(v79, v79);
                      v81 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v78.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL)))));
                      v82 = v81 + v81;
                      v83 = 1.0;
                      if ((float)(v81 + v81) != 0.0)
                        v83 = sinf(v81 + v81) / v82;
                      v84 = v182;
                      v85 = (float)(1.0 - v182) * v82;
                      if (v85 != 0.0)
                      {
                        v195 = v83;
                        v86 = sinf((float)(1.0 - v182) * v82);
                        v83 = v195;
                        v84 = v182;
                        v76 = v86 / v85;
                      }
                      v87 = v84 * v82;
                      v88 = 1.0;
                      if (v87 != 0.0)
                      {
                        v196 = v83;
                        v89 = sinf(v87);
                        v83 = v196;
                        v84 = v182;
                        v88 = v89 / v87;
                      }
                      v44 = v83;
                      v45 = vrecpe_f32((float32x2_t)LODWORD(v83));
                      v46 = (int32x2_t)vmul_f32(v45, vrecps_f32((float32x2_t)LODWORD(v44), v45));
                      v47 = vmul_f32((float32x2_t)v46, vrecps_f32((float32x2_t)LODWORD(v44), (float32x2_t)v46)).f32[0];
                      *(float *)v46.i32 = (float)(1.0 - v182) * (float)(v47 * v76);
                      v48 = vmlaq_f32(vmulq_n_f32(vnegq_f32(v206), v84 * (float)(v47 * v88)), v211, (float32x4_t)vdupq_lane_s32(v46, 0));
                    }
                    v49 = (int8x16_t)vmulq_f32(v48, v48);
                    *(float32x2_t *)v49.i8 = vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
                    v50 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1)), 0);
                    v51 = vrsqrteq_f32(v50);
                    v52 = vmulq_f32(v51, vrsqrtsq_f32(v50, vmulq_f32(v51, v51)));
                    v53 = vmulq_f32(v48, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v50), v181, (int8x16_t)vmulq_f32(v52, vrsqrtsq_f32(v50, vmulq_f32(v52, v52)))));
                    v54 = vmlaq_n_f32(v238, vsubq_f32(v237, v238), v84);
                    v54.i32[3] = 1.0;
                    v55 = vmlaq_n_f32(v236, vsubq_f32(v235, v236), v84);
                    v56 = vabsq_f32(v55);
                    v56.i32[3] = 0;
                    v57.i64[0] = 0x8000000080000000;
                    v57.i64[1] = 0x8000000080000000;
                    v58 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v55, v57), (int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v56, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
                    v59 = vmulq_f32(v53, v53);
                    v60 = vmulq_laneq_f32(v53, v53, 3);
                    v61 = vmulq_lane_f32(v53, *(float32x2_t *)v53.f32, 1).f32[0];
                    v62 = vaddq_f32(v58, v58);
                    v59.f32[0] = 0.5 - v59.f32[0];
                    *(float32x2_t *)v53.f32 = vmul_laneq_f32(*(float32x2_t *)v53.f32, v53, 2);
                    v63.i32[3] = 0;
                    v63.f32[0] = (float)(0.5 - v59.f32[1]) - v59.f32[2];
                    v63.f32[1] = v61 + v60.f32[2];
                    v63.f32[2] = v53.f32[0] - v60.f32[1];
                    v64 = vmulq_n_f32(v63, v62.f32[0]);
                    v65.i32[3] = 0;
                    v65.f32[0] = v61 - v60.f32[2];
                    v65.f32[1] = v59.f32[0] - v59.f32[2];
                    v65.f32[2] = v53.f32[1] + v60.f32[0];
                    v66 = vmulq_lane_f32(v65, *(float32x2_t *)v62.f32, 1);
                    *(int32x2_t *)v60.f32 = vrev64_s32(*(int32x2_t *)v60.f32);
                    v67.i32[0] = vadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v60.f32).u32[0];
                    v67.i32[1] = vsub_f32(*(float32x2_t *)&v53, *(float32x2_t *)&v60).i32[1];
                    v67.f32[2] = v59.f32[0] - v59.f32[1];
                    v67.i32[3] = 0;
                    v68 = vmulq_laneq_f32(v67, v62, 2);
                  }
                }
                else
                {
                  v64 = v188;
                  v54 = (float32x4_t)v190;
                  v68 = v184;
                  v66 = v186;
                }
                v41[-2] = v64;
                v41[-1] = v66;
                ++v35;
                *v41 = v68;
                v41[1] = v54;
                v41 += 4;
                v42 += 4;
                --v28;
              }
              while (v28);
              goto LABEL_44;
            }
          }
          else if ((_DWORD)v24 != (_DWORD)v204)
          {
            v106 = v204 - v24;
            v107 = (float *)(v34 + 4 * v24);
            v108 = (float32x4_t *)(v32 + (v24 << 6) + 32);
            v109 = (_OWORD *)(v33 + (v24 << 6) + 32);
            v43 = v178;
            v22 = v209;
            do
            {
              v136 = *((float32x4_t *)v109 - 2);
              v135 = *((float32x4_t *)v109 - 1);
              v137 = *(float32x4_t *)v109;
              v138 = *((__n128 *)v109 + 1);
              v183 = *v107;
              v207 = *v108;
              v212 = (__n128)v108[1];
              v193 = v108[-2];
              v199 = v108[-1];
              v240[0] = 0uLL;
              v239 = 0uLL;
              v238.i32[2] = 0;
              v238.i64[0] = 0;
              v237.i32[2] = 0;
              v237.i64[0] = 0;
              v236.i32[2] = 0;
              v236.i64[0] = 0;
              v235.i32[2] = 0;
              v235.i64[0] = 0;
              v187 = v135;
              v189 = v136;
              v185 = v137;
              v191 = v138;
              v139 = sub_1B1802048(v240, (__n128 *)&v238, &v236, v136, v135, v137, v138);
              v140 = sub_1B1802048(&v239, (__n128 *)&v237, &v235, v193, v199, v207, v212);
              if (v139)
              {
                v130 = v189;
                v120 = (float32x4_t)v191;
                v134 = v185;
                v132 = v187;
                if (v140)
                {
                  v141 = (int8x16_t)vmulq_f32(v240[0], v239);
                  v208 = v239;
                  v213 = v240[0];
                  v142 = 1.0;
                  if (vaddv_f32(vadd_f32(*(float32x2_t *)v141.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL))) >= 0.0)
                  {
                    v156 = vsubq_f32(v240[0], v239);
                    v157 = (int8x16_t)vmulq_f32(v156, v156);
                    v158 = vaddq_f32(v240[0], v239);
                    v159 = (int8x16_t)vmulq_f32(v158, v158);
                    v160 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v157.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v159.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL)))));
                    v161 = v160 + v160;
                    v162 = 1.0;
                    if ((float)(v160 + v160) != 0.0)
                      v162 = sinf(v160 + v160) / v161;
                    v150 = v183;
                    v163 = (float)(1.0 - v183) * v161;
                    if (v163 != 0.0)
                    {
                      v202 = v162;
                      v164 = sinf((float)(1.0 - v183) * v161);
                      v162 = v202;
                      v150 = v183;
                      v142 = v164 / v163;
                    }
                    v165 = v150 * v161;
                    v166 = 1.0;
                    if (v165 != 0.0)
                    {
                      v203 = v162;
                      v167 = sinf(v165);
                      v162 = v203;
                      v150 = v183;
                      v166 = v167 / v165;
                    }
                    v168 = v162;
                    v169 = vrecpe_f32((float32x2_t)LODWORD(v162));
                    v170 = (int32x2_t)vmul_f32(v169, vrecps_f32((float32x2_t)LODWORD(v168), v169));
                    v171 = vmul_f32((float32x2_t)v170, vrecps_f32((float32x2_t)LODWORD(v168), (float32x2_t)v170)).f32[0];
                    *(float *)v170.i32 = (float)(1.0 - v183) * (float)(v171 * v142);
                    v114 = vmlaq_f32(vmulq_n_f32(v208, v150 * (float)(v171 * v166)), v213, (float32x4_t)vdupq_lane_s32(v170, 0));
                  }
                  else
                  {
                    v143 = vaddq_f32(v240[0], v239);
                    v144 = (int8x16_t)vmulq_f32(v143, v143);
                    v145 = vsubq_f32(v240[0], v239);
                    v146 = (int8x16_t)vmulq_f32(v145, v145);
                    v147 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v144.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v146.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL)))));
                    v148 = v147 + v147;
                    v149 = 1.0;
                    if ((float)(v147 + v147) != 0.0)
                      v149 = sinf(v147 + v147) / v148;
                    v150 = v183;
                    v151 = (float)(1.0 - v183) * v148;
                    if (v151 != 0.0)
                    {
                      v200 = v149;
                      v152 = sinf((float)(1.0 - v183) * v148);
                      v149 = v200;
                      v150 = v183;
                      v142 = v152 / v151;
                    }
                    v153 = v150 * v148;
                    v154 = 1.0;
                    if (v153 != 0.0)
                    {
                      v201 = v149;
                      v155 = sinf(v153);
                      v149 = v201;
                      v150 = v183;
                      v154 = v155 / v153;
                    }
                    v110 = v149;
                    v111 = vrecpe_f32((float32x2_t)LODWORD(v149));
                    v112 = (int32x2_t)vmul_f32(v111, vrecps_f32((float32x2_t)LODWORD(v110), v111));
                    v113 = vmul_f32((float32x2_t)v112, vrecps_f32((float32x2_t)LODWORD(v110), (float32x2_t)v112)).f32[0];
                    *(float *)v112.i32 = (float)(1.0 - v183) * (float)(v113 * v142);
                    v114 = vmlaq_f32(vmulq_n_f32(vnegq_f32(v208), v150 * (float)(v113 * v154)), v213, (float32x4_t)vdupq_lane_s32(v112, 0));
                  }
                  v115 = (int8x16_t)vmulq_f32(v114, v114);
                  *(float32x2_t *)v115.i8 = vadd_f32(*(float32x2_t *)v115.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
                  v116 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v115.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 1)), 0);
                  v117 = vrsqrteq_f32(v116);
                  v118 = vmulq_f32(v117, vrsqrtsq_f32(v116, vmulq_f32(v117, v117)));
                  v119 = vmulq_f32(v114, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v116), v181, (int8x16_t)vmulq_f32(v118, vrsqrtsq_f32(v116, vmulq_f32(v118, v118)))));
                  v120 = vmlaq_n_f32(v238, vsubq_f32(v237, v238), v150);
                  v120.i32[3] = 1.0;
                  v121 = vmlaq_n_f32(v236, vsubq_f32(v235, v236), v150);
                  v122 = vabsq_f32(v121);
                  v122.i32[3] = 0;
                  v123.i64[0] = 0x8000000080000000;
                  v123.i64[1] = 0x8000000080000000;
                  v124 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v121, v123), (int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v122, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
                  v125 = vmulq_f32(v119, v119);
                  v126 = vmulq_laneq_f32(v119, v119, 3);
                  v127 = vmulq_lane_f32(v119, *(float32x2_t *)v119.f32, 1).f32[0];
                  v128 = vaddq_f32(v124, v124);
                  v125.f32[0] = 0.5 - v125.f32[0];
                  *(float32x2_t *)v119.f32 = vmul_laneq_f32(*(float32x2_t *)v119.f32, v119, 2);
                  v129.i32[3] = 0;
                  v129.f32[0] = (float)(0.5 - v125.f32[1]) - v125.f32[2];
                  v129.f32[1] = v127 + v126.f32[2];
                  v129.f32[2] = v119.f32[0] - v126.f32[1];
                  v130 = vmulq_n_f32(v129, v128.f32[0]);
                  v131.i32[3] = 0;
                  v131.f32[0] = v127 - v126.f32[2];
                  v131.f32[1] = v125.f32[0] - v125.f32[2];
                  v131.f32[2] = v119.f32[1] + v126.f32[0];
                  v132 = vmulq_lane_f32(v131, *(float32x2_t *)v128.f32, 1);
                  *(int32x2_t *)v126.f32 = vrev64_s32(*(int32x2_t *)v126.f32);
                  v133.i32[0] = vadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v126.f32).u32[0];
                  v133.i32[1] = vsub_f32(*(float32x2_t *)&v119, *(float32x2_t *)&v126).i32[1];
                  v133.f32[2] = v125.f32[0] - v125.f32[1];
                  v133.i32[3] = 0;
                  v134 = vmulq_laneq_f32(v133, v128, 2);
                }
              }
              else
              {
                v130 = v189;
                v120 = (float32x4_t)v191;
                v134 = v185;
                v132 = v187;
              }
              v108[-2] = v130;
              v108[-1] = v132;
              ++v107;
              *v108 = v134;
              v108[1] = v120;
              v108 += 4;
              v109 += 4;
              --v106;
            }
            while (v106);
            goto LABEL_44;
          }
          v43 = v178;
          v22 = v209;
LABEL_44:
          sub_1B1F05D48(v180, (unsigned __int16 **)v228, (uint64_t)v230);
          sub_1B1F03804((char *)v179);
          v19 = v176;
          ecs_stack_allocator_pop_snapshot(v176);
          v20 = v175;
          if ((v175 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v179 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v179 + 376));
          }
          swift_release();
          v21 = v43 + 1;
          if (v21 == v177)
          {
            sub_1B19ED748((uint64_t *)v215);
            return sub_1B19ED748((uint64_t *)v215);
          }
        }
      }
    }
    return sub_1B19ED748((uint64_t *)v215);
  }
  return result;
}

uint64_t type metadata accessor for SmoothMotionSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SmoothMotion()
{
  return &type metadata for SmoothMotion;
}

uint64_t sub_1B1E2BCA0()
{
  uint64_t v0;
  __int128 v1;
  uint64_t inited;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[40];
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v16 = qword_1ED4D09F8;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  swift_retain();
  sub_1B1A1496C(2, 1, 1, (uint64_t)v5);
  swift_release();
  v1 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v6;
  v10 = qword_1ED4D09F8;
  v11 = 0;
  v12 = 2;
  v13 = 0;
  v14 = 2;
  v15 = 0;
  swift_retain();
  sub_1B1E3CDEC(1, (uint64_t)v7);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E63AA9D8;
  sub_1B1B44110(v8, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v7);
  v3 = v8[1];
  *(_OWORD *)(v0 + 56) = v8[0];
  *(_OWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 88) = v9;
  return v0;
}

uint64_t sub_1B1E2BE2C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1E2BCA0();
  return v0;
}

const char *sub_1B1E2BE60()
{
  return "SmoothMotionSystem";
}

unint64_t sub_1B1E2BE78()
{
  unint64_t result;

  result = qword_1EEF5F398;
  if (!qword_1EEF5F398)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298004, &type metadata for SmoothMotion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F398);
  }
  return result;
}

void sub_1B1E2BEBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E2BE78();
    v7 = a3(a1, &type metadata for SmoothMotion.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for SmoothMotion.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1E2BF58 + 4 * byte_1B2297E60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1E2BF78 + 4 * byte_1B2297E65[v4]))();
}

_BYTE *sub_1B1E2BF58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1E2BF78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E2BF80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E2BF88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E2BF90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E2BF98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SmoothMotion.CodingKeys()
{
  return &type metadata for SmoothMotion.CodingKeys;
}

unint64_t sub_1B1E2BFB8()
{
  unint64_t result;

  result = qword_1EEF5F3A8;
  if (!qword_1EEF5F3A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297FDC, &type metadata for SmoothMotion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F3A8);
  }
  return result;
}

unint64_t sub_1B1E2C000()
{
  unint64_t result;

  result = qword_1EEF5F3B0;
  if (!qword_1EEF5F3B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297F4C, &type metadata for SmoothMotion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F3B0);
  }
  return result;
}

unint64_t sub_1B1E2C048()
{
  unint64_t result;

  result = qword_1EEF5F3B8;
  if (!qword_1EEF5F3B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297F74, &type metadata for SmoothMotion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F3B8);
  }
  return result;
}

uint64_t sub_1B1E2C08C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11[4];

  if ((a1 & 1) != 0)
  {
    v7 = 0;
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v6)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v6)
    {
      v7 = 0;
      goto LABEL_10;
    }
    v7 = *(_BYTE *)(v6 + 80);
    goto LABEL_8;
  }
  v7 = v6 != 0;
  if (v6)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v6 + 48);
    v6 = *(_QWORD *)(v6 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v9[0] = a2;
  v9[2] = v6;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v10 = v7;
  sub_1B1A02530((uint64_t)v9, (uint64_t)v11);
  sub_1B20C8350(v11, a3);
  sub_1B1A0256C((uint64_t)v11);
  sub_1B1E31340((a1 & 4) == 0);
  return swift_release();
}

uint64_t sub_1B1E2C1BC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  _QWORD v9[3];
  char v10;
  _BYTE v11[32];

  if ((a1 & 1) != 0)
  {
    v7 = 0;
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v6)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v6)
    {
      v7 = 0;
      goto LABEL_10;
    }
    v7 = *(_BYTE *)(v6 + 80);
    goto LABEL_8;
  }
  v7 = v6 != 0;
  if (v6)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v6 + 48);
    v6 = *(_QWORD *)(v6 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v9[0] = a2;
  v9[2] = v6;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v10 = v7;
  sub_1B1A02530((uint64_t)v9, (uint64_t)v11);
  sub_1B1E2D4B8(*(_QWORD *)(a3 + 24), 1);
  sub_1B1A0256C((uint64_t)v11);
  sub_1B1E31340((a1 & 4) == 0);
  return swift_release();
}

uint64_t sub_1B1E2C2DC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  char v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15[4];

  if ((a1 & 1) != 0)
  {
    v11 = 0;
    v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v10)
      goto LABEL_10;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v10)
    {
      v11 = 0;
      goto LABEL_10;
    }
    v11 = *(_BYTE *)(v10 + 80);
    goto LABEL_8;
  }
  v11 = v10 != 0;
  if (v10)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v10 + 48);
    v10 = *(_QWORD *)(v10 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v13[0] = a2;
  v13[2] = v10;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v14 = v11;
  sub_1B1A02530((uint64_t)v13, (uint64_t)v15);
  sub_1B1E31A18(v15, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32));
  sub_1B1A0256C((uint64_t)v15);
  sub_1B1E31340((a1 & 4) == 0);
  swift_release();
  return swift_release();
}

void sub_1B1E2C434(char a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  char v9;
  _QWORD v10[3];
  char v11;
  _QWORD v12[4];

  if ((a1 & 1) != 0)
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v8)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v8)
    {
      v9 = 0;
      goto LABEL_10;
    }
    v9 = *(_BYTE *)(v8 + 80);
    goto LABEL_8;
  }
  v9 = v8 != 0;
  if (v8)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v8 + 48);
    v8 = *(_QWORD *)(v8 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v10[0] = a2;
  v10[2] = v8;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v11 = v9;
  sub_1B1A02530((uint64_t)v10, (uint64_t)v12);
  sub_1B1FFA2C0(v12, a3, a4);
  sub_1B1A0256C((uint64_t)v12);
  sub_1B1E31340((a1 & 4) == 0);
}

uint64_t sub_1B1E2C574(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  _QWORD v13[3];
  char v14;
  _BYTE v15[32];

  if ((a1 & 1) != 0)
  {
    v11 = 0;
    v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v10)
      goto LABEL_10;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v10)
    {
      v11 = 0;
      goto LABEL_10;
    }
    v11 = *(_BYTE *)(v10 + 80);
    goto LABEL_8;
  }
  v11 = v10 != 0;
  if (v10)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v10 + 48);
    v10 = *(_QWORD *)(v10 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v13[0] = a2;
  v13[2] = v10;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v14 = v11;
  sub_1B1A02530((uint64_t)v13, (uint64_t)v15);
  sub_1B1D33640((uint64_t)v15, a3, a4, a5);
  sub_1B1A0256C((uint64_t)v15);
  sub_1B1E31340((a1 & 4) == 0);
  return swift_release();
}

uint64_t sub_1B1E2C6BC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  char v11;
  _QWORD v13[3];
  char v14;
  _BYTE v15[32];

  if ((a1 & 1) != 0)
  {
    v11 = 0;
    v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v10)
      goto LABEL_10;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v10)
    {
      v11 = 0;
      goto LABEL_10;
    }
    v11 = *(_BYTE *)(v10 + 80);
    goto LABEL_8;
  }
  v11 = v10 != 0;
  if (v10)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v10 + 48);
    v10 = *(_QWORD *)(v10 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v13[0] = a2;
  v13[2] = v10;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v14 = v11;
  sub_1B1A02530((uint64_t)v13, (uint64_t)v15);
  sub_1B1D46E28((uint64_t)v15, a3, a4, a5);
  sub_1B1A0256C((uint64_t)v15);
  sub_1B1E31340((a1 & 4) == 0);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1E2C80C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  char v19;
  _BYTE v20[32];
  uint64_t v21;

  if ((a1 & 1) != 0)
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (v8)
      goto LABEL_8;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if ((a1 & 2) != 0)
    {
      v9 = v8 != 0;
      if (!v8)
        goto LABEL_10;
      goto LABEL_8;
    }
    if (v8)
    {
      v9 = *(_BYTE *)(v8 + 80);
LABEL_8:
      MEMORY[0x1B5E240CC](v8 + 48);
      v8 = *(_QWORD *)(v8 + 56);
      goto LABEL_10;
    }
    v9 = 0;
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v12[0] = a2;
  v12[2] = v8;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  LOBYTE(v13) = v9;
  sub_1B1A02530((uint64_t)v12, (uint64_t)v20);
  sub_1B1D4BCB0((uint64_t)v20, (uint64_t)v18);
  v21 = a3;
  swift_retain_n();
  sub_1B1F58DC0(&v21, a4);
  if (v19 == 1)
  {
    swift_unownedRetainStrong();
    v13 = type metadata accessor for EntityManager();
    v14 = &off_1E637A748;
    v12[0] = a3;
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = sub_1B1E34CC4;
    *(_QWORD *)(v10 + 24) = a4;
    v15 = sub_1B1E34CCC;
    v16 = v10;
    v17 = 14;
    swift_retain();
    swift_retain();
    sub_1B1E2DB30((uint64_t)v12);
    swift_release();
    sub_1B1ADF058((uint64_t)v12);
  }
  swift_release_n();
  sub_1B1A0256C((uint64_t)v18);
  sub_1B1A0256C((uint64_t)v20);
  sub_1B1E31340((a1 & 4) == 0);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1E2C9F8(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  char v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13[4];

  if ((a1 & 1) != 0)
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v8)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v8)
    {
      v9 = 0;
      goto LABEL_10;
    }
    v9 = *(_BYTE *)(v8 + 80);
    goto LABEL_8;
  }
  v9 = v8 != 0;
  if (v8)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v8 + 48);
    v8 = *(_QWORD *)(v8 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v11[0] = a2;
  v11[2] = v8;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v12 = v9;
  sub_1B1A02530((uint64_t)v11, (uint64_t)v13);
  sub_1B1DBEFE4(v13, a3, (uint64_t)a4);
  sub_1B1A0256C((uint64_t)v13);
  sub_1B1E31340((a1 & 4) == 0);

  return swift_unknownObjectRelease();
}

void sub_1B1E2CB34(char a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  char v9;
  _QWORD v10[3];
  char v11;
  uint64_t v12[4];

  if ((a1 & 1) != 0)
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v8)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v8)
    {
      v9 = 0;
      goto LABEL_10;
    }
    v9 = *(_BYTE *)(v8 + 80);
    goto LABEL_8;
  }
  v9 = v8 != 0;
  if (v8)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v8 + 48);
    v8 = *(_QWORD *)(v8 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v10[0] = a2;
  v10[2] = v8;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v11 = v9;
  sub_1B1A02530((uint64_t)v10, (uint64_t)v12);
  sub_1B1DBF418(v12, a3, (uint64_t)a4);
  sub_1B1A0256C((uint64_t)v12);
  sub_1B1E31340((a1 & 4) == 0);

}

void sub_1B1E2CC6C(char a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  char v7;
  _QWORD v8[3];
  char v9;
  _BYTE v10[32];

  if ((a1 & 1) != 0)
  {
    v7 = 0;
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v6)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v6)
    {
      v7 = 0;
      goto LABEL_10;
    }
    v7 = *(_BYTE *)(v6 + 80);
    goto LABEL_8;
  }
  v7 = v6 != 0;
  if (v6)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v6 + 48);
    v6 = *(_QWORD *)(v6 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v8[0] = a2;
  v8[2] = v6;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v9 = v7;
  sub_1B1A02530((uint64_t)v8, (uint64_t)v10);
  sub_1B1E2DD94(*(_QWORD *)&a3[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity]);
  sub_1B1A0256C((uint64_t)v10);
  sub_1B1E31340((a1 & 4) == 0);

}

unint64_t sub_1B1E2CD8C(char a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t KeyPath;
  _QWORD v13[3];
  char v14;
  _BYTE v15[32];

  if ((a1 & 1) != 0)
  {
    v8 = 0;
    v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v7)
      goto LABEL_10;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v7)
    {
      v8 = 0;
      goto LABEL_10;
    }
    v8 = *(_BYTE *)(v7 + 80);
    goto LABEL_8;
  }
  v8 = v7 != 0;
  if (v7)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v7 + 48);
    v7 = *(_QWORD *)(v7 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v13[0] = a2;
  v13[2] = v7;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v14 = v8;
  sub_1B1A02530((uint64_t)v13, (uint64_t)v15);
  v9 = swift_bridgeObjectRetain();
  LOBYTE(v13[0]) = 1;
  v10 = sub_1B1E32B14(v9, MEMORY[0x1E0DEE9D8], 1, 0x100000000uLL);
  swift_bridgeObjectRelease();
  sub_1B1E350A8(v10, a4);
  sub_1B1D4BCB0((uint64_t)v15, (uint64_t)v13);
  KeyPath = swift_getKeyPath();
  sub_1B1E2DC58(a4, KeyPath, v10);
  swift_release();
  sub_1B1A0256C((uint64_t)v13);
  sub_1B1A0256C((uint64_t)v15);
  sub_1B1E31340((a1 & 4) == 0);
  return v10;
}

uint64_t sub_1B1E2CF30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = swift_bridgeObjectRetain();
    v3 = v1 - 1;
    v4 = v2 + 40;
    do
    {
      v5 = v3;
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 24))();
      if ((v6 & 1) != 0)
        break;
      v3 = v5 - 1;
      v4 += 16;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1B1E2CFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, double);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = *(void (**)(char *, uint64_t, double))(v12 + 16);
  v13((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5AB10);
  if (swift_dynamicCast())
  {
    sub_1B1A02518(&v18, (uint64_t)v21);
    v14 = v22;
    v15 = v23;
    sub_1B19FA070(v21, v22);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
    *((_QWORD *)&v19 + 1) = v14;
    v20 = v15;
    sub_1B1A137F4((uint64_t *)&v18);
    v16(v5, a4, v14, v15);
    swift_dynamicCast();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v21);
  }
  else
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    sub_1B1E34C34((uint64_t)&v18, qword_1EEF5F3E0, (unint64_t *)&qword_1EEF5AB10);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a5, a1, a3);
  }
}

uint64_t sub_1B1E2D124(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[64];

  if (a2 != 0xFFFFFFFF)
  {
    v5 = v4;
    v9 = result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C(a3, *(_QWORD *)(a4 + 8), a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1FD6D8C(v9, a2, a3, a4);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
    {
      v11 = result;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4) & 1) != 0)
      {
        v12 = v11 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
        v13 = type metadata accessor for ScriptingConfiguration();
        ++*(_QWORD *)(v12 + *(int *)(v13 + 36));
      }
      result = swift_unknownObjectRelease();
    }
    if (*(_BYTE *)(v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      sub_1B1E2F65C(v9, a2, !v10, a3, a4, (uint64_t)v14);
      sub_1B1E2DB30((uint64_t)v14);
      swift_release();
      return sub_1B1ADF058((uint64_t)v14);
    }
  }
  return result;
}

uint64_t sub_1B1E2D290(uint64_t result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = v3;
  v7 = result;
  v8 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v9 = *v3;
    swift_unownedRetainStrong();
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1FE1E1C(v7, a2, a3, 0);
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
    {
      v10 = result;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(v7, a2) & 1) != 0)
      {
        v11 = v10 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
        v12 = type metadata accessor for ScriptingConfiguration();
        ++*(_QWORD *)(v11 + *(int *)(v12 + 36));
      }
      result = swift_unknownObjectRelease();
    }
    if (*((_BYTE *)v4 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v13[0] = a3;
      v13[1] = v8;
      v14 = v9;
      v15 = v7;
      v16 = a2;
      v17 = 13;
      sub_1B1E2DB30((uint64_t)v13);
      swift_release();
      return sub_1B1ADF058((uint64_t)v13);
    }
  }
  return result;
}

uint64_t sub_1B1E2D3C0(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _BYTE v9[64];

  if (a3 != 0xFFFFFFFF)
  {
    v8 = result;
    swift_unownedRetainStrong();
    swift_release();
    if (swift_unknownObjectUnownedLoadStrong())
      swift_unknownObjectRelease();
    swift_unownedRetainStrong();
    sub_1B1E1D678(v8, a3, a2, a4);
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*(_BYTE *)(v4 + 24) == 1)
    {
      swift_unownedRetainStrong();
      sub_1B1E2DA0C(v8, a2, a4, (uint64_t)v9);
      sub_1B1E2DB30((uint64_t)v9);
      swift_release();
      return sub_1B1ADF058((uint64_t)v9);
    }
  }
  return result;
}

unint64_t sub_1B1E2D4B8(unint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  char v15;
  char v16;

  v3 = v2;
  v5 = result;
  v6 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    swift_unownedRetainStrong();
    swift_release();
    if ((a2 & 1) != 0)
    {
      Strong = swift_unknownObjectUnownedLoadStrong();
      if (Strong)
      {
        v8 = Strong;
        swift_retain();
        v9 = sub_1B1FE162C(v5);
        swift_release();
        v10 = *(_QWORD *)(v9 + 16);
        if (v10)
        {
          swift_bridgeObjectRetain();
          v11 = v9 + 40;
          while (((*(uint64_t (**)(void))(*(_QWORD *)v11 + 24))() & 1) == 0)
          {
            v11 += 16;
            if (!--v10)
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_12;
            }
          }
          swift_bridgeObjectRelease_n();
          v12 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
          v13 = type metadata accessor for ScriptingConfiguration();
          ++*(_QWORD *)(v12 + *(int *)(v13 + 36));
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
LABEL_12:
          swift_bridgeObjectRelease();
        }
      }
      swift_unownedRetainStrong();
      sub_1B1FE16DC((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C55D8, v5);
      swift_release();
      result = swift_unknownObjectUnownedLoadStrong();
      if (!result)
        goto LABEL_16;
    }
    else
    {
      swift_unownedRetainStrong();
      sub_1B1FE1E1C((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C55D8, v5, 0);
      swift_release();
      result = swift_unknownObjectUnownedLoadStrong();
      if (!result)
      {
LABEL_16:
        if (*(_BYTE *)(v3 + 24) == 1)
        {
          swift_unownedRetainStrong();
          v14[0] = v5;
          v14[1] = v6;
          v15 = a2 & 1;
          v16 = 6;
          sub_1B1E2DB30((uint64_t)v14);
          swift_release();
          return sub_1B1ADF058((uint64_t)v14);
        }
        return result;
      }
    }
    result = swift_unknownObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1B1E2D6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[8];

  v10[7] = a3;
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a1;
  v10[5] = a2;
  v6 = sub_1B2228B6C();
  v7 = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v6);
  return sub_1B1D5E618((void (*)(char *, char *))sub_1B1E34B74, (uint64_t)v10, v6, a4, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
}

uint64_t sub_1B1E2D74C(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *v4;
  swift_unownedRetainStrong();
  swift_release();
  if (v9 == a2)
    return sub_1B1E31804(a1, a4 | ((HIDWORD(a4) & 1) << 32));
  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream) && swift_weakLoadStrong())
  {
    swift_release();
    v10 = MEMORY[0x1E0DEE9D8];
    v11 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for RemapContext();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 24) = sub_1B1B95EBC(v10);
    v13 = sub_1B1B7DC84(v10);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 24) = v11;
    *(_QWORD *)(v12 + 32) = v13;
    *(_BYTE *)(v12 + 16) = a3 & 1;
    swift_unownedRetainStrong();
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = a1 + 36;
      do
      {
        sub_1B1DA67D0(*(_QWORD *)(v15 - 4), v12);
        v15 += 8;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    swift_retain();
    swift_retain();
    sub_1B1E2C2DC(0, a2, v12, v9, a4 | ((HIDWORD(a4) & 1) << 32));
    swift_retain();
    v16 = sub_1B1E34E70(a1, v12);
    swift_release();
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for RemapContext();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 24) = sub_1B1B95EBC(v18);
    v21 = sub_1B1B7DC84(v18);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v20 + 24) = v19;
    *(_QWORD *)(v20 + 32) = v21;
    *(_BYTE *)(v20 + 16) = a3 & 1;
    v22 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    swift_unownedRetainStrong();
    v23 = *(_QWORD *)(a1 + 16);
    if (v23)
    {
      swift_bridgeObjectRetain();
      v24 = a1 + 36;
      do
      {
        sub_1B1DA67D0(*(_QWORD *)(v24 - 4), v20);
        v24 += 8;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    sub_1B1F07378(v20, v9, 0x100000000uLL, 0, v22);
    swift_retain();
    v16 = sub_1B1E34E70(a1, v20);
    swift_release();
  }
  swift_release_n();
  return v16;
}

uint64_t sub_1B1E2DA0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x1E0DEC880];
  v9 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  v10 = MEMORY[0x1E0C80A78](a1, a1);
  v12 = (char *)&v23 - v11;
  *(_DWORD *)a4 = v13;
  *(_DWORD *)(a4 + 4) = v14;
  *(_QWORD *)(a4 + 8) = v15;
  (*(void (**)(char *, double))(v16 + 16))((char *)&v23 - v11, v10);
  *(_QWORD *)(a4 + 40) = type metadata accessor for ComponentValueWriter(0, *(_QWORD *)(v7 + *v8), v9, a3);
  *(_QWORD *)(a4 + 48) = &off_1E639B2E0;
  v17 = sub_1B1A137F4((uint64_t *)(a4 + 16));
  v18 = *a2;
  *v17 = (uint64_t)a2;
  v19 = (uint64_t *)(v18 + *v8);
  v20 = v19[1];
  v21 = type metadata accessor for ComponentValueWriter(0, *v19, v20, a3);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))((char *)v17 + *(int *)(v21 + 44), v12, v20);
  *(_BYTE *)(a4 + 56) = 11;
  return swift_retain();
}

uint64_t sub_1B1E2DB30(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE v12[64];

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 81) == 1)
    {
      if (*(_QWORD *)(v2 + 24))
      {
        v3 = result;
        result = swift_weakLoadStrong();
        if (result)
        {
          swift_retain();
          swift_unknownObjectRetain();
          swift_release();
          sub_1B1C18F3C(v3, (uint64_t)v12);
          v4 = *(_QWORD **)(v2 + 16);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v2 + 16) = v4;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v4 = sub_1B1C62F04(0, v4[2] + 1, 1, v4);
            *(_QWORD *)(v2 + 16) = v4;
          }
          v6 = v4[2];
          v7 = v4[3];
          v8 = v6 + 1;
          if (v6 >= v7 >> 1)
          {
            v9 = v4;
            v10 = v4[2];
            v11 = sub_1B1C62F04(v7 > 1, v6 + 1, 1, v9);
            v6 = v10;
            v4 = v11;
            *(_QWORD *)(v2 + 16) = v11;
          }
          v4[2] = v8;
          sub_1B1C18F78((uint64_t)v12, (uint64_t)&v4[8 * v6 + 4]);
          swift_unknownObjectRelease();
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1E2DC58(uint64_t result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char v18;

  v4 = v3;
  v7 = result;
  v8 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v9 = *v3;
    swift_unownedRetainStrong();
    swift_release();
    if (swift_unknownObjectUnownedLoadStrong())
      swift_unknownObjectRelease();
    swift_unownedRetainStrong();
    v10 = sub_1B201C4B8(v7, a2, a3);
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if ((v10 & 1) != 0)
    {
      if (result)
        result = swift_unknownObjectRelease();
      if (*((_BYTE *)v4 + 24) == 1)
      {
        swift_unownedRetainStrong();
        v12[0] = a3;
        v12[1] = v8;
        v13 = v9;
        sub_1B1AE170C();
        v16 = v11;
        v17 = &off_1E639B2E0;
        v14 = a2;
        v15 = v7;
        v18 = 11;
        swift_retain();
        sub_1B1E2DB30((uint64_t)v12);
        swift_release();
        return sub_1B1ADF058((uint64_t)v12);
      }
    }
    else if (result)
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

unint64_t sub_1B1E2DD94(unint64_t result)
{
  uint64_t *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v6[2];
  uint64_t v7;
  char v8;

  v2 = result;
  v3 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    v4 = *v1;
    swift_unownedRetainStrong();
    if ((v2 & 0x80000000) == 0 && v2 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * v2 + 8) == (_DWORD)v3)
        sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v5 + 12 * v2) + 32));
    }
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v1 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v6[0] = v2;
      v6[1] = v3;
      v7 = v4;
      v8 = 10;
      sub_1B1E2DB30((uint64_t)v6);
      swift_release();
      return sub_1B1ADF058((uint64_t)v6);
    }
  }
  return result;
}

uint64_t sub_1B1E2DEC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, double);
  uint64_t v19;
  uint64_t v20;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, double))(v16 + 16);
  v17(v15, v4, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7) == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(a4, v4, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v15, v7);
  type metadata accessor for DefaultRemapper();
  sub_1B1E2CFB4((uint64_t)v10, v19, v7, (uint64_t)&off_1E6383958, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a4, 0, 1, v7);
}

unint64_t sub_1B1E2E00C@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t result;

  result = sub_1B1E33C2C(*v1);
  *a1 = result;
  return result;
}

BOOL sub_1B1E2E03C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  swift_retain();
  if (v3)
  {
    swift_retain();
    swift_release();
    swift_unknownObjectRetain();
    v4 = sub_1B1E33C2C(a1);
    swift_release();
    swift_unknownObjectRelease();
    return v4 != 0xFFFFFFFF;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t sub_1B1E2E0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = sub_1B1E33C2C(*v2);
  v6 = v5;
  v7 = HIDWORD(v5);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX15DefaultRemapper_destinationEntityManager);
  swift_unownedRetainStrong();
  result = swift_release();
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v7;
  *(_QWORD *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_1B1E2E134@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = swift_unownedRetainStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E2E164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t result;

  result = sub_1B1E2D6C0(a1, a2, *v5, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
  *a5 = result;
  return result;
}

uint64_t sub_1B1E2E198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD v101[2];
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  char *v105;
  int64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131[8];
  char v132[8];
  uint64_t v133;

  v114 = a1;
  v11 = sub_1B2229124();
  MEMORY[0x1E0C80A78](v11, v12);
  v113 = (char *)v101 - v13;
  v120 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v112 = (char *)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v107 = (char *)v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v111 = (char *)v101 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v116 = sub_1B2229124();
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116, v24);
  v105 = (char *)v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v117 = (char *)v101 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v101 - v31;
  MEMORY[0x1E0C80A78](v33, v34);
  v108 = (unint64_t)v101 - v35;
  if (swift_conformsToProtocol2())
    v36 = a4;
  else
    v36 = 0;
  if (swift_conformsToProtocol2())
    v37 = a5;
  else
    v37 = 0;
  if (!(v37 | v36))
    goto LABEL_49;
  v121 = a4;
  v38 = sub_1B222850C();
  v133 = v38;
  if (v36)
  {
    v40 = a3 & 0xC000000000000001;
    v110 = a6;
    v109 = TupleTypeMetadata2;
    if (v37)
    {
      v41 = v121;
      if (v40)
      {
        v42 = sub_1B222964C();
        v102 = 0;
        v43 = 0;
        v44 = 0;
        v45 = v42 | 0x8000000000000000;
      }
      else
      {
        v52 = -1 << *(_BYTE *)(a3 + 32);
        v43 = ~v52;
        v53 = *(_QWORD *)(a3 + 64);
        v102 = a3 + 64;
        v54 = -v52;
        if (v54 < 64)
          v55 = ~(-1 << v54);
        else
          v55 = -1;
        v44 = v55 & v53;
        v45 = a3;
      }
      v56 = v108;
      v104 = v45 & 0x7FFFFFFFFFFFFFFFLL;
      v101[1] = v43;
      v103 = (unint64_t)(v43 + 64) >> 6;
      v101[0] = v103 - 1;
      swift_bridgeObjectRetain();
      v57 = 0;
      v106 = (int64_t)v32;
      v105 = (char *)v45;
      if ((v45 & 0x8000000000000000) != 0)
        goto LABEL_24;
LABEL_21:
      if (v44)
      {
        v118 = (v44 - 1) & v44;
        v58 = __clz(__rbit64(v44)) | ((_QWORD)v57 << 6);
        v59 = v57;
LABEL_23:
        (*(void (**)(char *, unint64_t, uint64_t))(v120 + 16))(v32, *(_QWORD *)(v45 + 48) + *(_QWORD *)(v120 + 72) * v58, v41);
        (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(&v32[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v45 + 56) + *(_QWORD *)(v119 + 72) * v58, a5);
        v60 = 0;
        goto LABEL_32;
      }
      v59 = v57 + 1;
      if ((uint64_t)(v57 + 1) >= v103)
      {
        v118 = 0;
        v60 = 1;
        v59 = v57;
        goto LABEL_32;
      }
      v61 = *(_QWORD *)(v102 + 8 * (_QWORD)v59);
      if (v61)
        goto LABEL_28;
      if ((uint64_t)(v57 + 2) >= v103)
      {
        v118 = 0;
        v60 = 1;
        goto LABEL_32;
      }
      v61 = *(_QWORD *)(v102 + 8 * (_QWORD)(v57 + 2));
      if (v61)
      {
        v59 = v57 + 2;
        goto LABEL_28;
      }
      v59 = v57 + 3;
      if ((uint64_t)(v57 + 3) >= v103)
      {
        v118 = 0;
        v60 = 1;
        v59 = v57 + 2;
        goto LABEL_32;
      }
      v61 = *(_QWORD *)(v102 + 8 * (_QWORD)v59);
      if (v61)
      {
LABEL_28:
        v118 = (v61 - 1) & v61;
        v58 = __clz(__rbit64(v61)) + ((_QWORD)v59 << 6);
        goto LABEL_23;
      }
      v76 = v57 + 4;
      while ((char *)v103 != v76)
      {
        v61 = *(_QWORD *)(v102 + 8 * (_QWORD)v76++);
        if (v61)
        {
          v59 = v76 - 1;
          goto LABEL_28;
        }
      }
      v118 = 0;
      v60 = 1;
      v59 = (char *)v101[0];
LABEL_32:
      while (1)
      {
        v62 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v32, v60, 1, TupleTypeMetadata2);
        (*(void (**)(unint64_t, char *, uint64_t))(v115 + 32))(v56, v32, v116);
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v62 + 48))(v56, 1, TupleTypeMetadata2) == 1)goto LABEL_81;
        v63 = v56 + *(int *)(TupleTypeMetadata2 + 48);
        v117 = v59;
        v64 = v119;
        v65 = v111;
        (*(void (**)(char *, unint64_t, uint64_t))(v119 + 32))(v111, v63, a5);
        (*(void (**)(char *, unint64_t, uint64_t))(v120 + 32))(v112, v56, v41);
        sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5AB10);
        swift_dynamicCast();
        sub_1B19FA198((uint64_t)v131, (uint64_t)&v128);
        v66 = v129;
        v67 = v130;
        sub_1B19FA070(&v128, v129);
        v68 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v67 + 8);
        v126 = v66;
        v127 = v67;
        sub_1B1A137F4((uint64_t *)&v125);
        v69 = v114;
        v68(v114, &off_1E6383958, v66, v67);
        sub_1B1A02518(&v125, (uint64_t)v132);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v128);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v131);
        swift_dynamicCast();
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v107, v65, a5);
        swift_dynamicCast();
        sub_1B19FA198((uint64_t)&v128, (uint64_t)&v125);
        v70 = v126;
        v71 = v127;
        sub_1B19FA070(&v125, v126);
        v72 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v71 + 8);
        v123 = v70;
        v124 = v71;
        sub_1B1A137F4((uint64_t *)&v122);
        v73 = v71;
        v56 = v108;
        v72(v69, &off_1E6383958, v70, v73);
        v41 = v121;
        sub_1B1A02518(&v122, (uint64_t)v131);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v125);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v128);
        v74 = v113;
        swift_dynamicCast();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v74, 0, 1, a5);
        sub_1B22285A8();
        v32 = (char *)v106;
        TupleTypeMetadata2 = v109;
        sub_1B22285C0();
        v75 = v65;
        v45 = (unint64_t)v105;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v75, a5);
        v57 = v117;
        v44 = v118;
        if ((v45 & 0x8000000000000000) == 0)
          goto LABEL_21;
LABEL_24:
        if (sub_1B2229670())
        {
          sub_1B2229CF4();
          swift_unknownObjectRelease();
          sub_1B2229CF4();
          swift_unknownObjectRelease();
          v60 = 0;
        }
        else
        {
          v60 = 1;
        }
        v59 = v57;
        v118 = v44;
        v56 = v108;
      }
    }
    v47 = v121;
    if (v40)
    {
      v48 = sub_1B222964C();
      v104 = 0;
      v49 = 0;
      v50 = 0;
      v51 = v48 | 0x8000000000000000;
    }
    else
    {
      v77 = -1 << *(_BYTE *)(a3 + 32);
      v49 = ~v77;
      v78 = *(_QWORD *)(a3 + 64);
      v104 = a3 + 64;
      v79 = -v77;
      if (v79 < 64)
        v80 = ~(-1 << v79);
      else
        v80 = -1;
      v50 = v80 & v78;
      v51 = a3;
    }
    v81 = v105;
    v108 = v51;
    v107 = (char *)(v51 & 0x7FFFFFFFFFFFFFFFLL);
    v103 = v49;
    v106 = (unint64_t)(v49 + 64) >> 6;
    v102 = v106 - 1;
    swift_bridgeObjectRetain();
    v82 = (char *)v108;
    v83 = 0;
    if ((v108 & 0x8000000000000000) != 0)
      goto LABEL_58;
LABEL_55:
    v84 = v117;
    if (v50)
    {
      v118 = (v50 - 1) & v50;
      v85 = __clz(__rbit64(v50)) | (v83 << 6);
      v86 = v83;
    }
    else
    {
      v86 = v83 + 1;
      if (v83 + 1 >= v106)
      {
        v118 = 0;
        v88 = 1;
        v86 = v83;
        goto LABEL_66;
      }
      v90 = *(_QWORD *)(v104 + 8 * v86);
      if (!v90)
      {
        if (v83 + 2 >= v106)
        {
          v118 = 0;
          v88 = 1;
          goto LABEL_66;
        }
        v90 = *(_QWORD *)(v104 + 8 * (v83 + 2));
        if (v90)
        {
          v86 = v83 + 2;
          goto LABEL_62;
        }
        v86 = v83 + 3;
        if (v83 + 3 >= v106)
        {
          v118 = 0;
          v88 = 1;
          v86 = v83 + 2;
          goto LABEL_66;
        }
        v90 = *(_QWORD *)(v104 + 8 * v86);
        if (!v90)
        {
          v99 = v83 + 4;
          while (v106 != v99)
          {
            v90 = *(_QWORD *)(v104 + 8 * v99++);
            if (v90)
            {
              v86 = v99 - 1;
              goto LABEL_62;
            }
          }
          v118 = 0;
          v88 = 1;
          v86 = v102;
LABEL_66:
          while (1)
          {
            v91 = *(_QWORD *)(TupleTypeMetadata2 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v81, v88, 1, TupleTypeMetadata2);
            (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v84, v81, v116);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v84, 1, TupleTypeMetadata2) == 1)
              break;
            v92 = v119;
            v93 = v111;
            (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v111, &v84[*(int *)(TupleTypeMetadata2 + 48)], a5);
            (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v112, v84, v47);
            sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5AB10);
            swift_dynamicCast();
            sub_1B19FA198((uint64_t)v131, (uint64_t)&v128);
            v94 = v129;
            v95 = v130;
            sub_1B19FA070(&v128, v129);
            v96 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v95 + 8);
            v126 = v94;
            v127 = v95;
            sub_1B1A137F4((uint64_t *)&v125);
            v96(v114, &off_1E6383958, v94, v95);
            v47 = v121;
            sub_1B1A02518(&v125, (uint64_t)v132);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v128);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v131);
            swift_dynamicCast();
            v97 = v113;
            (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v113, v93, a5);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v97, 0, 1, a5);
            sub_1B22285A8();
            TupleTypeMetadata2 = v109;
            sub_1B22285C0();
            v98 = v93;
            v81 = v105;
            (*(void (**)(char *, uint64_t))(v92 + 8))(v98, a5);
            v83 = v86;
            v50 = v118;
            v82 = (char *)v108;
            if ((v108 & 0x8000000000000000) == 0)
              goto LABEL_55;
LABEL_58:
            v89 = sub_1B2229670();
            v84 = v117;
            if (v89)
            {
              sub_1B2229CF4();
              swift_unknownObjectRelease();
              sub_1B2229CF4();
              swift_unknownObjectRelease();
              v88 = 0;
            }
            else
            {
              v88 = 1;
            }
            v86 = v83;
            v118 = v50;
          }
LABEL_81:
          sub_1B19F8D30();
          return v133;
        }
      }
LABEL_62:
      v118 = (v90 - 1) & v90;
      v85 = __clz(__rbit64(v90)) + (v86 << 6);
    }
    v87 = v82;
    (*(void (**)(char *, unint64_t, uint64_t))(v120 + 16))(v81, *((_QWORD *)v82 + 6) + *(_QWORD *)(v120 + 72) * v85, v47);
    (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(&v81[*(int *)(TupleTypeMetadata2 + 48)], *((_QWORD *)v87 + 7) + *(_QWORD *)(v119 + 72) * v85, a5);
    v88 = 0;
    goto LABEL_66;
  }
  if (!v37)
  {
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRetain();
    return a3;
  }
  MEMORY[0x1E0C80A78](v38, v39);
  v101[-6] = v121;
  v101[-5] = a5;
  v46 = v114;
  v101[-4] = a6;
  v101[-3] = v46;
  v101[-2] = a2;
  a3 = sub_1B2228590();
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t sub_1B1E2EF30(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];
  _BYTE v17[40];

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5AB10);
  swift_dynamicCast();
  sub_1B19FA198((uint64_t)v16, (uint64_t)v13);
  v6 = v14;
  v7 = v15;
  sub_1B19FA070(v13, v14);
  v8 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v7 + 8);
  v11 = v6;
  v12 = v7;
  sub_1B1A137F4((uint64_t *)&v10);
  v8(a2, &off_1E6383958, v6, v7);
  sub_1B1A02518(&v10, (uint64_t)v17);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
  return swift_dynamicCast();
}

uint64_t sub_1B1E2F07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;

  result = sub_1B1E2E198(a1, a2, *v4, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1B1E2F0B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a5 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)v5 + *(int *)(v12 + 44);
  type metadata accessor for DefaultRemapper();
  swift_retain();
  sub_1B1E2CFB4(v13, v14, v8, (uint64_t)&off_1E6383958, (uint64_t)v11);
  sub_1B1E1D678((uint64_t)v11, a1, *v5, *(_QWORD *)(a5 + 32));
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1B1E2F18C()
{
  sub_1B1A1B9EC();
  return swift_retain();
}

void sub_1B1E2F1A0()
{
  sub_1B1E36268();
}

uint64_t sub_1B1E2F1B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v7 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(v11 + 24);
  v13 = *(_QWORD *)(v12 + 8);
  swift_retain();
  if (sub_1B1F24AA4(v7) < 1)
  {
    sub_1B1FE16DC(v7, v12, a1);
    return swift_release();
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v5, v7);
    sub_1B1E33D20();
    (*(void (**)(void))(v13 + 96))();
    v14 = swift_release();
    MEMORY[0x1E0C80A78](v14, v15);
    *(_QWORD *)&v17[-32] = v7;
    *(_QWORD *)&v17[-24] = v12;
    *(_QWORD *)&v17[-16] = v10;
    if ((sub_1B1FE0614(v7, a1, (void (*)(char *))sub_1B1E36270, (uint64_t)&v17[-48], v7, v12) & 1) == 0)
      sub_1B1FD6D8C((uint64_t)v10, a1, v7, v12);
    swift_release();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_1B1E2F35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v9[4];

  v9[3] = a3;
  v7 = sub_1B1A137F4(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v7, a2, a3);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a4 + 8) + 104))(v9, a3);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
}

double sub_1B1E2F3E0(uint64_t a1)
{
  return nullsub_16(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1B1E2F3EC(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_1B1E2F3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DynamicType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  swift_retain();
  sub_1B19FA198(v2, (uint64_t)v19);
  sub_1B19FA070(v19, v20);
  DynamicType = swift_getDynamicType();
  v7 = v21;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
  sub_1B1FE16DC(DynamicType, v7, a1);
  sub_1B19FA198(v3, (uint64_t)v19);
  sub_1B19FA070(v19, v20);
  v8 = swift_getDynamicType();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
  if (sub_1B1F24AA4(v8) < 1)
    return swift_release();
  sub_1B19FA198(v3, (uint64_t)v19);
  v9 = sub_1B1E33D20();
  v10 = v20;
  v11 = v21;
  sub_1B19FC264((uint64_t)v19, v20);
  (*(void (**)(uint64_t, _UNKNOWN **, uint64_t))(*(_QWORD *)(v11 + 8) + 96))(v9, &off_1E6376550, v10);
  swift_release();
  sub_1B19FA198(v3, (uint64_t)v16);
  sub_1B19FA070(v16, v17);
  v12 = swift_getDynamicType();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
  if (sub_1B1F24AA4(v12) >= 1)
  {
    sub_1B19FA198(v3, (uint64_t)v16);
    sub_1B19FA070(v16, v17);
    v13 = swift_getDynamicType();
    v14 = v18;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    sub_1B1FE2BA8(v13, v14, a1, a2, v19);
  }
  swift_release();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
}

uint64_t sub_1B1E2F5F0()
{
  uint64_t v0;
  uint64_t DynamicType;
  _QWORD v3[4];

  sub_1B19FA198(v0, (uint64_t)v3);
  sub_1B19FA070(v3, v3[3]);
  DynamicType = swift_getDynamicType();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
  return DynamicType;
}

uint64_t sub_1B1E2F650()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_1B1E2F65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a6 = v14;
  *(_DWORD *)(a6 + 4) = v15;
  *(_QWORD *)(a6 + 8) = v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v18, v17, v11);
  v20 = type metadata accessor for ComponentWriter(0, a4, a5, v19);
  *(_QWORD *)(a6 + 40) = v20;
  *(_QWORD *)(a6 + 48) = &off_1E6383838;
  v21 = sub_1B1A137F4((uint64_t *)(a6 + 16));
  result = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v10 + 32))(v21, v13, a4);
  *((_BYTE *)v21 + *(int *)(v20 + 36)) = a3;
  *(_BYTE *)(a6 + 56) = 12;
  return result;
}

uint64_t sub_1B1E2F740(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(result + 16))
  {
    v1 = result + 32;
    swift_bridgeObjectRetain();
    sub_1B1C18F3C(v1, (uint64_t)&v2);
    __asm { BR              X9 }
  }
  return result;
}

void sub_1B1E31340(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD aBlock[7];

  v2 = *(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if (v2)
  {
    if (*(_QWORD *)(v2[2] + 16))
    {
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v5 = Strong;
        v6 = v2[3];
        if (v6)
        {
          v7 = v2[4];
          v8 = MEMORY[0x1B5E240CC](v2 + 8);
          v9 = v2[9];
          v10 = v2[2];
          v2[2] = MEMORY[0x1E0DEE9D8];
          v11 = (_QWORD *)swift_allocObject();
          v11[2] = v5;
          v11[3] = v10;
          v11[4] = v6;
          v11[5] = v7;
          v11[6] = v8;
          v11[7] = v9;
          if ((a1 & 1) != 0)
          {
            v12 = (void *)v2[11];
            v13 = v12;
            if (v12)
            {
              v14 = v13;
              v15 = (void *)objc_opt_self();
              v16 = swift_allocObject();
              *(_QWORD *)(v16 + 16) = sub_1B1D1EA74;
              *(_QWORD *)(v16 + 24) = v11;
              aBlock[4] = sub_1B1A0FDB0;
              aBlock[5] = v16;
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 1107296256;
              aBlock[2] = sub_1B1D199FC;
              aBlock[3] = &unk_1E63D4880;
              v17 = _Block_copy(aBlock);
              swift_unknownObjectRetain_n();
              swift_retain();
              swift_retain();
              swift_unknownObjectRetain();
              v18 = v14;
              swift_retain();
              swift_release();
              objc_msgSend(v15, sel_postCommandWithContext_object_applyBlock_, v18, 0, v17);
              swift_release();
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_release();
              _Block_release(v17);

              return;
            }
            v19 = swift_allocObject();
            *(_QWORD *)(v19 + 16) = sub_1B1D1EA74;
            *(_QWORD *)(v19 + 24) = v11;
            swift_unknownObjectRetain_n();
            swift_retain();
            swift_retain();
            swift_unknownObjectRetain();
            swift_retain();
            sub_1B1DA6294((uint64_t)sub_1B1A0FDB0, v19);
            swift_release();
            swift_release();
          }
          else
          {
            swift_unknownObjectRetain_n();
            swift_retain();
            swift_retain();
            swift_unknownObjectRetain();
            swift_retain();
            sub_1B1D9D97C(v5, sub_1B1D1EA74, (uint64_t)v11);
            swift_release();
          }
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
        }
        swift_release();
      }
    }
  }
}

void sub_1B1E31620(uint64_t a1, uint64_t a2)
{
  char v3;
  id v4;

  v3 = *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated);
  v4 = *(id *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated + 8);
  objc_msgSend(v4, sel_lock);
  objc_msgSend(v4, sel_unlock);

  if ((v3 & 1) == 0)
    sub_1B1E2F740(a2);
}

uint64_t sub_1B1E316BC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReplicationStreamSystem()
{
  return objc_opt_self();
}

void sub_1B1E316EC()
{
  sub_1B1E31340(1);
}

uint64_t sub_1B1E31710()
{
  uint64_t result;

  type metadata accessor for ReplicationStreamSystem();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = "ModificationStream";
  *(_QWORD *)(result + 24) = 18;
  *(_BYTE *)(result + 32) = 2;
  return result;
}

uint64_t sub_1B1E31748()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_weakDestroy();
  sub_1B1B0D8D0(v0 + 48);
  sub_1B1B0D8D0(v0 + 64);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReplicationStream()
{
  return objc_opt_self();
}

uint64_t sub_1B1E317AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  swift_weakInit();
  *(_QWORD *)(v0 + 56) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 72) = 0;
  swift_unknownObjectWeakInit();
  *(_WORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  return v0;
}

uint64_t sub_1B1E31804(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];
  int v22;
  char v23;
  char v24;

  v3 = v2;
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for RemapContext();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = sub_1B1B95EBC(v6);
  v9 = sub_1B1B7DC84(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 16) = 1;
  v10 = *(_QWORD *)v3;
  swift_unownedRetainStrong();
  v11 = **(_QWORD **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_release();
  swift_unownedRetainStrong();
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v13 = a1 + 36;
    do
    {
      sub_1B1DA67D0(*(_QWORD *)(v13 - 4), v8);
      v13 += 8;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  v14 = HIDWORD(a2) & 1;
  sub_1B1F07378(v8, v10, a2 | (unint64_t)(v14 << 32), 0, v11);
  swift_retain();
  v15 = sub_1B1E34E70(a1, v8);
  swift_release();
  swift_release();
  v16 = swift_bridgeObjectRetain();
  v17 = sub_1B1DC9470(v16);
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRetain();
  v19 = sub_1B1DC937C(v18);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    swift_unownedRetainStrong();
    v21[0] = v17;
    v21[1] = v19;
    v22 = a2;
    v23 = v14;
    v24 = 1;
    sub_1B1E2DB30((uint64_t)v21);
    swift_release();
    sub_1B1ADF058((uint64_t)v21);
  }
  else
  {
    swift_release();
    swift_release();
  }
  if (swift_unknownObjectUnownedLoadStrong())
  {
    swift_unownedRetainStrong();
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_release();
  return v15;
}

uint64_t sub_1B1E31A18(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t Strong;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unsigned int *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int32x2_t *v109;
  uint64_t v110;
  int8x16_t v111;
  int32x2_t v112;
  int32x2_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char **v130;
  char *v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  int8x16_t v135;
  uint64_t v136;
  _QWORD *v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t result;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  int64_t v158;
  __int128 v159;
  uint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  uint64_t *v163;
  _BYTE v164[24];
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  _QWORD *v172;

  v4 = a2;
  v163 = a1;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 + 64);
  v145 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v156 = a3;
  v10 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v149 = a4;
  v147 = a4;
  v150 = v5;
  swift_bridgeObjectRetain();
  v12 = 0;
  v146 = v11;
  v144 = v11 - 5;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v154 = v4;
  v148 = v10;
  while (1)
  {
    if (v9)
    {
      v20 = __clz(__rbit64(v9));
      v21 = (v9 - 1) & v9;
      v162.i64[0] = v12;
      v22 = v20 | (v12 << 6);
      goto LABEL_19;
    }
    v23 = v12 + 1;
    if (v12 + 1 >= v146)
      goto LABEL_39;
    v24 = *(_QWORD *)(v145 + 8 * v23);
    if (!v24)
    {
      v23 = v12 + 2;
      if (v12 + 2 >= v146)
        goto LABEL_39;
      v24 = *(_QWORD *)(v145 + 8 * v23);
      if (!v24)
      {
        v23 = v12 + 3;
        if (v12 + 3 >= v146)
          goto LABEL_39;
        v24 = *(_QWORD *)(v145 + 8 * v23);
        if (!v24)
        {
          v23 = v12 + 4;
          if (v12 + 4 >= v146)
            goto LABEL_39;
          v24 = *(_QWORD *)(v145 + 8 * v23);
          if (!v24)
            break;
        }
      }
    }
LABEL_18:
    v21 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v162.i64[0] = v23;
LABEL_19:
    v161.i64[0] = v21;
    v25 = (unsigned int *)(*(_QWORD *)(v150 + 48) + 8 * v22);
    v26 = *v25;
    v27 = v25[1];
    v28 = v26 == -1 && (_DWORD)v27 == 0;
    if (v28
      || (v26 & 0x80000000) != 0
      || v10[1] <= (int)v26
      || ((_DWORD)v27 != -1 ? (v29 = *(_DWORD *)(*v10 + 12 * (int)v26 + 8) == (_DWORD)v27) : (v29 = 1), !v29))
    {
      sub_1B2229688();
      __break(1u);
LABEL_142:
      result = sub_1B2229FC4();
      __break(1u);
      return result;
    }
    v30 = *(__int16 *)(*v10 + 12 * (int)v26 + 6);
    *(_QWORD *)&v159 = v26 | (unint64_t)(v27 << 32);
    v31 = v156;
    v32 = sub_1B1DA5684(v159);
    v33 = *(_QWORD **)(*(_QWORD *)(v31 + 80) + 8 * v30 + 32);
    v34 = v33[12];
    v35 = v33[13];
    v37 = v33[14];
    v36 = v33[15];
    v38 = v33[16];
    v39 = v33[23];
    v172 = v13;
    v40 = *(_QWORD *)(v37 + 16);
    LODWORD(v158) = v32;
    if (v40)
    {
      v41 = v37 + 32;
      v157 = v33;
      v42 = v38;
      v43 = v39;
      swift_retain();
      v155 = (char *)v37;
      swift_retain_n();
      v153 = v36;
      swift_retain();
      v152 = v42;
      swift_retain();
      v151 = v43;
      swift_bridgeObjectRetain();
      do
      {
        sub_1B1F2661C(v34, v35);
        sub_1B19FA198((uint64_t)&v167, (uint64_t)v164);
        v44 = v172;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v44 = sub_1B1C63184(0, v44[2] + 1, 1, v44);
          v172 = v44;
        }
        v46 = v44[2];
        v45 = v44[3];
        if (v46 >= v45 >> 1)
          v172 = sub_1B1C63184(v45 > 1, v46 + 1, 1, v44);
        v47 = v165;
        v48 = v166;
        v49 = sub_1B19FC264((uint64_t)v164, v165);
        v50 = MEMORY[0x1E0C80A78](v49, v49);
        v52 = (char *)&v143 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v53 + 16))(v52, v50);
        sub_1B1DACB58(v46, (uint64_t)v52, (uint64_t *)&v172, v47, v48);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v164);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v167);
        v41 += 40;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release_n();
      v14 = (uint64_t)v172;
    }
    else
    {
      swift_retain();
      v14 = (uint64_t)v13;
    }
    v4 = v154;
    swift_retain();
    v15 = v160;
    v16 = sub_1B1E34F60(v14, v4);
    v160 = v15;
    swift_bridgeObjectRelease();
    swift_release();
    v17 = swift_retain();
    v18 = sub_1B1E32B14(v17, v16, v158 & 1, v147 | ((HIDWORD(v149) & 1) << 32));
    swift_release();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v167 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0x8000000000000000;
    sub_1B1F8302C(v18, v159, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v4 + 24) = v167;
    swift_release();
    swift_bridgeObjectRelease();
    v10 = v148;
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v12 = v162.i64[0];
    v9 = v161.i64[0];
  }
  while (v144 != v12)
  {
    v24 = *(_QWORD *)(v150 + 8 * v12++ + 104);
    if (v24)
    {
      v23 = v12 + 4;
      goto LABEL_18;
    }
  }
LABEL_39:
  swift_release();
  v54 = *(_QWORD *)(v4 + 24);
  v55 = *(_QWORD *)(v54 + 64);
  v155 = (char *)(v54 + 64);
  v56 = 1 << *(_BYTE *)(v54 + 32);
  v57 = -1;
  if (v56 < 64)
    v57 = ~(-1 << v56);
  v58 = v57 & v55;
  v59 = (unint64_t)(v56 + 63) >> 6;
  v157 = v163 + 1;
  swift_bridgeObjectRetain();
  v60 = 0;
  v158 = v59;
  v152 = v59 - 7;
  v153 = v54;
  while (2)
  {
    if (v58)
    {
      v161.i64[0] = (v58 - 1) & v58;
      v61 = __clz(__rbit64(v58)) | (v60 << 6);
LABEL_62:
      v64 = sub_1B1B6BD00(*(_QWORD *)(*(_QWORD *)(v54 + 48) + 8 * v61));
      v65 = *v163;
      swift_unownedRetainStrong();
      v162.i64[0] = v64;
      v66 = sub_1B1B6BEB4(v64, v4);
      swift_release();
      v67 = *(unsigned int *)(v66 + 84);
      v68 = *(unsigned int *)(v66 + 88);
      swift_unownedRetainStrong();
      swift_release();
      Strong = swift_unknownObjectUnownedLoadStrong();
      if (Strong)
      {
        v70 = Strong;
        *(_QWORD *)&v159 = v60;
        v71 = (_DWORD)v67 == -1 && (_DWORD)v68 == 0;
        v72 = MEMORY[0x1E0DEE9D8];
        if (!v71)
        {
          swift_retain();
          v72 = sub_1B1FE162C(v67 | (v68 << 32));
          swift_release();
        }
        v73 = *(_QWORD *)(v72 + 16);
        if (v73)
        {
          v74 = v72 + 40;
          while (((*(uint64_t (**)(void))(*(_QWORD *)v74 + 24))() & 1) == 0)
          {
            v74 += 16;
            if (!--v73)
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_75;
            }
          }
          swift_bridgeObjectRelease();
          v75 = v70 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
          v76 = type metadata accessor for ScriptingConfiguration();
          ++*(_QWORD *)(v75 + *(int *)(v76 + 36));
          swift_unknownObjectRelease();
LABEL_75:
          v4 = v154;
          v54 = v153;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v4 = v154;
        }
        v60 = v159;
      }
      if (*((_BYTE *)v163 + 24) == 1)
      {
        swift_unownedRetainStrong();
        *(_QWORD *)&v167 = v66;
        *((_QWORD *)&v167 + 1) = __PAIR64__(v68, v67);
        *(_QWORD *)&v168 = v65;
        v171 = 5;
        v77 = *(_QWORD *)(v65 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        if (v77 && (*(_BYTE *)(v77 + 81) & 1) != 0 && *(_QWORD *)(v77 + 24) && swift_weakLoadStrong())
        {
          *(_QWORD *)&v159 = v60;
          swift_retain();
          swift_retain();
          swift_unknownObjectRetain();
          swift_release();
          sub_1B1C18F3C((uint64_t)&v167, (uint64_t)v164);
          v78 = *(_QWORD **)(v77 + 16);
          v79 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v77 + 16) = v78;
          if ((v79 & 1) == 0)
          {
            v78 = sub_1B1C62F04(0, v78[2] + 1, 1, v78);
            *(_QWORD *)(v77 + 16) = v78;
          }
          v81 = v78[2];
          v80 = v78[3];
          if (v81 >= v80 >> 1)
          {
            v78 = sub_1B1C62F04(v80 > 1, v81 + 1, 1, v78);
            *(_QWORD *)(v77 + 16) = v78;
          }
          v78[2] = v81 + 1;
          sub_1B1C18F78((uint64_t)v164, (uint64_t)&v78[8 * v81 + 4]);
          swift_release();
          swift_release();
          swift_unknownObjectRelease();
          swift_release();
          v60 = v159;
        }
        else
        {
          swift_release();
        }
        sub_1B1ADF058((uint64_t)&v167);
      }
      else
      {
        swift_release();
      }
      swift_release();
      v58 = v161.i64[0];
      continue;
    }
    break;
  }
  v62 = v60 + 1;
  if (v60 + 1 >= v158)
    goto LABEL_89;
  v63 = *(_QWORD *)&v155[8 * v62];
  if (v63)
    goto LABEL_61;
  v62 = v60 + 2;
  if (v60 + 2 >= v158)
    goto LABEL_89;
  v63 = *(_QWORD *)&v155[8 * v62];
  if (v63)
    goto LABEL_61;
  v62 = v60 + 3;
  if (v60 + 3 >= v158)
    goto LABEL_89;
  v63 = *(_QWORD *)&v155[8 * v62];
  if (v63)
    goto LABEL_61;
  v62 = v60 + 4;
  if (v60 + 4 >= v158)
    goto LABEL_89;
  v63 = *(_QWORD *)&v155[8 * v62];
  if (v63)
    goto LABEL_61;
  v62 = v60 + 5;
  if (v60 + 5 >= v158)
    goto LABEL_89;
  v63 = *(_QWORD *)&v155[8 * v62];
  if (v63)
    goto LABEL_61;
  v62 = v60 + 6;
  if (v60 + 6 >= v158)
    goto LABEL_89;
  v63 = *(_QWORD *)&v155[8 * v62];
  if (v63)
  {
LABEL_61:
    v161.i64[0] = (v63 - 1) & v63;
    v61 = __clz(__rbit64(v63)) + (v62 << 6);
    v60 = v62;
    goto LABEL_62;
  }
  while (v152 != v60)
  {
    v63 = *(_QWORD *)(v54 + 8 * v60++ + 120);
    if (v63)
    {
      v62 = v60 + 6;
      goto LABEL_61;
    }
  }
LABEL_89:
  swift_release();
  v82 = swift_bridgeObjectRetain();
  v83 = v160;
  v84 = sub_1B1F027AC(v82);
  v150 = v83;
  swift_bridgeObjectRelease();
  v152 = *(_QWORD *)(v84 + 16);
  if (v152)
  {
    v85 = 0;
    v149 = v84;
    v151 = v84 + 32;
    do
    {
      v86 = *(_OWORD *)(v151 + 16 * v85);
      v87 = *(_QWORD *)(v156 + 208);
      v88 = *(_QWORD *)(v87 + 16);
      v159 = v86;
      if (v88)
      {
        v89 = sub_1B1DC3AC8(v86);
        v90 = MEMORY[0x1E0DEE9D8];
        if ((v91 & 1) != 0)
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v87 + 56) + 24 * v89);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v90 = MEMORY[0x1E0DEE9D8];
      }
      v92 = *(_QWORD *)(v90 + 16);
      v153 = v85;
      if (v92)
      {
        swift_bridgeObjectRetain();
        v93 = (unsigned int *)(v90 + 44);
        v94 = (char *)MEMORY[0x1E0DEE9D8];
        do
        {
          v96 = *(_QWORD *)(v4 + 24);
          if (*(_QWORD *)(v96 + 16))
          {
            v97 = *(v93 - 1);
            v98 = *v93;
            v99 = sub_1B1DC3CA4(*(_QWORD *)(v93 - 3));
            if ((v100 & 1) != 0)
            {
              v101 = *(_QWORD *)(v4 + 24);
              if (*(_QWORD *)(v101 + 16))
              {
                v102 = *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * v99);
                v103 = sub_1B1DC3CA4(v97 | (v98 << 32));
                if ((v104 & 1) != 0)
                {
                  v105 = *(_QWORD *)(*(_QWORD *)(v101 + 56) + 8 * v103);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v94 = sub_1B1C64334(0, *((_QWORD *)v94 + 2) + 1, 1, v94);
                  v107 = *((_QWORD *)v94 + 2);
                  v106 = *((_QWORD *)v94 + 3);
                  if (v107 >= v106 >> 1)
                    v94 = sub_1B1C64334(v106 > 1, v107 + 1, 1, v94);
                  *((_QWORD *)v94 + 2) = v107 + 1;
                  v95 = &v94[16 * v107];
                  *((_QWORD *)v95 + 4) = v102;
                  *((_QWORD *)v95 + 5) = v105;
                }
              }
            }
          }
          v93 += 4;
          --v92;
        }
        while (v92);
        swift_bridgeObjectRelease();
      }
      else
      {
        v94 = (char *)MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      v108 = *((_QWORD *)v94 + 2);
      if (v108)
      {
        v109 = (int32x2_t *)(v94 + 32);
        v110 = v159;
        v158 = v159;
        v155 = v94;
        do
        {
          v111 = *(int8x16_t *)v109->i8;
          v112 = vceq_s32(vrev64_s32(*v109), (int32x2_t)0xFFFFFFFF00000000);
          if ((v112.i32[1] & v112.i32[0] & 1) == 0)
          {
            v161 = vextq_s8(v111, v111, 8uLL);
            v113 = vceq_s32(vrev64_s32(*(int32x2_t *)v161.i8), (int32x2_t)0xFFFFFFFF00000000);
            if ((v113.i32[1] & v113.i32[0] & 1) == 0)
            {
              v162 = v111;
              v114 = *v163;
              swift_unownedRetainStrong();
              v115 = swift_allocObject();
              *(_OWORD *)(v115 + 16) = v159;
              v116 = swift_allocObject();
              *(_QWORD *)(v116 + 16) = sub_1B1E353B8;
              *(_QWORD *)(v116 + 24) = v115;
              v160 = v115;
              v117 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v167 = *(_QWORD *)(v114 + 208);
              v118 = v167;
              *(_QWORD *)(v114 + 208) = 0x8000000000000000;
              v119 = sub_1B1DC3AC8(v110);
              v120 = v110;
              v122 = v121;
              v123 = *(_QWORD *)(v118 + 16) + ((v121 & 1) == 0);
              if (*(_QWORD *)(v118 + 24) >= v123)
              {
                if ((v117 & 1) == 0)
                {
                  sub_1B1EAA4A8();
                  v118 = v167;
                }
              }
              else
              {
                sub_1B1E94FD0(v123, v117);
                v118 = v167;
                v124 = sub_1B1DC3AC8(v120);
                if ((v122 & 1) != (v125 & 1))
                  goto LABEL_142;
                v119 = v124;
              }
              *(_QWORD *)(v114 + 208) = v118;
              swift_bridgeObjectRelease();
              v126 = *(_QWORD **)(v114 + 208);
              swift_bridgeObjectRetain();
              if ((v122 & 1) == 0)
              {
                sub_1B20204FC(*(uint64_t (**)(void))(v116 + 16), (uint64_t *)&v167);
                v127 = v168;
                v126[(v119 >> 6) + 8] |= 1 << v119;
                *(_QWORD *)(v126[6] + 8 * v119) = v158;
                v128 = v126[7] + 24 * v119;
                *(_OWORD *)v128 = v167;
                *(_QWORD *)(v128 + 16) = v127;
                ++v126[2];
              }
              v129 = v126[7];
              swift_bridgeObjectRelease();
              v130 = (char **)(v129 + 24 * v119);
              v131 = *v130;
              v132 = swift_isUniquelyReferenced_nonNull_native();
              *v130 = v131;
              if ((v132 & 1) == 0)
              {
                v131 = sub_1B1C64334(0, *((_QWORD *)v131 + 2) + 1, 1, v131);
                *v130 = v131;
              }
              v134 = *((_QWORD *)v131 + 2);
              v133 = *((_QWORD *)v131 + 3);
              v135 = v162;
              if (v134 >= v133 >> 1)
              {
                v141 = sub_1B1C64334(v133 > 1, v134 + 1, 1, v131);
                v135 = v162;
                v131 = v141;
                *v130 = v141;
              }
              *((_QWORD *)v131 + 2) = v134 + 1;
              *(int8x16_t *)&v131[16 * v134 + 32] = v135;
              swift_release();
              swift_release();
              swift_release();
              swift_unownedRetainStrong();
              swift_release();
              swift_unownedRetainStrong();
              swift_release();
              if (swift_unknownObjectUnownedLoadStrong())
                swift_unknownObjectRelease();
              v110 = v158;
              if (*((_BYTE *)v163 + 24) == 1)
              {
                swift_unownedRetainStrong();
                *(_QWORD *)&v167 = v162.i64[0];
                *((_QWORD *)&v167 + 1) = v114;
                v168 = v159;
                v169 = v161.i64[0];
                v170 = v114;
                v171 = 8;
                v136 = *(_QWORD *)(v114 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                if (v136 && (*(_BYTE *)(v136 + 81) & 1) != 0 && *(_QWORD *)(v136 + 24) && swift_weakLoadStrong())
                {
                  swift_retain();
                  swift_unknownObjectRetain();
                  swift_release();
                  sub_1B1C18F3C((uint64_t)&v167, (uint64_t)v164);
                  v137 = *(_QWORD **)(v136 + 16);
                  v138 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v136 + 16) = v137;
                  if ((v138 & 1) == 0)
                  {
                    v137 = sub_1B1C62F04(0, v137[2] + 1, 1, v137);
                    *(_QWORD *)(v136 + 16) = v137;
                  }
                  v140 = v137[2];
                  v139 = v137[3];
                  if (v140 >= v139 >> 1)
                  {
                    v137 = sub_1B1C62F04(v139 > 1, v140 + 1, 1, v137);
                    *(_QWORD *)(v136 + 16) = v137;
                  }
                  v137[2] = v140 + 1;
                  sub_1B1C18F78((uint64_t)v164, (uint64_t)&v137[8 * v140 + 4]);
                  swift_release();
                  swift_unknownObjectRelease();
                  swift_release();
                  v110 = v158;
                }
                else
                {
                  swift_release();
                }
                sub_1B1ADF058((uint64_t)&v167);
              }
            }
          }
          v109 += 2;
          --v108;
        }
        while (v108);
      }
      v85 = v153 + 1;
      swift_bridgeObjectRelease();
      v4 = v154;
    }
    while (v85 != v152);
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B1E32B14(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t KeyPath;
  uint64_t v23;
  signed int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34[4];
  char v35;
  int v36;
  char v37;
  char v38;
  int v39;

  v8 = *v4;
  swift_unownedRetainStrong();
  v9 = **(_QWORD **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_release();
  v10 = *(_QWORD *)(v9 + 16);
  v11 = v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1B1DAD000(a1, a2);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = sub_1B1DA8760(v13);
  if ((v17 & 1) != 0 || (v18 = sub_1B1DA87D4(v15, v16), v19 = v18, (v18 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = sub_1B1DA8838(v13, v15, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v30 = a1;
  v31 = a2;
  v20 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v19 + 32);
  v21 = *(os_unfair_lock_s **)(v11 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v23 = swift_getKeyPath();
  sub_1B1DAC77C(v23, 1);
  swift_release();
  swift_release();
  v24 = *(_DWORD *)(v20 + 204);
  if ((*(_BYTE *)(v20 + 208) & 1) != 0)
  {
    v25 = 0;
    LODWORD(v26) = -1;
  }
  else
  {
    swift_retain();
    v26 = sub_1B1DA8E54();
    swift_release();
    v25 = HIDWORD(v26);
  }
  v39 = -1;
  v27 = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_retain();
  v28 = HIDWORD(a4) & 1;
  sub_1B1C92338(v24, a4 | (unint64_t)(v28 << 32), a3 & 1, v27, v34, v26, &v39, v20, v9, v24, SHIWORD(v24), 1);
  swift_release();
  swift_release_n();
  swift_unownedRetainStrong();
  swift_release();
  if (*(_BYTE *)(v33 + 24) == 1)
  {
    swift_unownedRetainStrong();
    v34[0] = __PAIR64__(v25, v26);
    v34[1] = v8;
    v34[2] = v30;
    v34[3] = v31;
    v35 = a3 & 1;
    v36 = a4;
    v37 = v28;
    v38 = 2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1E2DB30((uint64_t)v34);
    swift_release();
    sub_1B1ADF058((uint64_t)v34);
  }
  if (swift_unknownObjectUnownedLoadStrong())
    swift_unknownObjectRelease();
  return v26 | (v25 << 32);
}

uint64_t sub_1B1E32E1C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = a2();
  *a4 = 1;
  if (*(_BYTE *)(a5 + 24) == 1)
  {
    sub_1B1E34C34(a6, (unint64_t *)&qword_1ED4B8C80, (unint64_t *)&qword_1ED4B8C70);
    return sub_1B19FA198(a1, a6);
  }
  return result;
}

_QWORD *sub_1B1E32EA4(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t DynamicType;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _DWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;
  char v21;

  v3 = v2;
  v5 = (uint64_t)result;
  v6 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    sub_1B19FA070(result, result[3]);
    DynamicType = swift_getDynamicType();
    v8 = *(_QWORD *)(v5 + 32);
    v9 = *v2;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C(DynamicType, *(_QWORD *)(v8 + 8), a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1FE16DC(DynamicType, v8, a2);
    swift_release();
    if (sub_1B1F24AA4(DynamicType) >= 1)
    {
      v11 = swift_unownedRetainStrong();
      MEMORY[0x1E0C80A78](v11, v12);
      sub_1B1FE2F24(DynamicType, v8, a2, (void (*)(uint64_t *))sub_1B1E34B34);
      swift_release();
    }
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
    {
      v13 = result;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(DynamicType, v8) & 1) != 0)
      {
        v14 = (char *)v13 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
        v15 = type metadata accessor for ScriptingConfiguration();
        ++*(_QWORD *)&v14[*(int *)(v15 + 36)];
      }
      result = (_QWORD *)swift_unknownObjectRelease();
    }
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v16[0] = a2;
      v16[1] = v6;
      v17 = v9;
      v19 = &type metadata for ExistentialComponentWriter;
      v20 = &off_1E63B17E0;
      v18 = swift_allocObject();
      sub_1B19FA198(v5, v18 + 16);
      *(_BYTE *)(v18 + 56) = !v10;
      v21 = 12;
      sub_1B1E2DB30((uint64_t)v16);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v16);
    }
  }
  return result;
}

uint64_t sub_1B1E330E0(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4;
  _BYTE v5[40];

  sub_1B19FA198(a1, (uint64_t)v5);
  sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5AB10);
  type metadata accessor for EntityManager();
  swift_dynamicCast();
  a2(&v4);
  return swift_release();
}

uint64_t sub_1B1E33164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  uint64_t v8;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0x8000000000000000;
  sub_1B1B853AC(a2, a1, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 24) = v8;
  swift_bridgeObjectRelease();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0x8000000000000000;
  sub_1B1B853AC(a1, a2, v6);
  *(_QWORD *)(v2 + 32) = v9;
  return swift_bridgeObjectRelease();
}

id sub_1B1E33210(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id result;
  id v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v33 = (id)v1[2];
  objc_msgSend(v33, sel_lock);
  if (*(_QWORD *)(v1[3] + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v38 = v1[3];
    v1[3] = 0x8000000000000000;
    sub_1B1E34BAC();
    sub_1B2229634();
    v1[3] = v38;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v1[4] + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v39 = v1[4];
    v1[4] = 0x8000000000000000;
    sub_1B1E34BAC();
    sub_1B2229634();
    v1[4] = v39;
    swift_bridgeObjectRelease();
  }
  v35 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v36 = v7;
  v34 = v7 - 5;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v8 << 6);
    }
    else
    {
      v12 = v8 + 1;
      if (v8 + 1 >= v36)
        goto LABEL_39;
      v13 = *(_QWORD *)(v35 + 8 * v12);
      if (!v13)
      {
        v12 = v8 + 2;
        if (v8 + 2 >= v36)
          goto LABEL_39;
        v13 = *(_QWORD *)(v35 + 8 * v12);
        if (!v13)
        {
          v12 = v8 + 3;
          if (v8 + 3 >= v36)
            goto LABEL_39;
          v13 = *(_QWORD *)(v35 + 8 * v12);
          if (!v13)
          {
            v12 = v8 + 4;
            if (v8 + 4 >= v36)
              goto LABEL_39;
            v13 = *(_QWORD *)(v35 + 8 * v12);
            if (!v13)
            {
              while (v34 != v8)
              {
                v13 = *(_QWORD *)(a1 + 104 + 8 * v8++);
                if (v13)
                {
                  v12 = v8 + 4;
                  goto LABEL_23;
                }
              }
LABEL_39:
              swift_release();
              return objc_msgSend(v33, sel_unlock);
            }
          }
        }
      }
LABEL_23:
      v6 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v12 << 6);
      v8 = v12;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = (_QWORD *)v2[3];
    v2[3] = 0x8000000000000000;
    v17 = sub_1B1DC3CA4(v14);
    v19 = v18;
    v20 = v16[2] + ((v18 & 1) == 0);
    if (v16[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EA9B9C();
    }
    else
    {
      sub_1B1E93E90(v20, isUniquelyReferenced_nonNull_native);
      v21 = sub_1B1DC3CA4(v14);
      if ((v19 & 1) != (v22 & 1))
        goto LABEL_40;
      v17 = v21;
    }
    if ((v19 & 1) != 0)
    {
      *(_QWORD *)(v16[7] + 8 * v17) = v37;
    }
    else
    {
      v16[(v17 >> 6) + 8] |= 1 << v17;
      v23 = 8 * v17;
      *(_QWORD *)(v16[6] + v23) = v14;
      *(_QWORD *)(v16[7] + v23) = v37;
      ++v16[2];
    }
    v2[3] = v16;
    swift_bridgeObjectRelease();
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v25 = (_QWORD *)v2[4];
    v2[4] = 0x8000000000000000;
    v26 = sub_1B1DC3CA4(v37 | ((unint64_t)HIDWORD(v37) << 32));
    v28 = v27;
    v29 = v25[2] + ((v27 & 1) == 0);
    if (v25[3] < v29)
      break;
    if ((v24 & 1) == 0)
      sub_1B1EA9B9C();
LABEL_37:
    if ((v28 & 1) != 0)
    {
      *(_QWORD *)(v25[7] + 8 * v26) = v14;
    }
    else
    {
      v25[(v26 >> 6) + 8] |= 1 << v26;
      v9 = 8 * v26;
      *(_QWORD *)(v25[6] + v9) = v37;
      *(_QWORD *)(v25[7] + v9) = v14;
      ++v25[2];
    }
    v2[4] = v25;
    swift_bridgeObjectRelease();
  }
  sub_1B1E93E90(v29, v24);
  v30 = sub_1B1DC3CA4(v37 | ((unint64_t)HIDWORD(v37) << 32));
  if ((v28 & 1) == (v31 & 1))
  {
    v26 = v30;
    goto LABEL_37;
  }
LABEL_40:
  result = (id)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1E33634()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BidirectionalRemapTable()
{
  return objc_opt_self();
}

uint64_t sub_1B1E33688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  int v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
    v8 = *(void **)(result + 16);
    objc_msgSend(v8, sel_lock);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (v7 == 1)
    {
      v12 = *(_QWORD *)(v6 + 32);
      *(_QWORD *)(v6 + 32) = 0x8000000000000000;
      sub_1B1B853AC(a2, a1, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v6 + 32) = v12;
      swift_bridgeObjectRelease();
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v13 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0x8000000000000000;
      sub_1B1B853AC(a1, a2, v10);
      *(_QWORD *)(v6 + 24) = v13;
    }
    else
    {
      v14 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0x8000000000000000;
      sub_1B1B853AC(a2, a1, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v6 + 24) = v14;
      swift_bridgeObjectRelease();
      v11 = swift_isUniquelyReferenced_nonNull_native();
      v15 = *(_QWORD *)(v6 + 32);
      *(_QWORD *)(v6 + 32) = 0x8000000000000000;
      sub_1B1B853AC(a1, a2, v11);
      *(_QWORD *)(v6 + 32) = v15;
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_unlock);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E33814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
    v8 = *(void **)(result + 16);
    objc_msgSend(v8, sel_lock);
    if (v7 == 1)
    {
      v9 = v6 + 32;
      v10 = (_QWORD *)(v6 + 24);
    }
    else
    {
      v9 = v6 + 24;
      v10 = (_QWORD *)(v6 + 32);
    }
    sub_1B1E338CC(v9, v10, a1, a2);
    objc_msgSend(v8, sel_unlock);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E338CC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v29 = *(_QWORD *)(a4 + 16);
    if (v29)
    {
      v8 = (_QWORD *)result;
      v31 = *(_QWORD *)(a3 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = 0;
      v28 = v4 - 1;
      while (1)
      {
        v30 = *(_QWORD *)(a4 + 8 * v9 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v11 = (_QWORD *)*v8;
        v32 = (_QWORD *)*v8;
        *v8 = 0x8000000000000000;
        v12 = sub_1B1DC3CA4(v31 | ((unint64_t)HIDWORD(v31) << 32));
        v14 = v13;
        v15 = v11[2] + ((v13 & 1) == 0);
        if (v11[3] >= v15)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1B1EA9B9C();
        }
        else
        {
          sub_1B1E93E90(v15, isUniquelyReferenced_nonNull_native);
          v16 = sub_1B1DC3CA4(v31 | ((unint64_t)HIDWORD(v31) << 32));
          if ((v14 & 1) != (v17 & 1))
            goto LABEL_25;
          v12 = v16;
        }
        if ((v14 & 1) != 0)
        {
          *(_QWORD *)(v32[7] + 8 * v12) = v30;
        }
        else
        {
          v32[(v12 >> 6) + 8] |= 1 << v12;
          v18 = 8 * v12;
          *(_QWORD *)(v32[6] + v18) = v31;
          *(_QWORD *)(v32[7] + v18) = v30;
          ++v32[2];
        }
        *v8 = v32;
        swift_bridgeObjectRelease();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        v20 = (_QWORD *)*a2;
        v33 = (_QWORD *)*a2;
        *a2 = 0x8000000000000000;
        v21 = sub_1B1DC3CA4(v30 | ((unint64_t)HIDWORD(v30) << 32));
        v23 = v22;
        v24 = v20[2] + ((v22 & 1) == 0);
        if (v20[3] >= v24)
        {
          if ((v19 & 1) == 0)
            sub_1B1EA9B9C();
        }
        else
        {
          sub_1B1E93E90(v24, v19);
          v25 = sub_1B1DC3CA4(v30 | ((unint64_t)HIDWORD(v30) << 32));
          if ((v23 & 1) != (v26 & 1))
          {
LABEL_25:
            result = sub_1B2229FC4();
            __break(1u);
            return result;
          }
          v21 = v25;
        }
        if ((v23 & 1) != 0)
        {
          *(_QWORD *)(v33[7] + 8 * v21) = v31;
        }
        else
        {
          v33[(v21 >> 6) + 8] |= 1 << v21;
          v27 = 8 * v21;
          *(_QWORD *)(v33[6] + v27) = v30;
          *(_QWORD *)(v33[7] + v27) = v31;
          ++v33[2];
        }
        *a2 = v33;
        swift_bridgeObjectRelease();
        if (v28 != v9)
        {
          v31 = *(_QWORD *)(a3 + 8 * v9++ + 40);
          if (v29 != v9)
            continue;
        }
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1B1E33BB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v5 = sub_1B1DC3CA4(a3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    sub_1B1B83C18(a3);
    v8 = v7;
  }
  else
  {
    v8 = a3;
  }
  return sub_1B1B83C18(v8);
}

unint64_t sub_1B1E33C2C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int *v12;

  v2 = -1;
  if (a1 != 0xFFFFFFFFLL)
  {
    Strong = swift_weakLoadStrong();
    if (!Strong)
    {
      v3 = 0;
      v2 = -1;
      return v2 | (unint64_t)(v3 << 32);
    }
    v6 = Strong;
    v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
    v8 = *(void **)(Strong + 16);
    objc_msgSend(v8, sel_lock);
    if (v7 == 1)
    {
      v9 = *(_QWORD *)(v6 + 32);
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_11;
    }
    else
    {
      v9 = *(_QWORD *)(v6 + 24);
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_11;
    }
    v10 = sub_1B1DC3CA4(a1);
    if ((v11 & 1) != 0)
    {
      v12 = (unsigned int *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      v2 = *v12;
      v3 = v12[1];
LABEL_12:
      objc_msgSend(v8, sel_unlock);
      swift_release();
      return v2 | (unint64_t)(v3 << 32);
    }
LABEL_11:
    v3 = 0;
    v2 = -1;
    goto LABEL_12;
  }
  v3 = 0;
  return v2 | (unint64_t)(v3 << 32);
}

uint64_t sub_1B1E33D20()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v2 = Strong;
    v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
    v4 = *(void **)(Strong + 16);
    objc_msgSend(v4, sel_lock);
    v5 = 24;
    if (v3)
      v5 = 32;
    v6 = *(_QWORD *)(v2 + v5);
    swift_bridgeObjectRetain();
    objc_msgSend(v4, sel_unlock);
    swift_release();
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9E0];
  }
  type metadata accessor for RemapContext();
  v7 = swift_allocObject();
  v8 = MEMORY[0x1E0DEE9D8];
  sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRetain();
  v9 = sub_1B1B7DC84(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = v9;
  *(_BYTE *)(v7 + 16) = 0;
  return v7;
}

id sub_1B1E33E40()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultRemapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DefaultRemapper()
{
  return objc_opt_self();
}

uint64_t destroy for ReplicationEvent(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 56);
  if (v1 >= 0xF)
    v1 = *(_DWORD *)result + 15;
  switch(v1)
  {
    case 0u:
      return swift_bridgeObjectRelease();
    case 1u:
    case 2u:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 5u:
      goto LABEL_9;
    case 0xBu:
    case 0xCu:
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(result + 16);
    case 0xEu:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(result);
LABEL_9:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for ReplicationEvent(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = *(unsigned __int8 *)(a2 + 56);
  if (v4 >= 0xF)
    v4 = *(_DWORD *)a2 + 15;
  switch(v4)
  {
    case 0u:
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      *(_BYTE *)(a1 + 56) = 0;
      swift_bridgeObjectRetain();
      return a1;
    case 1u:
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
      v8 = 1;
      goto LABEL_8;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v9;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v8 = 2;
LABEL_8:
      *(_BYTE *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 3u:
      v10 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = 3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 56) = 4;
      return a1;
    case 5u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v11 = 5;
      goto LABEL_21;
    case 6u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 56) = 6;
      return a1;
    case 7u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 56) = 7;
      return a1;
    case 8u:
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 56) = 8;
      return a1;
    case 9u:
      v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 56) = 9;
      return a1;
    case 0xAu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 56) = 10;
      return a1;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v14 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 16, a2 + 16);
      *(_BYTE *)(a1 + 56) = 11;
      return a1;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v15 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 16, a2 + 16);
      *(_BYTE *)(a1 + 56) = 12;
      return a1;
    case 0xDu:
      v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v16;
      *(_BYTE *)(a1 + 56) = 13;
      return a1;
    case 0xEu:
      v17 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v17;
      (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1, a2);
      v18 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v18;
      v11 = 14;
LABEL_21:
      *(_BYTE *)(a1 + 56) = v11;
      swift_retain();
      break;
    default:
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for ReplicationEvent(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  char v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 0xF)
      v4 = *(_DWORD *)a1 + 15;
    switch(v4)
    {
      case 0u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 5u:
        goto LABEL_11;
      case 0xBu:
      case 0xCu:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
        break;
      case 0xEu:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
LABEL_11:
        swift_release();
        break;
      default:
        break;
    }
    v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 0xF)
      v5 = *(_DWORD *)a2 + 15;
    switch(v5)
    {
      case 0u:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_BYTE *)(a1 + 56) = 0;
        swift_bridgeObjectRetain();
        return a1;
      case 1u:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        v9 = *((_DWORD *)a2 + 4);
        *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
        *(_DWORD *)(a1 + 16) = v9;
        v10 = 1;
        goto LABEL_19;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
        v11 = *((_DWORD *)a2 + 9);
        *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
        *(_DWORD *)(a1 + 36) = v11;
        v10 = 2;
LABEL_19:
        *(_BYTE *)(a1 + 56) = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      case 3u:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
        v12 = *((_DWORD *)a2 + 7);
        *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
        *(_DWORD *)(a1 + 28) = v12;
        *(_QWORD *)(a1 + 40) = a2[5];
        *(_BYTE *)(a1 + 56) = 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      case 4u:
        *(_QWORD *)a1 = *a2;
        *(_BYTE *)(a1 + 56) = 4;
        return a1;
      case 5u:
        *(_QWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        v13 = 5;
        goto LABEL_32;
      case 6u:
        v14 = *a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v14;
        *(_BYTE *)(a1 + 56) = 6;
        return a1;
      case 7u:
        v15 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
        *(_OWORD *)a1 = v15;
        *(_BYTE *)(a1 + 56) = 7;
        return a1;
      case 8u:
        v16 = *(_OWORD *)a2;
        v17 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)a1 = v16;
        *(_BYTE *)(a1 + 56) = 8;
        return a1;
      case 9u:
        v18 = *(_OWORD *)a2;
        v19 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 32) = v19;
        *(_OWORD *)a1 = v18;
        *(_BYTE *)(a1 + 56) = 9;
        return a1;
      case 0xAu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 56) = 10;
        return a1;
      case 0xBu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v20 = a2[5];
        *(_QWORD *)(a1 + 40) = v20;
        *(_QWORD *)(a1 + 48) = a2[6];
        (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 16, (uint64_t)(a2 + 2));
        *(_BYTE *)(a1 + 56) = 11;
        return a1;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v21 = a2[5];
        *(_QWORD *)(a1 + 40) = v21;
        *(_QWORD *)(a1 + 48) = a2[6];
        (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 16, (uint64_t)(a2 + 2));
        *(_BYTE *)(a1 + 56) = 12;
        return a1;
      case 0xDu:
        v22 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(_BYTE *)(a1 + 56) = 13;
        return a1;
      case 0xEu:
        v23 = a2[3];
        *(_QWORD *)(a1 + 24) = v23;
        *(_QWORD *)(a1 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v23 - 8))(a1, a2);
        v24 = a2[6];
        *(_QWORD *)(a1 + 40) = a2[5];
        *(_QWORD *)(a1 + 48) = v24;
        v13 = 14;
LABEL_32:
        *(_BYTE *)(a1 + 56) = v13;
        swift_retain();
        break;
      default:
        v6 = *(_OWORD *)a2;
        v7 = *((_OWORD *)a2 + 1);
        v8 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)a1 = v6;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for ReplicationEvent(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 0xF)
      v4 = *(_DWORD *)a1 + 15;
    switch(v4)
    {
      case 0u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 5u:
        goto LABEL_11;
      case 0xBu:
      case 0xCu:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
        break;
      case 0xEu:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
LABEL_11:
        swift_release();
        break;
      default:
        break;
    }
    v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 0xF)
      v5 = *(_DWORD *)a2 + 15;
    switch(v5)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 56) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
        v7 = 1;
        goto LABEL_31;
      case 2u:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        v7 = 2;
        goto LABEL_31;
      case 3u:
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v7 = 3;
        goto LABEL_31;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = 4;
        goto LABEL_31;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v7 = 5;
        goto LABEL_31;
      case 6u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v7 = 6;
        goto LABEL_31;
      case 7u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        v7 = 7;
        goto LABEL_31;
      case 8u:
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v7 = 8;
        goto LABEL_31;
      case 9u:
        v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v7 = 9;
        goto LABEL_31;
      case 0xAu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v7 = 10;
        goto LABEL_31;
      case 0xBu:
        v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v12;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v7 = 11;
        goto LABEL_31;
      case 0xCu:
        v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v7 = 12;
        goto LABEL_31;
      case 0xDu:
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        v7 = 13;
        goto LABEL_31;
      case 0xEu:
        v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v15;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v7 = 14;
LABEL_31:
        *(_BYTE *)(a1 + 56) = v7;
        break;
      default:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF1 && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 241);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 0x10)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReplicationEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 241;
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1E348AC(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 0xF)
    return (*(_DWORD *)a1 + 15);
  return result;
}

uint64_t sub_1B1E348C8(uint64_t result, unsigned int a2)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 15;
    LOBYTE(a2) = 15;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationEvent()
{
  return &type metadata for ReplicationEvent;
}

uint64_t destroy for ReplicationStreamBuilder()
{
  swift_unownedRelease();
  return swift_unknownObjectUnownedDestroy();
}

uint64_t initializeWithCopy for ReplicationStreamBuilder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = swift_unownedRetain();
  swift_unknownObjectUnownedCopyInit();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for ReplicationStreamBuilder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = swift_unownedRetain();
  swift_unownedRelease();
  swift_unknownObjectUnownedCopyAssign();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t initializeWithTake for ReplicationStreamBuilder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectUnownedTakeInit();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ReplicationStreamBuilder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unownedRelease();
  swift_unknownObjectUnownedTakeAssign();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationStreamBuilder(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationStreamBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      *(_QWORD *)(result + 16) = 1;
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationStreamBuilder()
{
  return &type metadata for ReplicationStreamBuilder;
}

uint64_t type metadata accessor for ComponentValueWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ComponentValueWriter);
}

uint64_t sub_1B1E34B10()
{
  uint64_t v0;

  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1B1E34B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return sub_1B19FA198(v3, a1);
}

uint64_t sub_1B1E34B74()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[3] + 8))(v0[4], v0[5], v0[2]);
}

void sub_1B1E34BAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5F3D8)
  {
    sub_1B1B68ED0();
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5F3D8);
  }
}

uint64_t sub_1B1E34C08(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E2EF30(a1, *(_QWORD *)(v1 + 40));
}

uint64_t type metadata accessor for ComponentWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ComponentWriter);
}

uint64_t sub_1B1E34C34(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  sub_1B1E34C70(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1B1E34C70(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B1A025A0(255, a3);
    v4 = sub_1B2229124();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t *sub_1B1E34CC4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1F58DC0(a1, v1);
}

uint64_t sub_1B1E34CCC(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E330E0(a1, *(void (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_1B1E34CD4(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1B202A38C(0, v2, 0);
    v3 = v26;
    v24 = OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed;
    v25 = a2;
    v6 = (unsigned int *)(a1 + 36);
    while (1)
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      if ((_DWORD)v7 != -1 || (_DWORD)v8 != 0)
      {
        Strong = swift_weakLoadStrong();
        if (Strong)
          break;
      }
      v15 = 0;
      v16 = -1;
LABEL_17:
      v21 = *(_QWORD *)(v26 + 16);
      v20 = *(_QWORD *)(v26 + 24);
      if (v21 >= v20 >> 1)
        sub_1B202A38C(v20 > 1, v21 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v26 + 16) = v21 + 1;
      v22 = v26 + 8 * v21;
      *(_DWORD *)(v22 + 32) = v16;
      *(_DWORD *)(v22 + 36) = v15;
      if (!--v2)
        return v3;
    }
    v11 = Strong;
    v12 = *(unsigned __int8 *)(v25 + v24);
    v13 = *(void **)(Strong + 16);
    objc_msgSend(v13, sel_lock);
    if (v12 == 1)
    {
      v14 = *(_QWORD *)(v11 + 32);
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_15;
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 24);
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_15;
    }
    v17 = sub_1B1DC3CA4(v7 | (v8 << 32));
    if ((v18 & 1) != 0)
    {
      v19 = (int *)(*(_QWORD *)(v14 + 56) + 8 * v17);
      v16 = *v19;
      v15 = v19[1];
LABEL_16:
      objc_msgSend(v13, sel_unlock);
      swift_release();
      goto LABEL_17;
    }
LABEL_15:
    v15 = 0;
    v16 = -1;
    goto LABEL_16;
  }
  return v3;
}

uint64_t sub_1B1E34E70(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1B202A38C(0, v2, 0);
    v3 = v14;
    v6 = a1 + 36;
    do
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = 0xFFFFFFFFLL;
      if (*(_QWORD *)(v7 + 16))
      {
        v9 = sub_1B1DC3CA4(*(_QWORD *)(v6 - 4));
        if ((v10 & 1) != 0)
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
      }
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        sub_1B202A38C(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(_QWORD *)(v14 + 8 * v12 + 32) = v8;
      v6 += 8;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1B1E34F60(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1B202A198(0, v2, 0);
    v3 = v16;
    v6 = a1 + 32;
    do
    {
      sub_1B19FA198(v6, (uint64_t)&v13);
      v8 = v14;
      v7 = v15;
      sub_1B19FC264((uint64_t)&v13, v14);
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t))(*(_QWORD *)(v7 + 8) + 96))(a2, &off_1E6376550, v8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B202A198(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v16;
      }
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1B202A198(v10 > 1, v11 + 1, 1);
        v3 = v16;
      }
      *(_QWORD *)(v3 + 16) = v11 + 1;
      sub_1B1A02518(&v13, v3 + 40 * v11 + 32);
      v6 += 40;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t sub_1B1E350A8(unint64_t result, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD v9[2];
  uint64_t v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;

  v3 = v2;
  v5 = result;
  v6 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    v7 = HIDWORD(a2);
    if (a2 != 0xFFFFFFFF)
    {
      v8 = *v2;
      swift_unownedRetainStrong();
      sub_1B201FF60(v5, (uint64_t)&type metadata for IsSubEntityOf, (uint64_t)&off_1E637B1B0, a2);
      swift_release();
      swift_unownedRetainStrong();
      swift_release();
      swift_unownedRetainStrong();
      swift_release();
      result = swift_unknownObjectUnownedLoadStrong();
      if (result)
        result = swift_unknownObjectRelease();
      if (*((_BYTE *)v3 + 24) == 1)
      {
        swift_unownedRetainStrong();
        v9[0] = v5;
        v9[1] = v6;
        v10 = v8;
        v11 = &type metadata for IsSubEntityOf;
        v12 = &off_1E637B1B0;
        v13 = a2;
        v14 = v7;
        v15 = v8;
        v16 = 8;
        sub_1B1E2DB30((uint64_t)v9);
        swift_release();
        return sub_1B1ADF058((uint64_t)v9);
      }
    }
  }
  return result;
}

uint64_t sub_1B1E351C0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  _BYTE v16[32];

  if ((a1 & 1) != 0)
  {
    v9 = 0;
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (v8)
      goto LABEL_8;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if ((a1 & 2) != 0)
    {
      v9 = v8 != 0;
      if (!v8)
        goto LABEL_10;
      goto LABEL_8;
    }
    if (v8)
    {
      v9 = *(_BYTE *)(v8 + 80);
LABEL_8:
      MEMORY[0x1B5E240CC](v8 + 48);
      v8 = *(_QWORD *)(v8 + 56);
      goto LABEL_10;
    }
    v9 = 0;
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v14[0] = a2;
  v14[2] = v8;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v15 = v9;
  sub_1B1A02530((uint64_t)v14, (uint64_t)v16);
  sub_1B1E35354();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  LOBYTE(v14[0]) = 1;
  v11 = sub_1B1E2D74C(inited, a4, 0, 0x100000000uLL);
  swift_setDeallocating();
  if (*(_QWORD *)(v11 + 16))
    v12 = *(_QWORD *)(v11 + 32);
  else
    v12 = 0;
  swift_bridgeObjectRelease();
  sub_1B1A0256C((uint64_t)v16);
  sub_1B1E31340((a1 & 4) == 0);
  return v12;
}

void sub_1B1E35354()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE30)
  {
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE30);
  }
}

uint64_t sub_1B1E353A8()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E353B8()
{
  return sub_1B20204E8();
}

uint64_t sub_1B1E353C0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E353D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1E3540C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t initializeWithCopy for ExistentialComponentWriter(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for ExistentialComponentWriter(uint64_t a1, uint64_t a2)
{
  sub_1B1E354A4((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t *sub_1B1E354A4(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for ExistentialComponentWriter(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExistentialComponentWriter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExistentialComponentWriter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExistentialComponentWriter()
{
  return &type metadata for ExistentialComponentWriter;
}

uint64_t sub_1B1E356F0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1B1E35764(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1B1E357F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1B1E35838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1B1E35880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1B1E358C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1B1E35910(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1B1E359D0 + 4 * byte_1B22980DA[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_1B1E35A44(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1B1E35C1C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B1E35C98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_1B1E35D54(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *sub_1B1E35D98(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *sub_1B1E35E08(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_1B1E35E78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1B1E35EC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_1B1E35F30(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1E36004 + 4 * byte_1B22980E8[(v9 - 1)]))();
}

void sub_1B1E36074(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1B1E36270(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1E2F35C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1B1E36294()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16);
  if (v2)
  {
    v23 = *(_QWORD *)(v0 + 16);
    v24 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    sub_1B2029FFC(0, v2, 0);
    v3 = 32;
    do
    {
      v4 = sub_1B222A210();
      v6 = v5;
      v8 = *(_QWORD *)(v24 + 16);
      v7 = *(_QWORD *)(v24 + 24);
      if (v8 >= v7 >> 1)
        sub_1B2029FFC(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v24 + 16) = v8 + 1;
      v9 = v24 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_release();
    v1 = v23;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 16);
  if (v10)
  {
    v11 = swift_retain() + 40;
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v13 = *(_QWORD *)(v11 - 8);
      v14 = sub_1B1C94ED8(v13);
      v15 = sub_1B1F276FC(v14, 0, v13);
      v17 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_1B1C63044(0, v12[2] + 1, 1, v12);
      v19 = v12[2];
      v18 = v12[3];
      if (v19 >= v18 >> 1)
        v12 = sub_1B1C63044(v18 > 1, v19 + 1, 1, v12);
      v12[2] = v19 + 1;
      v20 = &v12[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_release();
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  sub_1B19F48F0((uint64_t)v12);
  sub_1B19FA1DC();
  sub_1B19FA230();
  v21 = sub_1B2228644();
  swift_bridgeObjectRelease();
  return v21;
}

BOOL sub_1B1E36538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 128);
  if (*(_QWORD *)(v3 + 16) && (v5 = sub_1B1DC3AC8(a1), (v6 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5) + 32) == a1;
  else
    return 0;
}

uint64_t sub_1B1E36598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_1ED4B8030 != -1)
    swift_once();
  type metadata accessor for EntityClass();
  swift_allocObject();
  v0 = swift_retain();
  v1 = sub_1B1E36C3C(v0, -2, MEMORY[0x1E0DEE9D8]);
  result = swift_release();
  qword_1ED4D09E0 = v1;
  return result;
}

uint64_t sub_1B1E36620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 128);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v5 = sub_1B1DC3AC8((uint64_t)&type metadata for ClassSettings);
  if ((v6 & 1) == 0)
    return 0;
  if (*(ValueMetadata **)(*(_QWORD *)(v2 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5) + 32) != &type metadata for ClassSettings)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return 0;
  v9 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1B19FA198(v9, (uint64_t)v11);
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
    if (swift_dynamicCast())
      break;
    v9 += 40;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B1E36730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13[3];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 40;
    while (sub_1B1F24B94(*(_QWORD *)(v4 - 8)))
    {
      v4 += 16;
      if (!--v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(v1 + 32);
    v13[2] = sub_1B2228CD4();
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6)
      return swift_bridgeObjectRelease();
    swift_retain();
    for (i = v5 + 40; ; i += 16)
    {
      v8 = *(_QWORD *)(i - 8);
      v9 = *(_QWORD *)(*(_QWORD *)i + 8);
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 24);
      v11 = v10(v8, v9);
      if ((sub_1B1B8A534(v13, v11) & 1) == 0)
        break;
      if (!--v6)
      {
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    sub_1B2229430();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v10(v8, v9);
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B19ED84C();
    swift_retain();
    sub_1B222952C();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E36968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_retain();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      sub_1B1F24B64();
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_release();
    if (v1)
      goto LABEL_5;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v1)
LABEL_5:
      MEMORY[0x1B5E23F88](v1, -1, -1);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (qword_1ED4B8C48 != -1)
    swift_once();
  vfx_counters.add(_:_:)(dword_1ED4D0978, -1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B1E36AFC()
{
  sub_1B1E36968();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntityClass()
{
  return objc_opt_self();
}

uint64_t sub_1B1E36B3C()
{
  _QWORD v1[2];

  sub_1B2229430();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "<EntityClass[");
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1E36294();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v1[0];
}

uint64_t sub_1B1E36C1C()
{
  return sub_1B1E36B3C();
}

uint64_t sub_1B1E36C3C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __n128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __n128 v49;
  _BYTE v50[24];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v4 = v3;
  *(_QWORD *)(v3 + 16) = a1;
  v8 = sub_1B2162978((uint64_t)&type metadata for AnonymousEntity);
  *(_BYTE *)(v3 + 208) = v8 & 1;
  swift_retain();
  v9 = sub_1B1E36620(a3);
  if ((v10 & 1) != 0)
  {
    v19 = *(_QWORD *)(a1 + 64);
    v20 = *(_QWORD *)(a1 + 72);
    v47 = *(_OWORD *)(a1 + 96);
    v48 = *(_OWORD *)(a1 + 80);
    v17 = *(_QWORD *)(a1 + 112);
    v18 = *(_BYTE *)(a1 + 120);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v4 + 32) = v19;
    *(_QWORD *)(v4 + 40) = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    v16 = v47;
    v15 = v48;
  }
  else
  {
    v11 = v9;
    v12 = swift_retain();
    v13 = sub_1B1C50E3C(v12);
    swift_release();
    v8 = *(_BYTE *)(v4 + 208);
    sub_1B216B51C(v13, v11, 0, v8 ^ 1, (uint64_t)&v49);
    v14 = *(_QWORD *)v50;
    v15 = *(_OWORD *)&v50[8];
    v16 = v51;
    v17 = v52;
    v18 = BYTE8(v52);
    *(__n128 *)(v4 + 24) = v49;
    *(_QWORD *)(v4 + 40) = v14;
  }
  *(_OWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 64) = v16;
  *(_QWORD *)(v4 + 80) = v17;
  *(_BYTE *)(v4 + 88) = v18;
  *(_DWORD *)(v4 + 204) = a2;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v46 = a3;
    swift_retain();
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v21 + 40;
    while (2)
    {
      v27 = v26 + 16 * v25;
      v28 = v25;
      while (1)
      {
        v29 = *(_QWORD *)(v27 - 8);
        v25 = v28 + 1;
        v30 = *(_QWORD *)(*(_QWORD *)v27 + 8);
        v23 |= (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 48))(v29, v30);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v30 + 64))(v29, v30) & 1) != 0)
          break;
        v27 += 16;
        ++v28;
        if (v22 == v25)
        {
          swift_release();
          v31 = v24;
          if ((*(_BYTE *)(v4 + 208) & 1) != 0)
            goto LABEL_14;
LABEL_12:
          a3 = v46;
          goto LABEL_23;
        }
      }
      v24 = 1;
      v26 = v21 + 40;
      if (v22 - 1 != v28)
        continue;
      break;
    }
    swift_release();
    v31 = 1;
    if (*(_BYTE *)(v4 + 208) != 1)
      goto LABEL_12;
LABEL_14:
    *(_WORD *)(v4 + 212) = 0;
    a3 = v46;
    if ((v23 & 1) != 0)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v49.n128_u64[0] = 0;
      v49.n128_u64[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      type metadata accessor for EntityFamily();
      sub_1B22295EC();
      v32 = v49;
      v33 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v49.n128_u64[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v33, (uint64_t *)&v49, v32.n128_i64[0], v32.n128_i64[1]);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else if ((v8 & 1) != 0)
  {
    v31 = 0;
    *(_WORD *)(v4 + 212) = 0;
  }
  else
  {
    LOBYTE(v23) = 0;
    v31 = 0;
LABEL_23:
    *(_BYTE *)(v4 + 212) = v23 & 1;
    *(_BYTE *)(v4 + 213) = sub_1B2162978((uint64_t)&type metadata for PropagateDirtiness);
  }
  *(_BYTE *)(v4 + 200) = v31 & 1;
  *(_BYTE *)(v4 + 209) = sub_1B2162978((uint64_t)&type metadata for Tombstone);
  *(_BYTE *)(v4 + 210) = sub_1B2162978((uint64_t)&type metadata for UnstableOrdering);
  *(_BYTE *)(v4 + 211) = sub_1B2162978((uint64_t)&type metadata for MonoChunk);
  v34 = swift_bridgeObjectRetain();
  sub_1B1C94FE8(v34, &v49);
  v35 = *(_QWORD *)&v50[16];
  v36 = v53;
  v37 = v54;
  v38 = v55;
  v39 = *(_OWORD *)v50;
  *(__n128 *)(v4 + 96) = v49;
  *(_OWORD *)(v4 + 112) = v39;
  *(_QWORD *)(v4 + 128) = v35;
  *(_OWORD *)(v4 + 136) = v51;
  *(_OWORD *)(v4 + 152) = v52;
  *(_QWORD *)(v4 + 168) = v36;
  *(_BYTE *)(v4 + 176) = v37;
  *(_QWORD *)(v4 + 184) = v38;
  v40 = *(_QWORD *)(a3 + 16);
  if (v40)
  {
    v41 = a3 + 32;
    swift_bridgeObjectRetain();
    v42 = 0;
    do
    {
      sub_1B19FA198(v41, (uint64_t)&v49);
      v43 = *(_QWORD *)&v50[8];
      v44 = *(_QWORD *)&v50[16];
      sub_1B19FA070(&v49, *(uint64_t *)&v50[8]);
      v42 ^= (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v49);
      v41 += 40;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    v42 = 0;
  }
  *(_QWORD *)(v4 + 192) = v42;
  sub_1B1E36730();
  if (qword_1ED4B8C48 != -1)
    swift_once();
  vfx_counters.add(_:_:)(dword_1ED4D0978, 1);
  return v4;
}

ValueMetadata *type metadata accessor for WorldCounters()
{
  return &type metadata for WorldCounters;
}

uint64_t sub_1B1E3712C()
{
  int default_ring_capacity;
  uint64_t v1;
  uint64_t result;

  default_ring_capacity = vfx_counters_get_default_ring_capacity();
  v1 = vfx_counters_create(default_ring_capacity);
  result = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000011, 0x80000001B233E560, 1, 1, v1);
  qword_1ED4D0970 = v1;
  dword_1ED4D0978 = result;
  return result;
}

uint64_t sub_1B1E37188@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  v2 = result;
  if (result)
  {
    v4 = sub_1B1E376E4();
    v42 = vfx_counters.addCounter(name:scope:kind:color:)("CPU time", 8, 2, 0, 0, v4, v2);
    v41 = vfx_counters.addCounter(name:scope:kind:)(0x6164705520555043, 0xEF656D6974206574, 0, 0, v2);
    v40 = vfx_counters.addCounter(name:scope:kind:)(0x646E655220555043, 0xEF656D6974207265, 0, 0, v2);
    v39 = vfx_counters.addCounter(name:scope:kind:)(0x656D697420555047, 0xE800000000000000, 0, 0, v2);
    v38 = vfx_counters.addCounter(name:scope:kind:)(0x6164705520555047, 0xEF656D6974206574, 0, 0, v2);
    v37 = vfx_counters.addCounter(name:scope:kind:)(0x646E655220555047, 0xEF656D6974207265, 0, 0, v2);
    v36 = vfx_counters.addCounter(name:scope:kind:)(0x6574614C20555047, 0xEB0000000079636ELL, 0, 0, v2);
    v35 = vfx_counters.addCounter(name:scope:kind:)(0x6552206B636F6C43, 0xEB00000000746573, 1, 1, v2);
    v34 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000010, 0x80000001B233E580, 0, 1, v2);
    v33 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000012, 0x80000001B233E5A0, 0, 1, v2);
    v32 = vfx_counters.addCounter(name:scope:kind:)(0x4320797469746E45, 0xEC000000746E756FLL, 1, 1, v2);
    v31 = vfx_counters.addCounter(name:scope:kind:)(0x6F43206B6E756843, 0xEB00000000746E75, 1, 1, v2);
    v30 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000010, 0x80000001B233E5C0, 1, 2, v2);
    v29 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000016, 0x80000001B233E5E0, 0, 2, v2);
    v28 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000015, 0x80000001B233E600, 0, 2, v2);
    v5 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000019, 0x80000001B233E620, 0, 2, v2);
    v6 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000021, 0x80000001B233E640, 0, 2, v2);
    v7 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000020, 0x80000001B233E670, 0, 2, v2);
    v8 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000017, 0x80000001B233E6A0, 0, 2, v2);
    v9 = vfx_counters.addCounter(name:scope:kind:)(0x3E2D206B6E756843, 0xED00006174614420, 0, 2, v2);
    v10 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000019, 0x80000001B233E6C0, 0, 2, v2);
    v11 = vfx_counters.addCounter(name:scope:kind:)(0xD000000000000010, 0x80000001B233E6E0, 1, 1, v2);
    v12 = vfx_counters.addCounter(name:scope:kind:)(0x2065727574786554, 0xED0000746E756F43, 1, 1, v2);
    result = vfx_counters.addCounter(name:scope:kind:)(0x2065727574786554, 0xEE0079726F6D654DLL, 1, 2, v2);
    v14 = v28;
    v13 = v29;
    v16 = v30;
    v15 = v31;
    v17 = v32;
    v18 = v33;
    v20 = v34;
    v19 = v35;
    v22 = v36;
    v21 = v37;
    v24 = v38;
    v23 = v39;
    v26 = v40;
    v25 = v41;
    v27 = v42;
  }
  else
  {
    v27 = 0;
    v25 = 0;
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v17 = 0;
    v15 = 0;
    v16 = 0;
    v13 = 0;
    v14 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v25;
  *(_DWORD *)(a2 + 16) = v26;
  *(_DWORD *)(a2 + 20) = v23;
  *(_DWORD *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 28) = v21;
  *(_DWORD *)(a2 + 32) = v22;
  *(_DWORD *)(a2 + 36) = v19;
  *(_DWORD *)(a2 + 40) = v20;
  *(_DWORD *)(a2 + 44) = v18;
  *(_DWORD *)(a2 + 48) = v17;
  *(_DWORD *)(a2 + 52) = v15;
  *(_DWORD *)(a2 + 56) = v16;
  *(_DWORD *)(a2 + 60) = v13;
  *(_DWORD *)(a2 + 64) = v14;
  *(_DWORD *)(a2 + 68) = v5;
  *(_DWORD *)(a2 + 72) = v6;
  *(_DWORD *)(a2 + 76) = v7;
  *(_DWORD *)(a2 + 80) = v8;
  *(_DWORD *)(a2 + 84) = v9;
  *(_DWORD *)(a2 + 88) = v10;
  *(_DWORD *)(a2 + 92) = v11;
  *(_DWORD *)(a2 + 96) = v12;
  *(_DWORD *)(a2 + 100) = result;
  return result;
}

uint64_t sub_1B1E376E4()
{
  return 4278236134;
}

uint64_t type metadata accessor for ParticleLocalBoxCollider.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1E37710(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;

  v3 = v1;
  sub_1B1E38474(0, &qword_1EEF5F480, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v13[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E383EC();
  sub_1B222A180();
  v11 = v3[1];
  v14 = *v3;
  v15 = v11;
  v13[15] = 0;
  sub_1B1E384D0();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_1B2229934();
    LOBYTE(v14) = 2;
    sub_1B2229934();
    LOBYTE(v14) = 3;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B1E37898()
{
  return "ParticleLocalBoxCollider";
}

void sub_1B1E378AC(char *a1)
{
  sub_1B1F976E8(*a1);
}

uint64_t sub_1B1E378B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1E378E0 + 4 * byte_1B2298530[*v0]))(7892834, 0xE300000000000000);
}

uint64_t sub_1B1E378E0()
{
  return 0x6963697473616C65;
}

uint64_t sub_1B1E378FC()
{
  return 0x6E6F697463697266;
}

uint64_t sub_1B1E37914()
{
  return 1885957222;
}

uint64_t sub_1B1E37924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E37A64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E37948()
{
  sub_1B1E383EC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E37970()
{
  sub_1B1E383EC();
  return sub_1B222A1E0();
}

double sub_1B1E37998@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1B1E38204(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B1E379D8(_QWORD *a1)
{
  return sub_1B1E37710(a1);
}

uint64_t sub_1B1E379EC()
{
  return type metadata accessor for ParticleLocalBoxCollider.System();
}

int32x2_t sub_1B1E37A08@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v8;
  int32x2_t result;
  __int128 v10;

  sub_1B1AE0C74();
  v10 = v2;
  __asm { FMOV            V0.4S, #1.0 }
  sub_1B1AE0C74();
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v8;
  result = vdup_n_s32(0x3DCCCCCDu);
  *(int32x2_t *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1B1E37A64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7892834 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6963697473616C65 && a2 == 0xEA00000000007974 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697463697266 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1885957222 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t *sub_1B1E37C08(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  float32x4_t *v41;
  int8x16_t v42;
  __int32 v43;
  int32x4_t v44;
  int v45;
  int32x4_t v46;
  int v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t v78;
  _QWORD *v79;
  _QWORD v80[5];
  char v81;
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84[8];
  _OWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _BYTE v92[48];
  _OWORD v93[2];
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _BYTE v100[56];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  swift_retain_n();
  sub_1B1D18BBC(v2, (uint64_t)v80);
  v5 = v80[0];
  v4 = v80[1];
  v7 = v80[2];
  v6 = v80[3];
  v8 = v81;
  swift_release();
  sub_1B19F66A0((uint64_t)v80, (uint64_t)v92, &qword_1EEF5F468);
  if (v92[40] == 2)
  {
    v9 = 0;
    v58 = (float32x4_t)xmmword_1B2244F70;
    v10.i64[0] = 0;
    v78 = (float32x4_t)xmmword_1B2244E20;
  }
  else
  {
    v11.i64[0] = v5;
    v11.i64[1] = v4;
    v78 = v11;
    v10.i64[0] = v7;
    v10.i64[1] = v6;
    v58 = v10;
    v9 = v8 & 1;
  }
  *(double *)v12.i64 = sub_1B1E85968(v2, *(int32x2_t *)v10.f32);
  v75 = v13;
  v76 = v12;
  v74 = v14;
  v59 = v15;
  v16 = *(_OWORD *)(a1 + 104);
  v97 = *(_OWORD *)(a1 + 88);
  v98 = v16;
  v99 = *(_QWORD *)(a1 + 120);
  sub_1B19EFB98((uint64_t)v82);
  v95[0] = v82[0];
  v95[1] = v82[1];
  v96 = v83;
  sub_1B1E8FCE4(v3, (uint64_t)v95, 0x200000000, v84);
  sub_1B19F66A0((uint64_t)v84, (uint64_t)v85, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v85[0])
  {
    sub_1B19ED720((uint64_t)v82);
    return (uint64_t *)swift_release();
  }
  if (v91 <= 0 || (v65 = v88) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v82);
    goto LABEL_34;
  }
  v60 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v59, v74, v78, 2), v75, *(float32x2_t *)v78.f32, 1), v76, v78.f32[0]);
  v77 = v90[4];
  v17 = *(_BYTE *)(v89 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v93[0] = v85[0];
  v93[1] = v85[1];
  v94 = v86;
  v62 = (uint64_t)(v90 + 6);
  v63 = v87;
  v79 = v90;
  v61 = v90 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v18 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v57 = _Q0;
  v64 = v17;
  do
  {
    v24 = (unsigned int *)(v63 + 48 * v18);
    v25 = *v24;
    v26 = v24[1];
    v27 = *((_QWORD *)v24 + 4);
    v66 = *((_QWORD *)v24 + 3);
    v67 = (uint64_t *)*((_QWORD *)v24 + 2);
    v28 = *((_QWORD *)v24 + 5);
    if ((v17 & 1) != 0)
    {
      v29 = *(os_unfair_lock_s **)(v28 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v29);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v77);
    sub_1B19F66A0(v62, (uint64_t)v100, &qword_1ED4B7FB0);
    v30 = v79[4];
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v79[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
    v79[7] = v31;
    v61[1] = 0;
    v61[2] = 0;
    *v61 = 0;
    swift_release();
    v32 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v67, v66, v27, (uint64_t)v79);
    if ((_DWORD)v25 != (_DWORD)v26)
    {
      v40 = v26 - v25;
      v41 = (float32x4_t *)(v32 + 16 * v25);
      v35 = v71;
      v17 = v64;
      v42.i64[0] = 0x8000000080000000;
      v42.i64[1] = 0x8000000080000000;
      v34 = v73;
      v33.i32[3] = v74.i32[3];
      v36 = v72;
      v39 = v68;
      v38 = v69;
      while (1)
      {
        v43 = v33.i32[3];
        v37 = *v41;
        v33 = vabdq_f32(*v41, v60);
        v33.i32[3] = v43;
        if (v9)
        {
          v44 = vcgtq_f32(v33, v58);
          v45 = v44.i32[1];
          if (v44.i32[1] >= v44.i32[0])
            v45 = v44.i32[0];
          if (v44.i32[2] < v45)
            v45 = v44.i32[2];
          if ((v45 & 0x80000000) == 0)
            goto LABEL_17;
        }
        else
        {
          v46 = vcgtq_f32(v58, v33);
          v47 = v46.i32[1];
          if (v46.i32[1] <= v46.i32[0])
            v47 = v46.i32[0];
          if (v46.i32[2] > v47)
            v47 = v46.i32[2];
          if ((v47 & 0x80000000) == 0)
            goto LABEL_17;
        }
        v48 = vsubq_f32(v37, v60);
        v49 = vsubq_f32(v33, v58);
        v50 = (float32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v48, v42), v57), vorrq_s8((int8x16_t)vcltzq_f32(v48), (int8x16_t)vcgtzq_f32(v48)));
        v49.i32[3] = 0;
        v51 = vmaxnmq_f32(v49, (float32x4_t)0);
        v52 = vmulq_f32(v50, v51);
        v51.i32[3] = v39.i32[3];
        v50.i32[3] = v35.i32[3];
        v53 = *v41;
        v53.i32[3] = v38.i32[3];
        v54 = vsubq_f32(v37, v52);
        v52.i32[3] = v36.i32[3];
        v54.i32[3] = v34.i32[3];
        v55 = v54;
        v55.i32[3] = 1.0;
        v34 = v54;
        *v41 = v55;
        v35 = v50;
        v39 = v51;
        v36 = v52;
        v38 = v53;
LABEL_17:
        v37.i32[3] = v70.i32[3];
        ++v41;
        if (!--v40)
          goto LABEL_14;
      }
    }
    v17 = v64;
    v34 = v73;
    v33 = v74;
    v35 = v71;
    v36 = v72;
    v38 = v69;
    v37 = v70;
    v39 = v68;
LABEL_14:
    v68 = v39;
    v69 = v38;
    v70 = v37;
    v71 = v35;
    v72 = v36;
    v73 = v34;
    v74 = v33;
    sub_1B1F05D48(v79, (unsigned __int16 **)v93, (uint64_t)v100);
    sub_1B1F03804((char *)v28);
    ecs_stack_allocator_pop_snapshot(v77);
    if ((v17 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
    }
    swift_release();
    ++v18;
  }
  while (v18 != v65);
  sub_1B19ED720((uint64_t)v82);
LABEL_34:
  swift_release();
  sub_1B19ED748(v84);
  return sub_1B19ED748(v84);
}

__n128 initializeWithCopy for ParticleLocalBoxCollider(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleLocalBoxCollider(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleLocalBoxCollider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleLocalBoxCollider()
{
  return &type metadata for ParticleLocalBoxCollider;
}

uint64_t sub_1B1E38204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  sub_1B1E38474(0, &qword_1EEF5F470, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v18 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E383EC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v22 = 0;
  sub_1B1E38430();
  sub_1B2229814();
  v18 = v21;
  v19 = v20;
  LOBYTE(v20) = 1;
  sub_1B22297F0();
  v12 = v11;
  LOBYTE(v20) = 2;
  sub_1B22297F0();
  v14 = v13;
  LOBYTE(v20) = 3;
  v15 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v17 = v18;
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v17;
  *(_DWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 36) = v14;
  *(_BYTE *)(a2 + 40) = v15 & 1;
  return result;
}

unint64_t sub_1B1E383EC()
{
  unint64_t result;

  result = qword_1EEF5F478;
  if (!qword_1EEF5F478)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298700, &type metadata for ParticleLocalBoxCollider.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F478);
  }
  return result;
}

unint64_t sub_1B1E38430()
{
  unint64_t result;

  result = qword_1ED4B9DC8;
  if (!qword_1ED4B9DC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228273C, &type metadata for AABB);
    atomic_store(result, (unint64_t *)&qword_1ED4B9DC8);
  }
  return result;
}

void sub_1B1E38474(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E383EC();
    v7 = a3(a1, &type metadata for ParticleLocalBoxCollider.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1B1E384D0()
{
  unint64_t result;

  result = qword_1EEF5F488;
  if (!qword_1EEF5F488)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282714, &type metadata for AABB);
    atomic_store(result, (unint64_t *)&qword_1EEF5F488);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleLocalBoxCollider.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1E38560 + 4 * byte_1B2298539[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1E38594 + 4 * byte_1B2298534[v4]))();
}

uint64_t sub_1B1E38594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E3859C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E385A4);
  return result;
}

uint64_t sub_1B1E385B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E385B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1E385BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E385C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleLocalBoxCollider.CodingKeys()
{
  return &type metadata for ParticleLocalBoxCollider.CodingKeys;
}

unint64_t sub_1B1E385E4()
{
  unint64_t result;

  result = qword_1EEF5F490;
  if (!qword_1EEF5F490)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22986D8, &type metadata for ParticleLocalBoxCollider.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F490);
  }
  return result;
}

unint64_t sub_1B1E3862C()
{
  unint64_t result;

  result = qword_1EEF5F498;
  if (!qword_1EEF5F498)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298648, &type metadata for ParticleLocalBoxCollider.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F498);
  }
  return result;
}

unint64_t sub_1B1E38674()
{
  unint64_t result;

  result = qword_1EEF5F4A0;
  if (!qword_1EEF5F4A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298670, &type metadata for ParticleLocalBoxCollider.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F4A0);
  }
  return result;
}

uint64_t sub_1B1E386B8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Skybox;
  *(_QWORD *)(inited + 40) = &off_1E63BD0F0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E388B0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Name;
  *(_QWORD *)(inited + 40) = &off_1E63B9B60;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E38AA8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for GraphComponent;
  *(_QWORD *)(inited + 40) = &off_1E637F738;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E38CA0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for CurveComponent;
  *(_QWORD *)(inited + 40) = &off_1E637EB68;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E38E98@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for CurveRuntime;
  *(_QWORD *)(inited + 40) = &off_1E6374B70;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39090@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for MovieFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E637FDE0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39288@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for HiddenOrHasHiddenAncestor;
  *(_QWORD *)(inited + 40) = &off_1E636CBB0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39480@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for EffectiveHiddenState;
  *(_QWORD *)(inited + 40) = &off_1E639B330;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39678@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureLoadingOptions;
  *(_QWORD *)(inited + 40) = &off_1E63A6F08;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39870@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E638AE10;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39A68@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureArrayFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E63A6A18;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39C60@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureFileData;
  *(_QWORD *)(inited + 40) = &off_1E6385E98;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E39E58@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureCGImage;
  *(_QWORD *)(inited + 40) = &off_1E63820D8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3A050@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireGPURepresentation;
  *(_QWORD *)(inited + 40) = &off_1E63B6458;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3A248@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureShaderAsset;
  *(_QWORD *)(inited + 40) = &off_1E63966E8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3A440@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureGPURuntime;
  *(_QWORD *)(inited + 40) = &off_1E6390090;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3A638@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Material;
  *(_QWORD *)(inited + 40) = &off_1E63C1B48;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3A830@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleMeshRenderer;
  *(_QWORD *)(inited + 40) = &off_1E639CE20;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3AA28@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleQuadRenderer;
  *(_QWORD *)(inited + 40) = &off_1E639D288;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3AC20@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for MeshFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E637B520;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3AE18@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ModelRenderer;
  *(_QWORD *)(inited + 40) = &off_1E637B7C8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3B010@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Skeleton;
  *(_QWORD *)(inited + 40) = &off_1E63C2C48;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3B208@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ColorRampRuntime;
  *(_QWORD *)(inited + 40) = &off_1E6386CA8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3B400@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ColorRampComponent;
  *(_QWORD *)(inited + 40) = &off_1E6391000;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3B5F8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Parent;
  *(_QWORD *)(inited + 40) = &off_1E63BB960;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3B7F0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SpaceOverride;
  *(_QWORD *)(inited + 40) = &off_1E637D310;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3B9E8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E6382C78;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3BBE0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SceneFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E6380E88;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3BDD8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SetActive;
  *(_QWORD *)(inited + 40) = &off_1E63C4D28;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3BFD0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ForceField;
  *(_QWORD *)(inited + 40) = &off_1E636DAC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3C1C8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for DrawCallComponent;
  *(_QWORD *)(inited + 40) = &off_1E638BED8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3C3C0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ShaderFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E6385888;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3C5B8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for GraphScript, (uint64_t)&off_1E6370B28, a2);
}

uint64_t sub_1B1E3C60C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for GraphEntityComponentPropertyReferences;
  *(_QWORD *)(inited + 40) = &off_1E63B8E58;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3C804@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Bindings;
  *(_QWORD *)(inited + 40) = &off_1E63BE9F0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3C9FC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureNamedAsset;
  *(_QWORD *)(inited + 40) = &off_1E63905F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3CBF4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SDFTextureGenerator;
  *(_QWORD *)(inited + 40) = &off_1E639A7A8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3CDEC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SmoothMotion;
  *(_QWORD *)(inited + 40) = &off_1E6377A40;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3CFE4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for VideoCapture;
  *(_QWORD *)(inited + 40) = &off_1E6378B28;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3D1DC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for VideoCaptureRuntime;
  *(_QWORD *)(inited + 40) = &off_1E639AD70;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3D3D4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for MeshReferenceAsset;
  *(_QWORD *)(inited + 40) = &off_1E63927D0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3D5CC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for PointCacheGenerator;
  *(_QWORD *)(inited + 40) = &off_1E6399BF8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3D7C4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterDescription;
  *(_QWORD *)(inited + 40) = &off_1E6391B38;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3D9BC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, a2);
}

uint64_t sub_1B1E3DA18@<X0>(char a1@<W0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t inited;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v6 = v5;
  sub_1B19F8EB0(0, a2, a3, a4);
  v10 = v9;
  v11 = *v6;
  v12 = *v6 + 41;
  v13 = *(unsigned __int16 *)(*v6 + 16);
  v14 = *(unsigned __int16 *)(*v6 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = &off_1E637D0D8;
  if (v14 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v12 + v13), v14 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v16 = *(unsigned __int16 *)(v11 + 20);
  v17 = *(unsigned __int16 *)(v11 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v18 + 32) = a1;
  if (v17)
  {
    v32 = sub_1B1DC8810((char *)(v12 + v16), v17);
    sub_1B19F499C(v18);
    v18 = v32;
    v19 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v19 = 1;
  }
  v20 = *v6 + 41;
  v21 = (char *)(v20 + *(unsigned __int16 *)(*v6 + 24));
  v22 = (unint64_t)*(unsigned __int16 *)(*v6 + 26) >> 4;
  v23 = (char *)(v20 + *(unsigned __int16 *)(*v6 + 28));
  v24 = *(unsigned __int16 *)(*v6 + 30) / 0x18u;
  v25 = *((_DWORD *)v6 + 2);
  v26 = *((_BYTE *)v6 + 12);
  v27 = v6[4];
  v28 = v6[2];
  v29 = *((_BYTE *)v6 + 24);
  v30 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v18 + 32), v19, v21, v22, v23, v24);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v30;
  *(_DWORD *)(a5 + 8) = v25;
  *(_BYTE *)(a5 + 12) = v26;
  *(_WORD *)(a5 + 13) = v33;
  *(_BYTE *)(a5 + 15) = v34;
  *(_QWORD *)(a5 + 16) = v28;
  *(_BYTE *)(a5 + 24) = v29;
  *(_DWORD *)(a5 + 25) = v32;
  *(_DWORD *)(a5 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a5 + 32) = v27;
  return result;
}

uint64_t sub_1B1E3DC14@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, a2);
}

uint64_t sub_1B1E3DC70@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, a2);
}

uint64_t sub_1B1E3DCCC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireAnimationRepresentation;
  *(_QWORD *)(inited + 40) = &off_1E63B8930;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3DEC4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SceneKitAssetInstance;
  *(_QWORD *)(inited + 40) = &off_1E63A6140;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3E0BC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, a2);
}

uint64_t sub_1B1E3E118@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for TriggerScript, (uint64_t)&off_1E637DAB0, a2);
}

uint64_t sub_1B1E3E16C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1E639E500, a2);
}

uint64_t sub_1B1E3E1C0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for ParticleInitScript, (uint64_t)&off_1E6394BF0, a2);
}

uint64_t sub_1B1E3E214@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, a2);
}

uint64_t sub_1B1E3E270@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for ShaderScript, (uint64_t)&off_1E6377528, a2);
}

uint64_t sub_1B1E3E2C4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, a2);
}

uint64_t sub_1B1E3E320@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1E6398318, a2);
}

uint64_t sub_1B1E3E374@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, a2);
}

uint64_t sub_1B1E3E3D0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for SimpleScript, (uint64_t)&off_1E63777E8, a2);
}

uint64_t sub_1B1E3E424@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3DA18(a1, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, a2);
}

uint64_t sub_1B1E3E480@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, type metadata accessor for EmitterScript, (uint64_t)&off_1E637A168, a2);
}

uint64_t sub_1B1E3E4D4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureCPURuntime;
  *(_QWORD *)(inited + 40) = &off_1E638FF50;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3E6CC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSubSpawn;
  *(_QWORD *)(inited + 40) = &off_1E638A010;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3E8C4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSubSpawn.State;
  *(_QWORD *)(inited + 40) = &off_1E6389E38;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3EABC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3EB18(a1, &qword_1ED4B9088, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimation, (uint64_t)&off_1E638CF18, a2);
}

uint64_t sub_1B1E3EB18@<X0>(char a1@<W0>, unint64_t *a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _UNKNOWN **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  __int16 v34;
  char v35;

  v7 = v5;
  sub_1B1A1B4F8(0, a2, a3);
  v11 = v10;
  v12 = *v7;
  v13 = *v7 + 41;
  v14 = *(unsigned __int16 *)(*v7 + 16);
  v15 = *(unsigned __int16 *)(*v7 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 40) = a4;
  if (v15 > 0xF)
  {
    v33 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v33;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v19 + 32) = a1;
  if (v18)
  {
    v33 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v33;
    v20 = *(_QWORD *)(v33 + 16);
  }
  else
  {
    v20 = 1;
  }
  v21 = *v7 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v7 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v7 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v7 + 28));
  v25 = *(unsigned __int16 *)(*v7 + 30) / 0x18u;
  v26 = *((_DWORD *)v7 + 2);
  v27 = *((_BYTE *)v7 + 12);
  v28 = v7[4];
  v29 = v7[2];
  v30 = *((_BYTE *)v7 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v31;
  *(_DWORD *)(a5 + 8) = v26;
  *(_BYTE *)(a5 + 12) = v27;
  *(_WORD *)(a5 + 13) = v34;
  *(_BYTE *)(a5 + 15) = v35;
  *(_QWORD *)(a5 + 16) = v29;
  *(_BYTE *)(a5 + 24) = v30;
  *(_DWORD *)(a5 + 25) = v33;
  *(_DWORD *)(a5 + 28) = *(_DWORD *)((char *)&v33 + 3);
  *(_QWORD *)(a5 + 32) = v28;
  return result;
}

uint64_t sub_1B1E3ED10@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))sub_1B1A1B3C8, (uint64_t)&off_1E638CF18, a2);
}

uint64_t sub_1B1E3ED64@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))sub_1B1A1B298, (uint64_t)&off_1E638CF18, a2);
}

uint64_t sub_1B1E3EDB8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))sub_1B1A1B168, (uint64_t)&off_1E638CF18, a2);
}

uint64_t sub_1B1E3EE0C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SkeletalAnimationPlayer;
  *(_QWORD *)(inited + 40) = &off_1E63ACB48;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3F004@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for PrimitiveGenerator;
  *(_QWORD *)(inited + 40) = &off_1E6395940;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3F1FC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for PointCacheFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E6399620;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3F3F4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for PointCacheFromModel;
  *(_QWORD *)(inited + 40) = &off_1E6399910;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3F5EC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for REMeshAssetPointCache;
  *(_QWORD *)(inited + 40) = &off_1E63A5DE0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3F7E4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for MetalScriptReflection;
  *(_QWORD *)(inited + 40) = &off_1E63A35B8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3F9DC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TexturePlaceholder;
  *(_QWORD *)(inited + 40) = &off_1E63960D8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3FBD4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for AnimationTimeSource;
  *(_QWORD *)(inited + 40) = &off_1E63977B8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E3FDCC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))sub_1B1A199D4, (uint64_t)&off_1E637E188, a2);
}

uint64_t sub_1B1E3FE20@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))sub_1B1A19B68, (uint64_t)&off_1E637E188, a2);
}

uint64_t sub_1B1E3FE74@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))sub_1B1A19CD8, (uint64_t)&off_1E637E188, a2);
}

uint64_t sub_1B1E3FEC8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E3EB18(a1, (unint64_t *)&unk_1ED4B8980, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimation, (uint64_t)&off_1E637E188, a2);
}

uint64_t sub_1B1E3FF24@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureClient;
  *(_QWORD *)(inited + 40) = &off_1E637D570;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E4011C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for GraphScriptGroup;
  *(_QWORD *)(inited + 40) = &off_1E6387B20;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E40314@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for CodeGenerationInitialized;
  *(_QWORD *)(inited + 40) = &off_1E63AF818;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E4050C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for GraphScriptingConfig;
  *(_QWORD *)(inited + 40) = &off_1E639BD58;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E40704@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for GraphDebuggingComponent;
  *(_QWORD *)(inited + 40) = &off_1E63AA7B0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E408FC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for VirtualFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E638B090;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E40AF4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E40CEC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for MaterialRuntime;
  *(_QWORD *)(inited + 40) = &off_1E6384378;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E40EE4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Seed;
  *(_QWORD *)(inited + 40) = &off_1E63B9F00;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E410DC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for VFXTag;
  *(_QWORD *)(inited + 40) = &off_1E63BD650;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E412D4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for IBLGenerator;
  *(_QWORD *)(inited + 40) = &off_1E6375B10;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E414CC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for PointOfView;
  *(_QWORD *)(inited + 40) = &off_1E6371AA8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E416C4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 40) = &off_1E63C6040;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E418BC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleBoxCollider;
  *(_QWORD *)(inited + 40) = &off_1E6398868;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E41AB4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSphereCollider;
  *(_QWORD *)(inited + 40) = &off_1E63A8E48;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E41CAC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticlePlaneCollider;
  *(_QWORD *)(inited + 40) = &off_1E63A4AE0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E41EA4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSphereRenderer;
  *(_QWORD *)(inited + 40) = &off_1E63A91A8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E4209C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleBoxRenderer;
  *(_QWORD *)(inited + 40) = &off_1E6398BC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E42294@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return sub_1B1E422E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for VFXObjectTag, (uint64_t)&off_1E63786D0, a2);
}

uint64_t sub_1B1E422E8@<X0>(char a1@<W0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v6 = v4;
  v9 = a2(0);
  v10 = *v6;
  v11 = *v6 + 41;
  v12 = *(unsigned __int16 *)(*v6 + 16);
  v13 = *(unsigned __int16 *)(*v6 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = a3;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v17 + 32) = a1;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 1;
  }
  v19 = *v6 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v6 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v6 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v6 + 28));
  v23 = *(unsigned __int16 *)(*v6 + 30) / 0x18u;
  v24 = *((_DWORD *)v6 + 2);
  v25 = *((_BYTE *)v6 + 12);
  v26 = v6[4];
  v27 = v6[2];
  v28 = *((_BYTE *)v6 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1E424E0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureSource;
  *(_QWORD *)(inited + 40) = &off_1E637D6C0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E426D8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleGlobalForce;
  *(_QWORD *)(inited + 40) = &off_1E6398E58;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E428D0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleForce;
  *(_QWORD *)(inited + 40) = &off_1E637C138;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E42AC8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Children;
  *(_QWORD *)(inited + 40) = &off_1E63BEDD0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E42CC0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SubEntity;
  *(_QWORD *)(inited + 40) = &off_1E63C54D8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E42EB8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleAngularVelocityInit;
  *(_QWORD *)(inited + 40) = &off_1E63B2DF8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E430B0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticlePivotInit;
  *(_QWORD *)(inited + 40) = &off_1E638E8F0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E432A8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSizeOverLife;
  *(_QWORD *)(inited + 40) = &off_1E639DE00;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E434A0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSizeOverVelocity;
  *(_QWORD *)(inited + 40) = &off_1E63AEDC0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E43698@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSizeOverTexture;
  *(_QWORD *)(inited + 40) = &off_1E63AC248;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E43890@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleFluidSolver2DEmitter;
  *(_QWORD *)(inited + 40) = &off_1E63B4770;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E43A88@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSpawnDuration;
  *(_QWORD *)(inited + 40) = &off_1E63A5250;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E43C80@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterShape;
  *(_QWORD *)(inited + 40) = &off_1E63753A8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E43E78@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireCPURepresentation;
  *(_QWORD *)(inited + 40) = &off_1E63B6380;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44070@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireNonSRGB;
  *(_QWORD *)(inited + 40) = &off_1E63A7118;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44268@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireUnpremultiply;
  *(_QWORD *)(inited + 40) = &off_1E63B3A80;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44460@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireCubemap;
  *(_QWORD *)(inited + 40) = &off_1E63A7040;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44658@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireMipmap;
  *(_QWORD *)(inited + 40) = &off_1E639F6A8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44850@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireMipmapGeneration;
  *(_QWORD *)(inited + 40) = &off_1E63B5F50;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44A48@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequirePremultiplyWithLinearAlpha;
  *(_QWORD *)(inited + 40) = &off_1E63B92F0;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44C40@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireIOSurface;
  *(_QWORD *)(inited + 40) = &off_1E63ACD70;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = v6[10];
  v12 = v6[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_BYTE *)(v13 + 32) = a1;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v13);
    v13 = v27;
    v14 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v14 = 1;
  }
  v15 = (uint64_t)*v3 + 41;
  v16 = (char *)(v15 + (*v3)[12]);
  v17 = (unint64_t)(*v3)[13] >> 4;
  v18 = (char *)(v15 + (*v3)[14]);
  v19 = (*v3)[15] / 0x18u;
  v20 = *((_DWORD *)v3 + 2);
  v21 = *((_BYTE *)v3 + 12);
  v22 = v3[4];
  v23 = v3[2];
  v24 = *((_BYTE *)v3 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v14, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v25;
  *(_DWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 12) = v21;
  *(_WORD *)(a2 + 13) = v28;
  *(_BYTE *)(a2 + 15) = v29;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 25) = v27;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a2 + 32) = v22;
  return result;
}

uint64_t sub_1B1E44E38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1B1E44E40(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v3 = v2;
  LODWORD(v18) = 257;
  BYTE4(v18) = 0;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 1;
  v20 = 0;
  v21 = 1;
  v22 = 0;
  v23 = 257;
  v24 = 260;
  v25 = 0;
  v26 = sub_1B1E4BB58();
  type metadata accessor for Renderer();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_1B1BA3100(a1, a2, &v18);
  *(_BYTE *)(v6 + 320) = 0;
  type metadata accessor for MockRenderOutput();
  swift_allocObject();
  v7 = sub_1B1BA0F30(71, 0, 1, 0, 0);
  v8 = *(os_unfair_lock_s **)(v6 + 176);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = *(_QWORD **)(v6 + 216);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 216) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1B1C663BC(0, v9[2] + 1, 1, v9);
    *(_QWORD *)(v6 + 216) = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = sub_1B1C663BC(v11 > 1, v12 + 1, 1, v9);
    *(_QWORD *)(v6 + 216) = v9;
  }
  v9[2] = v12 + 1;
  v13 = &v9[2 * v12];
  v13[4] = v7;
  v13[5] = &off_1E6388028;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 176));
  swift_release();
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) = v6;
  swift_retain();
  swift_release();
  v15 = *(_QWORD **)(v14 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for RERendererConfiguration, (uint64_t)&off_1E63AC940, v15);
  swift_release();
  v16 = *(_QWORD **)(v14 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for WorldFromScene, (uint64_t)&off_1E6382A80, v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v7;
}

BOOL BindingCopyAction.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

_QWORD *sub_1B1E450C0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1B1E45110()
{
  return swift_unknownObjectRetain();
}

void VFXREREnderer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VFXREREnderer.__deallocating_deinit()
{
  return sub_1B1D567F4(type metadata accessor for VFXREREnderer);
}

uint64_t type metadata accessor for VFXREREnderer()
{
  return objc_opt_self();
}

id sub_1B1E45220()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___VFXREScene_scene);
}

void *sub_1B1E45274()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___VFXREScene_effect);
  v2 = v1;
  return v1;
}

uint64_t sub_1B1E452F4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1E45338(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_transientDrawCall) = a1;
  return swift_unknownObjectRelease();
}

double (*sub_1B1E45350())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1E45378()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_uuid);
}

uint64_t sub_1B1E45398(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_uuid) = result;
  return result;
}

double (*sub_1B1E453A8())(_QWORD)
{
  return nullsub_16;
}

float sub_1B1E453D0()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR___VFXREScene_sceneScale);
}

void sub_1B1E453F0(float a1)
{
  uint64_t v1;

  *(float *)(v1 + OBJC_IVAR___VFXREScene_sceneScale) = a1;
}

double (*sub_1B1E45400())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1E454B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_reloadBlock);
  sub_1B19F8C48(v1);
  return v1;
}

uint64_t sub_1B1E4555C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___VFXREScene_reloadBlock);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR___VFXREScene_reloadBlock);
  *v3 = a1;
  v3[1] = a2;
  return sub_1B19E5A18(v4);
}

uint64_t sub_1B1E4557C@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR___VFXREScene_reloadBlock);
  v4 = *v3;
  v5 = v3[1];
  if (*v3)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1B1CB734C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_1B19F8C48(v4);
}

uint64_t sub_1B1E455F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1B1DB39F8;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR___VFXREScene_reloadBlock);
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1B19F8C48(v3);
  return sub_1B19E5A18(v8);
}

double (*sub_1B1E45674())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1E4568C(char *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v6 = OBJC_IVAR___VFXREScene_scene;
  v7 = (char *)*(id *)(v3 + OBJC_IVAR___VFXREScene_scene);
  v8 = (void *)swift_unknownObjectRetain();
  v9 = sub_1B1E44E40(v8, a2);
  v10 = *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v11 = OBJC_IVAR___VFXREScene_scene;
  v12 = *(_QWORD *)(*(_QWORD *)&a1[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v13 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v10 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)&a1[v11] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  *(_DWORD *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_peerPid) = *(_DWORD *)(v14
                                                                             + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
  *(_DWORD *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity) = *(_DWORD *)(v14
                                                                                      + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
  v15 = v7;
  v16 = a1;
  swift_retain();
  v17 = sub_1B1DAFE9C(v10, v15, v16, v9);
  v19 = v18;
  v21 = v20;
  swift_unknownObjectRelease();

  swift_release_n();
  if ((v16[OBJC_IVAR___VFXREScene_rootEntity + 8] & 1) == 0)
  {
    if (*(_QWORD *)(v19 + 16)
      && (v22 = sub_1B1DC3CA4(*(_QWORD *)&v16[OBJC_IVAR___VFXREScene_rootEntity]), (v23 & 1) != 0))
    {
      v24 = (unsigned int *)(*(_QWORD *)(v19 + 56) + 8 * v22);
      v25 = *v24;
      v26 = (unint64_t)v24[1] << 32;
    }
    else
    {
      v26 = 0;
      v25 = 0xFFFFFFFFLL;
    }
    v27 = v26 | v25;
    v28 = v3 + OBJC_IVAR___VFXREScene_rootEntity;
    *(_QWORD *)v28 = v27;
    *(_BYTE *)(v28 + 8) = 0;
  }
  if ((v16[OBJC_IVAR___VFXREScene_cameraEntity + 8] & 1) == 0)
  {
    if (*(_QWORD *)(v19 + 16)
      && (v29 = sub_1B1DC3CA4(*(_QWORD *)&v16[OBJC_IVAR___VFXREScene_cameraEntity]), (v30 & 1) != 0))
    {
      v31 = (unsigned int *)(*(_QWORD *)(v19 + 56) + 8 * v29);
      v32 = *v31;
      v33 = (unint64_t)v31[1] << 32;
    }
    else
    {
      v33 = 0;
      v32 = 0xFFFFFFFFLL;
    }
    v34 = v33 | v32;
    v35 = v3 + OBJC_IVAR___VFXREScene_cameraEntity;
    *(_QWORD *)v35 = v34;
    *(_BYTE *)(v35 + 8) = 0;
  }
  v36 = *(char **)&v16[OBJC_IVAR___VFXREScene_effect];
  if (v36)
  {
    v37 = *(void **)(v3 + v6);
    v44 = *(_QWORD *)&v36[OBJC_IVAR____TtC3VFX9VFXEffect_name];
    v45 = *(_QWORD *)&v36[OBJC_IVAR____TtC3VFX9VFXEffect_name + 8];
    v38 = v36;
    v39 = v37;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    v40 = objc_allocWithZone((Class)type metadata accessor for VFXEffect());
    v41 = sub_1B1F44B5C(v39, v17, v44, v45);
    v42 = *(void **)(v3 + OBJC_IVAR___VFXREScene_effect);
    *(_QWORD *)(v3 + OBJC_IVAR___VFXREScene_effect) = v41;

  }
  *(_QWORD *)(v3 + OBJC_IVAR___VFXREScene_remappingTable) = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + OBJC_IVAR___VFXREScene_renderOutput) = v21;
  return swift_release();
}

uint64_t sub_1B1E45970()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
}

float sub_1B1E459C4()
{
  uint64_t v0;

  return *(float *)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_scene)
                              + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                  + OBJC_IVAR____TtC3VFX13EntityManager_clock
                  + 64);
}

uint64_t sub_1B1E45A28()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_scene)
                                     + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                         + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
}

uint64_t sub_1B1E45A88(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
            + OBJC_IVAR____TtC3VFX13EntityManager_peerPid) = result;
  return result;
}

uint64_t (*sub_1B1E45AB8(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR___VFXREScene_scene;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_scene);
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                   + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
  return sub_1B1E45AFC;
}

uint64_t sub_1B1E45AFC(uint64_t a1, uint64_t a2)
{
  return sub_1B1E45C18(a1, a2, &OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
}

uint64_t sub_1B1E45B38()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_scene)
                                     + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                         + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
}

uint64_t sub_1B1E45B98(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
            + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity) = result;
  return result;
}

uint64_t (*sub_1B1E45BC8(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR___VFXREScene_scene;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_scene);
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                   + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
  return sub_1B1E45C0C;
}

uint64_t sub_1B1E45C0C(uint64_t a1, uint64_t a2)
{
  return sub_1B1E45C18(a1, a2, &OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
}

uint64_t sub_1B1E45C18(uint64_t result, uint64_t a2, _QWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + *(_QWORD *)(result + 8))
                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
            + *a3) = *(_DWORD *)(result + 16);
  return result;
}

double sub_1B1E45C40()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1B17320(1, 1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEF5F4B0 = v1[0];
  unk_1EEF5F4C0 = v1[1];
  qword_1EEF5F4D0 = v2;
  return result;
}

uint64_t sub_1B1E45D70()
{
  void *v0;
  uint64_t ObjectType;
  id v2;
  uint64_t v3;
  uint64_t v4;

  ObjectType = swift_getObjectType();
  v2 = v0;
  v3 = swift_retain();
  v4 = sub_1B1DA4AE8(v3, v2, ObjectType);
  swift_release();
  return v4;
}

uint64_t sub_1B1E45DF0()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_retain();
  sub_1B1DABEAC();
  swift_release();
  v1 = v0;
  v2 = swift_retain();
  sub_1B1DA0E40(v2, v1);
  return swift_release();
}

uint64_t *sub_1B1E45E78(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  const char *v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  _OWORD v112[2];
  uint64_t v113;
  uint64_t v114[12];
  _OWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _OWORD v125[2];
  uint64_t v126;
  _OWORD v127[2];
  uint64_t v128;
  _BYTE v129[40];
  uint64_t v130;
  int v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;

  sub_1B1B1F358();
  v102 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v101 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B222820C();
  v99 = *(_QWORD *)(v6 - 8);
  v100 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v98 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v130 = qword_1ED4D09F8;
  v131 = 0;
  v132 = 2;
  v133 = 0;
  v134 = 2;
  v135 = 0;
  swift_retain();
  sub_1B1E3A440(1, (uint64_t)v112);
  swift_release();
  v9 = OBJC_IVAR___VFXREScene_scene;
  v127[0] = v112[0];
  v127[1] = v112[1];
  v128 = v113;
  v10 = swift_retain();
  sub_1B1E8FCE4(v10, (uint64_t)v127, 0x200000000, v114);
  v11 = v114[11];
  sub_1B1A18378((uint64_t)v114, (uint64_t)v115, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v115[0])
  {
    v136 = v11;
    v103 = v9;
    v92 = v1;
    v122 = v115[0];
    v123 = v115[1];
    v89 = v117;
    v124 = v116;
    v12 = v118;
    v13 = v119;
    v14 = v121;
    v91 = v120;
    swift_release();
    if (v14 > 0 && v12)
    {
      v15 = v91[4];
      v16 = *(unsigned __int8 *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v125[0] = v122;
      v125[1] = v123;
      v126 = v124;
      v84 = v91 + 8;
      v85 = v91 + 6;
      swift_retain();
      swift_retain();
      swift_retain();
      v17 = 0;
      v95 = " has an unknown type";
      v93 = 0x80000001B233EAD0;
      v96 = xmmword_1B226D240;
      v97 = a1;
      v87 = v15;
      v88 = v12;
      v86 = v16;
      do
      {
        v90 = v17;
        v18 = (unsigned int *)(v89 + 48 * v17);
        v19 = *v18;
        v136 = v18[1];
        v21 = (uint64_t *)*((_QWORD *)v18 + 2);
        v20 = *((_QWORD *)v18 + 3);
        v22 = *((_QWORD *)v18 + 4);
        v23 = *((_QWORD *)v18 + 5);
        if (v16)
        {
          v24 = *(os_unfair_lock_s **)(v23 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v24);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v15);
        sub_1B1A18378((uint64_t)v85, (uint64_t)v129, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16);
        v26 = v91;
        v27 = v91[4];
        v94 = (char *)v23;
        v28 = v25 + 1;
        v29 = 48 * (v25 + 1);
        swift_retain();
        v26[6] = ecs_stack_allocator_allocate(v27, v29, 8);
        v26[7] = v28;
        v30 = v84;
        v84[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        swift_release();
        v31 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v21, v20, v22, (uint64_t)v26);
        v32 = (uint64_t *)v31;
        if (v21)
        {
          for (i = v103; v22; --v22)
          {
            v35 = *v32++;
            v34 = v35;
            if (v35)
            {
              v36 = *(_QWORD *)(*(_QWORD *)(a1 + i) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
              v37 = *(unsigned int *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
              v38 = *(unsigned int *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
              v39 = (void *)swift_unknownObjectRetain();
              v40 = vfx_setOwnerWithIdentity(v39, v37, v38);
              v41 = v34;
              if (v40)
              {
                v42 = v40;
                v108 = v41;
                v136 = (uint64_t)v32;
                if (qword_1ED4BF430 != -1)
                  swift_once();
                v110 = 0;
                v111 = 0xE000000000000000;
                v107 = qword_1ED4D0FB0;
                swift_retain();
                sub_1B2229430();
                sub_1B2228890();
                v109 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + i) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                 + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
                sub_1B2229A0C();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                v109 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + i) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                 + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
                sub_1B2229A0C();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                v109 = v42;
                sub_1B2229A0C();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                v43 = v110;
                v44 = v111;
                v45 = sub_1B2228E90();
                if (qword_1ED4BF658 != -1)
                  swift_once();
                v106 = v22;
                v46 = qword_1ED4D0FD0;
                v47 = qword_1ED4BF688;
                swift_retain();
                if (v47 != -1)
                  swift_once();
                sub_1B1B42948();
                v48 = swift_allocObject();
                *(_OWORD *)(v48 + 16) = v96;
                *(_QWORD *)(v48 + 56) = MEMORY[0x1E0DEA968];
                *(_QWORD *)(v48 + 64) = sub_1B1B1F47C();
                *(_QWORD *)(v48 + 32) = v43;
                *(_QWORD *)(v48 + 40) = v44;
                swift_bridgeObjectRetain();
                sub_1B222835C();
                swift_bridgeObjectRelease();
                swift_retain();
                LODWORD(v104) = v45;
                v49 = v98;
                sub_1B2228200();
                v50 = v102[12];
                v51 = v102[16];
                v52 = v102[20];
                v53 = v43;
                v54 = (uint64_t)v101;
                v105 = v46;
                v55 = &v101[v52];
                (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v49, v100);
                *(_BYTE *)(v54 + v50) = v104;
                *(_QWORD *)(v54 + v51) = 0;
                *(_QWORD *)v55 = v53;
                *((_QWORD *)v55 + 1) = v44;
                swift_bridgeObjectRetain();
                sub_1B2228428();
                swift_release();
                sub_1B1B429AC(v54);
                swift_unknownObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                a1 = v97;
                i = v103;
                v32 = (uint64_t *)v136;
                v22 = v106;
              }
              else
              {
                swift_unknownObjectRelease();
              }
            }
          }
        }
        else
        {
          v56 = v103;
          if ((_DWORD)v19 != (_DWORD)v136)
          {
            v59 = v136 - v19;
            v60 = (uint64_t *)(v31 + 8 * v19);
            do
            {
              v62 = *v60++;
              v61 = v62;
              if (v62)
              {
                v63 = *(_QWORD *)(*(_QWORD *)(a1 + v56) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
                v64 = *(unsigned int *)(v63 + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
                v65 = *(unsigned int *)(v63 + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
                v66 = (void *)swift_unknownObjectRetain();
                v67 = vfx_setOwnerWithIdentity(v66, v64, v65);
                v68 = v61;
                if (v67)
                {
                  v69 = v67;
                  v108 = v68;
                  v136 = (uint64_t)v60;
                  if (qword_1ED4BF430 != -1)
                    swift_once();
                  v110 = 0;
                  v111 = 0xE000000000000000;
                  v107 = qword_1ED4D0FB0;
                  swift_retain();
                  sub_1B2229430();
                  sub_1B2228890();
                  v109 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + v56) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                   + OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
                  sub_1B2229A0C();
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B2228890();
                  v109 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + v56) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                   + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
                  sub_1B2229A0C();
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B2228890();
                  v109 = v69;
                  sub_1B2229A0C();
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  v70 = v110;
                  v71 = v111;
                  v72 = sub_1B2228E90();
                  if (qword_1ED4BF658 != -1)
                    swift_once();
                  v106 = v59;
                  v73 = qword_1ED4D0FD0;
                  v74 = qword_1ED4BF688;
                  swift_retain();
                  if (v74 != -1)
                    swift_once();
                  sub_1B1B42948();
                  v75 = swift_allocObject();
                  *(_OWORD *)(v75 + 16) = v96;
                  *(_QWORD *)(v75 + 56) = MEMORY[0x1E0DEA968];
                  *(_QWORD *)(v75 + 64) = sub_1B1B1F47C();
                  *(_QWORD *)(v75 + 32) = v70;
                  *(_QWORD *)(v75 + 40) = v71;
                  swift_bridgeObjectRetain();
                  sub_1B222835C();
                  swift_bridgeObjectRelease();
                  swift_retain();
                  v104 = v70;
                  v76 = v98;
                  sub_1B2228200();
                  v77 = v102[12];
                  v78 = v102[16];
                  v79 = v102[20];
                  v80 = v71;
                  v81 = (uint64_t)v101;
                  v105 = v73;
                  v82 = &v101[v79];
                  (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v76, v100);
                  *(_BYTE *)(v81 + v77) = v72;
                  *(_QWORD *)(v81 + v78) = 0;
                  *(_QWORD *)v82 = v104;
                  *((_QWORD *)v82 + 1) = v80;
                  swift_bridgeObjectRetain();
                  sub_1B2228428();
                  swift_release();
                  sub_1B1B429AC(v81);
                  swift_unknownObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  a1 = v97;
                  v56 = v103;
                  v60 = (uint64_t *)v136;
                  v59 = v106;
                }
                else
                {
                  swift_unknownObjectRelease();
                }
              }
              --v59;
            }
            while (v59);
          }
        }
        v57 = v92;
        sub_1B1F05D48(v91, (unsigned __int16 **)v125, (uint64_t)v129);
        v58 = v94;
        sub_1B1F03804(v94);
        v15 = v87;
        ecs_stack_allocator_pop_snapshot(v87);
        v16 = v86;
        if ((v86 & 1) != 0)
        {
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v58 + 43));
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v58 + 47));
        }
        v92 = v57;
        swift_release();
        v17 = v90 + 1;
      }
      while (v90 + 1 != v88);
      sub_1B19ED720((uint64_t)v112);
      sub_1B19ED748(v114);
    }
    else
    {
      sub_1B19ED720((uint64_t)v112);
    }
    return sub_1B19ED748(v114);
  }
  else
  {
    swift_release();
    return (uint64_t *)sub_1B19ED720((uint64_t)v112);
  }
}

double sub_1B1E46B34()
{
  void *v0;
  id v1;
  uint64_t v2;
  double v3;
  double v4;

  v1 = v0;
  v2 = swift_retain();
  sub_1B1DB05AC(v2, v1);
  v4 = v3;
  swift_release();

  return v4;
}

uint64_t sub_1B1E46BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD v47[2];
  uint64_t v48;
  _BYTE v49[40];
  _OWORD v50[2];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91[12];
  uint64_t v92[12];
  uint64_t v93[12];
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD v105[6];
  _OWORD v106[6];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v1 = OBJC_IVAR___VFXREScene_scene;
  v2 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR___VFXREScene_scene)
                               + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                   + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v3 = OBJC_IVAR___VFXREScene_effect;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___VFXREScene_effect);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
    v6 = *((unsigned __int8 *)v5 + 4);
    if (v6 == 1)
    {
      v4 = 0;
    }
    else
    {
      v4 = *v5;
      LOBYTE(v6) = v4 == 0;
    }
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  LOBYTE(v68) = v6;
  v7 = sub_1B217DCF4(v4 | ((unint64_t)v6 << 32), v2);
  v8 = a1 + OBJC_IVAR___VFXREScene_rootEntity;
  *(_QWORD *)v8 = v7;
  *(_BYTE *)(v8 + 8) = 0;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v85 = qword_1ED4D09F8;
  v86 = 0;
  v87 = 2;
  v88 = 0;
  v89 = 2;
  v90 = 0;
  swift_retain();
  sub_1B1E414CC(1, (uint64_t)v47);
  swift_release();
  v9 = *(_QWORD *)(a1 + v3);
  if (!v9)
    goto LABEL_11;
  v10 = (unsigned int *)(v9 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
  if ((v10[1] & 1) != 0)
  {
    v9 = 0;
LABEL_11:
    v11 = 0x200000000;
    goto LABEL_13;
  }
  v9 = *v10;
  v11 = (unint64_t)(v9 == 0) << 33;
LABEL_13:
  v66[0] = v47[0];
  v66[1] = v47[1];
  v67 = v48;
  v12 = v11 | v9;
  v13 = swift_retain();
  sub_1B1E8FCE4(v13, (uint64_t)v66, v12, v91);
  sub_1B1A18378((uint64_t)v91, (uint64_t)v106, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v45 = *(_QWORD *)&v106[0];
  if (!*(_QWORD *)&v106[0])
  {
    swift_release();
LABEL_23:
    v21 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + v1) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                      + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    v22 = *(_QWORD *)(a1 + v3);
    if (v22)
    {
      v23 = (unsigned int *)(v22 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
      v24 = *((unsigned __int8 *)v23 + 4);
      if (v24 == 1)
      {
        v22 = 0;
      }
      else
      {
        v22 = *v23;
        LOBYTE(v24) = v22 == 0;
      }
    }
    else
    {
      LOBYTE(v24) = 1;
    }
    LOBYTE(v68) = v24;
    v25 = sub_1B217EE54(v22 | ((unint64_t)v24 << 32), v21);
    v26 = a1 + OBJC_IVAR___VFXREScene_cameraEntity;
    *(_QWORD *)v26 = v25;
    *(_BYTE *)(v26 + 8) = 0;
    if ((*(_BYTE *)(v8 + 8) & 1) == 0)
      goto LABEL_20;
    goto LABEL_29;
  }
  v60 = v106[2];
  v61 = v106[3];
  v62 = v106[4];
  v63 = v106[5];
  v58 = v106[0];
  v59 = v106[1];
  swift_release();
  if (!(_QWORD)v63)
    goto LABEL_23;
  sub_1B1BEC018(0);
  v15 = v14;
  sub_1B1D98F80(v91);
  swift_retain();
  v16 = sub_1B1A101F0(v15);
  swift_release();
  sub_1B19ED748(v91);
  v17 = a1 + OBJC_IVAR___VFXREScene_cameraEntity;
  *(_QWORD *)v17 = v16;
  *(_BYTE *)(v17 + 8) = 0;
  if (!sub_1B1FD568C((uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A420, v16))
  {
    swift_retain();
    sub_1B1FE16DC((uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A398, v16);
    swift_release();
  }
  if (!sub_1B1FD568C((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C78, v16))
  {
    swift_retain();
    sub_1B1FE16DC((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v16);
    swift_release();
  }
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
  {
LABEL_20:
    v18 = *(_QWORD *)v8;
    v79 = qword_1ED4D09F8;
    v80 = 0;
    v81 = 2;
    v82 = 0;
    v83 = 2;
    v84 = 0;
    swift_retain();
    sub_1B1E3B9E8(1, (uint64_t)v49);
    swift_release();
    sub_1B1A19B14();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1B226CD10;
    *(_QWORD *)(v19 + 32) = &type metadata for Parent;
    *(_QWORD *)(v19 + 40) = &off_1E63BB960;
    *(_QWORD *)(v19 + 48) = &type metadata for PointOfView;
    *(_QWORD *)(v19 + 56) = &off_1E6371AA8;
    sub_1B1B44110(v50, v19);
    swift_setDeallocating();
    swift_deallocClassInstance();
    sub_1B19ED720((uint64_t)v49);
    v64[0] = v50[0];
    v64[1] = v50[1];
    v65 = v51;
    v20 = swift_retain();
    sub_1B1E8FCE4(v20, (uint64_t)v64, 0x200000000, v92);
    sub_1B1A18378((uint64_t)v92, (uint64_t)v105, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v105[0])
    {
      v54 = v105[2];
      v55 = v105[3];
      v56 = v105[4];
      v57 = v105[5];
      v52 = v105[0];
      v53 = v105[1];
      swift_release();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1B1BEA85C();
      sub_1B19ED748(v92);
      sub_1B19ED748(v92);
    }
    else
    {
      swift_release();
    }
    v28 = HIDWORD(v18);
    v29 = swift_retain();
    sub_1B1E8FCE4(v29, (uint64_t)v64, 0x200000000, v93);
    sub_1B1A18378((uint64_t)v93, (uint64_t)&v94, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v30 = v94;
    if (v94)
    {
      v31 = v95;
      v32 = v96;
      v43 = HIDWORD(v18);
      v33 = v98;
      v28 = v100;
      v44 = v18;
      v34 = v101;
      v42 = v103;
      v40 = v97;
      v41 = v104;
      v38 = v102;
      v39 = v99;
      swift_release();
      v68 = v30;
      v69 = v31;
      v70 = v32;
      v71 = v40;
      v72 = v33;
      v73 = v39;
      v74 = v28;
      LODWORD(v28) = v43;
      v75 = v34;
      v18 = v44;
      v76 = v38;
      v77 = v42;
      v78 = v41;
      sub_1B2187408((uint64_t)&v68, v44);
      sub_1B19ED748(v93);
      if ((_DWORD)v44 != -1)
        goto LABEL_36;
    }
    else
    {
      swift_release();
      if ((_DWORD)v18 != -1)
        goto LABEL_36;
    }
    if (!(_DWORD)v28)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      swift_retain();
      sub_1B1FE16DC((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v18);
      sub_1B19ED798(v45);
      sub_1B19ED720((uint64_t)v47);
      swift_release();
      v27 = v50;
      return sub_1B19ED720((uint64_t)v27);
    }
LABEL_36:
    v35 = swift_retain();
    MEMORY[0x1E0C80A78](v35, v36);
    swift_bridgeObjectRetain();
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E4CA38);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
LABEL_29:
  sub_1B19ED798(v45);
  v27 = v47;
  return sub_1B19ED720((uint64_t)v27);
}

char *VFXREScene.__allocating_init(contentsOf:commandQueue:options:)(uint64_t a1, void *a2, _BYTE *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return VFXREScene.init(contentsOf:commandQueue:options:)(a1, a2, a3);
}

char *VFXREScene.init(contentsOf:commandQueue:options:)(uint64_t a1, void *a2, _BYTE *a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  objc_class *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  objc_super v55;
  uint64_t v56;

  v53 = a2;
  v4 = v3;
  v54 = a1;
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_effect] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_transientDrawCall] = 0;
  v11 = &v4[OBJC_IVAR___VFXREScene_rootEntity];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v4[OBJC_IVAR___VFXREScene_cameraEntity];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = OBJC_IVAR___VFXREScene_device;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_device] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_cancellables] = MEMORY[0x1E0DEE9E8];
  v4[OBJC_IVAR___VFXREScene_isPrepared] = 0;
  v14 = OBJC_IVAR___VFXREScene_uuid;
  v15 = v4;
  sub_1B2228260();
  v16 = sub_1B2228254();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  *(_QWORD *)&v4[v14] = v16;
  v17 = v53;
  v18 = &v15[OBJC_IVAR___VFXREScene_worldFromScene];
  *(_OWORD *)v18 = xmmword_1B2244DB0;
  *((_OWORD *)v18 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v18 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v18 + 3) = xmmword_1B2244E20;
  v19 = &v15[OBJC_IVAR___VFXREScene_sceneFromWorld];
  *(_OWORD *)v19 = xmmword_1B2244DB0;
  *((_OWORD *)v19 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v19 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v19 + 3) = xmmword_1B2244E20;
  *(_DWORD *)&v15[OBJC_IVAR___VFXREScene_sceneScale] = 1065353216;
  v20 = &v15[OBJC_IVAR___VFXREScene_reloadBlock];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *(_QWORD *)&v15[OBJC_IVAR___VFXREScene_remappingTable] = 0;
  *(_QWORD *)&v15[OBJC_IVAR___VFXREScene_renderOutput] = 0;
  if (v17)
  {
    *(_QWORD *)&v4[v13] = objc_msgSend(v17, sel_device);
    swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)&v4[v13] = 0;
    swift_unknownObjectRelease();
    a3[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer] = 0;
    a3[OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene] = 0;
  }
  v21 = v52;
  LODWORD(v52) = a3[OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene];
  a3[OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene] = 0;
  *(_QWORD *)&a3[OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions] = 1073775625;
  a3[OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts] = a3[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer];
  v22 = objc_allocWithZone((Class)type metadata accessor for VFXScene(0));
  v23 = a3;
  v24 = VFXScene.init(options:)(v23);
  v24[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 1;
  *(_QWORD *)&v15[OBJC_IVAR___VFXREScene_scene] = v24;
  v25 = v24;

  v25[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 1;
  v26 = (objc_class *)type metadata accessor for VFXREScene();
  v55.receiver = v15;
  v55.super_class = v26;
  v27 = (char *)objc_msgSendSuper2(&v55, sel_init);
  v28 = OBJC_IVAR___VFXREScene_scene;
  v29 = *(void **)&v27[OBJC_IVAR___VFXREScene_scene];
  v30 = v27;
  v31 = v29;
  v32 = v54;
  sub_1B1791D00(v54);
  if (v21)
  {

    swift_unknownObjectRelease();
  }
  else
  {
    v36 = v33;

    v37 = OBJC_IVAR___VFXREScene_effect;
    v38 = *(void **)&v30[OBJC_IVAR___VFXREScene_effect];
    *(_QWORD *)&v30[OBJC_IVAR___VFXREScene_effect] = v36;

    v56 = *(_QWORD *)(*(_QWORD *)&v30[v37] + OBJC_IVAR____TtC3VFX9VFXEffect_onEffectRestartSubject);
    v39 = swift_allocObject();
    swift_unknownObjectUnownedInit();
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = sub_1B1E4BAF8;
    *(_QWORD *)(v40 + 24) = v39;
    sub_1B1C2DA04();
    sub_1B1E4BB10();
    swift_retain();
    sub_1B2228470();
    swift_release();
    swift_release();
    sub_1B2228410();
    swift_release();
    v41 = v30;
    v42 = swift_retain();
    sub_1B1DA0E6C(v42, v41);
    swift_release();
    if (!v17)
    {

      v50 = sub_1B2228110();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v54, v50);
      return v30;
    }
    v43 = objc_msgSend(v17, sel_device);
    v32 = v54;
    if ((v52 & 1) != 0)
    {
      v44 = v43;
      v45 = *(id *)&v27[v28];
      sub_1B1E44E40(v44, v17);
      swift_release();

      v46 = *(char **)&v27[v28];
      v47 = *(_QWORD *)&v46[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
      v48 = v46;
      sub_1B1D9E49C(v47, v48);
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      v49 = sub_1B2228110();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v54, v49);
      v41[OBJC_IVAR___VFXREScene_isPrepared] = 1;
      return v30;
    }
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
  }
  v34 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v32, v34);
  return v30;
}

id VFXREScene.__allocating_init(commandQueue:model:options:)(void *a1, char *a2, _BYTE *a3)
{
  objc_class *v3;
  id v7;
  id v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_1B1E4BCE0(a1, a2, a3);
  swift_unknownObjectRelease();
  return v8;
}

id VFXREScene.init(commandQueue:model:options:)(void *a1, char *a2, _BYTE *a3)
{
  id v3;

  v3 = sub_1B1E4BCE0(a1, a2, a3);
  swift_unknownObjectRelease();
  return v3;
}

char *VFXREScene.__allocating_init(device:contentsOf:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return VFXREScene.init(device:contentsOf:)(a1, a2);
}

char *VFXREScene.init(device:contentsOf:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  objc_class *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;
  uint64_t v46;

  v42 = a2;
  v3 = v2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_effect] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_transientDrawCall] = 0;
  v10 = &v3[OBJC_IVAR___VFXREScene_rootEntity];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = &v3[OBJC_IVAR___VFXREScene_cameraEntity];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = OBJC_IVAR___VFXREScene_device;
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_device] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_cancellables] = MEMORY[0x1E0DEE9E8];
  v3[OBJC_IVAR___VFXREScene_isPrepared] = 0;
  v13 = OBJC_IVAR___VFXREScene_uuid;
  v14 = v3;
  sub_1B2228260();
  v15 = sub_1B2228254();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  *(_QWORD *)&v3[v13] = v15;
  v16 = &v14[OBJC_IVAR___VFXREScene_worldFromScene];
  *(_OWORD *)v16 = xmmword_1B2244DB0;
  *((_OWORD *)v16 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v16 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v16 + 3) = xmmword_1B2244E20;
  v17 = &v14[OBJC_IVAR___VFXREScene_sceneFromWorld];
  *(_OWORD *)v17 = xmmword_1B2244DB0;
  *((_OWORD *)v17 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v17 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v17 + 3) = xmmword_1B2244E20;
  *(_DWORD *)&v14[OBJC_IVAR___VFXREScene_sceneScale] = 1065353216;
  v18 = &v14[OBJC_IVAR___VFXREScene_reloadBlock];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v14[OBJC_IVAR___VFXREScene_remappingTable] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___VFXREScene_renderOutput] = 0;
  *(_QWORD *)&v3[v12] = a1;
  v44 = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXScene.LoadOptions(0)), sel_init);
  v19[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer] = 1;
  v19[OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene] = 0;
  *(_QWORD *)&v19[OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions] = 1073775625;
  v19[OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts] = 1;
  v20 = objc_allocWithZone((Class)type metadata accessor for VFXScene(0));
  v21 = v19;
  v22 = VFXScene.init(options:)(v21);
  v22[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 1;
  *(_QWORD *)&v14[OBJC_IVAR___VFXREScene_scene] = v22;
  v23 = v22;

  v23[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 1;
  v24 = (objc_class *)type metadata accessor for VFXREScene();
  v45.receiver = v14;
  v45.super_class = v24;
  v25 = (char *)objc_msgSendSuper2(&v45, sel_init);
  v26 = v42;
  v27 = *(void **)&v25[OBJC_IVAR___VFXREScene_scene];
  v28 = v25;
  v29 = v27;
  v30 = v43;
  sub_1B1791D00(v26);
  if (v30)
  {
    swift_unknownObjectRelease();

  }
  else
  {
    v32 = v31;

    v33 = OBJC_IVAR___VFXREScene_effect;
    v34 = *(void **)&v28[OBJC_IVAR___VFXREScene_effect];
    *(_QWORD *)&v28[OBJC_IVAR___VFXREScene_effect] = v32;

    v46 = *(_QWORD *)(*(_QWORD *)&v28[v33] + OBJC_IVAR____TtC3VFX9VFXEffect_onEffectRestartSubject);
    v35 = swift_allocObject();
    swift_unknownObjectUnownedInit();
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = sub_1B1E4BAF8;
    *(_QWORD *)(v36 + 24) = v35;
    sub_1B1C2DA04();
    sub_1B1E4BB10();
    swift_retain();
    sub_1B2228470();
    swift_release();
    swift_release();
    sub_1B2228410();
    swift_release();
    v37 = v28;
    v38 = swift_retain();
    sub_1B1DA0E6C(v38, v37);
    swift_unknownObjectRelease();

    swift_release();
  }
  v39 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v26, v39);
  return v28;
}

void sub_1B1E48104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *Strong;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  void (*v10)(void);
  uint64_t v11;

  v0 = sub_1B222826C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  sub_1B2228260();
  v6 = sub_1B2228254();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  *(_QWORD *)&Strong[OBJC_IVAR___VFXREScene_uuid] = v6;

  v7 = (id)swift_unknownObjectUnownedLoadStrong();
  v8 = swift_retain();
  sub_1B1DA0E6C(v8, v7);

  swift_release();
  v9 = (char *)swift_unknownObjectUnownedLoadStrong();
  v10 = *(void (**)(void))&v9[OBJC_IVAR___VFXREScene_reloadBlock];
  sub_1B19F8C48((uint64_t)v10);

  if (v10)
  {
    v10();
    sub_1B19E5A18((uint64_t)v10);
  }
}

id VFXREScene.__allocating_init(device:model:options:)(uint64_t a1, char *a2, _BYTE *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return VFXREScene.init(device:model:options:)(a1, a2, a3);
}

id VFXREScene.init(device:model:options:)(uint64_t a1, char *a2, _BYTE *a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  _BYTE *v22;
  _BYTE *v23;
  objc_class *v24;
  id v25;
  char *v26;
  uint64_t v28;
  char *v29;
  objc_super v30;

  v4 = v3;
  v29 = a2;
  v7 = sub_1B222826C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_effect] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_transientDrawCall] = 0;
  v12 = &v4[OBJC_IVAR___VFXREScene_rootEntity];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v4[OBJC_IVAR___VFXREScene_cameraEntity];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = OBJC_IVAR___VFXREScene_device;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_device] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_cancellables] = MEMORY[0x1E0DEE9E8];
  v4[OBJC_IVAR___VFXREScene_isPrepared] = 0;
  v15 = OBJC_IVAR___VFXREScene_uuid;
  v16 = v4;
  sub_1B2228260();
  v17 = sub_1B2228254();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *(_QWORD *)&v4[v15] = v17;
  v18 = &v16[OBJC_IVAR___VFXREScene_worldFromScene];
  *(_OWORD *)v18 = xmmword_1B2244DB0;
  *((_OWORD *)v18 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v18 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v18 + 3) = xmmword_1B2244E20;
  v19 = &v16[OBJC_IVAR___VFXREScene_sceneFromWorld];
  *(_OWORD *)v19 = xmmword_1B2244DB0;
  *((_OWORD *)v19 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v19 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v19 + 3) = xmmword_1B2244E20;
  *(_DWORD *)&v16[OBJC_IVAR___VFXREScene_sceneScale] = 1065353216;
  v20 = &v16[OBJC_IVAR___VFXREScene_reloadBlock];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *(_QWORD *)&v16[OBJC_IVAR___VFXREScene_remappingTable] = 0;
  *(_QWORD *)&v16[OBJC_IVAR___VFXREScene_renderOutput] = 0;
  *(_QWORD *)&v4[v14] = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)&a3[OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions] = 1073775625;
  a3[OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts] = a3[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer];
  v21 = objc_allocWithZone((Class)type metadata accessor for VFXScene(0));
  v22 = a3;
  v23 = VFXScene.init(options:)(v22);
  v23[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 1;
  *(_QWORD *)&v16[OBJC_IVAR___VFXREScene_scene] = v23;

  v24 = (objc_class *)type metadata accessor for VFXREScene();
  v30.receiver = v16;
  v30.super_class = v24;
  v25 = objc_msgSendSuper2(&v30, sel_init);
  v26 = v29;
  sub_1B1E4568C(v29, 0);

  swift_unknownObjectRelease();
  return v25;
}

id VFXREScene.__allocating_init(device:model:)(uint64_t a1, char *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return VFXREScene.init(device:model:)(a1, a2);
}

id VFXREScene.init(device:model:)(uint64_t a1, char *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  objc_class *v23;
  id v24;
  objc_super v26;

  v3 = v2;
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_effect] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_transientDrawCall] = 0;
  v11 = &v3[OBJC_IVAR___VFXREScene_rootEntity];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v3[OBJC_IVAR___VFXREScene_cameraEntity];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = OBJC_IVAR___VFXREScene_device;
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_device] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___VFXREScene_cancellables] = MEMORY[0x1E0DEE9E8];
  v3[OBJC_IVAR___VFXREScene_isPrepared] = 0;
  v14 = OBJC_IVAR___VFXREScene_uuid;
  v15 = v3;
  sub_1B2228260();
  v16 = sub_1B2228254();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  *(_QWORD *)&v3[v14] = v16;
  v17 = &v15[OBJC_IVAR___VFXREScene_worldFromScene];
  *(_OWORD *)v17 = xmmword_1B2244DB0;
  *((_OWORD *)v17 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v17 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v17 + 3) = xmmword_1B2244E20;
  v18 = &v15[OBJC_IVAR___VFXREScene_sceneFromWorld];
  *(_OWORD *)v18 = xmmword_1B2244DB0;
  *((_OWORD *)v18 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v18 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v18 + 3) = xmmword_1B2244E20;
  *(_DWORD *)&v15[OBJC_IVAR___VFXREScene_sceneScale] = 1065353216;
  v19 = &v15[OBJC_IVAR___VFXREScene_reloadBlock];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v15[OBJC_IVAR___VFXREScene_remappingTable] = 0;
  *(_QWORD *)&v15[OBJC_IVAR___VFXREScene_renderOutput] = 0;
  *(_QWORD *)&v3[v13] = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v20 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXScene.LoadOptions(0)), sel_init);
  *(_QWORD *)&v20[OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions] = 1073775625;
  v20[OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts] = v20[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer];
  objc_allocWithZone((Class)type metadata accessor for VFXScene(0));
  v21 = v20;
  v22 = VFXScene.init(options:)(v21);
  v22[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 1;

  *(_QWORD *)&v15[OBJC_IVAR___VFXREScene_scene] = v22;
  v23 = (objc_class *)type metadata accessor for VFXREScene();
  v26.receiver = v15;
  v26.super_class = v23;
  v24 = objc_msgSendSuper2(&v26, sel_init);
  sub_1B1E4568C(a2, 0);

  swift_unknownObjectRelease();
  return v24;
}

_QWORD *sub_1B1E48960()
{
  return sub_1B1B98728(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1B1E48A04()
{
  uint64_t v0;
  _OWORD *v1;
  _OWORD *v2;

  v1 = (_OWORD *)(v0 + OBJC_IVAR___VFXREScene_worldFromScene);
  *v1 = xmmword_1B2244DB0;
  v1[1] = xmmword_1B2244DD0;
  v1[2] = xmmword_1B2244D90;
  v1[3] = xmmword_1B2244E20;
  v2 = (_OWORD *)(v0 + OBJC_IVAR___VFXREScene_sceneFromWorld);
  *v2 = xmmword_1B2244DB0;
  v2[1] = xmmword_1B2244DD0;
  v2[2] = xmmword_1B2244D90;
  v2[3] = xmmword_1B2244E20;
  *(_DWORD *)(v0 + OBJC_IVAR___VFXREScene_sceneScale) = 1065353216;
  swift_retain();
  sub_1B1DA826C(15);
  return swift_release();
}

uint64_t sub_1B1E48AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  void *v7;
  id v15;
  uint64_t v16;

  v15 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v16 = swift_retain();
  sub_1B1DA1028(v16, v15, a1, a2, a3, a4, a5, a6, a7);
  return swift_release();
}

uint64_t sub_1B1E48BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v14;
  id v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t result;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  __int128 v58;
  uint64_t v59;
  _OWORD v60[2];

  v56 = a8;
  v57 = a7;
  v14 = OBJC_IVAR___VFXREScene_scene;
  v15 = *(id *)(a1 + OBJC_IVAR___VFXREScene_scene);
  v16 = sub_1B1FF36E8(a2, a3, 0x200000000, 1);
  if ((v17 & 1) != 0 || v16 == 0xFFFFFFFFLL)
  {

LABEL_4:
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *((_QWORD *)&v60[0] + 1) = 0x80000001B233EA60;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v18 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v60[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v18, (uint64_t *)v60, 0xD000000000000020, 0x80000001B233EA60);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v20 = (void *)sub_1B1F4BC74(v16, a2, a3, a4, a5);

  if (!v20)
    goto LABEL_4;
  v21 = v20;
  if (objc_msgSend(v20, sel_type, v56) != (id)23)
  {
    if (a6)
    {
      if (a6 != 1)
      {
        result = sub_1B2229F70();
        __break(1u);
        return result;
      }
      v38 = (char *)*(id *)(a1 + v14);
      v39 = objc_msgSend(v21, sel_objectName);
      v40 = sub_1B222874C();
      v42 = v41;

      v43 = objc_msgSend(v21, sel_bindingName);
      v44 = sub_1B222874C();
      v46 = v45;

      v47 = *(_QWORD *)&v38[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1DA43FC(v47, v47, v40, v42, 0x200000000, v44, v46, (uint64_t)&v58);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v59)
      {
        sub_1B1A0DDAC(&v58, v60);
        v48 = sub_1B1A0A1A0((uint64_t)v60, objc_msgSend(v21, sel_type));
        v49 = v57(v48);
        sub_1B1A0A464((uint64_t)v60, v49, (uint64_t)objc_msgSend(v21, sel_type));
        swift_unknownObjectRelease();
        return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
      }
    }
    else
    {
      v25 = (char *)v57(0);
      sub_1B1A0AB90(v25, (uint64_t)objc_msgSend(v20, sel_type), (uint64_t)&v58);
      if (v59)
      {
        sub_1B1A0DDAC(&v58, v60);
        v26 = (char *)*(id *)(a1 + v14);
        v27 = objc_msgSend(v20, sel_objectName);
        v28 = sub_1B222874C();
        v30 = v29;

        v31 = objc_msgSend(v21, sel_bindingName);
        v32 = sub_1B222874C();
        v34 = v33;

        v35 = *(_QWORD *)&v26[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
        MEMORY[0x1E0C80A78](v36, v37);
        v50[2] = v35;
        v50[3] = v28;
        v50[4] = v30;
        v51 = 0;
        v52 = 2;
        v53 = v32;
        v54 = v34;
        v55 = v60;
        sub_1B1C276DC((void (*)(void))sub_1B1C2F81C, (uint64_t)v50);
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
      }
    }
    swift_unknownObjectRelease();
    return sub_1B1A0DD70((uint64_t)&v58);
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *((_QWORD *)&v60[0] + 1) = 0x80000001B233EA90;
  v22 = objc_msgSend(v20, sel_bindingName);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v23 = objc_msgSend(v20, sel_objectName);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v24 = sub_1B2228E90();
  *(_QWORD *)&v60[0] = 1;
  sub_1B1F1AAF0(v24, 0xD000000000000015, 0x80000001B233EA90, (uint64_t *)v60);
  swift_unknownObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E49304()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = v0;
  v2 = swift_retain();
  sub_1B1DA12D8(v2, v1);
  return swift_release();
}

uint64_t sub_1B1E493D4(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;

  v3 = v1;
  swift_unknownObjectRetain();
  v4 = swift_retain();
  sub_1B1DA14E0(v4, v3, a1);
  return swift_release();
}

void sub_1B1E49448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v4 = OBJC_IVAR___VFXREScene_renderOutput;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR___VFXREScene_renderOutput);
  if (v5)
  {
    *(_QWORD *)(v5 + 128) = a2;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v7 = swift_retain();
  v8 = (void *)MEMORY[0x1B5E22F20](v7);
  sub_1B1E73530(v6);
  if (v2)
  {
    objc_autoreleasePoolPop(v8);
    __break(1u);
  }
  else
  {
    objc_autoreleasePoolPop(v8);
    swift_release();
    v9 = *(_QWORD *)(a1 + v4);
    if (v9)
    {
      *(_QWORD *)(v9 + 128) = 0;
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1B1E495A0(double a1)
{
  void *v1;
  id v3;
  uint64_t v4;

  v3 = v1;
  v4 = swift_retain();
  sub_1B1DA16C0(v4, v3, a1);
  return swift_release();
}

uint64_t sub_1B1E49690(uint64_t a1, double a2)
{
  void *v2;
  id v5;
  uint64_t v6;

  v5 = v2;
  swift_unknownObjectRetain();
  v6 = swift_retain();
  sub_1B1DA18DC(v6, v5, a1, a2);
  return swift_release();
}

uint64_t (*sub_1B1E497B0())()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = swift_retain();
  v3 = sub_1B1DAF8B4(v2, v1);
  v5 = v4;
  swift_release();

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v5;
  return sub_1B1CB734C;
}

float sub_1B1E49928(unint64_t a1, char a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *i;

  if ((a2 & 1) == 0)
  {
    v7 = OBJC_IVAR___VFXREScene_scene;
    sub_1B1FE047C(a1, *(_QWORD *)(*(_QWORD *)(v5 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager), a3);
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + v7) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    v9 = sub_1B1DA57B4(a1);
    if ((v10 & 0x100000000) == 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 136) + 8 * (int)v9 + 32);
      v12 = *(_QWORD *)(v11 + 48);
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = (_QWORD *)(v12 + 56);
        while ((ValueMetadata *)*(v14 - 3) != &type metadata for Orientation)
        {
          v14 += 5;
          if (!--v13)
            goto LABEL_9;
        }
        *(__n128 *)(*(_QWORD *)(v11 + 128) + *v14 + ((v9 << 16 >> 44) & 0xFFFFFFFFFFFFF0)) = a4;
      }
    }
LABEL_9:
    v15 = sub_1B1DA57B4(a1);
    v16 = a5;
    if ((v17 & 0x100000000) == 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + 136) + 8 * (int)v15 + 32);
      v19 = *(_QWORD *)(v18 + 48);
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        for (i = (_QWORD *)(v19 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Position; i += 5)
        {
          if (!--v20)
            return a3.n128_f32[0];
        }
        a3.n128_u32[0] = 1.0;
        v16.n128_u32[3] = 1.0;
        *(__n128 *)(*(_QWORD *)(v18 + 128) + *i + ((v15 << 16 >> 44) & 0xFFFFFFFFFFFFF0)) = v16;
      }
    }
  }
  return a3.n128_f32[0];
}

uint64_t sub_1B1E49A78(float32x4_t a1, float32x4_t a2, simd_float4 a3)
{
  char *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  char *v24;
  uint64_t v25;
  float32x4_t v27;
  float32x4_t v29;
  float32x4_t v31;
  __n128 v33;

  sub_1B1E49EDC(a1, a2, a3);
  v4 = a2;
  v5 = vmulq_n_f32(a1, *(float *)&v3[OBJC_IVAR___VFXREScene_sceneScale]);
  v6 = vabsq_f32(v5);
  v6.i32[3] = 0;
  v7.i64[0] = 0x8000000080000000;
  v7.i64[1] = 0x8000000080000000;
  v8 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v5, v7), (int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v6, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
  v9 = vmulq_f32(v4, v4);
  v10 = vmulq_laneq_f32(v4, v4, 3);
  v11 = vmulq_lane_f32(v4, *(float32x2_t *)v4.f32, 1).f32[0];
  v12 = vaddq_f32(v8, v8);
  v9.f32[0] = 0.5 - v9.f32[0];
  v13 = vmul_laneq_f32(*(float32x2_t *)a2.f32, a2, 2);
  v14.i32[3] = 0;
  v14.f32[0] = (float)(0.5 - v9.f32[1]) - v9.f32[2];
  v14.f32[1] = v11 + v10.f32[2];
  v14.f32[2] = v13.f32[0] - v10.f32[1];
  v15.i32[3] = 0;
  v16 = vmulq_n_f32(v14, v12.f32[0]);
  v15.f32[0] = v11 - v10.f32[2];
  v15.f32[1] = v9.f32[0] - v9.f32[2];
  v15.f32[2] = v13.f32[1] + v10.f32[0];
  *(int32x2_t *)v10.f32 = vrev64_s32(*(int32x2_t *)v10.f32);
  v17.i32[0] = vadd_f32(v13, *(float32x2_t *)v10.f32).u32[0];
  v17.i32[1] = vsub_f32(v13, *(float32x2_t *)&v10).i32[1];
  v17.f32[2] = v9.f32[0] - v9.f32[1];
  v18 = vmulq_lane_f32(v15, *(float32x2_t *)v12.f32, 1);
  v17.i32[3] = 0;
  v19 = vmulq_laneq_f32(v17, v12, 2);
  v20 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld];
  v21 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld + 16];
  v22 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld + 32];
  v23 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld + 48];
  v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v16.f32[0]), v21, *(float32x2_t *)v16.f32, 1), v22, v16, 2), v23, v16, 3);
  v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v19.f32[0]), v21, *(float32x2_t *)v19.f32, 1), v22, v19, 2), v23, v19, 3);
  v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v18.f32[0]), v21, *(float32x2_t *)v18.f32, 1), v22, v18, 2), v23, v18, 3);
  v33 = (__n128)vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, a3.f32[0]), v21, *(float32x2_t *)a3.f32, 1), v22, (float32x4_t)a3, 2));
  v24 = v3;
  v25 = swift_retain();
  sub_1B1DA1D64(v25, v24, v31, v29, v27, v33);
  return swift_release();
}

uint64_t sub_1B1E49C6C(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  char *v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  char *v23;
  uint64_t v24;
  __n128 v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  v4 = vmulq_n_f32(a1, *(float *)&v3[OBJC_IVAR___VFXREScene_sceneScale]);
  v5 = vabsq_f32(v4);
  v5.i32[3] = 0;
  v6.i64[0] = 0x8000000080000000;
  v6.i64[1] = 0x8000000080000000;
  v7 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v4, v6), (int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v5, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
  v8 = vmulq_f32(a2, a2);
  v9 = vmulq_laneq_f32(a2, a2, 3);
  v10 = vmulq_lane_f32(a2, *(float32x2_t *)a2.f32, 1).f32[0];
  v11 = vaddq_f32(v7, v7);
  v8.f32[0] = 0.5 - v8.f32[0];
  v12 = vmul_laneq_f32(*(float32x2_t *)a2.f32, a2, 2);
  v13.i32[3] = 0;
  v13.f32[0] = (float)(0.5 - v8.f32[1]) - v8.f32[2];
  v13.f32[1] = v10 + v9.f32[2];
  v13.f32[2] = v12.f32[0] - v9.f32[1];
  v14.i32[3] = 0;
  v15 = vmulq_n_f32(v13, v11.f32[0]);
  v14.f32[0] = v10 - v9.f32[2];
  v14.f32[1] = v8.f32[0] - v8.f32[2];
  v14.f32[2] = v12.f32[1] + v9.f32[0];
  *(int32x2_t *)v9.f32 = vrev64_s32(*(int32x2_t *)v9.f32);
  v16.i32[0] = vadd_f32(v12, *(float32x2_t *)v9.f32).u32[0];
  v16.i32[1] = vsub_f32(v12, *(float32x2_t *)&v9).i32[1];
  v16.f32[2] = v8.f32[0] - v8.f32[1];
  v17 = vmulq_lane_f32(v14, *(float32x2_t *)v11.f32, 1);
  v16.i32[3] = 0;
  v18 = vmulq_laneq_f32(v16, v11, 2);
  v19 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld];
  v20 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld + 16];
  v21 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld + 32];
  v22 = *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld + 48];
  v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v15.f32[0]), v20, *(float32x2_t *)v15.f32, 1), v21, v15, 2), v22, v15, 3);
  v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v18.f32[0]), v20, *(float32x2_t *)v18.f32, 1), v21, v18, 2), v22, v18, 3);
  v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v17.f32[0]), v20, *(float32x2_t *)v17.f32, 1), v21, v17, 2), v22, v17, 3);
  v26 = (__n128)vaddq_f32(v22, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, a3.f32[0]), v20, *(float32x2_t *)a3.f32, 1), v21, a3, 2));
  v23 = v3;
  v24 = swift_retain();
  sub_1B1DA1D64(v24, v23, v29, v28, v27, v26);
  return swift_release();
}

void sub_1B1E49EDC(float32x4_t a1, float32x4_t a2, simd_float4 a3)
{
  char *v3;
  int8x16_t v4;
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  simd_float4x4 v10;
  char *v11;
  uint64_t v12;

  v10.columns[3] = a3;
  v10.columns[0] = (simd_float4)vmulq_n_f32(a1, *(float *)&v3[OBJC_IVAR___VFXREScene_sceneScale]);
  v10.columns[3].i32[3] = 1.0;
  v10.columns[2] = (simd_float4)vabsq_f32((float32x4_t)v10.columns[0]);
  v10.columns[2].i32[3] = 0;
  v10.columns[2] = (simd_float4)vmaxnmq_f32((float32x4_t)v10.columns[2], (float32x4_t)xmmword_1B2245780);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v10.columns[2].i32[0] &= ~0x80000000;
  v10.columns[2].i32[1] &= ~0x80000000;
  v10.columns[2].i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
  v10.columns[0] = (simd_float4)vorrq_s8(vandq_s8((int8x16_t)v10.columns[0], v4), (int8x16_t)v10.columns[2]);
  v10.columns[2] = (simd_float4)vmulq_f32(a2, a2);
  v5 = vmulq_laneq_f32(a2, a2, 3);
  v6 = vmulq_lane_f32(a2, *(float32x2_t *)a2.f32, 1).f32[0];
  v10.columns[2].f32[0] = 0.5 - v10.columns[2].f32[0];
  *(float32x2_t *)v10.columns[1].f32 = vmul_laneq_f32(*(float32x2_t *)a2.f32, a2, 2);
  v7.i32[3] = 0;
  v8.i32[3] = 0;
  v8.f32[0] = (float)(0.5 - v10.columns[2].f32[1]) - v10.columns[2].f32[2];
  v8.f32[1] = v6 + v5.f32[2];
  v8.f32[2] = v10.columns[1].f32[0] - v5.f32[1];
  v7.f32[0] = v6 - v5.f32[2];
  v7.f32[1] = v10.columns[2].f32[0] - v10.columns[2].f32[2];
  v7.f32[2] = v10.columns[1].f32[1] + v5.f32[0];
  v9 = vaddq_f32((float32x4_t)v10.columns[0], (float32x4_t)v10.columns[0]);
  *(int32x2_t *)v10.columns[0].f32 = vrev64_s32(*(int32x2_t *)v5.f32);
  v5.i32[0] = vadd_f32(*(float32x2_t *)v10.columns[1].f32, *(float32x2_t *)v10.columns[0].f32).u32[0];
  v5.i32[1] = vsub_f32(*(float32x2_t *)(&v10 + 16), *(float32x2_t *)&v10).i32[1];
  v10.columns[0] = (simd_float4)vmulq_n_f32(v8, v9.f32[0]);
  v5.f32[2] = v10.columns[2].f32[0] - v10.columns[2].f32[1];
  v5.i32[3] = 0;
  v10.columns[1] = (simd_float4)vmulq_lane_f32(v7, *(float32x2_t *)v9.f32, 1);
  v10.columns[2] = (simd_float4)vmulq_laneq_f32(v5, v9, 2);
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32((float32x4_t)v10.columns[1], *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_worldFromScene + 16]), (int8x16_t)vceqq_f32((float32x4_t)v10.columns[3], *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_worldFromScene + 48])), vandq_s8((int8x16_t)vceqq_f32((float32x4_t)v10.columns[0], *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_worldFromScene]), (int8x16_t)vceqq_f32((float32x4_t)v10.columns[2], *(float32x4_t *)&v3[OBJC_IVAR___VFXREScene_worldFromScene + 32])))) & 0x80000000) == 0)
  {
    *(simd_float4x4 *)&v3[OBJC_IVAR___VFXREScene_worldFromScene] = v10;
    *(simd_float4x4 *)&v3[OBJC_IVAR___VFXREScene_sceneFromWorld] = __invert_f4(v10);
    v11 = v3;
    v12 = swift_retain();
    sub_1B1DA1AD8(v12, v11);
    swift_release();
  }
}

__n128 sub_1B1E4A084(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_worldFromScene + 16);
  v3 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_worldFromScene + 32);
  v4 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_worldFromScene + 48);
  *(_OWORD *)a1 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_worldFromScene);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + OBJC_IVAR___VFXREScene_sceneFromWorld);
  v6 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_sceneFromWorld + 16);
  v7 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_sceneFromWorld + 32);
  v8 = *(_OWORD *)(a2 + OBJC_IVAR___VFXREScene_sceneFromWorld + 48);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  return result;
}

void sub_1B1E4A104(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;

  if ((v7[OBJC_IVAR___VFXREScene_cameraEntity + 8] & 1) == 0)
  {
    v8 = *(_QWORD *)&v7[OBJC_IVAR___VFXREScene_cameraEntity];
    v9 = v7;
    v10 = swift_retain();
    sub_1B1DA249C(v10, v9, v8, a1, a2, a3, a4, a5, a6, a7);
    swift_release();
  }
}

void sub_1B1E4A1B8(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = HIDWORD(a2);
  sub_1B1E49928(*(_QWORD *)(a1 + OBJC_IVAR___VFXREScene_cameraEntity), *(_BYTE *)(a1 + OBJC_IVAR___VFXREScene_cameraEntity + 8), a3, a4, a5);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (((_DWORD)a2 != -1 || (_DWORD)v11)
    && (uint64_t)(a2 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v11 == -1 || *(_DWORD *)(v13 + 12 * (int)a2 + 8) == (_DWORD)v11)
      sub_1B1FE685C(*(_QWORD *)(*(_QWORD *)(v12 + 136) + 8 * *(int *)(v13 + 12 * (int)a2) + 32), *(_WORD *)(v13 + 12 * (int)a2 + 4), 64, a6, a7, a8, a9);
  }
}

uint64_t sub_1B1E4A374(__n128 a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v2 = v1;
  v3 = swift_retain();
  sub_1B1DA2680(v3, v2, a1);
  return swift_release();
}

uint64_t sub_1B1E4A454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  swift_retain();
  v7 = sub_1B1B0E020(a1, a2, 0x200000000);
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + v6) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (v7 == 0xFFFFFFFFLL)
    v9 = 0;
  else
    v9 = v7;
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                             + 32));
  return v9;
}

uint64_t sub_1B1E4A58C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  v6 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  if (!a1)
    a1 = 0xFFFFFFFFLL;
  swift_retain();
  sub_1B1B0E4E4(a1, a2);
  swift_release();
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + v6)
                                                                              + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                                  + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                                    + 32));
}

uint64_t sub_1B1E4A6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45[8];
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _BYTE v60[40];
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v1 = v0;
  v2 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  v42 = MEMORY[0x1E0DEE9D8];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v61 = qword_1ED4D09F8;
  v62 = 0;
  v63 = 2;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  swift_retain();
  sub_1B1E3F5EC(1, (uint64_t)v43);
  swift_release();
  v58[0] = v43[0];
  v58[1] = v43[1];
  v59 = v44;
  v3 = swift_retain();
  sub_1B1E8FCE4(v3, (uint64_t)v58, 0x200000000, v45);
  sub_1B1A18378((uint64_t)v45, (uint64_t)v46, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v46[0])
  {
    swift_release();
    sub_1B19ED720((uint64_t)v43);
    v30 = MEMORY[0x1E0DEE9D8];
    goto LABEL_41;
  }
  v53 = v46[0];
  v54 = v46[1];
  v35 = v48;
  v55 = v47;
  v5 = v49;
  v4 = v50;
  v6 = v52;
  v41 = v51;
  swift_release();
  if (v6 <= 0 || !v5)
  {
    sub_1B19ED720((uint64_t)v43);
    sub_1B19ED748(v45);
    v30 = MEMORY[0x1E0DEE9D8];
LABEL_41:
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + v2)
                                                                         + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                             + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                               + 32));
    return v30;
  }
  v32 = v2;
  v33 = v0;
  v40 = v41[4];
  v39 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  swift_retain();
  swift_retain();
  swift_retain();
  v7 = 0;
  v8 = 0;
  v34 = v5;
  while (1)
  {
    v37 = v8;
    v38 = v7;
    v9 = (unsigned int *)(v35 + 48 * v7);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)*((_QWORD *)v9 + 2);
    v14 = *((_QWORD *)v9 + 4);
    v13 = *((_QWORD *)v9 + 5);
    v36 = *((_QWORD *)v9 + 3);
    if (v39)
    {
      v15 = *(os_unfair_lock_s **)(v13 + 376);
      swift_retain();
      os_unfair_lock_lock(v15);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v40);
    sub_1B1A18378((uint64_t)(v41 + 6), (uint64_t)v60, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v16 = v41[4];
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v41[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
    v41[7] = v17;
    v41[9] = 0;
    v41[10] = 0;
    v41[8] = 0;
    swift_release();
    sub_1B1A12038((uint64_t)&type metadata for REMeshAssetPointCache, (uint64_t)&off_1E63A5D68, v12, v36, v14, (uint64_t)v41);
    if (!v12)
      break;
    if (v14)
    {
      do
      {
        v19 = *v12++;
        v18 = v19;
        v20 = swift_retain();
        if ((*(_BYTE *)(v13 + 184) & 1) != 0)
          goto LABEL_42;
        v21 = *(unsigned int *)(*(_QWORD *)(v13 + 168) + 4 * v18);
        v22 = *(unsigned int *)(*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v21 + 8);
        swift_release();
        if ((_DWORD)v22)
          v23 = 0;
        else
          v23 = v21 == 0xFFFFFFFFLL;
        if (v23)
          v24 = 0;
        else
          v24 = v21 | (v22 << 32);
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, v24);
        MEMORY[0x1B5E2064C]();
        if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B2228AF4();
        sub_1B2228B30();
        sub_1B2228AD0();
      }
      while (--v14);
    }
LABEL_25:
    v56[0] = v53;
    v56[1] = v54;
    v57 = v55;
    v8 = v37;
    sub_1B1F05D48(v41, (unsigned __int16 **)v56, (uint64_t)v60);
    sub_1B1F03804((char *)v13);
    ecs_stack_allocator_pop_snapshot(v40);
    if ((v39 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
    }
    swift_release();
    v7 = v38 + 1;
    if (v38 + 1 == v34)
    {
      sub_1B19ED720((uint64_t)v43);
      sub_1B19ED748(v45);
      sub_1B19ED748(v45);
      v30 = v42;
      v2 = v32;
      v1 = v33;
      goto LABEL_41;
    }
  }
  if ((_DWORD)v10 == (_DWORD)v11)
    goto LABEL_25;
  while (1)
  {
    v25 = swift_retain();
    if ((*(_BYTE *)(v13 + 184) & 1) != 0)
      break;
    v26 = *(unsigned int *)(*(_QWORD *)(v13 + 168) + 4 * v10);
    v27 = *(unsigned int *)(*(_QWORD *)(v25 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v26 + 8);
    swift_release();
    if ((_DWORD)v27)
      v28 = 0;
    else
      v28 = v26 == 0xFFFFFFFFLL;
    if (v28)
      v29 = 0;
    else
      v29 = v26 | (v27 << 32);
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, v29);
    MEMORY[0x1B5E2064C]();
    if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    ++v10;
    sub_1B2228B30();
    sub_1B2228AD0();
    if (v11 == v10)
      goto LABEL_25;
  }
LABEL_42:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E4ACE0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1B1D18CA4((unint64_t)objc_msgSend(a1, sel_unsignedLongLongValue));
  if (!v2)
    return 0;
  v3 = v1;
  swift_bridgeObjectRelease();
  return v3;
}

id sub_1B1E4ADC0()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXREBindingMeshData()), sel_init);
}

void sub_1B1E4AE0C(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v8 = objc_msgSend(a1, sel_unsignedLongLongValue);
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v12 = a4;
  swift_retain();
  v10 = a2;
  v11 = a3;
  sub_1B1FEC6DC((uint64_t)v8, v9, a2, a3, a4);
  swift_release();

}

void sub_1B1E4AECC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t *v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  id v9;
  char v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = (uint64_t *)(a1 + 16);
  if (a2)
  {
    v7 = a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v6;
    *v6 = 0x8000000000000000;
    sub_1B1B89A90((uint64_t)v7, 0, isUniquelyReferenced_nonNull_native);
    *v6 = v13;
    swift_bridgeObjectRelease();
    if (a3)
      goto LABEL_3;
LABEL_6:

    if (a4)
      goto LABEL_4;
    goto LABEL_7;
  }

  if (!a3)
    goto LABEL_6;
LABEL_3:
  v9 = a3;
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v6;
  *v6 = 0x8000000000000000;
  sub_1B1B89A90((uint64_t)v9, 2, v10);
  *v6 = v14;
  swift_bridgeObjectRelease();
  if (a4)
  {
LABEL_4:
    v11 = a4;
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v6;
    *v6 = 0x8000000000000000;
    sub_1B1B89A90((uint64_t)v11, 4, v12);
    *v6 = v15;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:

}

uint64_t sub_1B1E4B0C4(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  __n128 v7;

  v7 = (__n128)vaddq_f32(a1, a6);
  v7.n128_u32[3] = a6.u32[3];
  return sub_1B1E4B154(a2, a3, a4, a5, v7);
}

uint64_t sub_1B1E4B154(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  v7 = sub_1B217E224(0x100000000uLL, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + v6) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)+ OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), a2, a3, a4, a5, a1);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + v6) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (v7 == 0xFFFFFFFFLL)
    v9 = 0;
  else
    v9 = v7;
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                             + 32));
  return v9;
}

uint64_t sub_1B1E4B284(unint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  __n128 v8;

  v8 = (__n128)vaddq_f32(a2, a7);
  v8.n128_u32[3] = a7.u32[3];
  return sub_1B1E4B320(a1, a3, a4, a5, a6, v8);
}

uint64_t sub_1B1E4B320(unint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __n128 v38;
  float32x4_t v39;
  float v40;
  int8x16_t v41;
  int8x16_t v42;
  int32x2_t v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  int32x2_t v49;
  __n128 v50;
  float32x4_t v51;
  __n128 v52;
  unint64_t v53;
  float32x2_t v55;
  float32x2_t v56;
  int32x2_t v57;

  v8 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  v9 = vmulq_f32(a3, a3);
  v10 = vmulq_f32(a4, a4);
  v11 = vmulq_f32(a5, a5);
  v12 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2);
  v13 = (float32x4_t)vtrn2q_s32((int32x4_t)v9, (int32x4_t)v10);
  v13.i32[2] = v11.i32[1];
  v14 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v9, (int32x4_t)v11), (int32x4_t)v12), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v9, (int32x4_t)v11), (int32x4_t)v10), v13));
  v15.i64[0] = 0x80000000800000;
  v15.i64[1] = 0x80000000800000;
  v16 = vcgeq_f32(v15, v14);
  v14.i32[3] = 0;
  v17 = vrsqrteq_f32(v14);
  v18 = vmulq_f32(v17, vrsqrtsq_f32(v14, vmulq_f32(v17, v17)));
  v19 = v16;
  v19.i32[3] = 0;
  v20 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v19), (int8x16_t)v14, (int8x16_t)vmulq_f32(v18, vrsqrtsq_f32(v14, vmulq_f32(v18, v18))));
  v21 = vmulq_n_f32(a3, v20.f32[0]);
  v22 = vmulq_lane_f32(a4, *(float32x2_t *)v20.f32, 1);
  v23 = vmulq_laneq_f32(a5, v20, 2);
  v24 = (int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23);
  v25 = (int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22);
  v26 = (int32x4_t)v21;
  if (v16.i32[0])
  {
    v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v24, (int8x16_t)v23, 0xCuLL), vnegq_f32(v22)), v23, (float32x4_t)vextq_s8(v25, (int8x16_t)v22, 0xCuLL));
    v26 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
  }
  v28 = (int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21);
  v29 = v22;
  if (v16.i32[1])
  {
    v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v28, (int8x16_t)v21, 0xCuLL), vnegq_f32(v23)), v21, (float32x4_t)vextq_s8(v24, (int8x16_t)v23, 0xCuLL));
    v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
  }
  if (v16.i32[2])
  {
    v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v25, (int8x16_t)v22, 0xCuLL), vnegq_f32(v21)), v22, (float32x4_t)vextq_s8(v28, (int8x16_t)v21, 0xCuLL));
    v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  }
  v31 = (float)(*(float *)v26.i32 + v29.f32[1]) + v23.f32[2];
  if (v31 <= 0.0)
  {
    if (*(float *)v26.i32 < v29.f32[1] || *(float *)v26.i32 < v23.f32[2])
    {
      v39 = a2;
      v38 = a6;
      if (v29.f32[1] <= v23.f32[2])
      {
        *(float32x2_t *)v23.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v26, (int32x4_t)v29), *(float32x2_t *)v23.f32);
        v55 = (float32x2_t)__PAIR64__(v26.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v23.f32[2] + 1.0) - *(float *)v26.i32) - v29.f32[1])));
        v56 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 0);
        v57 = (int32x2_t)vsub_f32(*(float32x2_t *)v26.i8, v56);
        v56.i32[0] = v55.i32[0];
        v56.i32[0] = vmul_f32(v55, v56).u32[0];
        v56.i32[1] = v57.i32[1];
        *(float32x2_t *)&v35.u32[2] = v56;
        *(float *)v57.i32 = 0.5 / v55.f32[0];
        v36 = (float32x4_t)vdupq_lane_s32(v57, 0);
      }
      else
      {
        v40 = sqrtf((float)((float)(v29.f32[1] + 1.0) - *(float *)v26.i32) - v23.f32[2]);
        *(int32x2_t *)v16.i8 = vdup_laneq_s32((int32x4_t)v29, 2);
        v41 = (int8x16_t)v16;
        *(float *)v41.i32 = v40;
        v41.i32[0] = vmul_f32(*(float32x2_t *)v41.i8, (float32x2_t)__PAIR64__(v23.u32[1], LODWORD(v40))).u32[0];
        v41.i32[1] = vadd_f32(*(float32x2_t *)&v16, *(float32x2_t *)&v23).i32[1];
        v42 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1), v29);
        v43 = (int32x2_t)vsubq_f32(v23, (float32x4_t)vdupq_laneq_s32(v26, 2)).u64[0];
        v36 = (float32x4_t)vextq_s8(vextq_s8(v42, v42, 4uLL), v41, 0xCuLL);
        v36.i32[3] = v43.i32[0];
        *(float *)v43.i32 = 0.5 / v40;
        v35 = (float32x4_t)vdupq_lane_s32(v43, 0);
      }
      goto LABEL_17;
    }
    v44 = sqrtf((float)((float)(*(float *)v26.i32 + 1.0) - v29.f32[1]) - v23.f32[2]);
    v45 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 0);
    v46 = vadd_f32(*(float32x2_t *)v26.i8, v45);
    v45.f32[0] = v44;
    v36.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v26.u32[1], LODWORD(v44)), v45).u32[0];
    v36.i32[1] = v46.i32[1];
    v47 = (float32x2_t)vzip2q_s32(v26, (int32x4_t)v29).u64[0];
    LODWORD(v48) = vadd_f32(v47, *(float32x2_t *)v23.f32).u32[0];
    v49 = (int32x2_t)vsub_f32(v47, *(float32x2_t *)v23.f32);
    HIDWORD(v48) = v49.i32[1];
    v36.i64[1] = v48;
    *(float *)v49.i32 = 0.5 / v44;
    v35 = (float32x4_t)vdupq_lane_s32(v49, 0);
  }
  else
  {
    v32 = (float32x4_t)vzip2q_s32((int32x4_t)v29, vuzp1q_s32((int32x4_t)v29, (int32x4_t)v23));
    v32.i32[2] = v26.i32[1];
    v33 = (float32x4_t)vtrn2q_s32((int32x4_t)v23, vzip2q_s32((int32x4_t)v23, v26));
    v33.i32[2] = v29.i32[0];
    v35 = vsubq_f32(v32, v33);
    v32.i32[3] = sqrtf(v31 + 1.0);
    v33.i32[3] = v32.i32[3];
    v34 = vmulq_f32(v32, v33);
    v35.i32[3] = v34.i32[3];
    v34.f32[0] = 0.5 / v32.f32[3];
    v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0);
  }
  v39 = a2;
  v38 = a6;
LABEL_17:
  v50 = (__n128)vmulq_f32(v35, v36);
  v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)));
  v51.f32[0] = sqrtf(v51.f32[0]);
  v51.i32[1] = sqrtf(vaddq_f32(v12, vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v51.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v52 = (__n128)vmulq_f32(v51, v39);
  if (a1)
    v53 = a1;
  else
    v53 = 0xFFFFFFFFLL;
  sub_1B1E49928(v53, 0, v52, v50, v38);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + v8)
                                                                              + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                                  + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                                    + 32));
}

uint64_t sub_1B1E4B6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  v4 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  if (!a1)
    a1 = 0xFFFFFFFFLL;
  swift_retain();
  sub_1B1DA4B24(a1);
  swift_release();
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + v4)
                                                                              + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                                  + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                                    + 32));
}

BOOL sub_1B1E4B800()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  v1 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  swift_retain();
  v2 = sub_1B20214D0();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v0 + v1)
                                                                       + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                           + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                             + 32));
  return v2;
}

uint64_t sub_1B1E4B8AC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = OBJC_IVAR___VFXREScene_scene;
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR___VFXREScene_scene)
                                                                        + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                            + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                              + 32));
  if (a1)
    v4 = a1;
  else
    v4 = 0xFFFFFFFFLL;
  sub_1B1FE03A4(v4, *(_QWORD *)(*(_QWORD *)(v1 + v3) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager));
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + v3)
                                                                              + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                                                  + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                                    + 32));
}

id VFXREScene.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VFXREScene.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VFXREScene.__deallocating_deinit()
{
  return sub_1B1D567F4(type metadata accessor for VFXREScene);
}

uint64_t type metadata accessor for VFXREScene()
{
  return objc_opt_self();
}

uint64_t sub_1B1E4BAD4()
{
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

void sub_1B1E4BAF8()
{
  sub_1B1E48104();
}

unint64_t sub_1B1E4BB10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4BB1C0;
  if (!qword_1ED4BB1C0)
  {
    sub_1B1C2DA04();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0C95F48], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4BB1C0);
  }
  return result;
}

uint64_t sub_1B1E4BB58()
{
  unint64_t v0;
  uint64_t result;
  int v2;

  v0 = qword_1EEF61320;
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BF6F0, (uint64_t)&type metadata for RenderVariantDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1B228E6F0;
  *(_DWORD *)(result + 32) = 1025;
  *(_QWORD *)(result + 40) = 115;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_QWORD *)(result + 96) = 0;
  *(_OWORD *)(result + 104) = xmmword_1B2298750;
  *(_QWORD *)(result + 120) = 4;
  *(_DWORD *)(result + 128) = 3073;
  *(_QWORD *)(result + 136) = 115;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_QWORD *)(result + 192) = 0;
  *(_OWORD *)(result + 200) = xmmword_1B2298750;
  *(_QWORD *)(result + 216) = 4;
  if (v0 >= 0x2540BE40ALL)
    v2 = 5121;
  else
    v2 = 1029;
  *(_DWORD *)(result + 224) = v2;
  *(_QWORD *)(result + 232) = 115;
  *(_OWORD *)(result + 256) = 0uLL;
  *(_OWORD *)(result + 272) = 0uLL;
  *(_OWORD *)(result + 240) = 0uLL;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 252;
  *(_OWORD *)(result + 304) = xmmword_1B2298760;
  *(_DWORD *)(result + 320) = 1089;
  *(_QWORD *)(result + 328) = 81;
  *(_OWORD *)(result + 336) = 0uLL;
  *(_OWORD *)(result + 352) = 0uLL;
  *(_OWORD *)(result + 368) = 0uLL;
  *(_QWORD *)(result + 384) = 0;
  *(_QWORD *)(result + 392) = 252;
  *(_OWORD *)(result + 400) = xmmword_1B2298770;
  *(_DWORD *)(result + 416) = 3137;
  *(_QWORD *)(result + 424) = 81;
  *(_OWORD *)(result + 432) = 0uLL;
  *(_OWORD *)(result + 448) = 0uLL;
  *(_OWORD *)(result + 464) = 0uLL;
  *(_QWORD *)(result + 480) = 0;
  *(_QWORD *)(result + 488) = 252;
  *(_OWORD *)(result + 496) = xmmword_1B2298770;
  *(_DWORD *)(result + 512) = v2 | 0x40;
  *(_QWORD *)(result + 520) = 81;
  *(_QWORD *)(result + 576) = 0;
  *(_OWORD *)(result + 544) = 0uLL;
  *(_OWORD *)(result + 560) = 0uLL;
  *(_OWORD *)(result + 528) = 0uLL;
  *(_QWORD *)(result + 584) = 252;
  *(_OWORD *)(result + 592) = xmmword_1B2298770;
  *(_DWORD *)(result + 608) = 1025;
  *(_QWORD *)(result + 616) = 81;
  *(_QWORD *)(result + 672) = 0;
  *(_OWORD *)(result + 640) = 0uLL;
  *(_OWORD *)(result + 656) = 0uLL;
  *(_OWORD *)(result + 624) = 0uLL;
  *(_QWORD *)(result + 680) = 252;
  *(_OWORD *)(result + 688) = xmmword_1B2298760;
  *(_DWORD *)(result + 704) = 3073;
  *(_QWORD *)(result + 712) = 81;
  *(_QWORD *)(result + 768) = 0;
  *(_OWORD *)(result + 736) = 0uLL;
  *(_OWORD *)(result + 752) = 0uLL;
  *(_OWORD *)(result + 720) = 0uLL;
  *(_QWORD *)(result + 776) = 252;
  *(_OWORD *)(result + 784) = xmmword_1B2298760;
  return result;
}

id sub_1B1E4BCE0(void *a1, char *a2, _BYTE *a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  _BYTE *v22;
  _BYTE *v23;
  objc_class *v24;
  id v25;
  char *v26;
  uint64_t v28;
  char *v29;
  objc_super v30;

  v4 = v3;
  v29 = a2;
  v7 = sub_1B222826C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_effect] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_transientDrawCall] = 0;
  v12 = &v4[OBJC_IVAR___VFXREScene_rootEntity];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v4[OBJC_IVAR___VFXREScene_cameraEntity];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = OBJC_IVAR___VFXREScene_device;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_device] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___VFXREScene_cancellables] = MEMORY[0x1E0DEE9E8];
  v4[OBJC_IVAR___VFXREScene_isPrepared] = 0;
  v15 = OBJC_IVAR___VFXREScene_uuid;
  v16 = v4;
  sub_1B2228260();
  v17 = sub_1B2228254();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *(_QWORD *)&v4[v15] = v17;
  v18 = &v16[OBJC_IVAR___VFXREScene_worldFromScene];
  *(_OWORD *)v18 = xmmword_1B2244DB0;
  *((_OWORD *)v18 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v18 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v18 + 3) = xmmword_1B2244E20;
  v19 = &v16[OBJC_IVAR___VFXREScene_sceneFromWorld];
  *(_OWORD *)v19 = xmmword_1B2244DB0;
  *((_OWORD *)v19 + 1) = xmmword_1B2244DD0;
  *((_OWORD *)v19 + 2) = xmmword_1B2244D90;
  *((_OWORD *)v19 + 3) = xmmword_1B2244E20;
  *(_DWORD *)&v16[OBJC_IVAR___VFXREScene_sceneScale] = 1065353216;
  v20 = &v16[OBJC_IVAR___VFXREScene_reloadBlock];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *(_QWORD *)&v16[OBJC_IVAR___VFXREScene_remappingTable] = 0;
  *(_QWORD *)&v16[OBJC_IVAR___VFXREScene_renderOutput] = 0;
  *(_QWORD *)&v4[v14] = objc_msgSend(a1, sel_device);
  swift_unknownObjectRelease();
  a3[OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene] = 0;
  *(_QWORD *)&a3[OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions] = 1073775625;
  a3[OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts] = a3[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer];
  v21 = objc_allocWithZone((Class)type metadata accessor for VFXScene(0));
  v22 = a3;
  v23 = VFXScene.init(options:)(v22);
  v23[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 1;
  *(_QWORD *)&v16[OBJC_IVAR___VFXREScene_scene] = v23;

  v24 = (objc_class *)type metadata accessor for VFXREScene();
  v30.receiver = v16;
  v30.super_class = v24;
  v25 = objc_msgSendSuper2(&v30, sel_init);
  swift_unknownObjectRetain();
  v26 = v29;
  sub_1B1E4568C(v29, a1);

  swift_unknownObjectRelease();
  return v25;
}

uint64_t sub_1B1E4BF8C()
{
  swift_release();
  return swift_deallocObject();
}

double sub_1B1E4BFB0(float a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vmulq_n_f32(a2, a1).u64[0];
  return result;
}

double sub_1B1E4BFC4(float32x4_t a1, double a2, float32x4_t a3)
{
  float32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;

  v3 = vabsq_f32(a3);
  v3.i32[3] = 0;
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v5 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v3, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)a3, v4));
  v6 = vmulq_f32(a1, a1);
  v7 = vmulq_laneq_f32(a1, a1, 3);
  v8.i32[3] = 0;
  v8.f32[0] = (float)(0.5 - v6.f32[1]) - v6.f32[2];
  v8.f32[1] = vmulq_lane_f32(a1, *(float32x2_t *)a1.f32, 1).f32[0] + v7.f32[2];
  v8.f32[2] = vmul_laneq_f32(*(float32x2_t *)a1.f32, a1, 2).f32[0] - v7.f32[1];
  *(_QWORD *)&result = vmulq_n_f32(v8, vaddq_f32(v5, v5).f32[0]).u64[0];
  return result;
}

double sub_1B1E4C084(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, double a5, double a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  _OWORD v10[4];
  _OWORD v11[4];

  v8 = 0;
  v10[2] = a7;
  v10[3] = a8;
  memset(v11, 0, sizeof(v11));
  do
  {
    v11[v8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(v10[v8])), a2, *(float32x2_t *)&v10[v8], 1), a3, (float32x4_t)v10[v8], 2), a4, (float32x4_t)v10[v8], 3);
    ++v8;
  }
  while (v8 != 4);
  return *(double *)v11;
}

unint64_t sub_1B1E4C0EC()
{
  unint64_t result;

  result = qword_1EEF5F558;
  if (!qword_1EEF5F558)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for BindingCopyAction, &type metadata for BindingCopyAction);
    atomic_store(result, (unint64_t *)&qword_1EEF5F558);
  }
  return result;
}

uint64_t sub_1B1E4C130@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*a1 + OBJC_IVAR___VFXREREnderer_device);
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1E4C148(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXREREnderer_device) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

id sub_1B1E4C180@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(*a1 + OBJC_IVAR___VFXREScene_scene);
  *a2 = v2;
  return v2;
}

void sub_1B1E4C198(void **a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*a2 + OBJC_IVAR___VFXREScene_scene);
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXREScene_scene) = *a1;
  v3 = v2;

}

id sub_1B1E4C1D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(*a1 + OBJC_IVAR___VFXREScene_effect);
  *a2 = v2;
  return v2;
}

void sub_1B1E4C1EC(void **a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*a2 + OBJC_IVAR___VFXREScene_effect);
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXREScene_effect) = *a1;
  v3 = v2;

}

uint64_t sub_1B1E4C228@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*a1 + OBJC_IVAR___VFXREScene_transientDrawCall);
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1E4C240(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXREScene_transientDrawCall) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

_QWORD *sub_1B1E4C278@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR___VFXREScene_uuid);
  return result;
}

_QWORD *sub_1B1E4C290(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXREScene_uuid) = *result;
  return result;
}

float sub_1B1E4C2A8@<S0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(*a1 + OBJC_IVAR___VFXREScene_sceneScale);
  *a2 = result;
  return result;
}

float sub_1B1E4C2C0(float *a1, _QWORD *a2)
{
  float result;

  result = *a1;
  *(float *)(*a2 + OBJC_IVAR___VFXREScene_sceneScale) = *a1;
  return result;
}

_QWORD *sub_1B1E4C2E0@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B1E4C304(a1, &OBJC_IVAR____TtC3VFX13EntityManager_peerPid, a2);
}

_DWORD *sub_1B1E4C2EC(_DWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1E4C340(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX13EntityManager_peerPid);
}

_QWORD *sub_1B1E4C2F8@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B1E4C304(a1, &OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity, a2);
}

_QWORD *sub_1B1E4C304@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  *a3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*result + OBJC_IVAR___VFXREScene_scene)
                              + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                  + *a2);
  return result;
}

_DWORD *sub_1B1E4C334(_DWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1E4C340(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
}

_DWORD *sub_1B1E4C340(_DWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
            + *a5) = *result;
  return result;
}

ValueMetadata *type metadata accessor for BindingCopyAction()
{
  return &type metadata for BindingCopyAction;
}

uint64_t method lookup function for VFXREREnderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXREREnderer.device.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t method lookup function for VFXREScene()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXREScene.scene.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of VFXREScene.effect.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of VFXREScene.transientDrawCall.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of VFXREScene.transientDrawCall.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of VFXREScene.transientDrawCall.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VFXREScene.uuid.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of VFXREScene.uuid.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of VFXREScene.uuid.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of VFXREScene.sceneScale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of VFXREScene.sceneScale.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of VFXREScene.sceneScale.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of VFXREScene.reloadBlock.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of VFXREScene.reloadBlock.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VFXREScene.reloadBlock.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VFXREScene.opaqueECS.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of VFXREScene.deltaTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VFXREScene.peerPid.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VFXREScene.peerPid.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of VFXREScene.peerPid.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of VFXREScene.peerTaskIdentity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of VFXREScene.peerTaskIdentity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of VFXREScene.peerTaskIdentity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of VFXREScene.drawCallCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of VFXREScene.updateMemoryOwnership()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VFXREScene.worldBoundingBox.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VFXREScene.__allocating_init(contentsOf:commandQueue:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 680))();
}

uint64_t dispatch thunk of VFXREScene.__allocating_init(commandQueue:model:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 688))();
}

uint64_t dispatch thunk of VFXREScene.__allocating_init(device:contentsOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 696))();
}

uint64_t dispatch thunk of VFXREScene.__allocating_init(device:model:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 704))();
}

uint64_t dispatch thunk of VFXREScene.__allocating_init(device:model:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 712))();
}

uint64_t dispatch thunk of VFXREScene.shouldUseDrawCallHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of VFXREScene.generateMaterials()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of VFXREScene.neededModels()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of VFXREScene.clear()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of VFXREScene.copyBindingValue(objectName:bindingName:action:storageGetterBlock:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of VFXREScene.tick()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of VFXREScene.tick(commandBuffer:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of VFXREScene.tick(deltaTime:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of VFXREScene.tick(deltaTime:commandBuffer:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of VFXREScene.recycleBuffersGetCompletion()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of VFXREScene.setRootEntityTransform(_:_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of VFXREScene.setRootTransform(_:_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of VFXREScene.setSceneTransform(_:_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of VFXREScene.setCameraEntityTransformProjection(_:_:_:_:_:_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of VFXREScene.setFrameConfiguration(immersiveEnvironmentCurves:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of VFXREScene.fetchClientTextureID(named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of VFXREScene.setClientTexture(id:texture:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of VFXREScene.REMeshAssetBindings()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of VFXREScene.getREMeshAssetPath(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of VFXREScene.createREMeshDataBinding()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of VFXREScene.setREMeshDataBinding(_:positionData:normalData:colorData:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of VFXREScene.addCollisionPlane(center:extents:transform:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of VFXREScene.addCollisionPlane(extents:transform:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of VFXREScene.updateCollisionPlane(id:center:extents:transform:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of VFXREScene.updateCollisionPlane(id:extents:transform:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of VFXREScene.removeCollisionPlane(id:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of VFXREScene.needsCollisionPlanes.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

unint64_t sub_1B1E4C9CC()
{
  unint64_t result;

  result = qword_1EEF5B5C0;
  if (!qword_1EEF5B5C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5B5C0);
  }
  return result;
}

uint64_t sub_1B1E4CA08()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1E4CA2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

_QWORD *sub_1B1E4CA38(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B2167624(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1E4CA7C(_QWORD *a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  float v14;
  float v15;

  sub_1B1E4D09C(0, &qword_1EEF5F568, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E4D058();
  sub_1B222A180();
  v14 = a2;
  v15 = a3;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1E4CBA4()
{
  sub_1B1E4D058();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E4CBCC()
{
  sub_1B1E4D058();
  return sub_1B222A1E0();
}

void sub_1B1E4CBF4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B1E4CEF4(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1E4CC1C(_QWORD *a1)
{
  float *v1;

  return sub_1B1E4CA7C(a1, *v1, v1[1]);
}

uint64_t sub_1B1E4CC34()
{
  return type metadata accessor for ParticleAngleVelocityInit.System();
}

double sub_1B1E4CC50()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleAngle;
  *(_QWORD *)(v0 + 40) = &off_1E637BD88;
  *(_QWORD *)(v0 + 48) = &type metadata for ParticleAngleVelocity;
  *(_QWORD *)(v0 + 56) = &off_1E63A3E30;
  return result;
}

double sub_1B1E4CCA8@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = 50.1238633;
  *a1 = 0x40490FDAC0490FDALL;
  return result;
}

uint64_t type metadata accessor for ParticleAngleVelocityInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1E4CCD8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  float v5;
  float v6;

  v1 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v2 = sub_1B1D181AC(v1);
  v4 = v3;
  swift_release();
  v6 = *((float *)&v2 + 1);
  v5 = *(float *)&v2;
  if ((v4 & 1) != 0)
  {
    v5 = -3.1416;
    v6 = 3.1416;
  }
  return sub_1B1D87BA0(v5, v6);
}

const char *sub_1B1E4CD58()
{
  return "SetAngleVelocity.CPU";
}

uint64_t type metadata accessor for ParticleAngleVelocityInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E4CD90()
{
  return "SetAngleVelocity.GPU";
}

uint64_t sub_1B1E4CDA4()
{
  return type metadata accessor for ParticleAngleVelocityInit.GPUSystem();
}

uint64_t sub_1B1E4CDC0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[2];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D181AC(v3);
  v7 = v6;
  swift_release();
  v9 = *((float *)&v5 + 1);
  v8 = *(float *)&v5;
  if ((v7 & 1) != 0)
  {
    v8 = -3.1416;
    v9 = 3.1416;
  }
  *(float *)v18 = v8;
  *(float *)&v18[1] = v9;
  v10 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_angle_velocity_uniforms(0);
    sub_1B1F40E1C((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD00000000000001BLL, 0x80000001B233EB80, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleAngleVelocityInit()
{
  return &type metadata for ParticleAngleVelocityInit;
}

float sub_1B1E4CEF4(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD v11[3];

  sub_1B1E4D09C(0, &qword_1ED4BAC18, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E4D058();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = *(float *)&v11[2];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1E4D058()
{
  unint64_t result;

  result = qword_1ED4B9B20;
  if (!qword_1ED4B9B20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298A80, &type metadata for ParticleAngleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9B20);
  }
  return result;
}

void sub_1B1E4D09C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E4D058();
    v7 = a3(a1, &type metadata for ParticleAngleVelocityInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleAngleVelocityInit.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1E4D138 + 4 * byte_1B2298880[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1E4D158 + 4 * byte_1B2298885[v4]))();
}

_BYTE *sub_1B1E4D138(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1E4D158(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E4D160(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E4D168(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E4D170(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E4D178(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAngleVelocityInit.CodingKeys()
{
  return &type metadata for ParticleAngleVelocityInit.CodingKeys;
}

unint64_t sub_1B1E4D198()
{
  unint64_t result;

  result = qword_1EEF5F570;
  if (!qword_1EEF5F570)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298A58, &type metadata for ParticleAngleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F570);
  }
  return result;
}

unint64_t sub_1B1E4D1E0()
{
  unint64_t result;

  result = qword_1ED4B9B30;
  if (!qword_1ED4B9B30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22989C8, &type metadata for ParticleAngleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9B30);
  }
  return result;
}

unint64_t sub_1B1E4D228()
{
  unint64_t result;

  result = qword_1ED4B9B28;
  if (!qword_1ED4B9B28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22989F0, &type metadata for ParticleAngleVelocityInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9B28);
  }
  return result;
}

__n128 sub_1B1E4D26C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  double v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  __n128 result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[2];
  unsigned __int16 v63;
  unsigned __int16 v64;
  unsigned __int16 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  _QWORD v78[3];
  char v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  char v84;
  char v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;

  v5 = v4;
  sub_1B222A06C();
  sub_1B20E3CA4((uint64_t)v78, a1);
  sub_1B20E3C50((uint64_t)v78, a2);
  sub_1B222A084();
  v10 = sub_1B222A0C0();
  v11 = v10;
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 800) + 16);
  if (*(_QWORD *)(v12 + 16) && (v13 = sub_1B1DC3AC8(v10), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(v12 + 56) + 120 * v13;
    v56 = *(_OWORD *)v15;
    v16 = *(_QWORD *)(v15 + 16);
    v58 = *(unsigned __int8 *)(v15 + 24);
    v47 = *(_OWORD *)(v15 + 48);
    v17 = *(_QWORD *)(v15 + 64);
    v18 = *(_QWORD *)(v15 + 72);
    v19 = *(_QWORD *)(v15 + 80);
    v20 = *(_QWORD *)(v15 + 88);
    v60 = *(_QWORD *)(v15 + 96);
    v21 = *(_QWORD *)(v15 + 112);
    v22 = *(_QWORD *)(v15 + 32);
    v23 = 0x10000;
    if (!*(_BYTE *)(v15 + 42))
      v23 = 0;
    v24 = *(unsigned __int16 *)(v15 + 40) | (unint64_t)v23;
    v25 = *(unsigned int *)(v15 + 104);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v26 = v56;
    v27 = v58;
  }
  else
  {
    v43 = v11;
    RGTextureDescriptor.init()((uint64_t)v62);
    v44 = v74;
    v42 = v75;
    v41 = v76;
    v55 = v77;
    v59 = v72;
    v60 = v73;
    v57 = v70;
    v45 = v69;
    v46 = v71;
    v54 = v68;
    v53 = v67;
    v52 = v66;
    v51 = v65;
    v50 = v64;
    v49 = v63;
    v78[0] = MEMORY[0x1E0DEE9D8];
    sub_1B202AFCC(0, 256, 0);
    v31 = 0;
    v32 = v78[0];
    do
    {
      LODWORD(v28) = 1132396544;
      sub_1B20D4310(a1, a2, a3, (float)v31 / 255.0, v28, v29, v30);
      v78[0] = v32;
      v35 = *(_QWORD *)(v32 + 16);
      v34 = *(_QWORD *)(v32 + 24);
      if (v35 >= v34 >> 1)
      {
        v48 = v33;
        sub_1B202AFCC(v34 > 1, v35 + 1, 1);
        v33 = v48;
        v32 = v78[0];
      }
      ++v31;
      *(_QWORD *)(v32 + 16) = v35 + 1;
      *(_OWORD *)(v32 + 32 + 16 * v35) = v33;
    }
    while (v31 != 256);
    v36 = objc_msgSend(*(id *)(v5 + 16), sel_newBufferWithBytes_length_options_);
    swift_release();
    v37 = *(_QWORD *)(v5 + 800);
    v78[0] = v36;
    v78[1] = 0;
    v78[2] = (unint64_t)(v36 != 0) << 12;
    v79 = 0;
    v80 = 256;
    v81 = v49;
    v82 = v50;
    v83 = v51;
    v84 = v52;
    v85 = v53;
    v86 = v54;
    v47 = xmmword_1B2298AD0;
    v87 = xmmword_1B2298AD0;
    v17 = v45;
    v19 = v46;
    v88 = v45;
    v89 = v57;
    v90 = v46;
    v91 = v59;
    v92 = v60;
    v93 = v44;
    v94 = v42;
    v95 = v41;
    v96 = v55;
    v21 = MEMORY[0x1E0DEE9D8];
    v97 = MEMORY[0x1E0DEE9D8];
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v61 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v37 + 16) = 0x8000000000000000;
    sub_1B1B881DC((uint64_t)v78, v43, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v37 + 16) = v61;
    swift_release();
    swift_bridgeObjectRelease();
    v27 = 0;
    v22 = (v50 << 32) | (v49 << 16) | (v51 << 48) | 0x100;
    v39 = 0x10000;
    if (!v54)
      v39 = 0;
    v24 = v52 | (v53 << 8) | v39;
    v20 = v59;
    v18 = v57;
    v16 = (unint64_t)(v36 != 0) << 12;
    v26 = (unint64_t)v36;
    v25 = v44 | (v42 << 8) | (v41 << 16) | (v55 << 24);
  }
  *(_OWORD *)a4 = v26;
  *(_QWORD *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 24) = v27;
  *(_QWORD *)(a4 + 32) = v22;
  *(_QWORD *)(a4 + 40) = v24;
  result = (__n128)v47;
  *(_OWORD *)(a4 + 48) = v47;
  *(_QWORD *)(a4 + 64) = v17;
  *(_QWORD *)(a4 + 72) = v18;
  *(_QWORD *)(a4 + 80) = v19;
  *(_QWORD *)(a4 + 88) = v20;
  *(_QWORD *)(a4 + 96) = v60;
  *(_QWORD *)(a4 + 104) = v25;
  *(_QWORD *)(a4 + 112) = v21;
  return result;
}

void *sub_1B1E4D65C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint8x8_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  __int128 v23;
  int v24;
  double v25;
  double v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int32 v42;

  sub_1B222A06C();
  sub_1B20E3CA4((uint64_t)v36, a1);
  sub_1B20E3C50((uint64_t)v36, a2);
  sub_1B222A084();
  v8 = sub_1B222A0C0();
  v9 = v8;
  v10 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v10 + 16))
  {
    v11 = sub_1B1DC3AC8(v8);
    if ((v12 & 1) != 0)
    {
      v13 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v11);
      swift_unknownObjectRetain();
      return v13;
    }
  }
  v35 = v9;
  RGTextureDescriptorMakeDefault((uint64_t)v36);
  v14 = BYTE10(v36[0]);
  v15 = v39;
  v16 = v40;
  v17 = v41;
  v4.i32[0] = v42;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v19 = Strong;
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
    *(_QWORD *)&v36[0] = 0x1000100010100;
    WORD4(v36[0]) = 257;
    BYTE10(v36[0]) = v14;
    v36[1] = 0x7DuLL;
    v37 = 0;
    v38 = 1;
    v39 = v15;
    v40 = v16;
    v41 = v17;
    v42 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)v36, v20);
    v21 = objc_msgSend(*(id *)(v19 + 16), sel_newTextureWithDescriptor_, v20);
    if (v21)
    {
      v13 = v21;
      sub_1B1F326B0((uint64_t)v21);
      objc_msgSend(v13, sel_setLabel_, 0);
      swift_release();

      goto LABEL_13;
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v36[0] = 0;
    *((_QWORD *)&v36[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v36[0] = 0xD000000000000023;
    *((_QWORD *)&v36[0] + 1) = 0x80000001B2331BE0;
    v22 = objc_msgSend(v20, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v23 = v36[0];
    v24 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v36[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v24, (uint64_t *)v36, v23, *((uint64_t *)&v23 + 1));
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  v13 = 0;
LABEL_13:
  *(_QWORD *)&v36[0] = MEMORY[0x1E0DEE9D8];
  sub_1B202AFCC(0, 256, 0);
  v28 = 0;
  v29 = *(_QWORD *)&v36[0];
  do
  {
    LODWORD(v25) = 1132396544;
    sub_1B20D4310(a1, a2, a3, (float)v28 / 255.0, v25, v26, v27);
    *(_QWORD *)&v36[0] = v29;
    v32 = *(_QWORD *)(v29 + 16);
    v31 = *(_QWORD *)(v29 + 24);
    if (v32 >= v31 >> 1)
    {
      v34 = v30;
      sub_1B202AFCC(v31 > 1, v32 + 1, 1);
      v30 = v34;
      v29 = *(_QWORD *)&v36[0];
    }
    ++v28;
    *(_QWORD *)(v29 + 16) = v32 + 1;
    *(_OWORD *)(v29 + 32 + 16 * v32) = v30;
  }
  while (v28 != 256);
  if (v13)
  {
    swift_unknownObjectRetain();
    sub_1B1E4F1C0((uint64_t)v36);
    objc_msgSend(v13, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, v36, 0, v29 + 32, 4096);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectRetain();
  sub_1B20E1724((uint64_t)v13, v35);
  return v13;
}

uint64_t sub_1B1E4DA5C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  HIDWORD(v14) = a4;
  sub_1B19F8E54(0, &qword_1EEF5F578, (uint64_t (*)(void))sub_1B1E4F6D8, (uint64_t)&type metadata for ColorRampComponent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E4F6D8();
  sub_1B222A180();
  v15 = a2;
  v16 = a3;
  v17 = BYTE4(v14);
  sub_1B1D3DBB0();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1E4DB84()
{
  sub_1B1E4F6D8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E4DBAC()
{
  sub_1B1E4F6D8();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1E4DBD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = sub_1B1E4F1FC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1E4DC00(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1E4DA5C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

BOOL sub_1B1E4DC1C(uint64_t a1, uint64_t a2)
{
  return (sub_1B20D7E64(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16)) & 1) == 0;
}

double sub_1B1E4DC50@<D0>(uint64_t a1@<X8>)
{
  _OWORD *v2;
  double result;

  sub_1B1AE11F4();
  v2 = (_OWORD *)swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  v2[1] = xmmword_1B226CD10;
  v2[2] = _Q1;
  result = 0.0;
  v2[3] = xmmword_1B2244E20;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = &unk_1E63C3890;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1B1E4DCB0(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

double sub_1B1E4DCBC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1B1E4DCC8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;

  v2 = v1;
  v4 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for ColorRampsState, (uint64_t)&off_1E63836B0, v4);
  swift_release();
  v5 = v2[2];
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v7 = sub_1B204D6E4();
  v8 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  sub_1B1E8F784(a1, v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v7, v5);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  swift_release_n();
  v9 = v2[7];
  swift_getObjectType();
  v10 = sub_1B204D6E4();
  v11 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  sub_1B1E8F784(a1, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v10, v9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  swift_release_n();
  v12 = v2[12];
  swift_getObjectType();
  v13 = sub_1B204D6E4();
  v14 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  sub_1B1E8F784(a1, v12);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v13, v12);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  swift_release_n();
  v15 = v2[17];
  swift_getObjectType();
  v16 = sub_1B204D6E4();
  v17 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  sub_1B1E8F784(a1, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v16, v15);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1E4DF70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int16 *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  id v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  __n128 v72;
  uint64_t i;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  char *v82;
  uint64_t j;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  __n128 v88;
  uint64_t k;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  id v97;
  char *v98;
  uint64_t m;
  void *v100;
  void *v101;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128[8];
  uint64_t v129[12];
  uint64_t v130[12];
  _QWORD v131[12];
  unsigned __int16 *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int16 *v188;
  int v189;
  char v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int16 *v201;
  int v202;
  char v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  _BYTE v207[40];
  _OWORD v208[2];
  uint64_t v209;
  uint64_t v210;
  int v211;
  char v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  _OWORD v221[2];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  __int16 v231;
  __int16 v232;
  __int16 v233;
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  char v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  _OWORD v251[2];
  uint64_t v252;
  uint64_t v253;

  v4 = v3;
  v7 = *(_OWORD *)(a3 + 56);
  v8 = *(_OWORD *)(a3 + 72);
  v252 = *(_QWORD *)(a3 + 88);
  v251[0] = v7;
  v251[1] = v8;
  sub_1B1E8FCE4(a2, (uint64_t)v251, 0x200000000, v128);
  sub_1B19F66A0((uint64_t)v128, (uint64_t)&v177, (unint64_t *)&qword_1ED4B7DE0);
  v118 = a1;
  if (v177)
  {
    v9 = v186;
    v240 = v177;
    v241 = v178;
    v242 = v179;
    v243 = v180;
    v244 = v181;
    v245 = v182;
    v246 = v183;
    v247 = v184;
    v248 = v185;
    v249 = v186;
    v250 = v187;
    v10 = (void *)a1[3];
    v119 = a1 + 3;
    v253 = a2;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v10)
      v11 = (unsigned __int16 *)objc_msgSend(v10, sel_arrayLength);
    else
      v11 = 0;
    v188 = v11;
    sub_1B21876EC((uint64_t)&v240, (uint64_t)&v188);
    v114 = v4;
    v27 = (uint64_t)v11 + v9;
    v28 = sub_1B1BA2B0C(v27 << 11, 0);
    v30 = v29;
    v32 = v31;
    swift_unknownObjectRelease();
    *a1 = (uint64_t)v28;
    a1[1] = v30;
    a1[2] = v32;
    RGTextureDescriptorMakeDefault((uint64_t)&v223);
    v33 = BYTE10(v223);
    v34 = v226;
    v116 = v227;
    v35 = BYTE8(v227);
    v36 = BYTE9(v227);
    v37 = BYTE10(v227);
    v112 = BYTE11(v227);
    if (v27 <= 1)
      LOWORD(v27) = 1;
    v230 = 65792;
    v231 = 1;
    v232 = v27;
    v233 = 257;
    v234 = BYTE10(v223);
    v235 = xmmword_1B2298AE0;
    v236 = xmmword_1B2298AF0;
    v237 = v226;
    v38 = *((_QWORD *)&v226 + 1);
    v238 = v227;
    v239 = DWORD2(v227);
    v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
    LODWORD(v223) = 65792;
    WORD2(v223) = 1;
    WORD3(v223) = v27;
    WORD4(v223) = 257;
    BYTE10(v223) = v33;
    v224 = xmmword_1B2298AE0;
    v225 = xmmword_1B2298AF0;
    *(_QWORD *)&v226 = v34;
    *((_QWORD *)&v226 + 1) = v38;
    a1 = v118;
    *(_QWORD *)&v227 = v116;
    BYTE8(v227) = v35;
    BYTE9(v227) = v36;
    BYTE10(v227) = v37;
    BYTE11(v227) = v112;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v223, v39);
    v40 = sub_1B1F328F4(v39, 0x6D6152726F6C6F43, 0xEA00000000007370);
    swift_unknownObjectRelease();

    v118[3] = (uint64_t)v40;
    v41 = *(_OWORD *)(a3 + 32);
    v221[0] = *(_OWORD *)(a3 + 16);
    v221[1] = v41;
    v222 = *(_QWORD *)(a3 + 48);
    v42 = v253;
    sub_1B1E8FCE4(v253, (uint64_t)v221, 0x200000000, v129);
    sub_1B19F66A0((uint64_t)v129, (uint64_t)&v167, (unint64_t *)&qword_1ED4B7DE0);
    if (v167)
    {
      *(_QWORD *)&v223 = v167;
      DWORD2(v223) = v168;
      BYTE12(v223) = v169;
      *(_QWORD *)&v224 = v170;
      BYTE8(v224) = v171;
      v225 = v172;
      v226 = v173;
      v227 = v174;
      v228 = v175;
      v229 = v176;
      sub_1B2187708((uint64_t)&v223, (uint64_t)v118, (uint64_t)&v230);
      v4 = v114;
      sub_1B19ED748(v129);
      if (v40)
        goto LABEL_12;
    }
    else
    {
      v4 = v114;
      if (v40)
      {
LABEL_12:
        swift_unknownObjectRetain();
        sub_1B1E8FCE4(v42, (uint64_t)v221, 0x200000000, v130);
        sub_1B19F66A0((uint64_t)v130, (uint64_t)&v156, (unint64_t *)&qword_1ED4B7DE0);
        if (v156)
        {
          v210 = v156;
          v211 = v157;
          v212 = v158;
          v213 = v159;
          v214 = v160;
          v215 = v161;
          v216 = v162;
          v217 = v163;
          v218 = v164;
          v219 = v165;
          v220 = v166;
          swift_unknownObjectRetain();
          sub_1B2199DEC((uint64_t)&v210, (uint64_t)v40);
          swift_unknownObjectRelease();
          sub_1B19ED748(v128);
          swift_unknownObjectRelease();
          sub_1B19ED748(v130);
        }
        else
        {
          sub_1B19ED748(v128);
          swift_unknownObjectRelease();
        }
        v12 = *v119;
        if (*v119)
        {
          v43 = *(_OWORD *)(a3 + 112);
          v208[0] = *(_OWORD *)(a3 + 96);
          v208[1] = v43;
          v209 = *(_QWORD *)(a3 + 128);
          swift_unknownObjectRetain();
          sub_1B1E8FCE4(v42, (uint64_t)v208, 0x200000000, v131);
          sub_1B19F66A0((uint64_t)v131, (uint64_t)&v132, (unint64_t *)&qword_1ED4B7DE0);
          v14 = v132;
          if (v132)
          {
            v15 = &v143;
            v16 = &v142;
            v17 = &v141;
            v18 = &v140;
            v19 = &v139;
            v20 = &v137;
            v21 = &v138;
            v22 = &v136;
            v23 = &v135;
            v24 = &v134;
            v25 = (char *)&v133 + 4;
            v26 = &v133;
LABEL_20:
            v44 = *(_DWORD *)v26;
            v45 = *v25;
            v46 = *v24;
            v47 = *(_BYTE *)v23;
            v48 = *v22;
            v49 = *v20;
            v50 = *v21;
            v51 = *v19;
            v52 = *v18;
            v53 = (_QWORD *)*v17;
            v54 = *v16;
            v55 = *v15;
            v188 = v14;
            v189 = v44;
            v190 = v45;
            v191 = v46;
            v192 = v47;
            v193 = v48;
            v109 = v49;
            v194 = v49;
            v195 = v50;
            v196 = v51;
            v197 = v52;
            v113 = v53;
            v198 = v53;
            v199 = v54;
            v200 = v55;
            if (v54 >= 1 && v51)
            {
              v103 = v12;
              v56 = v53[4];
              v57 = *(unsigned __int8 *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
              v201 = v14;
              v202 = v44;
              v203 = v45;
              v204 = v46;
              v205 = v47;
              v206 = v48;
              v104 = v53 + 8;
              v105 = (uint64_t)(v53 + 6);
              swift_retain();
              swift_retain();
              swift_retain();
              v58 = 0;
              v107 = v56;
              v108 = v51;
              v106 = v57;
              while (1)
              {
                v111 = v58;
                v59 = (unsigned int *)(v109 + 48 * v58);
                v60 = *v59;
                v115 = v4;
                v117 = v59[1];
                v61 = (uint64_t *)*((_QWORD *)v59 + 2);
                v62 = *((_QWORD *)v59 + 3);
                v63 = *((_QWORD *)v59 + 4);
                v64 = *((_QWORD *)v59 + 5);
                if (v57)
                {
                  v65 = *(os_unfair_lock_s **)(v64 + 376);
                  swift_retain();
                  os_unfair_lock_lock(v65);
                  os_unfair_lock_lock(*(os_unfair_lock_t *)(v64 + 344));
                }
                else
                {
                  swift_retain();
                }
                ecs_stack_allocator_push_snapshot(v56);
                sub_1B19F66A0(v105, (uint64_t)v207, &qword_1ED4B7FB0);
                v66 = v113[4];
                v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 40) + 16) + 32) + 16) + 1;
                swift_retain();
                v113[6] = ecs_stack_allocator_allocate(v66, 48 * v67, 8);
                v113[7] = v67;
                v104[1] = 0;
                v104[2] = 0;
                *v104 = 0;
                swift_release();
                v253 = sub_1B1A12038((uint64_t)&type metadata for ColorRampComponent, (uint64_t)&off_1E6390FE0, v61, v62, v63, (uint64_t)v113);
                v110 = v64;
                v120 = sub_1B1A12038((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, v61, v62, v63, (uint64_t)v113);
                if (v61)
                {
                  if (v63)
                  {
                    v68 = 0;
                    a1 = v118;
                    do
                    {
                      v69 = v253 + 24 * v68;
                      v126 = MEMORY[0x1E0DEE9D8];
                      sub_1B202AFCC(0, 256, 0);
                      for (i = 0; i != 256; ++i)
                      {
                        LODWORD(v70) = 1132396544;
                        sub_1B20D4310(*(_QWORD *)v69, *(_QWORD *)(v69 + 8), *(_BYTE *)(v69 + 16), (float)i / 255.0, v70, v71, v72);
                        v76 = *(_QWORD *)(v126 + 16);
                        v75 = *(_QWORD *)(v126 + 24);
                        if (v76 >= v75 >> 1)
                        {
                          v122 = v74;
                          sub_1B202AFCC(v75 > 1, v76 + 1, 1);
                          v74 = v122;
                        }
                        *(_QWORD *)(v126 + 16) = v76 + 1;
                        *(_OWORD *)(v126 + 16 * v76 + 32) = v74;
                      }
                      v77 = (void *)*a1;
                      if (*a1)
                      {
                        v78 = a1[1];
                        v79 = *(int *)(v120 + 4 * v68);
                        swift_unknownObjectRetain();
                        if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
                        {
                          swift_release();
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                        }
                        else
                        {
                          v80 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                          v81 = v77;
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                          v82 = &v80[2048 * v79 + 4 + v78];
                          for (j = 2; j != 258; ++j)
                          {
                            v123 = *(_OWORD *)(v126 + 16 * j);
                            *((_WORD *)v82 - 2) = sub_1B189E3F8(*(float *)&v123);
                            *((_WORD *)v82 - 1) = sub_1B189E3F8(*((float *)&v123 + 1));
                            *(_WORD *)v82 = sub_1B189E3F8(*((float *)&v123 + 2));
                            *((_WORD *)v82 + 1) = sub_1B189E3F8(*((float *)&v123 + 3));
                            v82 += 8;
                          }
                          swift_release();
                        }
                        a1 = v118;
                      }
                      else
                      {
                        swift_release();
                      }
                      ++v68;
                    }
                    while (v68 != v63);
                    goto LABEL_45;
                  }
                }
                else
                {
                  v84 = v117;
                  if ((_DWORD)v60 != (_DWORD)v117)
                  {
                    a1 = v118;
                    do
                    {
                      v85 = v253 + 24 * v60;
                      v127 = MEMORY[0x1E0DEE9D8];
                      sub_1B202AFCC(0, 256, 0);
                      for (k = 0; k != 256; ++k)
                      {
                        LODWORD(v86) = 1132396544;
                        sub_1B20D4310(*(_QWORD *)v85, *(_QWORD *)(v85 + 8), *(_BYTE *)(v85 + 16), (float)k / 255.0, v86, v87, v88);
                        v92 = *(_QWORD *)(v127 + 16);
                        v91 = *(_QWORD *)(v127 + 24);
                        if (v92 >= v91 >> 1)
                        {
                          v124 = v90;
                          sub_1B202AFCC(v91 > 1, v92 + 1, 1);
                          v90 = v124;
                        }
                        *(_QWORD *)(v127 + 16) = v92 + 1;
                        *(_OWORD *)(v127 + 16 * v92 + 32) = v90;
                      }
                      v93 = (void *)*v118;
                      if (*v118)
                      {
                        v94 = v118[1];
                        v95 = *(int *)(v120 + 4 * v60);
                        swift_unknownObjectRetain();
                        if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
                        {
                          swift_release();
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                        }
                        else
                        {
                          v96 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                          v97 = v93;
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                          v98 = &v96[2048 * v95 + 4 + v94];
                          for (m = 2; m != 258; ++m)
                          {
                            v125 = *(_OWORD *)(v127 + 16 * m);
                            *((_WORD *)v98 - 2) = sub_1B189E3F8(*(float *)&v125);
                            *((_WORD *)v98 - 1) = sub_1B189E3F8(*((float *)&v125 + 1));
                            *(_WORD *)v98 = sub_1B189E3F8(*((float *)&v125 + 2));
                            *((_WORD *)v98 + 1) = sub_1B189E3F8(*((float *)&v125 + 3));
                            v98 += 8;
                          }
                          swift_release();
                          v84 = v117;
                        }
                      }
                      else
                      {
                        swift_release();
                      }
                      ++v60;
                    }
                    while (v60 != v84);
                    goto LABEL_45;
                  }
                }
                a1 = v118;
LABEL_45:
                sub_1B1F05D48(v113, &v201, (uint64_t)v207);
                v4 = v115;
                sub_1B1F03804((char *)v110);
                v56 = v107;
                ecs_stack_allocator_pop_snapshot(v107);
                v57 = v106;
                if ((v106 & 1) != 0)
                {
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v110 + 344));
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v110 + 376));
                }
                swift_release();
                v58 = v111 + 1;
                if (v111 + 1 == v108)
                {
                  swift_release();
                  swift_release();
                  swift_release();
                  v12 = v103;
                  break;
                }
              }
            }
            v100 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
            v101 = (void *)sub_1B2228728();
            objc_msgSend(v100, sel_pushDebugGroup_, v101);

            swift_unknownObjectRetain();
            sub_1B1E4F35C(v100, (uint64_t)&v188, v12, a1);
            swift_unknownObjectRelease();
            objc_msgSend(v100, sel_popDebugGroup);
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            goto LABEL_63;
          }
          goto LABEL_63;
        }
        return sub_1B19ED748(v128);
      }
    }
    sub_1B19ED748(v128);
    return sub_1B19ED748(v128);
  }
  v12 = a1[3];
  if (v12)
  {
    v13 = *(_OWORD *)(a3 + 152);
    v223 = *(_OWORD *)(a3 + 136);
    v224 = v13;
    *(_QWORD *)&v225 = *(_QWORD *)(a3 + 168);
    swift_unknownObjectRetain();
    sub_1B1E8FCE4(a2, (uint64_t)&v223, 0x200000000, &v240);
    sub_1B19F66A0((uint64_t)&v240, (uint64_t)&v144, (unint64_t *)&qword_1ED4B7DE0);
    v14 = v144;
    if (v144)
    {
      v15 = &v155;
      v16 = &v154;
      v17 = &v153;
      v18 = &v152;
      v19 = &v151;
      v20 = &v149;
      v21 = &v150;
      v22 = &v148;
      v23 = &v147;
      v24 = &v146;
      v25 = (char *)&v145 + 4;
      v26 = &v145;
      goto LABEL_20;
    }
LABEL_63:
    swift_unknownObjectRelease();
  }
  return sub_1B19ED748(v128);
}

uint64_t type metadata accessor for ColorRampSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1E4ECA0()
{
  uint64_t v0;
  __int128 v1;
  uint64_t inited;
  __int128 v3;
  __int128 v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[40];
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v40 = qword_1ED4D09F8;
  v41 = 0;
  v42 = 2;
  v43 = 0;
  v44 = 2;
  v45 = 0;
  swift_retain();
  sub_1B1E3B208(1, (uint64_t)v10);
  swift_release();
  v1 = v10[1];
  *(_OWORD *)(v0 + 16) = v10[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v11;
  v34 = qword_1ED4D09F8;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  v38 = 2;
  v39 = 0;
  swift_retain();
  sub_1B1E3B400(1, (uint64_t)v12);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ColorRampRuntime;
  *(_QWORD *)(inited + 40) = &off_1E6386CA8;
  sub_1B1B44110(v13, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v12);
  v3 = v13[1];
  *(_OWORD *)(v0 + 56) = v13[0];
  *(_OWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 88) = v14;
  v28 = qword_1ED4D09F8;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  v32 = 2;
  v33 = 0;
  swift_retain();
  sub_1B1B123AC(1, 1, (uint64_t)v15);
  swift_release();
  v4 = v15[1];
  *(_OWORD *)(v0 + 96) = v15[0];
  *(_OWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 128) = v16;
  v22 = qword_1ED4D09F8;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  swift_retain();
  sub_1B1B123AC(1, 1, (uint64_t)&v17);
  swift_release();
  v5 = v18;
  v6 = v19;
  v7 = v21;
  v8 = v20 | 4;
  *(_QWORD *)(v0 + 136) = v17;
  *(_DWORD *)(v0 + 144) = v5;
  *(_BYTE *)(v0 + 148) = v6;
  *(_QWORD *)(v0 + 152) = v8;
  *(_BYTE *)(v0 + 160) = 2;
  *(_QWORD *)(v0 + 168) = v7;
  return v0;
}

uint64_t sub_1B1E4EEE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for ColorRampsState, (uint64_t)&off_1E63836B0, v3, (void (*)(uint64_t))sub_1B1E4FA4C);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E4EF98(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for ColorRampsState, (uint64_t)&off_1E63836B0, v3, (void (*)(uint64_t))sub_1B1E4F1E0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E4F04C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1E4ECA0();
  return v0;
}

const char *sub_1B1E4F080()
{
  return "ColorRampSystem";
}

uint64_t type metadata accessor for ColorRampCache()
{
  return objc_opt_self();
}

uint64_t sub_1B1E4F0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ColorRamp(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ColorRamp(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ColorRampComponent()
{
  return &type metadata for ColorRampComponent;
}

ValueMetadata *type metadata accessor for ColorRampRuntime()
{
  return &type metadata for ColorRampRuntime;
}

double sub_1B1E4F1C0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 256;
  *(_OWORD *)(a1 + 24) = xmmword_1B2298B00;
  *(_QWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t *sub_1B1E4F1E0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1E4DF70(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1B1E4F1FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1ED4BAB80, (uint64_t (*)(void))sub_1B1E4F6D8, (uint64_t)&type metadata for ColorRampComponent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1E4F6D8();
  v10 = v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1D3DB38();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = (_QWORD *)v12[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

void sub_1B1E4F35C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _QWORD v54[6];

  sub_1B1E4F6C0((uint64_t)v54);
  if (*(uint64_t *)(a2 + 80) >= 1)
  {
    v38 = *(_QWORD *)(a2 + 56);
    if (v38)
    {
      v9 = v54[0];
      v8 = v54[1];
      v10 = v54[2];
      v11 = *(_QWORD **)(a2 + 72);
      v12 = v11[4];
      v45 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v13 = *(_OWORD *)(a2 + 16);
      v52[0] = *(_OWORD *)a2;
      v52[1] = v13;
      v14 = *(_QWORD *)(a2 + 40);
      v53 = *(_QWORD *)(a2 + 32);
      v37 = v14;
      v33 = a2;
      sub_1B1D6631C(a2);
      v15 = 0;
      v16 = 0;
      v36 = v12;
      v34 = a1;
      v35 = a3;
      while (1)
      {
        v43 = v16;
        v44 = v15;
        v17 = (unsigned int *)(v37 + 48 * v15);
        v18 = *((_QWORD *)v17 + 4);
        v19 = *((_QWORD *)v17 + 5);
        v39 = v17[1];
        v40 = *v17;
        v41 = *((_QWORD *)v17 + 3);
        v42 = (uint64_t *)*((_QWORD *)v17 + 2);
        if (v45)
        {
          v20 = *(os_unfair_lock_s **)(v19 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v12);
        sub_1B19F66A0((uint64_t)(v11 + 6), (uint64_t)v54, &qword_1ED4B7FB0);
        v21 = v11[4];
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v11[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
        v11[7] = v22;
        v11[9] = 0;
        v11[10] = 0;
        v11[8] = 0;
        swift_release();
        sub_1B1A12038((uint64_t)&type metadata for ColorRampComponent, (uint64_t)&off_1E6390FE0, v42, v41, v18, (uint64_t)v11);
        v23 = sub_1B1A12038((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, v42, v41, v18, (uint64_t)v11);
        v24 = (int *)v23;
        if (v42)
        {
          if (v18)
          {
            v12 = v36;
            do
            {
              v25 = *a4;
              if (*a4)
              {
                v26 = *v24;
                v27 = a4[1] + (v26 << 11);
                v49 = v9;
                v50 = v8;
                v51 = v10;
                v46 = 0;
                v47 = 0;
                v48 = 0;
                objc_msgSend(v34, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v25, v27, 2048, 2048, &v49, v35, v26, 0, &v46);
              }
              ++v24;
              --v18;
            }
            while (v18);
            goto LABEL_16;
          }
        }
        else if ((_DWORD)v40 != (_DWORD)v39)
        {
          v28 = v39 - v40;
          v29 = (int *)(v23 + 4 * v40);
          v12 = v36;
          do
          {
            v30 = *a4;
            if (*a4)
            {
              v31 = *v29;
              v32 = a4[1] + (v31 << 11);
              v49 = v9;
              v50 = v8;
              v51 = v10;
              v46 = 0;
              v47 = 0;
              v48 = 0;
              objc_msgSend(v34, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v30, v32, 2048, 2048, &v49, v35, v31, 0, &v46, v33);
            }
            ++v29;
            --v28;
          }
          while (v28);
          goto LABEL_16;
        }
        v12 = v36;
LABEL_16:
        v16 = v43;
        sub_1B1F05D48(v11, (unsigned __int16 **)v52, (uint64_t)v54);
        sub_1B1F03804((char *)v19);
        ecs_stack_allocator_pop_snapshot(v12);
        if ((v45 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
        }
        swift_release();
        v15 = v44 + 1;
        if (v44 + 1 == v38)
        {
          sub_1B1D66364(v33);
          return;
        }
      }
    }
  }
}

double sub_1B1E4F6C0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 256;
  *(_OWORD *)a1 = xmmword_1B2298B00;
  *(_QWORD *)(a1 + 16) = 1;
  return result;
}

unint64_t sub_1B1E4F6D8()
{
  unint64_t result;

  result = qword_1ED4B91A8;
  if (!qword_1ED4B91A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298D98, &type metadata for ColorRampComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B91A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ColorRampComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1E4F75C + 4 * byte_1B2298B20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1E4F77C + 4 * byte_1B2298B25[v4]))();
}

_BYTE *sub_1B1E4F75C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1E4F77C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E4F784(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E4F78C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E4F794(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E4F79C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ColorRampComponent.CodingKeys()
{
  return &type metadata for ColorRampComponent.CodingKeys;
}

uint64_t initializeWithCopy for ColorRampsState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ColorRampsState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for ColorRampsState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorRampsState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorRampsState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorRampsState()
{
  return &type metadata for ColorRampsState;
}

unint64_t sub_1B1E4F978()
{
  unint64_t result;

  result = qword_1EEF5F590;
  if (!qword_1EEF5F590)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298D70, &type metadata for ColorRampComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F590);
  }
  return result;
}

unint64_t sub_1B1E4F9C0()
{
  unint64_t result;

  result = qword_1ED4B91C8;
  if (!qword_1ED4B91C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298CE0, &type metadata for ColorRampComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B91C8);
  }
  return result;
}

unint64_t sub_1B1E4FA08()
{
  unint64_t result;

  result = qword_1ED4B91B0[0];
  if (!qword_1ED4B91B0[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2298D08, &type metadata for ColorRampComponent.CodingKeys);
    atomic_store(result, qword_1ED4B91B0);
  }
  return result;
}

uint64_t *sub_1B1E4FA4C(uint64_t *a1)
{
  return sub_1B1E4F1E0(a1);
}

uint64_t sub_1B1E4FA60@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[10];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = 0xD000000000000012;
  v6[0] = 0xD000000000000012;
  v6[1] = 0x80000001B233ECB0;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000)
    v3 = 0xD00000000000001BLL;
  v6[4] = MEMORY[0x1E0DEE9D8];
  v6[5] = v3;
  v4 = 0x80000001B233ECD0;
  if ((a1 & 0x4800) == 0x4000)
    v4 = 0x80000001B233ECF0;
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E0DEE9D8];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  nullsub_16(v6);
  return sub_1B19F66A0((uint64_t)v6, a2, &qword_1ED4B8CF8);
}

void *sub_1B1E4FB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BYTE v16[80];
  _OWORD v17[4];
  char v18;
  _OWORD v19[4];
  float v20;
  uint64_t v21;

  v5 = *(_QWORD **)(a3 + 8);
  swift_retain();
  sub_1B1D15764(v5, (uint64_t)v16);
  swift_release();
  sub_1B19F66A0((uint64_t)v16, (uint64_t)v17, qword_1ED4B8BB0);
  if ((v18 & 1) != 0)
  {
    v6 = xmmword_1B2244E20;
    v7 = xmmword_1B2244D90;
    v8 = xmmword_1B2244DD0;
    v9 = xmmword_1B2244DB0;
  }
  else
  {
    v9 = v17[0];
    v8 = v17[1];
    v7 = v17[2];
    v6 = v17[3];
  }
  v10 = *(_DWORD *)(v3 + 16);
  if (v10 - 11 > 0xF4)
  {
    v13 = *(float *)(v3 + 8);
    if (v13 > -1.0)
      v14 = *(float *)(v3 + 8);
    else
      v14 = -1.0;
    if (v13 >= 0.0)
      v11 = v14;
    else
      v11 = -1.0;
  }
  else
  {
    v11 = 1.0 / (float)v10;
    v12 = *(float *)(v3 + 8);
    if (v12 >= 0.0 && v12 > v11)
      v11 = *(float *)(v3 + 8);
  }
  v19[0] = v9;
  v19[1] = v8;
  v19[2] = v7;
  v19[3] = v6;
  v20 = v11;
  v21 = *(_QWORD *)(v3 + 24);
  return sub_1B1D24F6C(v19, a1);
}

uint64_t sub_1B1E4FC58(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t sub_1B1E4FC60(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t sub_1B1E4FC68(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result;
  return result;
}

double (*sub_1B1E4FC70())(_QWORD)
{
  return nullsub_16;
}

void sub_1B1E4FC80(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

uint64_t sub_1B1E4FC88()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

_QWORD *sub_1B1E4FC90()
{
  uint64_t v0;
  float v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(float *)(v0 + 28);
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v2 = (_QWORD *)sub_1B20C3C0C(4);
  v3 = v2;
  v4 = 2;
  if (v1 > 0.0)
    v4 = 3;
  v2[2] = v4;
  v2[11] = sub_1B1E4FA60;
  v2[12] = 0;
  swift_release();
  return v3;
}

uint64_t sub_1B1E4FD04(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(float *)(v2 + 28);
  v4 = 4;
  if (v3 <= 0.0)
    v5 = 1;
  else
    v5 = 4;
  if (v3 <= 0.0)
    v4 = 2;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(a2 + 32) = v4;
  return result;
}

void *sub_1B1E4FD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E4FB28(a1, a2, a3);
}

uint64_t sub_1B1E4FD60(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[3];
  _OWORD v7[2];

  v2 = a1[1];
  v6[2] = *a1;
  v7[0] = v2;
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a1 + 28);
  v3 = a2[1];
  v5 = *a2;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)a2 + 28);
  if ((sub_1B1FE1A60((uint64_t)&v5) & 1) != 0)
    return 1;
  else
    return (*((float *)v7 + 3) > 0.0) ^ (*((float *)v6 + 3) > 0.0);
}

double sub_1B1E4FDD4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = -1082130432;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 256;
  *(_WORD *)(a1 + 20) = 256;
  *(_QWORD *)(a1 + 24) = 0x4120000000000000;
  *(_WORD *)(a1 + 32) = 256;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 36) = 0xFFFFFFFFLL;
  return result;
}

double sub_1B1E4FE14@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[28];

  sub_1B1E4FF38(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = *(_OWORD *)v7;
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)&v7[12];
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)&v7[12];
  }
  return result;
}

uint64_t sub_1B1E4FE58(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t result;
  _BYTE v12[16];
  __int128 v13;
  _OWORD v14[2];

  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  v10 = v1[1];
  v13 = *v1;
  v14[0] = v10;
  *(_OWORD *)((char *)v14 + 12) = *(__int128 *)((char *)v1 + 28);
  result = sub_1B1B64994(a1, (uint64_t)&v12[-v8]);
  if (!v2)
  {
    v12[15] = 18;
    sub_1B2229934();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B1E4FF38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  char v33;

  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v24 - v9;
  HIDWORD(v24) = 1;
  v25 = 1;
  v26 = -1082130432;
  v27 = 0;
  v28 = 256;
  v29 = 256;
  v30 = 0x4120000000000000;
  v31 = 256;
  v32 = 0xFFFFFFFFLL;
  sub_1B1B65D3C(a1);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v33 = 18;
  v12 = sub_1B222979C();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v12;
  v14 = v30;
  if ((v12 & 0x100000000) != 0)
    v13 = HIDWORD(v30);
  v15 = v25;
  v16 = v26;
  v17 = v27;
  v18 = v28;
  v19 = v29;
  v20 = HIBYTE(v29);
  v21 = v31;
  v22 = HIBYTE(v31);
  v23 = v32;
  *(_DWORD *)a2 = HIDWORD(v24);
  *(_BYTE *)(a2 + 4) = v15;
  *(_DWORD *)(a2 + 8) = v16;
  *(_BYTE *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = v18;
  *(_BYTE *)(a2 + 20) = v19;
  *(_BYTE *)(a2 + 21) = v20;
  *(_DWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 28) = v13;
  *(_BYTE *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 33) = v22;
  *(_QWORD *)(a2 + 36) = v23;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleLineRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 21);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleLineRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 21) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleLineRenderer()
{
  return &type metadata for ParticleLineRenderer;
}

uint64_t sub_1B1E5019C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v11;
  _UNKNOWN **v12;

  swift_unownedRetainStrong();
  v11 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput);
  if (v11)
    v12 = &off_1E63AD250;
  else
    v12 = 0;
  swift_retain();
  sub_1B1BA2D94(a3, (uint64_t)&off_1E63AD250, v11, (uint64_t)v12);
  swift_release();
  swift_release();
  objc_msgSend(a5, sel_setPresentsWithTransaction_, 0);
  return a6(a1);
}

void sub_1B1E50264(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1B5E22F20]();
  sub_1B1E73530(a1);
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1B1E502A8()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;

  Strong = swift_weakLoadStrong();
  swift_weakAssign();
  v1 = swift_weakLoadStrong();
  v2 = v1;
  if (Strong)
  {
    if (v1)
    {
      swift_release();
      if (Strong == v2)
        goto LABEL_9;
    }
  }
  else
  {
    if (!v1)
      return swift_release();
    swift_release();
  }
  sub_1B1E50590();
  if (!swift_weakLoadStrong())
  {
LABEL_9:
    swift_release();
    return swift_release();
  }
  sub_1B1E7217C();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B1E50364()
{
  char *v0;
  void *v1;
  uint64_t v2;
  id v3;
  CGColor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer];
  type metadata accessor for CAMetalLayerRenderOutput();
  swift_allocObject();
  v2 = sub_1B1BA0AE0((uint64_t)v1);
  *(_QWORD *)(v2 + 32) = 2;
  v3 = objc_msgSend(v0, sel_backgroundColor);
  if (!v3)
    v3 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v4 = (CGColor *)objc_msgSend(v3, sel_CGColor);
  sub_1B1BF3CE4(v4);

  *(double *)(v2 + 40) = nullsub_16(v5);
  *(_QWORD *)(v2 + 48) = v6;
  *(_QWORD *)(v2 + 56) = v7;
  *(_QWORD *)(v2 + 64) = v8;
  v9 = v0[OBJC_IVAR____TtC3VFX11VFXCoreView_preferredFramesPerSecond + 8];
  *(_QWORD *)(v2 + 80) = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_preferredFramesPerSecond];
  *(_BYTE *)(v2 + 88) = v9;
  *(_OWORD *)(v2 + 160) = *(_OWORD *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize];
  *(_BYTE *)(v2 + 144) = (v0[OBJC_IVAR____TtC3VFX11VFXCoreView_paused] & 1) == 0;
  v10 = *(_DWORD *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_effectID];
  v11 = v10 == dword_1EEFD58F0;
  if (v10 == dword_1EEFD58F0)
    v10 = 0;
  *(_DWORD *)(v2 + 72) = v10;
  *(_BYTE *)(v2 + 76) = 2 * v11;
  *(_BYTE *)(v2 + 176) = v0[OBJC_IVAR____TtC3VFX11VFXCoreView_resizingMode];
  *(_BYTE *)(v2 + 89) = v0[OBJC_IVAR____TtC3VFX11VFXCoreView_stereoMode];
  v12 = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_postRenderCallback];
  v13 = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_postRenderCallback + 8];
  v14 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v12;
  *(_QWORD *)(v2 + 120) = v13;
  sub_1B19F8C48(v12);
  sub_1B19E5A18(v14);
  sub_1B222A0CC();
  sub_1B222A078();
  *(_QWORD *)(v2 + 136) = sub_1B222A0B4();
  return v2;
}

uint64_t sub_1B1E50590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = v0;
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    v4 = OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput;
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput))
    {
      v5 = *(os_unfair_lock_s **)(result + 176);
      swift_retain();
      os_unfair_lock_lock(v5);
      MEMORY[0x1E0C80A78](v6, v7);
      v8 = sub_1B1E51E14((uint64_t (*)(__int128 *))sub_1B1E52550);
      sub_1B1C941EC(v8, *(_QWORD *)(*(_QWORD *)(v3 + 216) + 16));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 176));
      *(_QWORD *)(v1 + v4) = 0;
      swift_release();
      swift_release();
    }
    v9 = sub_1B1E50364();
    *(_QWORD *)(v1 + v4) = v9;
    swift_retain();
    swift_release();
    v10 = *(os_unfair_lock_s **)(v3 + 176);
    swift_retain();
    os_unfair_lock_lock(v10);
    v11 = *(_QWORD **)(v3 + 216);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 216) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = sub_1B1C663BC(0, v11[2] + 1, 1, v11);
      *(_QWORD *)(v3 + 216) = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      v11 = sub_1B1C663BC(v13 > 1, v14 + 1, 1, v11);
      *(_QWORD *)(v3 + 216) = v11;
    }
    v11[2] = v14 + 1;
    v15 = &v11[2 * v14];
    v15[4] = v9;
    v15[5] = &off_1E63AD250;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 176));
    swift_release();
    return swift_release_n();
  }
  return result;
}

void sub_1B1E50854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v1 = v0;
  sub_1B1E50590();
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX11VFXCoreView_paused) == 1)
  {
    if (*(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX11VFXCoreView_effectID) == dword_1EEFD58F0)
    {
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v3 = Strong;
        os_unfair_lock_lock(*(os_unfair_lock_t *)(Strong + 176));
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 216) + 16);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 176));
        if (!v4)
        {
          if (swift_weakLoadStrong())
          {
            sub_1B1E72488();
            swift_release();
          }
        }
        swift_release();
      }
    }
    if (MEMORY[0x1B5E240CC](v1 + OBJC_IVAR____TtC3VFX11VFXCoreView_delegate))
    {
      sub_1B1D42FD8();
LABEL_18:
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1E7217C();
      swift_release();
    }
    v5 = MEMORY[0x1B5E240CC](v0 + OBJC_IVAR____TtC3VFX11VFXCoreView_delegate);
    if (v5)
    {
      v6 = MEMORY[0x1B5E240CC](v5 + 16);
      if (!v6)
        goto LABEL_18;
      v7 = (void *)v6;
      v8 = *(void **)(v6 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect);
      v12 = v8;

      if (!v8)
        goto LABEL_18;
      v9 = (void *)MEMORY[0x1B5E240CC](&v12[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);

      if (v9)
      {
        sub_1B1F43C48();
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = v12;
        *(_BYTE *)(v10 + 24) = 1;
        v11 = v12;
        sub_1B1DA6294((uint64_t)sub_1B179196C, v10);
        swift_unknownObjectRelease();

        swift_release();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();

      }
    }
  }
}

void sub_1B1E50A78()
{
  char *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  const __CFString *v5;
  id v6;
  CGColorSpaceRef v7;

  v1 = objc_msgSend(v0, sel_layer);
  v2 = OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer;
  v3 = *(void **)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer];
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer] = v1;

  objc_msgSend(*(id *)&v0[v2], sel_setPixelFormat_, 80);
  objc_msgSend(*(id *)&v0[v2], sel_setFramebufferOnly_, 1);
  v4 = *(id *)&v0[v2];
  objc_msgSend(v4, sel_setDevice_, MTLCreateSystemDefaultDevice());

  swift_unknownObjectRelease();
  objc_msgSend(*(id *)&v0[v2], sel_setOpaque_, 1);
  v5 = (const __CFString *)*MEMORY[0x1E0C9DA10];
  v6 = *(id *)&v0[v2];
  v7 = CGColorSpaceCreateWithName(v5);
  objc_msgSend(v6, sel_setColorspace_, v7);

}

id sub_1B1E50B7C(void *a1)
{
  _BYTE *v1;
  char *v3;
  _QWORD *v4;
  id v10;
  id v11;
  id v12;
  objc_super v14;

  v1[OBJC_IVAR____TtC3VFX11VFXCoreView_isDragging] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_lastTouch] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_sampleCount] = 1;
  v3 = &v1[OBJC_IVAR____TtC3VFX11VFXCoreView_preferredFramesPerSecond];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor] = 0x3FF0000000000000;
  v4 = &v1[OBJC_IVAR____TtC3VFX11VFXCoreView_postRenderCallback];
  *v4 = 0;
  v4[1] = 0;
  swift_weakInit();
  swift_weakInit();
  v1[OBJC_IVAR____TtC3VFX11VFXCoreView_stereoMode] = 0;
  v1[OBJC_IVAR____TtC3VFX11VFXCoreView_paused] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_effectID] = dword_1EEFD58F0;
  v1[OBJC_IVAR____TtC3VFX11VFXCoreView_sizeDirty] = 1;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)&v1[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize] = _Q0;
  v1[OBJC_IVAR____TtC3VFX11VFXCoreView_resizingMode] = 0;
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for VFXCoreView();
  v10 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);
  v11 = v10;
  if (!v10)
    goto LABEL_5;
  v12 = v10;
  sub_1B1E50A78();
  sub_1B1E50590();
  if (!swift_weakLoadStrong())
  {

LABEL_5:
    return v11;
  }
  sub_1B1E7217C();

  swift_release();
  return v11;
}

id sub_1B1E50D54(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  char *v11;
  _QWORD *v12;
  id v18;
  id v19;
  objc_super v21;

  v5[OBJC_IVAR____TtC3VFX11VFXCoreView_isDragging] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_lastTouch] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_sampleCount] = 1;
  v11 = &v5[OBJC_IVAR____TtC3VFX11VFXCoreView_preferredFramesPerSecond];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor] = 0x3FF0000000000000;
  v12 = &v5[OBJC_IVAR____TtC3VFX11VFXCoreView_postRenderCallback];
  *v12 = 0;
  v12[1] = 0;
  swift_weakInit();
  swift_weakInit();
  v5[OBJC_IVAR____TtC3VFX11VFXCoreView_stereoMode] = 0;
  v5[OBJC_IVAR____TtC3VFX11VFXCoreView_paused] = 0;
  *(_DWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_effectID] = dword_1EEFD58F0;
  v5[OBJC_IVAR____TtC3VFX11VFXCoreView_sizeDirty] = 1;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)&v5[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize] = _Q0;
  v5[OBJC_IVAR____TtC3VFX11VFXCoreView_resizingMode] = 0;
  v21.receiver = v5;
  v21.super_class = (Class)type metadata accessor for VFXCoreView();
  v18 = objc_msgSendSuper2(&v21, sel_initWithFrame_, a2, a3, a4, a5);
  if (a1)
  {
    swift_weakAssign();
    swift_weakAssign();
  }
  v19 = v18;
  sub_1B1E50A78();
  sub_1B1E50590();
  if (swift_weakLoadStrong())
  {
    sub_1B1E7217C();

    swift_release();
  }
  else
  {

  }
  swift_release();
  return v19;
}

void sub_1B1E50F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput))
  {
    v5 = *(os_unfair_lock_s **)(a1 + 176);
    swift_retain();
    os_unfair_lock_lock(v5);
    MEMORY[0x1E0C80A78](v6, v7);
    v8 = sub_1B1E51E14((uint64_t (*)(__int128 *))sub_1B1E51DF8);
    sub_1B1C941EC(v8, *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 176));
    *(_QWORD *)(v2 + v4) = 0;
    swift_release();
    swift_release();
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 176));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 176));
  if (!v9)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1E72488();
      swift_release();
    }
  }
}

id sub_1B1E51074()
{
  void *v0;
  uint64_t Strong;
  uint64_t v2;
  id v3;
  objc_super v5;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v2 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    swift_retain();
    swift_release();
    if (v2)
    {
      sub_1B1E50F60(v2);
      swift_release();
    }
  }
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v3, sel_removeObserver_, v0);

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for VFXCoreView();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

void sub_1B1E511D8()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  id v19;

  v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    v19 = v1;
    v2 = (void *)objc_opt_self();
    objc_msgSend(v2, sel_begin);
    objc_msgSend(v2, sel_setDisableActions_, 1);
    v3 = *(double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor];
    v4 = objc_msgSend(v19, sel_screen);
    objc_msgSend(v4, sel_nativeScale);
    v6 = v5;

    objc_msgSend(v0, sel_setContentScaleFactor_, v3 * v6);
    objc_msgSend(v0, sel_bounds);
    v8 = v7;
    v10 = v9;
    objc_msgSend(v0, sel_contentScaleFactor);
    v12 = v8 * v11;
    objc_msgSend(v0, sel_contentScaleFactor);
    v14 = v10 * v13;
    v15 = ceil(v12);
    v16 = ceil(v14);
    v17 = (double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize];
    if (*(double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize] != v15
      || *(double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize + 8] != v16)
    {
      *v17 = v15;
      v17[1] = v16;
      sub_1B1E50590();
    }
    objc_msgSend(v2, sel_commit);

  }
}

uint64_t sub_1B1E5133C(int a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD aBlock[6];

  v17 = a1;
  v1 = sub_1B222847C();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v16 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B22284AC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
  v11 = (void *)sub_1B2228F44();
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1B1E51DCC;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B17915D0;
  aBlock[3] = &unk_1E63D48D0;
  v13 = _Block_copy(aBlock);
  swift_release();
  sub_1B2228494();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1B19E52CC((unint64_t *)&qword_1ED4B7290, v2, MEMORY[0x1E0DEF510]);
  sub_1B179157C();
  sub_1B19E52CC((unint64_t *)&qword_1ED4B72B0, (uint64_t (*)(uint64_t))sub_1B179157C, MEMORY[0x1E0DEAF38]);
  sub_1B2229364();
  MEMORY[0x1B5E20AFC](0, v10, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((v17 & 1) != 0)
  {
    sub_1B1E511D8();
    sub_1B1E50590();
    result = swift_weakLoadStrong();
    if (!result)
      return result;
    sub_1B1E7217C();
    return swift_release();
  }
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    swift_retain();
    result = swift_release();
    if (v15)
    {
      sub_1B1E50F60(v15);
      return swift_release();
    }
  }
  return result;
}

void sub_1B1E515DC(uint64_t a1)
{
  void *v1;
  id v2;
  unsigned __int8 v3;
  id v4;

  v1 = (void *)MEMORY[0x1B5E240CC](a1 + 16);
  if (v1)
  {
    v4 = v1;
    v2 = objc_msgSend(v1, sel_window);

    if (v2)
      v3 = objc_msgSend(v4, sel_isHidden);
    else
      v3 = 1;
    *((_BYTE *)v4 + OBJC_IVAR____TtC3VFX11VFXCoreView_paused) = v3;
    sub_1B1E50854();

  }
}

id sub_1B1E516E0()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  id result;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;

  objc_msgSend(v0, sel_bounds);
  v2 = v1;
  v4 = v3;
  objc_msgSend(v0, sel_contentScaleFactor);
  v6 = v2 * v5;
  result = objc_msgSend(v0, sel_contentScaleFactor);
  v9 = v4 * v8;
  v10 = ceil(v6);
  v11 = ceil(v9);
  v12 = (double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize];
  if (*(double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize] != v10
    || *(double *)&v0[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize + 8] != v11)
  {
    *v12 = v10;
    v12[1] = v11;
    return (id)sub_1B1E50590();
  }
  return result;
}

void sub_1B1E51888()
{
  void *v0;
  void *v1;
  id v2;
  _BOOL8 v3;
  id v4;
  CGColor *color;

  v1 = v0;
  sub_1B1E50590();
  if (swift_weakLoadStrong())
  {
    sub_1B1E7217C();
    swift_release();
  }
  v2 = objc_msgSend(v0, sel_backgroundColor);
  if (!v2)
    v2 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  color = (CGColor *)objc_msgSend(v2, sel_CGColor);

  v3 = CGColorGetAlpha(color) == 1.0;
  v4 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v4, sel_setOpaque_, v3);

  objc_msgSend(v1, sel_setOpaque_, v3);
}

uint64_t sub_1B1E51A48(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v4;
  id v5;
  char *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    if (!a1)
      return swift_release();
    type metadata accessor for InputEvent();
    swift_allocObject();
    v5 = a1;
    v6 = v1;
    v7 = sub_1B1C7A228(v5, v6);
    v8 = v7;
    v9 = OBJC_IVAR____TtC3VFX11VFXCoreView_isDragging;
    if ((v6[OBJC_IVAR____TtC3VFX11VFXCoreView_isDragging] & 1) != 0)
    {
      v7[12] = vsub_f32(v7[7], *(float32x2_t *)&v6[OBJC_IVAR____TtC3VFX11VFXCoreView_lastTouch]);
      if (v7[2].i8[0] == 2)
      {
        v10 = 0;
LABEL_10:
        v6[v9] = v10;
      }
    }
    else if (!v7[2].i8[0])
    {
      v10 = 1;
      goto LABEL_10;
    }
    *(float32x2_t *)&v6[OBJC_IVAR____TtC3VFX11VFXCoreView_lastTouch] = v7[7];
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v8;
    *(_QWORD *)(v11 + 24) = v4;
    swift_retain();
    swift_retain();
    sub_1B1DA6294((uint64_t)sub_1B1E51D88, v11);
    swift_release();

    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E51B9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a2 + 176);
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for InputStream, (uint64_t)&off_1E6370C40, v2, (void (*)(uint64_t))sub_1B1E51D90);
  return swift_release();
}

void sub_1B1E51C18(void *a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  id v8;
  id v9;
  void *v10;
  objc_super v11;

  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5F630);
  sub_1B1C7AFA8();
  sub_1B2228CBC();
  v8 = a4;
  v9 = a1;
  sub_1B1E51A48(a4);
  v10 = (void *)sub_1B2228CB0();
  v11.receiver = v9;
  v11.super_class = (Class)type metadata accessor for VFXCoreView();
  objc_msgSendSuper2(&v11, *a5, v10, v8);

  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for VFXCoreView()
{
  return objc_opt_self();
}

uint64_t sub_1B1E51D5C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E51D88()
{
  uint64_t v0;

  return sub_1B1E51B9C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1B1E51D90(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1C7A6F0(a1, v1);
}

uint64_t sub_1B1E51DA8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1B1E51DCC()
{
  uint64_t v0;

  sub_1B1E515DC(v0);
}

uint64_t sub_1B1E51DD4()
{
  uint64_t v0;

  return swift_deallocObject();
}

BOOL sub_1B1E51DF8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1BA2D84(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B1E51E14(uint64_t (*a1)(__int128 *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;

  v3 = v2;
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v5)
    return 0;
  swift_bridgeObjectRetain();
  v7 = 0;
  for (i = 4; ; i += 2)
  {
    v18 = *(_OWORD *)&v4[i];
    v9 = v18;
    swift_unknownObjectRetain();
    v10 = a1(&v18);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return v9;
    }
    v11 = v10;
    swift_unknownObjectRelease();
    if ((v11 & 1) != 0)
      break;
    if (-v5 == --v7)
    {
      swift_bridgeObjectRelease();
      return v4[2];
    }
  }
  swift_bridgeObjectRelease();
  v9 = -v7;
  if (1 - v4[2] != v7)
  {
    v13 = 1 - v7;
    v14 = i * 8 + 16;
    do
    {
      v18 = *(_OWORD *)((char *)v4 + v14);
      swift_unknownObjectRetain();
      v15 = a1(&v18);
      swift_unknownObjectRelease();
      if ((v15 & 1) == 0)
      {
        if (v13 != v9)
        {
          v16 = *(_OWORD *)&v4[2 * v9 + 4];
          v17 = *(_OWORD *)((char *)v4 + v14);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_1B1FFEE70(v4);
          *(_OWORD *)&v4[2 * v9 + 4] = v17;
          swift_unknownObjectRelease();
          *(_OWORD *)((char *)v4 + v14) = v16;
          swift_unknownObjectRelease();
          *v19 = v4;
        }
        ++v9;
      }
      ++v13;
      v14 += 16;
    }
    while (v13 != v4[2]);
  }
  return v9;
}

uint64_t sub_1B1E51FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *i;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  result = 0;
  for (i = (_QWORD *)(a1 + 32); !a2 || *i != a2; i += 2)
  {
    if (v2 == ++result)
      return 0;
  }
  return result;
}

uint64_t sub_1B1E5203C(char a1, char *a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v39;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = Strong;
    v11 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (!v11)
    {
      v22 = swift_retain();
      a3(v22);
LABEL_30:
      swift_release();
      return swift_release();
    }
    v12 = *(void **)&a2[OBJC_IVAR____TtC3VFX11VFXCoreView_metalLayer];
    if (v12)
    {
      swift_retain();
      swift_retain();
      v13 = v12;
      objc_msgSend(v13, sel_setPresentsWithTransaction_, a1 & 1);
      v14 = sub_1B1E50364();
      *(_BYTE *)(v14 + 90) = 1;
      *(_QWORD *)(v14 + 152) = 1;
      swift_unownedRetainStrong();
      swift_retain();
      swift_unownedRetain();
      swift_release();
      v15 = (_QWORD *)swift_allocObject();
      v15[2] = v11;
      v15[3] = v14;
      v15[4] = a2;
      v15[5] = v13;
      v15[6] = sub_1B1BA80B8;
      v15[7] = v8;
      v16 = *(_QWORD *)(v14 + 96);
      *(_QWORD *)(v14 + 96) = sub_1B1E52538;
      *(_QWORD *)(v14 + 104) = v15;
      v39 = v13;
      v17 = a2;
      swift_retain();
      sub_1B19E5A18(v16);
      if ((a1 & 1) != 0)
      {
        v18 = objc_msgSend(*(id *)(v11 + 312), sel_commandBuffer, v39);
        if (v18)
        {
          v19 = v18;
          sub_1B2229454();
          v20 = (void *)sub_1B2228728();
          swift_bridgeObjectRelease();
          objc_msgSend(v19, sel_setLabel_, v20);

          sub_1B1BA11D0(v19);
          *(_QWORD *)(v14 + 128) = v19;
        }
        else
        {
          *(_QWORD *)(v14 + 128) = 0;
        }
        swift_unknownObjectRelease();
      }
      v24 = *(_QWORD *)&v17[OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput];
      v25 = *(os_unfair_lock_s **)(v11 + 176);
      swift_retain();
      swift_retain();
      os_unfair_lock_lock(v25);
      v26 = *(_QWORD **)(v11 + 216);
      v27 = v26[2];
      if (v27)
      {
        v28 = 0;
        while (!v24 || v26[v28 + 4] != v24)
        {
          v28 += 2;
          if (!--v27)
            goto LABEL_20;
        }
        swift_retain_n();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 216) = v26;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v26 = sub_1B1FFEE70(v26);
          *(_QWORD *)(v11 + 216) = v26;
        }
        v30 = &v26[v28];
        v30[4] = v14;
        v30[5] = &off_1E63AD250;
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
LABEL_20:
        swift_retain();
        v31 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 216) = v26;
        if ((v31 & 1) == 0)
        {
          v26 = sub_1B1C663BC(0, v26[2] + 1, 1, v26);
          *(_QWORD *)(v11 + 216) = v26;
        }
        v33 = v26[2];
        v32 = v26[3];
        if (v33 >= v32 >> 1)
        {
          v26 = sub_1B1C663BC(v32 > 1, v33 + 1, 1, v26);
          *(_QWORD *)(v11 + 216) = v26;
        }
        v26[2] = v33 + 1;
        v34 = &v26[2 * v33];
        v34[4] = v14;
        v34[5] = &off_1E63AD250;
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 176));
      swift_release();
      swift_release();
      if (*(_QWORD *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
      {
        swift_retain_n();
        swift_retain();
        sub_1B1E6407C((uint64_t)sub_1B1E52548, v10, 0);
        swift_release();
      }
      else
      {
        v35 = swift_retain_n();
        v36 = (void *)MEMORY[0x1B5E22F20](v35);
        sub_1B1E73530(v10);
        objc_autoreleasePoolPop(v36);
      }
      swift_release();
      swift_release();
      if ((a1 & 1) == 0)
      {
        swift_release();
        swift_release();
        swift_release();

        return swift_release();
      }
      v37 = swift_retain();
      sub_1B1DAE1B8(v37, v10);
      swift_release();
      swift_release();

      swift_release();
      goto LABEL_30;
    }
    swift_retain();
    v23 = swift_retain();
    a3(v23);
    swift_release();
    swift_release();
  }
  else
  {
    v21 = swift_retain();
    a3(v21);
  }
  return swift_release();
}

uint64_t sub_1B1E524D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E524F4()
{
  uint64_t v0;

  swift_release();
  swift_unownedRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E52538(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E5019C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48));
}

void sub_1B1E52548()
{
  uint64_t v0;

  sub_1B1E50264(v0);
}

BOOL sub_1B1E52550(_QWORD *a1)
{
  return sub_1B1E51DF8(a1);
}

uint64_t sub_1B1E52568@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = sub_1B2229124();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - v10;
  v12 = *(_QWORD *)(v3 + 8);
  swift_retain();
  sub_1B1FD6C70(v12, a1, (uint64_t)v11);
  swift_release();
  v13 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, a1) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 8))(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1E52670()
{
  return sub_1B1E53728((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FF0B30);
}

uint64_t sub_1B1E5267C()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 9);
  v3 = *((int *)v0 + 8);
  swift_retain();
  v4 = (_DWORD)v3 == -1 && v2 == 0;
  if (!v4 && (v3 & 0x80000000) == 0 && *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v3)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v6 = v2 == -1 || *(_DWORD *)(v5 + 12 * (int)v3 + 8) == v2;
    if (v6
      && (sub_1B1FE7908(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_WORD *)(v5 + 12 * (int)v3 + 4), 88) & 0x100000000) == 0)
    {
      return swift_release();
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

double sub_1B1E52854()
{
  uint64_t v0;
  double result;
  uint64_t v2;
  double v3;
  simd_float4 v4;
  _BYTE v5[80];

  if ((sub_1B1E5338C((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE88E4) & 1) != 0)
    return sub_1B1E53FDC();
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F212D4(v2, &v4);
  v3 = *(double *)v4.i64;
  swift_release();
  swift_release();
  sub_1B1AE09AC((uint64_t)&v4, (uint64_t)v5);
  if ((v5[64] & 1) == 0)
    return v3;
  *(_QWORD *)&result = 1065353216;
  return result;
}

void sub_1B1E5294C()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1E52994()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 9);
  v3 = *((int *)v0 + 8);
  swift_retain();
  v4 = (_DWORD)v3 == -1 && v2 == 0;
  if (!v4 && (v3 & 0x80000000) == 0 && *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v3)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v6 = v2 == -1 || *(_DWORD *)(v5 + 12 * (int)v3 + 8) == v2;
    if (v6
      && (sub_1B1EB9B80(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_WORD *)(v5 + 12 * (int)v3 + 4), 656, sub_1B1E56A34) & 1) != 0)
    {
      return swift_release();
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E52B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v5 = sub_1B1E56A28(v3, a3);
  sub_1B1B4F21C(a1);
  return v5;
}

uint64_t sub_1B1E52B8C(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1B1B78BDC();
  sub_1B1B4F21C(a1);
  return v2;
}

uint64_t sub_1B1E52BD0()
{
  return sub_1B1E53728((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FF0D4C);
}

double sub_1B1E52BDC()
{
  _QWORD *v0;
  _QWORD *v1;
  double result;
  uint64_t v3;
  double v4;
  double v5;
  __int128 v6;
  char v7;

  if ((sub_1B1E5338C((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE88E4) & 1) != 0)
  {
    v1 = (_QWORD *)v0[4];
    swift_retain();
    sub_1B1D15764(v1, (uint64_t)&v5);
    swift_release();
    sub_1B1A18378((uint64_t)&v5, (uint64_t)&v6, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
    if ((v7 & 1) == 0)
      return *(double *)&v6;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(*v0 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F213C0(v3, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  sub_1B1AE09AC((uint64_t)&v5, (uint64_t)&v6);
  if ((v7 & 1) != 0)
  {
LABEL_5:
    *(_QWORD *)&result = 1065353216;
    return result;
  }
  return v4;
}

uint64_t sub_1B1E52D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, char *);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[2];

  v13 = *(_QWORD *)(a8 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v24 = (char *)v28 - v23;
  if (!v18)
  {
    result = v22(0, 0, (char *)v28 - v23);
    v16 = v24;
    if (!v11)
      return result;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72);
  v26 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  if (v25 != v26)
    v19 = v26 * v19 / v25;
  result = v22(v18, v19, v16);
  if (v11)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  return result;
}

uint64_t sub_1B1E52E10()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_DWORD *)(v0 + 52);
  v3 = *(int *)(v0 + 48);
  swift_retain();
  v4 = (_DWORD)v3 == -1 && v2 == 0;
  if (!v4 && (v3 & 0x80000000) == 0 && *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v3)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v6 = v2 == -1 || *(_DWORD *)(v5 + 12 * (int)v3 + 8) == v2;
    if (v6
      && (sub_1B1FE7908(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_WORD *)(v5 + 12 * (int)v3 + 4), 88) & 0x100000000) == 0)
    {
      return swift_release();
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1E52FE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v2 = swift_allocObject();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleRibbonRenderer;
  *(_QWORD *)(inited + 40) = &off_1E63A8B90;
  v4 = sub_1B19F3C40(1, 1uLL);
  sub_1B1E569A0(inited, v4, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B4F21C(a1);
  v5 = v7[1];
  *(_OWORD *)(v2 + 16) = v7[0];
  *(_OWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 48) = v8;
  return v2;
}

uint64_t sub_1B1E530E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v14[40];
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v6 = qword_1ED4D09F8;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Particle;
  *(_QWORD *)(inited + 40) = &off_1E63C21B0;
  v18 = v6;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v14);
  swift_setDeallocating();
  swift_release();
  sub_1B1B7AA28();
  v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v8 + 64) = &off_1E6387218;
  *(_QWORD *)(v8 + 32) = a1;
  sub_1B1E68A14(v8, (uint64_t)v15);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  result = sub_1B19ED720((uint64_t)v14);
  if ((a2 & 0x100000000) != 0)
    v10 = 0;
  else
    v10 = a2;
  v11 = v15[2];
  v12 = v16;
  v13 = v17;
  *(_QWORD *)a3 = v15[0];
  *(_DWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 12) = (a2 & 0x100000000uLL) >> 31;
  *(_QWORD *)(a3 + 16) = v11;
  *(_BYTE *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v13;
  return result;
}

void (*sub_1B1E532D4(_OWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v7 = swift_allocObject();
  v8 = a1[5];
  *(_OWORD *)(v7 + 104) = a1[4];
  *(_OWORD *)(v7 + 120) = v8;
  v9 = a1[7];
  *(_OWORD *)(v7 + 136) = a1[6];
  *(_OWORD *)(v7 + 152) = v9;
  v10 = a1[1];
  *(_OWORD *)(v7 + 40) = *a1;
  *(_OWORD *)(v7 + 56) = v10;
  v11 = a1[3];
  *(_OWORD *)(v7 + 72) = a1[2];
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  *(_QWORD *)(v7 + 32) = v3;
  *(_OWORD *)(v7 + 88) = v11;
  swift_unknownObjectRetain();
  sub_1B1BEE528((uint64_t)a1);
  return sub_1B1E56CC8;
}

uint64_t sub_1B1E53374()
{
  return sub_1B1E5338C((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE88E4);
}

uint64_t sub_1B1E53380()
{
  return sub_1B1E5338C((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FF0CF8);
}

uint64_t sub_1B1E5338C(uint64_t (*a1)(_QWORD, _QWORD, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t result;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 9);
  v5 = *((int *)v1 + 8);
  swift_retain();
  v6 = (_DWORD)v5 == -1 && v4 == 0;
  if (v6
    || (v5 & 0x80000000) != 0
    || *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v5
    || ((v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 != -1)
      ? (v8 = *(_DWORD *)(v7 + 12 * (int)v5 + 8) == v4)
      : (v8 = 1),
        !v8
     || (v9 = a1(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32), *(unsigned __int16 *)(v7 + 12 * (int)v5 + 4), 88), v9 == 2)))
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v10 = v9;
    swift_release();
    return v10 & 1;
  }
  return result;
}

uint64_t sub_1B1E53550()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t result;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 9);
  v3 = *((int *)v0 + 8);
  swift_retain();
  v4 = (_DWORD)v3 == -1 && v2 == 0;
  if (v4
    || (v3 & 0x80000000) != 0
    || *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v3
    || ((v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v2 != -1)
      ? (v6 = *(_DWORD *)(v5 + 12 * (int)v3 + 8) == v2)
      : (v6 = 1),
        !v6
     || (v7 = sub_1B1FF1214(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_WORD *)(v5 + 12 * (int)v3 + 4), 656), (v8 & 0x100) != 0)))
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v9 = v7;
    swift_release();
    return v9;
  }
  return result;
}

uint64_t sub_1B1E5371C()
{
  return sub_1B1E53728((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FF0DC8);
}

uint64_t sub_1B1E53728(uint64_t (*a1)(_QWORD, _QWORD, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 9);
  v5 = *((int *)v1 + 8);
  swift_retain();
  v6 = (_DWORD)v5 == -1 && v4 == 0;
  if (v6
    || (v5 & 0x80000000) != 0
    || *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v5
    || ((v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 != -1)
      ? (v8 = *(_DWORD *)(v7 + 12 * (int)v5 + 8) == v4)
      : (v8 = 1),
        !v8
     || (v9 = a1(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32), *(unsigned __int16 *)(v7 + 12 * (int)v5 + 4), 656)) == 0))
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v10 = v9;
    swift_release();
    return v10;
  }
  return result;
}

uint64_t sub_1B1E538F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t result;

  v5 = *(_DWORD *)(a1 + 36);
  v6 = *(int *)(a1 + 32);
  if ((_DWORD)v6 == -1 && v5 == 0)
    goto LABEL_13;
  if ((v6 & 0x80000000) != 0)
    goto LABEL_13;
  v8 = v4;
  v9 = *(_QWORD *)(v4 + 64);
  if (*(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v6)
    goto LABEL_13;
  v10 = *(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (v5 != -1 && *(_DWORD *)(v10 + 12 * (int)v6 + 8) != v5)
    goto LABEL_13;
  v16 = *(_QWORD *)(v8 + 80);
  v17 = (int *)(v10 + 12 * (int)v6);
  v18 = *(_QWORD *)(*(_QWORD *)(v9 + 136) + 8 * *v17 + 32);
  v19 = *((_WORD *)v17 + 2);
  swift_retain();
  sub_1B1BEE528(a1);
  sub_1B1D6631C(v8);
  LOBYTE(a2) = sub_1B1FF1D7C(v18, v19, 656, a2, a4, v16, a1, (unsigned __int16 **)v8, a3);
  sub_1B1D66364(v8);
  sub_1B1B4F21C(a1);
  result = swift_release();
  if ((a2 & 1) == 0)
  {
LABEL_13:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1E53B18(uint64_t a1)
{
  sub_1B1B4F21C(a1);
  return swift_allocObject();
}

void sub_1B1E53B38(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1E53B6C()
{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v2;

  ObjectType = swift_getObjectType();
  v2 = swift_conformsToProtocol2();
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1B1E53BD8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, ObjectType, v2);
}

uint64_t sub_1B1E53BF4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t ObjectType;
  uint64_t v26;
  _QWORD v27[7];
  uint64_t v28;

  v12 = result;
  if (*(uint64_t *)(result + 464) > 0 || (a2 & 1) != 0)
  {
    v13 = *(_QWORD *)(result + 248);
    v28 = v13;
    if (a3)
    {
      swift_bridgeObjectRetain();
      v14 = swift_bridgeObjectRetain();
      sub_1B19F5058(v14);
      v13 = v28;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1B1E2738C(a5, a6, a7, v13, v27);
    swift_unknownObjectRelease();
    v15 = sub_1B1B3947C((uint64_t)v27, 0, a2 & 1);
    v17 = v16;
    sub_1B1B1FB80((uint64_t)v27);
    swift_bridgeObjectRelease();

    if (!*(_QWORD *)a4)
    {
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    if (v15)
    {
      v18 = *(_QWORD *)(v12 + 360);
      v19 = *(_QWORD *)(v12 + 368);
      if (v18)
      {
        v26 = *(_QWORD *)(v12 + 376);
        v20 = *(_QWORD *)(v12 + 304);
        v21 = *(_QWORD *)(v12 + 288);
        if (*(_BYTE *)(v12 + 272))
          v22 = *(_QWORD *)(v12 + 448);
        else
          v22 = 0;
        ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        v23 = swift_unknownObjectRetain();
        sub_1B211850C(v23, v21 + v22 * v20, v20, 0, 4, ObjectType);
        swift_unknownObjectRelease();
        sub_1B211850C(v18, v19, v26, 0, 5, ObjectType);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
      }
      v24 = *(unsigned __int8 *)(a4 + 61);
      if (v24 == 3)
      {
        swift_bridgeObjectRelease();
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B1F4106C((uint64_t)v15, v18, v19 + 96);
        swift_unknownObjectRelease();
LABEL_19:
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease_n();
      }
      if (v24 == 2)
      {
        swift_bridgeObjectRelease();
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B1F4106C((uint64_t)v15, v18, v19 + 108);
        swift_unknownObjectRelease();
        goto LABEL_19;
      }
      sub_1B2229430();
      sub_1B2228890();
      sub_1B22295EC();
    }
    else
    {
      swift_unknownObjectRetain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

double sub_1B1E53FA8@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *a1 = xmmword_1B2244DB0;
  a1[1] = xmmword_1B2244DD0;
  a1[2] = xmmword_1B2244D90;
  a1[3] = xmmword_1B2244E20;
  a1[4] = xmmword_1B2244DB0;
  a1[5] = xmmword_1B2244DD0;
  a1[6] = xmmword_1B2244D90;
  a1[7] = xmmword_1B2244E20;
  return result;
}

double sub_1B1E53FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  double result;
  simd_float4x4 v8;
  _BYTE v9[80];
  _BYTE v10[80];
  simd_float4x4 v11;
  char v12;
  double v13[8];
  char v14;

  v1 = *(_QWORD *)v0;
  v3 = *(_DWORD *)(v0 + 32);
  v2 = *(unsigned int *)(v0 + 36);
  swift_retain();
  v4 = v3 == -1 && (_DWORD)v2 == 0;
  if (v4
    || (v3 & 0x80000000) != 0
    || *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= (int)v3
    || ((v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v2 != -1)
      ? (v6 = *(_DWORD *)(v5 + 12 * (int)v3 + 8) == (_DWORD)v2)
      : (v6 = 1),
        !v6))
  {
    swift_release();
  }
  else
  {
    sub_1B1D1EF80(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_DWORD *)(v5 + 12 * (int)v3), *(_WORD *)(v5 + 12 * (int)v3 + 4), 64, v1, (uint64_t)v9);
    swift_release();
    sub_1B1A18378((uint64_t)v9, (uint64_t)v13, &qword_1ED4B9808, (uint64_t)&type metadata for InverseWorldTransform);
    if ((v14 & 1) == 0)
      return v13[0];
  }
  swift_retain();
  sub_1B1D15764((_QWORD *)(v3 | (unint64_t)(v2 << 32)), (uint64_t)v10);
  swift_release();
  sub_1B1A18378((uint64_t)v10, (uint64_t)&v11, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v12 & 1) != 0)
  {
    v8.columns[3] = (simd_float4)xmmword_1B2244E20;
    v8.columns[2] = (simd_float4)xmmword_1B2244D90;
    v8.columns[1] = (simd_float4)xmmword_1B2244DD0;
    v8.columns[0] = (simd_float4)xmmword_1B2244DB0;
  }
  else
  {
    v8 = v11;
  }
  *(_QWORD *)&result = (unint64_t)__invert_f4(v8);
  return result;
}

double sub_1B1E54154()
{
  _QWORD *v0;
  double result;
  uint64_t v2;
  simd_float4 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  simd_float4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[80];
  float32x4_t v28[4];
  char v29;
  _BYTE v30[96];

  if ((sub_1B1E5338C((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE88E4) & 1) != 0)
  {
    *(_QWORD *)&result = 1065353216;
  }
  else
  {
    v2 = *(_QWORD *)(*v0 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F212D4(v2, &v20);
    v3 = v20;
    v4 = v21;
    v12 = v22;
    v11 = v23;
    v16 = v24;
    v14 = v25;
    v18 = v26;
    swift_release();
    swift_release();
    sub_1B1AE09AC((uint64_t)&v20, (uint64_t)v30);
    v5 = xmmword_1B2244E20;
    v6 = xmmword_1B2244D90;
    v7 = xmmword_1B2244DD0;
    v8 = xmmword_1B2244DB0;
    if ((v30[64] & 1) == 0)
    {
      v8 = (__int128)v3;
      *(_QWORD *)&v7 = v4;
      *((_QWORD *)&v7 + 1) = v12;
      *(_QWORD *)&v6 = v11;
      *((_QWORD *)&v6 + 1) = v16;
      *(_QWORD *)&v5 = v14;
      *((_QWORD *)&v5 + 1) = v18;
    }
    v13 = (float32x4_t)v5;
    v15 = (float32x4_t)v6;
    v17 = (float32x4_t)v7;
    v19 = (float32x4_t)v8;
    v9 = (_QWORD *)v0[4];
    swift_retain();
    sub_1B1D15764(v9, (uint64_t)v27);
    swift_release();
    sub_1B1A18378((uint64_t)v27, (uint64_t)v28, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
    v10 = (float32x4_t)xmmword_1B2244DB0;
    if ((v29 & 1) == 0)
      v10 = v28[0];
    *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v10.f32[0]), v17, *(float32x2_t *)v10.f32, 1), v15, v10, 2), v13, v10, 3).u64[0];
  }
  return result;
}

double sub_1B1E54340()
{
  uint64_t v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  double result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  _QWORD v14[2];
  _BYTE v15[80];

  if ((sub_1B1E5338C((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE88E4) & 1) != 0)
  {
    *(double *)v1.i64 = sub_1B1E53FDC();
    v10 = v1;
    v11 = v2;
    v12 = v3;
    v13 = v4;
    v5 = *(_QWORD *)(*(_QWORD *)v0 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F213C0(v5, (uint64_t)v14);
    v7 = v14[0];
    v6 = v14[1];
    swift_release();
    swift_release();
    sub_1B1AE09AC((uint64_t)v14, (uint64_t)v15);
    if ((v15[64] & 1) != 0)
    {
      v8 = (float32x4_t)xmmword_1B2244DB0;
    }
    else
    {
      v8.i64[0] = v7;
      v8.i64[1] = v6;
    }
    *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v8.f32[0]), v11, *(float32x2_t *)v8.f32, 1), v12, v8, 2), v13, v8, 3).u64[0];
  }
  else
  {
    *(_QWORD *)&result = 1065353216;
  }
  return result;
}

void sub_1B1E544A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7)
{
  void *v7;
  void *v8;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[12];
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  _BYTE v59[40];
  _QWORD v60[10];
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;

  v8 = v7;
  v11 = *(_OWORD *)(a2 + 104);
  v57[0] = *(_OWORD *)(a2 + 88);
  v57[1] = v11;
  v58 = *(_QWORD *)(a2 + 120);
  v12 = swift_retain();
  sub_1B1E8FCE4(v12, (uint64_t)v57, 0x200000000, v42);
  swift_release();
  sub_1B1A18378((uint64_t)v42, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v43[0])
  {
    v50 = v43[0];
    v51 = v43[1];
    v52 = v44;
    v33 = v49;
    if (v49 >= 1 && (v13 = v46) != 0)
    {
      v14 = v48[4];
      v32 = v47;
      v15 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v29 = v48 + 8;
      v30 = (uint64_t)(v48 + 6);
      v16 = (uint64_t *)(v45 + 24);
      v31 = v15;
      v17 = v48;
      while (1)
      {
        v19 = *((unsigned int *)v16 - 6);
        v18 = *((unsigned int *)v16 - 5);
        v20 = *((unsigned int *)v16 - 4);
        v21 = *(v16 - 1);
        v22 = *v16;
        v23 = v16[1];
        v24 = v16[2];
        v65 = v8;
        v40 = v22;
        v41 = v21;
        v38 = v18;
        v39 = v23;
        if (v15)
        {
          v25 = *(os_unfair_lock_s **)(v24 + 376);
          swift_retain();
          os_unfair_lock_lock(v25);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        sub_1B1A18378(v30, (uint64_t)v59, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v26 = v17[4];
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v17[6] = ecs_stack_allocator_allocate(v26, 48 * v27, 8);
        v17[7] = v27;
        v29[1] = 0;
        v29[2] = 0;
        *v29 = 0;
        swift_release();
        v60[0] = v32;
        v60[1] = v24;
        v60[2] = v17;
        v60[3] = v20;
        v60[4] = (v38 - v19 + v20);
        v60[5] = v33;
        v60[6] = v19;
        v60[7] = v38;
        v60[8] = 0;
        v60[9] = 0;
        v61 = 1;
        v62 = v41;
        v63 = v40;
        v64 = v39;
        v28 = v65;
        sub_1B1E547D0((uint64_t)v60, a3, a1, a4, a5, a6, a7);
        if (v28)
          break;
        v55[0] = v50;
        v55[1] = v51;
        v56 = v52;
        sub_1B1F05D48(v17, (unsigned __int16 **)v55, (uint64_t)v59);
        v8 = 0;
        sub_1B1F03804((char *)v24);
        ecs_stack_allocator_pop_snapshot(v14);
        v15 = v31;
        if (v31)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
        }
        swift_release();
        v16 += 6;
        if (!--v13)
          goto LABEL_12;
      }

      v53[0] = v50;
      v53[1] = v51;
      v54 = v52;
      sub_1B1F05D48(v17, (unsigned __int16 **)v53, (uint64_t)v59);
      sub_1B1F03804((char *)v24);
      ecs_stack_allocator_pop_snapshot(v14);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
      __break(1u);
    }
    else
    {
LABEL_12:
      sub_1B19ED748(v42);
    }
  }
}

uint64_t sub_1B1E547D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[16];
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;

  v12 = sub_1B1BD0324(a2, a4, a5);
  v17 = a6;
  v18 = a7;
  v19 = a1;
  v20 = a3;
  return sub_1B1E52D20(MEMORY[0x1E0DEB188], (uint64_t)sub_1B1E56A54, (uint64_t)v16, v12, v13, a4, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v15);
}

uint64_t sub_1B1E5487C(uint64_t result, double a2, float a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a5 + 48);
  v6 = *(_QWORD *)(a5 + 56);
  if (*(float *)&a2 == a3)
  {
    v8 = v6 - v7;
    if (v6 != v7)
    {
      v9 = *(_QWORD *)(a5 + 48);
      if (v8 < 8)
        goto LABEL_7;
      v9 = v7 + (v8 & 0xFFFFFFFFFFFFFFF8);
      v10 = vdupq_lane_s32(*(int32x2_t *)&a2, 0);
      v11 = (int32x4_t *)(result + 4 * v7 + 16);
      v12 = v8 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v11[-1] = v10;
        *v11 = v10;
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
      if (v8 != (v8 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_7:
        v13 = v6 - v9;
        v14 = (_DWORD *)(result + 4 * v9);
        do
        {
          *v14++ = LODWORD(a2);
          --v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v15 = v6 - v7;
    if (v15)
    {
      v16 = a6[3];
      v17 = a6[4];
      v18 = a3 - *(float *)&a2;
      v19 = (float *)(result + 4 * v7);
      v20 = a6[1];
      v21 = a6[2];
      do
      {
        v22 = 9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21));
        v23 = v20 ^ v16;
        v24 = v21 ^ v17;
        v16 ^= v20 ^ (v21 << 17);
        v21 ^= v23;
        v20 ^= v24;
        v17 = __ROR8__(v24, 19);
        *v19++ = (float)(v18 * (float)((float)(*(_QWORD *)&v22 & 0xFFFFFFLL) * 0.000000059605)) + *(float *)&a2;
        --v15;
      }
      while (v15);
      a6[1] = v20;
      a6[2] = v21;
      a6[3] = v16;
      a6[4] = v17;
    }
  }
  return result;
}

uint64_t sub_1B1E5495C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int16 **a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  ValueMetadata *v33;
  ValueMetadata *v34;
  ValueMetadata *v35;
  BOOL v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  _QWORD *v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  Swift::Int v93;
  uint64_t KeyPath;
  ValueMetadata *v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned __int16 *v98;
  uint64_t v99;
  unsigned __int16 *v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unsigned __int16 *v118;
  unsigned __int16 *v119;
  _QWORD v120[10];
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;

  v125 = 0;
  if ((*(_BYTE *)(result + 272) & 1) == 0)
  {
    v7 = (_QWORD *)result;
    if (!*(_QWORD *)(result + 280))
    {
      v11 = (*(_QWORD *)(*(_QWORD *)(a3 + 288) + 128) + 247) & -*(_QWORD *)(*(_QWORD *)(a3 + 288) + 128);
      swift_retain();
      v12 = (void *)sub_1B1D22DA8(0, v11);
      v14 = v13;
      v16 = v15;
      swift_unknownObjectRetain();
      swift_release();
      v7[35] = v12;
      v7[36] = v14;
      v7[37] = v16;
      v7[38] = v11;
      v17 = objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
      v18 = 0;
      v19 = 0;
      if (v17 != (id)2)
      {
        v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v21 = v12;
        v19 = &v20[v14];
        v18 = (uint64_t)&v20[v14 + v16];
      }
      v103 = (uint64_t)v19;
      v22 = sub_1B2043600(v19, v18, a2, a4, 0, a3);
      swift_retain();
      v23 = (void *)sub_1B1D22DA8(0, v22);
      v25 = v24;
      v27 = v26;
      swift_unknownObjectRetain();
      swift_release();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v7[45] = v23;
      v7[46] = v25;
      v7[47] = v27;
      v7[48] = a4;
      v7[49] = a2;
      v104 = 0;
      if (objc_msgSend(v23, sel_storageMode) != (id)2)
      {
        v28 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v29 = v23;
        v104 = (uint64_t)v28 + v25;
      }
      if ((a4 & 0x8000000000000000) != 0
        || HIDWORD(a4)
        || ((*(_DWORD *)v104 = a4,
             *(_QWORD *)(v104 + 12) = 0,
             *(_QWORD *)(v104 + 4) = 0,
             v30 = sub_1B1E53550(),
             (v31 & 1) != 0)
          ? (v32 = a4)
          : (v32 = v30),
            (v32 & 0x8000000000000000) != 0 || HIDWORD(v32)))
      {
        result = sub_1B222967C();
        __break(1u);
      }
      else
      {
        *(_DWORD *)(v104 + 28) = v32;
        swift_retain();
        v33 = sub_1B207CCB8(&type metadata for Color);
        swift_release();
        *(_BYTE *)(v104 + 120) = v33 != 0;
        swift_retain();
        v34 = sub_1B207CCB8(&type metadata for Scale1);
        swift_release();
        if (v34 || (swift_retain(), v35 = sub_1B207CCB8(&type metadata for Scale2), swift_release(), v35))
        {
          v36 = 1;
        }
        else
        {
          swift_retain();
          v95 = sub_1B207CCB8(&type metadata for Scale3);
          swift_release();
          v36 = v95 != 0;
        }
        *(_BYTE *)(v104 + 121) = v36;
        *(double *)&v37 = sub_1B1E52BDC();
        *(_OWORD *)(v104 + 32) = v37;
        *(_OWORD *)(v104 + 48) = v38;
        *(_OWORD *)(v104 + 64) = v39;
        *(_OWORD *)(v104 + 80) = v40;
        v102 = (uint64_t)a6[10];
        if (v102 <= 0)
        {
          v93 = 0;
        }
        else
        {
          v41 = a6[8];
          v101 = a6[7];
          if (v101)
          {
            v42 = 0;
            v43 = a6[9];
            v44 = *((_QWORD *)v43 + 4);
            v116 = *((unsigned __int8 *)v41 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v97 = v43 + 32;
            v98 = a6[5];
            v96 = v43 + 52;
            v118 = *a6;
            v117 = (uint64_t)*a6 + 41;
            v100 = a6[8];
            v119 = v43;
            v99 = v44;
            while (1)
            {
              v45 = v41;
              v46 = &v98[24 * v42];
              v47 = *(unsigned int *)v46;
              v48 = *((unsigned int *)v46 + 1);
              v49 = *((unsigned int *)v46 + 2);
              v50 = *((_QWORD *)v46 + 2);
              v51 = *((_QWORD *)v46 + 5);
              v115 = v42;
              v107 = *((_QWORD *)v46 + 4);
              v108 = *((_QWORD *)v46 + 3);
              if (v116)
              {
                v52 = *(os_unfair_lock_s **)(v51 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v52);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v51 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v44);
              v53 = v119;
              v112 = *((_QWORD *)v119 + 7);
              v113 = *((_QWORD *)v119 + 6);
              v110 = *((_QWORD *)v119 + 9);
              v111 = *((_QWORD *)v119 + 8);
              v109 = *((_QWORD *)v119 + 10);
              v54 = *((_QWORD *)v119 + 4);
              v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              *((_QWORD *)v119 + 6) = ecs_stack_allocator_allocate(v54, 48 * v55, 8);
              *((_QWORD *)v119 + 7) = v55;
              v97[1] = 0;
              v97[2] = 0;
              *v97 = 0;
              swift_release();
              v120[0] = v45;
              v120[1] = v51;
              v114 = v51;
              v120[2] = v119;
              v120[3] = v49;
              v120[4] = (v48 - v47 + v49);
              v120[5] = v102;
              v120[6] = v47;
              v120[7] = v48;
              v120[8] = 0;
              v120[9] = 0;
              v121 = 1;
              v122 = v50;
              v123 = v108;
              v124 = v107;
              sub_1B1E56A74((uint64_t)v120, a2, a7, v103, v104, &v125);
              v56 = *((_QWORD *)v119 + 6);
              v57 = *((_QWORD *)v119 + 8);
              if (!v57)
              {
                v83 = *((_QWORD *)v119 + 7);
                v84 = (_QWORD *)*((_QWORD *)v119 + 4);
                goto LABEL_61;
              }
              for (i = 0; i != v57; ++i)
              {
                v60 = (uint64_t *)(v56 + 48 * i);
                v61 = *v60;
                v62 = (void (*)(uint64_t))v60[4];
                v63 = *((_QWORD *)v53 + 9);
                if (v63)
                  v64 = v61 == v63;
                else
                  v64 = 0;
                if (v64 || !v118[11])
                  goto LABEL_26;
                v65 = v118[9];
                v66 = (_QWORD *)(v117 + v118[8]);
                v67 = v60[2];
                v68 = v66;
                v69 = v65 >> 4;
                v70 = v117;
                if (v65 >= 0x10)
                {
                  while (*v68 != v61)
                  {
                    ++v70;
                    v68 += 2;
                    if (!--v69)
                      goto LABEL_41;
                  }
                  v71 = *(unsigned __int8 *)(v70 + v118[10]);
                  v72 = v71 > 5;
                  v73 = (1 << v71) & 0x23;
                  if (v72 || v73 == 0)
                  {
LABEL_26:
                    v59 = swift_retain();
                    v62(v59);
                    swift_release();
                    goto LABEL_27;
                  }
                }
LABEL_41:
                if (swift_conformsToProtocol2())
                  v75 = v67;
                else
                  v75 = 0;
                if (v75)
                {
                  if (v65 < 0x10)
                    goto LABEL_26;
                  v76 = v66;
                  v77 = v65 >> 4;
                  v78 = v117;
                  while (*v76 != v75)
                  {
                    ++v78;
                    v76 += 2;
                    if (!--v77)
                      goto LABEL_54;
                  }
                  v79 = *(unsigned __int8 *)(v78 + v118[10]);
                  v72 = v79 > 5;
                  v80 = (1 << v79) & 0x23;
                  if (v72 || v80 == 0)
                    goto LABEL_26;
LABEL_54:
                  v82 = 16 * (v65 >> 4);
                  while (*v66 != v75)
                  {
                    v66 += 2;
                    v82 -= 16;
                    if (!v82)
                      goto LABEL_26;
                  }
                }
LABEL_27:
                v53 = v119;
              }
              v83 = *((_QWORD *)v119 + 7);
              v56 = *((_QWORD *)v119 + 6);
              v84 = (_QWORD *)*((_QWORD *)v119 + 4);
              if (*((uint64_t *)v119 + 8) >= 1)
                swift_arrayDestroy();
LABEL_61:
              v41 = v100;
              ecs_stack_allocator_deallocate(v84, v56, 48 * v83);
              *((_QWORD *)v53 + 6) = v113;
              *((_QWORD *)v53 + 7) = v112;
              *((_QWORD *)v53 + 8) = v111;
              *((_QWORD *)v53 + 9) = v110;
              *((_QWORD *)v53 + 10) = v109;
              if (*(_QWORD *)(*((_QWORD *)v53 + 13) + 16))
              {
                v85 = (_QWORD *)swift_bridgeObjectRetain();
                sub_1B1F05034(v85, v114);
                swift_bridgeObjectRelease();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v87 = *((_QWORD *)v53 + 13);
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  sub_1B1C92670(0, *(_QWORD *)(v87 + 16));
                }
                else
                {
                  v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  if (*(_QWORD *)(v87 + 24) >= 2uLL)
                  {
                    sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                    v88 = (_QWORD *)swift_allocObject();
                    v89 = j__malloc_size(v88);
                    v88[2] = 0;
                    v88[3] = 2 * ((uint64_t)(v89 - 32) / 72);
                  }
                  *v96 = v88;
                  swift_bridgeObjectRelease();
                }
                if (*(unsigned __int8 *)(*((_QWORD *)v53 + 2)
                                                      + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
                   - 1 >= 2)
                {
                  v90 = *(char **)(v114 + 232);
                  v91 = *(char **)(v114 + 256);
                  if (v90 == v91)
                  {
                    v92 = *(char **)(v114 + 240);
                  }
                  else
                  {
                    sub_1B1A1059C(v91, v90);
                    v91 = *(char **)(v114 + 232);
                    v92 = *(char **)(v114 + 240);
                    if (v92 == v91)
                    {
                      v92 = 0;
                      v91 = 0;
                      *(_QWORD *)(v114 + 232) = 0;
                      *(_QWORD *)(v114 + 240) = 0;
                    }
                  }
                  *(_QWORD *)(v114 + 248) = v92;
                  *(_QWORD *)(v114 + 256) = v91;
                }
              }
              v44 = v99;
              ecs_stack_allocator_pop_snapshot(v99);
              if ((v116 & 1) != 0)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v114 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v114 + 376));
              }
              swift_release();
              v42 = v115 + 1;
              if ((unsigned __int16 *)(v115 + 1) == v101)
              {
                v93 = v125;
                goto LABEL_78;
              }
            }
          }
          v93 = 0;
        }
LABEL_78:
        KeyPath = swift_getKeyPath();
        sub_1B1DAC77C(KeyPath, v93);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t *sub_1B1E55224(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t *result;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  char v37;
  simd_float4x4 v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t *v46;
  unsigned __int32 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  unsigned __int32 v65;
  float32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float v72;
  int8x16_t v73;
  float v74;
  BOOL v75;
  int8x16_t v76;
  float v77;
  int8x16_t v78;
  float v79;
  BOOL v80;
  int8x16_t v81;
  float v82;
  int8x16_t v83;
  float v84;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  _BOOL8 v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  char v112;
  BOOL v113;
  char v114;
  BOOL v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  BOOL v120;
  int32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t *v126;
  unsigned __int32 v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x4_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x4_t v143;
  float32x4_t v144;
  unsigned __int32 v145;
  float32x4_t v146;
  int32x4_t v147;
  float32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  float v152;
  int8x16_t v153;
  float v154;
  BOOL v155;
  int8x16_t v156;
  float v157;
  int8x16_t v158;
  float v159;
  BOOL v160;
  int8x16_t v161;
  float v162;
  int8x16_t v163;
  float v164;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  _BOOL8 v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  simd_float4x4 v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  float32x4_t v190;
  float32x4_t v191;
  simd_float4x4 v192;
  float32x4_t v193;
  uint64_t v194;
  _BYTE v195[40];
  uint64_t v196;
  int v197;
  char v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  _BYTE v202[40];
  uint64_t v203;
  int v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _OWORD v221[2];
  uint64_t v222;
  uint64_t v223;
  int v224;
  char v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  _OWORD v235[2];
  uint64_t v236;
  uint64_t v237;
  int v238;
  char v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  char v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  _OWORD v249[2];
  uint64_t v250;
  _OWORD v251[2];
  uint64_t v252;
  uint64_t v253[8];
  uint64_t v254[12];
  _BYTE v255[80];
  _BYTE v256[80];
  uint64_t v257[12];
  uint64_t v258[12];
  _BYTE v259[80];
  _BYTE v260[80];
  uint64_t v261[12];
  _OWORD v262[6];
  float32x4_t v263[4];
  char v264;
  simd_float4x4 v265;
  char v266;
  _QWORD v267[7];
  uint64_t v268;
  uint64_t v269;
  _OWORD v270[6];
  float32x4_t v271[4];
  char v272;
  simd_float4x4 v273;
  char v274;
  _QWORD v275[7];
  uint64_t v276;
  uint64_t v277;
  _OWORD v278[2];
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  _BYTE v285[40];
  uint64_t v286;
  simd_float4x4 v287;
  simd_float4x4 v288;
  simd_float4x4 v289;

  v286 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  v252 = *(_QWORD *)(v1 + 48);
  v251[0] = v3;
  v251[1] = v4;
  sub_1B1E8FCE4(a1, (uint64_t)v251, 0x200000000, v253);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v253, (uint64_t)v278, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v278[0])
  {
    if (v284 >= 1)
    {
      v182 = v281;
      if (v281)
      {
        v6 = v283;
        v7 = v283[4];
        v8 = *(unsigned __int8 *)(v282 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v221[0] = v278[0];
        v221[1] = v278[1];
        v177 = v280;
        v178 = (uint64_t)(v283 + 6);
        v222 = v279;
        v185 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v176 = v283 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v9 = 0;
        v180 = v7;
        v181 = v6;
        v179 = v8;
        v186 = a1;
        while (1)
        {
          v184 = v9;
          v10 = (unsigned int *)(v177 + 48 * v9);
          v11 = *v10;
          v12 = v10[1];
          v13 = *((_QWORD *)v10 + 3);
          v187 = (uint64_t *)*((_QWORD *)v10 + 2);
          v15 = *((_QWORD *)v10 + 4);
          v14 = *((_QWORD *)v10 + 5);
          if (v8)
          {
            v16 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          sub_1B1A18378(v178, (uint64_t)v285, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v17 = v6[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v6[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v6[7] = v18;
          v176[1] = 0;
          v176[2] = 0;
          *v176 = 0;
          swift_release();
          v19 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v187, v13, v15, (uint64_t)v6);
          v189 = sub_1B1A12038((uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, v187, v13, v15, (uint64_t)v6);
          v188 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v187, v13, v15, (uint64_t)v6);
          if (!v187)
            break;
          v20 = v186;
          if (v15)
          {
            v21 = 0;
            v22 = v19 + 43;
            v23 = v185;
            while (1)
            {
              if (*(_BYTE *)(v22 + 88 * v21) != 1)
                goto LABEL_14;
              v194 = v187[v21];
              if (qword_1ED4B85E0 != -1)
                swift_once();
              v235[0] = xmmword_1ED4D0948;
              v235[1] = unk_1ED4D0958;
              v236 = qword_1ED4D0968;
              sub_1B1E8FCE4(v20, (uint64_t)v235, 0x200000000, v254);
              sub_1B1A18378((uint64_t)v254, (uint64_t)v267, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
              if (v267[0])
              {
                v25 = v268;
                if (v268)
                {
                  v26 = (unsigned int *)v267[5];
                  while (1)
                  {
                    if (!v26[2])
                    {
                      v27 = *v26;
                      if (v26[1] != (_DWORD)v27)
                        break;
                    }
                    v26 += 12;
                    if (!--v25)
                      goto LABEL_27;
                  }
                  v28 = (uint64_t *)*((_QWORD *)v26 + 2);
                  if (v28)
                    v27 = *v28;
                  v29 = *(_DWORD *)(*((_QWORD *)v26 + 5) + 188);
                }
                else
                {
LABEL_27:
                  v27 = -1;
                  v29 = -1;
                }
                v30 = *(_QWORD *)(*(_QWORD *)(v269 + 136) + 8 * v29 + 32);
                v31 = *(_BYTE *)(v30 + 184);
                v32 = swift_retain();
                if ((v31 & 1) != 0)
                  goto LABEL_160;
                v33 = *(_DWORD *)(*(_QWORD *)(v30 + 168) + 4 * v27);
                LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                         + 12 * v33
                                         + 8);
                swift_release();
                sub_1B19ED748(v254);
              }
              else
              {
                v34 = sub_1B1E126A4();
                if ((v35 & 1) != 0)
                  goto LABEL_14;
                v27 = HIDWORD(v34);
                v33 = v34;
              }
              v36 = v33 == -1 && (_DWORD)v27 == 0;
              v37 = v36;
              v38.columns[3] = (simd_float4)xmmword_1B2244E20;
              v38.columns[2] = (simd_float4)xmmword_1B2244D90;
              v38.columns[1] = (simd_float4)xmmword_1B2244DD0;
              v38.columns[0] = (simd_float4)xmmword_1B2244DB0;
              v193 = (float32x4_t)xmmword_1B2244D90;
              v190 = (float32x4_t)xmmword_1B2244DB0;
              v191 = (float32x4_t)xmmword_1B2244DD0;
              if (!v36
                && (v33 & 0x80000000) == 0
                && v23[1] > v33
                && ((_DWORD)v27 == -1 || *(_DWORD *)(*v23 + 12 * v33 + 8) == (_DWORD)v27))
              {
                sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v20 + 136) + 8 * *(int *)(*v23 + 12 * v33) + 32), *(_DWORD *)(*v23 + 12 * v33), *(_WORD *)(*v23 + 12 * v33 + 4), 64, v20, (uint64_t)v255);
                sub_1B1A18378((uint64_t)v255, (uint64_t)&v265, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
                if ((v266 & 1) != 0)
                {
                  v38.columns[0] = (simd_float4)xmmword_1B2244DB0;
                  v38.columns[1] = (simd_float4)xmmword_1B2244DD0;
                  v38.columns[2] = (simd_float4)xmmword_1B2244D90;
                  v38.columns[3] = (simd_float4)xmmword_1B2244E20;
                }
                else
                {
                  v38 = v265;
                }
              }
              v287 = __invert_f4(v38);
              if ((v37 & 1) != 0)
              {
                v39 = (float32x4_t)xmmword_1B2244E20;
              }
              else
              {
                v39 = (float32x4_t)xmmword_1B2244E20;
                if ((v33 & 0x80000000) == 0
                  && v23[1] > v33
                  && ((_DWORD)v27 == -1 || *(_DWORD *)(*v23 + 12 * v33 + 8) == (_DWORD)v27))
                {
                  v183 = v287;
                  sub_1B1D1E8C0(*(_QWORD *)(*(_QWORD *)(v20 + 136) + 8 * *(int *)(*v23 + 12 * v33) + 32), *(_DWORD *)(*v23 + 12 * v33), *(_WORD *)(*v23 + 12 * v33 + 4), 64, v20, (uint64_t)v256);
                  sub_1B1A18378((uint64_t)v256, (uint64_t)v263, &qword_1ED4B8E80, (uint64_t)&type metadata for ProjectionMatrix);
                  if ((v264 & 1) != 0)
                  {
                    v39 = (float32x4_t)xmmword_1B2244E20;
                  }
                  else
                  {
                    v190 = v263[0];
                    v191 = v263[1];
                    v193 = v263[2];
                    v39 = v263[3];
                  }
                  v287 = v183;
                }
              }
              v40.i32[3] = v193.i32[3];
              v41 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v190, v287.columns[0].f32[0]), v191, *(float32x2_t *)v287.columns[0].f32, 1), v193, (float32x4_t)v287.columns[0], 2), v39, (float32x4_t)v287.columns[0], 3);
              v42 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v190, v287.columns[1].f32[0]), v191, *(float32x2_t *)v287.columns[1].f32, 1), v193, (float32x4_t)v287.columns[1], 2), v39, (float32x4_t)v287.columns[1], 3);
              v43 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v190, v287.columns[2].f32[0]), v191, *(float32x2_t *)v287.columns[2].f32, 1), v193, (float32x4_t)v287.columns[2], 2), v39, (float32x4_t)v287.columns[2], 3);
              v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v190, v287.columns[3].f32[0]), v191, *(float32x2_t *)v287.columns[3].f32, 1), v193, (float32x4_t)v287.columns[3], 2), v39, (float32x4_t)v287.columns[3], 3);
              v40.f32[0] = *(float *)&v41.i32[3] - *(float *)v41.i32;
              v40.f32[1] = *(float *)&v42.i32[3] - *(float *)v42.i32;
              v40.f32[2] = v43.f32[3] - v43.f32[0];
              v45 = (int32x4_t)vmulq_f32(v40, v40);
              v40.f32[3] = v44.f32[3] - v44.f32[0];
              v46 = (float32x4_t *)(v188 + 32 * v21);
              v47 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))).u32[0];
              *(float32x2_t *)v45.i8 = vrsqrte_f32((float32x2_t)v47);
              *(float32x2_t *)v45.i8 = vmul_f32(*(float32x2_t *)v45.i8, vrsqrts_f32((float32x2_t)v47, vmul_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8)));
              v48 = vmulq_n_f32(v40, vmul_f32(*(float32x2_t *)v45.i8, vrsqrts_f32((float32x2_t)v47, vmul_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8))).f32[0]);
              v50 = *v46;
              v49 = v46[1];
              v51 = vmulq_f32(v48, *v46);
              v52 = vmulq_f32(v49, vabsq_f32(v48));
              if (vaddv_f32(vadd_f32(*(float32x2_t *)v51.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL))) <= (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v52.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL))))break;
              v51.f32[0] = *(float *)&v41.i32[3] + *(float *)&v41.i32[1];
              v51.f32[1] = *(float *)&v42.i32[3] + *(float *)&v42.i32[1];
              v51.f32[2] = v43.f32[3] + v43.f32[1];
              v53 = (int32x4_t)vmulq_f32(v51, v51);
              v51.f32[3] = v44.f32[3] + v44.f32[1];
              v52.f32[0] = *(float *)&v41.i32[3] - *(float *)&v41.i32[1];
              v52.f32[1] = *(float *)&v42.i32[3] - *(float *)&v42.i32[1];
              v52.f32[2] = v43.f32[3] - v43.f32[1];
              v54 = (int32x4_t)vmulq_f32(v52, v52);
              v52.f32[3] = v44.f32[3] - v44.f32[1];
              v55 = (float32x4_t)vzip2q_s32(v41, v42);
              v55.i32[2] = v43.i32[2];
              v56 = v55;
              v56.i32[3] = v44.i32[2];
              v57 = (int32x4_t)vmulq_f32(v55, v55);
              v53.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1))).u32[0];
              v58 = vrsqrte_f32((float32x2_t)v53.u32[0]);
              v59 = vmul_f32(v58, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v58, v58)));
              v53.i32[0] = vmul_f32(v59, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v59, v59))).u32[0];
              v59.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v54, 2), vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1))).u32[0];
              v60 = vmulq_n_f32(v51, *(float *)v53.i32);
              v61 = vrsqrte_f32((float32x2_t)v59.u32[0]);
              v62 = vmul_f32(v61, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v61, v61)));
              v63 = (float32x4_t)vdupq_laneq_s32(v57, 2);
              v64 = vmulq_n_f32(v52, vmul_f32(v62, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v62, v62))).f32[0]);
              v65 = vadd_f32(*(float32x2_t *)v63.f32, vadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1))).u32[0];
              *(float32x2_t *)v63.f32 = vrsqrte_f32((float32x2_t)v65);
              *(float32x2_t *)v63.f32 = vmul_f32(*(float32x2_t *)v63.f32, vrsqrts_f32((float32x2_t)v65, vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32)));
              v66 = vmulq_n_f32(v56, vmul_f32(*(float32x2_t *)v63.f32, vrsqrts_f32((float32x2_t)v65, vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32))).f32[0]);
              v63.f32[0] = *(float *)&v41.i32[3] + *(float *)v41.i32;
              v63.f32[1] = *(float *)&v42.i32[3] + *(float *)v42.i32;
              v63.f32[2] = v43.f32[3] + v43.f32[0];
              v67 = (int32x4_t)vmulq_f32(v63, v63);
              v63.f32[3] = v44.f32[3] + v44.f32[0];
              v57.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
              *(float32x2_t *)v67.i8 = vrsqrte_f32((float32x2_t)v57.u32[0]);
              *(float32x2_t *)v67.i8 = vmul_f32(*(float32x2_t *)v67.i8, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8)));
              v68 = vmulq_n_f32(v63, vmul_f32(*(float32x2_t *)v67.i8, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8))).f32[0]);
              v69 = (int8x16_t)vmulq_f32(v50, v68);
              v70 = (int8x16_t)vmulq_f32(v49, vabsq_f32(v68));
              v75 = vaddv_f32(vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL))) <= (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)));
              v71 = (int8x16_t)vmulq_f32(v60, v50);
              v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
              v73 = (int8x16_t)vmulq_f32(v49, vabsq_f32(v60));
              v74 = -vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
              v75 = v75 || v72 <= v74;
              v76 = (int8x16_t)vmulq_f32(v64, v50);
              v77 = vaddv_f32(vadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)));
              v78 = (int8x16_t)vmulq_f32(v49, vabsq_f32(v64));
              v79 = -vaddv_f32(vadd_f32(*(float32x2_t *)v78.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)));
              v80 = v75 || v77 <= v79;
              v81 = (int8x16_t)vmulq_f32(v66, v50);
              v82 = vaddv_f32(vadd_f32(*(float32x2_t *)v81.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)));
              v83 = (int8x16_t)vmulq_f32(v49, vabsq_f32(v66));
              v84 = -vaddv_f32(vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL)));
              if (v80 || v82 <= v84)
                break;
              v287.columns[0].f32[0] = *(float *)&v41.i32[3] - *(float *)&v41.i32[2];
              v287.columns[0].f32[1] = *(float *)&v42.i32[3] - *(float *)&v42.i32[2];
              v287.columns[0].f32[2] = v43.f32[3] - v43.f32[2];
              v287.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v287.columns[0], (float32x4_t)v287.columns[0]);
              v287.columns[0].f32[3] = v44.f32[3] - v44.f32[2];
              v287.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v287.columns[2], 2), vadd_f32(*(float32x2_t *)v287.columns[2].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v287.columns[2].f32, 1))).u32[0];
              *(float32x2_t *)v287.columns[2].f32 = vrsqrte_f32((float32x2_t)v287.columns[1].u32[0]);
              *(float32x2_t *)v287.columns[2].f32 = vmul_f32(*(float32x2_t *)v287.columns[2].f32, vrsqrts_f32((float32x2_t)v287.columns[1].u32[0], vmul_f32(*(float32x2_t *)v287.columns[2].f32, *(float32x2_t *)v287.columns[2].f32)));
              v94 = vmulq_n_f32((float32x4_t)v287.columns[0], vmul_f32(*(float32x2_t *)v287.columns[2].f32, vrsqrts_f32((float32x2_t)v287.columns[1].u32[0], vmul_f32(*(float32x2_t *)v287.columns[2].f32, *(float32x2_t *)v287.columns[2].f32))).f32[0]);
              v95 = (int8x16_t)vmulq_f32(v50, v94);
              v96 = (int8x16_t)vmulq_f32(v49, vabsq_f32(v94));
              v97 = vaddv_f32(vadd_f32(*(float32x2_t *)v95.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL))) > (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)));
              v86 = v189 + 656 * v21;
              if (v97 != *(_BYTE *)(v86 + 129))
                goto LABEL_56;
LABEL_13:
              v23 = v185;
LABEL_14:
              if (++v21 == v15)
                goto LABEL_84;
            }
            v86 = v189 + 656 * v21;
            if ((*(_BYTE *)(v86 + 129) & 1) == 0)
              goto LABEL_14;
            v97 = 0;
LABEL_56:
            v87 = (_BYTE *)(v86 + 129);
            if (qword_1ED4B7DB8 != -1)
              swift_once();
            v88 = qword_1ED4D09F8;
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v89 = swift_allocObject();
            *(_OWORD *)(v89 + 16) = xmmword_1B226D240;
            *(_QWORD *)(v89 + 32) = &type metadata for Particle;
            *(_QWORD *)(v89 + 40) = &off_1E63C21B0;
            v229 = v88;
            v230 = 0;
            v231 = 2;
            v232 = 0;
            v233 = 2;
            v234 = 0;
            swift_retain();
            sub_1B1E68AF8(v89, 1, (uint64_t)v195);
            swift_setDeallocating();
            swift_deallocClassInstance();
            swift_release();
            sub_1B1B7AA28();
            v90 = swift_allocObject();
            *(_OWORD *)(v90 + 16) = xmmword_1B226D240;
            swift_retain();
            v91 = sub_1B1A101F0(v194);
            swift_release();
            *(_QWORD *)(v90 + 56) = &type metadata for EmitterReference;
            *(_QWORD *)(v90 + 64) = &off_1E6387218;
            *(_QWORD *)(v90 + 32) = v91;
            sub_1B1E68A14(v90, (uint64_t)&v196);
            swift_setDeallocating();
            sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
            swift_arrayDestroy();
            swift_deallocClassInstance();
            sub_1B19ED720((uint64_t)v195);
            v223 = v196;
            v224 = v197;
            v225 = v198;
            v226 = v199 | 1;
            v227 = v200;
            v228 = v201;
            v20 = v186;
            sub_1B1E8FCE4(v186, (uint64_t)&v223, 0x200000000, v257);
            sub_1B1A18378((uint64_t)v257, (uint64_t)v262, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
            if (*(_QWORD *)&v262[0])
            {
              v211 = v262[2];
              v212 = v262[3];
              v213 = v262[4];
              v214 = v262[5];
              v209 = v262[0];
              v210 = v262[1];
              sub_1B1BEB5D8(v97);
              sub_1B19ED748(v257);
            }
            *v87 = v97;
            swift_retain();
            swift_retain();
            v24 = sub_1B1A101F0(v194);
            swift_release();
            sub_1B204D44C(v24, v97);
            sub_1B19ED720((uint64_t)&v196);
            swift_release();
            goto LABEL_13;
          }
LABEL_84:
          v6 = v181;
          sub_1B1F05D48(v181, (unsigned __int16 **)v221, (uint64_t)v285);
          sub_1B1F03804((char *)v14);
          v7 = v180;
          ecs_stack_allocator_pop_snapshot(v180);
          v8 = v179;
          if ((v179 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          v9 = v184 + 1;
          if (v184 + 1 == v182)
          {
            sub_1B19ED748(v253);
            return sub_1B19ED748(v253);
          }
        }
        v98 = v186;
        if ((_DWORD)v11 == (_DWORD)v12)
          goto LABEL_84;
        v99 = v19 + 43;
        v100 = v185;
        while (1)
        {
          if (*(_BYTE *)(v99 + 88 * v11) != 1)
            goto LABEL_88;
          if (qword_1ED4B85E0 != -1)
            swift_once();
          v249[0] = xmmword_1ED4D0948;
          v249[1] = unk_1ED4D0958;
          v250 = qword_1ED4D0968;
          sub_1B1E8FCE4(v98, (uint64_t)v249, 0x200000000, v258);
          sub_1B1A18378((uint64_t)v258, (uint64_t)v275, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
          if (v275[0])
          {
            v102 = v276;
            if (v276)
            {
              v103 = (unsigned int *)v275[5];
              while (1)
              {
                if (!v103[2])
                {
                  v104 = *v103;
                  if (v103[1] != (_DWORD)v104)
                    break;
                }
                v103 += 12;
                if (!--v102)
                  goto LABEL_101;
              }
              v105 = (uint64_t *)*((_QWORD *)v103 + 2);
              if (v105)
                v104 = *v105;
              v106 = *(_DWORD *)(*((_QWORD *)v103 + 5) + 188);
            }
            else
            {
LABEL_101:
              v104 = -1;
              v106 = -1;
            }
            v107 = *(_QWORD *)(*(_QWORD *)(v277 + 136) + 8 * v106 + 32);
            v108 = *(_BYTE *)(v107 + 184);
            v109 = swift_retain();
            if ((v108 & 1) != 0)
            {
LABEL_160:
              result = (uint64_t *)sub_1B2229688();
              __break(1u);
              return result;
            }
            v110 = *(_DWORD *)(*(_QWORD *)(v107 + 168) + 4 * v104);
            LODWORD(v104) = *(_DWORD *)(*(_QWORD *)(v109 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                      + 12 * v110
                                      + 8);
            swift_release();
            sub_1B19ED748(v258);
          }
          else
          {
            v111 = sub_1B1E126A4();
            if ((v112 & 1) != 0)
              goto LABEL_88;
            v104 = HIDWORD(v111);
            v110 = v111;
          }
          v113 = v110 == -1 && (_DWORD)v104 == 0;
          v114 = v113;
          if (v113
            || v110 < 0
            || v100[1] <= v110
            || ((_DWORD)v104 != -1 ? (v120 = *(_DWORD *)(*v100 + 12 * v110 + 8) == (_DWORD)v104) : (v120 = 1),
                !v120
             || (sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v186 + 136) + 8 * *(int *)(*v100 + 12 * v110) + 32), *(_DWORD *)(*v100 + 12 * v110), *(_WORD *)(*v100 + 12 * v110 + 4), 64, v186, (uint64_t)v259), sub_1B1A18378((uint64_t)v259, (uint64_t)&v273, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform), (v274 & 1) != 0)))
          {
            v288.columns[0] = (simd_float4)xmmword_1B2244DB0;
            v288.columns[1] = (simd_float4)xmmword_1B2244DD0;
            v288.columns[2] = (simd_float4)xmmword_1B2244D90;
            v288.columns[3] = (simd_float4)xmmword_1B2244E20;
            v289 = __invert_f4(v288);
            if ((v114 & 1) != 0)
              goto LABEL_133;
          }
          else
          {
            v289 = __invert_f4(v273);
            if ((v114 & 1) != 0)
            {
LABEL_133:
              v117 = (float32x4_t)xmmword_1B2244DB0;
              v116 = (float32x4_t)xmmword_1B2244DD0;
              v118 = (float32x4_t)xmmword_1B2244D90;
              v119 = (float32x4_t)xmmword_1B2244E20;
              v98 = v186;
              goto LABEL_137;
            }
          }
          if (v110 < 0)
            goto LABEL_133;
          v98 = v186;
          if (v100[1] > v110
            && ((_DWORD)v104 != -1 ? (v115 = *(_DWORD *)(*v100 + 12 * v110 + 8) == (_DWORD)v104) : (v115 = 1), v115))
          {
            v192 = v289;
            sub_1B1D1E8C0(*(_QWORD *)(*(_QWORD *)(v186 + 136) + 8 * *(int *)(*v100 + 12 * v110) + 32), *(_DWORD *)(*v100 + 12 * v110), *(_WORD *)(*v100 + 12 * v110 + 4), 64, v186, (uint64_t)v260);
            sub_1B1A18378((uint64_t)v260, (uint64_t)v271, &qword_1ED4B8E80, (uint64_t)&type metadata for ProjectionMatrix);
            if ((v272 & 1) != 0)
            {
              v117 = (float32x4_t)xmmword_1B2244DB0;
              v116 = (float32x4_t)xmmword_1B2244DD0;
              v118 = (float32x4_t)xmmword_1B2244D90;
              v119 = (float32x4_t)xmmword_1B2244E20;
            }
            else
            {
              v117 = v271[0];
              v116 = v271[1];
              v118 = v271[2];
              v119 = v271[3];
            }
            v289 = v192;
          }
          else
          {
            v117 = (float32x4_t)xmmword_1B2244DB0;
            v116 = (float32x4_t)xmmword_1B2244DD0;
            v118 = (float32x4_t)xmmword_1B2244D90;
            v119 = (float32x4_t)xmmword_1B2244E20;
          }
LABEL_137:
          v121 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v117, v289.columns[0].f32[0]), v116, *(float32x2_t *)v289.columns[0].f32, 1), v118, (float32x4_t)v289.columns[0], 2), v119, (float32x4_t)v289.columns[0], 3);
          v122 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v117, v289.columns[1].f32[0]), v116, *(float32x2_t *)v289.columns[1].f32, 1), v118, (float32x4_t)v289.columns[1], 2), v119, (float32x4_t)v289.columns[1], 3);
          v123 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v117, v289.columns[2].f32[0]), v116, *(float32x2_t *)v289.columns[2].f32, 1), v118, (float32x4_t)v289.columns[2], 2), v119, (float32x4_t)v289.columns[2], 3);
          v124 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v117, v289.columns[3].f32[0]), v116, *(float32x2_t *)v289.columns[3].f32, 1), v118, (float32x4_t)v289.columns[3], 2), v119, (float32x4_t)v289.columns[3], 3);
          v118.f32[0] = *(float *)&v121.i32[3] - *(float *)v121.i32;
          v118.f32[1] = *(float *)&v122.i32[3] - *(float *)v122.i32;
          v118.f32[2] = v123.f32[3] - v123.f32[0];
          v125 = (int32x4_t)vmulq_f32(v118, v118);
          v118.f32[3] = v124.f32[3] - v124.f32[0];
          v126 = (float32x4_t *)(v188 + 32 * v11);
          v127 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v125, 2), vadd_f32(*(float32x2_t *)v125.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.i8, 1))).u32[0];
          *(float32x2_t *)v125.i8 = vrsqrte_f32((float32x2_t)v127);
          *(float32x2_t *)v125.i8 = vmul_f32(*(float32x2_t *)v125.i8, vrsqrts_f32((float32x2_t)v127, vmul_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8)));
          v128 = vmulq_n_f32(v118, vmul_f32(*(float32x2_t *)v125.i8, vrsqrts_f32((float32x2_t)v127, vmul_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8))).f32[0]);
          v130 = *v126;
          v129 = v126[1];
          v131 = vmulq_f32(v128, *v126);
          v132 = vmulq_f32(v129, vabsq_f32(v128));
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v131.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL))) <= (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v132.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL))))goto LABEL_149;
          v131.f32[0] = *(float *)&v121.i32[3] + *(float *)&v121.i32[1];
          v131.f32[1] = *(float *)&v122.i32[3] + *(float *)&v122.i32[1];
          v131.f32[2] = v123.f32[3] + v123.f32[1];
          v133 = (int32x4_t)vmulq_f32(v131, v131);
          v131.f32[3] = v124.f32[3] + v124.f32[1];
          v132.f32[0] = *(float *)&v121.i32[3] - *(float *)&v121.i32[1];
          v132.f32[1] = *(float *)&v122.i32[3] - *(float *)&v122.i32[1];
          v132.f32[2] = v123.f32[3] - v123.f32[1];
          v134 = (int32x4_t)vmulq_f32(v132, v132);
          v132.f32[3] = v124.f32[3] - v124.f32[1];
          v135 = (float32x4_t)vzip2q_s32(v121, v122);
          v135.i32[2] = v123.i32[2];
          v136 = v135;
          v136.i32[3] = v124.i32[2];
          v137 = (int32x4_t)vmulq_f32(v135, v135);
          v133.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v133, 2), vadd_f32(*(float32x2_t *)v133.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.i8, 1))).u32[0];
          v138 = vrsqrte_f32((float32x2_t)v133.u32[0]);
          v139 = vmul_f32(v138, vrsqrts_f32((float32x2_t)v133.u32[0], vmul_f32(v138, v138)));
          v133.i32[0] = vmul_f32(v139, vrsqrts_f32((float32x2_t)v133.u32[0], vmul_f32(v139, v139))).u32[0];
          v139.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v134, 2), vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v134.i8, 1))).u32[0];
          v140 = vmulq_n_f32(v131, *(float *)v133.i32);
          v141 = vrsqrte_f32((float32x2_t)v139.u32[0]);
          v142 = vmul_f32(v141, vrsqrts_f32((float32x2_t)v139.u32[0], vmul_f32(v141, v141)));
          v143 = (float32x4_t)vdupq_laneq_s32(v137, 2);
          v144 = vmulq_n_f32(v132, vmul_f32(v142, vrsqrts_f32((float32x2_t)v139.u32[0], vmul_f32(v142, v142))).f32[0]);
          v145 = vadd_f32(*(float32x2_t *)v143.f32, vadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v137.i8, 1))).u32[0];
          *(float32x2_t *)v143.f32 = vrsqrte_f32((float32x2_t)v145);
          *(float32x2_t *)v143.f32 = vmul_f32(*(float32x2_t *)v143.f32, vrsqrts_f32((float32x2_t)v145, vmul_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32)));
          v146 = vmulq_n_f32(v136, vmul_f32(*(float32x2_t *)v143.f32, vrsqrts_f32((float32x2_t)v145, vmul_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32))).f32[0]);
          v143.f32[0] = *(float *)&v121.i32[3] + *(float *)v121.i32;
          v143.f32[1] = *(float *)&v122.i32[3] + *(float *)v122.i32;
          v143.f32[2] = v123.f32[3] + v123.f32[0];
          v147 = (int32x4_t)vmulq_f32(v143, v143);
          v143.f32[3] = v124.f32[3] + v124.f32[0];
          v137.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v147, 2), vadd_f32(*(float32x2_t *)v147.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v147.i8, 1))).u32[0];
          *(float32x2_t *)v147.i8 = vrsqrte_f32((float32x2_t)v137.u32[0]);
          *(float32x2_t *)v147.i8 = vmul_f32(*(float32x2_t *)v147.i8, vrsqrts_f32((float32x2_t)v137.u32[0], vmul_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8)));
          v148 = vmulq_n_f32(v143, vmul_f32(*(float32x2_t *)v147.i8, vrsqrts_f32((float32x2_t)v137.u32[0], vmul_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8))).f32[0]);
          v149 = (int8x16_t)vmulq_f32(v130, v148);
          v150 = (int8x16_t)vmulq_f32(v129, vabsq_f32(v148));
          v75 = vaddv_f32(vadd_f32(*(float32x2_t *)v149.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL))) <= (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v150.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL)));
          v151 = (int8x16_t)vmulq_f32(v140, v130);
          v152 = vaddv_f32(vadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL)));
          v153 = (int8x16_t)vmulq_f32(v129, vabsq_f32(v140));
          v154 = -vaddv_f32(vadd_f32(*(float32x2_t *)v153.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL)));
          v155 = v75 || v152 <= v154;
          v156 = (int8x16_t)vmulq_f32(v144, v130);
          v157 = vaddv_f32(vadd_f32(*(float32x2_t *)v156.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL)));
          v158 = (int8x16_t)vmulq_f32(v129, vabsq_f32(v144));
          v159 = -vaddv_f32(vadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)));
          v160 = v155 || v157 <= v159;
          v161 = (int8x16_t)vmulq_f32(v146, v130);
          v162 = vaddv_f32(vadd_f32(*(float32x2_t *)v161.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL)));
          v163 = (int8x16_t)vmulq_f32(v129, vabsq_f32(v146));
          v164 = -vaddv_f32(vadd_f32(*(float32x2_t *)v163.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL)));
          if (v160 || v162 <= v164)
          {
LABEL_149:
            v166 = v189 + 656 * v11;
            if ((*(_BYTE *)(v166 + 129) & 1) != 0)
            {
              v175 = 0;
LABEL_151:
              v167 = (_BYTE *)(v166 + 129);
              if (qword_1ED4B7DB8 != -1)
                swift_once();
              v168 = qword_1ED4D09F8;
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v169 = swift_allocObject();
              *(_OWORD *)(v169 + 16) = xmmword_1B226D240;
              *(_QWORD *)(v169 + 32) = &type metadata for Particle;
              *(_QWORD *)(v169 + 40) = &off_1E63C21B0;
              v243 = v168;
              v244 = 0;
              v245 = 2;
              v246 = 0;
              v247 = 2;
              v248 = 0;
              swift_retain();
              sub_1B1E68AF8(v169, 1, (uint64_t)v202);
              swift_setDeallocating();
              swift_deallocClassInstance();
              swift_release();
              sub_1B1B7AA28();
              v170 = swift_allocObject();
              *(_OWORD *)(v170 + 16) = xmmword_1B226D240;
              swift_retain();
              v171 = sub_1B1A101F0(v11);
              swift_release();
              *(_QWORD *)(v170 + 56) = &type metadata for EmitterReference;
              *(_QWORD *)(v170 + 64) = &off_1E6387218;
              *(_QWORD *)(v170 + 32) = v171;
              sub_1B1E68A14(v170, (uint64_t)&v203);
              swift_setDeallocating();
              sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
              swift_arrayDestroy();
              swift_deallocClassInstance();
              sub_1B19ED720((uint64_t)v202);
              v237 = v203;
              v238 = v204;
              v239 = v205;
              v240 = v206 | 1;
              v241 = v207;
              v242 = v208;
              v98 = v186;
              sub_1B1E8FCE4(v186, (uint64_t)&v237, 0x200000000, v261);
              sub_1B1A18378((uint64_t)v261, (uint64_t)v270, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
              if (*(_QWORD *)&v270[0])
              {
                v217 = v270[2];
                v218 = v270[3];
                v219 = v270[4];
                v220 = v270[5];
                v215 = v270[0];
                v216 = v270[1];
                sub_1B1BEB5D8(v175);
                sub_1B19ED748(v261);
              }
              *v167 = v175;
              swift_retain();
              swift_retain();
              v101 = sub_1B1A101F0(v11);
              swift_release();
              sub_1B204D44C(v101, v175);
              sub_1B19ED720((uint64_t)&v203);
              swift_release();
              v100 = v185;
            }
          }
          else
          {
            v289.columns[0].f32[0] = *(float *)&v121.i32[3] - *(float *)&v121.i32[2];
            v289.columns[0].f32[1] = *(float *)&v122.i32[3] - *(float *)&v122.i32[2];
            v289.columns[0].f32[2] = v123.f32[3] - v123.f32[2];
            v289.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v289.columns[0], (float32x4_t)v289.columns[0]);
            v289.columns[0].f32[3] = v124.f32[3] - v124.f32[2];
            v289.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v289.columns[2], 2), vadd_f32(*(float32x2_t *)v289.columns[2].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v289.columns[2].f32, 1))).u32[0];
            *(float32x2_t *)v289.columns[2].f32 = vrsqrte_f32((float32x2_t)v289.columns[1].u32[0]);
            *(float32x2_t *)v289.columns[2].f32 = vmul_f32(*(float32x2_t *)v289.columns[2].f32, vrsqrts_f32((float32x2_t)v289.columns[1].u32[0], vmul_f32(*(float32x2_t *)v289.columns[2].f32, *(float32x2_t *)v289.columns[2].f32)));
            v172 = vmulq_n_f32((float32x4_t)v289.columns[0], vmul_f32(*(float32x2_t *)v289.columns[2].f32, vrsqrts_f32((float32x2_t)v289.columns[1].u32[0], vmul_f32(*(float32x2_t *)v289.columns[2].f32, *(float32x2_t *)v289.columns[2].f32))).f32[0]);
            v173 = (int8x16_t)vmulq_f32(v130, v172);
            v174 = (int8x16_t)vmulq_f32(v129, vabsq_f32(v172));
            v175 = vaddv_f32(vadd_f32(*(float32x2_t *)v173.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL))) > (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v174.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL)));
            v166 = v189 + 656 * v11;
            if (v175 != *(_BYTE *)(v166 + 129))
              goto LABEL_151;
          }
LABEL_88:
          if (++v11 == v12)
            goto LABEL_84;
        }
      }
    }
    return sub_1B19ED748(v253);
  }
  return result;
}

uint64_t type metadata accessor for EmitterCullingSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1E568C8()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1A14DCC(1, 2, 1, (uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B1E5698C()
{
  return "EmitterCullingSystem";
}

uint64_t sub_1B1E569A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  int v12;
  unint64_t v14;
  uint64_t result;

  v12 = a5;
  v14 = HIDWORD(a5);
  result = sub_1B1CC8DA4((char *)(a1 + 32), *(_QWORD *)(a1 + 16), (char *)(a2 + 32), *(_QWORD *)(a2 + 16), (char *)(a3 + 32), *(_QWORD *)(a3 + 16), (char *)(a4 + 32), *(_QWORD *)(a4 + 16));
  *(_QWORD *)a9 = result;
  *(_DWORD *)(a9 + 8) = v12;
  *(_BYTE *)(a9 + 12) = v14;
  *(_QWORD *)(a9 + 16) = a7;
  *(_BYTE *)(a9 + 24) = a8;
  *(_QWORD *)(a9 + 32) = a6;
  return result;
}

uint64_t sub_1B1E56A28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
}

void sub_1B1E56A34(uint64_t a1)
{
  uint64_t v1;

  sub_1B1E544A8(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(float *)(v1 + 48), *(float *)(v1 + 52));
}

uint64_t sub_1B1E56A54(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;

  LODWORD(a3) = *(_DWORD *)(v3 + 16);
  return sub_1B1E5487C(a1, a3, *(float *)(v3 + 20), a2, *(_QWORD *)(v3 + 24), *(_QWORD **)(v3 + 32));
}

uint64_t sub_1B1E56A74(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v6;
  unint64_t v7;
  char v9;
  unint64_t v10;
  ValueMetadata *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  const void *v23;
  _QWORD *v25;
  uint64_t v29;
  void *__dst;

  v25 = (_QWORD *)result;
  if (a2)
  {
    v6 = a2;
    while (1)
    {
      v7 = __clz(__rbit64(v6));
      if (v7 < 0x40 && ((1 << v7) & v6) != 0)
        v6 &= ~(1 << v7);
      result = sub_1B1C3498C(v7);
      if (result == 28)
        return result;
      v9 = result;
      if ((result - 65) < 0x7Fu)
        break;
      if ((result & 0x80) != 0)
      {
        if (result <= 0xC0u)
          break;
        v10 = 1uLL >> -(char)result;
      }
      else
      {
        if (result >= 0x40u)
          break;
        v10 = 1 << result;
      }
      if ((v10 & ~a3) == 0)
        break;
LABEL_5:
      if (!v6)
        return result;
    }
    v11 = sub_1B1C34734(result);
    v13 = v12;
    v14 = (int *)(a4 + 8 * sub_1B1C34720(v9));
    v15 = v25[2];
    v29 = *((__int16 *)v14 + 3);
    __dst = (void *)(a5 + *v14 + v25[3] * v29);
    v16 = v25[6];
    v17 = v25[7];
    v18 = *(_QWORD *)(v13 + 8);
    v19 = sub_1B1F24AF8((uint64_t)v11);
    v20 = v17 - v16;
    swift_retain();
    v21 = sub_1B1A12038((uint64_t)v11, v13, 0, 0, 0, v15);
    if ((v22 & 1) != 0)
    {
      if (sub_1B1F24B94((uint64_t)v11))
        sub_1B1F24BA8((uint64_t)__dst, 0, v20, (uint64_t)v11, v18);
      else
        sub_1B1F24CC0((uint64_t)__dst, 0, v20, (uint64_t)v11);
    }
    else
    {
      v23 = (const void *)(v21 + v19 * v16);
      if (sub_1B1F24B94((uint64_t)v11))
        memcpy(__dst, v23, v19 * v20);
      else
        sub_1B1F24B20();
    }
    result = swift_release();
    *a6 += v20 * v29;
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1B1E56C94()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1B1E56CC8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1E56D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_1B1E56D20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unsigned __int8 a7@<W6>, uint64_t a8@<X8>)
{
  int v8;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v8 = a6;
  v14 = a7;
  v37 = HIDWORD(a6) & 1;
  sub_1B1E530E0(a5, a6 | (unint64_t)(v37 << 32), (uint64_t)&v39);
  v15 = v39;
  v35 = v41;
  v36 = v40;
  v16 = v42;
  v34 = v43;
  v33 = v44;
  v17 = sub_1B1D16C4C(a2);
  if ((v18 & 1) != 0)
  {
    swift_retain();
    swift_release();
    v22 = v16 & 0xFFFFFFFFFFFFFFF7 | (8 * ((v14 - 1) < 2));
    v23 = v15;
    v29 = v35;
    v28 = v36;
    v24 = v36;
    v25 = v35;
    result = v34;
    v26 = v34;
    v31 = v33;
    v27 = v33;
  }
  else
  {
    v19 = v17;
    sub_1B1B7AA28();
    v32 = v16;
    v20 = a3;
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    *(_QWORD *)(inited + 56) = &type metadata for ParticleClassSpawnID;
    *(_QWORD *)(inited + 64) = &off_1E639C000;
    *(_QWORD *)(inited + 32) = v19;
    swift_retain();
    sub_1B1E68A14(inited, (uint64_t)&v45);
    swift_setDeallocating();
    a3 = v20;
    v16 = v32;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
    swift_arrayDestroy();
    sub_1B19ED720((uint64_t)&v39);
    swift_release();
    v22 = v48 & 0xFFFFFFFFFFFFFFF7 | (8 * ((v14 - 1) < 2));
    v23 = v45;
    v24 = v46;
    v25 = v47;
    v26 = v49;
    v27 = v50;
    v29 = v35;
    v28 = v36;
    result = v34;
    v31 = v33;
  }
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_DWORD *)(a8 + 40) = v8;
  *(_BYTE *)(a8 + 44) = v37;
  *(_BYTE *)(a8 + 45) = v14;
  *(_QWORD *)(a8 + 48) = v15;
  *(_DWORD *)(a8 + 56) = v28;
  *(_BYTE *)(a8 + 60) = v29;
  *(_QWORD *)(a8 + 64) = v16;
  *(_BYTE *)(a8 + 72) = result;
  *(_QWORD *)(a8 + 80) = v31;
  *(_QWORD *)(a8 + 88) = v23;
  *(_DWORD *)(a8 + 96) = v24;
  *(_BYTE *)(a8 + 100) = v25;
  *(_QWORD *)(a8 + 104) = v22;
  *(_BYTE *)(a8 + 112) = v26;
  *(_QWORD *)(a8 + 120) = v27;
  return result;
}

unint64_t sub_1B1E56F5C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unsigned __int8 v4;

  v1 = HIDWORD(a1) & 0x7FFFFFFF;
  if (a1 < 0)
  {
    v2 = 0;
  }
  else
  {
    v1 = 0;
    v2 = 1;
  }
  if (a1 == -1)
    v3 = 0;
  else
    v3 = v1;
  if (a1 == -1)
    v4 = 1;
  else
    v4 = v2;
  return v3 | ((unint64_t)v4 << 32);
}

ValueMetadata *type metadata accessor for IsSubEntityOf()
{
  return &type metadata for IsSubEntityOf;
}

ValueMetadata *type metadata accessor for WorldFromScene()
{
  return &type metadata for WorldFromScene;
}

ValueMetadata *type metadata accessor for ParticleIDToIndexTable()
{
  return &type metadata for ParticleIDToIndexTable;
}

uint64_t sub_1B1E56FDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  _BYTE v18[32];
  _BYTE v19[32];

  v3 = v1;
  sub_1B1E581D0(0, &qword_1EEF5F650, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v17[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5818C();
  sub_1B222A180();
  v18[0] = 0;
  sub_1B2229934();
  if (!v2)
  {
    sub_1B1E5822C(v3 + 8, (uint64_t)v19);
    sub_1B1E5822C((uint64_t)v19, (uint64_t)v18);
    v17[15] = 1;
    sub_1B1A0DBF0(0, v11, v12, v13);
    sub_1B1BC374C((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C, v14, v15);
    sub_1B2229904();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1E57138(char *a1, char *a2)
{
  return sub_1B1F9667C(*a1, *a2);
}

uint64_t sub_1B1E57144()
{
  _BYTE *v0;

  if (*v0)
    return 0x6576727563;
  else
    return 0x797469636F6C6576;
}

uint64_t sub_1B1E5717C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E57338(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E571A0()
{
  sub_1B1E5818C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E571C8()
{
  sub_1B1E5818C();
  return sub_1B222A1E0();
}

double sub_1B1E571F0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_1B1E57FDC(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1E57234(_QWORD *a1)
{
  return sub_1B1E56FDC(a1);
}

uint64_t sub_1B1E5726C()
{
  return type metadata accessor for ParticleAngleEvolutionSystem();
}

double sub_1B1E57288()
{
  uint64_t v0;
  double result;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleAngle;
  *(_QWORD *)(v0 + 40) = &off_1E637BD88;
  return result;
}

void sub_1B1E572E4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1036831949;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

uint64_t type metadata accessor for ParticleAngleEvolutionSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E57324()
{
  return "ParticleAngleEvolution";
}

uint64_t sub_1B1E57338(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6576727563 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t *sub_1B1E57420(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  float v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  float *v24;
  float v25;
  int v26;
  uint64_t v27;
  float *v28;
  _DWORD *v29;
  float v30;
  int v31;
  float v32;
  float v33;
  __int128 v34;
  int32x2_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float32x4_t *v52;
  unint64_t v53;
  float32x4_t v54;
  unint64_t v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float32x4_t *v60;
  unint64_t v61;
  float32x4_t v62;
  uint64_t v63;
  float *v64;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  int32x2_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[4];
  char v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93[8];
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _BYTE v102[8];
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE v113[56];

  v2 = 0;
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD **)(a1 + 8);
  swift_retain_n();
  sub_1B1D191C0(v3, (uint64_t)v88);
  v5 = *(float *)v88;
  v6 = v88[1];
  v8 = v88[2];
  v7 = v88[3];
  v9 = v89;
  swift_release();
  sub_1B19F66A0((uint64_t)v88, (uint64_t)v102, &qword_1EEF5F638);
  if (v103 != 1)
  {
    if (!v6)
    {
      v10 = v5;
      goto LABEL_24;
    }
    v11 = *(_OWORD *)(a1 + 104);
    v110 = *(_OWORD *)(a1 + 88);
    v111 = v11;
    v112 = *(_QWORD *)(a1 + 120);
    sub_1B19F27F0((uint64_t)&v90);
    v107 = v90;
    v108 = v91;
    v109 = v92;
    sub_1B1E8FCE4(v4, (uint64_t)&v107, 0x200000000, v93);
    sub_1B19F66A0((uint64_t)v93, (uint64_t)&v94, (unint64_t *)&qword_1ED4B7DE0);
    if (!(_QWORD)v94)
    {
      sub_1B19ED720((uint64_t)&v90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (v101 <= 0 || (v75 = v98) == 0)
    {
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_60:
      sub_1B19ED720((uint64_t)&v90);
      swift_release();
      sub_1B19ED748(v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_1B19ED748(v93);
    }
    v12 = v100[4];
    v13 = *(_BYTE *)(v99 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v104 = v94;
    v105 = v95;
    v71 = v97;
    v106 = v96;
    v85 = v100;
    v68 = v100 + 8;
    v69 = (uint64_t)(v100 + 6);
    swift_retain();
    swift_retain();
    swift_retain();
    v14 = 0;
    v73 = v13;
    v66 = v7;
    v67 = v12;
    while (1)
    {
      v83 = v14;
      v15 = (unsigned int *)(v71 + 48 * v14);
      v79 = *v15;
      v77 = v15[1];
      v16 = *((_QWORD *)v15 + 3);
      v81 = (uint64_t *)*((_QWORD *)v15 + 2);
      v17 = *((_QWORD *)v15 + 4);
      v18 = *((_QWORD *)v15 + 5);
      if ((v13 & 1) != 0)
      {
        v19 = *(os_unfair_lock_s **)(v18 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v12);
      sub_1B19F66A0(v69, (uint64_t)v113, &qword_1ED4B7FB0);
      v20 = v85[4];
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v85[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
      v85[7] = v21;
      v68[1] = 0;
      v68[2] = 0;
      *v68 = 0;
      swift_release();
      v22 = (_DWORD *)sub_1B1A12038((uint64_t)&type metadata for ParticleAngle, (uint64_t)&off_1E637BD88, v81, v16, v17, (uint64_t)v85);
      v23 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v81, v16, v17, (uint64_t)v85);
      v24 = (float *)v23;
      if (v81)
      {
        if (v17)
        {
          v12 = v67;
          do
          {
            v25 = *v24++;
            sub_1B1FFCF6C(v6, v8, v66, v9, v25);
            *v22++ = v26;
            --v17;
          }
          while (v17);
          goto LABEL_21;
        }
      }
      else if ((_DWORD)v79 != (_DWORD)v77)
      {
        v27 = v77 - v79;
        v28 = (float *)(v23 + 4 * v79);
        v29 = &v22[v79];
        v12 = v67;
        do
        {
          v30 = *v28++;
          sub_1B1FFCF6C(v6, v8, v66, v9, v30);
          *v29++ = v31;
          --v27;
        }
        while (v27);
        goto LABEL_21;
      }
      v12 = v67;
LABEL_21:
      sub_1B1F05D48(v85, (unsigned __int16 **)&v104, (uint64_t)v113);
      sub_1B1F03804((char *)v18);
      ecs_stack_allocator_pop_snapshot(v12);
      v13 = v73;
      if ((v73 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
      }
      swift_release();
      v14 = v83 + 1;
      if (v83 + 1 == v75)
        goto LABEL_60;
    }
  }
  v10 = 0.1;
LABEL_24:
  sub_1B1E5267C();
  v33 = v32;
  v34 = *(_OWORD *)(a1 + 104);
  v110 = *(_OWORD *)(a1 + 88);
  v111 = v34;
  v112 = *(_QWORD *)(a1 + 120);
  sub_1B1B70D3C((uint64_t)&v90);
  v107 = v90;
  v108 = v91;
  v109 = v92;
  sub_1B1E8FCE4(v4, (uint64_t)&v107, 0x200000000, v93);
  sub_1B19F66A0((uint64_t)v93, (uint64_t)&v94, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v94)
  {
    sub_1B19ED720((uint64_t)&v90);
    return (uint64_t *)swift_release();
  }
  if (v101 <= 0 || (v84 = v98) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)&v90);
    goto LABEL_57;
  }
  *(float *)v35.i32 = v10 * v33;
  v72 = v35;
  v36 = v100;
  v37 = v100[4];
  v38 = *(_BYTE *)(v99 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v104 = v94;
  v105 = v95;
  v106 = v96;
  v80 = (uint64_t)(v100 + 6);
  v82 = v97;
  v78 = v100 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v39 = 0;
  v70 = (float32x4_t)vdupq_lane_s32(v72, 0);
  v76 = v38;
  v74 = v37;
  do
  {
    v40 = (unsigned int *)(v82 + 48 * v39);
    v41 = *v40;
    v86 = v40[1];
    v87 = v2;
    v43 = (uint64_t *)*((_QWORD *)v40 + 2);
    v42 = *((_QWORD *)v40 + 3);
    v45 = *((_QWORD *)v40 + 4);
    v44 = *((_QWORD *)v40 + 5);
    if ((v38 & 1) != 0)
    {
      v46 = *(os_unfair_lock_s **)(v44 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v46);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v44 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v37);
    sub_1B19F66A0(v80, (uint64_t)v113, &qword_1ED4B7FB0);
    v47 = v36[4];
    v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v36[6] = ecs_stack_allocator_allocate(v47, 48 * v48, 8);
    v36[7] = v48;
    v78[1] = 0;
    v78[2] = 0;
    *v78 = 0;
    swift_release();
    v49 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngle, (uint64_t)&off_1E637BD88, v43, v42, v45, (uint64_t)v36);
    if (v43)
    {
      v38 = v76;
      if (v45)
      {
        if (v45 >= 8)
        {
          v50 = v45 & 0xFFFFFFFFFFFFFFF8;
          v52 = (float32x4_t *)(v49 + 16);
          v53 = v45 & 0xFFFFFFFFFFFFFFF8;
          v2 = v87;
          v37 = v74;
          do
          {
            v54 = vaddq_f32(v70, *v52);
            v52[-1] = vaddq_f32(v70, v52[-1]);
            *v52 = v54;
            v52 += 2;
            v53 -= 8;
          }
          while (v53);
          v51 = *(float *)v72.i32;
          if (v45 == v50)
            goto LABEL_52;
        }
        else
        {
          v50 = 0;
          v2 = v87;
          v51 = *(float *)v72.i32;
          v37 = v74;
        }
        v55 = v45 - v50;
        v56 = (float *)(v49 + 4 * v50);
        do
        {
          *v56 = v51 + *v56;
          ++v56;
          --v55;
        }
        while (v55);
      }
      else
      {
        v2 = v87;
        v37 = v74;
      }
    }
    else if ((_DWORD)v41 == (_DWORD)v86)
    {
      v2 = v87;
      v37 = v74;
      v38 = v76;
    }
    else
    {
      v57 = v86 - v41;
      if ((unint64_t)(v86 - v41) >= 8)
      {
        v58 = (v57 & 0xFFFFFFFFFFFFFFF8) + v41;
        v60 = (float32x4_t *)(v49 + 4 * v41 + 16);
        v61 = v57 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v62 = vaddq_f32(v70, *v60);
          v60[-1] = vaddq_f32(v70, v60[-1]);
          *v60 = v62;
          v60 += 2;
          v61 -= 8;
        }
        while (v61);
        v2 = v87;
        v59 = *(float *)v72.i32;
        v37 = v74;
        v38 = v76;
        if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_52;
      }
      else
      {
        v58 = v41;
        v2 = v87;
        v59 = *(float *)v72.i32;
        v37 = v74;
        v38 = v76;
      }
      v63 = v86 - v58;
      v64 = (float *)(v49 + 4 * v58);
      do
      {
        *v64 = v59 + *v64;
        ++v64;
        --v63;
      }
      while (v63);
    }
LABEL_52:
    sub_1B1F05D48(v36, (unsigned __int16 **)&v104, (uint64_t)v113);
    sub_1B1F03804((char *)v44);
    ecs_stack_allocator_pop_snapshot(v37);
    if ((v38 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v44 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v44 + 376));
    }
    swift_release();
    ++v39;
  }
  while (v39 != v84);
  sub_1B19ED720((uint64_t)&v90);
LABEL_57:
  swift_release();
  sub_1B19ED748(v93);
  return sub_1B19ED748(v93);
}

uint64_t destroy for ParticleAngleEvolution(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ParticleAngleEvolution(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *v3 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)v3 + 9) = *(_OWORD *)(a2 + 17);
  }
  return a1;
}

uint64_t assignWithCopy for ParticleAngleEvolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  v9 = (_OWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    }
    else
    {
      sub_1B1E57E44((uint64_t)v6, a2, a3, a4);
      v10 = *(_OWORD *)((char *)v9 + 9);
      *v6 = *v9;
      *(_OWORD *)((char *)v6 + 9) = v10;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *v9;
    *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(a2 + 17);
    *v6 = v11;
  }
  return a1;
}

uint64_t sub_1B1E57E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_1B1A0DBF0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t assignWithTake for ParticleAngleEvolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  if (!v6)
  {
    sub_1B1E57E44((uint64_t)v5, a2, a3, a4);
LABEL_5:
    *v5 = *v7;
    *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)v7 + 9);
    return a1;
  }
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleAngleEvolution(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleAngleEvolution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAngleEvolution()
{
  return &type metadata for ParticleAngleEvolution;
}

uint64_t sub_1B1E57FDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  __int128 v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  sub_1B1E581D0(0, &qword_1EEF5F640, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5818C();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v23) = 0;
  sub_1B22297F0();
  v12 = v11;
  sub_1B1A0DBF0(0, v13, v14, v15);
  v22 = 1;
  sub_1B1BC374C((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94, v16, v17);
  sub_1B22297B4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v21 = v23;
  v18 = v24;
  v19 = v25;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v12;
  *(_OWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 32) = v19;
  return result;
}

unint64_t sub_1B1E5818C()
{
  unint64_t result;

  result = qword_1EEF5F648;
  if (!qword_1EEF5F648)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229939C, &type metadata for ParticleAngleEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F648);
  }
  return result;
}

void sub_1B1E581D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E5818C();
    v7 = a3(a1, &type metadata for ParticleAngleEvolution.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B1E5822C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, (unint64_t *)&qword_1EEF60220, (uint64_t (*)(uint64_t))sub_1B1A0DBF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ParticleAngleEvolution.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1E582D4 + 4 * byte_1B22991C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1E58308 + 4 * byte_1B22991C0[v4]))();
}

uint64_t sub_1B1E58308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E58310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E58318);
  return result;
}

uint64_t sub_1B1E58324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E5832CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1E58330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E58338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAngleEvolution.CodingKeys()
{
  return &type metadata for ParticleAngleEvolution.CodingKeys;
}

unint64_t sub_1B1E58358()
{
  unint64_t result;

  result = qword_1EEF5F658;
  if (!qword_1EEF5F658)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2299374, &type metadata for ParticleAngleEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F658);
  }
  return result;
}

unint64_t sub_1B1E583A0()
{
  unint64_t result;

  result = qword_1EEF5F660;
  if (!qword_1EEF5F660)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22992E4, &type metadata for ParticleAngleEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F660);
  }
  return result;
}

unint64_t sub_1B1E583E8()
{
  unint64_t result;

  result = qword_1EEF5F668;
  if (!qword_1EEF5F668)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229930C, &type metadata for ParticleAngleEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5F668);
  }
  return result;
}

void sub_1B1E5842C()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1E58474()
{
  return type metadata accessor for EasingNode(0);
}

uint64_t type metadata accessor for EasingNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F670);
}

uint64_t sub_1B1E58490@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000050;
  *(_QWORD *)(v4 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  v6 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6383A38;
  a1[3] = v6;
  a1[4] = v6;
  a1[5] = v6;
  return result;
}

uint64_t sub_1B1E58570()
{
  return type metadata accessor for EasingFloatNode(0);
}

uint64_t type metadata accessor for EasingFloatNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F680);
}

uint64_t sub_1B1E5858C()
{
  return 0x7361456369627543;
}

unint64_t sub_1B1E585AC()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1E585C8()
{
  return type metadata accessor for CubicEaseInNode(0);
}

uint64_t type metadata accessor for CubicEaseInNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F690);
}

uint64_t sub_1B1E585E4()
{
  return 0x7361456369627543;
}

unint64_t sub_1B1E58604()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1E58620()
{
  return type metadata accessor for CubicEaseOutNode(0);
}

uint64_t type metadata accessor for CubicEaseOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F6A0);
}

uint64_t sub_1B1E5863C()
{
  return 0x7361456369627543;
}

unint64_t sub_1B1E58660()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1E5867C()
{
  return type metadata accessor for CubicEaseInOutNode(0);
}

uint64_t type metadata accessor for CubicEaseInOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F6B0);
}

uint64_t sub_1B1E58698()
{
  return 0x6974617264617551;
}

unint64_t sub_1B1E586BC()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1E586D8()
{
  return type metadata accessor for QuadraticEaseInNode(0);
}

uint64_t type metadata accessor for QuadraticEaseInNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F6C0);
}

unint64_t sub_1B1E586F4()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1E58710()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1E5872C()
{
  return type metadata accessor for QuadraticEaseOutNode(0);
}

uint64_t type metadata accessor for QuadraticEaseOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F6D0);
}

unint64_t sub_1B1E58748()
{
  return 0xD000000000000012;
}

unint64_t sub_1B1E58764()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1E58780()
{
  return type metadata accessor for QuadraticEaseInOutNode(0);
}

uint64_t type metadata accessor for QuadraticEaseInOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F6E0);
}

uint64_t sub_1B1E5879C()
{
  return 0x4563697472617551;
}

unint64_t sub_1B1E587C0()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1E587DC()
{
  return type metadata accessor for QuarticEaseInNode(0);
}

uint64_t type metadata accessor for QuarticEaseInNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F6F0);
}

uint64_t sub_1B1E587F8()
{
  return 0x4563697472617551;
}

unint64_t sub_1B1E5881C()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1E58838()
{
  return type metadata accessor for QuarticEaseOutNode(0);
}

uint64_t type metadata accessor for QuarticEaseOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F700);
}

unint64_t sub_1B1E58854()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1E58870()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1E5888C()
{
  return type metadata accessor for QuarticEaseInOutNode(0);
}

uint64_t type metadata accessor for QuarticEaseInOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F710);
}

uint64_t sub_1B1E588A8()
{
  return 0x456369746E697551;
}

unint64_t sub_1B1E588CC()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1E588E8()
{
  return type metadata accessor for QuinticEaseInNode(0);
}

uint64_t type metadata accessor for QuinticEaseInNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F720);
}

uint64_t sub_1B1E58904()
{
  return 0x456369746E697551;
}

unint64_t sub_1B1E58928()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1E58944()
{
  return type metadata accessor for QuinticEaseOutNode(0);
}

uint64_t type metadata accessor for QuinticEaseOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F730);
}

unint64_t sub_1B1E58960()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1E5897C()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1E58998()
{
  return type metadata accessor for QuinticEaseInOutNode(0);
}

uint64_t type metadata accessor for QuinticEaseInOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F740);
}

uint64_t sub_1B1E589B4()
{
  return 0x657361456E6953;
}

unint64_t sub_1B1E589CC(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD00000000000001ELL;
  else
    return 0xD000000000000022;
}

uint64_t sub_1B1E58A08()
{
  return type metadata accessor for SinEaseInNode(0);
}

uint64_t type metadata accessor for SinEaseInNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F750);
}

uint64_t sub_1B1E58A24()
{
  return 0x4F657361456E6953;
}

unint64_t sub_1B1E58A40(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD00000000000001ALL;
  else
    return 0xD00000000000001BLL;
}

uint64_t sub_1B1E58A7C()
{
  return type metadata accessor for SinEaseOutNode(0);
}

uint64_t type metadata accessor for SinEaseOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F760);
}

uint64_t sub_1B1E58A98()
{
  return 0x49657361456E6953;
}

unint64_t sub_1B1E58AB8(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD00000000000001FLL;
  else
    return 0xD000000000000023;
}

uint64_t sub_1B1E58AF4()
{
  return type metadata accessor for SinEaseInOutNode(0);
}

uint64_t type metadata accessor for SinEaseInOutNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F770);
}

uint64_t sub_1B1E58B10()
{
  return 0x746E656E6F707845;
}

uint64_t sub_1B1E58B34@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1E58C44((uint64_t)&unk_1E6397CF8, (uint64_t)&unk_1E6397CB8, a1);
}

unint64_t sub_1B1E58B48(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000034;
  else
    return 0xD000000000000036;
}

uint64_t sub_1B1E58B84()
{
  return type metadata accessor for ExponentialEaseNode(0);
}

uint64_t type metadata accessor for ExponentialEaseNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F780);
}

uint64_t sub_1B1E58BA0()
{
  return 0x6C61636973796850;
}

uint64_t sub_1B1E58BC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1E58DB0(0x8000000000000030, (uint64_t)&unk_1E638A188, (uint64_t)&unk_1E638A128, a1);
}

unint64_t sub_1B1E58BDC()
{
  return 0xD000000000000036;
}

uint64_t sub_1B1E58BF8()
{
  return type metadata accessor for PhysicalEaseNode(0);
}

uint64_t type metadata accessor for PhysicalEaseNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F790);
}

uint64_t sub_1B1E58C14()
{
  return 0x7361457265776F50;
}

uint64_t sub_1B1E58C30@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1E58C44((uint64_t)&unk_1E637CAA8, (uint64_t)&unk_1E637CA68, a1);
}

uint64_t sub_1B1E58C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  sub_1B1E58F20();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000050;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0x8000000000000050;
  *(_QWORD *)(v6 + 40) = v8 | 0x6000000000000000;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000050;
  *(_QWORD *)(v9 + 32) = result | 0x6000000000000000;
  *a3 = v6;
  a3[1] = v9;
  a3[2] = a1;
  a3[3] = a2;
  v11 = MEMORY[0x1E0DEE9D8];
  a3[4] = MEMORY[0x1E0DEE9D8];
  a3[5] = v11;
  return result;
}

unint64_t sub_1B1E58D40()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1E58D5C()
{
  return type metadata accessor for PowerEaseNode(0);
}

uint64_t type metadata accessor for PowerEaseNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5F7A0);
}

uint64_t sub_1B1E58D78()
{
  return 0x614565636E756F42;
}

uint64_t sub_1B1E58D94@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1E58DB0(0x8000000000000050, (uint64_t)&unk_1E637E398, (uint64_t)&unk_1E637E338, a1);
}

uint64_t sub_1B1E58DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  sub_1B1E58F20();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B227BE30;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0x8000000000000050;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0x8000000000000050;
  *(_QWORD *)(v8 + 40) = v10 | 0x6000000000000000;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0x8000000000000050;
  *(_QWORD *)(v8 + 48) = v11 | 0x6000000000000000;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v8 + 56) = v12 | 0x6000000000000000;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000050;
  *(_QWORD *)(v13 + 32) = result | 0x6000000000000000;
  *a4 = v8;
  a4[1] = v13;
  a4[2] = a2;
  a4[3] = a3;
  v15 = MEMORY[0x1E0DEE9D8];
  a4[4] = MEMORY[0x1E0DEE9D8];
  a4[5] = v15;
  return result;
}

unint64_t sub_1B1E58EE8()
{
  return 0xD000000000000031;
}

uint64_t sub_1B1E58F04()
{
  return type metadata accessor for BounceEaseNode(0);
}

uint64_t type metadata accessor for BounceEaseNode(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1EEF5F7B0);
}

void sub_1B1E58F20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CB90)
  {
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CB90);
  }
}

uint64_t sub_1B1E58F74()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1E58F98()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B1E58FA0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1B1E59038(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((v6 + ((v5 + 24) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v10 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + v5 + 8) & ~v5;
    v13 = ((unint64_t)v11 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    v14 = (_QWORD *)((v6 + v12) & 0xFFFFFFFFFFFFF8);
    v15 = (_QWORD *)((v6 + v13) & 0xFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
    *v16 = *v17;
    *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t sub_1B1E59168(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

unint64_t sub_1B1E59194(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

unint64_t sub_1B1E5925C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

unint64_t sub_1B1E59324(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

unint64_t sub_1B1E593EC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B1E594B4(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  BOOL v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0xFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 8) & ~v7);
    }
    else
    {
      v12 = *(unsigned __int8 *)a1;
      v13 = v12 >= 2;
      v14 = (v12 + 2147483646) & 0x7FFFFFFF;
      if (v13)
        return (v14 + 1);
      else
        return 0;
    }
  }
  else
  {
    if (((((((((*(_QWORD *)(v4 + 64) + ((v7 + 24) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B1E59550 + 4 * byte_1B2299620[v10]))();
  }
}

void sub_1B1E595E4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 24) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 24) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + ((v7 + 24) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1B1E596FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1B1E59704(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B1E5970CLL);
}

void sub_1B1E59754()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1B1E5975C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1B1E59764@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
LABEL_2:
    JUMPOUT(0x1B1E5976CLL);
  if (a2 <= 0xFE)
  {
    *(_BYTE *)v6 = a1 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))(((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                + v5
                                                                + 8) & a3);
}

uint64_t type metadata accessor for UnsafeHashTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeHashTable);
}

uint64_t type metadata accessor for HandleTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HandleTable);
}

uint64_t sub_1B1E597A0()
{
  swift_release();
  return swift_release();
}

_QWORD *sub_1B1E597C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_1B1E597FC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1B1E59858(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for HandleArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HandleArray);
}

uint64_t getEnumTagSinglePayload for MeshRenderSystemState(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshRenderSystemState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t type metadata accessor for UnsafeArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeArray);
}

void sub_1B1E59930()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B1E59940()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_1B216D560(v1);
    v3 = *(_QWORD *)(v1 + 16) - 1;
    v4 = *(unsigned int *)(v1 + 4 * v3 + 32);
    *(_QWORD *)(v1 + 16) = v3;
    *v0 = v1;
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t sub_1B1E599C0()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  if (!(*v0 >> 62))
  {
    if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v3)
    return 0;
LABEL_3:
  result = sub_1B1E5B068((uint64_t (*)(uint64_t))sub_1B1FFEE30);
  if (!result)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      v2 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v2 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    return sub_1B1DBA1A8(v2 - 1);
  }
  return result;
}

void (*sub_1B1E59A84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  sub_1B1E5AA24(a2, a3, v10, a5);
  v9[4] = sub_1B2229154();
  return sub_1B1D5F13C;
}

uint64_t sub_1B1E59B0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))(*v3 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * *a2, a1);
}

double (*sub_1B1E59B34())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1E59B58()
{
  return sub_1B217BCDC();
}

uint64_t (*sub_1B1E59B98(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_1B216D7B4(v8, a2, a3, a4);
  return sub_1B1C6BBC4;
}

uint64_t sub_1B1E59BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299880, a3);
  return sub_1B22286BC();
}

uint64_t sub_1B1E59C70()
{
  MEMORY[0x1B5E23E74](&unk_1B2299950);
  return sub_1B2228D1C();
}

uint64_t sub_1B1E59CC0(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x1B5E23E74](&unk_1B2299950);
  result = sub_1B2228D1C();
  *a1 = v3;
  return result;
}

uint64_t sub_1B1E59D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299950, a3);
  return sub_1B2228D28();
}

uint64_t sub_1B1E59D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1B5E23E74](&unk_1B2299950, a4);
  return sub_1B2228D04();
}

uint64_t sub_1B1E59DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299950, a3);
  return sub_1B2228D40();
}

void sub_1B1E59E3C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t sub_1B1E59E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B22998E0);
  return sub_1B216DA28(a1, a2, v6, a3);
}

uint64_t sub_1B1E59E90(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299950, a1);
  return sub_1B2228D34();
}

__n128 sub_1B1E59EE4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1B1E59EFC(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22997A0, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B1E59F30(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22997A0, a1);
  return sub_1B2228DAC();
}

uint64_t sub_1B1E59F84()
{
  return MEMORY[0x1B5E2052C]();
}

uint64_t sub_1B1E59FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2[3];
  if (v4 == v2[2])
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, *v2 + *(_QWORD *)(v10 + 72) * v4, v9);
    v2[3] = v4 + 1;
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v7 = a2;
    v8 = 0;
    v5 = v9;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1B1E5A050()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1E5A060()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1E5A070(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299880);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1B1E5A0B8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22998E0);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1B1E5A100()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1E5A110(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299950);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_1B1E5A158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  v7 = type metadata accessor for UnsafeArray(0, a4, a3, a4);
  MEMORY[0x1B5E23E74](&unk_1B22997A0, v7);
  sub_1B2228DE8();
  v14 = v17;
  v15 = v18;
  v16 = v19;
  v13[2] = a4;
  v8 = sub_1B222A03C();
  v9 = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE48], v8);
  v11 = sub_1B1D5E618((void (*)(char *, char *))sub_1B1E5B3BC, (uint64_t)v13, v8, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v17 = 0x3A63287961727241;
  *((_QWORD *)&v17 + 1) = 0xE800000000000000;
  *(_QWORD *)&v14 = a3;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  *(_QWORD *)&v14 = a2;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  *(_QWORD *)&v14 = v11;
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v17;
}

uint64_t sub_1B1E5A374@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = sub_1B22287AC();
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_1B1E5A3F8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1E5A158(*v1, v1[1], v1[2], *(_QWORD *)(a1 + 16));
}

uint64_t sub_1B1E5A40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  sub_1B217BCDC();
  MEMORY[0x1B5E23E74](&unk_1B2299AEC, a3);
  v5 = sub_1B222A03C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t sub_1B1E5A480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299BCC, a3);
  return sub_1B22286BC();
}

uint64_t sub_1B1E5A4F0()
{
  MEMORY[0x1B5E23E74](&unk_1B2299C9C);
  return sub_1B2228D1C();
}

uint64_t sub_1B1E5A540(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x1B5E23E74](&unk_1B2299C9C);
  result = sub_1B2228D1C();
  *a1 = v3;
  return result;
}

uint64_t sub_1B1E5A5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299C9C, a3);
  return sub_1B2228D28();
}

uint64_t sub_1B1E5A604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1B5E23E74](&unk_1B2299C9C, a4);
  return sub_1B2228D04();
}

uint64_t sub_1B1E5A668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299C9C, a3);
  return sub_1B2228D40();
}

uint64_t sub_1B1E5A6BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1A66964();
  *a1 = result;
  return result;
}

uint64_t (*sub_1B1E5A6E0(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1B1E5A73C(v6, *a2, a3);
  return sub_1B1C6BBC4;
}

uint64_t (*sub_1B1E5A73C(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  return sub_1B1E5A7AC;
}

uint64_t sub_1B1E5A7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B2299C2C);
  return sub_1B216DA28(a1, a2, v6, a3);
}

uint64_t sub_1B1E5A7F8(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299C9C, a1);
  return sub_1B2228D34();
}

uint64_t sub_1B1E5A848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x1B5E23E74](&unk_1B2299AEC, a1);
  result = sub_1B22295F8();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_1B1E5A8A8(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299AEC, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B1E5A8DC(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299AEC, a1);
  return sub_1B2228DAC();
}

BOOL sub_1B1E5A914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a3 < a6;
}

BOOL sub_1B1E5A920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a3 == a6;
}

BOOL sub_1B1E5A92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1E5A914(a1, a2, *(_QWORD *)(a1 + 16), a4, a5, *(_QWORD *)(a2 + 16));
}

BOOL sub_1B1E5A944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1E5A920(a1, a2, *(_QWORD *)(a1 + 16), a4, a5, *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B1E5A950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for UnsafeSparseMutableBufferPointer.BufferAndStart(0, a4, a3, a4);
  v5 = sub_1B2229580();
  if (v5 < 1)
    return 0;
  v6 = v5;
  v7 = 0;
  while (1)
  {
    while (1)
    {
      v8 = v7 + (v6 - v7) / 2;
      sub_1B22295B0();
      if (v11 <= a1)
        break;
      v6 = v7 + (v6 - v7) / 2;
      if (v7 >= v8)
        return 0;
    }
    if (v11 + v10 > a1)
      break;
    v7 = v8 + 1;
    if (v8 + 1 >= v6)
      return 0;
  }
  return v8;
}

uint64_t sub_1B1E5AA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_1B1E5A950(a1, a2, a3, a4);
  type metadata accessor for UnsafeSparseMutableBufferPointer.BufferAndStart(0, a4, v5, v6);
  sub_1B22295B0();
  return v8;
}

uint64_t (*sub_1B1E5AA84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a5 - 8);
  *a1 = a5;
  a1[1] = v9;
  v10 = malloc(*(_QWORD *)(v9 + 64));
  a1[2] = (uint64_t)v10;
  v12 = sub_1B1E5AA24(a2, a3, v11, a5);
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v10, v12 + (a2 - v13) * *(_QWORD *)(v9 + 72), a5);
  return sub_1B1E5A7AC;
}

void sub_1B1E5AB0C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1B1E5AB3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *);
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v6 = *v3;
  v5 = v3[1];
  v7 = *(_QWORD *)(a3 + 16);
  v8 = sub_1B1E59A84(v12, *a2, v6, v5, v7);
  v9 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v10, a1, v7);
  ((void (*)(_QWORD *, _QWORD))v8)(v12, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v7);
}

uint64_t (*sub_1B1E5ABBC(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = sub_1B1E59A84(v7, *a2, *v3, v3[1], *(_QWORD *)(a3 + 16));
  return sub_1B1C6BBC4;
}

uint64_t sub_1B1E5AC1C()
{
  sub_1B217BCDC();
  return swift_release();
}

uint64_t sub_1B1E5AC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299DE8, a3);
  return sub_1B22286BC();
}

uint64_t (*sub_1B1E5ACC8(uint64_t **a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;

  v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)sub_1B1E5AA84(v7, *a2, *v3, v8, *(_QWORD *)(a3 + 16));
  return sub_1B1C6BBC4;
}

uint64_t sub_1B1E5AD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B2299F78);
  return sub_1B216DA28(a1, a2, v6, a3);
}

uint64_t sub_1B1E5AD70(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299F28, a1);
  return sub_1B2228D34();
}

uint64_t sub_1B1E5ADBC()
{
  MEMORY[0x1B5E23E74](&unk_1B2299F28);
  return sub_1B2228D10();
}

_QWORD *sub_1B1E5AE0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E5AE74(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

uint64_t sub_1B1E5AE18()
{
  MEMORY[0x1B5E23E74](&unk_1B2299F28);
  return sub_1B2228D1C();
}

_QWORD *sub_1B1E5AE68(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E5AE74(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

_QWORD *sub_1B1E5AE74(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x1B5E23E74](&unk_1B2299F28);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

uint64_t sub_1B1E5AED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299F28, a3);
  return sub_1B2228D28();
}

uint64_t sub_1B1E5AF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1B5E23E74](&unk_1B2299F28, a4);
  return sub_1B2228D04();
}

uint64_t sub_1B1E5AFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2299F28, a3);
  return sub_1B2228D40();
}

uint64_t sub_1B1E5AFF4(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299E48, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B1E5B028(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2299E48, a1);
  return sub_1B2228DAC();
}

uint64_t sub_1B1E5B05C()
{
  return sub_1B1E5B068((uint64_t (*)(uint64_t))sub_1B1FFEE30);
}

uint64_t sub_1B1E5B068(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = a1(v3);
    *v1 = v3;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) - 1;
  v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
  *(_QWORD *)(v5 + 16) = v6;
  sub_1B2228AD0();
  return v7;
}

unint64_t sub_1B1E5B0D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  uint64_t v19;
  int v20;

  v11 = sub_1B1E59940();
  if ((v11 & 0x100000000) != 0)
  {
    v14 = *a1;
    v12 = *(unsigned int *)(*a1 + 16);
    v20 = *(_DWORD *)(*a1 + 16);
    sub_1B1DA8A6C(&v20, a2, a4, a5, a6, &v19);
    v13 = v19;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a1 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B202A060(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v14 = *a1;
    }
    v15 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    if (v15 >= v17 >> 1)
    {
      sub_1B202A060(v17 > 1, v15 + 1, 1);
      v14 = *a1;
    }
    *(_QWORD *)(v14 + 16) = v15 + 1;
  }
  else
  {
    v12 = v11;
    v20 = v11;
    sub_1B1DA8A6C(&v20, a2, a4, a5, a6, &v19);
    v13 = v19;
    v14 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = sub_1B216D54C(v14);
    v15 = (int)v12;
  }
  *(_QWORD *)(v14 + 8 * v15 + 32) = v13;
  *a1 = v14;
  return v12;
}

unint64_t sub_1B1E5B224(uint64_t *a1, uint64_t a2, unint64_t a3, int a4, char a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;

  v9 = sub_1B1E59940();
  if ((v9 & 0x100000000) != 0)
  {
    v13 = *a1;
    v10 = *(unsigned int *)(*a1 + 16);
    type metadata accessor for ComponentsDataChunk();
    swift_allocObject();
    v15 = swift_retain();
    v12 = sub_1B1A102A0(v15, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5 & 1, v10);
    swift_retain();
    _swift_stdlib_immortalize();
    swift_release();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a1 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B202A034(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = *a1;
    }
    v14 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    if (v14 >= v17 >> 1)
    {
      sub_1B202A034(v17 > 1, v14 + 1, 1);
      v13 = *a1;
    }
    *(_QWORD *)(v13 + 16) = v14 + 1;
  }
  else
  {
    v10 = v9;
    type metadata accessor for ComponentsDataChunk();
    swift_allocObject();
    v11 = swift_retain();
    v12 = sub_1B1A102A0(v11, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5 & 1, v10);
    swift_retain();
    _swift_stdlib_immortalize();
    swift_release();
    v13 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1B216D524(v13);
    v14 = (int)v10;
  }
  *(_QWORD *)(v13 + 8 * v14 + 32) = v12;
  *a1 = v13;
  return v10;
}

uint64_t sub_1B1E5B3BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1E5A374(a1, a2);
}

uint64_t type metadata accessor for UnsafeSparseMutableBufferPointer.BufferAndStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeSparseMutableBufferPointer.BufferAndStart);
}

uint64_t type metadata accessor for UnsafeArray.UnsafeArrayIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeArray.UnsafeArrayIterator);
}

uint64_t sub_1B1E5B3F0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B1E5B47C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 24) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v9 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
    v10 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFF8);
    *v9 = *v10;
    v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v11 + v5 + 8) & ~v5, ((unint64_t)v12 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_1B1E5B544(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *sub_1B1E5B574(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_1B1E5B5E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_1B1E5B65C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_1B1E5B6D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1B1E5B744(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 1)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      else
        return *a1 == 0;
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1E5B814 + 4 * byte_1B229962F[(v9 - 1)]))();
}

void sub_1B1E5B890(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 1u)
    v6 = 1;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for UnsafeDynamicArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeDynamicArray);
}

void sub_1B1E5BAA4()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1E5BAB4()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1E5BAC4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299BCC);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1B1E5BB0C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299C2C);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1B1E5BB54()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1E5BB64(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299C9C);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE40], a1, &v3);
}

void sub_1B1E5BBAC()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t type metadata accessor for UnsafeSparseMutableBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeSparseMutableBufferPointer);
}

void sub_1B1E5BBC8()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1E5BBD8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299DE8);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_1B1E5BC20()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1E5BC30()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1E5BC40(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299F28);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_1B1E5BC88(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2299F78);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1B1E5BCF4(char *a1)
{
  sub_1B1F91B88(*a1);
}

void sub_1B1E5BD00()
{
  char *v0;

  sub_1B1FB29F0(*v0);
}

void sub_1B1E5BD08()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1E5BD50()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1E5BDAC(uint64_t a1)
{
  char *v1;

  sub_1B1DB5CBC(a1, *v1);
}

uint64_t sub_1B1E5BDB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E5C21C();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E5BDE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1E5BE1C + 4 * byte_1B2299FF4[*v0]))();
}

void sub_1B1E5BE1C(_QWORD *a1@<X8>)
{
  *a1 = 0x6144656372756F73;
  a1[1] = 0xEA00000000006174;
}

void sub_1B1E5BE3C(_QWORD *a1@<X8>)
{
  *a1 = 0x6144746567726174;
  a1[1] = 0xEA00000000006174;
}

void sub_1B1E5BE5C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001B2328960;
}

uint64_t sub_1B1E5BE7C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1E5BEB8 + 4 * byte_1B2299FF8[*v0]))(0x6D45656372756F73, 0xED00007265747469);
}

uint64_t sub_1B1E5BEB8()
{
  return 0x6144656372756F73;
}

unint64_t sub_1B1E5BEE4()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1E5BF00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E5C21C();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E5BF24()
{
  sub_1B1E5D98C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E5BF4C()
{
  sub_1B1E5D98C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E5BF74(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  int v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v16 = a5;
  v17 = a3;
  sub_1B1E5DA58(0, &qword_1EEF5FB60, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v16 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5D98C();
  sub_1B222A180();
  v24 = a2;
  v23 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v5)
  {
    v14 = BYTE1(v17);
    v22 = v17;
    v21 = 1;
    sub_1B1E5DAB4();
    sub_1B2229958();
    v20 = v14;
    v19 = 2;
    sub_1B1E5DAF8();
    sub_1B2229958();
    v18 = 3;
    sub_1B22298F8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B1E5C138()
{
  return type metadata accessor for ParticleCopyDataSystem();
}

uint64_t sub_1B1E5C154@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int16 v5;
  uint64_t v6;
  char v7;

  result = sub_1B1E5D784(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_WORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_1B1E5C198(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1E5BF74(a1, *(_QWORD *)v1, *(unsigned __int16 *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

double sub_1B1E5C1C4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleCopyDataSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E5C208()
{
  return "ParticleCopyData";
}

uint64_t sub_1B1E5C21C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t *sub_1B1E5C264(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Color;
  *(_QWORD *)(inited + 40) = &off_1E63BA208;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BF21DC((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5C494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Orientation;
  *(_QWORD *)(inited + 40) = &off_1E63715B8;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BF1490((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5C6C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BEEBFC((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5C8F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for UserData1;
  *(_QWORD *)(inited + 40) = &off_1E63C5878;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BF0DD0((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5CB24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for UserData2;
  *(_QWORD *)(inited + 40) = &off_1E63C5A70;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BF0710((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5CD54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for UserData3;
  *(_QWORD *)(inited + 40) = &off_1E63C5C68;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BF0050((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5CF84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for UserData4;
  *(_QWORD *)(inited + 40) = &off_1E63C5E60;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BEF990((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t *sub_1B1E5D1B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  _BYTE v20[40];
  uint64_t v21[12];
  _OWORD v22[6];
  _OWORD v23[7];

  v10 = a3;
  v13 = HIDWORD(a3);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Velocity;
  *(_QWORD *)(inited + 40) = &off_1E63C3148;
  v15 = sub_1B2228B0C();
  *(_QWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 32) = 1;
  sub_1B1E569A0(inited, v15, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1B7AA28();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v16 + 64) = &off_1E6387218;
  *(_DWORD *)(v16 + 32) = v10;
  *(_DWORD *)(v16 + 36) = v13;
  sub_1B1E68A14(v16, (uint64_t)v20);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v19);
  sub_1B1E8FCE4(a6, (uint64_t)v20, 0x200000000, v21);
  sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (!*(_QWORD *)&v22[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v20);
  v23[2] = v22[2];
  v23[3] = v22[3];
  v23[4] = v22[4];
  v23[5] = v22[5];
  v23[0] = v22[0];
  v23[1] = v22[1];
  sub_1B1BEE528(a7);
  swift_retain();
  sub_1B1BEF2D0((unsigned __int16 **)v23, a7, a1, a2, a6, a4, a5 & 1, (uint64_t)v23);
  swift_release();
  sub_1B1B4F21C(a7);
  sub_1B19ED720((uint64_t)v20);
  return sub_1B19ED748(v21);
}

uint64_t sub_1B1E5D3E4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  unint64_t v9;
  __int16 v10;

  v1 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(int *)(a1 + 8);
  swift_retain_n();
  v4 = (_DWORD)v3 == -1 && v2 == 0;
  if (v4
    || (v3 & 0x80000000) != 0
    || *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v3
    || (v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v2 != -1)
    && *(_DWORD *)(v5 + 12 * (int)v3 + 8) != v2)
  {
    swift_release();
LABEL_10:
    LODWORD(v6) = 0;
    LOBYTE(v7) = 3;
    goto LABEL_11;
  }
  v9 = sub_1B1D20780(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_DWORD *)(v5 + 12 * (int)v3), *(_WORD *)(v5 + 12 * (int)v3 + 4), 32, v1);
  v7 = v10;
  swift_release();
  if ((v7 & 0xFF00) == 0x400)
    goto LABEL_10;
  v6 = HIDWORD(v9);
  if ((_DWORD)v9 != -1)
LABEL_15:
    __asm { BR              X12 }
LABEL_11:
  if ((_DWORD)v6)
    goto LABEL_15;
  return swift_release();
}

void sub_1B1E5D528(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5C264((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D560(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5C494((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D598(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5C6C4((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D5D0(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5C8F4((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D608(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5CB24((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D640(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5CD54((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D678(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5CF84((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

void sub_1B1E5D6B0(char a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_1B1E5D1B4((uint64_t)off_1E63F2220[v2], (uint64_t)off_1E63F2240[v2], v6 | (unint64_t)(a2 << 32), v5, a1, v3, v4);
  JUMPOUT(0x1B1E5D48CLL);
}

uint64_t getEnumTagSinglePayload for ParticleCopyData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleCopyData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCopyData()
{
  return &type metadata for ParticleCopyData;
}

uint64_t sub_1B1E5D784(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD v11[2];
  char v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  uint64_t v17;

  sub_1B1E5DA58(0, &qword_1EEF5FB40, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B1E5D98C();
  sub_1B222A150();
  if (!v1)
  {
    v16 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v17;
    v15 = 1;
    sub_1B1E5D9D0();
    sub_1B2229814();
    v13 = 2;
    sub_1B1E5DA14();
    sub_1B2229814();
    v11[1] = v14;
    v12 = 3;
    sub_1B22297A8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B1E5D98C()
{
  unint64_t result;

  result = qword_1EEF5FB48;
  if (!qword_1EEF5FB48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A1F0, &type metadata for ParticleCopyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB48);
  }
  return result;
}

unint64_t sub_1B1E5D9D0()
{
  unint64_t result;

  result = qword_1EEF5FB50;
  if (!qword_1EEF5FB50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A09D8, &type metadata for SourceDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB50);
  }
  return result;
}

unint64_t sub_1B1E5DA14()
{
  unint64_t result;

  result = qword_1EEF5FB58;
  if (!qword_1EEF5FB58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0B00, &type metadata for TargetDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB58);
  }
  return result;
}

void sub_1B1E5DA58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E5D98C();
    v7 = a3(a1, &type metadata for ParticleCopyData.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1B1E5DAB4()
{
  unint64_t result;

  result = qword_1EEF5FB68;
  if (!qword_1EEF5FB68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A09B0, &type metadata for SourceDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB68);
  }
  return result;
}

unint64_t sub_1B1E5DAF8()
{
  unint64_t result;

  result = qword_1EEF5FB70;
  if (!qword_1EEF5FB70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0AD8, &type metadata for TargetDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB70);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleCopyData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1E5DB88 + 4 * byte_1B229A009[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1E5DBBC + 4 * a8ftb[v4 + 4]))();
}

uint64_t sub_1B1E5DBBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E5DBC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E5DBCCLL);
  return result;
}

uint64_t sub_1B1E5DBD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E5DBE0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1E5DBE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E5DBEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleCopyData.CodingKeys()
{
  return &type metadata for ParticleCopyData.CodingKeys;
}

unint64_t sub_1B1E5DC0C()
{
  unint64_t result;

  result = qword_1EEF5FB78;
  if (!qword_1EEF5FB78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A1C8, &type metadata for ParticleCopyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB78);
  }
  return result;
}

unint64_t sub_1B1E5DC54()
{
  unint64_t result;

  result = qword_1EEF5FB80;
  if (!qword_1EEF5FB80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A100, &type metadata for ParticleCopyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB80);
  }
  return result;
}

unint64_t sub_1B1E5DC9C()
{
  unint64_t result;

  result = qword_1EEF5FB88;
  if (!qword_1EEF5FB88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A128, &type metadata for ParticleCopyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB88);
  }
  return result;
}

uint64_t sub_1B1E5DCE0@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3[0] = 0xD000000000000015;
  v3[1] = 0x80000001B2339120;
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = MEMORY[0x1E0DEE9D8];
  v3[5] = 0xD000000000000018;
  v3[6] = 0x80000001B233F670;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = MEMORY[0x1E0DEE9D8];
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  nullsub_16(v3);
  return sub_1B19F66A0((uint64_t)v3, a1, &qword_1ED4B8CF8);
}

id sub_1B1E5DD80(float a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[3];
  _BYTE v24[48];
  _OWORD v25[2];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)a6;
  v10 = *(_DWORD *)(a6 + 36);
  v11 = *(int *)(a6 + 32);
  swift_retain();
  v12 = (_DWORD)v11 == -1 && v10 == 0;
  if (v12
    || (v11 & 0x80000000) != 0
    || *(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v11
    || (v13 = *(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v10 != -1)
    && *(_DWORD *)(v13 + 12 * (int)v11 + 8) != v10
    || (sub_1B1D1F214(*(_QWORD *)(*(_QWORD *)(v9 + 136) + 8 * *(int *)(v13 + 12 * (int)v11) + 32), *(_DWORD *)(v13 + 12 * (int)v11), *(_WORD *)(v13 + 12 * (int)v11 + 4), 32, v9, (uint64_t)v24), sub_1B19F66A0((uint64_t)v24, (uint64_t)v25, &qword_1ED4BA220), (v26 & 1) != 0))
  {
    swift_release();
    return 0;
  }
  else
  {
    v21 = v25[1];
    v22 = v25[0];
    swift_retain();
    v14 = (id)sub_1B1D22DA8(0, 64);
    v17 = v16;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v23[0] = 0;
      v23[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v18 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v23[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v18, v23, 0xD000000000000049, 0x80000001B23390D0);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      v19 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v14 = v14;
      v20 = &v19[v17];
      *(_OWORD *)v20 = v22;
      *((_OWORD *)v20 + 1) = v21;
      *((float *)v20 + 8) = a1;
      *((_QWORD *)v20 + 5) = 0;
      *((_DWORD *)v20 + 9) = 0;
      *((float *)v20 + 12) = a2;
      *((float *)v20 + 13) = a3;
      swift_release();
    }
    swift_release();
  }
  return v14;
}

uint64_t sub_1B1E5E060(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  sub_1B1E5E6BC(0, &qword_1EEF5FBA0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5E678();
  sub_1B222A180();
  v10[15] = 0;
  sub_1B2229934();
  if (!v1)
  {
    v10[14] = 1;
    sub_1B2229934();
    v10[13] = 2;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1E5E1BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F97E74(*a1, *a2);
}

uint64_t sub_1B1E5E1C8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x656E68746F6F6D73;
}

uint64_t sub_1B1E5E234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E5E398(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E5E258()
{
  sub_1B1E5E678();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E5E280()
{
  sub_1B1E5E678();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E5E2A8()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(7);
  *(_QWORD *)(v0 + 88) = sub_1B1E5DCE0;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

double sub_1B1E5E2FC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = 4;
  *(_QWORD *)(a2 + 32) = 14;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a2 + 16) = xmmword_1B2246910;
  return result;
}

id sub_1B1E5E31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;

  return sub_1B1E5DD80(*v3, v3[1], v3[2], a1, a2, a3);
}

void sub_1B1E5E328(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;

  v4 = sub_1B1E5E4EC(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
  }
}

uint64_t sub_1B1E5E354(_QWORD *a1)
{
  return sub_1B1E5E060(a1);
}

double sub_1B1E5E370@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1036831949;
  *(_QWORD *)a1 = 1036831949;
  *(_DWORD *)(a1 + 8) = 1092616192;
  return result;
}

ValueMetadata *type metadata accessor for ParticleVolumetricRenderer()
{
  return &type metadata for ParticleVolumetricRenderer;
}

uint64_t sub_1B1E5E398(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E68746F6F6D73 && a2 == 0xEA00000000007373;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B232E2B0 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B232E2D0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

float sub_1B1E5E4EC(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  sub_1B1E5E6BC(0, &qword_1EEF5FB90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5E678();
  sub_1B222A150();
  if (!v1)
  {
    v15 = 0;
    sub_1B22297F0();
    v2 = v10;
    v14 = 1;
    sub_1B22297F0();
    v13 = 2;
    sub_1B22297F0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1E5E678()
{
  unint64_t result;

  result = qword_1EEF5FB98;
  if (!qword_1EEF5FB98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A3F0, &type metadata for ParticleVolumetricRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FB98);
  }
  return result;
}

void sub_1B1E5E6BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E5E678();
    v7 = a3(a1, &type metadata for ParticleVolumetricRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleVolumetricRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1E5E764 + 4 * byte_1B229A255[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1E5E798 + 4 * byte_1B229A250[v4]))();
}

uint64_t sub_1B1E5E798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E5E7A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E5E7A8);
  return result;
}

uint64_t sub_1B1E5E7B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E5E7BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1E5E7C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E5E7C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleVolumetricRenderer.CodingKeys()
{
  return &type metadata for ParticleVolumetricRenderer.CodingKeys;
}

unint64_t sub_1B1E5E7E8()
{
  unint64_t result;

  result = qword_1EEF5FBA8;
  if (!qword_1EEF5FBA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A3C8, &type metadata for ParticleVolumetricRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBA8);
  }
  return result;
}

unint64_t sub_1B1E5E830()
{
  unint64_t result;

  result = qword_1EEF5FBB0;
  if (!qword_1EEF5FBB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A338, &type metadata for ParticleVolumetricRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBB0);
  }
  return result;
}

unint64_t sub_1B1E5E878()
{
  unint64_t result;

  result = qword_1EEF5FBB8;
  if (!qword_1EEF5FBB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A360, &type metadata for ParticleVolumetricRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBB8);
  }
  return result;
}

uint64_t sub_1B1E5E8BC(_QWORD *a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  float v14;
  float v15;

  sub_1B1E5EEB8(0, &qword_1EEF5FBC0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5EE74();
  sub_1B222A180();
  v14 = a2;
  v15 = a3;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1E5E9E4()
{
  sub_1B1E5EE74();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E5EA0C()
{
  sub_1B1E5EE74();
  return sub_1B222A1E0();
}

void sub_1B1E5EA34(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B1E5ED10(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1E5EA5C(_QWORD *a1)
{
  float *v1;

  return sub_1B1E5E8BC(a1, *v1, v1[1]);
}

uint64_t sub_1B1E5EA74()
{
  return type metadata accessor for ParticleAngleInit.System();
}

double sub_1B1E5EA90()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleAngle;
  *(_QWORD *)(v0 + 40) = &off_1E637BD88;
  return result;
}

uint64_t type metadata accessor for ParticleAngleInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1E5EAF4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  float v5;
  float v6;

  v1 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v2 = sub_1B1D17B24(v1);
  v4 = v3;
  swift_release();
  v6 = *((float *)&v2 + 1);
  v5 = *(float *)&v2;
  if ((v4 & 1) != 0)
  {
    v5 = -3.1416;
    v6 = 3.1416;
  }
  return sub_1B1D87BAC(v5, v6);
}

const char *sub_1B1E5EB74()
{
  return "SetAngle.CPU";
}

uint64_t type metadata accessor for ParticleAngleInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E5EBAC()
{
  return "SetAngle.GPU";
}

uint64_t sub_1B1E5EBC0()
{
  return type metadata accessor for ParticleAngleInit.GPUSystem();
}

uint64_t sub_1B1E5EBDC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[2];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D17B24(v3);
  v7 = v6;
  swift_release();
  v9 = *((float *)&v5 + 1);
  v8 = *(float *)&v5;
  if ((v7 & 1) != 0)
  {
    v8 = -3.1416;
    v9 = 3.1416;
  }
  *(float *)v18 = v8;
  *(float *)&v18[1] = v9;
  v10 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_angle_uniforms(0);
    sub_1B1F40E1C((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD000000000000012, 0x80000001B233F700, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleAngleInit()
{
  return &type metadata for ParticleAngleInit;
}

float sub_1B1E5ED10(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD v11[3];

  sub_1B1E5EEB8(0, &qword_1ED4BAB58, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E5EE74();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = *(float *)&v11[2];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1E5EE74()
{
  unint64_t result;

  result = qword_1ED4B90A8;
  if (!qword_1ED4B90A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A638, &type metadata for ParticleAngleInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B90A8);
  }
  return result;
}

void sub_1B1E5EEB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E5EE74();
    v7 = a3(a1, &type metadata for ParticleAngleInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleAngleInit.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1E5EF54 + 4 * byte_1B229A440[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1E5EF74 + 4 * byte_1B229A445[v4]))();
}

_BYTE *sub_1B1E5EF54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1E5EF74(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E5EF7C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E5EF84(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E5EF8C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E5EF94(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAngleInit.CodingKeys()
{
  return &type metadata for ParticleAngleInit.CodingKeys;
}

unint64_t sub_1B1E5EFB4()
{
  unint64_t result;

  result = qword_1EEF5FBC8;
  if (!qword_1EEF5FBC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A610, &type metadata for ParticleAngleInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBC8);
  }
  return result;
}

unint64_t sub_1B1E5EFFC()
{
  unint64_t result;

  result = qword_1ED4B90B8;
  if (!qword_1ED4B90B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A580, &type metadata for ParticleAngleInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B90B8);
  }
  return result;
}

unint64_t sub_1B1E5F044()
{
  unint64_t result;

  result = qword_1ED4B90B0;
  if (!qword_1ED4B90B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A5A8, &type metadata for ParticleAngleInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B90B0);
  }
  return result;
}

void sub_1B1E5F088(const float *a1, uint64_t a2)
{
  switch(a2)
  {
    case 9:
      sub_1B1AE4138(*(_DWORD *)a1);
      break;
    case 12:
      __asm
      {
        FMOV            V1.4S, #-1.0
        FMOV            V1.4S, #1.0
      }
      break;
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 51:
    case 52:
      return;
    case 25:
      sub_1B189E3A8(*(unsigned __int16 *)a1);
      sub_1B189E3A8(*((unsigned __int16 *)a1 + 1));
      break;
    case 40:
    case 41:
      vld1q_dup_f32(a1);
      break;
    case 53:
      sub_1B189E3A8(*(unsigned __int16 *)a1);
      break;
    default:
      sub_1B2229430();
      sub_1B2228890();
      type metadata accessor for MTLVertexFormat(0);
      sub_1B22295EC();
      sub_1B2229688();
      __break(1u);
      break;
  }
}

uint64_t *sub_1B1E5F478(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float *v23;
  float v24;
  uint64_t v25;
  float *v26;
  float32x4_t *v27;
  float v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[148];
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43[8];
  _OWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE v51[40];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  swift_retain();
  v3 = sub_1B1B72CEC();
  sub_1B1EE00B0((uint64_t)v3, v4, v5, v6, 32, (uint64_t)v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(v1 + 32);
  v41[0] = *(_OWORD *)(v1 + 16);
  v41[1] = v7;
  v42 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(v2, (uint64_t)v41, 0x200000000, v43);
  sub_1B19F66A0((uint64_t)v43, (uint64_t)v44, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v44[0])
    return (uint64_t *)swift_release();
  if (v50 <= 0)
  {
    swift_release();
  }
  else
  {
    v34 = v47;
    if (v47)
    {
      v8 = v49;
      v9 = v49[4];
      v37 = *(_BYTE *)(v48 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v39[0] = v44[0];
      v39[1] = v44[1];
      v40 = v45;
      v31 = (uint64_t)(v49 + 6);
      v32 = v46;
      v30 = v49 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v10 = 0;
      v11 = 0;
      v33 = v9;
      while (1)
      {
        v12 = (unsigned int *)(v32 + 48 * v10);
        v13 = *v12;
        v15 = (uint64_t *)*((_QWORD *)v12 + 2);
        v14 = *((_QWORD *)v12 + 3);
        v17 = *((_QWORD *)v12 + 4);
        v16 = *((_QWORD *)v12 + 5);
        v35 = v12[1];
        v36 = v11;
        if ((v37 & 1) != 0)
        {
          v18 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B19F66A0(v31, (uint64_t)v51, &qword_1ED4B7FB0);
        v19 = v8[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v8[7] = v20;
        v30[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        swift_release();
        v21 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v15, v14, v17, (uint64_t)v8);
        v22 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v15, v14, v17, (uint64_t)v8);
        v23 = (float *)v22;
        if (v15)
        {
          if (!v17)
            goto LABEL_15;
          v11 = v36;
          do
          {
            v24 = *v23++;
            *v21 = vmulq_n_f32(*v21, fminf(fmaxf(sample_curve((uint64_t)v38, v24), 0.0), 1.0));
            ++v21;
            --v17;
          }
          while (v17);
        }
        else
        {
          if ((_DWORD)v13 == (_DWORD)v35)
          {
LABEL_15:
            v11 = v36;
            goto LABEL_18;
          }
          v25 = v35 - v13;
          v26 = (float *)(v22 + 4 * v13);
          v27 = &v21[v13];
          v11 = v36;
          do
          {
            v28 = *v26++;
            *v27 = vmulq_n_f32(*v27, fminf(fmaxf(sample_curve((uint64_t)v38, v28), 0.0), 1.0));
            ++v27;
            --v25;
          }
          while (v25);
        }
LABEL_18:
        sub_1B1F05D48(v8, (unsigned __int16 **)v39, (uint64_t)v51);
        sub_1B1F03804((char *)v16);
        v9 = v33;
        ecs_stack_allocator_pop_snapshot(v33);
        if ((v37 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        if (++v10 == v34)
          goto LABEL_24;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_24:
    swift_release();
    sub_1B19ED748(v43);
  }
  return sub_1B19ED748(v43);
}

uint64_t type metadata accessor for ParticleOpacityOverLife.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1E5F898(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v22 = a5;
  sub_1B1E6019C(0, &qword_1EEF5FBD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v21 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E60158();
  sub_1B222A180();
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  sub_1B1A0DBF0(0, v15, v16, v17);
  sub_1B1BC374C((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C, v18, v19);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

const char *sub_1B1E5F9D4()
{
  return "OpacityOverLife";
}

uint64_t sub_1B1E5F9E8()
{
  return 0x6576727563;
}

uint64_t sub_1B1E5F9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6576727563 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1E5FA88()
{
  sub_1B1E60158();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E5FAB0()
{
  sub_1B1E60158();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1E5FAD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1B1E5FFF4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1B1E5FB08(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1E5F898(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1B1E5FB28()
{
  return type metadata accessor for ParticleOpacityOverLife.System();
}

double sub_1B1E5FB44()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v0 + 32) = &type metadata for TransientOriginColor;
  *(_QWORD *)(v0 + 40) = &off_1E639F7A8;
  *(_QWORD *)(v0 + 48) = &type metadata for Color;
  *(_QWORD *)(v0 + 56) = &off_1E63BA190;
  return result;
}

char *sub_1B1E5FB9C@<X0>(uint64_t a1@<X8>)
{
  char *result;
  uint64_t v3;

  result = sub_1B21451EC((uint64_t)&unk_1E63ABAF8);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleOpacityOverLife.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E5FBF8()
{
  return "ParticleOpacityOverLife.GPU";
}

uint64_t sub_1B1E5FC0C()
{
  return type metadata accessor for ParticleOpacityOverLife.GPUSystem();
}

uint64_t sub_1B1E5FC28(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  BOOL v9;
  BOOL v10;
  void *v11;
  id v12;
  __int128 v14;
  __int128 v15;

  v14 = *(_OWORD *)(a1 + 16);
  v15 = *(_OWORD *)(a1 + 48);
  v2 = sub_1B1B72CEC();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1B1E5371C();
  v9 = sub_1B1E36538((uint64_t)&type metadata for ParticleAge);
  swift_release();
  if (v9 && (sub_1B1E5371C(), v10 = sub_1B1E36538((uint64_t)&type metadata for ParticleLifetime), swift_release(), v10))
  {
    swift_retain();
    v11 = sub_1B20E1C70((uint64_t)v2, v4, v6, v8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = *(id *)a1;
    if (*(_QWORD *)a1)
      objc_msgSend(*(id *)a1, sel_setTexture_atIndex_, v11, 0);
    swift_retain();
    sub_1B1B1FC34(a1);
    sub_1B1FE6FB8(v15, v14, v12 == 0, 0, a1, 0xD00000000000001ALL, 0x80000001B233F7E0, 0);
    sub_1B1B1FC88(a1);
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t destroy for KeyframeTimeline()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyframeTimeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyframeTimeline(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for KeyframeTimeline(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTimeline(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyframeTimeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityOverLife()
{
  return &type metadata for ParticleOpacityOverLife;
}

_QWORD *sub_1B1E5FFF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  sub_1B1E6019C(0, &qword_1ED4BABF8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v16 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1E60158();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A0DBF0(0, v10, v11, v12);
    sub_1B1BC374C((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94, v13, v14);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v9 = v16;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B1E60158()
{
  unint64_t result;

  result = qword_1ED4B99D0;
  if (!qword_1ED4B99D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A8CC, &type metadata for ParticleOpacityOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B99D0);
  }
  return result;
}

void sub_1B1E6019C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1E60158();
    v7 = a3(a1, &type metadata for ParticleOpacityOverLife.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityOverLife.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1E60238 + 4 * byte_1B229A6C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1E60258 + 4 * byte_1B229A6C5[v4]))();
}

_BYTE *sub_1B1E60238(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1E60258(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E60260(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E60268(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E60270(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E60278(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityOverLife.CodingKeys()
{
  return &type metadata for ParticleOpacityOverLife.CodingKeys;
}

unint64_t sub_1B1E60298()
{
  unint64_t result;

  result = qword_1EEF5FBD8;
  if (!qword_1EEF5FBD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A8A4, &type metadata for ParticleOpacityOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBD8);
  }
  return result;
}

unint64_t sub_1B1E602E0()
{
  unint64_t result;

  result = qword_1ED4B99E0;
  if (!qword_1ED4B99E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A814, &type metadata for ParticleOpacityOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B99E0);
  }
  return result;
}

unint64_t sub_1B1E60328()
{
  unint64_t result;

  result = qword_1ED4B99D8;
  if (!qword_1ED4B99D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A83C, &type metadata for ParticleOpacityOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B99D8);
  }
  return result;
}

uint64_t sub_1B1E6036C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  if ((a2 & 0x100000000) != 0)
  {
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B2229B98();
  }
  else
  {
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B2229B98();
    if (!v2)
    {
      sub_1B19FC264((uint64_t)v5, v6);
      sub_1B2229B8C();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B1E604AC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
    return sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A09C();
}

BOOL sub_1B1E60514(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  char v4;
  int v6;
  char v7;

  v2 = *(float *)a1;
  v3 = *(float *)a2;
  if (*(_BYTE *)(a1 + 4) == 1)
  {
    if (v2 == 0.0)
    {
      if (v3 == 0.0)
        v6 = *(unsigned __int8 *)(a2 + 4);
      else
        LOBYTE(v6) = 0;
      if ((v6 & 1) != 0)
        return 1;
    }
    else if (LODWORD(v2) == 1)
    {
      if (LODWORD(v3) == 1)
        v4 = *(_BYTE *)(a2 + 4);
      else
        v4 = 0;
      if ((v4 & 1) != 0)
        return 1;
    }
    else
    {
      if (LODWORD(v3) > 1)
        v7 = *(_BYTE *)(a2 + 4);
      else
        v7 = 0;
      if ((v7 & 1) != 0)
        return 1;
    }
  }
  else if ((*(_BYTE *)(a2 + 4) & 1) == 0)
  {
    return v2 == v3;
  }
  return 0;
}

uint64_t sub_1B1E60598()
{
  unsigned int *v0;
  uint64_t v1;
  unsigned __int8 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 4);
  sub_1B222A06C();
  sub_1B1E604AC((uint64_t)v4, v1 | ((unint64_t)v2 << 32));
  return sub_1B222A0C0();
}

uint64_t sub_1B1E605E8(uint64_t a1)
{
  unsigned int *v1;

  return sub_1B1E604AC(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

uint64_t sub_1B1E60608()
{
  unsigned int *v0;
  uint64_t v1;
  unsigned __int8 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 4);
  sub_1B222A06C();
  sub_1B1E604AC((uint64_t)v4, v1 | ((unint64_t)v2 << 32));
  return sub_1B222A0C0();
}

unint64_t sub_1B1E60654@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B1E606B4(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_1B1E60684(_QWORD *a1)
{
  unsigned int *v1;

  return sub_1B1E6036C(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

unint64_t sub_1B1E606B4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  _BYTE v8[40];
  _BYTE v9[24];
  uint64_t v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v9, v10);
  v3 = sub_1B2229A90();
  v5 = v3;
  if (v3 >= 3)
  {
    if (v3 == 3)
    {
      sub_1B19FC264((uint64_t)v9, v10);
      sub_1B2229A84();
      v6 = 0;
      v5 = v7;
      goto LABEL_6;
    }
    sub_1B19FA198((uint64_t)v9, (uint64_t)v8);
    sub_1B22294CC();
    swift_allocError();
    sub_1B222949C();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  v6 = 1;
LABEL_6:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v9[0] = v6;
  return v5 | ((unint64_t)v6 << 32);
}

ValueMetadata *type metadata accessor for BlendMode()
{
  return &type metadata for BlendMode;
}

unint64_t sub_1B1E60844()
{
  unint64_t result;

  result = qword_1EEF5FBE0;
  if (!qword_1EEF5FBE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229A9B8, &type metadata for BlendMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBE0);
  }
  return result;
}

uint64_t sub_1B1E60888()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StringDumper()
{
  return objc_opt_self();
}

id sub_1B1E608D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  os_unfair_recursive_lock_lock_with_options();
  if (*(_BYTE *)(v2 + 120) == 1)
    return (id)os_unfair_recursive_lock_unlock();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(_QWORD **)(v2 + 72);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 72) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_1B1C62B5C(0, v7[2] + 1, 1, v7);
    *(_QWORD *)(v2 + 72) = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
    v7 = sub_1B1C62B5C(v9 > 1, v10 + 1, 1, v7);
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = sub_1B1DB39F8;
  v11[5] = v6;
  *(_QWORD *)(v2 + 72) = v7;
  os_unfair_recursive_lock_unlock();
  return sub_1B1E64B50();
}

uint64_t sub_1B1E609E0(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_1B1E61948(a1, a2);
}

void sub_1B1E609F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B19E974C(a2);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E60AE0(uint64_t a1, unint64_t a2, char *a3, void *a4)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B19E9EB4(a2, a3, (uint64_t)a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E60BD8(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, float a6)
{
  _DWORD *is_locked;
  _DWORD *v13;
  uint64_t (*v14)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v14 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B19EA4E8(a2, (uint64_t)a3, a4 & 1, a5, a6);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v13 = (_DWORD *)v14(&runtime_thread_is_locked);
  --*v13;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E60D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _DWORD *is_locked;
  _DWORD *v11;
  uint64_t (*v12)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v12 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B19EA77C(a2, a3, a4, (uint64_t)a5);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v12(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E60E04(uint64_t a1, void *a2)
{
  sub_1B1E62108(a1, a2, (void (*)(void *))sub_1B19EABB8);
}

void sub_1B1E60E20(uint64_t a1, void *a2, double a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1DA645C(0, 1, a3);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E60F10(uint64_t a1, void *a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1E711EC(0x200000000);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v6 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v6;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E60FEC(uint64_t a1, _BYTE *a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B179207C();
  sub_1B1E7192C();
  if (*(_BYTE *)(*(_QWORD *)&a2[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions]
                + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate) == 1)
  {
    a2[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 1;
    sub_1B1E71CBC();
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v6 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v6;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E6110C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  void *v8;
  _DWORD *v9;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  v8 = (void *)MEMORY[0x1B5E22F20](Strong);
  sub_1B1E73664(a2);
  if (v2)
  {
    objc_autoreleasePoolPop(v8);
    __break(1u);
  }
  else
  {
    objc_autoreleasePoolPop(v8);
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    swift_release();
  }
}

void sub_1B1E6120C(uint64_t a1, void *a2)
{
  sub_1B1E63810(a1, a2, (void (*)(uint64_t))sub_1B1E71CBC);
}

uint64_t sub_1B1E61228(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  _QWORD *v8;
  pthread_mutex_t *v9;
  uint64_t (*v10)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v12;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v9 = *(pthread_mutex_t **)(a1 + 64);
  swift_retain();
  swift_retain();
  pthread_mutex_lock(v9);
  v10 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1790CB8(a2, a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v12 = (_DWORD *)v10(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B1E61354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t (*v11)(_QWORD);
  _DWORD *is_locked;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _DWORD *v16;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v11 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v13 = sub_1B1FF36E8(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
  if ((v14 & 1) == 0)
  {
    v15 = v13;
    if ((a6 & 1) != 0)
      sub_1B1FE1E1C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CB80, v13, 0);
    else
      sub_1B1FE16DC((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CB80, v13);
    sub_1B1DA8680(v15, a6 & 1);
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v16 = (_DWORD *)v11(&runtime_thread_is_locked);
  --*v16;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1B1E6149C(uint64_t a1, id *a2, void *a3, int a4)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1C2C874(a2, a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E61590(uint64_t a1, void *a2, char *a3, id *a4)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1C2CA08((uint64_t)a2, a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E61688(uint64_t a1, char *a2, char *a3)
{
  _DWORD *is_locked;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t (*v12)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v12 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1B688C8(*(unsigned int *)&a3[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)a3[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), 0, 1);
  v7 = &a2[OBJC_IVAR____TtC3VFX8VFXScene_effects];
  v8 = a3;
  v9 = sub_1B1DADDD8(v7, (uint64_t)v8);

  if (*(_QWORD *)v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  sub_1B1C9301C(v9, v10);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v12(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E6182C(uint64_t a1, void *a2)
{
  sub_1B1E62108(a1, a2, (void (*)(void *))sub_1B1C2CD40);
}

void sub_1B1E61848(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v10 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  *a2 = sub_1B1FF9A8C(a4, a5);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v12 = (_DWORD *)v10(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();

}

uint64_t sub_1B1E61948(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  _DWORD *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  a2(Strong);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v7 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v7;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return swift_release();
}

void sub_1B1E61A1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, id *a5)
{
  _DWORD *is_locked;
  _DWORD *v11;
  uint64_t (*v12)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v12 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1DBBA1C((uint64_t)a2, a3, a4, a5);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v12(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();

}

void sub_1B1E61B2C(uint64_t a1, char *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t (*v11)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  uint64_t v14;
  void *v15;
  _DWORD *v16;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v11 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  v14 = *(_QWORD *)&a2[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v15 = (void *)MEMORY[0x1B5E22F20](Strong);
  sub_1B1E733F4(v14, a3, a5, a4);
  if (v5)
  {
    objc_autoreleasePoolPop(v15);
    __break(1u);
  }
  else
  {
    objc_autoreleasePoolPop(v15);
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v16 = (_DWORD *)v11(&runtime_thread_is_locked);
    --*v16;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

  }
}

uint64_t sub_1B1E61C58(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  _DWORD *is_locked;
  _DWORD *v9;
  uint64_t (*v11)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v11 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F4DF00(a2, (uint64_t)a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v9 = (_DWORD *)v11(&runtime_thread_is_locked);
  --*v9;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

  return swift_release();
}

void sub_1B1E61D68(uint64_t a1, void *a2, char a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1DC1640((uint64_t)a2, a3 & 1);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E61E54(uint64_t a1, char *a2)
{
  _DWORD *is_locked;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  _QWORD v14[3];
  char v15;
  _BYTE v16[32];
  uint64_t (*v17)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v17 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v5 = *(unsigned int *)&a2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
  v6 = *(unsigned int *)&a2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4];
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    Strong = *(_QWORD *)&a2[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
    if (Strong)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  v8 = swift_release();
  MEMORY[0x1E0C80A78](v8, v9);
  if ((_DWORD)v5 != -1 || (_DWORD)v6 != 0)
  {
    v11 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v11)
    {
      v12 = *(_BYTE *)(v11 + 80);
      MEMORY[0x1B5E240CC](v11 + 48);
      v11 = *(_QWORD *)(v11 + 56);
    }
    else
    {
      v12 = 0;
    }
    swift_unknownObjectUnownedInit();
    v14[0] = Strong;
    v14[2] = v11;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v15 = v12;
    sub_1B1A02530((uint64_t)v14, (uint64_t)v16);
    sub_1B1DA5868((uint64_t *)(v5 | (v6 << 32)));
    sub_1B1A0256C((uint64_t)v16);
    sub_1B1E31340(1);
    swift_release();
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v13 = (_DWORD *)v17(&runtime_thread_is_locked);
  --*v13;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E620B4(uint64_t a1, void *a2)
{
  sub_1B1E62108(a1, a2, (void (*)(void *))sub_1B1DC1E10);
}

void sub_1B1E620D0(uint64_t a1, void *a2)
{
  sub_1B1E62108(a1, a2, (void (*)(void *))sub_1B1E45E78);
}

void sub_1B1E620EC(uint64_t a1, void *a2)
{
  sub_1B1E62108(a1, a2, (void (*)(void *))sub_1B1E46BD0);
}

void sub_1B1E62108(uint64_t a1, void *a2, void (*a3)(void *))
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  a3(a2);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E621F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  _DWORD *is_locked;
  _DWORD *v15;
  uint64_t (*v16)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v16 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1E48BA4((uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v15 = (_DWORD *)v16(&runtime_thread_is_locked);
  --*v15;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_1B1E62330(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v7 = *(_QWORD *)(*(_QWORD *)&a2[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v8 = swift_retain();
  v9 = (void *)MEMORY[0x1B5E22F20](v8);
  sub_1B1E73530(v7);
  if (v2)
  {
    objc_autoreleasePoolPop(v9);
    __break(1u);
  }
  else
  {
    objc_autoreleasePoolPop(v9);
    swift_release();
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v10 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v10;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

  }
}

void sub_1B1E62454(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1E49448((uint64_t)a2, a3);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_unknownObjectRelease();

}

void sub_1B1E62548(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1E49448((uint64_t)a2, a3);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_unknownObjectRelease();

}

void sub_1B1E6264C(uint64_t a1, char *a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  v8 = *(_QWORD *)(*(_QWORD *)&a2[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  MEMORY[0x1E0C80A78](Strong, v7);
  v9 = *(_QWORD **)(v8 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for WorldFromScene, (uint64_t)&off_1E6382A80, v9, (void (*)(uint64_t))sub_1B1DB35EC);
  swift_release();
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E627BC(uint64_t a1, _BYTE *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, __n128 a6)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  int32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float v17;
  __n128 v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float v37;
  int32x4_t v38;
  float v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __n128 v46;
  float v48;
  int8x16_t v49;
  int8x16_t v50;
  int32x2_t v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  uint64_t v56;
  int32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int32x2_t v60;
  _DWORD *v61;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v11 = vmulq_f32(a3, a3);
  v12 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v13 = vmulq_f32(a4, a4);
  v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
  v15 = sqrtf(vaddq_f32(v14, vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  v16 = vmulq_f32(a5, a5);
  LODWORD(v17) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
  v18.n128_u32[3] = 0;
  v19 = vzip2q_s32((int32x4_t)v11, (int32x4_t)v16);
  v20 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v11, (int32x4_t)v16), (int32x4_t)v13);
  v21 = (float32x4_t)vtrn2q_s32((int32x4_t)v11, (int32x4_t)v13);
  v21.i32[2] = v16.i32[1];
  v22 = vaddq_f32((float32x4_t)vzip1q_s32(v19, (int32x4_t)v14), vaddq_f32(v20, v21));
  v13.i64[0] = 0x80000000800000;
  v13.i64[1] = 0x80000000800000;
  v23 = vcgeq_f32(v13, v22);
  v22.i32[3] = 0;
  v24 = vrsqrteq_f32(v22);
  v25 = vmulq_f32(v24, vrsqrtsq_f32(v22, vmulq_f32(v24, v24)));
  v26 = v23;
  v26.i32[3] = 0;
  v27 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v26), (int8x16_t)v22, (int8x16_t)vmulq_f32(v25, vrsqrtsq_f32(v22, vmulq_f32(v25, v25))));
  v28 = vmulq_n_f32(a3, v27.f32[0]);
  v29 = vmulq_lane_f32(a4, *(float32x2_t *)v27.f32, 1);
  v30 = vmulq_laneq_f32(a5, v27, 2);
  v31 = (int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30);
  v32 = (int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29);
  v33 = (int32x4_t)v28;
  if (v23.i32[0])
  {
    v34 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v31, (int8x16_t)v30, 0xCuLL), vnegq_f32(v29)), v30, (float32x4_t)vextq_s8(v32, (int8x16_t)v29, 0xCuLL));
    v33 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
  }
  v18.n128_f32[0] = v12;
  v35 = (int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28);
  v36 = v29;
  v37 = sqrtf(v17);
  if (v23.i32[1])
  {
    v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v35, (int8x16_t)v28, 0xCuLL), vnegq_f32(v30)), v28, (float32x4_t)vextq_s8(v31, (int8x16_t)v30, 0xCuLL));
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
  }
  v18.n128_f32[1] = v15;
  if (v23.i32[2])
  {
    v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v32, (int8x16_t)v29, 0xCuLL), vnegq_f32(v28)), v29, (float32x4_t)vextq_s8(v35, (int8x16_t)v28, 0xCuLL));
    v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL);
  }
  v18.n128_f32[2] = v37;
  v39 = (float)(*(float *)v33.i32 + v36.f32[1]) + v30.f32[2];
  if (v39 <= 0.0)
  {
    if (*(float *)v33.i32 < v36.f32[1] || *(float *)v33.i32 < v30.f32[2])
    {
      v46 = a6;
      if (v36.f32[1] <= v30.f32[2])
      {
        *(float32x2_t *)v44.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v33, (int32x4_t)v36), *(float32x2_t *)v30.f32);
        v58 = (float32x2_t)__PAIR64__(v33.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v30.f32[2] + 1.0) - *(float *)v33.i32) - v36.f32[1])));
        v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 0);
        v60 = (int32x2_t)vsub_f32(*(float32x2_t *)v33.i8, v59);
        v59.i32[0] = v58.i32[0];
        v59.i32[0] = vmul_f32(v58, v59).u32[0];
        v59.i32[1] = v60.i32[1];
        *(float32x2_t *)&v44.u32[2] = v59;
        *(float *)v60.i32 = 0.5 / v58.f32[0];
        v45 = (float32x4_t)vdupq_lane_s32(v60, 0);
      }
      else
      {
        v48 = sqrtf((float)((float)(v36.f32[1] + 1.0) - *(float *)v33.i32) - v30.f32[2]);
        *(int32x2_t *)v10.i8 = vdup_laneq_s32((int32x4_t)v36, 2);
        v49 = (int8x16_t)v10;
        *(float *)v49.i32 = v48;
        v49.i32[0] = vmul_f32(*(float32x2_t *)v49.i8, (float32x2_t)__PAIR64__(v30.u32[1], LODWORD(v48))).u32[0];
        v49.i32[1] = vadd_f32(*(float32x2_t *)&v10, *(float32x2_t *)&v30).i32[1];
        v50 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1), v36);
        v51 = (int32x2_t)vsubq_f32(v30, (float32x4_t)vdupq_laneq_s32(v33, 2)).u64[0];
        v45 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 4uLL), v49, 0xCuLL);
        v45.i32[3] = v51.i32[0];
        *(float *)v51.i32 = 0.5 / v48;
        v44 = (float32x4_t)vdupq_lane_s32(v51, 0);
      }
    }
    else
    {
      v52 = sqrtf((float)((float)(*(float *)v33.i32 + 1.0) - v36.f32[1]) - v30.f32[2]);
      v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 0);
      v54 = vadd_f32(*(float32x2_t *)v33.i8, v53);
      v53.f32[0] = v52;
      v45.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v33.u32[1], LODWORD(v52)), v53).u32[0];
      v45.i32[1] = v54.i32[1];
      v55 = (float32x2_t)vzip2q_s32(v33, (int32x4_t)v36).u64[0];
      LODWORD(v56) = vadd_f32(v55, *(float32x2_t *)v30.f32).u32[0];
      v57 = (int32x2_t)vsub_f32(v55, *(float32x2_t *)v30.f32);
      HIDWORD(v56) = v57.i32[1];
      v45.i64[1] = v56;
      *(float *)v57.i32 = 0.5 / v52;
      v44 = (float32x4_t)vdupq_lane_s32(v57, 0);
      v46 = a6;
    }
  }
  else
  {
    v40 = (float32x4_t)vzip2q_s32((int32x4_t)v36, vuzp1q_s32((int32x4_t)v36, (int32x4_t)v30));
    v40.i32[2] = v33.i32[1];
    v41 = sqrtf(v39 + 1.0);
    v42 = (float32x4_t)vtrn2q_s32((int32x4_t)v30, vzip2q_s32((int32x4_t)v30, v33));
    v42.i32[2] = v36.i32[0];
    v44 = vsubq_f32(v40, v42);
    v40.f32[3] = v41;
    v42.f32[3] = v41;
    v43 = vmulq_f32(v40, v42);
    v44.i32[3] = v43.i32[3];
    v43.f32[0] = 0.5 / v41;
    v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
    v46 = a6;
  }
  sub_1B1E49928(*(_QWORD *)&a2[OBJC_IVAR___VFXREScene_rootEntity], a2[OBJC_IVAR___VFXREScene_rootEntity + 8], v18, (__n128)vmulq_f32(v44, v45), v46);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v61 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v61;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E62B70(uint64_t a1, void *a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t (*v13)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v15;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v13 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1E4A1B8((uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v15 = (_DWORD *)v13(&runtime_thread_is_locked);
  --*v15;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E62C84(uint64_t a1, char *a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  v8 = *(_QWORD *)(*(_QWORD *)&a2[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  MEMORY[0x1E0C80A78](Strong, v7);
  v9 = *(_QWORD **)(v8 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v9, (void (*)(uint64_t))sub_1B1DB35BC);
  swift_release();
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

uint64_t sub_1B1E62E08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1DAC06C(a2, a3);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return swift_release();
}

void sub_1B1E62EF8(uint64_t a1, _BYTE *a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  unint64_t v6;
  _DWORD *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F43C48();
  if ((a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] & 1) != 0)
    v6 = 0x200000000;
  else
    v6 = *(unsigned int *)&a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)(*(_DWORD *)&a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] == 0) << 33);
  sub_1B1E711EC(v6);
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v7 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v7;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

uint64_t sub_1B1E63004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  _DWORD *is_locked;
  _DWORD *v14;
  uint64_t (*v16)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v16 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F4AFE8(a2, a3, a4, a5, a6, a7);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v14 = (_DWORD *)v16(&runtime_thread_is_locked);
  --*v14;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1E6312C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t), uint64_t a9)
{
  _DWORD *is_locked;
  _DWORD *v15;
  uint64_t (*v17)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v17 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F4B120(a2, a3, a4, a5, a6, a7, a8, a9);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v15 = (_DWORD *)v17(&runtime_thread_is_locked);
  --*v15;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1E63258(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F46E08((uint64_t)a2, a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

  return swift_unknownObjectRelease();
}

void sub_1B1E63354(uint64_t a1, _BYTE *a2, char a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v8 = sub_1B1F4388C();
  if (v9)
  {
    sub_1B211DC90((a3 & 1) == 0, v8, v9);
  }
  else
  {
    v10 = a3 & 1;
    a2[OBJC_IVAR____TtC3VFX9VFXEffect__enabled] = v10;
    if (a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] != 1)
    {
      v11 = *(unsigned int *)&a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
      sub_1B1F43C48();
      v12 = swift_retain();
      sub_1B1DA35C8(v12, v10, v12, v11);
      swift_release();
    }
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v13 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v13;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

uint64_t sub_1B1E634B4(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F4B254(a2 & 1, a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v10 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v10;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return swift_release();
}

void sub_1B1E635AC(uint64_t a1, _BYTE *a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F43C48();
  sub_1B1B680B8(*(unsigned int *)&a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)a2[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), *(_QWORD *)&a2[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity], a2[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity + 8], a2[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned]);
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v6 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v6;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E636D0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  _DWORD *is_locked;
  _DWORD *v11;
  uint64_t (*v12)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v12 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B20C1028((uint64_t)a2, (uint64_t)a3, a4, a5);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v12(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_unknownObjectRelease();
  swift_release();

}

void sub_1B1E637F4(uint64_t a1, void *a2)
{
  sub_1B1E63810(a1, a2, (void (*)(uint64_t))sub_1B1DABD7C);
}

void sub_1B1E63810(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  _DWORD *v9;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  a3(Strong);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v9 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v9;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

void sub_1B1E638EC(uint64_t a1, void *a2, void *a3, void *a4, double a5)
{
  uint64_t (*v10)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v10 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B20C195C((uint64_t)a2, (uint64_t)a3, a4, a5);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v12 = (_DWORD *)v10(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_unknownObjectRelease();

}

void sub_1B1E639FC(uint64_t a1, char a2, void *a3)
{
  uint64_t (*v6)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v6 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B216808C(a2 & 1, (uint64_t)a3);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v6(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));

}

uint64_t sub_1B1E63AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  _DWORD *is_locked;
  _DWORD *v9;
  uint64_t (*v11)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v11 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1A0A11C(a2, a3, a4);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v9 = (_DWORD *)v11(&runtime_thread_is_locked);
  --*v9;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_release();
  return swift_release();
}

uint64_t sub_1B1E63BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t (*v14)(_QWORD);
  _DWORD *is_locked;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _DWORD *v19;
  _OWORD v23[2];

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v14 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v16 = sub_1B1FF36E8(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
  if ((v17 & 1) != 0)
  {
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v18 = v16;
    swift_bridgeObjectRetain();
    sub_1B1FDFBF0(v18, a2, a6, a7, v23);
    sub_1B1F4A59C((uint64_t)v23, (_QWORD *)a8);
    sub_1B1A0DD70((uint64_t)v23);
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v19 = (_DWORD *)v14(&runtime_thread_is_locked);
  --*v19;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1B1E63D70(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t (*v10)(_QWORD);
  _DWORD *is_locked;
  double v12;
  _DWORD *v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v10 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1C2BDB0((uint64_t)a2, a3, a4, a5, v12);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v13 = (_DWORD *)v10(&runtime_thread_is_locked);
  --*v13;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();

}

uint64_t sub_1B1E63E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _DWORD *is_locked;
  _DWORD *v13;
  uint64_t (*v15)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v15 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F4AE94(a2, a3, a4, a5, a6);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v13 = (_DWORD *)v15(&runtime_thread_is_locked);
  --*v13;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  swift_bridgeObjectRelease();
  return swift_release();
}

id sub_1B1E63F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  os_unfair_recursive_lock_lock_with_options();
  if (*(_BYTE *)(v3 + 120) == 1)
    return (id)os_unfair_recursive_lock_unlock();
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 16))
  {
    sub_1B1DCC390(a3);
    if ((v7 & 1) != 0)
      return (id)os_unfair_recursive_lock_unlock();
  }
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0x8000000000000000;
  sub_1B1B88CF0((uint64_t)sub_1B1CB734C, v9, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 40) = v11;
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_unlock();
  return sub_1B1E64B50();
}

id sub_1B1E6407C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  v4 = v3;
  os_unfair_recursive_lock_lock_with_options();
  if (*(_BYTE *)(v4 + 120) == 1)
    return (id)os_unfair_recursive_lock_unlock();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0x8000000000000000;
  sub_1B1B88CF0((uint64_t)sub_1B1DB39F8, v9, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 40) = v11;
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_unlock();
  return sub_1B1E64B50();
}

uint64_t sub_1B1E64160(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  pthread_setname_np("com.apple.vfx.runtime-thread");
  *(_QWORD *)(a1 + 144) = pthread_self();
  v2 = (void *)MEMORY[0x1B5E22F20]();
  sub_1B1E64218(a1);
  objc_autoreleasePoolPop(v2);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(void **)(v3 + 16);
  swift_retain();
  objc_msgSend(v4, sel_lock);
  *(_BYTE *)(v3 + 24) = 1;
  objc_msgSend(*(id *)(v3 + 16), sel_signal);
  objc_msgSend(*(id *)(v3 + 16), sel_unlock);
  swift_release();
  swift_release();
  return 0;
}

uint64_t sub_1B1E64218(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  char v9;
  pthread_mutex_t *v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  void (*v27)(void);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  pthread_mutex_t *v67;
  pthread_mutex_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(void **)(v2 + 16);
  swift_retain();
  v4 = &selRef_frontVectorWithPointOfView_;
  objc_msgSend(v3, sel_lock);
  *(_BYTE *)(v2 + 24) = 1;
  objc_msgSend(*(id *)(v2 + 16), sel_signal);
  objc_msgSend(*(id *)(v2 + 16), sel_unlock);
  swift_release();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v6 = result;
  v7 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
  objc_msgSend(*(id *)(result + OBJC_IVAR____TtC3VFX13EntityManager_syncLock), sel_lock);
  objc_msgSend(*(id *)(v6 + v7), sel_unlock);
  swift_release();
  Strong = swift_weakLoadStrong();
  if (Strong && (v9 = *(_BYTE *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2), swift_release(), (v9 & 1) != 0))
  {
    v10 = 0;
    v68 = *(pthread_mutex_t **)(a1 + 64);
  }
  else
  {
    v68 = 0;
    v10 = *(pthread_mutex_t **)(a1 + 64);
  }
  v11 = MEMORY[0x1E0DEE9E0];
  v12 = &selRef_presentedItemOperationQueue;
  v67 = v10;
LABEL_7:
  if (*(_BYTE *)(a1 + 120) == 1)
  {
    os_unfair_recursive_lock_lock_with_options();
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
    os_unfair_recursive_lock_unlock();
    if (!v13)
      return swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(a1 + 16);
  objc_msgSend(*(id *)(v14 + 16), v4[459]);
  while ((*(_BYTE *)(v14 + 24) & 1) == 0)
    objc_msgSend(*(id *)(v14 + 16), v12[183]);
  *(_BYTE *)(v14 + 24) = 0;
  objc_msgSend(*(id *)(v14 + 16), sel_unlock);
  os_unfair_recursive_lock_lock_with_options();
  *(int8x16_t *)(a1 + 72) = vextq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 72), 8uLL);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  os_unfair_recursive_lock_unlock();
  if (v10)
    pthread_mutex_lock(v10);
  v16 = *(_QWORD *)(a1 + 24);
  objc_msgSend(*(id *)(v16 + 16), v4[459]);
  *(_BYTE *)(v16 + 24) = 1;
  objc_msgSend(*(id *)(v16 + 16), sel_signal);
  objc_msgSend(*(id *)(v16 + 16), sel_unlock);
  v17 = swift_weakLoadStrong();
  if (!v17)
  {
    swift_bridgeObjectRelease();
    result = (uint64_t)v67;
    if (v67)
      return pthread_mutex_unlock(v67);
    return result;
  }
  v18 = v17;
  v69 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
  objc_msgSend(*(id *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock), v4[459]);
  v74 = v15;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16))
    goto LABEL_55;
  if (v68)
    pthread_mutex_lock(v68);
  v19 = *(uint64_t **)(v18 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v72 = v18 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  if (v19)
  {
    v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues + 8);
    if (v20)
    {
      v21 = 8 * v20;
      do
      {
        v22 = *v19++;
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v22 + 32));
        v21 -= 8;
      }
      while (v21);
    }
  }
  v23 = *(_QWORD *)(v18 + 216);
  *(_QWORD *)(v18 + 216) = v23 + 1;
  if (!v23)
    sub_1B1DA8FBC();
  v24 = *(_QWORD **)(a1 + 80);
  v25 = v24[2];
  if (!v25)
  {
    v26 = 0;
LABEL_46:
    if (*(_QWORD *)(v18 + 216) == 1)
      sub_1B1DA947C(1);
    v40 = *(uint64_t **)v72;
    v4 = &selRef_frontVectorWithPointOfView_;
    if (*(_QWORD *)v72)
    {
      v41 = *(_QWORD *)(v72 + 8);
      if (v41)
      {
        v42 = 8 * v41;
        do
        {
          v43 = *v40++;
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v43 + 32));
          v42 -= 8;
        }
        while (v42);
      }
    }
    --*(_QWORD *)(v18 + 216);
    if (v68)
      pthread_mutex_unlock(v68);
    v15 = v74;
    if ((v26 & 1) != 0)
      goto LABEL_95;
LABEL_55:
    v71 = v15 + 64;
    v44 = 1 << *(_BYTE *)(v15 + 32);
    if (v44 < 64)
      v45 = ~(-1 << v44);
    else
      v45 = -1;
    v46 = v45 & *(_QWORD *)(v15 + 64);
    v47 = OBJC_IVAR____TtC3VFX13EntityManager_isVFX2;
    v70 = v18 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
    v48 = (unint64_t)(v44 + 63) >> 6;
    swift_bridgeObjectRetain();
    v49 = 0;
    v73 = v48;
    v66 = v48 - 5;
    while (1)
    {
      if (v46)
      {
        v50 = __clz(__rbit64(v46));
        v46 &= v46 - 1;
        v51 = v50 | (v49 << 6);
        v15 = v74;
      }
      else
      {
        v52 = v49 + 1;
        v15 = v74;
        if (v49 + 1 >= v73)
          goto LABEL_93;
        v53 = *(_QWORD *)(v71 + 8 * v52);
        if (!v53)
        {
          v52 = v49 + 2;
          if (v49 + 2 >= v73)
            goto LABEL_93;
          v53 = *(_QWORD *)(v71 + 8 * v52);
          if (!v53)
          {
            v52 = v49 + 3;
            if (v49 + 3 >= v73)
              goto LABEL_93;
            v53 = *(_QWORD *)(v71 + 8 * v52);
            if (!v53)
            {
              v52 = v49 + 4;
              if (v49 + 4 >= v73)
                goto LABEL_93;
              v53 = *(_QWORD *)(v71 + 8 * v52);
              if (!v53)
              {
                while (v66 != v49)
                {
                  v53 = *(_QWORD *)(v74 + 8 * v49++ + 104);
                  if (v53)
                  {
                    v52 = v49 + 4;
                    goto LABEL_73;
                  }
                }
LABEL_93:
                swift_release();
                v4 = &selRef_frontVectorWithPointOfView_;
                if (*(_QWORD *)(v74 + 16))
                {
                  swift_isUniquelyReferenced_nonNull_native();
                  sub_1B1E680FC();
                  sub_1B2229634();
                  swift_bridgeObjectRelease();
                }
LABEL_95:
                objc_msgSend(*(id *)(v18 + v69), sel_unlock);
                swift_release();
                v11 = v74;
                v10 = v67;
                v12 = &selRef_presentedItemOperationQueue;
                if (v67)
                {
                  pthread_mutex_unlock(v67);
                  v11 = v15;
                }
                goto LABEL_7;
              }
            }
          }
        }
LABEL_73:
        v46 = (v53 - 1) & v53;
        v51 = __clz(__rbit64(v53)) + (v52 << 6);
        v49 = v52;
      }
      v54 = *(void (**)(uint64_t))(*(_QWORD *)(v15 + 56) + 16 * v51);
      if ((*(_BYTE *)(v18 + v47) & 1) != 0)
      {
        v55 = swift_retain();
        v56 = 0;
      }
      else
      {
        v57 = *(uint64_t **)v70;
        if (*(_QWORD *)v70)
        {
          v58 = *(_QWORD *)(v70 + 8);
          swift_retain_n();
          swift_retain();
          if (v58)
          {
            v59 = 8 * v58;
            do
            {
              v60 = *v57++;
              ecs_stack_allocator_push_snapshot(*(_QWORD *)(v60 + 32));
              v59 -= 8;
            }
            while (v59);
          }
        }
        else
        {
          swift_retain_n();
          swift_retain();
        }
        v61 = *(_QWORD *)(v18 + 216);
        *(_QWORD *)(v18 + 216) = v61 + 1;
        if (!v61)
          sub_1B1DA8FBC();
        v55 = swift_release();
        v56 = v18;
      }
      v54(v55);
      swift_release();
      if (v56)
      {
        if (*(_QWORD *)(v56 + 216) == 1)
          sub_1B1DA947C(1);
        v62 = *(uint64_t **)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        if (v62)
        {
          v63 = *(_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues + 8);
          if (v63)
          {
            v64 = 8 * v63;
            do
            {
              v65 = *v62++;
              ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v65 + 32));
              v64 -= 8;
            }
            while (v64);
          }
        }
        --*(_QWORD *)(v56 + 216);
        swift_release();
      }
    }
  }
  v26 = 0;
  while (1)
  {
    v27 = (void (*)(void))v24[4];
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 80) = v24;
    if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v25 - 1) > v24[3] >> 1)
    {
      v24 = sub_1B1C62B5C(isUniquelyReferenced_nonNull_native, v25, 1, v24);
      *(_QWORD *)(a1 + 80) = v24;
    }
    sub_1B1A0FCB4();
    swift_arrayDestroy();
    v29 = v24[2];
    if (!v29)
      break;
    v30 = memmove(v24 + 4, v24 + 6, 16 * v29 - 16);
    v24[2] = v29 - 1;
    *(_QWORD *)(a1 + 80) = v24;
    v31 = (void *)MEMORY[0x1B5E22F20](v30);
    v27();
    objc_autoreleasePoolPop(v31);
    os_unfair_recursive_lock_lock_with_options();
    if ((*(_BYTE *)(a1 + 152) & 1) != 0)
    {
      v32 = *(_QWORD *)(a1 + 80);
      swift_bridgeObjectRetain();
      sub_1B1C9495C(0, 0, v32);
      swift_bridgeObjectRelease();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v34 = *(_QWORD **)(a1 + 80);
      if (v33)
      {
        v35 = v34[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v34 = sub_1B1C62B5C(0, v35, 1, v34);
        swift_arrayDestroy();
        if (v35)
        {
          v36 = v34[2] - v35;
          if (v36 < 0)
            break;
          memmove(v34 + 4, &v34[2 * v35 + 4], 16 * v36);
          v34[2] = v36;
        }
        *(_QWORD *)(a1 + 80) = v34;
      }
      else
      {
        v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (v34[3] >= 2uLL)
        {
          sub_1B1E68160();
          v37 = (_QWORD *)swift_allocObject();
          v38 = j__malloc_size(v37);
          v39 = v38 - 32;
          if (v38 < 32)
            v39 = v38 - 17;
          v37[2] = 0;
          v37[3] = 2 * (v39 >> 4);
        }
        *(_QWORD *)(a1 + 80) = v37;
        swift_bridgeObjectRelease();
      }
      v26 = 1;
    }
    os_unfair_recursive_lock_unlock();
    sub_1B19E5A18((uint64_t)v27);
    v24 = *(_QWORD **)(a1 + 80);
    v25 = v24[2];
    if (!v25)
      goto LABEL_46;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1E64A7C()
{
  uint64_t v0;
  pthread_mutex_t *v1;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 112), -1, -1);
  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v1 = *(pthread_mutex_t **)(v0 + 64);
    pthread_mutex_destroy(v1);
    MEMORY[0x1B5E23F88](v1, -1, -1);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  return v0;
}

uint64_t sub_1B1E64B10()
{
  sub_1B1E64A7C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RuntimeThread()
{
  return objc_opt_self();
}

id sub_1B1E64B50()
{
  uint64_t v0;
  char v1;
  id result;
  uint64_t v3;

  os_unfair_recursive_lock_lock_with_options();
  v1 = *(_BYTE *)(v0 + 152);
  result = (id)os_unfair_recursive_lock_unlock();
  if ((v1 & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    objc_msgSend(*(id *)(v3 + 16), sel_lock);
    *(_BYTE *)(v3 + 24) = 1;
    objc_msgSend(*(id *)(v3 + 16), sel_signal);
    return objc_msgSend(*(id *)(v3 + 16), sel_unlock);
  }
  return result;
}

uint64_t sub_1B1E64BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 24);
  objc_msgSend(*(id *)(v1 + 16), sel_lock);
  *(_BYTE *)(v1 + 24) = 0;
  objc_msgSend(*(id *)(v1 + 16), sel_unlock);
  v2 = *(_QWORD *)(v0 + 16);
  objc_msgSend(*(id *)(v2 + 16), sel_lock);
  *(_BYTE *)(v2 + 24) = 1;
  objc_msgSend(*(id *)(v2 + 16), sel_signal);
  objc_msgSend(*(id *)(v2 + 16), sel_unlock);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v0 + 64));
  objc_msgSend(*(id *)(v1 + 16), sel_lock);
  while ((*(_BYTE *)(v1 + 24) & 1) == 0)
    objc_msgSend(*(id *)(v1 + 16), sel_wait);
  *(_BYTE *)(v1 + 24) = 0;
  objc_msgSend(*(id *)(v1 + 16), sel_unlock);
  pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 64));
  return pthread_mutex_unlock(*(pthread_mutex_t **)(v0 + 64));
}

uint64_t sub_1B1E64CA4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  os_unfair_recursive_lock_lock_with_options();
  if (*(_BYTE *)(v1 + 152) == 1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    objc_msgSend(*(id *)(v3 + 16), sel_lock);
    *(_BYTE *)(v3 + 24) = 0;
    objc_msgSend(*(id *)(v3 + 16), sel_unlock);
    return os_unfair_recursive_lock_unlock();
  }
  else
  {
    *(_BYTE *)(v1 + 152) = 1;
    v5 = *(_QWORD *)(v1 + 16);
    objc_msgSend(*(id *)(v5 + 16), sel_lock);
    *(_BYTE *)(v5 + 24) = 0;
    objc_msgSend(*(id *)(v5 + 16), sel_unlock);
    result = os_unfair_recursive_lock_unlock();
    if ((a1 & 1) != 0)
      return sub_1B1E64BC8();
  }
  return result;
}

uint64_t sub_1B1E64D68()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  os_unfair_recursive_lock_lock_with_options();
  *(_BYTE *)(v0 + 152) = 0;
  os_unfair_recursive_lock_lock_with_options();
  v1 = *(_BYTE *)(v0 + 152);
  os_unfair_recursive_lock_unlock();
  if ((v1 & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 16);
    objc_msgSend(*(id *)(v2 + 16), sel_lock);
    *(_BYTE *)(v2 + 24) = 1;
    objc_msgSend(*(id *)(v2 + 16), sel_signal);
    objc_msgSend(*(id *)(v2 + 16), sel_unlock);
  }
  return os_unfair_recursive_lock_unlock();
}

uint64_t sub_1B1E64DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E64EBC(a1, a2, a3, (uint64_t)&unk_1E63F26A8, (uint64_t)sub_1B1E64F6C);
}

uint64_t sub_1B1E64E00()
{
  sub_1B1E64F70(&qword_1EEF5FBE8, (uint64_t)&unk_1B229AADC);
  return sub_1B2228BE4();
}

uint64_t sub_1B1E64E48()
{
  sub_1B1E64F70(&qword_1EEF5FBE8, (uint64_t)&unk_1B229AADC);
  return sub_1B2228BD8();
}

uint64_t sub_1B1E64E90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1B1E64E98()
{
  return sub_1B2228C2C();
}

void sub_1B1E64EA0()
{
  JUMPOUT(0x1B5E207CCLL);
}

uint64_t sub_1B1E64EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E64EBC(a1, a2, a3, (uint64_t)&unk_1E63F26D0, (uint64_t)sub_1B1E64F6C);
}

uint64_t sub_1B1E64EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v5;
  swift_retain();
  sub_1B1E608D4(a5, v8);
  return swift_release();
}

uint64_t sub_1B1E64F14()
{
  return sub_1B2228BE4();
}

uint64_t sub_1B1E64F1C()
{
  return sub_1B2228BD8();
}

uint64_t sub_1B1E64F24()
{
  return sub_1B1E64F70(&qword_1EEF5FBE8, (uint64_t)&unk_1B229AADC);
}

uint64_t sub_1B1E64F48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E64F70(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for RuntimeThread();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1E64FAC()
{
  sub_1B1E64F70(&qword_1EEF5E7E8, (uint64_t)&unk_1B229AB14);
  return swift_job_run();
}

uint64_t sub_1B1E64FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E65020(a1, a2, a3, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1B19E954C);
}

uint64_t sub_1B1E65004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1E65020(a1, a2, a3, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1B19EA8B0);
}

uint64_t sub_1B1E65020(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t (*v9)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v11;
  _DWORD *v13;
  uint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v9 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  a4(&v14, a2, a3);
  if (v4)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v11 = (_DWORD *)v9(&runtime_thread_is_locked);
    --*v11;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v13 = (_DWORD *)v9(&runtime_thread_is_locked);
    --*v13;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v14;
  }
}

uint64_t sub_1B1E65148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(_QWORD);
  _DWORD *is_locked;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v8 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F43C48();
  if ((*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v10 = 0x200000000;
  else
    v10 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  v11 = sub_1B1B0E020(a3, a4, v10);
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  if (v11 == 0xFFFFFFFFLL)
    v12 = 0;
  else
    v12 = v11;
  v13 = (_DWORD *)v8(&runtime_thread_is_locked);
  --*v13;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v12;
}

BOOL sub_1B1E6527C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  _DWORD *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v6)
  {
    swift_retain();
    sub_1B1BA1324();
    swift_release();
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v7 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v7;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v6 == 0;
}

uint64_t sub_1B1E65374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t (*v11)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v13;
  _DWORD *v15;
  uint64_t v16;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v11 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F48BA0(a2, a3, a4 & 0xFFFFFFFFFFLL, a5, &v16);
  if (v5)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v13 = (_DWORD *)v11(&runtime_thread_is_locked);
    --*v13;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v15 = (_DWORD *)v11(&runtime_thread_is_locked);
    --*v15;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v16;
  }
}

uint64_t sub_1B1E654AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD);
  _DWORD *is_locked;
  unint64_t v11;
  char v12;
  char v13;
  _DWORD *v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v9 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v11 = sub_1B1FF36E8(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
  if ((v12 & 1) != 0)
    v13 = 0;
  else
    v13 = sub_1B1DA5684(v11);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v14 = (_DWORD *)v9(&runtime_thread_is_locked);
  --*v14;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v13 & 1;
}

BOOL sub_1B1E655B4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  BOOL v7;
  _DWORD *v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  if (!swift_weakLoadStrong())
  {
    if (*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager))
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  swift_release();
  swift_retain();
  v7 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, v6);
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v8 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return !v7;
}

uint64_t sub_1B1E65738(uint64_t a1, uint64_t a2)
{
  return sub_1B1E65AE4(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1DC1AD4) & 1;
}

uint64_t sub_1B1E65758(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  _DWORD *v11;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = sub_1B1F4388C();
  if (v7)
  {
    v8 = v6;
    swift_retain();
    v9 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, v8);
    swift_release();
    v10 = !v9;
  }
  else
  {
    v10 = *(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX9VFXEffect__enabled);
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v10 & 1;
}

uint64_t sub_1B1E65874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  char v10;
  _DWORD *v11;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v7 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX17VFXRendererLegacy_effect);
  if (!v7)
    goto LABEL_6;
  v8 = (unsigned int *)(v7 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
  if (*((_BYTE *)v8 + 4) == 1)
  {
    v7 = 0;
LABEL_6:
    v9 = 0x200000000;
    goto LABEL_8;
  }
  v7 = *v8;
  v9 = (unint64_t)(v7 == 0) << 33;
LABEL_8:
  v10 = sub_1B1E727E4(v9 | v7);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v5(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v10 & 1;
}

BOOL sub_1B1E659A4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  _DWORD *v11;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1E6393C48, v9);
    swift_release();
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v10;
}

uint64_t sub_1B1E65AC4(uint64_t a1, uint64_t a2)
{
  return sub_1B1E65AE4(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B216A9DC) & 1;
}

uint64_t sub_1B1E65AE4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3;
  uint64_t (*v7)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v9;
  char v10;
  _DWORD *v11;
  uint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v7 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  a3(&v13, a2);
  if (v3)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v11 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v11;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    v10 = v13;
  }
  return v10 & 1;
}

uint64_t (*sub_1B1E65C08(uint64_t a1, uint64_t a2))()
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)();
  uint64_t v14;
  _DWORD *v15;
  uint64_t (*v17)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    swift_retain();
    swift_retain();
    v6 = sub_1B1D21D1C();
    v17 = v4;
    v8 = v7;
    swift_release();
    swift_retain();
    v9 = sub_1B1D21D1C();
    v11 = v10;
    swift_release();
    swift_release();
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v6;
    v12[3] = v8;
    v12[4] = v9;
    v4 = v17;
    v12[5] = v11;
    v13 = sub_1B1DB39E4;
  }
  else
  {
    v12 = 0;
    v13 = (uint64_t (*)())nullsub_16;
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v15 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v15;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return sub_1B1DB39F8;
}

uint64_t (*sub_1B1E65DC0(uint64_t a1, uint64_t a2))()
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)();
  uint64_t v13;
  _DWORD *v14;
  uint64_t (*v16)();
  uint64_t (*v17)(_QWORD);

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___VFXREScene_scene)
                             + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v16 = sub_1B1D21D1C();
    v17 = v4;
    v7 = v6;
    swift_release();
    swift_retain();
    v8 = sub_1B1D21D1C();
    v10 = v9;
    swift_release();
    swift_release();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v16;
    v11[3] = v7;
    v4 = v17;
    v11[4] = v8;
    v11[5] = v10;
    swift_release();
    v12 = sub_1B1DB362C;
  }
  else
  {
    v11 = 0;
    v12 = (uint64_t (*)())nullsub_16;
  }
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v14 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v14;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return sub_1B1DB39F8;
}

uint64_t sub_1B1E65FA0(uint64_t a1, uint64_t a2)
{
  return sub_1B1E65FD8(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1DC1858);
}

uint64_t sub_1B1E65FBC(uint64_t a1, uint64_t a2)
{
  return sub_1B1E65FD8(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B2167DC4);
}

uint64_t sub_1B1E65FD8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3;
  uint64_t (*v7)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v9;
  _DWORD *v11;
  uint64_t v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v7 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  a3(&v12, a2);
  if (v3)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v9;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v11 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v11;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v12;
  }
}

uint64_t sub_1B1E660F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  _DWORD *v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v7 = *(_BYTE *)(a3 + OBJC_IVAR___VFXREScene_isPrepared);
  v8 = swift_retain();
  v9 = sub_1B1CBCB84(v8, v7 ^ 1u, v7);
  swift_release();
  swift_retain();
  v10 = sub_1B1BF9004();
  swift_release();
  if (v10)
  {
    *(_BYTE *)(v10 + 16) = 1;
    swift_release();
  }
  Strong = swift_weakLoadStrong();
  swift_retain();
  if (Strong)
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v12 = (_DWORD *)v5(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v9;
}

uint64_t sub_1B1E66278(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11[12];
  _QWORD v12[12];
  _OWORD v13[2];
  uint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___VFXREScene_scene) + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v7 = qword_1EEF57390;
  swift_retain();
  if (v7 != -1)
    swift_once();
  v13[0] = xmmword_1EEF5F4B0;
  v13[1] = unk_1EEF5F4C0;
  v14 = qword_1EEF5F4D0;
  sub_1B1E8FCE4(v6, (uint64_t)v13, 0x200000000, v11);
  sub_1B19F66A0((uint64_t)v11, (uint64_t)v12, (unint64_t *)&qword_1ED4B7DE0);
  if (v12[0])
  {
    v8 = v12[10];
    swift_release();
    sub_1B19ED748(v11);
  }
  else
  {
    swift_release();
    v8 = 0;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v9 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v9;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v8;
}

float32x4_t sub_1B1E66420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float32x4_t v14;
  _DWORD *v15;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[6];
  _BYTE v20[48];
  uint64_t v21;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v7 = *(id *)(a2 + OBJC_IVAR___VFXREScene_scene);
  v8 = swift_retain();
  sub_1B1F2165C(v8, (uint64_t)v19);
  v21 = v2;
  v9 = v19[0];
  v10 = v19[1];
  v11 = v19[2];
  v12 = v19[3];
  swift_release();
  sub_1B19F66A0((uint64_t)v19, (uint64_t)v20, &qword_1EEF58FA8);
  v13 = v20[32];

  if ((v13 & 1) != 0)
  {
    v17 = (float32x4_t)xmmword_1B226DDC0;
    v18 = (float32x4_t)xmmword_1B2244E20;
  }
  else
  {
    v14.i64[0] = v9;
    v14.i64[1] = v10;
    v18 = v14;
    v14.i64[0] = v11;
    v14.i64[1] = v12;
    v17 = v14;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v15 = (_DWORD *)v5(&runtime_thread_is_locked);
  --*v15;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return vsubq_f32(v18, v17);
}

uint64_t sub_1B1E665C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _DWORD *is_locked;
  _DWORD *v14;
  _DWORD *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v17 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F45240(a2, a3, a4, a5, a6, &v18);
  if (v6)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v14 = (_DWORD *)v17(&runtime_thread_is_locked);
    --*v14;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v16 = (_DWORD *)v17(&runtime_thread_is_locked);
    --*v16;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v18;
  }
}

uint64_t sub_1B1E66718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_QWORD);
  _DWORD *is_locked;
  uint64_t v11;
  _DWORD *v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v9 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F43C48();
  v11 = sub_1B1F4BC74(a3, 0, 0, a4, a5);
  swift_release();
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v12 = (_DWORD *)v9(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v11;
}

uint64_t sub_1B1E66820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v7;
  _DWORD *v9;
  uint64_t v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F474F8(a2, &v10);
  if (v2)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v7 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v7;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v10;
  }
}

uint64_t sub_1B1E66934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v9)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v11;
  _DWORD *v13;
  uint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v9 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B1F47DE8(a2, a3, a4, &v14);
  if (v4)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v11 = (_DWORD *)v9(&runtime_thread_is_locked);
    --*v11;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v13 = (_DWORD *)v9(&runtime_thread_is_locked);
    --*v13;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v14;
  }
}

double sub_1B1E66A60(uint64_t a1, uint64_t a2)
{
  return sub_1B1E66AB4(a1, a2, (void (*)(__int128 *__return_ptr, uint64_t))sub_1B2168688);
}

double sub_1B1E66A7C(uint64_t a1, uint64_t a2)
{
  return sub_1B1E66AB4(a1, a2, (void (*)(__int128 *__return_ptr, uint64_t))sub_1B2168CCC);
}

double sub_1B1E66A98(uint64_t a1, uint64_t a2)
{
  return sub_1B1E66AB4(a1, a2, (void (*)(__int128 *__return_ptr, uint64_t))sub_1B216A06C);
}

double sub_1B1E66AB4(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v3;
  uint64_t (*v7)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v9;
  double result;
  _DWORD *v11;
  __int128 v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v7 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  a3(&v12, a2);
  if (v3)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v11 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v11;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return *(double *)&v12;
  }
  return result;
}

double sub_1B1E66BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v7;
  double result;
  _DWORD *v9;
  __int128 v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B2169164(a2, &v10);
  if (v2)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v7 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v7;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return *(double *)&v10;
  }
  return result;
}

double sub_1B1E66CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v7;
  double result;
  _DWORD *v9;
  __int128 v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B2169874(a2, &v10);
  if (v2)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v7 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v7;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return *(double *)&v10;
  }
  return result;
}

float sub_1B1E66E10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v10;
  _DWORD *v11;
  float v13[8];
  char v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v8 = 0.0;
  if ((_DWORD)v6 != -1 || (_DWORD)v7 != 0)
  {
    v10 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v10, v13);
    swift_release();
    if (v14 != 2)
      v8 = (float)(v13[0] * 180.0) / 3.1416;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v8;
}

float sub_1B1E66F58(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;
  __int128 v14;
  unsigned __int8 v15;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v11 = 0.0;
    v10 = 2;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v9, &v14);
    swift_release();
    v10 = v15;
    v11 = *((float *)&v14 + 1);
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  if (v10 == 2)
    v11 = 0.0;
  v12 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v11;
}

float sub_1B1E67090(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;
  __int128 v14;
  unsigned __int8 v15;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v11 = 0.0;
    v10 = 2;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v9, &v14);
    swift_release();
    v10 = v15;
    v11 = *((float *)&v14 + 2);
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  if (v10 == 2)
    v11 = 0.0;
  v12 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v11;
}

float sub_1B1E671C8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;
  __int128 v14;
  unsigned __int8 v15;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v11 = 0.0;
    v10 = 2;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v9, &v14);
    swift_release();
    v10 = v15;
    v11 = *((float *)&v14 + 3);
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  if (v10 == 2)
    v11 = 0.0;
  v12 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v11;
}

float sub_1B1E67300(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;
  __int128 v14;
  float v15;
  unsigned __int8 v16;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v11 = 0.0;
    v10 = 2;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v9, &v14);
    swift_release();
    v10 = v16;
    v11 = v15;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  if (v10 == 2)
    v11 = 0.0;
  v12 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v11;
}

float sub_1B1E67438(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;
  __int128 v14;
  float v15;
  unsigned __int8 v16;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v11 = 0.0;
    v10 = 2;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v9, &v14);
    swift_release();
    v10 = v16;
    v11 = v15;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  if (v10 == 2)
    v11 = 0.0;
  v12 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v11;
}

float sub_1B1E67570(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v10;
  _DWORD *v11;
  __int128 v13;
  float v14;
  char v15;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v8 = 0.0;
  if ((_DWORD)v6 != -1 || (_DWORD)v7 != 0)
  {
    v10 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v10, &v13);
    swift_release();
    if (v15 != 2)
      v8 = *((float *)&v13 + 3) / v14;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v11 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v11;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return v8;
}

float sub_1B1E676A0(uint64_t a1, uint64_t a2)
{
  return sub_1B1E676F4(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B216A474);
}

float sub_1B1E676BC(uint64_t a1, uint64_t a2)
{
  return sub_1B1E676F4(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B216A590);
}

float sub_1B1E676D8(uint64_t a1, uint64_t a2)
{
  return sub_1B1E676F4(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B216A7BC);
}

float sub_1B1E676F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3;
  uint64_t (*v7)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v9;
  float result;
  _DWORD *v11;
  uint64_t v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v7 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  a3(&v12, a2);
  if (v3)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v11 = (_DWORD *)v7(&runtime_thread_is_locked);
    --*v11;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return *(float *)&v12;
  }
  return result;
}

int8x8_t sub_1B1E67814(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(_QWORD);
  _DWORD *is_locked;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  _DWORD *v12;
  __int128 v14;
  unsigned __int8 v15;
  int8x8_t v16;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v4 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  v6 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v7 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v6 == -1 && (_DWORD)v7 == 0)
  {
    v11 = 0;
    v10 = 2;
  }
  else
  {
    v9 = v6 | (v7 << 32);
    swift_retain();
    sub_1B1D178C4(v9, &v14);
    swift_release();
    v10 = v15;
    v11 = v16;
  }
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v12 = (_DWORD *)v4(&runtime_thread_is_locked);
  --*v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  return vbic_s8(v11, (int8x8_t)vceqd_s64(v10, 2));
}

uint64_t sub_1B1E67954(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t (*v5)(_QWORD);
  _DWORD *is_locked;
  _DWORD *v7;
  _DWORD *v9;
  unsigned __int8 v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 64));
  v5 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAED0();
    swift_release();
  }
  sub_1B216ABDC(a2, &v10);
  if (v2)
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v7 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v7;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      sub_1B1DAAE5C();
      swift_release();
    }
    v9 = (_DWORD *)v5(&runtime_thread_is_locked);
    --*v9;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 64));
    return v10;
  }
}

uint64_t sub_1B1E67A6C(uint64_t a1, pthread_mutex_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v28[2];
  sched_param v29;
  pthread_attr_t v30;
  uint64_t v31;

  v4 = v3;
  v31 = *MEMORY[0x1E0C80C00];
  type metadata accessor for WakeUpEvent();
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 24) = 0;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3530]), sel_init);
  *(_QWORD *)(v7 + 16) = v8;
  v9 = v8;
  v10 = (void *)sub_1B2228728();
  objc_msgSend(v9, sel_setName_, v10);

  *(_QWORD *)(v4 + 16) = v7;
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 24) = 0;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3530]), sel_init);
  *(_QWORD *)(v11 + 16) = v12;
  v13 = v12;
  v14 = (void *)sub_1B2228728();
  objc_msgSend(v13, sel_setName_, v14);

  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 24) = v11;
  *(_QWORD *)(v4 + 40) = MEMORY[0x1E0DEE9E0];
  v15 = swift_allocObject();
  *(_BYTE *)(v15 + 24) = 0;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3530]), sel_init);
  *(_QWORD *)(v15 + 16) = v16;
  v17 = v16;
  v18 = (void *)sub_1B2228728();
  objc_msgSend(v17, sel_setName_, v18);

  *(_QWORD *)(v4 + 48) = v15;
  v19 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 72) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 80) = v19;
  v20 = (_QWORD *)swift_slowAlloc();
  *v20 = 0;
  *(_QWORD *)(v4 + 88) = "RuntimeThread work queue lock";
  *(_QWORD *)(v4 + 96) = 29;
  *(_BYTE *)(v4 + 104) = 2;
  *(_QWORD *)(v4 + 112) = v20;
  *(_BYTE *)(v4 + 120) = 0;
  swift_weakInit();
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_BYTE *)(v4 + 152) = 0;
  swift_weakAssign();
  *(_QWORD *)(v4 + 136) = a3;
  swift_retain();
  swift_release();
  if (a2)
  {
    *(_BYTE *)(v4 + 56) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 56) = 1;
    v30.__sig = 0;
    *(_QWORD *)v30.__opaque = 0;
    pthread_mutexattr_init((pthread_mutexattr_t *)&v30);
    pthread_mutexattr_settype((pthread_mutexattr_t *)&v30, 2);
    pthread_mutexattr_setpolicy_np((pthread_mutexattr_t *)&v30, 1);
    a2 = (pthread_mutex_t *)swift_slowAlloc();
    pthread_mutex_init(a2, (const pthread_mutexattr_t *)&v30);
  }
  *(_QWORD *)(v4 + 64) = a2;
  memset(&v30, 0, sizeof(v30));
  pthread_attr_init(&v30);
  pthread_attr_setdetachstate(&v30, 2);
  pthread_attr_setschedpolicy(&v30, 2);
  v29 = (sched_param)45;
  pthread_attr_setschedparam(&v30, &v29);
  swift_retain();
  switch(pthread_create((pthread_t *)(v4 + 32), &v30, (void *(__cdecl *)(void *))sub_1B1E64A78, (void *)v4))
  {
    case 0:
      goto LABEL_27;
    case 1:
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v21 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v28[0] = 0;
      swift_retain();
      v22 = 0xD00000000000008ELL;
      v23 = "Runtime thread creation failed: the caller does not have appropriate permission to set the required scheduli"
            "ng parameters or scheduling policy";
      goto LABEL_25;
    case 22:
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v21 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v28[0] = 0;
      swift_retain();
      v22 = 0xD000000000000049;
      v23 = "Runtime thread creation failed: the attributes value specified is invalid";
      goto LABEL_25;
    case 35:
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v21 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v28[0] = 0;
      swift_retain();
      v22 = 0xD0000000000000ABLL;
      v23 = "Runtime thread creation failed: the system lacked the necessary resources to create another thread, or the s"
            "ystem imposed limit on the total number of threads in a process";
LABEL_25:
      sub_1B1F1AD70(v21, v28, v22, (unint64_t)(v23 - 32) | 0x8000000000000000);
      swift_release();
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v28[1] = 0x80000001B233FA10;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v24 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v28[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v24, v28, 0xD00000000000002ELL, 0x80000001B233FA10);
      swift_release();
      swift_bridgeObjectRelease();
      break;
  }
  swift_release();
LABEL_27:
  v25 = *(_QWORD *)(v4 + 48);
  v26 = *(void **)(v25 + 16);
  swift_retain();
  objc_msgSend(v26, sel_lock);
  while ((*(_BYTE *)(v25 + 24) & 1) == 0)
    objc_msgSend(*(id *)(v25 + 16), sel_wait);
  *(_BYTE *)(v25 + 24) = 0;
  objc_msgSend(*(id *)(v25 + 16), sel_unlock);
  swift_release();
  pthread_attr_destroy(&v30);
  return v4;
}

void sub_1B1E680FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB478)
  {
    sub_1B1A0FCB4();
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB478);
  }
}

void sub_1B1E68160()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB008)
  {
    sub_1B1A0FCB4();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB008);
  }
}

uint64_t sub_1B1E681B8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E681FC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t DynamicType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B202AD80(0, v1, 0);
    v2 = v13;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      sub_1B19FA070(v4, v4[3]);
      DynamicType = swift_getDynamicType();
      v7 = v4[3];
      v6 = v4[4];
      sub_1B19FA070(v4, v7);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1B202AD80(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      if (v10 >= v9 >> 1)
        sub_1B202AD80(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = (_QWORD *)(v13 + 24 * v10);
      v11[4] = DynamicType;
      v11[5] = v6;
      v11[6] = v8;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1E68344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD v48[2];

  v12 = v11;
  result = sub_1B1A11FDC(a1);
  if ((v23 & 1) != 0)
    return 0;
  v44 = a3;
  v45 = a1;
  v46 = a8;
  if (a8)
  {
    v47 = v22;
    v24 = result;
    v43 = a11;
    v25 = ecs_stack_allocator_allocate(*(_QWORD *)(a11 + 32), a10 * a4, a5);
    v26 = (uint64_t)v25 + a10 * a4;
    v27 = a6;
    v41 = a10;
    v42 = (char *)v26;
    v40 = v24;
    v28 = v46;
    if (a6)
    {
      v29 = a9;
      v30 = v27;
      sub_1B1A100D8(v24, v47, v46, a9, a10, (uint64_t)v25, v26, v27, a7);
      v32 = v44;
      v31 = v45;
    }
    else
    {
      v29 = a9;
      v36 = v24;
      v31 = a1;
      v30 = 0;
      sub_1B1A0FEC8(v46, a9, a10, v36, v47, (uint64_t)v25, v26, a1);
      v32 = v44;
    }
  }
  else
  {
    if (!a6)
      return result;
    v43 = a11;
    v33 = result;
    v30 = a6;
    v34 = *(_QWORD *)(v11 + 240) * a4;
    v35 = v22;
    v41 = a10;
    v29 = a9;
    v25 = ecs_stack_allocator_allocate(*(_QWORD *)(a11 + 32), v34, a5);
    v40 = v33;
    v47 = v35;
    v42 = (char *)v25 + v34;
    (*(void (**)(uint64_t, uint64_t))(a7 + 40))(v33, v35);
    v32 = v44;
    v31 = v45;
    v28 = 0;
  }
  v48[0] = v30;
  v48[1] = a7;
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = v28;
  v37[3] = v29;
  v37[4] = v41;
  sub_1B1A18378((uint64_t)v48, (uint64_t)(v37 + 5), (unint64_t *)&unk_1ED4B8AA0, (uint64_t)&type metadata for PackedRewriter);
  v37[9] = v40;
  v37[10] = v47;
  v37[13] = v32;
  v37[14] = v12;
  v38 = *(_QWORD *)(v43 + 64);
  v39 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 48 * v38);
  v37[7] = v25;
  v37[8] = v42;
  v37[11] = v31;
  v37[12] = a2;
  *v39 = v31;
  v39[1] = a2;
  v39[2] = v32;
  v39[3] = (uint64_t)v25;
  v39[4] = (uint64_t)sub_1B1E700F0;
  v39[5] = (uint64_t)v37;
  *(_QWORD *)(v43 + 64) = v38 + 1;
  return (uint64_t)v25;
}

uint64_t sub_1B1E685B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v40[48];
  char v41[8];
  uint64_t v42;
  uint64_t v43;
  char v44[8];
  uint64_t v45;
  char v46[8];
  uint64_t v47;

  v11 = v10;
  sub_1B1A18378((uint64_t)a6, (uint64_t)v41, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
  v37 = v42;
  v36 = v43;
  v18 = sub_1B1A11FDC(a1);
  if ((v20 & 1) != 0)
    return 0;
  v21 = v18;
  v22 = v19;
  if (!a7)
  {
    sub_1B1A18378((uint64_t)a6, (uint64_t)v46, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
    if (!v47)
      return v21;
    v30 = *(_QWORD *)(v10 + 240) * a4;
    v24 = ecs_stack_allocator_allocate(*(_QWORD *)(a10 + 32), v30, a5);
    sub_1B1A18378((uint64_t)a6, (uint64_t)v44, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
    if (v45)
    {
      v34 = (char *)v24 + v30;
      v35 = a10;
      v31 = *(_QWORD *)(v10 + 240);
      v33 = *(_QWORD *)(v11 + 232);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1E6C848(v21, (uint64_t)v24, v33, v31, 0, v37, v36);
      swift_release();
      swift_bridgeObjectRelease();
      v26 = 0;
      goto LABEL_5;
    }
    return 0;
  }
  v35 = a10;
  v23 = a9 * a4;
  v24 = ecs_stack_allocator_allocate(*(_QWORD *)(a10 + 32), v23, a5);
  sub_1B1A18378((uint64_t)a6, (uint64_t)v46, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
  if (!v47)
  {
    v25 = (uint64_t)v24 + v23;
    v26 = a7;
    v34 = (char *)v25;
    sub_1B1A0FEC8(a7, a8, a9, v21, v22, (uint64_t)v24, v25, a1);
LABEL_5:
    sub_1B1A18378((uint64_t)a6, (uint64_t)v40, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
    swift_unownedRetainStrong();
    sub_1B1E6E0D0(a6);
    swift_unownedRetain();
    swift_release();
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = v26;
    v27[3] = a8;
    v27[4] = a9;
    sub_1B1A18378((uint64_t)v40, (uint64_t)(v27 + 5), &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
    v27[13] = v21;
    v27[14] = v22;
    v27[17] = a3;
    v27[18] = v11;
    v28 = *(_QWORD *)(v35 + 64);
    v29 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 48 * v28);
    v27[11] = v24;
    v27[12] = v34;
    v27[15] = a1;
    v27[16] = a2;
    *v29 = a1;
    v29[1] = a2;
    v29[2] = a3;
    v29[3] = (uint64_t)v24;
    v29[4] = (uint64_t)sub_1B1E6E16C;
    v29[5] = (uint64_t)v27;
    *(_QWORD *)(v35 + 64) = v28 + 1;
    return (uint64_t)v24;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1E688D4(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1E6E2E8(*a1, 0.5);
  *a2 = v3;
}

void sub_1B1E68900(float32x4_t *a1, _OWORD *a2)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1E6E2E8(*a1, 2.0);
  *a2 = v3;
}

double sub_1B1E68930@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v3 = v2;
  v5 = *(_QWORD *)v2;
  v6 = *(unsigned __int16 *)(*(_QWORD *)v2 + 28);
  v7 = *(unsigned __int16 *)(*(_QWORD *)v2 + 30);
  v8 = sub_1B1E681FC(a1);
  v9 = v8;
  if (v7 >= 0x18)
  {
    v11 = (char *)(v5 + v6 + 41);
    v12 = *(_QWORD *)(v9 + 16);
    v13 = sub_1B1DC8DFC(v11, (178956971 * (unint64_t)v7) >> 32);
    v10 = v13;
    if (v12)
    {
      *(_QWORD *)&v16[0] = v13;
      sub_1B19F4CBC(v9);
      v10 = *(_QWORD *)&v16[0];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = v8;
  }
  sub_1B1E69CE8((char *)(v10 + 32), *(_QWORD *)(v10 + 16), v3, (uint64_t)v16);
  swift_bridgeObjectRelease();
  result = *(double *)v16;
  v15 = v16[1];
  *(_OWORD *)a2 = v16[0];
  *(_OWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 32) = v17;
  return result;
}

double sub_1B1E68A14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v3 = v2;
  v5 = *(_QWORD *)v2;
  v6 = *(unsigned __int16 *)(*(_QWORD *)v2 + 28);
  v7 = *(unsigned __int16 *)(*(_QWORD *)v2 + 30);
  v8 = sub_1B1E681FC(a1);
  v9 = v8;
  if (v7 >= 0x18)
  {
    v11 = (char *)(v5 + v6 + 41);
    v12 = *(_QWORD *)(v9 + 16);
    v13 = sub_1B1DC8DFC(v11, (178956971 * (unint64_t)v7) >> 32);
    v10 = v13;
    if (v12)
    {
      *(_QWORD *)&v16[0] = v13;
      sub_1B19F4CBC(v9);
      v10 = *(_QWORD *)&v16[0];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = v8;
  }
  sub_1B1E69C3C((char *)(v10 + 32), *(_QWORD *)(v10 + 16), v3, (uint64_t)v16);
  swift_bridgeObjectRelease();
  result = *(double *)v16;
  v15 = v16[1];
  *(_OWORD *)a2 = v16[0];
  *(_OWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 32) = v17;
  return result;
}

uint64_t sub_1B1E68AF8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v6;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v6 = *(unsigned __int16 **)v3;
  if ((a2 & 1) != 0)
  {
    v8 = (char *)v6 + 41;
    v9 = v6[9];
    if (v9 >= 0x10)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = sub_1B1DC8944(&v8[v6[8]], v9 >> 4);
      v10 = v18;
      if (v17)
      {
        v30 = v18;
        v19 = swift_bridgeObjectRetain();
        sub_1B19F4A48(v19);
        v10 = v30;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v10 = a1;
    }
    v20 = v6[10];
    v21 = v6[11];
    v22 = sub_1B19F3C40(0, *(_QWORD *)(a1 + 16));
    v23 = v22;
    if (v21)
    {
      v24 = &v8[v20];
      v25 = *(_QWORD *)(v23 + 16);
      v26 = sub_1B1DC8810(v24, v21);
      v27 = v26;
      if (v25)
      {
        v31 = v26;
        sub_1B19F499C(v23);
        v27 = v31;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v27 = v22;
    }
    v28 = &v8[v6[12]];
    v29 = &v8[v6[14]];
    v15 = *(_DWORD *)(v4 + 8);
    v14 = *(_BYTE *)(v4 + 12);
    v11 = *(_QWORD *)(v4 + 32);
    v13 = *(_QWORD *)(v4 + 16);
    v12 = *(_BYTE *)(v4 + 24);
    v6 = (unsigned __int16 *)sub_1B1CC8DA4((char *)(v10 + 32), *(_QWORD *)(v10 + 16), (char *)(v27 + 32), *(_QWORD *)(v27 + 16), v28, (unint64_t)v6[13] >> 4, v29, v6[15] / 0x18u);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)(v3 + 32);
    v12 = *(_BYTE *)(v3 + 24);
    v13 = *(_QWORD *)(v3 + 16);
    v14 = *(_BYTE *)(v3 + 12);
    v15 = *(_DWORD *)(v3 + 8);
    result = swift_retain();
  }
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 12) = v14;
  *(_QWORD *)(a3 + 16) = v13;
  *(_BYTE *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v11;
  return result;
}

uint64_t sub_1B1E68C9C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int16 *v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(unsigned __int16 **)v3;
  v6 = *(_DWORD *)(v3 + 8);
  v7 = *(_BYTE *)(v3 + 12);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_BYTE *)(v3 + 24);
  v10 = *(_QWORD *)(v3 + 32);
  if ((a2 & 1) != 0)
  {
    v27 = *(_DWORD *)(v3 + 8);
    v28 = *(_BYTE *)(v3 + 12);
    v12 = (char *)v5 + 41;
    v13 = v5[9];
    if (v13 >= 0x10)
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = sub_1B1DC8944(&v12[v5[8]], v13 >> 4);
      v14 = v17;
      if (v16)
      {
        v29 = v17;
        v18 = swift_bridgeObjectRetain();
        sub_1B19F4A48(v18);
        v14 = v29;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v14 = a1;
    }
    v19 = v5[10];
    v20 = v5[11];
    v21 = sub_1B19F3C40(0, *(_QWORD *)(a1 + 16));
    v22 = v21;
    if (v20)
    {
      v23 = &v12[v19];
      v24 = *(_QWORD *)(v22 + 16);
      v25 = sub_1B1DC8810(v23, v20);
      v26 = v25;
      if (v24)
      {
        v30 = v25;
        sub_1B19F499C(v22);
        v26 = v30;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v26 = v21;
    }
    v6 = v27;
    v5 = (unsigned __int16 *)sub_1B1CC8DA4((char *)(v14 + 32), *(_QWORD *)(v14 + 16), (char *)(v26 + 32), *(_QWORD *)(v26 + 16), &v12[v5[12]], (unint64_t)v5[13] >> 4, &v12[v5[14]], v5[15] / 0x18u);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v7 = v28;
  }
  else
  {
    result = swift_retain();
  }
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 12) = v7;
  *(_QWORD *)(a3 + 16) = v8;
  *(_BYTE *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v10;
  return result;
}

uint64_t sub_1B1E68E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v2 = 0;
  }
  sub_1B1C929C8(0, v1 != 0);
  return v2;
}

uint64_t sub_1B1E68E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  _BYTE v11[16];

  v1 = v0;
  if ((*(_WORD *)(v0 + 42) & 0x80) == 0)
  {
    v2 = MEMORY[0x1E0DEB418];
    sub_1B1A18378(v0 + 32, (uint64_t)v10, &qword_1ED4BA580, MEMORY[0x1E0DEB418]);
    sub_1B1A18378((uint64_t)v10, (uint64_t)v11, &qword_1ED4BA580, v2);
    if (v11[8] == 1)
    {
      v3 = sub_1B2229304();
      if (swift_conformsToProtocol2() ? v3 : 0)
      {
        v5 = sub_1B2229304();
        result = swift_conformsToProtocol2();
        if (!result)
        {
          __break(1u);
          goto LABEL_15;
        }
        if (sub_1B1F24B94(v5))
        {
          v7 = sub_1B2229304();
          result = swift_conformsToProtocol2();
          if (result)
          {
            v8 = sub_1B1F24AA4(v7);
            sub_1B1B69BE0(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 24));
            if (v8 == v9)
              return 0;
            return *(unsigned __int8 *)(v1 + 40);
          }
LABEL_15:
          __break(1u);
          return result;
        }
      }
    }
  }
  return *(unsigned __int8 *)(v1 + 40);
}

uint64_t sub_1B1E68FB0(uint64_t a1, unsigned __int8 a2)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (swift_dynamicCastMetatype())
    goto LABEL_2;
  type metadata accessor for frame_constants(0);
  if (swift_dynamicCastMetatype())
    goto LABEL_4;
  if (swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype())
  {
    v4 = 0;
    return v4 & 1;
  }
  if (swift_dynamicCastMetatype())
    goto LABEL_2;
  if (swift_dynamicCastMetatype())
    goto LABEL_2;
  sub_1B1A0DBF0(0, v6, v7, v8);
  if (swift_dynamicCastMetatype())
    goto LABEL_2;
  if (swift_dynamicCastMetatype())
  {
    if (a2 > 1u)
    {
      swift_bridgeObjectRelease();
      v4 = 0;
    }
    else
    {
      v10 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      v4 = v10 ^ 1;
    }
  }
  else
  {
    if (a1 == MEMORY[0x1E0DEE9B8] + 8)
    {
LABEL_2:
      v4 = 1;
      return v4 & 1;
    }
    if (swift_dynamicCastMetatype()
      || (type metadata accessor for __vfx_sampler1d(0), swift_dynamicCastMetatype())
      || (type metadata accessor for __vfx_sampler2d(0), swift_dynamicCastMetatype())
      || (type metadata accessor for __vfx_sampler3d(0), swift_dynamicCastMetatype()))
    {
LABEL_4:
      v4 = (a2 & 1) == 0;
      return v4 & 1;
    }
    if (swift_conformsToProtocol2())
      v9 = a1;
    else
      v9 = 0;
    v4 = v9 != 0;
  }
  return v4 & 1;
}

uint64_t sub_1B1E691B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t (**v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t (**v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v61)(uint64_t);
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = 8 * *(_QWORD *)(v1[1] + 16);
  swift_retain();
  *v2 = ecs_stack_allocator_allocate(v4, v5, 8);
  v6 = OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
  v7 = type metadata accessor for ScriptingConfiguration();
  v8 = v2[1];
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_45:
    swift_release();
    return 1;
  }
  v57 = *(_QWORD *)(v3 + v6 + *(int *)(v7 + 36));
  v10 = (_QWORD *)v2[5];
  swift_bridgeObjectRetain();
  v58 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_1B1FFEDF4(v10);
  v11 = 0;
  v2[5] = v10;
  v12 = v8 + 40;
  v13 = 4;
  v62 = v2;
  v59 = v9;
  while (1)
  {
    v17 = *(_QWORD *)(v12 - 8);
    if ((v17 >> 60) - 9 < 2)
      goto LABEL_7;
    v63 = (_QWORD *)v2[5];
    v18 = (uint64_t (**)(uint64_t))&v63[v13];
    v19 = v63[v13 + 3];
    v67 = *(_QWORD *)(v12 - 8);
    if ((~LODWORD(v63[v13 + 3]) & 0xFCLL) != 0)
    {
      v15 = *v18;
      v20 = (uint64_t)v18[1];
      v21 = (uint64_t)v18[2];
      v22 = (uint64_t)v18[4];
      v23 = v19 & 0x3F;
      v65 = v21;
      if (v19 >> 6 != 1)
        v23 = v21;
      v24 = v19 >> 6 ? v23 : v63[v13 + 3];
      if (v24 && (v24 == 1 || v22 >= v57))
      {
        sub_1B1B1DD24(v17);
        v16 = v65;
        sub_1B19F8C04((uint64_t)v15, v20, v65, v19);
        goto LABEL_24;
      }
    }
    sub_1B1B1DD24(v17);
    sub_1B1B1DD24(v17);
    sub_1B1E6B02C(v17);
    if (v28 >= 0xFCu)
      break;
    v15 = v25;
    v20 = v26;
    v16 = v27;
    LOBYTE(v19) = v28;
    sub_1B1A05610(v17);
    if (!(v19 >> 6))
    {
      v29 = v19;
      v2 = v62;
      if (!(_BYTE)v19)
      {
        LOBYTE(v19) = 0;
        goto LABEL_39;
      }
LABEL_27:
      if (v29)
      {
        if (v29 == 1)
          v31 = 0;
        else
          v31 = v57;
      }
      else
      {
        v31 = -1;
      }
      sub_1B19F8C18((uint64_t)v15, v20, v16, v19);
      sub_1B19F8C18((uint64_t)v15, v20, v16, v19);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v63 = sub_1B1FFEDF4(v63);
      v32 = (uint64_t (**)(uint64_t))&v63[v13];
      v33 = v63[v13];
      v34 = v63[v13 + 1];
      v35 = v63[v13 + 2];
      v36 = v63[v13 + 3];
      *v32 = v15;
      v32[1] = (uint64_t (*)(uint64_t))v20;
      v32[2] = (uint64_t (*)(uint64_t))v16;
      v32[3] = (uint64_t (*)(uint64_t))v19;
      v32[4] = (uint64_t (*)(uint64_t))v31;
      sub_1B19F8C8C(v33, v34, v35, v36);
      sub_1B1E6C810((uint64_t)v15, v20, v16, v19);
      v2[5] = v63;
      v30 = v19 >> 6;
      if (!(v19 >> 6))
        goto LABEL_39;
      goto LABEL_35;
    }
    v2 = v62;
    if (v19 >> 6 == 1)
      goto LABEL_39;
    if ((_BYTE)v16)
    {
      v29 = v16;
      goto LABEL_27;
    }
LABEL_24:
    v30 = v19 >> 6;
    if (!(v19 >> 6))
      goto LABEL_39;
LABEL_35:
    if (v30 != 1)
    {
      swift_retain();
      v37 = v15(a1);
      v39 = v38;
      v40 = v20;
      v42 = v41;
      v64 = v40;
      sub_1B19F8CA0((uint64_t)v15, v40, v16, v19);
      if (v39)
        goto LABEL_40;
      goto LABEL_6;
    }
LABEL_39:
    sub_1B19F8C48(v20);
    v37 = (uint64_t)v15;
    v64 = v20;
    v39 = v20;
    v42 = v16;
    if (v39)
    {
LABEL_40:
      v66 = v16;
      v43 = swift_allocObject();
      v44 = v2;
      v45 = v43;
      *(_QWORD *)(v43 + 16) = v39;
      *(_QWORD *)(v43 + 24) = v42;
      v46 = (_QWORD *)v44[6];
      swift_retain();
      v61 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v46 = sub_1B1C62B5C(0, v46[2] + 1, 1, v46);
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
        v46 = sub_1B1C62B5C(v47 > 1, v48 + 1, 1, v46);
      v46[2] = v48 + 1;
      v14 = &v46[2 * v48];
      v14[4] = sub_1B1DB39F8;
      v14[5] = v45;
      v15 = v61;
      v2 = v62;
      v62[6] = v46;
      v16 = v66;
    }
LABEL_6:
    *(_QWORD *)(*v2 + 8 * v11) = v37;
    sub_1B19F8CA0((uint64_t)v15, v64, v16, v19);
    sub_1B19E5A18(v39);
    sub_1B1A05610(v67);
    v9 = v59;
LABEL_7:
    ++v11;
    v12 += 32;
    v13 += 5;
    if (v9 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
  }
  if (*(_BYTE *)(v58 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) != 1)
  {
    v50 = *(_QWORD *)(v58 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    v68[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B22295EC();
    v51 = sub_1B2228E90();
    v68[0] = 0;
    (*(void (**)(uint64_t, _QWORD *, _QWORD, unint64_t))(*(_QWORD *)v50 + 88))(v51, v68, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_1B1A05610(v17);
  swift_bridgeObjectRelease();
  sub_1B1A05610(v17);
  v52 = v62[6];
  v53 = *(_QWORD *)(v52 + 16);
  if (v53)
  {
    swift_bridgeObjectRetain();
    v54 = v52 + 40;
    do
    {
      v55 = *(void (**)(uint64_t))(v54 - 8);
      v56 = swift_retain();
      v55(v56);
      swift_release();
      v54 += 16;
      --v53;
    }
    while (v53);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  return 0;
}

uint64_t sub_1B1E69784(unsigned __int16 **a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t (*v20)(_QWORD *);
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE v52[40];
  uint64_t v53;
  unint64_t v54;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v5 + 16);
  swift_retain();
  swift_retain();
  v48 = (_QWORD *)v5;
  sub_1B1F02DC8(v6, v5, (uint64_t)v52);
  sub_1B1A18378((uint64_t)v52, (uint64_t)(v3 + 8), &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
  v8 = *(_QWORD *)(v3[1] + 16);
  if (v8)
  {
    v43 = (uint64_t)(v3 + 8);
    v44 = a1;
    v9 = 0;
    v10 = swift_bridgeObjectRetain() + 40;
    v45 = v8;
    v46 = v7;
    v49 = v3;
    while (1)
    {
      v14 = *(_QWORD *)(v10 - 8);
      if ((v14 >> 60) - 9 > 1)
        goto LABEL_5;
      sub_1B1B1DD24(*(_QWORD *)(v10 - 8));
      swift_retain();
      sub_1B1B1DD24(v14);
      sub_1B1E6B02C(v14);
      v19 = v14;
      if (v18 >= 0xFCu)
      {
        if (*(_BYTE *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) == 1)
        {
          swift_release();
        }
        else
        {
          v34 = *(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
          v53 = 0;
          v54 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          sub_1B22295EC();
          v35 = v53;
          v36 = v54;
          v37 = sub_1B2228E90();
          v53 = 0;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(_QWORD *)v34 + 88))(v37, &v53, v35, v36);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        sub_1B1A05610(v14);
        swift_bridgeObjectRelease();
        sub_1B1A05610(v14);
        v38 = v49[7];
        sub_1B1A18378(v43, (uint64_t)&v53, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        sub_1B1F05D48(v48, v44, (uint64_t)&v53);
        v39 = *(_QWORD *)(v38 + 16);
        if (v39)
        {
          swift_bridgeObjectRetain();
          v40 = v38 + 40;
          do
          {
            v41 = *(void (**)(uint64_t))(v40 - 8);
            v42 = swift_retain();
            v41(v42);
            swift_release();
            v40 += 16;
            --v39;
          }
          while (v39);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return 0;
        }
        else
        {
          swift_release();
          swift_release();
          return 0;
        }
      }
      v20 = v15;
      v21 = v16;
      v22 = v17;
      v23 = v18;
      swift_release();
      v50 = v19;
      sub_1B1A05610(v19);
      if (v23 >> 6)
      {
        v12 = v49;
        if (v23 >> 6 == 1)
        {
          sub_1B19F8C48(v21);
          v13 = (uint64_t)v20;
          v24 = v21;
          v51 = v22;
          if (v21)
            goto LABEL_15;
        }
        else
        {
          swift_retain();
          v13 = v20(v48);
          v24 = v25;
          v51 = v26;
          sub_1B1E6C810((uint64_t)v20, v21, v22, v23);
          if (v24)
          {
LABEL_15:
            v47 = v13;
            v27 = swift_allocObject();
            *(_QWORD *)(v27 + 16) = v24;
            *(_QWORD *)(v27 + 24) = v51;
            v28 = (_QWORD *)v12[7];
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v28 = sub_1B1C62B5C(0, v28[2] + 1, 1, v28);
            v30 = v28[2];
            v29 = v28[3];
            v31 = v30 + 1;
            if (v30 >= v29 >> 1)
            {
              v32 = sub_1B1C62B5C(v29 > 1, v30 + 1, 1, v28);
              v31 = v30 + 1;
              v28 = v32;
            }
            v28[2] = v31;
            v11 = &v28[2 * v30];
            v11[4] = sub_1B1CB734C;
            v11[5] = v27;
            v12 = v49;
            v49[7] = v28;
            v13 = v47;
          }
        }
      }
      else
      {
        sub_1B19F8C48(v21);
        v13 = (uint64_t)v20;
        v24 = v21;
        v51 = v22;
        v12 = v49;
        if (v21)
          goto LABEL_15;
      }
      *(_QWORD *)(*v12 + 8 * v9) = v13;
      sub_1B19E5A18(v24);
      sub_1B1E6C810((uint64_t)v20, v21, v22, v23);
      sub_1B1A05610(v50);
      v8 = v45;
LABEL_5:
      ++v9;
      v10 += 32;
      if (v8 == v9)
        goto LABEL_20;
    }
  }
  swift_bridgeObjectRetain();
LABEL_20:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1B1E69C3C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;

  v5 = *(_DWORD *)(a3 + 8);
  v6 = *(_BYTE *)(a3 + 12);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_BYTE *)(a3 + 24);
  result = sub_1B1CC8DA4((char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 16)), (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 18) >> 4, (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 20)), *(unsigned __int16 *)(*(_QWORD *)a3 + 22), (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 24)), (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 26) >> 4, a1, a2);
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 12) = v6;
  *(_QWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 32) = v7;
  return result;
}

uint64_t sub_1B1E69CE8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_DWORD *)(a3 + 8);
  v6 = *(_BYTE *)(a3 + 12);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_BYTE *)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  result = sub_1B1CC8DA4((char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 16)), (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 18) >> 4, (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 20)), *(unsigned __int16 *)(*(_QWORD *)a3 + 22), (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 24)), (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 26) >> 4, a1, a2);
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 12) = v6;
  *(_QWORD *)(a4 + 16) = v7;
  *(_BYTE *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = v9;
  return result;
}

uint64_t sub_1B1E69D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  _BYTE v11[16];

  if ((*(_WORD *)(v0 + 42) & 0x80) == 0)
  {
    v1 = v0;
    v2 = MEMORY[0x1E0DEB418];
    sub_1B1A18378(v0 + 32, (uint64_t)v10, &qword_1ED4BA580, MEMORY[0x1E0DEB418]);
    sub_1B1A18378((uint64_t)v10, (uint64_t)v11, &qword_1ED4BA580, v2);
    if (v11[8] == 1)
    {
      v3 = sub_1B2229304();
      if (swift_conformsToProtocol2() ? v3 : 0)
      {
        v5 = sub_1B2229304();
        result = swift_conformsToProtocol2();
        if (!result)
        {
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
        if (sub_1B1F24B94(v5))
        {
          v7 = sub_1B2229304();
          result = swift_conformsToProtocol2();
          if (result)
          {
            v8 = sub_1B1F24AA4(v7);
            sub_1B1B69BE0(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 24));
            return v8 == v9;
          }
          goto LABEL_14;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1B1E69EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  __int128 v29;

  sub_1B1A02864(a1, (uint64_t)&v28);
  sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
  v4 = MEMORY[0x1E0DEE9B8];
  if (!swift_dynamicCast())
    return sub_1B1A02864(a1, a2);
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v6 = v5;
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(v27, sel_VFXFloat2Value);
    v8 = v7;
    *((_QWORD *)&v29 + 1) = v6;

    *(_QWORD *)&v28 = v8;
  }
  else
  {
    sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
    v11 = v10;
    if (swift_dynamicCastMetatype())
    {
      objc_msgSend(v27, sel_VFXFloat3Value);
    }
    else
    {
      sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
      v11 = v13;
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for simd_float4x4(0);
        v16 = v15;
        if (swift_dynamicCastMetatype())
        {
          objc_msgSend(v27, sel_VFXMatrix4Value);
          v24 = v18;
          v26 = v17;
          v22 = v20;
          v23 = v19;
          *((_QWORD *)&v29 + 1) = v16;
          v21 = (_OWORD *)swift_allocObject();
          *(_QWORD *)&v28 = v21;

          v21[1] = v26;
          v21[2] = v24;
          v21[3] = v23;
          v21[4] = v22;
        }
        else
        {

          v28 = 0u;
          v29 = 0u;
        }
        return sub_1B1A18378((uint64_t)&v28, a2, (unint64_t *)&qword_1ED4BB150, v4 + 8);
      }
      objc_msgSend(v27, sel_VFXFloat4Value);
    }
    v25 = v12;
    *((_QWORD *)&v29 + 1) = v11;
    v14 = swift_allocObject();
    *(_QWORD *)&v28 = v14;

    *(_OWORD *)(v14 + 16) = v25;
  }
  return sub_1B1A18378((uint64_t)&v28, a2, (unint64_t *)&qword_1ED4BB150, v4 + 8);
}

uint64_t sub_1B1E6A0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  __int128 v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;
  uint64_t v13[4];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16[4];

  sub_1B1EFF724(a3, a2, v16);
  v13[3] = swift_getObjectType();
  v11 = &type metadata for Extensions;
  v12 = &off_1E63744C8;
  v13[0] = a4;
  swift_unknownObjectRetain();
  sub_1B1B7D784((uint64_t *)&v10, v13);
  sub_1B1A02518(&v10, (uint64_t)v14);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  v8 = v15;
  sub_1B19FA070(v14, v15);
  sub_1B1EFFADC((uint64_t)v16, a6, v8);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
  sub_1B1EFFA40();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
}

uint64_t (*sub_1B1E6A1C8(unint64_t a1, _QWORD *a2, char a3, uint64_t a4, char a5, uint64_t a6))(uint64_t a1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t (*result)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  ValueMetadata *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t KeyPath;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t DynamicType;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  char v68;
  _BOOL4 v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72[2];
  uint64_t v73;
  _OWORD v74[3];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;

  v7 = v6;
  v8 = a6;
  v11 = a1;
  v12 = a3;
  v71 = HIDWORD(a1);
  if ((a5 & 1) != 0)
  {
    v14 = a2[4];
    if (*((_BYTE *)a2 + 40) != 1)
      goto LABEL_16;
    v70 = a4;
    v16 = a1;
    v17 = a6;
    v18 = v6;
    v19 = a3;
    v15 = 0;
    v20 = 0;
    v69 = 0;
  }
  else if (a4 > 1049)
  {
    v16 = a1;
    v17 = a6;
    v18 = v6;
    v19 = a3;
    v20 = (unint64_t)a4 < 0x425;
    v14 = a2[4];
    if ((a2[5] & 1) == 0)
    {
      v12 = a3;
      v7 = v6;
      v8 = a6;
      v11 = a1;
      goto LABEL_16;
    }
    v69 = (unint64_t)a4 < 0x7DE;
    v70 = a4;
    v15 = 0;
  }
  else
  {
    v70 = a4;
    v13 = sub_1B1E68FB0(a2[3], 2u);
    v14 = a2[4];
    if ((a2[5] & 1) == 0)
    {
      if ((v13 & 1) != 0)
      {
        v15 = 1;
        v69 = 1;
        goto LABEL_33;
      }
      goto LABEL_16;
    }
    v15 = v13;
    v16 = v11;
    v17 = v8;
    v18 = v6;
    v19 = v12;
    v20 = 1;
    v69 = 1;
  }
  if ((sub_1B1E69D90() & 1) == 0 || v20)
  {
    v12 = v19;
    v7 = v18;
    v8 = v17;
    v11 = v16;
    goto LABEL_33;
  }
  v12 = v19;
  v7 = v18;
  v8 = v17;
  v11 = v16;
  if ((v15 & 1) != 0)
  {
LABEL_33:
    v68 = v15;
    v38 = a2[2];
    v39 = (ValueMetadata *)sub_1B2229304();
    result = (uint64_t (*)(uint64_t))swift_conformsToProtocol2();
    if (result)
    {
      if ((*((_WORD *)a2 + 21) & 0x400) == 0)
      {
LABEL_35:
        if ((v12 & 1) == 0)
        {
          v40 = sub_1B1D76F30(a2[3]);
          if ((~v40 & 0xF000000000000007) != 0)
          {
            v48 = v40;
            sub_1B1D750D8(v40, (uint64_t)v74, 0.0);
            sub_1B1BCBFE4(v48);
          }
          else
          {
            memset(v74, 0, 32);
          }
          sub_1B1A18378((uint64_t)v74, (uint64_t)&v75, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
          if (v76)
            goto LABEL_58;
          sub_1B1A0DD70((uint64_t)&v75);
        }
        if (v39 == &type metadata for TextureFileAsset)
        {
          sub_1B2229328();
          KeyPath = swift_getKeyPath();
          v50 = MEMORY[0x1B5E20EC8](v38, KeyPath);
          swift_release();
          if ((v50 & 1) != 0)
          {
            v51 = sub_1B1FDF6CC(v11, v7);
            if (v52)
            {
              v79 = MEMORY[0x1E0DEA968];
              *(_QWORD *)&v78 = v51;
              *((_QWORD *)&v78 + 1) = v52;
LABEL_59:
              v53 = a2[3];
              DynamicType = MEMORY[0x1E0DEE9B8] + 8;
              if ((v53 == MEMORY[0x1E0DEE9B8] + 8) | v68 & 1)
              {
                v55 = *(_QWORD *)(v8 + 32);
                v56 = 32;
                v57 = 8;
              }
              else
              {
                sub_1B1A02864((uint64_t)&v78, (uint64_t)&v75);
                sub_1B19FA070(&v75, v76);
                DynamicType = swift_getDynamicType();
                _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v75);
                v58 = sub_1B1B69BE0(v53, v53);
                v60 = v59;
                v55 = *(_QWORD *)(v8 + 32);
                v56 = v58;
                v57 = v60;
              }
              v27 = ecs_stack_allocator_allocate(v55, v56, v57);
              sub_1B1EFF8C0((uint64_t)&v78, v27, DynamicType);
              if ((v12 & 2) != 0)
              {
                v75 = *(_OWORD *)a2;
                swift_retain();
                sub_1B1AE7408((uint64_t)&v75);
                swift_retain();
                _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
                swift_release();
                v62 = swift_allocObject();
                v63 = *((_OWORD *)a2 + 1);
                *(_OWORD *)(v62 + 24) = *(_OWORD *)a2;
                *(_BYTE *)(v62 + 16) = v12;
                *(_OWORD *)(v62 + 40) = v63;
                *(_OWORD *)(v62 + 52) = *(_OWORD *)((char *)a2 + 28);
                *(_QWORD *)(v62 + 72) = v27;
                *(_QWORD *)(v62 + 80) = v7;
                *(_DWORD *)(v62 + 88) = v11;
                *(_DWORD *)(v62 + 92) = v71;
                *(_QWORD *)(v62 + 96) = DynamicType;
              }
              else
              {
                _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
                v61 = swift_allocObject();
                *(_QWORD *)(v61 + 16) = DynamicType;
                *(_QWORD *)(v61 + 24) = v27;
              }
              return (uint64_t (*)(uint64_t))v27;
            }
            return 0;
          }
        }
        sub_1B1E1A57C(v11, (uint64_t)v39, v38, &v75);
        if (v76)
        {
LABEL_58:
          sub_1B1A0DDAC(&v75, &v78);
          goto LABEL_59;
        }
        sub_1B1A0DD70((uint64_t)&v75);
        return 0;
      }
      v67 = result;
      sub_1B1FDE8CC((uint64_t)v39, (uint64_t)result, v11, (uint64_t)&v75);
      if (!v76)
      {
        sub_1B1E6E3E8((uint64_t)&v75, (unint64_t *)&qword_1ED4B8C80, (unint64_t *)&qword_1ED4B8C70, (uint64_t)&protocol descriptor for EntityComponent);
        return 0;
      }
      sub_1B1A02518(&v75, (uint64_t)&v78);
      sub_1B19FA198((uint64_t)&v78, (uint64_t)v74);
      sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
      sub_1B1AEC268(0, (unint64_t *)&unk_1ED4B8538);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v73 = 0;
        memset(v72, 0, sizeof(v72));
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
        sub_1B1E6E3E8((uint64_t)v72, (unint64_t *)&unk_1EEF5E900, (unint64_t *)&unk_1ED4B8538, (uint64_t)&protocol descriptor for ComponentMeta);
        return 0;
      }
      sub_1B1A02518(v72, (uint64_t)&v75);
      if ((a5 & 1) == 0 && v70 < 1053
        || v69 && a2[3] == MEMORY[0x1E0DEE9B8] + 8
        || (v41 = v38,
            v42 = v76,
            v43 = v77,
            sub_1B19FA070(&v75, v76),
            v44 = *(_QWORD *)(v43 + 8),
            v38 = v41,
            (v45 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, BOOL, uint64_t))(v44 + 56))(*a2, a2[1], a2[3], (v12 & 2) == 0, v42)) == 0))
      {
        v64 = v76;
        v65 = v77;
        sub_1B19FA070(&v75, v76);
        LOBYTE(v64) = sub_1B1A23050(*a2, a2[1], a2[3], v64, v65);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v75);
        if ((v64 & 1) == 0)
          return 0;
        goto LABEL_35;
      }
      v27 = (_BYTE *)v45;
      if ((v12 & 2) != 0)
      {
        v46 = *((_QWORD *)v67 + 1);
        if (((*(uint64_t (**)(ValueMetadata *, uint64_t))(v46 + 48))(v39, v46) & 1) != 0)
        {
          swift_retain();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
          swift_release();
          v47 = swift_allocObject();
          *(_QWORD *)(v47 + 16) = v7;
          *(_DWORD *)(v47 + 24) = v11;
          *(_DWORD *)(v47 + 28) = v71;
LABEL_72:
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v75);
          return (uint64_t (*)(uint64_t))v27;
        }
        if (((*(uint64_t (**)(ValueMetadata *, uint64_t))(v46 + 56))(v39, v46) & 1) != 0)
        {
          swift_retain();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
          swift_release();
          v66 = swift_allocObject();
          *(_QWORD *)(v66 + 16) = v7;
          *(_QWORD *)(v66 + 24) = v39;
          *(_QWORD *)(v66 + 32) = v67;
          *(_DWORD *)(v66 + 40) = v11;
          *(_DWORD *)(v66 + 44) = v71;
          goto LABEL_72;
        }
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v78);
      goto LABEL_72;
    }
    goto LABEL_75;
  }
LABEL_16:
  v21 = sub_1B2229304();
  result = (uint64_t (*)(uint64_t))swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v23 = sub_1B1FDFE64(v21, (uint64_t)result, v11);
  if (v23)
  {
    v24 = v23;
    if ((sub_1B1E69D90() & 1) != 0)
      v25 = 0;
    else
      v25 = v14;
    v26 = sub_1B2229304();
    result = (uint64_t (*)(uint64_t))swift_conformsToProtocol2();
    if (result)
    {
      v27 = (_BYTE *)(v24 + v25);
      if ((v12 & 2) != 0)
      {
        v28 = result;
        if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)result + 1) + 48))(v26) & 1) != 0
          && (*((_WORD *)a2 + 21) & 0x200) == 0)
        {
          v29 = swift_allocObject();
          *(_QWORD *)(v29 + 16) = v26;
          *(_QWORD *)(v29 + 24) = v28;
          *(_QWORD *)(v29 + 32) = v24;
          *(_QWORD *)(v29 + 40) = v27;
          *(_QWORD *)(v29 + 48) = v7;
          *(_DWORD *)(v29 + 56) = v11;
          *(_DWORD *)(v29 + 60) = v71;
          swift_retain();
          return sub_1B1E6E354;
        }
      }
      return (uint64_t (*)(uint64_t))v27;
    }
    goto LABEL_74;
  }
  v30 = sub_1B2229304();
  result = (uint64_t (*)(uint64_t))swift_conformsToProtocol2();
  if (result)
  {
    v31 = result;
    v32 = *(_QWORD *)(v8 + 32);
    v33 = sub_1B1F24A98(v30);
    v34 = sub_1B1F24B84(v30);
    v35 = ecs_stack_allocator_allocate(v32, v33, v34);
    sub_1B1F25D28((uint64_t)v35, 1, v30);
    if ((sub_1B1E69D90() & 1) != 0)
      v36 = 0;
    else
      v36 = v14;
    v27 = (char *)v35 + v36;
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = v30;
    v37[3] = v31;
    v37[4] = v35;
    return (uint64_t (*)(uint64_t))v27;
  }
LABEL_76:
  __break(1u);
  return result;
}

uint64_t sub_1B1E6AA6C(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = HIDWORD(a2);
  swift_retain();
  if ((v2 != -1 || (_DWORD)v4)
    && (v2 & 0x80000000) == 0
    && v2 < *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v4 == -1 || *(_DWORD *)(v5 + 12 * v2 + 8) == (_DWORD)v4)
      sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(v5 + 12 * v2) + 32));
  }
  return swift_release();
}

uint64_t sub_1B1E6AB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_1B1FE2D68(a2, a3, a4, a1);
  return swift_release();
}

uint64_t sub_1B1E6AB8C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  ValueMetadata *v11;
  uint64_t result;
  uint64_t KeyPath;
  char v14;
  uint64_t v15;
  uint64_t v16[4];

  v10 = *(_QWORD *)(a2 + 16);
  v11 = (ValueMetadata *)sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (result)
  {
    if (v11 == &type metadata for TextureFileAsset)
    {
      sub_1B2229328();
      KeyPath = swift_getKeyPath();
      v14 = MEMORY[0x1B5E20EC8](v10, KeyPath);
      swift_release();
      if ((v14 & 1) != 0)
      {
        swift_retain();
        sub_1B1FE3D14(a5, a4, a3);
        swift_release();
        return swift_arrayDestroy();
      }
    }
    sub_1B1EFF724((uint64_t)a3, a6, v16);
    swift_retain();
    v15 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (result)
    {
      sub_1B1E1A668((uint64_t)v16, a5, v15, result, v10);
      swift_release();
      sub_1B1EFFA40();
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B1E6AD1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v8 = *a2;
  v7 = a2[1];
  sub_1B1A06460();
  swift_bridgeObjectRetain();
  if ((sub_1B2229274() & 1) != 0)
  {
    if (v4 == v8 && v3 == v7)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else if (v5 == v8 && v6 == v7)
  {
    goto LABEL_7;
  }
  v10 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v10 & 1) == 0)
  {
    v12 = *a2;
    v11 = a2[1];
    swift_bridgeObjectRetain();
    sub_1B20F74BC(v12, v11);
    return 1;
  }
  return result;
}

uint64_t sub_1B1E6AE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v7 = a7;
  v13 = HIDWORD(a7);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = sub_1B1F24A98(a2);
  v16 = sub_1B1F24B84(a2);
  v17 = ecs_stack_allocator_allocate(v14, v15, v16);
  sub_1B1F24B20();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a6;
  *(_DWORD *)(v18 + 24) = v7;
  *(_DWORD *)(v18 + 28) = v13;
  *(_QWORD *)(v18 + 32) = v17;
  *(_QWORD *)(v18 + 40) = a4;
  *(_QWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 56) = a3;
  *(_QWORD *)(v18 + 64) = a1;
  return a5;
}

uint64_t sub_1B1E6AF38(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;

  v10 = a2;
  v12 = HIDWORD(a2);
  swift_retain();
  if ((v10 != -1 || (_DWORD)v12)
    && (v10 & 0x80000000) == 0
    && v10 < *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v12 == -1 || *(_DWORD *)(v13 + 12 * v10 + 8) == (_DWORD)v12)
      sub_1B1D3B1D8(*(__int16 *)(v13 + 12 * v10 + 4), a3, a4, a5, a6);
  }
  swift_release();
  return sub_1B1F24B64();
}

void sub_1B1E6B02C(uint64_t a1)
{
  __asm { BR              X10 }
}

_BYTE *sub_1B1E6B094(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  sub_1B1A00060((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, v7 - 256);
  if (a7 && (v12 = MEMORY[0x1B5E240CC](v7 - 256)) != 0)
  {
    v13 = v12;
    v14 = *(_QWORD *)(v7 - 248);
    swift_bridgeObjectRetain();
    swift_retain();
    v15 = sub_1B1E6D268(v13, v14, v9, v10, a2, a7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B19FC350(v7 - 256);
  }
  else
  {
    sub_1B19FC350(v7 - 256);
    return 0;
  }
  return v15;
}

void sub_1B1E6BEE0()
{
  JUMPOUT(0x1B1E6BF0CLL);
}

uint64_t sub_1B1E6C024(unint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[40];
  _BYTE v12[40];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19[12];
  _QWORD v20[13];

  v3 = a1;
  v20[12] = *MEMORY[0x1E0C80C00];
  v4 = HIDWORD(a1);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Particle;
  *(_QWORD *)(inited + 40) = &off_1E63C21B0;
  v13 = v5;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  v17 = 2;
  v18 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v11);
  swift_setDeallocating();
  swift_release();
  sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, v6);
  v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v8 + 64) = &off_1E6387218;
  *(_DWORD *)(v8 + 32) = v3;
  *(_DWORD *)(v8 + 36) = v4;
  sub_1B1E68A14(v8, (uint64_t)v12);
  swift_setDeallocating();
  sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v11);
  sub_1B1E8FCE4(a2, (uint64_t)v12, 0x200000000, v19);
  sub_1B19ED720((uint64_t)v12);
  sub_1B1A18378((uint64_t)v19, (uint64_t)v20, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v20[0])
    return 0;
  v9 = v20[10];
  sub_1B19ED748(v19);
  return v9;
}

uint64_t sub_1B1E6C274(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, _QWORD **a10, void *a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  char v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t (*v45)(uint64_t);
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  size_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t (*__src)(uint64_t);
  _QWORD *v57;
  uint64_t v58;

  v13 = a5;
  v17 = (_QWORD *)(*a4 + 40 * a1);
  v18 = v17[7];
  if ((~*((_DWORD *)v17 + 14) & 0xFCLL) != 0)
  {
    v19 = (uint64_t (*)(uint64_t))v17[4];
    v20 = v17[5];
    v21 = v17[6];
    v22 = v17[8];
    v23 = v18 & 0x3F;
    if (v18 >> 6 != 1)
      v23 = v21;
    v24 = v18 >> 6 ? v23 : v18;
    if (v24 && (v24 == 1 || v22 >= a5))
    {
      sub_1B19F8C18((uint64_t)v19, v20, v21, v18);
      goto LABEL_27;
    }
  }
  v25 = sub_1B1E6A1C8(a2, a3, 1, a7, a8 & 1, a9);
  if (v28 > 0xFBu)
    return 0;
  v19 = v25;
  v20 = v26;
  v21 = v27;
  LOBYTE(v18) = v28;
  if (!(v28 >> 6))
  {
    v30 = v28;
    if (!v28)
    {
      v57 = a3;
      LOBYTE(v18) = 0;
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (v28 >> 6 == 1)
  {
    v57 = a3;
    goto LABEL_29;
  }
  if ((_BYTE)v27)
  {
    v30 = v27;
LABEL_20:
    if (v30)
    {
      if (v30 == 1)
        v13 = 0;
    }
    else
    {
      v13 = -1;
    }
    v31 = (_QWORD *)*a4;
    sub_1B1E700B8((uint64_t)v25, v26, v27, v28);
    sub_1B19F8C18((uint64_t)v19, v20, v21, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v31 = sub_1B1FFEDF4(v31);
      *a4 = v31;
    }
    v33 = &v31[5 * a1];
    v34 = v33[4];
    v35 = v33[5];
    v36 = v33[6];
    v37 = v33[7];
    v33[4] = v19;
    v33[5] = v20;
    v33[6] = v21;
    v33[7] = v18;
    v33[8] = v13;
    sub_1B19F8C8C(v34, v35, v36, v37);
    sub_1B1E6C810((uint64_t)v19, v20, v21, v18);
  }
LABEL_27:
  v57 = a3;
  if (v18 >> 6 && v18 >> 6 != 1)
  {
    swift_retain();
    __src = (uint64_t (*)(uint64_t))v19(a9);
    v38 = v40;
    v39 = v41;
    sub_1B19F8CA0((uint64_t)v19, v20, v21, v18);
    goto LABEL_31;
  }
LABEL_29:
  sub_1B19F8C48(v20);
  __src = v19;
  v38 = v20;
  v39 = v21;
LABEL_31:
  v58 = v20;
  if (v38)
  {
    v42 = swift_allocObject();
    v55 = v38;
    *(_QWORD *)(v42 + 16) = v38;
    *(_QWORD *)(v42 + 24) = v39;
    v43 = *a10;
    swift_retain();
    v44 = swift_isUniquelyReferenced_nonNull_native();
    *a10 = v43;
    v45 = v19;
    if ((v44 & 1) == 0)
    {
      v43 = sub_1B1C62B5C(0, v43[2] + 1, 1, v43);
      *a10 = v43;
    }
    v47 = v43[2];
    v46 = v43[3];
    if (v47 >= v46 >> 1)
      v43 = sub_1B1C62B5C(v46 > 1, v47 + 1, 1, v43);
    v43[2] = v47 + 1;
    v48 = &v43[2 * v47];
    v48[4] = sub_1B1DB39F8;
    v48[5] = v42;
    *a10 = v43;
    v19 = v45;
    v38 = v55;
  }
  v49 = sub_1B1B69BE0(v57[3], v57[3]);
  v50 = objc_msgSend(a11, sel_members);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B79E0);
  v51 = sub_1B2228AB8();

  v52 = *a12;
  if ((v51 & 0xC000000000000001) != 0)
    v53 = (id)MEMORY[0x1B5E21018](v52, v51);
  else
    v53 = *(id *)(v51 + 8 * v52 + 32);
  v54 = v53;
  swift_bridgeObjectRelease();
  memcpy((char *)objc_msgSend(v54, sel_offset) + a13, __src, v49);
  sub_1B19F8CA0((uint64_t)v19, v58, v21, v18);

  sub_1B19E5A18(v38);
  ++*a12;
  return 1;
}

uint64_t sub_1B1E6C67C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(a1[1] + 24))(*a1) & 1;
}

uint64_t sub_1B1E6C6B0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t result;
  uint64_t v7;

  if (a1 == 0xFFFFFFFF)
  {
    v2 = MEMORY[0x1E0DEE9D8];
    v3 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v3)
      return swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    v2 = sub_1B1FE162C(a1);
    swift_release();
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3)
      return swift_bridgeObjectRelease();
  }
  for (i = v2 + 40; ((*(uint64_t (**)(void))(*(_QWORD *)i + 24))() & 1) == 0; i += 16)
  {
    if (!--v3)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v7 = v1 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
  result = type metadata accessor for ScriptingConfiguration();
  ++*(_QWORD *)(v7 + *(int *)(result + 36));
  return result;
}

float sub_1B1E6C794@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *a1 * 0.5;
  *a2 = result;
  return result;
}

float sub_1B1E6C7A8(float *a1, float *a2)
{
  float result;

  result = *a1 + *a1;
  *a2 = result;
  return result;
}

void sub_1B1E6C7B8(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  *a2 = sub_1B1E6E2E0(*a1, 0.5);
}

void sub_1B1E6C7E4(float32x2_t *a1, float32x2_t *a2)
{
  *a2 = sub_1B1E6E2E0(*a1, 2.0);
}

uint64_t sub_1B1E6C810(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 0xFBu)
    return sub_1B19F8CA0(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1B1E6C824()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E6C848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  char v26;
  __int32 v27;
  uint64_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[32];

  v14 = sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    goto LABEL_29;
  }
  v49 = a4;
  v16 = sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (!result)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v48 = a1;
  v17 = sub_1B1F24AA4(v16);
  result = sub_1B1B69BE0(a7, a7);
  v19 = v18;
  v50 = v17;
  if ((a5 & 1) == 0)
  {
    v23 = a3;
    sub_1B2229328();
    KeyPath = swift_getKeyPath();
    v25 = swift_retain();
    v26 = MEMORY[0x1B5E20EC8](v25, KeyPath);
    swift_release();
    if ((v26 & 1) != 0)
    {
      v28 = v49 - v23;
      if (v49 != v23)
      {
        v29 = (float32x4_t *)(a2 + v19 * v23);
        v30.i64[0] = 0x3F0000003F000000;
        v30.i64[1] = 0x3F0000003F000000;
        v31 = (float32x4_t *)(v48 + v17 * v23);
        do
        {
          v32 = vmulq_f32(*v31, v30);
          v32.i32[3] = v27;
          *v29 = v32;
          v29 = (float32x4_t *)((char *)v29 + v19);
          v31 = (float32x4_t *)((char *)v31 + v17);
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      v33 = swift_getKeyPath();
      v34 = MEMORY[0x1B5E20EC8](a6, v33);
      swift_release();
      if ((v34 & 1) != 0)
      {
        v35 = v49 - v23;
        if (v49 != v23)
        {
          v36 = (float32x2_t *)(a2 + v19 * v23);
          v37 = (float32x2_t *)(v48 + v17 * v23);
          do
          {
            *v36 = vmul_f32(*v37, (float32x2_t)0x3F0000003F000000);
            v36 = (float32x2_t *)((char *)v36 + v19);
            v37 = (float32x2_t *)((char *)v37 + v17);
            --v35;
          }
          while (v35);
        }
      }
      else
      {
        v38 = swift_getKeyPath();
        v39 = MEMORY[0x1B5E20EC8](a6, v38);
        swift_release();
        if ((v39 & 1) != 0)
        {
          v40 = v49 - v23;
          if (v49 != v23)
          {
            v41 = (float *)(a2 + v19 * v23);
            v42 = (float *)(v48 + v50 * v23);
            do
            {
              *v41 = *v42 * 0.5;
              v41 = (float *)((char *)v41 + v19);
              v42 = (float *)((char *)v42 + v50);
              --v40;
            }
            while (v40);
          }
        }
        else
        {
          v43 = a6;
          v44 = v49 - v23;
          if (v49 != v23)
          {
            v45 = a2 + v19 * v23;
            v46 = v48 + v50 * v23;
            v47 = v43;
            do
            {
              sub_1B1E1AA44(v46, v47, v14);
              sub_1B1EFF5D0((uint64_t)v51, v45, a7);
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v51);
              v45 += v19;
              v46 += v50;
              --v44;
            }
            while (v44);
            return swift_release();
          }
        }
      }
    }
    return swift_release();
  }
  v20 = a6;
  v21 = v49 - a3;
  if (v49 == a3)
    return result;
  swift_retain();
  v22 = v48 + v17 * a3;
  do
  {
    sub_1B1E1AA44(v22, v20, v14);
    sub_1B1EFF5D0((uint64_t)v51, a2, a7);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v51);
    a2 += v19;
    v22 += v17;
    --v21;
  }
  while (v21);
  return swift_release();
}

uint64_t *sub_1B1E6CB9C(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result)
  {
    if (a4)
      return (uint64_t *)sub_1B1A0FFC0(a6, a7, a8, a9, result, a2, a3, a4, a5);
    else
      return (uint64_t *)sub_1B1A0FDD0(a6, a7, a8, a9, result, a2, a3, a10);
  }
  else if (a4)
  {
    v15 = swift_unownedRetainStrong();
    v16 = *(_QWORD *)(v15 + 232);
    v17 = *(_QWORD *)(v15 + 240);
    swift_release();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32))(a6, a7, v16, a8, a9, v16, v17 - v16, a4, a5);
  }
  return result;
}

uint64_t sub_1B1E6CC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  char v23;
  __int32 v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  float32x2_t *v32;
  float32x2_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];

  v14 = sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (!result)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  v16 = sub_1B1F24AA4(v14);
  result = sub_1B1B69BE0(a7, a7);
  v18 = v17;
  if ((a5 & 1) == 0)
  {
    v42 = a2;
    sub_1B2229328();
    KeyPath = swift_getKeyPath();
    v22 = swift_retain();
    v23 = MEMORY[0x1B5E20EC8](v22, KeyPath);
    swift_release();
    if ((v23 & 1) != 0)
    {
      v25 = a4 - a3;
      if (a4 != a3)
      {
        v26 = (float32x4_t *)(v42 + v16 * a3);
        v27 = (float32x4_t *)(a1 + v18 * a3);
        do
        {
          v28 = vaddq_f32(*v27, *v27);
          v28.i32[3] = v24;
          *v26 = v28;
          v26 = (float32x4_t *)((char *)v26 + v16);
          v27 = (float32x4_t *)((char *)v27 + v18);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v29 = swift_getKeyPath();
      v30 = MEMORY[0x1B5E20EC8](a6, v29);
      swift_release();
      if ((v30 & 1) != 0)
      {
        v31 = a4 - a3;
        if (a4 != a3)
        {
          v32 = (float32x2_t *)(v42 + v16 * a3);
          v33 = (float32x2_t *)(a1 + v18 * a3);
          do
          {
            *v32 = vadd_f32(*v33, *v33);
            v32 = (float32x2_t *)((char *)v32 + v16);
            v33 = (float32x2_t *)((char *)v33 + v18);
            --v31;
          }
          while (v31);
        }
      }
      else
      {
        v34 = swift_getKeyPath();
        v35 = MEMORY[0x1B5E20EC8](a6, v34);
        swift_release();
        if ((v35 & 1) != 0)
        {
          v36 = a4 - a3;
          if (a4 != a3)
          {
            v37 = (float *)(v42 + v16 * a3);
            v38 = (float *)(a1 + v18 * a3);
            do
            {
              *v37 = *v38 + *v38;
              v37 = (float *)((char *)v37 + v16);
              v38 = (float *)((char *)v38 + v18);
              --v36;
            }
            while (v36);
          }
        }
        else
        {
          v39 = a4 - a3;
          if (a4 != a3)
          {
            v40 = v42 + v16 * a3;
            v41 = a1 + v18 * a3;
            while (1)
            {
              sub_1B1EFF724(v41, a7, v43);
              sub_1B2229304();
              result = swift_conformsToProtocol2();
              if (!result)
                break;
              sub_1B1E1ABC0((uint64_t)v43);
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
              v40 += v16;
              v41 += v18;
              if (!--v39)
                return swift_release();
            }
            goto LABEL_32;
          }
        }
      }
    }
    return swift_release();
  }
  v19 = a4 - a3;
  if (a4 != a3)
  {
    swift_retain();
    v20 = a2 + v16 * a3;
    while (1)
    {
      sub_1B1EFF724(a1, a7, v43);
      sub_1B2229304();
      result = swift_conformsToProtocol2();
      if (!result)
        break;
      sub_1B1E1ABC0((uint64_t)v43);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
      a1 += v18;
      v20 += v16;
      if (!--v19)
        return swift_release();
    }
    __break(1u);
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1B1E6CFBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;

  sub_1B1A18378(a4, (uint64_t)v24, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
  if (a1)
  {
    sub_1B1A18378(a4, (uint64_t)v27, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
    if (v28)
    {
      result = sub_1B2229688();
      __break(1u);
    }
    else
    {
      return sub_1B1A0FDD0(a5, a6, a7, a8, a1, a2, a3, a9);
    }
  }
  else
  {
    v20 = v25;
    v21 = v26;
    result = sub_1B1A18378(a4, (uint64_t)v27, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
    if (v28)
    {
      swift_unownedRetainStrong();
      v22 = *(_QWORD *)(a11 + 232);
      v23 = *(_QWORD *)(a11 + 240);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      sub_1B1E6CC84(a5, a7, v22, v23, 0, v20, v21);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

double sub_1B1E6D158@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
  {
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
    {
      sub_1B1A02758(0, &qword_1ED4B97E0, (uint64_t)&type metadata for CachedLocationMapping, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v16 = sub_1B2228B0C();
      a2 = v16;
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_OWORD *)(v16 + 56) = xmmword_1B22849A0;
      v17 = v15 - 1;
      if (v15 != 1)
      {
        v18 = 72;
        do
        {
          v19 = v16 + v18;
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_OWORD *)(v19 + 24) = xmmword_1B22849A0;
          v18 += 40;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      a2 = MEMORY[0x1E0DEE9D8];
    }
  }
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = a3;
  *(_BYTE *)(a7 + 24) = a4 & 1;
  *(_QWORD *)(a7 + 28) = a5;
  *(_BYTE *)(a7 + 36) = a6 & 1;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a7 + 40) = a2;
  *(_QWORD *)(a7 + 48) = v13;
  *(_QWORD *)(a7 + 56) = v13;
  *(_QWORD *)(a7 + 64) = 0;
  *(_QWORD *)(a7 + 72) = 0;
  *(_QWORD *)(a7 + 80) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a7 + 88) = xmmword_1B2246910;
  return result;
}

_BYTE *sub_1B1E6D268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t DynamicType;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];

  ObjectType = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(ObjectType, a2);
  v13 = sub_1B2229304();
  v14 = swift_conformsToProtocol2();
  if (v14)
    v15 = v14;
  else
    v15 = 0;
  if (!v14)
    v13 = 0;
  if (!v13 || (swift_unknownObjectRetain(), v16 = sub_1B1B697E8(a3, v12, v13, v15), swift_unknownObjectRelease(), !v16))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  sub_1B2229304();
  if ((a5 & 1) == 0)
  {
    v18 = sub_1B1D76F30(v17);
    if ((~v18 & 0xF000000000000007) != 0)
    {
      v21 = v18;
      sub_1B1D750D8(v18, (uint64_t)&v33, 0.0);
      sub_1B1BCBFE4(v21);
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
    }
    sub_1B1A18378((uint64_t)&v33, (uint64_t)&v35, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    if (v36)
      goto LABEL_24;
    sub_1B1A0DD70((uint64_t)&v35);
  }
  objc_opt_self();
  v22 = swift_dynamicCastObjCClass();
  if (v22)
  {
    v23 = (void *)v22;
    swift_unknownObjectRetain();
    sub_1B22292F8();
    if (v24)
    {
      v25 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v26 = objc_msgSend(v23, sel_valueForKeyPath_, v25);

      if (v26)
      {
        sub_1B22292EC();
        swift_unknownObjectRelease();
        sub_1B1A0DDAC(&v33, &v35);
        sub_1B1E69EB0((uint64_t)&v35, (uint64_t)&v33);
        swift_unknownObjectRelease();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v35);
        if (*((_QWORD *)&v34 + 1))
        {
          v27 = &v33;
          goto LABEL_25;
        }
        swift_unknownObjectRelease();
        swift_release();
        sub_1B1A0DD70((uint64_t)&v33);
      }
      else
      {
        swift_release();
        swift_unknownObjectRelease_n();
      }
      return 0;
    }
    swift_unknownObjectRelease();
  }
  *(_QWORD *)&v33 = v12;
  *((_QWORD *)&v33 + 1) = a2;
  sub_1B1AEC268(0, (unint64_t *)&unk_1EEF5D970);
  swift_unknownObjectRetain();
  swift_getAtAnyKeyPath();
  swift_unknownObjectRelease();
  if (!v36)
  {
    swift_unknownObjectRelease();
    swift_release();
    sub_1B1A0DD70((uint64_t)&v35);
    return 0;
  }
LABEL_24:
  v27 = &v35;
LABEL_25:
  sub_1B1A0DDAC(v27, v37);
  v28 = sub_1B1B69BE0(a4, a4);
  v19 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), v28, v29);
  sub_1B1A02864((uint64_t)v37, (uint64_t)&v35);
  sub_1B19FA070(&v35, v36);
  DynamicType = swift_getDynamicType();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v35);
  sub_1B1EFF8C0((uint64_t)v37, v19, DynamicType);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v37);
  if ((a5 & 2) != 0)
  {
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = a5;
    *(_QWORD *)(v32 + 24) = DynamicType;
    *(_QWORD *)(v32 + 32) = v19;
    *(_QWORD *)(v32 + 40) = v12;
    *(_QWORD *)(v32 + 48) = a2;
    *(_QWORD *)(v32 + 56) = v16;
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = DynamicType;
    *(_QWORD *)(v31 + 24) = v19;
  }
  return v19;
}

uint64_t sub_1B1E6D634(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 16, 16);
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1B1E6DEA0()
{
  JUMPOUT(0x1B1E6DEC8);
}

uint64_t sub_1B1E6DFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  if (a15)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *sub_1B1E6E004(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t sub_1B1E6E060()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E070()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E6E09C()
{
  uint64_t v0;

  return sub_1B1E6A0D0(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1B1E6E0B0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E0C0()
{
  return swift_deallocObject();
}

uint64_t *sub_1B1E6E0D0(uint64_t *a1)
{
  sub_1B1E6E104(*a1, a1[1]);
  return a1;
}

uint64_t sub_1B1E6E104(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1B1E6E134()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_unownedRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1E6E16C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  _BYTE v12[48];

  v1 = *(uint64_t **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + 40;
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 144);
  sub_1B1A18378(v4, (uint64_t)v12, &qword_1ED4B9B18, (uint64_t)&type metadata for ComponentPropertyRewriter);
  return sub_1B1E6CFBC(v1, v2, v3, (uint64_t)v12, v5, v6, v7, v8, v11, *((uint64_t *)&v11 + 1), v9);
}

void sub_1B1E6E20C(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1E6E2E8(*a1, 0.5);
  *a2 = v3;
}

void sub_1B1E6E238(float32x4_t *a1, _OWORD *a2)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1E6E2E8(*a1, 2.0);
  *a2 = v3;
}

void sub_1B1E6E264(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  *a2 = sub_1B1E6E2E0(*a1, 0.5);
}

void sub_1B1E6E290(float32x2_t *a1, float32x2_t *a2)
{
  *a2 = sub_1B1E6E2E0(*a1, 2.0);
}

float sub_1B1E6E2BC@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *a1 * 0.5;
  *a2 = result;
  return result;
}

float sub_1B1E6E2D0(float *a1, float *a2)
{
  float result;

  result = *a1 + *a1;
  *a2 = result;
  return result;
}

float32x2_t sub_1B1E6E2E0(float32x2_t a1, float a2)
{
  return vmul_n_f32(a1, a2);
}

double sub_1B1E6E2E8(float32x4_t a1, float a2)
{
  double result;

  *(_QWORD *)&result = vmulq_n_f32(a1, a2).u64[0];
  return result;
}

uint64_t sub_1B1E6E2F0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E300()
{
  return sub_1B1F24B64();
}

uint64_t sub_1B1E6E330()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E6E354(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E6AE50(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1B1E6E364()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E374()
{
  return sub_1B1EFFA40();
}

uint64_t sub_1B1E6E3A0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E6E3CC()
{
  uint64_t v0;

  return sub_1B1E6AB8C(*(unsigned __int8 *)(v0 + 16), v0 + 24, *(uint64_t **)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_1B1E6E3E8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  sub_1B1D11FE4(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1B1E6E42C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E43C()
{
  uint64_t *v0;

  return sub_1B1E6AB34(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1B1E6E448()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E458()
{
  uint64_t v0;

  return sub_1B1E6AA6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1B1E6E460()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E6E470()
{
  uint64_t v0;

  return sub_1B1E6AF38(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1B1E6E484(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  id v30;
  uint64_t v31;
  _QWORD v32[3];
  __int128 v33;

  if (!a9)
  {
    sub_1B1B1B30C(a11, a12, a13, a14);
    return 0;
  }
  v15 = swift_dynamicCastObjCProtocolConditional();
  if (!v15)
  {
    swift_unknownObjectRetain();
    sub_1B1B1B30C(a11, a12, a13, a14);
    swift_unknownObjectRelease();
    return 0;
  }
  v16 = (void *)v15;
  v31 = MEMORY[0x1E0DEE9D8];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  v30 = objc_msgSend(v16, sel_bufferStructType);
  v17 = (void *)sub_1B1D22DA8(0, (uint64_t)objc_msgSend(v16, sel_bufferDataSize));
  v28 = v18;
  v27 = v19;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) != (id)2)
  {
    objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v20 = v17;
  }
  if (!*a2)
  {
    memset(v32, 0, sizeof(v32));
    v33 = xmmword_1B22849A0;
    *a2 = sub_1B19F3F0C(v32, *(_QWORD *)(a1 + 16));
  }
  type metadata accessor for ScriptingConfiguration();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  swift_getObjectType();
  v21 = swift_unknownObjectRetain();
  sub_1B1F40DEC(v21, v28, v27, 0);
  swift_unknownObjectRelease();
  sub_1B1B1B30C(a11, a12, a13, a14);
  swift_release();

  swift_unknownObjectRelease();
  v22 = *(_QWORD *)(v31 + 16);
  if (v22)
  {
    swift_bridgeObjectRetain();
    v23 = v31 + 40;
    do
    {
      v24 = *(void (**)(uint64_t))(v23 - 8);
      v25 = swift_retain();
      v24(v25);
      swift_release();
      v23 += 16;
      --v22;
    }
    while (v22);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 1;
}

void sub_1B1E6FFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_1B1B1FC88(a17);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  JUMPOUT(0x1B1E7005CLL);
}

uint64_t sub_1B1E700B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 0xFBu)
    return sub_1B19F8C18(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1B1E700CC()
{
  swift_unownedRelease();
  return swift_deallocObject();
}

uint64_t *sub_1B1E700F0()
{
  uint64_t v0;

  return sub_1B1CC5A40(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t *)(v0 + 40), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

ValueMetadata *type metadata accessor for vfx_script_emitter()
{
  return &type metadata for vfx_script_emitter;
}

uint64_t initializeWithCopy for CachedLocationMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B19F8C18(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for CachedLocationMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B19F8C18(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B19F8CA0(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for CachedLocationMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B19F8CA0(v6, v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedLocationMapping(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 62);
  v3 = (*(_BYTE *)(a1 + 24) & 0x3C | (*(unsigned __int8 *)(a1 + 24) >> 6)) ^ 0x3F;
  if (v3 >= 0x3D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CachedLocationMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedLocationMapping()
{
  return &type metadata for CachedLocationMapping;
}

ValueMetadata *type metadata accessor for ScriptingMappingTimestamps()
{
  return &type metadata for ScriptingMappingTimestamps;
}

uint64_t destroy for LocationMapping(uint64_t a1)
{
  return sub_1B19F8CA0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for LocationMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B19F8C18(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LocationMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B19F8C18(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B19F8CA0(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LocationMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B19F8CA0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationMapping(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 62);
  v3 = (*(_BYTE *)(a1 + 24) & 0x3C | (*(unsigned __int8 *)(a1 + 24) >> 6)) ^ 0x3F;
  if (v3 >= 0x3D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LocationMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1B1E70518(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 6;
}

uint64_t sub_1B1E70524(uint64_t result)
{
  *(_BYTE *)(result + 24) &= 0x3Fu;
  return result;
}

uint64_t sub_1B1E70534(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 3 | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for LocationMapping()
{
  return &type metadata for LocationMapping;
}

uint64_t storeEnumTagSinglePayload for MappingInvalidationTrigger(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1E705A4 + 4 * byte_1B229AB7B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1E705D8 + 4 * byte_1B229AB76[v4]))();
}

uint64_t sub_1B1E705D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E705E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E705E8);
  return result;
}

uint64_t sub_1B1E705F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E705FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1E70600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E70608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MappingInvalidationTrigger()
{
  return &type metadata for MappingInvalidationTrigger;
}

uint64_t destroy for MappedLocation(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return swift_release();
  return result;
}

_QWORD *_s3VFX14MappedLocationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v4 = a2[2];
    a1[1] = v3;
    a1[2] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  }
  return a1;
}

_QWORD *assignWithCopy for MappedLocation(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v3 = a1 + 1;
  v5 = a2 + 1;
  v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      v7 = a2[2];
      a1[1] = v4;
      a1[2] = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = a2[2];
  a1[1] = v4;
  a1[2] = v6;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for MappedLocation(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v3 = a1 + 1;
  v5 = a2 + 1;
  v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      v7 = a2[2];
      a1[1] = v4;
      a1[2] = v7;
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = a2[2];
  a1[1] = v4;
  a1[2] = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCache.WeakStorage.GPU(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureCache.WeakStorage.GPU(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MappedLocation()
{
  return &type metadata for MappedLocation;
}

unint64_t sub_1B1E70854()
{
  unint64_t result;

  result = qword_1EEF5FBF8;
  if (!qword_1EEF5FBF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229AD44, &type metadata for MappingInvalidationTrigger);
    atomic_store(result, (unint64_t *)&qword_1EEF5FBF8);
  }
  return result;
}

id sub_1B1E708AC@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id result;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  if ((objc_msgSend(v1, sel_respondsToSelector_, sel_depthPixelFormat) & 1) != 0
    && (v3 = objc_msgSend(v1, sel_depthPixelFormat),
        (objc_msgSend(v1, sel_respondsToSelector_, sel_stencilPixelFormat) & 1) != 0))
  {
    v4 = objc_msgSend(v1, sel_stencilPixelFormat);
    v15 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 0);
    v14 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 1);
    v5 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 2);
    v6 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 3);
    v7 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 4);
    v8 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 5);
    v9 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 6);
    v10 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 7);
    result = objc_msgSend(v1, sel_sampleCount);
  }
  else
  {
    v15 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 0);
    v14 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 1);
    v5 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 2);
    v6 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 3);
    v7 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 4);
    v8 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 5);
    v9 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 6);
    v10 = objc_msgSend(v1, sel_colorPixelFormatAtIndex_, 7);
    v3 = objc_msgSend(v1, sel_depthStencilPixelFormat);
    result = objc_msgSend(v1, sel_sampleCount);
    if (v3 == (id)260)
      v12 = 260;
    else
      v12 = 0;
    v13 = 253;
    if (v3 == (id)260)
      v13 = 260;
    if ((unint64_t)qword_1EEF61320 >= 0x2540BE407)
      v4 = (id)v13;
    else
      v4 = (id)v12;
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v3;
  a1[9] = v4;
  a1[10] = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ExternalConstantsCopyEncoder.PointerLocation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ExternalConstantsCopyEncoder.PointerLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExternalConstantsCopyEncoder.PointerLocation()
{
  return &type metadata for ExternalConstantsCopyEncoder.PointerLocation;
}

uint64_t sub_1B1E70BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExternalConstantsCopyEncoder.TableLocation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExternalConstantsCopyEncoder.TableLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ExternalConstantsCopyEncoder.TableLocation()
{
  return &type metadata for ExternalConstantsCopyEncoder.TableLocation;
}

uint64_t storeEnumTagSinglePayload for ExternalConstantsCopyEncoder.PointerLocation.Destination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1E70CBC + 4 * byte_1B229AD75[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1E70CF0 + 4 * byte_1B229AD70[v4]))();
}

uint64_t sub_1B1E70CF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E70CF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E70D00);
  return result;
}

uint64_t sub_1B1E70D0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E70D14);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1E70D18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E70D20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalConstantsCopyEncoder.PointerLocation.Destination()
{
  return &type metadata for ExternalConstantsCopyEncoder.PointerLocation.Destination;
}

ValueMetadata *type metadata accessor for ExternalConstantsCopyEncoder()
{
  return &type metadata for ExternalConstantsCopyEncoder;
}

unint64_t sub_1B1E70D50()
{
  unint64_t result;

  result = qword_1EEF5FC00;
  if (!qword_1EEF5FC00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229AE0C, &type metadata for ExternalConstantsCopyEncoder.PointerLocation.Destination);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC00);
  }
  return result;
}

void sub_1B1E70D94()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
  objc_msgSend(v0, sel_stopCapture);

}

uint64_t sub_1B1E70DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 224);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = v4 - 1;
    for (i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      v8 = *i;
      ObjectType = swift_getObjectType();
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 152);
      swift_unknownObjectRetain();
      v11 = v10(ObjectType, v8);
      LOBYTE(v8) = v12;
      swift_unknownObjectRelease();
      if ((v8 & 1) != 0)
      {
        if (v5 <= 60)
          v5 = 60;
      }
      else if (v11 > v5)
      {
        v5 = v11;
      }
      if (!v6)
        break;
      --v6;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
  {
    swift_retain();
    os_unfair_recursive_lock_lock_with_options();
    sub_1B1F21F0C((uint64_t)&type metadata for RERendererConfiguration);
    if (v13 == 2)
    {
      os_unfair_recursive_lock_unlock();
      swift_release();
    }
    else
    {
      v14 = v13;
      os_unfair_recursive_lock_unlock();
      swift_release();
      if ((v14 & 1) != 0)
        return v5;
    }
    v15 = *(_BYTE **)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (!v15 || (v15[537] & 1) == 0 && (v15[539] & 1) == 0 && (v15[540] & 1) == 0)
    {
      if (qword_1ED4B7630 != -1)
        swift_once();
      v16 = qword_1ED4D0A18;
      v17 = *(void **)(qword_1ED4D0A18 + 64);
      if (v17)
      {
        swift_retain();
        objc_msgSend(v17, sel_preferredFrameRateRange);
        v18 = sub_1B2228ECC();
        if ((v18 & 0x100000000) == 0)
        {
          if (v5 == (uint64_t)*(float *)&v18)
            goto LABEL_31;
LABEL_29:
          v19 = *(void **)(v16 + 64);
          if (v19)
          {
            v20 = v19;
            sub_1B2228EC0();
            objc_msgSend(v20, sel_setPreferredFrameRateRange_);
            swift_release();

            return v5;
          }
LABEL_31:
          swift_release();
          return v5;
        }
      }
      else
      {
        swift_retain();
      }
      if (!v5)
        goto LABEL_31;
      goto LABEL_29;
    }
  }
  return v5;
}

void sub_1B1E7104C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 24));
  v3 = OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 24));
  }
  else
  {
    v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 24));
    if ((v4 & 1) == 0)
    {
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 24));
      *(_BYTE *)(v1 + v3) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 24));
      if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
      {
        swift_retain();
        sub_1B1E64CA4(0);
        swift_release();
      }
      v5 = swift_retain();
      sub_1B1DAE1B8(v5, v1);
      swift_release();
    }
  }
}

void sub_1B1E7113C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = v0 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24));
  v2 = OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 24));
  }
  else
  {
    v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 24));
    if ((v3 & 1) == 0)
      return;
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 24));
  *(_BYTE *)(v0 + v2) = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 24));
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
  {
    swift_retain();
    sub_1B1E64D68();
    swift_release();
  }
}

uint64_t *sub_1B1E711EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD v44[2];
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _BYTE v58[40];
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v47[0] = 0x6974726174736572;
  *((_QWORD *)&v47[0] + 1) = 0xEF2078667620676ELL;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v5 = v47[0];
  v6 = sub_1B2228EA8();
  *(_QWORD *)&v47[0] = 2;
  (*(void (**)(uint64_t, _OWORD *, _QWORD, _QWORD))(*(_QWORD *)v4 + 88))(v6, v47, v5, *((_QWORD *)&v5 + 1));
  swift_release();
  swift_bridgeObjectRelease();
  v7 = a1 & 0xFFFFFFFFFFLL;
  if (v7 == 0x200000000)
    sub_1B1F4CBCC();
  swift_retain();
  v8 = sub_1B1BF9018();
  swift_release();
  if (v8)
  {
    sub_1B1E7530C(v2, v7);
    sub_1B1E75854(v2, v7);
    sub_1B1E75D9C(v2, v7);
    sub_1B1E762E4(v2, v7);
    sub_1B1E7682C(v2, v7);
    sub_1B1E76D74(v2, v7);
    sub_1B1E772BC(v2, v7);
    sub_1B1E77804(v2, v7);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3DC70, (uint64_t (*)(uint64_t *))sub_1B1A1B75C, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E374, (uint64_t (*)(uint64_t *))sub_1B1A1B75C, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E2C4, (uint64_t (*)(uint64_t *))sub_1B1E793E0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E424, (uint64_t (*)(uint64_t *))sub_1B1A1B75C, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3D9BC, (uint64_t (*)(uint64_t *))sub_1B1A1B75C, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3DC14, (uint64_t (*)(uint64_t *))sub_1B1A1B75C, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
    sub_1B1E77D4C(v2, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E0BC, (uint64_t (*)(uint64_t *))sub_1B1A1B75C, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
    swift_release();
  }
  sub_1B1E71DCC(v7);
  swift_retain();
  v9 = sub_1B1BF90FC();
  swift_release();
  if (v9)
  {
    sub_1B1CD2918(v2, v7);
    swift_release();
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v59 = qword_1ED4D09F8;
  v60 = 0;
  v61 = 2;
  v62 = 0;
  v63 = 2;
  v64 = 0;
  swift_retain();
  sub_1B1B6FFAC((uint64_t)v44);
  swift_release();
  v56[0] = v44[0];
  v56[1] = v44[1];
  v57 = v45;
  sub_1B1E8FCE4(v2, (uint64_t)v56, v7, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)v44);
  if (v53 <= 0 || (v38 = v50) == 0)
  {
    sub_1B1A1B75C((uint64_t)v44);
    return sub_1B19ED748(v46);
  }
  v10 = v52[4];
  v11 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v54[0] = v47[0];
  v54[1] = v47[1];
  v55 = v48;
  v36 = (uint64_t)(v52 + 6);
  v37 = v49;
  v43 = v52;
  v35 = v52 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = 0;
  v13 = 0;
  v34 = v11;
  do
  {
    v14 = (unsigned int *)(v37 + 48 * v12);
    v39 = *v14;
    v40 = v14[1];
    v41 = v13;
    v15 = (uint64_t *)*((_QWORD *)v14 + 2);
    v42 = *((_QWORD *)v14 + 3);
    v16 = *((_QWORD *)v14 + 4);
    v17 = *((_QWORD *)v14 + 5);
    if (v11)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    sub_1B1A18378(v36, (uint64_t)v58, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v43[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v43[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v43[7] = v20;
    v35[1] = 0;
    v35[2] = 0;
    *v35 = 0;
    swift_release();
    v21 = sub_1B1A12038((uint64_t)&type metadata for Bindings, (uint64_t)&off_1E63BE948, v15, v42, v16, (uint64_t)v43);
    if (v15)
    {
      if (!v16)
        goto LABEL_22;
      v13 = v41;
      if (v16 == 1)
      {
        v22 = 0;
        v11 = v34;
      }
      else
      {
        v22 = v16 & 0xFFFFFFFFFFFFFFFELL;
        v23 = (_BYTE *)(v21 + 32);
        v24 = v16 & 0xFFFFFFFFFFFFFFFELL;
        v11 = v34;
        do
        {
          *(v23 - 24) = 1;
          *v23 = 1;
          v23 += 48;
          v24 -= 2;
        }
        while (v24);
        if (v16 == v22)
          goto LABEL_36;
      }
      v25 = v16 - v22;
      v26 = (_BYTE *)(v21 + 24 * v22 + 8);
      do
      {
        *v26 = 1;
        v26 += 24;
        --v25;
      }
      while (v25);
    }
    else
    {
      if ((_DWORD)v39 == (_DWORD)v40)
      {
LABEL_22:
        v11 = v34;
        v13 = v41;
        goto LABEL_36;
      }
      v27 = v40 - v39;
      v13 = v41;
      if ((unint64_t)(v40 - v39) >= 2)
      {
        v28 = (v27 & 0xFFFFFFFFFFFFFFFELL) + v39;
        v29 = (_BYTE *)(v21 + 24 * v39 + 32);
        v30 = v27 & 0xFFFFFFFFFFFFFFFELL;
        v11 = v34;
        do
        {
          *(v29 - 24) = 1;
          *v29 = 1;
          v29 += 48;
          v30 -= 2;
        }
        while (v30);
        if (v27 == (v27 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_36;
      }
      else
      {
        v28 = v39;
        v11 = v34;
      }
      v31 = (_BYTE *)(v21 + 24 * v28 + 8);
      v32 = v40 - v28;
      do
      {
        *v31 = 1;
        v31 += 24;
        --v32;
      }
      while (v32);
    }
LABEL_36:
    sub_1B1F05D48(v43, (unsigned __int16 **)v54, (uint64_t)v58);
    sub_1B1F03804((char *)v17);
    ecs_stack_allocator_pop_snapshot(v10);
    if ((v11 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    ++v12;
  }
  while (v12 != v38);
  sub_1B1A1B75C((uint64_t)v44);
  sub_1B19ED748(v46);
  return sub_1B19ED748(v46);
}

uint64_t sub_1B1E7192C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  NSObject *v21;
  os_signpost_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_signpost_type_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  uint8_t *v36;
  os_signpost_id_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;

  v1 = v0;
  v2 = sub_1B22283BC();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B2228380();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v39 - v16;
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v18 = sub_1B22283B0();
  v19 = sub_1B1B40EC8(v18, (uint64_t)qword_1ED4D0E48);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v20(v17, v1 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v5);
  v42 = v19;
  v21 = sub_1B2228398();
  v22 = sub_1B2228FA4();
  if ((sub_1B2229094() & 1) != 0)
  {
    v20(v13, (uint64_t)v17, v5);
    v23 = (uint8_t *)swift_slowAlloc();
    v39 = v9;
    v24 = v23;
    *(_WORD *)v23 = 0;
    v25 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v21, v22, v25, "prepare", "", v24, 2u);
    v26 = v24;
    v9 = v39;
    MEMORY[0x1B5E23F88](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  else
  {

  }
  v39 = (char *)v20;
  v20(v13, (uint64_t)v17, v5);
  sub_1B22283E0();
  swift_allocObject();
  sub_1B22283D4();
  v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v17, v5);
  v28 = swift_retain();
  sub_1B1D9E6A4(v28, v1);
  v29 = sub_1B2228398();
  sub_1B22283C8();
  v30 = sub_1B2228F98();
  v31 = sub_1B2229094();
  v32 = v43;
  if ((v31 & 1) != 0)
  {
    swift_retain();
    sub_1B22283EC();
    swift_release();
    v33 = v40;
    if ((*(unsigned int (**)(char *, uint64_t))(v40 + 88))(v32, v41) == *MEMORY[0x1E0DF2190])
    {
      v34 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v41);
      v34 = "";
    }
    ((void (*)(char *, char *, uint64_t))v39)(v13, v9, v5);
    v35 = v9;
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v29, v30, v37, "prepare", v34, v36, 2u);
    MEMORY[0x1B5E23F88](v36, -1, -1);

    v27(v35, v5);
  }
  else
  {

    v13 = v9;
  }
  v27(v13, v5);
  return swift_release();
}

uint64_t sub_1B1E71CBC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = (_QWORD *)v1[36];
    v3 = (os_unfair_lock_s *)v2[7];
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3);
    sub_1B1D2143C(v2);
    os_unfair_lock_unlock(v3);
    swift_release();
    v4 = (_QWORD *)v1[37];
    v5 = (os_unfair_lock_s *)v4[7];
    swift_retain();
    os_unfair_lock_lock(v5);
    sub_1B1D2143C(v4);
    os_unfair_lock_unlock(v5);
    swift_release();
    v6 = v1[33];
    swift_retain();
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v6 + 40) = MEMORY[0x1E0DEE9E0];
    v8 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v8 + 40) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v8 + 48) = v7;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_1B1E71DCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31[8];
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  _BYTE v43[40];
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v44 = qword_1ED4D09F8;
  v45 = 0;
  v46 = 2;
  v47 = 0;
  v48 = 2;
  v49 = 0;
  swift_retain();
  sub_1B1E40EE4(3, (uint64_t)v29);
  swift_release();
  v41[0] = v29[0];
  v41[1] = v29[1];
  v42 = v30;
  sub_1B1E8FCE4(v1, (uint64_t)v41, a1 & 0xFFFFFFFFFFLL, v31);
  sub_1B1A18378((uint64_t)v31, (uint64_t)v32, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v32[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)v29);
  if (v38 <= 0 || (v25 = v35) == 0)
  {
    sub_1B1A1B75C((uint64_t)v29);
    return sub_1B19ED748(v31);
  }
  v3 = v37;
  v4 = v37[4];
  v5 = *(unsigned __int8 *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v39[0] = v32[0];
  v39[1] = v32[1];
  v40 = v33;
  v23 = (uint64_t)(v37 + 6);
  v24 = v34;
  v22 = v37 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = 0;
  v7 = 0;
  v21 = v5;
  do
  {
    v8 = (unsigned int *)(v24 + 48 * v6);
    v27 = *v8;
    v28 = v7;
    v26 = v8[1];
    v10 = (uint64_t *)*((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    v11 = *((_QWORD *)v8 + 4);
    v12 = *((_QWORD *)v8 + 5);
    if (v5)
    {
      v13 = *(os_unfair_lock_s **)(v12 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v13);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v4);
    sub_1B1A18378(v23, (uint64_t)v43, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v14 = v3[4];
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v3[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
    v3[7] = v15;
    v22[1] = 0;
    v22[2] = 0;
    *v22 = 0;
    swift_release();
    v16 = sub_1B1A12038((uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9E88, v10, v9, v11, (uint64_t)v3);
    if (v10)
    {
      if (!v11)
        goto LABEL_18;
      v17 = (_BYTE *)(v16 + 4);
      v5 = v21;
      v7 = v28;
      do
      {
        if (*v17 == 1)
          *((_DWORD *)v17 - 1) = arc4random();
        v17 += 8;
        --v11;
      }
      while (v11);
    }
    else
    {
      if ((_DWORD)v27 == (_DWORD)v26)
      {
LABEL_18:
        v5 = v21;
        v7 = v28;
        goto LABEL_19;
      }
      v18 = (_BYTE *)(v16 + 8 * v27 + 4);
      v19 = v26 - v27;
      v5 = v21;
      v7 = v28;
      do
      {
        if (*v18 == 1)
          *((_DWORD *)v18 - 1) = arc4random();
        v18 += 8;
        --v19;
      }
      while (v19);
    }
LABEL_19:
    sub_1B1F05D48(v3, (unsigned __int16 **)v39, (uint64_t)v43);
    sub_1B1F03804((char *)v12);
    ecs_stack_allocator_pop_snapshot(v4);
    if ((v5 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
    }
    swift_release();
    ++v6;
  }
  while (v6 != v25);
  sub_1B1A1B75C((uint64_t)v29);
  sub_1B19ED748(v31);
  return sub_1B19ED748(v31);
}

void sub_1B1E7217C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  unint64_t v14;

  v1 = v0 + OBJC_IVAR____TtC3VFX13EntityManager_updateHandlerIndex;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_updateHandlerIndex + 8) == 1)
  {
    v2 = (void *)objc_opt_self();
    v3 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v3, sel_addObserver_selector_name_object_, v0, sel__applicationDidEnterBackground_, *MEMORY[0x1E0DC4768], 0);

    v4 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel__applicationWillEnterForeground_, *MEMORY[0x1E0DC4860], 0);

    v5 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel__sceneDidEnterBackground_, *MEMORY[0x1E0DC5318], 0);

    v6 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel__sceneWillEnterForeground_, *MEMORY[0x1E0DC5338], 0);

    v7 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v7, sel_addObserver_selector_name_object_, v0, sel__sceneDidEnterBackground_, *MEMORY[0x1E0CB2A00], 0);

    v8 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v8, sel_addObserver_selector_name_object_, v0, sel__sceneWillEnterForeground_, *MEMORY[0x1E0CB29E8], 0);

    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
    {
      if (qword_1ED4B7630 != -1)
        swift_once();
      v9 = &qword_1ED4D0A18;
    }
    else
    {
      if (qword_1EEF574E8 != -1)
        swift_once();
      v9 = &qword_1EEFD57D0;
    }
    v10 = *v9;
    v11 = swift_allocObject();
    swift_weakInit();
    v12 = *(os_unfair_lock_s **)(v10 + 40);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v12);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = sub_1B1E79248;
    *(_QWORD *)(v13 + 24) = v11;
    swift_retain();
    v14 = sub_1B1E7259C((uint64_t)sub_1B1CB734C, v13);
    swift_release();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 40));
    swift_release();
    swift_release_n();
    *(_QWORD *)v1 = v14;
    *(_BYTE *)(v1 + 8) = 0;
  }
}

void sub_1B1E72488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = v0 + OBJC_IVAR____TtC3VFX13EntityManager_updateHandlerIndex;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_updateHandlerIndex + 8) & 1) == 0)
  {
    v2 = *(_QWORD *)v1;
    v3 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v3, sel_removeObserver_, v0);

    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
    {
      if (qword_1ED4B7630 == -1)
        goto LABEL_6;
    }
    else if (qword_1EEF574E8 == -1)
    {
LABEL_6:
      swift_retain();
      sub_1B1FA7DCC(v2);
      swift_release();
      *(_QWORD *)v1 = 0;
      *(_BYTE *)(v1 + 8) = 1;
      return;
    }
    swift_once();
    goto LABEL_6;
  }
}

unint64_t sub_1B1E7259C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = *(_QWORD **)v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    while (v5[v7 + 4])
    {
      ++v8;
      v7 += 2;
      if (v6 == v8)
        goto LABEL_5;
    }
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B1FFEF88(v5);
    v11 = &v5[v7];
    sub_1B19E5A18(v11[4]);
    v11[4] = a1;
    v11[5] = a2;
  }
  else
  {
LABEL_5:
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B1C6857C(0, v6 + 1, 1, v5);
    v8 = v5[2];
    v9 = v5[3];
    if (v8 >= v9 >> 1)
      v5 = sub_1B1C6857C(v9 > 1, v8 + 1, 1, v5);
    v5[2] = v8 + 1;
    v10 = &v5[2 * v8];
    v10[4] = a1;
    v10[5] = a2;
  }
  *(_QWORD *)v2 = v5;
  return v8;
}

uint64_t sub_1B1E726B0()
{
  uint64_t v0;
  uint64_t inited;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v0 = qword_1ED4D09F8;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Particle;
  *(_QWORD *)(inited + 40) = &off_1E63C21B0;
  v5 = v0;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v3);
  swift_setDeallocating();
  xmmword_1EEFD5630 = v3[0];
  unk_1EEFD5640 = v3[1];
  qword_1EEFD5650 = v4;
  return swift_release();
}

uint64_t sub_1B1E727E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6[12];
  _QWORD v7[12];
  _QWORD v8[12];
  _QWORD v9[12];
  _QWORD v10[12];
  _QWORD v11[12];
  _QWORD v12[12];
  _QWORD v13[12];
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  if (qword_1EEF57398 != -1)
    swift_once();
  v20[0] = xmmword_1EEFD5630;
  v20[1] = unk_1EEFD5640;
  v21 = qword_1EEFD5650;
  v3 = a1 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(v1, (uint64_t)v20, v3, v6);
  sub_1B19ED748(v6);
  sub_1B1A18378((uint64_t)v6, (uint64_t)v13, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v13[0])
    return 1;
  if (qword_1ED4B8480 != -1)
    swift_once();
  v18[0] = xmmword_1ED4D0A48;
  v18[1] = unk_1ED4D0A58;
  v19 = qword_1ED4D0A68;
  v4 = v7;
  sub_1B1E8FCE4(v1, (uint64_t)v18, v3, v7);
  sub_1B1A18378((uint64_t)v7, (uint64_t)v12, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v12[0])
    goto LABEL_13;
  if (qword_1ED4B8DF8 != -1)
    swift_once();
  v16[0] = xmmword_1ED4D0C50;
  v16[1] = *(_OWORD *)&qword_1ED4D0C60;
  v17 = qword_1ED4D0C70;
  v4 = v8;
  sub_1B1E8FCE4(v1, (uint64_t)v16, v3, v8);
  sub_1B1A18378((uint64_t)v8, (uint64_t)v11, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v11[0])
    goto LABEL_13;
  if (qword_1ED4B8E00 != -1)
    swift_once();
  v14[0] = xmmword_1ED4D0C78;
  v14[1] = unk_1ED4D0C88;
  v15 = qword_1ED4D0C98;
  v4 = v9;
  sub_1B1E8FCE4(v1, (uint64_t)v14, v3, v9);
  sub_1B1A18378((uint64_t)v9, (uint64_t)v10, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v10[0])
  {
LABEL_13:
    sub_1B19ED748(v4);
    return 1;
  }
  return 0;
}

uint64_t sub_1B1E72A38(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(1);
}

uint64_t sub_1B1E72A5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  ValueMetadata **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  double v39;
  id v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t aBlock;
  uint64_t v52;
  uint64_t (*v53)();
  void *v54;
  void *v55;
  uint64_t v56;

  v49 = result;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = v1;
    swift_retain();
    v4 = CACurrentMediaTime();
    v5 = OBJC_IVAR____TtC3VFX13EntityManager_scheduler;
    swift_retain();
    sub_1B204D500();
    swift_release();
    sub_1B1E72F94();
    sub_1B1DABB20();
    v6 = v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters;
    v7 = *(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 12);
    v8 = CACurrentMediaTime();
    if (*(_QWORD *)v6)
      vfx_counters_update(*(_QWORD *)v6, v7, v8 - v4);
    v9 = CACurrentMediaTime();
    v10 = *(_QWORD *)(v2 + 224);
    v48 = *(_QWORD *)(v10 + 16);
    if (v48)
    {
      v43 = v6;
      v44 = v5;
      v45 = OBJC_IVAR____TtC3VFX13EntityManager_isVFX2;
      v47 = v10 + 32;
      swift_bridgeObjectRetain();
      v11 = 0;
      v46 = v2;
      v50 = v3;
      while (1)
      {
        v12 = (uint64_t *)(v47 + 16 * v11);
        v13 = *v12;
        v14 = v12[1];
        ObjectType = swift_getObjectType();
        v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 120);
        swift_unknownObjectRetain();
        v17 = (void *)v16(ObjectType, v14);
        if (!v17)
        {
          v18 = objc_msgSend(*(id *)(v2 + 312), sel_commandBuffer);
          if (!v18)
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            v41 = *(_QWORD *)(v50 + v44);
            if ((*(_BYTE *)(v41 + 16) & 1) == 0)
              return swift_release();
LABEL_40:
            v42 = *(_OWORD *)(v41 + 176);
            *(_OWORD *)(v41 + 176) = *(_OWORD *)(v41 + 192);
            *(_OWORD *)(v41 + 192) = v42;
            return swift_release();
          }
          v17 = v18;
          sub_1B2229454();
          v19 = (void *)sub_1B2228728();
          swift_bridgeObjectRelease();
          objc_msgSend(v17, sel_setLabel_, v19);

        }
        v20 = v16(ObjectType, v14);
        if (v20)
        {
          v21 = (void *)v20;
          v55 = j__prof_commit;
          v56 = 0;
          aBlock = MEMORY[0x1E0C809B0];
          v52 = 1107296256;
          v53 = sub_1B1BA0C14;
          v54 = &unk_1E63F2C68;
          v22 = _Block_copy(&aBlock);
          swift_release();
          objc_msgSend(v21, sel_addScheduledHandler_, v22);
          _Block_release(v22);
          v23 = swift_allocObject();
          swift_weakInit();
          v24 = swift_allocObject();
          *(_QWORD *)(v24 + 16) = v23;
          *(_QWORD *)(v24 + 24) = v49;
          v55 = sub_1B1E7927C;
          v56 = v24;
          aBlock = MEMORY[0x1E0C809B0];
          v52 = 1107296256;
          v53 = sub_1B1BA0C14;
          v54 = &unk_1E63F2CB8;
          v25 = _Block_copy(&aBlock);
          swift_release();
          objc_msgSend(v21, sel_addCompletedHandler_, v25);
          _Block_release(v25);
          swift_unknownObjectRelease();
        }
        v26 = *(_QWORD *)(v2 + 224);
        v27 = *(_QWORD *)(v26 + 16);
        v28 = v27 && v13 == *(_QWORD *)(v26 + 16 * v27 + 16);
        v29 = *(_QWORD *)(v50 + 176);
        swift_retain();
        os_unfair_recursive_lock_lock_with_options();
        v30 = *(_QWORD *)(v29 + 48);
        v31 = *(_QWORD *)(v30 + 16);
        if (!v31)
          break;
        v32 = 0;
        v33 = (ValueMetadata **)(v30 + 32);
        while (*v33 != &type metadata for RERendererConfiguration)
        {
          ++v32;
          v33 += 5;
          if (v31 == v32)
            goto LABEL_20;
        }
        v34 = v32 - 65;
        if (v32 >= 0x40)
          v35 = 0;
        else
          v35 = 1 << v32;
        if (v34 < 0xFFFFFFFFFFFFFF7FLL)
          v35 = 0;
        v36 = *(_QWORD *)(v29 + 120) & v35;
        os_unfair_recursive_lock_unlock();
        swift_release();
        v3 = v50;
        if (!v36)
          goto LABEL_21;
LABEL_29:
        v28 = 0;
LABEL_30:
        sub_1B1E749E4(v13, v17, v28, v49, v3, ObjectType, v14);
        v37 = v16(ObjectType, v14);
        swift_unknownObjectRelease();
        if (!v37)
          objc_msgSend(v17, sel_commit);
        v2 = v46;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 128))(ObjectType, v14) & 1) != 0)
        {
          swift_getObjectType();
          sub_1B1F9BB9C();
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (++v11 == v48)
        {
          swift_bridgeObjectRelease();
          v5 = v44;
          v6 = v43;
          goto LABEL_35;
        }
      }
LABEL_20:
      os_unfair_recursive_lock_unlock();
      swift_release();
      v3 = v50;
LABEL_21:
      if (*(_BYTE *)(v3 + v45) != 1)
        goto LABEL_30;
      goto LABEL_29;
    }
LABEL_35:
    v38 = *(_DWORD *)(v6 + 16);
    v39 = CACurrentMediaTime();
    if (*(_QWORD *)v6)
      vfx_counters_update(*(_QWORD *)v6, v38, v39 - v9);
    sub_1B1DABD7C();
    if (*(_BYTE *)(v2 + 304) == 1)
    {
      *(_BYTE *)(v2 + 304) = 0;
      v40 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
      objc_msgSend(v40, sel_stopCapture);

    }
    v41 = *(_QWORD *)(v3 + v5);
    if (*(_BYTE *)(v41 + 16) == 1)
      goto LABEL_40;
    return swift_release();
  }
  return result;
}

void sub_1B1E72F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void (*v13)(char *, uint64_t);
  id v14;
  id v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];
  id v31;
  unint64_t v32;
  uint64_t v33;

  v1 = v0;
  v33 = *MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v30 - v4;
  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (byte_1EEFD5350 == 1)
  {
    byte_1EEFD5350 = 0;
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A40]), sel_init);
    objc_msgSend(v11, sel_setCaptureObject_, *(_QWORD *)(v1 + 16));
    sub_1B2228050();
    v12 = (void *)sub_1B2228074();
    v13 = *(void (**)(char *, uint64_t))(v7 + 8);
    v13(v10, v6);
    objc_msgSend(v11, sel_setOutputURL_, v12);

    v14 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v15 = objc_msgSend(v11, sel_outputURL);
    if (v15)
    {
      v16 = v15;
      sub_1B22280C8();

      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v5, v10, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
      v17 = (void *)sub_1B2228074();
      v13(v5, v6);
      v31 = 0;
      v18 = objc_msgSend(v14, sel_removeItemAtURL_error_, v17, &v31);

      v19 = v31;
      if ((v18 & 1) == 0)
      {
        v20 = v19;
        v21 = (void *)sub_1B2227FB4();

        swift_willThrow();
      }
      objc_msgSend(v11, sel_setDestination_, 2);
      v22 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
      v31 = 0;
      v23 = objc_msgSend(v22, sel_startCaptureWithDescriptor_error_, v11, &v31);

      if (v23)
      {
        v24 = v31;

        *(_BYTE *)(v1 + 304) = 1;
      }
      else
      {
        v25 = v31;
        v26 = (void *)sub_1B2227FB4();

        swift_willThrow();
        if (qword_1ED4BF430 != -1)
          swift_once();
        v31 = 0;
        v32 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        v30[1] = v26;
        sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
        sub_1B22295EC();
        v27 = (uint64_t)v31;
        v28 = v32;
        v29 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v31 = 0;
        swift_retain();
        sub_1B1F1AD70(v29, (uint64_t *)&v31, v27, v28);
        swift_release();
        swift_bridgeObjectRelease();

        swift_release();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
      __break(1u);
    }
  }
}

void sub_1B1E733F4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unsigned int v15;
  double v16;

  v8 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24));
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 24));
  }
  else
  {
    v9 = *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 24));
    if ((v9 & 1) == 0)
    {
      v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      if (v10)
      {
        swift_retain();
        sub_1B1BA4078(a1);
        if (*(_QWORD *)(*(_QWORD *)(v10 + 224) + 16))
        {
          v11 = CACurrentMediaTime();
          v12 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
          v13 = a3;
          *(float *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64) = v13;
          sub_1B1F4CC3C(a3);
          *(double *)(v12 + 48) = a4;
          *(_QWORD *)(v12 + 8) = a2;
          sub_1B1E72A5C(a2);
          v14 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_counters;
          v15 = *(_DWORD *)(v14 + 8);
          v16 = CACurrentMediaTime();
          if (*(_QWORD *)v14)
            vfx_counters_update(*(_QWORD *)v14, v15, v16 - v11);
        }
        swift_release();
      }
    }
  }
}

void sub_1B1E73530(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  double v9;

  v2 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24));
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 24));
  }
  else
  {
    v3 = *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 24));
    if ((v3 & 1) == 0)
    {
      v4 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
      if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 97) & 1) == 0)
      {
        v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
        if (v5)
        {
          swift_retain();
          sub_1B1BA4078(a1);
          if (*(_QWORD *)(*(_QWORD *)(v5 + 224) + 16))
          {
            v6 = CACurrentMediaTime();
            sub_1B1F4CD18(*(float *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler) + 208));
            sub_1B1E72A5C(*(_QWORD *)(v4 + 8));
            v7 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_counters;
            v8 = *(_DWORD *)(v7 + 8);
            v9 = CACurrentMediaTime();
            if (*(_QWORD *)v7)
              vfx_counters_update(*(_QWORD *)v7, v8, v9 - v6);
          }
          swift_release();
        }
      }
    }
  }
}

void sub_1B1E73664(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t (*v11)(double);
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  void (*v28)(uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  int v40;
  void (*v41)(uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  double v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  void (*v62)(uint64_t);
  int v63;
  int v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  id v67;
  uint64_t v68;
  int v69;
  void (*v70)(uint64_t);
  int v71;
  int v72;
  uint64_t (*v73)(double);
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;

  v2 = OBJC_IVAR____TtC3VFX13EntityManager_currentState;
  v3 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_currentState) = 0;
  v81 = v3;
  if (v3)
  {
    v4 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
    if (v4)
    {
      swift_retain();
      v4(a1);
      sub_1B19E5A18((uint64_t)v4);
    }
  }
  v77 = OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) = 1;
  sub_1B2094974();
  v5 = OBJC_IVAR____TtC3VFX13EntityManager_scheduler;
  swift_retain();
  v6 = swift_retain();
  sub_1B2051060(v6, a1);
  swift_release();
  swift_release();
  v76 = v5;
  v7 = *(_QWORD *)(a1 + v5);
  v8 = *(_QWORD *)(v7 + 24);
  swift_retain();
  if (v8)
  {
    v10 = v2;
    v11 = thread_worker_index;
    v12 = (uint64_t *)thread_worker_index(v9);
    v13 = *v12;
    *v12 = 0;
    v14 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent);
    swift_retain();
    if (v14 == 1)
    {
      sub_1B204E7C8(2);
      *(_BYTE *)(*(_QWORD *)(v7 + 24) + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 0;
    }
    sub_1B204E7C8(0);
    *(_QWORD *)((uint64_t (*)(uint64_t (**)(double)))v11)(&thread_worker_index) = v13;
    swift_release();
    swift_release();
    v2 = v10;
  }
  v15 = *(unsigned __int8 *)(a1 + v2);
  *(_BYTE *)(a1 + v2) = 2;
  if (v15 != 2)
  {
    v16 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
    if (v16)
    {
      swift_retain();
      v16(a1);
      sub_1B19E5A18((uint64_t)v16);
    }
  }
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v17)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + v76) + 24);
    swift_retain();
    if (v23)
    {
      v25 = (uint64_t *)thread_worker_index(v24);
      v26 = *v25;
      *v25 = 0;
      swift_retain();
      sub_1B204E7C8(1);
      *v25 = v26;
      swift_release();
      swift_release();
    }
    v27 = *(unsigned __int8 *)(a1 + v2);
    *(_BYTE *)(a1 + v2) = v15;
    if (v27 != v15)
    {
      v28 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v28)
      {
        swift_retain();
        v28(a1);
        sub_1B19E5A18((uint64_t)v28);
      }
    }
    *(_BYTE *)(a1 + v77) = 0;
    v29 = *(unsigned __int8 *)(a1 + v2);
    v30 = v81;
    *(_BYTE *)(a1 + v2) = v81;
    if (v29 != v30)
    {
      v31 = OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn;
      goto LABEL_46;
    }
    return;
  }
  v75 = v2;
  if ((*(_BYTE *)(v17 + 552) & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 + 216);
    if (*(_QWORD *)(v18 + 16))
    {
      v19 = *(_QWORD *)(v18 + 40);
      ObjectType = swift_getObjectType();
      v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      v22 = v21(ObjectType, v19);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_retain();
      v22 = 80;
    }
  }
  else
  {
    v22 = *(_QWORD *)(v17 + 544);
    swift_retain();
  }
  v32 = (void *)objc_opt_self();
  v33 = objc_msgSend(v32, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, v22, 16, 16, 0);
  objc_msgSend(v33, sel_setUsage_, 5);
  v34 = *(void **)(v17 + 16);
  if (!objc_msgSend(v34, sel_newTextureWithDescriptor_, v33))
  {
    v36 = v15;
    v37 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v79 = 0x80000001B233FF50;
    v38 = objc_msgSend(v33, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v39 = sub_1B2228E90();
    v78 = 0;
    (*(void (**)(uint64_t, uint64_t *, unint64_t, unint64_t))(*(_QWORD *)v37 + 88))(v39, &v78, 0xD000000000000024, 0x80000001B233FF50);
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    v40 = *(unsigned __int8 *)(a1 + v75);
    *(_BYTE *)(a1 + v75) = v36;
    if (v40 != v36)
    {
      v41 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v41)
      {
        swift_retain();
        v41(a1);
        sub_1B19E5A18((uint64_t)v41);
      }
    }
    *(_BYTE *)(a1 + v77) = 0;
    v42 = *(unsigned __int8 *)(a1 + v75);
    v43 = v81;
    *(_BYTE *)(a1 + v75) = v81;
    if (v42 != v43)
    {
      v31 = OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn;
      goto LABEL_46;
    }
    return;
  }
  v74 = v33;
  if ((*(_BYTE *)(v17 + 568) & 1) != 0)
  {
    v35 = 0;
    goto LABEL_34;
  }
  v44 = *(_QWORD *)(v17 + 560);
  v45 = objc_msgSend(v32, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, v44, 16, 16, 0);
  objc_msgSend(v45, sel_setUsage_, 7);
  v46 = objc_msgSend(v34, sel_newTextureWithDescriptor_, v45);
  if (v46)
  {
    v35 = (uint64_t)v46;
    *(_QWORD *)(v17 + 592) = v44;
    sub_1B1BA370C();

LABEL_34:
    v80 = v15;
    type metadata accessor for MTLTextureRenderOutput();
    swift_allocObject();
    swift_unknownObjectRetain();
    v47 = swift_unknownObjectRetain();
    v48 = sub_1B1BA0D60(v47, v35);
    v49 = v48;
    *(_BYTE *)(v48 + 136) = 0;
    v50 = v75;
    if ((*(_BYTE *)(v17 + 584) & 1) == 0)
      *(_QWORD *)(v48 + 32) = *(_QWORD *)(v17 + 576);
    v51 = objc_msgSend(*(id *)(v17 + 312), sel_commandBuffer);
    if (v51)
    {
      sub_1B2229454();
      v52 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel_setLabel_, v52);

    }
    swift_retain();
    sub_1B20C2464(a1, v49, v51, (_QWORD *)v17);
    swift_release();
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + v76) + 24);
    swift_retain();
    if (v53)
    {
      v73 = thread_worker_index;
      v55 = (uint64_t *)thread_worker_index(v54);
      v56 = *v55;
      *v55 = 0;
      swift_retain();
      sub_1B204E7C8(1);
      *v55 = v56;
      v50 = v75;
      swift_release();
      swift_release();
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + v76) + 24);
      swift_retain();
      if (v57)
      {
        v58 = (uint64_t *)((uint64_t (*)(uint64_t (**)(double)))v73)(&thread_worker_index);
        v59 = *v58;
        *v58 = 0;
        swift_retain();
        sub_1B204E7C8(5);
        *v58 = v59;
        swift_release();
        swift_release();
      }
    }
    swift_retain();
    sub_1B1B3BB2C();
    swift_release();
    sub_1B2094974();
    sub_1B1BA458C(0);
    swift_getObjectType();
    objc_msgSend(v51, sel_commit);
    sub_1B1F9BB9C();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    v60 = *(unsigned __int8 *)(a1 + v50);
    v61 = v80;
    *(_BYTE *)(a1 + v50) = v80;
    if (v60 != v61)
    {
      v62 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v62)
      {
        swift_retain();
        v62(a1);
        sub_1B19E5A18((uint64_t)v62);
      }
    }
    *(_BYTE *)(a1 + v77) = 0;
    v63 = *(unsigned __int8 *)(a1 + v50);
    v64 = v81;
    *(_BYTE *)(a1 + v50) = v81;
    if (v63 != v64)
    {
      v31 = OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn;
      goto LABEL_46;
    }
    return;
  }
  v66 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v79 = 0x80000001B233FF80;
  v67 = objc_msgSend(v45, sel_description);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  v68 = sub_1B2228E90();
  v78 = 0;
  (*(void (**)(uint64_t, uint64_t *, unint64_t, unint64_t))(*(_QWORD *)v66 + 88))(v68, &v78, 0xD00000000000002ALL, 0x80000001B233FF80);
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  v69 = *(unsigned __int8 *)(a1 + v75);
  *(_BYTE *)(a1 + v75) = v15;
  if (v69 != v15)
  {
    v70 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
    if (v70)
    {
      swift_retain();
      v70(a1);
      sub_1B19E5A18((uint64_t)v70);
    }
  }
  *(_BYTE *)(a1 + v77) = 0;
  v71 = *(unsigned __int8 *)(a1 + v75);
  v72 = v81;
  *(_BYTE *)(a1 + v75) = v81;
  if (v71 != v72)
  {
    v31 = OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn;
LABEL_46:
    v65 = *(void (**)(uint64_t))(a1 + v31);
    if (v65)
    {
      swift_retain();
      v65(a1);
      sub_1B19E5A18((uint64_t)v65);
    }
  }
}

uint64_t sub_1B1E73FC4(uint64_t a1)
{
  uint64_t result;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
    {
      swift_retain_n();
      swift_retain();
      sub_1B1E63F80((uint64_t)sub_1B1E79250, a1, 0);
    }
    else
    {
      Strong = swift_weakLoadStrong();
      if (!Strong)
        return swift_release();
      v4 = Strong;
      v5 = swift_retain_n();
      v6 = (void *)MEMORY[0x1B5E22F20](v5);
      sub_1B1E73530(v4);
      objc_autoreleasePoolPop(v6);
    }
    swift_release();
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E740B8()
{
  uint64_t result;
  uint64_t v1;
  void *v2;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = (void *)MEMORY[0x1B5E22F20]();
    sub_1B1E73530(v1);
    objc_autoreleasePoolPop(v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E7413C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_1B22284F4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1B2227DC8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2227DBC();
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
  swift_retain();
  *v9 = sub_1B2228F44();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DEF740], v5);
  sub_1B2228500();
  v15 = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  a4(v15);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1B1E7429C()
{
  uint64_t (*v0)(uint64_t);

  sub_1B222847C();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_1B1E792CC();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA480, v0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1DCA9A0();
  return sub_1B2229364();
}

uint64_t sub_1B1E74330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  int v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31[2];

  v29 = sub_1B2228008();
  v0 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1B222820C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B2228110();
  v28 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v27 - v15;
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v18 = (void *)sub_1B2228728();
  objc_msgSend(v17, sel_setDateFormat_, v18);

  sub_1B2228068();
  v31[0] = 0x2D6563617274;
  v31[1] = 0xE600000000000000;
  v19 = objc_msgSend((id)objc_opt_self(), sel_now);
  sub_1B22281F4();

  v20 = (void *)sub_1B22281DC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v30 = v17;
  v21 = objc_msgSend(v17, sel_stringFromDate_, v20);

  sub_1B222874C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v22 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v3, *MEMORY[0x1E0CAFD78], v29);
  sub_1B1A06460();
  sub_1B2228104();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v3, v22);
  swift_bridgeObjectRelease();
  v23 = *(void (**)(char *, uint64_t))(v28 + 8);
  v23(v12, v9);
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v24 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v31[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v24, v31, 0xD00000000000001CLL, 0x80000001B233FFD0);
  swift_release();
  swift_release();
  v25 = MTLCreateSystemDefaultDevice();
  if (v25)
  {
    sub_1B1B40648((uint64_t)v25);
    sub_1B21503F4();
    sub_1B2150910();
    swift_unknownObjectRelease();
    swift_release();
  }
  sub_1B1E78844();
  byte_1EEFD5350 = 1;

  return ((uint64_t (*)(char *, uint64_t))v23)(v16, v9);
}

void sub_1B1E746D8(uint64_t a1)
{
  id v2;
  id v3;
  unsigned int v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A40]), sel_init);
  objc_msgSend(v2, sel_setCaptureObject_, *(_QWORD *)(a1 + 16));
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
  v11 = 0;
  v4 = objc_msgSend(v3, sel_startCaptureWithDescriptor_error_, v2, &v11);

  if (v4)
  {
    v5 = v11;

    *(_BYTE *)(a1 + 304) = 1;
  }
  else
  {
    v6 = v11;
    v7 = (void *)sub_1B2227FB4();

    swift_willThrow();
    if (qword_1ED4BF430 != -1)
      swift_once();
    v11 = 0;
    v12 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    v8 = (uint64_t)v11;
    v9 = v12;
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11 = 0;
    swift_retain();
    sub_1B1F1AD70(v10, (uint64_t *)&v11, v8, v9);
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
  }
}

uint64_t type metadata accessor for StartCaptureSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E74944()
{
  return "startCapture";
}

uint64_t type metadata accessor for StopCaptureSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E7497C()
{
  return "stopCapture";
}

uint64_t sub_1B1E74990()
{
  return qword_1EEF5DE70;
}

uint64_t type metadata accessor for RenderImGUISystem()
{
  return objc_opt_self();
}

const char *sub_1B1E749C0()
{
  return "RenderImGUI";
}

uint64_t sub_1B1E749D4()
{
  return qword_1EEF5DE68 + 2;
}

uint64_t sub_1B1E749E4(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  NSObject *v32;
  os_signpost_type_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint8_t *v37;
  os_signpost_id_t v38;
  uint8_t *v39;
  int v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  double v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57;
  void (*v58)(uint64_t);
  NSObject *v59;
  char *v60;
  os_signpost_type_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint8_t *v66;
  os_signpost_id_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD aBlock[7];

  v81 = a1;
  v82 = a6;
  v12 = sub_1B22283BC();
  v79 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v78 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1B2228380();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v69 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v69 - v25;
  result = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (result)
  {
    v73 = a4;
    v74 = a3;
    v80 = a7;
    v70 = v12;
    v77 = v24;
    v28 = qword_1ED4BA0E0;
    v83 = result;
    swift_retain();
    if (v28 != -1)
      swift_once();
    v29 = sub_1B22283B0();
    v30 = sub_1B1B40EC8(v29, (uint64_t)qword_1ED4D0E48);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v31(v26, a5 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v15);
    v75 = v30;
    v32 = sub_1B2228398();
    v33 = sub_1B2228FA4();
    if ((sub_1B2229094() & 1) != 0)
    {
      v31(v21, (uint64_t)v26, v15);
      v34 = v21;
      v35 = v15;
      v36 = a2;
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      v38 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v32, v33, v38, "render", "", v37, 2u);
      v39 = v37;
      a2 = v36;
      v15 = v35;
      v21 = v34;
      MEMORY[0x1B5E23F88](v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v15);
    }
    else
    {

    }
    v71 = v31;
    v31(v21, (uint64_t)v26, v15);
    sub_1B22283E0();
    swift_allocObject();
    sub_1B22283D4();
    v76 = *(void (**)(char *, uint64_t))(v16 + 8);
    v76(v26, v15);
    v40 = *(unsigned __int8 *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
    v72 = OBJC_IVAR____TtC3VFX13EntityManager_currentState;
    *(_BYTE *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_currentState) = 2;
    if (v40 != 2)
    {
      v41 = *(void (**)(uint64_t))(a5 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v41)
      {
        swift_retain();
        v41(a5);
        sub_1B19E5A18((uint64_t)v41);
      }
    }
    v42 = v80;
    sub_1B1BA61E0(a5, v81, a2, v83, v82, v80);
    v43 = *(_QWORD *)(*(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler) + 24);
    swift_retain();
    if (v43)
    {
      v45 = v21;
      v46 = v15;
      v47 = a2;
      v48 = (uint64_t *)thread_worker_index(v44);
      v49 = *v48;
      *v48 = 0;
      swift_retain();
      sub_1B204E7C8(4);
      *v48 = v49;
      a2 = v47;
      v15 = v46;
      v21 = v45;
      v42 = v80;
      swift_release();
      swift_release();
    }
    sub_1B1BA458C(v73);
    if ((v74 & 1) != 0)
      sub_1B1BA488C(a2);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 176))(v82, v42);
    if (v50)
    {
      v52 = v50;
      v53 = v51;
      v54 = swift_allocObject();
      *(_QWORD *)(v54 + 16) = v52;
      *(_QWORD *)(v54 + 24) = v53;
      aBlock[4] = sub_1B1E792A8;
      aBlock[5] = v54;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1B1BA0C14;
      aBlock[3] = &unk_1E63F2D08;
      v55 = a2;
      v56 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v55, sel_addCompletedHandler_, v56);
      _Block_release(v56);
      sub_1B19E5A18(v52);
    }
    v57 = *(unsigned __int8 *)(a5 + v72);
    *(_BYTE *)(a5 + v72) = 4;
    if (v57 != 4)
    {
      v58 = *(void (**)(uint64_t))(a5 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v58)
      {
        swift_retain();
        v58(a5);
        sub_1B19E5A18((uint64_t)v58);
      }
    }
    v59 = sub_1B2228398();
    v60 = v77;
    sub_1B22283C8();
    v61 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      swift_retain();
      v62 = v78;
      sub_1B22283EC();
      swift_release();
      v63 = v79;
      v64 = v70;
      if ((*(unsigned int (**)(char *, uint64_t))(v79 + 88))(v62, v70) == *MEMORY[0x1E0DF2190])
      {
        v65 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
        v65 = "";
      }
      v71(v21, (uint64_t)v60, v15);
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      v67 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v59, v61, v67, "render", v65, v66, 2u);
      MEMORY[0x1B5E23F88](v66, -1, -1);

      v68 = v76;
      v76(v60, v15);
      v68(v21, v15);
    }
    else
    {

      v76(v60, v15);
    }
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1B1E75000()
{
  sub_1B1E750C0(&qword_1ED4D0AC8, 30, (uint64_t)sub_1B1E74330, (uint64_t)&unk_1E63F2D58);
}

void sub_1B1E75060()
{
  sub_1B1E750C0(&qword_1ED4D0EE0, 31, (uint64_t)sub_1B1E74298, (uint64_t)&unk_1E63F2D30);
}

void sub_1B1E750C0(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  sigaction v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = sub_1B222847C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1B22284AC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a1)
  {
    v26.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1B22283F8();
    *(_QWORD *)&v26.sa_mask = 0;
    sigaction(a2, &v26, 0);
    sub_1B1B9DAD4(0, &qword_1ED4B7288);
    v22 = a4;
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
    v24 = v8;
    v18 = sub_1B2228F44();
    v23 = v9;
    v19 = (void *)v18;
    v20 = sub_1B2228F74();

    *a1 = v20;
    swift_unknownObjectRelease();
    swift_getObjectType();
    aBlock[4] = a3;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1B17915D0;
    aBlock[3] = v22;
    v21 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    sub_1B2228494();
    sub_1B1E7429C();
    sub_1B2228F80();
    _Block_release(v21);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B2228F8C();
    swift_unknownObjectRelease();
  }
}

uint64_t *sub_1B1E7530C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B16814(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      v32 = type metadata accessor for GraphScript(0);
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(v32, (uint64_t)&off_1E6370AB0, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E75854(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B165BC(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      v32 = type metadata accessor for SimpleScript(0);
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(v32, (uint64_t)&off_1E63777B8, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E75D9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B16364(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      v32 = type metadata accessor for MetalFunctionScript(0);
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(v32, (uint64_t)&off_1E63982A0, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E762E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B1610C(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      v32 = type metadata accessor for ShaderScript(0);
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(v32, (uint64_t)&off_1E63774F8, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E7682C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B15EB4(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      v32 = type metadata accessor for EmitterScript(0);
      sub_1B1A1B6FC(0, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(v32, (uint64_t)&off_1E637A0A8, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E76D74(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B15C5C(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      inited = type metadata accessor for ParticleInitScript(0);
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(inited, (uint64_t)&off_1E6394B78, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E772BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t updated;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B15A04(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      updated = type metadata accessor for ParticleUpdateScript(0);
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(updated, (uint64_t)&off_1E639E488, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDBFEC(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E77804(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46[8];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B157AC(1, 1, (uint64_t)&v40);
  swift_release();
  v57 = v40;
  v58 = v41;
  v59 = v42;
  v60 = v43 | 1;
  v61 = v44;
  v62 = v45;
  sub_1B1E8FCE4(a1, (uint64_t)&v57, a2 & 0xFFFFFFFFFFLL, v46);
  sub_1B1A18378((uint64_t)v46, (uint64_t)v47, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v47[0])
    return (uint64_t *)sub_1B1A1B75C((uint64_t)&v40);
  if (v53 <= 0)
  {
    sub_1B1A1B75C((uint64_t)&v40);
  }
  else
  {
    v35 = v50;
    if (v50)
    {
      v34 = v49;
      v4 = v52;
      v5 = v52[4];
      v39 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v33 = (uint64_t)(v52 + 6);
      v32 = type metadata accessor for TriggerScript(0);
      sub_1B1A1B6FC(0, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v54[0] = v47[0];
      v54[1] = v47[1];
      v55 = v48;
      v31 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v8 = 0;
      v30 = v5;
      while (1)
      {
        v9 = (unsigned int *)(v34 + 48 * v7);
        v37 = *v9;
        v38 = v8;
        v36 = v9[1];
        v10 = (uint64_t *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v12 = *((_QWORD *)v9 + 4);
        v13 = *((_QWORD *)v9 + 5);
        if (v39)
        {
          v14 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v5);
        sub_1B1A18378(v33, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v15 = v4[4];
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
        v4[7] = v16;
        v4[9] = 0;
        v4[10] = 0;
        v4[8] = 0;
        swift_release();
        sub_1B1A12038(v32, (uint64_t)&off_1E637DA80, v10, v11, v12, (uint64_t)v4);
        v17 = sub_1B1A12038(v31, (uint64_t)&off_1E63A95C8, v10, v11, v12, (uint64_t)v4);
        if (v10)
        {
          v8 = v38;
          if (v12)
          {
            v18 = (uint64_t *)(v17 + 8);
            v5 = v30;
            do
            {
              sub_1B1CDC000(a1, *(v18 - 1), *v18);
              v18 += 2;
              --v12;
            }
            while (v12);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = v38;
          if ((_DWORD)v37 != (_DWORD)v36)
          {
            v19 = (uint64_t *)(v17 + 16 * v37 + 8);
            v20 = v36 - v37;
            v5 = v30;
            do
            {
              sub_1B1CDC000(a1, *(v19 - 1), *v19);
              v19 += 2;
              --v20;
            }
            while (v20);
            goto LABEL_20;
          }
        }
        v5 = v30;
LABEL_20:
        sub_1B1F05D48(v4, (unsigned __int16 **)v54, (uint64_t)v56);
        if (*(_QWORD *)(v4[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v13);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v4[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            v4[13] = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v13 + 232);
            v27 = *(char **)(v13 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v13 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v13 + 232);
              v28 = *(char **)(v13 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v13 + 232) = 0;
                *(_QWORD *)(v13 + 240) = 0;
              }
            }
            *(_QWORD *)(v13 + 248) = v28;
            *(_QWORD *)(v13 + 256) = v27;
          }
        }
        ecs_stack_allocator_pop_snapshot(v5);
        if ((v39 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        }
        swift_release();
        if (++v7 == v35)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    sub_1B1A1B75C((uint64_t)&v40);
    sub_1B19ED748(v46);
  }
  return sub_1B19ED748(v46);
}

uint64_t *sub_1B1E77D4C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t (*a4)(uint64_t *), unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58[8];
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  _BYTE v68[40];
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v75 = qword_1ED4D09F8;
  v76 = 0;
  v77 = 2;
  v78 = 0;
  v79 = 2;
  v80 = 0;
  swift_retain();
  a3(&v52, 2);
  swift_release();
  v69 = v52;
  v70 = v53;
  v71 = v54;
  v72 = v55 | 1;
  v73 = v56;
  v74 = v57;
  sub_1B1E8FCE4(a1, (uint64_t)&v69, a2 & 0xFFFFFFFFFFLL, v58);
  sub_1B1A18378((uint64_t)v58, (uint64_t)v59, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v59[0])
    return (uint64_t *)a4(&v52);
  if (v65 <= 0)
  {
    a4(&v52);
  }
  else
  {
    v48 = v62;
    if (v62)
    {
      v47 = v61;
      v13 = v64;
      v14 = v64[4];
      v15 = *(unsigned __int8 *)(v63 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v45 = (uint64_t)(v64 + 6);
      v43 = v64 + 13;
      sub_1B1A1B6FC(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      v17 = v16;
      v66[0] = v59[0];
      v66[1] = v59[1];
      v67 = v60;
      swift_retain();
      swift_retain();
      swift_retain();
      v18 = 0;
      v19 = 0;
      v46 = v15;
      v44 = v14;
      while (1)
      {
        v20 = (unsigned int *)(v47 + 48 * v18);
        v50 = *v20;
        v51 = v19;
        v49 = v20[1];
        v21 = (uint64_t *)*((_QWORD *)v20 + 2);
        v22 = *((_QWORD *)v20 + 3);
        v24 = *((_QWORD *)v20 + 4);
        v23 = *((_QWORD *)v20 + 5);
        if (v15)
        {
          v25 = *(os_unfair_lock_s **)(v23 + 376);
          swift_retain();
          os_unfair_lock_lock(v25);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        sub_1B1A18378(v45, (uint64_t)v68, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v26 = v13[4];
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v13[6] = ecs_stack_allocator_allocate(v26, 48 * v27, 8);
        v13[7] = v27;
        v13[9] = 0;
        v13[10] = 0;
        v13[8] = 0;
        swift_release();
        v28 = sub_1B1A12038(v17, (uint64_t)&off_1E637D0A8, v21, v22, v24, (uint64_t)v13);
        if (v21)
        {
          v15 = v46;
          v19 = v51;
          if (v24)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72);
            v14 = v44;
            do
            {
              *(_BYTE *)(v28 + *(int *)(v17 + 52)) = 0;
              v28 += v29;
              --v24;
            }
            while (v24);
            goto LABEL_20;
          }
        }
        else
        {
          v15 = v46;
          v19 = v51;
          if ((_DWORD)v50 != (_DWORD)v49)
          {
            v30 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72);
            v31 = v49 - v50;
            v32 = v28 + v30 * v50;
            v14 = v44;
            do
            {
              *(_BYTE *)(v32 + *(int *)(v17 + 52)) = 0;
              v32 += v30;
              --v31;
            }
            while (v31);
            goto LABEL_20;
          }
        }
        v14 = v44;
LABEL_20:
        sub_1B1F05D48(v13, (unsigned __int16 **)v66, (uint64_t)v68);
        if (*(_QWORD *)(v13[13] + 16))
        {
          v33 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v33, v23);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v35 = v13[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v35 + 16));
          }
          else
          {
            v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v35 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v36 = (_QWORD *)swift_allocObject();
              v37 = j__malloc_size(v36);
              v36[2] = 0;
              v36[3] = 2 * ((uint64_t)(v37 - 32) / 72);
            }
            *v43 = v36;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v13[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v38 = *(char **)(v23 + 232);
            v39 = *(char **)(v23 + 256);
            if (v38 == v39)
            {
              v40 = *(char **)(v23 + 240);
            }
            else
            {
              sub_1B1A1059C(v39, v38);
              v39 = *(char **)(v23 + 232);
              v40 = *(char **)(v23 + 240);
              if (v40 == v39)
              {
                v40 = 0;
                v39 = 0;
                *(_QWORD *)(v23 + 232) = 0;
                *(_QWORD *)(v23 + 240) = 0;
              }
            }
            *(_QWORD *)(v23 + 248) = v40;
            *(_QWORD *)(v23 + 256) = v39;
          }
        }
        ecs_stack_allocator_pop_snapshot(v14);
        if (v15)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 376));
        }
        swift_release();
        if (++v18 == v48)
          goto LABEL_37;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_37:
    a4(&v52);
    sub_1B19ED748(v58);
  }
  return sub_1B19ED748(v58);
}

uint64_t _s3VFX8VFXSceneC29applicationDidEnterBackgroundyyFZ_0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[8];

  if (qword_1ED4B7780 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4D0940, sel_lock);
  if (qword_1ED4B8588 != -1)
    swift_once();
  v0 = qword_1ED4D0A78;
  v1 = (void *)qword_1ED4D0940;
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel_unlock);
  v2 = *(_QWORD *)(v0 + 16);
  if (!v2)
    return swift_bridgeObjectRelease();
  v3 = v0 + 32;
  do
  {
    sub_1B1E79314(v3, (uint64_t)v13);
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v5 = Strong;
      v6 = Strong + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24));
      v7 = OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground;
      if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 24));
      }
      else
      {
        v8 = *(_BYTE *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 24));
        if ((v8 & 1) == 0)
        {
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 24));
          *(_BYTE *)(v5 + v7) = 1;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 24));
          v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
          if (v9)
          {
            swift_retain();
            os_unfair_recursive_lock_lock_with_options();
            if ((*(_BYTE *)(v9 + 152) & 1) == 0)
              *(_BYTE *)(v9 + 152) = 1;
            v10 = *(_QWORD *)(v9 + 16);
            objc_msgSend(*(id *)(v10 + 16), sel_lock);
            *(_BYTE *)(v10 + 24) = 0;
            objc_msgSend(*(id *)(v10 + 16), sel_unlock);
            os_unfair_recursive_lock_unlock();
            swift_release();
          }
          v11 = swift_retain();
          sub_1B1DAE1B8(v11, v5);
          swift_release();
        }
      }
      swift_release();
    }
    sub_1B1E79370((uint64_t)v13);
    v3 += 8;
    --v2;
  }
  while (v2);
  return swift_bridgeObjectRelease();
}

uint64_t _s3VFX8VFXSceneC30applicationWillEnterForegroundyyFZ_0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE v13[8];

  if (qword_1ED4B7780 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4D0940, sel_lock);
  if (qword_1ED4B8588 != -1)
    swift_once();
  v0 = qword_1ED4D0A78;
  v1 = (void *)qword_1ED4D0940;
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel_unlock);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    for (i = v0 + 32; ; i += 8)
    {
      sub_1B1E79314(i, (uint64_t)v13);
      Strong = swift_weakLoadStrong();
      if (!Strong)
        goto LABEL_9;
      v5 = Strong;
      v6 = Strong + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24));
      v7 = OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground;
      if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_applicationInBackground) & 1) != 0)
        break;
      v8 = *(_BYTE *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_sceneInBackground);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 24));
      if ((v8 & 1) != 0)
        goto LABEL_14;
LABEL_8:
      swift_release();
LABEL_9:
      sub_1B1E79370((uint64_t)v13);
      if (!--v2)
        return swift_bridgeObjectRelease();
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 24));
LABEL_14:
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 24));
    *(_BYTE *)(v5 + v7) = 0;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 24));
    v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
    if (v9)
    {
      swift_retain();
      os_unfair_recursive_lock_lock_with_options();
      *(_BYTE *)(v9 + 152) = 0;
      os_unfair_recursive_lock_lock_with_options();
      v10 = *(_BYTE *)(v9 + 152);
      os_unfair_recursive_lock_unlock();
      if ((v10 & 1) == 0)
      {
        v11 = *(_QWORD *)(v9 + 16);
        objc_msgSend(*(id *)(v11 + 16), sel_lock);
        *(_BYTE *)(v11 + 24) = 1;
        objc_msgSend(*(id *)(v11 + 16), sel_signal);
        objc_msgSend(*(id *)(v11 + 16), sel_unlock);
      }
      os_unfair_recursive_lock_unlock();
      swift_release();
    }
    goto LABEL_8;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E786E0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  _BYTE v7[8];

  if (qword_1ED4B7780 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4D0940, sel_lock);
  if (qword_1ED4B8588 != -1)
    swift_once();
  v0 = qword_1ED4D0A78;
  v1 = (void *)qword_1ED4D0940;
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel_unlock);
  v2 = *(_QWORD *)(v0 + 16);
  if (!v2)
    return swift_bridgeObjectRelease();
  v3 = v0 + 32;
  do
  {
    sub_1B1E79314(v3, (uint64_t)v7);
    Strong = swift_weakLoadStrong();
    sub_1B1E79370((uint64_t)v7);
    if (Strong)
    {
      v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      if (v5)
      {
        swift_retain();
        swift_release();
        *(_BYTE *)(v5 + 32) = 1;
      }
      swift_release();
    }
    v3 += 8;
    --v2;
  }
  while (v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E78844()
{
  id v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v0 = MTLCreateSystemDefaultDevice();
  if (v0)
  {
    sub_1B1FAF0F4((uint64_t)v0);
    v28 = sub_1B1FA83B0();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v1 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v31 = 0;
  swift_retain();
  sub_1B1F1AD70(v1, (uint64_t *)&v31, 0x20534345203D3D0ALL, 0xEB000000000A3D3DLL);
  swift_release();
  swift_release();
  if (qword_1ED4B7780 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4D0940, sel_lock);
  if (qword_1ED4B8588 != -1)
    swift_once();
  v2 = qword_1ED4D0A78;
  v3 = (void *)qword_1ED4D0940;
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel_unlock);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = 0;
    v29 = 0;
    v6 = 0;
    v7 = v2 + 32;
    do
    {
      sub_1B1E79314(v7, (uint64_t)&v34);
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v8 = Strong;
        v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_logger);
        *(_QWORD *)&v31 = 0;
        *((_QWORD *)&v31 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2228890();
        v33 = v8;
        type metadata accessor for EntityManager();
        sub_1B22295EC();
        sub_1B2228890();
        v10 = v6;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v33 = v8;
        sub_1B22295EC();
        v12 = *((_QWORD *)&v31 + 1);
        v11 = v31;
        v13 = sub_1B2228EA8();
        *(_QWORD *)&v31 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v13, &v31, v11, v12);
        swift_release();
        swift_bridgeObjectRelease();
        v31 = 0u;
        v32 = 0u;
        v14 = swift_retain();
        sub_1B1DA2934(v14, v8, (uint64_t *)&v31);
        swift_release();
        v15 = v31;
        v16 = *((_QWORD *)&v32 + 1);
        sub_1B1E79370((uint64_t)&v34);
        v6 = v15 + v10;
        v29 += *((_QWORD *)&v15 + 1);
        v5 += v16;
      }
      else
      {
        sub_1B1E79370((uint64_t)&v34);
      }
      v7 += 8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v30 = v5;
    v18 = v29;
    v19 = v6;
  }
  else
  {
    swift_bridgeObjectRelease();
    v30 = 0;
    v18 = 0;
    v19 = 0;
  }
  *(_QWORD *)&v31 = 0;
  *((_QWORD *)&v31 + 1) = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34E8]), sel_init);
  objc_msgSend(v20, sel_setCountStyle_, 3);
  v21 = objc_msgSend(v20, sel_stringFromByteCount_, v19);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34E8]), sel_init);
  objc_msgSend(v22, sel_setCountStyle_, 3);
  v23 = objc_msgSend(v22, sel_stringFromByteCount_, v18);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v34 = v30;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34E8]), sel_init);
  objc_msgSend(v24, sel_setCountStyle_, 3);
  v25 = objc_msgSend(v24, sel_stringFromByteCount_, v28);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  v26 = v31;
  LODWORD(v25) = sub_1B2228EA8();
  *(_QWORD *)&v31 = 0;
  swift_retain();
  sub_1B1F1AD70((int)v25, (uint64_t *)&v31, v26, *((uint64_t *)&v26 + 1));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1E78E54(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    if (byte_1EEFD5350 == 1)
    {
      byte_1EEFD5350 = 0;
      sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
      swift_retain();
      v2 = sub_1B2228F44();
      v3 = swift_allocObject();
      *(_QWORD *)(v3 + 16) = sub_1B1E78F70;
      *(_QWORD *)(v3 + 24) = v1;
      v5[4] = sub_1B1CB734C;
      v5[5] = v3;
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 1107296256;
      v5[2] = sub_1B1CDBFCC;
      v5[3] = &unk_1E63D48F8;
      v4 = _Block_copy(v5);
      swift_retain();
      swift_release();
      dispatch_sync(v2, v4);

      swift_release();
      _Block_release(v4);
      return swift_release();
    }
  }
  return result;
}

void sub_1B1E78F70()
{
  uint64_t v0;

  sub_1B1E746D8(v0);
}

uint64_t sub_1B1E78F78()
{
  return swift_deallocObject();
}

uint64_t sub_1B1E78F88(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  char v4;
  _QWORD v5[6];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 304) == 1)
    {
      *(_BYTE *)(v1 + 304) = 0;
      sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
      swift_retain();
      v2 = sub_1B2228F44();
      v5[4] = sub_1B1E70D94;
      v5[5] = 0;
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 1107296256;
      v5[2] = sub_1B1CDBFCC;
      v5[3] = &unk_1E63F2BF0;
      v3 = _Block_copy(v5);
      swift_release();
      dispatch_sync(v2, v3);

      _Block_release(v3);
    }
    else
    {
      swift_retain();
    }
    v4 = byte_1EEFD5351;
    if (byte_1EEFD5351 == 1)
    {
      byte_1EEFD5351 = 0;
      byte_1EEFD5350 = v4;
    }
    return swift_release();
  }
  return result;
}

void sub_1B1E79094(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  id v6;

  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v2)
    {
      if (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_canUseImGUI) == 1)
      {
        swift_retain();
        swift_retain();
        v6 = (id)sub_1B2062324(a1);
        swift_release();
        if (v6)
        {
          v3 = sub_1B2229454();
          sub_1B1BA77BC(v3, v4, v6);
          swift_bridgeObjectRelease();
          if (sub_1B1BA7B7C(0) && *(_QWORD *)(v2 + 368))
          {
            swift_getObjectType();
            v5 = *(_DWORD *)(v2 + 24) & 1;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            sub_1B20BFC40(0, v5);
            swift_release();

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();

          }
        }
        else
        {
          swift_release();
        }
      }
    }
  }
}

uint64_t sub_1B1E79224()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1E79248()
{
  uint64_t v0;

  return sub_1B1E73FC4(v0);
}

uint64_t sub_1B1E79250()
{
  return sub_1B1E740B8();
}

uint64_t sub_1B1E79258()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1B1E7927C(void *a1)
{
  sub_1B1BA2EEC(a1);
}

uint64_t sub_1B1E79284()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E792A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

unint64_t sub_1B1E792CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B7290;
  if (!qword_1ED4B7290)
  {
    v1 = sub_1B222847C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B7290);
  }
  return result;
}

uint64_t sub_1B1E79314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, qword_1ED4B88F0, (uint64_t (*)(uint64_t))type metadata accessor for EntityManager, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1E79370(uint64_t a1)
{
  uint64_t v2;

  sub_1B1791524(0, qword_1ED4B88F0, (uint64_t (*)(uint64_t))type metadata accessor for EntityManager, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1B1E793FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t updated;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _OWORD v89[2];
  uint64_t v90;
  uint64_t v91[8];
  _OWORD v92[2];
  uint64_t v93;
  uint64_t v94[8];
  _OWORD v95[2];
  uint64_t v96;
  uint64_t v97[8];
  _OWORD v98[2];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _OWORD v118[2];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  _OWORD v128[2];
  uint64_t v129;
  _OWORD v130[2];
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  _OWORD v134[2];
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _BYTE v140[40];
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  _BYTE v147[40];
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  _BYTE v154[40];
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v155 = qword_1ED4D09F8;
  v156 = 0;
  v157 = 2;
  v158 = 0;
  v159 = 2;
  v160 = 0;
  swift_retain();
  sub_1B1E3E1C0(2, (uint64_t)v89);
  swift_release();
  v138[0] = v89[0];
  v138[1] = v89[1];
  v139 = v90;
  sub_1B1E8FCE4(a1, (uint64_t)v138, 0x200000000, v91);
  sub_1B19F66A0((uint64_t)v91, (uint64_t)v118, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v118[0])
  {
    v125 = v118[0];
    v126 = v118[1];
    v127 = v119;
    if (v124 >= 1)
    {
      v68 = v121;
      if (v121)
      {
        v4 = v123;
        v62 = v120;
        v5 = v123[4];
        v6 = *(unsigned __int8 *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        inited = type metadata accessor for ParticleInitScript(0);
        v86 = v4;
        v53 = v4 + 8;
        v56 = (uint64_t)(v4 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        v59 = v6;
        v65 = v5;
        do
        {
          v8 = (unsigned int *)(v62 + 48 * v7);
          v74 = *v8;
          v71 = v8[1];
          v9 = *((_QWORD *)v8 + 4);
          v80 = *((_QWORD *)v8 + 3);
          v83 = (uint64_t *)*((_QWORD *)v8 + 2);
          v10 = *((_QWORD *)v8 + 5);
          if (v6)
          {
            v11 = *(os_unfair_lock_s **)(v10 + 376);
            swift_retain();
            os_unfair_lock_lock(v11);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v5);
          sub_1B19F66A0(v56, (uint64_t)v154, &qword_1ED4B7FB0);
          v12 = v86[4];
          v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v86[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
          v86[7] = v13;
          v53[1] = 0;
          v53[2] = 0;
          *v53 = 0;
          swift_release();
          v14 = sub_1B1A12038(inited, (uint64_t)&off_1E6394B78, v83, v80, v9, (uint64_t)v86);
          v15 = v14;
          if (v83)
          {
            v6 = v59;
            if (v9)
            {
              v16 = *(_QWORD *)(*(_QWORD *)(inited - 8) + 72);
              do
              {
                sub_1B1E7A334(v15, a1, a2);
                v15 += v16;
                --v9;
              }
              while (v9);
            }
          }
          else
          {
            v6 = v59;
            if ((_DWORD)v74 != (_DWORD)v71)
            {
              v17 = *(_QWORD *)(*(_QWORD *)(inited - 8) + 72);
              v18 = v71 - v74;
              v19 = v14 + v17 * v74;
              do
              {
                sub_1B1E7A334(v19, a1, a2);
                v19 += v17;
                --v18;
              }
              while (v18);
            }
          }
          v128[0] = v125;
          v128[1] = v126;
          v129 = v127;
          sub_1B1F05D48(v86, (unsigned __int16 **)v128, (uint64_t)v154);
          sub_1B1F03804((char *)v10);
          v5 = v65;
          ecs_stack_allocator_pop_snapshot(v65);
          if ((v6 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
          }
          swift_release();
          ++v7;
        }
        while (v7 != v68);
        sub_1B19ED748(v91);
      }
    }
    sub_1B19ED748(v91);
  }
  v148 = qword_1ED4D09F8;
  v149 = 0;
  v150 = 2;
  v151 = 0;
  v152 = 2;
  v153 = 0;
  swift_retain();
  sub_1B1E3E16C(2, (uint64_t)v92);
  swift_release();
  v136[0] = v92[0];
  v136[1] = v92[1];
  v137 = v93;
  sub_1B1E8FCE4(a1, (uint64_t)v136, 0x200000000, v94);
  sub_1B19F66A0((uint64_t)v94, (uint64_t)v108, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v108[0])
  {
    v115 = v108[0];
    v116 = v108[1];
    v117 = v109;
    if (v114 >= 1)
    {
      v69 = v111;
      if (v111)
      {
        v20 = v113;
        v66 = v110;
        v21 = v113[4];
        v22 = *(unsigned __int8 *)(v112 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        updated = type metadata accessor for ParticleUpdateScript(0);
        v87 = v20;
        v60 = v20 + 8;
        v63 = (uint64_t)(v20 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v23 = 0;
        v54 = v22;
        v57 = v21;
        do
        {
          v24 = (unsigned int *)(v66 + 48 * v23);
          v75 = *v24;
          v72 = v24[1];
          v25 = *((_QWORD *)v24 + 4);
          v81 = *((_QWORD *)v24 + 3);
          v84 = (uint64_t *)*((_QWORD *)v24 + 2);
          v26 = *((_QWORD *)v24 + 5);
          if (v22)
          {
            v27 = *(os_unfair_lock_s **)(v26 + 376);
            swift_retain();
            os_unfair_lock_lock(v27);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v21);
          sub_1B19F66A0(v63, (uint64_t)v147, &qword_1ED4B7FB0);
          v28 = v87[4];
          v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v87[6] = ecs_stack_allocator_allocate(v28, 48 * v29, 8);
          v87[7] = v29;
          v60[1] = 0;
          v60[2] = 0;
          *v60 = 0;
          swift_release();
          v30 = sub_1B1A12038(updated, (uint64_t)&off_1E639E488, v84, v81, v25, (uint64_t)v87);
          v31 = v30;
          if (v84)
          {
            v22 = v54;
            if (v25)
            {
              v32 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 72);
              do
              {
                sub_1B1E7A334(v31, a1, a2);
                v31 += v32;
                --v25;
              }
              while (v25);
            }
          }
          else
          {
            v22 = v54;
            if ((_DWORD)v75 != (_DWORD)v72)
            {
              v33 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 72);
              v34 = v72 - v75;
              v35 = v30 + v33 * v75;
              do
              {
                sub_1B1E7A334(v35, a1, a2);
                v35 += v33;
                --v34;
              }
              while (v34);
            }
          }
          v130[0] = v115;
          v130[1] = v116;
          v131 = v117;
          sub_1B1F05D48(v87, (unsigned __int16 **)v130, (uint64_t)v147);
          sub_1B1F03804((char *)v26);
          v21 = v57;
          ecs_stack_allocator_pop_snapshot(v57);
          if ((v22 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
          }
          swift_release();
          ++v23;
        }
        while (v23 != v69);
        sub_1B19ED748(v94);
      }
    }
    sub_1B19ED748(v94);
  }
  v141 = qword_1ED4D09F8;
  v142 = 0;
  v143 = 2;
  v144 = 0;
  v145 = 2;
  v146 = 0;
  swift_retain();
  sub_1B1E3C5B8(2, (uint64_t)v95);
  swift_release();
  v134[0] = v95[0];
  v134[1] = v95[1];
  v135 = v96;
  sub_1B1E8FCE4(a1, (uint64_t)v134, 0x200000000, v97);
  sub_1B19F66A0((uint64_t)v97, (uint64_t)v98, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v98[0])
  {
    v105 = v98[0];
    v106 = v98[1];
    v107 = v99;
    if (v104 > 0 && (v70 = v101) != 0)
    {
      v36 = v103;
      v64 = v100;
      v37 = v103[4];
      v38 = *(_BYTE *)(v102 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v79 = type metadata accessor for GraphScript(0);
      v88 = v36;
      v55 = v36 + 8;
      v58 = (uint64_t)(v36 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      v39 = 0;
      v61 = v38;
      v67 = v37;
      do
      {
        v40 = (unsigned int *)(v64 + 48 * v39);
        v42 = *((_QWORD *)v40 + 4);
        v41 = *((_QWORD *)v40 + 5);
        v73 = v40[1];
        v76 = *v40;
        v82 = *((_QWORD *)v40 + 3);
        v85 = (uint64_t *)*((_QWORD *)v40 + 2);
        if ((v38 & 1) != 0)
        {
          v43 = *(os_unfair_lock_s **)(v41 + 376);
          swift_retain();
          os_unfair_lock_lock(v43);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v41 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v37);
        sub_1B19F66A0(v58, (uint64_t)v140, &qword_1ED4B7FB0);
        v44 = v88[4];
        v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v88[6] = ecs_stack_allocator_allocate(v44, 48 * v45, 8);
        v88[7] = v45;
        v55[1] = 0;
        v55[2] = 0;
        *v55 = 0;
        swift_release();
        v46 = sub_1B1A12038(v79, (uint64_t)&off_1E6370AB0, v85, v82, v42, (uint64_t)v88);
        v47 = (int *)v46;
        if (v85)
        {
          if (v42)
          {
            v48 = *(_QWORD *)(*(_QWORD *)(v79 - 8) + 72);
            do
            {
              sub_1B1E7AB8C(v47, a1, a2);
              v47 = (int *)((char *)v47 + v48);
              --v42;
            }
            while (v42);
          }
        }
        else if ((_DWORD)v76 != (_DWORD)v73)
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v79 - 8) + 72);
          v50 = v73 - v76;
          v51 = (int *)(v46 + v49 * v76);
          do
          {
            sub_1B1E7AB8C(v51, a1, a2);
            v51 = (int *)((char *)v51 + v49);
            --v50;
          }
          while (v50);
        }
        v132[0] = v105;
        v132[1] = v106;
        v133 = v107;
        sub_1B1F05D48(v88, (unsigned __int16 **)v132, (uint64_t)v140);
        sub_1B1F03804((char *)v41);
        v37 = v67;
        ecs_stack_allocator_pop_snapshot(v67);
        v38 = v61;
        if ((v61 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v41 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v41 + 376));
        }
        swift_release();
        ++v39;
      }
      while (v39 != v70);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
    }
    sub_1B19ED720((uint64_t)v95);
    sub_1B19ED720((uint64_t)v92);
    sub_1B19ED720((uint64_t)v89);
    sub_1B19ED748(v97);
    return sub_1B19ED748(v97);
  }
  else
  {
    sub_1B19ED720((uint64_t)v95);
    sub_1B19ED720((uint64_t)v92);
    return (uint64_t *)sub_1B19ED720((uint64_t)v89);
  }
}

uint64_t *sub_1B1E79F34(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36[8];
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  _BYTE v51[40];
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v52 = qword_1ED4D09F8;
  v53 = 0;
  v54 = 2;
  v55 = 0;
  v56 = 2;
  v57 = 0;
  swift_retain();
  sub_1B1E3E214(2, (uint64_t)v34);
  swift_release();
  v49[0] = v34[0];
  v49[1] = v34[1];
  v50 = v35;
  sub_1B1E8FCE4(a1, (uint64_t)v49, 0x200000000, v36);
  sub_1B19F66A0((uint64_t)v36, (uint64_t)v37, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v37[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v34);
  v44 = v37[0];
  v45 = v37[1];
  v46 = v38;
  if (v43 > 0 && (v27 = v40) != 0)
  {
    v25 = v39;
    v4 = v42;
    v5 = v42[4];
    v6 = *(unsigned __int8 *)(v41 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    sub_1B1D34244(0);
    v30 = v7;
    v33 = v4;
    v22 = v4 + 8;
    v23 = (uint64_t)(v4 + 6);
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = 0;
    v24 = v6;
    v26 = v5;
    do
    {
      v9 = (unsigned int *)(v25 + 48 * v8);
      v11 = *((_QWORD *)v9 + 4);
      v10 = *((_QWORD *)v9 + 5);
      v28 = v9[1];
      v29 = *v9;
      v31 = *((_QWORD *)v9 + 3);
      v32 = (uint64_t *)*((_QWORD *)v9 + 2);
      if (v6)
      {
        v12 = *(os_unfair_lock_s **)(v10 + 376);
        swift_retain();
        os_unfair_lock_lock(v12);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v5);
      sub_1B19F66A0(v23, (uint64_t)v51, &qword_1ED4B7FB0);
      v13 = v33[4];
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v33[6] = ecs_stack_allocator_allocate(v13, 48 * v14, 8);
      v33[7] = v14;
      v22[1] = 0;
      v22[2] = 0;
      *v22 = 0;
      swift_release();
      v15 = sub_1B1A12038(v30, (uint64_t)&off_1E637D0A8, v32, v31, v11, (uint64_t)v33);
      v16 = v15;
      if (v32)
      {
        if (v11)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72);
          do
          {
            sub_1B1E7B454(v16, a1, a2);
            v16 += v17;
            --v11;
          }
          while (v11);
        }
      }
      else if ((_DWORD)v29 != (_DWORD)v28)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72);
        v19 = v28 - v29;
        v20 = v15 + v18 * v29;
        do
        {
          sub_1B1E7B454(v20, a1, a2);
          v20 += v18;
          --v19;
        }
        while (v19);
      }
      v47[0] = v44;
      v47[1] = v45;
      v48 = v46;
      sub_1B1F05D48(v33, (unsigned __int16 **)v47, (uint64_t)v51);
      sub_1B1F03804((char *)v10);
      v5 = v26;
      ecs_stack_allocator_pop_snapshot(v26);
      v6 = v24;
      if ((v24 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
      }
      swift_release();
      ++v8;
    }
    while (v8 != v27);
    sub_1B19ED720((uint64_t)v34);
    sub_1B19ED748(v36);
  }
  else
  {
    sub_1B19ED720((uint64_t)v34);
  }
  return sub_1B19ED748(v36);
}

unint64_t sub_1B1E7A334(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  unint64_t *v63;
  uint64_t (*v64)(void);
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  __int16 v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = *(_QWORD **)(result + 32);
  v83 = v3[2];
  if (!v83)
    return result;
  v5 = result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1B1FFED40(v3);
  result = type metadata accessor for BundleInfo();
  v6 = 0;
  v82 = *(int *)(result + 24);
  v70 = (uint64_t *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v71 = a3;
  v79 = v5;
  while (1)
  {
    v10 = *(_QWORD *)(a3 + v82);
    *(_QWORD *)(v5 + 32) = v3;
    v11 = &v3[4 * v6];
    v14 = v11[4];
    v13 = v11 + 4;
    v12 = v14;
    v15 = v14 >> 60;
    if (v14 >> 60 == 9)
      break;
    if ((_DWORD)v15 != 3)
      goto LABEL_8;
    v17 = *(_DWORD *)(v12 + 16);
    v16 = *(_DWORD *)(v12 + 20);
    v18 = *(_QWORD *)(v12 + 32);
    v19 = *(_QWORD *)(v12 + 40);
    v73 = *(_QWORD *)(v12 + 24);
    v74 = *(_QWORD *)(v12 + 48);
    v80 = *(_QWORD *)(v12 + 56);
    v75 = *(_BYTE *)(v12 + 64);
    v77 = *(_WORD *)(v12 + 66);
    if (v10 >= 2026)
    {
      v7 = *(_DWORD *)(v12 + 20);
      swift_retain();
      sub_1B1B1DD24(v12);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    if (v17 == -1 && v16 == 0)
      goto LABEL_69;
    if (v17 < 0 || v70[1] <= v17)
      goto LABEL_50;
    v21 = *v70;
    v22 = *v70 + 12 * v17;
    if (v16 != -1 && *(_DWORD *)(v22 + 8) != v16)
      goto LABEL_50;
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v21 + 12 * v17) + 32);
    v25 = *(_QWORD *)(v24 + 48);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v27 = *(__int16 *)(v22 + 4);
      v28 = (_QWORD *)(v25 + 56);
      while ((ValueMetadata *)*(v28 - 3) != &type metadata for EmitterShape)
      {
        v28 += 5;
        if (!--v26)
          goto LABEL_27;
      }
      v60 = *(_QWORD *)(v24 + 128) + *v28 + 224 * v27;
      if (*(_BYTE *)(v60 + 4) == 1 && !*(_DWORD *)v60)
      {
LABEL_69:
        v7 = v16;
        swift_retain();
        sub_1B1B1DD24(v12);
        swift_bridgeObjectRetain();
        a3 = v71;
        goto LABEL_6;
      }
      goto LABEL_66;
    }
LABEL_27:
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v21 + 12 * v17 + 6) + 32) + 16);
    v30 = *(_QWORD *)(v29 + 128);
    if (!*(_QWORD *)(v30 + 16)
      || (v66 = *(_DWORD *)(v12 + 20),
          v31 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticlePlaneCollider),
          v16 = v66,
          (v32 & 1) == 0)
      || *(ValueMetadata **)(*(_QWORD *)(v29 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 32) != &type metadata for ParticlePlaneCollider)
    {
LABEL_50:
      if (v17 < 0
        || v70[1] <= v17
        || (v33 = *v70, v16 != -1) && *(_DWORD *)(v33 + 12 * v17 + 8) != v16
        || (v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v33 + 12 * v17 + 6) + 32) + 16),
            v35 = *(_QWORD *)(v34 + 128),
            !*(_QWORD *)(v35 + 16))
        || (v67 = v16, v36 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleSphereCollider),
                       v16 = v67,
                       (v37 & 1) == 0)
        || *(ValueMetadata **)(*(_QWORD *)(v34 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36) + 32) != &type metadata for ParticleSphereCollider)
      {
        if (v17 < 0
          || v70[1] <= v17
          || (v38 = *v70, v16 != -1) && *(_DWORD *)(v38 + 12 * v17 + 8) != v16
          || (v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v38 + 12 * v17 + 6) + 32) + 16),
              v40 = *(_QWORD *)(v39 + 128),
              !*(_QWORD *)(v40 + 16))
          || (v68 = v16, v41 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleBoxCollider), v16 = v68, (v42 & 1) == 0)
          || *(ValueMetadata **)(*(_QWORD *)(v39 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v41) + 32) != &type metadata for ParticleBoxCollider)
        {
          if (v17 < 0)
            goto LABEL_69;
          if (v70[1] <= v17)
            goto LABEL_69;
          v43 = *v70;
          if (v16 != -1 && *(_DWORD *)(v43 + 12 * v17 + 8) != v16)
            goto LABEL_69;
          v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v43 + 12 * v17 + 6) + 32) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16))
            goto LABEL_69;
          v46 = v16;
          v47 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleCylinderCollider);
          v16 = v46;
          if ((v48 & 1) == 0
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v47) + 32) != &type metadata for ParticleCylinderCollider)
          {
            goto LABEL_69;
          }
        }
      }
    }
LABEL_66:
    v7 = v16;
    swift_retain();
    sub_1B1B1DD24(v12);
    swift_bridgeObjectRetain();
    sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (!result)
      goto LABEL_77;
    a3 = v71;
    if (swift_dynamicCastMetatype())
    {
      KeyPath = swift_getKeyPath();
      swift_release();
      swift_bridgeObjectRelease();
      v80 = 0;
      v77 = 128;
      v75 = 1;
      v73 = 0x6C616353666C6168;
      v18 = 0xE900000000000065;
      v19 = KeyPath;
      v74 = MEMORY[0x1E0DEB188];
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        v62 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v63 = &qword_1ED4BB080;
        v64 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
LABEL_74:
        sub_1B1A19D70(0, v63, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v64);
        v80 = 0;
        v77 = 128;
        v75 = 1;
        v73 = 0x6C616353666C6168;
        v74 = v65;
        v18 = 0xE900000000000065;
        v19 = v62;
        goto LABEL_6;
      }
      if (swift_dynamicCastMetatype())
      {
        v62 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v63 = (unint64_t *)&qword_1ED4BB0A0;
        v64 = MEMORY[0x1E0DEDD50];
        goto LABEL_74;
      }
    }
LABEL_6:
    v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = v17;
    *(_DWORD *)(v8 + 20) = v7;
    *(_QWORD *)(v8 + 24) = v73;
    *(_QWORD *)(v8 + 32) = v18;
    *(_QWORD *)(v8 + 40) = v19;
    *(_QWORD *)(v8 + 48) = v74;
    *(_QWORD *)(v8 + 56) = v80;
    *(_BYTE *)(v8 + 64) = v75;
    v9 = 0x3000000000000000;
    *(_WORD *)(v8 + 66) = v77;
LABEL_7:
    sub_1B1A05610(v12);
    result = sub_1B1A05610(v12);
    *v13 = v9 | v8;
    v13[2] = 0;
    *((_BYTE *)v13 + 24) = 1;
    v5 = v79;
LABEL_8:
    ++v6;
    v3 = *(_QWORD **)(v5 + 32);
    if (v6 == v83)
      return result;
  }
  v49 = *(_QWORD *)(v12 + 24);
  v76 = *(_QWORD *)(v12 + 16);
  v50 = *(_QWORD *)(v12 + 32);
  v51 = *(_QWORD *)(v12 + 40);
  v81 = *(_QWORD *)(v12 + 48);
  v52 = *(_BYTE *)(v12 + 56);
  v53 = *(_WORD *)(v12 + 58);
  v78 = *(_BYTE *)(v12 + 60);
  v72 = v13;
  if (v10 >= 2026)
  {
    sub_1B1B1DD24(v12);
    swift_bridgeObjectRetain();
    swift_retain();
    v55 = v76;
    goto LABEL_62;
  }
  sub_1B1B1DD24(v12);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_dynamicCastMetatype())
    {
      v54 = swift_getKeyPath();
      swift_release();
      swift_bridgeObjectRelease();
      v81 = 0;
      v53 = 128;
      v52 = 1;
      v55 = 0x6C616353666C6168;
      v49 = 0xE900000000000065;
      v50 = v54;
      v51 = MEMORY[0x1E0DEB188];
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        v56 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v57 = &qword_1ED4BB080;
        v58 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
      }
      else
      {
        if (!swift_dynamicCastMetatype())
        {
          v55 = v76;
          goto LABEL_62;
        }
        v56 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v57 = (unint64_t *)&qword_1ED4BB0A0;
        v58 = MEMORY[0x1E0DEDD50];
      }
      sub_1B1A19D70(0, v57, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v58);
      v51 = v59;
      v81 = 0;
      v53 = 128;
      v52 = 1;
      v55 = 0x6C616353666C6168;
      v49 = 0xE900000000000065;
      v50 = v56;
    }
LABEL_62:
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v55;
    *(_QWORD *)(v8 + 24) = v49;
    *(_QWORD *)(v8 + 32) = v50;
    *(_QWORD *)(v8 + 40) = v51;
    *(_QWORD *)(v8 + 48) = v81;
    *(_BYTE *)(v8 + 56) = v52;
    *(_WORD *)(v8 + 58) = v53;
    v9 = 0x9000000000000000;
    *(_BYTE *)(v8 + 60) = v78;
    a3 = v71;
    v13 = v72;
    goto LABEL_7;
  }
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

int *sub_1B1E7AB8C(int *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  unint64_t *v63;
  uint64_t (*v64)(void);
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  __int16 v77;
  char v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = *(_QWORD **)result;
  v83 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v83)
    return result;
  v5 = result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1B1FFED40(v3);
  result = (int *)type metadata accessor for BundleInfo();
  v6 = 0;
  v82 = result[6];
  v70 = (uint64_t *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v71 = a3;
  v79 = v5;
  while (1)
  {
    v10 = *(_QWORD *)(a3 + v82);
    *(_QWORD *)v5 = v3;
    v11 = &v3[4 * v6];
    v14 = v11[4];
    v13 = v11 + 4;
    v12 = v14;
    v15 = v14 >> 60;
    if (v14 >> 60 == 9)
      break;
    if ((_DWORD)v15 != 3)
      goto LABEL_8;
    v17 = *(_DWORD *)(v12 + 16);
    v16 = *(_DWORD *)(v12 + 20);
    v18 = *(_QWORD *)(v12 + 32);
    v19 = *(_QWORD *)(v12 + 40);
    v73 = *(_QWORD *)(v12 + 24);
    v74 = *(_QWORD *)(v12 + 48);
    v80 = *(_QWORD *)(v12 + 56);
    v75 = *(_BYTE *)(v12 + 64);
    v77 = *(_WORD *)(v12 + 66);
    if (v10 >= 2026)
    {
      v7 = *(_DWORD *)(v12 + 20);
      swift_retain();
      sub_1B1B1DD24(v12);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    if (v17 == -1 && v16 == 0)
      goto LABEL_69;
    if (v17 < 0 || v70[1] <= v17)
      goto LABEL_50;
    v21 = *v70;
    v22 = *v70 + 12 * v17;
    if (v16 != -1 && *(_DWORD *)(v22 + 8) != v16)
      goto LABEL_50;
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v21 + 12 * v17) + 32);
    v25 = *(_QWORD *)(v24 + 48);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v27 = *(__int16 *)(v22 + 4);
      v28 = (_QWORD *)(v25 + 56);
      while ((ValueMetadata *)*(v28 - 3) != &type metadata for EmitterShape)
      {
        v28 += 5;
        if (!--v26)
          goto LABEL_27;
      }
      v60 = *(_QWORD *)(v24 + 128) + *v28 + 224 * v27;
      if (*(_BYTE *)(v60 + 4) == 1 && !*(_DWORD *)v60)
      {
LABEL_69:
        v7 = v16;
        swift_retain();
        sub_1B1B1DD24(v12);
        swift_bridgeObjectRetain();
        a3 = v71;
        goto LABEL_6;
      }
      goto LABEL_66;
    }
LABEL_27:
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v21 + 12 * v17 + 6) + 32) + 16);
    v30 = *(_QWORD *)(v29 + 128);
    if (!*(_QWORD *)(v30 + 16)
      || (v66 = *(_DWORD *)(v12 + 20),
          v31 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticlePlaneCollider),
          v16 = v66,
          (v32 & 1) == 0)
      || *(ValueMetadata **)(*(_QWORD *)(v29 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 32) != &type metadata for ParticlePlaneCollider)
    {
LABEL_50:
      if (v17 < 0
        || v70[1] <= v17
        || (v33 = *v70, v16 != -1) && *(_DWORD *)(v33 + 12 * v17 + 8) != v16
        || (v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v33 + 12 * v17 + 6) + 32) + 16),
            v35 = *(_QWORD *)(v34 + 128),
            !*(_QWORD *)(v35 + 16))
        || (v67 = v16, v36 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleSphereCollider),
                       v16 = v67,
                       (v37 & 1) == 0)
        || *(ValueMetadata **)(*(_QWORD *)(v34 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36) + 32) != &type metadata for ParticleSphereCollider)
      {
        if (v17 < 0
          || v70[1] <= v17
          || (v38 = *v70, v16 != -1) && *(_DWORD *)(v38 + 12 * v17 + 8) != v16
          || (v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v38 + 12 * v17 + 6) + 32) + 16),
              v40 = *(_QWORD *)(v39 + 128),
              !*(_QWORD *)(v40 + 16))
          || (v68 = v16, v41 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleBoxCollider), v16 = v68, (v42 & 1) == 0)
          || *(ValueMetadata **)(*(_QWORD *)(v39 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v41) + 32) != &type metadata for ParticleBoxCollider)
        {
          if (v17 < 0)
            goto LABEL_69;
          if (v70[1] <= v17)
            goto LABEL_69;
          v43 = *v70;
          if (v16 != -1 && *(_DWORD *)(v43 + 12 * v17 + 8) != v16)
            goto LABEL_69;
          v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v43 + 12 * v17 + 6) + 32) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16))
            goto LABEL_69;
          v46 = v16;
          v47 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleCylinderCollider);
          v16 = v46;
          if ((v48 & 1) == 0
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v47) + 32) != &type metadata for ParticleCylinderCollider)
          {
            goto LABEL_69;
          }
        }
      }
    }
LABEL_66:
    v7 = v16;
    swift_retain();
    sub_1B1B1DD24(v12);
    swift_bridgeObjectRetain();
    sub_1B2229304();
    result = (int *)swift_conformsToProtocol2();
    if (!result)
      goto LABEL_77;
    a3 = v71;
    if (swift_dynamicCastMetatype())
    {
      KeyPath = swift_getKeyPath();
      swift_release();
      swift_bridgeObjectRelease();
      v80 = 0;
      v77 = 128;
      v75 = 1;
      v73 = 0x6C616353666C6168;
      v18 = 0xE900000000000065;
      v19 = KeyPath;
      v74 = MEMORY[0x1E0DEB188];
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        v62 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v63 = &qword_1ED4BB080;
        v64 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
LABEL_74:
        sub_1B1A19D70(0, v63, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v64);
        v80 = 0;
        v77 = 128;
        v75 = 1;
        v73 = 0x6C616353666C6168;
        v74 = v65;
        v18 = 0xE900000000000065;
        v19 = v62;
        goto LABEL_6;
      }
      if (swift_dynamicCastMetatype())
      {
        v62 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v63 = (unint64_t *)&qword_1ED4BB0A0;
        v64 = MEMORY[0x1E0DEDD50];
        goto LABEL_74;
      }
    }
LABEL_6:
    v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = v17;
    *(_DWORD *)(v8 + 20) = v7;
    *(_QWORD *)(v8 + 24) = v73;
    *(_QWORD *)(v8 + 32) = v18;
    *(_QWORD *)(v8 + 40) = v19;
    *(_QWORD *)(v8 + 48) = v74;
    *(_QWORD *)(v8 + 56) = v80;
    *(_BYTE *)(v8 + 64) = v75;
    v9 = 0x3000000000000000;
    *(_WORD *)(v8 + 66) = v77;
LABEL_7:
    sub_1B1A05610(v12);
    result = (int *)sub_1B1A05610(v12);
    *v13 = v9 | v8;
    v13[2] = 0;
    *((_BYTE *)v13 + 24) = 1;
    v5 = v79;
LABEL_8:
    ++v6;
    v3 = *(_QWORD **)v5;
    if (v6 == v83)
      return result;
  }
  v49 = *(_QWORD *)(v12 + 24);
  v76 = *(_QWORD *)(v12 + 16);
  v50 = *(_QWORD *)(v12 + 32);
  v51 = *(_QWORD *)(v12 + 40);
  v81 = *(_QWORD *)(v12 + 48);
  v52 = *(_BYTE *)(v12 + 56);
  v53 = *(_WORD *)(v12 + 58);
  v78 = *(_BYTE *)(v12 + 60);
  v72 = v13;
  if (v10 >= 2026)
  {
    sub_1B1B1DD24(v12);
    swift_bridgeObjectRetain();
    swift_retain();
    v55 = v76;
    goto LABEL_62;
  }
  sub_1B1B1DD24(v12);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2229304();
  result = (int *)swift_conformsToProtocol2();
  if (result)
  {
    if (swift_dynamicCastMetatype())
    {
      v54 = swift_getKeyPath();
      swift_release();
      swift_bridgeObjectRelease();
      v81 = 0;
      v53 = 128;
      v52 = 1;
      v55 = 0x6C616353666C6168;
      v49 = 0xE900000000000065;
      v50 = v54;
      v51 = MEMORY[0x1E0DEB188];
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        v56 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v57 = &qword_1ED4BB080;
        v58 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
      }
      else
      {
        if (!swift_dynamicCastMetatype())
        {
          v55 = v76;
          goto LABEL_62;
        }
        v56 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v57 = (unint64_t *)&qword_1ED4BB0A0;
        v58 = MEMORY[0x1E0DEDD50];
      }
      sub_1B1A19D70(0, v57, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v58);
      v51 = v59;
      v81 = 0;
      v53 = 128;
      v52 = 1;
      v55 = 0x6C616353666C6168;
      v49 = 0xE900000000000065;
      v50 = v56;
    }
LABEL_62:
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v55;
    *(_QWORD *)(v8 + 24) = v49;
    *(_QWORD *)(v8 + 32) = v50;
    *(_QWORD *)(v8 + 40) = v51;
    *(_QWORD *)(v8 + 48) = v81;
    *(_BYTE *)(v8 + 56) = v52;
    *(_WORD *)(v8 + 58) = v53;
    v9 = 0x9000000000000000;
    *(_BYTE *)(v8 + 60) = v78;
    a3 = v71;
    v13 = v72;
    goto LABEL_7;
  }
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

uint64_t sub_1B1E7B3E4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1E7B428()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1B1E7B454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t (*v65)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  __int16 v116;
  uint64_t KeyPath;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t (*v121)(void);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  uint64_t (*v127)(void);
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v133;
  int v134;
  int v135;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  __int16 v151;
  char v152;
  __int16 v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;

  sub_1B1D34244(0);
  v161 = (_QWORD *)(a1 + *(int *)(v4 + 60));
  v5 = *(_QWORD *)(*v161 + 16);
  if (!v5)
  {
LABEL_75:
    v67 = *(_QWORD *)(v161[1] + 16);
    if (!v67)
      return;
    v68 = 0;
    v156 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for BundleInfo() + 24));
    v138 = (uint64_t *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v140 = v67;
    while (1)
    {
      v72 = (_QWORD *)v161[1];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v161[1] = v72;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v72 = sub_1B1FFED40(v72);
        v161[1] = v72;
      }
      v74 = &v72[4 * v68];
      v77 = v74[4];
      v76 = v74 + 4;
      v75 = v77;
      v78 = v77 >> 60;
      if (v77 >> 60 == 9)
      {
        v112 = *(_QWORD *)(v75 + 24);
        v150 = *(_QWORD *)(v75 + 16);
        v113 = *(_QWORD *)(v75 + 32);
        v114 = *(_QWORD *)(v75 + 40);
        v160 = *(_QWORD *)(v75 + 48);
        v115 = *(_BYTE *)(v75 + 56);
        v116 = *(_WORD *)(v75 + 58);
        v154 = *(_BYTE *)(v75 + 60);
        v142 = v76;
        if (v156 >= 2026)
        {
          sub_1B1B1DD24(v75);
          swift_bridgeObjectRetain();
          swift_retain();
          v118 = v150;
        }
        else
        {
          sub_1B1B1DD24(v75);
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1B2229304();
          if (!swift_conformsToProtocol2())
            goto LABEL_151;
          if (swift_dynamicCastMetatype())
          {
            KeyPath = swift_getKeyPath();
            swift_release();
            swift_bridgeObjectRelease();
            v160 = 0;
            v116 = 128;
            v115 = 1;
            v118 = 0x6C616353666C6168;
            v112 = 0xE900000000000065;
            v113 = KeyPath;
            v114 = MEMORY[0x1E0DEB188];
          }
          else
          {
            if (swift_dynamicCastMetatype())
            {
              v119 = swift_getKeyPath();
              swift_release();
              swift_bridgeObjectRelease();
              v120 = &qword_1ED4BB080;
              v121 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
            }
            else
            {
              if (!swift_dynamicCastMetatype())
              {
                v118 = v150;
                goto LABEL_136;
              }
              v119 = swift_getKeyPath();
              swift_release();
              swift_bridgeObjectRelease();
              v120 = (unint64_t *)&qword_1ED4BB0A0;
              v121 = MEMORY[0x1E0DEDD50];
            }
            sub_1B1A19D70(0, v120, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v121);
            v114 = v122;
            v160 = 0;
            v116 = 128;
            v115 = 1;
            v118 = 0x6C616353666C6168;
            v112 = 0xE900000000000065;
            v113 = v119;
          }
        }
LABEL_136:
        v70 = swift_allocObject();
        *(_QWORD *)(v70 + 16) = v118;
        *(_QWORD *)(v70 + 24) = v112;
        *(_QWORD *)(v70 + 32) = v113;
        *(_QWORD *)(v70 + 40) = v114;
        *(_QWORD *)(v70 + 48) = v160;
        *(_BYTE *)(v70 + 56) = v115;
        *(_WORD *)(v70 + 58) = v116;
        v71 = 0x9000000000000000;
        *(_BYTE *)(v70 + 60) = v154;
        v67 = v140;
        v76 = v142;
        goto LABEL_79;
      }
      if ((_DWORD)v78 != 3)
        goto LABEL_80;
      v80 = *(_DWORD *)(v75 + 16);
      v79 = *(_DWORD *)(v75 + 20);
      v81 = *(_QWORD *)(v75 + 32);
      v82 = *(_QWORD *)(v75 + 40);
      v144 = *(_QWORD *)(v75 + 24);
      v146 = *(_QWORD *)(v75 + 48);
      v159 = *(_QWORD *)(v75 + 56);
      v149 = *(_BYTE *)(v75 + 64);
      v153 = *(_WORD *)(v75 + 66);
      if (v156 >= 2026)
      {
        v69 = *(_DWORD *)(v75 + 20);
        swift_retain();
        sub_1B1B1DD24(v75);
        swift_bridgeObjectRetain();
        goto LABEL_78;
      }
      if (v80 == -1 && v79 == 0)
        goto LABEL_143;
      if (v80 < 0 || v138[1] <= v80)
        goto LABEL_124;
      v84 = *v138;
      v85 = *v138 + 12 * v80;
      if (v79 != -1 && *(_DWORD *)(v85 + 8) != v79)
        goto LABEL_124;
      v87 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v84 + 12 * v80) + 32);
      v88 = *(_QWORD *)(v87 + 48);
      v89 = *(_QWORD *)(v88 + 16);
      if (v89)
      {
        v90 = *(__int16 *)(v85 + 4);
        v91 = (_QWORD *)(v88 + 56);
        while ((ValueMetadata *)*(v91 - 3) != &type metadata for EmitterShape)
        {
          v91 += 5;
          if (!--v89)
            goto LABEL_101;
        }
        v123 = *(_QWORD *)(v87 + 128) + *v91 + 224 * v90;
        if (*(_BYTE *)(v123 + 4) == 1 && !*(_DWORD *)v123)
        {
LABEL_143:
          v69 = v79;
          swift_retain();
          sub_1B1B1DD24(v75);
          swift_bridgeObjectRetain();
          v67 = v140;
          goto LABEL_78;
        }
        goto LABEL_140;
      }
LABEL_101:
      v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v84 + 12 * v80 + 6) + 32) + 16);
      v93 = *(_QWORD *)(v92 + 128);
      if (!*(_QWORD *)(v93 + 16)
        || (v133 = *(_DWORD *)(v75 + 20),
            v94 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticlePlaneCollider),
            v79 = v133,
            (v95 & 1) == 0)
        || *(ValueMetadata **)(*(_QWORD *)(v92 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v93 + 56) + 8 * v94) + 32) != &type metadata for ParticlePlaneCollider)
      {
LABEL_124:
        if (v80 < 0
          || v138[1] <= v80
          || (v96 = *v138, v79 != -1) && *(_DWORD *)(v96 + 12 * v80 + 8) != v79
          || (v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v96 + 12 * v80 + 6) + 32) + 16),
              v98 = *(_QWORD *)(v97 + 128),
              !*(_QWORD *)(v98 + 16))
          || (v134 = v79,
              v99 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleSphereCollider),
              v79 = v134,
              (v100 & 1) == 0)
          || *(ValueMetadata **)(*(_QWORD *)(v97 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v98 + 56) + 8 * v99) + 32) != &type metadata for ParticleSphereCollider)
        {
          if (v80 < 0
            || v138[1] <= v80
            || (v101 = *v138, v79 != -1) && *(_DWORD *)(v101 + 12 * v80 + 8) != v79
            || (v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v101 + 12 * v80 + 6) + 32)
                                 + 16),
                v103 = *(_QWORD *)(v102 + 128),
                !*(_QWORD *)(v103 + 16))
            || (v135 = v79,
                v104 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleBoxCollider),
                v79 = v135,
                (v105 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v102 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v103 + 56) + 8 * v104) + 32) != &type metadata for ParticleBoxCollider)
          {
            if (v80 < 0)
              goto LABEL_143;
            if (v138[1] <= v80)
              goto LABEL_143;
            v106 = *v138;
            if (v79 != -1 && *(_DWORD *)(v106 + 12 * v80 + 8) != v79)
              goto LABEL_143;
            v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v106 + 12 * v80 + 6) + 32) + 16);
            v108 = *(_QWORD *)(v107 + 128);
            if (!*(_QWORD *)(v108 + 16))
              goto LABEL_143;
            v109 = v79;
            v110 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleCylinderCollider);
            v79 = v109;
            if ((v111 & 1) == 0
              || *(ValueMetadata **)(*(_QWORD *)(v107 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v108 + 56) + 8 * v110) + 32) != &type metadata for ParticleCylinderCollider)
            {
              goto LABEL_143;
            }
          }
        }
      }
LABEL_140:
      v69 = v79;
      swift_retain();
      sub_1B1B1DD24(v75);
      swift_bridgeObjectRetain();
      sub_1B2229304();
      if (!swift_conformsToProtocol2())
        goto LABEL_153;
      v67 = v140;
      if (swift_dynamicCastMetatype())
      {
        v124 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v159 = 0;
        v153 = 128;
        v149 = 1;
        v144 = 0x6C616353666C6168;
        v81 = 0xE900000000000065;
        v82 = v124;
        v146 = MEMORY[0x1E0DEB188];
      }
      else
      {
        if (swift_dynamicCastMetatype())
        {
          v125 = swift_getKeyPath();
          swift_release();
          swift_bridgeObjectRelease();
          v126 = &qword_1ED4BB080;
          v127 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
LABEL_148:
          sub_1B1A19D70(0, v126, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v127);
          v146 = v128;
          v159 = 0;
          v153 = 128;
          v149 = 1;
          v144 = 0x6C616353666C6168;
          v81 = 0xE900000000000065;
          v82 = v125;
          goto LABEL_78;
        }
        if (swift_dynamicCastMetatype())
        {
          v125 = swift_getKeyPath();
          swift_release();
          swift_bridgeObjectRelease();
          v126 = (unint64_t *)&qword_1ED4BB0A0;
          v127 = MEMORY[0x1E0DEDD50];
          goto LABEL_148;
        }
      }
LABEL_78:
      v70 = swift_allocObject();
      *(_DWORD *)(v70 + 16) = v80;
      *(_DWORD *)(v70 + 20) = v69;
      *(_QWORD *)(v70 + 24) = v144;
      *(_QWORD *)(v70 + 32) = v81;
      *(_QWORD *)(v70 + 40) = v82;
      *(_QWORD *)(v70 + 48) = v146;
      *(_QWORD *)(v70 + 56) = v159;
      *(_BYTE *)(v70 + 64) = v149;
      v71 = 0x3000000000000000;
      *(_WORD *)(v70 + 66) = v153;
LABEL_79:
      sub_1B1A05610(v75);
      sub_1B1A05610(v75);
      *v76 = v71 | v70;
      v76[2] = 0;
      *((_BYTE *)v76 + 24) = 1;
LABEL_80:
      if (++v68 == v67)
        return;
    }
  }
  v6 = 0;
  v155 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for BundleInfo() + 24));
  v137 = (uint64_t *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v139 = v5;
  while (1)
  {
    v10 = (_QWORD *)*v161;
    v11 = swift_isUniquelyReferenced_nonNull_native();
    *v161 = v10;
    if ((v11 & 1) == 0)
    {
      v10 = sub_1B1FFED40(v10);
      *v161 = v10;
    }
    v12 = &v10[4 * v6];
    v15 = v12[4];
    v13 = v12 + 4;
    v14 = v15;
    v16 = v15 >> 60;
    if (v15 >> 60 == 9)
      break;
    if ((_DWORD)v16 != 3)
      goto LABEL_6;
    v18 = *(_DWORD *)(v14 + 16);
    v17 = *(_DWORD *)(v14 + 20);
    v19 = *(_QWORD *)(v14 + 32);
    v20 = *(_QWORD *)(v14 + 40);
    v143 = *(_QWORD *)(v14 + 24);
    v145 = *(_QWORD *)(v14 + 48);
    v157 = *(_QWORD *)(v14 + 56);
    v147 = *(_BYTE *)(v14 + 64);
    v151 = *(_WORD *)(v14 + 66);
    if (v155 >= 2026)
    {
      v7 = *(_DWORD *)(v14 + 20);
      swift_retain();
      sub_1B1B1DD24(v14);
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }
    if (v18 == -1 && v17 == 0)
      goto LABEL_69;
    if (v18 < 0 || v137[1] <= v18)
      goto LABEL_50;
    v22 = *v137;
    v23 = *v137 + 12 * v18;
    if (v17 != -1 && *(_DWORD *)(v23 + 8) != v17)
      goto LABEL_50;
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v22 + 12 * v18) + 32);
    v26 = *(_QWORD *)(v25 + 48);
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(__int16 *)(v23 + 4);
      v29 = (_QWORD *)(v26 + 56);
      while ((ValueMetadata *)*(v29 - 3) != &type metadata for EmitterShape)
      {
        v29 += 5;
        if (!--v27)
          goto LABEL_27;
      }
      v61 = *(_QWORD *)(v25 + 128) + *v29 + 224 * v28;
      if (*(_BYTE *)(v61 + 4) == 1 && !*(_DWORD *)v61)
      {
LABEL_69:
        v7 = v17;
        swift_retain();
        sub_1B1B1DD24(v14);
        swift_bridgeObjectRetain();
        v5 = v139;
        goto LABEL_4;
      }
      goto LABEL_66;
    }
LABEL_27:
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v22 + 12 * v18 + 6) + 32) + 16);
    v31 = *(_QWORD *)(v30 + 128);
    if (!*(_QWORD *)(v31 + 16)
      || (v129 = *(_DWORD *)(v14 + 20),
          v32 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticlePlaneCollider),
          v17 = v129,
          (v33 & 1) == 0)
      || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for ParticlePlaneCollider)
    {
LABEL_50:
      if (v18 < 0
        || v137[1] <= v18
        || (v34 = *v137, v17 != -1) && *(_DWORD *)(v34 + 12 * v18 + 8) != v17
        || (v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v34 + 12 * v18 + 6) + 32) + 16),
            v36 = *(_QWORD *)(v35 + 128),
            !*(_QWORD *)(v36 + 16))
        || (v130 = v17,
            v37 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleSphereCollider),
            v17 = v130,
            (v38 & 1) == 0)
        || *(ValueMetadata **)(*(_QWORD *)(v35 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37) + 32) != &type metadata for ParticleSphereCollider)
      {
        if (v18 < 0
          || v137[1] <= v18
          || (v39 = *v137, v17 != -1) && *(_DWORD *)(v39 + 12 * v18 + 8) != v17
          || (v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v39 + 12 * v18 + 6) + 32) + 16),
              v41 = *(_QWORD *)(v40 + 128),
              !*(_QWORD *)(v41 + 16))
          || (v131 = v17,
              v42 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleBoxCollider),
              v17 = v131,
              (v43 & 1) == 0)
          || *(ValueMetadata **)(*(_QWORD *)(v40 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v42) + 32) != &type metadata for ParticleBoxCollider)
        {
          if (v18 < 0)
            goto LABEL_69;
          if (v137[1] <= v18)
            goto LABEL_69;
          v44 = *v137;
          if (v17 != -1 && *(_DWORD *)(v44 + 12 * v18 + 8) != v17)
            goto LABEL_69;
          v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v44 + 12 * v18 + 6) + 32) + 16);
          v46 = *(_QWORD *)(v45 + 128);
          if (!*(_QWORD *)(v46 + 16))
            goto LABEL_69;
          v47 = v17;
          v48 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleCylinderCollider);
          v17 = v47;
          if ((v49 & 1) == 0
            || *(ValueMetadata **)(*(_QWORD *)(v45 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v48) + 32) != &type metadata for ParticleCylinderCollider)
          {
            goto LABEL_69;
          }
        }
      }
    }
LABEL_66:
    v7 = v17;
    swift_retain();
    sub_1B1B1DD24(v14);
    swift_bridgeObjectRetain();
    sub_1B2229304();
    if (!swift_conformsToProtocol2())
      goto LABEL_152;
    v5 = v139;
    if (swift_dynamicCastMetatype())
    {
      v62 = swift_getKeyPath();
      swift_release();
      swift_bridgeObjectRelease();
      v157 = 0;
      v151 = 128;
      v147 = 1;
      v143 = 0x6C616353666C6168;
      v19 = 0xE900000000000065;
      v20 = v62;
      v145 = MEMORY[0x1E0DEB188];
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        v63 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v64 = &qword_1ED4BB080;
        v65 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
LABEL_74:
        sub_1B1A19D70(0, v64, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v65);
        v145 = v66;
        v157 = 0;
        v151 = 128;
        v147 = 1;
        v143 = 0x6C616353666C6168;
        v19 = 0xE900000000000065;
        v20 = v63;
        goto LABEL_4;
      }
      if (swift_dynamicCastMetatype())
      {
        v63 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v64 = (unint64_t *)&qword_1ED4BB0A0;
        v65 = MEMORY[0x1E0DEDD50];
        goto LABEL_74;
      }
    }
LABEL_4:
    v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = v18;
    *(_DWORD *)(v8 + 20) = v7;
    *(_QWORD *)(v8 + 24) = v143;
    *(_QWORD *)(v8 + 32) = v19;
    *(_QWORD *)(v8 + 40) = v20;
    *(_QWORD *)(v8 + 48) = v145;
    *(_QWORD *)(v8 + 56) = v157;
    *(_BYTE *)(v8 + 64) = v147;
    v9 = 0x3000000000000000;
    *(_WORD *)(v8 + 66) = v151;
LABEL_5:
    sub_1B1A05610(v14);
    sub_1B1A05610(v14);
    *v13 = v9 | v8;
    v13[2] = 0;
    *((_BYTE *)v13 + 24) = 1;
LABEL_6:
    if (++v6 == v5)
      goto LABEL_75;
  }
  v50 = *(_QWORD *)(v14 + 24);
  v148 = *(_QWORD *)(v14 + 16);
  v51 = *(_QWORD *)(v14 + 32);
  v52 = *(_QWORD *)(v14 + 40);
  v158 = *(_QWORD *)(v14 + 48);
  v53 = *(_BYTE *)(v14 + 56);
  v54 = *(_WORD *)(v14 + 58);
  v152 = *(_BYTE *)(v14 + 60);
  v141 = v13;
  if (v155 >= 2026)
  {
    sub_1B1B1DD24(v14);
    swift_bridgeObjectRetain();
    swift_retain();
    v56 = v148;
    goto LABEL_62;
  }
  sub_1B1B1DD24(v14);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2229304();
  if (swift_conformsToProtocol2())
  {
    if (swift_dynamicCastMetatype())
    {
      v55 = swift_getKeyPath();
      swift_release();
      swift_bridgeObjectRelease();
      v158 = 0;
      v54 = 128;
      v53 = 1;
      v56 = 0x6C616353666C6168;
      v50 = 0xE900000000000065;
      v51 = v55;
      v52 = MEMORY[0x1E0DEB188];
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        v57 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v58 = &qword_1ED4BB080;
        v59 = (uint64_t (*)(void))MEMORY[0x1E0DEDD20];
      }
      else
      {
        if (!swift_dynamicCastMetatype())
        {
          v56 = v148;
          goto LABEL_62;
        }
        v57 = swift_getKeyPath();
        swift_release();
        swift_bridgeObjectRelease();
        v58 = (unint64_t *)&qword_1ED4BB0A0;
        v59 = MEMORY[0x1E0DEDD50];
      }
      sub_1B1A19D70(0, v58, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v59);
      v52 = v60;
      v158 = 0;
      v54 = 128;
      v53 = 1;
      v56 = 0x6C616353666C6168;
      v50 = 0xE900000000000065;
      v51 = v57;
    }
LABEL_62:
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v56;
    *(_QWORD *)(v8 + 24) = v50;
    *(_QWORD *)(v8 + 32) = v51;
    *(_QWORD *)(v8 + 40) = v52;
    *(_QWORD *)(v8 + 48) = v158;
    *(_BYTE *)(v8 + 56) = v53;
    *(_WORD *)(v8 + 58) = v54;
    v9 = 0x9000000000000000;
    *(_BYTE *)(v8 + 60) = v152;
    v5 = v139;
    v13 = v141;
    goto LABEL_5;
  }
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
}

uint64_t type metadata accessor for ParticleColorOverVelocity.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1E7C4FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5FC18, (uint64_t (*)(void))sub_1B1E7D8C0, (uint64_t)&type metadata for ParticleColorOverVelocity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E7D8C0();
  sub_1B222A180();
  v14[0] = *(_QWORD *)v3;
  v16 = 0;
  sub_1B1BA05CC();
  sub_1B2229958();
  if (!v2)
  {
    v14[0] = *(_QWORD *)(v3 + 8);
    v16 = 1;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    v11 = *(_QWORD *)(v3 + 16);
    v12 = *(_BYTE *)(v3 + 32);
    v18 = *(_QWORD *)(v3 + 24);
    v17 = v11;
    v14[0] = v11;
    v14[1] = v18;
    v15 = v12;
    v16 = 2;
    sub_1B1C16514(v3);
    sub_1B1D3DBB0();
    sub_1B2229958();
    sub_1B1B28C6C((uint64_t)&v17);
    sub_1B1B28C6C((uint64_t)&v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B1E7C6EC()
{
  return "ParticleColorOverVelocity";
}

uint64_t sub_1B1E7C700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F97BCC(*a1, *a2);
}

uint64_t sub_1B1E7C70C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65676E6172;
  if (*v0 != 1)
    v1 = 1886216562;
  if (*v0)
    return v1;
  else
    return 0x7469736F706D6F63;
}

uint64_t sub_1B1E7C764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E7CA64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E7C788()
{
  sub_1B1E7D8C0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E7C7B0()
{
  sub_1B1E7D8C0();
  return sub_1B222A1E0();
}

double sub_1B1E7C7D8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_1B1E7D530(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1E7C81C(_QWORD *a1)
{
  return sub_1B1E7C4FC(a1);
}

uint64_t sub_1B1E7C854()
{
  return sub_1B1D3D248();
}

uint64_t sub_1B1E7C88C()
{
  return type metadata accessor for ParticleColorOverVelocity.System();
}

double sub_1B1E7C8A8@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  sub_1B1E7C8E8((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double sub_1B1E7C8E8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CAD0;
  v3 = _simd_pow_f4((simd_float4)xmmword_1B228EE30, (simd_float4)xmmword_1B2268F30);
  v3.i32[3] = 0;
  *(simd_float4 *)(v2 + 32) = v3;
  *(_DWORD *)(v2 + 48) = 0;
  v4 = _simd_pow_f4((simd_float4)xmmword_1B228EE40, (simd_float4)xmmword_1B2268F30);
  v4.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 80) = 1048576000;
  v5 = _simd_pow_f4((simd_float4)xmmword_1B228EE50, (simd_float4)xmmword_1B2268F30);
  v5.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 96) = v5;
  *(_DWORD *)(v2 + 112) = 1056964608;
  v6 = _simd_pow_f4((simd_float4)xmmword_1B228EE60, (simd_float4)xmmword_1B2268F30);
  v6.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 128) = v6;
  *(_DWORD *)(v2 + 144) = 1061158912;
  v7 = _simd_pow_f4((simd_float4)xmmword_1B228EE70, (simd_float4)xmmword_1B2268F30);
  v7.i32[3] = 0;
  *(simd_float4 *)(v2 + 160) = v7;
  *(_DWORD *)(v2 + 176) = 1065353216;
  v8 = sub_1B1C512B4(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  v9 = sub_1B2145310(v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)a1 = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 4) = 1065353216;
  *(_DWORD *)(a1 + 12) = 1065353216;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_1B1E7CA64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1886216562 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B1E7CBB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  float v9;
  float v10;
  __int128 v12;
  float v13;
  float v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _BYTE v42[4];
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60[15];
  _BYTE v61[17];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[7];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[40];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v3)
    return swift_release();
  v4 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D190F0(v4, (uint64_t)&v75);
  swift_retain();
  swift_release();
  v5 = v76;
  if ((_QWORD)v76)
  {
    v6 = v77;
    v7 = *((_QWORD *)&v76 + 1);
    v8 = v75;
    v9 = *((float *)&v75 + 3);
    v10 = *((float *)&v75 + 2);
  }
  else
  {
    sub_1B1E7C8E8((uint64_t)v42);
    v8 = v42[0];
    v10 = v43;
    v9 = v44;
    v5 = v45;
    v7 = v46;
    v6 = v47;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1E4D26C(v5, v7, v6, (uint64_t)v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B19F66A0((uint64_t)v60, (uint64_t)v73, (unint64_t *)&unk_1ED4B9160);
  if (!v74)
    goto LABEL_9;
  v79 = v73[4];
  v80 = v73[5];
  v81 = v73[6];
  v82 = v74;
  v75 = v73[0];
  v76 = v73[1];
  v77 = v73[2];
  v78 = v73[3];
  sub_1B1E7D33C((uint64_t)&v75);
  sub_1B1EDFE20((uint64_t)&v75, 1, 1, (uint64_t)v61);
  sub_1B1A08614(v60);
  sub_1B1D3D1A4((uint64_t)v61, (uint64_t)&v70);
  if (*((_QWORD *)&v71 + 1) == 1)
  {
    sub_1B1A08614(v60);
LABEL_9:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v57 = v70;
  v58 = v71;
  v59 = v72;
  v12 = *(_OWORD *)(a1 + 104);
  v54 = *(_OWORD *)(a1 + 88);
  v55 = v12;
  v56 = *(_QWORD *)(a1 + 120);
  sub_1B19F23E8((uint64_t)v48);
  v52[0] = v48[0];
  v52[1] = v48[1];
  v53 = v49;
  sub_1B1E8FCE4(v2, (uint64_t)v52, 0x200000000, &v62);
  sub_1B19F66A0((uint64_t)&v62, (uint64_t)v63, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v63[0])
  {
    if (v69 <= 0)
    {
      sub_1B1A086DC(&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      sub_1B1A08614(v60);
      sub_1B19ED720((uint64_t)v48);
      swift_release();
      sub_1B1A086DC(&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1A086DC(&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v37 = v66;
      if (v66)
      {
        v13 = 1.0 / (float)(v9 - v10);
        v14 = -(float)(v10 * v13);
        v15 = v68[4];
        v16 = *(_BYTE *)(v67 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v50[0] = v63[0];
        v50[1] = v63[1];
        v51 = v64;
        v34 = (uint64_t)(v68 + 6);
        v35 = v65;
        v41 = v68;
        v33 = v68 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v17 = 0;
        v18 = 0;
        v31 = v8;
        v32 = v15;
        v19 = v8;
        v36 = v16;
        do
        {
          v20 = (unsigned int *)(v35 + 48 * v17);
          v39 = *v20;
          v40 = v18;
          v38 = v20[1];
          v22 = (uint64_t *)*((_QWORD *)v20 + 2);
          v21 = *((_QWORD *)v20 + 3);
          v23 = *((_QWORD *)v20 + 4);
          v24 = *((_QWORD *)v20 + 5);
          if ((v16 & 1) != 0)
          {
            v25 = *(os_unfair_lock_s **)(v24 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v25);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v15);
          sub_1B19F66A0(v34, (uint64_t)v83, &qword_1ED4B7FB0);
          v26 = v41[4];
          v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v41[6] = ecs_stack_allocator_allocate(v26, 48 * v27, 8);
          v41[7] = v27;
          v33[1] = 0;
          v33[2] = 0;
          *v33 = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v22, v21, v23, (uint64_t)v41);
          v28 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v22, v21, v23, (uint64_t)v41);
          if (v22)
          {
            if (v23)
            {
              v29 = (int8x16_t)vmulq_f32(*v28, *v28);
              (*((void (**)(__int128 *, float))&v58 + 1))(&v57, v14+ (float)(v13* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL))))));
              __asm { BR              X8 }
            }
          }
          else if ((_DWORD)v39 != v38)
          {
            v30 = (int8x16_t)vmulq_f32(v28[v39], v28[v39]);
            (*((void (**)(__int128 *, float))&v58 + 1))(&v57, v14+ (float)(v13* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))))));
            __asm { BR              X8 }
          }
          v15 = v32;
          v18 = v40;
          sub_1B1F05D48(v41, (unsigned __int16 **)v50, (uint64_t)v83);
          sub_1B1F03804((char *)v24);
          ecs_stack_allocator_pop_snapshot(v32);
          v16 = v36;
          if ((v36 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
          }
          swift_release();
          ++v17;
        }
        while (v17 != v37);
      }
      else
      {
        sub_1B1A086DC(&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      }
      sub_1B1A08614(v60);
      sub_1B19ED720((uint64_t)v48);
      swift_release();
      sub_1B1A086DC(&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1A086DC(&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  else
  {
    sub_1B1A08614(v60);
    sub_1B19ED720((uint64_t)v48);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t sub_1B1E7D33C(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for ParticleColorOverVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleColorOverVelocity(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ParticleColorOverVelocity(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleColorOverVelocity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverVelocity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverVelocity()
{
  return &type metadata for ParticleColorOverVelocity;
}

uint64_t sub_1B1E7D530@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  simd_float4 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v26 = a2;
  sub_1B19F8E54(0, &qword_1EEF5FC08, (uint64_t (*)(void))sub_1B1E7D8C0, (uint64_t)&type metadata for ParticleColorOverVelocity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v26 - v7;
  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226CAD0;
  v28 = (simd_float4)xmmword_1B2268F30;
  v10 = _simd_pow_f4((simd_float4)xmmword_1B228EE30, (simd_float4)xmmword_1B2268F30);
  v10.i32[3] = 0;
  *(simd_float4 *)(v9 + 32) = v10;
  *(_DWORD *)(v9 + 48) = 0;
  v11 = _simd_pow_f4((simd_float4)xmmword_1B228EE40, v28);
  v11.i32[3] = 1.0;
  *(simd_float4 *)(v9 + 64) = v11;
  *(_DWORD *)(v9 + 80) = 1048576000;
  v12 = _simd_pow_f4((simd_float4)xmmword_1B228EE50, v28);
  v12.i32[3] = 1.0;
  *(simd_float4 *)(v9 + 96) = v12;
  *(_DWORD *)(v9 + 112) = 1056964608;
  v13 = _simd_pow_f4((simd_float4)xmmword_1B228EE60, v28);
  v13.i32[3] = 1.0;
  *(simd_float4 *)(v9 + 128) = v13;
  *(_DWORD *)(v9 + 144) = 1061158912;
  v14 = _simd_pow_f4((simd_float4)xmmword_1B228EE70, v28);
  v14.i32[3] = 0;
  *(simd_float4 *)(v9 + 160) = v14;
  *(_DWORD *)(v9 + 176) = 1065353216;
  v15 = sub_1B1C512B4(v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B2145310(v15);
  v28.i64[0] = v16;
  swift_bridgeObjectRelease();
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E7D8C0();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v26;
    v32 = 0;
    sub_1B1BA0588();
    v18 = v27;
    sub_1B2229814();
    v19 = v29;
    v20 = HIDWORD(v29);
    sub_1B1B4D924();
    v32 = 1;
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    v21 = v29;
    v32 = 2;
    sub_1B1D3DB38();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v18);
    v22 = v29;
    v23 = v30;
    v24 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_BYTE *)v17 = v19;
    *(_DWORD *)(v17 + 4) = v20;
    *(_QWORD *)(v17 + 8) = v21;
    *(_QWORD *)(v17 + 16) = v22;
    *(_QWORD *)(v17 + 24) = v23;
    *(_BYTE *)(v17 + 32) = v24;
  }
  return result;
}

unint64_t sub_1B1E7D8C0()
{
  unint64_t result;

  result = qword_1EEF5FC10;
  if (!qword_1EEF5FC10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B150, &type metadata for ParticleColorOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC10);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverVelocity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1E7D950 + 4 * byte_1B229AF8D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1E7D984 + 4 * byte_1B229AF88[v4]))();
}

uint64_t sub_1B1E7D984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E7D98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E7D994);
  return result;
}

uint64_t sub_1B1E7D9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E7D9A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1E7D9AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E7D9B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverVelocity.CodingKeys()
{
  return &type metadata for ParticleColorOverVelocity.CodingKeys;
}

unint64_t sub_1B1E7D9D4()
{
  unint64_t result;

  result = qword_1EEF5FC20;
  if (!qword_1EEF5FC20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B128, &type metadata for ParticleColorOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC20);
  }
  return result;
}

unint64_t sub_1B1E7DA1C()
{
  unint64_t result;

  result = qword_1EEF5FC28;
  if (!qword_1EEF5FC28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B098, &type metadata for ParticleColorOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC28);
  }
  return result;
}

unint64_t sub_1B1E7DA64()
{
  unint64_t result;

  result = qword_1EEF5FC30;
  if (!qword_1EEF5FC30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B0C0, &type metadata for ParticleColorOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC30);
  }
  return result;
}

uint64_t sub_1B1E7DAA8(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD v10[2];

  v10[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF5FC48, (uint64_t (*)(void))sub_1B1E7E854, (uint64_t)&type metadata for ClampBox.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E7E854();
  sub_1B222A180();
  v10[1] = v10[0];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1E7DBF4()
{
  return 0x6F69736E656D6964;
}

uint64_t sub_1B1E7DC10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F69736E656D6964 && a2 == 0xEA0000000000736ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1E7DCB0()
{
  sub_1B1E7E854();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E7DCD8()
{
  sub_1B1E7E854();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E7DD00@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1E7E1CC(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1E7DD28(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1E7DAA8(a1, *v1);
}

double sub_1B1E7DD40@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 524288.127;
  *a1 = xmmword_1B229B1A0;
  return result;
}

uint64_t type metadata accessor for ClampBoxSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E7DD74()
{
  return "Box Clamp";
}

uint64_t *sub_1B1E7DD88(uint64_t a1)
{
  float32x4_t *v1;
  float32x4_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  int8x16_t *v18;
  uint64_t v19;
  int8x16_t *v20;
  float32x4_t *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35[8];
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _BYTE v47[40];
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v48 = qword_1ED4D09F8;
  v49 = 0;
  v50 = 2;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  swift_retain();
  sub_1B19EFB98((uint64_t)v33);
  swift_release();
  v31 = v1[1];
  v45[0] = v33[0];
  v45[1] = v33[1];
  v46 = v34;
  sub_1B1E8FCE4(a1, (uint64_t)v45, 0x200000000, v35);
  sub_1B19F66A0((uint64_t)v35, (uint64_t)v36, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v36[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v33);
  if (v42 <= 0 || (v26 = v39) == 0)
  {
    sub_1B19ED720((uint64_t)v33);
    return sub_1B19ED748(v35);
  }
  v3 = v31;
  v3.i32[3] = 1.0;
  v32 = v3;
  v4 = v41;
  v30 = v41[4];
  v29 = *(unsigned __int8 *)(v40 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v43[0] = v36[0];
  v43[1] = v36[1];
  v44 = v37;
  v24 = (uint64_t)(v41 + 6);
  v25 = v38;
  v23 = v41 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = (unsigned int *)(v25 + 48 * v5);
    v8 = *v7;
    v27 = v7[1];
    v28 = v6;
    v9 = (uint64_t *)*((_QWORD *)v7 + 2);
    v10 = *((_QWORD *)v7 + 3);
    v12 = *((_QWORD *)v7 + 4);
    v11 = *((_QWORD *)v7 + 5);
    if (v29)
    {
      v13 = *(os_unfair_lock_s **)(v11 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v13);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v30);
    sub_1B19F66A0(v24, (uint64_t)v47, &qword_1ED4B7FB0);
    v14 = v4[4];
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v4[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
    v4[7] = v15;
    v23[1] = 0;
    v23[2] = 0;
    *v23 = 0;
    swift_release();
    v16 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v9, v10, v12, (uint64_t)v4);
    v17 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v9, v10, v12, (uint64_t)v4);
    v18 = (int8x16_t *)v17;
    if (v9)
    {
      if (v12)
      {
        v6 = v28;
        do
        {
          globalClamp(v16++, v18++, v32);
          --v12;
        }
        while (v12);
        goto LABEL_20;
      }
    }
    else if ((_DWORD)v8 != (_DWORD)v27)
    {
      v19 = v27 - v8;
      v20 = (int8x16_t *)(v17 + 16 * v8);
      v21 = &v16[v8];
      v6 = v28;
      do
      {
        globalClamp(v21++, v20++, v32);
        --v19;
      }
      while (v19);
      goto LABEL_20;
    }
    v6 = v28;
LABEL_20:
    sub_1B1F05D48(v4, (unsigned __int16 **)v43, (uint64_t)v47);
    sub_1B1F03804((char *)v11);
    ecs_stack_allocator_pop_snapshot(v30);
    if ((v29 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
    }
    swift_release();
    ++v5;
  }
  while (v5 != v26);
  sub_1B19ED720((uint64_t)v33);
  sub_1B19ED748(v35);
  return sub_1B19ED748(v35);
}

uint64_t sub_1B1E7E158()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GlobalClampBoxSystem()
{
  return objc_opt_self();
}

double sub_1B1E7E18C()
{
  uint64_t v0;
  double result;

  v0 = swift_allocObject();
  result = 134217761.0;
  *(_OWORD *)(v0 + 16) = xmmword_1B229B1B0;
  return result;
}

const char *sub_1B1E7E1B8()
{
  return "Global Box Clamp";
}

uint64_t sub_1B1E7E1CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD v10[2];

  sub_1B19F8E54(0, &qword_1EEF5FC38, (uint64_t (*)(void))sub_1B1E7E854, (uint64_t)&type metadata for ClampBox.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E7E854();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10[0] = v10[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t *sub_1B1E7E35C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x2_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int32 v23;
  float32x4_t v24;
  int32x4_t v25;
  __int128 v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  __int32 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x2_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  __int32 v40;
  float32x4_t v41;
  int32x4_t v42;
  __int128 v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  __int32 v47;
  float32x4_t v48;
  __int32 v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64[8];
  _OWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _BYTE v76[40];
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v77 = qword_1ED4D09F8;
  v78 = 0;
  v79 = 2;
  v80 = 0;
  v81 = 2;
  v82 = 0;
  swift_retain();
  sub_1B1B47170((uint64_t)v62);
  swift_release();
  v74[0] = v62[0];
  v74[1] = v62[1];
  v75 = v63;
  sub_1B1E8FCE4(a1, (uint64_t)v74, 0x200000000, v64);
  sub_1B19F66A0((uint64_t)v64, (uint64_t)v65, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v65[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v62);
  if (v71 <= 0 || (v59 = v68) == 0)
  {
    sub_1B19ED720((uint64_t)v62);
    return sub_1B19ED748(v64);
  }
  v2 = v70;
  v3 = v70[4];
  v4 = *(unsigned __int8 *)(v69 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v72[0] = v65[0];
  v72[1] = v65[1];
  v73 = v66;
  v57 = (uint64_t)(v70 + 6);
  v58 = v67;
  v56 = v70 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v5 = 0;
  v6 = 0;
  v54 = v4;
  v55 = v3;
  do
  {
    v61 = v6;
    v7 = (unsigned int *)(v58 + 48 * v5);
    v8 = *v7;
    v60 = v7[1];
    v10 = (uint64_t *)*((_QWORD *)v7 + 2);
    v9 = *((_QWORD *)v7 + 3);
    v12 = *((_QWORD *)v7 + 4);
    v11 = *((_QWORD *)v7 + 5);
    if (v4)
    {
      v13 = *(os_unfair_lock_s **)(v11 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v13);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v3);
    sub_1B19F66A0(v57, (uint64_t)v76, &qword_1ED4B7FB0);
    v14 = v2[4];
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v2[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
    v2[7] = v15;
    v56[1] = 0;
    v56[2] = 0;
    *v56 = 0;
    swift_release();
    v16 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for ClampBox, (uint64_t)&off_1E63BEF50, v10, v9, v12, (uint64_t)v2);
    v17 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v10, v9, v12, (uint64_t)v2);
    v18 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v10, v9, v12, (uint64_t)v2);
    if (v10)
    {
      if (!v12)
        goto LABEL_20;
      v6 = v61;
      v20.i32[3] = v52;
      v19.i32[3] = v53;
      do
      {
        v21 = *v16++;
        v22 = v21;
        v23 = v19.i32[3];
        v24 = *v17;
        v19 = vabsq_f32(*v17);
        v19.i32[3] = v23;
        v25 = vcgtq_f32(v19, v21);
        *(int8x8_t *)&v26 = vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v25.i8), (int8x8_t)vsub_f32(0, *v18), (int8x8_t)*v18);
        if (v25.i32[2] >= 0)
          LODWORD(v27) = v18[1];
        else
          v27 = 0.0 - COERCE_FLOAT(*(_QWORD *)&v18[1]);
        *((_QWORD *)&v26 + 1) = LODWORD(v27);
        *(_OWORD *)v18->f32 = v26;
        v18 += 2;
        *(float32x2_t *)v28.f32 = vsub_f32(0, *(float32x2_t *)v22.f32);
        v24.i32[3] = 0;
        v28.f32[2] = 0.0 - v22.f32[2];
        v28.i32[3] = 0;
        v29 = vmaxnmq_f32(v24, v28);
        v29.i32[3] = 0;
        v30 = v20.i32[3];
        v22.i32[3] = 0;
        v20 = vminnmq_f32(v29, v22);
        v20.i32[3] = v30;
        v31 = v20;
        v31.i32[3] = 1.0;
        *v17++ = v31;
        --v12;
      }
      while (v12);
      v52 = v30;
      v53 = v19.i32[3];
    }
    else
    {
      v33.i32[3] = v50;
      v32.i32[3] = v51;
      if ((_DWORD)v8 == (_DWORD)v60)
      {
LABEL_20:
        v3 = v55;
        v4 = v54;
        v6 = v61;
        goto LABEL_28;
      }
      v34 = v60 - v8;
      v35 = &v18[2 * v8];
      v36 = &v17[v8];
      v37 = &v16[v8];
      v6 = v61;
      do
      {
        v38 = *v37++;
        v39 = v38;
        v40 = v32.i32[3];
        v41 = *v36;
        v32 = vabsq_f32(*v36);
        v32.i32[3] = v40;
        v42 = vcgtq_f32(v32, v38);
        *(int8x8_t *)&v43 = vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v42.i8), (int8x8_t)vsub_f32(0, *v35), (int8x8_t)*v35);
        if (v42.i32[2] >= 0)
          LODWORD(v44) = v35[1];
        else
          v44 = 0.0 - COERCE_FLOAT(*(_QWORD *)&v35[1]);
        *((_QWORD *)&v43 + 1) = LODWORD(v44);
        *(_OWORD *)v35->f32 = v43;
        v35 += 2;
        *(float32x2_t *)v45.f32 = vsub_f32(0, *(float32x2_t *)v39.f32);
        v41.i32[3] = 0;
        v45.f32[2] = 0.0 - v39.f32[2];
        v45.i32[3] = 0;
        v46 = vmaxnmq_f32(v41, v45);
        v46.i32[3] = 0;
        v47 = v33.i32[3];
        v39.i32[3] = 0;
        v33 = vminnmq_f32(v46, v39);
        v33.i32[3] = v47;
        v48 = v33;
        v48.i32[3] = 1.0;
        *v36++ = v48;
        --v34;
      }
      while (v34);
      v50 = v47;
      v51 = v32.i32[3];
    }
    v3 = v55;
    v4 = v54;
LABEL_28:
    sub_1B1F05D48(v2, (unsigned __int16 **)v72, (uint64_t)v76);
    sub_1B1F03804((char *)v11);
    ecs_stack_allocator_pop_snapshot(v3);
    if ((v4 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
    }
    swift_release();
    ++v5;
  }
  while (v5 != v59);
  sub_1B19ED720((uint64_t)v62);
  sub_1B19ED748(v64);
  return sub_1B19ED748(v64);
}

ValueMetadata *type metadata accessor for ClampBox()
{
  return &type metadata for ClampBox;
}

unint64_t sub_1B1E7E854()
{
  unint64_t result;

  result = qword_1EEF5FC40;
  if (!qword_1EEF5FC40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B398, &type metadata for ClampBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClampBox.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1E7E8D8 + 4 * byte_1B229B1C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1E7E8F8 + 4 * byte_1B229B1C5[v4]))();
}

_BYTE *sub_1B1E7E8D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1E7E8F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E7E900(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E7E908(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1E7E910(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1E7E918(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClampBox.CodingKeys()
{
  return &type metadata for ClampBox.CodingKeys;
}

unint64_t sub_1B1E7E938()
{
  unint64_t result;

  result = qword_1EEF5FC50;
  if (!qword_1EEF5FC50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B370, &type metadata for ClampBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC50);
  }
  return result;
}

unint64_t sub_1B1E7E980()
{
  unint64_t result;

  result = qword_1EEF5FC58;
  if (!qword_1EEF5FC58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B2E0, &type metadata for ClampBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC58);
  }
  return result;
}

unint64_t sub_1B1E7E9C8()
{
  unint64_t result;

  result = qword_1EEF5FC60;
  if (!qword_1EEF5FC60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B308, &type metadata for ClampBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FC60);
  }
  return result;
}

void sub_1B1E7EA0C()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1E7EA54()
{
  return type metadata accessor for LogicNode(0);
}

uint64_t type metadata accessor for LogicNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FC68);
}

uint64_t sub_1B1E7EA70()
{
  return 0x7463656C6553;
}

uint64_t sub_1B1E7EA84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000010;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v2 + 40) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v2 + 48) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v6 + 32) = result | 0x4000000000000000;
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E636F160;
  a1[3] = (uint64_t)&unk_1E636F190;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v8;
  return result;
}

uint64_t sub_1B1E7EB98()
{
  return 0x203125203F203025;
}

uint64_t sub_1B1E7EBB8()
{
  return type metadata accessor for SelectNode(0);
}

uint64_t type metadata accessor for SelectNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FC78);
}

double sub_1B1E7EBD4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  sub_1B1E58F20();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 32) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0x8000000000000010;
  *(_QWORD *)(v5 + 32) = v6 | 0x6000000000000000;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 256))();
  v8 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = 0x8000000000000000;
  *a1 = v3;
  a1[1] = v5;
  v10 = MEMORY[0x1E0DEE9D8];
  a1[2] = v8;
  a1[3] = v10;
  a1[4] = v10;
  a1[5] = v10;
  return result;
}

uint64_t sub_1B1E7ECE0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0x8000000000000010;
  return v0 | 0x6000000000000000;
}

uint64_t sub_1B1E7ED14()
{
  return type metadata accessor for UnaryBoolOperatorNode(0);
}

uint64_t type metadata accessor for UnaryBoolOperatorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FC88);
}

uint64_t sub_1B1E7ED30()
{
  return 7630670;
}

uint64_t sub_1B1E7ED40()
{
  return 3155233;
}

uint64_t sub_1B1E7ED50()
{
  return type metadata accessor for NotNode(0);
}

uint64_t type metadata accessor for NotNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FC98);
}

uint64_t sub_1B1E7ED6C()
{
  return 0x64644F7349;
}

unint64_t sub_1B1E7ED80()
{
  return 0x8000000000000010;
}

uint64_t sub_1B1E7ED8C()
{
  return 0x2931202620302528;
}

uint64_t sub_1B1E7EDB0()
{
  return type metadata accessor for IsOddNode(0);
}

uint64_t type metadata accessor for IsOddNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FCA8);
}

uint64_t sub_1B1E7EDCC()
{
  return 0x6E6576457349;
}

uint64_t sub_1B1E7EDE0()
{
  return 0x2931202620302528;
}

uint64_t sub_1B1E7EE04()
{
  return type metadata accessor for IsEvenNode(0);
}

uint64_t type metadata accessor for IsEvenNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FCB8);
}

__n128 sub_1B1E7EE20@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  sub_1B1E58F20();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226CD10;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 32) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v3 + 40) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000010;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 256))();
  v9 = swift_allocObject();
  result = (__n128)xmmword_1B226CD10;
  *(_OWORD *)(v9 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)(v9 + 40) = 0x8000000000000000;
  *a1 = v3;
  a1[1] = v6;
  v11 = MEMORY[0x1E0DEE9D8];
  a1[2] = v9;
  a1[3] = v11;
  a1[4] = v11;
  a1[5] = v11;
  return result;
}

unint64_t sub_1B1E7EF4C()
{
  return 0x8000000000000008;
}

uint64_t sub_1B1E7EF58()
{
  return type metadata accessor for BinaryLogicOperatorNode(0);
}

uint64_t type metadata accessor for BinaryLogicOperatorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FCC8);
}

uint64_t sub_1B1E7EF74()
{
  return 29263;
}

uint64_t sub_1B1E7EF80()
{
  return 0x3125207C7C203025;
}

uint64_t sub_1B1E7EF98()
{
  return type metadata accessor for OrNode(0);
}

uint64_t type metadata accessor for OrNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FCD8);
}

uint64_t sub_1B1E7EFB4()
{
  return 6581825;
}

uint64_t sub_1B1E7EFC4()
{
  return 0x3125202626203025;
}

uint64_t sub_1B1E7EFDC()
{
  return type metadata accessor for AndNode(0);
}

uint64_t type metadata accessor for AndNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FCE8);
}

uint64_t sub_1B1E7EFF8()
{
  return 1684955470;
}

uint64_t sub_1B1E7F008()
{
  return 0x2026262030252821;
}

uint64_t sub_1B1E7F028()
{
  return type metadata accessor for NandNode(0);
}

uint64_t type metadata accessor for NandNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FCF8);
}

uint64_t sub_1B1E7F044()
{
  return 7499598;
}

uint64_t sub_1B1E7F054()
{
  return 0x207C7C2030252821;
}

uint64_t sub_1B1E7F074()
{
  return type metadata accessor for NorNode(0);
}

uint64_t type metadata accessor for NorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD08);
}

uint64_t sub_1B1E7F090()
{
  return 0x6574616572477349;
}

unint64_t sub_1B1E7F0AC()
{
  return 0x8000000000000018;
}

uint64_t sub_1B1E7F0B8()
{
  return 0x3125203E203025;
}

uint64_t sub_1B1E7F0D0()
{
  return type metadata accessor for IsGreaterNode(0);
}

uint64_t type metadata accessor for IsGreaterNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD18);
}

unint64_t sub_1B1E7F0EC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1E7F108()
{
  return 0x3125203D3E203025;
}

uint64_t sub_1B1E7F120()
{
  return type metadata accessor for IsGreaterOrEqualNode(0);
}

uint64_t type metadata accessor for IsGreaterOrEqualNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD28);
}

uint64_t sub_1B1E7F13C()
{
  return 0x72657373654C7349;
}

uint64_t sub_1B1E7F154()
{
  return 0x3125203C203025;
}

uint64_t sub_1B1E7F16C()
{
  return type metadata accessor for IsLesserNode(0);
}

uint64_t type metadata accessor for IsLesserNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD38);
}

uint64_t sub_1B1E7F188()
{
  return 0x72657373654C7349;
}

uint64_t sub_1B1E7F1AC()
{
  return 0x3125203D3C203025;
}

uint64_t sub_1B1E7F1C4()
{
  return type metadata accessor for IsLesserOrEqualNode(0);
}

uint64_t type metadata accessor for IsLesserOrEqualNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD48);
}

uint64_t sub_1B1E7F1E0()
{
  return 0x6C617571457349;
}

uint64_t sub_1B1E7F1F8()
{
  return 0x3125203D3D203025;
}

uint64_t sub_1B1E7F210()
{
  return type metadata accessor for IsEqualNode(0);
}

uint64_t type metadata accessor for IsEqualNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD58);
}

uint64_t sub_1B1E7F22C()
{
  return 0x757145746F4E7349;
}

uint64_t sub_1B1E7F248()
{
  return 0x3125203D21203025;
}

uint64_t sub_1B1E7F260()
{
  return type metadata accessor for IsNotEqualNode(0);
}

uint64_t type metadata accessor for IsNotEqualNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5FD68);
}

uint64_t sub_1B1E7F27C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1E7F2A0()
{
  return swift_deallocObject();
}

id sub_1B1E7F2B4(float a1)
{
  double v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v1 = a1;
  if (sub_1B2228830())
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, v1);
    v3 = objc_msgSend(v2, sel_fontName);

    sub_1B222874C();
  }
  v4 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend((id)objc_opt_self(), sel_fontDescriptorWithName_size_, v4, v1);

  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_fontWithDescriptor_size_, v5, v1);
  if (!v7)
    v7 = objc_msgSend(v6, sel_systemFontOfSize_, 14.0);

  return v7;
}

uint64_t sub_1B1E7F3FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1B19F8E54(0, &qword_1EEF5FDF8, (uint64_t (*)(void))sub_1B1E85278, (uint64_t)&type metadata for SimpleFontDescription.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v10 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E85278();
  sub_1B222A180();
  v12 = 0;
  v8 = v10;
  sub_1B2229910();
  if (!v8)
  {
    v11 = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1E7F544(char *a1, char *a2)
{
  return sub_1B1F96328(*a1, *a2);
}

uint64_t sub_1B1E7F550()
{
  _BYTE *v0;

  if (*v0)
    return 1702521203;
  else
    return 1701667182;
}

uint64_t sub_1B1E7F574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1E82CE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1E7F598()
{
  sub_1B1E85278();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E7F5C0()
{
  sub_1B1E85278();
  return sub_1B222A1E0();
}

void sub_1B1E7F5E8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v6 = sub_1B1E832E0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(float *)(a2 + 16) = v6;
  }
}

uint64_t sub_1B1E7F614(_QWORD *a1)
{
  return sub_1B1E7F3FC(a1);
}

BOOL sub_1B1E7F630(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  char v5;
  _BOOL8 result;

  v2 = *(float *)(a1 + 16);
  v3 = *(float *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return v2 == v3;
  v5 = sub_1B2229D24();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

unint64_t sub_1B1E7F68C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1B1E83488(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B1E7F6B4()
{
  sub_1B1E84DA4();
  return sub_1B2228A58();
}

uint64_t sub_1B1E7F710()
{
  sub_1B1E84DA4();
  return sub_1B22289E0();
}

void sub_1B1E7F75C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6395490;
}

uint64_t sub_1B1E7F76C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1E7F798 + 4 * byte_1B229B520[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1B1E7F798()
{
  return 0x6874646977;
}

uint64_t sub_1B1E7F7AC()
{
  return 0x746867696568;
}

uint64_t sub_1B1E7F7C0()
{
  return 0x6874676E656CLL;
}

uint64_t sub_1B1E7F7D4()
{
  return 0x527265666D616863;
}

uint64_t sub_1B1E7F7F8()
{
  return 0x6765536874646977;
}

uint64_t sub_1B1E7F818()
{
  return 0x6553746867696568;
}

uint64_t sub_1B1E7F8C8()
{
  return 0x64615272656E6E69;
}

uint64_t sub_1B1E7F8E8()
{
  return 0x656D676553706163;
}

uint64_t sub_1B1E7F904()
{
  return 0x7569646152706F74;
}

uint64_t sub_1B1E7F924()
{
  return 0x6D67655365706970;
}

uint64_t sub_1B1E7F944()
{
  return 1954047348;
}

uint64_t sub_1B1E7F950()
{
  return 0x6F69737572747865;
}

uint64_t sub_1B1E7F96C()
{
  return 1953394534;
}

uint64_t sub_1B1E7F978()
{
  return 0x70536C6169646172;
}

uint64_t sub_1B1E7F998()
{
  return 0x65687073696D6568;
}

uint64_t sub_1B1E7F9B8()
{
  return 0x7373656E74616C66;
}

double sub_1B1E7F9D0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 4) = xmmword_1B2244F70;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(1uLL);
  *(_OWORD *)(a1 + 40) = xmmword_1B229BFD0;
  *(_DWORD *)(a1 + 56) = 1056964608;
  *(_QWORD *)(a1 + 64) = 48;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 48;
  *(_DWORD *)(a1 + 88) = 1048576000;
  *(_QWORD *)(a1 + 96) = 24;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_1B229BFE0;
  *(_QWORD *)(a1 + 128) = 0xE500000000000000;
  *(_QWORD *)(a1 + 136) = 0x3F19999A3F800000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0xE000000000000000;
  result = 0.0078125019;
  *(_QWORD *)(a1 + 160) = 0x3F80000041600000;
  *(_BYTE *)(a1 + 168) = 0;
  return result;
}

uint64_t sub_1B1E7FA60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1E7F76C(*a1);
  v5 = v4;
  if (v3 == sub_1B1E7F76C(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1E7FAE8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1E7F76C(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E7FB48()
{
  unsigned __int8 *v0;

  sub_1B1E7F76C(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E7FB88()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1E7F76C(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1E7FBE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E82C98();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E7FC10@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1E7F76C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1E7FC38()
{
  unsigned __int8 *v0;

  return sub_1B1E7F76C(*v0);
}

uint64_t sub_1B1E7FC40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1E82C98();
  *a1 = result;
  return result;
}

uint64_t sub_1B1E7FC64()
{
  sub_1B1E84914();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E7FC8C()
{
  sub_1B1E84914();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E7FCB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  char v19;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5FDA0, (uint64_t (*)(void))sub_1B1E84914, (uint64_t)&type metadata for PrimitiveGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E84914();
  sub_1B222A180();
  if (!*(_BYTE *)v3 || (LOBYTE(v16) = *(_BYTE *)v3, v19 = 0, sub_1B1E82668(), sub_1B2229958(), !v2))
  {
    if (*(float *)(v3 + 4) == 1.0 || (LOBYTE(v16) = 1, sub_1B2229934(), !v2))
    {
      if (*(float *)(v3 + 8) == 1.0 || (LOBYTE(v16) = 2, sub_1B2229934(), !v2))
      {
        if (*(float *)(v3 + 12) == 1.0 || (LOBYTE(v16) = 3, sub_1B2229934(), !v2))
        {
          if (*(float *)(v3 + 16) == 0.0 || (LOBYTE(v16) = 4, sub_1B2229934(), !v2))
          {
            if (*(_QWORD *)(v3 + 24) == 1 || (LOBYTE(v16) = 5, sub_1B2229940(), !v2))
            {
              if (*(_QWORD *)(v3 + 32) == 1 || (LOBYTE(v16) = 6, sub_1B2229940(), !v2))
              {
                if (*(_QWORD *)(v3 + 40) == 1 || (LOBYTE(v16) = 7, sub_1B2229940(), !v2))
                {
                  if (*(_QWORD *)(v3 + 48) == 10 || (LOBYTE(v16) = 8, sub_1B2229940(), !v2))
                  {
                    if (*(float *)(v3 + 56) == 0.5 || (LOBYTE(v16) = 9, sub_1B2229934(), !v2))
                    {
                      if (*(_QWORD *)(v3 + 64) == 48 || (LOBYTE(v16) = 10, sub_1B2229940(), !v2))
                      {
                        if (*(_BYTE *)(v3 + 72) != 1 || (LOBYTE(v16) = 11, sub_1B222991C(), !v2))
                        {
                          if (*(_QWORD *)(v3 + 80) == 48 || (LOBYTE(v16) = 12, sub_1B2229940(), !v2))
                          {
                            if (*(float *)(v3 + 88) == 0.25 || (LOBYTE(v16) = 13, sub_1B2229934(), !v2))
                            {
                              if (*(_QWORD *)(v3 + 96) == 24 || (LOBYTE(v16) = 14, sub_1B2229940(), !v2))
                              {
                                if (*(float *)(v3 + 104) == 0.0 || (LOBYTE(v16) = 15, sub_1B2229934(), !v2))
                                {
                                  if (*(_QWORD *)(v3 + 112) == 24 || (LOBYTE(v16) = 16, sub_1B2229940(), !v2))
                                  {
                                    if (*(_QWORD *)(v3 + 120) == 0x6F6C6C6548
                                      && *(_QWORD *)(v3 + 128) == 0xE500000000000000
                                      || (sub_1B2229D24() & 1) != 0
                                      || (LOBYTE(v16) = 17, sub_1B2229910(), !v2))
                                    {
                                      if (*(float *)(v3 + 136) == 1.0 || (LOBYTE(v16) = 18, sub_1B2229934(), !v2))
                                      {
                                        if (*(float *)(v3 + 140) == 0.6 || (LOBYTE(v16) = 19, sub_1B2229934(), !v2))
                                        {
                                          if ((v11 = *(_QWORD *)(v3 + 144),
                                                v12 = *(_QWORD *)(v3 + 152),
                                                v13 = *(float *)(v3 + 160),
                                                !v11)
                                            && v12 == 0xE000000000000000
                                            || (sub_1B2229D24() & 1) != 0)
                                          {
                                            if (v13 == 14.0)
                                              goto LABEL_63;
                                          }
                                          v16 = v11;
                                          v17 = v12;
                                          v18 = v13;
                                          v19 = 20;
                                          sub_1B1E84A04();
                                          sub_1B2229958();
                                          if (!v2)
                                          {
LABEL_63:
                                            if (*(float *)(v3 + 164) == 1.0 || (LOBYTE(v16) = 21, sub_1B2229934(), !v2))
                                            {
                                              if (*(_BYTE *)(v3 + 168) == 1)
                                              {
                                                LOBYTE(v16) = 22;
                                                sub_1B222991C();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

__n128 sub_1B1E802E8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  _OWORD v10[2];

  sub_1B1E83498(a1, v9);
  if (!v2)
  {
    v5 = v10[0];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 153) = *(_OWORD *)((char *)v10 + 9);
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B1E80348(_QWORD *a1)
{
  return sub_1B1E7FCB4(a1);
}

uint64_t sub_1B1E8035C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B229BFF0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1E84A7C;
  v3[5] = v2;
  v3[2] = sub_1B1E84A9C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AC2F68(0x6974616C756D6973, 0xEF7865646E496E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A650, (uint64_t)&type metadata for PrimitiveGenerator.PrimitiveType, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1E84ABC;
  v6[5] = KeyPath;
  v6[2] = sub_1B1B08930;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AC2FD8(1701869940, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1B08884;
  v10[5] = v8;
  v10[2] = sub_1B1B0888C;
  v10[3] = v8;
  v10[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v11 = sub_1B1AC3394(1954047348, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v10, v8, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v11;
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B087E0;
  v14[5] = v12;
  v14[2] = sub_1B1B087E8;
  v14[3] = v12;
  v14[6] = v12;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = sub_1B1AC3404(0x6F69737572747865, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v13, 1, 0, (uint64_t)v14, v12, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1B087E0;
  v19[5] = v17;
  v19[2] = sub_1B1B087E8;
  v19[3] = v17;
  v19[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v20 = sub_1B1AC3404(0x7373656E74616C66, 0xE800000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v18, 1, 0, (uint64_t)v19, v17, 0, 0,
          0,
          v15,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v20;
  v21 = swift_getKeyPath();
  v22 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A620, (uint64_t)&type metadata for SimpleFontDescription, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1B086A4;
  v23[5] = v21;
  v23[2] = sub_1B1B086AC;
  v23[3] = v21;
  v23[6] = v21;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v24 = sub_1B1AC3474(1953394534, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v22, 1, 0, (uint64_t)v23, v21, 0, 0,
          0,
          v15,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v24;
  v25 = swift_getKeyPath();
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1B087E0;
  v27[5] = v25;
  v27[2] = sub_1B1B087E8;
  v27[3] = v25;
  v27[6] = v25;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v28 = MEMORY[0x1E0DEE9D8];
  v29 = sub_1B1AC3404(0x6874646977, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v26, 1, 0, (uint64_t)v27, v25, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v29;
  v30 = (_QWORD *)v0;
  v31 = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1B087E0;
  v33[5] = v31;
  v33[2] = sub_1B1B087E8;
  v33[3] = v31;
  v33[6] = v31;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v34 = sub_1B1AC3404(0x746867696568, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v32, 1, 0, (uint64_t)v33, v31, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v34;
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B087E0;
  v37[5] = v35;
  v37[2] = sub_1B1B087E8;
  v37[3] = v35;
  v37[6] = v35;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v38 = sub_1B1AC3404(0x6874676E656CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v36, 1, 0, (uint64_t)v37, v35, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v38;
  v39 = swift_getKeyPath();
  v40 = swift_getKeyPath();
  v41 = (_QWORD *)swift_allocObject();
  v41[4] = sub_1B1B087E0;
  v41[5] = v39;
  v41[2] = sub_1B1B087E8;
  v41[3] = v39;
  v41[6] = v39;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v42 = sub_1B1AC3404(0x527265666D616863, 0xED00007375696461, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v40, 1, 0, (uint64_t)v41, v39, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v42;
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B087E0;
  v45[5] = v43;
  v45[2] = sub_1B1B087E8;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v46 = sub_1B1AC3404(0x737569646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 104) = v46;
  v47 = swift_getKeyPath();
  v48 = swift_getKeyPath();
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1B087E0;
  v49[5] = v47;
  v49[2] = sub_1B1B087E8;
  v49[3] = v47;
  v49[6] = v47;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v50 = sub_1B1AC3404(0x615272656E726F63, 0xEC00000073756964, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v48, 1, 0, (uint64_t)v49, v47, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 112) = v50;
  v51 = swift_getKeyPath();
  v52 = swift_getKeyPath();
  v53 = (_QWORD *)swift_allocObject();
  v53[4] = sub_1B1B087E0;
  v53[5] = v51;
  v53[2] = sub_1B1B087E8;
  v53[3] = v51;
  v53[6] = v51;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v54 = sub_1B1AC3404(0x64615272656E6E69, 0xEB00000000737569, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v52, 1, 0, (uint64_t)v53, v51, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 120) = v54;
  v55 = swift_getKeyPath();
  v56 = swift_getKeyPath();
  v57 = (_QWORD *)swift_allocObject();
  v57[4] = sub_1B1B087E0;
  v57[5] = v55;
  v57[2] = sub_1B1B087E8;
  v57[3] = v55;
  v57[6] = v55;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v58 = sub_1B1AC3404(0x6964615265706970, 0xEA00000000007375, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v56, 1, 0, (uint64_t)v57, v55, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 128) = v58;
  v59 = swift_getKeyPath();
  v60 = swift_getKeyPath();
  v61 = (_QWORD *)swift_allocObject();
  v61[4] = sub_1B1B087E0;
  v61[5] = v59;
  v61[2] = sub_1B1B087E8;
  v61[3] = v59;
  v61[6] = v59;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v62 = sub_1B1AC3404(0x7569646152706F74, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v60, 1, 0, (uint64_t)v61, v59, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 136) = v62;
  v63 = swift_getKeyPath();
  v64 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v65 = (_QWORD *)swift_allocObject();
  v65[4] = sub_1B1E84BD0;
  v65[5] = v63;
  v65[2] = sub_1B1E84BF0;
  v65[3] = v63;
  v65[6] = v63;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v66 = sub_1B1AC3830(0x6765536874646977, 0xEC000000746E656DLL, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v64, 1, 0, (uint64_t)v65, v63, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 144) = v66;
  v67 = swift_getKeyPath();
  v68 = swift_getKeyPath();
  v69 = (_QWORD *)swift_allocObject();
  v69[4] = sub_1B1E84BD0;
  v69[5] = v67;
  v69[2] = sub_1B1E84BF0;
  v69[3] = v67;
  v69[6] = v67;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v70 = sub_1B1AC3830(0x6553746867696568, 0xED0000746E656D67, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v68, 1, 0, (uint64_t)v69, v67, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 152) = v70;
  v71 = swift_getKeyPath();
  v72 = swift_getKeyPath();
  v73 = (_QWORD *)swift_allocObject();
  v73[4] = sub_1B1E84BD0;
  v73[5] = v71;
  v73[2] = sub_1B1E84BF0;
  v73[3] = v71;
  v73[6] = v71;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v74 = sub_1B1AC3830(0x65536874676E656CLL, 0xED0000746E656D67, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v72, 1, 0, (uint64_t)v73, v71, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 160) = v74;
  v75 = swift_getKeyPath();
  v76 = swift_getKeyPath();
  v77 = (_QWORD *)swift_allocObject();
  v77[4] = sub_1B1E84BD0;
  v77[5] = v75;
  v77[2] = sub_1B1E84BF0;
  v77[3] = v75;
  v77[6] = v75;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v78 = sub_1B1AC3830(0x537265666D616863, 0xEE00746E656D6765, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v76, 1, 0, (uint64_t)v77, v75, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 168) = v78;
  v79 = swift_getKeyPath();
  v80 = swift_getKeyPath();
  v81 = (_QWORD *)swift_allocObject();
  v81[4] = sub_1B1E84BD0;
  v81[5] = v79;
  v81[2] = sub_1B1E84BF0;
  v81[3] = v79;
  v81[6] = v79;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v82 = sub_1B1AC3830(0x746E656D676573, 0xE700000000000000, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v80, 1, 0, (uint64_t)v81, v79, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 176) = v82;
  v83 = swift_getKeyPath();
  v84 = swift_getKeyPath();
  v85 = (_QWORD *)swift_allocObject();
  v85[4] = sub_1B1E84BD0;
  v85[5] = v83;
  v85[2] = sub_1B1E84BF0;
  v85[3] = v83;
  v85[6] = v83;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v86 = sub_1B1AC3830(0x65536C6169646172, 0xED0000746E656D67, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v84, 1, 0, (uint64_t)v85, v83, 0, 0,
          0,
          v28,
          0);
  swift_release();
  swift_release();
  v30[23] = v86;
  v87 = swift_getKeyPath();
  v88 = swift_getKeyPath();
  v89 = (_QWORD *)swift_allocObject();
  v89[4] = sub_1B1E84BD0;
  v89[5] = v87;
  v89[2] = sub_1B1E84BF0;
  v89[3] = v87;
  v89[6] = v87;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v90 = MEMORY[0x1E0DEE9D8];
  v91 = sub_1B1AC3830(0x655372656E726F63, 0xED0000746E656D67, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v88, 1, 0, (uint64_t)v89, v87, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  swift_release();
  v30[24] = v91;
  v92 = (uint64_t)v30;
  v93 = swift_getKeyPath();
  v94 = swift_getKeyPath();
  v95 = (_QWORD *)swift_allocObject();
  v95[4] = sub_1B1E84BD0;
  v95[5] = v93;
  v95[2] = sub_1B1E84BF0;
  v95[3] = v93;
  v95[6] = v93;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v96 = sub_1B1AC3830(0x656D676553706163, 0xEA0000000000746ELL, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v94, 1, 0, (uint64_t)v95, v93, 0, 0,
          0,
          v90,
          0);
  swift_release();
  swift_release();
  v30[25] = v96;
  v97 = swift_getKeyPath();
  v98 = swift_getKeyPath();
  v99 = (_QWORD *)swift_allocObject();
  v99[4] = sub_1B1E84BD0;
  v99[5] = v97;
  v99[2] = sub_1B1E84BF0;
  v99[3] = v97;
  v99[6] = v97;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v100 = sub_1B1AC3830(0x6D67655365706970, 0xEB00000000746E65, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, v98, 1, 0, (uint64_t)v99, v97, 0, 0,
           0,
           v90,
           0);
  swift_release();
  swift_release();
  v30[26] = v100;
  v101 = swift_getKeyPath();
  v102 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v103 = (_QWORD *)swift_allocObject();
  v103[4] = sub_1B1E84C58;
  v103[5] = v101;
  v103[2] = sub_1B1B08564;
  v103[3] = v101;
  v103[6] = v101;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v104 = sub_1B1AC38A0(0x7365646F65477369, 0xEA00000000006369, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v102, 1, 0, (uint64_t)v103, v101, 0, 0,
           0,
           v90,
           0);
  swift_release();
  swift_release();
  v30[27] = v104;
  v105 = swift_getKeyPath();
  v106 = swift_getKeyPath();
  v107 = (_QWORD *)swift_allocObject();
  v107[4] = sub_1B1B087E0;
  v107[5] = v105;
  v107[2] = sub_1B1B087E8;
  v107[3] = v105;
  v107[6] = v105;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v108 = MEMORY[0x1E0DEE9D8];
  v109 = sub_1B1AC3404(0x70536C6169646172, 0xEA00000000006E61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v106, 1, 0, (uint64_t)v107, v105, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0);
  swift_release();
  swift_release();
  v30[28] = v109;
  v110 = swift_getKeyPath();
  v111 = swift_getKeyPath();
  v112 = (_QWORD *)swift_allocObject();
  v112[4] = sub_1B1E84C58;
  v112[5] = v110;
  v112[2] = sub_1B1B08564;
  v112[3] = v110;
  v112[6] = v110;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v113 = sub_1B1AC38A0(0x65687073696D6568, 0xEB00000000636972, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v111, 1, 0, (uint64_t)v112, v110, 0, 0,
           0,
           v108,
           0);
  swift_release();
  swift_release();
  *(_QWORD *)(v92 + 232) = v113;
  result = sub_1B2228AD0();
  qword_1EEFD5658 = v92;
  return result;
}

BOOL sub_1B1E81E3C()
{
  unsigned __int8 *v0;

  return *v0 == 9;
}

uint64_t sub_1B1E81E4C()
{
  _BYTE *v0;

  return (*v0 < 6u) & (0x25u >> *v0);
}

uint64_t sub_1B1E81E68()
{
  _BYTE *v0;

  return (*v0 < 8u) & (0xFDu >> *v0);
}

BOOL sub_1B1E81E84()
{
  _BYTE *v0;

  return !*v0 || *v0 == 5;
}

BOOL sub_1B1E81E98()
{
  _BYTE *v0;

  return !*v0 || *v0 == 9;
}

uint64_t sub_1B1E81EAC()
{
  _BYTE *v0;

  return (*v0 < 9uLL) & (0x1DAu >> *v0);
}

BOOL sub_1B1E81EC8()
{
  unsigned __int8 *v0;

  return *v0 == 3;
}

BOOL sub_1B1E81ED8()
{
  unsigned __int8 *v0;

  return *v0 == 8;
}

BOOL sub_1B1E81EE8()
{
  unsigned __int8 *v0;

  return *v0 == 6;
}

BOOL sub_1B1E81EF8()
{
  unsigned __int8 *v0;

  return *v0 == 1;
}

uint64_t sub_1B1E81F08()
{
  _BYTE *v0;

  return (*v0 < 9uLL) & (0x1D8u >> *v0);
}

BOOL sub_1B1E81F24()
{
  unsigned __int8 *v0;

  return *v0 == 4;
}

uint64_t sub_1B1E81F34()
{
  _BYTE *v0;

  return (*v0 < 9uLL) & (0x18Au >> *v0);
}

unint64_t sub_1B1E81F50()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1E81F6C()
{
  return 0x766974696D697250;
}

uint64_t sub_1B1E81F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t type metadata accessor for PrimitiveGeneratorSystem()
{
  return objc_opt_self();
}

uint64_t destroy for PrimitiveGenerator()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PrimitiveGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrimitiveGenerator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

__n128 initializeWithTake for PrimitiveGenerator(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for PrimitiveGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v4 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimitiveGenerator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimitiveGenerator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 128) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimitiveGenerator()
{
  return &type metadata for PrimitiveGenerator;
}

uint64_t *sub_1B1E8242C(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *result;
  uint64_t v5[12];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v3 = *(_OWORD *)(v1 + 32);
  v28[0] = *(_OWORD *)(v1 + 16);
  v28[1] = v3;
  v29 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v28, 0x200000000, v5);
  result = (uint64_t *)sub_1B19ED688((uint64_t)v5, (uint64_t)&v6);
  if (v6)
  {
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    swift_retain();
    sub_1B219A100((uint64_t)&v17, a1);
    swift_release();
    return sub_1B19ED748(v5);
  }
  return result;
}

uint64_t sub_1B1E82504()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  sub_1B1E3F004(1, (uint64_t)&v6);
  swift_release();
  v1 = v7;
  v2 = v8;
  v3 = v10;
  v4 = v9 | 4;
  *(_QWORD *)(v0 + 16) = v6;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  return v0;
}

const char *sub_1B1E825E0()
{
  return "PrimitiveGenerator";
}

unint64_t sub_1B1E825F8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1B1E82624();
  result = sub_1B1E82668();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1B1E82624()
{
  unint64_t result;

  result = qword_1EEF5FD78;
  if (!qword_1EEF5FD78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B638, &type metadata for PrimitiveGenerator.PrimitiveType);
    atomic_store(result, (unint64_t *)&qword_1EEF5FD78);
  }
  return result;
}

unint64_t sub_1B1E82668()
{
  unint64_t result;

  result = qword_1EEF5FD80;
  if (!qword_1EEF5FD80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229B610, &type metadata for PrimitiveGenerator.PrimitiveType);
    atomic_store(result, (unint64_t *)&qword_1EEF5FD80);
  }
  return result;
}

uint64_t sub_1B1E826AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1E82AE0(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A81084, a3);
}

uint64_t sub_1B1E826B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E84C98);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E82764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1E82C0C(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A813C4, a3);
}

uint64_t sub_1B1E82770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1E84CB8);
}

uint64_t sub_1B1E8277C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A8424C(a1, (uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&off_1E63958C8, a2);
  v8 = v7;
  v10 = v9;
  result = swift_release();
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1B1E827F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E84CD4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E828A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A80F68(a1, (uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&off_1E63958C8, a2);
  result = swift_release();
  *(_DWORD *)a3 = v6;
  *(_BYTE *)(a3 + 4) = BYTE4(v6) & 1;
  return result;
}

uint64_t sub_1B1E82914(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E84D10);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E829C0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A82400(a1, (uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&off_1E63958C8, a2);
  v8 = v7;
  result = swift_release();
  *a3 = v6;
  a3[1] = v8;
  return result;
}

uint64_t sub_1B1E82A28(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E84D30);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E82AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1E82AE0(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A84378, a3);
}

uint64_t sub_1B1E82AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;

  swift_retain();
  LOBYTE(a3) = a3(a1, &type metadata for PrimitiveGenerator, &off_1E63958C8, a2);
  result = swift_release();
  *a4 = (_BYTE)a3;
  return result;
}

uint64_t sub_1B1E82B54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E84D68);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1E82C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1E82C0C(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A8118C, a3);
}

uint64_t sub_1B1E82C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t result;

  swift_retain();
  v8 = a3(a1, &type metadata for PrimitiveGenerator, &off_1E63958C8, a2);
  LOBYTE(a2) = v9;
  result = swift_release();
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1B1E82C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1E84D88);
}

uint64_t sub_1B1E82C98()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x17)
    return 23;
  else
    return v0;
}

uint64_t sub_1B1E82CE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_1B1E82DB8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_opt_self();
  objc_msgSend(v2, sel_immediateMode);
  objc_msgSend(v2, sel_setImmediateMode_, 1);
  __asm { BR              X10 }
}

uint64_t sub_1B1E82E3C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t result;

  v6 = (void *)objc_opt_self();
  LODWORD(v7) = *(_DWORD *)(v4 + 4);
  LODWORD(v8) = *(_DWORD *)(v4 + 8);
  LODWORD(v9) = *(_DWORD *)(v4 + 12);
  LODWORD(v10) = *(_DWORD *)(v4 + 16);
  v11 = objc_msgSend(v6, sel_cubeWithWidth_height_length_chamferRadius_, v7, v8, v9, v10);
  objc_msgSend(v11, sel_setWidthSegmentCount_, *(_QWORD *)(v4 + 24));
  objc_msgSend(v11, sel_setHeightSegmentCount_, *(_QWORD *)(v4 + 32));
  objc_msgSend(v11, sel_setLengthSegmentCount_, *(_QWORD *)(v4 + 40));
  objc_msgSend(v11, sel_setChamferSegmentCount_, *(_QWORD *)(v4 + 48));
  objc_msgSend(v2, *(SEL *)(v5 + 3768), v3);
  type metadata accessor for VFXCoreImporter();
  v12 = v11;
  v13 = sub_1B1F4F1E0(v12, 0, v0);

  result = swift_release();
  *v1 = v13;
  return result;
}

float sub_1B1E832E0(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v11;
  _BYTE v12[16];

  sub_1B19F8E54(0, &qword_1EEF5FDE8, (uint64_t (*)(void))sub_1B1E85278, (uint64_t)&type metadata for SimpleFontDescription.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E85278();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12[15] = 0;
    sub_1B22297CC();
    v12[14] = 1;
    sub_1B22297F0();
    v2 = v11;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v2;
}

unint64_t sub_1B1E83488(unint64_t result)
{
  if (result >= 0xA)
    return 10;
  return result;
}

uint64_t sub_1B1E83498@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  _OWORD *v26;
  char v27;
  char *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t result;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  char v39;
  int v40;
  char v41;
  float v42;
  float v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  float v53;
  char v54;
  float v55;
  int v56;
  int v57;
  char *v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  char v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _OWORD *v96;
  float v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  float v102;
  float v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[2];
  uint64_t v118;
  unint64_t v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  char v127;
  _BYTE v128[7];
  uint64_t v129;
  float v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  float v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  float v140;
  float v141;
  char v142;
  _BYTE v143[7];
  __int16 v144;
  char v145;
  uint64_t v146;

  v96 = a2;
  sub_1B19F8E54(0, &qword_1EEF5FD88, (uint64_t (*)(void))sub_1B1E84914, (uint64_t)&type metadata for PrimitiveGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v83 - v8;
  v10 = a1[3];
  v101 = a1;
  sub_1B19FA070(a1, v10);
  sub_1B1E84914();
  sub_1B222A150();
  if (v2)
  {
    v146 = v2;
    v98 = 0;
    v11 = 0;
    v99 = 0x6F6C6C6548;
    v12 = 0.5;
    v97 = 0.25;
    v13 = 0;
    v105 = 0;
    v106 = 0xE500000000000000;
    v104 = 0xE000000000000000;
    v102 = 1.0;
    v103 = 14.0;
    v14 = 1;
    v15 = 10;
    v100 = 48;
    v107 = 24;
    v16 = 1058642330;
    v17 = 0.0;
    v18 = 24;
    v19 = 48;
    v20 = 1.0;
    v21 = 1;
    v22 = 1;
    v23 = 1.0;
    v24 = 1.0;
    v25 = 1.0;
LABEL_15:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v101);
    LOBYTE(v118) = v11;
    *(_WORD *)((char *)&v118 + 1) = v144;
    BYTE3(v118) = v145;
    *((float *)&v118 + 1) = v24;
    v119 = __PAIR64__(LODWORD(v20), LODWORD(v23));
    v120 = v17;
    v121 = v22;
    v122 = v21;
    v123 = v14;
    v124 = v15;
    v125 = v12;
    v126 = v19;
    v127 = v98;
    *(_DWORD *)&v128[3] = *(_DWORD *)&v143[3];
    *(_DWORD *)v128 = *(_DWORD *)v143;
    v129 = v100;
    v130 = v97;
    v131 = v18;
    v132 = v13;
    v133 = v107;
    v134 = v99;
    v135 = v106;
    v136 = v102;
    v137 = v16;
    v138 = v105;
    v139 = v104;
    v140 = v103;
    v141 = v25;
    v142 = 0;
    return sub_1B1E84958((uint64_t)&v118);
  }
  v95 = v6;
  v26 = v96;
  LOBYTE(v118) = 0;
  v27 = sub_1B222988C();
  v94 = 0;
  if ((v27 & 1) != 0)
  {
    LOBYTE(v108) = 0;
    sub_1B1E82624();
    v28 = v9;
    sub_1B2229814();
    v94 = v118;
  }
  else
  {
    v28 = v9;
  }
  LOBYTE(v118) = 1;
  v29 = 1.0;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 1;
    sub_1B22297F0();
    v24 = v30;
  }
  else
  {
    v24 = 1.0;
  }
  LOBYTE(v118) = 2;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 2;
    sub_1B22297F0();
    v29 = v31;
  }
  LOBYTE(v118) = 3;
  v20 = 1.0;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 3;
    sub_1B22297F0();
    v20 = v32;
  }
  LOBYTE(v118) = 4;
  v17 = 0.0;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 4;
    sub_1B22297F0();
    v17 = v34;
  }
  LOBYTE(v118) = 5;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 5;
    v35 = sub_1B22297FC();
  }
  else
  {
    v35 = 1;
  }
  LOBYTE(v118) = 6;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 6;
    v36 = sub_1B22297FC();
  }
  else
  {
    v36 = 1;
  }
  LOBYTE(v118) = 7;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 7;
    v93 = sub_1B22297FC();
  }
  else
  {
    v93 = 1;
  }
  LOBYTE(v118) = 8;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 8;
    v92 = sub_1B22297FC();
  }
  else
  {
    v92 = 10;
  }
  LOBYTE(v118) = 9;
  v37 = 0.5;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 9;
    sub_1B22297F0();
    v37 = v38;
  }
  LOBYTE(v118) = 10;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 10;
    v91 = sub_1B22297FC();
  }
  else
  {
    v91 = 48;
  }
  LOBYTE(v118) = 11;
  v39 = sub_1B222988C();
  v90 = v36;
  if ((v39 & 1) != 0)
  {
    LOBYTE(v118) = 11;
    v40 = sub_1B22297D8() & 1;
  }
  else
  {
    v40 = 0;
  }
  LOBYTE(v118) = 12;
  v41 = sub_1B222988C();
  v98 = v40;
  if ((v41 & 1) != 0)
  {
    LOBYTE(v118) = 12;
    v100 = sub_1B22297FC();
  }
  else
  {
    v100 = 48;
  }
  LOBYTE(v118) = 13;
  v42 = 0.25;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 13;
    sub_1B22297F0();
    v42 = v43;
  }
  LOBYTE(v118) = 14;
  v44 = sub_1B222988C();
  v88 = v28;
  v89 = v5;
  v97 = v42;
  if ((v44 & 1) != 0)
  {
    LOBYTE(v118) = 14;
    v45 = sub_1B22297FC();
    v87 = v35;
  }
  else
  {
    v87 = v35;
    v45 = 24;
  }
  LOBYTE(v118) = 15;
  v46 = 0;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 15;
    sub_1B22297F0();
    v46 = v47;
  }
  LOBYTE(v118) = 16;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 16;
    v48 = sub_1B22297FC();
    v86 = v45;
    v107 = v48;
  }
  else
  {
    v86 = v45;
    v107 = 24;
  }
  v49 = 0x6F6C6C6548;
  LOBYTE(v118) = 17;
  v50 = sub_1B222988C();
  v85 = v46;
  if ((v50 & 1) != 0)
  {
    LOBYTE(v118) = 17;
    v51 = sub_1B22297CC();
    v106 = v52;
    v49 = v51;
  }
  else
  {
    v106 = 0xE500000000000000;
  }
  v53 = v42;
  LOBYTE(v118) = 18;
  v54 = sub_1B222988C();
  v99 = v49;
  if ((v54 & 1) != 0)
  {
    v12 = v37;
    LOBYTE(v118) = 18;
    sub_1B22297F0();
    v102 = v55;
  }
  else
  {
    v102 = 1.0;
    v12 = v37;
  }
  v23 = v29;
  LOBYTE(v118) = 19;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 19;
    sub_1B22297F0();
    v146 = 0;
    v57 = v56;
  }
  else
  {
    v57 = 1058642330;
  }
  LOBYTE(v118) = 20;
  v58 = v88;
  v59 = sub_1B222988C();
  v84 = v57;
  if ((v59 & 1) != 0)
  {
    LOBYTE(v108) = 20;
    sub_1B1E849C0();
    sub_1B2229814();
    v146 = 0;
    v60 = v118;
    v61 = v119;
    v62 = v120;
  }
  else
  {
    v146 = 0;
    v60 = 0;
    v61 = 0xE000000000000000;
    v62 = 14.0;
  }
  LOBYTE(v118) = 21;
  v63 = v89;
  v64 = sub_1B222988C();
  v25 = 1.0;
  v104 = v61;
  v105 = v60;
  v103 = v62;
  if ((v64 & 1) != 0)
  {
    LOBYTE(v118) = 21;
    v65 = v146;
    sub_1B22297F0();
    v146 = v65;
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v63);
LABEL_68:
      v11 = v94;
      v15 = v92;
      v14 = v93;
      v18 = v86;
      v22 = v87;
      v21 = v90;
      v19 = v91;
      v16 = v84;
      v13 = v85;
      goto LABEL_15;
    }
    v25 = v66;
  }
  LOBYTE(v118) = 22;
  if ((sub_1B222988C() & 1) != 0)
  {
    LOBYTE(v118) = 22;
    v67 = v146;
    v68 = sub_1B22297D8();
    v146 = v67;
    if (v67)
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v88, v89);
      goto LABEL_68;
    }
    v70 = v68;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v88, v89);
    v69 = v70 & 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v63);
    v69 = 0;
  }
  LODWORD(v95) = v69;
  LOBYTE(v108) = v94;
  *(_WORD *)((char *)&v108 + 1) = v144;
  BYTE3(v108) = v145;
  *(_QWORD *)((char *)&v108 + 4) = __PAIR64__(LODWORD(v23), LODWORD(v24));
  *((float *)&v108 + 3) = v20;
  *(float *)&v109 = v17;
  v71 = v87;
  v72 = v90;
  *((_QWORD *)&v109 + 1) = v87;
  *(_QWORD *)&v110 = v90;
  v73 = v92;
  v74 = v93;
  *((_QWORD *)&v110 + 1) = v93;
  *(_QWORD *)&v111 = v92;
  *((float *)&v111 + 2) = v12;
  *(_QWORD *)&v112 = v91;
  BYTE8(v112) = v40;
  HIDWORD(v112) = *(_DWORD *)&v143[3];
  *(_DWORD *)((char *)&v112 + 9) = *(_DWORD *)v143;
  v76 = v99;
  v75 = v100;
  *(_QWORD *)&v113 = v100;
  *((float *)&v113 + 2) = v53;
  *(_QWORD *)&v114 = v86;
  v77 = v85;
  DWORD2(v114) = v85;
  *(_QWORD *)&v115 = v107;
  *((_QWORD *)&v115 + 1) = v99;
  *(_QWORD *)&v116 = v106;
  *((_QWORD *)&v116 + 1) = __PAIR64__(v84, LODWORD(v102));
  *(_QWORD *)&v117[0] = v105;
  *((_QWORD *)&v117[0] + 1) = v104;
  *(_QWORD *)&v117[1] = __PAIR64__(LODWORD(v25), LODWORD(v103));
  BYTE8(v117[1]) = v69;
  sub_1B1E8498C((uint64_t)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v101);
  LOBYTE(v118) = v94;
  *(_WORD *)((char *)&v118 + 1) = v144;
  BYTE3(v118) = v145;
  *((float *)&v118 + 1) = v24;
  v119 = __PAIR64__(LODWORD(v20), LODWORD(v23));
  v120 = v17;
  v121 = v71;
  v122 = v72;
  v123 = v74;
  v124 = v73;
  v125 = v12;
  v126 = v91;
  v127 = v40;
  *(_DWORD *)&v128[3] = *(_DWORD *)&v143[3];
  *(_DWORD *)v128 = *(_DWORD *)v143;
  v129 = v75;
  v130 = v53;
  v131 = v86;
  v132 = v77;
  v133 = v107;
  v134 = v76;
  v135 = v106;
  v136 = v102;
  v137 = v84;
  v138 = v105;
  v139 = v104;
  v140 = v103;
  v141 = v25;
  v142 = v95;
  result = sub_1B1E84958((uint64_t)&v118);
  v78 = v117[0];
  v26[8] = v116;
  v26[9] = v78;
  *(_OWORD *)((char *)v26 + 153) = *(_OWORD *)((char *)v117 + 9);
  v79 = v113;
  v26[4] = v112;
  v26[5] = v79;
  v80 = v115;
  v26[6] = v114;
  v26[7] = v80;
  v81 = v109;
  *v26 = v108;
  v26[1] = v81;
  v82 = v111;
  v26[2] = v110;
  v26[3] = v82;
  return result;
}

unint64_t sub_1B1E84914()
{
  unint64_t result;

  result = qword_1EEF5FD90;
  if (!qword_1EEF5FD90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BE74, &type metadata for PrimitiveGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FD90);
  }
  return result;
}

uint64_t sub_1B1E84958(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1E8498C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1B1E849C0()
{
  unint64_t result;

  result = qword_1EEF5FD98;
  if (!qword_1EEF5FD98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BE4C, &type metadata for SimpleFontDescription);
    atomic_store(result, (unint64_t *)&qword_1EEF5FD98);
  }
  return result;
}

unint64_t sub_1B1E84A04()
{
  unint64_t result;

  result = qword_1EEF5FDA8;
  if (!qword_1EEF5FDA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BE24, &type metadata for SimpleFontDescription);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDA8);
  }
  return result;
}

unsigned __int8 *sub_1B1E84A48@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1B1E84A54(unint64_t *a1, _BYTE *a2)
{
  unint64_t result;

  result = sub_1B1E83488(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B1E84A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82C0C(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1E84A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1E84D88);
}

uint64_t sub_1B1E84ABC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82AE0(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A84378, a2);
}

_BYTE *sub_1B1E84ADC@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 9;
  return result;
}

_BYTE *sub_1B1E84AF0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result < 6u) & (0x25u >> *result);
  return result;
}

_BYTE *sub_1B1E84B10@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result < 8u) & (0xFDu >> *result);
  return result;
}

_BYTE *sub_1B1E84B30@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  BOOL v2;
  char v3;

  if (*result)
    v2 = *result == 5;
  else
    v2 = 1;
  v3 = v2;
  *a2 = v3;
  return result;
}

_BYTE *sub_1B1E84B48@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  BOOL v2;
  char v3;

  if (*result)
    v2 = *result == 9;
  else
    v2 = 1;
  v3 = v2;
  *a2 = v3;
  return result;
}

_BYTE *sub_1B1E84B60@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result < 9uLL) & (0x1DAu >> *result);
  return result;
}

_BYTE *sub_1B1E84B80@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 2;
  return result;
}

_BYTE *sub_1B1E84B94@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 3;
  return result;
}

_BYTE *sub_1B1E84BA8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 8;
  return result;
}

_BYTE *sub_1B1E84BBC@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 6;
  return result;
}

uint64_t sub_1B1E84BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82C0C(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1E84BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1E84CB8);
}

_BYTE *sub_1B1E84C10@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 1;
  return result;
}

_BYTE *sub_1B1E84C24@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result < 9uLL) & (0x1D8u >> *result);
  return result;
}

_BYTE *sub_1B1E84C44@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 4;
  return result;
}

uint64_t sub_1B1E84C58@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82AE0(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A81084, a2);
}

_BYTE *sub_1B1E84C78@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result < 9uLL) & (0x18Au >> *result);
  return result;
}

_QWORD *sub_1B1E84C98(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A78534(a1, **(_BYTE **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B1E84CB8(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A78560);
}

uint64_t sub_1B1E84CD4()
{
  uint64_t v0;

  return sub_1B1A7EC40(**(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(float *)(*(_QWORD *)(v0 + 16) + 16));
}

_QWORD *sub_1B1E84D10(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A7858C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), **(float **)(v1 + 16));
}

uint64_t sub_1B1E84D30()
{
  uint64_t v0;

  return sub_1B1A7EDC8(**(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

_QWORD *sub_1B1E84D68(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A785B8(a1, **(_BYTE **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B1E84D88(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A785E4);
}

unint64_t sub_1B1E84DA4()
{
  unint64_t result;

  result = qword_1EEF5FDB0;
  if (!qword_1EEF5FDB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BDEC, &type metadata for PrimitiveGenerator.PrimitiveType);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PrimitiveGenerator.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_1B1E84E34 + 4 * byte_1B229B53C[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_1B1E84E68 + 4 * byte_1B229B537[v4]))();
}

uint64_t sub_1B1E84E68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E84E70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E84E78);
  return result;
}

uint64_t sub_1B1E84E84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E84E8CLL);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_1B1E84E90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E84E98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrimitiveGenerator.CodingKeys()
{
  return &type metadata for PrimitiveGenerator.CodingKeys;
}

uint64_t sub_1B1E84EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SimpleFontDescription(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for SimpleFontDescription(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SimpleFontDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleFontDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleFontDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleFontDescription()
{
  return &type metadata for SimpleFontDescription;
}

uint64_t storeEnumTagSinglePayload for PrimitiveGenerator.PrimitiveType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B1E85074 + 4 * byte_1B229B546[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B1E850A8 + 4 * byte_1B229B541[v4]))();
}

uint64_t sub_1B1E850A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E850B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E850B8);
  return result;
}

uint64_t sub_1B1E850C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E850CCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B1E850D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E850D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrimitiveGenerator.PrimitiveType()
{
  return &type metadata for PrimitiveGenerator.PrimitiveType;
}

unint64_t sub_1B1E850F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5FDB8;
  if (!qword_1EEF5FDB8)
  {
    sub_1B1A02758(255, &qword_1EEF5FDC0, (uint64_t)&type metadata for PrimitiveGenerator.PrimitiveType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDB8);
  }
  return result;
}

unint64_t sub_1B1E8515C()
{
  unint64_t result;

  result = qword_1EEF5FDC8;
  if (!qword_1EEF5FDC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BCAC, &type metadata for PrimitiveGenerator.PrimitiveType);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDC8);
  }
  return result;
}

unint64_t sub_1B1E851A4()
{
  unint64_t result;

  result = qword_1EEF5FDD0;
  if (!qword_1EEF5FDD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BDC4, &type metadata for PrimitiveGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDD0);
  }
  return result;
}

unint64_t sub_1B1E851EC()
{
  unint64_t result;

  result = qword_1EEF5FDD8;
  if (!qword_1EEF5FDD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BCFC, &type metadata for PrimitiveGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDD8);
  }
  return result;
}

unint64_t sub_1B1E85234()
{
  unint64_t result;

  result = qword_1EEF5FDE0;
  if (!qword_1EEF5FDE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BD24, &type metadata for PrimitiveGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDE0);
  }
  return result;
}

unint64_t sub_1B1E85278()
{
  unint64_t result;

  result = qword_1EEF5FDF0;
  if (!qword_1EEF5FDF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BF7C, &type metadata for SimpleFontDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FDF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SimpleFontDescription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1E85308 + 4 * byte_1B229B550[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1E8533C + 4 * byte_1B229B54B[v4]))();
}

uint64_t sub_1B1E8533C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E85344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E8534CLL);
  return result;
}

uint64_t sub_1B1E85358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E85360);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1E85364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E8536C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SimpleFontDescription.CodingKeys()
{
  return &type metadata for SimpleFontDescription.CodingKeys;
}

unint64_t sub_1B1E8538C()
{
  unint64_t result;

  result = qword_1EEF5FE00;
  if (!qword_1EEF5FE00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BF54, &type metadata for SimpleFontDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE00);
  }
  return result;
}

unint64_t sub_1B1E853D4()
{
  unint64_t result;

  result = qword_1EEF5FE08;
  if (!qword_1EEF5FE08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BEC4, &type metadata for SimpleFontDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE08);
  }
  return result;
}

unint64_t sub_1B1E8541C()
{
  unint64_t result;

  result = qword_1EEF5FE10;
  if (!qword_1EEF5FE10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229BEEC, &type metadata for SimpleFontDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE10);
  }
  return result;
}

ValueMetadata *type metadata accessor for Static()
{
  return &type metadata for Static;
}

ValueMetadata *type metadata accessor for SpaceOverride()
{
  return &type metadata for SpaceOverride;
}

ValueMetadata *type metadata accessor for LastFrameWorldTransform()
{
  return &type metadata for LastFrameWorldTransform;
}

ValueMetadata *type metadata accessor for Parent()
{
  return &type metadata for Parent;
}

ValueMetadata *type metadata accessor for InverseWorldTransform()
{
  return &type metadata for InverseWorldTransform;
}

ValueMetadata *type metadata accessor for WorldTransform()
{
  return &type metadata for WorldTransform;
}

double sub_1B1E854C4(unint64_t a1, int32x2_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  unint64_t v6;
  int32x2_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  double v21;
  float32x4_t v23;
  _QWORD v24[2];
  _QWORD v25[10];
  _BYTE v26[80];
  _BYTE v27[80];

  sub_1B1E85B04(a1, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v24, a2, 0, 1);
  v4 = v24[0];
  v3 = v24[1];
  sub_1B1AE09AC((uint64_t)v24, (uint64_t)v27);
  if ((v27[64] & 1) != 0)
  {
    v23 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v5.i64[0] = v4;
    v5.i64[1] = v3;
    v23 = v5;
  }
  v6 = sub_1B1D1593C(a1);
  if ((v8 & 1) != 0)
    return *(double *)v23.i64;
  sub_1B1E85B04(v6, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v25, v7, 0, 1);
  v10 = v25[0];
  v9 = v25[1];
  v12 = v25[2];
  v11 = v25[3];
  v14 = v25[4];
  v13 = v25[5];
  v16 = v25[6];
  v15 = v25[7];
  sub_1B1AE09AC((uint64_t)v25, (uint64_t)v26);
  if ((v26[64] & 1) != 0)
  {
    v17 = (float32x4_t)xmmword_1B2244E20;
    v18 = (float32x4_t)xmmword_1B2244D90;
    v19 = (float32x4_t)xmmword_1B2244DD0;
    v20 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v20.i64[0] = v10;
    v20.i64[1] = v9;
    v19.i64[0] = v12;
    v19.i64[1] = v11;
    v18.i64[0] = v14;
    v18.i64[1] = v13;
    v17.i64[0] = v16;
    v17.i64[1] = v15;
  }
  *(_QWORD *)&v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v23.f32[0]), v19, *(float32x2_t *)v23.f32, 1), v18, v23, 2), v17, v23, 3).u64[0];
  return v21;
}

uint64_t sub_1B1E856CC(unint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return MEMORY[0x1E0DEE9D8];
  swift_retain();
  if (v3 < 0
    || v3 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v4 != -1)
    && *(_DWORD *)(v5 + 12 * v3 + 8) != (_DWORD)v4)
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v8 = sub_1B1D1E9C8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * v3) + 32));
  swift_release();
  v6 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v15 = MEMORY[0x1E0DEE9D8];
      sub_1B202AD48(0, v9, 0);
      v10 = 0;
      v6 = v15;
      do
      {
        v11 = *(_QWORD *)(v8 + 8 * v10 + 32);
        v13 = *(_QWORD *)(v15 + 16);
        v12 = *(_QWORD *)(v15 + 24);
        if (v13 >= v12 >> 1)
          sub_1B202AD48(v12 > 1, v13 + 1, 1);
        ++v10;
        *(_QWORD *)(v15 + 16) = v13 + 1;
        v14 = v15 + 16 * v13;
        *(_QWORD *)(v14 + 32) = v11;
        *(_QWORD *)(v14 + 40) = a2;
      }
      while (v9 != v10);
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1B1E85854(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (result = 0, (_DWORD)v3))
  {
    result = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
        && (v6 = (unsigned int *)(v5 + 12 * (int)a1),
            sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * (int)*v6 + 32), (uint64_t)&type metadata for Children, *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), v1, &v8), v8))
      {
        v8 = (_QWORD *)*v8;
        swift_bridgeObjectRetain();
        swift_getAtKeyPath();
        swift_bridgeObjectRelease();
        return v7;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

double sub_1B1E85968(unint64_t a1, int32x2_t a2)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  double result;
  _BYTE v7[80];
  double v8;
  _BYTE v9[80];
  double v10[8];
  char v11;

  if (a1 != 0xFFFFFFFF
    && (uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_DWORD *)(v4 + 12 * (int)a1), *(_WORD *)(v4 + 12 * (int)a1 + 4), 64, v2, (uint64_t)v7);
      sub_1B1A18378((uint64_t)v7, (uint64_t)v10, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
      if ((v11 & 1) == 0)
        return v10[0];
    }
  }
  sub_1B1E85B04(a1, 0, 0, 1, 0, 0, 1, 0, (uint64_t)&v8, a2, 0, 1);
  v5 = v8;
  sub_1B1AE09AC((uint64_t)&v8, (uint64_t)v9);
  if ((v9[64] & 1) == 0)
    return v5;
  *(_QWORD *)&result = 1065353216;
  return result;
}

void sub_1B1E85B04(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int32x2_t a10@<D0>, uint64_t a11, char a12)
{
  uint64_t v12;
  unint64_t v17;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  float32x4_t v42;
  BOOL v43;
  float v44;
  float v45;
  float32x4_t v46;
  char v47;
  float32x4_t v48;
  int8x16_t v49;
  __int128 v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  __int128 v87;

  v17 = HIDWORD(a1);
  if ((a4 & 1) == 0)
  {
    v20 = 0;
    v21 = a12;
    if ((a7 & 1) == 0)
      goto LABEL_3;
LABEL_7:
    if ((_DWORD)a1 != -1 || (_DWORD)v17)
    {
      a5 = 0;
      v22 = 1;
      if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001
        || (int)a1 >= *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
      {
        a6 = 0;
        if ((v21 & 1) == 0)
          goto LABEL_26;
        goto LABEL_31;
      }
      v24 = *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v17 == -1 || *(_DWORD *)(v24 + 12 * (int)a1 + 8) == (_DWORD)v17)
      {
        v32 = a8;
        v33 = a3;
        v34 = sub_1B1D1EDC4(*(_QWORD *)(*(_QWORD *)(v12 + 136) + 8 * *(int *)(v24 + 12 * (int)a1) + 32), *(_DWORD *)(v24 + 12 * (int)a1), *(_WORD *)(v24 + 12 * (int)a1 + 4), 16, v12);
        a3 = v33;
        a8 = v32;
        a5 = v34;
        a6 = v35;
        v22 = v36 & 1;
        if ((v21 & 1) == 0)
          goto LABEL_26;
        goto LABEL_31;
      }
      a5 = 0;
      a6 = 0;
      if ((v21 & 1) != 0)
        goto LABEL_31;
    }
    else
    {
      a5 = 0;
      a6 = 0;
      v22 = 1;
      if ((v21 & 1) != 0)
        goto LABEL_31;
    }
LABEL_26:
    v25 = 0;
    v26 = a11;
    if ((v22 & 1) != 0)
      goto LABEL_39;
    goto LABEL_32;
  }
  if (a1 == 0xFFFFFFFF)
  {
    a2 = 0;
    a3 = 0;
    v20 = 1;
    v21 = a12;
    if ((a7 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    a2 = 0;
    v20 = 1;
    if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001
      || (int)a1 >= *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      a3 = 0;
      v21 = a12;
      if ((a7 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v23 = *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (HIDWORD(a1) == -1 || *(_DWORD *)(v23 + 12 * (int)a1 + 8) == HIDWORD(a1))
      {
        v27 = a5;
        v28 = a8;
        v29 = sub_1B1D1ED54(*(_QWORD *)(*(_QWORD *)(v12 + 136) + 8 * *(int *)(v23 + 12 * (int)a1) + 32), *(_DWORD *)(v23 + 12 * (int)a1), *(_WORD *)(v23 + 12 * (int)a1 + 4), 16, v12);
        a5 = v27;
        a8 = v28;
        a2 = v29;
        a3 = v30;
        v20 = v31 & 1;
        v21 = a12;
        if ((a7 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        a2 = 0;
        a3 = 0;
        v21 = a12;
        if ((a7 & 1) != 0)
          goto LABEL_7;
      }
    }
  }
LABEL_3:
  v22 = 0;
  if ((v21 & 1) == 0)
    goto LABEL_26;
LABEL_31:
  v37 = a5;
  v38 = a3;
  sub_1B1E8611C(a1, a10);
  a3 = v38;
  a5 = v37;
  a8 = v39;
  v25 = v40 & 1;
  if ((v22 & 1) != 0)
  {
LABEL_39:
    if ((v20 & 1) != 0)
    {
      if ((v25 & 1) != 0)
      {
        v46 = 0uLL;
        v47 = 1;
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        goto LABEL_54;
      }
      v58.i64[0] = a8;
      v58.i64[1] = v26;
      v46.f32[0] = sub_1B1C318D4(v58);
LABEL_50:
      v47 = 0;
      goto LABEL_54;
    }
    *(_QWORD *)&v50 = a2;
    DWORD2(v50) = a3;
    if ((v25 & 1) != 0)
    {
      v47 = 0;
      HIDWORD(v50) = 1.0;
      v49 = (int8x16_t)xmmword_1B2244D90;
      v48 = (float32x4_t)xmmword_1B2244DD0;
      v46 = (float32x4_t)xmmword_1B2244DB0;
    }
    else
    {
      v47 = 0;
      v59.i64[0] = a8;
      HIDWORD(v50) = 1.0;
      v59.i64[1] = v26;
      v60 = vabsq_f32(v59);
      v60.i32[3] = 0;
      v49.i64[0] = 0x8000000080000000;
      v49.i64[1] = 0x8000000080000000;
      v61 = vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v60, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v59, v49));
      v46 = (float32x4_t)v61.u32[0];
      v49.i8[3] = 0;
      v49.i8[7] = 0;
      v49.i8[15] = 0;
      v48.i32[0] = 0;
      v48.i64[1] = 0;
      v48.i32[1] = v61.i32[1];
      v49.i32[2] = v61.i32[2];
    }
    goto LABEL_54;
  }
LABEL_32:
  v41 = 0;
  v42.i64[0] = a5;
  v42.i64[1] = a6;
  while (1)
  {
    v86 = v42;
    v44 = *(float *)((unint64_t)&v86 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3)));
    v87 = xmmword_1B2244E20;
    v45 = *(float *)((unint64_t)&v87 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3)));
    v43 = v44 == v45;
    if (v41 == 3)
      break;
    while (1)
    {
      ++v41;
      if (v43)
        break;
      if (v41 == 3)
        goto LABEL_42;
      v43 = 0;
    }
  }
  if (v44 == v45)
    goto LABEL_39;
LABEL_42:
  if ((v20 & 1) != 0)
  {
    if ((v25 & 1) == 0)
    {
      v47 = 0;
      v62.i64[0] = a8;
      v62.i64[1] = v26;
      v63 = vabsq_f32(v62);
      v63.i32[3] = 0;
      v64.i64[0] = 0x8000000080000000;
      v64.i64[1] = 0x8000000080000000;
      v65 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v63, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v62, v64));
      v66 = vmulq_f32(v42, v42);
      v67 = vmulq_laneq_f32(v42, v42, 3);
      v68 = vmuls_lane_f32(*(float *)&a5, *(float32x2_t *)v42.f32, 1);
      v69 = vaddq_f32(v65, v65);
      v66.f32[0] = 0.5 - v66.f32[0];
      v70 = vmul_laneq_f32((float32x2_t)__PAIR64__(v42.u32[1], a5), v42, 2);
      v71.i32[3] = 0;
      v72.i32[3] = 0;
      v72.f32[0] = (float)(0.5 - v66.f32[1]) - v66.f32[2];
      v72.f32[1] = v68 + v67.f32[2];
      v72.f32[2] = v70.f32[0] - v67.f32[1];
      v46 = vmulq_n_f32(v72, v69.f32[0]);
      v71.f32[0] = v68 - v67.f32[2];
      v71.f32[1] = v66.f32[0] - v66.f32[2];
      v71.f32[2] = v70.f32[1] + v67.f32[0];
      v48 = vmulq_lane_f32(v71, *(float32x2_t *)v69.f32, 1);
      *(int32x2_t *)v67.f32 = vrev64_s32(*(int32x2_t *)v67.f32);
      v73.i32[0] = vadd_f32(v70, *(float32x2_t *)v67.f32).u32[0];
      v73.i32[1] = vsub_f32(v70, *(float32x2_t *)&v67).i32[1];
      v73.f32[2] = v66.f32[0] - v66.f32[1];
      v73.i32[3] = 0;
      v49 = (int8x16_t)vmulq_laneq_f32(v73, v69, 2);
      v50 = xmmword_1B2244E20;
      goto LABEL_54;
    }
    *(double *)v46.i64 = sub_1B1D98C28(v42);
    goto LABEL_50;
  }
  *(_QWORD *)&v50 = a2;
  DWORD2(v50) = a3;
  if ((v25 & 1) != 0)
  {
    v47 = 0;
    HIDWORD(v50) = 1.0;
    v51 = vmulq_f32(v42, v42);
    v52 = vmulq_laneq_f32(v42, v42, 3);
    v53 = vmuls_lane_f32(*(float *)&a5, *(float32x2_t *)v42.f32, 1);
    v51.f32[0] = 0.5 - v51.f32[0];
    v54 = vmul_laneq_f32((float32x2_t)__PAIR64__(v42.u32[1], a5), v42, 2);
    v55.i32[3] = 0;
    v55.f32[0] = (float)(0.5 - v51.f32[1]) - v51.f32[2];
    v55.f32[1] = v53 + v52.f32[2];
    v56.i32[3] = 0;
    v55.f32[2] = v54.f32[0] - v52.f32[1];
    v46 = vaddq_f32(v55, v55);
    v56.f32[0] = v53 - v52.f32[2];
    v56.f32[1] = v51.f32[0] - v51.f32[2];
    v56.f32[2] = v54.f32[1] + v52.f32[0];
    v48 = vaddq_f32(v56, v56);
    *(int32x2_t *)v52.f32 = vrev64_s32(*(int32x2_t *)v52.f32);
    v57.i32[0] = vadd_f32(v54, *(float32x2_t *)v52.f32).u32[0];
    v57.i32[1] = vsub_f32(v54, *(float32x2_t *)&v52).i32[1];
    v57.f32[2] = v51.f32[0] - v51.f32[1];
    v57.i32[3] = 0;
    v49 = (int8x16_t)vaddq_f32(v57, v57);
  }
  else
  {
    v47 = 0;
    v74.i64[0] = a8;
    HIDWORD(v50) = 1.0;
    v74.i64[1] = v26;
    v75 = vabsq_f32(v74);
    v75.i32[3] = 0;
    v76.i64[0] = 0x8000000080000000;
    v76.i64[1] = 0x8000000080000000;
    v77 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v75, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v74, v76));
    v78 = vmulq_f32(v42, v42);
    v79 = vmulq_laneq_f32(v42, v42, 3);
    v80 = vmuls_lane_f32(*(float *)&a5, *(float32x2_t *)v42.f32, 1);
    v81 = vaddq_f32(v77, v77);
    v78.f32[0] = 0.5 - v78.f32[0];
    v82 = vmul_laneq_f32((float32x2_t)__PAIR64__(v42.u32[1], a5), v42, 2);
    v83.i32[3] = 0;
    v83.f32[0] = (float)(0.5 - v78.f32[1]) - v78.f32[2];
    v83.f32[1] = v80 + v79.f32[2];
    v84.i32[3] = 0;
    v83.f32[2] = v82.f32[0] - v79.f32[1];
    v46 = vmulq_n_f32(v83, v81.f32[0]);
    v84.f32[0] = v80 - v79.f32[2];
    v84.f32[1] = v78.f32[0] - v78.f32[2];
    v84.f32[2] = v82.f32[1] + v79.f32[0];
    v48 = vmulq_lane_f32(v84, *(float32x2_t *)v81.f32, 1);
    *(int32x2_t *)v79.f32 = vrev64_s32(*(int32x2_t *)v79.f32);
    v85.i32[0] = vadd_f32(v82, *(float32x2_t *)v79.f32).u32[0];
    v85.i32[1] = vsub_f32(v82, *(float32x2_t *)&v79).i32[1];
    v85.f32[2] = v78.f32[0] - v78.f32[1];
    v85.i32[3] = 0;
    v49 = (int8x16_t)vmulq_laneq_f32(v85, v81, 2);
  }
LABEL_54:
  *(float32x4_t *)a9 = v46;
  *(float32x4_t *)(a9 + 16) = v48;
  *(int8x16_t *)(a9 + 32) = v49;
  *(_OWORD *)(a9 + 48) = v50;
  *(_BYTE *)(a9 + 64) = v47;
}

int32x2_t sub_1B1E8611C(unint64_t a1, int32x2_t result)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return result;
  v4 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
  v6 = a1 << 32;
  v7 = (int)a1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001 && (int)a1 < v5)
  {
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v8 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      sub_1B1D1EE34(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_DWORD *)(v8 + 12 * (int)a1), *(_WORD *)(v8 + 12 * (int)a1 + 4), 16, v2);
      if ((v11 & 1) == 0)
        return result;
      v4 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
      v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
      if (v6 < (uint64_t)0xFFFFFFFF00000001)
        goto LABEL_17;
      goto LABEL_8;
    }
  }
  if (v6 >= (uint64_t)0xFFFFFFFF00000001)
  {
LABEL_8:
    if (v7 < v5)
    {
      v9 = *(_QWORD *)(v2 + v4);
      if ((_DWORD)v3 == -1 || *(_DWORD *)(v9 + 12 * (int)v7 + 8) == (_DWORD)v3)
      {
        v10 = sub_1B1D1EEA4(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v9 + 12 * (int)v7) + 32), *(_DWORD *)(v9 + 12 * (int)v7), *(_WORD *)(v9 + 12 * (int)v7 + 4), 4, v2);
        if ((v10 & 0x100000000) == 0)
        {
          result.i32[0] = v10;
          return (int32x2_t)vdupq_lane_s32(result, 0).u64[0];
        }
        v4 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
        v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
      }
    }
  }
LABEL_17:
  if (v6 >= (uint64_t)0xFFFFFFFF00000001 && v7 < v5)
  {
    v12 = *(_QWORD *)(v2 + v4);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v12 + 12 * (int)v7 + 8) == (_DWORD)v3)
    {
      v13 = sub_1B1D1EF1C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v12 + 12 * (int)v7) + 32), *(_DWORD *)(v12 + 12 * (int)v7), *(_WORD *)(v12 + 12 * (int)v7 + 4), 8, v2);
      if ((v14 & 1) == 0)
        return (int32x2_t)v13;
    }
  }
  return result;
}

void sub_1B1E8632C(unint64_t a1@<X0>, uint64_t a2@<X1>, simd_float4x4 *a3@<X8>)
{
  unint64_t v6;
  simd_float4x4 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[80];
  _BYTE v12[80];
  simd_float4x4 v13;
  char v14;
  simd_float4x4 v15;
  char v16;

  v6 = HIDWORD(a1);
  v7.columns[0] = 0uLL;
  if (a1 == 0xFFFFFFFF)
  {
    v8 = 1;
    v7.columns[1] = 0uLL;
    v7.columns[2] = 0uLL;
    v7.columns[3] = 0uLL;
  }
  else
  {
    swift_retain();
    if (((a1 << 32) & 0x8000000000000000) == 0
      && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      && ((v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v6 == -1)
       || *(_DWORD *)(v9 + 12 * (int)a1 + 8) == (_DWORD)v6))
    {
      sub_1B1D1EF80(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_DWORD *)(v9 + 12 * (int)a1), *(_WORD *)(v9 + 12 * (int)a1 + 4), 64, a2, (uint64_t)v11);
      swift_release();
      sub_1B1A18378((uint64_t)v11, (uint64_t)&v15, &qword_1ED4B9808, (uint64_t)&type metadata for InverseWorldTransform);
      if ((v16 & 1) == 0)
      {
        v8 = 0;
        v7 = v15;
        goto LABEL_14;
      }
    }
    else
    {
      swift_release();
    }
    swift_retain();
    if (((a1 << 32) & 0x8000000000000000) == 0
      && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      && ((v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v6 == -1)
       || *(_DWORD *)(v10 + 12 * (int)a1 + 8) == (_DWORD)v6))
    {
      sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v10 + 12 * (int)a1) + 32), *(_DWORD *)(v10 + 12 * (int)a1), *(_WORD *)(v10 + 12 * (int)a1 + 4), 64, a2, (uint64_t)v12);
      swift_release();
      sub_1B1A18378((uint64_t)v12, (uint64_t)&v13, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
      if ((v14 & 1) == 0)
      {
        v7 = __invert_f4(v13);
        v8 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      swift_release();
    }
    v8 = 1;
    v7.columns[1].i8[0] = 0;
    v7.columns[1].i8[1] = 0;
    v7.columns[1].i8[2] = 0;
    v7.columns[1].i8[3] = 0;
    v7.columns[1].i8[4] = 0;
    v7.columns[1].i8[5] = 0;
    v7.columns[1].i8[6] = 0;
    v7.columns[1].i8[7] = 0;
    v7.columns[1].i8[8] = 0;
    v7.columns[1].i8[9] = 0;
    v7.columns[1].i8[10] = 0;
    v7.columns[1].i8[11] = 0;
    v7.columns[1].i8[12] = 0;
    v7.columns[1].i8[13] = 0;
    v7.columns[1].i8[14] = 0;
    v7.columns[1].i8[15] = 0;
    v7.columns[2].i8[0] = 0;
    v7.columns[2].i8[1] = 0;
    v7.columns[2].i8[2] = 0;
    v7.columns[2].i8[3] = 0;
    v7.columns[2].i8[4] = 0;
    v7.columns[2].i8[5] = 0;
    v7.columns[2].i8[6] = 0;
    v7.columns[2].i8[7] = 0;
    v7.columns[2].i8[8] = 0;
    v7.columns[2].i8[9] = 0;
    v7.columns[2].i8[10] = 0;
    v7.columns[2].i8[11] = 0;
    v7.columns[2].i8[12] = 0;
    v7.columns[2].i8[13] = 0;
    v7.columns[2].i8[14] = 0;
    v7.columns[2].i8[15] = 0;
    v7.columns[3].i8[0] = 0;
    v7.columns[3].i8[1] = 0;
    v7.columns[3].i8[2] = 0;
    v7.columns[3].i8[3] = 0;
    v7.columns[3].i8[4] = 0;
    v7.columns[3].i8[5] = 0;
    v7.columns[3].i8[6] = 0;
    v7.columns[3].i8[7] = 0;
    v7.columns[3].i8[8] = 0;
    v7.columns[3].i8[9] = 0;
    v7.columns[3].i8[10] = 0;
    v7.columns[3].i8[11] = 0;
    v7.columns[3].i8[12] = 0;
    v7.columns[3].i8[13] = 0;
    v7.columns[3].i8[14] = 0;
    v7.columns[3].i8[15] = 0;
    v7.columns[0] = 0uLL;
  }
LABEL_14:
  *a3 = v7;
  a3[1].columns[0].i8[0] = v8;
}

uint64_t sub_1B1E86538@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1E88368(a1);
  if (!v2)
    *a2 = result;
  return result;
}

_QWORD *sub_1B1E86560@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1E88594(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1E86588(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v6 = v2;
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1CDAFC0((unint64_t *)&unk_1EEF63400, (uint64_t (*)(void))sub_1B1A0895C, MEMORY[0x1E0DEAF10]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1E86664(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_unknownObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B1CD6880(v5, a1, a2);
  swift_bridgeObjectRelease_n();
  result = swift_unknownObjectRelease();
  *v2 = v6;
  return result;
}

uint64_t sub_1B1E866DC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v8;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = a3;
  LODWORD(v4) = a1;
  v5 = HIDWORD(a3);
  v6 = HIDWORD(a1);
  v8 = (_DWORD)a1 != (_DWORD)a3 || HIDWORD(a1) != HIDWORD(a3);
  if (v8 && a2 != 0)
  {
    do
    {
      v11 = (_DWORD)v4 == -1 && (_DWORD)v6 == 0;
      v8 = v11;
      if (v11)
        break;
      swift_retain();
      if ((v4 & 0x80000000) != 0
        || (v12 = (uint64_t *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries),
            (int)v4 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
        || (v13 = *v12, v14 = *v12 + 12 * (int)v4, v15 = *(__int16 *)(v14 + 4), (_DWORD)v6 != -1)
        && *(_DWORD *)(v14 + 8) != (_DWORD)v6
        || (v16 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v13 + 12 * (int)v4) + 32),
            v17 = *(_QWORD *)(v16 + 48),
            (v18 = *(_QWORD *)(v17 + 16)) == 0))
      {
LABEL_33:
        swift_release();
        return 1;
      }
      v19 = (_QWORD *)(v17 + 56);
      while ((ValueMetadata *)*(v19 - 3) != &type metadata for Parent)
      {
        v19 += 5;
        if (!--v18)
          goto LABEL_33;
      }
      v4 = *(_QWORD *)(*(_QWORD *)(v16 + 128) + *v19 + 8 * v15);
      swift_release();
      v6 = HIDWORD(v4);
    }
    while ((_DWORD)v4 != v3 || HIDWORD(v4) != (_DWORD)v5);
  }
  return v8;
}

uint64_t sub_1B1E86820(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  char v20;
  BOOL v21;
  BOOL v22;
  _QWORD v23[3];
  char v24;
  uint64_t v25[4];

  if (a2 && (sub_1B1E866DC(a1, a2, a3) & 1) == 0)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v16 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v25[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v16, v25, 0xD00000000000002FLL, 0x80000001B23397E0);
    swift_release();
    return swift_release();
  }
  else
  {
    v8 = (_DWORD)a3 == -1 && HIDWORD(a3) == 0;
    v9 = v8;
    if (v8)
      goto LABEL_15;
    swift_retain();
    if ((a3 & 0x80000000) != 0)
      goto LABEL_14;
    if ((int)a3 >= *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
      goto LABEL_14;
    v10 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) != -1 && *(_DWORD *)(v10 + 12 * (int)a3 + 8) != HIDWORD(a3))
      goto LABEL_14;
    v18 = sub_1B1D1E964(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * *(int *)(v10 + 12 * (int)a3) + 32), *(_DWORD *)(v10 + 12 * (int)a3), *(_WORD *)(v10 + 12 * (int)a3 + 4), 8, a4);
    v20 = v19;
    result = swift_release();
    if ((v20 & 1) != 0 || ((_DWORD)v18 == -1 ? (v21 = HIDWORD(v18) == 0) : (v21 = 0), v21))
    {
LABEL_15:
      if (a2 && (swift_retain(), v11 = sub_1B1DA4E70(a1), swift_release(), (v11 & 1) != 0))
      {
        v25[0] = a1;
        if ((v9 & 1) == 0)
        {
          v12 = swift_retain();
          MEMORY[0x1E0C80A78](v12, v13);
          sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1E88DD4);
          swift_release();
        }
        swift_retain();
        sub_1B1E87D28(a3, a1);
      }
      else
      {
        if ((v9 & 1) != 0)
          return sub_1B1E86B90(a3, a4);
        v14 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v14)
        {
          v15 = *(_BYTE *)(v14 + 80);
          MEMORY[0x1B5E240CC](v14 + 48);
          v14 = *(_QWORD *)(v14 + 56);
        }
        else
        {
          v15 = 0;
        }
        swift_unknownObjectUnownedInit();
        v23[0] = a4;
        v23[2] = v14;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        v24 = v15;
        sub_1B1A02530((uint64_t)v23, (uint64_t)v25);
        sub_1B1E2D290((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, a3);
        sub_1B1A0256C((uint64_t)v25);
        sub_1B1E31340(1);
      }
      swift_release();
      return sub_1B1E86B90(a3, a4);
    }
    if (!a2 || ((_DWORD)v18 == (_DWORD)a1 ? (v22 = HIDWORD(v18) == HIDWORD(a1)) : (v22 = 0), !v22))
    {
      swift_retain();
      sub_1B1E87898(a3, v18);
LABEL_14:
      swift_release();
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t sub_1B1E86B90(unint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  BOOL v9;

  swift_retain();
  v4 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, a1);
  result = swift_release();
  if (!v4)
  {
    if (a1 == 0xFFFFFFFF)
      return sub_1B211DF9C(a1, a2);
    swift_retain();
    v6 = sub_1B1D1593C(a1);
    v8 = v7;
    swift_release();
    if ((v8 & 1) != 0)
      return sub_1B211DF9C(a1, a2);
    swift_retain();
    v9 = sub_1B1FD568C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CBB0, v6);
    swift_release();
    if (!v9)
      return sub_1B211DF9C(a1, a2);
    else
      return sub_1B211E138(a1, a2);
  }
  return result;
}

uint64_t sub_1B1E86C78(uint64_t *a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  simd_float4x4 v50;
  simd_float4x4 *v51;
  __int16 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  simd_float4x4 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char v77;
  int *v78;
  simd_float4x4 v79;
  _QWORD v80[10];
  _BYTE v81[80];
  uint64_t v82;
  simd_float4x4 v83;

  result = *a1;
  v74 = *(_QWORD *)(result + 16);
  if (v74)
  {
    v4 = a2;
    v5 = (_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v72 = result + 32;
    swift_bridgeObjectRetain();
    v6 = 0;
    v71 = v5;
    while (1)
    {
      v7 = (unsigned int *)(v72 + 8 * v6);
      v9 = *v7;
      v8 = v7[1];
      v10 = *v7;
      v11 = v9 == 0xFFFFFFFFLL && v8 == 0;
      v12 = v11;
      if (v11
        || (v9 & 0x80000000) != 0
        || v5[1] <= (int)v9
        || ((_DWORD)v8 != -1 ? (v45 = *(_DWORD *)(*v5 + 12 * v10 + 8) == (_DWORD)v8) : (v45 = 1),
            !v45
         || (v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * *(__int16 *)(*v5 + 12 * v10 + 6) + 32) + 16),
             v47 = *(_QWORD *)(v46 + 128),
             !*(_QWORD *)(v47 + 16))
         || (v48 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy), (v49 & 1) == 0)
         || *(ValueMetadata **)(*(_QWORD *)(v46 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v48) + 32) != &type metadata for NotInHierarchy))
      {
        v77 = v12;
        v76 = (int)v9;
        v82 = v6;
        v68 = *a3;
        v69 = a3[1];
        v75 = v8;
        v67 = a3[2];
        v70 = a3[3];
        v13 = v4;
        sub_1B1E85B04(v9 | (v8 << 32), 0, 0, 1, 0, 0, 1, 0, (uint64_t)v80, *(int32x2_t *)a3[3].f32, 0, 1);
        v15 = v80[0];
        v14 = v80[1];
        v16 = v80[2];
        v17 = v80[3];
        v19 = v80[4];
        v18 = v80[5];
        v21 = v80[6];
        v20 = v80[7];
        sub_1B1AE09AC((uint64_t)v80, (uint64_t)v81);
        v23 = xmmword_1B2244DB0;
        v22 = xmmword_1B2244DD0;
        v25 = xmmword_1B2244D90;
        v24 = xmmword_1B2244E20;
        if ((v81[64] & 1) == 0)
        {
          *(_QWORD *)&v23 = v15;
          *((_QWORD *)&v23 + 1) = v14;
          *(_QWORD *)&v22 = v16;
          *((_QWORD *)&v22 + 1) = v17;
          *(_QWORD *)&v25 = v19;
          *((_QWORD *)&v25 + 1) = v18;
          *(_QWORD *)&v24 = v21;
          *((_QWORD *)&v24 + 1) = v20;
        }
        v79.columns[0] = (simd_float4)xmmword_1B2244DB0;
        v79.columns[1] = (simd_float4)xmmword_1B2244DD0;
        v79.columns[2] = (simd_float4)xmmword_1B2244D90;
        v79.columns[3] = (simd_float4)xmmword_1B2244E20;
        if ((v77 & 1) != 0)
        {
          v4 = v13;
          v5 = v71;
          v6 = v82;
        }
        else
        {
          v4 = v13;
          v6 = v82;
          if ((v76 & 0x80000000) != 0)
          {
            v5 = v71;
          }
          else
          {
            v5 = v71;
            if (v71[1] > v76)
            {
              v26 = *v71;
              v27 = *v71 + 12 * (int)v76;
              v30 = *(_DWORD *)(v27 + 8);
              v29 = (int *)(v27 + 8);
              v28 = v30;
              if (v75 == -1 || v28 == v75)
              {
                v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * *(__int16 *)(v26 + 12 * (int)v76 + 6) + 32)
                                + 16);
                v32 = *(_QWORD *)(v31 + 128);
                if (*(_QWORD *)(v32 + 16))
                {
                  v63 = (float32x4_t)v23;
                  v64 = (float32x4_t)v22;
                  v65 = (float32x4_t)v25;
                  v66 = (float32x4_t)v24;
                  v78 = (int *)(*v71 + 12 * (int)v76);
                  v33 = sub_1B1DC3AC8((uint64_t)&type metadata for WorldTransform);
                  if ((v34 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v31 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33)
                                         + 32) == &type metadata for WorldTransform)
                  {
                    v35 = v78;
                    v36 = v26 + 12 * (int)v76;
                    v39 = *(__int16 *)(v36 + 4);
                    v38 = (__int16 *)(v36 + 4);
                    v37 = v39;
                    if (v75 != -1 && *v29 != v75
                      || (v40 = *(_QWORD *)(v4 + 136) + 32,
                          v41 = *(_QWORD *)(v40 + 8 * *v78),
                          v42 = *(_QWORD *)(v41 + 48),
                          (v43 = *(_QWORD *)(v42 + 16)) == 0))
                    {
LABEL_60:
                      sub_1B2229430();
                      sub_1B2228890();
                      sub_1B1BC3C70();
                      sub_1B2228890();
                      swift_bridgeObjectRelease();
                      sub_1B2228890();
                      sub_1B2228890();
                      sub_1B2228890();
                      result = sub_1B2229688();
                      __break(1u);
                      return result;
                    }
                    v44 = (_QWORD *)(v42 + 56);
                    while ((ValueMetadata *)*(v44 - 3) != &type metadata for WorldTransform)
                    {
                      v44 += 5;
                      if (!--v43)
                        goto LABEL_60;
                    }
                    v50.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, v63.f32[0]), v69, *(float32x2_t *)v63.f32, 1), v67, v63, 2), v70, v63, 3);
                    v50.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, v64.f32[0]), v69, *(float32x2_t *)v64.f32, 1), v67, v64, 2), v70, v64, 3);
                    v50.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, v65.f32[0]), v69, *(float32x2_t *)v65.f32, 1), v67, v65, 2), v70, v65, 3);
                    v50.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, v66.f32[0]), v69, *(float32x2_t *)v66.f32, 1), v67, v66, 2), v70, v66, 3);
                    v51 = (simd_float4x4 *)(*(_QWORD *)(v41 + 128) + *v44 + (v37 << 6));
                    v79 = v50;
                    *v51 = v50;
                    v52 = *v38;
                    v53 = *v29;
                    if (v75 == -1 || v53 == v75)
                    {
                      v54 = *(_QWORD *)(v40 + 8 * *v78);
                      v55 = *(_QWORD *)(v54 + 48);
                      v56 = *(_QWORD *)(v55 + 16);
                      if (v56)
                      {
                        v57 = (_QWORD *)(v55 + 56);
                        while ((ValueMetadata *)*(v57 - 3) != &type metadata for InverseWorldTransform)
                        {
                          v57 += 5;
                          if (!--v56)
                            goto LABEL_50;
                        }
                        v58 = (simd_float4x4 *)(*(_QWORD *)(v54 + 128) + *v57 + ((uint64_t)*v38 << 6));
                        v83 = __invert_f4(v50);
                        v35 = v78;
                        *v58 = v83;
                        v52 = *v38;
                        v53 = *v29;
                      }
                    }
LABEL_50:
                    if (v75 == -1 || v53 == v75)
                    {
                      v59 = *(_QWORD *)(v40 + 8 * *v35);
                      v60 = *(_QWORD *)(v59 + 48);
                      v61 = *(_QWORD *)(v60 + 16);
                      if (v61)
                      {
                        v62 = (_QWORD *)(v60 + 56);
                        while ((ValueMetadata *)*(v62 - 3) != &type metadata for Children)
                        {
                          v62 += 5;
                          if (!--v61)
                            goto LABEL_4;
                        }
                        sub_1B1E86C78(*(_QWORD *)(v59 + 128) + *v62 + 8 * v52, v4, &v79);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_4:
      if (++v6 == v74)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1E87268@<X0>(_OWORD *a1@<X8>)
{
  return sub_1B1E874DC((uint64_t (*)(void))sub_1B1E888F4, a1);
}

uint64_t sub_1B1E87284(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1B2BEAC();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

double sub_1B1E87348@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_1B2244DB0;
  a1[1] = xmmword_1B2244DD0;
  result = 0.0;
  a1[2] = xmmword_1B2244D90;
  a1[3] = xmmword_1B2244E20;
  return result;
}

uint64_t sub_1B1E87374(_QWORD *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;

  v15 = a4;
  v16 = a5;
  v13 = a2;
  v14 = a3;
  sub_1B19F8E54(0, &qword_1EEF5EEC0, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C78FEC();
  sub_1B222A180();
  v21 = v13;
  v22 = v14;
  v23 = v15;
  v24 = v16;
  v17 = 0;
  v18 = 1;
  v19 = 0x65756C6176;
  v20 = 0xE500000000000000;
  sub_1B1B2BEAC();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1E874C0@<X0>(_OWORD *a1@<X8>)
{
  return sub_1B1E874DC((uint64_t (*)(void))sub_1B1E88B24, a1);
}

uint64_t sub_1B1E874DC@<X0>(uint64_t (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = a1();
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1B1E87508(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1E87374(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1B1E87524()
{
  sub_1B1E88E0C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E8754C()
{
  sub_1B1E88E0C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E87574(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5FE18, (uint64_t (*)(void))sub_1B1E88E0C, (uint64_t)&type metadata for Static.CodingKeys);
}

uint64_t sub_1B1E875A0()
{
  sub_1B1E89270();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E875C8()
{
  sub_1B1E89270();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E875F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5FE68, (uint64_t (*)(void))sub_1B1E89270, (uint64_t)&type metadata for Fixed.CodingKeys);
}

uint64_t sub_1B1E8761C()
{
  sub_1B1E8922C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E87644()
{
  sub_1B1E8922C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E8766C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5FE58, (uint64_t (*)(void))sub_1B1E8922C, (uint64_t)&type metadata for Beamed.CodingKeys);
}

void sub_1B1E87698()
{
  qword_1EEFD5660 = (uint64_t)&unk_1E6370438;
}

_QWORD *sub_1B1E876AC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1E88CB4(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1B1E876D4(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229E08();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B1E87764@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1EEF573A8 != -1)
    swift_once();
  *a1 = qword_1EEFD5660;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1B1E877B4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B1E88E50(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1E877DC(_QWORD *a1)
{
  char *v1;
  char v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  v2 = *v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v6 = v2;
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B1A71E0C();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

_QWORD *sub_1B1E87880(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  return sub_1B1F577C8(a1, *a2, a3);
}

void sub_1B1E87898(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  unint64_t v10;
  int32x2_t *v11;
  int32x2_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD v25[4];
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int32x2_t *v30;
  uint64_t v31;
  _UNKNOWN **v32;
  char v33;
  int32x2_t *v34;
  _QWORD v35[3];
  char v36;
  _BYTE v37[40];

  if (sub_1B1FD568C((uint64_t)&type metadata for Children, (uint64_t)&off_1E63BEDD0, a2))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (v5)
    {
      v6 = *(_BYTE *)(v5 + 80);
      MEMORY[0x1B5E240CC](v5 + 48);
      v5 = *(_QWORD *)(v5 + 56);
    }
    else
    {
      v6 = 0;
    }
    swift_unknownObjectUnownedInit();
    v27 = v2;
    v29 = v5;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    LOBYTE(v30) = v6;
    sub_1B1A02530((uint64_t)&v27, (uint64_t)v37);
    sub_1B1D4BCB0((uint64_t)v37, (uint64_t)v35);
    KeyPath = swift_getKeyPath();
    if (a2 == 0xFFFFFFFF
      || (v10 = v35[0], swift_unownedRetainStrong(), v11 = (int32x2_t *)sub_1B1E85854(a2), swift_release(), !v11))
    {
      swift_release();
    }
    else
    {
      v34 = v11;
      v12 = v11[2];
      if (v12)
      {
        v13 = 0;
        v14 = (_DWORD *)&v11[4] + 1;
        while (*(v14 - 1) != (_DWORD)a1 || *v14 != HIDWORD(a1))
        {
          v14 += 2;
          if (*(_QWORD *)&v12 == ++v13)
            goto LABEL_15;
        }
        swift_bridgeObjectRetain();
        sub_1B1DBA42C(v13);
      }
      else
      {
LABEL_15:
        v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
        v27 = 0;
        v28 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v27 = 0x20797469746E45;
        v28 = 0xE700000000000000;
        sub_1B1BC3C70();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1BC3C70();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v17 = v27;
        v18 = v28;
        v19 = sub_1B2228E90();
        v27 = 0;
        (*(void (**)(uint64_t, unint64_t *, unint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v19, &v27, v17, v18);
        swift_release();
        swift_bridgeObjectRelease();
      }
      v20 = v34;
      if ((sub_1B1CCA044(v11, v34) & 1) == 0)
      {
        v26 = HIDWORD(a2);
        swift_unownedRetainStrong();
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        v21 = swift_unownedRetainStrong();
        v27 = (unint64_t)v20;
        MEMORY[0x1E0C80A78](v21, v22);
        v25[2] = KeyPath;
        v25[3] = &v27;
        sub_1B1A73CCC(a2, (uint64_t)sub_1B1E88DF4, (uint64_t)v25);
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        v23 = v26;
        if (v36 == 1)
        {
          swift_unownedRetainStrong();
          v27 = __PAIR64__(v23, a2);
          v28 = v10;
          sub_1B1AE197C(0);
          v31 = v24;
          v32 = &off_1E639B2E0;
          v29 = KeyPath;
          v30 = v20;
          v33 = 11;
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1B1E2DB30((uint64_t)&v27);
          swift_release();
          sub_1B1ADF058((uint64_t)&v27);
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1B1A0256C((uint64_t)v35);
    sub_1B1A0256C((uint64_t)v37);
    sub_1B1E31340(1);
  }
  else
  {
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v28 = 0xE700000000000000;
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v8 = sub_1B2228E90();
    v27 = 0;
    (*(void (**)(uint64_t, unint64_t *, uint64_t, unint64_t))(*(_QWORD *)v7 + 88))(v8, &v27, 0x20797469746E45, 0xE700000000000000);
    swift_release();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1E87D28(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  __int32 v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t KeyPath;
  uint64_t v11;
  int32x2_t *v12;
  int32x2_t *v13;
  unint64_t v14;
  unint64_t v15;
  int32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[4];
  unint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  int32x2_t *v26;
  uint64_t v27;
  _UNKNOWN **v28;
  char v29;
  _QWORD v30[3];
  char v31;
  _QWORD v32[3];
  char v33;

  v4 = a1;
  v5 = HIDWORD(a1);
  v6 = sub_1B1FD568C((uint64_t)&type metadata for Children, (uint64_t)&off_1E63BEDD0, a2);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if (v6)
  {
    if (v7)
    {
      v8 = *(_BYTE *)(v7 + 80);
      MEMORY[0x1B5E240CC](v7 + 48);
      v7 = *(_QWORD *)(v7 + 56);
    }
    else
    {
      v8 = 0;
    }
    swift_unknownObjectUnownedInit();
    v24[0] = v2;
    v25 = v7;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    LOBYTE(v26) = v8;
    sub_1B1A02530((uint64_t)v24, (uint64_t)v32);
    sub_1B1D4BCB0((uint64_t)v32, (uint64_t)v30);
    KeyPath = swift_getKeyPath();
    if (a2 == 0xFFFFFFFF
      || (v11 = v30[0], swift_unownedRetainStrong(), v12 = (int32x2_t *)sub_1B1E85854(a2), swift_release(), !v12))
    {
      swift_release();
    }
    else
    {
      v23 = HIDWORD(a2);
      swift_bridgeObjectRetain();
      v13 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = (int32x2_t *)sub_1B1C63D98(0, *(_QWORD *)&v12[2] + 1, 1, (char *)v12);
      v15 = (unint64_t)v13[2];
      v14 = (unint64_t)v13[3];
      if (v15 >= v14 >> 1)
        v13 = (int32x2_t *)sub_1B1C63D98(v14 > 1, v15 + 1, 1, (char *)v13);
      v13[2] = (int32x2_t)(v15 + 1);
      v16 = &v13[v15];
      v16[4].i32[0] = v4;
      v16[4].i32[1] = v5;
      if ((sub_1B1CCA044(v12, v13) & 1) == 0)
      {
        swift_unownedRetainStrong();
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        v17 = swift_unownedRetainStrong();
        v24[0] = v13;
        MEMORY[0x1E0C80A78](v17, v18);
        v22[2] = KeyPath;
        v22[3] = v24;
        sub_1B1A73CCC(a2, (uint64_t)sub_1B1E893F4, (uint64_t)v22);
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        if (v31 == 1)
        {
          swift_unownedRetainStrong();
          v24[0] = __PAIR64__(v23, a2);
          v24[1] = v11;
          sub_1B1AE197C(0);
          v27 = v19;
          v28 = &off_1E639B2E0;
          v25 = KeyPath;
          v26 = v13;
          v29 = 11;
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1B1E2DB30((uint64_t)v24);
          swift_release();
          sub_1B1ADF058((uint64_t)v24);
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1B1A0256C((uint64_t)v30);
    v20 = v32;
  }
  else
  {
    if (v7)
    {
      v9 = *(_BYTE *)(v7 + 80);
      MEMORY[0x1B5E240CC](v7 + 48);
      v7 = *(_QWORD *)(v7 + 56);
    }
    else
    {
      v9 = 0;
    }
    swift_unknownObjectUnownedInit();
    v32[0] = v2;
    v32[2] = v7;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v33 = v9;
    sub_1B1A02530((uint64_t)v32, (uint64_t)v24);
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE30, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1B226D240;
    *(_DWORD *)(v21 + 32) = v4;
    *(_DWORD *)(v21 + 36) = v5;
    sub_1B1BF9744(v21, a2);
    swift_bridgeObjectRelease();
    v20 = v24;
  }
  sub_1B1A0256C((uint64_t)v20);
  sub_1B1E31340(1);
}

BOOL sub_1B1E880E0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BOOL8 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  swift_bridgeObjectRetain_n();
  swift_retain_n();
  sub_1B1D415A8(a1, a2, (uint64_t)&v21, a3, a4, a5);
  v10 = (_QWORD *)sub_1B1E856CC(a1, a2);
  v11 = v10;
  v12 = v10[2];
  if (v12)
  {
    v13 = v10[4];
    v14 = v10[5];
    swift_retain();
    swift_bridgeObjectRetain();
    LOBYTE(v13) = sub_1B1E880E0(v13, v14, a3, a4, a5);
    swift_release();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      v15 = v11 + 7;
      do
      {
        v16 = --v12 == 0;
        if (!v12)
          break;
        v17 = v15 + 2;
        v18 = *(v15 - 1);
        v19 = *v15;
        swift_retain();
        swift_bridgeObjectRetain();
        LOBYTE(v18) = sub_1B1E880E0(v18, v19, a3, a4, a5);
        swift_release();
        swift_bridgeObjectRelease();
        v15 = v17;
      }
      while ((v18 & 1) != 0);
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v16 = 1;
  }
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  return v16;
}

BOOL sub_1B1E88254(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BOOL8 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  swift_retain_n();
  sub_1B1D4169C(a1, a2, (uint64_t)&v17, a3);
  v6 = (_QWORD *)sub_1B1E856CC(a1, a2);
  v7 = v6;
  v8 = v6[2];
  if (v8)
  {
    v9 = v6[4];
    v10 = v6[5];
    swift_retain();
    LOBYTE(v9) = sub_1B1E88254(v9, v10, a3);
    swift_release();
    if ((v9 & 1) != 0)
    {
      v11 = v7 + 7;
      do
      {
        v12 = --v8 == 0;
        if (!v8)
          break;
        v13 = v11 + 2;
        v14 = *(v11 - 1);
        v15 = *v11;
        swift_retain();
        LOBYTE(v14) = sub_1B1E88254(v14, v15, a3);
        swift_release();
        v11 = v13;
      }
      while ((v14 & 1) != 0);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }
  swift_bridgeObjectRelease();
  swift_release_n();
  return v12;
}

uint64_t sub_1B1E88368(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (!sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C78FEC();
    sub_1B222A150();
    if (!v1)
    {
      v14 = 0;
      v15 = 1;
      v16 = 0x797469746E65;
      v17 = 0xE600000000000000;
      sub_1B1A08878();
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v12 = v18;
      v13 = v19;
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(&v14, v17);
  sub_1B1A08878();
  sub_1B2229D6C();
  v12 = v18;
  v13 = v19;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v14);
LABEL_7:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v12 | (unint64_t)(v13 << 32);
}

_QWORD *sub_1B1E88594(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v20 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    v11 = sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v21, v24);
      sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1CDAFC0((unint64_t *)&unk_1ED4BA470, (uint64_t (*)(void))sub_1B1A08878, MEMORY[0x1E0DEAF40]);
      sub_1B2229D6C();
      v14 = v25[2];
      if (v14)
      {
        v15 = v25 + 4;
        v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          if (*v15 != -1 || HIDWORD(*v15) != 0)
          {
            *(_QWORD *)&v12 = *v15;
            v20 = v12;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v25 = v11;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1B202A38C(0, v11[2] + 1, 1);
              v11 = v25;
            }
            v17 = v11[2];
            v16 = v11[3];
            v12 = v20;
            if (v17 >= v16 >> 1)
            {
              sub_1B202A38C(v16 > 1, v17 + 1, 1);
              v12 = v20;
              v11 = v25;
            }
            v11[2] = v17 + 1;
            v11[v17 + 4] = v12;
          }
          ++v15;
          --v14;
        }
        while (v14);
      }
      else
      {
        v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v21);
    }
  }
  else
  {
    v11 = sub_1B19FA070(a1, a1[3]);
    sub_1B1C78FEC();
    sub_1B222A150();
    if (!v1)
    {
      sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v21 = 0;
      v22 = 1;
      v23 = 0x7365697469746E65;
      v24 = 0xE800000000000000;
      sub_1B1CDAFC0((unint64_t *)&unk_1ED4BA470, (uint64_t (*)(void))sub_1B1A08878, MEMORY[0x1E0DEAF40]);
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v11 = v25;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v11;
}

uint64_t sub_1B1E888F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BAAF0, (uint64_t (*)(void))sub_1B1E88F28, (uint64_t)&type metadata for ValueCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(v16, v16[3]);
      sub_1B1B2BC48();
      sub_1B2229D6C();
      v14 = v18;
      v15 = v17;
      v12 = v20;
      v13 = v19;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      sub_1B1B2BC48();
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v18;
      v15 = v17;
      v12 = v20;
      v13 = v19;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B1E88B24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD v10[4];
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C78FEC();
  sub_1B222A150();
  if (!v1)
  {
    v11 = 0;
    v12 = 1;
    v13 = 0x65756C6176;
    v14 = 0xE500000000000000;
    sub_1B1B2BC48();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10[2] = v16;
    v10[3] = v15;
    v10[0] = v18;
    v10[1] = v17;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

_QWORD *sub_1B1E88CB4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[4];

  v3 = sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    goto LABEL_7;
  sub_1B19FA070(v6, v6[3]);
  v4 = sub_1B2229D84();
  v3 = (_QWORD *)v4;
  if (v4 >= 5u)
  {
    sub_1B22294CC();
    swift_allocError();
    sub_1B2229490();
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
LABEL_7:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v3;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

_QWORD *sub_1B1E88DD4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F577C8(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1E88DF4()
{
  return sub_1B1AB24D0();
}

unint64_t sub_1B1E88E0C()
{
  unint64_t result;

  result = qword_1EEF5FE20;
  if (!qword_1EEF5FE20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C748, &type metadata for Static.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE20);
  }
  return result;
}

unint64_t sub_1B1E88E50(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD v5[4];
  unsigned __int8 v6;

  v3 = (unint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v1)
  {
    sub_1B19FA070(v5, v5[3]);
    sub_1B1A71DC8();
    sub_1B2229D6C();
    v3 = v6;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_1B1E88F28()
{
  unint64_t result;

  result = qword_1ED4B8D58;
  if (!qword_1ED4B8D58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5A04, &type metadata for ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D58);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParentedToScene()
{
  return &type metadata for ParentedToScene;
}

ValueMetadata *type metadata accessor for Depth()
{
  return &type metadata for Depth;
}

ValueMetadata *type metadata accessor for Static.CodingKeys()
{
  return &type metadata for Static.CodingKeys;
}

ValueMetadata *type metadata accessor for Beamed()
{
  return &type metadata for Beamed;
}

ValueMetadata *type metadata accessor for Fixed()
{
  return &type metadata for Fixed;
}

ValueMetadata *type metadata accessor for Children()
{
  return &type metadata for Children;
}

ValueMetadata *type metadata accessor for NotInHierarchy()
{
  return &type metadata for NotInHierarchy;
}

uint64_t _s3VFX11EntitySpaceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1E89028 + 4 * byte_1B229C005[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1E8905C + 4 * byte_1B229C000[v4]))();
}

uint64_t sub_1B1E8905C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E89064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1E8906CLL);
  return result;
}

uint64_t sub_1B1E89078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1E89080);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1E89084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1E8908C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EntitySpace()
{
  return &type metadata for EntitySpace;
}

unint64_t sub_1B1E890AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5FE28;
  if (!qword_1EEF5FE28)
  {
    sub_1B1A02758(255, &qword_1EEF5FE30, (uint64_t)&type metadata for EntitySpace, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE28);
  }
  return result;
}

unint64_t sub_1B1E89110()
{
  unint64_t result;

  result = qword_1EEF5FE38;
  if (!qword_1EEF5FE38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C490, &type metadata for EntitySpace);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE38);
  }
  return result;
}

unint64_t sub_1B1E89158()
{
  unint64_t result;

  result = qword_1EEF5FE40;
  if (!qword_1EEF5FE40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C670, &type metadata for Depth);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE40);
  }
  return result;
}

unint64_t sub_1B1E891A0()
{
  unint64_t result;

  result = qword_1EEF5FE48;
  if (!qword_1EEF5FE48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C610, &type metadata for Static.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE48);
  }
  return result;
}

unint64_t sub_1B1E891E8()
{
  unint64_t result;

  result = qword_1EEF5FE50;
  if (!qword_1EEF5FE50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C638, &type metadata for Static.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE50);
  }
  return result;
}

unint64_t sub_1B1E8922C()
{
  unint64_t result;

  result = qword_1EEF5FE60;
  if (!qword_1EEF5FE60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C8F8, &type metadata for Beamed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE60);
  }
  return result;
}

unint64_t sub_1B1E89270()
{
  unint64_t result;

  result = qword_1EEF5FE70;
  if (!qword_1EEF5FE70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C8A8, &type metadata for Fixed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE70);
  }
  return result;
}

ValueMetadata *type metadata accessor for Fixed.CodingKeys()
{
  return &type metadata for Fixed.CodingKeys;
}

ValueMetadata *type metadata accessor for Beamed.CodingKeys()
{
  return &type metadata for Beamed.CodingKeys;
}

unint64_t sub_1B1E892D8()
{
  unint64_t result;

  result = qword_1EEF5FE78;
  if (!qword_1EEF5FE78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C858, &type metadata for Fixed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE78);
  }
  return result;
}

unint64_t sub_1B1E89320()
{
  unint64_t result;

  result = qword_1EEF5FE80;
  if (!qword_1EEF5FE80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C880, &type metadata for Fixed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE80);
  }
  return result;
}

unint64_t sub_1B1E89368()
{
  unint64_t result;

  result = qword_1EEF5FE88;
  if (!qword_1EEF5FE88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C808, &type metadata for Beamed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE88);
  }
  return result;
}

unint64_t sub_1B1E893B0()
{
  unint64_t result;

  result = qword_1EEF5FE90;
  if (!qword_1EEF5FE90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C830, &type metadata for Beamed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE90);
  }
  return result;
}

uint64_t sub_1B1E893F4()
{
  return sub_1B1E88DF4();
}

uint64_t sub_1B1E89410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[8];
  v9 = v6[9];
  v10 = sub_1B1C513F4(a1);
  v11 = v10;
  if (v9 >= 0x10)
  {
    v13 = (char *)(v7 + v8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = sub_1B1DC8944(v13, v9 >> 4);
    v12 = v15;
    if (v14)
    {
      v31 = v15;
      sub_1B19F4A48(v11);
      v12 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v12 = v10;
  }
  v16 = v6[10];
  v17 = v6[11];
  v18 = sub_1B19F3C40(0, *(_QWORD *)(a1 + 16));
  v19 = v18;
  if (v17)
  {
    v20 = (char *)(v7 + v16);
    v21 = *(_QWORD *)(v19 + 16);
    v22 = sub_1B1DC8810(v20, v17);
    v23 = v22;
    if (v21)
    {
      v32 = v22;
      sub_1B19F499C(v19);
      v23 = v32;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = v18;
  }
  v24 = *((_DWORD *)v3 + 2);
  v25 = *((_BYTE *)v3 + 12);
  v26 = v3[2];
  v27 = *((_BYTE *)v3 + 24);
  v30 = v3[4];
  v28 = sub_1B1CC8DA4((char *)(v12 + 32), *(_QWORD *)(v12 + 16), (char *)(v23 + 32), *(_QWORD *)(v23 + 16), (char *)(v7 + v6[12]), (unint64_t)v6[13] >> 4, (char *)(v7 + v6[14]), v6[15] / 0x18u);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v24;
  *(_BYTE *)(a2 + 12) = v25;
  *(_QWORD *)(a2 + 16) = v26;
  *(_BYTE *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v30;
  return result;
}

uint64_t sub_1B1E8959C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  char **v5;
  int v6;
  uint64_t v7;
  char **v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;

  v2 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_1B1C9379C(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = sub_1B1B1CF60(0, *(_QWORD *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v5 = (char **)(v2 + 3);
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v7 = v2[3];
  if (v6)
  {
    sub_1B1C92AF8(0, *(_QWORD *)(v7 + 16));
  }
  else
  {
    *v5 = (char *)sub_1B1B1C8A4(0, *(_QWORD *)(v7 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v8 = (char **)(v2 + 4);
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v10 = v2[4];
  if (v9)
  {
    sub_1B1C92AF8(0, *(_QWORD *)(v10 + 16));
  }
  else
  {
    *v8 = (char *)sub_1B1B1C8A4(0, *(_QWORD *)(v10 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v11 = v2 + 5;
  v12 = swift_isUniquelyReferenced_nonNull_native();
  v13 = v2[5];
  if (v12)
  {
    sub_1B1C92AF8(0, *(_QWORD *)(v13 + 16));
  }
  else
  {
    *v11 = (uint64_t)sub_1B1B1C8A4(0, *(_QWORD *)(v13 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v14 = v2 + 1;
  v15 = swift_isUniquelyReferenced_nonNull_native();
  v16 = v2[1];
  if (v15)
  {
    result = sub_1B1C92AEC(0, *(_QWORD *)(v16 + 16));
    if (!a1)
      return result;
  }
  else
  {
    *v14 = sub_1B1B1CA94(0, *(_QWORD *)(v16 + 24) >> 1);
    result = swift_bridgeObjectRelease();
    if (!a1)
      return result;
  }
  __asm { FMOV            V0.4S, #1.0 }
  v61 = HIDWORD(_Q0);
  v23 = a1;
  do
  {
    v24 = sub_1B1E8A0E8(result, -1000.0, 1000.0);
    v64 = v25;
    v26 = sub_1B1E8A0E8(v24, -1000.0, 1000.0);
    v63 = v27;
    sub_1B1E8A0E8(v26, -1000.0, 1000.0);
    v62 = v28;
    v29 = (char *)*v2;
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v29;
    if ((v30 & 1) == 0)
    {
      v29 = sub_1B1C69068(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
      *v2 = v29;
    }
    v32 = *((_QWORD *)v29 + 2);
    v31 = *((_QWORD *)v29 + 3);
    if (v32 >= v31 >> 1)
      v29 = sub_1B1C69068(v31 > 1, v32 + 1, 1, v29);
    *(_QWORD *)&v33 = __PAIR64__(v63, v64);
    *((_QWORD *)&v33 + 1) = v62;
    *((_QWORD *)v29 + 2) = v32 + 1;
    v34 = &v29[32 * v32];
    *((_OWORD *)v34 + 2) = v33;
    *((_QWORD *)v34 + 6) = 0;
    *v2 = v29;
    v35 = drand48();
    v36 = drand48();
    v37 = drand48();
    drand48();
    v38 = v2[1];
    result = swift_isUniquelyReferenced_nonNull_native();
    v2[1] = v38;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1791058(0, *(_QWORD *)(v38 + 16) + 1, 1, (char *)v38);
      v38 = result;
      *v14 = result;
    }
    v40 = *(_QWORD *)(v38 + 16);
    v39 = *(_QWORD *)(v38 + 24);
    if (v40 >= v39 >> 1)
    {
      result = (uint64_t)sub_1B1791058(v39 > 1, v40 + 1, 1, (char *)v38);
      v38 = result;
    }
    *(float *)&v41 = v35;
    *(float *)&v42 = v36;
    *(float *)&v43 = v37;
    *(_QWORD *)&v44 = __PAIR64__(v42, v41);
    *((_QWORD *)&v44 + 1) = __PAIR64__(v61, v43);
    *(_QWORD *)(v38 + 16) = v40 + 1;
    *(_OWORD *)(v38 + 16 * v40 + 32) = v44;
    *v14 = v38;
    --v23;
  }
  while (v23);
  v45 = a1 + 15;
  if (a1 + 15 < 0)
    v45 = a1 + 30;
  if ((unint64_t)(a1 + 30) >= 0x1F)
  {
    v46 = 0;
    v47 = v45 & 0xFFFFFFFFFFFFFFF0;
    v48 = 32;
    do
    {
      v65 = xmmword_1B2245E60;
      if (v46 < a1)
        v65 = *(_OWORD *)(*v2 + v48);
      v49 = *v5;
      v50 = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v49;
      if ((v50 & 1) == 0)
      {
        v49 = sub_1B1C635D8(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
        *v5 = v49;
      }
      v52 = *((_QWORD *)v49 + 2);
      v51 = *((_QWORD *)v49 + 3);
      if (v52 >= v51 >> 1)
        v49 = sub_1B1C635D8(v51 > 1, v52 + 1, 1, v49);
      *((_QWORD *)v49 + 2) = v52 + 1;
      *(_DWORD *)&v49[4 * v52 + 32] = v65;
      *v5 = v49;
      v53 = *v8;
      v54 = swift_isUniquelyReferenced_nonNull_native();
      *v8 = v53;
      if ((v54 & 1) == 0)
      {
        v53 = sub_1B1C635D8(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
        *v8 = v53;
      }
      v56 = *((_QWORD *)v53 + 2);
      v55 = *((_QWORD *)v53 + 3);
      if (v56 >= v55 >> 1)
        v53 = sub_1B1C635D8(v55 > 1, v56 + 1, 1, v53);
      *((_QWORD *)v53 + 2) = v56 + 1;
      *(_DWORD *)&v53[4 * v56 + 32] = DWORD1(v65);
      *v8 = v53;
      v57 = *v11;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v11 = v57;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B1C635D8(0, *(_QWORD *)(v57 + 16) + 1, 1, (char *)v57);
        v57 = result;
        *v11 = result;
      }
      v59 = *(_QWORD *)(v57 + 16);
      v58 = *(_QWORD *)(v57 + 24);
      if (v59 >= v58 >> 1)
      {
        result = (uint64_t)sub_1B1C635D8(v58 > 1, v59 + 1, 1, (char *)v57);
        v57 = result;
      }
      ++v46;
      *(_QWORD *)(v57 + 16) = v59 + 1;
      *(_DWORD *)(v57 + 4 * v59 + 32) = DWORD2(v65);
      *v11 = v57;
      v48 += 32;
    }
    while (v47 != v46);
  }
  return result;
}

void sub_1B1E89AD4()
{
  char **v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  float32x2_t *v10;
  uint64_t v11;

  v1 = *v0;
  v2 = *((_QWORD *)*v0 + 2);
  if (v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_1B1FFF068((uint64_t)v1);
    v3 = v0[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1B1FFEEAC((uint64_t)v3);
    v4 = v0[4];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_1B1FFEEAC((uint64_t)v4);
    v5 = v0[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B1FFEEAC((uint64_t)v5);
    v7 = 0;
    v8 = 8;
    do
    {
      v10 = (float32x2_t *)&v1[v7];
      v11 = *(_QWORD *)&v1[v7 + 48];
      if (v11)
      {
        *(float *)v6.i32 = (float)v11;
        *(float32x2_t *)&v9 = vdiv_f32(v10[4], (float32x2_t)vdup_lane_s32(v6, 0));
        *((float *)&v9 + 2) = v10[5].f32[0] / (float)v11;
        HIDWORD(v9) = 0;
        *(_OWORD *)v10[4].f32 = v9;
      }
      else
      {
        v9 = *(_OWORD *)v10[4].f32;
      }
      *(_DWORD *)&v3[4 * v8] = v9;
      *(_DWORD *)&v4[4 * v8] = DWORD1(v9);
      *(_DWORD *)&v5[4 * v8] = DWORD2(v9);
      v7 += 32;
      ++v8;
    }
    while (v8 - v2 != 8);
    *v0 = v1;
    v0[4] = v4;
    v0[5] = v5;
    v0[3] = v3;
  }
}

void sub_1B1E89C04(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  a1[2] = 100;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
}

uint64_t sub_1B1E89C20(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for kClusterState, (uint64_t)&off_1E637DD88, v1, (void (*)(uint64_t))sub_1B1E8B454);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1E89D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, unint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v31[3];
  ValueMetadata *v32;
  _UNKNOWN **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = a7[6];
  v11 = a7[7];
  v12 = v11 - v10;
  if (v11 - v10 < 0 || HIDWORD(v12) || (a8 & 0x8000000000000000) != 0 || HIDWORD(a8))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    result = kcluster_update_compare(a3, a1, a4, v12, a8);
    if (v11 != v10 && (_DWORD)result)
    {
      v30 = (uint64_t *)(a9 + 104);
      do
      {
        v16 = *(unsigned int *)(a4 + 4 * v10);
        if (v16 == a8)
          goto LABEL_11;
        v17 = a7[1];
        v18 = *(_QWORD *)(v17 + 40);
        v19 = *(_QWORD *)(v18 + 112);
        v20 = *(_QWORD *)(v19 + 16);
        if (v20)
        {
          v21 = *(_QWORD *)(v18 + 96);
          v22 = (uint64_t *)(v19 + 56);
          while ((ValueMetadata *)*(v22 - 3) != &type metadata for kCluster)
          {
            v22 += 5;
            if (!--v20)
              goto LABEL_21;
          }
          v23 = *v22;
          v31[0] = a8;
          swift_retain();
          if (*(_QWORD *)(v21 + v23) == v31[0])
          {
            v32 = &type metadata for kCluster;
            v33 = &off_1E63C31F0;
            v31[0] = a8;
            v34 = 3;
            sub_1B1F05960(v30, (uint64_t)v31, v10, 0, v17, a9);
            sub_1B1B68F14((uint64_t)v31);
          }
          swift_release();
        }
LABEL_21:
        v24 = *(_QWORD *)(v17 + 40);
        v25 = *(_QWORD *)(v24 + 112);
        v26 = *(_QWORD *)(v25 + 16);
        if (v26)
        {
          v27 = *(_QWORD *)(v24 + 96);
          v28 = (uint64_t *)(v25 + 56);
          while ((ValueMetadata *)*(v28 - 3) != &type metadata for kCluster)
          {
            v28 += 5;
            if (!--v26)
              goto LABEL_8;
          }
          v29 = *v28;
          v31[0] = v16;
          swift_retain();
          if (*(_QWORD *)(v27 + v29) == v31[0])
            goto LABEL_10;
        }
        else
        {
LABEL_8:
          swift_retain();
        }
        v32 = &type metadata for kCluster;
        v33 = &off_1E63C31F0;
        v31[0] = v16;
        v34 = 2;
        sub_1B1F05960(v30, (uint64_t)v31, v10, 0, v17, a9);
        sub_1B1B68F14((uint64_t)v31);
LABEL_10:
        result = swift_release();
LABEL_11:
        ++v10;
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t sub_1B1E89FC0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for kClusteringSystem()
{
  return objc_opt_self();
}

const char *sub_1B1E8A080()
{
  return "kClustering";
}

uint64_t sub_1B1E8A094(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22464((uint64_t)&type metadata for kClusterState, (uint64_t)&off_1E637DD88, v1);
  return swift_release();
}

uint64_t sub_1B1E8A0E8(uint64_t a1, float a2, float a3)
{
  float v6;
  uint64_t result;
  uint64_t v8;

  v6 = a3 - a2;
  v8 = 0;
  result = MEMORY[0x1B5E23FA0](&v8, 8);
  if ((float)((float)(v6 * (float)((float)(v8 & 0xFFFFFF) * 0.000000059605)) + a2) == a3)
    return sub_1B1E8A0E8(a1, a2, a3);
  return result;
}

uint64_t sub_1B1E8A170(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1E8A214(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  float *v50;
  float32x2_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  float *v64;
  float32x2_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  os_unfair_lock_s *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  int64_t v100;
  float32x4_t *v101;
  float32x4_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  __int32 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  _QWORD *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  _QWORD v151[2];
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  _QWORD v155[3];
  int v156;
  _BYTE v157[40];
  _OWORD v158[2];
  uint64_t v159;
  _BYTE v160[40];
  _OWORD v161[2];
  uint64_t v162;
  _BYTE v163[40];
  _OWORD v164[2];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  _OWORD v169[2];
  uint64_t v170;
  _OWORD v171[2];
  uint64_t v172;
  _OWORD v173[2];
  _UNKNOWN **v174;
  _OWORD v175[2];
  uint64_t v176;
  _OWORD v177[2];
  uint64_t v178;
  _OWORD v179[2];
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199[12];
  uint64_t v200[12];
  uint64_t v201[12];
  __int128 v202;
  __int128 v203;
  _UNKNOWN **v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _OWORD v210[2];
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _OWORD v217[2];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _BYTE v224[40];
  _BYTE v225[40];
  _BYTE v226[40];
  _QWORD v227[10];
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F23F90((uint64_t)&type metadata for kClusterState, (uint64_t)&off_1E637DD88, v2, v151);
  swift_release();
  v154 = v151[0];
  v149 = v152;
  v150 = v153;
  v148 = v151[0];
  v3 = *(_QWORD *)(v151[0] + 16);
  if (v3 <= 1)
  {
    v227[0] = *((_QWORD *)&v153 + 1);
    *(_QWORD *)&v217[0] = v153;
    *(_QWORD *)&v210[0] = *((_QWORD *)&v152 + 1);
    *(_QWORD *)&v202 = v151[1];
    sub_1B1E89C20(a1);
    sub_1B1B28C6C((uint64_t)&v154);
    sub_1B1B28C6C((uint64_t)&v202);
    sub_1B1B28C6C((uint64_t)v210);
    sub_1B1B28C6C((uint64_t)v217);
    return sub_1B1B28C6C((uint64_t)v227);
  }
  v107 = a1;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v193 = qword_1ED4D09F8;
  v194 = 0;
  v195 = 2;
  v196 = 0;
  v197 = 2;
  v198 = 0;
  swift_retain();
  sub_1B1B6F40C((uint64_t)v157);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD48, &qword_1ED4B8A00, (unint64_t *)&qword_1ED4B89D0);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v4 + 32) = &type metadata for kCluster;
  *(_QWORD *)(v4 + 40) = &off_1E63C31F0;
  sub_1B1E89410(v4, (uint64_t)v158);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v157);
  v5 = *(_QWORD *)(v148 + 16);
  if (HIDWORD(v5))
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v6 = (char *)*((_QWORD *)&v149 + 1);
  v133 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1B1C635D8(0, *(_QWORD *)(*((_QWORD *)&v149 + 1) + 16), 0, *((char **)&v149 + 1));
  v7 = (char *)v150;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_1B1C635D8(0, *(_QWORD *)(v150 + 16), 0, (char *)v150);
  v8 = (char *)*((_QWORD *)&v150 + 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1B1C635D8(0, *(_QWORD *)(*((_QWORD *)&v150 + 1) + 16), 0, *((char **)&v150 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v155[0] = v6 + 32;
  v155[1] = v7 + 32;
  v155[2] = v8 + 32;
  v156 = v5;
  v179[0] = v158[0];
  v179[1] = v158[1];
  v180 = v159;
  sub_1B1E8FCE4(v107, (uint64_t)v179, 0x200000000, v199);
  sub_1B19F66A0((uint64_t)v199, (uint64_t)v217, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v217[0])
  {
    v166 = v217[0];
    v167 = v217[1];
    v168 = v218;
    v124 = v223;
    if (v223 >= 1)
    {
      v121 = v220;
      if (v220)
      {
        v118 = v219;
        v9 = v222;
        v139 = v222[4];
        v138.i32[0] = *(unsigned __int8 *)(v221 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v112 = (uint64_t)(v222 + 6);
        v115 = v221;
        v109 = v222 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = (unsigned int *)(v118 + 48 * v10);
          v144 = *v12;
          v13 = v12[2];
          v142 = v12[1];
          v137.i64[0] = *((_QWORD *)v12 + 2);
          v14 = *((_QWORD *)v12 + 5);
          v127 = *((_QWORD *)v12 + 4);
          v130 = *((_QWORD *)v12 + 3);
          v134 = v11;
          if (v138.i32[0])
          {
            v15 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v139);
          sub_1B19F66A0(v112, (uint64_t)v226, &qword_1ED4B7FB0);
          v16 = v9[4];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v9[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v9[7] = v17;
          v109[1] = 0;
          v109[2] = 0;
          *v109 = 0;
          swift_release();
          v227[0] = v115;
          v227[1] = v14;
          v227[2] = v9;
          v227[3] = v13;
          v227[4] = (v142 - v144 + v13);
          v227[5] = v124;
          v227[6] = v144;
          v227[7] = v142;
          v227[8] = 0;
          v227[9] = 0;
          v228 = 1;
          v229 = v137.i64[0];
          v230 = v130;
          v231 = v127;
          v18 = *(_QWORD *)(v14 + 40);
          v19 = *(_QWORD *)(v18 + 112);
          v20 = *(_QWORD *)(v19 + 16);
          if (v20)
          {
            v21 = *(_QWORD *)(v18 + 96);
            v22 = (_QWORD *)(v19 + 56);
            while ((ValueMetadata *)*(v22 - 3) != &type metadata for kCluster)
            {
              v22 += 5;
              if (!--v20)
              {
                v23 = 0;
                goto LABEL_26;
              }
            }
            v23 = *(_QWORD *)(v21 + *v22);
          }
          else
          {
            v23 = 0;
          }
LABEL_26:
          v24 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, (uint64_t *)v137.i64[0], v130, v127, (uint64_t)v9);
          v26 = v24;
          if (v24)
            v27 = (v25 - v24) / 16;
          else
            v27 = 0;
          do
          {
            *(_QWORD *)&v210[0] = 0;
            MEMORY[0x1B5E23FA0](v210, 8);
          }
          while (((100 * *(_QWORD *)&v210[0]) & 0xFFFFFFFFFFFFFFF0) == 0);
          if ((uint64_t)v149 >= (uint64_t)((*(unint64_t *)&v210[0] * (unsigned __int128)0x64uLL) >> 64))
          {
            v28 = ecs_stack_allocator_allocate(v9[4], 4 * (v142 - v144), 4);
            if (v26)
            {
              v29 = v26;
              v30 = v27;
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
            v11 = v134;
            sub_1B1E89D04(v29, v30, (uint64_t)v155, (uint64_t)v28, v142 - v144, 0, v227, v23, (uint64_t)v9);
          }
          else
          {
            v11 = v134;
          }
          v169[0] = v166;
          v169[1] = v167;
          v170 = v168;
          sub_1B1F05D48(v9, (unsigned __int16 **)v169, (uint64_t)v226);
          sub_1B1F03804((char *)v14);
          ecs_stack_allocator_pop_snapshot(v139);
          if (v138.i32[0])
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          ++v10;
        }
        while (v10 != v121);
        v133 = v11;
        sub_1B19ED748(v199);
      }
    }
    sub_1B19ED748(v199);
  }
  v187 = qword_1ED4D09F8;
  v188 = 0;
  v189 = 2;
  v190 = 0;
  v191 = 2;
  v192 = 0;
  swift_retain();
  sub_1B1B6F40C((uint64_t)v160);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v32 + 32) = &type metadata for kCluster;
  *(_QWORD *)(v32 + 40) = &off_1E63C3220;
  *(_QWORD *)(v32 + 48) = &type metadata for PointOfView;
  *(_QWORD *)(v32 + 56) = &off_1E6371AA8;
  *(_QWORD *)(v32 + 64) = &type metadata for PointOfCulling;
  *(_QWORD *)(v32 + 72) = &off_1E6380438;
  sub_1B1B44110(v161, v32);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v160);
  v177[0] = v161[0];
  v177[1] = v161[1];
  v178 = v162;
  sub_1B1E8FCE4(v107, (uint64_t)v177, 0x200000000, v200);
  sub_1B19F66A0((uint64_t)v200, (uint64_t)v210, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v210[0])
  {
    if (v216 < 1 || (v125 = v213) == 0)
    {
      v74 = v107;
      v75 = (char *)v148;
LABEL_92:
      sub_1B19ED748(v200);
      v76 = v133;
      goto LABEL_93;
    }
    v33 = v215[4];
    v34 = *(unsigned __int8 *)(v214 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v171[0] = v210[0];
    v171[1] = v210[1];
    v172 = v211;
    v113 = (uint64_t)(v215 + 6);
    v116 = v212;
    v138.i64[0] = (uint64_t)(v215 + 13);
    v140 = v215;
    v110 = v215 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v35 = 0;
    v119 = v34;
    v122 = v33;
    while (1)
    {
      v131 = v35;
      v36 = (unsigned int *)(v116 + 48 * v35);
      v37 = *v36;
      v128 = v36[1];
      v38 = (uint64_t *)*((_QWORD *)v36 + 2);
      v145 = *((_QWORD *)v36 + 3);
      v39 = *((_QWORD *)v36 + 5);
      v137.i64[0] = *((_QWORD *)v36 + 4);
      if (v34)
      {
        v40 = *(os_unfair_lock_s **)(v39 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v40);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v33);
      sub_1B19F66A0(v113, (uint64_t)v225, &qword_1ED4B7FB0);
      v41 = v140[4];
      v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v140[6] = ecs_stack_allocator_allocate(v41, 48 * v42, 8);
      v140[7] = v42;
      v110[1] = 0;
      v110[2] = 0;
      *v110 = 0;
      swift_release();
      v146 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v38, v145, v137.i64[0], (uint64_t)v140);
      if (v38)
      {
        if (v137.i64[0])
        {
          v43 = v137.i64[0];
          v44 = 0;
          while (1)
          {
            v45 = 0;
            v46 = v38[v44];
            v48 = -1;
            v49 = INFINITY;
            v50 = (float *)(v148 + 40);
            do
            {
              v51 = vsub_f32(*(float32x2_t *)(v146 + 16 * v44), *(float32x2_t *)(v50 - 2));
              v47 = COERCE_FLOAT(*(_QWORD *)(v146 + 16 * v44 + 8));
              v52 = sqrtf((float)((float)(v47 - *v50) * (float)(v47 - *v50)) + vaddv_f32(vmul_f32(v51, v51)));
              if (v52 < v49)
                v48 = v45;
              v53 = v45 + 1;
              if (v52 < v49)
                v49 = v52;
              v50 += 8;
              ++v45;
            }
            while (v3 != v53);
            v54 = *(_QWORD *)(v39 + 40);
            v55 = *(_QWORD *)(v54 + 112);
            v56 = *(_QWORD *)(v55 + 16);
            if (v56)
            {
              v57 = *(_QWORD *)(v54 + 96);
              v58 = (uint64_t *)(v55 + 56);
              while ((ValueMetadata *)*(v58 - 3) != &type metadata for kCluster)
              {
                v58 += 5;
                if (!--v56)
                {
                  swift_retain();
                  v43 = v137.i64[0];
                  goto LABEL_54;
                }
              }
              v59 = *v58;
              *(_QWORD *)&v202 = v48;
              swift_retain();
              if (*(_QWORD *)(v57 + v59) == (_QWORD)v202)
              {
                swift_release();
                v43 = v137.i64[0];
                goto LABEL_55;
              }
              v43 = v137.i64[0];
            }
            else
            {
              swift_retain();
            }
LABEL_54:
            v204 = &off_1E63C31F0;
            *((_QWORD *)&v203 + 1) = &type metadata for kCluster;
            *(_QWORD *)&v202 = v48;
            LOBYTE(v205) = 2;
            sub_1B1F05960((uint64_t *)v138.i64[0], (uint64_t)&v202, v46, 0, v39, (uint64_t)v140);
            sub_1B1B68F14((uint64_t)&v202);
            swift_release();
LABEL_55:
            if (++v44 == v43)
              goto LABEL_71;
          }
        }
        goto LABEL_71;
      }
      if ((_DWORD)v37 != (_DWORD)v128)
        break;
LABEL_71:
      sub_1B1F05D48(v140, (unsigned __int16 **)v171, (uint64_t)v225);
      sub_1B1F03804((char *)v39);
      v33 = v122;
      ecs_stack_allocator_pop_snapshot(v122);
      v34 = v119;
      if ((v119 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 376));
      }
      swift_release();
      v35 = v131 + 1;
      if (v131 + 1 == v125)
      {
        sub_1B19ED748(v200);
        v74 = v107;
        v75 = (char *)v148;
        goto LABEL_92;
      }
    }
    while (1)
    {
      v60 = 0;
      v62 = -1;
      v63 = INFINITY;
      v64 = (float *)(v148 + 40);
      do
      {
        v65 = vsub_f32(*(float32x2_t *)(v146 + 16 * v37), *(float32x2_t *)(v64 - 2));
        v61 = COERCE_FLOAT(*(_QWORD *)(v146 + 16 * v37 + 8));
        v66 = sqrtf((float)((float)(v61 - *v64) * (float)(v61 - *v64)) + vaddv_f32(vmul_f32(v65, v65)));
        if (v66 < v63)
          v62 = v60;
        v67 = v60 + 1;
        if (v66 < v63)
          v63 = v66;
        v64 += 8;
        ++v60;
      }
      while (v3 != v67);
      v68 = *(_QWORD *)(v39 + 40);
      v69 = *(_QWORD *)(v68 + 112);
      v70 = *(_QWORD *)(v69 + 16);
      if (v70)
      {
        v71 = *(_QWORD *)(v68 + 96);
        v72 = (uint64_t *)(v69 + 56);
        while ((ValueMetadata *)*(v72 - 3) != &type metadata for kCluster)
        {
          v72 += 5;
          if (!--v70)
            goto LABEL_73;
        }
        v73 = *v72;
        *(_QWORD *)&v202 = v62;
        swift_retain();
        if (*(_QWORD *)(v71 + v73) == (_QWORD)v202)
          goto LABEL_75;
      }
      else
      {
LABEL_73:
        swift_retain();
      }
      v204 = &off_1E63C31F0;
      *((_QWORD *)&v203 + 1) = &type metadata for kCluster;
      *(_QWORD *)&v202 = v62;
      LOBYTE(v205) = 2;
      sub_1B1F05960((uint64_t *)v138.i64[0], (uint64_t)&v202, v37, 0, v39, (uint64_t)v140);
      sub_1B1B68F14((uint64_t)&v202);
LABEL_75:
      swift_release();
      if (++v37 == v128)
        goto LABEL_71;
    }
  }
  v74 = v107;
  v75 = (char *)v148;
  v76 = v133;
LABEL_93:
  v181 = qword_1ED4D09F8;
  v182 = 0;
  v183 = 2;
  v184 = 0;
  v185 = 2;
  v186 = 0;
  swift_retain();
  sub_1B1B6F40C((uint64_t)v163);
  swift_release();
  v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v77 + 32) = &type metadata for kCluster;
  *(_QWORD *)(v77 + 40) = &off_1E63C31F0;
  sub_1B1E89410(v77, (uint64_t)v164);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v163);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v75 = sub_1B1FFF068((uint64_t)v75);
  v78 = 32;
  v79 = v3;
  do
  {
    v80 = &v75[v78];
    *(_QWORD *)v80 = 0;
    *((_QWORD *)v80 + 1) = 0;
    *((_QWORD *)v80 + 2) = 0;
    v78 += 32;
    --v79;
  }
  while (v79);
  v175[0] = v164[0];
  v175[1] = v164[1];
  v176 = v165;
  sub_1B1E8FCE4(v74, (uint64_t)v175, 0x200000000, v201);
  sub_1B19F66A0((uint64_t)v201, (uint64_t)&v202, (unint64_t *)&qword_1ED4B7DE0);
  if ((_QWORD)v202)
  {
    if (v209 >= 1)
    {
      v117 = v206;
      if (v206)
      {
        v143 = v208[4];
        v141 = *(unsigned __int8 *)(v207 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v173[0] = v202;
        v173[1] = v203;
        v111 = v205;
        v114 = (uint64_t)(v208 + 6);
        v174 = v204;
        v147 = v208;
        v108 = v208 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v81 = 0;
        while (1)
        {
          v135 = v76;
          v82 = (unsigned int *)(v111 + 48 * v81);
          v83 = *((_QWORD *)v82 + 3);
          v126 = (uint64_t *)*((_QWORD *)v82 + 2);
          v129 = v82[1];
          v84 = *((_QWORD *)v82 + 5);
          v123 = *((_QWORD *)v82 + 4);
          v132 = *v82;
          if (v141)
          {
            v85 = *(os_unfair_lock_s **)(v84 + 376);
            swift_retain();
            os_unfair_lock_lock(v85);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v84 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v143);
          sub_1B19F66A0(v114, (uint64_t)v224, &qword_1ED4B7FB0);
          v86 = v147[4];
          v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v147[6] = ecs_stack_allocator_allocate(v86, 48 * v87, 8);
          v147[7] = v87;
          v108[1] = 0;
          v108[2] = 0;
          *v108 = 0;
          swift_release();
          v88 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v126, v83, v123, (uint64_t)v147);
          v89 = 0uLL;
          if ((_DWORD)v132 == (_DWORD)v129)
          {
            v76 = v135;
            v91 = v137;
            v90 = v138;
          }
          else
          {
            v92 = v129 - v132;
            v90 = 0uLL;
            v93 = (float32x4_t *)(v88 + 16 * v132);
            v76 = v135;
            do
            {
              v94 = *v93++;
              v91 = v94;
              v90 = vaddq_f32(v90, v94);
              v91.i32[3] = v137.i32[3];
              v90.i32[3] = v138.i32[3];
              v89 = v90;
              --v92;
            }
            while (v92);
          }
          v95 = *(_QWORD *)(v84 + 40);
          v96 = *(_QWORD *)(v95 + 112);
          v97 = *(_QWORD *)(v96 + 16);
          v137 = v91;
          v138 = v90;
          if (v97)
          {
            v98 = *(_QWORD *)(v95 + 96);
            v99 = (_QWORD *)(v96 + 56);
            while ((ValueMetadata *)*(v99 - 3) != &type metadata for kCluster)
            {
              v99 += 5;
              if (!--v97)
                goto LABEL_113;
            }
            v100 = *(_QWORD *)(v98 + *v99);
            if (v100 >= (uint64_t)v3)
              goto LABEL_115;
            v136 = v89;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_119:
              v75 = sub_1B1FFF068((uint64_t)v75);
          }
          else
          {
LABEL_113:
            v136 = v89;
            v100 = 0;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              goto LABEL_119;
          }
          v101 = (float32x4_t *)&v75[32 * v100];
          v102 = vaddq_f32(v136, v101[2]);
          v102.i32[3] = v120;
          v101[2] = v102;
          v101[3].i64[0] += v129 - v132;
LABEL_115:
          sub_1B1F05D48(v147, (unsigned __int16 **)v173, (uint64_t)v224);
          sub_1B1F03804((char *)v84);
          ecs_stack_allocator_pop_snapshot(v143);
          if ((v141 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v84 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v84 + 376));
          }
          swift_release();
          if (++v81 == v117)
          {
            sub_1B19ED748(v201);
            v74 = v107;
            break;
          }
        }
      }
    }
    sub_1B19ED748(v201);
  }
  sub_1B1E89AD4();
  MEMORY[0x1E0C80A78](v103, v104);
  v105 = v74;
  v106 = *(_QWORD **)(v74 + 176);
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for kClusterState, (uint64_t)&off_1E637DD88, v106, (void (*)(uint64_t))sub_1B1E8B43C);
  swift_release();
  sub_1B19ED720((uint64_t)v164);
  sub_1B19ED720((uint64_t)v161);
  sub_1B19ED720((uint64_t)v158);
  sub_1B1E89C20(v105);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1E8B43C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1E89FC0(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B1E8B454(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1E8A170(a1, *(uint64_t **)(v1 + 16));
}

ValueMetadata *type metadata accessor for kCluster()
{
  return &type metadata for kCluster;
}

uint64_t destroy for kClusterState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for kClusterState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for kClusterState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for kClusterState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for kClusterState()
{
  return &type metadata for kClusterState;
}

unint64_t sub_1B1E8B654()
{
  unint64_t result;

  result = qword_1EEF5FE98;
  if (!qword_1EEF5FE98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229C9DC, &type metadata for kCluster);
    atomic_store(result, (unint64_t *)&qword_1EEF5FE98);
  }
  return result;
}

uint64_t destroy for RenderContext(_QWORD *a1)
{
  uint64_t result;

  if (a1[8])
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)(a1 + 5));
  if (a1[10] >= 2uLL)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  if (a1[12] != 1)
    swift_unknownObjectRelease();
  result = a1[15];
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t initializeWithCopy for RenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = a1 + 40;
  v6 = a2 + 40;
  v7 = *(_QWORD *)(a2 + 64);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = v8;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *(_OWORD *)(v5 + 16) = v9;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
  }
  v10 = *(_QWORD *)(a2 + 80);
  if (v10 > 1)
  {
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  v12 = *(_QWORD *)(a2 + 96);
  if (v12 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    swift_unknownObjectRetain();
  }
  v13 = *(_QWORD *)(a2 + 120);
  if (v13 == 1)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  else
  {
    *(_QWORD *)(a1 + 120) = v13;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for RenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)();
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v5 = (__int128 *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      sub_1B1E354A4((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
      goto LABEL_8;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 40);
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  v7 = *v5;
  v8 = v5[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)v5 + 4);
  *(_OWORD *)v4 = v7;
  *(_OWORD *)(v4 + 16) = v8;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a2 + 80);
  if (v9 == 1)
  {
    if (v10 >= 2)
      goto LABEL_19;
LABEL_14:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_20;
  }
  if (v10 == 1)
  {
    v11 = sub_1B1E8BB84;
LABEL_13:
    sub_1B1A04628(a1 + 80, (uint64_t (*)(_QWORD))v11);
    goto LABEL_14;
  }
  if (v9)
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 80) = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      goto LABEL_20;
    }
    v11 = sub_1B1E8BACC;
    goto LABEL_13;
  }
  if (!v10)
    goto LABEL_14;
LABEL_19:
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
LABEL_20:
  v12 = (__int128 *)(a1 + 96);
  v14 = (__int128 *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) == 1)
  {
    if (v13 == 1)
    {
      v15 = *v14;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *v12 = v15;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v13;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_unknownObjectRetain();
    }
  }
  else if (v13 == 1)
  {
    sub_1B1A04628(a1 + 96, (uint64_t (*)(_QWORD))sub_1B1E8BBD8);
    v16 = *(_QWORD *)(a2 + 112);
    *v12 = *v14;
    *(_QWORD *)(a1 + 112) = v16;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v13;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  v17 = (__int128 *)(a1 + 120);
  v19 = (__int128 *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120) == 1)
  {
    if (v18 == 1)
    {
      v20 = *v19;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *v17 = v20;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v18;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_unknownObjectRetain();
    }
  }
  else if (v18 == 1)
  {
    sub_1B1A04628(a1 + 120, (uint64_t (*)(_QWORD))sub_1B1E8BBD8);
    v21 = *(_QWORD *)(a2 + 136);
    *v17 = *v19;
    *(_QWORD *)(a1 + 136) = v21;
  }
  else
  {
    *(_QWORD *)(a1 + 120) = v18;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  return a1;
}

void sub_1B1E8BACC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5FEA0)
  {
    sub_1B1E8BB30();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5FEA0);
  }
}

unint64_t sub_1B1E8BB30()
{
  unint64_t result;

  result = qword_1ED4B7990;
  if (!qword_1ED4B7990)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B7990);
  }
  return result;
}

void sub_1B1E8BB84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FEB0)
  {
    sub_1B1E8BACC();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FEB0);
  }
}

void sub_1B1E8BBD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7C40)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7C40);
  }
}

__n128 initializeWithTake for RenderContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for RenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)();
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = a1 + 40;
  v6 = a2 + 40;
  if (*(_QWORD *)(a1 + 64))
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 40);
  v7 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a2 + 80);
  if (v8 == 1)
    goto LABEL_10;
  if (v9 == 1)
  {
    v10 = sub_1B1E8BB84;
  }
  else
  {
    if (!v8)
      goto LABEL_10;
    if (v9)
    {
      *(_QWORD *)(a1 + 80) = v9;
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_unknownObjectRelease();
      goto LABEL_11;
    }
    v10 = sub_1B1E8BACC;
  }
  sub_1B1A04628(a1 + 80, (uint64_t (*)(_QWORD))v10);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_11:
  v11 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) == 1)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    goto LABEL_16;
  }
  if (v11 == 1)
  {
    sub_1B1A04628(a1 + 96, (uint64_t (*)(_QWORD))sub_1B1E8BBD8);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 96) = v11;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_16:
  v12 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120) != 1)
  {
    if (v12 != 1)
    {
      *(_QWORD *)(a1 + 120) = v12;
      swift_unknownObjectRelease();
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      return a1;
    }
    sub_1B1A04628(a1 + 120, (uint64_t (*)(_QWORD))sub_1B1E8BBD8);
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderContext()
{
  return &type metadata for RenderContext;
}

uint64_t sub_1B1E8BEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13[19];

  v1 = *(_QWORD *)(v0 + 96);
  v2 = v1;
  if (v1 == 1)
  {
    v3 = (_QWORD *)v0;
    sub_1B1E8C324(v0, (uint64_t)v13);
    v4 = v13[1];
    swift_retain();
    sub_1B1BBF134(v13);
    swift_getKeyPath();
    v5 = *(_QWORD *)(v4 + 176);
    swift_retain();
    v2 = sub_1B1F22DA8((uint64_t)&type metadata for LightsUniforms, (uint64_t)&off_1E637F8B8, v5, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1E8C948);
    v7 = v6;
    v9 = v8;
    swift_release();
    swift_release();
    swift_release();
    if (!v2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v10 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v13[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v10, v13, 0xD000000000000017, 0x80000001B2340460);
      swift_release();
      swift_release();
    }
    v11 = v3[12];
    swift_unknownObjectRetain();
    sub_1B1D2E668(v11);
    v3[12] = v2;
    v3[13] = v7;
    v3[14] = v9;
  }
  sub_1B1E8C95C(v1);
  return v2;
}

uint64_t sub_1B1E8C084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13[19];

  v1 = *(_QWORD *)(v0 + 120);
  v2 = v1;
  if (v1 == 1)
  {
    v3 = (_QWORD *)v0;
    sub_1B1E8C324(v0, (uint64_t)v13);
    v4 = v13[1];
    swift_retain();
    sub_1B1BBF134(v13);
    swift_getKeyPath();
    v5 = *(_QWORD *)(v4 + 176);
    swift_retain();
    v2 = sub_1B1F22DA8((uint64_t)&type metadata for LightsUniforms, (uint64_t)&off_1E637F8B8, v5, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1E8C948);
    v7 = v6;
    v9 = v8;
    swift_release();
    swift_release();
    swift_release();
    if (!v2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v10 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v13[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v10, v13, 0xD00000000000001BLL, 0x80000001B2340480);
      swift_release();
      swift_release();
    }
    v11 = v3[15];
    swift_unknownObjectRetain();
    sub_1B1D2E668(v11);
    v3[15] = v2;
    v3[16] = v7;
    v3[17] = v9;
  }
  sub_1B1E8C95C(v1);
  return v2;
}

uint64_t sub_1B1E8C268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 80);
  v3 = v2;
  if (v2 == 1)
  {
    sub_1B1E8C324(v1, (uint64_t)&v8);
    swift_retain();
    sub_1B1BBF134(&v8);
    v3 = sub_1B216516C();
    v5 = v4;
    swift_release();
    v6 = *(_QWORD *)(v1 + 80);
    sub_1B1D660D4(v3);
    sub_1B1E8C358(v6);
    *(_QWORD *)(v1 + 80) = v3;
    *(_QWORD *)(v1 + 88) = v5;
  }
  sub_1B1E8C368(v2);
  return v3;
}

uint64_t sub_1B1E8C324(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RenderContext(a2, a1);
  return a2;
}

uint64_t sub_1B1E8C358(uint64_t result)
{
  if (result != 1)
    return sub_1B1D65DF4(result);
  return result;
}

uint64_t sub_1B1E8C368(uint64_t result)
{
  if (result != 1)
    return sub_1B1D660D4(result);
  return result;
}

uint64_t sub_1B1E8C378@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[18];
  _QWORD v51[10];
  _QWORD v52[10];
  _QWORD v53[14];

  v4 = (_QWORD *)result;
  if (qword_1ED4B7878 != -1)
    result = swift_once();
  if (byte_1ED4D097C != 1)
    goto LABEL_9;
  if (!v4[156])
  {
    if (v4[154])
    {
      swift_getObjectType();
      v6 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
      v7 = *(_QWORD *)a2;
      swift_retain();
      v8 = sub_1B1D22DA8(0, (uint64_t)v6);
      v10 = v9;
      v12 = v11;
      swift_unknownObjectRetain();
      swift_release();
      v4[156] = v8;
      v4[157] = v10;
      v4[158] = v12;
      v13 = swift_unknownObjectRetain();
      sub_1B1F9C328(v13, v10, v12, 0);
      swift_unknownObjectRelease();
      v14 = *(_QWORD *)(v7 + 272);
      swift_retain();
      sub_1B206309C(2u, (uint64_t)v51);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 264) + 40);
      v16 = *(_QWORD *)(v15 + 16);
      swift_retain();
      if (v16)
      {
        v18 = v51[0];
        v17 = v51[1];
        swift_bridgeObjectRetain();
        v19 = sub_1B1DC3B00(v18, v17);
        if ((v20 & 1) != 0)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v19);
          swift_unknownObjectRetain();
          sub_1B1BA80C0((uint64_t)v51);
          swift_release();
          sub_1B1BA80C0((uint64_t)v51);
          goto LABEL_12;
        }
        sub_1B1BA80C0((uint64_t)v51);
      }
      swift_release();
      sub_1B1BA80C0((uint64_t)v51);
      v21 = 0;
LABEL_12:
      swift_release();
      sub_1B1E8C324(a2, (uint64_t)v50);
      if (!v21)
      {
        v22 = v50[0];
        v23 = *(_QWORD *)(v50[0] + 240);
        swift_retain_n();
        sub_1B1FAE730(0xD000000000000015, 0x80000001B23404A0, v23, v22);
        swift_release_n();
      }
      sub_1B1BBF134(v50);
      v24 = swift_unknownObjectRetain();
      sub_1B1F9C9D8(v24, 30);
      swift_unknownObjectRelease();
      v25 = v4 + 155;
      v26 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v26);
      if (*(_QWORD *)((v4[155] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4[155] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
      v49 = *(_QWORD *)a2;
      v27 = *(_QWORD *)(*(_QWORD *)a2 + 272);
      swift_retain();
      sub_1B206309C(1u, (uint64_t)v52);
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 16) + 264) + 40);
      v29 = *(_QWORD *)(v28 + 16);
      swift_retain();
      if (v29)
      {
        v31 = v52[0];
        v30 = v52[1];
        swift_bridgeObjectRetain();
        v32 = sub_1B1DC3B00(v31, v30);
        if ((v33 & 1) != 0)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v32);
          swift_unknownObjectRetain();
          sub_1B1BA80C0((uint64_t)v52);
          v35 = v34;
          swift_release();
          sub_1B1BA80C0((uint64_t)v52);
        }
        else
        {
          sub_1B1BA80C0((uint64_t)v52);
          swift_release();
          sub_1B1BA80C0((uint64_t)v52);
          v35 = 0;
        }
      }
      else
      {
        swift_release();
        sub_1B1BA80C0((uint64_t)v52);
        v35 = 0;
      }
      swift_release();
      sub_1B1F9C9D8(v35, 31);
      if (v35)
      {
        v36 = swift_unknownObjectRetain();
        MEMORY[0x1B5E2064C](v36);
        if (*(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B2228AF4();
        sub_1B2228B30();
        sub_1B2228AD0();
      }
      v37 = *(_QWORD *)(v49 + 272);
      swift_retain();
      sub_1B206309C(0xFu, (uint64_t)v53);
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 16) + 264) + 40);
      v39 = *(_QWORD *)(v38 + 16);
      swift_retain();
      if (v39)
      {
        v41 = v53[0];
        v40 = v53[1];
        swift_bridgeObjectRetain();
        v42 = sub_1B1DC3B00(v41, v40);
        if ((v43 & 1) != 0)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v42);
          swift_unknownObjectRetain();
          sub_1B1BA80C0((uint64_t)v53);
          swift_release();
          sub_1B1BA80C0((uint64_t)v53);
LABEL_30:
          swift_release();
          sub_1B1F9C9D8(v44, 32);
          if (v44)
          {
            v45 = swift_unknownObjectRetain();
            MEMORY[0x1B5E2064C](v45);
            if (*(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_1B2228AF4();
            sub_1B2228B30();
            sub_1B2228AD0();
          }
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_35;
        }
        sub_1B1BA80C0((uint64_t)v53);
      }
      swift_release();
      sub_1B1BA80C0((uint64_t)v53);
      v44 = 0;
      goto LABEL_30;
    }
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
LABEL_35:
  v46 = *(_QWORD *)(*(_QWORD *)a2 + 376);
  swift_unknownObjectRetain();
  if (v46)
  {
    v53[13] = &unk_1EF010050;
    if (swift_dynamicCastObjCProtocolConditional())
    {
      swift_getObjectType();
      v47 = swift_bridgeObjectRetain();
      sub_1B1D60ED0(v47, 1, 2);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  v48 = v4[158];
  *(_OWORD *)a3 = *((_OWORD *)v4 + 78);
  a3[2] = v48;
  return swift_unknownObjectRetain();
}

double sub_1B1E8C948@<D0>(uint64_t a1@<X8>)
{
  return sub_1B1E8C96C(a1);
}

uint64_t sub_1B1E8C95C(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRetain();
  return result;
}

double sub_1B1E8C96C@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;

  swift_getAtKeyPath();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1B1E8C9B4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 - 8);
  if (*(_QWORD *)(v1 + 64))
    return *(_QWORD *)(v1 + 72);
  else
    return 0;
}

uint64_t sub_1B1E8C9D0()
{
  sub_1B1E8D794();
  return sub_1B2229AA8();
}

uint64_t sub_1B1E8CA40(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD v10[6];

  if (qword_1ED4BF430 != -1)
    swift_once();
  v5 = qword_1ED4BF658;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = qword_1ED4D0FD0;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  v10[4] = sub_1B1E8D7DC;
  v10[5] = v7;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1B17915D0;
  v10[3] = &unk_1E63D4920;
  v8 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_addOperationWithBlock_, v8);
  _Block_release(v8);
  return swift_release();
}

uint64_t sub_1B1E8CB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v4 = sub_1B222847C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B22284AC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED4BF430 != -1)
    swift_once();
  v14 = qword_1ED4BF658;
  swift_retain();
  if (v14 != -1)
    swift_once();
  v15 = qword_1ED4D0FD0;
  swift_retain();
  swift_release();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_1B1E8DB60;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B17915D0;
  aBlock[3] = &unk_1E63D2B18;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1B2228494();
  v19[1] = MEMORY[0x1E0DEE9D8];
  sub_1B19E52CC((unint64_t *)&qword_1ED4B7290, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1B179157C();
  sub_1B19E52CC((unint64_t *)&qword_1ED4B72B0, (uint64_t (*)(uint64_t))sub_1B179157C, MEMORY[0x1E0DEAF38]);
  sub_1B2229364();
  MEMORY[0x1B5E20AFC](0, v13, v8, v17);
  _Block_release(v17);
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

void sub_1B1E8CE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v4, v5);
  __asm { BR              X9 }
}

uint64_t sub_1B1E8CE70()
{
  uint64_t v0;
  uint64_t v1;

  if (BYTE6(v0) > v1)
  {
    if ((sub_1B2229D24() & 1) == 0
      && (sub_1B22285F0() & 1) != 0
      && (sub_1B1EE7710(10, 0xE100000000000000) & 0xFFFFFF80) == 0)
    {
      sub_1B1EE7710(10, 0xE100000000000000);
    }
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1B1E8D030(uint64_t a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v3;
  uint64_t v5;

  v5 = sub_1B2228518();
  sub_1B2228518();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1B5E206E8](a1, TupleTypeMetadata2);
  sub_1B2228B6C();
  sub_1B2228AE8();
  sub_1B2228B6C();
  sub_1B2228AE8();
  v3 = sub_1B2228B6C();
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v3);
  sub_1B2228998();
  return v5;
}

uint64_t sub_1B1E8D15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  sub_1B2228B6C();
  sub_1B2228B48();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a6);
  sub_1B2228B6C();
  return sub_1B2228B48();
}

uint64_t sub_1B1E8D25C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1B1E8D15C(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_1B1E8D268(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_1B1E8D2BC(uint64_t a1)
{
  sub_1B19FC264(a1, *(_QWORD *)(a1 + 24));
  return sub_1B2229BA4();
}

uint64_t sub_1B1E8D320(uint64_t a1)
{
  sub_1B19FC264(a1, *(_QWORD *)(a1 + 24));
  return sub_1B2229AA8();
}

uint64_t sub_1B1E8D38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_1B2229898();
  sub_1B2229814();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
}

uint64_t sub_1B1E8D43C()
{
  sub_1B1E8DA74();
  return sub_1B222A1D4();
}

uint64_t sub_1B1E8D464()
{
  sub_1B1E8DA74();
  return sub_1B222A1E0();
}

uint64_t sub_1B1E8D48C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1E8DA1C();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1E8DA74();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1E8D54C()
{
  uint64_t v0;
  uint64_t v1;
  _opaque_pthread_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sched_param v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qos_class_self())
  {
    v1 = 0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v2 = pthread_self();
    pthread_getschedparam(v2, &v8, &v7);
    v1 = sub_1B1E8D908(v7.sched_priority);
  }
  MEMORY[0x1E0C80A78](v1, v0);
  if (qword_1ED4BF430 != -1)
    swift_once();
  v3 = qword_1ED4BF658;
  swift_retain();
  if (v3 != -1)
    swift_once();
  swift_retain();
  v4 = swift_release();
  MEMORY[0x1E0C80A78](v4, v5);
  sub_1B2228F2C();
  return swift_release();
}

uint64_t sub_1B1E8D6D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _opaque_pthread_t *v6;
  _opaque_pthread_t *v7;
  pthread_override_s *started;
  uint64_t result;
  sched_param v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v10 = 0;
  v6 = pthread_self();
  pthread_getschedparam(v6, &v11, &v10);
  if ((a2 & 0x100000000) != 0 || v11 == 2)
    return a3(a1);
  v7 = pthread_self();
  started = pthread_override_qos_class_start_np(v7, (qos_class_t)a2, 0);
  result = a3(a1);
  if (started)
    return pthread_override_qos_class_end_np(started);
  return result;
}

unint64_t sub_1B1E8D794()
{
  unint64_t result;

  result = qword_1ED4B7FB8;
  if (!qword_1ED4B7FB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CB28, &type metadata for DummyCodable);
    atomic_store(result, (unint64_t *)&qword_1ED4B7FB8);
  }
  return result;
}

uint64_t sub_1B1E8D7DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1B1E8D7FC(char a1, uint64_t *a2, uint64_t a3, char a4, _BYTE *a5)
{
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v9 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (v10 = sub_1B1DC4DA0(a1), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_retain();
  }
  else
  {
    if ((a5[537] & 1) != 0 || a5[539] == 1)
      v13 = 1;
    else
      v13 = a5[540];
    v12 = sub_1B1D617C0(a4, v13);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *a2;
    *a2 = 0x8000000000000000;
    sub_1B1B890C0(v12, a1, isUniquelyReferenced_nonNull_native);
    *a2 = v16;
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_1B1E8D8E4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E8D6D4(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1B1E8D908(int a1)
{
  uint64_t result;

  if (a1 > 37)
    return 33;
  if (a1 > 31)
    return 25;
  if (a1 > 20)
    return 21;
  if (a1 > 4)
    return 17;
  if ((a1 & 0x80000000) == 0)
    return 9;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for DummyCodable()
{
  return &type metadata for DummyCodable;
}

void sub_1B1E8DA1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FEB8)
  {
    sub_1B1E8DA74();
    v0 = sub_1B22299C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FEB8);
  }
}

unint64_t sub_1B1E8DA74()
{
  unint64_t result;

  result = qword_1EEF5FEC0;
  if (!qword_1EEF5FEC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CBAC, &type metadata for DummyCodable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FEC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DummyCodable.CodingKeys()
{
  return &type metadata for DummyCodable.CodingKeys;
}

unint64_t sub_1B1E8DACC()
{
  unint64_t result;

  result = qword_1EEF5FEC8;
  if (!qword_1EEF5FEC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CB5C, &type metadata for DummyCodable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FEC8);
  }
  return result;
}

unint64_t sub_1B1E8DB14()
{
  unint64_t result;

  result = qword_1EEF5FED0;
  if (!qword_1EEF5FED0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CB84, &type metadata for DummyCodable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5FED0);
  }
  return result;
}

uint64_t sub_1B1E8DB68@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a3 + 16) && (result = sub_1B1DC3B00(result, a2), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 40 * result);
    v9 = *v7;
    v8 = v7[1];
    v11 = v7[2];
    v10 = v7[3];
    v12 = v7[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v11 = 0;
    v10 = 0;
    v12 = 0;
  }
  *a4 = v9;
  a4[1] = v8;
  a4[2] = v11;
  a4[3] = v10;
  a4[4] = v12;
  return result;
}

uint64_t sub_1B1E8DBFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = sub_1B1DC3AC8(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v3);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1B1E8DC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_1B1DC3B00(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 32 * v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

void sub_1B1E8DD00(signed int a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 40));
  if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 16) && (sub_1B1DC3B14(a1), (v4 & 1) != 0))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
  }
  else
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * a1 + 32);
    swift_retain();
    sub_1B1E8F14C(v1, v5);
    swift_release();
  }
}

uint64_t (*sub_1B1E8DD9C(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1B1EB46BC(v4, a2);
  return sub_1B1E8DDE8;
}

uint64_t (*sub_1B1E8DDEC(_QWORD *a1, unsigned __int8 a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1B1EB473C(v4, a2);
  return sub_1B1E8DDE8;
}

uint64_t (*sub_1B1E8DE38(_QWORD *a1, unint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1B1EB47B8(v4, a2 | ((HIDWORD(a2) & 1) << 32));
  return sub_1B1E8DDE8;
}

uint64_t (*sub_1B1E8DE94(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1B1EB4844(v4, a2);
  return sub_1B1E8DDE8;
}

void (*sub_1B1E8DEE0(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for TextureCache.TextureKey();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1B1792810(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  v4[5] = sub_1B1EB48FC(v4, (uint64_t)v6);
  return sub_1B1E8DF6C;
}

void sub_1B1E8DF6C(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_1B1EB5ECC((uint64_t)v2);
  free(v2);
  free(v1);
}

uint64_t sub_1B1E8DFAC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = result;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (v4)
  {
    if (*(_QWORD *)(v3 + 32) == result)
      return result;
    if (v4 != 1)
    {
      if (*(_QWORD *)(v3 + 40) == result)
        return result;
      v7 = v4 - 2;
      v8 = (uint64_t *)(v3 + 48);
      while (v7)
      {
        v9 = *v8++;
        --v7;
        if (v9 == result)
          return result;
      }
    }
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C632AC(0, v4 + 1, 1, (char *)v3);
    v3 = result;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)sub_1B1C632AC(v5 > 1, v6 + 1, 1, (char *)v3);
    v3 = result;
  }
  *(_QWORD *)(v3 + 16) = v6 + 1;
  *(_QWORD *)(v3 + 8 * v6 + 32) = v2;
  *v1 = v3;
  return result;
}

__n128 sub_1B1E8E08C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)v1;
  v21 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v21)
  {
    v3 = a1[1];
    v24 = *a1;
    v4 = v23 + 6;
    v5 = v21;
    while (1)
    {
      v8 = *v4;
      v7 = v4[1];
      v9 = v4[2];
      v10 = v4[3];
      v11 = v4[4];
      v12 = v4[5];
      v13 = *(v4 - 2) == v24 && *(v4 - 1) == v3;
      if (v13 || (sub_1B2229D24() & 1) != 0)
      {
        v14 = v8 == a1[2] && v7 == a1[3];
        if ((v14 || (sub_1B2229D24() & 1) != 0)
          && (v9 == a1[4] && v10 == a1[5] || (sub_1B2229D24() & 1) != 0)
          && (v11 == a1[6] && v12 == a1[7] || (sub_1B2229D24() & 1) != 0))
        {
          break;
        }
      }
      v4 += 8;
      if (!--v5)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    sub_1B1EB5B6C((uint64_t)a1);
    v15 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_1B1C637DC(0, v21 + 1, 1, v23);
    v17 = v15[2];
    v16 = v15[3];
    if (v17 >= v16 >> 1)
      v15 = sub_1B1C637DC(v16 > 1, v17 + 1, 1, v15);
    v15[2] = v17 + 1;
    v18 = &v15[8 * v17];
    result = *(__n128 *)a1;
    v19 = *((_OWORD *)a1 + 1);
    v20 = *((_OWORD *)a1 + 3);
    *((_OWORD *)v18 + 4) = *((_OWORD *)a1 + 2);
    *((_OWORD *)v18 + 5) = v20;
    *((__n128 *)v18 + 2) = result;
    *((_OWORD *)v18 + 3) = v19;
    *v22 = v15;
  }
  return result;
}

uint64_t sub_1B1E8E23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v14;

  v5 = *(_QWORD **)v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v6)
  {
    result = v5[4];
    if (result == a1 && v5[5] == a2)
      return result;
    result = sub_1B2229D24();
    if ((result & 1) != 0)
      return result;
    v9 = v6 - 1;
    if (v6 != 1)
    {
      result = v5[6];
      if (result == a1 && v5[7] == a2)
        return result;
      result = sub_1B2229D24();
      if ((result & 1) != 0)
        return result;
      v14 = v5 + 9;
      while (--v9)
      {
        result = *(v14 - 1);
        if (result != a1 || *v14 != a2)
        {
          v14 += 2;
          result = sub_1B2229D24();
          if ((result & 1) == 0)
            continue;
        }
        return result;
      }
    }
  }
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C63044(0, v6 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v11 = v5[2];
  v10 = v5[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_1B1C63044(v10 > 1, v11 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v11 + 1;
  v12 = &v5[2 * v11];
  v12[4] = a1;
  v12[5] = a2;
  *(_QWORD *)v2 = v5;
  return result;
}

unint64_t sub_1B1E8E378(unint64_t result)
{
  unint64_t *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = result;
  v3 = HIDWORD(result);
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 16);
  if (v5)
  {
    v6 = (_DWORD *)(v4 + 36);
    v7 = *(_QWORD *)(*v1 + 16);
    while (*(v6 - 1) != (_DWORD)result || *v6 != HIDWORD(result))
    {
      v6 += 2;
      if (!--v7)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)sub_1B1C63D98(0, v5 + 1, 1, (char *)v4);
      v4 = result;
    }
    v10 = *(_QWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 24);
    if (v10 >= v9 >> 1)
    {
      result = (unint64_t)sub_1B1C63D98(v9 > 1, v10 + 1, 1, (char *)v4);
      v4 = result;
    }
    *(_QWORD *)(v4 + 16) = v10 + 1;
    v11 = v4 + 8 * v10;
    *(_DWORD *)(v11 + 32) = v2;
    *(_DWORD *)(v11 + 36) = v3;
    *v1 = v4;
  }
  return result;
}

uint64_t sub_1B1E8E440(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (!v4)
      goto LABEL_12;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      goto LABEL_12;
  }
  v5 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x1B5E21018](0, v3);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain();
  }
  if (*(_QWORD *)(v6 + 40) == *(_QWORD *)(a1 + 40) && *(_QWORD *)(v6 + 48) == *(_QWORD *)(a1 + 48))
    return swift_release();
  v8 = sub_1B2229D24();
  result = swift_release();
  if ((v8 & 1) != 0)
    return result;
  if (v4 == 1)
    goto LABEL_12;
  if (v5)
  {
    v11 = MEMORY[0x1B5E21018](1, v3);
  }
  else
  {
    v11 = *(_QWORD *)(v3 + 40);
    swift_retain();
  }
  if (*(_QWORD *)(v11 + 40) == *(_QWORD *)(a1 + 40) && *(_QWORD *)(v11 + 48) == *(_QWORD *)(a1 + 48))
    return swift_release();
  v12 = sub_1B2229D24();
  result = swift_release();
  if ((v12 & 1) != 0)
    return result;
  v13 = 0;
  v14 = v4 - 2;
  while (v14 != v13)
  {
    if (v5)
    {
      v15 = MEMORY[0x1B5E21018](v13 + 2, v3);
    }
    else
    {
      v15 = *(_QWORD *)(v3 + 8 * v13 + 48);
      swift_retain();
    }
    if (*(_QWORD *)(v15 + 40) == *(_QWORD *)(a1 + 40) && *(_QWORD *)(v15 + 48) == *(_QWORD *)(a1 + 48))
      return swift_release();
    v17 = sub_1B2229D24();
    result = swift_release();
    ++v13;
    if ((v17 & 1) != 0)
      return result;
  }
LABEL_12:
  v10 = swift_retain();
  MEMORY[0x1B5E2064C](v10);
  if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

uint64_t sub_1B1E8E658(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)();
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD v53[4];

  v3 = v2;
  v4 = a2;
  result = sub_1B1DC3B14(a2);
  if ((v6 & 1) == 0)
    return result;
  v7 = result;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v2 + 56);
  v53[0] = v9;
  *(_QWORD *)(v2 + 56) = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EA7B38();
    v9 = v53[0];
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v7);
  sub_1B1EA4418(v7, v9);
  *(_QWORD *)(v3 + 56) = v9;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return swift_release();
  v12 = 0;
  v50 = (uint64_t *)(v3 + 48);
  v13 = v10 + 32;
  v51 = OBJC_IVAR____TtC3VFX13EntityManager_scheduler;
  v49 = v4;
  v47 = v10 + 32;
  v48 = *(_QWORD *)(v10 + 16);
  while (1)
  {
    v14 = *(_QWORD *)(v13 + 8 * v12);
    v16 = sub_1B1E8DD9C(v53, v14);
    if (!*v15)
      goto LABEL_15;
    v17 = v15;
    v18 = (char *)v15[1];
    v19 = *((_QWORD *)v18 + 2);
    if (!v19)
      goto LABEL_15;
    if (*((_DWORD *)v18 + 8) == v4)
    {
      v20 = swift_isUniquelyReferenced_nonNull_native();
      v21 = 0;
      v17[1] = v18;
      if ((v20 & 1) != 0)
      {
LABEL_12:
        v22 = *((_QWORD *)v18 + 2) - 1;
        if (v22 - v21 < 0)
          goto LABEL_40;
        memmove(&v18[4 * v21 + 32], &v18[4 * v21 + 36], 4 * (v22 - v21));
        *((_QWORD *)v18 + 2) = v22;
        v17[1] = v18;
        goto LABEL_15;
      }
      goto LABEL_35;
    }
    if (v19 == 1)
      goto LABEL_15;
    if (*((_DWORD *)v18 + 9) == v4)
    {
      v42 = swift_isUniquelyReferenced_nonNull_native();
      v17[1] = v18;
      v21 = 1;
      if ((v42 & 1) != 0)
      {
        v21 = 1;
        goto LABEL_12;
      }
LABEL_35:
      v18 = sub_1B1FFED2C((uint64_t)v18);
      v17[1] = v18;
      goto LABEL_12;
    }
    v43 = 0;
    v44 = v19 - 2;
    while (v44 != v43)
    {
      v45 = *(_DWORD *)&v18[4 * v43++ + 40];
      if (v45 == v4)
      {
        v46 = swift_isUniquelyReferenced_nonNull_native();
        v17[1] = v18;
        v21 = v43 + 1;
        if ((v46 & 1) != 0)
          goto LABEL_12;
        goto LABEL_35;
      }
    }
LABEL_15:
    ((void (*)(_QWORD *, _QWORD))v16)(v53, 0);
    v23 = *v50;
    if (*(_QWORD *)(*v50 + 16))
    {
      v24 = sub_1B1DC3AC8(v14);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(v23 + 56) + 24 * v24;
        if (!*(_QWORD *)(*(_QWORD *)(v26 + 8) + 16))
        {
          v27 = *(_QWORD *)(v26 + 16);
          v28 = *(_QWORD *)(v27 + 16);
          if (v28)
            break;
        }
      }
    }
LABEL_7:
    if (++v12 == v11)
      return swift_release();
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v29 = 0;
  while (1)
  {
    v30 = *(_QWORD *)(v27 + 8 * v29 + 32);
    v31 = *(_QWORD *)(a1 + v51);
    v32 = *(os_unfair_lock_s **)(v31 + 56);
    swift_retain();
    os_unfair_lock_lock(v32);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v53[0] = *(_QWORD *)(v31 + 152);
    v34 = v53[0];
    *(_QWORD *)(v31 + 152) = 0x8000000000000000;
    v35 = sub_1B1DC3B48(v30);
    v37 = v36;
    v38 = *(_QWORD *)(v34 + 16) + ((v36 & 1) == 0);
    if (*(_QWORD *)(v34 + 24) >= v38)
    {
      if ((v33 & 1) == 0)
      {
        sub_1B1EA79AC((unint64_t *)&qword_1ED4BA9D0);
        v34 = v53[0];
      }
      goto LABEL_26;
    }
    sub_1B1E901AC(v38, v33);
    v34 = v53[0];
    v39 = sub_1B1DC3B48(v30);
    if ((v37 & 1) != (v40 & 1))
      break;
    v35 = v39;
LABEL_26:
    *(_QWORD *)(v31 + 152) = v34;
    swift_bridgeObjectRelease();
    v41 = *(_QWORD **)(v31 + 152);
    if ((v37 & 1) == 0)
    {
      v41[(v35 >> 6) + 8] |= 1 << v35;
      *(_QWORD *)(v41[6] + 8 * v35) = v30;
      *(_QWORD *)(v41[7] + 8 * v35) = 0;
      ++v41[2];
    }
    ++v29;
    --*(_QWORD *)(v41[7] + 8 * v35);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 56));
    swift_release();
    if (v28 == v29)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      v4 = v49;
      v13 = v47;
      v11 = v48;
      goto LABEL_7;
    }
  }
  sub_1B2229FC4();
  __break(1u);
LABEL_40:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

void sub_1B1E8EAB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t DynamicType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v2 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 40));
  sub_1B19FA070(a1, a1[3]);
  DynamicType = swift_getDynamicType();
  v5 = a1[3];
  v6 = a1[4];
  sub_1B19FA070(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  v8 = *(_QWORD *)(v2 + 48);
  v33 = v8 + 64;
  v9 = 1 << *(_BYTE *)(v8 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v8 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  v34 = v12;
  v31 = v12 - 5;
  v32 = v8;
LABEL_4:
  while (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v13 << 6);
LABEL_18:
    v18 = *(_QWORD *)(v8 + 56) + 24 * v15;
    v19 = *(_QWORD *)v18;
    if (*(unsigned __int16 *)(*(_QWORD *)v18 + 30) >= 0x18u)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
      v21 = *(unsigned __int16 *)(v19 + 28);
      v22 = v19 + v21 + 24 * ((178956971 * (unint64_t)*(unsigned __int16 *)(*(_QWORD *)v18 + 30)) >> 32) + 41;
      v23 = v21 + 41;
      while (1)
      {
        v24 = v19 + v23;
        if (*(_QWORD *)(v19 + v23) == DynamicType && *(_QWORD *)(v19 + v23 + 16) == v7)
          break;
        v23 += 24;
        if (v24 + 24 == v22)
          goto LABEL_4;
      }
      v26 = sub_1B1DC3AC8(v20);
      v8 = v32;
      if ((v27 & 1) != 0)
      {
        v28 = v26;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v30 = *(_QWORD *)(v2 + 48);
        *(_QWORD *)(v2 + 48) = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1B1EA7CD0();
        sub_1B1EA45A8(v28, v30);
        *(_QWORD *)(v2 + 48) = v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v8 = v32;
      }
    }
  }
  v16 = v13 + 1;
  if (v13 + 1 >= v34)
    goto LABEL_30;
  v17 = *(_QWORD *)(v33 + 8 * v16);
  if (v17)
    goto LABEL_17;
  v16 = v13 + 2;
  if (v13 + 2 >= v34)
    goto LABEL_30;
  v17 = *(_QWORD *)(v33 + 8 * v16);
  if (v17)
    goto LABEL_17;
  v16 = v13 + 3;
  if (v13 + 3 >= v34)
    goto LABEL_30;
  v17 = *(_QWORD *)(v33 + 8 * v16);
  if (v17)
    goto LABEL_17;
  v16 = v13 + 4;
  if (v13 + 4 >= v34)
    goto LABEL_30;
  v17 = *(_QWORD *)(v33 + 8 * v16);
  if (v17)
  {
LABEL_17:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v13 = v16;
    goto LABEL_18;
  }
  while (v31 != v13)
  {
    v17 = *(_QWORD *)(v8 + 8 * v13++ + 104);
    if (v17)
    {
      v16 = v13 + 4;
      goto LABEL_17;
    }
  }
LABEL_30:
  swift_release();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 40));
}

uint64_t sub_1B1E8EDB4(uint64_t a1)
{
  unsigned __int16 *v1;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  char v18;

  v3 = (char *)v1 + 41;
  v4 = v1[9];
  if (v4 >= 0x10)
  {
    v7 = (uint64_t *)&v3[v1[8]];
    v8 = v1[11];
    v9 = 16 * (v4 >> 4);
    v10 = (char *)v1 + 41;
    while (1)
    {
      if (!v8 || v10[v1[10]] != 5)
      {
        if (!*(_QWORD *)(*(_QWORD *)(a1 + 128) + 16))
          break;
        sub_1B1DC3AC8(*v7);
        if ((v11 & 1) == 0)
          break;
      }
      v7 += 2;
      ++v10;
      v9 -= 16;
      if (!v9)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    v5 = v1[13];
    if (v5 >= 0x10)
    {
      v12 = (uint64_t *)&v3[v1[12]];
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16);
      v14 = 16 * (v5 >> 4);
      while (1)
      {
        if (v13)
        {
          sub_1B1DC3AC8(*v12);
          if ((v15 & 1) != 0)
            break;
        }
        v12 += 2;
        v14 -= 16;
        if (!v14)
          goto LABEL_3;
      }
    }
    else
    {
LABEL_3:
      if (v1[15] < 0x18u)
        return 2;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 128) + 16))
      {
        v16 = (uint64_t *)&v3[v1[14]];
        v17 = 24 * (v1[15] / 0x18uLL);
        while (1)
        {
          sub_1B1DC3AC8(*v16);
          if ((v18 & 1) == 0)
            break;
          v16 += 3;
          v17 -= 24;
          if (!v17)
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1B1E8EF04(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v2 = *(unsigned __int16 *)(v1 + 30);
  if (v2 < 0x18)
    return 1;
  v4 = v1;
  v5 = *(_QWORD *)(a1 + 184);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = (uint64_t *)(*(unsigned __int16 *)(v4 + 28) + v4 + 57);
    v7 = 24 * ((178956971 * (unint64_t)v2) >> 32);
    while (1)
    {
      v8 = *v6;
      v9 = sub_1B1DC3AC8(*(v6 - 2));
      if ((v10 & 1) == 0 || v8 != *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v9))
        break;
      v6 += 3;
      v7 -= 24;
      if (!v7)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1B1E8EFA0()
{
  uint64_t v0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 40), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QueryManager()
{
  return objc_opt_self();
}

uint64_t destroy for QueryManager.QueryInfo()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s3VFX12QueryManagerC9QueryInfoVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for QueryManager.QueryInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for QueryManager.QueryInfo(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for QueryManager.QueryInfo()
{
  return &type metadata for QueryManager.QueryInfo;
}

void sub_1B1E8F14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;

  v3 = v2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 40));
  v5 = *(_QWORD *)(a2 + 16);
  v60 = *(_DWORD *)(a2 + 204);
  v6 = MEMORY[0x1E0DEE9D8];
  v70 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(v2 + 48);
  v8 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v62 = OBJC_IVAR____TtC3VFX13EntityManager_scheduler;
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  v64 = v12;
  v54 = v12 - 5;
  v55 = v7 + 64;
  v58 = a2;
  v59 = v3;
  v56 = v5;
  v57 = v7;
  while (1)
  {
    do
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (v13 + 1 >= v64)
          goto LABEL_59;
        v17 = *(_QWORD *)(v8 + 8 * v16);
        if (!v17)
        {
          v16 = v13 + 2;
          if (v13 + 2 >= v64)
            goto LABEL_59;
          v17 = *(_QWORD *)(v8 + 8 * v16);
          if (!v17)
          {
            v16 = v13 + 3;
            if (v13 + 3 >= v64)
              goto LABEL_59;
            v17 = *(_QWORD *)(v8 + 8 * v16);
            if (!v17)
            {
              v16 = v13 + 4;
              if (v13 + 4 >= v64)
              {
LABEL_59:
                swift_release();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v69 = *(_QWORD *)(v3 + 56);
                *(_QWORD *)(v3 + 56) = 0x8000000000000000;
                sub_1B1B84304(v6, v60, isUniquelyReferenced_nonNull_native);
                *(_QWORD *)(v3 + 56) = v69;
                swift_bridgeObjectRelease();
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
                return;
              }
              v17 = *(_QWORD *)(v8 + 8 * v16);
              if (!v17)
              {
                do
                {
                  if (v54 == v13)
                    goto LABEL_59;
                  v17 = *(_QWORD *)(v7 + 8 * v13++ + 104);
                }
                while (!v17);
                v16 = v13 + 4;
              }
            }
          }
        }
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v16 << 6);
        v13 = v16;
      }
      v18 = *(_QWORD *)(v7 + 56) + 24 * v15;
      v65 = *(_QWORD *)(v18 + 8);
      v66 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15);
      v67 = *(_QWORD *)(v18 + 16);
      v19 = sub_1B1E8EDB4(v5);
    }
    while (!v19 || v19 == 1 && (sub_1B1E8EF04(a2) & 1) == 0);
    if (!*(_QWORD *)(v65 + 16))
    {
      v20 = v67;
      v61 = *(_QWORD *)(v67 + 16);
      if (v61)
        break;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_34:
    v34 = swift_isUniquelyReferenced_nonNull_native();
    v35 = *(_QWORD **)(v3 + 48);
    v68 = v35;
    *(_QWORD *)(v3 + 48) = 0x8000000000000000;
    v37 = sub_1B1DC3AC8(v66);
    v38 = v36;
    v39 = v35[2] + ((v36 & 1) == 0);
    if (v35[3] >= v39)
    {
      if ((v34 & 1) != 0)
      {
        if ((v36 & 1) != 0)
          goto LABEL_40;
      }
      else
      {
        sub_1B1EA7CD0();
        if ((v38 & 1) != 0)
          goto LABEL_40;
      }
    }
    else
    {
      sub_1B1E90708(v39, v34);
      v40 = sub_1B1DC3AC8(v66);
      if ((v38 & 1) != (v41 & 1))
        goto LABEL_61;
      v37 = v40;
      if ((v38 & 1) != 0)
      {
LABEL_40:
        v42 = (uint64_t *)(v35[7] + 24 * v37);
        v44 = *v42;
        v43 = (char *)v42[1];
        v45 = v42[2];
        goto LABEL_44;
      }
    }
    v44 = 0;
    v43 = 0;
    v45 = 0;
LABEL_44:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = sub_1B1C62EF0(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
    v47 = *((_QWORD *)v43 + 2);
    v46 = *((_QWORD *)v43 + 3);
    if (v47 >= v46 >> 1)
      v43 = sub_1B1C62EF0(v46 > 1, v47 + 1, 1, v43);
    *((_QWORD *)v43 + 2) = v47 + 1;
    *(_DWORD *)&v43[4 * v47 + 32] = v60;
    if (v44)
    {
      v48 = v68;
      v8 = v55;
      if ((v38 & 1) != 0)
      {
        v49 = (_QWORD *)(v68[7] + 24 * v37);
        *v49 = v44;
        v49[1] = v43;
        v49[2] = v45;
      }
      else
      {
        v68[(v37 >> 6) + 8] |= 1 << v37;
        *(_QWORD *)(v68[6] + 8 * v37) = v66;
        v50 = (_QWORD *)(v68[7] + 24 * v37);
        *v50 = v44;
        v50[1] = v43;
        v50[2] = v45;
        ++v68[2];
      }
    }
    else
    {
      v48 = v68;
      v8 = v55;
      if ((v38 & 1) != 0)
        sub_1B1EA45A8(v37, (uint64_t)v68);
    }
    v3 = v59;
    v5 = v56;
    *(_QWORD *)(v59 + 48) = v48;
    v6 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1B202A10C(0, *(_QWORD *)(v70 + 16) + 1, 1);
      v6 = v70;
    }
    v52 = *(_QWORD *)(v6 + 16);
    v51 = *(_QWORD *)(v6 + 24);
    if (v52 >= v51 >> 1)
    {
      sub_1B202A10C(v51 > 1, v52 + 1, 1);
      v6 = v70;
    }
    *(_QWORD *)(v6 + 16) = v52 + 1;
    *(_QWORD *)(v6 + 8 * v52 + 32) = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v7 = v57;
    a2 = v58;
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v21 = 0;
  while (1)
  {
    v22 = *(_QWORD *)(v20 + 8 * v21 + 32);
    v23 = *(_QWORD *)(a1 + v62);
    v24 = *(os_unfair_lock_s **)(v23 + 56);
    swift_retain();
    os_unfair_lock_lock(v24);
    v25 = swift_isUniquelyReferenced_nonNull_native();
    v26 = *(_QWORD *)(v23 + 152);
    *(_QWORD *)(v23 + 152) = 0x8000000000000000;
    v27 = sub_1B1DC3B48(v22);
    v29 = v28;
    v30 = *(_QWORD *)(v26 + 16) + ((v28 & 1) == 0);
    if (*(_QWORD *)(v26 + 24) >= v30)
    {
      if ((v25 & 1) == 0)
        sub_1B1EA79AC((unint64_t *)&qword_1ED4BA9D0);
      goto LABEL_31;
    }
    sub_1B1E901AC(v30, v25);
    v31 = sub_1B1DC3B48(v22);
    if ((v29 & 1) != (v32 & 1))
      break;
    v27 = v31;
LABEL_31:
    v20 = v67;
    *(_QWORD *)(v23 + 152) = v26;
    swift_bridgeObjectRelease();
    v33 = *(_QWORD **)(v23 + 152);
    if ((v29 & 1) == 0)
    {
      v33[(v27 >> 6) + 8] |= 1 << v27;
      *(_QWORD *)(v33[6] + 8 * v27) = v22;
      *(_QWORD *)(v33[7] + 8 * v27) = 0;
      ++v33[2];
    }
    ++v21;
    ++*(_QWORD *)(v33[7] + 8 * v27);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 56));
    swift_release();
    if (v61 == v21)
    {
      swift_bridgeObjectRelease();
      v3 = v59;
      goto LABEL_34;
    }
  }
  sub_1B2229FC4();
  __break(1u);
LABEL_61:
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1E8F784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v4 = a2;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(v2 + 48);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = sub_1B1DC3AC8(*(_QWORD *)(a2 + 32));
    if ((v9 & 1) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 24 * v8);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v4;
    }
  }
  swift_retain();
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_1B1EB55CC(v10, a1);
  swift_release();
  swift_release();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0x8000000000000000;
  sub_1B1B84528(v4, v11, MEMORY[0x1E0DEE9D8], v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 48) = v35;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v11 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return v4;
  }
  v33 = v4;
  v34 = v11;
  v14 = 0;
  while (1)
  {
    v15 = *(_DWORD *)(v11 + 4 * v14 + 32);
    v16 = *(_QWORD *)(v3 + 56);
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = sub_1B1DC3B14(*(_DWORD *)(v11 + 4 * v14 + 32));
      v18 = MEMORY[0x1E0DEE9D8];
      if ((v19 & 1) != 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
        swift_retain();
      }
    }
    else
    {
      v18 = MEMORY[0x1E0DEE9D8];
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_1B202A10C(0, *(_QWORD *)(v18 + 16) + 1, 1);
    v21 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    if (v21 >= v20 >> 1)
      sub_1B202A10C(v20 > 1, v21 + 1, 1);
    *(_QWORD *)(v18 + 16) = v21 + 1;
    v22 = v6;
    *(_QWORD *)(v18 + 8 * v21 + 32) = v6;
    v23 = swift_isUniquelyReferenced_nonNull_native();
    v24 = *(_QWORD **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0x8000000000000000;
    v25 = sub_1B1DC3B14(v15);
    v27 = v26;
    v28 = v24[2] + ((v26 & 1) == 0);
    if (v24[3] >= v28)
    {
      if ((v23 & 1) == 0)
        sub_1B1EA7B38();
      goto LABEL_21;
    }
    sub_1B1E9047C(v28, v23);
    v29 = sub_1B1DC3B14(v15);
    if ((v27 & 1) != (v30 & 1))
      break;
    v25 = v29;
LABEL_21:
    v6 = v22;
    if ((v27 & 1) != 0)
    {
      v31 = v24[7];
      swift_release();
      *(_QWORD *)(v31 + 8 * v25) = v18;
    }
    else
    {
      v24[(v25 >> 6) + 8] |= 1 << v25;
      *(_DWORD *)(v24[6] + 4 * v25) = v15;
      *(_QWORD *)(v24[7] + 8 * v25) = v18;
      ++v24[2];
    }
    ++v14;
    *(_QWORD *)(v3 + 56) = v24;
    swift_bridgeObjectRelease();
    v11 = v34;
    if (v13 == v14)
    {
      swift_bridgeObjectRelease();
      return v33;
    }
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1E8FAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  _BYTE v20[24];
  _QWORD *v21;

  v5 = *(_QWORD *)(a3 + 32);
  sub_1B1E8DBFC(v5, *(_QWORD *)(v3 + 48));
  v7 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *(_QWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0x8000000000000000;
  v10 = sub_1B1DC3AC8(v5);
  v11 = v9;
  v12 = v21[2] + ((v9 & 1) == 0);
  if (v21[3] >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      sub_1B1EA7CD0();
      if ((v11 & 1) != 0)
        goto LABEL_7;
    }
LABEL_11:
    sub_1B1E8DFAC(a2);
    v15 = v21;
LABEL_12:
    *(_QWORD *)(v3 + 48) = v15;
    v18 = *(_QWORD *)(v7 + 16) != 0;
    swift_retain();
    sub_1B204D5C0(a2, v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  sub_1B1E90708(v12, isUniquelyReferenced_nonNull_native);
  v13 = sub_1B1DC3AC8(v5);
  if ((v11 & 1) == (v14 & 1))
  {
    v10 = v13;
    if ((v11 & 1) == 0)
      goto LABEL_11;
LABEL_7:
    v15 = v21;
    v16 = v21[7] + 24 * v10;
    *(_OWORD *)v20 = *(_OWORD *)v16;
    *(_QWORD *)&v20[16] = *(_QWORD *)(v16 + 16);
    sub_1B1E8DFAC(a2);
    if (*(_QWORD *)v20)
    {
      v17 = v21[7] + 24 * v10;
      *(_QWORD *)v17 = *(_QWORD *)v20;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)&v20[8];
    }
    else
    {
      sub_1B1EA45A8(v10, (uint64_t)v21);
    }
    goto LABEL_12;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1E8FCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[12];
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 40));
  v9 = *(_QWORD *)a2;
  if (!sub_1B1E8DBFC(*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(v4 + 48)))
    sub_1B1E8F784(a1, v9);
  v11 = v10;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    if (BYTE4(a3) == 2 && !(_DWORD)a3)
      LODWORD(a3) = *(_DWORD *)(a2 + 8);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index()
                    + 8);
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_currentState) == 4)
    {
      v15 = *(_QWORD *)(a1 + 216);
      if (*(_BYTE *)(a1 + 225) == 1)
        v16 = v15 <= 1;
      else
        v16 = v15 <= 0;
      v25 = !v16;
    }
    else
    {
      v25 = 1;
    }
    if (*(_BYTE *)(a2 + 24) != 2)
      v25 = *(_BYTE *)(a2 + 24);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(_QWORD *)(a2 + 32);
    v35 = v9;
    v36 = a3;
    v37 = v13;
    v38 = v26;
    v39 = v25;
    v40 = v27;
    swift_retain();
    sub_1B1B7C5AC(a2);
    sub_1B1BED22C(a1, v14, (uint64_t)&v35, (int *)(v11 + 32), v12, (uint64_t)v34);
    v30 = v34[0];
    v19 = v34[2];
    v32 = v34[4];
    v33 = v34[3];
    v20 = v34[6];
    v31 = v34[5];
    v21 = v34[7];
    v22 = v34[8];
    v12 = v34[9];
    v23 = v34[10];
    v24 = v34[11];
    v28 = a2;
    v18 = v34[1];
    sub_1B19ED720(v28);
    swift_bridgeObjectRelease();
    swift_release();
    v17 = v30;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a4 = v17;
  a4[1] = v18;
  a4[2] = v19;
  a4[3] = v33;
  a4[4] = v32;
  a4[5] = v31;
  a4[6] = v20;
  a4[7] = v21;
  a4[8] = v22;
  a4[9] = v12;
  a4[10] = v23;
  a4[11] = v24;
  return result;
}

uint64_t sub_1B1E8FF1C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA900);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v33 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v30 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v31 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v8 << 6);
      goto LABEL_20;
    }
    v19 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v20 = v9[v19];
    if (!v20)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v20 = v9[v19];
      if (!v20)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v20 = v9[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v8 = v19;
LABEL_20:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    v23 = sub_1B222A060();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (v26 + 1 == v27)
          v26 = 0;
        else
          ++v26;
        v28 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v20)
    {
      v19 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v33 & 1) != 0)
  {
    v3 = v32;
    if (v31 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v30;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v32;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E901AC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA9D0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v30 = a2;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v6 + 64;
  v31 = (_QWORD *)(v5 + 64);
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_27;
    v19 = v31[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_27;
      v19 = v31[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_27;
        v19 = v31[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    sub_1B222A06C();
    sub_1B222A078();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = 8 * v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v15) = v20;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v12 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v30 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v31 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9047C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9CD24();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  v29 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v30 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v30)
      goto LABEL_29;
    v22 = v9[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_29;
      v22 = v9[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_29;
        v22 = v9[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v12 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v20);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((a2 & 1) == 0)
      swift_retain();
    v14 = MEMORY[0x1B5E21C00](*(_QWORD *)(v7 + 40), v23, 4);
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v25)
          v17 = 0;
        else
          ++v17;
        v26 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v26 == -1);
      v18 = __clz(__rbit64(~v26)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v18) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v30 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v30);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E90708(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA970);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v9;
  v30 = v9;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v31 = (uint64_t *)(v5 + 64);
  v32 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v32)
      goto LABEL_29;
    v22 = v31[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v32)
        goto LABEL_29;
      v22 = v31[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v32)
          goto LABEL_29;
        v22 = v31[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v24 = *(_QWORD *)(v5 + 56) + 24 * v20;
    v33 = *(_OWORD *)v24;
    v25 = *(_QWORD *)(v24 + 16);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v13 = sub_1B222A060();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v26)
          v16 = 0;
        else
          ++v16;
        v27 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v23;
    v18 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_OWORD *)v18 = v33;
    *(_QWORD *)(v18 + 16) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v32 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v30 >= 64)
      bzero(v31, 8 * v32);
    else
      *v31 = v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E909F0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  int64_t v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB5A78();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v29 = (_QWORD *)(v5 + 64);
  v30 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v30)
      goto LABEL_29;
    v22 = v29[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_29;
      v22 = v29[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_29;
        v22 = v29[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B222A078();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v25)
          v16 = 0;
        else
          ++v16;
        v26 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v26 == -1);
      v17 = __clz(__rbit64(~v26)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v30 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v27 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v27 >= 64)
      bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v29 = -1 << v27;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E90CBC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  _QWORD *v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B370);
  v42 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_20;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_30;
    v24 = v41[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_30;
      v24 = v41[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_30;
        v24 = v41[v23];
        if (!v24)
          break;
      }
    }
LABEL_19:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_20:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 88 * v22;
    if ((v42 & 1) != 0)
    {
      v29 = *(_OWORD *)(v28 + 16);
      v43 = *(_OWORD *)v28;
      v44 = v29;
      v30 = *(_OWORD *)(v28 + 32);
      v31 = *(_OWORD *)(v28 + 48);
      v32 = *(_OWORD *)(v28 + 64);
      v48 = *(_QWORD *)(v28 + 80);
      v47 = v32;
      v45 = v30;
      v46 = v31;
    }
    else
    {
      sub_1B19F8F0C(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v33 = sub_1B222A0C0();
    v34 = -1 << *(_BYTE *)(v7 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (v36 + 1 == v37)
          v36 = 0;
        else
          ++v36;
        v38 = *(_QWORD *)(v12 + 8 * v36);
      }
      while (v38 == -1);
      v14 = __clz(__rbit64(~v38)) + (v36 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v27;
    v15[1] = v26;
    v16 = *(_QWORD *)(v7 + 56) + 88 * v14;
    v17 = v44;
    *(_OWORD *)v16 = v43;
    *(_OWORD *)(v16 + 16) = v17;
    v18 = v45;
    v19 = v46;
    v20 = v47;
    *(_QWORD *)(v16 + 80) = v48;
    *(_OWORD *)(v16 + 48) = v19;
    *(_OWORD *)(v16 + 64) = v20;
    *(_OWORD *)(v16 + 32) = v18;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  if ((v42 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v5 + 32);
    if (v39 >= 64)
      bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v41 = -1 << v39;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E91000(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB5840(0, (unint64_t *)&unk_1ED4BA940);
  v33 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v23 = v32[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v23 = v32[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v23 = v32[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v26 = *v24;
    v25 = v24[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v28)
          v17 = 0;
        else
          ++v17;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v26;
    v19[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  if ((v33 & 1) != 0)
  {
    v30 = 1 << *(_BYTE *)(v5 + 32);
    if (v30 >= 64)
      bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v32 = -1 << v30;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E912F0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&unk_1ED4BB480);
  v44 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v3;
  v41 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v42 = v11;
  v43 = v5;
  v39 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v45 = v13;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v42)
      goto LABEL_29;
    v24 = v41[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v42)
        goto LABEL_29;
      v24 = v41[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v42)
          goto LABEL_29;
        v24 = v41[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v45 = v23;
LABEL_21:
    v25 = *(_QWORD *)(v5 + 56);
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v26;
    v28 = v26[1];
    v29 = (uint64_t *)(v25 + 40 * v22);
    v30 = *v29;
    v31 = v29[1];
    v32 = v29[2];
    v33 = v29[3];
    v34 = v29[4];
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_1B19FA2B4(v30, v31);
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v35)
          v17 = 0;
        else
          ++v17;
        v36 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v27;
    v19[1] = v28;
    v20 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 40 * v18);
    *v20 = v30;
    v20[1] = v31;
    v13 = v45;
    v20[2] = v32;
    v20[3] = v33;
    v20[4] = v34;
    ++*(_QWORD *)(v7 + 16);
    v5 = v43;
  }
  while (v39 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v40;
  if ((v44 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v5 + 32);
    if (v37 >= 64)
      bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v41 = -1 << v37;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E91634(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  unint64_t v37;
  _QWORD *v38;
  int64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B360);
  v40 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v39 = v11;
  v37 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v22 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_21;
    }
    v24 = v13 + 1;
    if (v13 + 1 >= v39)
      goto LABEL_29;
    v25 = v38[v24];
    if (!v25)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v39)
        goto LABEL_29;
      v25 = v38[v24];
      if (!v25)
      {
        v24 = v13 + 3;
        if (v13 + 3 >= v39)
          goto LABEL_29;
        v25 = v38[v24];
        if (!v25)
          break;
      }
    }
LABEL_20:
    v10 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v13 = v24;
LABEL_21:
    v26 = 16 * v23;
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v23);
    v29 = *v27;
    v28 = v27[1];
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v26);
    v31 = *v30;
    v32 = v30[1];
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v33)
          v17 = 0;
        else
          ++v17;
        v34 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v19);
    *v20 = v29;
    v20[1] = v28;
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v19);
    *v21 = v31;
    v21[1] = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v37 != v13)
  {
    v25 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v25)
    {
      v24 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v2;
  if ((v40 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v5 + 32);
    if (v35 >= 64)
      bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v38 = -1 << v35;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9193C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6224(0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v10;
  v30 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v31 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v31)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((a2 & 1) == 0)
      swift_retain();
    v14 = sub_1B222A060();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v26)
          v17 = 0;
        else
          ++v17;
        v27 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v27 == -1);
      v18 = __clz(__rbit64(~v27)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v31 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v30 >= 64)
      bzero((void *)(v5 + 64), 8 * v31);
    else
      *v9 = v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E91BCC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(unint64_t, char *, uint64_t);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t *v50;
  _QWORD *v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v5 = sub_1B222826C();
  v56 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v47 - v11;
  v13 = *v2;
  sub_1B1B9D198(0, (unint64_t *)&unk_1ED4BA880, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECD58]);
  v14 = sub_1B22296C4();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_35;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v50 = v2;
  v51 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v20 = (unint64_t)(v16 + 63) >> 6;
  v21 = a2;
  v22 = v14 + 64;
  v55 = v13;
  swift_retain();
  v23 = 0;
  v49 = v21;
  v24 = 16;
  if ((v21 & 1) != 0)
    v24 = 32;
  v52 = v20;
  v53 = v24;
  v48 = v20 - 4;
  v54 = v8;
  while (1)
  {
    if (v19)
    {
      v28 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v29 = v28 | (v23 << 6);
      goto LABEL_22;
    }
    v30 = v23 + 1;
    if (v23 + 1 >= v52)
      goto LABEL_29;
    v31 = v51[v30];
    if (!v31)
    {
      v30 = v23 + 2;
      if (v23 + 2 >= v52)
        goto LABEL_29;
      v31 = v51[v30];
      if (!v31)
      {
        v30 = v23 + 3;
        if (v23 + 3 >= v52)
          goto LABEL_29;
        v31 = v51[v30];
        if (!v31)
          break;
      }
    }
LABEL_21:
    v19 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v30 << 6);
    v23 = v30;
LABEL_22:
    v32 = v55;
    v33 = *(_QWORD *)(v56 + 72);
    v34 = v33 * v29;
    v35 = *(void (**)(char *, unint64_t, uint64_t))(v56 + v53);
    v35(v12, *(_QWORD *)(v55 + 48) + v33 * v29, v5);
    v36 = *(_QWORD *)(v32 + 56) + v34;
    v37 = v54;
    v35(v54, v36, v5);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v38 = sub_1B22285D8();
    v39 = -1 << *(_BYTE *)(v15 + 32);
    v40 = v38 & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (v41 + 1 == v42)
          v41 = 0;
        else
          ++v41;
        v43 = *(_QWORD *)(v22 + 8 * v41);
      }
      while (v43 == -1);
      v25 = __clz(__rbit64(~v43)) + (v41 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v26 = v33 * v25;
    v27 = *(void (**)(unint64_t, char *, uint64_t))(v56 + 32);
    v27(*(_QWORD *)(v15 + 48) + v33 * v25, v12, v5);
    v27(*(_QWORD *)(v15 + 56) + v26, v37, v5);
    ++*(_QWORD *)(v15 + 16);
  }
  while (v48 != v23)
  {
    v31 = *(_QWORD *)(v55 + 8 * v23++ + 96);
    if (v31)
    {
      v30 = v23 + 3;
      goto LABEL_21;
    }
  }
LABEL_29:
  v44 = v55;
  swift_release();
  v3 = v50;
  if ((v49 & 1) != 0)
  {
    v45 = 1 << *(_BYTE *)(v44 + 32);
    if (v45 >= 64)
      bzero(v51, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v51 = -1 << v45;
    *(_QWORD *)(v44 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v15;
  return result;
}

uint64_t sub_1B1E91F80(uint64_t a1, char a2)
{
  return sub_1B1E9557C(a1, a2, (void (*)(_QWORD))sub_1B1B9D124);
}

uint64_t sub_1B1E91F8C(uint64_t a1, char a2)
{
  return sub_1B1E9440C(a1, a2, sub_1B1EB6A3C);
}

uint64_t sub_1B1E91F98(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&unk_1EEF5FF90);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v31 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v29 = 1 << *(_BYTE *)(v5 + 32);
  v30 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v19 = v9[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = v9[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v19 = v9[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v21 = sub_1B222A060();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v26 == -1);
      v15 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v20;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v31 & 1) != 0)
  {
    v3 = v30;
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E92218(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B4A8);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v32 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v30 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v19 = v9[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = v9[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v19 = v9[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
    v22 = sub_1B222A060();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v20;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v32 & 1) != 0)
  {
    v3 = v31;
    if (v30 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v31;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E924A4(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, (void (*)(_QWORD))sub_1B1EB6C30);
}

uint64_t sub_1B1E924B0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B8E0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v30 = v3;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  v29 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v15 = sub_1B222A060();
    v16 = -1 << *(_BYTE *)(v7 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v25)
          v18 = 0;
        else
          ++v18;
        v26 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v26 == -1);
      v19 = __clz(__rbit64(~v26)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v24;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v19) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v3 = v30;
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9275C(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, (void (*)(_QWORD))sub_1B1B9D9EC);
}

uint64_t sub_1B1E92768(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  __int128 v46;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9DB0C();
  v42 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v40 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v44 = v11;
  v39 = v11 - 4;
  v14 = v42;
  v41 = v5;
  while (1)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_20;
    }
    v19 = v13 + 1;
    if (v13 + 1 >= v44)
      goto LABEL_39;
    v20 = v43[v19];
    if (!v20)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v44)
        goto LABEL_39;
      v20 = v43[v19];
      if (!v20)
      {
        v19 = v13 + 3;
        if (v13 + 3 >= v44)
          goto LABEL_39;
        v20 = v43[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v10 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
LABEL_20:
    v21 = *(_QWORD *)(v5 + 48) + 24 * v18;
    v46 = *(_OWORD *)v21;
    v22 = *(unsigned __int8 *)(v21 + 20);
    v23 = *(unsigned int *)(v21 + 16);
    v24 = v23 | (v22 << 32);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    if ((v14 & 1) == 0)
    {
      sub_1B1A026F0((id)v46, *((void **)&v46 + 1), v23 | (v22 << 32));
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    v26 = (v24 >> 38) & 3;
    if ((_DWORD)v26)
    {
      if ((_DWORD)v26 == 1)
      {
        v45 = v25;
        sub_1B222A078();
        sub_1B222874C();
        v27 = *((id *)&v46 + 1);
        v28 = (id)v46;
        sub_1B2228824();
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v46 + 1))
        {
          sub_1B222A084();
          v29 = v27;
          v30 = v27;
          sub_1B2229028();

        }
        else
        {
          v29 = v27;
          sub_1B222A084();
        }
        v14 = v42;
        sub_1B222A084();
        if ((v24 & 0x100000000) == 0)
          sub_1B222A09C();

        v5 = v41;
        v25 = v45;
      }
      else
      {
        sub_1B222A078();
      }
    }
    else
    {
      sub_1B222A078();
      sub_1B222A084();
    }
    v31 = sub_1B222A0C0();
    v32 = -1 << *(_BYTE *)(v7 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (v34 + 1 == v35)
          v34 = 0;
        else
          ++v34;
        v36 = *(_QWORD *)(v12 + 8 * v34);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v34 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 24 * v15;
    *(_OWORD *)v16 = v46;
    *(_BYTE *)(v16 + 20) = BYTE4(v24);
    *(_DWORD *)(v16 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v39 != v13)
  {
    v20 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v20)
    {
      v19 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_39:
  swift_release();
  v3 = v40;
  if ((v42 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v5 + 32);
    if (v37 >= 64)
      bzero(v43, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v37;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_44:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E92BB0(uint64_t a1, char a2)
{
  return sub_1B1E9440C(a1, a2, (void (*)(_QWORD))sub_1B1EB67B8);
}

uint64_t sub_1B1E92BBC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t i;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *v2;
  sub_1B1B9D840();
  v43 = a2;
  v5 = sub_1B22296C4();
  v44 = v5;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_32;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v36 = -1 << v7;
  v37 = v7;
  v8 = v7 < 64 ? ~(-1 << v7) : -1;
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v10 = v5 + 64;
  v40 = (uint64_t *)(v4 + 64);
  v41 = (unint64_t)(v7 + 63) >> 6;
  v39 = v4 + 96;
  for (i = v4; ; v4 = i)
  {
    if (v9)
    {
      v17 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v45 = v6;
      v18 = v17 | (v6 << 6);
      goto LABEL_21;
    }
    v19 = v6 + 1;
    if (v6 + 1 >= v41)
      goto LABEL_29;
    v20 = v40[v19];
    if (!v20)
    {
      v19 = v6 + 2;
      if (v6 + 2 >= v41)
        goto LABEL_29;
      v20 = v40[v19];
      if (!v20)
      {
        v19 = v6 + 3;
        if (v6 + 3 >= v41)
          goto LABEL_29;
        v20 = v40[v19];
        if (!v20)
          break;
      }
    }
LABEL_20:
    v9 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v45 = v19;
LABEL_21:
    v21 = *(_QWORD *)(v4 + 56);
    v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    v23 = (uint64_t *)(v21 + 88 * v18);
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    v27 = v23[3];
    v28 = v23[4];
    v30 = v23[6];
    v29 = v23[7];
    v48 = v23[8];
    v49 = v23[5];
    v47 = v23[9];
    v46 = v23[10];
    if ((v43 & 1) == 0)
      sub_1B1B9D8BC(v24);
    v11 = sub_1B222A060();
    v12 = -1 << *(_BYTE *)(v44 + 32);
    v13 = v11 & ~v12;
    v14 = v13 >> 6;
    if (((-1 << v13) & ~*(_QWORD *)(v10 + 8 * (v13 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v10 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = (unint64_t)(63 - v12) >> 6;
      do
      {
        if (v14 + 1 == v31)
          v14 = 0;
        else
          ++v14;
        v32 = *(_QWORD *)(v10 + 8 * v14);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v14 << 6);
    }
    v6 = v45;
    *(_QWORD *)(v10 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v44 + 48) + 8 * v15) = v22;
    v16 = (uint64_t *)(*(_QWORD *)(v44 + 56) + 88 * v15);
    *v16 = v24;
    v16[1] = v25;
    v16[2] = v26;
    v16[3] = v27;
    v16[4] = v28;
    v16[5] = v49;
    v16[6] = v30;
    v16[7] = v29;
    v16[8] = v48;
    v16[9] = v47;
    v16[10] = v46;
    ++*(_QWORD *)(v44 + 16);
  }
  while (v41 - 4 != v6)
  {
    v20 = *(_QWORD *)(v39 + 8 * v6++);
    if (v20)
    {
      v19 = v6 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v43 & 1) == 0)
  {
LABEL_32:
    result = swift_release();
    v35 = v44;
    v33 = v38;
    goto LABEL_35;
  }
  v33 = v38;
  if (v37 >= 64)
    bzero(v40, 8 * v41);
  else
    *v40 = v36;
  *(_QWORD *)(v4 + 16) = 0;
  result = swift_release();
  v35 = v44;
LABEL_35:
  *v33 = v35;
  return result;
}

uint64_t sub_1B1E92F04(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5FFE0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v33 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v30 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v31 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v8 << 6);
      goto LABEL_20;
    }
    v19 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v20 = v9[v19];
    if (!v20)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v20 = v9[v19];
      if (!v20)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v20 = v9[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v8 = v19;
LABEL_20:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    v23 = sub_1B222A060();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (v26 + 1 == v27)
          v26 = 0;
        else
          ++v26;
        v28 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v20)
    {
      v19 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v33 & 1) != 0)
  {
    v3 = v32;
    if (v31 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v30;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v32;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9319C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  int64_t v39;
  int v40;
  __int128 v41;

  v3 = v2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1EB5F2C();
  v40 = a2;
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_35;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v37 = v2;
  v38 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = 0;
  v39 = v17;
  v36 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_20;
    }
    v23 = v19 + 1;
    if (v19 + 1 >= v39)
      goto LABEL_30;
    v24 = v38[v23];
    if (!v24)
    {
      v23 = v19 + 2;
      if (v19 + 2 >= v39)
        goto LABEL_30;
      v24 = v38[v23];
      if (!v24)
      {
        v23 = v19 + 3;
        if (v19 + 3 >= v39)
          goto LABEL_30;
        v24 = v38[v23];
        if (!v24)
          break;
      }
    }
LABEL_19:
    v16 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v19 = v23;
LABEL_20:
    v25 = *(_QWORD *)(v6 + 72);
    v26 = *(_QWORD *)(v10 + 48) + v25 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v26, v5);
      v41 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v26, v5);
      v41 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
      swift_retain();
    }
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v27 = sub_1B22285D8();
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (v30 + 1 == v31)
          v30 = 0;
        else
          ++v30;
        v32 = *(_QWORD *)(v18 + 8 * v30);
      }
      while (v32 == -1);
      v20 = __clz(__rbit64(~v32)) + (v30 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v25 * v20, v9, v5);
    *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v20) = v41;
    ++*(_QWORD *)(v12 + 16);
  }
  while (v36 != v19)
  {
    v24 = *(_QWORD *)(v10 + 8 * v19++ + 96);
    if (v24)
    {
      v23 = v19 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  v3 = v37;
  if ((v40 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v10 + 32);
    if (v33 >= 64)
      bzero(v38, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v38 = -1 << v33;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E934FC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  __int128 v29;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9C780();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v28 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_20;
    }
    v17 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v18 = v28[v17];
    if (!v18)
    {
      v17 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v18 = v28[v17];
      if (!v18)
      {
        v17 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v18 = v28[v17];
        if (!v18)
          break;
      }
    }
LABEL_19:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v13 = v17;
LABEL_20:
    v19 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v29 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v16);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v20 = sub_1B222A0C0();
    v21 = -1 << *(_BYTE *)(v7 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (v23 + 1 == v24)
          v23 = 0;
        else
          ++v23;
        v25 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v25 == -1);
      v14 = __clz(__rbit64(~v25)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v19;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v18 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v18)
    {
      v17 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_29:
  swift_release();
  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v26 = 1 << *(_BYTE *)(v5 + 32);
    if (v26 >= 64)
      bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v28 = -1 << v26;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E937F8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[6];

  v3 = v2;
  v5 = *v2;
  sub_1B1EB65A0();
  v39 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v37 = v11;
  v38 = v5;
  v34 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_21;
    }
    v21 = v13 + 1;
    if (v13 + 1 >= v37)
      goto LABEL_29;
    v22 = v36[v21];
    if (!v22)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v37)
        goto LABEL_29;
      v22 = v36[v21];
      if (!v22)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v37)
          goto LABEL_29;
        v22 = v36[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v10 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v13 = v21;
LABEL_21:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 40 * v20);
    v24 = *v23;
    v25 = v23[1];
    v27 = v23[2];
    v26 = v23[3];
    v28 = v23[4];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v39 & 1) == 0)
    {
      sub_1B19FA2B4(v24, v25);
      swift_bridgeObjectRetain();
    }
    v40[0] = v24;
    v40[1] = v25;
    v40[2] = v27;
    v40[3] = v26;
    v40[4] = v28;
    sub_1B222A06C();
    sub_1B1E03DBC();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v30)
          v17 = 0;
        else
          ++v17;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1B19FA278((uint64_t)v40, *(_QWORD *)(v7 + 48) + 40 * v18);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
    v5 = v38;
  }
  while (v34 != v13)
  {
    v22 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v22)
    {
      v21 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v35;
  if ((v39 & 1) != 0)
  {
    v32 = 1 << *(_BYTE *)(v5 + 32);
    if (v32 >= 64)
      bzero(v36, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v36 = -1 << v32;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E93B20(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB6558);
}

uint64_t sub_1B1E93B2C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  int64_t v39;
  int v40;
  _OWORD v41[2];

  v3 = v2;
  v5 = sub_1B2229610();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1B9A9BC();
  v40 = a2;
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_35;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v37 = v2;
  v38 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = 0;
  v39 = v17;
  v36 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_20;
    }
    v23 = v19 + 1;
    if (v19 + 1 >= v39)
      goto LABEL_30;
    v24 = v38[v23];
    if (!v24)
    {
      v23 = v19 + 2;
      if (v19 + 2 >= v39)
        goto LABEL_30;
      v24 = v38[v23];
      if (!v24)
      {
        v23 = v19 + 3;
        if (v19 + 3 >= v39)
          goto LABEL_30;
        v24 = v38[v23];
        if (!v24)
          break;
      }
    }
LABEL_19:
    v16 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v19 = v23;
LABEL_20:
    v25 = *(_QWORD *)(v6 + 72);
    v26 = *(_QWORD *)(v10 + 48) + v25 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v26, v5);
      sub_1B1A0DDAC((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v26, v5);
      sub_1B1A02864(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }
    v27 = sub_1B22285D8();
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (v30 + 1 == v31)
          v30 = 0;
        else
          ++v30;
        v32 = *(_QWORD *)(v18 + 8 * v30);
      }
      while (v32 == -1);
      v20 = __clz(__rbit64(~v32)) + (v30 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v25 * v20, v9, v5);
    sub_1B1A0DDAC(v41, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  while (v36 != v19)
  {
    v24 = *(_QWORD *)(v10 + 8 * v19++ + 96);
    if (v24)
    {
      v23 = v19 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  v3 = v37;
  if ((v40 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v10 + 32);
    if (v33 >= 64)
      bzero(v38, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v38 = -1 << v33;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E93E78(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB5BE4);
}

uint64_t sub_1B1E93E84(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB5F08);
}

uint64_t sub_1B1E93E90(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char v31;
  __int128 v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9D218();
  v6 = sub_1B22296C4();
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v31 = a2;
  v9 = 0;
  v10 = (_QWORD *)(v5 + 64);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  v15 = v6 + 64;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v9 << 6);
      goto LABEL_20;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v14)
      goto LABEL_27;
    v21 = v10[v20];
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_27;
      v21 = v10[v20];
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_27;
        v21 = v10[v20];
        if (!v21)
          break;
      }
    }
LABEL_19:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_20:
    *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    v32 = v7;
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v23 = sub_1B222A0C0();
    v24 = -1 << *(_BYTE *)(v8 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (v26 + 1 == v27)
          v26 = 0;
        else
          ++v26;
        v28 = *(_QWORD *)(v15 + 8 * v26);
      }
      while (v28 == -1);
      v16 = __clz(__rbit64(~v28)) + (v26 << 6);
    }
    *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = 8 * v16;
    *((_QWORD *)&v7 + 1) = *((_QWORD *)&v32 + 1);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v22;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v14 - 4 != v9)
  {
    v21 = *(_QWORD *)(v5 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v31 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v29 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v10 = -1 << v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v8;
  return result;
}

uint64_t sub_1B1E9414C(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, (void (*)(_QWORD))sub_1B1EB69C0);
}

uint64_t sub_1B1E94158(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v7 = sub_1B22296C4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_35;
  v9 = 0;
  v10 = (uint64_t *)(v6 + 64);
  v11 = 1 << *(_BYTE *)(v6 + 32);
  v30 = -1 << v11;
  v31 = v11;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v6 + 64);
  v14 = v7 + 64;
  v32 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v21 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v22 = v21 | (v9 << 6);
      goto LABEL_21;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v32)
      goto LABEL_29;
    v24 = v10[v23];
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v32)
        goto LABEL_29;
      v24 = v10[v23];
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v32)
          goto LABEL_29;
        v24 = v10[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v13 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_21:
    v25 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v22);
    v26 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    v15 = sub_1B222A060();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v27)
          v18 = 0;
        else
          ++v18;
        v28 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v28 == -1);
      v19 = __clz(__rbit64(~v28)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v25;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v26;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v32 - 4 != v9)
  {
    v24 = *(_QWORD *)(v6 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v31 >= 64)
      bzero((void *)(v6 + 64), 8 * v32);
    else
      *v10 = v30;
    *(_QWORD *)(v6 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1B1E943E8(uint64_t a1, char a2)
{
  return sub_1B1E9440C(a1, a2, (void (*)(_QWORD))sub_1B1EB673C);
}

uint64_t sub_1B1E943F4(uint64_t a1, int a2)
{
  return sub_1B1EA3694(a1, a2, (void (*)(_QWORD, __n128))sub_1B1EB692C);
}

uint64_t sub_1B1E94400(uint64_t a1, char a2)
{
  return sub_1B1E9440C(a1, a2, sub_1B1EB5FE4);
}

uint64_t sub_1B1E9440C(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v7 = sub_1B22296C4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_35;
  v9 = 0;
  v10 = (uint64_t *)(v6 + 64);
  v11 = 1 << *(_BYTE *)(v6 + 32);
  v30 = -1 << v11;
  v31 = v11;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v6 + 64);
  v14 = v7 + 64;
  v32 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v21 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v22 = v21 | (v9 << 6);
      goto LABEL_21;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v32)
      goto LABEL_29;
    v24 = v10[v23];
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v32)
        goto LABEL_29;
      v24 = v10[v23];
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v32)
          goto LABEL_29;
        v24 = v10[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v13 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_21:
    v25 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v22);
    v26 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((a2 & 1) == 0)
      swift_retain();
    v15 = sub_1B222A060();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v27)
          v18 = 0;
        else
          ++v18;
        v28 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v28 == -1);
      v19 = __clz(__rbit64(~v28)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v25;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v26;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v32 - 4 != v9)
  {
    v24 = *(_QWORD *)(v6 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v31 >= 64)
      bzero((void *)(v6 + 64), 8 * v32);
    else
      *v10 = v30;
    *(_QWORD *)(v6 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1B1E9469C(uint64_t a1, int a2)
{
  return sub_1B1E946E4(a1, a2, (uint64_t (*)(_QWORD))sub_1B1EB6CE0, (void (*)(_QWORD, __n128))sub_1B1EB6CFC, (void (*)(unint64_t, char *))sub_1B1EB6D2C, (void (*)(unint64_t, char *))sub_1B1EB6D20);
}

uint64_t sub_1B1E946C0(uint64_t a1, int a2)
{
  return sub_1B1E946E4(a1, a2, (uint64_t (*)(_QWORD))sub_1B1EB6CAC, (void (*)(_QWORD, __n128))sub_1B1A05728, (void (*)(unint64_t, char *))sub_1B1EB6CD4, (void (*)(unint64_t, char *))sub_1B1EB6CC8);
}

uint64_t sub_1B1E946E4(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD, __n128), void (*a5)(unint64_t, char *), void (*a6)(unint64_t, char *))
{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(unint64_t, char *);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int64_t v43;
  _QWORD *v44;
  int64_t v45;
  uint64_t v46;
  void (*v47)(unint64_t, char *);
  int v48;

  v47 = a6;
  v9 = v6;
  v11 = a3(0);
  v46 = *(_QWORD *)(v11 - 8);
  v13.n128_f64[0] = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v40 - v14;
  v16 = *v6;
  a4(0, v13);
  v48 = a2;
  v17 = sub_1B22296C4();
  v18 = v17;
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_35;
  v41 = v6;
  v19 = 0;
  v20 = 1 << *(_BYTE *)(v16 + 32);
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v22 = v21 & *(_QWORD *)(v16 + 64);
  v23 = v17 + 64;
  v44 = (_QWORD *)(v16 + 64);
  v45 = (unint64_t)(v20 + 63) >> 6;
  v42 = v16 + 96;
  v43 = v45 - 4;
  while (1)
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v19 << 6);
      goto LABEL_20;
    }
    v27 = v19 + 1;
    if (v19 + 1 >= v45)
      goto LABEL_29;
    v28 = v44[v27];
    if (!v28)
    {
      v27 = v19 + 2;
      if (v19 + 2 >= v45)
        goto LABEL_29;
      v28 = v44[v27];
      if (!v28)
      {
        v27 = v19 + 3;
        if (v19 + 3 >= v45)
          goto LABEL_29;
        v28 = v44[v27];
        if (!v28)
          break;
      }
    }
LABEL_19:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v19 = v27;
LABEL_20:
    v29 = *(_BYTE *)(*(_QWORD *)(v16 + 48) + v26);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = v47;
    if ((v48 & 1) != 0)
      v31 = a5;
    v31(*(_QWORD *)(v16 + 56) + v30 * v26, v15);
    sub_1B222A06C();
    sub_1B222A078();
    v32 = sub_1B222A0C0();
    v33 = -1 << *(_BYTE *)(v18 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v23 + 8 * (v34 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v23 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (v35 + 1 == v36)
          v35 = 0;
        else
          ++v35;
        v37 = *(_QWORD *)(v23 + 8 * v35);
      }
      while (v37 == -1);
      v24 = __clz(__rbit64(~v37)) + (v35 << 6);
    }
    *(_QWORD *)(v23 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_BYTE *)(*(_QWORD *)(v18 + 48) + v24) = v29;
    a5((unint64_t)v15, (char *)(*(_QWORD *)(v18 + 56) + v30 * v24));
    ++*(_QWORD *)(v18 + 16);
  }
  while (v43 != v19)
  {
    v28 = *(_QWORD *)(v42 + 8 * v19++);
    if (v28)
    {
      v27 = v19 + 3;
      goto LABEL_19;
    }
  }
LABEL_29:
  if ((v48 & 1) != 0)
  {
    v38 = 1 << *(_BYTE *)(v16 + 32);
    v9 = v41;
    if (v38 >= 64)
      bzero(v44, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v38;
    *(_QWORD *)(v16 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v9 = v41;
  }
  *v9 = v18;
  return result;
}

uint64_t sub_1B1E94A04(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t i;
  char v39;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA910);
  v39 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v24 = v37[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v24 = v37[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v24 = v37[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v29 = *(_QWORD *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    v31 = *(_BYTE *)(v28 + 16);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v32)
          v17 = 0;
        else
          ++v17;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v27;
    v19[1] = v26;
    v20 = *(_QWORD *)(v7 + 56) + 24 * v18;
    *(_QWORD *)v20 = v29;
    *(_QWORD *)(v20 + 8) = v30;
    *(_BYTE *)(v20 + 16) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v36;
  if ((v39 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v37 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E94D14(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  int64_t v29;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9B170();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v28 = (_QWORD *)(v5 + 64);
  v29 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v8 << 6);
      goto LABEL_21;
    }
    v20 = v8 + 1;
    if (v8 + 1 >= v29)
      goto LABEL_29;
    v21 = v28[v20];
    if (!v21)
    {
      v20 = v8 + 2;
      if (v8 + 2 >= v29)
        goto LABEL_29;
      v21 = v28[v20];
      if (!v21)
      {
        v20 = v8 + 3;
        if (v8 + 3 >= v29)
          goto LABEL_29;
        v21 = v28[v20];
        if (!v21)
          break;
      }
    }
LABEL_20:
    v11 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v8 = v20;
LABEL_21:
    v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B222A078();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v24)
          v16 = 0;
        else
          ++v16;
        v25 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v25 == -1);
      v17 = __clz(__rbit64(~v25)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v22;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v29 - 4 != v8)
  {
    v21 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v21)
    {
      v20 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v26 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v26 >= 64)
      bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v28 = -1 << v26;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E94FD0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  int64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA980);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v31 = v3;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v9;
  v30 = v9;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v32 = (uint64_t *)(v5 + 64);
  v33 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v33)
      goto LABEL_29;
    v22 = v32[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v33)
        goto LABEL_29;
      v22 = v32[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v33)
          goto LABEL_29;
        v22 = v32[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v24 = *(_QWORD *)(v5 + 56) + 24 * v20;
    v34 = *(_OWORD *)v24;
    v25 = *(_QWORD *)(v24 + 16);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    v13 = sub_1B222A060();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v26)
          v16 = 0;
        else
          ++v16;
        v27 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v23;
    v18 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_OWORD *)v18 = v34;
    *(_QWORD *)(v18 + 16) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v33 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v3 = v31;
    if (v30 >= 64)
      bzero(v32, 8 * v33);
    else
      *v32 = v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v31;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E952A4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9D7E0();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v30 = a2;
  v8 = 0;
  v9 = (_QWORD *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v19 = v9[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = v9[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v19 = v9[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    sub_1B222A06C();
    sub_1B222A078();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v20;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v30 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v9 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E95540(uint64_t a1, char a2)
{
  return sub_1B1E9557C(a1, a2, (void (*)(_QWORD))sub_1B1B9C550);
}

uint64_t sub_1B1E9554C(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB6414);
}

uint64_t sub_1B1E95558(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB6534);
}

uint64_t sub_1B1E95564(uint64_t a1, char a2)
{
  return sub_1B1E9557C(a1, a2, sub_1B1EB5FC0);
}

uint64_t sub_1B1E95570(uint64_t a1, char a2)
{
  return sub_1B1E9557C(a1, a2, (void (*)(_QWORD))sub_1B1B9B590);
}

uint64_t sub_1B1E9557C(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _QWORD *v33;
  char v34;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v34 = a2;
  v7 = sub_1B22296C4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_34;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v33 = (_QWORD *)(v6 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    v23 = v14 + 1;
    if (v14 + 1 >= v12)
      goto LABEL_29;
    v24 = v33[v23];
    if (!v24)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v12)
        goto LABEL_29;
      v24 = v33[v23];
      if (!v24)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v12)
          goto LABEL_29;
        v24 = v33[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v11 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v14 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v15 = sub_1B222A0C0();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v29)
          v18 = 0;
        else
          ++v18;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v27;
    v20[1] = v26;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v12 - 4 != v14)
  {
    v24 = *(_QWORD *)(v6 + 8 * v14++ + 96);
    if (v24)
    {
      v23 = v14 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  if ((v34 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v6 + 32);
    if (v31 >= 64)
      bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v33 = -1 << v31;
    *(_QWORD *)(v6 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1B1E95854(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5FF80);
  v36 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v33 = -1 << v9;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v34 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v12 = v6 + 64;
  v38 = (uint64_t *)(v5 + 64);
  v39 = (unint64_t)(v9 + 63) >> 6;
  v37 = v5 + 96;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v8;
      v17 = v15 | (v8 << 6);
      goto LABEL_20;
    }
    v16 = v8 + 1;
    if (v8 + 1 >= v39)
      goto LABEL_27;
    v18 = v38[v16];
    if (!v18)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v39)
        goto LABEL_27;
      v18 = v38[v16];
      if (!v18)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v39)
          goto LABEL_27;
        v18 = v38[v16];
        if (!v18)
          break;
      }
    }
LABEL_19:
    v11 = (v18 - 1) & v18;
    v17 = __clz(__rbit64(v18)) + (v16 << 6);
LABEL_20:
    v19 = *(_QWORD *)(v5 + 56) + 80 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v44 = *(_BYTE *)(v19 + 64);
    v42 = *(_QWORD *)(v19 + 48);
    v43 = *(_QWORD *)(v19 + 56);
    v21 = *(_QWORD *)(v19 + 32);
    v41 = *(_QWORD *)(v19 + 40);
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v25 = *(_QWORD *)v19;
    v24 = *(_QWORD *)(v19 + 8);
    v26 = sub_1B222A060();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (v29 + 1 == v30)
          v29 = 0;
        else
          ++v29;
        v31 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v31 == -1);
      v13 = __clz(__rbit64(~v31)) + (v29 << 6);
    }
    v8 = v16;
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v20;
    v14 = *(_QWORD *)(v7 + 56) + 80 * v13;
    *(_QWORD *)v14 = v25;
    *(_QWORD *)(v14 + 8) = v24;
    *(_QWORD *)(v14 + 16) = v23;
    *(_QWORD *)(v14 + 24) = v22;
    *(_QWORD *)(v14 + 32) = v21;
    *(_QWORD *)(v14 + 40) = v41;
    *(_QWORD *)(v14 + 48) = v42;
    *(_QWORD *)(v14 + 56) = v43;
    *(_BYTE *)(v14 + 64) = v44;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v39 - 4 != v8)
  {
    v18 = *(_QWORD *)(v37 + 8 * v8++);
    if (v18)
    {
      v16 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v36 & 1) != 0)
  {
    v3 = v35;
    if (v34 >= 64)
      bzero(v38, 8 * v39);
    else
      *v38 = v33;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v35;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E95B60(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t i;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA950);
  v43 = a2;
  v6 = sub_1B22296C4();
  v44 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v7 = 0;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = -1 << v8;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v37 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v3;
  v11 = v6 + 64;
  v40 = (uint64_t *)(v5 + 64);
  v41 = (unint64_t)(v8 + 63) >> 6;
  v39 = v5 + 96;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v45 = v7;
      v19 = v18 | (v7 << 6);
      goto LABEL_21;
    }
    v20 = v7 + 1;
    if (v7 + 1 >= v41)
      goto LABEL_29;
    v21 = v40[v20];
    if (!v21)
    {
      v20 = v7 + 2;
      if (v7 + 2 >= v41)
        goto LABEL_29;
      v21 = v40[v20];
      if (!v21)
      {
        v20 = v7 + 3;
        if (v7 + 3 >= v41)
          goto LABEL_29;
        v21 = v40[v20];
        if (!v21)
          break;
      }
    }
LABEL_20:
    v10 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v45 = v20;
LABEL_21:
    v22 = *(_QWORD *)(v5 + 56);
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    v24 = v22 + 56 * v19;
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    v30 = *(_QWORD *)(v24 + 32);
    v29 = *(_QWORD *)(v24 + 40);
    v31 = *(_BYTE *)(v24 + 48);
    if ((v43 & 1) == 0)
      sub_1B1B3C554(v25, v26, v27, v28, v30, v29, v31);
    v12 = sub_1B222A060();
    v13 = -1 << *(_BYTE *)(v44 + 32);
    v14 = v12 & ~v13;
    v15 = v14 >> 6;
    if (((-1 << v14) & ~*(_QWORD *)(v11 + 8 * (v14 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v11 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (v15 + 1 == v32)
          v15 = 0;
        else
          ++v15;
        v33 = *(_QWORD *)(v11 + 8 * v15);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v15 << 6);
    }
    v7 = v45;
    *(_QWORD *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v44 + 48) + 8 * v16) = v23;
    v17 = *(_QWORD *)(v44 + 56) + 56 * v16;
    *(_QWORD *)v17 = v25;
    *(_QWORD *)(v17 + 8) = v26;
    *(_QWORD *)(v17 + 16) = v27;
    *(_QWORD *)(v17 + 24) = v28;
    *(_QWORD *)(v17 + 32) = v30;
    *(_QWORD *)(v17 + 40) = v29;
    *(_BYTE *)(v17 + 48) = v31;
    ++*(_QWORD *)(v44 + 16);
  }
  while (v41 - 4 != v7)
  {
    v21 = *(_QWORD *)(v39 + 8 * v7++);
    if (v21)
    {
      v20 = v7 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v43 & 1) != 0)
  {
    v3 = v38;
    if (v37 >= 64)
      bzero(v40, 8 * v41);
    else
      *v40 = v36;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
    v35 = v44;
  }
  else
  {
    result = swift_release();
    v35 = v44;
    v3 = v38;
  }
  *v3 = v35;
  return result;
}

uint64_t sub_1B1E95E84(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B698);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v32 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v30 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v19 = v9[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = v9[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v19 = v9[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
    v22 = sub_1B222A060();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v20;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v32 & 1) != 0)
  {
    v3 = v31;
    if (v30 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v31;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E96110(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t i;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void *v47;
  uint64_t v48;

  v4 = *v2;
  sub_1B1B9B774();
  v43 = a2;
  v5 = sub_1B22296C4();
  v44 = v5;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_32;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v36 = -1 << v7;
  v37 = v7;
  v8 = v7 < 64 ? ~(-1 << v7) : -1;
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v10 = v5 + 64;
  v40 = (uint64_t *)(v4 + 64);
  v41 = (unint64_t)(v7 + 63) >> 6;
  v39 = v4 + 96;
  for (i = v4; ; v4 = i)
  {
    if (v9)
    {
      v17 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v45 = v6;
      v18 = v17 | (v6 << 6);
      goto LABEL_21;
    }
    v19 = v6 + 1;
    if (v6 + 1 >= v41)
      goto LABEL_29;
    v20 = v40[v19];
    if (!v20)
    {
      v19 = v6 + 2;
      if (v6 + 2 >= v41)
        goto LABEL_29;
      v20 = v40[v19];
      if (!v20)
      {
        v19 = v6 + 3;
        if (v6 + 3 >= v41)
          goto LABEL_29;
        v20 = v40[v19];
        if (!v20)
          break;
      }
    }
LABEL_20:
    v9 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v45 = v19;
LABEL_21:
    v21 = *(_QWORD *)(v4 + 56);
    v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    v23 = v21 + 80 * v18;
    v24 = *(void **)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    v28 = *(_QWORD *)(v23 + 32);
    v30 = *(_QWORD *)(v23 + 48);
    v29 = *(_QWORD *)(v23 + 56);
    v47 = *(void **)(v23 + 64);
    v48 = *(_QWORD *)(v23 + 40);
    v46 = *(_BYTE *)(v23 + 72);
    if ((v43 & 1) == 0)
      sub_1B1B3FCA8(v24, v25, v26, v27, v28, v48, v30, v29, v47, v46);
    v11 = sub_1B222A060();
    v12 = -1 << *(_BYTE *)(v44 + 32);
    v13 = v11 & ~v12;
    v14 = v13 >> 6;
    if (((-1 << v13) & ~*(_QWORD *)(v10 + 8 * (v13 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v10 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = (unint64_t)(63 - v12) >> 6;
      do
      {
        if (v14 + 1 == v31)
          v14 = 0;
        else
          ++v14;
        v32 = *(_QWORD *)(v10 + 8 * v14);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v14 << 6);
    }
    v6 = v45;
    *(_QWORD *)(v10 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v44 + 48) + 8 * v15) = v22;
    v16 = *(_QWORD *)(v44 + 56) + 80 * v15;
    *(_QWORD *)v16 = v24;
    *(_QWORD *)(v16 + 8) = v25;
    *(_QWORD *)(v16 + 16) = v26;
    *(_QWORD *)(v16 + 24) = v27;
    *(_QWORD *)(v16 + 32) = v28;
    *(_QWORD *)(v16 + 40) = v48;
    *(_QWORD *)(v16 + 48) = v30;
    *(_QWORD *)(v16 + 56) = v29;
    *(_QWORD *)(v16 + 64) = v47;
    *(_BYTE *)(v16 + 72) = v46;
    ++*(_QWORD *)(v44 + 16);
  }
  while (v41 - 4 != v6)
  {
    v20 = *(_QWORD *)(v39 + 8 * v6++);
    if (v20)
    {
      v19 = v6 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v43 & 1) == 0)
  {
LABEL_32:
    result = swift_release();
    v35 = v44;
    v33 = v38;
    goto LABEL_35;
  }
  v33 = v38;
  if (v37 >= 64)
    bzero(v40, 8 * v41);
  else
    *v40 = v36;
  *(_QWORD *)(v4 + 16) = 0;
  result = swift_release();
  v35 = v44;
LABEL_35:
  *v33 = v35;
  return result;
}

uint64_t sub_1B1E96448(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  int64_t v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99824();
  v35 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v34 = v11;
  v31 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v34)
      goto LABEL_29;
    v23 = v33[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v34)
        goto LABEL_29;
      v23 = v33[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v34)
          goto LABEL_29;
        v23 = v33[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v35 & 1) == 0)
    {
      v26 = v24;
      swift_bridgeObjectRetain();
    }
    sub_1B222874C();
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    swift_bridgeObjectRelease();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v27)
          v17 = 0;
        else
          ++v17;
        v28 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v31 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v32;
  if ((v35 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v5 + 32);
    if (v29 >= 64)
      bzero(v33, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v33 = -1 << v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E96740(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  char v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _QWORD *v33;
  int64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  sub_1B1B997C4();
  v35 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v33 = (_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v34)
      goto LABEL_29;
    v22 = v33[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v34)
        goto LABEL_29;
      v22 = v33[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v34)
          goto LABEL_29;
        v22 = v33[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v37 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v23 = *(_QWORD *)(v5 + 56) + 40 * v20;
    v24 = *(void **)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_DWORD *)(v23 + 16);
    v27 = *(_BYTE *)(v23 + 20);
    v36 = *(_OWORD *)(v23 + 24);
    if ((v35 & 1) == 0)
    {
      v28 = v24;
      swift_retain();
    }
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v29)
          v16 = 0;
        else
          ++v16;
        v30 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v37;
    v18 = *(_QWORD *)(v7 + 56) + 40 * v17;
    *(_QWORD *)v18 = v24;
    *(_QWORD *)(v18 + 8) = v25;
    *(_DWORD *)(v18 + 16) = v26;
    *(_BYTE *)(v18 + 20) = v27;
    *(_OWORD *)(v18 + 24) = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v34 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v35 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v31 >= 64)
      bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v33 = -1 << v31;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

