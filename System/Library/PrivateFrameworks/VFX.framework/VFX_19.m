uint64_t sub_1B2198040(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      v23 = v7;
      v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      v24 = a2;
      while (1)
      {
        v14 = *((unsigned int *)v12 - 6);
        v13 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v26 = v8;
        v27 = v12[1];
        v16 = v12[2];
        v43 = v3;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v13 - v14 + v15);
        v38[5] = v25;
        v38[6] = v14;
        v38[7] = v13;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        sub_1B219791C(v38, (uint64_t)v9, v24, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (unint64_t *)&unk_1ED4B9910, (uint64_t)sub_1B19F65A8, (void (*)(uint64_t, uint64_t))sub_1B1CE6188);
        v3 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2198388(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      v23 = v7;
      v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      v24 = a2;
      while (1)
      {
        v14 = *((unsigned int *)v12 - 6);
        v13 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v26 = v8;
        v27 = v12[1];
        v16 = v12[2];
        v43 = v3;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v13 - v14 + v15);
        v38[5] = v25;
        v38[6] = v14;
        v38[7] = v13;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        sub_1B219791C(v38, (uint64_t)v9, v24, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (unint64_t *)&unk_1ED4B9900, (uint64_t)sub_1B19F65D4, (void (*)(uint64_t, uint64_t))sub_1B1CE6188);
        v3 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B21986D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      v23 = v7;
      v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      v24 = a2;
      while (1)
      {
        v14 = *((unsigned int *)v12 - 6);
        v13 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v26 = v8;
        v27 = v12[1];
        v16 = v12[2];
        v43 = v3;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v13 - v14 + v15);
        v38[5] = v25;
        v38[6] = v14;
        v38[7] = v13;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        sub_1B219791C(v38, (uint64_t)v9, v24, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, &qword_1ED4B9950, (uint64_t)sub_1B19F6600, (void (*)(uint64_t, uint64_t))sub_1B1CE6188);
        v3 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2198A18(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      v23 = v7;
      v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      v24 = a2;
      while (1)
      {
        v14 = *((unsigned int *)v12 - 6);
        v13 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v26 = v8;
        v27 = v12[1];
        v16 = v12[2];
        v43 = v3;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v13 - v14 + v15);
        v38[5] = v25;
        v38[6] = v14;
        v38[7] = v13;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        sub_1B219791C(v38, (uint64_t)v9, v24, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (unint64_t *)&unk_1ED4B9940, (uint64_t)sub_1B19F62FC, (void (*)(uint64_t, uint64_t))sub_1B1CE6188);
        v3 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2198D60(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      v23 = v7;
      v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      v24 = a2;
      while (1)
      {
        v14 = *((unsigned int *)v12 - 6);
        v13 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v26 = v8;
        v27 = v12[1];
        v16 = v12[2];
        v43 = v3;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v13 - v14 + v15);
        v38[5] = v25;
        v38[6] = v14;
        v38[7] = v13;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        sub_1B219791C(v38, (uint64_t)v9, v24, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (unint64_t *)&unk_1ED4B9920, (uint64_t)sub_1B19F6328, (void (*)(uint64_t, uint64_t))sub_1B1CE6188);
        v3 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

char *sub_1B21990A8(uint64_t a1, const void *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v5 = (char *)ecs_stack_allocator_allocate(a3, 656 * a1, 8);
  v6 = v5;
  if (a1)
  {
    memcpy(v5, a2, 0x290uLL);
    if (a1 != 1)
    {
      memcpy(v6 + 656, a2, 0x290uLL);
      if (a1 != 2)
      {
        memcpy(v6 + 1312, a2, 0x290uLL);
        v7 = a1 - 3;
        if (a1 != 3)
        {
          v8 = v6 + 1968;
          do
          {
            sub_1B1C1FAFC((uint64_t)a2);
            memcpy(v8, a2, 0x290uLL);
            v8 += 656;
            --v7;
          }
          while (v7);
        }
        sub_1B1C1FAFC((uint64_t)a2);
      }
      sub_1B1C1FAFC((uint64_t)a2);
    }
    sub_1B1C1FAFC((uint64_t)a2);
  }
  return v6;
}

_QWORD *sub_1B2199188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = ecs_stack_allocator_allocate(a3, 8 * a1, 8);
  v6 = v5;
  if (a1)
  {
    *v5 = a2;
    if (a1 != 1)
    {
      v5[1] = a2;
      if (a1 != 2)
      {
        v5[2] = a2;
        v7 = a1 - 3;
        if (a1 != 3)
        {
          v8 = v5 + 3;
          do
          {
            *v8++ = a2;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t sub_1B2199230(_QWORD *a1, _QWORD *a2, void *a3, uint64_t a4, id *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE v49[24];
  _QWORD v50[2];
  uint64_t v51;
  _QWORD v52[3];
  char v53;

  v9 = a1[1];
  v10 = swift_retain();
  v11 = sub_1B19F662C(v10, (uint64_t)a1);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for MetalScriptReflection, &v53);
  if (v53 == 1)
  {
    a2[9] = &type metadata for MetalScriptReflection;
    a2[10] = &off_1E63A3588;
    v12 = (uint64_t *)a1[11];
    v13 = a1[13];
    v14 = (id *)sub_1B1A12038((uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1E63A3588, v12, a1[12], v13, a1[2]);
    if (v12)
    {
      if (v13)
      {
        sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72);
        do
        {
          v17 = *v12++;
          sub_1B1D4A5E4(v9, v17, v11, v14, a3, a4, a5);
          if (v5)
            break;
          ++v14;
          v11 += v16;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      v19 = a1[6];
      v20 = a1[7];
      if (v19 != v20)
      {
        sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72);
        v23 = &v14[v19];
        v24 = v11 + v19 * v22;
        do
        {
          sub_1B1D4A5E4(v9, v19, v24, v23, a3, a4, a5);
          if (v5)
            break;
          ++v19;
          ++v23;
          v24 += v22;
        }
        while (v20 != v19);
      }
    }
  }
  else
  {
    sub_1B1A025EC((uint64_t)(a1 + 11), (uint64_t)v49, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    sub_1B1A025EC((uint64_t)v49, (uint64_t)v52, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    if (v52[0])
      v18 = v52[2];
    else
      v18 = a1[7] - a1[6];
    v25 = sub_1B1B7ECF8(MEMORY[0x1E0DEE9D8]);
    v26 = a2[4];
    v27 = (id *)sub_1B2199188(v18, (uint64_t)v25, v26);
    v45 = v28;
    v44 = v29;
    swift_bridgeObjectRelease();
    sub_1B1A025EC((uint64_t)v49, (uint64_t)v50, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    v30 = (uint64_t *)v50[0];
    v46 = (_QWORD *)v26;
    if (v50[0])
    {
      v31 = v51;
      v42 = v50[1];
      v43 = v51;
      if (v51)
      {
        sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v32 = 0;
        v34 = *(_QWORD *)(*(_QWORD *)(v33 - 8) + 72);
        while (1)
        {
          sub_1B1D4A5E4(v9, v30[v32], v11, &v27[v32], a3, a4, a5);
          if (v5)
            break;
          ++v32;
          v11 += v34;
          if (!--v31)
            goto LABEL_21;
        }
      }
      else
      {
LABEL_21:
        sub_1B21846A0(v30, v42, v43, (uint64_t)v27, v44);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 == v36)
      {
LABEL_26:
        sub_1B21847EC(*(_QWORD *)(v9 + 232), *(_QWORD *)(v9 + 240), (uint64_t)v27, v44);
      }
      else
      {
        sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v38 = *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72);
        v39 = v11 + v35 * v38;
        v40 = v27;
        while (1)
        {
          sub_1B1D4A5E4(v9, v35, v39, v40, a3, a4, a5);
          if (v5)
            break;
          ++v35;
          ++v40;
          v39 += v38;
          if (v36 == v35)
            goto LABEL_26;
        }
      }
    }
    ecs_stack_allocator_deallocate(v46, (unint64_t)v27, 8 * v45);
  }
  return swift_release();
}

uint64_t sub_1B21995C4(uint64_t result, void *a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  _BYTE v41[40];
  _QWORD v42[10];
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v6 = v5;
  v34 = *(_OWORD *)result;
  v35 = *(_OWORD *)(result + 16);
  v36 = *(_QWORD *)(result + 32);
  v26 = *(_QWORD *)(result + 80);
  if (v26 >= 1)
  {
    v9 = result;
    v32 = *(_QWORD *)(result + 40);
    v11 = *(_QWORD *)(result + 56);
    v10 = *(_QWORD *)(result + 64);
    v12 = *(_QWORD **)(result + 72);
    v13 = v12[4];
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v14 = v13;
    ecs_stack_allocator_push_snapshot(v13);
    if (v11)
    {
      v23 = v10;
      v47 = *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      sub_1B1D6631C(v9);
      v15 = (uint64_t *)(v32 + 24);
      v25 = a2;
      v24 = a4;
      while (1)
      {
        v16 = *((unsigned int *)v15 - 6);
        v17 = *((unsigned int *)v15 - 5);
        v18 = *((unsigned int *)v15 - 4);
        v30 = *v15;
        v31 = *(v15 - 1);
        v28 = v11;
        v29 = v15[1];
        v19 = v15[2];
        v33 = v6;
        if (v47)
        {
          v20 = *(os_unfair_lock_s **)(v19 + 376);
          swift_retain();
          os_unfair_lock_lock(v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        sub_1B1A000F0((uint64_t)(v12 + 6), (uint64_t)v41, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v21 = v12[4];
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v12[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
        v12[7] = v22;
        v12[9] = 0;
        v12[10] = 0;
        v12[8] = 0;
        swift_release();
        v42[0] = v23;
        v42[1] = v19;
        v42[2] = v12;
        v42[3] = v18;
        v42[4] = (v17 - v16 + v18);
        v42[5] = v26;
        v42[6] = v16;
        v42[7] = v17;
        v42[8] = 0;
        v42[9] = 0;
        v43 = 1;
        v44 = v31;
        v45 = v30;
        v46 = v29;
        swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        sub_1B2199230(v42, v12, v25, v24, a5);
        v6 = v33;
        if (v33)
          break;
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        v39[0] = v34;
        v39[1] = v35;
        v40 = v36;
        sub_1B1F05D48(v12, (unsigned __int16 **)v39, (uint64_t)v41);
        sub_1B1F03804((char *)v19);
        ecs_stack_allocator_pop_snapshot(v14);
        if ((v47 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
        }
        swift_release();
        v15 += 6;
        v11 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B1D66364(v9);
          goto LABEL_15;
        }
      }
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      v37[0] = v34;
      v37[1] = v35;
      v38 = v36;
      sub_1B1F05D48(v12, (unsigned __int16 **)v37, (uint64_t)v41);
      sub_1B1F03804((char *)v19);
      ecs_stack_allocator_pop_snapshot(v14);
      if ((v47 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
      }
      sub_1B1D66364(v9);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v12[4]);
    swift_release();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

_QWORD *sub_1B2199950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v5 = ecs_stack_allocator_allocate(a3, 120 * a1, 8);
  v6 = v5;
  if (a1)
  {
    v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v5 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v5 + 3) = v9;
    *(_OWORD *)v5 = v7;
    *((_OWORD *)v5 + 1) = v8;
    v10 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 96);
    v5[14] = *(_QWORD *)(a2 + 112);
    *((_OWORD *)v5 + 5) = v11;
    *((_OWORD *)v5 + 6) = v12;
    *((_OWORD *)v5 + 4) = v10;
    if (a1 != 1)
    {
      v13 = *(_OWORD *)a2;
      v14 = *(_OWORD *)(a2 + 16);
      v15 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v5 + 21) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v5 + 19) = v15;
      *(_OWORD *)(v5 + 17) = v14;
      *(_OWORD *)(v5 + 15) = v13;
      v16 = *(_OWORD *)(a2 + 64);
      v17 = *(_OWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 96);
      v5[29] = *(_QWORD *)(a2 + 112);
      *(_OWORD *)(v5 + 27) = v18;
      *(_OWORD *)(v5 + 25) = v17;
      *(_OWORD *)(v5 + 23) = v16;
      if (a1 != 2)
      {
        v19 = *(_OWORD *)a2;
        v20 = *(_OWORD *)(a2 + 16);
        v21 = *(_OWORD *)(a2 + 48);
        *((_OWORD *)v5 + 17) = *(_OWORD *)(a2 + 32);
        *((_OWORD *)v5 + 18) = v21;
        *((_OWORD *)v5 + 15) = v19;
        *((_OWORD *)v5 + 16) = v20;
        v22 = *(_OWORD *)(a2 + 64);
        v23 = *(_OWORD *)(a2 + 80);
        v24 = *(_OWORD *)(a2 + 96);
        v5[44] = *(_QWORD *)(a2 + 112);
        *((_OWORD *)v5 + 20) = v23;
        *((_OWORD *)v5 + 21) = v24;
        *((_OWORD *)v5 + 19) = v22;
        v25 = a1 - 3;
        if (a1 != 3)
        {
          v26 = v5 + 45;
          do
          {
            sub_1B1E7D33C(a2);
            v27 = *(_OWORD *)(a2 + 48);
            v29 = *(_OWORD *)a2;
            v28 = *(_OWORD *)(a2 + 16);
            *((_OWORD *)v26 + 2) = *(_OWORD *)(a2 + 32);
            *((_OWORD *)v26 + 3) = v27;
            *(_OWORD *)v26 = v29;
            *((_OWORD *)v26 + 1) = v28;
            v31 = *(_OWORD *)(a2 + 80);
            v30 = *(_OWORD *)(a2 + 96);
            v32 = *(_OWORD *)(a2 + 64);
            v26[14] = *(_QWORD *)(a2 + 112);
            *((_OWORD *)v26 + 5) = v31;
            *((_OWORD *)v26 + 6) = v30;
            *((_OWORD *)v26 + 4) = v32;
            v26 += 15;
            --v25;
          }
          while (v25);
        }
        sub_1B1E7D33C(a2);
      }
      sub_1B1E7D33C(a2);
    }
    sub_1B1E7D33C(a2);
  }
  return v6;
}

uint64_t sub_1B2199A9C(_QWORD *a1, _QWORD *a2, void *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;

  v6 = (uint64_t *)a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v11 = sub_1B1A12038((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, v6, v7, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v43);
  if (v43 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1E6390060;
    v12 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v6, v7, v8, v10);
    if (v6)
    {
      if (v8)
      {
        swift_getObjectType();
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v13 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v12++ = v13;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v21 = a1[6];
      v20 = a1[7];
      v22 = v20 - v21;
      if (v20 != v21)
      {
        swift_getObjectType();
        v32 = &v12[v21];
        v33 = v11 + 4 * v21;
        do
        {
          v33 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v34 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v32++ = v34;
          --v22;
        }
        while (v22);
      }
    }
    return swift_release();
  }
  else
  {
    v37 = v7;
    v42 = v9;
    if (v6)
    {
      v36 = v6;
      v41 = (_QWORD *)a2[4];
      v38 = sub_1B2197120(v8, 0, (uint64_t)v41);
      v40 = v14;
      v35 = v15;
      if (v8)
      {
        swift_getObjectType();
        v16 = v38;
        v17 = v8;
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v18 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v16++ = v18;
          --v17;
        }
        while (v17);
      }
      v19 = v38;
      sub_1B218343C(v36, v37, v8, (uint64_t)v38, v35);
    }
    else
    {
      v23 = a1[6];
      v24 = a1[7];
      v41 = (_QWORD *)a2[4];
      v19 = sub_1B2197120(v24 - v23, 0, (uint64_t)v41);
      v39 = v26;
      v40 = v25;
      v27 = v24 - v23;
      if (v24 != v23)
      {
        swift_getObjectType();
        v28 = v19;
        v29 = v11 + 4 * v23;
        do
        {
          v29 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v30 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v28++ = v30;
          --v27;
        }
        while (v27);
      }
      sub_1B2183588(*(_QWORD *)(v42 + 232), *(_QWORD *)(v42 + 240), (uint64_t)v19, v39);
    }
    ecs_stack_allocator_deallocate(v41, (unint64_t)v19, 8 * v40);
    return swift_release();
  }
}

uint64_t sub_1B2199DEC(uint64_t a1, uint64_t a2)
{
  return sub_1B219EFC4(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B2199A9C);
}

uint64_t sub_1B2199E08(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v40;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  v9 = sub_1B1A12038((uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&off_1E63958C8, v4, v5, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for MeshModel, &v40);
  if (v40 == 1)
  {
    a2[9] = &type metadata for MeshModel;
    a2[10] = &off_1E63C4480;
    v10 = sub_1B1A12038((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, v4, v5, v6, v8);
    v11 = v10;
    if (v4)
    {
      for (; v6; --v6)
      {
        sub_1B1E82DB8(v9);
        if (v2)
          break;
        v11 += 16;
        v9 += 176;
      }
    }
    else
    {
      v18 = a1[6];
      v19 = a1[7];
      v20 = v19 - v18;
      if (v19 != v18)
      {
        v21 = v10 + 16 * v18;
        v22 = v9 + 176 * v18;
        do
        {
          sub_1B1E82DB8(v22);
          if (v2)
            break;
          v21 += 16;
          v22 += 176;
          --v20;
        }
        while (v20);
      }
    }
    return swift_release();
  }
  v37 = v7;
  if (v4)
  {
    v36 = (_QWORD *)a2[4];
    v12 = sub_1B21883B8(v6, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v36);
    v13 = (unint64_t)v12;
    v38 = v14;
    v35 = v15;
    if (v6)
    {
      v16 = v12;
      v17 = v6;
      while (1)
      {
        sub_1B1E82DB8(v9);
        if (v2)
          break;
        v16 += 2;
        v9 += 176;
        if (!--v17)
          goto LABEL_23;
      }
      ecs_stack_allocator_deallocate(v36, v13, 16 * v38);
      return swift_release();
    }
LABEL_23:
    sub_1B2185198(v4, v5, v6, v13, v35);
    v33 = v36;
LABEL_24:
    ecs_stack_allocator_deallocate(v33, v13, 16 * v38);
    return swift_release();
  }
  v24 = a1[6];
  v23 = a1[7];
  v25 = (_QWORD *)a2[4];
  v26 = sub_1B21883B8(v23 - v24, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v25);
  v13 = (unint64_t)v26;
  v38 = v27;
  v29 = v28;
  v30 = v23 - v24;
  if (!v30)
  {
LABEL_22:
    v33 = v25;
    sub_1B2185344(*(_QWORD *)(v37 + 232), *(_QWORD *)(v37 + 240), v13, v29);
    goto LABEL_24;
  }
  v31 = v9 + 176 * v24;
  v32 = v26;
  while (1)
  {
    sub_1B1E82DB8(v31);
    if (v2)
      break;
    v32 += 2;
    v31 += 176;
    if (!--v30)
      goto LABEL_22;
  }
  ecs_stack_allocator_deallocate(v25, v13, 16 * v38);
  return swift_release();
}

uint64_t sub_1B219A100(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B2199E08);
}

uint64_t sub_1B219A11C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v50;

  v8 = (uint64_t *)a1[11];
  v7 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v12 = sub_1B1A12038((uint64_t)&type metadata for MeshFileAsset, (uint64_t)&off_1E637B4A8, v8, v7, v9, v11);
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), (uint64_t)&type metadata for MeshModel, &v50);
  if (v50 != 1)
  {
    v44 = v7;
    v47 = a2;
    if (v8)
    {
      v16 = a2[4];
      v17 = sub_1B21883B8(v9, 0, MEMORY[0x1E0DEE9D8], v16);
      v41 = v18;
      v42 = (uint64_t)v17;
      v46 = v19;
      if (v9)
      {
        v20 = v8;
        v21 = v17;
        v22 = v9;
        while (1)
        {
          v23 = *v20++;
          sub_1B1FC6E5C(v10, v23, v12, v21, a3, a4);
          if (v4)
            break;
          v21 += 2;
          v12 += 56;
          if (!--v22)
            goto LABEL_12;
        }
        v36 = 16 * v46;
        v25 = (_QWORD *)v16;
        v37 = v42;
        goto LABEL_26;
      }
LABEL_12:
      v24 = v42;
      sub_1B2185198(v8, v44, v9, v42, v41);
      v25 = (_QWORD *)v16;
    }
    else
    {
      v31 = a1[6];
      v30 = a1[7];
      v45 = v47[4];
      v32 = sub_1B21883B8(v30 - v31, 0, MEMORY[0x1E0DEE9D8], v45);
      v46 = v33;
      v43 = v34;
      if (v30 != v31)
      {
        v38 = v12 + 56 * v31;
        v35 = (uint64_t)v32;
        v39 = v32;
        while (1)
        {
          sub_1B1FC6E5C(v10, v31, v38, v39, a3, a4);
          if (v4)
            break;
          ++v31;
          v39 += 2;
          v38 += 56;
          if (v30 == v31)
            goto LABEL_24;
        }
        v25 = (_QWORD *)v45;
        v36 = 16 * v46;
        v37 = v35;
        goto LABEL_26;
      }
      v35 = (uint64_t)v32;
LABEL_24:
      v24 = v35;
      sub_1B2185344(*(_QWORD *)(v10 + 232), *(_QWORD *)(v10 + 240), v35, v43);
      v25 = (_QWORD *)v45;
    }
    v36 = 16 * v46;
    v37 = v24;
LABEL_26:
    ecs_stack_allocator_deallocate(v25, v37, v36);
    return swift_release();
  }
  a2[9] = &type metadata for MeshModel;
  a2[10] = &off_1E63C4480;
  v13 = sub_1B1A12038((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, v8, v7, v9, v11);
  v14 = (uint64_t *)v13;
  if (v8)
  {
    for (; v9; --v9)
    {
      v15 = *v8++;
      sub_1B1FC6E5C(v10, v15, v12, v14, a3, a4);
      if (v4)
        break;
      v14 += 2;
      v12 += 56;
    }
  }
  else
  {
    v27 = a1[6];
    v26 = a1[7];
    if (v27 != v26)
    {
      v28 = (uint64_t *)(v13 + 16 * v27);
      v29 = v12 + 56 * v27;
      do
      {
        sub_1B1FC6E5C(v10, v27, v29, v28, a3, a4);
        if (v4)
          break;
        ++v27;
        v28 += 2;
        v29 += 56;
      }
      while (v26 != v27);
    }
  }
  return swift_release();
}

uint64_t sub_1B219A430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B219A77C(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B219A11C);
}

uint64_t sub_1B219A44C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;

  v5 = v4;
  v9 = (uint64_t *)a1[11];
  v10 = a1[12];
  v11 = a1[13];
  v12 = a1[1];
  v13 = a1[2];
  swift_retain();
  v14 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for MeshReferenceAsset, (uint64_t)&off_1E6392758, v9, v10, v11, v13);
  sub_1B1A10AA4(*(_QWORD *)(v12 + 40), (uint64_t)&type metadata for MeshModel, &v47);
  v45 = v12;
  if (v47 == 1)
  {
    a2[9] = &type metadata for MeshModel;
    a2[10] = &off_1E63C4480;
    v15 = sub_1B1A12038((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, v9, v10, v11, v13);
    v16 = (uint64_t *)v15;
    if (v9)
    {
      for (; v11; --v11)
      {
        sub_1B1FC77A4(v14, v16, a3, a4);
        if (v5)
          break;
        v16 += 2;
        v14 += 4;
      }
    }
    else
    {
      v23 = a1[6];
      v24 = a1[7];
      v25 = v24 - v23;
      if (v24 != v23)
      {
        v35 = (uint64_t *)(v15 + 16 * v23);
        v36 = &v14[4 * v23];
        do
        {
          sub_1B1FC77A4(v36, v35, a3, a4);
          if (v5)
            break;
          v35 += 2;
          v36 += 4;
          --v25;
        }
        while (v25);
      }
    }
    return swift_release();
  }
  v42 = v10;
  if (v9)
  {
    v17 = (_QWORD *)a2[4];
    v18 = sub_1B21883B8(v11, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v17);
    v41 = (unint64_t)v18;
    v44 = v19;
    v40 = v20;
    if (v11)
    {
      v21 = v18;
      v22 = v11;
      while (1)
      {
        sub_1B1FC77A4(v14, v21, a3, a4);
        if (v5)
          break;
        v21 += 2;
        v14 += 4;
        if (!--v22)
          goto LABEL_17;
      }
      ecs_stack_allocator_deallocate(v17, v41, 16 * v44);
      return swift_release();
    }
LABEL_17:
    v34 = v41;
    sub_1B2185198(v9, v42, v11, v41, v40);
    v28 = v17;
LABEL_27:
    ecs_stack_allocator_deallocate(v28, v34, 16 * v44);
    return swift_release();
  }
  v27 = a1[6];
  v26 = a1[7];
  v28 = (_QWORD *)a2[4];
  v29 = sub_1B21883B8(v26 - v27, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v28);
  v43 = v31;
  v44 = v30;
  v32 = v26 - v27;
  if (!v32)
  {
    v33 = (unint64_t)v29;
LABEL_26:
    v34 = v33;
    sub_1B2185344(*(_QWORD *)(v45 + 232), *(_QWORD *)(v45 + 240), v33, v43);
    goto LABEL_27;
  }
  v37 = &v14[4 * v27];
  v33 = (unint64_t)v29;
  v38 = v29;
  while (1)
  {
    sub_1B1FC77A4(v37, v38, a3, a4);
    if (v5)
      break;
    v38 += 2;
    v37 += 4;
    if (!--v32)
      goto LABEL_26;
  }
  ecs_stack_allocator_deallocate(v28, v33, 16 * v44);
  return swift_release();
}

uint64_t sub_1B219A760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B219A77C(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B219A44C);
}

uint64_t sub_1B219A77C(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[40];
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v5 = v4;
  v32 = *(_OWORD *)result;
  v33 = *(_OWORD *)(result + 16);
  v34 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 40);
    v10 = *(_QWORD *)(result + 56);
    v11 = *(_QWORD *)(result + 64);
    v12 = *(_QWORD **)(result + 72);
    v13 = v12[4];
    swift_retain();
    swift_retain();
    ecs_stack_allocator_push_snapshot(v13);
    if (v10)
    {
      v23 = v11;
      v45 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v22 = v8;
      sub_1B1D6631C(v8);
      v14 = (uint64_t *)(v9 + 24);
      v24 = a2;
      while (1)
      {
        v27 = v10;
        v15 = *((unsigned int *)v14 - 6);
        v16 = *((unsigned int *)v14 - 5);
        v17 = *((unsigned int *)v14 - 4);
        v29 = *v14;
        v30 = *(v14 - 1);
        v18 = v14[2];
        v28 = v14[1];
        v31 = v5;
        if (v45)
        {
          v19 = *(os_unfair_lock_s **)(v18 + 376);
          swift_retain();
          os_unfair_lock_lock(v19);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v13);
        sub_1B1A000F0((uint64_t)(v12 + 6), (uint64_t)v39, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v20 = v12[4];
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v12[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
        v12[7] = v21;
        v12[9] = 0;
        v12[10] = 0;
        v12[8] = 0;
        swift_release();
        v40[0] = v23;
        v40[1] = v18;
        v40[2] = v12;
        v40[3] = v17;
        v40[4] = (v16 - v15 + v17);
        v40[5] = v25;
        v40[6] = v15;
        v40[7] = v16;
        v40[8] = 0;
        v40[9] = 0;
        v41 = 1;
        v42 = v30;
        v43 = v29;
        v44 = v28;
        swift_retain();
        swift_retain();
        a4(v40, v12, v24, a3);
        v5 = v31;
        if (v31)
          break;
        swift_release();
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        v38 = v34;
        sub_1B1F05D48(v12, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B1F03804((char *)v18);
        ecs_stack_allocator_pop_snapshot(v13);
        if ((v45 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
        }
        swift_release();
        v14 += 6;
        v10 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      v36 = v34;
      sub_1B1F05D48(v12, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B1F03804((char *)v18);
      ecs_stack_allocator_pop_snapshot(v13);
      if ((v45 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v12[4]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B219AAC8(_QWORD *a1, _QWORD *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[24];
  __int128 v24[2];
  uint64_t v25;
  uint64_t *v26[3];
  _QWORD v27[5];

  v27[3] = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = swift_retain();
  sub_1B19F6658(v6, (uint64_t)a1);
  sub_1B1A10AA4(*(_QWORD *)(v5 + 40), (uint64_t)&type metadata for SDFRuntimeData, v24);
  v22 = v5;
  if (LOBYTE(v24[0]) != 1)
  {
    sub_1B1A025EC((uint64_t)(a1 + 11), (uint64_t)v23, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    sub_1B1A025EC((uint64_t)v23, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    if (v27[0])
      v10 = v27[2];
    else
      v10 = a1[7] - a1[6];
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    v21 = (_QWORD *)a2[4];
    v11 = sub_1B218848C(v10, v24, (uint64_t)v21);
    v19 = v13;
    v20 = v12;
    sub_1B1A025EC((uint64_t)v23, (uint64_t)v26, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    if (v26[0])
    {
      if (v26[2])
      {
        type metadata accessor for SDFFileAsset();
        sub_1B2228128();
        if (!v2)
          __asm { BR              X9 }
        goto LABEL_24;
      }
      v15 = (unint64_t)v11;
      sub_1B21854D8(v26[0], (uint64_t)v26[1], 0, (uint64_t)v11, v19);
    }
    else
    {
      if (a1[7] != a1[6])
      {
        type metadata accessor for SDFFileAsset();
        sub_1B2228128();
        if (!v2)
          __asm { BR              X9 }
        goto LABEL_24;
      }
      v15 = (unint64_t)v11;
      sub_1B2185628(*(_QWORD *)(v22 + 232), *(_QWORD *)(v22 + 240), (uint64_t)v11, v19);
    }
    ecs_stack_allocator_deallocate(v21, v15, 40 * v20);
    return swift_release();
  }
  a2[9] = &type metadata for SDFRuntimeData;
  a2[10] = &off_1E6380B80;
  v7 = (uint64_t *)a1[11];
  v8 = a1[13];
  sub_1B1A12038((uint64_t)&type metadata for SDFRuntimeData, (uint64_t)&off_1E6380B80, v7, a1[12], v8, a1[2]);
  if (!v7)
  {
    if (a1[7] == a1[6])
      return swift_release();
    type metadata accessor for SDFFileAsset();
    sub_1B2228128();
    if (!v2)
      __asm { BR              X9 }
LABEL_24:

    sub_1B2229688();
    __break(1u);
    JUMPOUT(0x1B219B784);
  }
  if (v8)
  {
    type metadata accessor for SDFFileAsset();
    sub_1B2228128();
    if (!v2)
      __asm { BR              X9 }
    goto LABEL_24;
  }
  return swift_release();
}

uint64_t sub_1B219B810(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219AAC8);
}

_QWORD *sub_1B219B82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = ecs_stack_allocator_allocate(a3, 8 * a1, 8);
  v6 = v5;
  if (a1)
  {
    *v5 = a2;
    if (a1 != 1)
    {
      v5[1] = a2;
      if (a1 != 2)
      {
        v5[2] = a2;
        v7 = a1 - 3;
        if (a1 != 3)
        {
          v8 = v5 + 3;
          do
          {
            *v8++ = a2;
            swift_retain();
            --v7;
          }
          while (v7);
        }
        swift_retain();
      }
      swift_retain();
    }
    swift_retain();
  }
  return v6;
}

uint64_t sub_1B219B8D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;

  v6 = (uint64_t *)a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v11 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1E638AD98, v6, v7, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for FileWatcher, &v42);
  if (v42 != 1)
  {
    v38 = v7;
    if (v6)
    {
      v15 = a2[4];
      v16 = sub_1B219B82C(v8, 0, v15);
      v40 = v15;
      v36 = v18;
      v37 = v17;
      if (v8)
      {
        v19 = 0;
        v20 = v8;
        while (1)
        {
          sub_1B210B714(v9, v6[v19], v11, &v16[v19], a3);
          if (v3)
            break;
          ++v19;
          v11 += 6;
          if (!--v20)
            goto LABEL_12;
        }
        v22 = 8 * v37;
LABEL_25:
        v21 = (_QWORD *)v40;
        goto LABEL_26;
      }
LABEL_12:
      sub_1B2185770(v6, v38, v8, (uint64_t)v16, v36);
      v21 = (_QWORD *)v40;
      v22 = 8 * v37;
    }
    else
    {
      v27 = a1[6];
      v28 = a1[7];
      v40 = a2[4];
      v29 = sub_1B219B82C(v28 - v27, 0, v40);
      v16 = v29;
      v31 = v30;
      v39 = v32;
      if (v28 != v27)
      {
        v33 = &v11[6 * v27];
        v34 = v29;
        while (1)
        {
          sub_1B210B714(v9, v27, v33, v34, a3);
          if (v3)
            break;
          ++v27;
          ++v34;
          v33 += 6;
          if (v28 == v27)
            goto LABEL_22;
        }
        v22 = 8 * v31;
        goto LABEL_25;
      }
LABEL_22:
      sub_1B21858BC(*(_QWORD *)(v9 + 232), *(_QWORD *)(v9 + 240), (uint64_t)v16, v39);
      v21 = (_QWORD *)v40;
      v22 = 8 * v31;
    }
LABEL_26:
    ecs_stack_allocator_deallocate(v21, (unint64_t)v16, v22);
    return swift_release();
  }
  a2[9] = &type metadata for FileWatcher;
  a2[10] = &off_1E63705E8;
  v12 = sub_1B1A12038((uint64_t)&type metadata for FileWatcher, (uint64_t)&off_1E63705E8, v6, v7, v8, v10);
  v13 = (uint64_t *)v12;
  if (v6)
  {
    for (; v8; --v8)
    {
      v14 = *v6++;
      sub_1B210B714(v9, v14, v11, v13, a3);
      if (v3)
        break;
      ++v13;
      v11 += 6;
    }
  }
  else
  {
    v23 = a1[6];
    v24 = a1[7];
    if (v23 != v24)
    {
      v25 = (uint64_t *)(v12 + 8 * v23);
      v26 = &v11[6 * v23];
      do
      {
        sub_1B210B714(v9, v23, v26, v25, a3);
        if (v3)
          break;
        ++v23;
        ++v25;
        v26 += 6;
      }
      while (v24 != v23);
    }
  }
  return swift_release();
}

uint64_t sub_1B219BBA8(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219B8D4);
}

uint64_t sub_1B219BBC4(id *a1, uint64_t a2, uint64_t a3)
{
  id *v3;
  id *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  CGImage *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t **v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  CGImage *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  id v63;
  char *v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  void *v68;
  CGImage *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t *v79;
  _QWORD *v80;
  void **v81;
  CGImage *v82;
  void *v83;
  CGImage *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  CGImage *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  id *v106;
  uint64_t v107[5];
  uint64_t *v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  uint64_t v115[8];
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  _QWORD v121[3];
  char v122;
  uint64_t *v123;
  __int16 v124;
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  void **v132;

  v4 = v3;
  v104 = a3;
  v95 = a2;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v6, v7);
  v98 = (CGImage *)((char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9, v10);
  v96 = (char *)&v91 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v97 = (char *)&v91 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v99 = (uint64_t *)((char *)&v91 - v17);
  v18 = (uint64_t *)a1[11];
  v19 = (uint64_t)a1[12];
  v20 = (uint64_t)a1[13];
  v21 = a1[1];
  v22 = (uint64_t)a1[2];
  v106 = a1;
  swift_retain();
  v132 = (void **)sub_1B1A12038((uint64_t)&type metadata for TextureCGImage, (uint64_t)&off_1E63820A8, v18, v19, v20, v22);
  sub_1B1A10AA4(v21[5], (uint64_t)&type metadata for TextureCPURuntime, v121);
  v105 = v21;
  v103 = v22;
  if (LOBYTE(v121[0]) == 1)
  {
    v23 = v95;
    *(_QWORD *)(v95 + 72) = &type metadata for TextureCPURuntime;
    *(_QWORD *)(v23 + 80) = &off_1E638FF20;
    v24 = sub_1B1A12038((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, v18, v19, v20, v22);
    v25 = v24;
    if (v18)
    {
      if (v20)
      {
        v26 = v20;
        v27 = (char *)v106[3];
        v100 = (uint64_t *)*v106;
        v28 = v132;
        v29 = (uint64_t)v99;
        v30 = v103;
        do
        {
          v31 = *v18++;
          v108 = v100;
          v109 = v105;
          *(_QWORD *)&v110 = v30;
          *((_QWORD *)&v110 + 1) = v27;
          *(_QWORD *)&v111 = v31;
          v33 = *v28++;
          v32 = v33;
          if (v33)
          {
            v101 = v18;
            v102 = (uint64_t *)v26;
            v34 = v32;
            sub_1B20F2F40((uint64_t)v121);
            v35 = *(_QWORD *)(v104 + 16);
            v36 = sub_1B2228110();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v29, 1, 1, v36);
            sub_1B20FB6E8(v34, (size_t)v121, v35, v29, 0, 1);
            if (v4)
            {
              v132 = v28;
              sub_1B19EC9A4(v29);
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_getErrorValue();
              swift_retain();
              v37 = sub_1B2229FE8();
              v106 = v4;
              v38 = v37;
              v40 = v39;
              v41 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v115[0] = 0;
              swift_retain();
              sub_1B1F1AD70(v41, v115, v38, v40);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              v4 = 0;
              v26 = (uint64_t)v102;
              v30 = v103;
              v28 = v132;
              v18 = v101;
              v29 = (uint64_t)v99;
            }
            else
            {
              sub_1B19EC9A4(v29);

              v18 = v101;
              v26 = (uint64_t)v102;
            }
          }
          ++v27;
          v25 += 120;
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v63 = v106[6];
      v102 = (uint64_t *)v106[7];
      if (v63 != v102)
      {
        v64 = (char *)v106[3];
        v65 = v24 + 120 * (_QWORD)v63;
        v101 = (uint64_t *)*v106;
        v66 = v132;
        v67 = (uint64_t)v97;
        do
        {
          v108 = v101;
          v109 = v21;
          *(_QWORD *)&v110 = v103;
          *((_QWORD *)&v110 + 1) = v64;
          *(_QWORD *)&v111 = v63;
          v68 = v66[(_QWORD)v63];
          if (v68)
          {
            v69 = v68;
            sub_1B20F2F40((uint64_t)v121);
            v70 = *(_QWORD *)(v104 + 16);
            v71 = sub_1B2228110();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v67, 1, 1, v71);
            sub_1B20FB6E8(v69, (size_t)v121, v70, v67, 0, 1);
            if (v4)
            {
              v100 = (uint64_t *)v69;
              sub_1B19EC9A4(v67);
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_getErrorValue();
              v106 = v4;
              swift_retain();
              v72 = sub_1B2229FE8();
              v74 = v73;
              v75 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v115[0] = 0;
              swift_retain();
              sub_1B1F1AD70(v75, v115, v72, v74);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              v4 = 0;
              v21 = v105;
              v66 = v132;
              v67 = (uint64_t)v97;
            }
            else
            {
              sub_1B19EC9A4(v67);

              v66 = v132;
            }
          }
          v63 = (char *)v63 + 1;
          ++v64;
          v65 += 120;
        }
        while (v102 != v63);
      }
    }
  }
  else
  {
    v97 = (char *)v19;
    v102 = (uint64_t *)v20;
    v42 = v20;
    v43 = (uint64_t **)v106;
    if (!v18)
      v42 = (_BYTE *)v106[7] - (_BYTE *)v106[6];
    RGTextureDescriptor.init()((uint64_t)&v108);
    memset(v121, 0, sizeof(v121));
    v122 = 0;
    v123 = v108;
    v124 = (__int16)v109;
    v125 = BYTE2(v109);
    v126 = v110;
    v127 = v111;
    v128 = v112;
    v129 = v113;
    v130 = v114;
    v131 = MEMORY[0x1E0DEE9D8];
    v44 = *(_QWORD **)(v95 + 32);
    v94 = sub_1B2199950(v42, (uint64_t)v121, (uint64_t)v44);
    v46 = v45;
    v91 = v47;
    swift_bridgeObjectRelease();
    v92 = v46;
    v93 = v44;
    if (v18)
    {
      v101 = v18;
      if (v102)
      {
        v48 = v43[3];
        v99 = *v43;
        v49 = v18;
        v50 = v94;
        v51 = (uint64_t)v102;
        v53 = (uint64_t)v96;
        v52 = (uint64_t)v97;
        do
        {
          v54 = (uint64_t *)*v49++;
          v116 = v99;
          v117 = v21;
          v118 = v22;
          v119 = v48;
          v120 = v54;
          v55 = *v132++;
          if (v55)
          {
            v100 = v49;
            v56 = v55;
            sub_1B20F2F40((uint64_t)v115);
            v57 = *(_QWORD *)(v104 + 16);
            v58 = sub_1B2228110();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v53, 1, 1, v58);
            sub_1B20FB6E8(v56, (size_t)v115, v57, v53, 0, 1);
            if (v4)
            {
              v98 = v56;
              sub_1B19EC9A4(v53);
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_getErrorValue();
              swift_retain();
              v59 = sub_1B2229FE8();
              v61 = v60;
              v62 = sub_1B2228E90();
              v106 = v4;
              if (qword_1ED4BF658 != -1)
                swift_once();
              v107[0] = 0;
              swift_retain();
              sub_1B1F1AD70(v62, v107, v59, v61);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              v4 = 0;
              v21 = v105;
              v22 = v103;
              v53 = (uint64_t)v96;
              v52 = (uint64_t)v97;
              v49 = v100;
            }
            else
            {
              sub_1B19EC9A4(v53);

              v52 = (uint64_t)v97;
              v49 = v100;
              v21 = v105;
            }
          }
          v48 = (uint64_t *)((char *)v48 + 1);
          v50 += 15;
          --v51;
        }
        while (v51);
      }
      else
      {
        v52 = (uint64_t)v97;
      }
      v77 = (unint64_t)v94;
      sub_1B2184C70(v101, v52, (uint64_t)v102, (uint64_t)v94, v91);
    }
    else
    {
      v76 = v43[6];
      v102 = v43[7];
      if (v76 != v102)
      {
        v79 = v43[3];
        v101 = *v43;
        v80 = v94;
        v81 = v132;
        v82 = v98;
        do
        {
          v116 = v101;
          v117 = v21;
          v118 = v103;
          v119 = v79;
          v120 = v76;
          v83 = v81[(_QWORD)v76];
          if (v83)
          {
            v84 = v83;
            sub_1B20F2F40((uint64_t)v115);
            v85 = *(_QWORD *)(v104 + 16);
            v86 = sub_1B2228110();
            (*(void (**)(CGImage *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v82, 1, 1, v86);
            sub_1B20FB6E8(v84, (size_t)v115, v85, (uint64_t)v82, 0, 1);
            if (v4)
            {
              v100 = (uint64_t *)v84;
              sub_1B19EC9A4((uint64_t)v82);
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_getErrorValue();
              v106 = v4;
              swift_retain();
              v87 = sub_1B2229FE8();
              v89 = v88;
              v90 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v107[0] = 0;
              swift_retain();
              sub_1B1F1AD70(v90, v107, v87, v89);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              v4 = 0;
              v21 = v105;
              v81 = v132;
              v82 = v98;
            }
            else
            {
              sub_1B19EC9A4((uint64_t)v82);

              v81 = v132;
            }
          }
          v76 = (uint64_t *)((char *)v76 + 1);
          v79 = (uint64_t *)((char *)v79 + 1);
          v80 += 15;
        }
        while (v102 != v76);
      }
      v77 = (unint64_t)v94;
      sub_1B2184DC0(v21[29], v21[30], (uint64_t)v94, v91);
    }
    ecs_stack_allocator_deallocate(v93, v77, 120 * v92);
  }
  return swift_release();
}

uint64_t sub_1B219C630(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219BBC4);
}

uint64_t sub_1B219C64C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  uint64_t v104[8];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[3];
  char v111;
  uint64_t v112;
  __int16 v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;

  v4 = v3;
  v8 = (uint64_t *)a1[11];
  v7 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v93 = (char *)sub_1B1A12038((uint64_t)&type metadata for TextureFileData, (uint64_t)&off_1E6385E20, v8, v7, v9, v11);
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), (uint64_t)&type metadata for TextureCPURuntime, v110);
  v90 = v10;
  v121 = v11;
  if (LOBYTE(v110[0]) != 1)
  {
    v83 = v7;
    v92 = v9;
    if (!v8)
      v9 = a1[7] - a1[6];
    RGTextureDescriptor.init()((uint64_t)&v97);
    memset(v110, 0, sizeof(v110));
    v111 = 0;
    v112 = v97;
    v113 = v98;
    v114 = BYTE2(v98);
    v115 = v99;
    v116 = v100;
    v117 = v101;
    v118 = v102;
    v119 = v103;
    v120 = MEMORY[0x1E0DEE9D8];
    v76 = (_QWORD *)a2[4];
    v29 = sub_1B2199950(v9, (uint64_t)v110, (uint64_t)v76);
    v75 = v30;
    v74 = v31;
    swift_bridgeObjectRelease();
    v32 = v121;
    v77 = (uint64_t)v29;
    if (v8)
    {
      v33 = v10;
      v87 = v8;
      if (v92)
      {
        v34 = a1[3];
        v35 = (unint64_t *)(v93 + 8);
        v36 = *a1;
        v37 = v8;
        v38 = v29;
        v39 = v92;
        v40 = v7;
        v78 = v36;
        do
        {
          v41 = *v37++;
          v105 = v36;
          v106 = v33;
          v107 = v32;
          v108 = v34;
          v109 = v41;
          v42 = *v35;
          if (*v35 >> 60 != 15)
          {
            v94 = v37;
            v43 = *(v35 - 1);
            sub_1B1A0DC90(v43, v42);
            sub_1B20F2F40((uint64_t)v104);
            sub_1B20FB4E0(v43, v42, (size_t)v104, *(_QWORD *)(a3 + 16));
            if (v4)
            {
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_getErrorValue();
              swift_retain();
              v79 = sub_1B2229FE8();
              v45 = v44;
              v46 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v96 = 0;
              swift_retain();
              sub_1B1F1AD70(v46, &v96, v79, v45);
              swift_release();
              sub_1B1A0DAC8(v43, v42);
              swift_release();
              swift_bridgeObjectRelease();

              v4 = 0;
              v33 = v90;
            }
            else
            {
              sub_1B1A0DAC8(v43, v42);
            }
            v32 = v121;
            v40 = v83;
            v36 = v78;
            v37 = v94;
          }
          v35 += 2;
          ++v34;
          v38 += 15;
          --v39;
        }
        while (v39);
      }
      else
      {
        v40 = v7;
      }
      v63 = v77;
      sub_1B2184C70(v87, v40, v92, v77, v74);
    }
    else
    {
      v61 = a1[6];
      v60 = a1[7];
      v62 = v10;
      if (v61 != v60)
      {
        v64 = a1[3];
        v65 = (unint64_t *)&v93[16 * v61 + 8];
        v66 = *a1;
        v67 = v29;
        v82 = v66;
        v85 = v60;
        do
        {
          v105 = v66;
          v106 = v62;
          v107 = v32;
          v108 = v64;
          v109 = v61;
          v68 = *v65;
          if (*v65 >> 60 != 15)
          {
            v69 = *(v65 - 1);
            sub_1B1A0DC90(v69, *v65);
            sub_1B20F2F40((uint64_t)v104);
            sub_1B20FB4E0(v69, v68, (size_t)v104, *(_QWORD *)(a3 + 16));
            if (v4)
            {
              v89 = v69;
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_getErrorValue();
              swift_retain();
              v70 = sub_1B2229FE8();
              v72 = v71;
              v73 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v96 = 0;
              swift_retain();
              sub_1B1F1AD70(v73, &v96, v70, v72);
              swift_release();
              sub_1B1A0DAC8(v89, v68);
              swift_release();
              swift_bridgeObjectRelease();

              v4 = 0;
              v62 = v90;
            }
            else
            {
              sub_1B1A0DAC8(v69, v68);
            }
            v32 = v121;
            v66 = v82;
            v60 = v85;
          }
          ++v61;
          v65 += 2;
          ++v64;
          v67 += 15;
        }
        while (v60 != v61);
      }
      v63 = v77;
      sub_1B2184DC0(*(_QWORD *)(v62 + 232), *(_QWORD *)(v62 + 240), v77, v74);
    }
    ecs_stack_allocator_deallocate(v76, v63, 120 * v75);
    return swift_release();
  }
  a2[9] = &type metadata for TextureCPURuntime;
  a2[10] = &off_1E638FF20;
  v12 = sub_1B1A12038((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, v8, v7, v9, v11);
  v13 = v12;
  v14 = v10;
  v15 = v11;
  if (!v8)
  {
    v49 = a1[6];
    v48 = a1[7];
    if (v49 != v48)
    {
      v50 = a1[3];
      v51 = v12 + 120 * v49;
      v52 = *a1;
      v53 = (unint64_t *)&v93[16 * v49 + 8];
      v81 = v52;
      v84 = v48;
      do
      {
        v97 = v52;
        v98 = v14;
        *(_QWORD *)&v99 = v15;
        *((_QWORD *)&v99 + 1) = v50;
        *(_QWORD *)&v100 = v49;
        v54 = *v53;
        if (*v53 >> 60 != 15)
        {
          v55 = *(v53 - 1);
          sub_1B1A0DC90(v55, *v53);
          sub_1B20F2F40((uint64_t)v110);
          sub_1B20FB4E0(v55, v54, (size_t)v110, *(_QWORD *)(a3 + 16));
          if (v4)
          {
            v88 = v55;
            if (qword_1ED4BF430 != -1)
              swift_once();
            swift_getErrorValue();
            swift_retain();
            v56 = sub_1B2229FE8();
            v58 = v57;
            v59 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v104[0] = 0;
            swift_retain();
            sub_1B1F1AD70(v59, v104, v56, v58);
            swift_release();
            sub_1B1A0DAC8(v88, v54);
            swift_release();
            swift_bridgeObjectRelease();

            v4 = 0;
            v14 = v90;
          }
          else
          {
            sub_1B1A0DAC8(v55, v54);
          }
          v15 = v121;
          v52 = v81;
          v48 = v84;
        }
        ++v49;
        v53 += 2;
        ++v50;
        v51 += 120;
      }
      while (v48 != v49);
    }
    return swift_release();
  }
  if (!v9)
    return swift_release();
  v16 = v9;
  v17 = v3;
  v18 = a1[3];
  v19 = (unint64_t *)(v93 + 8);
  v20 = *a1;
  v80 = *a1;
  do
  {
    v21 = *v8++;
    v97 = v20;
    v98 = v14;
    *(_QWORD *)&v99 = v15;
    *((_QWORD *)&v99 + 1) = v18;
    *(_QWORD *)&v100 = v21;
    v22 = *v19;
    if (*v19 >> 60 != 15)
    {
      v91 = v16;
      v23 = *(v19 - 1);
      sub_1B1A0DC90(v23, v22);
      sub_1B20F2F40((uint64_t)v110);
      v24 = v17;
      sub_1B20FB4E0(v23, v22, (size_t)v110, *(_QWORD *)(a3 + 16));
      if (v17)
      {
        v86 = v8;
        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_getErrorValue();
        swift_retain();
        v25 = sub_1B2229FE8();
        v27 = v26;
        v28 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v104[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v28, v104, v25, v27);
        swift_release();
        sub_1B1A0DAC8(v23, v22);
        swift_release();
        swift_bridgeObjectRelease();

        v17 = 0;
        v8 = v86;
        v14 = v10;
      }
      else
      {
        sub_1B1A0DAC8(v23, v22);
      }
      v15 = v121;
      v16 = v91;
      v20 = v80;
    }
    v19 += 2;
    ++v18;
    v13 += 120;
    --v16;
  }
  while (v16);
  return swift_release();
}

uint64_t sub_1B219CF64(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219C64C);
}

uint64_t sub_1B219CF80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  v9 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for TextureRenderTarget, (uint64_t)&off_1E639A9F0, v4, v5, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v40);
  if (v40 != 1)
  {
    v36 = v5;
    if (v4)
    {
      v13 = a2[4];
      v14 = sub_1B2197120(v6, 0, v13);
      v38 = v13;
      v34 = v16;
      v35 = v15;
      if (v6)
      {
        v17 = 0;
        v18 = v6;
        while (1)
        {
          sub_1B210BA5C(v7, v4[v17], v9, &v14[v17]);
          if (v2)
            break;
          ++v17;
          v9 += 10;
          if (!--v18)
            goto LABEL_12;
        }
        v20 = 8 * v35;
LABEL_25:
        v19 = (_QWORD *)v38;
        goto LABEL_26;
      }
LABEL_12:
      sub_1B218343C(v4, v36, v6, (uint64_t)v14, v34);
      v19 = (_QWORD *)v38;
      v20 = 8 * v35;
    }
    else
    {
      v25 = a1[6];
      v26 = a1[7];
      v38 = a2[4];
      v27 = sub_1B2197120(v26 - v25, 0, v38);
      v14 = v27;
      v29 = v28;
      v37 = v30;
      if (v26 != v25)
      {
        v31 = &v9[10 * v25];
        v32 = v27;
        while (1)
        {
          sub_1B210BA5C(v7, v25, v31, v32);
          if (v2)
            break;
          ++v25;
          ++v32;
          v31 += 10;
          if (v26 == v25)
            goto LABEL_22;
        }
        v20 = 8 * v29;
        goto LABEL_25;
      }
LABEL_22:
      sub_1B2183588(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), (uint64_t)v14, v37);
      v19 = (_QWORD *)v38;
      v20 = 8 * v29;
    }
LABEL_26:
    ecs_stack_allocator_deallocate(v19, (unint64_t)v14, v20);
    return swift_release();
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1E6390060;
  v10 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v4, v5, v6, v8);
  v11 = (_QWORD *)v10;
  if (v4)
  {
    for (; v6; --v6)
    {
      v12 = *v4++;
      sub_1B210BA5C(v7, v12, v9, v11);
      if (v2)
        break;
      ++v11;
      v9 += 10;
    }
  }
  else
  {
    v21 = a1[6];
    v22 = a1[7];
    if (v21 != v22)
    {
      v23 = (_QWORD *)(v10 + 8 * v21);
      v24 = &v9[10 * v21];
      do
      {
        sub_1B210BA5C(v7, v21, v24, v23);
        if (v2)
          break;
        ++v21;
        ++v23;
        v24 += 10;
      }
      while (v22 != v21);
    }
  }
  return swift_release();
}

uint64_t sub_1B219D254(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219CF80);
}

uint64_t sub_1B219D270(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  void **v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v44;

  v8 = (uint64_t *)a1[11];
  v7 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v12 = (unsigned int *)sub_1B1A12038((uint64_t)&type metadata for SDFTextureGenerator, (uint64_t)&off_1E639A720, v8, v7, v9, v11);
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v44);
  if (v44 != 1)
  {
    v41 = a2;
    if (v8)
    {
      v16 = a2[4];
      v17 = sub_1B2197120(v9, 0, v41[4]);
      v40 = v16;
      v37 = v19;
      v38 = v18;
      if (v9)
      {
        v20 = 0;
        v21 = v9;
        while (1)
        {
          sub_1B2144170(v10, v8[v20], v12, (void **)&v17[v20], a3, a4);
          if (v4)
            break;
          ++v20;
          v12 += 6;
          if (!--v21)
            goto LABEL_12;
        }
        v23 = 8 * v38;
LABEL_25:
        v22 = (_QWORD *)v40;
        goto LABEL_26;
      }
LABEL_12:
      sub_1B218343C(v8, v7, v9, (uint64_t)v17, v37);
      v22 = (_QWORD *)v40;
      v23 = 8 * v38;
    }
    else
    {
      v29 = a1[6];
      v28 = a1[7];
      v40 = v41[4];
      v30 = sub_1B2197120(v28 - v29, 0, v40);
      v17 = v30;
      v32 = v31;
      v39 = v33;
      if (v28 != v29)
      {
        v34 = &v12[6 * v29];
        v35 = (void **)v30;
        while (1)
        {
          sub_1B2144170(v10, v29, v34, v35, a3, a4);
          if (v4)
            break;
          ++v29;
          ++v35;
          v34 += 6;
          if (v28 == v29)
            goto LABEL_22;
        }
        v23 = 8 * v32;
        goto LABEL_25;
      }
LABEL_22:
      sub_1B2183588(*(_QWORD *)(v10 + 232), *(_QWORD *)(v10 + 240), (uint64_t)v17, v39);
      v22 = (_QWORD *)v40;
      v23 = 8 * v32;
    }
LABEL_26:
    ecs_stack_allocator_deallocate(v22, (unint64_t)v17, v23);
    return swift_release();
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1E6390060;
  v13 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v8, v7, v9, v11);
  v14 = (void **)v13;
  if (v8)
  {
    for (; v9; --v9)
    {
      v15 = *v8++;
      sub_1B2144170(v10, v15, v12, v14, a3, a4);
      if (v4)
        break;
      ++v14;
      v12 += 6;
    }
  }
  else
  {
    v25 = a1[6];
    v24 = a1[7];
    if (v25 != v24)
    {
      v26 = (void **)(v13 + 8 * v25);
      v27 = &v12[6 * v25];
      do
      {
        sub_1B2144170(v10, v25, v27, v26, a3, a4);
        if (v4)
          break;
        ++v25;
        ++v26;
        v27 += 6;
      }
      while (v24 != v25);
    }
  }
  return swift_release();
}

uint64_t sub_1B219D568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B219A77C(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B219D270);
}

uint64_t sub_1B219D584(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  id *v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v63 = a2;
  v5 = type metadata accessor for SceneKitRenderer(0);
  v61 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (uint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (uint64_t *)a1[11];
  v9 = a1[12];
  v11 = a1[13];
  v12 = a1[1];
  v13 = a1[2];
  swift_retain();
  v60 = sub_1B1A12038((uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&off_1E63A60C8, v10, v9, v11, v13);
  v14 = v62;
  sub_1B1A10AA4(*(_QWORD *)(v12 + 40), v5, &v64);
  if (v64 == 1)
  {
    v15 = v63;
    *(_QWORD *)(v63 + 72) = v5;
    *(_QWORD *)(v15 + 80) = &off_1E638A890;
    v16 = sub_1B19F667C(v12, (uint64_t)a1);
    v17 = (id *)v16;
    if (v10)
    {
      if (v11)
      {
        v18 = *(_QWORD *)(v61 + 72);
        v19 = (unsigned __int8 *)(v60 + 8);
        do
        {
          v20 = *((_QWORD *)v19 - 1);
          v21 = *v19;
          v19 += 12;
          sub_1B205BA5C(a3, v20, v21, v17);
          v17 = (id *)((char *)v17 + v18);
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v40 = a1[6];
      v41 = a1[7];
      v42 = v41 - v40;
      if (v41 != v40)
      {
        v43 = *(_QWORD *)(v61 + 72);
        v44 = (id *)(v16 + v40 * v43);
        v45 = (unsigned __int8 *)(v60 + 12 * v40 + 8);
        do
        {
          v46 = *((_QWORD *)v45 - 1);
          v47 = *v45;
          v45 += 12;
          sub_1B205BA5C(a3, v46, v47, v44);
          v44 = (id *)((char *)v44 + v43);
          --v42;
        }
        while (v42);
      }
    }
  }
  else
  {
    v56 = v9;
    v57 = v12;
    v58 = v14;
    v59 = v10;
    v22 = v11;
    if (!v10)
      v22 = a1[7] - a1[6];
    *v8 = 0;
    v8[1] = 0;
    v23 = (char *)v8 + *(int *)(v5 + 24);
    v24 = sub_1B2228110();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    v25 = *(_QWORD *)(v63 + 32);
    v26 = *(_QWORD *)(v61 + 72);
    v27 = *(unsigned __int8 *)(v61 + 80) + 1;
    v61 = v26 * v22;
    v28 = ecs_stack_allocator_allocate(v25, v26 * v22, v27);
    v29 = (uint64_t)v28;
    v62 = v22;
    if (v22)
    {
      v30 = (uint64_t)v28;
      v31 = v62;
      do
      {
        sub_1B1792810((uint64_t)v8, v30, type metadata accessor for SceneKitRenderer);
        v30 += v26;
        --v31;
      }
      while (v31);
    }
    sub_1B1A04628((uint64_t)v8, type metadata accessor for SceneKitRenderer);
    v32 = v59;
    if (v59)
    {
      v33 = v29;
      if (v11)
      {
        v34 = (unsigned __int8 *)(v60 + 8);
        v35 = (id *)v29;
        v36 = v11;
        do
        {
          v37 = *((_QWORD *)v34 - 1);
          v38 = *v34;
          v34 += 12;
          sub_1B205BA5C(a3, v37, v38, v35);
          v35 = (id *)((char *)v35 + v26);
          --v36;
        }
        while (v36);
      }
      v39 = v63;
      sub_1B2185C90(v32, v56, v11, v29, v62);
    }
    else
    {
      v48 = a1[6];
      v49 = a1[7];
      v50 = v49 - v48;
      v33 = v29;
      if (v49 != v48)
      {
        v51 = (unsigned __int8 *)(v60 + 12 * v48 + 8);
        v52 = (id *)v29;
        do
        {
          v53 = *((_QWORD *)v51 - 1);
          v54 = *v51;
          v51 += 12;
          sub_1B205BA5C(a3, v53, v54, v52);
          v52 = (id *)((char *)v52 + v26);
          --v50;
        }
        while (v50);
      }
      v39 = v63;
      sub_1B2185DEC(*(_QWORD *)(v57 + 232), *(_QWORD *)(v57 + 240), v29, v62);
    }
    ecs_stack_allocator_deallocate(*(_QWORD **)(v39 + 32), v33, v61);
  }
  return swift_release();
}

uint64_t sub_1B219D8A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _BYTE v38[40];
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = v3;
  v31 = *(_OWORD *)result;
  v32 = *(_OWORD *)(result + 16);
  v33 = *(_QWORD *)(result + 32);
  v26 = *(_QWORD *)(result + 80);
  if (v26 >= 1)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v9 = *(_QWORD *)(result + 64);
    v10 = *(_QWORD **)(result + 72);
    v11 = v10[4];
    swift_retain();
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      v24 = v9;
      v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v22 = v6;
      sub_1B1D6631C(v6);
      v13 = (uint64_t *)(v7 + 24);
      v23 = v12;
      v25 = a3;
      while (1)
      {
        v14 = *((unsigned int *)v13 - 6);
        v15 = *((unsigned int *)v13 - 5);
        v16 = *((unsigned int *)v13 - 4);
        v29 = *v13;
        v30 = *(v13 - 1);
        v27 = v8;
        v28 = v13[1];
        v17 = v13[2];
        v44 = v4;
        if (v12)
        {
          v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B1A000F0((uint64_t)(v10 + 6), (uint64_t)v38, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v19 = v10[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v39[0] = v24;
        v39[1] = v17;
        v39[2] = v10;
        v39[3] = v16;
        v39[4] = (v15 - v14 + v16);
        v39[5] = v26;
        v39[6] = v14;
        v39[7] = v15;
        v39[8] = 0;
        v39[9] = 0;
        v40 = 1;
        v41 = v30;
        v42 = v29;
        v43 = v28;
        swift_retain();
        swift_retain();
        v21 = v44;
        sub_1B219D584(v39, (uint64_t)v10, v25);
        v4 = v21;
        if (v21)
          break;
        swift_release();
        swift_release();
        v36[0] = v31;
        v36[1] = v32;
        v37 = v33;
        sub_1B1F05D48(v10, (unsigned __int16 **)v36, (uint64_t)v38);
        sub_1B1F03804((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        v12 = v23;
        if ((v23 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        v8 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      swift_release();
      v34[0] = v31;
      v34[1] = v32;
      v35 = v33;
      sub_1B1F05D48(v10, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B1F03804((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if ((v23 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B219DBEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v41;

  v7 = (uint64_t *)a1[11];
  v6 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v11 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for PointCacheFileAsset, (uint64_t)&off_1E63995A8, v7, v6, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v41);
  if (v41 == 1)
  {
    a2[9] = &type metadata for PointCacheRuntime;
    a2[10] = &off_1E638F3F0;
    v12 = sub_1B1A12038((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1E638F3F0, v7, v6, v8, v10);
    v13 = (uint64_t *)v12;
    if (v7)
    {
      for (; v8; --v8)
      {
        sub_1B208F850(v11, v13, a3);
        if (v3)
          break;
        v13 += 4;
        v11 += 6;
      }
    }
    else
    {
      v24 = a1[6];
      v25 = a1[7];
      v26 = v25 - v24;
      if (v25 != v24)
      {
        v27 = (uint64_t *)(v12 + 32 * v24);
        v28 = &v11[6 * v24];
        do
        {
          sub_1B208F850(v28, v27, a3);
          if (v3)
            break;
          v27 += 4;
          v28 += 6;
          --v26;
        }
        while (v26);
      }
    }
  }
  else
  {
    v37 = v6;
    v14 = v9;
    v15 = v8;
    if (!v7)
      v15 = a1[7] - a1[6];
    v16 = sub_1B1B7EAB8(MEMORY[0x1E0DEE9D8]);
    v17 = a2[4];
    v18 = sub_1B21885F8(v15, (uint64_t)v16, 0x636143746E696F50, 0xEA00000000006568, 0, v17);
    v38 = v20;
    v39 = (_QWORD *)v17;
    if (v7)
    {
      v36 = v19;
      if (v8)
      {
        v21 = (unint64_t)v18;
        v22 = v18;
        v23 = v8;
        while (1)
        {
          sub_1B208F850(v11, v22, a3);
          if (v3)
            break;
          v22 += 4;
          v11 += 6;
          if (!--v23)
            goto LABEL_23;
        }
      }
      else
      {
        v21 = (unint64_t)v18;
LABEL_23:
        sub_1B2185F40(v7, v37, v8, v21, v36);
      }
    }
    else
    {
      v29 = v19;
      v30 = a1[6];
      v31 = a1[7];
      v32 = v31 - v30;
      if (v31 == v30)
      {
        v21 = (unint64_t)v18;
LABEL_27:
        sub_1B218608C(*(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240), v21, v29);
      }
      else
      {
        v33 = &v11[6 * v30];
        v21 = (unint64_t)v18;
        v34 = v18;
        while (1)
        {
          sub_1B208F850(v33, v34, a3);
          if (v3)
            break;
          v34 += 4;
          v33 += 6;
          if (!--v32)
            goto LABEL_27;
        }
      }
    }
    ecs_stack_allocator_deallocate(v39, v21, 32 * v38);
  }
  return swift_release();
}

uint64_t sub_1B219DEAC(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219DBEC);
}

uint64_t sub_1B219DEC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  __int16 v118;
  __int16 v119;
  char v120;

  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  v114 = sub_1B1A12038((uint64_t)&type metadata for PointCacheGenerator, (uint64_t)&off_1E6399B80, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v120);
  if (v120 == 1)
  {
    a2[9] = &type metadata for PointCacheRuntime;
    a2[10] = &off_1E638F3F0;
    v10 = sub_1B1A12038((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1E638F3F0, v6, v5, v7, v9);
    if (v6)
    {
      if (v7)
      {
        v11 = 0;
        v12 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v13 = MEMORY[0x1E0DEE9E0];
        do
        {
          v26 = (int *)(v114 + 32 * v11);
          v27 = (_QWORD *)(v10 + 32 * v11);
          swift_bridgeObjectRelease();
          *v27 = v13;
          v27[3] = 0;
          v28 = v26[1];
          v29 = *v26;
          v30 = (_DWORD)v29 == -1 && v28 == 0;
          if (!v30 && (v29 & 0x80000000) == 0 && v12[1] > v29)
          {
            v31 = *v12 + 12 * (int)v29;
            if (v28 == -1 || *(_DWORD *)(v31 + 8) == v28)
            {
              v33 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(*v12 + 12 * (int)v29) + 32);
              v34 = *(_QWORD *)(v33 + 48);
              v35 = *(_QWORD *)(v34 + 16);
              if (v35)
              {
                v36 = *(__int16 *)(v31 + 4);
                v37 = (_QWORD *)(v34 + 56);
                while ((ValueMetadata *)*(v37 - 3) != &type metadata for MeshModel)
                {
                  v37 += 5;
                  if (!--v35)
                    goto LABEL_13;
                }
                v22 = (uint64_t *)(*(_QWORD *)(v33 + 128) + *v37 + 16 * v36);
                v23 = *v22;
                v24 = v22[1];
                v25 = v114 + 32 * v11;
                v111 = *(_QWORD *)(v25 + 8);
                v113 = *(_QWORD *)(v25 + 24);
                v108 = *(_WORD *)(v25 + 18);
                v105 = *(_BYTE *)(v25 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B2084A90(v10 + 32 * v11, v23, v24, v111, v105, v108, v113);
                if (v116)

                v116 = 0;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_13:
          ++v11;
        }
        while (v11 != v7);
      }
    }
    else
    {
      v56 = a1[6];
      v55 = a1[7];
      if (v56 != v55)
      {
        v60 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v61 = MEMORY[0x1E0DEE9E0];
        do
        {
          v64 = (int *)(v114 + 32 * v56);
          v65 = (_QWORD *)(v10 + 32 * v56);
          swift_bridgeObjectRelease();
          *v65 = v61;
          v65[3] = 0;
          v66 = v64[1];
          v67 = *v64;
          v68 = (_DWORD)v67 == -1 && v66 == 0;
          if (!v68 && (v67 & 0x80000000) == 0 && v60[1] > v67)
          {
            v69 = *v60 + 12 * (int)v67;
            if (v66 == -1 || *(_DWORD *)(v69 + 8) == v66)
            {
              v71 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(*v60 + 12 * (int)v67) + 32);
              v72 = *(_QWORD *)(v71 + 48);
              v73 = *(_QWORD *)(v72 + 16);
              if (v73)
              {
                v74 = *(__int16 *)(v69 + 4);
                v75 = (_QWORD *)(v72 + 56);
                while ((ValueMetadata *)*(v75 - 3) != &type metadata for MeshModel)
                {
                  v75 += 5;
                  if (!--v73)
                    goto LABEL_63;
                }
                v76 = (uint64_t *)(*(_QWORD *)(v71 + 128) + *v75 + 16 * v74);
                v77 = *v76;
                v78 = v76[1];
                v79 = v114 + 32 * v56;
                v109 = *(_QWORD *)(v79 + 8);
                v112 = *(_QWORD *)(v79 + 24);
                v106 = *(_WORD *)(v79 + 18);
                v103 = *(_BYTE *)(v79 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B2084A90(v10 + 32 * v56, v77, v78, v109, v103, v106, v112);
                if (v116)

                v116 = 0;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_63:
          ++v56;
        }
        while (v56 != v55);
      }
    }
  }
  else
  {
    v115 = v8;
    v14 = v7;
    if (!v6)
      v14 = a1[7] - a1[6];
    v15 = sub_1B1B7EAB8(MEMORY[0x1E0DEE9D8]);
    v16 = a2[4];
    v17 = sub_1B21885F8(v14, (uint64_t)v15, 0x636143746E696F50, 0xEA00000000006568, 0, v16);
    v107 = v18;
    v110 = (_QWORD *)v16;
    v104 = v19;
    if (v6)
    {
      if (v7)
      {
        v20 = 0;
        v21 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v96 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        do
        {
          v42 = (int *)(v114 + 32 * v20);
          v43 = &v17[4 * v20];
          swift_bridgeObjectRelease();
          *v43 = MEMORY[0x1E0DEE9E0];
          v43[3] = 0;
          v44 = v42[1];
          v45 = *v42;
          v46 = v5;
          v47 = (_DWORD)v45 == -1 && v44 == 0;
          if (!v47 && (v45 & 0x80000000) == 0 && v21[1] > v45)
          {
            v48 = *v21 + 12 * (int)v45;
            if (v44 == -1 || *(_DWORD *)(v48 + 8) == v44)
            {
              v50 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(*v21 + 12 * (int)v45) + 32);
              v51 = *(_QWORD *)(v50 + 48);
              v52 = *(_QWORD *)(v51 + 16);
              if (v52)
              {
                v53 = *(__int16 *)(v48 + 4);
                v54 = (_QWORD *)(v51 + 56);
                while ((ValueMetadata *)*(v54 - 3) != &type metadata for MeshModel)
                {
                  v54 += 5;
                  if (!--v52)
                    goto LABEL_34;
                }
                v38 = (uint64_t *)(*(_QWORD *)(v50 + 128) + *v54 + 16 * v53);
                v39 = *v38;
                v40 = v38[1];
                v41 = v114 + 32 * v20;
                v99 = *(_QWORD *)(v41 + 8);
                v101 = *(_QWORD *)(v41 + 24);
                v118 = *(_WORD *)(v41 + 18);
                v97 = *(_BYTE *)(v41 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B2084A90((uint64_t)&v17[4 * v20], v39, v40, v99, v97, v118, v101);
                if (v116)

                v116 = 0;
                v21 = v96;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_34:
          ++v20;
        }
        while (v20 != v7);
      }
      else
      {
        v46 = v5;
      }
      sub_1B2185F40(v6, v46, v7, (uint64_t)v17, v104);
    }
    else
    {
      v58 = a1[6];
      v57 = a1[7];
      if (v58 != v57)
      {
        v62 = 0;
        v63 = (_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        do
        {
          v80 = (int *)(v114 + 32 * v58);
          v81 = &v17[4 * v62];
          swift_bridgeObjectRelease();
          *v81 = MEMORY[0x1E0DEE9E0];
          v81[3] = 0;
          v82 = v80[1];
          v83 = *v80;
          v84 = (_DWORD)v83 == -1 && v82 == 0;
          if (!v84 && (v83 & 0x80000000) == 0 && v63[1] > v83)
          {
            v85 = *v63 + 12 * (int)v83;
            if (v82 == -1 || *(_DWORD *)(v85 + 8) == v82)
            {
              v87 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(*v63 + 12 * (int)v83) + 32);
              v88 = *(_QWORD *)(v87 + 48);
              v89 = *(_QWORD *)(v88 + 16);
              if (v89)
              {
                v90 = *(__int16 *)(v85 + 4);
                v91 = (_QWORD *)(v88 + 56);
                while ((ValueMetadata *)*(v91 - 3) != &type metadata for MeshModel)
                {
                  v91 += 5;
                  if (!--v89)
                    goto LABEL_83;
                }
                v92 = (uint64_t *)(*(_QWORD *)(v87 + 128) + *v91 + 16 * v90);
                v94 = *v92;
                v93 = v92[1];
                v95 = v114 + 32 * v58;
                v100 = *(_QWORD *)(v95 + 8);
                v102 = *(_QWORD *)(v95 + 24);
                v119 = *(_WORD *)(v95 + 18);
                v98 = *(_BYTE *)(v95 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B2084A90((uint64_t)&v17[4 * v62], v94, v93, v100, v98, v119, v102);
                if (v116)

                v116 = 0;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_83:
          ++v58;
          ++v62;
        }
        while (v58 != v57);
      }
      sub_1B218608C(*(_QWORD *)(v115 + 232), *(_QWORD *)(v115 + 240), (uint64_t)v17, v104);
    }
    ecs_stack_allocator_deallocate(v110, (unint64_t)v17, 32 * v107);
  }
  return swift_release();
}

uint64_t sub_1B219E664(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219DEC8);
}

uint64_t sub_1B219E680(_QWORD *a1, _QWORD *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v41;

  v7 = (uint64_t *)a1[11];
  v6 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v11 = sub_1B1A12038((uint64_t)&type metadata for PointCacheFromModel, (uint64_t)&off_1E6399898, v7, v6, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v41);
  if (v41 == 1)
  {
    a2[9] = &type metadata for PointCacheRuntime;
    a2[10] = &off_1E638F3F0;
    v12 = sub_1B1A12038((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1E638F3F0, v7, v6, v8, v10);
    v13 = (_QWORD *)v12;
    if (v7)
    {
      for (; v8; --v8)
      {
        sub_1B2090C58(v11, v13, a3);
        if (v3)
          break;
        v13 += 4;
        v11 += 48;
      }
    }
    else
    {
      v24 = a1[6];
      v25 = a1[7];
      v26 = v25 - v24;
      if (v25 != v24)
      {
        v27 = (_QWORD *)(v12 + 32 * v24);
        v28 = v11 + 48 * v24;
        do
        {
          sub_1B2090C58(v28, v27, a3);
          if (v3)
            break;
          v27 += 4;
          v28 += 48;
          --v26;
        }
        while (v26);
      }
    }
  }
  else
  {
    v37 = v6;
    v14 = v9;
    v15 = v8;
    if (!v7)
      v15 = a1[7] - a1[6];
    v16 = sub_1B1B7EAB8(MEMORY[0x1E0DEE9D8]);
    v17 = a2[4];
    v18 = sub_1B21885F8(v15, (uint64_t)v16, 0x636143746E696F50, 0xEA00000000006568, 0, v17);
    v38 = v20;
    v39 = (_QWORD *)v17;
    if (v7)
    {
      v36 = v19;
      if (v8)
      {
        v21 = (unint64_t)v18;
        v22 = v18;
        v23 = v8;
        while (1)
        {
          sub_1B2090C58(v11, v22, a3);
          if (v3)
            break;
          v22 += 4;
          v11 += 48;
          if (!--v23)
            goto LABEL_23;
        }
      }
      else
      {
        v21 = (unint64_t)v18;
LABEL_23:
        sub_1B2185F40(v7, v37, v8, v21, v36);
      }
    }
    else
    {
      v29 = v19;
      v30 = a1[6];
      v31 = a1[7];
      v32 = v31 - v30;
      if (v31 == v30)
      {
        v21 = (unint64_t)v18;
LABEL_27:
        sub_1B218608C(*(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240), v21, v29);
      }
      else
      {
        v33 = v11 + 48 * v30;
        v21 = (unint64_t)v18;
        v34 = v18;
        while (1)
        {
          sub_1B2090C58(v33, v34, a3);
          if (v3)
            break;
          v34 += 4;
          v33 += 48;
          if (!--v32)
            goto LABEL_27;
        }
      }
    }
    ecs_stack_allocator_deallocate(v39, v21, 32 * v38);
  }
  return swift_release();
}

void sub_1B219E940(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _BYTE v38[40];
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = v2;
  v31 = *(_OWORD *)a1;
  v32 = *(_OWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 80);
  if (v25 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD **)(a1 + 72);
    v9 = v8[4];
    v26 = a2;
    ecs_stack_allocator_push_snapshot(v9);
    if (v7)
    {
      v24 = v6;
      v10 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v22 = a1;
      sub_1B1D6631C(a1);
      v11 = (uint64_t *)(v5 + 24);
      v23 = v10;
      while (1)
      {
        v12 = *((unsigned int *)v11 - 6);
        v13 = *((unsigned int *)v11 - 5);
        v14 = *((unsigned int *)v11 - 4);
        v29 = *v11;
        v30 = *(v11 - 1);
        v27 = v7;
        v28 = v11[1];
        v15 = v11[2];
        v44 = v3;
        if (v10)
        {
          v16 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B1A000F0((uint64_t)(v8 + 6), (uint64_t)v38, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v17 = v8[4];
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
        v19 = v9;
        swift_retain();
        v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v8[7] = v18;
        v8[9] = 0;
        v8[10] = 0;
        v8[8] = 0;
        swift_release();
        v39[0] = v24;
        v39[1] = v15;
        v39[2] = v8;
        v39[3] = v14;
        v39[4] = (v13 - v12 + v14);
        v39[5] = v25;
        v39[6] = v12;
        v39[7] = v13;
        v39[8] = 0;
        v39[9] = 0;
        v40 = 1;
        v41 = v30;
        v42 = v29;
        v43 = v28;
        v20 = v26;
        v21 = v44;
        sub_1B219E680(v39, v8, v20);
        v3 = v21;
        if (v21)
          break;

        v36[0] = v31;
        v36[1] = v32;
        v37 = v33;
        sub_1B1F05D48(v8, (unsigned __int16 **)v36, (uint64_t)v38);
        sub_1B1F03804((char *)v15);
        ecs_stack_allocator_pop_snapshot(v19);
        v9 = v19;
        v10 = v23;
        if ((v23 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
        }
        swift_release();
        v11 += 6;
        v7 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_12;
        }
      }

      v34[0] = v31;
      v34[1] = v32;
      v35 = v33;
      sub_1B1F05D48(v8, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B1F03804((char *)v15);
      ecs_stack_allocator_pop_snapshot(v19);
      if ((v23 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
      ecs_stack_allocator_pop_snapshot(v8[4]);

    }
    else
    {
LABEL_12:
      ecs_stack_allocator_pop_snapshot(v8[4]);

    }
  }
}

uint64_t sub_1B219EC58(_QWORD *a1, _QWORD *a2, void *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;

  v6 = (uint64_t *)a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v11 = sub_1B1A12038((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, v6, v7, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v43);
  if (v43 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1E6390060;
    v12 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v6, v7, v8, v10);
    if (v6)
    {
      if (v8)
      {
        swift_getObjectType();
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v13 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v12++ = v13;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v21 = a1[6];
      v20 = a1[7];
      v22 = v20 - v21;
      if (v20 != v21)
      {
        swift_getObjectType();
        v32 = &v12[v21];
        v33 = v11 + 4 * v21;
        do
        {
          v33 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v34 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v32++ = v34;
          --v22;
        }
        while (v22);
      }
    }
    return swift_release();
  }
  else
  {
    v37 = v7;
    v42 = v9;
    if (v6)
    {
      v36 = v6;
      v41 = (_QWORD *)a2[4];
      v38 = sub_1B2197120(v8, 0, (uint64_t)v41);
      v40 = v14;
      v35 = v15;
      if (v8)
      {
        swift_getObjectType();
        v16 = v38;
        v17 = v8;
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v18 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v16++ = v18;
          --v17;
        }
        while (v17);
      }
      v19 = v38;
      sub_1B218343C(v36, v37, v8, (uint64_t)v38, v35);
    }
    else
    {
      v23 = a1[6];
      v24 = a1[7];
      v41 = (_QWORD *)a2[4];
      v19 = sub_1B2197120(v24 - v23, 0, (uint64_t)v41);
      v39 = v26;
      v40 = v25;
      v27 = v24 - v23;
      if (v24 != v23)
      {
        swift_getObjectType();
        v28 = v19;
        v29 = v11 + 4 * v23;
        do
        {
          v29 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          v30 = sub_1B2228E60();
          swift_unknownObjectRelease();
          *v28++ = v30;
          --v27;
        }
        while (v27);
      }
      sub_1B2183588(*(_QWORD *)(v42 + 232), *(_QWORD *)(v42 + 240), (uint64_t)v19, v39);
    }
    ecs_stack_allocator_deallocate(v41, (unint64_t)v19, 8 * v40);
    return swift_release();
  }
}

uint64_t sub_1B219EFA8(uint64_t a1, uint64_t a2)
{
  return sub_1B219EFC4(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219EC58);
}

uint64_t sub_1B219EFC4(uint64_t result, uint64_t a2, void (*a3)(_QWORD *, _QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[40];
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = v3;
  v32 = *(_OWORD *)result;
  v33 = *(_OWORD *)(result + 16);
  v34 = *(_QWORD *)(result + 32);
  v26 = *(_QWORD *)(result + 80);
  if (v26 >= 1)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v9 = *(_QWORD *)(result + 64);
    v10 = *(_QWORD **)(result + 72);
    v11 = v10[4];
    swift_unknownObjectRetain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v24 = v9;
      v22 = v6;
      sub_1B1D6631C(v6);
      v13 = (uint64_t *)(v7 + 24);
      v23 = v12;
      v25 = a2;
      while (1)
      {
        v28 = v8;
        v14 = *((unsigned int *)v13 - 6);
        v15 = *((unsigned int *)v13 - 5);
        v16 = *((unsigned int *)v13 - 4);
        v30 = *v13;
        v31 = *(v13 - 1);
        v17 = v13[2];
        v29 = v13[1];
        v45 = v4;
        if (v12)
        {
          v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B1A000F0((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v19 = v10[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        v41 = 1;
        v42 = v31;
        v43 = v30;
        v44 = v29;
        swift_unknownObjectRetain();
        v21 = v45;
        a3(v40, v10, v25);
        v4 = v21;
        if (v21)
          break;
        swift_unknownObjectRelease();
        v37[0] = v32;
        v37[1] = v33;
        v38 = v34;
        sub_1B1F05D48(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B1F03804((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        v12 = v23;
        if ((v23 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_15;
        }
      }
      swift_unknownObjectRelease();
      v35[0] = v32;
      v35[1] = v33;
      v36 = v34;
      sub_1B1F05D48(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B1F03804((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if ((v23 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B219F2DC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *i;
  void *v32;
  void *v33;
  char isUniquelyReferenced_nonNull_native;
  id v35;
  id v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  os_unfair_lock_s *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *k;
  id v49;
  void *v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  os_unfair_lock_s *v56;
  os_unfair_lock_s *v57;
  void *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *j;
  void *v68;
  void *v69;
  char v70;
  id v71;
  id v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  os_unfair_lock_s *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;

  v7 = (uint64_t *)a1[11];
  v6 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v86 = sub_1B1A12038((uint64_t)&type metadata for TextureNamedAsset, (uint64_t)&off_1E6390580, v7, v6, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v90);
  v87 = v8;
  if (v90 != 1)
  {
    v85 = v9;
    if (v7)
    {
      v80 = v7;
      v25 = v8;
      v82 = (_QWORD *)a2[4];
      v83 = sub_1B2197120(v8, 0, (uint64_t)v82);
      v81 = v26;
      v79 = v27;
      v28 = v6;
      if (v8)
      {
        v29 = v8 - 1;
        v30 = (uint64_t *)(v86 + 8);
        for (i = v83; ; ++i)
        {
          v35 = sub_1B214CEC4(*(v30 - 1), *v30);
          if (v35)
          {
            v36 = v35;
          }
          else
          {
            v37 = *(_QWORD *)(a4 + 240);
            v38 = *(os_unfair_lock_s **)(v37 + 48);
            swift_retain();
            os_unfair_lock_lock(v38);
            v39 = *(_QWORD *)(v37 + 128);
            if (!*(_QWORD *)(v39 + 16)
              || (v40 = sub_1B1DC3B00(0xD000000000000015, 0x80000001B233FDE0), (v41 & 1) == 0))
            {
              v32 = (void *)sub_1B1BA218C(a4);
              v33 = (void *)sub_1B2228728();
              objc_msgSend(v32, sel_setLabel_, v33, v79, v80);

              swift_unknownObjectRetain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v90 = *(_QWORD *)(v37 + 128);
              *(_QWORD *)(v37 + 128) = 0x8000000000000000;
              sub_1B1B84668((uint64_t)v32, 0xD000000000000015, 0x80000001B233FDE0, isUniquelyReferenced_nonNull_native);
              *(_QWORD *)(v37 + 128) = v90;
              swift_bridgeObjectRelease();
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 48));
              swift_release();
              swift_unknownObjectRelease();
              *i = v32;
              v25 = v8;
              v28 = v6;
              if (!v29)
                break;
              goto LABEL_17;
            }
            v36 = *(id *)(*(_QWORD *)(v39 + 56) + 8 * v40);
            v42 = *(os_unfair_lock_s **)(v37 + 48);
            swift_unknownObjectRetain();
            os_unfair_lock_unlock(v42);
            swift_release();
            v25 = v8;
          }
          v28 = v6;
          swift_unknownObjectRelease();
          *i = v36;
          if (!v29)
            break;
LABEL_17:
          v30 += 2;
          --v29;
        }
      }
      v43 = (unint64_t)v83;
      sub_1B218343C(v80, v28, v25, (uint64_t)v83, v79);
LABEL_40:
      ecs_stack_allocator_deallocate(v82, v43, 8 * v81);
      return swift_release();
    }
    v61 = a1[6];
    v60 = a1[7];
    v82 = (_QWORD *)a2[4];
    v84 = sub_1B2197120(v60 - v61, 0, (uint64_t)v82);
    v81 = v62;
    v88 = v63;
    if (v60 == v61)
    {
LABEL_39:
      v43 = (unint64_t)v84;
      sub_1B2183588(*(_QWORD *)(v85 + 232), *(_QWORD *)(v85 + 240), (uint64_t)v84, v88);
      goto LABEL_40;
    }
    v65 = ~v61 + v60;
    v66 = (uint64_t *)(v86 + 16 * v61 + 8);
    for (j = v84; ; ++j)
    {
      v71 = sub_1B214CEC4(*(v66 - 1), *v66);
      if (v71)
      {
        v72 = v71;
      }
      else
      {
        v73 = *(_QWORD *)(a4 + 240);
        v74 = *(os_unfair_lock_s **)(v73 + 48);
        swift_retain();
        os_unfair_lock_lock(v74);
        v75 = *(_QWORD *)(v73 + 128);
        if (!*(_QWORD *)(v75 + 16) || (v76 = sub_1B1DC3B00(0xD000000000000015, 0x80000001B233FDE0), (v77 & 1) == 0))
        {
          v68 = (void *)sub_1B1BA218C(a4);
          v69 = (void *)sub_1B2228728();
          objc_msgSend(v68, sel_setLabel_, v69);

          swift_unknownObjectRetain();
          v70 = swift_isUniquelyReferenced_nonNull_native();
          v90 = *(_QWORD *)(v73 + 128);
          *(_QWORD *)(v73 + 128) = 0x8000000000000000;
          sub_1B1B84668((uint64_t)v68, 0xD000000000000015, 0x80000001B233FDE0, v70);
          *(_QWORD *)(v73 + 128) = v90;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v73 + 48));
          swift_release();
          swift_unknownObjectRelease();
          *j = v68;
          if (!v65)
            goto LABEL_39;
          goto LABEL_44;
        }
        v72 = *(id *)(*(_QWORD *)(v75 + 56) + 8 * v76);
        v78 = *(os_unfair_lock_s **)(v73 + 48);
        swift_unknownObjectRetain();
        os_unfair_lock_unlock(v78);
        swift_release();
      }
      swift_unknownObjectRelease();
      *j = v72;
      if (!v65)
        goto LABEL_39;
LABEL_44:
      v66 += 2;
      --v65;
    }
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1E6390060;
  v11 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v7, v6, v8, v10);
  if (v7)
  {
    if (v8)
    {
      v12 = 0;
      v13 = v86;
      do
      {
        while (1)
        {
          v17 = sub_1B214CEC4(*(_QWORD *)(v13 + 16 * v12), *(_QWORD *)(v13 + 16 * v12 + 8));
          if (!v17)
            break;
          v18 = v17;
LABEL_8:
          swift_unknownObjectRelease();
          *(_QWORD *)(v11 + 8 * v12++) = v18;
          if (v12 == v8)
            return swift_release();
        }
        v19 = *(_QWORD *)(a4 + 240);
        v20 = *(os_unfair_lock_s **)(v19 + 48);
        swift_retain();
        os_unfair_lock_lock(v20);
        v21 = *(_QWORD *)(v19 + 128);
        if (*(_QWORD *)(v21 + 16))
        {
          v22 = sub_1B1DC3B00(0xD000000000000015, 0x80000001B233FDE0);
          if ((v23 & 1) != 0)
          {
            v18 = *(id *)(*(_QWORD *)(v21 + 56) + 8 * v22);
            v24 = *(os_unfair_lock_s **)(v19 + 48);
            swift_unknownObjectRetain();
            os_unfair_lock_unlock(v24);
            swift_release();
            v13 = v86;
            v8 = v87;
            goto LABEL_8;
          }
        }
        v14 = (void *)sub_1B1BA218C(a4);
        v15 = (void *)sub_1B2228728();
        objc_msgSend(v14, sel_setLabel_, v15);

        swift_unknownObjectRetain();
        v16 = swift_isUniquelyReferenced_nonNull_native();
        v90 = *(_QWORD *)(v19 + 128);
        *(_QWORD *)(v19 + 128) = 0x8000000000000000;
        sub_1B1B84668((uint64_t)v14, 0xD000000000000015, 0x80000001B233FDE0, v16);
        *(_QWORD *)(v19 + 128) = v90;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 48));
        swift_release();
        swift_unknownObjectRelease();
        *(_QWORD *)(v11 + 8 * v12++) = v14;
        v13 = v86;
        v8 = v87;
      }
      while (v12 != v87);
    }
  }
  else
  {
    v44 = a1[6];
    v45 = a1[7];
    if (v44 != v45)
    {
      v46 = ~v44 + v45;
      v47 = (_QWORD *)(v11 + 8 * v44);
      for (k = (uint64_t *)(v86 + 16 * v44 + 8); ; k += 2)
      {
        v49 = sub_1B214CEC4(*(k - 1), *k);
        if (v49)
        {
          v50 = v49;
        }
        else
        {
          v51 = *(_QWORD *)(a4 + 240);
          v52 = *(os_unfair_lock_s **)(v51 + 48);
          swift_retain();
          os_unfair_lock_lock(v52);
          v53 = *(_QWORD *)(v51 + 128);
          if (*(_QWORD *)(v53 + 16)
            && (v54 = sub_1B1DC3B00(0xD000000000000015, 0x80000001B233FDE0), (v55 & 1) != 0))
          {
            v50 = *(void **)(*(_QWORD *)(v53 + 56) + 8 * v54);
            v56 = *(os_unfair_lock_s **)(v51 + 48);
            swift_unknownObjectRetain();
            v57 = v56;
          }
          else
          {
            v50 = (void *)sub_1B1BA218C(a4);
            v58 = (void *)sub_1B2228728();
            objc_msgSend(v50, sel_setLabel_, v58);

            swift_unknownObjectRetain();
            v59 = swift_isUniquelyReferenced_nonNull_native();
            v90 = *(_QWORD *)(v51 + 128);
            *(_QWORD *)(v51 + 128) = 0x8000000000000000;
            sub_1B1B84668((uint64_t)v50, 0xD000000000000015, 0x80000001B233FDE0, v59);
            *(_QWORD *)(v51 + 128) = v90;
            swift_bridgeObjectRelease();
            v57 = *(os_unfair_lock_s **)(v51 + 48);
          }
          os_unfair_lock_unlock(v57);
          swift_release();
        }
        swift_unknownObjectRelease();
        *v47 = v50;
        if (!v46)
          break;
        --v46;
        ++v47;
      }
    }
  }
  return swift_release();
}

uint64_t sub_1B219FA94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[40];
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = v3;
  v32 = *(_OWORD *)result;
  v33 = *(_OWORD *)(result + 16);
  v34 = *(_QWORD *)(result + 32);
  v26 = *(_QWORD *)(result + 80);
  if (v26 >= 1)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v9 = *(_QWORD *)(result + 64);
    v10 = *(_QWORD **)(result + 72);
    v11 = v10[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v24 = v9;
      v22 = v6;
      sub_1B1D6631C(v6);
      v13 = (uint64_t *)(v7 + 24);
      v23 = v12;
      v25 = a3;
      while (1)
      {
        v28 = v8;
        v14 = *((unsigned int *)v13 - 6);
        v15 = *((unsigned int *)v13 - 5);
        v16 = *((unsigned int *)v13 - 4);
        v30 = *v13;
        v31 = *(v13 - 1);
        v17 = v13[2];
        v29 = v13[1];
        v45 = v4;
        if (v12)
        {
          v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B1A000F0((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v19 = v10[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        v41 = 1;
        v42 = v31;
        v43 = v30;
        v44 = v29;
        swift_retain();
        v21 = v45;
        sub_1B219F2DC(v40, v10, a2, v25);
        v4 = v21;
        if (v21)
          break;
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        v38 = v34;
        sub_1B1F05D48(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B1F03804((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        v12 = v23;
        if ((v23 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      v36 = v34;
      sub_1B1F05D48(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B1F03804((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if ((v23 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B219FDAC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  char v53;

  v4 = v3;
  v7 = (uint64_t *)a1[11];
  v6 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  v11 = (_BYTE *)sub_1B1A12038((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FD58, v7, v6, v8, v10);
  v12 = sub_1B19F6560(v9, (uint64_t)a1);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v53);
  if (v53 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1E6390060;
    v13 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v7, v6, v8, v10);
    if (v7)
    {
      if (v8)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
        do
        {
          v15 = *v7++;
          sub_1B1BB3C98(v9, v15, v11, v12, v13, a3);
          if (v4)
            break;
          ++v13;
          v12 += v14;
          v11 += 56;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v26 = a1[6];
      v25 = a1[7];
      if (v26 != v25)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
        v41 = &v13[v26];
        v42 = v12 + v26 * v40;
        v43 = &v11[56 * v26];
        do
        {
          sub_1B1BB3C98(v9, v26, v43, v42, v41, a3);
          if (v4)
            break;
          ++v26;
          ++v41;
          v42 += v40;
          v43 += 56;
        }
        while (v25 != v26);
      }
    }
    return swift_release();
  }
  v46 = v6;
  if (!v7)
  {
    v28 = a1[6];
    v27 = a1[7];
    v49 = (_QWORD *)a2[4];
    v29 = sub_1B2197120(v27 - v28, 0, (uint64_t)v49);
    v47 = (uint64_t)v29;
    v48 = v30;
    v45 = v31;
    if (v27 != v28)
    {
      v32 = v29;
      v33 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
      v34 = v12 + v28 * v33;
      v35 = &v11[56 * v28];
      while (1)
      {
        sub_1B1BB3C98(v9, v28, v35, v34, v32, a3);
        if (v4)
          break;
        ++v28;
        ++v32;
        v34 += v33;
        v35 += 56;
        if (v27 == v28)
          goto LABEL_20;
      }
      v36 = v49;
      v37 = 8 * v48;
      v38 = v47;
      goto LABEL_22;
    }
LABEL_20:
    v24 = v47;
    sub_1B2183588(*(_QWORD *)(v9 + 232), *(_QWORD *)(v9 + 240), v47, v45);
LABEL_21:
    v36 = v49;
    v37 = 8 * v48;
    v38 = v24;
LABEL_22:
    ecs_stack_allocator_deallocate(v36, v38, v37);
    return swift_release();
  }
  v16 = a2[4];
  v17 = sub_1B2197120(v8, 0, v16);
  v48 = v18;
  v49 = (_QWORD *)v16;
  v51 = v9;
  v44 = v19;
  v20 = (unint64_t)v17;
  if (!v8)
  {
LABEL_13:
    v24 = v20;
    sub_1B218343C(v7, v46, v8, v20, v44);
    goto LABEL_21;
  }
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
  v23 = v8;
  while (1)
  {
    sub_1B1BB3C98(v51, v7[v21], v11, v12, (_QWORD *)(v20 + v21 * 8), a3);
    if (v4)
      break;
    ++v21;
    v12 += v22;
    v11 += 56;
    if (!--v23)
      goto LABEL_13;
  }
  ecs_stack_allocator_deallocate(v49, v20, 8 * v48);
  return swift_release();
}

uint64_t sub_1B21A0108(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219FDAC);
}

uint64_t sub_1B21A0124(uint64_t result, uint64_t a2, void (*a3)(_QWORD *, _QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[40];
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = v3;
  v32 = *(_OWORD *)result;
  v33 = *(_OWORD *)(result + 16);
  v34 = *(_QWORD *)(result + 32);
  v26 = *(_QWORD *)(result + 80);
  if (v26 >= 1)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v9 = *(_QWORD *)(result + 64);
    v10 = *(_QWORD **)(result + 72);
    v11 = v10[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v24 = v9;
      v22 = v6;
      sub_1B1D6631C(v6);
      v13 = (uint64_t *)(v7 + 24);
      v23 = v12;
      v25 = a2;
      while (1)
      {
        v28 = v8;
        v14 = *((unsigned int *)v13 - 6);
        v15 = *((unsigned int *)v13 - 5);
        v16 = *((unsigned int *)v13 - 4);
        v30 = *v13;
        v31 = *(v13 - 1);
        v17 = v13[2];
        v29 = v13[1];
        v45 = v4;
        if (v12)
        {
          v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B1A000F0((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v19 = v10[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        v41 = 1;
        v42 = v31;
        v43 = v30;
        v44 = v29;
        swift_retain();
        v21 = v45;
        a3(v40, v10, v25);
        v4 = v21;
        if (v21)
          break;
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        v38 = v34;
        sub_1B1F05D48(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B1F03804((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        v12 = v23;
        if ((v23 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      v36 = v34;
      sub_1B1F05D48(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B1F03804((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if ((v23 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_release();
  }
  return result;
}

_OWORD *sub_1B21A043C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = ecs_stack_allocator_allocate(a3, a1 << 6, 8);
  v6 = v5;
  if (a1)
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    *(_OWORD *)((char *)v5 + 41) = *(__int128 *)((char *)a2 + 41);
    v5[1] = v8;
    v5[2] = v9;
    *v5 = v7;
    if (a1 != 1)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = a2[2];
      *(_OWORD *)((char *)v5 + 105) = *(__int128 *)((char *)a2 + 41);
      v5[5] = v11;
      v5[6] = v12;
      v5[4] = v10;
      if (a1 != 2)
      {
        v13 = *a2;
        v14 = a2[1];
        v15 = a2[2];
        *(_OWORD *)((char *)v5 + 169) = *(__int128 *)((char *)a2 + 41);
        v5[9] = v14;
        v5[10] = v15;
        v5[8] = v13;
        v16 = a1 - 3;
        if (a1 != 3)
        {
          v17 = v5 + 12;
          do
          {
            sub_1B21A0534((uint64_t)a2);
            v19 = a2[1];
            v18 = a2[2];
            v20 = *a2;
            *(_OWORD *)((char *)v17 + 41) = *(__int128 *)((char *)a2 + 41);
            v17[1] = v19;
            v17[2] = v18;
            *v17 = v20;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        sub_1B21A0534((uint64_t)a2);
      }
      sub_1B21A0534((uint64_t)a2);
    }
    sub_1B21A0534((uint64_t)a2);
  }
  return v6;
}

uint64_t sub_1B21A0534(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B21A0594(uint64_t *a1, _QWORD *a2, char **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  char **v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  char **v40;
  char *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  char **v58;
  char *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  char v76;
  uint64_t v77;
  int v78;
  int v79;
  char **v80;
  char *v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void **v97;
  void **v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110[8];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char **v124;

  v124 = a3;
  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  v10 = sub_1B1A12038((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, v6, v5, v7, v9);
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireGPURepresentation, (uint64_t)&off_1E63B6428, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v111);
  v109 = v8;
  v107 = v9;
  if (v111 != 1)
  {
    v91 = v5;
    if (v6)
    {
      v93 = v6;
      v96 = (_QWORD *)a2[4];
      v97 = (void **)sub_1B2197120(v7, 0, (uint64_t)v96);
      v95 = v29;
      v90 = v30;
      v92 = v7;
      if (v7)
      {
        v31 = a1[3];
        v102 = *a1;
        v32 = v92;
        v33 = v97;
        do
        {
          v35 = *v6++;
          v34 = v35;
          v119 = v102;
          v120 = v109;
          v121 = v107;
          v122 = v31;
          v123 = v35;
          sub_1B20F2F40((uint64_t)v110);
          v36 = *(_BYTE *)(v109 + 184);
          v37 = swift_retain();
          if ((v36 & 1) != 0)
            goto LABEL_43;
          v38 = *(_DWORD *)(*(_QWORD *)(v109 + 168) + 4 * v34);
          v39 = *(_DWORD *)(*(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v38 + 8);
          swift_release();
          v40 = v124;
          v41 = *v124;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v40 = v41;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v41 = sub_1B1C63D98(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
            *v124 = v41;
          }
          v44 = *((_QWORD *)v41 + 2);
          v43 = *((_QWORD *)v41 + 3);
          if (v44 >= v43 >> 1)
            v41 = sub_1B1C63D98(v43 > 1, v44 + 1, 1, v41);
          *((_QWORD *)v41 + 2) = v44 + 1;
          v45 = &v41[8 * v44];
          *((_DWORD *)v45 + 8) = v38;
          *((_DWORD *)v45 + 9) = v39;
          *v124 = v41;
          v46 = *(_OWORD *)(v10 + 80);
          v115 = *(_OWORD *)(v10 + 64);
          v116 = v46;
          v117 = *(_OWORD *)(v10 + 96);
          v118 = *(_QWORD *)(v10 + 112);
          v47 = *(_OWORD *)(v10 + 16);
          v111 = *(_OWORD *)v10;
          v112 = v47;
          v48 = *(_OWORD *)(v10 + 48);
          v113 = *(_OWORD *)(v10 + 32);
          v114 = v48;
          v49 = sub_1B210DE54((uint64_t *)&v111, v110, a4, *v33);
          swift_unknownObjectRelease();
          *v33++ = v49;
          ++v31;
          v10 += 120;
        }
        while (--v32);
      }
      v50 = (unint64_t)v97;
      sub_1B218343C(v93, v91, v92, (uint64_t)v97, v90);
    }
    else
    {
      v69 = a1[6];
      v68 = a1[7];
      v96 = (_QWORD *)a2[4];
      v98 = (void **)sub_1B2197120(v68 - v69, 0, (uint64_t)v96);
      v94 = v71;
      v95 = v70;
      v106 = v68;
      if (v68 != v69)
      {
        v73 = a1[3];
        v104 = *a1;
        v74 = v10 + 120 * v69;
        v75 = v98;
        do
        {
          v119 = v104;
          v120 = v109;
          v121 = v9;
          v122 = v73;
          v123 = v69;
          sub_1B20F2F40((uint64_t)v110);
          v76 = *(_BYTE *)(v109 + 184);
          v77 = swift_retain();
          if ((v76 & 1) != 0)
            goto LABEL_43;
          v78 = *(_DWORD *)(*(_QWORD *)(v109 + 168) + 4 * v69);
          v79 = *(_DWORD *)(*(_QWORD *)(v77 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v78 + 8);
          swift_release();
          v80 = v124;
          v81 = *v124;
          v82 = swift_isUniquelyReferenced_nonNull_native();
          *v80 = v81;
          if ((v82 & 1) == 0)
          {
            v81 = sub_1B1C63D98(0, *((_QWORD *)v81 + 2) + 1, 1, v81);
            *v124 = v81;
          }
          v84 = *((_QWORD *)v81 + 2);
          v83 = *((_QWORD *)v81 + 3);
          if (v84 >= v83 >> 1)
            v81 = sub_1B1C63D98(v83 > 1, v84 + 1, 1, v81);
          ++v69;
          *((_QWORD *)v81 + 2) = v84 + 1;
          v85 = &v81[8 * v84];
          *((_DWORD *)v85 + 8) = v78;
          *((_DWORD *)v85 + 9) = v79;
          *v124 = v81;
          v86 = *(_OWORD *)(v74 + 80);
          v115 = *(_OWORD *)(v74 + 64);
          v116 = v86;
          v117 = *(_OWORD *)(v74 + 96);
          v118 = *(_QWORD *)(v74 + 112);
          v87 = *(_OWORD *)(v74 + 16);
          v111 = *(_OWORD *)v74;
          v112 = v87;
          v88 = *(_OWORD *)(v74 + 48);
          v113 = *(_OWORD *)(v74 + 32);
          v114 = v88;
          v89 = sub_1B210DE54((uint64_t *)&v111, v110, a4, *v75);
          swift_unknownObjectRelease();
          *v75++ = v89;
          ++v73;
          v74 += 120;
          v9 = v107;
        }
        while (v106 != v69);
      }
      v50 = (unint64_t)v98;
      sub_1B2183588(*(_QWORD *)(v109 + 232), *(_QWORD *)(v109 + 240), (uint64_t)v98, v94);
    }
    ecs_stack_allocator_deallocate(v96, v50, 8 * v95);
    return swift_release();
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1E6390060;
  v105 = (void **)sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v6, v5, v7, v9);
  if (!v6)
  {
    v51 = a1[6];
    v103 = a1[7];
    if (v51 != v103)
    {
      v52 = a1[3];
      v100 = *a1;
      v53 = v10 + 120 * v51;
      while (1)
      {
        v119 = v100;
        v120 = v109;
        v121 = v9;
        v122 = v52;
        v123 = v51;
        sub_1B20F2F40((uint64_t)v110);
        v54 = *(_BYTE *)(v109 + 184);
        v55 = swift_retain();
        if ((v54 & 1) != 0)
          break;
        v56 = *(_DWORD *)(*(_QWORD *)(v109 + 168) + 4 * v51);
        v57 = *(_DWORD *)(*(_QWORD *)(v55 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v56 + 8);
        swift_release();
        v58 = v124;
        v59 = *v124;
        v60 = swift_isUniquelyReferenced_nonNull_native();
        *v58 = v59;
        if ((v60 & 1) == 0)
        {
          v59 = sub_1B1C63D98(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
          *v124 = v59;
        }
        v62 = *((_QWORD *)v59 + 2);
        v61 = *((_QWORD *)v59 + 3);
        if (v62 >= v61 >> 1)
          v59 = sub_1B1C63D98(v61 > 1, v62 + 1, 1, v59);
        *((_QWORD *)v59 + 2) = v62 + 1;
        v63 = &v59[8 * v62];
        *((_DWORD *)v63 + 8) = v56;
        *((_DWORD *)v63 + 9) = v57;
        *v124 = v59;
        v64 = *(_OWORD *)(v53 + 80);
        v115 = *(_OWORD *)(v53 + 64);
        v116 = v64;
        v117 = *(_OWORD *)(v53 + 96);
        v118 = *(_QWORD *)(v53 + 112);
        v65 = *(_OWORD *)(v53 + 16);
        v111 = *(_OWORD *)v53;
        v112 = v65;
        v66 = *(_OWORD *)(v53 + 48);
        v113 = *(_OWORD *)(v53 + 32);
        v114 = v66;
        v67 = sub_1B210DE54((uint64_t *)&v111, v110, a4, v105[v51]);
        swift_unknownObjectRelease();
        v105[v51] = v67;
        ++v52;
        v53 += 120;
        ++v51;
        v9 = v107;
        if (v103 == v51)
          return swift_release();
      }
      goto LABEL_43;
    }
    return swift_release();
  }
  if (!v7)
    return swift_release();
  v11 = v7;
  v12 = a1[3];
  v101 = *a1;
  while (1)
  {
    v14 = *v6++;
    v13 = v14;
    v119 = v101;
    v120 = v109;
    v121 = v9;
    v122 = v12;
    v123 = v14;
    sub_1B20F2F40((uint64_t)v110);
    v15 = *(_BYTE *)(v109 + 184);
    v16 = swift_retain();
    if ((v15 & 1) != 0)
      break;
    v17 = *(_DWORD *)(*(_QWORD *)(v109 + 168) + 4 * v13);
    v18 = *(_DWORD *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v17 + 8);
    swift_release();
    v19 = v124;
    v20 = *v124;
    v21 = swift_isUniquelyReferenced_nonNull_native();
    *v19 = v20;
    if ((v21 & 1) == 0)
    {
      v20 = sub_1B1C63D98(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
      *v124 = v20;
    }
    v23 = *((_QWORD *)v20 + 2);
    v22 = *((_QWORD *)v20 + 3);
    if (v23 >= v22 >> 1)
      v20 = sub_1B1C63D98(v22 > 1, v23 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v23 + 1;
    v24 = &v20[8 * v23];
    *((_DWORD *)v24 + 8) = v17;
    *((_DWORD *)v24 + 9) = v18;
    *v124 = v20;
    v25 = *(_OWORD *)(v10 + 80);
    v115 = *(_OWORD *)(v10 + 64);
    v116 = v25;
    v117 = *(_OWORD *)(v10 + 96);
    v118 = *(_QWORD *)(v10 + 112);
    v26 = *(_OWORD *)(v10 + 16);
    v111 = *(_OWORD *)v10;
    v112 = v26;
    v27 = *(_OWORD *)(v10 + 48);
    v113 = *(_OWORD *)(v10 + 32);
    v114 = v27;
    v28 = sub_1B210DE54((uint64_t *)&v111, v110, a4, *v105);
    swift_unknownObjectRelease();
    *v105++ = v28;
    ++v12;
    v10 += 120;
    --v11;
    v9 = v107;
    if (!v11)
      return swift_release();
  }
LABEL_43:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B21A0D4C(uint64_t result, char **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40[10];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = v3;
  v32 = *(_OWORD *)result;
  v33 = *(_OWORD *)(result + 16);
  v34 = *(_QWORD *)(result + 32);
  v26 = *(_QWORD *)(result + 80);
  if (v26 >= 1)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v9 = *(_QWORD *)(result + 64);
    v10 = *(_QWORD **)(result + 72);
    v11 = v10[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v24 = v9;
      v22 = v6;
      sub_1B1D6631C(v6);
      v13 = (uint64_t *)(v7 + 24);
      v23 = v12;
      v25 = a3;
      while (1)
      {
        v28 = v8;
        v14 = *((unsigned int *)v13 - 6);
        v15 = *((unsigned int *)v13 - 5);
        v16 = *((unsigned int *)v13 - 4);
        v30 = *v13;
        v31 = *(v13 - 1);
        v17 = v13[2];
        v29 = v13[1];
        v45 = v4;
        if (v12)
        {
          v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B1A000F0((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v19 = v10[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = (uint64_t)v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        v41 = 1;
        v42 = v31;
        v43 = v30;
        v44 = v29;
        swift_retain();
        v21 = v45;
        sub_1B21A0594(v40, v10, a2, v25);
        v4 = v21;
        if (v21)
          break;
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        v38 = v34;
        sub_1B1F05D48(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B1F03804((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        v12 = v23;
        if ((v23 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B1D66364(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      v36 = v34;
      sub_1B1F05D48(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B1F03804((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if ((v23 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B1D66364(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B21A1064(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v53;

  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  v10 = (unsigned int *)sub_1B1A12038((uint64_t)&type metadata for Skybox, (uint64_t)&off_1E63BD078, v6, v5, v7, v9);
  v11 = sub_1B1A12038((uint64_t)&type metadata for IBLGenerator, (uint64_t)&off_1E6375A98, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for IBLRuntime, &v53);
  if (v53 != 1)
  {
    v44 = v5;
    v15 = v7;
    if (!v6)
      v15 = a1[7] - a1[6];
    v46 = a2[4];
    v16 = ecs_stack_allocator_allocate(v46, 16 * v15, 4);
    if (v15)
    {
      if (v15 < 0x1C)
      {
        v17 = 0;
LABEL_22:
        v24 = v15 - v17;
        v25 = &v16[2 * v17];
        *(_QWORD *)&v26 = 0xFFFFFFFFLL;
        *((_QWORD *)&v26 + 1) = 0xFFFFFFFFLL;
        do
        {
          *v25++ = v26;
          --v24;
        }
        while (v24);
        goto LABEL_24;
      }
      v17 = 0;
      v20 = 2 * (v15 - 1);
      if (&v16[v20] < v16)
        goto LABEL_22;
      if ((char *)&v16[v20] + 4 < (char *)v16 + 4)
        goto LABEL_22;
      if (&v16[v20 + 1] < v16 + 1)
        goto LABEL_22;
      if ((char *)&v16[v20 + 1] + 4 < (char *)v16 + 12)
        goto LABEL_22;
      if ((v15 - 1) >> 60)
        goto LABEL_22;
      v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      v21 = v16 + 8;
      *(_QWORD *)&v22 = 0xFFFFFFFFLL;
      *((_QWORD *)&v22 + 1) = 0xFFFFFFFFLL;
      v23 = v15 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v21 - 2) = v22;
        *(v21 - 1) = v22;
        *(v21 - 4) = v22;
        *(v21 - 3) = v22;
        v21[2] = v22;
        v21[3] = v22;
        *v21 = v22;
        v21[1] = v22;
        v21 += 8;
        v23 -= 8;
      }
      while (v23);
      if (v15 != v17)
        goto LABEL_22;
    }
LABEL_24:
    v47 = 16 * v15;
    v48 = (uint64_t)v16;
    v45 = v15;
    if (v6)
    {
      if (v7)
      {
        v27 = v6;
        v28 = v16;
        v29 = v7;
        while (1)
        {
          v30 = *v27++;
          sub_1B21667F8(v8, v30, v10, v11, v28, a3, a4);
          if (v4)
            break;
          v10 += 8;
          v28 += 2;
          v11 += 4;
          if (!--v29)
            goto LABEL_29;
        }
        v32 = (_QWORD *)v46;
LABEL_33:
        v35 = v32;
        v36 = v48;
LABEL_43:
        ecs_stack_allocator_deallocate(v35, v36, v47);
        return swift_release();
      }
LABEL_29:
      v31 = v48;
      sub_1B2185A00(v6, v44, v7, v48, v45);
      v32 = (_QWORD *)v46;
    }
    else
    {
      v33 = a1[6];
      v34 = a1[7];
      if (v33 != v34)
      {
        v40 = &v10[8 * v33];
        v41 = v16;
        v42 = v11 + 4 * v33;
        v32 = (_QWORD *)v46;
        while (1)
        {
          sub_1B21667F8(v8, v33, v40, v42, v41, a3, a4);
          if (v4)
            goto LABEL_33;
          ++v33;
          v41 += 2;
          v40 += 8;
          v42 += 4;
          if (v34 == v33)
            goto LABEL_41;
        }
      }
      v32 = (_QWORD *)v46;
LABEL_41:
      v31 = v48;
      sub_1B2185B4C(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), v48, v45);
    }
    v35 = v32;
    v36 = v31;
    goto LABEL_43;
  }
  a2[9] = &type metadata for IBLRuntime;
  a2[10] = &off_1E636DEF8;
  v12 = sub_1B1A12038((uint64_t)&type metadata for IBLRuntime, (uint64_t)&off_1E636DEF8, v6, v5, v7, v9);
  v13 = (uint64_t *)v12;
  if (v6)
  {
    for (; v7; --v7)
    {
      v14 = *v6++;
      sub_1B21667F8(v8, v14, v10, v11, v13, a3, a4);
      if (v4)
        break;
      v10 += 8;
      v13 += 2;
      v11 += 4;
    }
  }
  else
  {
    v19 = a1[6];
    v18 = a1[7];
    if (v19 != v18)
    {
      v37 = &v10[8 * v19];
      v38 = (uint64_t *)(v12 + 16 * v19);
      v39 = v11 + 4 * v19;
      do
      {
        sub_1B21667F8(v8, v19, v37, v39, v38, a3, a4);
        if (v4)
          break;
        ++v19;
        v37 += 8;
        v38 += 2;
        v39 += 4;
      }
      while (v18 != v19);
    }
  }
  return swift_release();
}

uint64_t sub_1B21A1438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B219A77C(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B21A1064);
}

uint64_t sub_1B21A1454(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  void **v35;
  uint64_t v36;
  char v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t i;
  void *v50;
  uint64_t v51;
  char v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  __int16 v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  _QWORD v80[3];
  char v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;

  v91 = a4;
  v5 = (uint64_t *)a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  v10 = (void **)sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v5, v6, v7, v9);
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireCPURepresentation, (uint64_t)&off_1E63B6350, v5, v6, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for TextureCPURuntime, v80);
  v70 = v8;
  if (LOBYTE(v80[0]) == 1)
  {
    a2[9] = &type metadata for TextureCPURuntime;
    a2[10] = &off_1E638FF20;
    v11 = sub_1B1A12038((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, v5, v6, v7, v9);
    v12 = v11;
    if (v5)
    {
      if (v7)
      {
        while (1)
        {
          v14 = *v5++;
          v13 = v14;
          v16 = *v10++;
          v15 = v16;
          if (v16)
          {
            v17 = *(_QWORD *)(v8 + 16);
            v18 = *(_BYTE *)(v8 + 184);
            swift_retain();
            if ((v18 & 1) != 0)
              goto LABEL_35;
            v19 = *(_DWORD *)(*(_QWORD *)(v8 + 168) + 4 * v13);
            v20 = *(_DWORD *)(*(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v19 + 8);
            swift_unknownObjectRetain();
            swift_release();
            v21 = swift_allocObject();
            *(_QWORD *)(v21 + 16) = v91;
            *(_DWORD *)(v21 + 24) = v19;
            *(_DWORD *)(v21 + 28) = v20;
            swift_retain();
            sub_1B210A53C(a3, v15, v12, 0, (uint64_t)sub_1B21A2948, v21);
            swift_unknownObjectRelease();
            swift_release();
          }
          v12 += 120;
          if (!--v7)
            return swift_release();
        }
      }
    }
    else
    {
      v42 = v10;
      v44 = a1[6];
      v43 = a1[7];
      if (v44 != v43)
      {
        for (i = v11 + 120 * v44; ; i += 120)
        {
          v50 = v42[v44];
          if (v50)
          {
            v51 = *(_QWORD *)(v8 + 16);
            v52 = *(_BYTE *)(v8 + 184);
            swift_retain();
            if ((v52 & 1) != 0)
              goto LABEL_35;
            v53 = *(_DWORD *)(*(_QWORD *)(v8 + 168) + 4 * v44);
            v54 = *(_DWORD *)(*(_QWORD *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v53 + 8);
            swift_unknownObjectRetain();
            swift_release();
            v55 = swift_allocObject();
            *(_QWORD *)(v55 + 16) = v91;
            *(_DWORD *)(v55 + 24) = v53;
            *(_DWORD *)(v55 + 28) = v54;
            swift_retain();
            sub_1B210A53C(a3, v50, i, 0, (uint64_t)sub_1B21A2948, v55);
            swift_unknownObjectRelease();
            swift_release();
          }
          if (v43 == ++v44)
            return swift_release();
        }
      }
    }
    return swift_release();
  }
  v69 = v6;
  v22 = v7;
  if (!v5)
    v22 = a1[7] - a1[6];
  RGTextureDescriptor.init()((uint64_t)&v72);
  memset(v80, 0, sizeof(v80));
  v81 = 0;
  v82 = v72;
  v83 = v73;
  v84 = v74;
  v85 = v75;
  v86 = v76;
  v87 = v77;
  v88 = v78;
  v89 = v79;
  v90 = MEMORY[0x1E0DEE9D8];
  v65 = (_QWORD *)a2[4];
  v23 = sub_1B2199950(v22, (uint64_t)v80, (uint64_t)v65);
  v66 = v24;
  v67 = (uint64_t)v23;
  v64 = v25;
  swift_bridgeObjectRelease();
  if (v5)
  {
    v26 = v6;
    v63 = v7;
    if (v7)
    {
      v27 = v5;
      v28 = v67;
      for (j = v63; j; --j)
      {
        v31 = *v27++;
        v30 = v31;
        v33 = *v10++;
        v32 = v33;
        if (v33)
        {
          v34 = v5;
          v35 = v10;
          v36 = *(_QWORD *)(v70 + 16);
          v37 = *(_BYTE *)(v70 + 184);
          swift_retain();
          if ((v37 & 1) != 0)
            goto LABEL_35;
          v38 = *(_DWORD *)(*(_QWORD *)(v70 + 168) + 4 * v30);
          v39 = *(_DWORD *)(*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v38 + 8);
          swift_unknownObjectRetain();
          swift_release();
          v40 = swift_allocObject();
          *(_QWORD *)(v40 + 16) = v91;
          *(_DWORD *)(v40 + 24) = v38;
          *(_DWORD *)(v40 + 28) = v39;
          swift_retain();
          sub_1B210A53C(a3, v32, v28, 0, (uint64_t)sub_1B21A2948, v40);
          swift_unknownObjectRelease();
          swift_release();
          v10 = v35;
          v5 = v34;
          v26 = v69;
        }
        v28 += 120;
      }
    }
    v41 = v67;
    sub_1B2184C70(v5, v26, v63, v67, v66);
    goto LABEL_23;
  }
  v45 = v10;
  v47 = a1[6];
  v46 = a1[7];
  if (v47 == v46)
  {
LABEL_22:
    v41 = v67;
    sub_1B2184DC0(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), v67, v66);
LABEL_23:
    ecs_stack_allocator_deallocate(v65, v41, 120 * v64);
    return swift_release();
  }
  v56 = v67;
  while (1)
  {
    v57 = v45[v47];
    if (v57)
      break;
LABEL_31:
    ++v47;
    v56 += 120;
    if (v46 == v47)
      goto LABEL_22;
  }
  v58 = *(_QWORD *)(v8 + 16);
  v59 = *(_BYTE *)(v8 + 184);
  swift_retain();
  if ((v59 & 1) == 0)
  {
    v60 = *(_DWORD *)(*(_QWORD *)(v8 + 168) + 4 * v47);
    v61 = *(_DWORD *)(*(_QWORD *)(v58 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v60 + 8);
    swift_unknownObjectRetain();
    swift_release();
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = v91;
    *(_DWORD *)(v62 + 24) = v60;
    *(_DWORD *)(v62 + 28) = v61;
    swift_retain();
    sub_1B210A53C(a3, v57, v56, 0, (uint64_t)sub_1B21A28F8, v62);
    swift_unknownObjectRelease();
    swift_release();
    goto LABEL_31;
  }
LABEL_35:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B21A1A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B219A77C(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B21A1454);
}

uint64_t sub_1B21A1A24(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  uint64_t v37;
  float32x4_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v8 = (uint64_t *)a1[11];
  v7 = a1[12];
  v9 = a1[13];
  v10 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, v8, v7, v9, v10);
  v37 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v8, v7, v9, v10);
  result = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v8, v7, v9, v10);
  if (v8)
  {
    if (v9)
    {
      v12 = (float32x4_t *)(v37 + 32);
      do
      {
        v15 = v12[-2];
        v14 = v12[-1];
        v16 = vmulq_f32(v15, v15);
        v17 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]);
        v18 = vmulq_f32(v14, v14);
        v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        if (v19 >= v17)
        {
          if ((LODWORD(v19) & 0x7FFFFF) == 0)
            v17 = v19;
          if ((~LODWORD(v19) & 0x7F800000) != 0)
            v17 = v19;
        }
        v20 = *v12;
        v21 = vmulq_f32(v20, v20);
        v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
        if (v22 >= v17)
        {
          if ((LODWORD(v22) & 0x7FFFFF) == 0)
            v17 = v22;
          if ((~LODWORD(v22) & 0x7F800000) != 0)
            v17 = v22;
        }
        v13 = vaddq_f32(v12[1], vmlaq_f32(vmlaq_f32(vmulq_f32(v15, (float32x4_t)0), (float32x4_t)0, v14), (float32x4_t)0, v20));
        v13.f32[3] = v17 * 0.5;
        v39 = v13;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 3;
        result = sub_1B217F570(a3, 0x100000000uLL, a2, (__int128 *)&v39, a4);
        v12 += 4;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v23 = a1[6];
    v24 = a1[7];
    v25 = v24 - v23;
    if (v24 != v23)
    {
      v26 = v37 + (v23 << 6) + 32;
      do
      {
        v29 = *(float32x4_t *)(v26 - 32);
        v28 = *(float32x4_t *)(v26 - 16);
        v30 = vmulq_f32(v29, v29);
        v31 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
        v32 = vmulq_f32(v28, v28);
        v33 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]);
        if (v33 >= v31)
        {
          if ((LODWORD(v33) & 0x7FFFFF) == 0)
            v31 = v33;
          if ((~LODWORD(v33) & 0x7F800000) != 0)
            v31 = v33;
        }
        v34 = *(float32x4_t *)v26;
        v35 = vmulq_f32(v34, v34);
        v36 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]);
        if (v36 >= v31)
        {
          if ((LODWORD(v36) & 0x7FFFFF) == 0)
            v31 = v36;
          if ((~LODWORD(v36) & 0x7F800000) != 0)
            v31 = v36;
        }
        v27 = vaddq_f32(*(float32x4_t *)(v26 + 16), vmlaq_f32(vmlaq_f32(vmulq_f32(v29, (float32x4_t)0), (float32x4_t)0, v28), (float32x4_t)0, v34));
        v27.f32[3] = v31 * 0.5;
        v39 = v27;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 3;
        result = sub_1B217F570(a3, 0x100000000uLL, a2, (__int128 *)&v39, a4);
        v26 += 64;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t sub_1B21A1D48(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;

  v8 = (uint64_t *)a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v26 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, v8, v9, v10, v26);
  v25 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v8, v9, v10, v26);
  result = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v8, v9, v10, v26);
  if (v8)
  {
    if (v10)
    {
      v27 = xmmword_1B2244E20;
      v28 = xmmword_1B227E550;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 6;
      v12 = (__n128 *)(v25 + 32);
      do
      {
        v13 = v12[-2];
        v14 = v12[-1];
        v15 = *v12;
        v16 = v12[1];
        v34 = 1;
        result = sub_1B217F2CC(a3, 0x100000000uLL, a2, &v27, a4, v13, v14, v15, v16);
        v12 += 4;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v17 = a1[6];
    v18 = a1[7];
    v19 = v18 - v17;
    if (v18 != v17)
    {
      v27 = xmmword_1B2244E20;
      v28 = xmmword_1B227E550;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 6;
      v20 = (__n128 *)(v25 + (v17 << 6) + 32);
      do
      {
        v21 = v20[-2];
        v22 = v20[-1];
        v23 = *v20;
        v24 = v20[1];
        v20 += 4;
        v34 = 1;
        result = sub_1B217F2CC(a3, 0x100000000uLL, a2, &v27, a4, v21, v22, v23, v24);
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_1B21A1F14(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int64x2_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  char v35;

  v8 = (uint64_t *)a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v26 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1E63AE088, v8, v9, v10, v26);
  v25 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v8, v9, v10, v26);
  result = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v8, v9, v10, v26);
  if (v8)
  {
    if (v10)
    {
      v27 = xmmword_1B22AD370;
      v28 = vdupq_n_s64(0x3F00000000000000uLL);
      v29 = 4;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0;
      v34 = 7;
      v12 = (__n128 *)(v25 + 32);
      do
      {
        v13 = v12[-2];
        v14 = v12[-1];
        v15 = *v12;
        v16 = v12[1];
        v35 = 1;
        result = sub_1B217F2CC(a3, 0x100000000uLL, a2, &v27, a4, v13, v14, v15, v16);
        v12 += 4;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v17 = a1[6];
    v18 = a1[7];
    v19 = v18 - v17;
    if (v18 != v17)
    {
      v27 = xmmword_1B22AD370;
      v28 = vdupq_n_s64(0x3F00000000000000uLL);
      v29 = 4;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0;
      v34 = 7;
      v20 = (__n128 *)(v25 + (v17 << 6) + 32);
      do
      {
        v21 = v20[-2];
        v22 = v20[-1];
        v23 = *v20;
        v24 = v20[1];
        v20 += 4;
        v35 = 1;
        result = sub_1B217F2CC(a3, 0x100000000uLL, a2, &v27, a4, v21, v22, v23, v24);
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_1B21A2100(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *i;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[64];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;

  v39 = a4 & 1;
  v5 = (uint64_t *)a1[11];
  v6 = a1[13];
  v7 = a1[1];
  v38 = a1[2];
  result = sub_1B1A12038((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1E638AD98, v5, a1[12], v6, v38);
  v9 = (_QWORD *)result;
  if (v5)
  {
    if (v6)
    {
      v10 = (uint64_t *)a1[3];
      v35 = *a1;
      while (1)
      {
        v41 = v6;
        v11 = *v5;
        v49 = v5 + 1;
        v44 = v35;
        v45 = v7;
        v46 = v38;
        v47 = v10;
        v48 = v11;
        sub_1B20F2F40((uint64_t)v43);
        v12 = *(_BYTE *)(v7 + 184);
        v13 = swift_retain();
        if ((v12 & 1) != 0)
          break;
        v14 = *(unsigned int *)(*(_QWORD *)(v7 + 168) + 4 * v11);
        v15 = v7;
        v16 = *(unsigned int *)(*(_QWORD *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v14 + 8);
        swift_release();
        swift_retain();
        sub_1B1FF2E00(v14 | (v16 << 32), a2, v9, (uint64_t)v43, a3, v39, a2);
        swift_release();
        v17 = *(_BYTE *)(v15 + 184);
        v18 = swift_retain();
        if ((v17 & 1) != 0)
          break;
        v19 = *(unsigned int *)(*(_QWORD *)(v15 + 168) + 4 * v11);
        v20 = *(unsigned int *)(*(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v19 + 8);
        swift_release();
        swift_retain();
        sub_1B1FF26F0(v19 | (v20 << 32), a2, v9, (uint64_t)v43, a3, v39, a2);
        result = swift_release();
        v10 = (uint64_t *)((char *)v10 + 1);
        v9 += 6;
        --v6;
        v7 = v15;
        v5 = v49;
        if (v41 == 1)
          return result;
      }
LABEL_14:
      result = sub_1B2229688();
      __break(1u);
    }
  }
  else
  {
    v21 = a1[6];
    v42 = a1[7];
    if (v21 != v42)
    {
      v22 = (uint64_t *)a1[3];
      v36 = *a1;
      for (i = (_QWORD *)(result + 48 * v21); ; i += 6)
      {
        v44 = v36;
        v45 = v7;
        v46 = v38;
        v47 = v22;
        v49 = v22;
        v48 = v21;
        sub_1B20F2F40((uint64_t)v43);
        v24 = *(_BYTE *)(v7 + 184);
        v25 = swift_retain();
        if ((v24 & 1) != 0)
          break;
        v26 = v7;
        v27 = *(unsigned int *)(*(_QWORD *)(v7 + 168) + 4 * v21);
        v28 = *(unsigned int *)(*(_QWORD *)(v25 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v27 + 8);
        swift_release();
        swift_retain();
        sub_1B1FF2E00(v27 | (v28 << 32), a2, i, (uint64_t)v43, a3, v39, a2);
        swift_release();
        v29 = *(_BYTE *)(v26 + 184);
        v30 = swift_retain();
        if ((v29 & 1) != 0)
          break;
        v31 = *(unsigned int *)(*(_QWORD *)(v26 + 168) + 4 * v21);
        v32 = v21 + 1;
        v33 = *(unsigned int *)(*(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v31 + 8);
        swift_release();
        v34 = v31 | (v33 << 32);
        v7 = v26;
        swift_retain();
        sub_1B1FF26F0(v34, a2, i, (uint64_t)v43, a3, v39, a2);
        result = swift_release();
        v22 = (uint64_t *)((char *)v49 + 1);
        v21 = v32;
        if (v42 == v32)
          return result;
      }
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_1B21A249C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  _BYTE v43[64];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v42 = a1[2];
  v49 = a1[1];
  result = sub_1B1A12038((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1E638AD98, v6, v5, v7, v42);
  v9 = (_QWORD *)result;
  if (v6)
  {
    if (v7)
    {
      v10 = a1[3];
      v39 = *a1;
      v11 = v49;
      while (1)
      {
        v12 = v3;
        v14 = *v6++;
        v13 = v14;
        v44 = v39;
        v45 = v11;
        v46 = v42;
        v47 = v10;
        v48 = v14;
        sub_1B20F2F40((uint64_t)v43);
        v15 = *(_BYTE *)(v11 + 184);
        v16 = swift_retain();
        if ((v15 & 1) != 0)
          break;
        v17 = *(unsigned int *)(*(_QWORD *)(v11 + 168) + 4 * v13);
        v18 = *(unsigned int *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v17 + 8);
        swift_release();
        v11 = v49;
        swift_retain();
        sub_1B1FF2F28(v17 | (v18 << 32), a2, v9, (uint64_t)v43, a2);
        swift_release();
        v19 = *(_BYTE *)(v11 + 184);
        v20 = swift_retain();
        if ((v19 & 1) != 0)
          break;
        v21 = *(unsigned int *)(*(_QWORD *)(v11 + 168) + 4 * v13);
        v22 = *(unsigned int *)(*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v21 + 8);
        swift_release();
        swift_retain();
        sub_1B1FF2818(v21 | (v22 << 32), a2, v9, (uint64_t)v43, a2);
        v3 = v12;
        result = swift_release();
        ++v10;
        v9 += 6;
        if (!--v7)
          return result;
      }
LABEL_14:
      result = sub_1B2229688();
      __break(1u);
    }
  }
  else
  {
    v23 = a1[6];
    v38 = a1[7];
    if (v23 != v38)
    {
      v24 = a1[3];
      v37 = *a1;
      v25 = (_QWORD *)(result + 48 * v23);
      v26 = v49;
      while (1)
      {
        v27 = v3;
        v44 = v37;
        v45 = v26;
        v46 = v42;
        v47 = v24;
        v40 = v24;
        v48 = v23;
        sub_1B20F2F40((uint64_t)v43);
        v28 = *(_BYTE *)(v26 + 184);
        v29 = swift_retain();
        if ((v28 & 1) != 0)
          break;
        v30 = *(unsigned int *)(*(_QWORD *)(v26 + 168) + 4 * v23);
        v31 = *(unsigned int *)(*(_QWORD *)(v29 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v30 + 8);
        swift_release();
        v26 = v49;
        swift_retain();
        sub_1B1FF2F28(v30 | (v31 << 32), a2, v25, (uint64_t)v43, a2);
        swift_release();
        v32 = *(_BYTE *)(v26 + 184);
        v33 = swift_retain();
        if ((v32 & 1) != 0)
          break;
        v34 = *(unsigned int *)(*(_QWORD *)(v26 + 168) + 4 * v23);
        v35 = v23 + 1;
        v36 = *(unsigned int *)(*(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v34 + 8);
        swift_release();
        swift_retain();
        sub_1B1FF2818(v34 | (v36 << 32), a2, v25, (uint64_t)v43, a2);
        v3 = v27;
        result = swift_release();
        v24 = v40 + 1;
        v25 += 6;
        v23 = v35;
        if (v38 == v35)
          return result;
      }
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_1B21A27DC(_QWORD *a1, uint64_t a2, char **a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v7 = (uint64_t *)a1[11];
  v8 = a1[13];
  v9 = a1[1];
  v10 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v7, a1[12], v8, a1[2]);
  v11 = (void **)v10;
  if (v7)
  {
    for (; v8; --v8)
    {
      v12 = *v7++;
      sub_1B2113CFC(v9, v12, v11, a2, a3);
      if (v3)
        break;
      ++v11;
    }
  }
  else
  {
    v13 = a1[6];
    v14 = a1[7];
    if (v13 != v14)
    {
      v15 = (void **)(v10 + 8 * v13);
      do
      {
        sub_1B2113CFC(v9, v13, v15, a2, a3);
        if (v3)
          break;
        ++v13;
        ++v15;
      }
      while (v14 != v13);
    }
  }
  return swift_release();
}

uint64_t sub_1B21A28D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B21A28F8()
{
  uint64_t v0;

  return sub_1B21075A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for QueryResult1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryResult1);
}

void type metadata accessor for QueryResult2()
{
  JUMPOUT(0x1B5E23DD8);
}

void type metadata accessor for QueryResult3()
{
  JUMPOUT(0x1B5E23DD8);
}

void type metadata accessor for QueryResult4()
{
  JUMPOUT(0x1B5E23DD8);
}

_OWORD *vfx_script_particle_set_position(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _OWORD *result;
  __n128 v8;
  int v9;
  uint64_t v11[3];

  v3 = *a1;
  v4 = a1[2];
  v5 = sub_1B1E56F5C(a2);
  if (v6 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, v11, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (_OWORD *)swift_release();
  }
  else
  {
    result = (_OWORD *)sub_1B2031B58(v3, v5 | ((HIDWORD(v5) & 1) << 32), v6, v4);
    if (result)
    {
      v8 = a3;
      v8.n128_u32[3] = 1.0;
      *result = v8;
    }
  }
  return result;
}

double vfx_script_particle_get_position(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_position(_:_:)(a1, a2);
}

double vfx_script_particle_get_position(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2031B58);
}

float *vfx_script_particle_set_mass(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  float *result;
  float v9;
  int v10;
  uint64_t v11[3];

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1B1E56F5C(a2);
  if (v7 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v10, v11, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (float *)swift_release();
  }
  else
  {
    result = (float *)sub_1B20330F8(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (result)
    {
      v9 = 1.0 / a3;
      if (a3 <= 0.001)
        v9 = 1000.0;
      *result = v9;
    }
  }
  return result;
}

float vfx_script_particle_get_mass(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  float *v6;
  int v8;
  uint64_t v9[3];

  v2 = *a1;
  v3 = a1[2];
  v4 = sub_1B1E56F5C(a2);
  if (v5 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v8 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v9[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v8, v9, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    swift_release();
  }
  else
  {
    v6 = (float *)sub_1B20330F8(v2, v4 | ((HIDWORD(v4) & 1) << 32), v5, v3);
    if (v6)
      return 1.0 / *v6;
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_color(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033148, a3);
}

double vfx_script_particle_get_color(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033148);
}

_OWORD *vfx_script_particle_set_velocity(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _OWORD *result;
  __n128 v8;
  int v9;
  uint64_t v11[3];

  v3 = *a1;
  v4 = a1[2];
  v5 = sub_1B1E56F5C(a2);
  if (v6 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, v11, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (_OWORD *)swift_release();
  }
  else
  {
    result = (_OWORD *)sub_1B2033198(v3, v5 | ((HIDWORD(v5) & 1) << 32), v6, v4);
    if (result)
    {
      v8 = a3;
      v8.n128_u32[3] = 0;
      *result = v8;
    }
  }
  return result;
}

double vfx_script_particle_get_velocity(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_velocity(_:_:)(a1, a2);
}

double vfx_script_particle_get_velocity(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033198);
}

double sub_1B21A2EA0(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  int v10;
  uint64_t v12[3];

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1B1E56F5C(a2);
  if ((_DWORD)v7 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v12[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v10, v12, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    swift_release();
    goto LABEL_9;
  }
  v8 = (__int128 *)a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
  if (!v8)
  {
LABEL_9:
    *(_QWORD *)&v9 = 0;
    return *(double *)&v9;
  }
  v9 = *v8;
  return *(double *)&v9;
}

__n128 *vfx_script_particle_set_size(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20331E8, a3);
}

double vfx_script_particle_get_size(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_size(_:_:)(a1, a2);
}

double vfx_script_particle_get_size(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20331E8);
}

__n128 *vfx_script_particle_set_size3d(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033238, a3);
}

double vfx_script_particle_get_size3d(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_size3d(_:_:)(a1, a2);
}

double vfx_script_particle_get_size3d(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033238);
}

float *vfx_script_particle_set_size1d(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033288, a3);
}

float vfx_script_particle_get_size1d(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033288);
}

double *vfx_script_particle_set_size2d(_:_:_:)(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  double *result;
  int v9;
  uint64_t v10[3];

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1B1E56F5C(a2);
  if (v7 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v10[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, v10, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (double *)swift_release();
  }
  else
  {
    result = (double *)sub_1B20332D8(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (result)
      *result = a3;
  }
  return result;
}

double vfx_script_particle_get_size2d(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v8;
  uint64_t v9[3];

  v2 = *a1;
  v3 = a1[2];
  v4 = sub_1B1E56F5C(a2);
  if (v5 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v8 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v9[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v8, v9, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    swift_release();
  }
  else
  {
    v6 = sub_1B20332D8(v2, v4 | ((HIDWORD(v4) & 1) << 32), v5, v3);
    if (v6)
      return *(double *)v6;
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_angular_velocity(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033328, a3);
}

double vfx_script_particle_get_angular_velocity(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033328);
}

__n128 *vfx_script_particle_set_orientation(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033378, a3);
}

double vfx_script_particle_get_orientation(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033378);
}

float *vfx_script_particle_set_angle(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20333C8, a3);
}

float vfx_script_particle_get_angle(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20333C8);
}

float *vfx_script_particle_set_angle_velocity(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033418, a3);
}

float vfx_script_particle_get_angle_velocity(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033418);
}

_DWORD *vfx_script_particle_set_id(_:_:_:)(uint64_t *a1, uint64_t a2, int a3)
{
  return sub_1B21A3350(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033468);
}

unsigned int *vfx_script_particle_get_id(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3488(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033468);
}

_DWORD *vfx_script_particle_set_parent_id(_:_:_:)(uint64_t *a1, uint64_t a2, int a3)
{
  return sub_1B21A3350(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20334B8);
}

_DWORD *sub_1B21A3350(uint64_t *a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *result;
  int v11;
  uint64_t v12[3];

  v6 = *a1;
  v7 = a1[2];
  v8 = sub_1B1E56F5C(a2);
  if ((_DWORD)v9 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v11 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v12[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v11, v12, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (_DWORD *)swift_release();
  }
  else
  {
    result = (_DWORD *)a4(v6, v8 | ((HIDWORD(v8) & 1) << 32), v9, v7);
    if (result)
      *result = a3;
  }
  return result;
}

unsigned int *vfx_script_particle_get_parent_id(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3488(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20334B8);
}

unsigned int *sub_1B21A3488(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *result;
  int v9;
  uint64_t v10[3];

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1B1E56F5C(a2);
  if ((_DWORD)v7 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v10[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, v10, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    swift_release();
    return 0;
  }
  else
  {
    result = (unsigned int *)a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (result)
      return (unsigned int *)*result;
  }
  return result;
}

float *vfx_script_particle_set_texture_frame(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033508, a3);
}

float vfx_script_particle_get_texture_frame(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033508);
}

uint64_t vfx_script_particle_set_pivot(_:_:_:)(uint64_t *a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t result;
  _DWORD *v8;
  float32x4_t v9;
  int v10;
  uint64_t v12[3];

  v3 = *a1;
  v4 = a1[2];
  v5 = sub_1B1E56F5C(a2);
  if (v6 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v12[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v10, v12, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return swift_release();
  }
  else
  {
    result = sub_1B2033558(v3, v5 | ((HIDWORD(v5) & 1) << 32), v6, v4);
    if (result)
    {
      v8 = (_DWORD *)result;
      v9 = a3;
      v9.i32[3] = 1.0;
      result = sub_1B1AE40EC(v9);
      *v8 = result;
    }
  }
  return result;
}

double vfx_script_particle_get_pivot(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_pivot(_:_:)(a1, a2);
}

double vfx_script_particle_get_pivot(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  int v8;
  uint64_t v9[3];

  v2 = *a1;
  v3 = a1[2];
  v4 = sub_1B1E56F5C(a2);
  if (v5 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v8 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v9[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v8, v9, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    swift_release();
  }
  else
  {
    v6 = (unsigned int *)sub_1B2033558(v2, v4 | ((HIDWORD(v4) & 1) << 32), v5, v3);
    if (v6)
      return sub_1B1AE4138(*v6);
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_linear_factor(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20335A8, a3);
}

double vfx_script_particle_get_linear_factor(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_linear_factor(_:_:)(a1, a2);
}

double vfx_script_particle_get_linear_factor(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20335A8);
}

__n128 *vfx_script_particle_set_angular_factor(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20335F8, a3);
}

double vfx_script_particle_get_angular_factor(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_angular_factor(_:_:)(a1, a2);
}

double vfx_script_particle_get_angular_factor(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20335F8);
}

float *vfx_script_particle_set_age(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033648, a3);
}

float vfx_script_particle_get_age(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033648);
}

__n128 *vfx_script_particle_set_target(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033698, a3);
}

double vfx_script_particle_get_target(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_target(_:_:)(a1, a2);
}

double vfx_script_particle_get_target(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033698);
}

float *vfx_script_particle_set_roughness(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20336E8, a3);
}

float vfx_script_particle_get_roughness(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20336E8);
}

float *vfx_script_particle_set_metalness(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033738, a3);
}

float vfx_script_particle_get_metalness(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033738);
}

float *vfx_script_particle_set_emission(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B21A3948(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033788, a3);
}

float *sub_1B21A3948(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t), float a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float *result;
  int v11;
  uint64_t v12[3];

  v6 = *a1;
  v7 = a1[2];
  v8 = sub_1B1E56F5C(a2);
  if ((_DWORD)v9 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v11 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v12[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v11, v12, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (float *)swift_release();
  }
  else
  {
    result = (float *)a3(v6, v8 | ((HIDWORD(v8) & 1) << 32), v9, v7);
    if (result)
      *result = a4;
  }
  return result;
}

float vfx_script_particle_get_emission(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A3A88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033788);
}

float sub_1B21A3A88(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11[3];

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1B1E56F5C(a2);
  if ((_DWORD)v7 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v10, v11, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    swift_release();
  }
  else
  {
    v8 = a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (v8)
      return *(float *)v8;
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_user_data1(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20337D8, a3);
}

double vfx_script_particle_get_user_data1(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20337D8);
}

__n128 *vfx_script_particle_set_user_data2(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033828, a3);
}

double vfx_script_particle_get_user_data2(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033828);
}

__n128 *vfx_script_particle_set_user_data3(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033878, a3);
}

double vfx_script_particle_get_user_data3(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B2033878);
}

__n128 *vfx_script_particle_set_user_data4(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B21A3C20(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20338C8, a3);
}

__n128 *sub_1B21A3C20(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t), __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *result;
  int v10;
  uint64_t v12[3];

  v5 = *a1;
  v6 = a1[2];
  v7 = sub_1B1E56F5C(a2);
  if ((_DWORD)v8 == -1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v12[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v10, v12, 0xD000000000000021, 0x80000001B2348120);
    swift_release();
    return (__n128 *)swift_release();
  }
  else
  {
    result = (__n128 *)a3(v5, v7 | ((HIDWORD(v7) & 1) << 32), v8, v6);
    if (result)
      *result = a4;
  }
  return result;
}

double vfx_script_particle_get_user_data4(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B21A2EA0(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B20338C8);
}

uint64_t sub_1B21A3D5C(float a1, float a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  return sub_1B21A4410(v6, a1, a2, a3);
}

_QWORD *sub_1B21A3DAC(_QWORD *result)
{
  if (result)
  {
    sub_1B21A3F6C(result);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

float sub_1B21A3DFC(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 24) = result;
  return result;
}

float sub_1B21A3E14(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 28) = result;
  return result;
}

float sub_1B21A3E2C(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 32) = result;
  return result;
}

float sub_1B21A3E44(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 36) = result;
  return result;
}

float sub_1B21A3E5C(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 40) = result;
  return result;
}

float sub_1B21A3E74(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 44) = result;
  return result;
}

float sub_1B21A3E8C(uint64_t a1, float a2)
{
  float result;

  result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 48) = result;
  return result;
}

float sub_1B21A3EB4(float32x4_t *a1, int a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;

  if (a2)
  {
    v3 = a1[7];
    v4 = vsubq_f32(a3, a1[4]);
    v5 = vmulq_f32(v3, (float32x4_t)xmmword_1B2244F80);
    v6 = (int32x4_t)vnegq_f32(v5);
    v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v6));
    v8 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v7, v7, 8uLL), v4.f32[0]);
    v9 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
    v9.i32[0] = v6.i32[1];
    v9.i32[3] = v6.i32[2];
    v10 = vmlaq_laneq_f32(v8, v9, v4, 2);
    v11 = (int32x4_t)vnegq_f32(v10);
    v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v11));
    v13 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
    v13.i32[0] = v11.i32[1];
    v13.i32[3] = v11.i32[2];
    a3 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v3, 3), v13, v3, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)v3.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v3.f32[0]));
  }
  return fmaxf(fmaxf(fabsf(a3.f32[0]) + (float)(a1[8].f32[0] * -0.5), 0.0), fmaxf(fmaxf(fabsf(a3.f32[1]) + (float)(a1[8].f32[1] * -0.5), 0.0), fabsf(a3.f32[2])));
}

_QWORD *sub_1B21A3F6C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t i;
  void *v11;
  uint64_t j;
  void *v13;
  uint64_t k;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v2 = (void *)a1[104];
  if (v2)
  {
    a1[105] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[101];
  if (v3)
  {
    a1[102] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[98];
  if (v4)
  {
    a1[99] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[95];
  if (v5)
  {
    a1[96] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[92];
  if (v6)
  {
    a1[93] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[88];
  if (v7)
  {
    a1[89] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[85];
  if (v8)
  {
    a1[86] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[82];
  if (v9)
  {
    a1[83] = v9;
    operator delete(v9);
  }
  for (i = 0; i != -12; i -= 3)
  {
    v11 = (void *)a1[i + 79];
    if (v11)
    {
      a1[i + 80] = v11;
      operator delete(v11);
    }
  }
  for (j = 0; j != -12; j -= 3)
  {
    v13 = (void *)a1[j + 67];
    if (v13)
    {
      a1[j + 68] = v13;
      operator delete(v13);
    }
  }
  for (k = 0; k != -12; k -= 3)
  {
    v15 = (void *)a1[k + 55];
    if (v15)
    {
      a1[k + 56] = v15;
      operator delete(v15);
    }
  }
  v16 = (void *)a1[25];
  if (v16)
  {
    a1[26] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[22];
  if (v17)
  {
    a1[23] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[19];
  if (v18)
  {
    a1[20] = v18;
    operator delete(v18);
  }
  return a1;
}

double sub_1B21A40A8(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_1B21A44C8((float32x4_t *)a1, (float32x4_t)xmmword_1B22C9E00);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 2;
  *(_BYTE *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 280) = -1082130432;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 3;
  *(_BYTE *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 304) = 2;
  *(_DWORD *)(a1 + 312) = -1082130432;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 336) = 3;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1;
  *(_BYTE *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  result = 0.000000789642512;
  *(_QWORD *)(a1 + 44) = 0x3EAA7EFA3F400000;
  *(_WORD *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 730) = 0;
  return result;
}

void sub_1B21A4188(uint64_t a1, float a2, float a3, float a4)
{
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;

  *(float *)(a1 + 224) = a2;
  *(float *)(a1 + 228) = a3;
  *(float *)(a1 + 232) = a4;
  v5 = fmaxf(a4, 1.0e-12);
  v6 = llroundf((float)(1.0 / v5) * a2);
  *(float *)(a1 + 144) = v5;
  *(float *)(a1 + 148) = 1.0 / v5;
  if (v6 >= 1024)
    v6 = 1024;
  if (v6 <= 8)
    LOWORD(v6) = 8;
  v7 = v6 & 0x7FC;
  v8 = llroundf((float)(1.0 / v5) * a3);
  if (v8 >= 1024)
    v9 = 1024;
  else
    v9 = v8;
  if (v9 <= 8)
    v9 = 8;
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v9;
  v10 = v5 * (float)v7;
  v11 = v5 * (float)v9;
  *(float *)(a1 + 128) = v10;
  *(float *)(a1 + 132) = v11;
  if (v10 < v11)
    v10 = v5 * (float)v9;
  *(float *)(a1 + 136) = v10;
  *(float *)(a1 + 140) = 1.0 / v10;
  *(_DWORD *)(a1 + 8) = v7 | 2;
  *(_DWORD *)(a1 + 12) = v9 + 2;
  v12 = (v7 | 2u) * (v9 + 2);
  *(_DWORD *)(a1 + 16) = v12;
  if (v7 <= v9)
    v7 = v9;
  *(float *)(a1 + 20) = (float)v7;
  v13 = (uint64_t *)(a1 + 152);
  sub_1B17F8160(a1 + 152, v12);
  sub_1B17F8160(a1 + 176, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 200, *(int *)(a1 + 16));
  sub_1B21A4610(a1 + 368, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  sub_1B21A4610(a1 + 464, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  sub_1B21A4610(a1 + 560, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  sub_1B17F8160(a1 + 656, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 680, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 704, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 736, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 760, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 784, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 808, *(int *)(a1 + 16));
  sub_1B17F8160(a1 + 832, *(int *)(a1 + 16));
  sub_1B21A4668(a1);
  v14 = *(unsigned int *)(a1 + 16);
  if ((int)v14 >= 1)
  {
    v15 = 4 * v14;
    bzero(*(void **)(a1 + 200), 4 * v14);
    bzero(*(void **)(a1 + 784), v15);
  }
  sub_1B21A473C((int *)a1, v13, a1 + 368);
  sub_1B21A473C((int *)a1, (uint64_t *)(a1 + 176), a1 + 464);
  sub_1B21A473C((int *)a1, (uint64_t *)(a1 + 200), a1 + 560);
  v16 = *(unsigned int *)(a1 + 16);
  if ((int)v16 < 1)
  {
    *(_WORD *)(a1 + 728) = 257;
    *(_BYTE *)(a1 + 730) = 1;
  }
  else
  {
    v17 = 4 * v16;
    bzero(*(void **)(a1 + 656), 4 * v16);
    bzero(*(void **)(a1 + 680), v17);
    bzero(*(void **)(a1 + 704), v17);
    *(_WORD *)(a1 + 728) = 257;
    *(_BYTE *)(a1 + 730) = 1;
    bzero(*(void **)(a1 + 808), v17);
    bzero(*(void **)(a1 + 832), v17);
  }
}

uint64_t sub_1B21A4410(uint64_t a1, float a2, float a3, float a4)
{
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  sub_1B21A40A8(a1);
  sub_1B21A4188(a1, a2, a3, a4);
  return a1;
}

__n128 *sub_1B21A44C0(__n128 *result, __n128 a2)
{
  result[4] = a2;
  return result;
}

float32x4_t *sub_1B21A44C8(float32x4_t *result, float32x4_t a2)
{
  int8x16_t v2;
  float32x2_t v3;
  float v4;
  unsigned __int32 v5;
  float32x2_t v6;
  float32x2_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;

  v2 = (int8x16_t)vmulq_f32(a2, a2);
  v3 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v4 = vaddv_f32(v3);
  if (sqrtf(v4) != 1.0)
  {
    if (v4 == 0.0)
    {
      a2 = (float32x4_t)xmmword_1B2244E20;
    }
    else
    {
      v5 = vadd_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1)).u32[0];
      v6 = vrsqrte_f32((float32x2_t)v5);
      v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
      a2 = vmulq_n_f32(a2, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
    }
  }
  v8 = (int8x16_t)vmulq_f32(a2, a2);
  *(float32x2_t *)v8.i8 = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v9 = vmulq_f32(a2, (float32x4_t)xmmword_1B2244F80);
  v8.i32[0] = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  v10 = vrecpe_f32((float32x2_t)v8.u32[0]);
  v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10));
  result[7] = vmulq_n_f32(v9, vmul_f32(v11, vrecps_f32((float32x2_t)v8.u32[0], v11)).f32[0]);
  v12 = (int32x4_t)vnegq_f32(v9);
  v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v12));
  v14 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v12, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v13, v13, 8uLL));
  v15 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
  v15.i32[0] = v12.i32[1];
  v15.i32[3] = v12.i32[2];
  v16 = vaddq_f32(v15, v14);
  v17 = (int32x4_t)vnegq_f32(v16);
  v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v16, vtrn1q_s32((int32x4_t)v16, v17));
  v19 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
  v19.i32[0] = v17.i32[1];
  v19.i32[3] = v17.i32[2];
  result[5] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v16, a2, 3), v19, a2, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 8uLL), *(float32x2_t *)a2.f32, 1), (float32x4_t)vextq_s8(v18, v18, 8uLL), a2.f32[0]));
  result[6] = a2;
  return result;
}

BOOL sub_1B21A45D4(float *a1, float a2, float a3, float a4)
{
  return a1[36] <= 0.0 || a1[56] != a2 || a1[57] != a3 || a1[58] != a4;
}

void sub_1B21A4610(uint64_t a1, int a2, int a3)
{
  unint64_t v5;

  v5 = a2;
  sub_1B17F8160(a1, a2);
  sub_1B17F8160(a1 + 24, a3);
  sub_1B17F8160(a1 + 48, v5);
  sub_1B17F8160(a1 + 72, a3);
}

void sub_1B21A4668(uint64_t a1)
{
  uint64_t v1;
  size_t v3;

  v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    v3 = 4 * v1;
    memset_pattern16(*(void **)(a1 + 152), &unk_1B22C9DE0, 4 * v1);
    memset_pattern16(*(void **)(a1 + 176), &unk_1B22C9DE0, v3);
    memset_pattern16(*(void **)(a1 + 736), &unk_1B22C9DE0, v3);
    memset_pattern16(*(void **)(a1 + 760), &unk_1B22C9DE0, v3);
  }
}

void sub_1B21A46F0(uint64_t a1)
{
  uint64_t v1;
  size_t v3;

  v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    v3 = 4 * v1;
    bzero(*(void **)(a1 + 200), 4 * v1);
    bzero(*(void **)(a1 + 784), v3);
  }
}

float sub_1B21A473C(int *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  float *v8;
  float *v9;
  int *v10;
  uint64_t v11;
  int v12;
  float v13;
  float result;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 >= 1)
  {
    v5 = a1[2];
    v6 = v5 * v3;
    v7 = *(_DWORD **)a3;
    v8 = *(float **)(a3 + 48);
    v9 = (float *)(*a2 + 4 * v5 + 4);
    v10 = (int *)(*a2 + 4 * v6 + 4);
    v11 = *a1;
    do
    {
      v12 = *v10++;
      *v7++ = v12;
      v13 = *v9++;
      result = v13;
      *v8++ = v13;
      --v11;
    }
    while (v11);
  }
  if ((int)v3 >= 1)
  {
    v15 = a1[2];
    v16 = *a2;
    v17 = *(_DWORD **)(a3 + 24);
    v18 = *(float **)(a3 + 72);
    v19 = v15 + v4;
    v20 = 4 * v15;
    do
    {
      *v17++ = *(_DWORD *)(v16 + v20 + 4);
      result = *(float *)(v16 + 4 * v19);
      *v18++ = result;
      v16 += v20;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_1B21A47CC(uint64_t a1)
{
  sub_1B21A473C((int *)a1, (uint64_t *)(a1 + 152), a1 + 368);
  sub_1B21A473C((int *)a1, (uint64_t *)(a1 + 176), a1 + 464);
  return sub_1B21A473C((int *)a1, (uint64_t *)(a1 + 200), a1 + 560);
}

void sub_1B21A4810(uint64_t a1, char a2, char a3, char a4, char a5, char a6, float a7)
{
  int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float *v28;
  int v29;
  float *v30;
  float v31;
  float v32;
  int v33;
  float *v34;
  uint64_t v35;
  size_t v36;
  float v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float *v54;
  float *v55;
  float v56;
  int v57;
  float *v58;
  float *v59;
  float v60;
  int v61;
  float *v62;
  float *v63;
  float v64;

  v13 = llroundf((float)(*(float *)(a1 + 44) * 16.0) + 4.0);
  v14 = fmaxf(fminf(a7, 1.0), 0.0);
  if (v13 >= 20)
    v13 = 20;
  v15 = llroundf((float)(*(float *)(a1 + 48) * 16.0) + 4.0);
  if (v13 <= 4)
    v16 = 4;
  else
    v16 = v13;
  if (v15 >= 20)
    v17 = 20;
  else
    v17 = v15;
  if (v17 <= 4)
    v18 = 4;
  else
    v18 = v17;
  v19 = powf(*(float *)(a1 + 24), 3.0);
  v21 = *(float *)(a1 + 28);
  v20 = *(float *)(a1 + 32);
  v22 = powf(v14, 0.888);
  v23 = powf(fmaxf(*(float *)(a1 + 36) + *(float *)(a1 + 36), 0.0), 0.777);
  v24 = powf(fmaxf(*(float *)(a1 + 40) + *(float *)(a1 + 40), 0.0), 0.777);
  if ((a2 & 1) == 0)
  {
    v25 = v22 * v23;
    if ((float)(v22 * v23) > 0.0)
    {
      if (v25 >= 1.0)
      {
        sub_1B21A4668(a1);
      }
      else
      {
        v26 = 1.0 - v25;
        if (v26 != 1.0)
        {
          v27 = *(_DWORD *)(a1 + 16);
          if (v27 >= 1)
          {
            v28 = *(float **)(a1 + 152);
            v29 = *(_DWORD *)(a1 + 16);
            do
            {
              *v28 = v26 * *v28;
              ++v28;
              --v29;
            }
            while (v29);
            v30 = *(float **)(a1 + 176);
            do
            {
              *v30 = v26 * *v30;
              ++v30;
              --v27;
            }
            while (v27);
          }
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    v31 = v22 * v24;
    if ((float)(v22 * v24) > 0.0)
    {
      if (v31 >= 1.0)
      {
        v35 = *(unsigned int *)(a1 + 16);
        if ((int)v35 >= 1)
        {
          v36 = 4 * v35;
          bzero(*(void **)(a1 + 200), 4 * v35);
          bzero(*(void **)(a1 + 784), v36);
        }
      }
      else
      {
        v32 = 1.0 - v31;
        if (v32 != 1.0)
        {
          v33 = *(_DWORD *)(a1 + 16);
          if (v33 >= 1)
          {
            v34 = *(float **)(a1 + 200);
            do
            {
              *v34 = v32 * *v34;
              ++v34;
              --v33;
            }
            while (v33);
          }
        }
      }
    }
  }
  if ((a4 & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 728) && v14 != 0.0)
    {
      v53 = *(_DWORD *)(a1 + 16);
      if (v53 >= 1)
      {
        v54 = *(float **)(a1 + 656);
        v55 = *(float **)(a1 + 152);
        do
        {
          v56 = *v54++;
          *v55 = *v55 + (float)(v14 * v56);
          ++v55;
          --v53;
        }
        while (v53);
      }
    }
    if (!*(_BYTE *)(a1 + 729) && v14 != 0.0)
    {
      v57 = *(_DWORD *)(a1 + 16);
      if (v57 >= 1)
      {
        v58 = *(float **)(a1 + 680);
        v59 = *(float **)(a1 + 176);
        do
        {
          v60 = *v58++;
          *v59 = *v59 + (float)(v14 * v60);
          ++v59;
          --v57;
        }
        while (v57);
      }
    }
    if (!*(_BYTE *)(a1 + 730) && v14 != 0.0)
    {
      v61 = *(_DWORD *)(a1 + 16);
      if (v61 >= 1)
      {
        v62 = *(float **)(a1 + 704);
        v63 = *(float **)(a1 + 200);
        do
        {
          v64 = *v62++;
          *v63 = *v63 + (float)(v14 * v64);
          ++v63;
          --v61;
        }
        while (v61);
      }
    }
  }
  if ((a5 & 1) == 0)
  {
    v37 = v19 * 0.01;
    if ((float)(v19 * 0.01) > 0.0)
    {
      v38 = *(_OWORD *)(a1 + 152);
      v39 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 736);
      v40 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 168) = v39;
      *(_OWORD *)(a1 + 736) = v38;
      *(_OWORD *)(a1 + 752) = v40;
      v41 = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 768) = v41;
      sub_1B21A4D54((int *)a1, 1, (float **)(a1 + 152), (uint64_t *)(a1 + 736), v18, v37, v14);
      sub_1B21A4D54((int *)a1, 2, (float **)(a1 + 176), (uint64_t *)(a1 + 760), v18, v37, v14);
    }
    if ((float)(v21 * 10.0) > 0.0)
      sub_1B21A4E8C((unsigned int *)a1, (float **)(a1 + 152), (float **)(a1 + 176), (float **)(a1 + 736), (float **)(a1 + 760), (float **)(a1 + 784), v21 * 10.0, v14);
    sub_1B21A512C((float *)a1, (float **)(a1 + 152), (float **)(a1 + 176), (float **)(a1 + 736), (float **)(a1 + 760), v16);
    v42 = *(_OWORD *)(a1 + 152);
    v43 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 736);
    v44 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 168) = v43;
    *(_OWORD *)(a1 + 736) = v42;
    *(_OWORD *)(a1 + 752) = v44;
    v45 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a1 + 768) = v45;
    sub_1B21A53F8((unsigned int *)a1, 1, (float **)(a1 + 152), (uint64_t *)(a1 + 736), (_QWORD *)(a1 + 736), (_QWORD *)(a1 + 760), v14);
    sub_1B21A53F8((unsigned int *)a1, 2, (float **)(a1 + 176), (uint64_t *)(a1 + 760), (_QWORD *)(a1 + 736), (_QWORD *)(a1 + 760), v14);
    sub_1B21A512C((float *)a1, (float **)(a1 + 152), (float **)(a1 + 176), (float **)(a1 + 736), (float **)(a1 + 760), v16);
  }
  if ((a6 & 1) == 0)
  {
    if ((float)(v20 * 0.1) > 0.0)
    {
      v46 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 784) = v46;
      v47 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 800);
      *(_QWORD *)(a1 + 800) = v47;
      sub_1B21A4D54((int *)a1, 0, (float **)(a1 + 200), (uint64_t *)(a1 + 784), v18, v20 * 0.1, v14);
    }
    v48 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 784) = v48;
    v49 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 800);
    *(_QWORD *)(a1 + 800) = v49;
    sub_1B21A53F8((unsigned int *)a1, 0, (float **)(a1 + 200), (uint64_t *)(a1 + 784), (_QWORD *)(a1 + 152), (_QWORD *)(a1 + 176), v14);
  }
  if (!*(_BYTE *)(a1 + 728))
  {
    v50 = *(unsigned int *)(a1 + 16);
    if ((int)v50 >= 1)
      bzero(*(void **)(a1 + 656), 4 * v50);
    *(_BYTE *)(a1 + 728) = 1;
  }
  if (!*(_BYTE *)(a1 + 729))
  {
    v51 = *(unsigned int *)(a1 + 16);
    if ((int)v51 >= 1)
      bzero(*(void **)(a1 + 680), 4 * v51);
    *(_BYTE *)(a1 + 729) = 1;
  }
  if (!*(_BYTE *)(a1 + 730))
  {
    v52 = *(unsigned int *)(a1 + 16);
    if ((int)v52 >= 1)
      bzero(*(void **)(a1 + 704), 4 * v52);
    *(_BYTE *)(a1 + 730) = 1;
  }
}

void sub_1B21A4D54(int *a1, int a2, float **a3, uint64_t *a4, int a5, float a6, float a7)
{
  int v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;

  if (a5 >= 1)
  {
    v12 = 0;
    v13 = *a1;
    v14 = a1[1];
    v15 = (float)(a6 * a7) * (float)(v14 * *a1);
    v16 = (*a1 + 1);
    do
    {
      if (v13 >= 1)
      {
        v17 = *a4;
        v18 = *a3;
        v19 = 1;
        do
        {
          if (v14 <= 0)
          {
            v22 = v19 + 1;
          }
          else
          {
            v20 = a1[2];
            v21 = 4 * v19;
            v22 = v19 + 1;
            v23 = 4 * v20;
            v24 = &v18[2 * v20];
            v25 = v17 + 4 * v20;
            v26 = &v18[v20];
            v27 = (v14 + 1) - 1;
            do
            {
              *(float *)((char *)v26 + v21) = (float)(1.0 / (float)((float)(v15 * 4.0) + 1.0))
                                            * (float)(*(float *)(v25 + v21)
                                                    + (float)(v15
                                                            * (float)((float)((float)(*(float *)((char *)v26 + v21 - 4)
                                                                                    + *(float *)((char *)v26 + v21 + 4))
                                                                            + *(float *)((char *)v18 + v21))
                                                                    + *(float *)((char *)v24 + v21))));
              v21 += v23;
              --v27;
            }
            while (v27);
          }
          v19 = v22;
        }
        while (v22 != v16);
      }
      sub_1B21A5DF4((unsigned int *)a1, a2, a3);
      ++v12;
    }
    while (v12 != a5);
  }
}

float sub_1B21A4E8C(unsigned int *a1, float **a2, float **a3, float **a4, float **a5, float **a6, float a7, float a8)
{
  uint64_t v14;
  uint64_t v15;
  int v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;

  v14 = *a1;
  v15 = a1[4];
  if ((int)v14 <= 0)
  {
    sub_1B21A5DF4(a1, 0, a6);
  }
  else
  {
    v18 = a1[1];
    v19 = *a2;
    v20 = *a6;
    v21 = v14 + 1;
    v22 = (uint64_t)(*a3 - 1);
    v23 = 1;
    do
    {
      if (v18 <= 0)
      {
        v25 = v23 + 1;
      }
      else
      {
        v24 = (int)a1[2];
        v25 = v23 + 1;
        v26 = &v19[v23];
        v27 = 4 * v24;
        v28 = 4 * (v23 + v24);
        v29 = 2 * v24;
        v30 = (v18 + 1) - 1;
        do
        {
          *(float *)((char *)v20 + v28) = vabds_f32((float)(v26[v29] - *v26) + *(float *)(v22 + v28), *(float *)(v22 + v28 + 8));
          v26 = (float *)((char *)v26 + v27);
          v28 += v27;
          --v30;
        }
        while (v30);
      }
      v23 = v25;
    }
    while (v25 != v21);
    sub_1B21A5DF4(a1, 0, a6);
    v31 = *a6;
    v32 = (uint64_t)(*a6 + 1);
    v33 = 1;
    do
    {
      if (v18 <= 0)
      {
        v36 = v33 + 1;
      }
      else
      {
        v34 = 0;
        v35 = (int)a1[2];
        v36 = v33 + 1;
        v37 = *a5;
        v38 = (uint64_t)&(*a2)[v33];
        v39 = v33 + v35;
        v40 = (uint64_t)&(*a4)[v33 + v35];
        v41 = 8 * v35 + 4 * v33;
        v42 = (char *)*a2 + v41;
        v43 = (char *)v31 + v41;
        v44 = (uint64_t)&(*a3)[v33 + 1 + v35];
        v45 = (v18 + 1) - 1;
        v46 = 1;
        do
        {
          v47 = v31[v33 + v34 / 4] - *(float *)&v43[v34];
          v48 = *(float *)(v32 + 4 * (v33 + v35) + v34) - *(float *)(v32 + 4 * (v33 + v35) + v34 - 8);
          v49 = (float)(v48 * v48) + (float)(v47 * v47);
          if (v49 <= 1.0e-12)
          {
            *(_DWORD *)(v40 + v34) = 0;
            v52 = 0.0;
            v51 = v39;
          }
          else
          {
            v50 = (float)((float)(a7 * a8)
                        * (float)((float)((float)(*(float *)&v42[v34] - *(float *)(v38 + v34))
                                        + *(float *)(v44 + v34 - 8))
                                - *(float *)(v44 + v34)))
                / sqrtf(v49);
            v51 = v46 * v35 + v33;
            *(float *)(v40 + v34) = v47 * v50;
            v52 = v48 * v50;
          }
          v37[v51] = v52;
          v34 += 4 * v35;
          v39 += v35;
          ++v46;
          --v45;
        }
        while (v45);
      }
      v33 = v36;
    }
    while (v36 != v21);
  }
  if ((int)v15 >= 1)
  {
    v53 = *a4;
    v54 = *a2;
    v55 = *a5;
    v56 = *a3;
    do
    {
      v57 = *v53++;
      *v54 = v57 + *v54;
      ++v54;
      v58 = *v55++;
      *v56 = v58 + *v56;
      ++v56;
      --v15;
    }
    while (v15);
  }
  sub_1B21A5DF4(a1, 1, a2);
  return sub_1B21A5DF4(a1, 2, a3);
}

float sub_1B21A512C(float *a1, float **a2, float **a3, float **a4, float **a5, int a6)
{
  int v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  float *v30;
  float *v31;
  int v37;
  int i;
  unsigned int v39;
  int v40;
  float *v41;
  float *v42;
  float v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v57;

  v13 = *(unsigned int *)a1;
  v12 = *((_DWORD *)a1 + 1);
  if ((int)v13 >= 1)
  {
    v14 = *a3;
    v15 = *a5;
    v16 = *a4;
    v17 = (uint64_t)(*a2 + 2);
    v18 = 1;
    v19 = 4;
    v20 = -0.5 / a1[5];
    do
    {
      if (v12 >= 1)
      {
        v21 = *((int *)a1 + 2);
        v22 = 4 * v21;
        v23 = &v15[v21];
        v24 = &v16[v21];
        v25 = &v14[2 * v21];
        v26 = v17 + 4 * v21;
        v27 = (v12 + 1) - 1;
        v28 = v19;
        do
        {
          *(float *)((char *)v23 + v28) = v20
                                        * (float)((float)((float)(*(float *)(v26 + v28 - 4) - *(float *)(v26 + v28 - 12))
                                                        + *(float *)((char *)v25 + v28))
                                                - *(float *)((char *)v14 + v28));
          *(float *)((char *)v24 + v28) = 0.0;
          v28 += v22;
          --v27;
        }
        while (v27);
      }
      ++v18;
      v19 += 4;
    }
    while (v18 != v13 + 1);
  }
  sub_1B21A5DF4((unsigned int *)a1, 0, a5);
  sub_1B21A5D50((int *)a1, a4, 0.0);
  if (a6 >= 1)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a5;
    __asm { FMOV            V5.4S, #0.25 }
    v57 = _Q5;
    do
    {
      if ((int)v13 >= 1)
      {
        v37 = 1;
        do
        {
          if (v12 >= 1)
          {
            for (i = 0; i != v12; ++i)
            {
              v39 = *((_DWORD *)a1 + 2);
              v40 = v39 * (i + 1);
              *(float32x4_t *)&v30[v40 + v37] = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)&v31[v40 + v37], *(float32x4_t *)&v30[v37 + v39 * i]), *(float32x4_t *)&v30[v37 - 1 + v40]), *(float32x4_t *)&v30[v37 + 1 + v40]), *(float32x4_t *)&v30[v37 + v39 * (i + 2)]), _Q5);
            }
          }
          v37 += 4;
        }
        while (v37 <= (int)v13);
      }
      sub_1B21A5DF4((unsigned int *)a1, 0, a4);
      _Q5 = v57;
      ++v29;
    }
    while (v29 != a6);
  }
  if ((int)v13 >= 1)
  {
    v41 = *a4;
    v42 = *a2;
    v43 = a1[5] * -0.5;
    v44 = *a3;
    v45 = (uint64_t)(*a4 + 2);
    v46 = 1;
    v47 = 4;
    do
    {
      if (v12 >= 1)
      {
        v48 = *((int *)a1 + 2);
        v49 = 4 * v48;
        v50 = &v42[v48];
        v51 = &v44[v48];
        v52 = &v41[2 * v48];
        v53 = v45 + 4 * v48;
        v54 = (v12 + 1) - 1;
        v55 = v47;
        do
        {
          *(float *)((char *)v50 + v55) = *(float *)((char *)v50 + v55)
                                        + (float)(v43 * (float)(*(float *)(v53 + v55 - 4) - *(float *)(v53 + v55 - 12)));
          *(float *)((char *)v51 + v55) = *(float *)((char *)v51 + v55)
                                        + (float)(v43
                                                * (float)(*(float *)((char *)v52 + v55) - *(float *)((char *)v41 + v55)));
          v55 += v49;
          --v54;
        }
        while (v54);
      }
      ++v46;
      v47 += 4;
    }
    while (v46 != v13 + 1);
  }
  sub_1B21A5DF4((unsigned int *)a1, 1, a2);
  return sub_1B21A5DF4((unsigned int *)a1, 2, a3);
}

float sub_1B21A53F8(unsigned int *a1, int a2, float **a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, float a7)
{
  uint64_t v7;
  int v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float v26;
  int v27;

  v7 = *a1;
  if ((int)v7 >= 1)
  {
    v8 = a1[1];
    v9 = (float)(int)v7 + 0.5;
    v10 = -(float)(*((float *)a1 + 5) * a7);
    v11 = *a4;
    v12 = v7 + 1;
    v13 = *a5 + 4;
    v14 = *a6 + 4;
    v15 = *a3 + 1;
    v16 = 1;
    do
    {
      if (v8 >= 1)
      {
        v17 = (float)(int)v16;
        v18 = (int)a1[2];
        v19 = 4 * v18;
        v20 = 1;
        do
        {
          v21 = v17 + (float)(v10 * *(float *)(v13 + v19));
          v22 = 0.5;
          v23 = 0.5;
          if (v21 >= 0.5)
          {
            v23 = v17 + (float)(v10 * *(float *)(v13 + v19));
            if (v21 > v9)
              v23 = v9;
          }
          v24 = (float)(int)v20 + (float)(v10 * *(float *)(v14 + v19));
          if (v24 >= 0.5)
          {
            v22 = (float)(int)v20 + (float)(v10 * *(float *)(v14 + v19));
            if (v24 > (float)((float)v8 + 0.5))
              v22 = (float)v8 + 0.5;
          }
          v25 = (int)v22;
          v26 = v22 - (float)(int)v22;
          v27 = v18 * v25;
          v15[(unint64_t)v19 / 4] = (float)((float)(v23 - (float)(int)v23)
                                                 * (float)((float)(v26
                                                                 * *(float *)(v11 + 4
                                                                                  * ((int)v18 + v27 + (int)v23 + 1)))
                                                         + (float)((float)(1.0 - v26)
                                                                 * *(float *)(v11 + 4 * (v27 + (int)v23 + 1)))))
                                         + (float)((float)(1.0 - (float)(v23 - (float)(int)v23))
                                                 * (float)((float)(v26
                                                                 * *(float *)(v11 + 4 * ((int)v18 + v27 + (int)v23)))
                                                         + (float)((float)(1.0 - v26)
                                                                 * *(float *)(v11 + 4 * (v27 + (int)v23)))));
          ++v20;
          v19 += 4 * v18;
        }
        while (v8 + 1 != v20);
      }
      ++v16;
      v13 += 4;
      v14 += 4;
      ++v15;
    }
    while (v16 != v12);
  }
  return sub_1B21A5DF4(a1, a2, a3);
}

float32x4_t *sub_1B21A555C(float32x4_t *result, int a2, float32x4_t a3, float a4, float32x4_t a5, float a6)
{
  uint64_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  unint64_t v33;
  int v34;
  char v35;
  double v37;
  float32x2_t v39;

  v8 = (uint64_t)result;
  if (a2)
  {
    v9 = vmulq_f32(vsubq_f32(a3, result[4]), result[5]);
    LODWORD(v10) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
  }
  else
  {
    v10 = a3.f32[2];
  }
  v11 = fabsf(v10);
  if (a6 > 0.0 && v11 < a4)
  {
    v13 = result[8].f32[3] / a6;
    v14 = acosf(v10 / a4);
    v15 = sinf(v14) * a4;
    if (a2)
    {
      v16 = *(float32x4_t *)(v8 + 112);
      v17 = vsubq_f32(a3, *(float32x4_t *)(v8 + 64));
      v18 = vmulq_f32(v16, (float32x4_t)xmmword_1B2244F80);
      v19 = (int8x16_t)vnegq_f32(v18);
      v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, (int32x4_t)v19));
      v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
      v22 = (float32x4_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
      v23 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
      v23.i32[0] = v19.i32[1];
      v23.i32[3] = v19.i32[2];
      v24 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)v17.f32, 1), v21, v17.f32[0]), v23, v17, 2);
      v25 = (int8x16_t)vnegq_f32(v24);
      v26 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, (int32x4_t)v25));
      v27 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
      v27.i32[0] = v25.i32[1];
      v27.i32[3] = v25.i32[2];
      v28 = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_laneq_f32(vmulq_laneq_f32(v24, v16, 3), v27, v16, 2), (float32x2_t)*(_OWORD *)&vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, v25, 8uLL), *(float32x2_t *)v16.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v16.f32[0]));
      v29 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)a5.f32, 1), v21, a5.f32[0]), v23, a5, 2);
      v30 = (int8x16_t)vnegq_f32(v29);
      v31 = (int8x16_t)vtrn2q_s32((int32x4_t)v29, vtrn1q_s32((int32x4_t)v29, (int32x4_t)v30));
      v32 = (float32x4_t)vrev64q_s32((int32x4_t)v29);
      v32.i32[0] = v30.i32[1];
      v32.i32[3] = v30.i32[2];
      v33 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v29, v16, 3), v32, v16, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v29, v30, 8uLL), *(float32x2_t *)v16.f32, 1), (float32x4_t)vextq_s8(v31, v31, 8uLL), v16.f32[0])).u64[0];
    }
    else
    {
      v28 = *(float32x2_t *)a3.f32;
      v33 = a5.i64[0];
    }
    v37 = *(double *)&v28;
    v39 = (float32x2_t)v33;
    v34 = sub_1B21A5714(v8, (uint64_t *)(v8 + 656), 0, *(double *)&v28, v15, v13 * *(float *)&v33) ^ 1;
    if (!*(_BYTE *)(v8 + 728))
      LOBYTE(v34) = 0;
    *(_BYTE *)(v8 + 728) = v34;
    result = (float32x4_t *)sub_1B21A5714(v8, (uint64_t *)(v8 + 680), 0, v37, v15, vmuls_lane_f32(v13, v39, 1));
    v35 = result ^ 1;
    if (!*(_BYTE *)(v8 + 729))
      v35 = 0;
    *(_BYTE *)(v8 + 729) = v35;
  }
  return result;
}

uint64_t sub_1B21A5714(uint64_t a1, uint64_t *a2, int a3, double a4, float a5, float a6)
{
  uint64_t v6;
  BOOL v7;
  char v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  signed int v17;
  signed int v18;
  float v21;
  float v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float v35;
  BOOL v36;
  float v37;
  float32x2_t v38;
  float v39;
  float v40;
  float32x2_t v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;

  v6 = 0;
  v7 = a6 == 0.0 && a3 == 0;
  v8 = v7;
  if (a5 > 1.0e-12 && (v8 & 1) == 0)
  {
    v9 = *(float *)(a1 + 128);
    if ((float)(*(float *)&a4 + a5) <= (float)(v9 * -0.5))
      return 0;
    if ((float)(*(float *)&a4 - a5) >= (float)(v9 * 0.5))
      return 0;
    v10 = *(float *)(a1 + 132);
    if ((float)(*((float *)&a4 + 1) + a5) <= (float)(v10 * -0.5)
      || (float)(*((float *)&a4 + 1) - a5) >= (float)(v10 * 0.5))
    {
      return 0;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 4);
      v12 = *(float *)(a1 + 148);
      v13 = (float)(v12 * (float)(*((float *)&a4 + 1) + (float)(v10 * 0.5))) + 1.0;
      v14 = v12 * a5;
      v15 = vcvtms_s32_f32(v13 - v14);
      v16 = v15 & ~(v15 >> 31);
      v17 = vcvtps_s32_f32(v13 + v14);
      if (v11 + 1 < v17)
        v18 = v11 + 1;
      else
        v18 = v17;
      if (v16 <= v18)
      {
        *(float *)&a4 = (float)(v12 * (float)(*(float *)&a4 + (float)(v9 * 0.5))) + 1.0;
        *((float *)&a4 + 1) = (float)(v12 * (float)(*((float *)&a4 + 1) + (float)(v10 * 0.5))) + 1.0;
        v21 = (float)(v14 + v14) / 3.0;
        v22 = 0.2 / (float)(v14 - v21);
        v23 = vcvtms_s32_f32(*(float *)&a4 - v14);
        v24 = v23 & ~(v23 >> 31);
        v25 = vcvtps_s32_f32(*(float *)&a4 + v14);
        if (*(_DWORD *)a1 + 1 < v25)
          v26 = *(_DWORD *)a1 + 1;
        else
          v26 = v25;
        do
        {
          if (v24 <= v26)
          {
            v27 = *a2;
            v28 = v24;
            do
            {
              v29.f32[0] = (float)v28;
              v29.f32[1] = (float)v16;
              v30 = vsub_f32(*(float32x2_t *)&a4, v29);
              v31 = sqrtf(vaddv_f32(vmul_f32(v30, v30)));
              v32 = (float)((float)(v14 - v31) * v22) + 0.0;
              if (v31 >= v14)
                v32 = 0.0;
              v29.f32[0] = (float)v28 + 1.0;
              if (v31 >= v21)
                v33 = v32;
              else
                v33 = 0.2;
              v34 = vsub_f32(*(float32x2_t *)&a4, v29);
              v35 = sqrtf(vaddv_f32(vmul_f32(v34, v34)));
              if (v35 >= v21)
              {
                v36 = v35 < v14;
                v37 = v33 + (float)((float)(v14 - v35) * v22);
                if (v36)
                  v33 = v37;
              }
              else
              {
                v33 = v33 + 0.2;
              }
              v29.f32[1] = (float)v16 + 1.0;
              v38 = vsub_f32(*(float32x2_t *)&a4, v29);
              v39 = sqrtf(vaddv_f32(vmul_f32(v38, v38)));
              if (v39 >= v21)
              {
                v36 = v39 < v14;
                v40 = v33 + (float)((float)(v14 - v39) * v22);
                if (v36)
                  v33 = v40;
              }
              else
              {
                v33 = v33 + 0.2;
              }
              v29.f32[0] = (float)((float)v28 + 1.0) + -1.0;
              v41 = vsub_f32(*(float32x2_t *)&a4, v29);
              v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
              if (v42 >= v21)
              {
                if (v42 < v14)
                  v33 = v33 + (float)((float)(v14 - v42) * v22);
              }
              else
              {
                v33 = v33 + 0.2;
              }
              v43.f32[0] = (float)((float)((float)v28 + 1.0) + -1.0) + 0.5;
              v43.f32[1] = (float)((float)v16 + 1.0) + -0.5;
              v44 = vsub_f32(*(float32x2_t *)&a4, v43);
              v45 = sqrtf(vaddv_f32(vmul_f32(v44, v44)));
              if (v45 >= v21)
              {
                if (v45 < v14)
                  v33 = v33 + (float)((float)(v14 - v45) * v22);
              }
              else
              {
                v33 = v33 + 0.2;
              }
              if (v33 != 0.0)
                *(float *)(v27 + 4 * (v28 + v16 * *(_DWORD *)(a1 + 8))) = *(float *)(v27
                                                                                     + 4
                                                                                     * (v28 + v16 * *(_DWORD *)(a1 + 8)))
                                                                          + (float)(v33 * a6);
              ++v28;
            }
            while (v26 + 1 != v28);
          }
          v6 = 1;
          v7 = v16++ == v18;
        }
        while (!v7);
      }
      else
      {
        return 1;
      }
    }
  }
  return v6;
}

float32x4_t *sub_1B21A59B4(float32x4_t *result, int a2, float32x4_t a3, float a4, float a5, float a6)
{
  uint64_t v10;
  float32x4_t v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  double v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  char v31;
  float32x4_t v32;

  v10 = (uint64_t)result;
  if (a2)
  {
    v11 = vmulq_f32(vsubq_f32(a3, result[4]), result[5]);
    LODWORD(v12) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u32[0];
  }
  else
  {
    v12 = a3.f32[2];
  }
  v13 = fabsf(v12);
  if (a6 > 0.0 && v13 < a4)
  {
    v15 = 1.0 / a6;
    v32 = a3;
    v16 = acosf(v12 / a4);
    v17 = sinf(v16);
    v18 = *(double *)v32.i64;
    v19 = v17 * a4;
    if (a2)
    {
      v20 = *(float32x4_t *)(v10 + 112);
      v21 = vsubq_f32(v32, *(float32x4_t *)(v10 + 64));
      v22 = vmulq_f32(v20, (float32x4_t)xmmword_1B2244F80);
      v23 = (int8x16_t)vnegq_f32(v22);
      v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, (int32x4_t)v23));
      v25 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v22, v23, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v24, v24, 8uLL), v21.f32[0]);
      v26 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
      v26.i32[0] = v23.i32[1];
      v26.i32[3] = v23.i32[2];
      v27 = vmlaq_laneq_f32(v25, v26, v21, 2);
      v28 = (int8x16_t)vnegq_f32(v27);
      v29 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, (int32x4_t)v28));
      v30 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v30.i32[0] = v28.i32[1];
      v30.i32[3] = v28.i32[2];
      *(_QWORD *)&v18 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v27, v20, 3), v30, v20, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v27, v28, 8uLL), *(float32x2_t *)v20.f32, 1), (float32x4_t)vextq_s8(v29, v29, 8uLL), v20.f32[0])).u64[0];
    }
    result = (float32x4_t *)sub_1B21A5714(v10, (uint64_t *)(v10 + 704), 0, v18, v19, v15 * a5);
    v31 = result ^ 1;
    if (!*(_BYTE *)(v10 + 730))
      v31 = 0;
    *(_BYTE *)(v10 + 730) = v31;
  }
  return result;
}

uint64_t sub_1B21A5AF8(uint64_t result, unsigned int a2, int a3, uint64_t a4, int a5, char a6)
{
  uint64_t v6;

  v6 = result + 32 * a2;
  *(_DWORD *)(v6 + 244) = a3;
  *(_QWORD *)(v6 + 256) = 0;
  *(_DWORD *)(v6 + 264) = a5;
  *(_BYTE *)(v6 + 268) = a6;
  if (a4)
  {
    if (*(_DWORD *)(result + 4 * ((a2 & 0xFFFFFFFD) == 1)) == *(_DWORD *)(a4 + 4 * ((a5 & 0xFFFFFFFD) == 1)))
      *(_QWORD *)(v6 + 256) = a4;
  }
  return result;
}

double sub_1B21A5B48(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  float v20;
  __int32 v21;
  int v22;
  int v23;
  uint64_t v24;
  float v25;
  __int32 v26;
  int v27;
  int v28;
  int v29;
  float v30;
  uint64_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double result;

  v2 = a1[7];
  v3 = vsubq_f32(a2, a1[4]);
  v4 = vmulq_f32(v2, (float32x4_t)xmmword_1B2244F80);
  v5 = (int32x4_t)vnegq_f32(v4);
  v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v5));
  v7 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL), *(float32x2_t *)v3.f32, 1);
  v8 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v8.i32[0] = v5.i32[1];
  v8.i32[3] = v5.i32[2];
  v9 = vmlaq_laneq_f32(vmlaq_n_f32(v7, (float32x4_t)vextq_s8(v6, v6, 8uLL), v3.f32[0]), v8, v3, 2);
  v10 = (int32x4_t)vnegq_f32(v9);
  v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v10));
  v12 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL), *(float32x2_t *)v2.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v2.f32[0]);
  v13 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
  v13.i32[0] = v10.i32[1];
  v13.i32[3] = v10.i32[2];
  v2.i64[0] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v9, v2, 3), v13, v2, 2), v12).u64[0];
  v13.i32[0] = a1[9].i32[1];
  v14 = (float)(v13.f32[0] * (float)(v2.f32[0] + (float)(a1[8].f32[0] * 0.5))) + 0.5;
  v15 = (float)(v13.f32[0] * (float)(v2.f32[1] + (float)(a1[8].f32[1] * 0.5))) + 0.5;
  v16 = 0.5;
  if (v14 >= 0.5)
  {
    v16 = v14;
    if (v14 > (float)((float)a1->i32[0] + 0.5))
      v16 = (float)a1->i32[0] + 0.5;
  }
  if (v15 >= 0.5)
  {
    if (v15 > (float)((float)a1->i32[1] + 0.5))
      v15 = (float)a1->i32[1] + 0.5;
  }
  else
  {
    v15 = 0.5;
  }
  v17 = (int)v15;
  v18 = (int)v16 + 1;
  v19 = v16 - (float)(int)v16;
  v20 = v15 - (float)(int)v15;
  v21 = a1->i32[2];
  v22 = v21 * v17;
  v23 = v22 + (int)v16;
  v24 = a1[9].i64[1];
  v25 = a1[8].f32[2];
  v26 = v21 + v22;
  v27 = v26 + (int)v16;
  v28 = v22 + v18;
  v29 = v26 + v18;
  v30 = v25
      * (float)((float)(v19
                      * (float)((float)(v20 * *(float *)(v24 + 4 * v29))
                              + (float)((float)(1.0 - v20) * *(float *)(v24 + 4 * v28))))
              + (float)((float)(1.0 - v19)
                      * (float)((float)(v20 * *(float *)(v24 + 4 * v27))
                              + (float)((float)(1.0 - v20) * *(float *)(v24 + 4 * v23)))));
  v31 = a1[11].i64[0];
  v32 = v25
      * (float)((float)(v19
                      * (float)((float)(v20 * *(float *)(v31 + 4 * v29))
                              + (float)((float)(1.0 - v20) * *(float *)(v31 + 4 * v28))))
              + (float)((float)(1.0 - v19)
                      * (float)((float)(v20 * *(float *)(v31 + 4 * v27))
                              + (float)((float)(1.0 - v20) * *(float *)(v31 + 4 * v23)))));
  v33 = a1[6];
  v34 = vmulq_f32(v33, (float32x4_t)xmmword_1B2244F80);
  v35 = (int32x4_t)vnegq_f32(v34);
  v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
  v37 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), v32), (float32x4_t)vextq_s8(v36, v36, 8uLL), v30);
  v38 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
  v38.i32[0] = v35.i32[1];
  v38.i32[3] = v35.i32[2];
  v39 = vmlaq_f32(v37, (float32x4_t)0, v38);
  v40 = (int32x4_t)vnegq_f32(v39);
  v41 = (int8x16_t)vtrn2q_s32((int32x4_t)v39, vtrn1q_s32((int32x4_t)v39, v40));
  v42 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v40, 8uLL), *(float32x2_t *)v33.f32, 1), (float32x4_t)vextq_s8(v41, v41, 8uLL), v33.f32[0]);
  v43 = (float32x4_t)vrev64q_s32((int32x4_t)v39);
  v43.i32[0] = v40.i32[1];
  v43.i32[3] = v40.i32[2];
  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v39, v33, 3), v43, v33, 2), v42).u64[0];
  return result;
}

int *sub_1B21A5D50(int *result, float **a2, float a3)
{
  uint64_t v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  float *v13;

  v4 = *result;
  v3 = result[1];
  v5 = *a2;
  if (*result >= 1)
  {
    v6 = result[2] + result[2] * (uint64_t)(int)v3;
    v7 = v5 + 1;
    v8 = *result;
    do
    {
      *v7 = a3;
      v7[v6] = a3;
      ++v7;
      --v8;
    }
    while (v8);
  }
  v9 = result[2];
  if ((int)v3 <= 0)
  {
    v12 = v3 + 1;
    v11 = v4 + 1;
    v10 = v11;
  }
  else
  {
    v10 = v4 + 1;
    v11 = v4 + 1;
    v12 = v3 + 1;
    v13 = v5;
    do
    {
      v13[v9] = a3;
      v13[v9 + v10] = a3;
      v13 += v9;
      --v3;
    }
    while (v3);
  }
  *v5 = a3;
  v5[(int)v9 * v12] = a3;
  v5[v10] = a3;
  v5[(int)v9 * v12 + v11] = a3;
  return result;
}

float sub_1B21A5DF4(unsigned int *a1, int a2, float **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  BOOL v17;
  float *v18;
  uint64_t v19;
  int v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  float *v27;
  int v28;
  float *v29;
  uint64_t v30;
  float v31;
  BOOL v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  float *v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  float *v46;
  uint64_t v47;
  size_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t *v58;
  BOOL v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int *v86;
  _DWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  float *v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  void *v102;
  uint64_t v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  float *v109;
  uint64_t v110;
  float *v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  int v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  int v124;
  float result;
  uint64_t v126;
  size_t v127;
  int v128;
  float **v129;
  unsigned int *v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[61];
  if ((_DWORD)v6)
    v7 = 1;
  else
    v7 = (int)v4 < 1;
  if (!v7)
  {
    v8 = a1[2];
    v9 = v8 + v8 * v5;
    v10 = &(*a3)[(int)(v8 * v5) + 1];
    v11 = &(*a3)[v9 + 1];
    v12 = *a1;
    do
    {
      v13 = *v10++;
      v14 = v13;
      v15 = -v13;
      if (a2 == 2)
        v14 = v15;
      *v11++ = v14;
      --v12;
    }
    while (v12);
  }
  v16 = a1[69];
  if (v16)
    v17 = 1;
  else
    v17 = (int)v5 < 1;
  if (!v17)
  {
    v18 = *a3;
    v19 = (int)a1[2];
    v20 = v19 + 1;
    v21 = &(*a3)[v19];
    v22 = v5;
    do
    {
      v23 = v18[v20];
      if (a2 == 1)
        v23 = -v23;
      *v21 = v23;
      v20 += v19;
      v21 += v19;
      --v22;
    }
    while (v22);
  }
  v24 = (int)v4;
  v25 = a1[77];
  if (v25)
    v26 = 1;
  else
    v26 = (int)v4 < 1;
  if (!v26)
  {
    v27 = *a3;
    v28 = a1[2] + 1;
    v29 = *a3 + 1;
    v30 = v4;
    do
    {
      v31 = v27[v28];
      if (a2 == 2)
        v31 = -v31;
      *v29++ = v31;
      ++v28;
      --v30;
    }
    while (v30);
  }
  if (a1[85])
    v32 = 1;
  else
    v32 = (int)v5 <= 0;
  v137 = v25;
  v136 = a1[85];
  if (v32)
  {
    v36 = (v4 + 1);
    v37 = v5 + 1;
    v35 = (int)v36;
  }
  else
  {
    v33 = *a3;
    v34 = (int)a1[2];
    v35 = (int)v4 + 1;
    v36 = (v4 + 1);
    v37 = v5 + 1;
    v38 = v34 + v4;
    v39 = &(*a3)[v34 + v35];
    v40 = v5;
    do
    {
      v41 = v33[v38];
      if (a2 == 1)
        v41 = -v41;
      *v39 = v41;
      v38 += v34;
      v39 += v34;
      --v40;
    }
    while (v40);
  }
  v42 = 0;
  v43 = a1 + 38;
  v44 = a1 + 44;
  v45 = a1 + 50;
  v46 = *a3;
  v47 = (uint64_t)(*a3 + 1);
  v48 = 4 * v4;
  v49 = v37;
  v50 = v5 - 1;
  v51 = v37 - 1;
  v52 = v4 - 1;
  v53 = v36 - 1;
  v126 = (int)v4;
  v138 = v37;
  do
  {
    v54 = &a1[8 * v42];
    if (v54[61] == 1)
    {
      LODWORD(v55) = ((_BYTE)v42 + 2) & 3;
      v56 = *((_QWORD *)v54 + 32);
      v57 = 1.0;
      if (v56)
      {
        if (v43 == (unsigned int *)a3)
          v58 = (uint64_t *)(v56 + 24 * (int)a1[8 * v42 + 66] + 368);
        else
          v58 = 0;
        if (v44 == (unsigned int *)a3)
          v58 = (uint64_t *)(v56 + 24 * (int)a1[8 * v42 + 66] + 464);
        if (v45 == (unsigned int *)a3)
        {
          LODWORD(v55) = a1[8 * v42 + 66];
          v58 = (uint64_t *)(v56 + 24 * (int)v55 + 560);
        }
        else if (v58)
        {
          v55 = a1[8 * v42 + 66];
          if ((((_DWORD)v42 - (_DWORD)v55 + 4) & 0x80000001) == 1)
          {
            v58 = (uint64_t *)(v56 + 24 * (int)v55 + 464);
            if (v43 != (unsigned int *)a3)
              v58 = (uint64_t *)(v56 + 24 * (int)v55 + 368);
          }
          v59 = v44 != (unsigned int *)a3;
          if ((v42 & 1) != 0)
            v59 = v43 != (unsigned int *)a3;
          if (v59)
          {
            v60 = (v55 + 1) & 3;
            if ((int)v55 + 1 <= 0)
              v60 = -(-(v55 + 1) & 3);
            v57 = *(float *)&a1[8 * (((_BYTE)v42 + 1) & 3) + 62] * *(float *)&a1[8 * v60 + 62];
          }
          else
          {
            v57 = -(float)(*(float *)&a1[8 * v42 + 62] * *(float *)&a1[8 * v55 + 62]);
          }
        }
      }
      else
      {
        v58 = 0;
      }
      v61 = *((unsigned __int8 *)v54 + 268);
      switch((int)v42)
      {
        case 0:
          if (v58)
          {
            if ((int)v4 >= 1)
            {
              v62 = 0;
              v63 = *v58;
              v64 = v47 + 4 * (int)(a1[2] * v49);
              v65 = v52;
              do
              {
                if (v61)
                  v66 = v65;
                else
                  v66 = v62;
                *(float *)(v64 + 4 * v62++) = v57 * *(float *)(v63 + 4 * v66);
                --v65;
              }
              while (v53 != v62);
            }
          }
          else if (a1[8 * v55 + 61] == 1)
          {
            if ((int)v4 >= 1)
            {
              v84 = (int)a1[2];
              v85 = v84 * v49;
              v86 = (int *)(v47 + 4 * v84);
              v87 = (_DWORD *)(v47 + 4 * v85);
              v88 = v53;
              do
              {
                v89 = *v86++;
                *v87++ = v89;
                --v88;
              }
              while (v88);
            }
          }
          else if ((int)v4 >= 1)
          {
            v102 = (void *)(v47 + 4 * (int)(a1[2] * v49));
            goto LABEL_116;
          }
          break;
        case 1:
          if (v58)
          {
            if ((int)v5 >= 1)
            {
              v67 = 0;
              v68 = *v58;
              v69 = (int)a1[2];
              v70 = &v46[v69];
              v71 = v50;
              do
              {
                if (v61)
                  v72 = v71;
                else
                  v72 = v67;
                *v70 = v57 * *(float *)(v68 + 4 * v72);
                ++v67;
                --v71;
                v70 = (float *)((char *)v70 + v69 * 4);
              }
              while (v51 != v67);
            }
          }
          else if (a1[8 * v55 + 61] == 1)
          {
            if ((int)v5 >= 1)
            {
              v90 = (int)a1[2];
              v91 = v51;
              v92 = v46;
              do
              {
                v93 = v92[v126 + v90];
                v92 = (float *)((char *)v92 + v90 * 4);
                *v92 = v93;
                --v91;
              }
              while (v91);
            }
          }
          else if ((int)v5 >= 1)
          {
            v103 = (int)a1[2];
            v104 = &v46[v103];
            v105 = v51;
            do
            {
              *v104 = 0.0;
              v104 = (float *)((char *)v104 + v103 * 4);
              --v105;
            }
            while (v105);
          }
          break;
        case 2:
          if (v58)
          {
            if ((int)v4 >= 1)
            {
              v73 = 0;
              v74 = *v58;
              v75 = v52;
              do
              {
                if (v61)
                  v76 = v75;
                else
                  v76 = v73;
                *(float *)(v47 + 4 * v73++) = v57 * *(float *)(v74 + 4 * v76);
                --v75;
              }
              while (v53 != v73);
            }
          }
          else if (a1[8 * v55 + 61] == 1)
          {
            if ((int)v24 >= 1)
            {
              v94 = (int)a1[2] * (uint64_t)(int)v5;
              v95 = v53;
              v96 = (_DWORD *)v47;
              do
              {
                *v96 = v96[v94];
                ++v96;
                --v95;
              }
              while (v95);
            }
          }
          else
          {
            v102 = (void *)v47;
            if ((int)v4 >= 1)
            {
LABEL_116:
              v135 = v16;
              v134 = v36;
              v132 = v43;
              v133 = v5;
              v130 = v45;
              v131 = v4;
              v106 = v6;
              v128 = v50;
              v107 = v35;
              v129 = a3;
              v127 = v48;
              v108 = v44;
              v109 = v46;
              bzero(v102, v48);
              v46 = v109;
              a3 = v129;
              v45 = v130;
              v44 = v108;
              v4 = v131;
              v43 = v132;
              v48 = v127;
              v49 = v138;
              v35 = v107;
              v50 = v128;
              v6 = v106;
              v5 = v133;
              v36 = v134;
              v16 = v135;
            }
          }
          break;
        case 3:
          if (v58)
          {
            if ((int)v5 >= 1)
            {
              v77 = 0;
              v78 = *v58;
              v79 = (int)a1[2];
              v80 = &v46[v35 + v79];
              v81 = 4 * v79;
              v82 = v50;
              do
              {
                if (v61)
                  v83 = v82;
                else
                  v83 = v77;
                *v80 = v57 * *(float *)(v78 + 4 * v83);
                ++v77;
                --v82;
                v80 = (float *)((char *)v80 + v81);
              }
              while (v51 != v77);
            }
          }
          else if (a1[8 * v55 + 61] == 1)
          {
            if ((int)v5 >= 1)
            {
              v97 = (int)a1[2];
              v98 = v35 + v97;
              v99 = v97;
              v100 = v51;
              v101 = v46;
              do
              {
                v101[v98] = v101[v99 + 1];
                v101 = (float *)((char *)v101 + v99 * 4);
                --v100;
              }
              while (v100);
            }
          }
          else if ((int)v5 >= 1)
          {
            v110 = (int)a1[2];
            v111 = &v46[v35 + v110];
            v112 = 4 * v110;
            v113 = v51;
            do
            {
              *v111 = 0.0;
              v111 = (float *)((char *)v111 + v112);
              --v113;
            }
            while (v113);
          }
          break;
        default:
          break;
      }
    }
    ++v42;
  }
  while (v42 != 4);
  v114 = *a3;
  if ((_DWORD)v6 == 2 && (int)v24 >= 1)
  {
    v115 = v4;
    v116 = v35;
    v117 = v48;
    bzero(&v114[a1[2] * v49 + 1], v48);
    v48 = v117;
    v49 = v138;
    v35 = v116;
    LODWORD(v4) = v115;
  }
  if (v16 == 2 && (int)v5 >= 1)
  {
    v118 = (int)a1[2];
    v119 = &v114[v118];
    v120 = v51;
    do
    {
      *v119 = 0.0;
      v119 = (float *)((char *)v119 + v118 * 4);
      --v120;
    }
    while (v120);
  }
  if (v137 == 2 && (int)v4 >= 1)
  {
    v121 = v35;
    bzero(v114 + 1, v48);
    v49 = v138;
    v35 = v121;
  }
  v122 = (int)a1[2];
  if (v136 == 2 && (int)v5 >= 1)
  {
    v123 = &v114[v35 + v122];
    do
    {
      *v123 = 0.0;
      v123 += v122;
      --v51;
    }
    while (v51);
  }
  *v114 = (float)(v114[1] + v114[v122]) * 0.5;
  v124 = v122 * v49;
  v114[v124] = (float)(v114[v124 + 1] + v114[(int)v122 * (int)v5]) * 0.5;
  v114[v35] = (float)(v114[v24] + v114[(int)v122 + (int)v36]) * 0.5;
  result = (float)(v114[(int)(v122 * v49 + v24)] + v114[(int)v122 * (int)v5 + (int)v36]) * 0.5;
  v114[v124 + (int)v36] = result;
  return result;
}

double sub_1B21A65C0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  double result;
  mach_timebase_info info;

  if (!qword_1EEFD5940)
  {
    v0 = operator new();
    mach_timebase_info(&info);
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    result = (double)v1 / (double)v2;
    *(double *)v0 = result * 0.000000001;
    *(double *)(v0 + 8) = result;
    *(_QWORD *)(v0 + 16) = MEMORY[0xFFFFFC088];
    qword_1EEFD5940 = v0;
    byte_1EEF652E8 = MEMORY[0xFFFFFC090];
  }
  return result;
}

void sub_1B21A665C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1000C40504FFAC1);
  _Unwind_Resume(a1);
}

BOOL PFlameProbeData_hasAssociatedData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) != 0;
}

BOOL PEventProbeData_hasAssociatedData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) != 0;
}

void prof_eventTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_key_t *v10;
  pthread_key_t v11;
  pthread_key_t *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;

  if (byte_1EEFD5949)
  {
    v10 = currentThreadProfiler_0();
    v11 = v10[2];
    v12 = &v10[7 * v11];
    v13 = *((_DWORD *)v12 + 10);
    v14 = *((_DWORD *)v12 + 11);
    v15 = (unsigned int *)(v12 + 5);
    if (v13 + 1 > v14)
    {
      sub_1B21A8380(v15);
      v13 = *v15;
    }
    v16 = v10[7 * v11 + 6] + 48 * v13;
    *(_QWORD *)v16 = a3;
    *(_QWORD *)(v16 + 8) = a4;
    *(_QWORD *)(v16 + 16) = a5;
    *(_QWORD *)(v16 + 24) = a2;
    *(_QWORD *)(v16 + 32) = 0;
    *(_BYTE *)(v16 + 40) = a1;
    *(_BYTE *)(v16 + 41) = 0;
    ++*v15;
  }
}

pthread_key_t *currentThreadProfiler_0()
{
  pthread_key_t **v0;
  pthread_key_t *v1;
  pthread_key_t **v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  pthread_key_t **v7;
  pthread_key_t *v8;

  v0 = (pthread_key_t **)off_1EEF65418();
  v1 = *v0;
  if (!*v0)
  {
    v2 = v0;
    v1 = (pthread_key_t *)operator new();
    sub_1B21A7F44(v1, 0);
    *v2 = v1;
    pthread_key_create(v1, (void (__cdecl *)(void *))sub_1B21A8558);
    pthread_setspecific(*v1, v1);
    v7 = &v8;
    v8 = v1;
    sub_1B21A858C(&v7);
    if (objc_msgSend_isMainThread(MEMORY[0x1E0CB3978], v3, v4, v5))
      MEMORY[0x1B5E22CD4](v1 + 3588, "MainThread");
  }
  return v1;
}

void sub_1B21A680C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10B2C401994A623);
  _Unwind_Resume(a1);
}

void prof_eventTimeSmallData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  pthread_key_t *v12;
  pthread_key_t v13;
  pthread_key_t *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;

  if (byte_1EEFD5949)
  {
    v12 = currentThreadProfiler_0();
    v13 = v12[2];
    v14 = &v12[7 * v13];
    v15 = *((_DWORD *)v14 + 10);
    v16 = *((_DWORD *)v14 + 11);
    v17 = (unsigned int *)(v14 + 5);
    if (v15 + 1 > v16)
    {
      sub_1B21A8380(v17);
      v15 = *v17;
    }
    v18 = v12[7 * v13 + 6] + 48 * v15;
    *(_QWORD *)v18 = a3;
    *(_QWORD *)(v18 + 8) = a4;
    *(_QWORD *)(v18 + 16) = a5;
    *(_QWORD *)(v18 + 24) = a2;
    *(_QWORD *)(v18 + 32) = a6;
    *(_BYTE *)(v18 + 40) = a1;
    *(_BYTE *)(v18 + 41) = 1;
    ++*v17;
  }
}

void prof_eventTimeBlockData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  pthread_key_t *v13;
  pthread_key_t v14;
  id v15;
  void *v16;
  BOOL v17;
  char v18;
  pthread_key_t *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  pthread_key_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  pthread_key_t v28;
  char v29;
  uint64_t v30;
  id v31;

  v31 = a7;
  if (byte_1EEFD5949)
  {
    v13 = currentThreadProfiler_0();
    v29 = a1;
    v30 = a5;
    v14 = v13[2];
    v15 = v31;
    v16 = v15;
    if (a6)
      v17 = v15 == 0;
    else
      v17 = 0;
    v18 = v17;
    v19 = &v13[7 * v14];
    v20 = *((_DWORD *)v19 + 10);
    v21 = *((_DWORD *)v19 + 11);
    v22 = (unsigned int *)(v19 + 5);
    if (v20 + 1 > v21)
    {
      sub_1B21A8380(v22);
      v20 = *v22;
    }
    v23 = &v13[7 * v14];
    v24 = v23[6] + 48 * v20;
    *(_QWORD *)v24 = a3;
    *(_QWORD *)(v24 + 8) = a4;
    *(_QWORD *)(v24 + 16) = v30;
    *(_QWORD *)(v24 + 24) = a2;
    *(_QWORD *)(v24 + 32) = a6;
    *(_BYTE *)(v24 + 40) = v29;
    *(_BYTE *)(v24 + 41) = v18;
    ++*v22;
    v26 = *((_DWORD *)v23 + 14);
    v25 = *((_DWORD *)v23 + 15);
    v27 = (unsigned int *)(v23 + 7);
    if (v26 + 1 > v25)
    {
      sub_1B21A83F0(v27);
      v26 = *v27;
    }
    v28 = v13[7 * v14 + 8];
    *(_QWORD *)(v28 + 8 * v26) = _Block_copy(v16);
    ++*v27;

  }
}

void sub_1B21A6A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void prof_eventTimeRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_key_t *v10;
  pthread_key_t v11;
  pthread_key_t *v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  pthread_key_t *v17;
  _QWORD *v18;
  pthread_key_t v19;
  pthread_key_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  if (byte_1EEFD5949)
  {
    v10 = currentThreadProfiler_0();
    v11 = v10[2];
    v12 = &v10[7 * v11];
    v14 = *((_DWORD *)v12 + 11);
    v13 = (_DWORD *)v12 + 11;
    v16 = v13 - 1;
    v15 = *(v13 - 1);
    if (v15 + 1 > v14)
    {
      sub_1B21A8380(v13 - 1);
      v15 = *v16;
    }
    v17 = &v10[7 * v11];
    v19 = v17[6];
    v18 = v17 + 6;
    v20 = v19 + 48 * v15;
    *(_QWORD *)v20 = a3;
    *(_QWORD *)(v20 + 8) = a4;
    *(_QWORD *)(v20 + 16) = a5;
    *(_QWORD *)(v20 + 24) = a1;
    *(_QWORD *)(v20 + 32) = 0;
    *(_WORD *)(v20 + 40) = 0;
    v21 = *v16;
    v22 = *v16 + 1;
    *v16 = v22;
    if (v21 + 2 > *v13)
    {
      sub_1B21A8380(v13 - 1);
      v22 = *v16;
    }
    v23 = *v18 + 48 * v22;
    *(_QWORD *)v23 = a3;
    *(_QWORD *)(v23 + 8) = a4;
    *(_QWORD *)(v23 + 16) = a5;
    *(_QWORD *)(v23 + 24) = a2;
    *(_QWORD *)(v23 + 32) = 0;
    *(_WORD *)(v23 + 40) = 1;
    ++*v16;
  }
}

void prof_eventTimeRangeSmallData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  pthread_key_t *v12;
  pthread_key_t v13;
  pthread_key_t *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  pthread_key_t *v19;
  _QWORD *v20;
  pthread_key_t v21;
  pthread_key_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  if (byte_1EEFD5949)
  {
    v12 = currentThreadProfiler_0();
    v13 = v12[2];
    v14 = &v12[7 * v13];
    v16 = *((_DWORD *)v14 + 11);
    v15 = (_DWORD *)v14 + 11;
    v18 = v15 - 1;
    v17 = *(v15 - 1);
    if (v17 + 1 > v16)
    {
      sub_1B21A8380(v15 - 1);
      v17 = *v18;
    }
    v19 = &v12[7 * v13];
    v21 = v19[6];
    v20 = v19 + 6;
    v22 = v21 + 48 * v17;
    *(_QWORD *)v22 = a3;
    *(_QWORD *)(v22 + 8) = a4;
    *(_QWORD *)(v22 + 16) = a5;
    *(_QWORD *)(v22 + 24) = a1;
    *(_QWORD *)(v22 + 32) = a6;
    *(_WORD *)(v22 + 40) = 256;
    v23 = *v18;
    v24 = *v18 + 1;
    *v18 = v24;
    if (v23 + 2 > *v15)
    {
      sub_1B21A8380(v15 - 1);
      v24 = *v18;
    }
    v25 = *v20 + 48 * v24;
    *(_QWORD *)v25 = a3;
    *(_QWORD *)(v25 + 8) = a4;
    *(_QWORD *)(v25 + 16) = a5;
    *(_QWORD *)(v25 + 24) = a2;
    *(_QWORD *)(v25 + 32) = a6;
    *(_WORD *)(v25 + 40) = 257;
    ++*v18;
  }
}

void prof_eventTimeRangeBlockData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  pthread_key_t *v11;
  pthread_key_t v12;
  id v13;
  void *v14;
  BOOL v15;
  pthread_key_t *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int *v22;
  pthread_key_t *v23;
  _QWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  pthread_key_t *v30;
  uint64_t *v31;
  pthread_key_t v32;
  id v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  id v43;

  v43 = a7;
  if (byte_1EEFD5949)
  {
    v39 = a2;
    v11 = currentThreadProfiler_0();
    v12 = v11[2];
    v13 = v43;
    v14 = v13;
    if (a6)
      v15 = v13 == 0;
    else
      v15 = 0;
    v16 = &v11[7 * v12];
    v19 = *((_DWORD *)v16 + 11);
    v18 = (_DWORD *)v16 + 11;
    v17 = v19;
    v20 = v15;
    v40 = v20;
    v22 = v18 - 1;
    v21 = *(v18 - 1);
    if (v21 + 1 > v17)
    {
      sub_1B21A8380(v18 - 1);
      v21 = *v22;
    }
    v23 = &v11[7 * v12];
    v24 = v23 + 6;
    v25 = v23[6] + 48 * v21;
    *(_QWORD *)v25 = a3;
    *(_QWORD *)(v25 + 8) = a4;
    v38 = a5;
    *(_QWORD *)(v25 + 16) = a5;
    *(_QWORD *)(v25 + 24) = a1;
    *(_QWORD *)(v25 + 32) = a6;
    *(_BYTE *)(v25 + 40) = 0;
    *(_BYTE *)(v25 + 41) = v40;
    v27 = *((_DWORD *)v23 + 15);
    v26 = (_DWORD *)v23 + 15;
    ++*v22;
    v29 = v26 - 1;
    v28 = *(v26 - 1);
    if (v28 + 1 > v27)
    {
      sub_1B21A83F0(v26 - 1);
      v28 = *v29;
    }
    v30 = &v11[7 * v12];
    v32 = v30[8];
    v31 = (uint64_t *)(v30 + 8);
    *(_QWORD *)(v32 + 8 * v28) = _Block_copy(v14);
    ++*v29;

    v33 = v14;
    v34 = *v22;
    if (*v22 + 1 > *v18)
    {
      sub_1B21A8380(v22);
      v34 = *v22;
    }
    v35 = *v24 + 48 * v34;
    *(_QWORD *)v35 = a3;
    *(_QWORD *)(v35 + 8) = a4;
    *(_QWORD *)(v35 + 16) = v38;
    *(_QWORD *)(v35 + 24) = v39;
    *(_QWORD *)(v35 + 32) = a6;
    *(_BYTE *)(v35 + 40) = 1;
    *(_BYTE *)(v35 + 41) = v40;
    ++*v22;
    v36 = *v29;
    if (*v29 + 1 > *v26)
    {
      sub_1B21A83F0(v26 - 1);
      v36 = *v29;
    }
    v37 = *v31;
    *(_QWORD *)(v37 + 8 * v36) = _Block_copy(v33);
    ++*v29;

  }
}

void sub_1B21A6E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void prof_event(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_key_t *v8;
  pthread_key_t v9;
  uint64_t StatusReg;
  pthread_key_t *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;

  if (byte_1EEFD5949)
  {
    v8 = currentThreadProfiler_0();
    v9 = v8[2];
    switch(byte_1EEF652E8)
    {
      case 1:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        StatusReg = mach_absolute_time();
        break;
    }
    v11 = &v8[7 * v9];
    v12 = *((_DWORD *)v11 + 10);
    v13 = *((_DWORD *)v11 + 11);
    v14 = (unsigned int *)(v11 + 5);
    if (v12 + 1 > v13)
    {
      sub_1B21A8380(v14);
      v12 = *v14;
    }
    v15 = v8[7 * v9 + 6] + 48 * v12;
    *(_QWORD *)v15 = a2;
    *(_QWORD *)(v15 + 8) = a3;
    *(_QWORD *)(v15 + 16) = a4;
    *(_QWORD *)(v15 + 24) = StatusReg;
    *(_QWORD *)(v15 + 32) = 0;
    *(_BYTE *)(v15 + 40) = a1;
    *(_BYTE *)(v15 + 41) = 0;
    ++*v14;
  }
}

void prof_eventSmallData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_key_t *v10;
  pthread_key_t v11;
  uint64_t StatusReg;
  pthread_key_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;

  if (byte_1EEFD5949)
  {
    v10 = currentThreadProfiler_0();
    v11 = v10[2];
    switch(byte_1EEF652E8)
    {
      case 1:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        StatusReg = mach_absolute_time();
        break;
    }
    v13 = &v10[7 * v11];
    v14 = *((_DWORD *)v13 + 10);
    v15 = *((_DWORD *)v13 + 11);
    v16 = (unsigned int *)(v13 + 5);
    if (v14 + 1 > v15)
    {
      sub_1B21A8380(v16);
      v14 = *v16;
    }
    v17 = v10[7 * v11 + 6] + 48 * v14;
    *(_QWORD *)v17 = a2;
    *(_QWORD *)(v17 + 8) = a3;
    *(_QWORD *)(v17 + 16) = a4;
    *(_QWORD *)(v17 + 24) = StatusReg;
    *(_QWORD *)(v17 + 32) = a5;
    *(_BYTE *)(v17 + 40) = a1;
    *(_BYTE *)(v17 + 41) = 1;
    ++*v16;
  }
}

void prof_eventBlockData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  pthread_key_t *v11;
  pthread_key_t v12;
  uint64_t v13;
  uint64_t StatusReg;
  id v15;
  void *v16;
  BOOL v17;
  char v18;
  pthread_key_t *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  pthread_key_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  pthread_key_t v28;
  uint64_t v29;
  char v30;
  id v31;

  v31 = a6;
  if (byte_1EEFD5949)
  {
    v11 = currentThreadProfiler_0();
    v12 = v11[2];
    v30 = a1;
    v29 = a2;
    switch(byte_1EEF652E8)
    {
      case 1:
        v13 = a4;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        v13 = a4;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        v13 = a4;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        StatusReg = mach_absolute_time();
        v13 = a4;
        break;
    }
    v15 = v31;
    v16 = v15;
    if (a5)
      v17 = v15 == 0;
    else
      v17 = 0;
    v18 = v17;
    v19 = &v11[7 * v12];
    v20 = *((_DWORD *)v19 + 10);
    v21 = *((_DWORD *)v19 + 11);
    v22 = (unsigned int *)(v19 + 5);
    if (v20 + 1 > v21)
    {
      sub_1B21A8380(v22);
      v20 = *v22;
    }
    v23 = &v11[7 * v12];
    v24 = v23[6] + 48 * v20;
    *(_QWORD *)v24 = v29;
    *(_QWORD *)(v24 + 8) = a3;
    *(_QWORD *)(v24 + 16) = v13;
    *(_QWORD *)(v24 + 24) = StatusReg;
    *(_QWORD *)(v24 + 32) = a5;
    *(_BYTE *)(v24 + 40) = v30;
    *(_BYTE *)(v24 + 41) = v18;
    ++*v22;
    v26 = *((_DWORD *)v23 + 14);
    v25 = *((_DWORD *)v23 + 15);
    v27 = (unsigned int *)(v23 + 7);
    if (v26 + 1 > v25)
    {
      sub_1B21A83F0(v27);
      v26 = *v27;
    }
    v28 = v11[7 * v12 + 8];
    *(_QWORD *)(v28 + 8 * v26) = _Block_copy(v16);
    ++*v27;

  }
}

void sub_1B21A7208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void prof_beginFlame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_key_t *v6;
  pthread_key_t v7;
  uint64_t v8;
  uint64_t StatusReg;
  pthread_key_t *v10;
  _WORD *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unint64_t v18;

  if (byte_1EEFD5949)
  {
    v6 = currentThreadProfiler_0();
    v7 = v6[2];
    v8 = (uint64_t)&v6[7 * v7 + 3];
    switch(byte_1EEF652E8)
    {
      case 1:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        StatusReg = mach_absolute_time();
        break;
    }
    v10 = &v6[7 * v7];
    v13 = *((unsigned __int16 *)v10 + 38);
    v11 = (_WORD *)v10 + 38;
    v12 = v13;
    v14 = *((_DWORD *)v11 - 1);
    v15 = *(_DWORD *)v8;
    v16 = v13;
    v17 = *(_DWORD *)v8;
    if ((*(_DWORD *)v8 + 1) > *(_DWORD *)(v8 + 4))
    {
      sub_1B21A8318((unsigned int *)v8);
      v17 = *(_DWORD *)v8;
      v16 = *v11;
    }
    v18 = *(_QWORD *)(v8 + 8) + ((unint64_t)v17 << 6);
    *(_QWORD *)v18 = a1;
    *(_QWORD *)(v18 + 8) = a2;
    *(_QWORD *)(v18 + 16) = a3;
    *(_QWORD *)(v18 + 24) = StatusReg;
    *(_QWORD *)(v18 + 32) = 0;
    *(_DWORD *)(v18 + 40) = v14;
    *(_DWORD *)(v18 + 44) = v12;
    *(_QWORD *)(v18 + 48) = 0;
    *(_BYTE *)(v18 + 56) = 0;
    ++*(_DWORD *)v8;
    *((_DWORD *)v11 - 1) = v15;
    *v11 = v16 + 1;
  }
}

void prof_beginFlameSmallData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_key_t *v8;
  pthread_key_t v9;
  uint64_t v10;
  uint64_t StatusReg;
  pthread_key_t *v12;
  _WORD *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;

  if (byte_1EEFD5949)
  {
    v8 = currentThreadProfiler_0();
    v9 = v8[2];
    v10 = (uint64_t)&v8[7 * v9 + 3];
    v21 = a4;
    switch(byte_1EEF652E8)
    {
      case 1:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        StatusReg = mach_absolute_time();
        break;
    }
    v12 = &v8[7 * v9];
    v15 = *((unsigned __int16 *)v12 + 38);
    v13 = (_WORD *)v12 + 38;
    v14 = v15;
    v16 = *((_DWORD *)v13 - 1);
    v17 = *(_DWORD *)v10;
    v18 = v15;
    v19 = *(_DWORD *)v10;
    if ((*(_DWORD *)v10 + 1) > *(_DWORD *)(v10 + 4))
    {
      sub_1B21A8318((unsigned int *)v10);
      v19 = *(_DWORD *)v10;
      v18 = *v13;
    }
    v20 = *(_QWORD *)(v10 + 8) + ((unint64_t)v19 << 6);
    *(_QWORD *)v20 = a1;
    *(_QWORD *)(v20 + 8) = a2;
    *(_QWORD *)(v20 + 16) = a3;
    *(_QWORD *)(v20 + 24) = StatusReg;
    *(_QWORD *)(v20 + 32) = 0;
    *(_DWORD *)(v20 + 40) = v16;
    *(_DWORD *)(v20 + 44) = v14;
    *(_QWORD *)(v20 + 48) = v21;
    *(_BYTE *)(v20 + 56) = 1;
    ++*(_DWORD *)v10;
    *((_DWORD *)v13 - 1) = v17;
    *v13 = v18 + 1;
  }
}

void prof_beginFlameBlockData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  pthread_key_t *v10;
  pthread_key_t v11;
  uint64_t StatusReg;
  id v13;

  v9 = a5;
  if (byte_1EEFD5949)
  {
    v13 = v9;
    v10 = currentThreadProfiler_0();
    v11 = v10[2];
    switch(byte_1EEF652E8)
    {
      case 1:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        StatusReg = mach_absolute_time();
        break;
    }
    sub_1B21A7564((uint64_t)&v10[7 * v11 + 3], StatusReg, a1, a2, a3, a4, v13);
    v9 = v13;
  }

}

void sub_1B21A754C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B21A7564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *aBlock;

  v13 = a7;
  v14 = *(_DWORD *)(a1 + 48);
  v15 = *(unsigned __int16 *)(a1 + 52);
  aBlock = v13;
  if (a6)
    v16 = v13 == 0;
  else
    v16 = 0;
  v17 = v16;
  v18 = *(_DWORD *)a1;
  v19 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B21A8318((unsigned int *)a1);
    v19 = *(_DWORD *)a1;
  }
  v20 = *(_QWORD *)(a1 + 8) + ((unint64_t)v19 << 6);
  *(_QWORD *)v20 = a3;
  *(_QWORD *)(v20 + 8) = a4;
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = 0;
  *(_DWORD *)(v20 + 40) = v14;
  *(_DWORD *)(v20 + 44) = v15;
  *(_QWORD *)(v20 + 48) = a6;
  *(_BYTE *)(v20 + 56) = v17;
  ++*(_DWORD *)a1;
  v21 = *(_DWORD *)(a1 + 32);
  if (v21 + 1 > *(_DWORD *)(a1 + 36))
  {
    sub_1B21A83F0((unsigned int *)(a1 + 32));
    v21 = *(_DWORD *)(a1 + 32);
  }
  v22 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v22 + 8 * v21) = _Block_copy(aBlock);
  ++*(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 48) = v18;
  ++*(_WORD *)(a1 + 52);

}

void sub_1B21A767C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void prof_endFlame()
{
  unint64_t StatusReg;
  pthread_key_t *v1;
  pthread_key_t v2;
  pthread_key_t *v3;
  _WORD *v4;
  __int16 v5;
  int v6;
  pthread_key_t *v7;
  unint64_t v8;
  __int16 v9;

  if (byte_1EEFD5949)
  {
    if (byte_1EEF652E8 == 1)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
    }
    else if (byte_1EEF652E8 == 3)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
    }
    else
    {
      StatusReg = byte_1EEF652E8 == 2 ? _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6)) : mach_absolute_time();
    }
    v1 = currentThreadProfiler_0();
    v2 = v1[2];
    v3 = &v1[7 * v2];
    v6 = *((unsigned __int16 *)v3 + 38);
    v4 = (_WORD *)v3 + 38;
    v5 = v6;
    if (!v6
      || (v7 = &v1[7 * v2],
          v8 = v7[4] + ((unint64_t)*((unsigned int *)v7 + 18) << 6),
          *(_QWORD *)(v8 + 32) = StatusReg,
          *((_DWORD *)v7 + 18) = *(_DWORD *)(v8 + 40),
          v9 = v5 - 1,
          (*v4 = v9) == 0))
    {
      if (!byte_1EEFD5948)
      {
        v2 = ((_WORD)v2 + 1) & 0x1FF;
        v1[2] = v2;
      }
      sub_1B21A82A8((uint64_t)&v1[7 * v2 + 3]);
    }
  }
}

void prof_commit()
{
  pthread_key_t *v0;
  pthread_key_t v1;
  pthread_key_t *v2;

  if (byte_1EEFD5949)
  {
    v0 = currentThreadProfiler_0();
    v1 = v0[2];
    v2 = &v0[7 * v1];
    if (!*((_WORD *)v2 + 38) && (LODWORD(v0[7 * v1 + 5]) || *((_DWORD *)v2 + 6)))
    {
      if (!byte_1EEFD5948)
      {
        v1 = ((_WORD)v1 + 1) & 0x1FF;
        v0[2] = v1;
      }
      sub_1B21A82A8((uint64_t)&v0[7 * v1 + 3]);
    }
  }
}

void prof_setData(uint64_t a1, void *a2)
{
  id v3;
  pthread_key_t *v4;
  id v5;

  v3 = a2;
  if (byte_1EEFD5949)
  {
    v5 = v3;
    v4 = currentThreadProfiler_0();
    sub_1B21A785C((uint64_t)&v4[7 * v4[2] + 3], a1, v5);
    v3 = v5;
  }

}

void sub_1B21A7844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B21A785C(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  void (**v9)(_QWORD);
  unsigned int v10;
  uint64_t v11;
  id aBlock;

  aBlock = a3;
  v5 = *(_QWORD *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 48) << 6);
  v7 = *(_QWORD *)(v5 + 48);
  v6 = v5 + 48;
  if (v7)
    v8 = *(_BYTE *)(v6 + 8) == 0;
  else
    v8 = 0;
  if (v8)
  {
    sub_1B21A8668(a1 + 32);
    v9 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)v6 = a2;
  if (aBlock)
  {
    v10 = *(_DWORD *)(a1 + 32);
    if (v10 + 1 > *(_DWORD *)(a1 + 36))
    {
      sub_1B21A83F0((unsigned int *)(a1 + 32));
      v10 = *(_DWORD *)(a1 + 32);
    }
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v11 + 8 * v10) = _Block_copy(aBlock);
    ++*(_DWORD *)(a1 + 32);
  }
  if (v9)
    v9[2](v9);

}

void sub_1B21A792C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

pthread_key_t *prof_setLabel(pthread_key_t *result)
{
  pthread_key_t *v1;

  if (byte_1EEFD5949)
  {
    v1 = result;
    result = currentThreadProfiler_0();
    *(_QWORD *)(result[7 * result[2] + 4] + ((unint64_t)LODWORD(result[7 * result[2] + 9]) << 6)) = v1;
  }
  return result;
}

double prof_clockTicksToNanoseconds(unint64_t a1)
{
  sub_1B21A65C0();
  return *(double *)(qword_1EEFD5940 + 8) * (double)a1;
}

double prof_clockTicksToSeconds(unint64_t a1)
{
  sub_1B21A65C0();
  return *(double *)qword_1EEFD5940 * (double)a1;
}

uint64_t ProfilerGetCurrentChunkIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t ProfilerGetChunkCount()
{
  return 512;
}

uint64_t ProfilerGetFlameChunkAtIndex(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 56 * a2 + 32);
}

uint64_t ProfilerGetEventChunkAtIndex(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 56 * a2 + 48);
}

void prof_collectProfilers()
{
  sub_1B21A7A54();
  sub_1B21A86D0();
}

void sub_1B21A7A54()
{
  uint64_t v0;

  if (!qword_1EEFD5950)
  {
    v0 = operator new();
    *(_QWORD *)v0 = 0x2000000000;
    *(_QWORD *)(v0 + 8) = 0;
    sub_1B21A8600((unsigned int *)v0);
    qword_1EEFD5950 = v0;
  }
}

void sub_1B21A7AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1080C4057E67DB5);
  _Unwind_Resume(a1);
}

uint64_t prof_getAllProfilers()
{
  sub_1B21A7A54();
  return *(_QWORD *)(qword_1EEFD5950 + 8);
}

uint64_t prof_isRunning(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28698);
}

double sub_1B21A7B04(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v1 = 0;
  v2 = -1;
  do
  {
    if (v1 != *(_QWORD *)(a1 + 16))
    {
      v3 = a1 + 56 * v1;
      v4 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(v3 + 32);
        v6 = v4 << 6;
        v7 = (unint64_t *)(v5 + 24);
        v8 = -1;
        do
        {
          v10 = *v7;
          v7 += 8;
          v9 = v10;
          if (v10 < v8)
            v8 = v9;
          v6 -= 64;
        }
        while (v6);
      }
      else
      {
        v8 = -1;
      }
      v11 = a1 + 56 * v1;
      v12 = *(unsigned int *)(v11 + 40);
      if ((_DWORD)v12)
      {
        v13 = 48 * v12;
        v14 = (unint64_t *)(*(_QWORD *)(v11 + 48) + 24);
        do
        {
          v16 = *v14;
          v14 += 6;
          v15 = v16;
          if (v16 < v8)
            v8 = v15;
          v13 -= 48;
        }
        while (v13);
      }
      if (v8 < v2)
        v2 = v8;
    }
    ++v1;
  }
  while (v1 != 512);
  if (v2 == -1)
    return 0.0;
  sub_1B21A65C0();
  return *(double *)qword_1EEFD5940 * (double)v2;
}

double sub_1B21A7BDC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v1 = 0;
  v2 = 0;
  do
  {
    if (v1 != *(_QWORD *)(a1 + 16))
    {
      v3 = a1 + 56 * v1;
      v4 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = v4 << 6;
        v7 = (unint64_t *)(*(_QWORD *)(v3 + 32) + 32);
        do
        {
          v9 = *v7;
          v7 += 8;
          v8 = v9;
          if (v5 <= v9)
            v5 = v8;
          v6 -= 64;
        }
        while (v6);
      }
      else
      {
        v5 = 0;
      }
      v10 = a1 + 56 * v1;
      v11 = *(unsigned int *)(v10 + 40);
      if ((_DWORD)v11)
      {
        v12 = 48 * v11;
        v13 = (unint64_t *)(*(_QWORD *)(v10 + 48) + 24);
        do
        {
          v15 = *v13;
          v13 += 6;
          v14 = v15;
          if (v5 <= v15)
            v5 = v14;
          v12 -= 48;
        }
        while (v12);
      }
      if (v2 <= v5)
        v2 = v5;
    }
    ++v1;
  }
  while (v1 != 512);
  sub_1B21A65C0();
  return *(double *)qword_1EEFD5940 * (double)v2;
}

uint64_t prof_flameMaxDepth(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = 0;
  v2 = 0;
  do
  {
    if (v1 != *(_QWORD *)(a1 + 16))
    {
      v3 = a1 + 56 * v1;
      v4 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = v4 << 6;
        v7 = (unsigned int *)(*(_QWORD *)(v3 + 32) + 44);
        do
        {
          v9 = *v7;
          v7 += 16;
          v8 = v9;
          if (v5 <= v9)
            v5 = v8;
          v6 -= 64;
        }
        while (v6);
      }
      else
      {
        v5 = 0;
      }
      if (v2 <= v5)
        v2 = v5;
    }
    ++v1;
  }
  while (v1 != 512);
  return v2 + 1;
}

uint64_t prof_name(uint64_t a1)
{
  uint64_t result;

  result = a1 + 28704;
  if (*(char *)(a1 + 28727) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t prof_setPaused(uint64_t result)
{
  byte_1EEFD5948 = result;
  return result;
}

uint64_t prof_getPaused()
{
  return byte_1EEFD5948;
}

void prof_setEnabled(int a1)
{
  char v1;
  BOOL v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  if (byte_1EEFD5949)
    v2 = 1;
  else
    v2 = a1 == 0;
  if (!v2)
  {
    sub_1B21A7A54();
    v3 = *(unsigned int *)qword_1EEFD5950;
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(qword_1EEFD5950 + 8);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        v7 = v6 + 56 * *(_QWORD *)(v6 + 16);
        *(_DWORD *)(v7 + 72) = 0;
        *(_WORD *)(v7 + 76) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v5 -= 8;
      }
      while (v5);
    }
  }
  byte_1EEFD5949 = v1;
}

uint64_t prof_getEnabled()
{
  return byte_1EEFD5949;
}

uint64_t prof_clockReadTicks()
{
  sub_1B21A65C0();
  switch(byte_1EEF652E8)
  {
    case 1:
      return _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
    case 3:
      return _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
    case 2:
      return _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
  }
  return mach_absolute_time();
}

unint64_t prof_clockTicksFromSecondsMonotonic(double a1)
{
  sub_1B21A65C0();
  return (unint64_t)(a1 / *(double *)qword_1EEFD5940) - *(_QWORD *)(qword_1EEFD5940 + 16);
}

double prof_clockTimeSeconds()
{
  double *v0;
  uint64_t StatusReg;

  sub_1B21A65C0();
  v0 = (double *)qword_1EEFD5940;
  switch(byte_1EEF652E8)
  {
    case 1:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
      break;
    case 3:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
      break;
    case 2:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
      break;
    default:
      StatusReg = mach_absolute_time();
      break;
  }
  return *v0 * (double)StatusReg;
}

void prof_registerRunloopIDLE()
{
  pthread_key_t *v0;

  v0 = currentThreadProfiler_0();
  sub_1B21A7ED4((uint64_t)v0);
}

void sub_1B21A7ED4(uint64_t a1)
{
  __CFRunLoop *Current;
  __CFRunLoopObserver *v3;

  Current = CFRunLoopGetCurrent();
  v3 = CFRunLoopObserverCreate(0, 0x20uLL, 1u, 2000000, (CFRunLoopObserverCallBack)sub_1B21A88C0, 0);
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = v3;
    CFRunLoopAddObserver(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
}

_QWORD *sub_1B21A7F44(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  __int128 v22;
  uint64_t v23;

  v4 = 0;
  v5 = a1 + 3587;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  do
  {
    sub_1B21A81F0((uint64_t)&a1[v4 + 3]);
    v4 += 7;
  }
  while (v4 != 3584);
  *(_WORD *)v5 = 0;
  *((_BYTE *)v5 + 2) = 1;
  v9 = (void **)(a1 + 3588);
  a1[3588] = 0;
  a1[3590] = 0;
  a1[3589] = 0;
  if (a2)
  {
    MEMORY[0x1B5E22CD4](a1 + 3588, a2);
  }
  else
  {
    objc_msgSend_currentThread(MEMORY[0x1E0CB3978], v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_name(v10, v11, v12, v13);
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v18 = (const char *)objc_msgSend_UTF8String(v14, v15, v16, v17);

    if (v18)
    {
      if (qword_1EEFD5950)
        v19 = *(unsigned int *)qword_1EEFD5950;
      else
        v19 = 0;
      if (*v18)
        v20 = v18;
      else
        v20 = "Thread";
      sub_1B21A8130("%s [%d]", (uint64_t)v20, v19, &v22);
      if (*((char *)v5 + 31) < 0)
        operator delete(*v9);
      *(_OWORD *)v9 = v22;
      a1[3590] = v23;
    }
  }
  return a1;
}

void sub_1B21A8074(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t i;

  if (*(char *)(v3 + 31) < 0)
    operator delete(*v2);
  for (i = 28640; i != -32; i -= 56)
    sub_1B21A80E8(v1 + i);
  _Unwind_Resume(a1);
}

uint64_t sub_1B21A80E8(uint64_t a1)
{
  sub_1B21A8470((unsigned int *)(a1 + 32));
  free(*(void **)(a1 + 40));
  *(_DWORD *)(a1 + 16) = 0;
  free(*(void **)(a1 + 24));
  *(_DWORD *)a1 = 0;
  free(*(void **)(a1 + 8));
  return a1;
}

void sub_1B21A8130(char *__format@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  size_t v9;
  char *v10;

  v8 = snprintf(0, 0, __format, a2, a3);
  if (v8 < 0)
  {
    sub_1B1970F28(a4, "");
  }
  else
  {
    v9 = (v8 + 1);
    v10 = (char *)malloc_type_malloc(v9, 0xC1922019uLL);
    snprintf(v10, v9, __format, a2, a3);
    sub_1B21A84B8(a4, v10, &v10[v9 - 1], v9 - 1);
    free(v10);
  }
}

uint64_t sub_1B21A81F0(uint64_t a1)
{
  *(_QWORD *)a1 = 0x20000000000;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1B21A8318((unsigned int *)a1);
  *(_QWORD *)(a1 + 16) = 0x20000000000;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1B21A8380((unsigned int *)(a1 + 16));
  *(_QWORD *)(a1 + 32) = 0x2000000000;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1B21A83F0((unsigned int *)(a1 + 32));
  sub_1B21A82A8(a1);
  return a1;
}

void sub_1B21A8260(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;

  v3 = v2;
  sub_1B21A8470(v3);
  free(*(void **)(v1 + 40));
  *(_DWORD *)(v1 + 16) = 0;
  free(*(void **)(v1 + 24));
  *(_DWORD *)v1 = 0;
  free(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B21A82A8(uint64_t a1)
{
  unsigned int *v2;
  unint64_t v3;

  v2 = (unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
  {
    v3 = 0;
    do
      (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v3++) + 16))();
    while (v3 < *(unsigned int *)(a1 + 32));
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1B21A8470(v2);
  *(_DWORD *)(a1 + 48) = -1;
  *(_WORD *)(a1 + 52) = 0;
}

void sub_1B21A8318(unsigned int *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)*((_QWORD *)a1 + 1);
  v3 = 2 * a1[1];
  v4 = malloc_type_malloc(v3 << 6, 0x10D00407BA5AEB2uLL);
  memcpy(v4, v2, (unint64_t)*a1 << 6);
  *((_QWORD *)a1 + 1) = v4;
  a1[1] = v3;
  free(v2);
}

void sub_1B21A8380(unsigned int *a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)*((_QWORD *)a1 + 1);
  v3 = 2 * a1[1];
  v4 = malloc_type_malloc(48 * v3, 0x10D0040BB2815FCuLL);
  memcpy(v4, v2, 48 * *a1);
  *((_QWORD *)a1 + 1) = v4;
  a1[1] = v3;
  free(v2);
}

void sub_1B21A83F0(unsigned int *a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (void *)*((_QWORD *)a1 + 1);
  v3 = 2 * a1[1];
  v4 = malloc_type_malloc(8 * v3, 0x80040B8603338uLL);
  if (*a1)
  {
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)a1 + 1);
      v7 = *(_QWORD *)(v6 + 8 * v5);
      *(_QWORD *)(v6 + 8 * v5) = 0;
      v4[v5++] = v7;
    }
    while (v5 < *a1);
  }
  *((_QWORD *)a1 + 1) = v4;
  a1[1] = v3;
  free(v2);
}

void sub_1B21A8470(unsigned int *a1)
{
  unint64_t v2;

  if (*a1)
  {
    v2 = 0;
    do

    while (v2 < *a1);
  }
  *a1 = 0;
}

_QWORD *sub_1B21A84B8(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void sub_1B21A8558(uint64_t a1)
{
  __CFRunLoopObserver *v2;

  v2 = *(__CFRunLoopObserver **)(a1 + 8);
  if (v2)
  {
    CFRunLoopObserverInvalidate(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_BYTE *)(a1 + 28698) = 0;
}

void sub_1B21A858C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;

  os_unfair_lock_lock(&stru_1EEF652EC);
  sub_1B21A65C0();
  sub_1B21A7A54();
  v2 = qword_1EEFD5950;
  v3 = *a1;
  v4 = *(_DWORD *)qword_1EEFD5950;
  v5 = *(_DWORD *)qword_1EEFD5950 + 1;
  if (v5 > *(_DWORD *)(qword_1EEFD5950 + 4))
  {
    sub_1B21A8600((unsigned int *)qword_1EEFD5950);
    v4 = *(_DWORD *)v2;
    v5 = *(_DWORD *)v2 + 1;
  }
  *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v4) = *v3;
  *(_DWORD *)v2 = v5;
  os_unfair_lock_unlock(&stru_1EEF652EC);
}

void sub_1B21A8600(unsigned int *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)*((_QWORD *)a1 + 1);
  v3 = 2 * a1[1];
  v4 = malloc_type_malloc(8 * v3, 0x2004093837F09uLL);
  memcpy(v4, v2, 8 * *a1);
  *((_QWORD *)a1 + 1) = v4;
  a1[1] = v3;
  free(v2);
}

id sub_1B21A8668(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;

  v2 = *(_DWORD *)a1 - 1;
  v3 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 8) + 8 * v2));

  --*(_DWORD *)a1;
  v4 = _Block_copy(v3);

  return v4;
}

void sub_1B21A86D0()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t *v2;
  double v3;
  double v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock(&stru_1EEF652F0);
  v0 = (unsigned int *)qword_1EEFD5950;
  v1 = *(unsigned int *)qword_1EEFD5950;
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(qword_1EEFD5950 + 8);
    v3 = INFINITY;
    do
    {
      if (*(_BYTE *)(*v2 + 28698))
      {
        v4 = sub_1B21A7B04(*v2);
        if (v4 < v3)
          v3 = v4;
        v0 = (unsigned int *)qword_1EEFD5950;
        v1 = *(unsigned int *)qword_1EEFD5950;
      }
      ++v2;
      v5 = (uint64_t *)*((_QWORD *)v0 + 1);
    }
    while (v2 != &v5[v1]);
    if (v1)
    {
      v6 = -(uint64_t)v5;
      do
      {
        v7 = *v5;
        if (!*(_BYTE *)(*v5 + 28698))
        {
          v8 = sub_1B21A7BDC(*v5);
          v0 = (unsigned int *)qword_1EEFD5950;
          if (v8 < v3)
          {
            v9 = *(_DWORD *)qword_1EEFD5950 - 1;
            *(_DWORD *)qword_1EEFD5950 = v9;
            v10 = *((_QWORD *)v0 + 1) + 8 * v9;
            if (v5 != (uint64_t *)v10)
              memmove(v5, v5 + 1, v6 + v10);
            v11 = sub_1B21A87FC(v7);
            MEMORY[0x1B5E22E18](v11, 0x10B2C401994A623);
            v0 = (unsigned int *)qword_1EEFD5950;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while ((unint64_t)v5 < *((_QWORD *)v0 + 1) + 8 * (unint64_t)*v0);
    }
  }
  os_unfair_lock_unlock(&stru_1EEF652F0);
}

uint64_t sub_1B21A87FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (MEMORY[0xFFFFFC088] != *(_QWORD *)(qword_1EEFD5940 + 16)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_1B21A88FC();
  }
  if (*(char *)(a1 + 28727) < 0)
    operator delete(*(void **)(a1 + 28704));
  v2 = 0;
  v3 = a1 + 28640;
  do
  {
    sub_1B21A8470((unsigned int *)(a1 + v2 + 28672));
    free(*(void **)(a1 + v2 + 28680));
    *(_DWORD *)(v3 + v2 + 16) = 0;
    free(*(void **)(a1 + v2 + 28664));
    *(_DWORD *)(v3 + v2) = 0;
    free(*(void **)(a1 + v2 + 28648));
    v2 -= 56;
  }
  while (v2 != -28672);
  return a1;
}

void sub_1B21A88C0()
{
  pthread_key_t *v0;
  pthread_key_t v1;

  v0 = currentThreadProfiler_0();
  v1 = v0[2];
  if (!byte_1EEFD5948)
  {
    v1 = ((_WORD)v1 + 1) & 0x1FF;
    v0[2] = v1;
  }
  sub_1B21A82A8((uint64_t)&v0[7 * v1 + 3]);
}

void sub_1B21A88FC()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1B178D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "!!! Clock offset inconsistency, computer went to sleep during profiling, profiling timing are invalid. !!!\n", v0, 2u);
}

uint64_t vfx_counters_get_default_ring_capacity()
{
  return 120;
}

uint64_t vfx_counters_create(int a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  __int128 v9;

  v2 = operator new();
  *(_QWORD *)(v2 + 32) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 100) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_DWORD *)(v2 + 116) = a1;
  v3 = sub_1B17F7D88(v2 + 56, 1uLL);
  v5 = &v3[3 * v4];
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v6 = v3 + 3;
  v7 = *(char **)(v2 + 48);
  v8 = *(char **)(v2 + 40);
  if (v7 != v8)
  {
    do
    {
      v9 = *(_OWORD *)(v7 - 24);
      *(v3 - 1) = *((_QWORD *)v7 - 1);
      *(_OWORD *)(v3 - 3) = v9;
      v3 -= 3;
      v7 -= 24;
    }
    while (v7 != v8);
    v7 = *(char **)(v2 + 40);
  }
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = v6;
  *(_QWORD *)(v2 + 56) = v5;
  if (v7)
    operator delete(v7);
  *(_QWORD *)(v2 + 48) = v6;
  sub_1B1978568(v2 + 88, *(unsigned int *)(v2 + 116) + ((uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 3));
  return v2;
}

uint64_t vfx_counters_null()
{
  return 0;
}

BOOL vfx_counters_is_null(uint64_t a1)
{
  return a1 == 0;
}

_QWORD *vfx_counters_destroy(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;

  if (result)
  {
    v1 = result;
    v2 = result[5];
    if (result[6] != v2)
    {
      v3 = 0;
      v4 = 1;
      do
      {
        v5 = 3 * v3;
        free(*(void **)(v2 + 24 * v3));
        v2 = v1[5];
        v6 = v1[6];
        *(_QWORD *)(v2 + 8 * v5) = 0;
        v3 = v4;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v6 - v2) >> 3) > v4++);
    }
    v8 = (void *)v1[11];
    if (v8)
    {
      v1[12] = v8;
      operator delete(v8);
    }
    v9 = (void *)v1[8];
    if (v9)
    {
      v1[9] = v9;
      operator delete(v9);
    }
    v10 = (void *)v1[5];
    if (v10)
    {
      v1[6] = v10;
      operator delete(v10);
    }
    sub_1B185B888((uint64_t)v1);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

uint64_t vfx_counters_push_frame(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;

  if (result)
  {
    *(_DWORD *)(result + 112) = a2;
    v3 = *(_QWORD *)(result + 40);
    v2 = *(_QWORD *)(result + 48);
    v4 = v2 - v3;
    if (v2 != v3)
    {
      v5 = 0;
      v6 = *(_DWORD *)(result + 116);
      v7 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
      v8 = a2 % v6;
      v9 = (unsigned __int8 *)(v3 + 17);
      v10 = 1;
      do
      {
        v11 = v8 + v5 * v6;
        v12 = *v9;
        v9 += 24;
        if (v12 == 1)
        {
          v13 = *(_QWORD *)(result + 88);
          if (v8 < 1)
            *(_QWORD *)(v13 + 8 * v11) = *(_QWORD *)(v13 + 8 * (v6 - 1 + v11));
          else
            *(_QWORD *)(v13 + 8 * v11) = *(_QWORD *)(v13 + 8 * v11 - 8);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(result + 88) + 8 * v11) = 0;
        }
        ++v5;
      }
      while (v7 > v10++);
    }
  }
  return result;
}

uint64_t vfx_counters_add_counter(uint64_t a1, const char *a2, char a3, char a4, unsigned int a5)
{
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v34;
  unsigned int *v35;

  if (!a1)
    return 0;
  LOBYTE(v10) = *a2;
  if (*a2)
  {
    v11 = 0;
    v12 = 63689;
    v13 = 1;
    do
    {
      v11 = v12 * v11 + (char)v10;
      v12 *= 378551;
      v10 = a2[v13++];
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  v34 = v11;
  v15 = sub_1B21A9290((_QWORD *)a1, &v34);
  if (v15)
    return *((unsigned int *)v15 + 5);
  v16 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 64) == v16)
  {
    v17 = *(_QWORD *)(a1 + 56);
    v19 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD **)(a1 + 48);
    v14 = ((uint64_t)v18 - v19) / 24;
    if ((unint64_t)v18 >= v17)
    {
      if ((unint64_t)(v14 + 1) > 0xAAAAAAAAAAAAAAALL)
        abort();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v19) >> 3);
      v22 = 2 * v21;
      if (2 * v21 <= v14 + 1)
        v22 = v14 + 1;
      if (v21 >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)sub_1B17F7D88(a1 + 56, v23);
      else
        v24 = 0;
      v25 = &v24[24 * v14];
      v26 = &v24[24 * v23];
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = 0;
      v20 = v25 + 24;
      v28 = *(char **)(a1 + 40);
      v27 = *(char **)(a1 + 48);
      if (v27 != v28)
      {
        do
        {
          v29 = *(_OWORD *)(v27 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v27 - 1);
          *(_OWORD *)(v25 - 24) = v29;
          v25 -= 24;
          v27 -= 24;
        }
        while (v27 != v28);
        v27 = *(char **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = v25;
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v18 = 0;
      v18[1] = 0;
      v20 = v18 + 3;
      v18[2] = 0;
    }
    *(_QWORD *)(a1 + 48) = v20;
  }
  else
  {
    v14 = *(unsigned int *)(v16 - 4);
    *(_QWORD *)(a1 + 72) = v16 - 4;
  }
  v30 = strdup(a2);
  v31 = *(_QWORD *)(a1 + 40) + 24 * v14;
  *(_QWORD *)v31 = v30;
  *(_DWORD *)(v31 + 8) = 0;
  v32 = v34 | 0xFF000000;
  if (a5)
    v32 = a5;
  *(_DWORD *)(v31 + 12) = v32;
  *(_BYTE *)(v31 + 16) = a4;
  *(_BYTE *)(v31 + 17) = a3;
  v35 = &v34;
  *((_DWORD *)sub_1B21A9344(a1, &v34, (uint64_t)&unk_1B22458B0, &v35) + 5) = v14;
  sub_1B1978568(a1 + 88, *(unsigned int *)(a1 + 116) + ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3));
  return v14;
}

void vfx_counters_remove_counter(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  int v23;

  if (a1)
  {
    v4 = a2;
    v5 = *(_BYTE **)(a1[5] + 24 * a2);
    LOBYTE(v6) = *v5;
    if (*v5)
    {
      v7 = 0;
      v8 = 63689;
      v9 = 1;
      do
      {
        v7 = v8 * v7 + (char)v6;
        v8 *= 378551;
        v6 = v5[v9++];
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v23 = v7;
    sub_1B21A9564(a1, (unsigned int *)&v23);
    v10 = 3 * v4;
    free(*(void **)(a1[5] + 8 * v10));
    *(_QWORD *)(a1[5] + 8 * v10) = 0;
    v11 = a1[10];
    v12 = (char *)a1[9];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)a1[8];
      v15 = (v12 - v14) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        abort();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_1B17F7E58((uint64_t)(a1 + 10), v18);
        v14 = (char *)a1[8];
        v12 = (char *)a1[9];
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      v21 = &v19[4 * v18];
      *(_DWORD *)v20 = a2;
      v13 = v20 + 4;
      while (v12 != v14)
      {
        v22 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v22;
        v20 -= 4;
      }
      a1[8] = v20;
      a1[9] = v13;
      a1[10] = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v12 = a2;
      v13 = v12 + 4;
    }
    a1[9] = v13;
  }
}

double vfx_counters_update(uint64_t a1, unsigned int a2, double result)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v3 = *(_DWORD *)(a1 + 112) % *(_DWORD *)(a1 + 116) + *(_DWORD *)(a1 + 116) * a2;
    v4 = *(_QWORD *)(a1 + 88);
    result = *(double *)(v4 + 8 * v3) + result;
    *(double *)(v4 + 8 * v3) = result;
    v5 = *(_QWORD *)(a1 + 40) + 24 * a2;
    ++*(_DWORD *)(v5 + 8);
  }
  return result;
}

double vfx_counters_update_with_frame(uint64_t a1, unsigned int a2, unint64_t a3, double result)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    if (a3 == -1)
      a3 = *(unsigned int *)(a1 + 112);
    v4 = a3 % *(unsigned int *)(a1 + 116) + *(_DWORD *)(a1 + 116) * a2;
    v5 = *(_QWORD *)(a1 + 88);
    result = *(double *)(v5 + 8 * v4) + result;
    *(double *)(v5 + 8 * v4) = result;
    v6 = *(_QWORD *)(a1 + 40) + 24 * a2;
    ++*(_DWORD *)(v6 + 8);
  }
  return result;
}

unint64_t vfx_counters_get_count(unint64_t result)
{
  if (result)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 48) - *(_QWORD *)(result + 40)) >> 3);
  return result;
}

void vfx_counters_enumerate_counters(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void (**v7)(id, _QWORD);

  v7 = a2;
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 48);
    if (v3 != v4)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if (*(_QWORD *)(v4 + 24 * v5))
        {
          v7[2](v7, v6);
          v4 = *(_QWORD *)(a1 + 40);
          v3 = *(_QWORD *)(a1 + 48);
        }
        v5 = (v6 + 1);
        v6 = v5;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3) > v5);
    }
  }

}

void sub_1B21A9090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double vfx_counters_get_value(uint64_t a1, int a2, unint64_t a3)
{
  if (!a1)
    return 0.0;
  if (a3 == -1)
    a3 = *(unsigned int *)(a1 + 112);
  return *(double *)(*(_QWORD *)(a1 + 88) + 8 * (int)(a3 % *(unsigned int *)(a1 + 116) + *(_DWORD *)(a1 + 116) * a2));
}

uint64_t vfx_counters_get_values(uint64_t result, unsigned int a2, _QWORD *a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (result)
  {
    v4 = *(_DWORD *)(result + 116);
    LODWORD(v5) = *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a2 + 8);
    if (v4 < v5)
      LODWORD(v5) = *(_DWORD *)(result + 116);
    if (a3)
    {
      if (v5 >= a4)
        v5 = a4;
      else
        v5 = v5;
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = *(_DWORD *)(result + 112) - v5;
        v8 = v5;
        do
        {
          *a3++ = *(_QWORD *)(v6 + 8 * (int)(v7 % v4 + v4 * a2));
          ++v7;
          --v8;
        }
        while (v8);
      }
    }
    return v5;
  }
  return result;
}

uint64_t vfx_counters_get_color(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24 * a2 + 12);
}

uint64_t vfx_counters_update_color(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a2 + 12) = a3;
  return result;
}

uint64_t vfx_counters_get_desc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD v20[2];

  v3 = a2;
  v20[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (double *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFF0));
  result = vfx_counters_get_values(v8, v9, v7, v10);
  if ((_DWORD)result)
  {
    v12 = 0.0;
    v13 = -INFINITY;
    v14 = INFINITY;
    v15 = result;
    do
    {
      v16 = *v7++;
      v17 = v16;
      if (v16 < v14)
        v14 = v17;
      if (v13 < v17)
        v13 = v17;
      v12 = v12 + v17;
      --v15;
    }
    while (v15);
    v18 = v12 / (double)result;
  }
  else
  {
    v13 = 0.0;
    v14 = 0.0;
    v18 = 0.0;
  }
  v19 = *(_QWORD *)(a1 + 40) + 24 * v3;
  *(_QWORD *)a3 = *(_QWORD *)v19;
  *(double *)(a3 + 8) = v14;
  *(double *)(a3 + 16) = v13;
  *(double *)(a3 + 24) = v18;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v19 + 12);
  *(_WORD *)(a3 + 36) = *(_WORD *)(v19 + 16);
  return result;
}

uint64_t *sub_1B21A9290(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_1B21A9344(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1B179C4B4(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1B21A9550(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B21A9564(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = sub_1B21A9290(a1, a2);
  if (result)
  {
    sub_1B179C954(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

Swift::Void __swiftcall vfx_counters.add(_:_:)(Swift::UInt32 a1, Swift::Int a2)
{
  uint64_t v2;

  vfx_counters_update(v2, a1, (double)a2);
}

Swift::Double __swiftcall vfx_counters.value(of:)(Swift::UInt32 of)
{
  uint64_t v1;

  return vfx_counters_get_value(v1, of, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t vfx_counters.values(of:)(unsigned int a1, uint64_t a2)
{
  uint64_t values;
  uint64_t v5;

  values = vfx_counters_get_values(a2, a1, 0, 0);
  if (values < 1)
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v5 = sub_1B2228B0C();
    *(_QWORD *)(v5 + 16) = values;
  }
  *(_QWORD *)(v5 + 16) = vfx_counters_get_values(a2, a1, (_QWORD *)(v5 + 32), values);
  return v5;
}

uint64_t vfx_counters.addCounter(name:scope:kind:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_1B22287D0();
  v9 = vfx_counters_add_counter(a5, (const char *)(v8 + 32), a3, a4, 0);
  swift_release();
  return v9;
}

uint64_t vfx_counters.addCounter(name:scope:kind:color:)(const char *a1, uint64_t a2, uint64_t a3, char a4, char a5, unsigned int a6, uint64_t a7)
{
  return vfx_counters_add_counter(a7, a1, a4, a5, a6);
}

uint64_t sub_1B21A96BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_QWORD *)a2 = a1;
  *(_DWORD *)(a2 + 8) = vfx_counters_add_counter(a1, "Draw Call", 0, 1, 0);
  *(_DWORD *)(a2 + 12) = vfx_counters_add_counter(a1, "Indirect Draw Call", 0, 1, 0);
  result = vfx_counters_add_counter(a1, "Primitive Count", 0, 1, 0);
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

void sub_1B21AAF70(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = 0;
  v5 = a1 + 1344;
  v31 = a1 + 1344;
  do
  {
    v29 = a1 + 8 * v4;
    v6 = *(_QWORD *)(v29 + 4144);
    if (v6)
    {
      v7 = 0;
      v8 = 0xFFFFFFFFLL;
      do
      {
        if ((v6 & 1) != 0)
        {
          if (v8 >= v7)
            v9 = v7;
          else
            v9 = v8;
          if ((v6 & 2) == 0)
          {
            v10 = (v7 - v9 + 1);
            v11 = (v4 << 6) + v9;
            if (v10 < 2)
            {
              v15 = a1 + 8 * v11;
              objc_msgSend_setVertexTexture_atIndex_(a2, (const char *)a2, *(_QWORD *)(v15 + 1344), v11);

              *(_QWORD *)(v15 + 1344) = 0;
            }
            else
            {
              objc_msgSend_setVertexTextures_withRange_(a2, (const char *)a2, v31 + 8 * v11, v11, (v7 - v9 + 1));
              v12 = 0;
              v13 = v8;
              if (v7 < v8)
                v13 = v7;
              v14 = v5 + 8 * v13;
              do
              {

                *(_QWORD *)(v14 + 8 * v12++) = 0;
              }
              while (v12 < v10);
            }
            v9 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          v9 = v8;
        }
        ++v7;
        v8 = v9;
        v16 = v6 >= 2;
        v6 >>= 1;
      }
      while (v16);
    }
    *(_QWORD *)(v29 + 4144) = 0;
    ++v4;
    v5 += 512;
  }
  while (v4 != 2);
  v17 = 0;
  v18 = a1 + 2992;
  do
  {
    v30 = a1 + 8 * v17;
    v19 = *(_QWORD *)(v30 + 4160);
    if (v19)
    {
      v20 = 0;
      v21 = 0xFFFFFFFFLL;
      do
      {
        if ((v19 & 1) != 0)
        {
          if (v21 >= v20)
            v22 = v20;
          else
            v22 = v21;
          if ((v19 & 2) == 0)
          {
            v23 = (v20 - v22 + 1);
            v24 = (v17 << 6) + v22;
            if (v23 < 2)
            {
              v28 = a1 + 8 * v24;
              objc_msgSend_setFragmentTexture_atIndex_(a2, (const char *)a2, *(_QWORD *)(v28 + 2992), v24);

              *(_QWORD *)(v28 + 2992) = 0;
            }
            else
            {
              objc_msgSend_setFragmentTextures_withRange_(a2, (const char *)a2, a1 + 2992 + 8 * v24, v24, (v20 - v22 + 1));
              v25 = 0;
              v26 = v21;
              if (v20 < v21)
                v26 = v20;
              v27 = v18 + 8 * v26;
              do
              {

                *(_QWORD *)(v27 + 8 * v25++) = 0;
              }
              while (v25 < v23);
            }
            v22 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          v22 = v21;
        }
        ++v20;
        v21 = v22;
        v16 = v19 >= 2;
        v19 >>= 1;
      }
      while (v16);
    }
    *(_QWORD *)(v30 + 4160) = 0;
    ++v17;
    v18 += 512;
  }
  while (v17 != 2);
  *(_WORD *)(a1 + 4176) &= ~0x100u;
}

void sub_1B21AB2F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if ((*(_WORD *)(a1 + 4176) & 0x100) != 0)
  {
    v2 = 0;
    v3 = a1 + 1344;
    do
    {
      v4 = *(void **)(v3 + v2);
      if (v4)

      v2 += 8;
    }
    while (v2 != 1024);
    v5 = 0;
    v6 = a1 + 2992;
    do
    {
      v7 = *(void **)(v6 + v5);
      if (v7)

      v5 += 8;
    }
    while (v5 != 1024);
  }
}

BOOL operator==(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

{
  return *a1 == *a2;
}

BOOL operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;

  v2 = 0;
  while (1)
  {
    v3 = (double *)(a2 + v2);
    if (*(double *)(a1 + v2) != *(double *)(a2 + v2)
      || *(double *)(a1 + v2 + 8) != v3[1]
      || *(double *)(a1 + v2 + 16) != v3[2]
      || *(double *)(a1 + v2 + 24) != v3[3])
    {
      break;
    }
    v2 += 32;
    if (v2 == 256)
    {
      if (*(double *)(a1 + 256) == *(double *)(a2 + 256)
        && *(_DWORD *)(a1 + 264) == *(_DWORD *)(a2 + 264)
        && *(unsigned __int8 *)(a1 + 268) == *(unsigned __int8 *)(a2 + 268)
        && *(unsigned __int8 *)(a1 + 269) == *(unsigned __int8 *)(a2 + 269)
        && *(unsigned __int8 *)(a1 + 270) == *(unsigned __int8 *)(a2 + 270)
        && *(unsigned __int8 *)(a1 + 271) == *(unsigned __int8 *)(a2 + 271)
        && *(unsigned __int8 *)(a1 + 272) == *(unsigned __int8 *)(a2 + 272)
        && *(unsigned __int8 *)(a1 + 273) == *(unsigned __int8 *)(a2 + 273)
        && *(unsigned __int8 *)(a1 + 274) == *(unsigned __int8 *)(a2 + 274)
        && *(unsigned __int8 *)(a1 + 275) == *(unsigned __int8 *)(a2 + 275)
        && *(unsigned __int8 *)(a1 + 276) == *(unsigned __int8 *)(a2 + 276)
        && *(unsigned __int8 *)(a1 + 277) == *(unsigned __int8 *)(a2 + 277)
        && *(unsigned __int8 *)(a1 + 278) == *(unsigned __int8 *)(a2 + 278))
      {
        return *(unsigned __int8 *)(a1 + 279) == *(unsigned __int8 *)(a2 + 279);
      }
      return 0;
    }
  }
  return 0;
}

uint64_t sub_1B21AB51C(uint64_t result, _BYTE *a2)
{
  char v2;
  unsigned __int8 *v3;
  __int16 v4;
  int v5;

  *(_QWORD *)result = off_1E63D0708;
  v2 = *a2;
  if (*a2)
  {
    v3 = a2 + 1;
    v4 = -25147;
    do
    {
      v4 = 403 * (v4 ^ v2);
      v5 = *v3++;
      v2 = v5;
    }
    while (v5);
  }
  else
  {
    v4 = -25147;
  }
  *(_WORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void sub_1B21AB56C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

void sub_1B21AB578(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

uint64_t sub_1B21AB584()
{
  return 0;
}

uint64_t CFX::RG::ResourceIdentifier::ResourceIdentifier(uint64_t this, __int16 a2, __int16 a3, int a4)
{
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(_DWORD *)(this + 4) = a4;
  return this;
}

{
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(_DWORD *)(this + 4) = a4;
  return this;
}

uint64_t sub_1B21AB5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD v8[4];
  unsigned __int8 v9;
  uint64_t v10;

  v10 = a3;
  prof_beginFlame((uint64_t)"_sortSubgraphDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 79);
  v9 = 1;
  v5 = *(unsigned int **)(a1 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = &v10;
  v8[3] = &v9;
  CStackAllocatorPushFrame(v5);
  sub_1B21B735C(v8);
  CStackAllocatorPopFrame((uint64_t)v5);
  v6 = v9;
  prof_endFlame();
  return v6;
}

void sub_1B21AB630(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphContext::RenderGraphContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = CScratchAllocatorCreate(1024);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = CStackAllocatorCreate(1024);
  v6 = operator new();
  CFX::GPUResourceManager::GPUResourceManager(v6, a2, a3);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = operator new();
  sub_1B17C8454(v7, 32);
  *(_QWORD *)(a1 + 32) = v7;
  sub_1B17C8454(a1 + 40, 32);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  sub_1B21B7A14(a1 + 104, 32);
  sub_1B21B7AE4(a1 + 136, 32);
  sub_1B21B7BB4(a1 + 168, 32);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 225) = 0x100010101010101;
  return a1;
}

void sub_1B21AB754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  sub_1B21B7C80(v6);
  sub_1B21B7C80(v5);
  sub_1B21B7CBC(v3);
  if (*(_DWORD *)(v1 + 76))
    free(*(void **)(v1 + 80));
  sub_1B21B7C80(v2);
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraphContext::~RenderGraphContext(CFX::RG::RenderGraphContext *this)
{
  uint64_t v2;
  int **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFX::GPUResourceManager *v7;

  v2 = *((unsigned int *)this + 18);
  if ((_DWORD)v2)
  {
    v3 = (int **)*((_QWORD *)this + 10);
    v4 = 8 * v2;
    do
    {
      CScratchAllocatorDestroy(*v3++);
      v4 -= 8;
    }
    while (v4);
  }
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = sub_1B21B64C4(v5);
    MEMORY[0x1B5E22E18](v6, 0x1030C408C11463FLL);
  }
  v7 = (CFX::GPUResourceManager *)*((_QWORD *)this + 3);
  if (v7)
  {
    CFX::GPUResourceManager::~GPUResourceManager(v7);
    MEMORY[0x1B5E22E18]();
  }
  CStackAllocatorDestroy(*((_QWORD *)this + 2));
  CScratchAllocatorDestroy(*(int **)this);
  if (*((_DWORD *)this + 51))
    free(*((void **)this + 26));
  sub_1B21B7D24((uint64_t)this + 168);
  sub_1B21B7C80((uint64_t)this + 136);
  sub_1B21B7C80((uint64_t)this + 104);
  sub_1B21B7CBC((unsigned int *)this + 22);
  if (*((_DWORD *)this + 19))
    free(*((void **)this + 10));
  sub_1B21B7C80((uint64_t)this + 40);
}

void sub_1B21AB8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 204))
    free(*(void **)(v1 + 208));
  sub_1B21B7D24(v1 + 168);
  sub_1B21B7C80(v1 + 136);
  sub_1B21B7C80(v1 + 104);
  sub_1B21B7CBC((unsigned int *)(v1 + 88));
  if (*(_DWORD *)(v1 + 76))
    free(*(void **)(v1 + 80));
  sub_1B21B7C80(v1 + 40);
  _Unwind_Resume(a1);
}

_QWORD *CFX::RG::RenderGraphContext::createPersistentRenderGraphBuilder@<X0>(CFX::RG::RenderGraphContext *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11[2];

  v5 = (unsigned int *)((char *)this + 72);
  v4 = *((_DWORD *)this + 18);
  if (!v4)
  {
    v11[0] = CScratchAllocatorCreate(1024);
    sub_1B17A7C40((uint64_t)v5, v11);
    v4 = *v5;
  }
  v11[0] = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v4 - 8);
  v6 = v11[0];
  v11[1] = 0;
  *((_DWORD *)this + 18) = v4 - 1;
  v7 = sub_1B21ABA14(v6, 0, v11);
  v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v7) ^ ((0x9DDFEA08EB382D69 * v7) >> 47));
  v10 = v11[0];
  sub_1B21ABA58((uint64_t)this + 40, 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)), &v10);
  *a2 = v7;
  result = (_QWORD *)operator new();
  *result = &unk_1E63D0820;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  result[4] = this;
  a2[1] = (uint64_t)result;
  return result;
}

uint64_t sub_1B21ABA14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  v4 = sub_1B179C1C0(v6, 0x148u, 8u);
  return CFX::RG::RenderGraphBuilder::RenderGraphBuilder(v4, *a3, a3[1]);
}

uint64_t sub_1B21ABA58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B21B7DC8(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *a3;
  return result;
}

void CFX::RG::RenderGraphContext::deletePersistantRenderGraph(CFX::RG::RenderGraphContext *this, CFX::RG::RenderGraphBuilder *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int i;
  uint64_t v12;
  uint64_t v14;

  v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  v4 = 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  v5 = (*((_DWORD *)this + 17) - 1) & v4;
  v6 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 2 * v5);
  if ((v6 & 2) == 0)
    goto LABEL_3;
  while (v4 != *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v5))
  {
    do
    {
LABEL_3:
      v6 >>= 1;
      ++v5;
    }
    while ((v6 & 2) == 0);
  }
  v14 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v5);
  sub_1B21ABDB4(v14, 0, a2);
  CScratchAllocatorReset(v14);
  sub_1B17A7C40((uint64_t)this + 72, &v14);
  v7 = (*((_DWORD *)this + 17) - 1) & v4;
  v8 = *((_QWORD *)this + 7);
  v9 = *(unsigned __int16 *)(v8 + 2 * v7);
  if (v9 >= 2)
  {
    v10 = 1;
    for (i = *(unsigned __int16 *)(v8 + 2 * v7); ; i >>= 1)
    {
      if ((i & 2) != 0)
      {
        v12 = (v7 + v10 - 1);
        if (v4 == *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12))
          break;
      }
      ++v10;
      if (i <= 3)
        return;
    }
    *(_WORD *)(v8 + 2 * v7) = v9 ^ (1 << v10);
    *(_WORD *)(v8 + 2 * v12) ^= 1u;
    --*((_DWORD *)this + 16);
  }
}

void sub_1B21ABDB4(int a1, _QWORD *a2, CFX::RG::RenderGraphBuilder *this)
{
  uint64_t v4;
  uint64_t v5;

  CFX::RG::RenderGraphBuilder::~RenderGraphBuilder(this);
  v5 = v4;
  if (a2)
    sub_1B179C834(a2, &v5);
}

uint64_t CFX::RG::RenderGraphContext::nextFrame(CFX::RG::RenderGraphContext *this)
{
  CFX::CrossFrameResourceManager::nextFrame(*((CFX::CrossFrameResourceManager **)this + 4));
  CFX::GPUResourceManager::nextFrame(*((id **)this + 3));
  return CScratchAllocatorReset(*(_QWORD *)this);
}

uint64_t CFX::RG::RenderGraphContext::store(uint64_t a1, __int128 *a2)
{
  sub_1B21ABE4C(a1 + 88, a2);
  return *(_QWORD *)a2;
}

void sub_1B21ABE4C(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B21B7E94((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
  }
  v5 = *a2;
  *(_OWORD *)(*(_QWORD *)(a1 + 8) + 16 * v4) = *a2;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 + 1;
}

char *CFX::RG::RenderGraphContext::release@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v6 = *(_DWORD *)(a1 + 88);
  v4 = a1 + 88;
  v5 = v6;
  v7 = *(_QWORD *)(v4 + 8);
  if (v6)
  {
    v8 = 16 * v5;
    v9 = v7 + 16 * v5;
    while (*(_QWORD *)v7 != a2)
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v7 = v9;
        break;
      }
    }
  }
  v10 = *(_QWORD *)(v7 + 8);
  *a3 = *(_QWORD *)v7;
  a3[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return sub_1B21ABF1C(v4, (char *)v7);
}

char *sub_1B21ABF1C(uint64_t a1, char *__dst)
{
  unsigned int v4;
  _BYTE *v5;

  if (*(_DWORD *)(a1 + 4))
    sub_1B19AB6B0((uint64_t)__dst);
  v4 = *(_DWORD *)a1 - 1;
  *(_DWORD *)a1 = v4;
  v5 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 16 * v4);
  if (v5 != __dst)
    memmove(__dst, __dst + 16, v5 - __dst);
  return __dst;
}

uint64_t CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  CFX::GPUResourceManager *v12;

  v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  v5 = v4;
  v6 = (*((_DWORD *)this + 33) - 1) & v4;
  v7 = *((unsigned __int16 *)this[15] + v6);
  if (v7 < 2)
    goto LABEL_5;
  while ((v7 & 2) == 0 || v4 != *((_QWORD *)this[13] + v6))
  {
    ++v6;
    v8 = v7 >= 4;
    v7 >>= 1;
    if (!v8)
      goto LABEL_5;
  }
  v12 = this[14];
  if (!v12)
  {
LABEL_5:
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorIfNeeded(this, a2);
    v6 = (*((_DWORD *)this + 33) - 1) & v5;
    v9 = *((unsigned __int16 *)this[15] + v6);
    if (v9 < 2)
      return 0;
    while ((v9 & 2) == 0 || v5 != *((_QWORD *)this[13] + v6))
    {
      ++v6;
      v10 = v9 > 3;
      v9 >>= 1;
      if (!v10)
        return 0;
    }
    v12 = this[14];
  }
  return (uint64_t)v12 + 80 * v6;
}

void CFX::RG::RenderGraphContext::resolveResourcesDescriptorIfNeeded(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  __int128 *v9;
  CFX::GPUResourceManager *v10;
  uint64_t v11;
  uint64_t v12;
  const CFX::RG::Resource **v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[5];
  const CFX::RG::Resource *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v17 = a2;
  v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  v5 = v4;
  v6 = (*((_DWORD *)this + 33) - 1) & v4;
  v7 = *((unsigned __int16 *)this[15] + v6);
  if (v7 < 2)
    goto LABEL_5;
  while ((v7 & 2) == 0 || v4 != *((_QWORD *)this[13] + v6))
  {
    ++v6;
    v8 = v7 >= 4;
    v7 >>= 1;
    if (!v8)
      goto LABEL_5;
  }
  if (!this[14])
  {
LABEL_5:
    v9 = (__int128 *)CFX::RG::Resource::textureDesc(a2);
    v24 = v9[6];
    v25 = v9[7];
    v26 = v9[8];
    v27 = v9[9];
    v20 = v9[2];
    v21 = v9[3];
    v22 = v9[4];
    v23 = v9[5];
    v18 = *v9;
    v19 = v9[1];
    if (CFX::RG::RenderGraphContext::tryResolveTextureDescriptor((uint64_t)this, &v18, v16))
    {
      v21 = v16[3];
      v22 = v16[4];
      v19 = v16[1];
      v20 = v16[2];
      v18 = v16[0];
      sub_1B21B7F90((uint64_t)(this + 13), v5, &v18);
      v10 = this[26];
      v11 = *((unsigned int *)this + 50);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = (const CFX::RG::Resource **)this[26];
        while (*v13 != a2)
        {
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            v13 = (const CFX::RG::Resource **)((char *)v10 + 8 * v11);
            break;
          }
        }
      }
      else
      {
        v13 = (const CFX::RG::Resource **)this[26];
      }
      v14 = ((char *)v13 - (char *)v10) >> 3;
      if (v14 != v11)
      {
        v15 = (v11 - 1);
        *((_DWORD *)this + 50) = v15;
        if (v14 != v15)
          memmove(v13, v13 + 1, (CFX::GPUResourceManager *)((char *)v10 + 8 * v15) - (CFX::GPUResourceManager *)v13);
      }
    }
    else
    {
      sub_1B17A7C40((uint64_t)(this + 25), &v17);
    }
  }
}

uint64_t CFX::RG::RenderGraphContext::updateResourceDescriptor(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unint64_t v4;
  __int128 *v5;
  uint64_t result;
  _OWORD v7[5];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  v5 = (__int128 *)CFX::RG::Resource::textureDesc(a2);
  v14 = v5[6];
  v15 = v5[7];
  v16 = v5[8];
  v17 = v5[9];
  v10 = v5[2];
  v11 = v5[3];
  v12 = v5[4];
  v13 = v5[5];
  v8 = *v5;
  v9 = v5[1];
  result = CFX::RG::RenderGraphContext::tryResolveTextureDescriptor((uint64_t)this, &v8, v7);
  if ((_DWORD)result)
  {
    v10 = v7[2];
    v11 = v7[3];
    v12 = v7[4];
    v8 = v7[0];
    v9 = v7[1];
    return sub_1B21B7F90((uint64_t)(this + 13), v4, &v8);
  }
  return result;
}

uint64_t CFX::RG::RenderGraphContext::computeResourceDescriptor(uint64_t a1, CFX::RG::Resource *this, _OWORD *a3)
{
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v12[10];

  v5 = (__int128 *)CFX::RG::Resource::textureDesc(this);
  v6 = v5[7];
  v12[6] = v5[6];
  v12[7] = v6;
  v7 = v5[9];
  v12[8] = v5[8];
  v12[9] = v7;
  v8 = v5[3];
  v12[2] = v5[2];
  v12[3] = v8;
  v9 = v5[5];
  v12[4] = v5[4];
  v12[5] = v9;
  v10 = v5[1];
  v12[0] = *v5;
  v12[1] = v10;
  return CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(a1, v12, a3);
}

void CFX::RG::RenderGraphContext::registerReferenceDescriptor(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CFX::RG::Resource **v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[5];
  CFX::RG::Resource *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  prof_beginFlame((uint64_t)"registerReferenceDescriptor", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 284);
  v6 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (a2 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 1)) >> 47) ^ 1);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = (*(_DWORD *)(a1 + 164) - 1) & v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v8);
  if (v9 < 2)
    goto LABEL_5;
  while ((v9 & 2) == 0 || v7 != *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v8))
  {
    ++v8;
    v10 = v9 >= 4;
    v9 >>= 1;
    if (!v10)
      goto LABEL_5;
  }
  v23 = *(_QWORD *)(a1 + 144);
  if (v23)
  {
    if (!CFX::RG::TextureDescriptorReference::operator==((unsigned __int16 *)(v23 + 160 * v8), a3))
    {
      v24 = *((_OWORD *)a3 + 6);
      v25 = *((_OWORD *)a3 + 8);
      v26 = *((_OWORD *)a3 + 9);
      v40 = *((_OWORD *)a3 + 7);
      v41 = v25;
      v42 = v26;
      v27 = *((_OWORD *)a3 + 2);
      v28 = *((_OWORD *)a3 + 4);
      v29 = *((_OWORD *)a3 + 5);
      v36 = *((_OWORD *)a3 + 3);
      v37 = v28;
      v38 = v29;
      v39 = v24;
      v30 = *((_OWORD *)a3 + 1);
      v33 = *(_OWORD *)a3;
      v34 = v30;
      v35 = v27;
      sub_1B21B829C(a1 + 136, v7, &v33);
      memset(*(void **)(a1 + 104), 255, 8 * (*(_DWORD *)(a1 + 132) + 15));
      bzero(*(void **)(a1 + 120), 2 * (*(_DWORD *)(a1 + 132) + 15));
      *(_DWORD *)(a1 + 128) = 0;
    }
  }
  else
  {
LABEL_5:
    v11 = *((_OWORD *)a3 + 6);
    v12 = *((_OWORD *)a3 + 8);
    v13 = *((_OWORD *)a3 + 9);
    v40 = *((_OWORD *)a3 + 7);
    v41 = v12;
    v42 = v13;
    v14 = *((_OWORD *)a3 + 2);
    v15 = *((_OWORD *)a3 + 4);
    v16 = *((_OWORD *)a3 + 5);
    v36 = *((_OWORD *)a3 + 3);
    v37 = v15;
    v38 = v16;
    v39 = v11;
    v17 = *((_OWORD *)a3 + 1);
    v33 = *(_OWORD *)a3;
    v34 = v17;
    v35 = v14;
    sub_1B21B829C(a1 + 136, v7, &v33);
    *(_QWORD *)&v33 = *(_QWORD *)(a1 + 16);
    *((_QWORD *)&v33 + 1) = 0x2000000000;
    *(_QWORD *)&v34 = (char *)&v34 + 8;
    v18 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v18)
    {
      v19 = *(CFX::RG::Resource ***)(a1 + 208);
      v20 = 8 * v18;
      do
      {
        v32 = *v19;
        v21 = (__int128 *)CFX::RG::Resource::textureDesc(v32);
        v49 = v21[6];
        v50 = v21[7];
        v51 = v21[8];
        v52 = v21[9];
        v45 = v21[2];
        v46 = v21[3];
        v47 = v21[4];
        v48 = v21[5];
        v43 = *v21;
        v44 = v21[1];
        if (CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(a1, &v43, v31))
        {
          v22 = CFX::GPUResourceManager::resourceHashOrRemapped(*(CFX::GPUResourceManager **)(a1 + 24), v32);
          v45 = v31[2];
          v46 = v31[3];
          v47 = v31[4];
          v43 = v31[0];
          v44 = v31[1];
          sub_1B21B7F90(a1 + 104, v22, &v43);
        }
        else
        {
          sub_1B18AE3A0(&v33, &v32);
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
    *(_DWORD *)(a1 + 200) = 0;
  }
  prof_endFlame();
}

void sub_1B21AC5F8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

unint64_t CFX::RG::ResourceIdentifier::hash(CFX::RG::ResourceIdentifier *this)
{
  unint64_t v1;

  v1 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ 1)) ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ 1)) >> 47) ^ 1);
  return 0x9DDFEA08EB382D69 * (v1 ^ (v1 >> 47));
}

BOOL CFX::RG::TextureDescriptorReference::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _BOOL8 result;

  v2 = *((unsigned __int8 *)a2 + 2);
  if (*((_BYTE *)a1 + 2))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((*((_BYTE *)a1 + 2) != 0) != (v2 != 0))
      return 0;
  }
  else if (*a1 != *a2)
  {
    return 0;
  }
  v4 = *((unsigned __int8 *)a2 + 6);
  if (*((_BYTE *)a1 + 6))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*((_BYTE *)a1 + 6) != 0) != (v4 != 0))
      return 0;
  }
  else if (a1[2] != a2[2])
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 10) && *((_BYTE *)a2 + 10))
  {
    if (a1[4] != a2[4])
      return 0;
  }
  else if ((*((_BYTE *)a1 + 10) != 0) != (*((_BYTE *)a2 + 10) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 14) && *((_BYTE *)a2 + 14))
  {
    if (a1[6] != a2[6])
      return 0;
  }
  else if ((*((_BYTE *)a1 + 14) != 0) != (*((_BYTE *)a2 + 14) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 17) && *((_BYTE *)a2 + 17))
  {
    if (*((unsigned __int8 *)a1 + 16) != *((unsigned __int8 *)a2 + 16))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 17) != 0) != (*((_BYTE *)a2 + 17) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 19) && *((_BYTE *)a2 + 19))
  {
    if (*((unsigned __int8 *)a1 + 18) != *((unsigned __int8 *)a2 + 18))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 19) != 0) != (*((_BYTE *)a2 + 19) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 21) && *((_BYTE *)a2 + 21))
  {
    if (*((unsigned __int8 *)a1 + 20) != *((unsigned __int8 *)a2 + 20))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 21) != 0) != (*((_BYTE *)a2 + 21) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 32) && *((_BYTE *)a2 + 32))
  {
    if (*((_QWORD *)a1 + 3) != *((_QWORD *)a2 + 3))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 32) != 0) != (*((_BYTE *)a2 + 32) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 48) && *((_BYTE *)a2 + 48))
  {
    if (*((_QWORD *)a1 + 5) != *((_QWORD *)a2 + 5))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 48) != 0) != (*((_BYTE *)a2 + 48) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 64) && *((_BYTE *)a2 + 64))
  {
    if (*((_QWORD *)a1 + 7) != *((_QWORD *)a2 + 7))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 64) != 0) != (*((_BYTE *)a2 + 64) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 80) && *((_BYTE *)a2 + 80))
  {
    if (*((_QWORD *)a1 + 9) != *((_QWORD *)a2 + 9))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 80) != 0) != (*((_BYTE *)a2 + 80) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 96) && *((_BYTE *)a2 + 96))
  {
    if (*((_QWORD *)a1 + 11) != *((_QWORD *)a2 + 11))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 96) != 0) != (*((_BYTE *)a2 + 96) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 112) && *((_BYTE *)a2 + 112))
  {
    if (*((_QWORD *)a1 + 13) != *((_QWORD *)a2 + 13))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 112) != 0) != (*((_BYTE *)a2 + 112) != 0))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 128) && *((_BYTE *)a2 + 128))
  {
    if (*((_QWORD *)a1 + 15) != *((_QWORD *)a2 + 15))
      return 0;
  }
  else if ((*((_BYTE *)a1 + 128) != 0) != (*((_BYTE *)a2 + 128) != 0))
  {
    return 0;
  }
  result = sub_1B21AD90C((unsigned __int8 *)a1 + 136, (unsigned __int8 *)a2 + 136);
  if (!result)
    return result;
  if (*((float *)a1 + 36) == *((float *)a2 + 36))
    return *((_QWORD *)a1 + 19) == *((_QWORD *)a2 + 19);
  return 0;
}

void CFX::RG::RenderGraphContext::clearResolvedDescriptors(void **this)
{
  memset(this[13], 255, 8 * (*((_DWORD *)this + 33) + 15));
  bzero(this[15], 2 * (*((_DWORD *)this + 33) + 15));
  *((_DWORD *)this + 32) = 0;
}

void CFX::RG::RenderGraphContext::clearReferenceDescriptors(void **this)
{
  memset(this[17], 255, 8 * (*((_DWORD *)this + 41) + 15));
  bzero(this[19], 2 * (*((_DWORD *)this + 41) + 15));
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 50) = 0;
  memset(this[13], 255, 8 * (*((_DWORD *)this + 33) + 15));
  bzero(this[15], 2 * (*((_DWORD *)this + 33) + 15));
  *((_DWORD *)this + 32) = 0;
  sub_1B21ACAD4((uint64_t)(this + 21));
}

void CFX::RG::RenderGraphContext::clearRegisteredResourceIdentifiers(CFX::RG::RenderGraphContext *this)
{
  sub_1B21ACAD4((uint64_t)this + 168);
}

void sub_1B21ACAD4(uint64_t a1)
{
  sub_1B21B7D74(*(_QWORD *)(a1 + 8), *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 28) + 15);
  memset(*(void **)a1, 255, 8 * (*(_DWORD *)(a1 + 28) + 15));
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void CFX::RG::RenderGraphContext::registerResourceIdentifier(uint64_t a1, uint64_t a2, const CFX::RG::Resource *a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v14 = a2;
  prof_beginFlame((uint64_t)"registerResourceIdentifier", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 328);
  if ((unsigned __int16)a2 != 6893
    && (unsigned __int16)a2 != 9273
    && WORD1(a2) != 6893
    && WORD1(a2) != 9273
    && HIDWORD(a2) != 6893
    && HIDWORD(a2) != 9273)
  {
    v6 = CFX::GPUResourceManager::resourceHashOrRemapped(*(CFX::GPUResourceManager **)(a1 + 24), a3);
    v7 = v6;
    v8 = (*(_DWORD *)(a1 + 196) - 1) & v6;
    v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 184) + 2 * v8);
    if (v9 < 2)
      goto LABEL_11;
    while ((v9 & 2) == 0 || v6 != *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v8))
    {
      ++v8;
      v10 = v9 >= 4;
      v9 >>= 1;
      if (!v10)
        goto LABEL_11;
    }
    v11 = *(_QWORD *)(a1 + 176);
    if (v11)
    {
      sub_1B21ACD14(v11 + 16 * v8, &v14);
    }
    else
    {
LABEL_11:
      v12 = 0;
      v13 = &v14;
      sub_1B17A378C((unsigned int *)&v12, 3, 1);
      sub_1B17A3844((uint64_t)&v12, &v14);
      sub_1B21ACD68(a1 + 168, v7, &v12);
      if (HIDWORD(v12))
        free(v13);
    }
  }
  prof_endFlame();
}

void sub_1B21ACC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

BOOL CFX::RG::ResourceIdentifier::isComplete(CFX::RG::ResourceIdentifier *this)
{
  int v1;
  int v3;
  int v6;

  v1 = *(unsigned __int16 *)this;
  if (v1 == 6893 || v1 == 9273)
    return 0;
  v3 = *((unsigned __int16 *)this + 1);
  if (v3 == 6893 || v3 == 9273)
    return 0;
  v6 = *((_DWORD *)this + 1);
  return v6 != 6893 && v6 != 9273;
}

void sub_1B21ACD14(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)a1;
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = *(_QWORD **)(a1 + 8);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 8);
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3)
    sub_1B17A3844(a1, a2);
}

uint64_t sub_1B21ACD68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  __int16 *v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;

  while (1)
  {
    v5 = *(_DWORD *)(a1 + 28);
    v6 = (v5 - 1) & a2;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2)
      break;
LABEL_6:
    v11 = v5 + 15;
    if (v11 >= (int)v6 + 496)
      v11 = v6 + 496;
    if (v6 >= v11)
    {
      LODWORD(v13) = v6;
    }
    else
    {
      v12 = (__int16 *)(v7 + 2 * v6);
      LODWORD(v13) = v6;
      while (1)
      {
        v14 = *v12++;
        if ((v14 & 1) == 0)
          break;
        LODWORD(v13) = v13 + 1;
        if (v11 == (_DWORD)v13)
          goto LABEL_34;
      }
    }
    if ((_DWORD)v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        v24 = v13;
      }
      else
      {
        do
        {
          v15 = v13;
          v16 = v13 - 14;
          if (v13 < 0xF)
            v16 = 0;
          v17 = v16 - 1;
          if (v16 <= v13)
            v18 = v13;
          else
            v18 = v16;
          v19 = 1;
          while (1)
          {
            v13 = v17 + 1;
            if (v16 <= v13)
              break;
LABEL_26:
            ++v19;
            v17 = v13;
            if ((_DWORD)v13 == v18)
              goto LABEL_33;
          }
          v20 = 1 << (v17 - v16 + 2);
          v21 = v19;
          v22 = v16;
          while (1)
          {
            v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0)
              break;
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v13)
              goto LABEL_26;
          }
          if (v13 >= v15)
          {
LABEL_33:
            *(_WORD *)(v7 + 2 * v15) ^= 1u;
            goto LABEL_34;
          }
          v24 = v13;
          v25 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v13);
          v26 = (_QWORD *)(v25 + 16 * v15);
          *v26 = 0;
          v26[1] = v26 + 2;
          sub_1B19AB630((uint64_t)v26, (_QWORD *)(v25 + 16 * v13));
          v27 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v27 + 16 * v13 + 4))
            free(*(void **)(v27 + 16 * v13 + 8));
          v7 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v15 - v23 + 1))) ^ (1 << v21);
        }
        while (v13 > (int)v6 + 14);
      }
      v29 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v24);
      *v29 = 0;
      v29[1] = v29 + 2;
      sub_1B19AB630((uint64_t)v29, a3);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a2;
      v30 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v30 + 2 * v24) |= 1u;
      result = 1;
      *(_WORD *)(v30 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_34:
    sub_1B21B85D8(a1);
  }
  v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) != a2)
  {
    ++v9;
    v10 = v8 > 3;
    v8 >>= 1;
    if (!v10)
      goto LABEL_6;
  }
  sub_1B19AB630(*(_QWORD *)(a1 + 8) + 16 * v9, a3);
  return 0;
}

uint64_t sub_1B21ACFDC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4))
    free(*(void **)(a1 + 8));
  return a1;
}

uint64_t *CFX::RG::RenderGraphContext::registeredIdentifiersForResource(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  int v10;
  const CFX::RG::Resource *v11;

  v3 = atomic_load((unsigned __int8 *)&qword_1EEFD4090);
  if ((v3 & 1) == 0)
  {
    v11 = a2;
    v10 = __cxa_guard_acquire(&qword_1EEFD4090);
    a2 = v11;
    if (v10)
    {
      qword_1EEFD4080 = 0;
      *(_QWORD *)algn_1EEFD4088 = &qword_1EEFD4090;
      __cxa_atexit((void (*)(void *))sub_1B21ACFDC, &qword_1EEFD4080, &dword_1B178D000);
      __cxa_guard_release(&qword_1EEFD4090);
      a2 = v11;
    }
  }
  v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  v5 = (*((_DWORD *)this + 49) - 1) & v4;
  v6 = *((unsigned __int16 *)this[23] + v5);
  if (v6 < 2)
  {
LABEL_6:
    v8 = 0;
  }
  else
  {
    while ((v6 & 2) == 0 || v4 != *((_QWORD *)this[21] + v5))
    {
      ++v5;
      v7 = v6 > 3;
      v6 >>= 1;
      if (!v7)
        goto LABEL_6;
    }
    v8 = (uint64_t)this[22] + 16 * v5;
  }
  if (v8)
    return (uint64_t *)v8;
  else
    return &qword_1EEFD4080;
}

uint64_t CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  int v15;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v5 = a2[7];
  v51 = a2[6];
  v52 = v5;
  v6 = a2[9];
  v53 = a2[8];
  v54 = v6;
  v7 = a2[3];
  v47 = a2[2];
  v48 = v7;
  v8 = a2[5];
  v49 = a2[4];
  v50 = v8;
  v9 = a2[1];
  v45 = *a2;
  v46 = v9;
  v41 = *(_QWORD *)(a1 + 16);
  v43 = &v44;
  v10 = 24;
  v42 = 0x800000000;
  do
  {
    CFX::RG::TextureDescriptorReference::TextureDescriptorReference((uint64_t)&v41 + v10);
    v10 += 160;
  }
  while (v10 != 1304);
  sub_1B21AD33C((uint64_t)&v41, (uint64_t)&v45);
  v11 = *((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1) == 0x1AED1AED1AEDLL)
  {
LABEL_4:
    RGTextureDescriptorMakeDefault((uint64_t)&v31);
    v12 = v34;
    a3[2] = v33;
    a3[3] = v12;
    a3[4] = v35;
    v13 = v32;
    *a3 = v31;
    a3[1] = v13;
    if ((_DWORD)v42)
    {
      v14 = (__int128 *)&v43[20 * v42 - 20];
      v15 = v42 - 1;
      do
      {
        v37 = v14[6];
        v38 = v14[7];
        v39 = v14[8];
        v40 = v14[9];
        v33 = v14[2];
        v34 = v14[3];
        v35 = v14[4];
        v36 = v14[5];
        v31 = *v14;
        v32 = v14[1];
        LODWORD(v42) = v15;
        CFX::RG::TextureDescriptorReference::partialResolveInto((uint64_t)&v31, (uint64_t)a3, *(float *)&v32);
        v14 -= 10;
        --v15;
      }
      while (v15 != -1);
    }
    return 1;
  }
  else
  {
    while (1)
    {
      v17 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v11 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ 1)) >> 47) ^ 1);
      v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      v19 = (*(_DWORD *)(a1 + 164) - 1) & v18;
      v20 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v19);
      if (v20 < 2)
        return 0;
      while ((v20 & 2) == 0 || v18 != *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v19))
      {
        ++v19;
        v21 = v20 >= 4;
        v20 >>= 1;
        if (!v21)
          return 0;
      }
      v22 = *(_QWORD *)(a1 + 144);
      if (!v22)
        return 0;
      v23 = (__int128 *)(v22 + 160 * v19);
      v24 = v23[1];
      v45 = *v23;
      v46 = v24;
      v25 = v23[2];
      v26 = v23[3];
      v27 = v23[5];
      v49 = v23[4];
      v50 = v27;
      v47 = v25;
      v48 = v26;
      v28 = v23[6];
      v29 = v23[7];
      v30 = v23[9];
      v53 = v23[8];
      v54 = v30;
      v51 = v28;
      v52 = v29;
      sub_1B21AD33C((uint64_t)&v41, (uint64_t)&v45);
      v11 = *((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1) == 0x1AED1AED1AEDLL)
        goto LABEL_4;
    }
  }
}

__n128 sub_1B21AD33C(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  char *Aligned;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(char **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (char *)CStackAllocatorAllocateAligned(*(_QWORD *)a1, 160 * v7, 8, 2);
    memcpy(Aligned, v6, 160 * *(unsigned int *)(a1 + 8));
    *(_QWORD *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    v6 = Aligned;
    v4 = *(_DWORD *)(a1 + 8);
  }
  v9 = &v6[160 * v4];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v9 + 5) = v13;
  *((_OWORD *)v9 + 2) = v11;
  *((_OWORD *)v9 + 3) = v12;
  result = *(__n128 *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  v16 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v9 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v9 + 9) = v16;
  *((__n128 *)v9 + 6) = result;
  *((_OWORD *)v9 + 7) = v15;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t CFX::RG::TextureDescriptorReference::baseReference(CFX::RG::TextureDescriptorReference *this)
{
  return *((_QWORD *)this + 19);
}

BOOL CFX::RG::ResourceIdentifier::isNull(CFX::RG::ResourceIdentifier *this)
{
  return *(_QWORD *)this == 0x1AED1AED1AEDLL;
}

void CFX::RG::TextureDescriptorReference::partialResolveInto(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_DWORD *)a1 & 0xFF0000) != 0)
    *(_WORD *)a2 = *(_DWORD *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  if ((v4 & 0xFF0000) != 0)
    *(_WORD *)(a2 + 2) = v4;
  v5 = *(_DWORD *)(a1 + 8);
  if ((v5 & 0xFF0000) != 0)
    *(_WORD *)(a2 + 4) = v5;
  v6 = *(_DWORD *)(a1 + 12);
  if ((v6 & 0xFF0000) != 0)
    *(_WORD *)(a2 + 6) = v6;
  v7 = *(unsigned __int16 *)(a1 + 16);
  if (v7 >= 0x100)
    *(_BYTE *)(a2 + 8) = v7;
  v8 = *(unsigned __int16 *)(a1 + 18);
  if (v8 >= 0x100)
    *(_BYTE *)(a2 + 9) = v8;
  v9 = *(unsigned __int16 *)(a1 + 20);
  if (v9 >= 0x100)
    *(_BYTE *)(a2 + 10) = v9;
  if (*(_BYTE *)(a1 + 32))
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 64))
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 80))
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 96))
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(a1 + 112))
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 104);
  if (*(_BYTE *)(a1 + 128))
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 120);
  if (*(_BYTE *)(a1 + 140))
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 136);
  LOWORD(a3) = *(_WORD *)a2;
  v10 = *(float *)(a1 + 144);
  v11 = v10 * (float)LODWORD(a3);
  v12 = (int)v11;
  if ((int)v11 <= 1)
    v12 = 1;
  LOWORD(v11) = *(_WORD *)(a2 + 2);
  v13 = (int)(float)(v10 * (float)LODWORD(v11));
  *(_WORD *)a2 = v12;
  if (v13 <= 1)
    v13 = 1;
  *(_WORD *)(a2 + 2) = v13;
  v14 = *(unsigned __int8 *)(a2 + 8);
  if (v14 >= 2)
  {
    v15 = vcvtms_s32_f32(log2f(fmaxf((float)v12, (float)v13))) + 1;
    if (v14 >= v15)
      v16 = v15;
    else
      v16 = v14;
    *(_BYTE *)(a2 + 8) = v16;
  }
  if (*(_BYTE *)(a2 + 9))
  {
    if (*(_BYTE *)(a2 + 9) == 1)
    {
      v17 = *(_QWORD *)(a2 + 24);
      v18 = 3;
      if (v17 != 8)
        v18 = *(_QWORD *)(a2 + 24);
      v19 = v17 == 4;
      v20 = 2;
      if (!v19)
        v20 = v18;
      *(_QWORD *)(a2 + 24) = v20;
      *(_BYTE *)(a2 + 9) = 1;
    }
    else
    {
      v21 = *(_QWORD *)(a2 + 24);
      v22 = 8;
      if (v21 != 3)
        v22 = *(_QWORD *)(a2 + 24);
      v19 = v21 == 2;
      v23 = 4;
      if (!v19)
        v23 = v22;
      *(_QWORD *)(a2 + 24) = v23;
    }
  }
}

void CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(CFX::GPUResourceManager **this, const CFX::RG::Resource **a2, const CFX::RG::Resource **a3)
{
  prof_beginFlame((uint64_t)"resolveResourcesDescriptorsIfNeeded", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 420);
  while (a2 != a3)
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorIfNeeded(this, *a2++);
  prof_endFlame();
}

void sub_1B21AD670(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphContext::setCurrentBuilder(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 216) = a2;
  return result;
}

uint64_t CFX::RG::RenderGraphContext::currentBuilder(CFX::RG::RenderGraphContext *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t CFX::RG::RenderGraphContext::optimisationParameters(CFX::RG::RenderGraphContext *this)
{
  if (*((_BYTE *)this + 231))
    *((_BYTE *)this + 229) = 0;
  return (uint64_t)this + 224;
}

{
  if (*((_BYTE *)this + 231))
    *((_BYTE *)this + 229) = 0;
  return (uint64_t)this + 224;
}

uint64_t CFX::RG::TextureDescriptorReference::TextureDescriptorReference(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_BYTE *)(this + 2) = 0;
  *(_BYTE *)(this + 4) = 0;
  *(_BYTE *)(this + 6) = 0;
  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 10) = 0;
  *(_BYTE *)(this + 12) = 0;
  *(_BYTE *)(this + 14) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_BYTE *)(this + 56) = 0;
  *(_BYTE *)(this + 64) = 0;
  *(_BYTE *)(this + 72) = 0;
  *(_BYTE *)(this + 80) = 0;
  *(_BYTE *)(this + 88) = 0;
  *(_BYTE *)(this + 96) = 0;
  *(_BYTE *)(this + 104) = 0;
  *(_BYTE *)(this + 112) = 0;
  *(_BYTE *)(this + 120) = 0;
  *(_BYTE *)(this + 128) = 0;
  *(_BYTE *)(this + 136) = 0;
  *(_BYTE *)(this + 140) = 0;
  *(_WORD *)(this + 20) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 144) = 1065353216;
  *(_QWORD *)(this + 152) = 0x1AED1AED1AEDLL;
  return this;
}

uint64_t CFX::RG::ResourceIdentifier::null(CFX::RG::ResourceIdentifier *this)
{
  return 0x1AED1AED1AEDLL;
}

uint64_t CFX::RG::TextureDescriptorReference::TextureDescriptorReference(uint64_t result, uint64_t a2, float a3)
{
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 2) = 0;
  *(_BYTE *)(result + 4) = 0;
  *(_BYTE *)(result + 6) = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 10) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 140) = 0;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(float *)(result + 144) = a3;
  *(_QWORD *)(result + 152) = a2;
  return result;
}

uint64_t CFX::RG::TextureDescriptorReference::TextureDescriptorReference(uint64_t result, uint64_t a2)
{
  int v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 2) = 0;
  *(_BYTE *)(result + 4) = 0;
  *(_BYTE *)(result + 6) = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 10) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 140) = 0;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 152) = 0x1AED1AED1AEDLL;
  *(_DWORD *)(result + 144) = 1065353216;
  *(_WORD *)result = *(_WORD *)a2;
  *(_BYTE *)(result + 2) = 1;
  *(_WORD *)(result + 4) = *(_WORD *)(a2 + 2);
  *(_BYTE *)(result + 6) = 1;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(result + 10) = 1;
  *(_WORD *)(result + 12) = *(_WORD *)(a2 + 6);
  *(_BYTE *)(result + 14) = 1;
  *(_WORD *)(result + 16) = *(unsigned __int8 *)(a2 + 8) | 0x100;
  *(_WORD *)(result + 18) = *(unsigned __int8 *)(a2 + 9) | 0x100;
  *(_WORD *)(result + 20) = *(unsigned __int8 *)(a2 + 10) | 0x100;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(result + 48) = 1;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(result + 64) = 1;
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 80) = 1;
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 96) = 1;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(result + 112) = 1;
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(result + 128) = 1;
  v2 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(result + 140) = 1;
  *(_DWORD *)(result + 136) = v2;
  *(_QWORD *)(result + 152) = 0x1AED1AED1AEDLL;
  return result;
}

BOOL sub_1B21AD90C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;

  if (a1[4])
    v2 = a2[4] == 0;
  else
    v2 = 1;
  if (v2)
    return (a1[4] != 0) == (a2[4] != 0);
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
    return a1[3] == a2[3];
  return 0;
}

BOOL CFX::RG::ResourceIdentifier::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t CFX::RG::TextureDescriptorReference::finalColor@<X0>(uint64_t a1@<X8>)
{
  return CFX::RG::TextureDescriptorReference::TextureDescriptorReference(a1, 0xEF6F57C624392439, 1.0);
}

uint64_t CFX::RG::ResourceIdentifier::finalColor(CFX::RG::ResourceIdentifier *this)
{
  return 0xEF6F57C624392439;
}

__n128 CFX::RG::TextureDescriptorReference::withWidth@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)a3 = a2;
  *(_BYTE *)(a3 + 2) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withHeight@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 4) = a2;
  *(_BYTE *)(a3 + 6) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withDepth@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 10) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withArraylength@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 12) = a2;
  *(_BYTE *)(a3 + 14) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withMipmaplevelcount@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, _OWORD *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  a3[6] = *((_OWORD *)this + 6);
  a3[7] = v3;
  v4 = *((_OWORD *)this + 9);
  a3[8] = *((_OWORD *)this + 8);
  a3[9] = v4;
  v5 = *((_OWORD *)this + 3);
  a3[2] = *((_OWORD *)this + 2);
  a3[3] = v5;
  v6 = *((_OWORD *)this + 5);
  a3[4] = *((_OWORD *)this + 4);
  a3[5] = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *a3 = *(_OWORD *)this;
  a3[1] = v8;
  *((_WORD *)a3 + 8) = a2 | 0x100;
  return result;
}

_OWORD *CFX::RG::TextureDescriptorReference::withSampleCount@<X0>(_OWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = this[7];
  *(_OWORD *)(a3 + 96) = this[6];
  *(_OWORD *)(a3 + 112) = v3;
  v4 = this[9];
  *(_OWORD *)(a3 + 128) = this[8];
  *(_OWORD *)(a3 + 144) = v4;
  v5 = this[3];
  *(_OWORD *)(a3 + 32) = this[2];
  *(_OWORD *)(a3 + 48) = v5;
  v6 = this[5];
  *(_OWORD *)(a3 + 64) = this[4];
  *(_OWORD *)(a3 + 80) = v6;
  v7 = this[1];
  *(_OWORD *)a3 = *this;
  *(_OWORD *)(a3 + 16) = v7;
  if (a2)
    *(_WORD *)(a3 + 18) = a2 | 0x100;
  return this;
}

__n128 CFX::RG::TextureDescriptorReference::withPixelFormat@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, MTLPixelFormat a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = a2;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

_OWORD *CFX::RG::TextureDescriptorReference::withPixelFormatIf@<X0>(_OWORD *this@<X0>, MTLPixelFormat a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = this[7];
  *(_OWORD *)(a4 + 96) = this[6];
  *(_OWORD *)(a4 + 112) = v4;
  v5 = this[9];
  *(_OWORD *)(a4 + 128) = this[8];
  *(_OWORD *)(a4 + 144) = v5;
  v6 = this[3];
  *(_OWORD *)(a4 + 32) = this[2];
  *(_OWORD *)(a4 + 48) = v6;
  v7 = this[5];
  *(_OWORD *)(a4 + 64) = this[4];
  *(_OWORD *)(a4 + 80) = v7;
  v8 = this[1];
  *(_OWORD *)a4 = *this;
  *(_OWORD *)(a4 + 16) = v8;
  if (a3)
  {
    *(_QWORD *)(a4 + 24) = a2;
    *(_BYTE *)(a4 + 32) = 1;
  }
  return this;
}

__n128 CFX::RG::TextureDescriptorReference::withTextureType@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, MTLTextureType a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 40) = a2;
  *(_BYTE *)(a3 + 48) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withUsage@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  result = *(__n128 *)this;
  v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 72) = a2;
  *(_BYTE *)(a3 + 80) = 1;
  return result;
}

_OWORD *CFX::RG::TextureDescriptorReference::withSizeFactor@<X0>(_OWORD *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = this[7];
  *((_OWORD *)a3 + 6) = this[6];
  *((_OWORD *)a3 + 7) = v3;
  v4 = this[9];
  *((_OWORD *)a3 + 8) = this[8];
  *((_OWORD *)a3 + 9) = v4;
  v5 = this[3];
  *((_OWORD *)a3 + 2) = this[2];
  *((_OWORD *)a3 + 3) = v5;
  v6 = this[5];
  *((_OWORD *)a3 + 4) = this[4];
  *((_OWORD *)a3 + 5) = v6;
  v7 = this[1];
  *(_OWORD *)a3 = *this;
  *((_OWORD *)a3 + 1) = v7;
  a3[36] = a2;
  return this;
}

float CFX::RG::TextureDescriptorReference::applyingSizeFactor@<S0>(CFX::RG::TextureDescriptorReference *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  float result;

  v3 = *((_OWORD *)this + 7);
  *((_OWORD *)a3 + 6) = *((_OWORD *)this + 6);
  *((_OWORD *)a3 + 7) = v3;
  v4 = *((_OWORD *)this + 9);
  *((_OWORD *)a3 + 8) = *((_OWORD *)this + 8);
  *((_OWORD *)a3 + 9) = v4;
  v5 = *((_OWORD *)this + 3);
  *((_OWORD *)a3 + 2) = *((_OWORD *)this + 2);
  *((_OWORD *)a3 + 3) = v5;
  v6 = *((_OWORD *)this + 5);
  *((_OWORD *)a3 + 4) = *((_OWORD *)this + 4);
  *((_OWORD *)a3 + 5) = v6;
  v7 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *((_OWORD *)a3 + 1) = v7;
  result = a3[36] * a2;
  a3[36] = result;
  return result;
}

uint64_t CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  id v7;
  void *v8;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v7 = a5;
  *(_QWORD *)(a1 + 168) = _Block_copy(a4);
  v8 = _Block_copy(v7);

  *(_QWORD *)(a1 + 176) = v8;
  *(_BYTE *)(a1 + 184) = 0;
  return a1;
}

uint64_t CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, __int128 *a2, const void *a3, void *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  void *v14;

  *(_BYTE *)a1 = 1;
  v6 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  *(_OWORD *)(a1 + 88) = a2[5];
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  v10 = a2[6];
  v11 = a2[7];
  v12 = a2[8];
  *(_OWORD *)(a1 + 152) = a2[9];
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 104) = v10;
  v13 = a4;
  *(_QWORD *)(a1 + 168) = _Block_copy(a3);
  v14 = _Block_copy(v13);

  *(_QWORD *)(a1 + 176) = v14;
  *(_BYTE *)(a1 + 184) = 0;
  return a1;
}

uint64_t CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 168) = _Block_copy(*((const void **)a2 + 21));
  *(_QWORD *)(a1 + 176) = _Block_copy(*((const void **)a2 + 22));
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return a1;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 168) = _Block_copy(*((const void **)a2 + 21));
  *(_QWORD *)(a1 + 176) = _Block_copy(*((const void **)a2 + 22));
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return a1;
}

uint64_t CFX::RG::ExternalResourceDesc::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  v12 = _Block_copy(*((const void **)a2 + 21));
  v13 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v12;

  v14 = _Block_copy(*((const void **)a2 + 22));
  v15 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v14;

  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return a1;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  v12 = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = 0;
  v13 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v12;

  v14 = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  v15 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v14;

  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return a1;
}

__n128 CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)((char *)a2 + 168);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *(__n128 *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)((char *)a2 + 168);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *(__n128 *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return result;
}

void CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(id *this)
{

}

{

}

uint64_t CFX::RG::ExternalResourceDesc::kind(CFX::RG::ExternalResourceDesc *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t CFX::RG::ExternalResourceDesc::bufferDesc(CFX::RG::ExternalResourceDesc *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t CFX::RG::ExternalResourceDesc::textureDesc(CFX::RG::ExternalResourceDesc *this)
{
  if (*(_BYTE *)this != 1)
    abort();
  return (uint64_t)this + 8;
}

{
  if (*(_BYTE *)this != 1)
    abort();
  return (uint64_t)this + 8;
}

void *CFX::RG::ExternalResourceDesc::allocate(const void **this)
{
  return _Block_copy(this[21]);
}

void *CFX::RG::ExternalResourceDesc::destroy(const void **this)
{
  return _Block_copy(this[22]);
}

BOOL CFX::RG::ExternalResourceDesc::validate(CFX::RG::ExternalResourceDesc *this)
{
  return *(_BYTE *)this || RGBufferDescriptorIsValid(*((_QWORD *)this + 1));
}

uint64_t CFX::RG::ExternalResourceDesc::requireLoad(CFX::RG::ExternalResourceDesc *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t CFX::RG::ExternalResourceDesc::setRequireLoad(uint64_t this, char a2)
{
  *(_BYTE *)(this + 184) = a2;
  return this;
}

_QWORD *CFX::RG::ResourceIdentifier::ResourceIdentifier(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

_QWORD *CFX::RG::ResourceIdentifier::ResourceIdentifier(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

CFX::RG::ResourceIdentifier *CFX::RG::ResourceIdentifier::ResourceIdentifier(CFX::RG::ResourceIdentifier *this, const char *__s)
{
  int64_t v4;
  int64_t v5;
  char *v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v13;
  char __dst[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = strlen(__s);
  if (v4 >= 256
    || (v5 = v4, strcpy(__dst, __s), (v6 = strchr(__dst, 46)) == 0)
    || &__dst[v5] - v6 <= 0
    || (*v6 = 0, v7 = v6 + 1, (v8 = strchr(v6 + 1, 46)) == 0)
    || &__dst[v5] - v8 <= 0)
  {
    abort();
  }
  *v8 = 0;
  v9 = v8 + 1;
  if (!strcmp(v8 + 1, "Color"))
  {
    v11 = "Color0";
    v10 = v7;
  }
  else
  {
    v10 = v7;
    v11 = v9;
  }
  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)&v13, __dst, v10, v11);
  *(_QWORD *)this = v13;
  return this;
}

CFX::RG::ResourceIdentifier *CFX::RG::ResourceIdentifier::ResourceIdentifier(CFX::RG::ResourceIdentifier *this, const char *a2, const char *a3, const char *a4)
{
  uint64_t v8;
  char v9;
  const char *v10;
  unsigned __int16 v11;
  int v12;
  uint64_t v13;
  char v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  const char *v21;
  int v22;
  unint64_t v23;

  LODWORD(v8) = -2128831035;
  prof_beginFlame((uint64_t)"ResourceIdentifier", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 771);
  v9 = *a2;
  if (*a2)
  {
    v10 = a2 + 1;
    v11 = -25147;
    do
    {
      v11 = 403 * (v11 ^ v9);
      v12 = *(unsigned __int8 *)v10++;
      v9 = v12;
    }
    while (v12);
    v13 = v11;
  }
  else
  {
    v13 = 40389;
  }
  v14 = *a3;
  if (*a3)
  {
    v15 = a3 + 1;
    v16 = -2128831035;
    do
    {
      v17 = v16 ^ v14;
      v16 = 16777619 * v17;
      v18 = *(unsigned __int8 *)v15++;
      v14 = v18;
    }
    while (v18);
    v19 = (26411008 * v17);
  }
  else
  {
    v19 = 2646933504;
  }
  v20 = *a4;
  if (*a4)
  {
    v21 = a4 + 1;
    do
    {
      v8 = 16777619 * (v8 ^ v20);
      v22 = *(unsigned __int8 *)v21++;
      v20 = v22;
    }
    while (v22);
    v23 = v8 << 32;
  }
  else
  {
    v23 = 0x811C9DC500000000;
  }
  *(_QWORD *)this = v23 | v19 | v13;
  prof_endFlame();
  return this;
}

BOOL CFX::RG::ResourceIdentifier::isFinal(CFX::RG::ResourceIdentifier *this)
{
  return *(_QWORD *)this == 0xEF6F57C624392439;
}

uint64_t CFX::RG::ResourceIdentifier::id(CFX::RG::ResourceIdentifier *this)
{
  return *(_QWORD *)this;
}

uint64_t CFX::RG::ResourceIdentifier::scope(CFX::RG::ResourceIdentifier *this)
{
  return *(unsigned __int16 *)this;
}

uint64_t CFX::RG::ResourceIdentifier::pass(CFX::RG::ResourceIdentifier *this)
{
  return *((unsigned __int16 *)this + 1);
}

uint64_t CFX::RG::ResourceIdentifier::resource(CFX::RG::ResourceIdentifier *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t CFX::RG::ResourceIdentifier::pathName@<X0>(CFX::RG::ResourceIdentifier *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;

  sub_1B21AE738((uint64_t)&v22);
  v4 = 0;
  v5 = (__int16 *)&jpt_1B21BCD74;
  while (word_1B22C9EA0[v4] != *(_WORD *)this)
  {
    if (++v4 == 8)
      goto LABEL_6;
  }
  v5 = &word_1B22C9EA0[v4];
LABEL_6:
  if ((char *)v5 - (char *)word_1B22C9EA0 == 16)
  {
    v6 = v22;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v22 - 24)) |= 0x4000u;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v6 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v6 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v6 - 24)) |= 0x200u;
    v7 = (_QWORD *)std::ostream::operator<<();
    *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) &= ~0x4000u;
  }
  else
  {
    v8 = *(char **)((char *)off_1E63FC1D8 + 4 * ((char *)v5 - (char *)word_1B22C9EA0));
    v9 = strlen(v8);
    sub_1B1960B04(&v22, (uint64_t)v8, v9);
  }
  sub_1B1960B04(&v22, (uint64_t)".", 1);
  v10 = *((unsigned __int16 *)this + 1);
  if (v10 == 6893)
  {
    v11 = "Any";
    v12 = 3;
  }
  else
  {
    if (v10 != 9273)
    {
      v13 = v22;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v22 - 24)) |= 0x4000u;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v13 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v13 - 24)) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v13 - 24)) |= 0x200u;
      v14 = (_QWORD *)std::ostream::operator<<();
      *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) &= ~0x4000u;
      goto LABEL_15;
    }
    v11 = "Last";
    v12 = 4;
  }
  sub_1B1960B04(&v22, (uint64_t)v11, v12);
LABEL_15:
  sub_1B1960B04(&v22, (uint64_t)".", 1);
  v15 = 0;
  v16 = word_1B22C9EA0;
  while (dword_1B22C9E80[v15] != *((_DWORD *)this + 1))
  {
    if (++v15 == 8)
      goto LABEL_20;
  }
  v16 = (__int16 *)&dword_1B22C9E80[v15];
LABEL_20:
  if ((char *)v16 - (char *)dword_1B22C9E80 == 32)
  {
    v17 = v22;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v22 - 24)) |= 0x4000u;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v17 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v17 - 24)) |= 0x200u;
    v18 = (_QWORD *)std::ostream::operator<<();
    *(_DWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 8) &= ~0x4000u;
  }
  else
  {
    v19 = *(char **)((char *)off_1E63FC218 + 2 * ((char *)v16 - (char *)dword_1B22C9E80));
    v20 = strlen(v19);
    sub_1B1960B04(&v22, (uint64_t)v19, v20);
  }
  sub_1B1960E14((uint64_t)v23, a2);
  v22 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v23[-1] + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E22DDC](&v25);
}

void sub_1B21AE71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B21AE824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B21AE738(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B21AE7FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E22DDC](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B21AE824(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E22DDC](a1 + 112);
  return a1;
}

unint64_t CFX::RG::ResourceIdentifier::withLastScope(CFX::RG::ResourceIdentifier *this)
{
  return ((unint64_t)*((unsigned int *)this + 1) << 32) | ((unint64_t)*((unsigned __int16 *)this + 1) << 16) | 0x2439;
}

unint64_t CFX::RG::ResourceIdentifier::withLastPass(CFX::RG::ResourceIdentifier *this)
{
  return *(unsigned __int16 *)this | ((unint64_t)*((unsigned int *)this + 1) << 32) | 0x24390000;
}

BOOL CFX::RG::ResourceIdentifier::match(unsigned __int16 *a1, uint64_t a2)
{
  _BOOL4 v2;
  _BOOL4 v3;

  v2 = (unsigned __int16)a2 == 6893 || *a1 == (unsigned __int16)a2;
  if (WORD1(a2) == 6893)
  {
    v3 = 1;
    if (!v2)
      return 0;
  }
  else
  {
    v3 = a1[1] == WORD1(a2);
    if (!v2)
      return 0;
  }
  return *((_DWORD *)a1 + 1) == HIDWORD(a2) && v3;
}

uint64_t CFX::RG::ResourceReference::ResourceReference(uint64_t a1, uint64_t a2)
{
  return CFX::RG::TextureDescriptorReference::TextureDescriptorReference(a1, a2, 1.0);
}

{
  return CFX::RG::TextureDescriptorReference::TextureDescriptorReference(a1, a2, 1.0);
}

uint64_t CFX::RG::ResourceReference::reference(CFX::RG::ResourceReference *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t CFX::RG::Resource::Resource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  return result;
}

__n128 CFX::RG::Resource::Resource(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a4;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_OWORD *)(a3 + 48);
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = *(__n128 *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a4;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_OWORD *)(a3 + 48);
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = *(__n128 *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a4;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_OWORD *)(a3 + 48);
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = *(__n128 *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a4;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_OWORD *)(a3 + 48);
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = *(__n128 *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t CFX::RG::Resource::Resource(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a4;
  v6 = *a3;
  v7 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  v8 = a3[3];
  v9 = a3[4];
  v10 = a3[6];
  *(_OWORD *)(a1 + 112) = a3[5];
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v11 = a3[7];
  v12 = a3[8];
  v13 = a3[9];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a3 + 20);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 200) = _Block_copy(*((const void **)a3 + 21));
  *(_QWORD *)(a1 + 208) = _Block_copy(*((const void **)a3 + 22));
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a3 + 184);
  return a1;
}

void CFX::RG::Resource::~Resource(CFX::RG::Resource *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 24) == 2)
  {
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t, CFX::RG::Resource *))(v2 + 16))(v2, this);
  }
  if (*((_BYTE *)this + 8) == 2)
  {

  }
}

void sub_1B21AEB8C(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t CFX::RG::Resource::type(CFX::RG::Resource *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL CFX::RG::Resource::isSameKind(CFX::RG::Resource *this, CFX::RG::Resource *a2)
{
  int v2;
  int v3;
  BOOL v4;
  char v5;
  BOOL v6;
  BOOL v7;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *((unsigned __int8 *)a2 + 8);
  if (v2 == 2)
  {
    v2 = *((unsigned __int8 *)this + 32);
    if (v3 == 2)
    {
      v3 = *((unsigned __int8 *)a2 + 32);
      return v2 == v3;
    }
    v7 = v3 == 3;
    v6 = v3 == 1;
    if (v2 == 1)
      return v7;
  }
  else
  {
    if (v3 != 2)
      return v2 == v3;
    v4 = v2 == 3;
    v5 = v2 == 1;
    if (*((_BYTE *)a2 + 32))
      v5 = *((_BYTE *)a2 + 32);
    if (*((_BYTE *)a2 + 32) == 1)
      return v4;
    else
      return v5;
  }
  return v6;
}

uint64_t CFX::RG::Resource::externalResourceDesc(CFX::RG::Resource *this)
{
  return (uint64_t)this + 32;
}

{
  return (uint64_t)this + 32;
}

uint64_t CFX::RG::Resource::name(CFX::RG::Resource *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t CFX::RG::Resource::lifetime(CFX::RG::Resource *this)
{
  return *((unsigned __int8 *)this + 24);
}

BOOL CFX::RG::Resource::isManaged(CFX::RG::Resource *this)
{
  return *((_BYTE *)this + 24) == 2;
}

unint64_t CFX::RG::Resource::hash(CFX::RG::Resource *this)
{
  unint64_t v1;

  v1 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)this) ^ ((0x9DDFEA08EB382D69 * (unint64_t)this) >> 47));
  return 0x9DDFEA08EB382D69 * (v1 ^ (v1 >> 47));
}

BOOL CFX::RG::Resource::validate(CFX::RG::Resource *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (!*((_BYTE *)this + 8))
    return 0;
  if (v1 != 2)
  {
    if (v1 == 1)
      return RGBufferDescriptorIsValid(*((_QWORD *)this + 4));
    return 1;
  }
  if (*((_BYTE *)this + 32))
    return 1;
  return RGBufferDescriptorIsValid(*((_QWORD *)this + 5));
}

BOOL CFX::RG::Resource::isBuffer(CFX::RG::Resource *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 1)
    return 1;
  if (v1 == 2)
    return *((_BYTE *)this + 32) == 0;
  return 0;
}

BOOL CFX::RG::Resource::isTexture(CFX::RG::Resource *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 3)
    return 1;
  if (v1 == 2)
    return *((_BYTE *)this + 32) == 1;
  return 0;
}

BOOL CFX::RG::Resource::isExternal(CFX::RG::Resource *this)
{
  return *((_BYTE *)this + 8) == 2;
}

BOOL CFX::RG::Resource::isHazardTracked(CFX::RG::Resource *this)
{
  int v1;
  uint64_t v2;
  BOOL v3;
  char *v4;

  v1 = *((unsigned __int8 *)this + 8);
  switch(v1)
  {
    case 1:
      v4 = (char *)this + 32;
      break;
    case 3:
      goto LABEL_6;
    case 2:
      if (*((_BYTE *)this + 32))
      {
        if (*((_BYTE *)this + 32) == 1)
        {
LABEL_6:
          v2 = CFX::RG::Resource::textureDesc(this);
          if (*(_BYTE *)(v2 + 128))
            v3 = *(_QWORD *)(v2 + 120) == 1;
          else
            v3 = 0;
          return !v3;
        }
        goto LABEL_15;
      }
      v4 = (char *)this + 40;
      break;
    default:
LABEL_15:
      abort();
  }
  v3 = (*((_QWORD *)v4 + 1) & 0x300) == 256;
  return !v3;
}

uint64_t CFX::RG::Resource::bufferDesc(CFX::RG::Resource *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 2)
    return (uint64_t)this + 40;
  if (v1 != 1)
    abort();
  return (uint64_t)this + 32;
}

{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 2)
    return (uint64_t)this + 40;
  if (v1 != 1)
    abort();
  return (uint64_t)this + 32;
}

uint64_t CFX::RG::Resource::textureDesc(CFX::RG::Resource *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 4)
    return (uint64_t)this + 32;
  if (v1 != 2)
    return CFX::RG::Resource::textureDesc(this);
  if (*((_BYTE *)this + 32) != 1)
    abort();
  return (uint64_t)this + 40;
}

{
  int v1;

  v1 = *((unsigned __int8 *)this + 8);
  if (v1 != 2)
  {
    if (v1 == 3)
      return (uint64_t)this + 32;
LABEL_7:
    abort();
  }
  if (*((_BYTE *)this + 32) != 1)
    goto LABEL_7;
  return (uint64_t)this + 40;
}

BOOL CFX::RG::Resource::isReference(CFX::RG::Resource *this)
{
  return *((_BYTE *)this + 8) == 4;
}

uint64_t CFX::RG::Resource::reference(CFX::RG::Resource *this)
{
  if (*((_BYTE *)this + 8) != 4)
    abort();
  return *((_QWORD *)this + 23);
}

CFX::RG::Resource *CFX::RG::Resource::Resource(CFX::RG::Resource *this, const CFX::RG::Resource *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)this = 0;
  v3 = *((unsigned __int8 *)a2 + 8);
  *((_BYTE *)this + 8) = v3;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  switch(v3)
  {
    case 1:
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      break;
    case 2:
      CFX::RG::ExternalResourceDesc::operator=((uint64_t)this + 32, (__int128 *)a2 + 2);
      break;
    case 3:
    case 4:
      v4 = *((_OWORD *)a2 + 3);
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)this + 3) = v4;
      v5 = *((_OWORD *)a2 + 4);
      v6 = *((_OWORD *)a2 + 5);
      v7 = *((_OWORD *)a2 + 7);
      *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)this + 7) = v7;
      *((_OWORD *)this + 4) = v5;
      *((_OWORD *)this + 5) = v6;
      v8 = *((_OWORD *)a2 + 8);
      v9 = *((_OWORD *)a2 + 9);
      v10 = *((_OWORD *)a2 + 11);
      *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)this + 11) = v10;
      *((_OWORD *)this + 8) = v8;
      *((_OWORD *)this + 9) = v9;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t CFX::RG::Pass::Pass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7)
{
  __int128 v9;

  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = a3;
  *(_QWORD *)a1 = &off_1E63D0598;
  *(_OWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = 0x800000000;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 152) = a2;
  *(_QWORD *)(a1 + 160) = a3;
  *(_QWORD *)(a1 + 168) = 0x800000000;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = a3;
  *(_QWORD *)(a1 + 264) = 0x800000000;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_BYTE *)(a1 + 344) = 3;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 352) = sub_1B21AF07C(a2, a3, &v9, a5);
  return a1;
}

void sub_1B21AF058(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21B8680(v3);
  sub_1B21B8680(v2);
  sub_1B21B8680(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B21AF07C(uint64_t a1, uint64_t a2, __int128 *a3, const void *a4)
{
  _OWORD *v6;
  __int128 v8;
  _BYTE __dst[280];
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v6 = (_OWORD *)sub_1B179C1C0(v10, 0x148u, 8u);
  v8 = *a3;
  memcpy(__dst, a4, sizeof(__dst));
  *v6 = v8;
  sub_1B21B72C8((uint64_t)v6, 32);
  memcpy(v6 + 3, __dst, 0x118uLL);
  return v6;
}

uint64_t CFX::RG::Pass::Pass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)a1 = &off_1E63D0598;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = 0x800000000;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 152) = a2;
  *(_QWORD *)(a1 + 160) = a3;
  *(_QWORD *)(a1 + 168) = 0x800000000;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = a3;
  *(_QWORD *)(a1 + 264) = 0x800000000;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_BYTE *)(a1 + 344) = a5;
  *(_QWORD *)(a1 + 352) = 0;
  CFX::RG::Pass::allocInitDependentParams((_OWORD *)a1);
  return a1;
}

void sub_1B21AF1AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21B8680(v3);
  sub_1B21B8680(v2);
  sub_1B21B8680(v1);
  _Unwind_Resume(a1);
}

_OWORD *CFX::RG::Pass::allocInitDependentParams(_OWORD *this)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD v6[16];
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  if (*((_BYTE *)this + 344) == 3)
  {
    v1 = this;
    v2 = 0;
    v3 = *((_QWORD *)this + 1);
    v4 = *((_QWORD *)v1 + 2);
    *(_QWORD *)&v9 = v3;
    *((_QWORD *)&v9 + 1) = v4;
    v8 = 0;
    v7 = 0u;
    BYTE12(v7) = 1;
    BYTE14(v7) = 1;
    memset(v6, 0, sizeof(v6));
    do
    {
      v5 = &v6[v2];
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = 0x3FF0000000000000;
      v2 += 2;
    }
    while (v2 != 16);
    BYTE3(v8) = 1;
    BYTE5(v8) = 1;
    HIBYTE(v8) = 1;
    this = sub_1B21AF07C(v3, v4, &v9, v6);
    *((_QWORD *)v1 + 44) = this;
  }
  return this;
}

void CFX::RG::Pass::~Pass(CFX::RG::Pass *this)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E63D0598;
  if (*((_BYTE *)this + 344) == 3)
    sub_1B21AF334(*((_QWORD *)this + 1), *((_QWORD **)this + 2), *((_QWORD **)this + 44));
  if (*((_BYTE *)this + 32))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 2);
    v3 = *((_QWORD *)this + 3);
    if (v2)
      sub_1B179C834(v2, &v3);
  }
  sub_1B21B8680((uint64_t)this + 248);
  sub_1B21B8680((uint64_t)this + 152);
  sub_1B21B8680((uint64_t)this + 56);
}

{
  CFX::RG::Pass::~Pass(this);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21AF30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B21B8680(v1 + 248);
  sub_1B21B8680(v1 + 152);
  sub_1B21B8680(v1 + 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B21AF334(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *result;
  uint64_t *v5;

  result = sub_1B21B86D4(a3);
  v5 = result;
  if (a2)
    return sub_1B179C834(a2, &v5);
  return result;
}

uint64_t CFX::RG::Pass::triggerInit(CFX::RG::Pass *this, CFX::RG::RenderGraphContext *a2)
{
  uint64_t result;

  if (*((_BYTE *)this + 33))
    return 0;
  result = (*(uint64_t (**)(CFX::RG::Pass *, CFX::RG::RenderGraphContext *))(*(_QWORD *)this + 16))(this, a2);
  *((_BYTE *)this + 33) = result;
  return result;
}

uint64_t *CFX::RG::Pass::readFrom(uint64_t *this, CFX::RG::Resource *a2)
{
  CFX::RG::Resource *v2;

  v2 = a2;
  if (a2)
    return sub_1B21AF404(this + 7, &v2);
  return this;
}

uint64_t *sub_1B21AF404(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = result[3];
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = (_QWORD *)result[3];
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)result[3];
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3)
    return sub_1B179C734(result, a2);
  return result;
}

uint64_t *CFX::RG::Pass::writeTo(uint64_t *this, CFX::RG::Resource *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFX::RG::Resource **v5;
  CFX::RG::Resource *v6;

  v6 = a2;
  v2 = this[22];
  v3 = *((unsigned int *)this + 42);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = (CFX::RG::Resource **)this[22];
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (CFX::RG::Resource **)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = (CFX::RG::Resource **)this[22];
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3)
    return sub_1B179C734(this + 19, &v6);
  return this;
}

uint64_t CFX::RG::Pass::renderTo(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v6 = result;
  v13 = a2;
  v7 = *(_QWORD *)(result + 176);
  v8 = *(unsigned int *)(result + 168);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(_QWORD **)(result + 176);
    while (*v10 != a2)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
      {
        v10 = (_QWORD *)(v7 + 8 * v8);
        break;
      }
    }
  }
  else
  {
    v10 = *(_QWORD **)(result + 176);
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
  {
    sub_1B179C734((uint64_t *)(result + 152), &v13);
    v11 = *(_QWORD *)(v6 + 352);
    v12 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v13) ^ ((0x9DDFEA08EB382D69 * v13) >> 47));
    v14 = a3;
    v15 = a4;
    return sub_1B21B6FA4(v11, 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47)), &v14);
  }
  return result;
}

uint64_t *CFX::RG::Pass::dependsOn(uint64_t *this, CFX::RG::Pass *a2)
{
  CFX::RG::Pass *v2;

  v2 = a2;
  if (a2)
  {
    if (a2 != (CFX::RG::Pass *)this)
      return sub_1B21AF404(this + 31, &v2);
  }
  return this;
}

unsigned int *CFX::RG::Pass::removeDependenciesOn(unsigned int *this, CFX::RG::Pass *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFX::RG::Pass **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 34);
  v3 = this[66];
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = (CFX::RG::Pass **)*((_QWORD *)this + 34);
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (CFX::RG::Pass **)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = (CFX::RG::Pass **)*((_QWORD *)this + 34);
  }
  v6 = ((uint64_t)v5 - v2) >> 3;
  if (v6 != v3)
  {
    v7 = (v3 - 1);
    this[66] = v7;
    if (v6 != v7)
      return (unsigned int *)memmove(v5, v5 + 1, v2 + 8 * v7 - (_QWORD)v5);
  }
  return this;
}

BOOL CFX::RG::Pass::isRenderTarget(CFX::RG::Pass *this, const CFX::RG::Resource *a2)
{
  return *((_BYTE *)this + 344) == 3 && sub_1B21AF654(*((_QWORD *)this + 44), (uint64_t)a2);
}

BOOL sub_1B21AF654(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  v2 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  v4 = (*(_DWORD *)(a1 + 44) - 1) & v3;
  v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v4);
  if (v5 < 2)
    return 0;
  while ((v5 & 2) == 0 || v3 != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4))
  {
    ++v4;
    v6 = v5 > 3;
    v5 >>= 1;
    if (!v6)
      return 0;
  }
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t CFX::RG::Pass::renderTargetInfo(CFX::RG::Pass *this, CFX::RG::Resource *a2)
{
  if (*((_BYTE *)this + 344) == 3)
    return sub_1B21AF6F0(*((_QWORD *)this + 44), (uint64_t)a2);
  else
    return 0;
}

uint64_t sub_1B21AF6F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  v2 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  v4 = (*(_DWORD *)(a1 + 44) - 1) & v3;
  v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v4);
  if (v5 < 2)
    return 0;
  while ((v5 & 2) == 0 || v3 != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4))
  {
    ++v4;
    v6 = v5 > 3;
    v5 >>= 1;
    if (!v6)
      return 0;
  }
  return *(_QWORD *)(a1 + 24) + 12 * v4;
}

uint64_t CFX::RG::Pass::renderTargetInfo(CFX::RG::Pass *this, const CFX::RG::Resource *a2)
{
  if (*((_BYTE *)this + 344) == 3)
    return sub_1B21AF6F0(*((_QWORD *)this + 44), (uint64_t)a2);
  else
    return 0;
}

uint64_t CFX::RG::Pass::renderTargetAccess(CFX::RG::Pass *this, const CFX::RG::Resource *a2)
{
  if (*((_BYTE *)this + 344) == 3)
    return sub_1B21AF7AC(*((_QWORD *)this + 44), (uint64_t)a2);
  else
    return 0;
}

uint64_t sub_1B21AF7AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;

  v2 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  v4 = (*(_DWORD *)(a1 + 44) - 1) & v3;
  v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v4);
  if (v5 < 2)
    return 0;
  while ((v5 & 2) == 0 || v3 != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4))
  {
    ++v4;
    v6 = v5 >= 4;
    v5 >>= 1;
    if (!v6)
      return 0;
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    return *(unsigned int *)(v8 + 12 * v4);
  else
    return 0;
}

uint64_t CFX::RG::Pass::replaceReads(uint64_t a1, _QWORD *a2)
{
  return sub_1B21AF840(a1 + 56, a2);
}

uint64_t sub_1B21AF840(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 20) && *(_QWORD *)(a1 + 24) != a1 + 32)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD **)(a1 + 8);
      if (v4)
        sub_1B179C834(v4, &v7);
      *(_QWORD *)(a1 + 24) = a1 + 32;
    }
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = (_QWORD *)a2[3];
    if (v5 == a2 + 4)
      memcpy((void *)(a1 + 32), v5, 8 * *((unsigned int *)a2 + 4));
    else
      *(_QWORD *)(a1 + 24) = v5;
    a2[2] = 0x800000000;
    a2[3] = a2 + 4;
  }
  return a1;
}

CFX::RG::Resource **CFX::RG::Pass::replaceResource(CFX::RG::Pass *this, CFX::RG::Resource *a2, CFX::RG::Resource *a3)
{
  CFX::RG::Resource **result;
  uint64_t v6;
  CFX::RG::Resource **v7;
  uint64_t v8;
  CFX::RG::Resource **v9;
  CFX::RG::Resource **v10;
  CFX::RG::Resource **v11;
  uint64_t v12;
  CFX::RG::Resource **v13;
  uint64_t v14;
  uint64_t v15;
  CFX::RG::Resource **v16;
  uint64_t v17;
  CFX::RG::Resource *v18;

  v18 = a2;
  result = (CFX::RG::Resource **)*((_QWORD *)this + 10);
  v6 = *((unsigned int *)this + 18);
  v7 = result;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v7 = result;
    while (*v7 != a3)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = &result[v6];
        break;
      }
    }
  }
  if (v6 != v7 - result)
  {
    v9 = (CFX::RG::Resource **)sub_1B21AFA50(result, &result[v6], &v18);
    result = (CFX::RG::Resource **)*((_QWORD *)this + 10);
    v6 = *((unsigned int *)this + 18);
    if (v9 != &result[v6])
    {
      v10 = &result[v6];
      v11 = v10 - 1;
      v12 = 8 - (_QWORD)v10;
      do
      {
        v6 = (v6 - 1);
        *((_DWORD *)this + 18) = v6;
        v13 = &result[v6];
        if (v11 != v13)
        {
          memmove(v11, v11 + 1, (size_t)v13 + v12);
          result = (CFX::RG::Resource **)*((_QWORD *)this + 10);
          v6 = *((unsigned int *)this + 18);
        }
        --v11;
        v12 += 8;
      }
      while (v9 != &result[v6]);
    }
  }
  if ((_DWORD)v6)
  {
    v14 = 8 * v6;
    do
    {
      if (*result == v18)
        *result = a3;
      ++result;
      v14 -= 8;
    }
    while (v14);
  }
  v15 = *((unsigned int *)this + 42);
  if ((_DWORD)v15)
  {
    v16 = (CFX::RG::Resource **)*((_QWORD *)this + 22);
    v17 = 8 * v15;
    do
    {
      if (*v16 == v18)
        *v16 = a3;
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  if (*((_BYTE *)this + 344) == 3)
    return (CFX::RG::Resource **)sub_1B21AFAAC(*((_QWORD *)this + 44), (uint64_t)v18, (uint64_t)a3);
  return result;
}

_QWORD *sub_1B21AFA50(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *i;

  if (result != a2)
  {
    while (*result != *a3)
    {
      if (++result == a2)
      {
        result = a2;
        break;
      }
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

uint64_t sub_1B21AFAAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  v3 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v4 = 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  v5 = (*(_DWORD *)(result + 44) - 1) & v4;
  v6 = *(_QWORD *)(result + 32);
  v7 = *(unsigned __int16 *)(v6 + 2 * v5);
  if (v7 >= 2)
  {
    v8 = *(unsigned __int16 *)(v6 + 2 * v5);
    v9 = (*(_DWORD *)(result + 44) - 1) & v4;
    while (1)
    {
      if ((v8 & 2) != 0)
      {
        v10 = *(_QWORD *)(result + 16);
        if (v4 == *(_QWORD *)(v10 + 8 * v9))
          break;
      }
      ++v9;
      v11 = v8 >= 4;
      v8 >>= 1;
      if (!v11)
        return result;
    }
    v12 = *(_QWORD *)(result + 24);
    if (v12)
    {
      v13 = v12 + 12 * v9;
      v19 = *(_QWORD *)v13;
      v20 = *(_DWORD *)(v13 + 8);
      v14 = 1;
      v15 = *(unsigned __int16 *)(v6 + 2 * v5);
      while (1)
      {
        if ((v15 & 2) != 0)
        {
          v16 = (v5 + v14 - 1);
          if (v4 == *(_QWORD *)(v10 + 8 * v16))
            break;
        }
        ++v14;
        v17 = v15 > 3;
        v15 >>= 1;
        if (!v17)
          goto LABEL_14;
      }
      *(_WORD *)(v6 + 2 * v5) = v7 ^ (1 << v14);
      *(_WORD *)(v6 + 2 * v16) ^= 1u;
      --*(_DWORD *)(result + 40);
LABEL_14:
      v18 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a3) ^ ((0x9DDFEA08EB382D69 * a3) >> 47));
      v21 = v19;
      v22 = v20;
      return sub_1B21B6FA4(result, 0x9DDFEA08EB382D69 * (v18 ^ (v18 >> 47)), &v21);
    }
  }
  return result;
}

uint64_t *CFX::RG::Pass::setAllocatedName(uint64_t *this, const char *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = this;
  if (*((_BYTE *)this + 32))
  {
    this = (uint64_t *)this[2];
    v4 = v3[3];
    if (this)
      this = sub_1B179C834(this, &v4);
  }
  v3[3] = (uint64_t)a2;
  *((_BYTE *)v3 + 32) = 1;
  return this;
}

unint64_t CFX::RG::Pass::hash(CFX::RG::Pass *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v1 ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 5) ^ v1)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                * (*((_QWORD *)this + 5) ^ v1)))) ^ ((0x9DDFEA08EB382D69 * (v1 ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 5) ^ v1)) >> 47) ^ (0x9DDFEA08EB382D69 * (*((_QWORD *)this + 5) ^ v1)))) >> 47));
}

uint64_t CFX::RG::Pass::commonRenderParameters(CFX::RG::Pass *this)
{
  return *((_QWORD *)this + 44) + 48;
}

uint64_t CFX::RG::RenderGraphBuilder::RenderGraphBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  sub_1B179C78C(a1 + 16, 32, 1);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  sub_1B179C78C(v6, 32, 1);
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  sub_1B179C78C(a1 + 80, 32, 1);
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  sub_1B179C78C(a1 + 112, 32, 1);
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = a3;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  sub_1B179C78C(a1 + 144, 32, 1);
  *(_QWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  sub_1B179C78C(a1 + 176, 16, 1);
  *(_QWORD *)(a1 + 208) = a2;
  *(_QWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  sub_1B179C78C(a1 + 208, 16, 1);
  *(_QWORD *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 248) = a3;
  sub_1B21B8744(a1 + 240, 32);
  *(_QWORD *)(a1 + 288) = a2;
  *(_QWORD *)(a1 + 296) = a3;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  sub_1B21B87D8(a1 + 288, 32, 1);
  *(_WORD *)(a1 + 320) = 256;
  return a1;
}

void sub_1B21AFDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1B21B86D4(v11);
  sub_1B190D7C4(v16);
  sub_1B190D7C4(v15);
  sub_1B190D7C4(v14);
  sub_1B190D7C4(v13);
  sub_1B190D7C4(v12);
  sub_1B190D7C4(a10);
  sub_1B190D7C4(v10);
  _Unwind_Resume(a1);
}

void sub_1B21AFE4C()
{
  JUMPOUT(0x1B21AFE2CLL);
}

void sub_1B21AFE54()
{
  JUMPOUT(0x1B21AFE34);
}

void sub_1B21AFE5C()
{
  JUMPOUT(0x1B21AFE3CLL);
}

void CFX::RG::RenderGraphBuilder::~RenderGraphBuilder(CFX::RG::RenderGraphBuilder *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  _QWORD *v6;
  uint64_t v7;
  CFX::RG::Resource **v8;
  uint64_t v9;
  uint64_t v10;
  CFX::RG::Resource **v11;
  uint64_t v12;
  uint64_t v13;
  CFX::RG::Resource **v14;
  uint64_t v15;
  uint64_t v16;
  CFX::RG::Resource **v17;
  uint64_t v18;
  uint64_t v19;
  CFX::RG::RenderGraph **v20;
  uint64_t v21;
  void (***v22)(_QWORD);

  if (*((_BYTE *)this + 321))
  {
    v2 = *((unsigned int *)this + 40);
    if ((_DWORD)v2)
    {
      v3 = (_QWORD *)*((_QWORD *)this + 21);
      v4 = 8 * v2;
      do
      {
        v5 = (void (***)(_QWORD))*v3;
        v6 = (_QWORD *)*((_QWORD *)this + 1);
        (**(void (***)(_QWORD))*v3)(*v3);
        v22 = v5;
        if (v6)
          sub_1B179C834(v6, &v22);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v7 = *((unsigned int *)this + 8);
    if ((_DWORD)v7)
    {
      v8 = (CFX::RG::Resource **)*((_QWORD *)this + 5);
      v9 = 8 * v7;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v8++);
        v9 -= 8;
      }
      while (v9);
    }
    v10 = *((unsigned int *)this + 16);
    if ((_DWORD)v10)
    {
      v11 = (CFX::RG::Resource **)*((_QWORD *)this + 9);
      v12 = 8 * v10;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v11++);
        v12 -= 8;
      }
      while (v12);
    }
    v13 = *((unsigned int *)this + 24);
    if ((_DWORD)v13)
    {
      v14 = (CFX::RG::Resource **)*((_QWORD *)this + 13);
      v15 = 8 * v13;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v14++);
        v15 -= 8;
      }
      while (v15);
    }
    v16 = *((unsigned int *)this + 32);
    if ((_DWORD)v16)
    {
      v17 = (CFX::RG::Resource **)*((_QWORD *)this + 17);
      v18 = 8 * v16;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v17++);
        v18 -= 8;
      }
      while (v18);
    }
  }
  v19 = *((unsigned int *)this + 48);
  if ((_DWORD)v19)
  {
    v20 = (CFX::RG::RenderGraph **)*((_QWORD *)this + 25);
    v21 = 8 * v19;
    do
    {
      if (!*((_BYTE *)*v20 + 272))
        sub_1B19AB7CC(*(_QWORD *)this, *((_QWORD **)this + 1), *v20);
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  sub_1B190D7C4((uint64_t)this + 288);
  sub_1B21B86D4((_QWORD *)this + 30);
  sub_1B190D7C4((uint64_t)this + 208);
  sub_1B190D7C4((uint64_t)this + 176);
  sub_1B190D7C4((uint64_t)this + 144);
  sub_1B190D7C4((uint64_t)this + 112);
  sub_1B190D7C4((uint64_t)this + 80);
  sub_1B190D7C4((uint64_t)this + 48);
  sub_1B190D7C4((uint64_t)this + 16);
}

void sub_1B21B000C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B190D7C4(v1 + 288);
  sub_1B21B86D4((_QWORD *)(v1 + 240));
  sub_1B190D7C4(v1 + 208);
  sub_1B190D7C4(v1 + 176);
  sub_1B190D7C4(v1 + 144);
  sub_1B190D7C4(v1 + 112);
  sub_1B190D7C4(v1 + 80);
  sub_1B190D7C4(v1 + 48);
  sub_1B190D7C4(v1 + 16);
  _Unwind_Resume(a1);
}

void sub_1B21B0074(int a1, _QWORD *a2, CFX::RG::Resource *this)
{
  uint64_t v4;
  uint64_t v5;

  CFX::RG::Resource::~Resource(this);
  v5 = v4;
  if (a2)
    sub_1B179C834(a2, &v5);
}

uint64_t CFX::RG::RenderGraphBuilder::validateMissingPublishedResources(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD v26[5];
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *(*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  const char *v35;
  _QWORD v36[11];
  char v37;
  uint64_t v38;
  std::locale v39;

  v2 = *(unsigned int *)(a1 + 128);
  if (!(_DWORD)v2)
    return 1;
  v5 = *(uint64_t **)(a1 + 136);
  v6 = &v5[v2];
  result = 1;
  while (1)
  {
    v8 = *v5;
    if (*(_BYTE *)(*v5 + 8) != 4)
      abort();
    v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (*(_QWORD *)(v8 + 184) ^ 1)) ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(v8 + 184) ^ 1)) >> 47) ^ 1);
    v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
    v11 = (*(_DWORD *)(a1 + 284) - 1) & v10;
    v12 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 272) + 2 * v11);
    if (v12 < 2)
      break;
    while ((v12 & 2) == 0 || v10 != *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v11))
    {
      ++v11;
      v13 = v12 >= 4;
      v12 >>= 1;
      if (!v13)
        goto LABEL_12;
    }
    if (!*(_QWORD *)(a1 + 264))
      break;
    if (++v5 == v6)
      return result;
  }
LABEL_12:
  v30 = 0;
  v31 = &v30;
  v32 = 0x13812000000;
  v33 = sub_1B21B04AC;
  v34 = sub_1B21B05AC;
  v35 = "";
  sub_1B21AE738((uint64_t)v36);
  v14 = sub_1B1960B04(v31 + 6, (uint64_t)"Missing published resource ", 27);
  if (*(_BYTE *)(v8 + 8) != 4)
    abort();
  v15 = v14;
  v27 = *(_QWORD *)(v8 + 184);
  CFX::RG::ResourceIdentifier::pathName((CFX::RG::ResourceIdentifier *)&v27, __p);
  if (v29 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v29 >= 0)
    v17 = HIBYTE(v29);
  else
    v17 = (uint64_t)__p[1];
  v18 = sub_1B1960B04(v15, (uint64_t)v16, v17);
  v19 = sub_1B1960B04(v18, (uint64_t)" for reference resource ", 24);
  v20 = *(const char **)(v8 + 16);
  v21 = strlen(v20);
  v22 = sub_1B1960B04(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  v24 = sub_1B1960B04(v31 + 6, (uint64_t)"Available resources are:", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1B21B06C8;
  v26[3] = &unk_1E63FC260;
  v26[4] = &v30;
  sub_1B21B062C(a1 + 240, v26);
  sub_1B1960E14((uint64_t)(v31 + 7), __p);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v29;
  _Block_object_dispose(&v30, 8);
  v36[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v36[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v37 < 0)
    operator delete((void *)v36[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E22DDC](&v38);
  return 0;
}

void sub_1B21B044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  _Block_object_dispose(&a22, 8);
  sub_1B21AE824(v22);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B21B04AC(uint64_t a1, uint64_t a2)
{
  return sub_1B21B04B8((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
}

_QWORD *sub_1B21B04B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base *v6;
  uint64_t v7;

  a1[14] = MEMORY[0x1E0DE4FF8] + 16;
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *a1 = v3;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v6 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  std::ios_base::move(v5, v6);
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = 0;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  v7 = MEMORY[0x1E0DE4FE0];
  *a1 = MEMORY[0x1E0DE4FE0] + 24;
  a1[14] = v7 + 64;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_1B21B0584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E22DDC](v1);
  _Unwind_Resume(a1);
}

void sub_1B21B05AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0DE4F60];
  v2 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x1B5E22DDCLL);
}

void sub_1B21B062C(uint64_t a1, void *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  void (**v6)(id, _QWORD, uint64_t);

  v6 = a2;
  v3 = *(_DWORD *)(a1 + 44);
  if (v3 != -15)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v5) & 1) != 0)
      {
        v6[2](v6, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5), *(_QWORD *)(a1 + 24) + v4);
        v3 = *(_DWORD *)(a1 + 44);
      }
      ++v5;
      v4 += 24;
    }
    while (v5 < (v3 + 15));
  }

}

void sub_1B21B06B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B21B06C8(uint64_t a1, int a2, CFX::RG::ResourceIdentifier *this)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  void *__p[2];
  unsigned __int8 v9;
  std::locale v10;

  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  CFX::RG::ResourceIdentifier::pathName(this, __p);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (uint64_t)__p[1];
  v6 = sub_1B1960B04(v3, (uint64_t)v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v10, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v9 < 0)
    operator delete(__p[0]);
}

void sub_1B21B078C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::validateInitializedPasses(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 160);
  if (!(_DWORD)v2)
    return 1;
  v4 = *(uint64_t **)(a1 + 168);
  v5 = 8 * v2;
  while (1)
  {
    v6 = *v4;
    if (!*(_BYTE *)(*v4 + 33))
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 1;
  }
  sub_1B21AE738((uint64_t)&v13);
  v8 = sub_1B1960B04(&v13, (uint64_t)"Uninitialized pass ", 19);
  v9 = *(const char **)(v6 + 24);
  v10 = strlen(v9);
  sub_1B1960B04(v8, (uint64_t)v9, v10);
  sub_1B1960E14((uint64_t)v14, &v11);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v12;
  v13 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E22DDC](&v16);
  return 0;
}

void sub_1B21B08E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B21AE824((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::resolveReferences(CFX::RG::RenderGraphBuilder *this, CFX::GPUResourceManager **a2)
{
  uint64_t v4;
  CFX::RG::Resource **v5;
  CFX::RG::Resource **v6;
  CFX::RG::Resource *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  CFX::RG::Resource **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  CFX::RG::Resource **v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  CFX::RG::Resource *v32;
  unsigned __int16 *v33;
  CFX::RG::Resource **v35;
  CFX::RG::RenderGraphContext *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;

  prof_beginFlame((uint64_t)"resolveReferences", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1349);
  v4 = *((unsigned int *)this + 32);
  if ((_DWORD)v4)
  {
    v5 = (CFX::RG::Resource **)*((_QWORD *)this + 17);
    v6 = &v5[v4];
    v35 = v6;
    v36 = (CFX::RG::RenderGraphContext *)a2;
    do
    {
      v7 = *v5;
      if (*((_BYTE *)*v5 + 8) != 4)
        abort();
      v8 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (*((_QWORD *)v7 + 23) ^ 1)) ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)v7 + 23) ^ 1)) >> 47) ^ 1);
      v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      v10 = (*((_DWORD *)this + 71) - 1) & v9;
      v11 = *(unsigned __int16 *)(*((_QWORD *)this + 34) + 2 * v10);
      if (v11 >= 2)
      {
        while ((v11 & 2) == 0 || v9 != *(_QWORD *)(*((_QWORD *)this + 32) + 8 * v10))
        {
          ++v10;
          v12 = v11 >= 4;
          v11 >>= 1;
          if (!v12)
            goto LABEL_34;
        }
        v38 = *((_QWORD *)this + 33);
        if (v38)
        {
          v37 = v10;
          v13 = *((unsigned int *)this + 40);
          if ((_DWORD)v13)
          {
            v14 = (uint64_t *)*((_QWORD *)this + 21);
            v15 = &v14[v13];
            v16 = (uint64_t *)(v38 + 24 * v37 + 16);
            do
            {
              v17 = *v14;
              if (*v14 != *v16)
              {
                v18 = *(unsigned int *)(v17 + 72);
                if ((_DWORD)v18)
                {
                  v19 = *(CFX::RG::Resource ***)(v17 + 80);
                  v20 = 8 * v18;
                  do
                  {
                    if (*v19 == v7)
                    {
                      v21 = *v16;
                      v39 = v21;
                      if (v21 && v21 != v17)
                        sub_1B21AF404((uint64_t *)(v17 + 248), &v39);
                    }
                    ++v19;
                    v20 -= 8;
                  }
                  while (v20);
                }
                v23 = *(unsigned int *)(v17 + 168);
                if ((_DWORD)v23)
                {
                  v24 = *(CFX::RG::Resource ***)(v17 + 176);
                  v25 = 8 * v23;
                  do
                  {
                    if (*v24 == v7 && *(_BYTE *)(v17 + 344) == 3)
                    {
                      v26 = (_BYTE *)sub_1B21AF6F0(*(_QWORD *)(v17 + 352), (uint64_t)v7);
                      if (v26)
                      {
                        if ((*v26 & 1) != 0)
                        {
                          v27 = *v16;
                          v39 = v27;
                          if (v27)
                          {
                            if (v27 != v17)
                              sub_1B21AF404((uint64_t *)(v17 + 248), &v39);
                          }
                        }
                      }
                    }
                    ++v24;
                    v25 -= 8;
                  }
                  while (v25);
                }
              }
              ++v14;
            }
            while (v14 != v15);
          }
          a2 = (CFX::GPUResourceManager **)v36;
          CFX::RG::RenderGraphBuilder::replaceResource(this, (CFX::GPUResourceManager **)v36, v7, *(CFX::RG::Resource **)(v38 + 24 * v37 + 8), 0);
          v6 = v35;
        }
      }
LABEL_34:
      ++v5;
    }
    while (v5 != v6);
  }
  if (*((_BYTE *)this + 320))
  {
    v28 = *((_DWORD *)this + 76);
    if (v28)
    {
      v29 = (uint64_t *)*((_QWORD *)this + 39);
      v30 = &v29[3 * v28];
      do
      {
        v31 = *v29;
        v32 = (CFX::RG::Resource *)v29[1];
        v33 = (unsigned __int16 *)CFX::RG::Resource::textureDesc(v32);
        CFX::RG::RenderGraphContext::registerReferenceDescriptor((uint64_t)a2, v31, v33);
        CFX::RG::RenderGraphContext::registerResourceIdentifier((uint64_t)a2, v31, v32);
        v29 += 3;
      }
      while (v29 != v30);
    }
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, *((const CFX::RG::Resource ***)this + 13), (const CFX::RG::Resource **)(*((_QWORD *)this + 13) + 8 * *((unsigned int *)this + 24)));
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, *((const CFX::RG::Resource ***)this + 9), (const CFX::RG::Resource **)(*((_QWORD *)this + 9) + 8 * *((unsigned int *)this + 16)));
    *((_BYTE *)this + 320) = 0;
  }
  prof_endFlame();
  return 1;
}

void sub_1B21B0BE0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraphBuilder::replaceResource(CFX::RG::RenderGraphBuilder *this, CFX::GPUResourceManager **a2, CFX::RG::Resource *a3, CFX::RG::Resource *a4, char a5)
{
  uint64_t v10;
  CFX::RG::Pass **v11;
  uint64_t v12;
  CFX::RG::Pass *v13;

  v10 = *((unsigned int *)this + 40);
  if ((_DWORD)v10)
  {
    v11 = (CFX::RG::Pass **)*((_QWORD *)this + 21);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      CFX::RG::Pass::replaceResource(v13, a3, a4);
      v12 -= 8;
    }
    while (v12);
  }
  CFX::GPUResourceManager::mapResource(a2[3], a3, a4);
  if ((a5 & 1) != 0)
    CFX::RG::RenderGraphBuilder::removeResource(this, a3);
}

void CFX::RG::RenderGraphBuilder::initPassesAndResolveReferences(CFX::RG::RenderGraphBuilder *this, CFX::RG::RenderGraphContext *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  prof_beginFlame((uint64_t)"initPassesAndResolveReferences", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1395);
  v12 = *((_QWORD *)a2 + 2);
  v13 = 0;
  v14 = &v15;
  CFX::RG::RenderGraphBuilder::resolveReferences(this, (CFX::GPUResourceManager **)a2);
  v4 = *((unsigned int *)this + 40);
  do
  {
    LODWORD(v13) = 0;
    if (!v4)
      goto LABEL_12;
    v5 = (_QWORD *)*((_QWORD *)this + 21);
    v6 = 8 * v4;
    do
    {
      sub_1B18AE3A0(&v12, v5++);
      v6 -= 8;
    }
    while (v6);
    if ((_DWORD)v13)
    {
      v7 = v14;
      v8 = 8 * v13;
      do
      {
        v9 = (_BYTE *)*v7;
        if (!*(_BYTE *)(*v7 + 33))
        {
          v10 = (*(uint64_t (**)(uint64_t, CFX::RG::RenderGraphContext *))(*(_QWORD *)v9 + 16))(*v7, a2);
          v9[33] = v10;
          if (v10)
            CFX::RG::RenderGraphBuilder::resolveReferences(this, (CFX::GPUResourceManager **)a2);
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
      v11 = v13;
    }
    else
    {
LABEL_12:
      v11 = 0;
    }
    v4 = *((unsigned int *)this + 40);
  }
  while (v4 != v11);
  prof_endFlame();
}

void sub_1B21B0DAC(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::build(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  prof_beginFlame((uint64_t)"build", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1417);
  *((_QWORD *)a2 + 27) = a1;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  v34 = v6;
  v35 = 0;
  CStackAllocatorPushFrame(v6);
  CFX::RG::RenderGraphBuilder::initPassesAndResolveReferences((CFX::RG::RenderGraphBuilder *)a1, a2);
  if (CFX::RG::RenderGraphBuilder::validateMissingPublishedResources(a1, a3)
    && CFX::RG::RenderGraphBuilder::validateInitializedPasses(a1, a3))
  {
    v44 = *(_OWORD *)a1;
    sub_1B21B8888((uint64_t)&v44, 32);
    CFX::RG::RenderGraphBuilder::initializeDependencies((__int128 *)a1, (uint64_t)&v44);
    CFX::RG::RenderGraphBuilder::computePredecessors(a1, (uint64_t)&v44, (uint64_t)v6);
    v7 = *(unsigned int *)(a1 + 160);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)(a1 + 168);
      v9 = 8 * v7;
      do
      {
        CFX::RG::RenderGraphBuilder::cleanupPredecessorsBasedOnExplicitDependencies((__n128 *)a1, *v8++, (uint64_t)&v44, (uint64_t)v6);
        v9 -= 8;
      }
      while (v9);
    }
    if (CFX::RG::RenderGraphBuilder::tryResolveAmbiguousDependencies((__n128 *)a1, (uint64_t)&v44, &v34, a3))
    {
      v40 = *(_OWORD *)a1;
      sub_1B21B8888((uint64_t)&v40, 32);
      CFX::RG::RenderGraphBuilder::initializeDependencies((__int128 *)a1, (uint64_t)&v40);
      CFX::RG::RenderGraphBuilder::computeSuccessors(a1, (uint64_t)&v44, (uint64_t)&v40);
      v10 = *(_DWORD *)(a1 + 160);
      v37 = *(_OWORD *)a1;
      v38 = 0;
      v39 = &v40;
      if (v10)
        sub_1B21B8B40((uint64_t)&v37, v10, 1);
      CFX::RG::RenderGraphBuilder::computeStages((__int128 *)a1, (std::string *)a3, (uint64_t)&v37, (uint64_t)&v44, (uint64_t)&v40, (uint64_t)v6);
      v36 = *(_OWORD *)a1;
      v11 = sub_1B179C1C0(&v36, 0x118u, 8u);
      CFX::RG::RenderGraph::RenderGraph(v11, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      v35 = v11;
      v12 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD **)(a1 + 40);
        v14 = 8 * v12;
        do
        {
          sub_1B179C734((uint64_t *)(v11 + 16), v13++);
          v14 -= 8;
        }
        while (v14);
      }
      v15 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD **)(a1 + 72);
        v17 = 8 * v15;
        do
        {
          sub_1B179C734((uint64_t *)(v11 + 48), v16++);
          v17 -= 8;
        }
        while (v17);
      }
      v18 = *(unsigned int *)(a1 + 96);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD **)(a1 + 104);
        v20 = 8 * v18;
        do
        {
          sub_1B179C734((uint64_t *)(v11 + 80), v19++);
          v20 -= 8;
        }
        while (v20);
      }
      v21 = *(unsigned int *)(a1 + 160);
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD **)(a1 + 168);
        v23 = 8 * v21;
        do
        {
          sub_1B179C734((uint64_t *)(v11 + 112), v22++);
          v23 -= 8;
        }
        while (v23);
      }
      v24 = *(_QWORD *)(v11 + 184);
      *(_QWORD *)(v11 + 184) = v47;
      v47 = v24;
      v25 = *(_QWORD *)(v11 + 176);
      *(_QWORD *)(v11 + 176) = v46;
      v46 = v25;
      v26 = v45;
      v27 = *(_OWORD *)(v11 + 160);
      *(_OWORD *)(v11 + 144) = v44;
      *(_OWORD *)(v11 + 160) = v26;
      v45 = v27;
      *(_QWORD *)&v26 = *(_QWORD *)(v11 + 232);
      *(_QWORD *)(v11 + 232) = v43;
      v43 = v26;
      v28 = *(_QWORD *)(v11 + 224);
      *(_QWORD *)(v11 + 224) = v42;
      v42 = v28;
      v29 = v41;
      v30 = *(_OWORD *)(v11 + 208);
      *(_OWORD *)(v11 + 192) = v40;
      *(_OWORD *)(v11 + 208) = v29;
      v41 = v30;
      sub_1B21B8A40(v11 + 240, &v37);
      sub_1B179C734((uint64_t *)(a1 + 176), &v35);
      sub_1B21B89C0((uint64_t)&v37);
      sub_1B21B891C((uint64_t)&v40);
    }
    sub_1B21B891C((uint64_t)&v44);
  }
  CStackAllocatorPopFrame((uint64_t)v6);
  v31 = *(unsigned __int8 *)(a3 + 23);
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a3 + 8);
  if (v31)
    v32 = 0;
  else
    v32 = v35;
  *((_QWORD *)a2 + 27) = 0;
  prof_endFlame();
  return v32;
}

void sub_1B21B10EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_1B21B891C((uint64_t)va);
  sub_1B21B891C((uint64_t)va1);
  *(_QWORD *)(v9 + 216) = 0;
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::transferOwnershipTo(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(a2 + 272) = 1;
  *(_BYTE *)(result + 321) = 0;
  return result;
}

uint64_t *CFX::RG::RenderGraphBuilder::removePass(CFX::RG::RenderGraphBuilder *this, CFX::RG::Pass *a2, int a3)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *result;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  CFX::RG::Pass *v15;

  v6 = (unsigned int **)*((_QWORD *)this + 21);
  v7 = *((unsigned int *)this + 40);
  if (!(_DWORD)v7)
    goto LABEL_11;
  v8 = 8 * v7;
  do
  {
    if (*v6 != (unsigned int *)a2)
      CFX::RG::Pass::removeDependenciesOn(*v6, a2);
    ++v6;
    v8 -= 8;
  }
  while (v8);
  v6 = (unsigned int **)*((_QWORD *)this + 21);
  v9 = *((unsigned int *)this + 40);
  if ((_DWORD)v9)
  {
    v10 = 0;
    result = (uint64_t *)&v6[v9];
    while (v6[v10] != (unsigned int *)a2)
    {
      if (v9 == ++v10)
        goto LABEL_13;
    }
    result = (uint64_t *)&v6[v10];
LABEL_13:
    v12 = v9 - 1;
  }
  else
  {
LABEL_11:
    v9 = 0;
    v12 = -1;
    result = (uint64_t *)v6;
  }
  v13 = ((char *)result - (char *)v6) >> 3;
  if (v13 != v9)
  {
    *((_DWORD *)this + 40) = v12;
    if (v13 != v12)
      result = (uint64_t *)memmove(result, result + 1, (char *)&v6[v12] - (char *)result);
  }
  if (a3)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 1);
    result = (uint64_t *)(**(uint64_t (***)(CFX::RG::Pass *))a2)(a2);
    v15 = a2;
    if (v14)
      return sub_1B179C834(v14, &v15);
  }
  return result;
}

void CFX::RG::RenderGraphBuilder::removeResource(CFX::RG::RenderGraphBuilder *this, CFX::RG::Resource *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFX::RG::Resource **v7;
  uint64_t v8;
  uint64_t v9;
  CFX::RG::Resource **v10;
  uint64_t v11;
  uint64_t v12;
  CFX::RG::Resource **v13;
  uint64_t v14;
  uint64_t v15;
  CFX::RG::Resource **v16;
  uint64_t v17;
  uint64_t v18;

  prof_beginFlame((uint64_t)"removeResource", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1535);
  switch(*((_BYTE *)a2 + 8))
  {
    case 1:
      v4 = *((_QWORD *)this + 5);
      v5 = *((unsigned int *)this + 8);
      if ((_DWORD)v5)
      {
        v6 = 8 * v5;
        v7 = (CFX::RG::Resource **)*((_QWORD *)this + 5);
        do
        {
          if (*v7 == a2)
            goto LABEL_23;
          ++v7;
          v6 -= 8;
        }
        while (v6);
        v7 = (CFX::RG::Resource **)(v4 + 8 * v5);
      }
      else
      {
        v7 = (CFX::RG::Resource **)*((_QWORD *)this + 5);
      }
LABEL_23:
      v17 = ((uint64_t)v7 - v4) >> 3;
      v18 = (v5 - 1);
      *((_DWORD *)this + 8) = v18;
      goto LABEL_30;
    case 2:
      v4 = *((_QWORD *)this + 13);
      v8 = *((unsigned int *)this + 24);
      if ((_DWORD)v8)
      {
        v9 = 8 * v8;
        v10 = (CFX::RG::Resource **)*((_QWORD *)this + 13);
        do
        {
          if (*v10 == a2)
            goto LABEL_25;
          ++v10;
          v9 -= 8;
        }
        while (v9);
        v10 = (CFX::RG::Resource **)(v4 + 8 * v8);
      }
      else
      {
        v10 = (CFX::RG::Resource **)*((_QWORD *)this + 13);
      }
LABEL_25:
      v17 = ((uint64_t)v10 - v4) >> 3;
      v18 = (v8 - 1);
      *((_DWORD *)this + 24) = v18;
      goto LABEL_30;
    case 3:
      v4 = *((_QWORD *)this + 9);
      v11 = *((unsigned int *)this + 16);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = (CFX::RG::Resource **)*((_QWORD *)this + 9);
        do
        {
          if (*v13 == a2)
            goto LABEL_27;
          ++v13;
          v12 -= 8;
        }
        while (v12);
        v13 = (CFX::RG::Resource **)(v4 + 8 * v11);
      }
      else
      {
        v13 = (CFX::RG::Resource **)*((_QWORD *)this + 9);
      }
LABEL_27:
      v17 = ((uint64_t)v13 - v4) >> 3;
      v18 = (v11 - 1);
      *((_DWORD *)this + 16) = v18;
      goto LABEL_30;
    case 4:
      v4 = *((_QWORD *)this + 17);
      v14 = *((unsigned int *)this + 32);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        v16 = (CFX::RG::Resource **)*((_QWORD *)this + 17);
        do
        {
          if (*v16 == a2)
            goto LABEL_29;
          ++v16;
          v15 -= 8;
        }
        while (v15);
        v16 = (CFX::RG::Resource **)(v4 + 8 * v14);
      }
      else
      {
        v16 = (CFX::RG::Resource **)*((_QWORD *)this + 17);
      }
LABEL_29:
      v17 = ((uint64_t)v16 - v4) >> 3;
      v18 = (v14 - 1);
      *((_DWORD *)this + 32) = v18;
LABEL_30:
      if (v17 != v18)
        memmove((void *)(v4 + 8 * v17), (const void *)(v4 + 8 * v17 + 8), 8 * v18 - 8 * v17);
LABEL_32:
      sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), a2);
      prof_endFlame();
      return;
    default:
      goto LABEL_32;
  }
}

void sub_1B21B143C(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::findPublishedResource(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;

  prof_beginFlame((uint64_t)"findPublishedResource", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1566);
  v4 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (a2 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 1)) >> 47) ^ 1);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (*(_DWORD *)(a1 + 284) - 1) & v5;
  v7 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 272) + 2 * v6);
  if (v7 < 2)
    goto LABEL_5;
  while ((v7 & 2) == 0 || v5 != *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v6))
  {
    ++v6;
    v8 = v7 >= 4;
    v7 >>= 1;
    if (!v8)
      goto LABEL_5;
  }
  v11 = *(_QWORD *)(a1 + 264);
  if (v11)
    v9 = *(_QWORD *)(v11 + 24 * v6 + 16);
  else
LABEL_5:
    v9 = 0;
  prof_endFlame();
  return v9;
}

void CFX::RG::RenderGraphBuilder::searchPublishedResource(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  unint64_t v13;
  int8x16_t *v14;
  __int8 *v15;
  _BOOL4 v17;
  int8x16_t v21;

  prof_beginFlame((uint64_t)"searchPublishedResource", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1581);
  *a4 = a3;
  a4[1] = 0;
  a4[2] = a4 + 3;
  v8 = *(_DWORD *)(a1 + 304);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 312);
    v10 = (char *)(v9 + 24 * v8);
    v11 = (unsigned __int16)a2;
    v12 = WORD1(a2);
    v13 = HIDWORD(a2);
    v14 = (int8x16_t *)(v9 + 8);
    do
    {
      v15 = &v14[-1].i8[8];
      v17 = v12 == 6893 || v14[-1].u16[5] == v12;
      if ((v14[-1].u16[4] == v11 || v11 == 6893) && v17 && v14[-1].i32[3] == (_DWORD)v13)
      {
        v21 = vextq_s8(*v14, *v14, 8uLL);
        sub_1B21B1624((uint64_t)a4, (__n128 *)&v21);
      }
      v14 = (int8x16_t *)((char *)v14 + 24);
    }
    while (v15 + 24 != v10);
  }
  prof_endFlame();
}

void sub_1B21B1614(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

__n128 sub_1B21B1624(uint64_t a1, __n128 *a2)
{
  int v4;
  unsigned int v5;
  __n128 *v6;
  unsigned int v7;
  __n128 *Aligned;
  __n128 result;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(__n128 **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (__n128 *)CStackAllocatorAllocateAligned(*(_QWORD *)a1, 16 * v7, 8, 2);
    memcpy(Aligned, v6, 16 * *(unsigned int *)(a1 + 8));
    *(_QWORD *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    v6 = Aligned;
    v4 = *(_DWORD *)(a1 + 8);
  }
  result = *a2;
  v6[v4] = *a2;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void CFX::RG::RenderGraphBuilder::publishResourceReference(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  prof_beginFlame((uint64_t)"publishResourceReference", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1600);
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v24 = a4;
  *(_QWORD *)&v21 = a2 & 0xFFFFFFFF0000FFFFLL | 0x24390000;
  *((_QWORD *)&v21 + 1) = a3;
  v22 = a4;
  *(_QWORD *)&v19 = a2 & 0xFFFFFFFF00000000 | 0x24392439;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (a2 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 1)) >> 47) ^ 1);
  v25 = v23;
  v26 = a4;
  sub_1B21B8CD0(a1 + 240, 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)), &v25);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF0000FFFFLL ^ 0x24390001)) ^ ((0x9DDFEA08EB382D69
                                                                            * (a2 & 0xFFFFFFFF0000FFFFLL ^ 0x24390001)) >> 47) ^ 1);
  v25 = v21;
  v26 = a4;
  sub_1B21B8CD0(a1 + 240, 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47)), &v25);
  v25 = v19;
  v26 = a4;
  sub_1B21B8CD0(a1 + 240, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69* (((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF00000000) + 0x62F4B8EC3B0DB2F8) | 1) ^ ((0x9DDFEA08EB382D69* (a2 & 0xFFFFFFFF00000000)+ 0x62F4B8EC3B0DB2F8) >> 47))) ^ ((0x9DDFEA08EB382D69 * (((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF00000000) + 0x62F4B8EC3B0DB2F8) | 1) ^ ((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF00000000) + 0x62F4B8EC3B0DB2F8) >> 47))) >> 47)), &v25);
  v10 = *(unsigned int *)(a1 + 304);
  if (!(_DWORD)v10)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = *(uint64_t **)(a1 + 312);
  v15 = 24 * v10;
  do
  {
    v16 = *v14;
    if (*v14 == a2)
    {
      v11 = 1;
      v17 = &v23;
    }
    else if (v16 == (a2 & 0xFFFFFFFF0000FFFFLL | 0x24390000))
    {
      v13 = 1;
      v17 = &v21;
    }
    else
    {
      if (v16 != (a2 & 0xFFFFFFFF00000000 | 0x24392439))
        goto LABEL_10;
      v12 = 1;
      v17 = &v19;
    }
    v18 = *v17;
    v14[2] = *((_QWORD *)v17 + 2);
    *(_OWORD *)v14 = v18;
LABEL_10:
    v14 += 3;
    v15 -= 24;
  }
  while (v15);
  if ((v11 & 1) == 0)
LABEL_14:
    sub_1B21B190C(a1 + 288, (__n128 *)&v23);
  if ((v13 & 1) == 0)
    sub_1B21B190C(a1 + 288, (__n128 *)&v21);
  if ((v12 & 1) == 0)
    sub_1B21B190C(a1 + 288, (__n128 *)&v19);
  *(_BYTE *)(a1 + 320) = 1;
  prof_endFlame();
}

void sub_1B21B18F8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

__n128 sub_1B21B190C(uint64_t a1, __n128 *a2)
{
  unsigned int v4;
  __n128 *v5;
  __n128 result;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 + 1 > *(_DWORD *)(a1 + 20))
  {
    sub_1B21B87D8(a1, 1, 0);
    v4 = *(_DWORD *)(a1 + 16);
  }
  v5 = (__n128 *)(*(_QWORD *)(a1 + 24) + 24 * v4);
  result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *v5 = result;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

void CFX::RG::RenderGraphBuilder::aliasResourceReference(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t PublishedResource;
  unint64_t v6;

  PublishedResource = CFX::RG::RenderGraphBuilder::findPublishedResource(a1, a2);
  if (PublishedResource)
  {
    if (v6)
      CFX::RG::RenderGraphBuilder::publishResourceReference(a1, a3, v6, PublishedResource);
  }
}

void CFX::RG::RenderGraphBuilder::computePredecessors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int i;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  __n128 v44;
  uint64_t v45;
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  CFX::RG::RenderGraphBuilder::collectResourcesWrite(a1, a3, (uint64_t)v46);
  v5 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(a1 + 168);
    v42 = &v6[v5];
    while (1)
    {
      v43 = v6;
      v7 = *v6;
      v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v6) ^ ((0x9DDFEA08EB382D69 * *v6) >> 47));
      v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      v10 = *(unsigned int *)(*v6 + 72);
      if ((_DWORD)v10)
      {
        v11 = *(uint64_t **)(v7 + 80);
        v12 = &v11[v10];
        do
        {
          v13 = *v11;
          v14 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v11) ^ ((0x9DDFEA08EB382D69 * *v11) >> 47));
          v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
          v16 = (v50 - 1) & v15;
          v17 = *(unsigned __int16 *)(v49 + 2 * v16);
          if (v17 >= 2)
          {
            while ((v17 & 2) == 0 || v15 != *(_QWORD *)(v47 + 8 * v16))
            {
              ++v16;
              v18 = v17 >= 4;
              v17 >>= 1;
              if (!v18)
                goto LABEL_9;
            }
            if (v48)
            {
              v19 = v48 + 88 * v16;
              v20 = *(unsigned int *)(v19 + 8);
              if ((_DWORD)v20)
              {
                v21 = *(unint64_t **)(v19 + 16);
                v22 = &v21[v20];
                do
                {
                  if (*v21 != v7)
                  {
                    v44.n128_u64[0] = *v21;
                    v44.n128_u8[8] = 1;
                    v45 = v13;
                    v23 = (*(_DWORD *)(a2 + 44) - 1) & v9;
                    v24 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 2 * v23);
                    if (v24 < 2)
                    {
LABEL_19:
                      v26 = 0;
                    }
                    else
                    {
                      while ((v24 & 2) == 0 || v9 != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v23))
                      {
                        ++v23;
                        v25 = v24 > 3;
                        v24 >>= 1;
                        if (!v25)
                          goto LABEL_19;
                      }
                      v26 = *(_QWORD *)(a2 + 24) + 224 * v23;
                    }
                    sub_1B21B1E74(v26, &v44);
                  }
                  ++v21;
                }
                while (v21 != v22);
              }
            }
          }
LABEL_9:
          ++v11;
        }
        while (v11 != v12);
      }
      if (*(_BYTE *)(v7 + 344) == 3)
      {
        v27 = *(unsigned int *)(v7 + 168);
        if ((_DWORD)v27)
          break;
      }
LABEL_46:
      v6 = v43 + 1;
      if (v43 + 1 == v42)
        return;
    }
    v28 = *(uint64_t **)(v7 + 176);
    v29 = &v28[v27];
    while (1)
    {
      if (*(_BYTE *)(v7 + 344) == 3)
      {
        v30 = *v28;
        if ((sub_1B21AF7AC(*(_QWORD *)(v7 + 352), *v28) & 1) != 0)
        {
          v31 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v30) ^ ((0x9DDFEA08EB382D69 * v30) >> 47));
          v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
          v33 = (v50 - 1) & v32;
          for (i = *(unsigned __int16 *)(v49 + 2 * v33); (i & 2) == 0; ++v33)
LABEL_31:
            i >>= 1;
          if (v32 != *(_QWORD *)(v47 + 8 * v33))
            goto LABEL_31;
          v35 = v48 + 88 * v33;
          v36 = *(unsigned int *)(v35 + 8);
          if ((_DWORD)v36)
          {
            v37 = *(unint64_t **)(v35 + 16);
            v38 = &v37[v36];
            do
            {
              if (*v37 != v7)
              {
                v44.n128_u64[0] = *v37;
                v44.n128_u8[8] = 1;
                v45 = v30;
                v39 = (*(_DWORD *)(a2 + 44) - 1) & v9;
                v40 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 2 * v39);
                if (v40 < 2)
                {
LABEL_40:
                  v41 = 0;
                }
                else
                {
                  while ((v40 & 2) == 0 || v9 != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v39))
                  {
                    ++v39;
                    v25 = v40 > 3;
                    v40 >>= 1;
                    if (!v25)
                      goto LABEL_40;
                  }
                  v41 = *(_QWORD *)(a2 + 24) + 224 * v39;
                }
                sub_1B21B1E74(v41, &v44);
              }
              ++v37;
            }
            while (v37 != v38);
          }
        }
      }
      if (++v28 == v29)
        goto LABEL_46;
    }
  }
}

void CFX::RG::RenderGraphBuilder::collectResourcesWrite(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  prof_beginFlame((uint64_t)"collectResourcesWrite", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2390);
  *(_QWORD *)a3 = a2;
  sub_1B21BAD70(a3, 32);
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 168);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      v21 = v9;
      v10 = *(unsigned int *)(v9 + 168);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v9 + 176);
        v12 = &v11[v10];
        do
        {
          v13 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v11) ^ ((0x9DDFEA08EB382D69 * *v11) >> 47));
          v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
          v15 = (*(_DWORD *)(a3 + 36) - 1) & v14;
          v16 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 24) + 2 * v15);
          if (v16 < 2)
            goto LABEL_9;
          while ((v16 & 2) == 0 || v14 != *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v15))
          {
            ++v15;
            v17 = v16 >= 4;
            v16 >>= 1;
            if (!v17)
              goto LABEL_9;
          }
          v18 = *(_QWORD *)(a3 + 16);
          if (v18)
          {
            sub_1B18AE3A0((_DWORD *)(v18 + 88 * v15), &v21);
          }
          else
          {
LABEL_9:
            v19[0] = a2;
            v19[1] = 0x800000000;
            v19[2] = &v20;
            sub_1B18AE3A0(v19, &v21);
            sub_1B21B52D0(a3, v14, v19);
          }
          ++v11;
        }
        while (v11 != v12);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  prof_endFlame();
}

void sub_1B21B1E5C(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

double sub_1B21B1E74(uint64_t a1, __n128 *a2)
{
  double result;
  __n128 v5;
  unint64_t v6;

  v5 = *a2;
  v6 = a2[1].n128_u64[0];
  if (!sub_1B21B8FF4(a1, (uint64_t)&v5))
    *(_QWORD *)&result = sub_1B21B190C(a1, a2).n128_u64[0];
  return result;
}

void CFX::RG::RenderGraphBuilder::computeStages(__int128 *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  void *Aligned;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int i;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  __n128 *v51;
  uint64_t v52;
  __n128 *v53;
  uint64_t v54;
  __n128 *v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int j;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  std::string::size_type size;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  std::string *__dst;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v94;
  _QWORD v95[4];
  int v96;
  __n128 v97;
  _BYTE *v98;
  _BYTE v99[384];
  uint64_t v100;
  uint64_t v101;
  __n128 *v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  __n128 *v106;
  uint64_t v107;
  __int128 v108;
  __n128 *v109;
  _BYTE *v110;
  _BYTE v111[384];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD v130[3];

  prof_beginFlame((uint64_t)"computeStages", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1732);
  v108 = *a1;
  v109 = 0;
  v110 = v111;
  v91 = a3;
  sub_1B21B2888(a3, &v108);
  if (HIDWORD(v109))
  {
    v104 = v110;
    if (*((_QWORD *)&v108 + 1))
      sub_1B179C834(*((_QWORD **)&v108 + 1), &v104);
  }
  __dst = a2;
  v11 = *((_DWORD *)a1 + 40);
  v127 = a6;
  v128 = 0;
  v129 = v130;
  if (v11)
  {
    Aligned = CStackAllocatorAllocateAligned(a6, (8 * v11), 8, 2);
    memcpy(Aligned, v130, 8 * v128);
    v129 = Aligned;
    HIDWORD(v128) = v11;
    v13 = *((unsigned int *)a1 + 40);
    v14 = *(_QWORD *)(v91 + 24);
    if ((_DWORD)v13)
    {
      v15 = (_QWORD *)*((_QWORD *)a1 + 21);
      v16 = &v15[v13];
      do
      {
        v17 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v15) ^ ((0x9DDFEA08EB382D69 * *v15) >> 47));
        v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
        v19 = (*(_DWORD *)(a4 + 44) - 1) & v18;
        for (i = *(unsigned __int16 *)(*(_QWORD *)(a4 + 32) + 2 * v19); (i & 2) == 0; ++v19)
LABEL_9:
          i >>= 1;
        if (v18 != *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v19))
          goto LABEL_9;
        if (!*(_DWORD *)(*(_QWORD *)(a4 + 24) + 224 * v19 + 16))
          sub_1B179C734((uint64_t *)v14, v15);
        ++v15;
      }
      while (v15 != v16);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v91 + 24);
  }
  v121 = a6;
  sub_1B21B907C((uint64_t)&v121, 32);
  v117 = a6;
  v118 = 0x800000000;
  v119 = &v120;
  if (v14)
  {
    do
    {
      v113 = a6;
      v114 = 0x800000000;
      v115 = &v116;
      if ((_DWORD)v118)
      {
        v108 = *a1;
        v109 = 0;
        v110 = v111;
        sub_1B21B2888(v91, &v108);
        if (HIDWORD(v109))
        {
          v104 = v110;
          if (*((_QWORD *)&v108 + 1))
            sub_1B179C834(*((_QWORD **)&v108 + 1), &v104);
        }
        v21 = *(_QWORD *)(v91 + 24) + 32 * *(unsigned int *)(v91 + 16) - 32;
        if ((_DWORD)v118)
        {
          v22 = v119;
          v23 = 8 * v118;
          do
          {
            *(_QWORD *)&v108 = 0;
            *(_QWORD *)&v108 = *v22;
            sub_1B179C734((uint64_t *)v21, &v108);
            ++v22;
            v23 -= 8;
          }
          while (v23);
        }
      }
      else
      {
        v21 = 0;
      }
      v24 = *(unsigned int *)(v14 + 16);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD **)(v14 + 24);
        v26 = 8 * v24;
        do
        {
          *(_QWORD *)&v108 = 0;
          *(_QWORD *)&v108 = *v25;
          sub_1B18AE3A0(&v113, &v108);
          ++v25;
          v26 -= 8;
        }
        while (v26);
      }
      LODWORD(v118) = 0;
      if ((_DWORD)v114)
      {
        v27 = v115;
        v92 = &v115[v114];
        v28 = a5;
        while (1)
        {
          v112 = 0;
          v29 = *v27;
          v112 = v29;
          v30 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v29) ^ ((0x9DDFEA08EB382D69 * v29) >> 47));
          v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
          v32 = (v126 - 1) & v31;
          v33 = *(unsigned __int16 *)(v124 + 2 * v32);
          if (v33 >= 2)
          {
            while ((v33 & 2) == 0 || v31 != *(_QWORD *)(v122 + 8 * v32))
            {
              ++v32;
              v34 = v33 >= 4;
              v33 >>= 1;
              if (!v34)
                goto LABEL_37;
            }
            if (v123)
              break;
          }
LABEL_37:
          sub_1B18AE3A0(&v127, &v112);
          LOBYTE(v108) = 1;
          sub_1B21B2AE4((uint64_t)&v121, v31, &v108);
          v35 = (*(_DWORD *)(v28 + 44) - 1) & v31;
          v36 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 32) + 2 * v35);
          if (v36 < 2)
          {
LABEL_41:
            v38 = 0;
          }
          else
          {
            while ((v36 & 2) == 0 || v31 != *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * v35))
            {
              ++v35;
              v37 = v36 > 3;
              v36 >>= 1;
              if (!v37)
                goto LABEL_41;
            }
            v38 = *(_QWORD *)(v28 + 24) + 224 * v35;
          }
          v39 = *(unsigned int *)(v38 + 16);
          if ((_DWORD)v39)
          {
            if (!v21)
            {
              v108 = *a1;
              v109 = 0;
              v110 = v111;
              sub_1B21B2888(v91, &v108);
              if (HIDWORD(v109))
              {
                v104 = v110;
                if (*((_QWORD *)&v108 + 1))
                  sub_1B179C834(*((_QWORD **)&v108 + 1), &v104);
              }
              v21 = *(_QWORD *)(v91 + 24) + 32 * *(unsigned int *)(v91 + 16) - 32;
              v39 = *(unsigned int *)(v38 + 16);
            }
            *(_QWORD *)&v108 = a6;
            *((_QWORD *)&v108 + 1) = 0x1000000000;
            v109 = (__n128 *)&v110;
            v104 = (_BYTE *)a6;
            v105 = 0x1000000000;
            v106 = (__n128 *)&v107;
            v100 = a6;
            v101 = 0x1000000000;
            v102 = (__n128 *)&v103;
            if (v39)
            {
              v40 = *(unint64_t **)(v38 + 24);
              v41 = &v40[3 * v39];
              do
              {
                if (*((_BYTE *)v40 + 8) == 3)
                {
                  v97 = (__n128)*v40;
                  LOBYTE(v98) = 3;
                  sub_1B21B2D04((uint64_t)&v100, &v97);
                }
                v42 = *v40;
                v43 = *(unsigned int *)(*v40 + 72);
                if ((_DWORD)v43)
                {
                  v44 = *(_QWORD **)(v42 + 80);
                  v45 = v40[2];
                  v46 = 8 * v43;
                  while (v45 != *v44)
                  {
                    ++v44;
                    v46 -= 8;
                    if (!v46)
                      goto LABEL_58;
                  }
                  v97.n128_u64[0] = *v40;
                  v97.n128_u64[1] = v45;
                  LOBYTE(v98) = 1;
                  sub_1B21B2D04((uint64_t)&v108, &v97);
                  v42 = *v40;
                }
LABEL_58:
                v47 = *(unsigned int *)(v42 + 168);
                if ((_DWORD)v47)
                {
                  v48 = *(_QWORD **)(v42 + 176);
                  v49 = v40[2];
                  v50 = 8 * v47;
                  while (v49 != *v48)
                  {
                    ++v48;
                    v50 -= 8;
                    if (!v50)
                      goto LABEL_64;
                  }
                  v97.n128_u64[0] = v42;
                  v97.n128_u64[1] = v49;
                  LOBYTE(v98) = 2;
                  sub_1B21B2D04((uint64_t)&v104, &v97);
                }
LABEL_64:
                v40 += 3;
              }
              while (v40 != v41);
              v51 = v109;
              v97.n128_u64[0] = a6;
              v97.n128_u64[1] = 0x1000000000;
              v98 = v99;
              if (DWORD2(v108))
              {
                v52 = 24 * DWORD2(v108);
                do
                {
                  sub_1B21B2D04((uint64_t)&v97, v51);
                  v51 = (__n128 *)((char *)v51 + 24);
                  v52 -= 24;
                }
                while (v52);
              }
            }
            else
            {
              v97.n128_u64[0] = a6;
              v97.n128_u64[1] = 0x1000000000;
              v98 = v99;
            }
            if ((_DWORD)v105)
            {
              v53 = v106;
              v54 = 24 * v105;
              do
              {
                sub_1B21B2D04((uint64_t)&v97, v53);
                v53 = (__n128 *)((char *)v53 + 24);
                v54 -= 24;
              }
              while (v54);
            }
            if ((_DWORD)v101)
            {
              v55 = v102;
              v56 = 24 * v101;
              do
              {
                sub_1B21B2D04((uint64_t)&v97, v55);
                v55 = (__n128 *)((char *)v55 + 24);
                v56 -= 24;
              }
              while (v56);
            }
            v95[0] = a6;
            sub_1B19B7E30((uint64_t)v95, 32);
            if (v97.n128_u32[2])
            {
              v57 = v98;
              v58 = &v98[24 * v97.n128_u32[2]];
              do
              {
                v94 = 0;
                v59 = *(_QWORD *)v57;
                v94 = *(_QWORD *)v57;
                v60 = *(_QWORD *)(v21 + 24);
                v61 = *(unsigned int *)(v21 + 16);
                if ((_DWORD)v61)
                {
                  v62 = 8 * v61;
                  v63 = *(_QWORD **)(v21 + 24);
                  do
                  {
                    if (*v63 == v59)
                      goto LABEL_84;
                    ++v63;
                    v62 -= 8;
                  }
                  while (v62);
                  v63 = (_QWORD *)(v60 + 8 * v61);
                }
                else
                {
                  v63 = *(_QWORD **)(v21 + 24);
                }
LABEL_84:
                if (v61 != ((uint64_t)v63 - v60) >> 3)
                  goto LABEL_106;
                v64 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v59) ^ ((0x9DDFEA08EB382D69 * v59) >> 47));
                v65 = 0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47));
                v66 = (*(_DWORD *)(a4 + 44) - 1) & v65;
                for (j = *(unsigned __int16 *)(*(_QWORD *)(a4 + 32) + 2 * v66); (j & 2) == 0; ++v66)
LABEL_87:
                  j >>= 1;
                if (v65 != *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v66))
                  goto LABEL_87;
                v68 = *(_QWORD *)(a4 + 24) + 224 * v66;
                v69 = *(_DWORD *)(v68 + 16);
                if (v69)
                {
                  v70 = *(_QWORD **)(v68 + 24);
                  v71 = &v70[3 * v69];
                  v72 = v126 - 1;
                  do
                  {
                    v73 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v70) ^ ((0x9DDFEA08EB382D69 * *v70) >> 47));
                    v74 = 0x9DDFEA08EB382D69 * (v73 ^ (v73 >> 47));
                    v75 = v72 & v74;
                    v76 = *(unsigned __int16 *)(v124 + 2 * (v72 & v74));
                    if (v76 < 2)
                      goto LABEL_106;
                    while ((v76 & 2) == 0 || v74 != *(_QWORD *)(v122 + 8 * v75))
                    {
                      ++v75;
                      v34 = v76 >= 4;
                      v76 >>= 1;
                      if (!v34)
                        goto LABEL_106;
                    }
                    if (!v123)
                      goto LABEL_106;
                    v70 += 3;
                  }
                  while (v70 != v71);
                }
                v77 = v57[16];
                if (v77 == 2)
                {
                  v79 = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * *((_QWORD *)v57 + 1)) ^ ((0x9DDFEA08EB382D69 * *((_QWORD *)v57 + 1)) >> 47));
                  v80 = 0x9DDFEA08EB382D69 * (v79 ^ (v79 >> 47));
                  v81 = (v96 - 1) & v80;
                  v82 = *(unsigned __int16 *)(v95[3] + 2 * v81);
                  if (v82 >= 2)
                  {
                    while ((v82 & 2) == 0 || v80 != *(_QWORD *)(v95[1] + 8 * v81))
                    {
                      ++v81;
                      v34 = v82 >= 4;
                      v82 >>= 1;
                      if (!v34)
                        goto LABEL_105;
                    }
                    if (v95[2])
                    {
                      sub_1B18AE3A0(&v117, v57);
                      goto LABEL_106;
                    }
                  }
                }
                else if (v77 == 1)
                {
                  v78 = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * *((_QWORD *)v57 + 1)) ^ ((0x9DDFEA08EB382D69 * *((_QWORD *)v57 + 1)) >> 47));
                  v130[0] = *((_QWORD *)v57 + 1);
                  sub_1B21B9180((uint64_t)v95, 0x9DDFEA08EB382D69 * (v78 ^ (v78 >> 47)), v130);
                }
LABEL_105:
                sub_1B179C734((uint64_t *)v21, &v94);
LABEL_106:
                v57 += 24;
              }
              while (v57 != v58);
            }
          }
          ++v27;
          v28 = a5;
          if (v27 == v92)
            goto LABEL_116;
        }
        CFX::RG::RenderGraphBuilder::cycleErrorMessage(v29, (uint64_t)&v127, &v108);
        if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst->__r_.__value_.__l.__data_);
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v108;
        __dst->__r_.__value_.__r.__words[2] = (std::string::size_type)v109;
      }
LABEL_116:
      v14 = v21;
    }
    while (v21);
  }
  size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __dst->__r_.__value_.__l.__size_;
  if (!size)
  {
    if (v125 == *((_DWORD *)a1 + 40))
    {
      v84 = *(unsigned int *)(v91 + 16);
      if ((_DWORD)v84)
      {
        v85 = 32 * v84;
        v86 = (uint64_t *)(*(_QWORD *)(v91 + 24) + 24);
        do
        {
          v87 = *((unsigned int *)v86 - 2);
          v88 = 126 - 2 * __clz(v87);
          if ((_DWORD)v87)
            v89 = v88;
          else
            v89 = 0;
          sub_1B21B654C(*v86, (uint64_t *)(*v86 + 8 * v87), v89, 1);
          v86 += 4;
          v85 -= 32;
        }
        while (v85);
      }
    }
    else
    {
      sub_1B19710E4(__dst, "Some passes are not part of the graph", 0x25uLL);
    }
  }
  prof_endFlame();
}

void sub_1B21B2808(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B21B2888(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 + 1 > *(_DWORD *)(a1 + 20))
  {
    sub_1B21B8B40(a1, 1, 0);
    v4 = *(_DWORD *)(a1 + 16);
  }
  v5 = *(_QWORD *)(a1 + 24) + 32 * v4;
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 32;
  result = sub_1B21B8C38(v5, a2);
  ++*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t CFX::RG::RenderGraphBuilder::cycleErrorMessage@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  sub_1B21AE738((uint64_t)&v18);
  v6 = sub_1B1960B04(&v18, (uint64_t)"Cycle detected on [", 19);
  v7 = strlen(*(const char **)(a1 + 24));
  v8 = sub_1B1960B04(v6, *(_QWORD *)(a1 + 24), v7);
  sub_1B1960B04(v8, (uint64_t)"] ", 2);
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 16) + 8 * *(unsigned int *)(a2 + 8);
  while (v10 != *(_QWORD *)(a2 + 16))
  {
    v11 = sub_1B1960B04(&v18, (uint64_t)"<", 1);
    v12 = strlen(*(const char **)(*(_QWORD *)(v10 - 8) + 24));
    v13 = sub_1B1960B04(v11, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 24), v12);
    sub_1B1960B04(v13, (uint64_t)"> ", 2);
    v14 = v10 - 8;
    if (*(_QWORD *)(v10 - 8) == a1)
      ++v9;
    v10 -= 8;
    if (v9 == 2)
    {
      v15 = sub_1B1960B04(&v18, (uint64_t)"=>", 2);
      v16 = strlen(*(const char **)(*(_QWORD *)v14 + 24));
      sub_1B1960B04(v15, *(_QWORD *)(*(_QWORD *)v14 + 24), v16);
      break;
    }
  }
  sub_1B1960E14((uint64_t)v19, a3);
  v18 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E22DDC](&v21);
}

void sub_1B21B2AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B21AE824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B21B2AE4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_BYTE *)(v26 + v15) = *(_BYTE *)(v26 + v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21B9110(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + v10) = *a3;
  return result;
}

__n128 sub_1B21B2D04(uint64_t a1, __n128 *a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  char *Aligned;
  __n128 *v9;
  __n128 result;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(char **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (char *)CStackAllocatorAllocateAligned(*(_QWORD *)a1, 24 * v7, 8, 2);
    memcpy(Aligned, v6, 24 * *(unsigned int *)(a1 + 8));
    *(_QWORD *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    v6 = Aligned;
    v4 = *(_DWORD *)(a1 + 8);
  }
  v9 = (__n128 *)&v6[24 * v4];
  result = *a2;
  v9[1].n128_u64[0] = a2[1].n128_u64[0];
  *v9 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void CFX::RG::RenderGraphBuilder::cleanupPredecessorsBasedOnExplicitDependencies(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  __n128 *v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  void *Aligned;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  __n128 *v65;
  __n128 *v66;
  uint64_t v67;
  uint64_t *v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  uint64_t *v76;
  __n128 v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE v81[192];
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD v89[4];
  int v90;
  uint64_t v91;
  uint64_t v92;
  __n128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;

  prof_beginFlame((uint64_t)"cleanupPredecessorsBasedOnExplicitDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1919);
  v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v73 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v8 = (*(_DWORD *)(a3 + 44) - 1) & v73;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 2 * v8);
  if (v9 < 2)
  {
LABEL_5:
    v11 = 0;
  }
  else
  {
    while ((v9 & 2) == 0 || v73 != *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v8))
    {
      ++v8;
      v10 = v9 > 3;
      v9 >>= 1;
      if (!v10)
        goto LABEL_5;
    }
    v11 = *(_QWORD *)(a3 + 24) + 224 * v8;
  }
  v95 = a4;
  v96 = 0x800000000;
  v97 = &v98;
  v12 = 24;
  do
  {
    v13 = (char *)&v95 + v12;
    *(_QWORD *)v13 = 0;
    v13[8] = 0;
    *((_QWORD *)v13 + 2) = 0;
    v12 += 24;
  }
  while (v13 + 24 != (char *)&v99);
  v71 = a3;
  v91 = a4;
  v92 = 0x800000000;
  v93 = (__n128 *)&v94;
  v14 = 24;
  do
  {
    v15 = (char *)&v91 + v14;
    *(_QWORD *)v15 = 0;
    v15[8] = 0;
    *((_QWORD *)v15 + 2) = 0;
    v14 += 24;
  }
  while (v15 + 24 != (char *)&v95);
  v16 = *(_DWORD *)(v11 + 16);
  if (v16)
  {
    v17 = *(__n128 **)(v11 + 24);
    v18 = (__n128 *)((char *)v17 + 24 * v16);
    do
    {
      if (v17->n128_u8[8] == 1
        && *(_BYTE *)(v17->n128_u64[0] + 344) == 3
        && (sub_1B21AF7AC(*(_QWORD *)(v17->n128_u64[0] + 352), v17[1].n128_i64[0]) & 1) != 0)
      {
        v19 = *(_QWORD *)(v17->n128_u64[0] + 272);
        v20 = *(unsigned int *)(v17->n128_u64[0] + 264);
        if ((_DWORD)v20)
        {
          v21 = 8 * v20;
          v22 = *(_QWORD **)(v17->n128_u64[0] + 272);
          while (*v22 != a2)
          {
            ++v22;
            v21 -= 8;
            if (!v21)
            {
              v22 = (_QWORD *)(v19 + 8 * v20);
              break;
            }
          }
        }
        else
        {
          v22 = *(_QWORD **)(v17->n128_u64[0] + 272);
        }
        if (v20 != ((uint64_t)v22 - v19) >> 3)
          sub_1B21B2D04((uint64_t)&v95, v17);
      }
      v17 = (__n128 *)((char *)v17 + 24);
    }
    while (v17 != v18);
  }
  v89[0] = a4;
  sub_1B19B7E30((uint64_t)v89, 32);
  v23 = *(unsigned int *)(v11 + 16);
  if ((_DWORD)v23)
  {
    v24 = 24 * v23;
    v25 = *(_QWORD *)(v11 + 24) + 8;
    v26 = (unsigned __int8 *)v25;
    do
    {
      v27 = *v26;
      v26 += 24;
      if (v27 != 3)
      {
        v28 = *(_QWORD *)(v25 - 8);
        v29 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v28) ^ ((0x9DDFEA08EB382D69 * v28) >> 47));
        v78.n128_u64[0] = v28;
        sub_1B21B9410((uint64_t)v89, 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47)), &v78);
      }
      v25 = (uint64_t)v26;
      v24 -= 24;
    }
    while (v24);
  }
  v72 = a1;
  v85[0] = a4;
  sub_1B21B96A0((uint64_t)v85, 32);
  v30 = *(unsigned int *)(a2 + 264);
  if ((_DWORD)v30)
  {
    v31 = *(unint64_t **)(a2 + 272);
    v74 = &v31[v30];
    do
    {
      v75 = v31;
      v32 = *v31;
      v33 = *(unsigned int *)(*v31 + 168);
      if ((_DWORD)v33)
      {
        v34 = *(uint64_t **)(v32 + 176);
        v76 = &v34[v33];
        do
        {
          v35 = *(_DWORD *)(v11 + 16);
          if (v35)
          {
            v36 = *v34;
            v37 = *(__n128 **)(v11 + 24);
            v38 = (__n128 *)((char *)v37 + 24 * v35);
            v39 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v34) ^ ((0x9DDFEA08EB382D69 * *v34) >> 47));
            v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
            do
            {
              if (v37->n128_u8[8] == 1 && v37[1].n128_u64[0] == v36 && v37->n128_u64[0] != v32)
              {
                if ((_DWORD)v30 == 1)
                {
                  sub_1B21B2D04((uint64_t)&v95, v37);
                }
                else
                {
                  v41 = (v88 - 1) & v40;
                  v42 = *(unsigned __int16 *)(v87 + 2 * v41);
                  if (v42 < 2)
                    goto LABEL_46;
                  while ((v42 & 2) == 0 || v40 != *(_QWORD *)(v85[1] + 8 * v41))
                  {
                    ++v41;
                    v43 = v42 >= 4;
                    v42 >>= 1;
                    if (!v43)
                      goto LABEL_46;
                  }
                  if (v86)
                  {
                    sub_1B21B3598((_DWORD *)(v86 + 32 * v41 + 8), v37);
                  }
                  else
                  {
LABEL_46:
                    v82 = a4;
                    v83 = 0;
                    v84 = v85;
                    Aligned = CStackAllocatorAllocateAligned(a4, 0x40uLL, 8, 2);
                    memcpy(Aligned, v85, 8 * v83);
                    v84 = Aligned;
                    HIDWORD(v83) = 8;
                    sub_1B18AE3A0(&v82, v37);
                    v78.n128_u64[0] = v37[1].n128_u64[0];
                    v78.n128_u64[1] = v82;
                    v80 = v81;
                    v79 = v83;
                    if (v84 == v85)
                      memcpy(v81, v85, 8 * v83);
                    else
                      v80 = v84;
                    v83 = 0;
                    v84 = v85;
                    sub_1B21B35EC((uint64_t)v85, v40, &v78);
                  }
                }
              }
              v37 = (__n128 *)((char *)v37 + 24);
            }
            while (v37 != v38);
          }
          ++v34;
        }
        while (v34 != v76);
      }
      v45 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v32) ^ ((0x9DDFEA08EB382D69 * v32) >> 47));
      v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
      v47 = (v90 - 1) & v46;
      v48 = *(unsigned __int16 *)(v89[3] + 2 * v47);
      if (v48 < 2)
        goto LABEL_57;
      while ((v48 & 2) == 0 || v46 != *(_QWORD *)(v89[1] + 8 * v47))
      {
        ++v47;
        v43 = v48 >= 4;
        v48 >>= 1;
        if (!v43)
          goto LABEL_57;
      }
      if (!v89[2])
      {
LABEL_57:
        v78.n128_u64[0] = v32;
        v78.n128_u8[8] = 3;
        v79 = 0;
        sub_1B21B2D04((uint64_t)&v91, &v78);
      }
      v31 = v75 + 1;
    }
    while (v75 + 1 != v74);
  }
  if (v88 != -15)
  {
    v49 = 0;
    v51 = v86;
    v50 = v87;
    v52 = (v88 + 15);
    do
    {
      if ((*(_WORD *)(v50 + 2 * v49) & 1) != 0)
      {
        v53 = v51 + 32 * v49;
        v54 = *(unsigned int *)(v53 + 16);
        if ((_DWORD)v54 == 1)
        {
          v78.n128_u64[0] = **(_QWORD **)(v53 + 24);
          v78.n128_u8[8] = 1;
          v79 = *(_QWORD *)v53;
          sub_1B21B2D04((uint64_t)&v95, &v78);
        }
        else
        {
          v55 = *(unsigned int *)(v11 + 16);
          if ((_DWORD)v55)
          {
            v56 = 0;
            v57 = 24 * v55;
            v58 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16);
            do
            {
              v59 = *v58;
              v58 += 3;
              if (v59 == *(_QWORD *)v53)
                ++v56;
              v57 -= 24;
            }
            while (v57);
            if (v56 > v54 && (_DWORD)v54)
            {
              v60 = *(unint64_t **)(v51 + 32 * v49 + 24);
              v61 = 8 * v54;
              do
              {
                v78.n128_u64[0] = *v60;
                v78.n128_u8[8] = 1;
                v79 = *(_QWORD *)v53;
                sub_1B21B2D04((uint64_t)&v95, &v78);
                ++v60;
                v61 -= 8;
              }
              while (v61);
            }
          }
        }
      }
      ++v49;
    }
    while (v49 != v52);
  }
  v78 = *v72;
  v79 = 0x800000000;
  v80 = v81;
  v62 = 32;
  do
  {
    v63 = (char *)&v78 + v62;
    *(_QWORD *)v63 = 0;
    v63[8] = 0;
    *((_QWORD *)v63 + 2) = 0;
    v62 += 24;
  }
  while (v63 + 24 != (char *)&v82);
  v64 = *(_DWORD *)(v11 + 16);
  if (v64)
  {
    v65 = *(__n128 **)(v11 + 24);
    v66 = (__n128 *)((char *)v65 + 24 * v64);
    do
    {
      if ((_DWORD)v96)
      {
        v67 = 24 * v96;
        v68 = v97;
        while (*v68 != v65->n128_u64[0]
             || *((unsigned __int8 *)v68 + 8) != v65->n128_u8[8]
             || v68[2] != v65[1].n128_u64[0])
        {
          v68 += 3;
          v67 -= 24;
          if (!v67)
          {
            v68 = &v97[3 * v96];
            break;
          }
        }
      }
      else
      {
        v68 = v97;
      }
      if (0xAAAAAAAAAAAAAAABLL * (v68 - v97) == v96)
        sub_1B21B190C((uint64_t)&v78, v65);
      v65 = (__n128 *)((char *)v65 + 24);
    }
    while (v65 != v66);
  }
  if ((_DWORD)v92)
  {
    v69 = v93;
    v70 = 24 * v92;
    do
    {
      sub_1B21B190C((uint64_t)&v78, v69);
      v69 = (__n128 *)((char *)v69 + 24);
      v70 -= 24;
    }
    while (v70);
  }
  sub_1B21B3880(v71, v73, &v78);
  if (HIDWORD(v79))
  {
    if (v80 != v81)
    {
      v82 = (unint64_t)v80;
      if (v78.n128_u64[1])
        sub_1B179C834((_QWORD *)v78.n128_u64[1], &v82);
    }
  }
  prof_endFlame();
}

void sub_1B21B3540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1B21B8680((uint64_t)va);
  prof_endFlame();
  _Unwind_Resume(a1);
}

_DWORD *sub_1B21B3598(_DWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((_QWORD *)result + 2);
  v3 = result[2];
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = (_QWORD *)*((_QWORD *)result + 2);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)result + 2);
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3)
    return sub_1B18AE3A0(result, a2);
  return result;
}

uint64_t sub_1B21B35EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  __int16 *v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v6 + 15;
    if (v12 >= (int)v7 + 496)
      v12 = v7 + 496;
    if (v7 >= v12)
    {
      v14 = v7;
    }
    else
    {
      v13 = (__int16 *)(v8 + 2 * v7);
      v14 = v7;
      while (1)
      {
        v15 = *v13++;
        if ((v15 & 1) == 0)
          break;
        if (v12 == ++v14)
          goto LABEL_32;
      }
    }
    if (v14 != v12)
    {
      *(_WORD *)(v8 + 2 * v14) |= 1u;
      if (v14 <= (int)v7 + 14)
      {
        v29 = v14;
        LOBYTE(v20) = v14;
      }
      else
      {
        while (2)
        {
          v16 = v14 - 14;
          if (v14 < 0xF)
            v16 = 0;
          v17 = v16 - 1;
          if (v16 <= v14)
            v18 = v14;
          else
            v18 = v16;
          v19 = 1;
          while (1)
          {
            v20 = v17 + 1;
            if (v16 <= v20)
              break;
LABEL_26:
            ++v19;
            v17 = v20;
            if ((_DWORD)v20 == v18)
              goto LABEL_31;
          }
          v21 = 1 << (v17 - v16 + 2);
          v22 = v19;
          v23 = v16;
          while (1)
          {
            v24 = v23;
            if (((unsigned __int16)v21 & *(_WORD *)(v8 + 2 * v23)) != 0)
              break;
            ++v23;
            LOWORD(v21) = (unsigned __int16)v21 >> 1;
            --v22;
            if ((int)v24 + 1 > v20)
              goto LABEL_26;
          }
          if (v20 >= v14)
          {
LABEL_31:
            *(_WORD *)(v8 + 2 * v14) ^= 1u;
            goto LABEL_32;
          }
          v25 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20);
          v26 = (_QWORD *)(v25 + 32 * v14);
          v27 = v25 + 32 * v20;
          *v26 = *(_QWORD *)(v25 + 32 * v20);
          v28 = *(_QWORD *)(v27 + 8);
          v26[2] = 0;
          v26[3] = v26 + 4;
          v26[1] = v28;
          sub_1B21B9734((uint64_t)(v26 + 1), (_QWORD *)(v27 + 8));
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v14 - v24 + 1))) ^ (1 << v22);
          v14 = v20;
          v29 = v20;
          if (v20 > (int)v7 + 14)
            continue;
          break;
        }
      }
      v32 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v29);
      *v32 = *a3;
      v32[1] = a3[1];
      v32[2] = 0;
      ++v32;
      v32[2] = v32 + 3;
      result = sub_1B21B9734((uint64_t)v32, a3 + 1);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v29) = a2;
      v33 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v33 + 2 * v29) |= 1u;
      *(_WORD *)(v33 + 2 * v7) |= 1 << (v20 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_32:
    sub_1B21B97AC(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  v30 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v10);
  *v30 = *a3;
  return sub_1B21B9734((uint64_t)(v30 + 1), a3 + 1);
}

uint64_t sub_1B21B3880(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  __int16 *v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  while (1)
  {
    v5 = *(_DWORD *)(a1 + 44);
    v6 = (v5 - 1) & a2;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2)
      break;
LABEL_6:
    v11 = v5 + 15;
    if (v11 >= (int)v6 + 496)
      v11 = v6 + 496;
    if (v6 >= v11)
    {
      v13 = v6;
    }
    else
    {
      v12 = (__int16 *)(v7 + 2 * v6);
      v13 = v6;
      while (1)
      {
        v14 = *v12++;
        if ((v14 & 1) == 0)
          break;
        if (v11 == ++v13)
          goto LABEL_34;
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        v24 = v13;
        LOBYTE(v19) = v13;
      }
      else
      {
        do
        {
          v15 = v13 - 14;
          if (v13 < 0xF)
            v15 = 0;
          v16 = v15 - 1;
          if (v15 <= v13)
            v17 = v13;
          else
            v17 = v15;
          v18 = 1;
          while (1)
          {
            v19 = v16 + 1;
            if (v15 <= v19)
              break;
LABEL_26:
            ++v18;
            v16 = v19;
            if ((_DWORD)v19 == v17)
              goto LABEL_33;
          }
          v20 = 1 << (v16 - v15 + 2);
          v21 = v18;
          v22 = v15;
          while (1)
          {
            v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0)
              break;
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19)
              goto LABEL_26;
          }
          if (v19 >= v13)
          {
LABEL_33:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_34;
          }
          v24 = v19;
          v25 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v13) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v19);
          v26 = v25 + 224 * v13;
          v27 = (_QWORD *)(v25 + 224 * v19);
          *(_OWORD *)v26 = *(_OWORD *)v27;
          *(_QWORD *)(v26 + 16) = 0x800000000;
          v28 = v26 + 32;
          *(_QWORD *)(v26 + 24) = v26 + 32;
          do
          {
            *(_QWORD *)v28 = 0;
            *(_BYTE *)(v28 + 8) = 0;
            *(_QWORD *)(v28 + 16) = 0;
            v28 += 24;
          }
          while (v28 != v26 + 224);
          sub_1B21B981C(v26, v27);
          sub_1B21B8680(*(_QWORD *)(a1 + 24) + 224 * v19);
          v7 = *(_QWORD *)(a1 + 32);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          v13 = v19;
        }
        while (v19 > (int)v6 + 14);
      }
      v30 = *(_QWORD *)(a1 + 24) + 224 * v24;
      *(_OWORD *)v30 = *(_OWORD *)a3;
      *(_QWORD *)(v30 + 16) = 0x800000000;
      v31 = v30 + 32;
      *(_QWORD *)(v30 + 24) = v30 + 32;
      do
      {
        *(_QWORD *)v31 = 0;
        *(_BYTE *)(v31 + 8) = 0;
        *(_QWORD *)(v31 + 16) = 0;
        v31 += 24;
      }
      while (v31 != v30 + 224);
      sub_1B21B981C(v30, a3);
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24) = a2;
      v32 = *(_QWORD *)(a1 + 32);
      *(_WORD *)(v32 + 2 * v24) |= 1u;
      result = 1;
      *(_WORD *)(v32 + 2 * v6) |= 1 << (v19 - v6 + 1);
      ++*(_DWORD *)(a1 + 40);
      return result;
    }
LABEL_34:
    sub_1B21B98CC(a1);
  }
  v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) != a2)
  {
    ++v9;
    v10 = v8 > 3;
    v8 >>= 1;
    if (!v10)
      goto LABEL_6;
  }
  sub_1B21B981C(*(_QWORD *)(a1 + 24) + 224 * v9, a3);
  return 0;
}

uint64_t CFX::RG::RenderGraphBuilder::tryResolveAmbiguousDependencies(__n128 *a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  __n128 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int **v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unsigned __int32 v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int32 v67;
  __int16 *v68;
  _OWORD *v69;
  uint64_t v70;
  __int16 v71;
  const void *v72;
  unsigned int v73;
  void *Aligned;
  uint64_t v75;
  _QWORD *v76;
  size_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  size_t v87;
  _QWORD *v88;
  _QWORD *v89;
  size_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  __n128 *v99;
  __n128 *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  __n128 *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD v120[2];
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE v133[40];
  void *__p;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int **v140;
  unsigned int *v141;
  void *v142;
  uint64_t v143;
  unsigned __int16 *v144;
  int v145;
  int v146;
  __n128 v147;
  _OWORD *v148;
  unsigned __int16 *v149;
  int v150;
  int v151;
  unsigned int *v152;
  uint64_t v153;
  unint64_t *v154;
  uint64_t v155;

  prof_beginFlame((uint64_t)"tryResolveAmbiguousDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2061);
  CStackAllocatorPushFrame(*a3);
  v8 = a1[10].n128_u32[0];
  if (!(_DWORD)v8)
    goto LABEL_113;
  v9 = (_QWORD *)a1[10].n128_u64[1];
  v107 = &v9[v8];
  v111 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v112 = *MEMORY[0x1E0DE4F60];
  v110 = MEMORY[0x1E0DE4FB8] + 16;
  v115 = a3;
  v113 = a4;
  v105 = a2;
  v108 = a1;
  do
  {
    v116 = *v9;
    v10 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v116) ^ ((0x9DDFEA08EB382D69 * v116) >> 47));
    v11 = *a3;
    v124 = *a3;
    v12 = v10 ^ (v10 >> 47);
    v125 = 0x800000000;
    v126 = &v127;
    v13 = 3;
    do
    {
      v14 = &(&v124)[v13];
      *v14 = 0;
      *((_BYTE *)v14 + 8) = 0;
      v14[2] = 0;
      v13 += 3;
    }
    while (v14 + 3 != (unsigned int **)&v128);
    v15 = 0x9DDFEA08EB382D69 * v12;
    v16 = (*(_DWORD *)(a2 + 44) - 1) & (-348639895 * v12);
    v17 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 2 * v16);
    v109 = v15;
    if (v17 < 2)
    {
LABEL_9:
      v117 = 0;
    }
    else
    {
      while ((v17 & 2) == 0 || v15 != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v16))
      {
        ++v16;
        v18 = v17 > 3;
        v17 >>= 1;
        if (!v18)
          goto LABEL_9;
      }
      v117 = *(_QWORD *)(a2 + 24) + 224 * v16;
    }
    v120[0] = v11;
    sub_1B21B999C((uint64_t)v120, 32);
    v19 = *(_DWORD *)(v117 + 16);
    if (v19)
    {
      v20 = *(_QWORD *)(v117 + 24);
      v21 = v20 + 24 * v19;
      do
      {
        if (*(_BYTE *)(v20 + 8) == 1)
        {
          v22 = *(_QWORD *)(v20 + 16);
          v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v22) ^ ((0x9DDFEA08EB382D69 * v22) >> 47));
          v24 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
          v147.n128_u64[0] = *(_QWORD *)v20;
          v147.n128_u64[1] = v22;
          v25 = (v123 - 1) & v24;
          v26 = *(unsigned __int16 *)(v122 + 2 * v25);
          if (v26 < 2)
            goto LABEL_17;
          while ((v26 & 2) == 0 || v24 != *(_QWORD *)(v120[1] + 8 * v25))
          {
            ++v25;
            v27 = v26 >= 4;
            v26 >>= 1;
            if (!v27)
              goto LABEL_17;
          }
          if (v121)
          {
            sub_1B21B1624(v121 + 24 * v25, &v147);
          }
          else
          {
LABEL_17:
            v130 = (__n128)(unint64_t)*a3;
            v131 = (uint64_t)&v132;
            sub_1B21B1624((uint64_t)&v130, &v147);
            sub_1B21B46F4((uint64_t)v120, v24, &v130);
          }
        }
        v20 += 24;
      }
      while (v20 != v21);
    }
    v28 = v123;
    v29 = v108;
    if (v123 == -15)
      goto LABEL_90;
    v106 = v9;
    v114 = 0;
    v30 = 0;
    do
    {
      if ((*(_WORD *)(v122 + 2 * v30) & 1) == 0)
        goto LABEL_78;
      v119 = v28;
      v31 = v121 + 24 * v30;
      v34 = *(_DWORD *)(v31 + 8);
      v33 = (unsigned int *)(v31 + 8);
      v32 = v34;
      if (v34 < 2)
        goto LABEL_77;
      v35 = v121 + 24 * v30;
      v38 = *(_QWORD **)(v35 + 16);
      v36 = (_QWORD **)(v35 + 16);
      v37 = v38;
      v118 = v38[1];
      v152 = *a3;
      v153 = 0;
      v154 = (unint64_t *)&v155;
      v39 = 16 * v32;
      do
      {
        sub_1B18AE3A0(&v152, v37);
        v37 += 2;
        v39 -= 16;
      }
      while (v39);
      v147.n128_u64[0] = (unint64_t)*a3;
      sub_1B21B9D30((uint64_t)&v147, 32);
      v141 = *a3;
      sub_1B21B907C((uint64_t)&v141, 32);
      v138 = *a3;
      v139 = 0;
      v140 = &v141;
      if (!(_DWORD)v153)
      {
LABEL_69:
        sub_1B21AE738((uint64_t)&v130);
        a3 = v115;
        v76 = sub_1B1960B04(&v130, (uint64_t)"Ambiguous dependency on pass [", 30);
        v77 = strlen(*(const char **)(v116 + 24));
        v78 = sub_1B1960B04(v76, *(_QWORD *)(v116 + 24), v77);
        sub_1B1960B04(v78, (uint64_t)"] reading resource written by multiple passes:\n", 47);
        v79 = *v33;
        if ((_DWORD)v79)
        {
          v80 = *v36;
          v81 = 16 * v79;
          do
          {
            v82 = sub_1B1960B04(&v130, (uint64_t)"\t<", 2);
            v83 = strlen(*(const char **)(v80[1] + 16));
            v84 = sub_1B1960B04(v82, *(_QWORD *)(v80[1] + 16), v83);
            sub_1B1960B04(v84, (uint64_t)"> written by [", 14);
            v85 = (_QWORD *)std::ostream::operator<<();
            v86 = sub_1B1960B04(v85, (uint64_t)":", 1);
            v87 = strlen(*(const char **)(*v80 + 24));
            v88 = sub_1B1960B04(v86, *(_QWORD *)(*v80 + 24), v87);
            sub_1B1960B04(v88, (uint64_t)"]\n", 2);
            v80 += 2;
            v81 -= 16;
          }
          while (v81);
        }
        v89 = sub_1B1960B04(&v130, (uint64_t)"Must add explicit dependency on [", 33);
        v90 = strlen(*(const char **)(v116 + 24));
        v91 = sub_1B1960B04(v89, *(_QWORD *)(v116 + 24), v90);
        sub_1B1960B04(v91, (uint64_t)"]", 1);
        sub_1B1960E14((uint64_t)&v130.n128_i64[1], &v128);
        if (*(char *)(v113 + 23) < 0)
          operator delete(*(void **)v113);
        *(_OWORD *)v113 = v128;
        *(_QWORD *)(v113 + 16) = v129;
        v130.n128_u64[0] = v112;
        *(unint64_t *)((char *)v130.n128_u64 + *(_QWORD *)(v112 - 24)) = v111;
        v130.n128_u64[1] = v110;
        if (v135 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B5E22DDC](&v136);
        v114 = 1;
LABEL_77:
        v28 = v119;
        goto LABEL_78;
      }
      v40 = v154;
      v41 = &v154[v153];
      while (1)
      {
        v42 = *v40;
        v43 = v151 + 15;
        memset((void *)v147.n128_u64[1], 255, 8 * (v151 + 15));
        bzero(v149, 2 * v43);
        v150 = 0;
        LODWORD(v139) = 0;
        memset(v142, 255, 8 * (v146 + 15));
        bzero(v144, 2 * (v146 + 15));
        v145 = 0;
        if ((_DWORD)v153)
        {
          v44 = v154;
          v45 = 8 * v153;
          do
          {
            v46 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v44) ^ ((0x9DDFEA08EB382D69 * *v44) >> 47));
            v130.n128_u8[0] = 0;
            sub_1B21B9B1C((uint64_t)&v141, 0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47)), &v130);
            ++v44;
            v45 -= 8;
          }
          while (v45);
        }
        v130.n128_u64[0] = v42;
        v130.n128_u32[2] = 0;
        sub_1B21B1624((uint64_t)&v138, &v130);
        v47 = v139;
        if (!(_DWORD)v139)
        {
          if (!(_DWORD)v153)
            goto LABEL_69;
          goto LABEL_57;
        }
        do
        {
          v48 = &v140[2 * v47];
          v49 = (unint64_t)*(v48 - 2);
          v51 = *((_DWORD *)v48 - 2);
          v50 = *((_DWORD *)v48 - 1);
          LODWORD(v139) = v47 - 1;
          v52 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v49) ^ ((0x9DDFEA08EB382D69 * v49) >> 47));
          v53 = 0x9DDFEA08EB382D69 * (v52 ^ (v52 >> 47));
          v54 = (v151 - 1) & v53;
          v55 = v149[v54];
          if (v55 < 2)
            goto LABEL_38;
          while ((v55 & 2) == 0 || v53 != *(_QWORD *)(v147.n128_u64[1] + 8 * v54))
          {
            ++v54;
            v27 = v55 >= 4;
            v55 >>= 1;
            if (!v27)
              goto LABEL_38;
          }
          if (!v148 || v51 > DWORD2(v148[v54]))
          {
LABEL_38:
            v130.n128_u64[0] = v49;
            v130.n128_u64[1] = __PAIR64__(v50, v51);
            sub_1B21B9E34((uint64_t)&v147, v53, &v130);
          }
          v56 = *(unsigned int *)(v49 + 264);
          if ((_DWORD)v56)
          {
            v57 = *(unint64_t **)(v49 + 272);
            v58 = &v57[v56];
            v59 = v51 + 1;
            do
            {
              v60 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v57) ^ ((0x9DDFEA08EB382D69 * *v57) >> 47));
              v61 = 0x9DDFEA08EB382D69 * (v60 ^ (v60 >> 47));
              v62 = (v146 - 1) & v61;
              v63 = v144[v62];
              if (v63 >= 2)
              {
                while ((v63 & 2) == 0 || v61 != *((_QWORD *)v142 + v62))
                {
                  ++v62;
                  v27 = v63 >= 4;
                  v63 >>= 1;
                  if (!v27)
                    goto LABEL_48;
                }
                if (v143)
                {
                  v130.n128_u64[0] = *v57;
                  v130.n128_u32[2] = v59;
                  sub_1B21B1624((uint64_t)&v138, &v130);
                }
              }
LABEL_48:
              ++v57;
            }
            while (v57 != v58);
          }
          v47 = v139;
        }
        while ((_DWORD)v139);
        if (v150 == (_DWORD)v153)
          break;
LABEL_57:
        if (++v40 == v41)
          goto LABEL_69;
      }
      if (!v150)
        goto LABEL_69;
      a3 = v115;
      v130 = (__n128)(unint64_t)*v115;
      v65 = v117;
      v64 = &v132;
      v131 = (uint64_t)&v132;
      v66 = &v132;
      if (v151 == -15)
        goto LABEL_80;
      v67 = 0;
      v69 = v148;
      v68 = (__int16 *)v149;
      v70 = (v151 + 15);
      do
      {
        v71 = *v68++;
        if ((v71 & 1) != 0)
        {
          v72 = (const void *)v131;
          if (v67 + 1 > v130.n128_u32[3])
          {
            v73 = ((double)(v130.n128_u32[3] + 1) * 1.5);
            Aligned = CStackAllocatorAllocateAligned(v130.n128_i64[0], 16 * v73, 8, 2);
            memcpy(Aligned, v72, 16 * v130.n128_u32[2]);
            v131 = (uint64_t)Aligned;
            v130.n128_u32[3] = v73;
            v72 = Aligned;
            v67 = v130.n128_u32[2];
            a3 = v115;
          }
          *((_OWORD *)v72 + v67) = *v69;
          v67 = ++v130.n128_u32[2];
          v65 = v117;
        }
        ++v69;
        --v70;
      }
      while (v70);
      v64 = (_QWORD *)v131;
      v66 = (_QWORD *)(v131 + 16 * v67);
      if (!v67)
LABEL_80:
        v75 = 0;
      else
        v75 = 126 - 2 * __clz(v67);
      sub_1B21BA0CC((uint64_t)v64, (unint64_t)v66, v75, 1);
      v92 = *(unsigned int *)(v65 + 16);
      if ((_DWORD)v92)
      {
        v93 = *(_QWORD *)v131;
        v94 = *(__n128 **)(v117 + 24);
        v95 = 24 * v92;
        do
        {
          if (v94->n128_u8[8] == 1 && v94[1].n128_u64[0] == v118 && v94->n128_u64[0] != v93)
            sub_1B21B2D04((uint64_t)&v124, v94);
          v94 = (__n128 *)((char *)v94 + 24);
          v95 -= 24;
        }
        while (v95);
      }
      v28 = v123;
LABEL_78:
      ++v30;
    }
    while (v30 < (v28 + 15));
    a2 = v105;
    v9 = v106;
    v29 = v108;
    if (v114)
    {
      v103 = 0;
      goto LABEL_115;
    }
LABEL_90:
    if ((_DWORD)v125)
    {
      v130 = *v29;
      v131 = 0x800000000;
      v132 = v133;
      v96 = 32;
      do
      {
        v97 = (char *)&v130 + v96;
        *(_QWORD *)v97 = 0;
        v97[8] = 0;
        *((_QWORD *)v97 + 2) = 0;
        v96 += 24;
      }
      while (v97 + 24 != (char *)&v137);
      v98 = *(_DWORD *)(v117 + 16);
      if (v98)
      {
        v99 = *(__n128 **)(v117 + 24);
        v100 = (__n128 *)((char *)v99 + 24 * v98);
        do
        {
          if ((_DWORD)v125)
          {
            v101 = 24 * v125;
            v102 = v126;
            while (*v102 != v99->n128_u64[0]
                 || *((unsigned __int8 *)v102 + 8) != v99->n128_u8[8]
                 || v102[2] != v99[1].n128_u64[0])
            {
              v102 += 3;
              v101 -= 24;
              if (!v101)
              {
                v102 = &v126[3 * v125];
                break;
              }
            }
          }
          else
          {
            v102 = v126;
          }
          if (0xAAAAAAAAAAAAAAABLL * (v102 - v126) == v125)
            sub_1B21B190C((uint64_t)&v130, v99);
          v99 = (__n128 *)((char *)v99 + 24);
        }
        while (v99 != v100);
      }
      sub_1B21B3880(a2, v109, &v130);
      if (HIDWORD(v131))
      {
        if (v132 != v133)
        {
          v147.n128_u64[0] = (unint64_t)v132;
          if (v130.n128_u64[1])
            sub_1B179C834((_QWORD *)v130.n128_u64[1], &v147);
        }
      }
    }
    ++v9;
  }
  while (v9 != v107);
LABEL_113:
  v103 = 1;
LABEL_115:
  CStackAllocatorPopFrame((uint64_t)*a3);
  prof_endFlame();
  return v103;
}

void sub_1B21B4624(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B21B46F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  __int16 *v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;

  while (1)
  {
    v5 = *(_DWORD *)(a1 + 36);
    v6 = (v5 - 1) & a2;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2)
      break;
LABEL_6:
    v11 = v5 + 15;
    if (v11 >= (int)v6 + 496)
      v11 = v6 + 496;
    if (v6 >= v11)
    {
      v13 = v6;
    }
    else
    {
      v12 = (__int16 *)(v7 + 2 * v6);
      v13 = v6;
      while (1)
      {
        v14 = *v12++;
        if ((v14 & 1) == 0)
          break;
        if (v11 == ++v13)
          goto LABEL_32;
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        v19 = v13;
      }
      else
      {
        while (2)
        {
          v15 = v13 - 14;
          if (v13 < 0xF)
            v15 = 0;
          v16 = v15 - 1;
          if (v15 <= v13)
            v17 = v13;
          else
            v17 = v15;
          v18 = 1;
          while (1)
          {
            v19 = v16 + 1;
            if (v15 <= v19)
              break;
LABEL_26:
            ++v18;
            v16 = v19;
            if ((_DWORD)v19 == v17)
              goto LABEL_31;
          }
          v20 = 1 << (v16 - v15 + 2);
          v21 = v18;
          v22 = v15;
          while (1)
          {
            v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0)
              break;
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19)
              goto LABEL_26;
          }
          if (v19 >= v13)
          {
LABEL_31:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_32;
          }
          v24 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v13) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
          v25 = (_QWORD *)(v24 + 24 * v13);
          v26 = (_QWORD *)(v24 + 24 * v19);
          *v25 = *v26;
          v25[1] = 0;
          v25[2] = v25 + 3;
          sub_1B21B9A34((uint64_t)v25, v26);
          v7 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          v13 = v19;
          if (v19 > (int)v6 + 14)
            continue;
          break;
        }
        LOBYTE(v13) = v19;
      }
      v28 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v19);
      *v28 = *a3;
      v28[1] = 0;
      v28[2] = v28 + 3;
      result = sub_1B21B9A34((uint64_t)v28, a3);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) = a2;
      v29 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v29 + 2 * v19) |= 1u;
      *(_WORD *)(v29 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_32:
    sub_1B21B9AAC(a1);
  }
  v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) != a2)
  {
    ++v9;
    v10 = v8 > 3;
    v8 >>= 1;
    if (!v10)
      goto LABEL_6;
  }
  return sub_1B21B9A34(*(_QWORD *)(a1 + 16) + 24 * v9, a3);
}

void CFX::RG::RenderGraphBuilder::computeSuccessors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;

  prof_beginFlame((uint64_t)"computeSuccessors", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2220);
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6)
  {
    v7 = *(unint64_t **)(a1 + 168);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      v10 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v7) ^ ((0x9DDFEA08EB382D69 * *v7) >> 47));
      v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      v12 = (*(_DWORD *)(a2 + 44) - 1) & v11;
      v13 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 2 * v12);
      if (v13 >= 2)
      {
        while ((v13 & 2) == 0 || v11 != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v12))
        {
          ++v12;
          v14 = v13 >= 4;
          v13 >>= 1;
          if (!v14)
            goto LABEL_7;
        }
        v15 = *(_QWORD *)(a2 + 24);
        if (v15)
        {
          v16 = v15 + 224 * v12;
          v17 = *(_DWORD *)(v16 + 16);
          if (v17)
          {
            v18 = *(_QWORD *)(v16 + 24);
            v19 = v18 + 24 * v17;
            do
            {
              v20 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * *(_QWORD *)v18) ^ ((0x9DDFEA08EB382D69 * *(_QWORD *)v18) >> 47));
              v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
              v22 = *(unsigned __int8 *)(v18 + 8);
              if (v22 == 3)
              {
                v23 = 0;
                v30.n128_u64[0] = v9;
                v30.n128_u8[8] = 3;
                v31 = 0;
                v24 = (*(_DWORD *)(a3 + 44) - 1) & v21;
                v25 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 2 * v24);
                if (v25 >= 2)
                {
                  while ((v25 & 2) == 0 || v21 != *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v24))
                  {
                    ++v24;
                    v26 = v25 > 3;
                    v25 >>= 1;
                    if (!v26)
                    {
                      v23 = 0;
                      goto LABEL_19;
                    }
                  }
                  v23 = *(_QWORD *)(a3 + 24) + 224 * v24;
                }
LABEL_19:
                sub_1B21B190C(v23, &v30);
                v22 = *(unsigned __int8 *)(v18 + 8);
              }
              if (v22 == 1)
              {
                v30.n128_u64[0] = v9;
                v30.n128_u8[8] = 2;
                v31 = *(_QWORD *)(v18 + 16);
                v27 = (*(_DWORD *)(a3 + 44) - 1) & v21;
                v28 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 2 * v27);
                if (v28 < 2)
                {
LABEL_25:
                  v29 = 0;
                }
                else
                {
                  while ((v28 & 2) == 0 || v21 != *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v27))
                  {
                    ++v27;
                    v26 = v28 > 3;
                    v28 >>= 1;
                    if (!v26)
                      goto LABEL_25;
                  }
                  v29 = *(_QWORD *)(a3 + 24) + 224 * v27;
                }
                sub_1B21B190C(v29, &v30);
              }
              v18 += 24;
            }
            while (v18 != v19);
          }
        }
      }
LABEL_7:
      ++v7;
    }
    while (v7 != v8);
  }
  prof_endFlame();
}

void sub_1B21B4BC8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraphBuilder::dumpDependencies(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *__p[2];
  char v18;

  puts("After cleanup");
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 168);
    v6 = v5 + 8 * v4;
    do
    {
      v7 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * *(_QWORD *)v5) ^ ((0x9DDFEA08EB382D69 * *(_QWORD *)v5) >> 47));
      v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      v9 = (*(_DWORD *)(a2 + 44) - 1) & v8;
      v10 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 2 * v9);
      if (v10 < 2)
      {
LABEL_7:
        v12 = 0;
      }
      else
      {
        while ((v10 & 2) == 0 || v8 != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9))
        {
          ++v9;
          v11 = v10 > 3;
          v10 >>= 1;
          if (!v11)
            goto LABEL_7;
        }
        v12 = *(_QWORD *)(a2 + 24) + 224 * v9;
      }
      printf("Pass [%s]\n", *(const char **)(*(_QWORD *)v5 + 24));
      v13 = *(unsigned int *)(v12 + 16);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v12 + 24);
        v15 = 24 * v13;
        do
        {
          sub_1B21B4D50(v14, __p);
          if (v18 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          printf("-> %s", (const char *)v16);
          if (v18 < 0)
            operator delete(__p[0]);
          v14 += 24;
          v15 -= 24;
        }
        while (v15);
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
}

uint64_t sub_1B21B4D50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v20;
  _QWORD v21[10];
  char v22;
  uint64_t v23;
  std::locale v24;

  sub_1B21AE738((uint64_t)&v20);
  v4 = *(char *)(a1 + 8);
  if (v4 > 3)
    v5 = "Unknown";
  else
    v5 = off_1E63FC2A8[v4];
  v6 = strlen(v5);
  v7 = sub_1B1960B04(&v20, (uint64_t)v5, v6);
  sub_1B1960B04(v7, (uint64_t)" ", 1);
  v8 = sub_1B1960B04(&v20, (uint64_t)"[", 1);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    v10 = *(const char **)(v9 + 16);
  else
    v10 = "";
  v11 = strlen(v10);
  v12 = sub_1B1960B04(v8, (uint64_t)v10, v11);
  sub_1B1960B04(v12, (uint64_t)"] ", 2);
  v13 = sub_1B1960B04(&v20, (uint64_t)"from \"", 6);
  v14 = *(const char **)(*(_QWORD *)a1 + 24);
  v15 = strlen(v14);
  v16 = sub_1B1960B04(v13, (uint64_t)v14, v15);
  v17 = sub_1B1960B04(v16, (uint64_t)"\" pass", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v24, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  sub_1B1960E14((uint64_t)v21, a2);
  v20 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E22DDC](&v23);
}

void sub_1B21B4F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1B21AE824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::validateResolve(uint64_t this, CFX::GPUResourceManager **a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  const CFX::RG::Resource *v8;
  uint64_t v9;
  unint64_t v10;
  const CFX::RG::Resource *v11;

  v2 = *(unsigned int *)(this + 160);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(this + 168);
    v5 = &v4[v2];
    do
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 344) == 3 && *(_DWORD *)(v6 + 168))
      {
        v7 = 0;
        do
        {
          if (*(_BYTE *)(v6 + 344) == 3)
          {
            v8 = *(const CFX::RG::Resource **)(*(_QWORD *)(v6 + 176) + 8 * v7);
            this = sub_1B21AF6F0(*(_QWORD *)(v6 + 352), (uint64_t)v8);
            if (this)
            {
              v9 = this;
              if ((*(_BYTE *)this & 4) != 0)
              {
                this = CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, v8);
                if (*(_DWORD *)(v6 + 168))
                {
                  v10 = 0;
                  do
                  {
                    v11 = *(const CFX::RG::Resource **)(*(_QWORD *)(v6 + 176) + 8 * v10);
                    if (v8 != v11 && *(_BYTE *)(v6 + 344) == 3)
                    {
                      this = sub_1B21AF6F0(*(_QWORD *)(v6 + 352), *(_QWORD *)(*(_QWORD *)(v6 + 176) + 8 * v10));
                      if (this)
                      {
                        if (*(unsigned __int8 *)(v9 + 4) == *(unsigned __int8 *)(this + 4)
                          && *(_DWORD *)(v9 + 8) == *(_DWORD *)(this + 8))
                        {
                          this = CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, v11);
                        }
                      }
                    }
                    ++v10;
                  }
                  while (v10 < *(unsigned int *)(v6 + 168));
                }
              }
            }
          }
          ++v7;
        }
        while (v7 < *(unsigned int *)(v6 + 168));
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t *CFX::RG::RenderGraphBuilder::appendResource(uint64_t *this, CFX::RG::Resource *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  CFX::RG::Resource *v5;

  v5 = a2;
  v2 = this;
  switch(*((_BYTE *)a2 + 8))
  {
    case 1:
      v3 = this + 2;
      goto LABEL_6;
    case 2:
      v3 = this + 10;
      goto LABEL_6;
    case 3:
      v3 = this + 6;
      goto LABEL_6;
    case 4:
      *((_BYTE *)this + 320) = 1;
      v4 = *((_QWORD *)a2 + 23);
      sub_1B21B5130(this + 26, &v4);
      v3 = v2 + 14;
LABEL_6:
      this = sub_1B179C734(v3, &v5);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t *sub_1B21B5130(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;

  v3 = result;
  v4 = *((_DWORD *)result + 4);
  if (v4 + 1 > *((_DWORD *)result + 5))
  {
    result = sub_1B179C78C((uint64_t)result, 1, 0);
    v4 = *((_DWORD *)v3 + 4);
  }
  *(_QWORD *)(v3[3] + 8 * v4) = *a2;
  ++*((_DWORD *)v3 + 4);
  return result;
}

void CFX::RG::RenderGraphBuilder::initializeDependencies(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v14[192];
  uint64_t v15;
  _BYTE *v16;

  prof_beginFlame((uint64_t)"initializeDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2365);
  v4 = *((unsigned int *)a1 + 40);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)*((_QWORD *)a1 + 21);
    v6 = &v5[v4];
    do
    {
      v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v5) ^ ((0x9DDFEA08EB382D69 * *v5) >> 47));
      v11 = *a1;
      v8 = v7 ^ (v7 >> 47);
      v12 = 0x800000000;
      v13 = v14;
      v9 = 32;
      do
      {
        v10 = (char *)&v11 + v9;
        *(_QWORD *)v10 = 0;
        v10[8] = 0;
        *((_QWORD *)v10 + 2) = 0;
        v9 += 24;
      }
      while (v10 + 24 != (char *)&v15);
      sub_1B21B3880(a2, 0x9DDFEA08EB382D69 * v8, &v11);
      if (HIDWORD(v12))
      {
        if (v13 != v14)
        {
          v16 = v13;
          if (*((_QWORD *)&v11 + 1))
            sub_1B179C834(*((_QWORD **)&v11 + 1), &v16);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  prof_endFlame();
}

void sub_1B21B52B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B21B8680((uint64_t)&a9);
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B21B52D0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  __int16 *v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;

  while (1)
  {
    v5 = *(_DWORD *)(a1 + 36);
    v6 = (v5 - 1) & a2;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2)
      break;
LABEL_6:
    v11 = v5 + 15;
    if (v11 >= (int)v6 + 496)
      v11 = v6 + 496;
    if (v6 >= v11)
    {
      v13 = v6;
    }
    else
    {
      v12 = (__int16 *)(v7 + 2 * v6);
      v13 = v6;
      while (1)
      {
        v14 = *v12++;
        if ((v14 & 1) == 0)
          break;
        if (v11 == ++v13)
          goto LABEL_32;
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        v19 = v13;
      }
      else
      {
        while (2)
        {
          v15 = v13 - 14;
          if (v13 < 0xF)
            v15 = 0;
          v16 = v15 - 1;
          if (v15 <= v13)
            v17 = v13;
          else
            v17 = v15;
          v18 = 1;
          while (1)
          {
            v19 = v16 + 1;
            if (v15 <= v19)
              break;
LABEL_26:
            ++v18;
            v16 = v19;
            if ((_DWORD)v19 == v17)
              goto LABEL_31;
          }
          v20 = 1 << (v16 - v15 + 2);
          v21 = v18;
          v22 = v15;
          while (1)
          {
            v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0)
              break;
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19)
              goto LABEL_26;
          }
          if (v19 >= v13)
          {
LABEL_31:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_32;
          }
          v24 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v13) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
          v25 = (_QWORD *)(v24 + 88 * v13);
          v26 = (_QWORD *)(v24 + 88 * v19);
          *v25 = *v26;
          v25[1] = 0x800000000;
          v25[2] = v25 + 3;
          sub_1B21BAE08((uint64_t)v25, v26);
          v7 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          v13 = v19;
          if (v19 > (int)v6 + 14)
            continue;
          break;
        }
        LOBYTE(v13) = v19;
      }
      v28 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88 * v19);
      *v28 = *a3;
      v28[1] = 0x800000000;
      v28[2] = v28 + 3;
      sub_1B21BAE08((uint64_t)v28, a3);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) = a2;
      v29 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v29 + 2 * v19) |= 1u;
      result = 1;
      *(_WORD *)(v29 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_32:
    sub_1B21BAE98(a1);
  }
  v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) != a2)
  {
    ++v9;
    v10 = v8 > 3;
    v8 >>= 1;
    if (!v10)
      goto LABEL_6;
  }
  sub_1B21BAE08(*(_QWORD *)(a1 + 16) + 88 * v9, a3);
  return 0;
}

uint64_t CFX::RG::RenderGraph::RenderGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 152) = a3;
  sub_1B21B8888(a1 + 144, 32);
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 200) = a3;
  sub_1B21B8888(a1 + 192, 32);
  *(_QWORD *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 248) = a3;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_BYTE *)(a1 + 272) = 0;
  return a1;
}

void sub_1B21B5630(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B21B891C(v5);
  sub_1B190D7C4(v4);
  sub_1B190D7C4(v3);
  sub_1B190D7C4(v2);
  sub_1B190D7C4(v1);
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraph::~RenderGraph(CFX::RG::RenderGraph *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  _QWORD *v6;
  uint64_t v7;
  CFX::RG::Resource **v8;
  uint64_t v9;
  uint64_t v10;
  CFX::RG::Resource **v11;
  uint64_t v12;
  uint64_t v13;
  CFX::RG::Resource **v14;
  uint64_t v15;
  void (***v16)(_QWORD);

  if (*((_BYTE *)this + 272))
  {
    v2 = *((unsigned int *)this + 32);
    if ((_DWORD)v2)
    {
      v3 = (_QWORD *)*((_QWORD *)this + 17);
      v4 = 8 * v2;
      do
      {
        v5 = (void (***)(_QWORD))*v3;
        v6 = (_QWORD *)*((_QWORD *)this + 1);
        (**(void (***)(_QWORD))*v3)(*v3);
        v16 = v5;
        if (v6)
          sub_1B179C834(v6, &v16);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v7 = *((unsigned int *)this + 8);
    if ((_DWORD)v7)
    {
      v8 = (CFX::RG::Resource **)*((_QWORD *)this + 5);
      v9 = 8 * v7;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v8++);
        v9 -= 8;
      }
      while (v9);
    }
    v10 = *((unsigned int *)this + 16);
    if ((_DWORD)v10)
    {
      v11 = (CFX::RG::Resource **)*((_QWORD *)this + 9);
      v12 = 8 * v10;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v11++);
        v12 -= 8;
      }
      while (v12);
    }
    v13 = *((unsigned int *)this + 24);
    if ((_DWORD)v13)
    {
      v14 = (CFX::RG::Resource **)*((_QWORD *)this + 13);
      v15 = 8 * v13;
      do
      {
        sub_1B21B0074(*(_QWORD *)this, *((_QWORD **)this + 1), *v14++);
        v15 -= 8;
      }
      while (v15);
    }
  }
  sub_1B21B89C0((uint64_t)this + 240);
  sub_1B21B891C((uint64_t)this + 192);
  sub_1B21B891C((uint64_t)this + 144);
  sub_1B190D7C4((uint64_t)this + 112);
  sub_1B190D7C4((uint64_t)this + 80);
  sub_1B190D7C4((uint64_t)this + 48);
  sub_1B190D7C4((uint64_t)this + 16);
}

void sub_1B21B57A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B21B89C0(v1 + 240);
  sub_1B21B891C(v1 + 192);
  sub_1B21B891C(v1 + 144);
  sub_1B190D7C4(v1 + 112);
  sub_1B190D7C4(v1 + 80);
  sub_1B190D7C4(v1 + 48);
  sub_1B190D7C4(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraph::execute(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];

  v3 = *(unsigned int *)(result + 256);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)(result + 264);
    v7 = v6 + 32 * v3;
    do
    {
      v8 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v8)
      {
        v9 = *(uint64_t **)(v6 + 24);
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          v12[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 24))(v11, a2, a3, v12);
          result = sub_1B21B6F44((uint64_t)v12);
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v6 += 32;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_1B21B5898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B21B6F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraph::log@<X0>(CFX::RG::RenderGraph *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  const char *v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  const char *v52;
  size_t v53;
  _QWORD *v54;
  size_t v55;
  _QWORD *v56;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  CFX::RG::RenderGraph *v64;
  void *__p[2];
  unsigned __int8 v66;
  int v67;
  uint64_t v68;
  _QWORD v69[10];
  char v70;
  uint64_t v71;

  sub_1B21AE738((uint64_t)&v68);
  v64 = this;
  v3 = *((unsigned int *)this + 64);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *((_QWORD *)v64 + 33);
    v59 = v5 + 32 * v3;
    do
    {
      sub_1B1960B04(&v68, (uint64_t)"Stage [", 7);
      v6 = (_QWORD *)std::ostream::operator<<();
      sub_1B1960B04(v6, (uint64_t)"]\n", 2);
      v60 = v4;
      v61 = v5;
      v7 = *(unsigned int *)(v5 + 16);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD **)(v5 + 24);
        v62 = &v8[v7];
        do
        {
          v9 = *v8;
          v10 = sub_1B1960B04(&v68, (uint64_t)"\t[", 2);
          v11 = strlen(*(const char **)(v9 + 24));
          v12 = sub_1B1960B04(v10, *(_QWORD *)(v9 + 24), v11);
          v13 = sub_1B1960B04(v12, (uint64_t)"]", 1);
          v14 = sub_1B1960B04(v13, (uint64_t)" : ", 3);
          v15 = *(char *)(v9 + 344);
          v16 = "Unknown";
          if (v15 <= 4)
            v16 = off_1E63FC280[v15];
          v17 = strlen(v16);
          v18 = sub_1B1960B04(v14, (uint64_t)v16, v17);
          sub_1B1960B04(v18, (uint64_t)"\n", 1);
          v63 = v8;
          v19 = *(unsigned int *)(v9 + 72);
          if ((_DWORD)v19)
          {
            v20 = *(uint64_t **)(v9 + 80);
            v21 = 8 * v19;
            do
            {
              v22 = *v20;
              v23 = sub_1B1960B04(&v68, (uint64_t)"\t\t reading \"", 12);
              v24 = strlen(*(const char **)(v22 + 16));
              v25 = sub_1B1960B04(v23, *(_QWORD *)(v22 + 16), v24);
              sub_1B1960B04(v25, (uint64_t)"\" <", 3);
              v26 = (_QWORD *)std::ostream::operator<<();
              sub_1B1960B04(v26, (uint64_t)">\n", 2);
              ++v20;
              v21 -= 8;
            }
            while (v21);
          }
          v27 = *(unsigned int *)(v9 + 168);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)(v9 + 176);
            v29 = 8 * v27;
            do
            {
              v30 = *v28;
              if (*(_BYTE *)(v9 + 344) == 3)
                v31 = sub_1B21AF7AC(*(_QWORD *)(v9 + 352), *v28);
              else
                v31 = 0;
              v67 = v31;
              v32 = sub_1B1960B04(&v68, (uint64_t)"\t\t writing \"", 12);
              v33 = strlen(*(const char **)(v30 + 16));
              v34 = sub_1B1960B04(v32, *(_QWORD *)(v30 + 16), v33);
              v35 = sub_1B1960B04(v34, (uint64_t)"\" ", 2);
              sub_1B21B5E04(&v67, __p);
              if ((v66 & 0x80u) == 0)
                v36 = __p;
              else
                v36 = (void **)__p[0];
              if ((v66 & 0x80u) == 0)
                v37 = v66;
              else
                v37 = (uint64_t)__p[1];
              v38 = sub_1B1960B04(v35, (uint64_t)v36, v37);
              sub_1B1960B04(v38, (uint64_t)"<", 1);
              v39 = (_QWORD *)std::ostream::operator<<();
              sub_1B1960B04(v39, (uint64_t)">\n", 2);
              if ((char)v66 < 0)
                operator delete(__p[0]);
              ++v28;
              v29 -= 8;
            }
            while (v29);
          }
          if (*(_DWORD *)(CFX::RG::RenderGraph::successors(v64, (CFX::RG::Pass *)v9) + 16))
            sub_1B1960B04(&v68, (uint64_t)"\t\t Successors dependencies:\n", 28);
          v40 = CFX::RG::RenderGraph::successors(v64, (CFX::RG::Pass *)v9);
          v41 = *(_DWORD *)(v40 + 16);
          if (v41)
          {
            v42 = *(uint64_t **)(v40 + 24);
            v43 = &v42[3 * v41];
            do
            {
              v44 = *v42;
              v45 = *((char *)v42 + 8);
              v46 = v42[2];
              v47 = sub_1B1960B04(&v68, (uint64_t)"\t\t\t ", 4);
              v48 = *(const char **)(v44 + 24);
              v49 = strlen(v48);
              v50 = sub_1B1960B04(v47, (uint64_t)v48, v49);
              v51 = sub_1B1960B04(v50, (uint64_t)" -> ", 4);
              v52 = "Unknown";
              if (v45 <= 3)
                v52 = off_1E63FC2A8[v45];
              v53 = strlen(v52);
              sub_1B1960B04(v51, (uint64_t)v52, v53);
              if (v46)
              {
                v54 = sub_1B1960B04(&v68, (uint64_t)" [", 2);
                v55 = strlen(*(const char **)(v46 + 16));
                v56 = sub_1B1960B04(v54, *(_QWORD *)(v46 + 16), v55);
                sub_1B1960B04(v56, (uint64_t)"]", 1);
              }
              sub_1B1960B04(&v68, (uint64_t)"\n", 1);
              v42 += 3;
            }
            while (v42 != v43);
          }
          v8 = v63 + 1;
        }
        while (v63 + 1 != v62);
      }
      v4 = v60 + 1;
      v5 = v61 + 32;
    }
    while (v61 + 32 != v59);
  }
  sub_1B1960E14((uint64_t)v69, a2);
  v68 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v69[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v70 < 0)
    operator delete((void *)v69[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E22DDC](&v71);
}

void sub_1B21B5D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a24 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a24 + *(_QWORD *)(a24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a25 = MEMORY[0x1E0DE4FB8] + 16;
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E22DDC](&a41);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B21B5E04@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v6;
  _QWORD v7[10];
  char v8;
  uint64_t v9;

  if (!*a1)
    return sub_1B1970F28(a2, "None");
  sub_1B21AE738((uint64_t)&v6);
  v4 = *a1;
  if ((*a1 & 1) != 0)
  {
    sub_1B1960B04(&v6, (uint64_t)" Load", 5);
    v4 = *a1;
  }
  if ((v4 & 2) != 0)
  {
    sub_1B1960B04(&v6, (uint64_t)" Clear", 6);
    v4 = *a1;
  }
  if ((v4 & 4) != 0)
    sub_1B1960B04(&v6, (uint64_t)" Resolve", 8);
  sub_1B1960E14((uint64_t)v7, a2);
  v6 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v7[-1] + *(_QWORD *)(v6 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1B5E22DDC](&v9);
}

void sub_1B21B5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B21AE824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraph::successors(CFX::RG::RenderGraph *this, CFX::RG::Pass *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  v2 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  v4 = (*((_DWORD *)this + 59) - 1) & v3;
  v5 = *(unsigned __int16 *)(*((_QWORD *)this + 28) + 2 * v4);
  if (v5 < 2)
    return 0;
  while ((v5 & 2) == 0 || v3 != *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v4))
  {
    ++v4;
    v6 = v5 > 3;
    v5 >>= 1;
    if (!v6)
      return 0;
  }
  return *((_QWORD *)this + 27) + 224 * v4;
}

_DWORD *CFX::RG::RenderGraph::passesReadingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = 0x800000000;
  *(_QWORD *)(a4 + 16) = a4 + 24;
  v5 = result[32];
  if ((_DWORD)v5)
  {
    v7 = (uint64_t *)*((_QWORD *)result + 17);
    v8 = &v7[v5];
    do
    {
      v13 = *v7;
      v9 = *(_QWORD *)(v13 + 80);
      v10 = *(unsigned int *)(v13 + 72);
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = *(_QWORD **)(v13 + 80);
        while (*v12 != a2)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            v12 = (_QWORD *)(v9 + 8 * v10);
            break;
          }
        }
      }
      else
      {
        v12 = *(_QWORD **)(v13 + 80);
      }
      if (v10 != ((uint64_t)v12 - v9) >> 3)
        result = sub_1B18AE3A0((_DWORD *)a4, &v13);
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

_DWORD *CFX::RG::RenderGraph::passesWritingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = 0x800000000;
  *(_QWORD *)(a4 + 16) = a4 + 24;
  v5 = result[32];
  if ((_DWORD)v5)
  {
    v7 = (uint64_t *)*((_QWORD *)result + 17);
    v8 = &v7[v5];
    do
    {
      v13 = *v7;
      v9 = *(_QWORD *)(v13 + 176);
      v10 = *(unsigned int *)(v13 + 168);
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = *(_QWORD **)(v13 + 176);
        while (*v12 != a2)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            v12 = (_QWORD *)(v9 + 8 * v10);
            break;
          }
        }
      }
      else
      {
        v12 = *(_QWORD **)(v13 + 176);
      }
      if (v10 != ((uint64_t)v12 - v9) >> 3)
        result = sub_1B18AE3A0((_DWORD *)a4, &v13);
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

_DWORD *CFX::RG::RenderGraph::directSuccessorsReadingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;

  v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (result[59] - 1) & v8;
  v10 = *(unsigned __int16 *)(*((_QWORD *)result + 28) + 2 * v9);
  if ((v10 & 2) == 0)
    goto LABEL_3;
  while (v8 != *(_QWORD *)(*((_QWORD *)result + 26) + 8 * v9))
  {
    do
    {
LABEL_3:
      v10 >>= 1;
      ++v9;
    }
    while ((v10 & 2) == 0);
  }
  v11 = v9;
  v12 = *((_QWORD *)result + 27);
  *(_QWORD *)a5 = a4;
  *(_QWORD *)(a5 + 8) = 0x800000000;
  *(_QWORD *)(a5 + 16) = a5 + 24;
  v13 = v12 + 224 * v11;
  v14 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v14)
  {
    v15 = (_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
    v16 = 24 * v14;
    do
    {
      v17 = *((unsigned __int8 *)v15 - 8);
      if (v17 != 3)
      {
        v19 = *(v15 - 2);
        if (v17 == 2 && *v15 == a3)
          result = sub_1B21B3598((_DWORD *)a5, &v19);
      }
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

_DWORD *CFX::RG::RenderGraph::directPredecessorsWritingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;

  v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (result[47] - 1) & v8;
  v10 = *(unsigned __int16 *)(*((_QWORD *)result + 22) + 2 * v9);
  if ((v10 & 2) == 0)
    goto LABEL_3;
  while (v8 != *(_QWORD *)(*((_QWORD *)result + 20) + 8 * v9))
  {
    do
    {
LABEL_3:
      v10 >>= 1;
      ++v9;
    }
    while ((v10 & 2) == 0);
  }
  v11 = v9;
  v12 = *((_QWORD *)result + 21);
  *(_QWORD *)a5 = a4;
  *(_QWORD *)(a5 + 8) = 0x800000000;
  *(_QWORD *)(a5 + 16) = a5 + 24;
  v13 = v12 + 224 * v11;
  v14 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v14)
  {
    v15 = (_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
    v16 = 24 * v14;
    do
    {
      v17 = *((unsigned __int8 *)v15 - 8);
      if (v17 != 3)
      {
        v19 = *(v15 - 2);
        if (v17 == 1 && *v15 == a3)
          result = sub_1B21B3598((_DWORD *)a5, &v19);
      }
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

uint64_t CFX::RG::RenderGraph::predecessors(CFX::RG::RenderGraph *this, CFX::RG::Pass *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  v2 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  v4 = (*((_DWORD *)this + 47) - 1) & v3;
  v5 = *(unsigned __int16 *)(*((_QWORD *)this + 22) + 2 * v4);
  if (v5 < 2)
    return 0;
  while ((v5 & 2) == 0 || v3 != *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v4))
  {
    ++v4;
    v6 = v5 > 3;
    v5 >>= 1;
    if (!v6)
      return 0;
  }
  return *((_QWORD *)this + 21) + 224 * v4;
}

void CFX::RG::RenderGraph::resolveResourceDescriptors(const CFX::RG::Resource ***this, CFX::GPUResourceManager **a2)
{
  prof_beginFlame((uint64_t)"resolveResourceDescriptors", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2558);
  CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, this[13], &this[13][*((unsigned int *)this + 24)]);
  CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, this[9], &this[9][*((unsigned int *)this + 16)]);
  prof_endFlame();
}

void sub_1B21B6438(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraph::stageIndexForPass(CFX::RG::RenderGraph *this, const CFX::RG::Pass *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const CFX::RG::Pass **v10;

  v2 = *((unsigned int *)this + 64);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = *((_QWORD *)this + 33);
  v6 = v5 + 32 * v2;
  while (1)
  {
    v7 = *(_QWORD *)(v5 + 24);
    v8 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = *(const CFX::RG::Pass ***)(v5 + 24);
      while (*v10 != a2)
      {
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          v10 = (const CFX::RG::Pass **)(v7 + 8 * v8);
          break;
        }
      }
    }
    else
    {
      v10 = *(const CFX::RG::Pass ***)(v5 + 24);
    }
    if (v8 != ((uint64_t)v10 - v7) >> 3)
      return result;
    result = (result + 1);
    v5 += 32;
    if (v5 == v6)
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1B21B64C4(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  __int16 *v5;
  __int16 v6;
  uint64_t v7;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 28);
    v4 = (v3 + 15);
    if (v3 != -15)
    {
      v5 = *(__int16 **)(a1 + 16);
      do
      {
        v6 = *v5++;
        if ((v6 & 1) != 0)
        {
          v7 = *v2;
          *v2 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        ++v2;
        --v4;
      }
      while (v4);
      v2 = *(uint64_t **)(a1 + 8);
    }
    free(v2);
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B21B654C(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(unsigned __int8 *)(v38 + 344) < *(unsigned __int8 *)(*v8 + 344))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1B21B6C40(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)sub_1B21B6EB0(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)sub_1B21B6EB0(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(unsigned __int8 *)(v43 + 344) < *(unsigned __int8 *)(v44 + 344))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(unsigned __int8 *)(*v42 + 344);
          if (v47 < *(unsigned __int8 *)(*v41 + 344))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(unsigned __int8 *)(*v40 + 344))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(unsigned __int8 *)(*v8 + 344))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(unsigned __int8 *)(v55 + 344);
                if (v57 < *(unsigned __int8 *)(v56 + 344))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 >= *(unsigned __int8 *)(v56 + 344))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              v91 = *(unsigned __int8 *)(v89 + 344);
              if (v91 < *(unsigned __int8 *)(v90 + 344))
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (v91 < *(unsigned __int8 *)(v90 + 344));
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < (uint64_t)v10)
                {
                  result = *(unsigned __int8 *)(v65 + 344);
                  if (result < *(unsigned __int8 *)(v64[1] + 344))
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(unsigned __int8 *)(*v66 + 344);
                if (*(unsigned __int8 *)(v65 + 344) >= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    result = (2 * v63) | 1;
                    v64 = &v8[result];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < (uint64_t)v10
                      && *(unsigned __int8 *)(v65 + 344) < *(unsigned __int8 *)(v64[1] + 344))
                    {
                      v65 = v64[1];
                      ++v64;
                      result = v70;
                    }
                    v66 = v69;
                    v63 = result;
                  }
                  while (*(unsigned __int8 *)(v65 + 344) >= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(unsigned __int8 *)(v77 + 344);
                  if (result < *(unsigned __int8 *)(v76[1] + 344))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  v86 = *(unsigned __int8 *)(*v76 + 344);
                  if (*(unsigned __int8 *)(*v83 + 344) < v86)
                  {
                    do
                    {
                      v87 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v87;
                    }
                    while (*(unsigned __int8 *)(*v83 + 344) < v86);
                    *v87 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)sub_1B21B6C40(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1B21B6C40(v7, &v7[v10 >> 1], a2 - 1);
          sub_1B21B6C40(v7 + 1, v12 - 1, a2 - 2);
          sub_1B21B6C40(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)sub_1B21B6C40(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(unsigned __int8 *)(v14 + 344);
          if (*(unsigned __int8 *)(*(v7 - 1) + 344) < v15)
            goto LABEL_12;
          if (v15 >= *(unsigned __int8 *)(*(a2 - 1) + 344))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(unsigned __int8 *)(*v8 + 344));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(unsigned __int8 *)(v29 + 344));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(unsigned __int8 *)(v32 + 344));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(unsigned __int8 *)(v35 + 344));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(unsigned __int8 *)(v36 + 344));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(unsigned __int8 *)(v14 + 344);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(unsigned __int8 *)(v17 + 344) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(unsigned __int8 *)(v21 + 344) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(unsigned __int8 *)(v20 + 344) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(unsigned __int8 *)(v25 + 344) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(unsigned __int8 *)(v26 + 344) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = sub_1B21B654C(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = sub_1B21B6CC8(v7, v27);
        v8 = v27 + 1;
        result = sub_1B21B6CC8(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1B21B6C40(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(unsigned __int8 *)(*a2 + 344);
  v6 = *(unsigned __int8 *)(*result + 344);
  v7 = *a3;
  v8 = *(unsigned __int8 *)(*a3 + 344);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(unsigned __int8 *)(*a2 + 344) < *(unsigned __int8 *)(*result + 344))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(unsigned __int8 *)(*a3 + 344) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1B21B6CC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(unsigned __int8 *)(v6 + 344) < *(unsigned __int8 *)(*a1 + 344))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1B21B6C40(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1B21B6EB0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1B21B6EB0(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(unsigned __int8 *)(v21 + 344) < *(unsigned __int8 *)(v22 + 344))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(unsigned __int8 *)(*v20 + 344);
        if (v25 < *(unsigned __int8 *)(*v19 + 344))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(unsigned __int8 *)(*v18 + 344))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(unsigned __int8 *)(*a1 + 344))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1B21B6C40(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(unsigned __int8 *)(*v9 + 344);
    if (v14 < *(unsigned __int8 *)(*v8 + 344))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(unsigned __int8 *)(v13 + 344))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1B21B6EB0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1B21B6C40(a1, a2, a3);
  v9 = *a3;
  if (*(unsigned __int8 *)(*a4 + 344) < *(unsigned __int8 *)(*a3 + 344))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(unsigned __int8 *)(*a3 + 344) < *(unsigned __int8 *)(*a2 + 344))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(unsigned __int8 *)(*a2 + 344) < *(unsigned __int8 *)(*a1 + 344))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B21B6F44(uint64_t a1)
{
  switch(*(_BYTE *)a1)
  {
    case 1:

      goto LABEL_3;
    case 2:
    case 4:
      goto LABEL_4;
    case 3:
LABEL_3:

LABEL_4:
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_1B21B6FA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 44);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21);
          v27 = v26 + 12 * v15;
          v28 = (uint64_t *)(v26 + 12 * v21);
          v29 = *v28;
          *(_DWORD *)(v27 + 8) = *((_DWORD *)v28 + 2);
          *(_QWORD *)v27 = v29;
          v8 = *(_QWORD *)(a1 + 32);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      v33 = *(_QWORD *)(a1 + 24) + 12 * v21;
      v34 = *a3;
      *(_DWORD *)(v33 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v33 = v34;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = a2;
      v35 = *(_QWORD *)(a1 + 32);
      *(_WORD *)(v35 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v35 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 40);
      return result;
    }
LABEL_33:
    sub_1B21B7200(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  v31 = *(_QWORD *)(a1 + 24) + 12 * v10;
  v32 = *a3;
  *(_DWORD *)(v31 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v31 = v32;
  return result;
}

uint64_t *sub_1B21B7200(uint64_t a1)
{
  _QWORD *v2;
  _WORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  _WORD *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t *result;
  __int16 *v12;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_WORD **)(a1 + 24);
  v4 = *(__int16 **)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 44);
  sub_1B21B72C8(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21B6FA4(a1, *v8, v7);
      ++v8;
      v7 += 6;
      --v6;
    }
    while (v6);
  }
  v12 = v3;
  result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    sub_1B179C834(result, &v12);
    result = *(uint64_t **)(a1 + 8);
    v12 = (__int16 *)v2;
    if (result)
    {
      sub_1B179C834(result, &v12);
      result = *(uint64_t **)(a1 + 8);
      v12 = v4;
      if (result)
        return sub_1B179C834(result, &v12);
    }
  }
  return result;
}

void sub_1B21B72C8(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 32) = sub_1B179C1C0((_QWORD *)a1, 2 * (a2 + 15), 4u);
  *(_QWORD *)(a1 + 16) = sub_1B179C1C0((_QWORD *)a1, 8 * v3, 8u);
  *(_QWORD *)(a1 + 24) = sub_1B179C1C0((_QWORD *)a1, 12 * v3, 4u);
  memset(*(void **)(a1 + 16), 255, 8 * v3);
  bzero(*(void **)(a1 + 32), v4);
}

void sub_1B21B735C(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  unint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  _DWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  void *__p[2];
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50[10];
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;

  v2 = *a1;
  v3 = (unsigned int *)a1[1];
  v4 = *(_QWORD *)(*a1 + 16);
  v66 = v4;
  v67 = 0x1000000000;
  v68 = &v69;
  v62 = v4;
  v63 = 0x1000000000;
  v64 = &v65;
  v5 = *v3;
  if (*v3)
  {
    v6 = 0;
    v7 = -1;
    do
    {
      sub_1B18AE3A0(&v66, (_QWORD *)(*((_QWORD *)v3 + 1) + 8 * (v5 + v7)));
      ++v6;
      v3 = (unsigned int *)a1[1];
      v5 = *v3;
      --v7;
    }
    while (v6 < *v3);
    v2 = *a1;
    v4 = *(_QWORD *)(*a1 + 16);
    v8 = v67;
  }
  else
  {
    v8 = 0;
  }
  v59 = 0x1000000000;
  v60 = &v61;
  v55 = *(_QWORD *)(v2 + 16);
  v56 = 0;
  v57 = &v58;
  v58 = v4;
  v9 = *MEMORY[0x1E0DE4F60];
  v44 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  while (1)
  {
    LODWORD(v63) = 0;
    if (!v8)
      break;
    v10 = v8;
    do
    {
      v47 = 0;
      v47 = v68[v10 - 1];
      LODWORD(v67) = v10 - 1;
      (**(void (***)(uint64_t *__return_ptr, uint64_t, _QWORD))v47)(&v49, v47, *a1);
      if ((_DWORD)v49)
      {
        v11 = v50[0];
        while (1)
        {
          v12 = (unint64_t *)v57;
          if ((_DWORD)v56)
          {
            v13 = (unsigned __int16)*v11;
            v14 = HIWORD(*v11);
            v15 = 8 * v56;
            v12 = (unint64_t *)v57;
            while (1)
            {
              v16 = *v12;
              if (v13 == 6893 || (unsigned __int16)*v12 == v13)
              {
                v18 = WORD1(v16) == v14 || v14 == 6893;
                v19 = HIDWORD(v16);
                if (v18 && (_DWORD)v19 == v11[1])
                  break;
              }
              ++v12;
              v15 -= 8;
              if (!v15)
                goto LABEL_34;
            }
          }
          if (&v57[v56] == (uint64_t *)v12)
            break;
          v11 += 2;
          if (v11 == (_DWORD *)((char *)v50[0] + 8 * v49))
            goto LABEL_29;
        }
LABEL_34:
        sub_1B18AE3A0(&v62, &v47);
      }
      else
      {
LABEL_29:
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v47 + 8))(__p, v47, *a1);
        if (LODWORD(__p[0]))
        {
          v21 = (uint64_t *)__p[1];
          v22 = 8 * LODWORD(__p[0]);
          do
          {
            v54 = *v21;
            sub_1B21B791C(&v55, &v54);
            LOWORD(v53) = v54;
            WORD1(v53) = 9273;
            HIDWORD(v53) = HIDWORD(v54);
            sub_1B21B791C(&v55, &v53);
            LODWORD(v53) = 607724601;
            HIDWORD(v53) = HIDWORD(v54);
            sub_1B21B791C(&v55, &v53);
            ++v21;
            v22 -= 8;
          }
          while (v22);
        }
        sub_1B18AE3A0(&v58, &v47);
        if (HIDWORD(__p[0]))
          free(__p[1]);
      }
      if (HIDWORD(v49))
        free(v50[0]);
      v10 = v67;
    }
    while ((_DWORD)v67);
    v23 = v63;
    if (v8 == (_DWORD)v63)
      break;
    if ((_DWORD)v63)
    {
      v24 = 0;
      v25 = -1;
      do
      {
        sub_1B18AE3A0(&v66, &v64[v23 + v25]);
        ++v24;
        v23 = v63;
        --v25;
      }
      while (v24 < v63);
    }
    v8 = v67;
    if (!(_DWORD)v67)
    {
      v26 = (_DWORD *)a1[1];
      *v26 = 0;
      if ((_DWORD)v59)
      {
        v27 = v60;
        v28 = 8 * v59;
        do
        {
          sub_1B17A7C40((uint64_t)v26, v27++);
          v28 -= 8;
        }
        while (v28);
      }
      return;
    }
  }
  if (*(_QWORD *)a1[2])
  {
    sub_1B21AE738((uint64_t)&v49);
    v43 = v9;
    sub_1B1960B04(&v49, (uint64_t)"Unable to resolve graph subgraph:\n", 34);
    if ((_DWORD)v63)
    {
      v29 = v64;
      v30 = &v64[v63];
      do
      {
        v31 = *v29;
        v32 = sub_1B1960B04(&v49, (uint64_t)"Can't resolve requirements for subgraph: ", 41);
        v33 = strlen(*(const char **)(v31 + 16));
        v34 = sub_1B1960B04(v32, *(_QWORD *)(v31 + 16), v33);
        sub_1B1960B04(v34, (uint64_t)"\n", 1);
        (**(void (***)(uint64_t *__return_ptr, uint64_t, _QWORD))v31)(&v47, v31, *a1);
        if ((_DWORD)v47)
        {
          v35 = (uint64_t *)v48;
          v36 = 8 * v47;
          do
          {
            v54 = *v35;
            v37 = sub_1B1960B04(&v49, (uint64_t)"\t", 1);
            CFX::RG::ResourceIdentifier::pathName((CFX::RG::ResourceIdentifier *)&v54, __p);
            if (v46 >= 0)
              v38 = __p;
            else
              v38 = (void **)__p[0];
            if (v46 >= 0)
              v39 = HIBYTE(v46);
            else
              v39 = (uint64_t)__p[1];
            v40 = sub_1B1960B04(v37, (uint64_t)v38, v39);
            sub_1B1960B04(v40, (uint64_t)"\n", 1);
            if (SHIBYTE(v46) < 0)
              operator delete(__p[0]);
            ++v35;
            v36 -= 8;
          }
          while (v36);
        }
        if (HIDWORD(v47))
          free(v48);
        ++v29;
      }
      while (v29 != v30);
    }
    sub_1B1960E14((uint64_t)v50, __p);
    v41 = *(_QWORD *)a1[2];
    if (*(char *)(v41 + 23) < 0)
      operator delete(*(void **)v41);
    v42 = *(_OWORD *)__p;
    *(_QWORD *)(v41 + 16) = v46;
    *(_OWORD *)v41 = v42;
    v49 = v43;
    *(void **)((char *)&v50[-1] + *(_QWORD *)(v43 - 24)) = v44;
    v50[0] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v51 < 0)
      operator delete(v50[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E22DDC](&v52);
  }
  *(_BYTE *)a1[3] = 0;
}

void sub_1B21B787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, void *a16, int a17, __int16 a18, char a19, char a20,int a21,int a22,void *a23,char a24,int a25,void *a26)
{
  sub_1B21AE824((uint64_t)&a24);
  _Unwind_Resume(a1);
}

_DWORD *sub_1B21B791C(_DWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((_QWORD *)result + 2);
  v3 = result[2];
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = (_QWORD *)*((_QWORD *)result + 2);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)result + 2);
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3)
    return sub_1B21B7970(result, a2);
  return result;
}

_DWORD *sub_1B21B7970(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  void *Aligned;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = (const void *)*((_QWORD *)result + 2);
  if (v4 + 1 > v5)
  {
    v7 = ((double)(v5 + 1) * 1.5);
    Aligned = CStackAllocatorAllocateAligned(*(_QWORD *)result, 8 * v7, 8, 2);
    result = memcpy(Aligned, v6, 8 * v3[2]);
    *((_QWORD *)v3 + 2) = Aligned;
    v3[3] = v7;
    v6 = Aligned;
    v4 = v3[2];
  }
  *((_QWORD *)v6 + v4) = *a2;
  ++v3[2];
  return result;
}

void sub_1B21B7A14(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(_QWORD *)a1 = v6;
  v7 = malloc_type_malloc(80 * v3, 0xD5346062uLL);
  memset(v7, 255, 80 * v3);
  *(_QWORD *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  bzero(*(void **)(a1 + 16), v4);
}

void sub_1B21B7AE4(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(_QWORD *)a1 = v6;
  v7 = malloc_type_malloc(160 * v3, 0xD5346062uLL);
  memset(v7, 255, 160 * v3);
  *(_QWORD *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  bzero(*(void **)(a1 + 16), v4);
}

void sub_1B21B7BB4(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(_QWORD *)a1 = v6;
  v7 = malloc_type_malloc(16 * v3, 0xD5346062uLL);
  memset(v7, 255, 16 * v3);
  *(_QWORD *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  bzero(*(void **)(a1 + 16), v4);
}

uint64_t sub_1B21B7C80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
    free(v2);
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

unsigned int *sub_1B21B7CBC(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (a1[1])
  {
    if (*a1)
    {
      v2 = 0;
      v3 = 0;
      do
      {
        sub_1B19AB6B0(*((_QWORD *)a1 + 1) + v2);
        ++v3;
        v2 += 16;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

uint64_t sub_1B21B7D24(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    sub_1B21B7D74(v2, *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 28) + 15);
    free(*(void **)(a1 + 8));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

void sub_1B21B7D74(uint64_t a1, __int16 *a2, unsigned int a3)
{
  uint64_t v4;
  void **v5;
  __int16 v6;

  if (a3)
  {
    v4 = a3;
    v5 = (void **)(a1 + 8);
    do
    {
      v6 = *a2++;
      if ((v6 & 1) != 0)
      {
        if (*((_DWORD *)v5 - 1))
          free(*v5);
      }
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

void sub_1B21B7DC8(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B17C8454(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21ABA58(a1, *v8, v7);
      ++v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

void sub_1B21B7E64(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21B7E88(uint64_t a1)
{
  CFX::RG::RenderGraphContext::deletePersistantRenderGraph(*(CFX::RG::RenderGraphContext **)(a1 + 32), *(CFX::RG::RenderGraphBuilder **)(a1 + 24));
}

void sub_1B21B7E94(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  unsigned int *v5;
  double v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = a1 + 4;
  v6 = 1.5;
  if (a3)
    v6 = 1.0;
  v7 = (v6 * (double)(a1[1] + a2));
  v8 = (char *)malloc_type_malloc(16 * v7, 0xD5346062uLL);
  memset(v8, 255, 16 * v7);
  if (*a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *((_QWORD *)a1 + 1) + v9;
      *(_OWORD *)&v8[v9] = *(_OWORD *)v11;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      if (v4 != v5)
        sub_1B19AB6B0(*((_QWORD *)a1 + 1) + v9);
      ++v10;
      v9 += 16;
    }
    while (v10 < *a1);
  }
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v5)
    free(v4);
}

uint64_t sub_1B21B7F90(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t result;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v21);
          v27 = (_OWORD *)(v26 + 80 * v15);
          v28 = (_OWORD *)(v26 + 80 * v21);
          v29 = v28[1];
          v30 = v28[2];
          v31 = v28[4];
          v27[3] = v28[3];
          v27[4] = v31;
          v27[1] = v29;
          v27[2] = v30;
          *v27 = *v28;
          v8 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      v37 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 80 * v21);
      *v37 = *a3;
      v38 = a3[1];
      v39 = a3[2];
      v40 = a3[4];
      v37[3] = a3[3];
      v37[4] = v40;
      v37[1] = v38;
      v37[2] = v39;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a2;
      v41 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v41 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v41 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B21B8204(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  v33 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 80 * v10);
  *v33 = *a3;
  v34 = a3[1];
  v35 = a3[2];
  v36 = a3[4];
  v33[3] = a3[3];
  v33[4] = v36;
  v33[1] = v34;
  v33[2] = v35;
  return result;
}

void sub_1B21B8204(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B21B7A14(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21B7F90(a1, *v8, v7);
      ++v8;
      v7 += 80;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

uint64_t sub_1B21B829C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v21);
          v27 = (_OWORD *)(v26 + 160 * v15);
          v28 = (_OWORD *)(v26 + 160 * v21);
          v29 = v28[5];
          v31 = v28[2];
          v30 = v28[3];
          v27[4] = v28[4];
          v27[5] = v29;
          v27[2] = v31;
          v27[3] = v30;
          v32 = v28[6];
          v33 = v28[7];
          v34 = v28[9];
          v27[8] = v28[8];
          v27[9] = v34;
          v27[6] = v32;
          v27[7] = v33;
          v35 = v28[1];
          *v27 = *v28;
          v27[1] = v35;
          v8 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      v45 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 160 * v21);
      v46 = a3[1];
      *v45 = *a3;
      v45[1] = v46;
      v47 = a3[2];
      v48 = a3[3];
      v49 = a3[5];
      v45[4] = a3[4];
      v45[5] = v49;
      v45[2] = v47;
      v45[3] = v48;
      v50 = a3[6];
      v51 = a3[7];
      v52 = a3[9];
      v45[8] = a3[8];
      v45[9] = v52;
      v45[6] = v50;
      v45[7] = v51;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a2;
      v53 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v53 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v53 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B21B8540(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  v37 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 160 * v10);
  v38 = a3[1];
  *v37 = *a3;
  v37[1] = v38;
  v39 = a3[2];
  v40 = a3[3];
  v41 = a3[5];
  v37[4] = a3[4];
  v37[5] = v41;
  v37[2] = v39;
  v37[3] = v40;
  v42 = a3[6];
  v43 = a3[7];
  v44 = a3[9];
  v37[8] = a3[8];
  v37[9] = v44;
  v37[6] = v42;
  v37[7] = v43;
  return result;
}

void sub_1B21B8540(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B21B7AE4(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21B829C(a1, *v8, v7);
      ++v8;
      v7 += 160;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

void sub_1B21B85D8(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B21B7BB4(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        sub_1B21ACD68(a1, *v8, v7);
        if (*((_DWORD *)v7 + 1))
          free(v7[1]);
      }
      ++v8;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

uint64_t sub_1B21B8680(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_QWORD *)(a1 + 24) != a1 + 32)
    {
      v4 = *(_QWORD *)(a1 + 24);
      v2 = *(_QWORD **)(a1 + 8);
      if (v2)
        sub_1B179C834(v2, &v4);
    }
  }
  return a1;
}

_QWORD *sub_1B21B86D4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  if (a1[3])
  {
    v6 = a1[3];
    v2 = (_QWORD *)a1[1];
    if (v2)
      sub_1B179C834(v2, &v6);
  }
  v3 = (_QWORD *)a1[1];
  v6 = a1[2];
  if (v3)
  {
    sub_1B179C834(v3, &v6);
    v4 = (_QWORD *)a1[1];
    v6 = a1[4];
    if (v4)
      sub_1B179C834(v4, &v6);
  }
  return a1;
}

void sub_1B21B8744(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 32) = sub_1B179C1C0((_QWORD *)a1, 2 * (a2 + 15), 4u);
  *(_QWORD *)(a1 + 16) = sub_1B179C1C0((_QWORD *)a1, 8 * v3, 8u);
  *(_QWORD *)(a1 + 24) = sub_1B179C1C0((_QWORD *)a1, 24 * v3, 8u);
  memset(*(void **)(a1 + 16), 255, 8 * v3);
  bzero(*(void **)(a1 + 32), v4);
}

uint64_t *sub_1B21B87D8(uint64_t a1, int a2, int a3)
{
  const void *v4;
  double v5;
  const void *v6;
  unsigned int v7;
  void *v8;
  uint64_t *result;
  const void *v10;

  v4 = *(const void **)(a1 + 24);
  v5 = 1.5;
  if (a3)
    v5 = 1.0;
  v6 = (const void *)(a1 + 32);
  v7 = (v5 * (double)(*(_DWORD *)(a1 + 20) + a2));
  v8 = (void *)sub_1B179C1C0((_QWORD *)a1, 24 * v7, 8u);
  result = (uint64_t *)memcpy(v8, v4, 24 * *(unsigned int *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 20) = v7;
  if (v4 != v6)
  {
    v10 = v4;
    result = *(uint64_t **)(a1 + 8);
    if (result)
      return sub_1B179C834(result, &v10);
  }
  return result;
}

void sub_1B21B8888(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 32) = sub_1B179C1C0((_QWORD *)a1, 2 * (a2 + 15), 4u);
  *(_QWORD *)(a1 + 16) = sub_1B179C1C0((_QWORD *)a1, 8 * v3, 8u);
  *(_QWORD *)(a1 + 24) = sub_1B179C1C0((_QWORD *)a1, 224 * v3, 8u);
  memset(*(void **)(a1 + 16), 255, 8 * v3);
  bzero(*(void **)(a1 + 32), v4);
}

uint64_t sub_1B21B891C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 *v5;
  __int16 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 44);
    v4 = (v3 + 15);
    if (v3 != -15)
    {
      v5 = *(__int16 **)(a1 + 32);
      do
      {
        v6 = *v5++;
        if ((v6 & 1) != 0)
          v2 = sub_1B21B8680(v2);
        v2 += 224;
        --v4;
      }
      while (v4);
      v2 = *(_QWORD *)(a1 + 24);
    }
    v11 = v2;
    v7 = *(_QWORD **)(a1 + 8);
    if (v7)
      sub_1B179C834(v7, &v11);
  }
  v8 = *(_QWORD **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_1B179C834(v8, &v11);
    v9 = *(_QWORD **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 32);
    if (v9)
      sub_1B179C834(v9, &v11);
  }
  return a1;
}

uint64_t sub_1B21B89C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v2 = 0;
      v3 = 0;
      do
      {
        sub_1B190D7C4(*(_QWORD *)(a1 + 24) + v2);
        ++v3;
        v2 += 32;
      }
      while (v3 < *(unsigned int *)(a1 + 16));
    }
    v6 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD **)(a1 + 8);
    if (v4)
      sub_1B179C834(v4, &v6);
  }
  return a1;
}

uint64_t sub_1B21B8A40(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 20))
    {
      if (*(_DWORD *)(a1 + 16))
      {
        v4 = 0;
        v5 = 0;
        do
        {
          sub_1B190D7C4(*(_QWORD *)(a1 + 24) + v4);
          ++v5;
          v4 += 32;
        }
        while (v5 < *(unsigned int *)(a1 + 16));
      }
      v13 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD **)(a1 + 8);
      if (v6)
        sub_1B179C834(v6, &v13);
      *(_QWORD *)(a1 + 24) = a1 + 32;
    }
    v7 = a2[2];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = (_QWORD *)a2[3];
    if (v8 == a2 + 4)
    {
      if ((_DWORD)v7)
      {
        v9 = 0;
        v10 = a1 + 32;
        do
        {
          *(_OWORD *)v10 = *(_OWORD *)v8;
          v11 = v10 + 32;
          *(_QWORD *)(v10 + 16) = 0;
          *(_QWORD *)(v10 + 24) = v10 + 32;
          sub_1B21B8C38(v10, v8);
          ++v9;
          v8 += 4;
          v10 = v11;
        }
        while (v9 < *(unsigned int *)(a1 + 16));
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v8;
    }
    a2[2] = 0;
    a2[3] = a2 + 4;
  }
  return a1;
}

uint64_t *sub_1B21B8B40(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = a1 + 32;
  v6 = 1.5;
  if (a3)
    v6 = 1.0;
  v7 = (v6 * (double)(*(_DWORD *)(a1 + 20) + a2));
  result = (uint64_t *)sub_1B179C1C0((_QWORD *)a1, 32 * v7, 8u);
  v9 = result;
  if (*(_DWORD *)(a1 + 16))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = &v9[v10];
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 24) + v10 * 8);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v12[2] = 0;
      v12[3] = (uint64_t)&v9[v10 + 4];
      result = (uint64_t *)sub_1B21B8C38((uint64_t)&v9[v10], v13);
      if (v4 != v5)
        result = (uint64_t *)sub_1B190D7C4(*(_QWORD *)(a1 + 24) + v10 * 8);
      ++v11;
      v10 += 4;
    }
    while (v11 < *(unsigned int *)(a1 + 16));
  }
  *(_QWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 20) = v7;
  if (v4 != v5)
  {
    v14 = v4;
    result = *(uint64_t **)(a1 + 8);
    if (result)
      return sub_1B179C834(result, &v14);
  }
  return result;
}

uint64_t sub_1B21B8C38(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 20))
    {
      v7 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD **)(a1 + 8);
      if (v4)
        sub_1B179C834(v4, &v7);
      *(_QWORD *)(a1 + 24) = a1 + 32;
    }
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = (_QWORD *)a2[3];
    if (v5 == a2 + 4)
      memcpy((void *)(a1 + 32), v5, 8 * *((unsigned int *)a2 + 4));
    else
      *(_QWORD *)(a1 + 24) = v5;
    a2[2] = 0;
    a2[3] = a2 + 4;
  }
  return a1;
}

uint64_t sub_1B21B8CD0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 44);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21);
          v27 = v26 + 24 * v15;
          v28 = (__int128 *)(v26 + 24 * v21);
          v29 = *v28;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
          *(_OWORD *)v27 = v29;
          v8 = *(_QWORD *)(a1 + 32);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      v33 = *(_QWORD *)(a1 + 24) + 24 * v21;
      v34 = *a3;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v33 = v34;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = a2;
      v35 = *(_QWORD *)(a1 + 32);
      *(_WORD *)(v35 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v35 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 40);
      return result;
    }
LABEL_33:
    sub_1B21B8F2C(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  v31 = *(_QWORD *)(a1 + 24) + 24 * v10;
  v32 = *a3;
  *(_QWORD *)(v31 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v31 = v32;
  return result;
}

uint64_t *sub_1B21B8F2C(uint64_t a1)
{
  _QWORD *v2;
  _WORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  _WORD *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t *result;
  __int16 *v12;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_WORD **)(a1 + 24);
  v4 = *(__int16 **)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 44);
  sub_1B21B8744(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21B8CD0(a1, *v8, v7);
      ++v8;
      v7 += 12;
      --v6;
    }
    while (v6);
  }
  v12 = v3;
  result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    sub_1B179C834(result, &v12);
    result = *(uint64_t **)(a1 + 8);
    v12 = (__int16 *)v2;
    if (result)
    {
      sub_1B179C834(result, &v12);
      result = *(uint64_t **)(a1 + 8);
      v12 = v4;
      if (result)
        return sub_1B179C834(result, &v12);
    }
  }
  return result;
}

BOOL sub_1B21B8FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = *(_QWORD *)(a1 + 24);
    while (*(_QWORD *)v5 != *(_QWORD *)a2
         || *(unsigned __int8 *)(v5 + 8) != *(unsigned __int8 *)(a2 + 8)
         || *(_QWORD *)(v5 + 16) != *(_QWORD *)(a2 + 16))
    {
      v5 += 24;
      v4 -= 24;
      if (!v4)
      {
        v5 = v2 + 24 * v3;
        return 0xAAAAAAAAAAAAAAABLL * ((v5 - v2) >> 3) != v3;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v5 - v2) >> 3) != v3;
}

void sub_1B21B907C(uint64_t a1, int a2)
{
  size_t v3;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = (a2 + 15);
  *(_QWORD *)(a1 + 24) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * v3) & 0xFFFFFFFE, 4, 2);
  *(_QWORD *)(a1 + 8) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(_QWORD *)(a1 + 16) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, v3, 1, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), 2 * v3);
}

void sub_1B21B9110(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B907C(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B2AE4(a1, *v3, v2);
      ++v3;
      ++v2;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B21B9180(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21B93A0(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void sub_1B21B93A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B19B7E30(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B9180(a1, *v3, v2);
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B21B9410(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21B9630(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void sub_1B21B9630(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B19B7E30(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B9410(a1, *v3, v2);
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

void sub_1B21B96A0(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 2);
  *(_QWORD *)(a1 + 8) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(_QWORD *)(a1 + 16) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, 32 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), v4);
}

uint64_t sub_1B21B9734(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 12))
      *(_QWORD *)(a1 + 16) = a1 + 24;
    *(_QWORD *)(a1 + 8) = a2[1];
    v4 = (_QWORD *)a2[2];
    if (v4 == a2 + 3)
      memcpy((void *)(a1 + 24), v4, 8 * *((unsigned int *)a2 + 2));
    else
      *(_QWORD *)(a1 + 16) = v4;
    a2[1] = 0;
    a2[2] = a2 + 3;
  }
  return a1;
}

void sub_1B21B97AC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B96A0(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B35EC(a1, *v3, v2);
      ++v3;
      v2 += 32;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B21B981C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 20) && *(_QWORD *)(a1 + 24) != a1 + 32)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD **)(a1 + 8);
      if (v4)
        sub_1B179C834(v4, &v7);
      *(_QWORD *)(a1 + 24) = a1 + 32;
    }
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = (_QWORD *)a2[3];
    if (v5 == a2 + 4)
      memcpy((void *)(a1 + 32), v5, 24 * *((unsigned int *)a2 + 4));
    else
      *(_QWORD *)(a1 + 24) = v5;
    a2[2] = 0x800000000;
    a2[3] = a2 + 4;
  }
  return a1;
}

uint64_t *sub_1B21B98CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t *result;
  _WORD *v12;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(__int16 **)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 44);
  sub_1B21B8888(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        sub_1B21B3880(a1, *v8, v7);
        sub_1B21B8680(v7);
      }
      ++v8;
      v7 += 224;
      --v6;
    }
    while (v6);
  }
  v12 = (_WORD *)v3;
  result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    sub_1B179C834(result, &v12);
    result = *(uint64_t **)(a1 + 8);
    v12 = v2;
    if (result)
    {
      sub_1B179C834(result, &v12);
      result = *(uint64_t **)(a1 + 8);
      v12 = v4;
      if (result)
        return sub_1B179C834(result, &v12);
    }
  }
  return result;
}

void sub_1B21B999C(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 2);
  *(_QWORD *)(a1 + 8) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(_QWORD *)(a1 + 16) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, 24 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), v4);
}

uint64_t sub_1B21B9A34(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 12))
      *(_QWORD *)(a1 + 16) = a1 + 24;
    *(_QWORD *)(a1 + 8) = a2[1];
    v4 = (_QWORD *)a2[2];
    if (v4 == a2 + 3)
      memcpy((void *)(a1 + 24), v4, 16 * *((unsigned int *)a2 + 2));
    else
      *(_QWORD *)(a1 + 16) = v4;
    a2[1] = 0;
    a2[2] = a2 + 3;
  }
  return a1;
}

void sub_1B21B9AAC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B999C(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B46F4(a1, *v3, v2);
      ++v3;
      v2 += 24;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B21B9B1C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      v17 = *(_WORD *)(v8 + 2 * v15) | 1;
      *(_WORD *)(v8 + 2 * v15) = v17;
      if (v15 <= (int)v7 + 14)
      {
        v31 = v15;
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_QWORD *)(a1 + 16);
        LOBYTE(v22) = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v18 = v15 - 14;
          else
            v18 = 0;
          v19 = v18 - 1;
          if (v18 <= v15)
            v20 = v15;
          else
            v20 = v18;
          v21 = 1;
          while (1)
          {
            v22 = v19 + 1;
            if (v18 <= v22)
              break;
LABEL_27:
            ++v21;
            v19 = v22;
            if ((_DWORD)v22 == v20)
              goto LABEL_32;
          }
          v23 = 1 << (v19 - v18 + 2);
          v24 = v21;
          v25 = v18;
          while (1)
          {
            v26 = v25;
            v27 = *(unsigned __int16 *)(v8 + 2 * v25);
            if ((v23 & v27) != 0)
              break;
            v25 = v26 + 1;
            v23 = (unsigned __int16)v23 >> 1;
            --v24;
            if ((int)v26 + 1 > v22)
              goto LABEL_27;
          }
          if (v22 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v28 = *(_QWORD *)(a1 + 8);
          v29 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(v28 + 8 * v15) = *(_QWORD *)(v28 + 8 * v22);
          *(_BYTE *)(v29 + v15) = *(_BYTE *)(v29 + v22);
          *(_WORD *)(v8 + 2 * v26) = (v27 | (1 << (v15 - v26 + 1))) ^ (1 << v24);
          v15 = v22;
          if (v22 > (int)v7 + 14)
            continue;
          break;
        }
        v17 = *(_WORD *)(v8 + 2 * v22) | 1;
        v31 = v22;
      }
      *(_BYTE *)(v29 + v31) = *a3;
      *(_QWORD *)(v28 + 8 * v31) = a2;
      *(_WORD *)(v8 + 2 * v31) = v17;
      result = 1;
      *(_WORD *)(v8 + 2 * v7) |= 1 << (v22 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21B9DC4(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + v10) = *a3;
  return result;
}

void sub_1B21B9D30(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 2);
  *(_QWORD *)(a1 + 8) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(_QWORD *)(a1 + 16) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, 16 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), v4);
}

void sub_1B21B9DC4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B907C(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B9B1C(a1, *v3, v2);
      ++v3;
      ++v2;
      --v6;
    }
    while (v6);
  }
}

__n128 sub_1B21B9E34(uint64_t a1, uint64_t a2, __n128 *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __n128 result;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_OWORD *)(v26 + 16 * v15) = *(_OWORD *)(v26 + 16 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      result = *a3;
      *(__n128 *)(*(_QWORD *)(a1 + 16) + 16 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v30 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v30 + 2 * v21) |= 1u;
      *(_WORD *)(v30 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21BA05C(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  v28 = a3->n128_u64[0];
  v29 = *(_QWORD *)(a1 + 16) + 16 * v10;
  *(_DWORD *)(v29 + 8) = a3->n128_u32[2];
  *(_QWORD *)v29 = v28;
  return result;
}

void sub_1B21BA05C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B9D30(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B9E34(a1, *v3, v2);
      ++v3;
      v2 += 16;
      --v6;
    }
    while (v6);
  }
}

void sub_1B21BA0CC(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;

__int128 *sub_1B21BA8F0(__int128 *result, __int128 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *(_DWORD *)(a3 + 8);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v11 = *a2;
      v6 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v6;
      *(_QWORD *)a3 = v11;
      *(_DWORD *)(a3 + 8) = DWORD2(v11);
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        v12 = *result;
        v7 = *((_DWORD *)a2 + 2);
        *(_QWORD *)result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v7;
        *(_QWORD *)a2 = v12;
        *((_DWORD *)a2 + 2) = DWORD2(v12);
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v13 = *result;
      v8 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *(_QWORD *)a2;
      *((_DWORD *)result + 2) = v8;
      *(_QWORD *)a2 = v13;
      *((_DWORD *)a2 + 2) = DWORD2(v13);
      if (*(_DWORD *)(a3 + 8) >= *((_DWORD *)a2 + 2))
        return result;
      v10 = *a2;
      v9 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v9;
    }
    else
    {
      v10 = *result;
      v5 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v5;
    }
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = DWORD2(v10);
  }
  return result;
}

BOOL sub_1B21BAA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 8))
      {
        v20 = *(_OWORD *)a1;
        v6 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a2 - 16) = v20;
        *(_DWORD *)(a2 - 8) = DWORD2(v20);
      }
      return result;
    case 3:
      sub_1B21BA8F0((__int128 *)a1, (__int128 *)(a1 + 16), a2 - 16);
      return 1;
    case 4:
      sub_1B21BAC8C(a1, a1 + 16, (__n128 *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      v16 = (__int128 *)(a1 + 16);
      v17 = (__int128 *)(a1 + 32);
      v18 = (__int128 *)(a1 + 48);
      sub_1B21BAC8C(a1, a1 + 16, (__n128 *)(a1 + 32), a1 + 48);
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 56))
      {
        v21 = *v18;
        v19 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)v18 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 56) = v19;
        *(_QWORD *)(a2 - 16) = v21;
        *(_DWORD *)(a2 - 8) = DWORD2(v21);
        if (*(_DWORD *)(a1 + 56) < *(_DWORD *)(a1 + 40))
        {
          v22 = *v17;
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 56);
          *(_QWORD *)v18 = v22;
          *(_DWORD *)(a1 + 56) = DWORD2(v22);
          if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 24))
          {
            v23 = *v16;
            *(_QWORD *)v16 = *(_QWORD *)v17;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)v17 = v23;
            *(_DWORD *)(a1 + 40) = DWORD2(v23);
            if (*(_DWORD *)(a1 + 24) < *(_DWORD *)(a1 + 8))
            {
              v24 = *(_OWORD *)a1;
              *(_QWORD *)a1 = *(_QWORD *)v16;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
              *(_QWORD *)v16 = v24;
              *(_DWORD *)(a1 + 24) = DWORD2(v24);
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 32;
      sub_1B21BA8F0((__int128 *)a1, (__int128 *)(a1 + 16), a1 + 32);
      v8 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 8);
    if (v11 < *(_DWORD *)(v7 + 8))
    {
      v12 = *(_QWORD *)v8;
      v13 = v9;
      while (1)
      {
        v14 = a1 + v13;
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32)
          break;
        v13 -= 16;
        if (v11 >= *(_DWORD *)(v14 + 24))
        {
          v15 = a1 + v13 + 48;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *(_QWORD *)v15 = v12;
      *(_DWORD *)(v15 + 8) = v11;
      if (++v10 == 8)
        return v8 + 16 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2)
      return 1;
  }
}

__n128 sub_1B21BAC8C(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4)
{
  __n128 result;
  unsigned __int32 v9;
  unsigned __int32 v10;
  int v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;

  sub_1B21BA8F0((__int128 *)a1, (__int128 *)a2, (uint64_t)a3);
  if (*(_DWORD *)(a4 + 8) < a3->n128_u32[2])
  {
    result = *a3;
    v12 = *a3;
    v9 = *(_DWORD *)(a4 + 8);
    a3->n128_u64[0] = *(_QWORD *)a4;
    a3->n128_u32[2] = v9;
    *(_QWORD *)a4 = v12.n128_u64[0];
    *(_DWORD *)(a4 + 8) = v12.n128_u32[2];
    if (a3->n128_u32[2] < *(_DWORD *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)a2;
      v10 = a3->n128_u32[2];
      *(_QWORD *)a2 = a3->n128_u64[0];
      *(_DWORD *)(a2 + 8) = v10;
      a3->n128_u64[0] = v13;
      a3->n128_u32[2] = DWORD2(v13);
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        v14 = *(_OWORD *)a1;
        v11 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v11;
        *(_QWORD *)a2 = v14;
        *(_DWORD *)(a2 + 8) = DWORD2(v14);
      }
    }
  }
  return result;
}

void sub_1B21BAD70(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 2);
  *(_QWORD *)(a1 + 8) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(_QWORD *)(a1 + 16) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, 88 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), v4);
}

uint64_t sub_1B21BAE08(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 12) && *(_QWORD *)(a1 + 16) != a1 + 24)
      *(_QWORD *)(a1 + 16) = a1 + 24;
    *(_QWORD *)(a1 + 8) = a2[1];
    v4 = (_QWORD *)a2[2];
    if (v4 == a2 + 3)
      memcpy((void *)(a1 + 24), v4, 8 * *((unsigned int *)a2 + 2));
    else
      *(_QWORD *)(a1 + 16) = v4;
    a2[1] = 0x800000000;
    a2[2] = a2 + 3;
  }
  return a1;
}

void sub_1B21BAE98(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21BAD70(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21B52D0(a1, *v3, v2);
      ++v3;
      v2 += 88;
      --v6;
    }
    while (v6);
  }
}

uint64_t CFX::GPUResourceManager::GPUResourceManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B17C8454(a1, 32);
  sub_1B17C8454(a1 + 32, 32);
  sub_1B21BBF74(a1 + 64, 32);
  sub_1B21BBF74(a1 + 96, 32);
  sub_1B21C62C4(a1 + 128, a2, a3);
  CFX::BufferPool::BufferPool(a1 + 168, a2, 2, a3);
  CFX::BufferPool::BufferPool(a1 + 208, a2, 0, a3);
  sub_1B17C8454(a1 + 248, 32);
  *(_QWORD *)(a1 + 280) = a2;
  sub_1B17C8454(a1 + 288, 32);
  return a1;
}

void sub_1B21BAFEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFX::BufferPool *v6;
  uint64_t v7;
  CFX::BufferPool *v8;

  sub_1B21B7C80(v7);
  CFX::BufferPool::~BufferPool(v8);
  CFX::BufferPool::~BufferPool(v6);
  sub_1B21C62DC(v5);
  sub_1B21BC0BC(v4);
  sub_1B21BC0BC(v3);
  sub_1B21BC044(v2);
  sub_1B21BC044(v1);
  _Unwind_Resume(a1);
}

void sub_1B21BB058()
{
  JUMPOUT(0x1B21BB038);
}

void sub_1B21BB060()
{
  JUMPOUT(0x1B21BB040);
}

void sub_1B21BB068()
{
  JUMPOUT(0x1B21BB048);
}

void CFX::GPUResourceManager::~GPUResourceManager(CFX::GPUResourceManager *this)
{
  sub_1B21B7C80((uint64_t)this + 288);
  sub_1B21B7C80((uint64_t)this + 248);
  CFX::BufferPool::~BufferPool((CFX::GPUResourceManager *)((char *)this + 208));
  CFX::BufferPool::~BufferPool((CFX::GPUResourceManager *)((char *)this + 168));
  sub_1B21C62DC((uint64_t)this + 128);
  sub_1B21BC0BC((uint64_t)this + 96);
  sub_1B21BC0BC((uint64_t)this + 64);
  sub_1B21BC044((uint64_t)this + 32);
  sub_1B21BC044((uint64_t)this);
}

void CFX::GPUResourceManager::clear(void **this)
{
  sub_1B21BB140((uint64_t)this);
  sub_1B21BB1C8((uint64_t)(this + 8));
  sub_1B21BB140((uint64_t)(this + 4));
  sub_1B21BB1C8((uint64_t)(this + 12));
  memset(this[36], 255, 8 * (*((_DWORD *)this + 79) + 15));
  bzero(this[38], 2 * (*((_DWORD *)this + 79) + 15));
  *((_DWORD *)this + 78) = 0;
}

void sub_1B21BB140(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id *v4;
  __int16 *v5;
  __int16 v6;
  size_t v7;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = (v2 + 15);
  if (v2 == -15)
  {
    v7 = 0;
  }
  else
  {
    v4 = *(id **)(a1 + 8);
    v5 = *(__int16 **)(a1 + 16);
    do
    {
      v6 = *v5++;
      if ((v6 & 1) != 0)

      ++v4;
      --v3;
    }
    while (v3);
    v7 = 8 * (*(_DWORD *)(a1 + 28) + 15);
  }
  memset(*(void **)a1, 255, v7);
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_1B21BB1C8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id *v4;
  __int16 *v5;
  __int16 v6;
  size_t v7;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = (v2 + 15);
  if (v2 == -15)
  {
    v7 = 0;
  }
  else
  {
    v4 = *(id **)(a1 + 8);
    v5 = *(__int16 **)(a1 + 16);
    do
    {
      v6 = *v5++;
      if ((v6 & 1) != 0)

      v4 += 3;
      --v3;
    }
    while (v3);
    v7 = 8 * (*(_DWORD *)(a1 + 28) + 15);
  }
  memset(*(void **)a1, 255, v7);
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void CFX::GPUResourceManager::nextFrame(id *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  sub_1B21BB140((uint64_t)this);
  sub_1B21BB1C8((uint64_t)(this + 8));
  sub_1B21C67FC(this + 16);
  CFX::BufferPool::nextFrame((CFX::BufferPool *)(this + 26), v2, v3, v4);
  CFX::BufferPool::nextFrame((CFX::BufferPool *)(this + 21), v5, v6, v7);
  memset(this[36], 255, 8 * (*((_DWORD *)this + 79) + 15));
  bzero(this[38], 2 * (*((_DWORD *)this + 79) + 15));
  *((_DWORD *)this + 78) = 0;
}

void CFX::GPUResourceManager::clearFrameTexturePool(CFX::GPUResourceManager *this)
{
  sub_1B21C68E0((uint64_t)this + 128);
}

void CFX::GPUResourceManager::clearResourcesMapping(void **this)
{
  memset(this[31], 255, 8 * (*((_DWORD *)this + 69) + 15));
  bzero(this[33], 2 * (*((_DWORD *)this + 69) + 15));
  *((_DWORD *)this + 68) = 0;
}

BOOL CFX::GPUResourceManager::isAllocated(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  int v4;
  CFX::RG::ExternalResourceDesc *v5;
  void *v6;
  _BOOL8 v7;
  id v9[3];

  v4 = CFX::RG::Resource::type(a2);
  if (v4 != 3)
  {
    if (v4 != 2)
    {
      if (v4 != 1)
        return 0;
      goto LABEL_8;
    }
    v5 = (CFX::RG::ExternalResourceDesc *)CFX::RG::Resource::externalResourceDesc(a2);
    if (!CFX::RG::ExternalResourceDesc::kind(v5))
    {
LABEL_8:
      CFX::GPUResourceManager::getBuffer(this, a2, v9);
      v7 = v9[0] != 0;

      return v7;
    }
    if (CFX::RG::ExternalResourceDesc::kind(v5) != 1)
      return 0;
  }
  CFX::GPUResourceManager::getTexture(this, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6 != 0;

  return v7;
}

__n128 CFX::GPUResourceManager::getBuffer@<Q0>(CFX::GPUResourceManager *this@<X0>, const CFX::RG::Resource *a2@<X1>, _QWORD *a3@<X8>)
{
  CFX::RG::Resource *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __n128 result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = CFX::GPUResourceManager::remappedResource(this, a2);
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)v6) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v6) >> 47));
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = CFX::RG::Resource::lifetime(a2);
  if (v9 == 2)
  {
    v11 = (*((_DWORD *)this + 31) - 1) & v8;
    v14 = *(unsigned __int16 *)(*((_QWORD *)this + 14) + 2 * v11);
    if (v14 < 2)
      goto LABEL_12;
    while ((v14 & 2) == 0 || v8 != *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v11))
    {
      ++v11;
      v13 = v14 >= 4;
      v14 >>= 1;
      if (!v13)
        goto LABEL_12;
    }
    v15 = *((_QWORD *)this + 13);
    if (!v15)
      goto LABEL_12;
  }
  else
  {
    if (v9 != 1)
      goto LABEL_12;
    v11 = (*((_DWORD *)this + 23) - 1) & v8;
    v12 = *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * v11);
    if (v12 < 2)
      goto LABEL_12;
    while ((v12 & 2) == 0 || v8 != *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v11))
    {
      ++v11;
      v13 = v12 >= 4;
      v12 >>= 1;
      if (!v13)
        goto LABEL_12;
    }
    v15 = *((_QWORD *)this + 9);
    if (!v15)
    {
LABEL_12:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return result;
    }
  }
  v16 = v15 + 24 * v11;
  *a3 = *(id *)v16;
  result = *(__n128 *)(v16 + 8);
  *(__n128 *)(a3 + 1) = result;
  return result;
}

id CFX::GPUResourceManager::getTexture(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  CFX::RG::Resource *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  void *v11;
  id v12;
  uint64_t v14;

  v3 = CFX::GPUResourceManager::remappedResource(this, a2);
  v4 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)v3) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v3) >> 47));
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = CFX::RG::Resource::lifetime(v3);
  if (v6 != 2)
  {
    if (v6 != 1)
    {
      v12 = 0;
      return v12;
    }
    v7 = (*((_DWORD *)this + 7) - 1) & v5;
    v8 = *(unsigned __int16 *)(*((_QWORD *)this + 2) + 2 * v7);
    if (v8 < 2)
      goto LABEL_12;
    while ((v8 & 2) == 0 || v5 != *(_QWORD *)(*(_QWORD *)this + 8 * v7))
    {
      ++v7;
      v9 = v8 >= 4;
      v8 >>= 1;
      if (!v9)
        goto LABEL_12;
    }
    v14 = *((_QWORD *)this + 1);
    if (!v14)
      goto LABEL_12;
LABEL_19:
    v11 = *(void **)(v14 + 8 * v7);
    goto LABEL_13;
  }
  v7 = (*((_DWORD *)this + 15) - 1) & v5;
  v10 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * v7);
  if (v10 >= 2)
  {
    while ((v10 & 2) == 0 || v5 != *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v7))
    {
      ++v7;
      v9 = v10 >= 4;
      v10 >>= 1;
      if (!v9)
        goto LABEL_12;
    }
    v14 = *((_QWORD *)this + 5);
    if (v14)
      goto LABEL_19;
  }
LABEL_12:
  v11 = 0;
LABEL_13:
  v12 = v11;
  return v12;
}

unint64_t CFX::GPUResourceManager::resourceHashOrRemapped(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  CFX::RG::Resource *v2;
  unint64_t v3;

  v2 = CFX::GPUResourceManager::remappedResource(this, a2);
  v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)v2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v2) >> 47));
  return 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
}

void CFX::GPUResourceManager::allocate(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2, const CFX::RG::RenderGraphContext *a3)
{
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  unsigned __int16 *v23;
  id v24;
  CFX::RG::ExternalResourceDesc *v25;
  void (**v26)(void);
  void *v27;
  uint64_t v28;
  char *v29;
  const void **v30;
  void (**v31)(void);
  void *v32;
  char *v33;
  void (**v34)(void);
  void *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (**v41)(void);
  void *v42;
  id v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD aBlock[5];
  _BYTE v50[24];
  id v51;
  __int128 v52;

  prof_beginFlame((uint64_t)"allocate", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/GPUResourceManager.mm", 114);
  v6 = CFX::RG::Resource::lifetime(a2);
  v7 = CFX::RG::Resource::type(a2);
  v8 = v7;
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  if (v6 == 2)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1B21BBB58;
    aBlock[3] = &unk_1E63FC2C8;
    aBlock[4] = this;
    v14 = _Block_copy(aBlock);
    v15 = *(void **)a2;
    *(_QWORD *)a2 = v14;

    switch(v8)
    {
      case 3:
        v28 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a3, a2);
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), v28);
        v29 = (char *)this + 32;
        v51 = (id)objc_claimAutoreleasedReturnValue();
        v22 = v51;
        sub_1B21BC478((uint64_t)v29, v10, (uint64_t *)&v51);
        break;
      case 2:
        v30 = (const void **)CFX::RG::Resource::externalResourceDesc(a2);
        if (!CFX::RG::ExternalResourceDesc::kind((CFX::RG::ExternalResourceDesc *)v30))
        {
          CFX::RG::ExternalResourceDesc::allocate(v30);
          v41 = (void (**)(void))objc_claimAutoreleasedReturnValue();
          v41[2]();
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          v43 = v42;
          v47 = objc_msgSend_length(v43, v44, v45, v46);
          v48 = (char *)this + 96;
          v51 = v43;
          *(_QWORD *)&v52 = 0;
          *((_QWORD *)&v52 + 1) = v47;
          v22 = v43;
          sub_1B21BC134((uint64_t)v48, v10, (uint64_t *)&v51);
LABEL_26:

          goto LABEL_27;
        }
        if (CFX::RG::ExternalResourceDesc::kind((CFX::RG::ExternalResourceDesc *)v30) != 1)
          goto LABEL_28;
        CFX::RG::ExternalResourceDesc::allocate(v30);
        v31 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        v31[2]();
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        v33 = (char *)this + 32;
        v51 = v32;
        v22 = v32;
        sub_1B21BC478((uint64_t)v33, v10, (uint64_t *)&v51);
        break;
      case 1:
        *(_OWORD *)v50 = *(_OWORD *)CFX::RG::Resource::bufferDesc(a2);
        (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 35) + 24))(*((_QWORD *)this + 35), v50);
        v16 = (id)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend_length(v16, v17, v18, v19);
        v21 = (char *)this + 96;
        v51 = v16;
        *(_QWORD *)&v52 = 0;
        *((_QWORD *)&v52 + 1) = v20;
        v22 = v16;
        sub_1B21BC134((uint64_t)v21, v10, (uint64_t *)&v51);
        goto LABEL_26;
      default:
        goto LABEL_28;
    }

LABEL_27:
    goto LABEL_28;
  }
  if (v6 != 1)
    goto LABEL_28;
  switch(v7)
  {
    case 3:
      v23 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a3, a2);
      sub_1B21C6304((uint64_t)this + 128, v23);
      v51 = (id)objc_claimAutoreleasedReturnValue();
      v24 = v51;
      sub_1B21BC478((uint64_t)this, v10, (uint64_t *)&v51);
      goto LABEL_18;
    case 2:
      v25 = (CFX::RG::ExternalResourceDesc *)CFX::RG::Resource::externalResourceDesc(a2);
      if (CFX::RG::ExternalResourceDesc::kind(v25))
      {
        if (CFX::RG::ExternalResourceDesc::kind(v25) != 1)
          break;
        CFX::RG::ExternalResourceDesc::allocate((const void **)v25);
        v26 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        v26[2]();
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        v51 = v27;
        v24 = v27;
        sub_1B21BC478((uint64_t)this, v10, (uint64_t *)&v51);
LABEL_18:

        break;
      }
      CFX::RG::ExternalResourceDesc::allocate((const void **)v25);
      v34 = (void (**)(void))objc_claimAutoreleasedReturnValue();
      v34[2]();
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      v36 = v35;
      v40 = (char *)this + 64;
      v51 = v36;
      *(_QWORD *)&v52 = 0;
      *((_QWORD *)&v52 + 1) = objc_msgSend_length(v36, v37, v38, v39);
      v22 = v36;
      sub_1B21BC134((uint64_t)v40, v10, (uint64_t *)&v51);
      goto LABEL_26;
    case 1:
      v11 = (uint64_t *)CFX::RG::Resource::bufferDesc(a2);
      v12 = *v11;
      if ((v11[1] & 0xF0) != 0)
        v13 = (char *)this + 168;
      else
        v13 = (char *)this + 208;
      CFX::BufferPool::allocate(v13, v12, v50);
      v51 = *(id *)v50;
      v52 = *(_OWORD *)&v50[8];
      sub_1B21BC134((uint64_t)this + 64, v10, (uint64_t *)&v51);

      break;
  }
LABEL_28:
  prof_endFlame();
}

void sub_1B21BBA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::GPUResourceManager::bufferPoolForResourceOptions(CFX::GPUResourceManager *this, char a2)
{
  if ((a2 & 0xF0) != 0)
    return (uint64_t)this + 168;
  else
    return (uint64_t)this + 208;
}

void sub_1B21BBB58(uint64_t a1, const CFX::RG::Resource *a2)
{
  CFX::GPUResourceManager::free(*(CFX::GPUResourceManager **)(a1 + 32), a2);
}

void CFX::GPUResourceManager::free(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int j;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int i;
  uint64_t v23;
  id v25;
  id v26;
  __int128 v27;
  id v28;
  __int128 v29;

  v4 = CFX::RG::Resource::lifetime(a2);
  v5 = CFX::RG::Resource::type(a2);
  if (v4 == 2)
  {
    v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
    v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
    if (v5 == 3)
    {
      v18 = (*((_DWORD *)this + 15) - 1) & v10;
      v19 = *((_QWORD *)this + 6);
      v20 = *(unsigned __int16 *)(v19 + 2 * v18);
      if (v20 >= 2)
      {
        v21 = 1;
        for (i = *(unsigned __int16 *)(v19 + 2 * v18); ; i >>= 1)
        {
          if ((i & 2) != 0)
          {
            v23 = (v18 + v21 - 1);
            if (v10 == *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v23))
              break;
          }
          ++v21;
          if (i <= 3)
            return;
        }
        *(_WORD *)(v19 + 2 * v18) = v20 ^ (1 << v21);
        *(_WORD *)(v19 + 2 * v23) ^= 1u;

        --*((_DWORD *)this + 14);
      }
    }
    else if (v5 == 1)
    {
      v11 = (*((_DWORD *)this + 31) - 1) & v10;
      v12 = *((_QWORD *)this + 14);
      v13 = *(unsigned __int16 *)(v12 + 2 * v11);
      if (v13 >= 2)
      {
        v14 = 1;
        for (j = *(unsigned __int16 *)(v12 + 2 * v11); ; j >>= 1)
        {
          if ((j & 2) != 0)
          {
            v16 = (v11 + v14 - 1);
            if (v10 == *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v16))
              break;
          }
          ++v14;
          if (j < 4)
            return;
        }
        *(_WORD *)(v12 + 2 * v11) = v13 ^ (1 << v14);
        *(_WORD *)(v12 + 2 * v16) ^= 1u;

        --*((_DWORD *)this + 30);
      }
    }
  }
  else if (v4 == 1)
  {
    if (v5 == 3)
    {
      CFX::GPUResourceManager::getTexture(this, a2);
      v25 = (id)objc_claimAutoreleasedReturnValue();
      sub_1B21C66B0((uint64_t)this + 128, v25);

    }
    else if (v5 == 1)
    {
      v6 = *(_QWORD *)(CFX::RG::Resource::bufferDesc(a2) + 8);
      CFX::GPUResourceManager::getBuffer(this, a2, &v28);
      if ((v6 & 0xF0) != 0)
        v7 = (unsigned int *)((char *)this + 168);
      else
        v7 = (unsigned int *)((char *)this + 208);
      v26 = v28;
      v27 = v29;
      v8 = v28;
      CFX::BufferPool::free(v7, &v26);

    }
  }
}

void sub_1B21BBDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t CFX::GPUResourceManager::mapResource(CFX::GPUResourceManager *this, CFX::RG::Resource *a2, CFX::RG::Resource *a3)
{
  unint64_t v3;
  CFX::RG::Resource *v5;

  v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  v5 = a3;
  return sub_1B21BC770((uint64_t)this + 248, 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47)), &v5);
}

CFX::RG::Resource *CFX::GPUResourceManager::remappedResource(CFX::GPUResourceManager *this, CFX::RG::Resource *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;

  v2 = *((_DWORD *)this + 69) - 1;
  v3 = *((_QWORD *)this + 33);
  v4 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = v2 & v5;
  v7 = *(unsigned __int16 *)(v3 + 2 * (v2 & v5));
  if (v7 >= 2)
  {
    do
    {
      while ((v7 & 2) == 0 || v5 != *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v6))
      {
        ++v6;
        v9 = v7 >= 4;
        v7 >>= 1;
        if (!v9)
          return a2;
      }
      v10 = *((_QWORD *)this + 32);
      if (!v10)
        break;
      a2 = *(CFX::RG::Resource **)(v10 + 8 * v6);
      v11 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (_QWORD)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
      v5 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      v6 = v2 & v5;
      v7 = *(unsigned __int16 *)(v3 + 2 * (v2 & v5));
    }
    while (v7 > 1);
  }
  return a2;
}

uint64_t CFX::GPUResourceManager::registerNamedFrameResource(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2, unsigned int a3)
{
  const CFX::RG::Resource *v4;

  v4 = a2;
  return sub_1B21BCA28((uint64_t)this + 288, a3, &v4);
}

id CFX::GPUResourceManager::getRegisteredFrameTextureNamed(CFX::GPUResourceManager *this, int a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  void *v5;
  uint64_t v7;

  v2 = (*((_DWORD *)this + 79) - 1) & a2;
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 38) + 2 * v2);
  if (v3 < 2)
    goto LABEL_5;
  while ((v3 & 2) == 0 || *(_QWORD *)(*((_QWORD *)this + 36) + 8 * v2) != a2)
  {
    ++v2;
    v4 = v3 >= 4;
    v3 >>= 1;
    if (!v4)
      goto LABEL_5;
  }
  v7 = *((_QWORD *)this + 37);
  if (v7)
  {
    CFX::GPUResourceManager::getTexture(this, *(const CFX::RG::Resource **)(v7 + 8 * v2));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
LABEL_5:
    v5 = 0;
  }
  return v5;
}

uint64_t CFX::GPUResourceManager::allocator(CFX::GPUResourceManager *this)
{
  return *((_QWORD *)this + 35);
}

void sub_1B21BBF74(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(_QWORD *)a1 = v6;
  v7 = malloc_type_malloc(24 * v3, 0xD5346062uLL);
  memset(v7, 255, 24 * v3);
  *(_QWORD *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  bzero(*(void **)(a1 + 16), v4);
}

uint64_t sub_1B21BC044(uint64_t a1)
{
  id *v2;
  int v3;
  uint64_t v4;
  __int16 *v5;
  __int16 v6;

  v2 = *(id **)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 28);
    v4 = (v3 + 15);
    if (v3 != -15)
    {
      v5 = *(__int16 **)(a1 + 16);
      do
      {
        v6 = *v5++;
        if ((v6 & 1) != 0)

        ++v2;
        --v4;
      }
      while (v4);
      v2 = *(id **)(a1 + 8);
    }
    free(v2);
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B21BC0BC(uint64_t a1)
{
  id *v2;
  int v3;
  uint64_t v4;
  __int16 *v5;
  __int16 v6;

  v2 = *(id **)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 28);
    v4 = (v3 + 15);
    if (v3 != -15)
    {
      v5 = *(__int16 **)(a1 + 16);
      do
      {
        v6 = *v5++;
        if ((v6 & 1) != 0)

        v2 += 3;
        --v4;
      }
      while (v4);
      v2 = *(id **)(a1 + 8);
    }
    free(v2);
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B21BC134(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  __int16 *v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  while (1)
  {
    v5 = *(_DWORD *)(a1 + 28);
    v6 = (v5 - 1) & a2;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2)
      break;
LABEL_6:
    v11 = v5 + 15;
    if (v11 >= (int)v6 + 496)
      v11 = v6 + 496;
    if (v6 >= v11)
    {
      v13 = v6;
    }
    else
    {
      v12 = (__int16 *)(v7 + 2 * v6);
      v13 = v6;
      while (1)
      {
        v14 = *v12++;
        if ((v14 & 1) == 0)
          break;
        if (v11 == ++v13)
          goto LABEL_32;
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        v19 = v13;
      }
      else
      {
        while (2)
        {
          v15 = v13 - 14;
          if (v13 < 0xF)
            v15 = 0;
          v16 = v15 - 1;
          if (v15 <= v13)
            v17 = v13;
          else
            v17 = v15;
          v18 = 1;
          while (1)
          {
            v19 = v16 + 1;
            if (v15 <= v19)
              break;
LABEL_26:
            ++v18;
            v16 = v19;
            if ((_DWORD)v19 == v17)
              goto LABEL_31;
          }
          v20 = 1 << (v16 - v15 + 2);
          v21 = v18;
          v22 = v15;
          while (1)
          {
            v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0)
              break;
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19)
              goto LABEL_26;
          }
          if (v19 >= v13)
          {
LABEL_31:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_32;
          }
          v24 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v19);
          v25 = v24 + 24 * v13;
          v26 = (uint64_t *)(v24 + 24 * v19);
          v27 = *v26;
          *v26 = 0;
          *(_QWORD *)v25 = v27;
          *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 1);

          v7 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          v13 = v19;
          if (v19 > (int)v6 + 14)
            continue;
          break;
        }
        LOBYTE(v13) = v19;
      }
      v32 = *(_QWORD *)(a1 + 8) + 24 * v19;
      v33 = *a3;
      *a3 = 0;
      *(_QWORD *)v32 = v33;
      *(_OWORD *)(v32 + 8) = *(_OWORD *)(a3 + 1);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = a2;
      v34 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v34 + 2 * v19) |= 1u;
      result = 1;
      *(_WORD *)(v34 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_32:
    sub_1B21BC3D8(a1);
  }
  v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) != a2)
  {
    ++v9;
    v10 = v8 > 3;
    v8 >>= 1;
    if (!v10)
      goto LABEL_6;
  }
  v28 = *(_QWORD *)(a1 + 8) + 24 * v9;
  v29 = *a3;
  *a3 = 0;
  v30 = *(void **)v28;
  *(_QWORD *)v28 = v29;

  result = 0;
  *(_OWORD *)(v28 + 8) = *(_OWORD *)(a3 + 1);
  return result;
}

void sub_1B21BC3D8(uint64_t a1)
{
  _QWORD *v2;
  id *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  id *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(id **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B21BBF74(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        sub_1B21BC134(a1, *v8, v7);

      }
      ++v8;
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

uint64_t sub_1B21BC478(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  __int16 *v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v6 + 15;
    if (v12 >= (int)v7 + 496)
      v12 = v7 + 496;
    if (v7 >= v12)
    {
      v14 = v7;
    }
    else
    {
      v13 = (__int16 *)(v8 + 2 * v7);
      v14 = v7;
      while (1)
      {
        v15 = *v13++;
        if ((v15 & 1) == 0)
          break;
        if (v12 == ++v14)
          goto LABEL_32;
      }
    }
    if (v14 != v12)
    {
      *(_WORD *)(v8 + 2 * v14) |= 1u;
      if (v14 <= (int)v7 + 14)
      {
        v20 = v14;
      }
      else
      {
        while (2)
        {
          v16 = v14 - 14;
          if (v14 < 0xF)
            v16 = 0;
          v17 = v16 - 1;
          if (v16 <= v14)
            v18 = v14;
          else
            v18 = v16;
          v19 = 1;
          while (1)
          {
            v20 = v17 + 1;
            if (v16 <= v20)
              break;
LABEL_26:
            ++v19;
            v17 = v20;
            if ((_DWORD)v20 == v18)
              goto LABEL_31;
          }
          v21 = 1 << (v17 - v16 + 2);
          v22 = v19;
          v23 = v16;
          while (1)
          {
            v24 = v23;
            if (((unsigned __int16)v21 & *(_WORD *)(v8 + 2 * v23)) != 0)
              break;
            ++v23;
            LOWORD(v21) = (unsigned __int16)v21 >> 1;
            --v22;
            if ((int)v24 + 1 > v20)
              goto LABEL_26;
          }
          if (v20 >= v14)
          {
LABEL_31:
            *(_WORD *)(v8 + 2 * v14) ^= 1u;
            goto LABEL_32;
          }
          v25 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v20);
          v26 = *(_QWORD *)(v25 + 8 * v20);
          *(_QWORD *)(v25 + 8 * v20) = 0;
          *(_QWORD *)(v25 + 8 * v14) = v26;

          v8 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v14 - v24 + 1))) ^ (1 << v22);
          v14 = v20;
          if (v20 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v14) = v20;
      }
      v32 = *(_QWORD *)(a1 + 8);
      v33 = *a3;
      *a3 = 0;
      *(_QWORD *)(v32 + 8 * v20) = v33;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = a2;
      v34 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v34 + 2 * v20) |= 1u;
      result = 1;
      *(_WORD *)(v34 + 2 * v7) |= 1 << (v14 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_32:
    sub_1B21BC6D0(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  v27 = v10;
  v28 = *a3;
  *a3 = 0;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(void **)(v29 + 8 * v10);
  *(_QWORD *)(v29 + 8 * v27) = v28;

  return 0;
}

void sub_1B21BC6D0(uint64_t a1)
{
  _QWORD *v2;
  id *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  id *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(id **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B17C8454(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        sub_1B21BC478(a1, *v8, v7);

      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

uint64_t sub_1B21BC770(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B21BC990(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *a3;
  return result;
}

void sub_1B21BC990(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B17C8454(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21BC770(a1, *v8, v7);
      ++v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

uint64_t sub_1B21BCA28(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 16);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B21BCC48(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *a3;
  return result;
}

void sub_1B21BCC48(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B17C8454(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
        sub_1B21BCA28(a1, *v8, v7);
      ++v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

BOOL VFXMTLTextureTypeIsArray(uint64_t a1)
{
  return a1 == 6 || (a1 & 0xFFFFFFFFFFFFFFFDLL) == 1;
}

uint64_t VFXMTLTextureTypeGetArrayElementType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 5;
  v2 = 2;
  if (a1 != 3)
    v2 = a1;
  if (a1 != 6)
    v1 = v2;
  if (a1 == 1)
    return 0;
  else
    return v1;
}

BOOL VFXMTLTextureTypeIsCube(uint64_t a1)
{
  return (unint64_t)(a1 - 5) < 2;
}

uint64_t VFXMTLTexturePixelFormatIsDepth(uint64_t a1)
{
  return ((unint64_t)(a1 - 250) < 0xB) & (0x405u >> (a1 + 6));
}

uint64_t VFXMTLPixelFormatSRGBVariant(uint64_t result)
{
  if (result <= 499)
  {
    if (result <= 79)
    {
      switch(result)
      {
        case 10:
          return 11;
        case 30:
          return 31;
        case 70:
          return 71;
      }
    }
    else if (result > 179)
    {
      if (result == 180)
      {
        return 181;
      }
      else if (result == 182)
      {
        return 183;
      }
    }
    else if (result == 80)
    {
      return 81;
    }
    else if (result == 178)
    {
      return 179;
    }
  }
  else if (result > 549)
  {
    switch(result)
    {
      case 550:
        return 551;
      case 552:
        return 553;
      case 554:
        return 555;
    }
  }
  else
  {
    switch(result)
    {
      case 500:
        result = 520;
        break;
      case 501:
        result = 521;
        break;
      case 502:
        result = 522;
        break;
      case 503:
        result = 523;
        break;
      case 504:
        result = 524;
        break;
      case 505:
        result = 525;
        break;
      case 506:
        result = 526;
        break;
      case 507:
        result = 527;
        break;
      case 508:
        result = 528;
        break;
      case 509:
        result = 529;
        break;
      case 510:
        result = 530;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t VFXMTLPixelFormatNonSRGBVariant(uint64_t result)
{
  if (result > 180)
  {
    if (result <= 550)
    {
      if (result == 181)
      {
        return 180;
      }
      else if (result == 183)
      {
        return 182;
      }
    }
    else
    {
      switch(result)
      {
        case 551:
          return 550;
        case 553:
          return 552;
        case 555:
          return 554;
      }
    }
  }
  else if (result <= 70)
  {
    if (result == 11)
    {
      return 10;
    }
    else if (result == 31)
    {
      return 30;
    }
  }
  else
  {
    switch(result)
    {
      case 71:
        return 70;
      case 81:
        return 80;
      case 179:
        return 178;
    }
  }
  return result;
}

uint64_t RGContextCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  CFX::RG::RenderGraphContext::RenderGraphContext(v4, a1, a2);
  return v4;
}

void sub_1B21BCF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10B0C4051C744FALL);
  _Unwind_Resume(a1);
}

CFX::RG::RenderGraphContext *RGContextDestroy(CFX::RG::RenderGraphContext *result)
{
  if (result)
  {
    CFX::RG::RenderGraphContext::~RenderGraphContext(result);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

uint64_t RGContextGetCrossFrameResourceManager(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t RGContextGetGPUResourceManager(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t RGContextGetStackAllocator(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t RGContextGetPerFrameAllocator(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t RGContextCreatePersistentRenderGraph(CFX::RG::RenderGraphContext *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  CFX::RG::RenderGraphContext::createPersistentRenderGraphBuilder(a1, (uint64_t *)&v7);
  v2 = CFX::RG::RenderGraphContext::store((uint64_t)a1, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1B21BD074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B19AB6B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RGContextReleasePersistentRenderGraph(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  CFX::RG::RenderGraphContext::release(a1, a2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t RGContextTryResolveTextureDescriptor@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result;

  result = CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(a1, a2, a4);
  *a3 = result;
  return result;
}

BOOL RGBuilderIsNull(uint64_t a1)
{
  return a1 == 0;
}

uint64_t RGBuilderGetAllocator(uint64_t a1)
{
  return *(_QWORD *)a1;
}

CFX::RG::Resource *RGBuilderCreateTexture(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[10];

  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v6, a3);
  return sub_1B17A34D0(a1, a2, v6);
}

CFX::RG::Resource *RGBuilderCreateTexture(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[10];

  v3 = a3[1];
  v11[0] = *a3;
  v11[1] = v3;
  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[5];
  v11[4] = a3[4];
  v11[5] = v6;
  v11[2] = v4;
  v11[3] = v5;
  v7 = a3[6];
  v8 = a3[7];
  v9 = a3[9];
  v11[8] = a3[8];
  v11[9] = v9;
  v11[6] = v7;
  v11[7] = v8;
  return sub_1B17A34D0(a1, a2, v11);
}

CFX::RG::Resource *RGBuilderCreateCopy(uint64_t *a1, uint64_t a2, uint64_t a3, CFX::RG::Pass *a4, _OWORD *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CFX::RG::Resource *v16;
  uint64_t *CopyPass;
  __int128 v19;
  CFX::RG::Resource *v20;
  uint64_t v21;
  _OWORD v22[10];

  v9 = a5[1];
  v22[0] = *a5;
  v22[1] = v9;
  v10 = a5[2];
  v11 = a5[3];
  v12 = a5[5];
  v22[4] = a5[4];
  v22[5] = v12;
  v22[2] = v10;
  v22[3] = v11;
  v13 = a5[6];
  v14 = a5[7];
  v15 = a5[9];
  v22[8] = a5[8];
  v22[9] = v15;
  v22[6] = v13;
  v22[7] = v14;
  v16 = sub_1B17A34D0(a1, a2, v22);
  *(_QWORD *)&v19 = a3;
  DWORD2(v19) = 0;
  v20 = v16;
  v21 = 0x100000000;
  CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a1, a2, &v19);
  if (a4)
    CFX::RG::Pass::dependsOn(CopyPass, a4);
  return v16;
}

CFX::RG::RenderGraphBuilder *RGBuilderCreateCopyIfNeeded(CFX::RG *a1, uint64_t a2, CFX::RG::RenderGraphBuilder *a3, CFX::RG::Resource *a4, uint64_t a5)
{
  const char *v8;
  _BYTE v10[160];

  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v10, a5);
  return CFX::RG::copyIfNeeded_r(a1, a3, a4, (CFX::RG::Pass *)v10, 0, v8);
}

CFX::RG::RenderGraphBuilder *RGBuilderCreateCopyIfNeeded(CFX::RG *a1, int a2, CFX::RG::RenderGraphBuilder *a3, CFX::RG::Resource *a4, CFX::RG::Pass *a5, const char *a6)
{
  return CFX::RG::copyIfNeeded_r(a1, a3, a4, a5, 0, a6);
}

CFX::RG::Resource *RGBuilderCreateReference(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[10];

  v3 = a3[1];
  v11[0] = *a3;
  v11[1] = v3;
  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[5];
  v11[4] = a3[4];
  v11[5] = v6;
  v11[2] = v4;
  v11[3] = v5;
  v7 = a3[6];
  v8 = a3[7];
  v9 = a3[9];
  v11[8] = a3[8];
  v11[9] = v9;
  v11[6] = v7;
  v11[7] = v8;
  return sub_1B17A34D0(a1, a2, v11);
}

CFX::RG::Resource *RGBuilderCreateExternalBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  CFX::RG::Resource *v13;
  __int128 v15[12];

  v11 = a5;
  v12 = a6;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v15, a3, a4, v11, v12);
  v13 = sub_1B17CC3F8(a1, a2, v15);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc((id *)v15);

  return v13;
}

void sub_1B21BD3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;
  void *v10;

  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a9);

  _Unwind_Resume(a1);
}

CFX::RG::Resource *RGBuilderCreateExternalTexture(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  CFX::RG::Resource *v11;
  _BYTE v13[160];
  id v14[24];

  v9 = a4;
  v10 = a5;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v13, a3);
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v14, v13, v9, v10);
  v11 = sub_1B17CC3F8(a1, a2, (__int128 *)v14);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v14);

  return v11;
}

void sub_1B21BD47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;

  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_1B21BD4A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v7;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v11 = a4;
  v12 = a3;
  v10 = a5;
  v9 = a6;
  v7 = sub_1B21BD518(a1, &v13, &v10, &v12, &v11, &v9);

  return v7;
}

void sub_1B21BD504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1B21BD518(uint64_t *a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t *a5, void **a6)
{
  uint64_t v10;
  uint64_t v12[2];

  v10 = a1[1];
  v12[0] = *a1;
  v12[1] = v10;
  v12[0] = (uint64_t)sub_1B21BE974(v12[0], v10, v12, a2, a3, a4, a5, a6);
  sub_1B179C734(a1 + 18, v12);
  return v12[0];
}

uint64_t RGBuilderCreateRenderPass(uint64_t *a1, const char *a2, void *a3)
{
  id v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  v6 = strlen(a2);
  if (a2)
  {
    v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      v10 = v6 >> 3;
      v8 = (unsigned __int8 *)&a2[8 * v10];
      v11 = 8 * v10;
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 += 8;
        v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    v9 = 0;
  }
  v14 = sub_1B21BD4A0(a1, (uint64_t)a2, v9, 0, 3, v5);

  return v14;
}

void sub_1B21BD6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RGBuilderCreateComputePass(uint64_t *a1, const char *a2, void *a3)
{
  id v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  v6 = strlen(a2);
  if (a2)
  {
    v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      v10 = v6 >> 3;
      v8 = (unsigned __int8 *)&a2[8 * v10];
      v11 = 8 * v10;
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 += 8;
        v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    v9 = 0;
  }
  v14 = sub_1B21BD4A0(a1, (uint64_t)a2, v9, 0, 4, v5);

  return v14;
}

void sub_1B21BD7E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RGBuilderCreateBlitPass(uint64_t *a1, const char *a2, void *a3)
{
  id v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  v6 = strlen(a2);
  if (a2)
  {
    v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      v10 = v6 >> 3;
      v8 = (unsigned __int8 *)&a2[8 * v10];
      v11 = 8 * v10;
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 += 8;
        v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    v9 = 0;
  }
  v14 = sub_1B21BD4A0(a1, (uint64_t)a2, v9, 0, 2, v5);

  return v14;
}

void sub_1B21BD928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RGBuilderCreateCustomPass(uint64_t *a1, const char *a2, void *a3)
{
  id v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  v6 = strlen(a2);
  if (a2)
  {
    v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      v10 = v6 >> 3;
      v8 = (unsigned __int8 *)&a2[8 * v10];
      v11 = 8 * v10;
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 += 8;
        v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    v9 = 0;
  }
  v14 = sub_1B21BD4A0(a1, (uint64_t)a2, v9, 0, 1, v5);

  return v14;
}

void sub_1B21BDA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RGResourceIdentifierFinalColor(CFX::RG::ResourceIdentifier *a1)
{
  uint64_t v2;

  v2 = CFX::RG::ResourceIdentifier::finalColor(a1);
  return CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v2);
}

uint64_t RGResourceIdentifierMake(NSString *a1)
{
  NSString *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  _BYTE v8[8];

  v1 = objc_retainAutorelease(a1);
  v5 = (const char *)objc_msgSend_UTF8String(v1, v2, v3, v4);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)v8, v5);
  v6 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)v8);

  return v6;
}

void sub_1B21BDAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RGResourceIdentifierMake(char *a1)
{
  _BYTE v2[8];

  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)v2, a1);
  return CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)v2);
}

BOOL RGResourceIdentifierMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v5, a1);
  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v4, a2);
  return CFX::RG::ResourceIdentifier::match((unsigned __int16 *)&v5, v4);
}

id RGResourceIdentifierGetPath(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  void *__p[2];
  char v7;
  uint64_t v8;

  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v8, a1);
  v1 = (void *)MEMORY[0x1E0CB3940];
  CFX::RG::ResourceIdentifier::pathName((CFX::RG::ResourceIdentifier *)&v8, __p);
  if (v7 >= 0)
    objc_msgSend_stringWithUTF8String_(v1, v2, (uint64_t)__p, v3);
  else
    objc_msgSend_stringWithUTF8String_(v1, v2, (uint64_t)__p[0], v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1B21BDBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RGNullTextureReferenceDescriptor()
{
  return 0;
}

CFX::RG::TextureDescriptorReference *RGTextureReferenceCreate(void)
{
  CFX::RG::TextureDescriptorReference *v0;

  v0 = (CFX::RG::TextureDescriptorReference *)operator new();
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v0);
  return v0;
}

void sub_1B21BDC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

uint64_t RGTextureReferenceDescriptorCreate(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v2, a1);
  return v2;
}

void sub_1B21BDCB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

uint64_t RGTextureReferenceDescriptorCreate(const char *a1, float a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = operator new();
  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)&v6, a1);
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v4, v6, a2);
  return v4;
}

void sub_1B21BDD48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

uint64_t RGTextureReferenceDescriptorCreate(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v5;

  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v5, a1);
  v3 = operator new();
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v3, v5, a2);
  return v3;
}

void sub_1B21BDDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

uint64_t RGTextureReferenceDescriptorDestroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x1B5E22E18);
  return result;
}

float RGTextureReferenceDescriptorGetSizeFactor(uint64_t a1)
{
  return *(float *)(a1 + 144);
}

uint64_t RGTextureReferenceDescriptorSetSizeFactor(uint64_t result, float a2)
{
  *(float *)(result + 144) = a2;
  return result;
}

uint64_t RGTextureReferenceDescriptorGetWidth(uint64_t result)
{
  if (!*(_BYTE *)(result + 2))
    return 0;
  return result;
}

uint64_t RGTextureReferenceDescriptorSetWidth(uint64_t result, __int16 a2)
{
  *(_WORD *)result = a2;
  *(_BYTE *)(result + 2) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearWidth(uint64_t result)
{
  if (*(_BYTE *)(result + 2))
    *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t RGTextureReferenceDescriptorGetHeight(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 6))
    return a1 + 4;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptorSetHeight(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 4) = a2;
  *(_BYTE *)(result + 6) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearHeight(uint64_t result)
{
  if (*(_BYTE *)(result + 6))
    *(_BYTE *)(result + 6) = 0;
  return result;
}

uint64_t RGTextureReferenceDescriptorGetDepth(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
    return a1 + 8;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptorSetDepth(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 8) = a2;
  *(_BYTE *)(result + 10) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearDepth(uint64_t result)
{
  if (*(_BYTE *)(result + 10))
    *(_BYTE *)(result + 10) = 0;
  return result;
}

uint64_t RGTextureReferenceDescriptorGetSampleCount(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 19))
    return a1 + 18;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptorSetSampleCount(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = a2 | 0x100;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearSampleCount(uint64_t result)
{
  if (*(_BYTE *)(result + 19))
    *(_BYTE *)(result + 19) = 0;
  return result;
}

uint64_t RGTextureReferenceDescriptorGetPixelFormat(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return a1 + 24;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptorSetPixelFormat(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearPixelFormat(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
    *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t RGResourceGetBufferDesc(CFX::RG::Resource *a1)
{
  return *(_QWORD *)CFX::RG::Resource::bufferDesc(a1);
}

uint64_t RGNullResource()
{
  return 0;
}

BOOL RGResourceIsNull(uint64_t a1)
{
  return a1 == 0;
}

uint64_t RGNullPass()
{
  return 0;
}

uint64_t RGPassName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t RGPassClassIdentifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t RGPassInstanceIdentifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t RGPassGetKind(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 344);
}

uint64_t RGPassRendersTo(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  return CFX::RG::Pass::renderTo(a1, a2, a3 | (unint64_t)(a4 << 32), a5);
}

uint64_t RGPassGetFirstOutput(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 168))
    return **(_QWORD **)(a1 + 176);
  else
    return 0;
}

uint64_t RGPassGetOutputAtIndex(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * a2);
}

CFX::RG::Resource *RGPassGetOutputNamed(uint64_t a1, const char *a2)
{
  uint64_t v2;
  CFX::RG::Resource **v4;
  uint64_t v5;
  CFX::RG::Resource *v6;
  const char *v7;

  v2 = *(unsigned int *)(a1 + 168);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(CFX::RG::Resource ***)(a1 + 176);
  v5 = 8 * v2;
  while (1)
  {
    v6 = *v4;
    v7 = (const char *)CFX::RG::Resource::name(*v4);
    if (!strcmp(v7, a2))
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return v6;
}

uint64_t RGPassGetOutputCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t RGPassGetFirstInput(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 72))
    return **(_QWORD **)(a1 + 80);
  else
    return 0;
}

uint64_t RGPassGetInputAtIndex(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
}

CFX::RG::Resource *RGPassGetInputNamed(uint64_t a1, const char *a2)
{
  uint64_t v2;
  CFX::RG::Resource **v4;
  uint64_t v5;
  CFX::RG::Resource *v6;
  const char *v7;

  v2 = *(unsigned int *)(a1 + 72);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(CFX::RG::Resource ***)(a1 + 80);
  v5 = 8 * v2;
  while (1)
  {
    v6 = *v4;
    v7 = (const char *)CFX::RG::Resource::name(*v4);
    if (!strcmp(v7, a2))
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return v6;
}

uint64_t RGPassGetInputCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t RGCrossFrameResourceGetUnusedFrameCount(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t RGCrossFrameResourceGetData(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

void RGCrossFrameResourceManagerCreate(CFX::CrossFrameResourceManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _OWORD *v8;
  void *v9;
  void *v10;
  id aBlock;

  aBlock = a5;
  v8 = sub_1B21BE158(a1, a2);
  *((_QWORD *)v8 + 3) = a3;
  v9 = _Block_copy(aBlock);
  v10 = (void *)*((_QWORD *)v8 + 2);
  *((_QWORD *)v8 + 2) = v9;

}

void sub_1B21BE144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_OWORD *sub_1B21BE158(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_OWORD *)operator new();
    *v4 = 0u;
    v4[1] = 0u;
    *(_QWORD *)v4 = &off_1E63CD540;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void RGGPUResourceManagerGetBuffer(CFX::GPUResourceManager *a1, const CFX::RG::Resource *a2, _QWORD *a3, id *a4, id *a5)
{
  id v8;
  id v9[3];

  CFX::GPUResourceManager::getBuffer(a1, a2, v9);
  *a3 = objc_retainAutorelease(v9[0]);
  *a4 = v9[2];
  v8 = v9[0];
  *a5 = v9[1];

}

uint64_t RGGPUResourceManagerGetDevice(CFX::GPUResourceManager *a1)
{
  uint64_t v1;

  v1 = CFX::GPUResourceManager::allocator(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

id RGArgumentsGetBlitEncoder(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id RGArgumentsGetComputeEncoder(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id RGArgumentsGetRenderEncoder(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id RGArgumentsGetRenderPassDescriptor(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

uint64_t RGBufferDescriptorMakeDefault()
{
  return 0;
}

BOOL RGBufferDescriptorIsValid(uint64_t a1)
{
  return a1 != 0;
}

double RGTextureDescriptorMakeDefault@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0x1000100000000;
  *(_WORD *)(a1 + 8) = 257;
  *(_BYTE *)(a1 + 10) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1B228CCD0;
  *(_QWORD *)(a1 + 32) = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 84148994;
  return result;
}

double RGTextureDescriptorMake1D@<D0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 4) = 65537;
  *(_WORD *)(a3 + 8) = 257;
  *(_BYTE *)(a3 + 10) = 1;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 84148994;
  *(_WORD *)a3 = a1;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = xmmword_1B228CCD0;
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

double RGTextureDescriptorMake2D@<D0>(__int16 a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)(a4 + 72) = 0;
  *(_DWORD *)(a4 + 4) = 65537;
  *(_WORD *)(a4 + 8) = 257;
  *(_BYTE *)(a4 + 10) = 1;
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(2uLL);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_DWORD *)(a4 + 72) = 84148994;
  *(_WORD *)a4 = a1;
  *(_WORD *)(a4 + 2) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t RGTextureDescriptorMake2DMultisampledIfNeeded@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_QWORD *)(a5 + 72) = 0;
  *(_DWORD *)(a5 + 4) = 65537;
  *(_BYTE *)(a5 + 8) = 1;
  *(_BYTE *)(a5 + 10) = 1;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_DWORD *)(a5 + 72) = 84148994;
  *(_WORD *)a5 = result;
  *(_WORD *)(a5 + 2) = a2;
  v5 = 4;
  if (a4 <= 1)
    v5 = 2;
  *(_QWORD *)(a5 + 24) = v5;
  *(_QWORD *)(a5 + 32) = 2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 9) = a4;
  return result;
}

double RGTextureDescriptorMake3D@<D0>(__int16 a1@<W0>, __int16 a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_OWORD *)(a5 + 8) = 0u;
  *(_QWORD *)(a5 + 72) = 0;
  *(_WORD *)(a5 + 6) = 1;
  *(_WORD *)(a5 + 8) = 257;
  *(_BYTE *)(a5 + 10) = 1;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_DWORD *)(a5 + 72) = 84148994;
  *(_WORD *)a5 = a1;
  *(_WORD *)(a5 + 2) = a2;
  *(_WORD *)(a5 + 4) = a3;
  *(_QWORD *)&result = 7;
  *(_OWORD *)(a5 + 24) = xmmword_1B22C9EF0;
  *(_QWORD *)(a5 + 16) = a4;
  return result;
}

double RGTextureDescriptorMakeCube@<D0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 4) = 65537;
  *(_WORD *)(a3 + 8) = 257;
  *(_BYTE *)(a3 + 10) = 1;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 84148994;
  *(_WORD *)a3 = a1;
  *(_WORD *)(a3 + 2) = a1;
  *(_QWORD *)&result = 5;
  *(_OWORD *)(a3 + 24) = xmmword_1B22C9F00;
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

BOOL RGTextureDescriptorIsValid(uint64_t a1)
{
  return *(_WORD *)a1 && *(_WORD *)(a1 + 2) && *(_WORD *)(a1 + 4) && *(_QWORD *)(a1 + 16) != 0;
}

uint64_t RGTextureDescriptorByDiscardingMultisampling@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(result + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 32);
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 64);
  *(_BYTE *)(a2 + 9) = 1;
  v4 = *(_QWORD *)(result + 24);
  v5 = 3;
  if (v4 != 8)
    v5 = *(_QWORD *)(result + 24);
  v6 = v4 == 4;
  v7 = 2;
  if (!v6)
    v7 = v5;
  *(_QWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t RGTextureDescriptorByPromotingToMultisampledIfNeeded@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 < 2 || ((v3 = *(_QWORD *)(result + 24), v3 != 8) ? (v4 = v3 == 4) : (v4 = 1), v4))
  {
    v5 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(result + 64);
    v6 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v6;
  }
  else
  {
    v7 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    v8 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(result + 64);
    v9 = 8;
    if (v3 != 3)
      v9 = v3;
    *(_BYTE *)(a3 + 9) = a2;
    v4 = v3 == 2;
    v10 = 4;
    if (!v4)
      v10 = v9;
    *(_QWORD *)(a3 + 24) = v10;
  }
  return result;
}

void RGTextureDescriptorFillMTLDescriptor(unsigned __int16 *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  id v42;

  v3 = a2;
  if (*a1 <= 1u)
    v6 = 1;
  else
    v6 = *a1;
  v42 = v3;
  objc_msgSend_setWidth_(v3, v4, v6, v5);
  v10 = *((_QWORD *)a1 + 3);
  if (v10 - 5 > 1)
  {
    if (v10 < 2 || a1[1] <= 1u)
      objc_msgSend_setHeight_(v42, v7, 1, v9);
    else
      objc_msgSend_setHeight_(v42, v7, a1[1], v9);
  }
  else
  {
    v11 = objc_msgSend_width(v42, v7, v8, v9);
    objc_msgSend_setHeight_(v42, v12, v11, v13);
  }
  if (*((_QWORD *)a1 + 3) == 7 && a1[2] > 1u)
    objc_msgSend_setDepth_(v42, v14, a1[2], v15);
  else
    objc_msgSend_setDepth_(v42, v14, 1, v15);
  if (*((unsigned __int8 *)a1 + 8) <= 1u)
    objc_msgSend_setMipmapLevelCount_(v42, v16, 1, v17);
  else
    objc_msgSend_setMipmapLevelCount_(v42, v16, *((unsigned __int8 *)a1 + 8), v17);
  v20 = *((_QWORD *)a1 + 3);
  if ((v20 == 8 || v20 == 4) && *((unsigned __int8 *)a1 + 9) > 1u)
    objc_msgSend_setSampleCount_(v42, v18, *((unsigned __int8 *)a1 + 9), v19);
  else
    objc_msgSend_setSampleCount_(v42, v18, 1, v19);
  v23 = *((_QWORD *)a1 + 3);
  if (v23 <= 8 && ((1 << v23) & 0x14A) != 0 && a1[3] > 1u)
    objc_msgSend_setArrayLength_(v42, v21, a1[3], v22);
  else
    objc_msgSend_setArrayLength_(v42, v21, 1, v22);
  objc_msgSend_setTextureType_(v42, v24, *((_QWORD *)a1 + 3), v25);
  objc_msgSend_setPixelFormat_(v42, v26, *((_QWORD *)a1 + 2), v27);
  objc_msgSend_setCpuCacheMode_(v42, v28, *((_QWORD *)a1 + 6), v29);
  objc_msgSend_setStorageMode_(v42, v30, *((_QWORD *)a1 + 4), v31);
  objc_msgSend_setHazardTrackingMode_(v42, v32, *((_QWORD *)a1 + 8), v33);
  objc_msgSend_setUsage_(v42, v34, *((_QWORD *)a1 + 5), v35);
  objc_msgSend_setAllowGPUOptimizedContents_(v42, v36, *((unsigned __int8 *)a1 + 10), v37);
  objc_msgSend_setCompressionType_(v42, v38, *((_QWORD *)a1 + 7), v39);
  objc_msgSend_setSwizzle_(v42, v40, *((unsigned int *)a1 + 18), v41);

}

void sub_1B21BE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void RGTextureDescriptorFromMTLTexture(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v49 = v3;
  *(_WORD *)a2 = objc_msgSend_width(v3, v4, v5, v6);
  *(_WORD *)(a2 + 2) = objc_msgSend_height(v49, v7, v8, v9);
  *(_WORD *)(a2 + 4) = objc_msgSend_depth(v49, v10, v11, v12);
  *(_WORD *)(a2 + 6) = objc_msgSend_arrayLength(v49, v13, v14, v15);
  *(_BYTE *)(a2 + 8) = objc_msgSend_mipmapLevelCount(v49, v16, v17, v18);
  *(_BYTE *)(a2 + 9) = objc_msgSend_sampleCount(v49, v19, v20, v21);
  *(_BYTE *)(a2 + 10) = objc_msgSend_allowGPUOptimizedContents(v49, v22, v23, v24);
  *(_QWORD *)(a2 + 16) = objc_msgSend_pixelFormat(v49, v25, v26, v27);
  *(_QWORD *)(a2 + 24) = objc_msgSend_textureType(v49, v28, v29, v30);
  *(_QWORD *)(a2 + 32) = objc_msgSend_storageMode(v49, v31, v32, v33);
  *(_QWORD *)(a2 + 40) = objc_msgSend_usage(v49, v34, v35, v36);
  *(_QWORD *)(a2 + 48) = objc_msgSend_cpuCacheMode(v49, v37, v38, v39);
  *(_QWORD *)(a2 + 56) = objc_msgSend_compressionType(v49, v40, v41, v42);
  *(_QWORD *)(a2 + 64) = objc_msgSend_hazardTrackingMode(v49, v43, v44, v45);
  *(_DWORD *)(a2 + 72) = objc_msgSend_swizzle(v49, v46, v47, v48);

}

void sub_1B21BE828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void RGTextureDescriptorFromMTLTextureDescriptor(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v49 = v3;
  *(_WORD *)a2 = objc_msgSend_width(v3, v4, v5, v6);
  *(_WORD *)(a2 + 2) = objc_msgSend_height(v49, v7, v8, v9);
  *(_WORD *)(a2 + 4) = objc_msgSend_depth(v49, v10, v11, v12);
  *(_WORD *)(a2 + 6) = objc_msgSend_arrayLength(v49, v13, v14, v15);
  *(_BYTE *)(a2 + 8) = objc_msgSend_mipmapLevelCount(v49, v16, v17, v18);
  *(_BYTE *)(a2 + 9) = objc_msgSend_sampleCount(v49, v19, v20, v21);
  *(_BYTE *)(a2 + 10) = objc_msgSend_allowGPUOptimizedContents(v49, v22, v23, v24);
  *(_QWORD *)(a2 + 16) = objc_msgSend_pixelFormat(v49, v25, v26, v27);
  *(_QWORD *)(a2 + 24) = objc_msgSend_textureType(v49, v28, v29, v30);
  *(_QWORD *)(a2 + 32) = objc_msgSend_storageMode(v49, v31, v32, v33);
  *(_QWORD *)(a2 + 40) = objc_msgSend_usage(v49, v34, v35, v36);
  *(_QWORD *)(a2 + 48) = objc_msgSend_cpuCacheMode(v49, v37, v38, v39);
  *(_QWORD *)(a2 + 56) = objc_msgSend_compressionType(v49, v40, v41, v42);
  *(_QWORD *)(a2 + 64) = objc_msgSend_hazardTrackingMode(v49, v43, v44, v45);
  *(_DWORD *)(a2 + 72) = objc_msgSend_swizzle(v49, v46, v47, v48);

}

void sub_1B21BE92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t RGTextureDescriptorComputeMaxMipLevelCount(unsigned __int16 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 <= a1[1])
    v1 = a1[1];
  return (vcvtms_s32_f32(log2f((float)v1)) + 1);
}

_QWORD *sub_1B21BE974(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  _QWORD *v14;
  _QWORD v16[2];

  v16[0] = a1;
  v16[1] = a2;
  v14 = (_QWORD *)sub_1B179C1C0(v16, 0x170u, 8u);
  return sub_1B21BE9F0(v14, *a3, a3[1], *a4, *a5, *a6, *a7, *a8);
}

_QWORD *sub_1B21BE9F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v15;
  void *v16;
  void *v17;

  v15 = a8;
  CFX::RG::Pass::Pass((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  *a1 = &off_1E63CB888;
  a1[45] = 0;
  v16 = _Block_copy(v15);
  v17 = (void *)a1[45];
  a1[45] = v16;

  return a1;
}

void sub_1B21BEA90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B21BEAA0(id *a1)
{

  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);
}

void sub_1B21BEAC8(id *a1)
{

  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21BEB04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 360) + 16))();
}

void sub_1B21BEB24(uint64_t a1)
{
  sub_1B21BEB48(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21BEB48(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CD540;
  (*(void (**)(void))(*(_QWORD *)(a1 + 16) + 16))();

  return a1;
}

void sub_1B21BEB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

double CFX::RG::RenderGraphProvider::RenderGraphProvider(CFX::RG::RenderGraphProvider *this)
{
  double result;

  *(_QWORD *)this = "";
  result = 0.0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 1;
  return result;
}

{
  double result;

  *(_QWORD *)this = "";
  result = 0.0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 1;
  return result;
}

double CFX::RG::RenderGraphProvider::RenderGraphProvider(CFX::RG::RenderGraphProvider *this, const char *a2)
{
  double result;

  *(_QWORD *)this = a2;
  result = 0.0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 1;
  return result;
}

{
  double result;

  *(_QWORD *)this = a2;
  result = 0.0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 1;
  return result;
}

void CFX::RG::RenderGraphProvider::~RenderGraphProvider(CFX::RG::RenderGraphProvider *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2)
  {
    v3 = (void **)*((_QWORD *)this + 2);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      free(v5);
      v4 -= 8;
    }
    while (v4);
  }
  if (*((_DWORD *)this + 7))
    free(*((void **)this + 4));
  if (*((_DWORD *)this + 3))
    free(*((void **)this + 2));
}

uint64_t CFX::RG::RenderGraphProvider::resolve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  prof_beginFlame((uint64_t)"resolve", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 22);
  v6 = sub_1B21AB5A0(a2, a1 + 8, a3);
  *(_BYTE *)(a1 + 40) = v6;
  prof_endFlame();
  return v6;
}

void sub_1B21BED40(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraphProvider::addSubgraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  sub_1B17A7C40(a1 + 8, &v2);
}

unint64_t CFX::RG::RenderGraphProvider::hash(CFX::RG::RenderGraphProvider *this, CFX::RG::RenderGraphContext *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  prof_beginFlame((uint64_t)"hash", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 47);
  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (uint64_t *)*((_QWORD *)this + 2);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      v12 = 0;
      v13 = &v14;
      v9 = (*(uint64_t (**)(uint64_t, CFX::RG::RenderGraphContext *, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a2, &v12);
      if (HIDWORD(v12))
        free(v13);
      v5 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v5 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v5)))) >> 47));
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v5 = 0;
  }
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v5 ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 6) ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * (*((_QWORD *)this + 6) ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 6) ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (*((_QWORD *)this + 6) ^ v5)))) >> 47));
  prof_endFlame();
  return v10;
}

void sub_1B21BEE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *a11)
{
  if (a10)
    free(a11);
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphProvider::showImGui(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 8);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

BOOL sub_1B21BEEE4(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  int v4;
  uint64_t v5;

  v1 = atomic_load((unsigned __int8 *)&qword_1EEFD40A0);
  if ((v1 & 1) == 0)
  {
    v5 = a1;
    v4 = __cxa_guard_acquire(&qword_1EEFD40A0);
    a1 = v5;
    if (v4)
    {
      byte_1EEFD4098 = 1;
      __cxa_guard_release(&qword_1EEFD40A0);
      a1 = v5;
    }
  }
  if (*(_BYTE *)(a1 + 344) != 3)
    return 0;
  v2 = 0x63F02EA9DD53FF01;
  if (!byte_1EEFD4098)
    v2 = 0;
  return *(_QWORD *)(a1 + 40) == v2;
}

CFX::RG *CFX::RG::RenderGraphProvider::encodeIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  CFX::RG::Resource **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  CFX::RG::Pass *v32;
  uint64_t v33;
  CFX::RG::Resource **v34;
  CFX::RG::Resource **v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE *v41;
  CFX::RG::Pass *v42;
  uint64_t *v43;
  uint64_t v44;
  CFX::RG *PublishedResource;
  CFX::RG::Pass *v46;
  unint64_t v47;
  CFX::RG *v48;
  unsigned int *v49;
  CFX::RG::RenderGraphContext *v50;
  CFX::RG::RenderGraph *v51;
  uint64_t v53;
  unsigned int *v54;
  uint64_t *v55;
  uint64_t *v56;
  CFX::RG::RenderGraphContext *v57;
  __n128 v58;
  unint64_t v59;
  void *v60;
  _QWORD v61[4];
  int v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD v66[16];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;

  prof_beginFlame((uint64_t)"encodeIfNeeded", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 71);
  if (*(_BYTE *)(a1 + 40))
  {
    CFX::RG::RenderGraphContext::setCurrentBuilder(a2, a3);
    v53 = a4;
    v54 = *(unsigned int **)(a2 + 16);
    v57 = (CFX::RG::RenderGraphContext *)a2;
    CStackAllocatorPushFrame(v54);
    v72 = *(_QWORD *)(a2 + 16);
    v73 = 0x1000000000;
    v74 = &v75;
    v67 = v72;
    sub_1B21B9D30((uint64_t)&v67, 32);
    v63 = *(_QWORD *)(a2 + 16);
    v64 = 0x1000000000;
    v65 = v66;
    memset(v66, 0, sizeof(v66));
    v61[0] = v63;
    sub_1B19B7E30((uint64_t)v61, 32);
    v8 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(a1 + 16);
      v55 = &v9[v8];
      do
      {
        v56 = v9;
        v10 = *v9;
        prof_beginFlame(*(_QWORD *)(*v9 + 16), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 103);
        v76.n128_u64[0] = 0;
        v76.n128_u64[1] = (unint64_t)&v77;
        (*(void (**)(uint64_t, CFX::RG::RenderGraphContext *, uint64_t, __n128 *))(*(_QWORD *)v10 + 24))(v10, v57, a3, &v76);
        if (v76.n128_u32[1])
          free((void *)v76.n128_u64[1]);
        prof_endFlame();
        v11 = *(unsigned int *)(a3 + 160);
        if ((_DWORD)v11)
        {
          v12 = *(unint64_t **)(a3 + 168);
          v13 = &v12[v11];
          do
          {
            v59 = 0;
            v14 = *v12;
            v59 = v14;
            v15 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v14) ^ ((0x9DDFEA08EB382D69 * v14) >> 47));
            v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
            v17 = (v62 - 1) & v16;
            v18 = *(unsigned __int16 *)(v61[3] + 2 * v17);
            if (v18 < 2)
              goto LABEL_12;
            while ((v18 & 2) == 0 || v16 != *(_QWORD *)(v61[1] + 8 * v17))
            {
              ++v17;
              v19 = v18 >= 4;
              v18 >>= 1;
              if (!v19)
                goto LABEL_12;
            }
            if (!v61[2])
            {
LABEL_12:
              v76.n128_u64[0] = v14;
              sub_1B21B9410((uint64_t)v61, v16, &v76);
              sub_1B18AE3A0(&v72, &v59);
            }
            ++v12;
          }
          while (v12 != v13);
        }
        CFX::RG::RenderGraphBuilder::initPassesAndResolveReferences((CFX::RG::RenderGraphBuilder *)a3, v57);
        if ((_DWORD)v73)
        {
          v20 = v74;
          v21 = &v74[v73];
          do
          {
            v22 = *v20;
            if (sub_1B21BEEE4(*v20) && (_DWORD)v64)
            {
              v23 = 16 * v64;
              v24 = (CFX::RG::Resource **)v65 + 1;
              do
              {
                CFX::RG::Pass::readFrom((uint64_t *)v22, *v24);
                CFX::RG::Pass::dependsOn((uint64_t *)v22, *(v24 - 1));
                v24 += 2;
                v23 -= 16;
              }
              while (v23);
            }
            v25 = *(unsigned int *)(v22 + 72);
            if ((_DWORD)v25)
            {
              v26 = *(_QWORD **)(v22 + 80);
              v27 = &v26[v25];
              do
              {
                v28 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v26) ^ ((0x9DDFEA08EB382D69 * *v26) >> 47));
                v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
                v30 = (v71 - 1) & v29;
                v31 = *(unsigned __int16 *)(v70 + 2 * v30);
                if (v31 >= 2)
                {
                  while ((v31 & 2) == 0 || v29 != *(_QWORD *)(v68 + 8 * v30))
                  {
                    ++v30;
                    v19 = v31 >= 4;
                    v31 >>= 1;
                    if (!v19)
                      goto LABEL_29;
                  }
                  if (v69)
                  {
                    v32 = *(CFX::RG::Pass **)(v69 + 16 * v30);
                    if ((CFX::RG::Pass *)v22 != v32)
                      CFX::RG::Pass::dependsOn((uint64_t *)v22, v32);
                  }
                }
LABEL_29:
                ++v26;
              }
              while (v26 != v27);
            }
            v33 = *(unsigned int *)(v22 + 168);
            if ((_DWORD)v33)
            {
              v34 = *(CFX::RG::Resource ***)(v22 + 176);
              v35 = &v34[v33];
              do
              {
                v36 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (_QWORD)*v34) ^ ((0x9DDFEA08EB382D69 * (unint64_t)*v34) >> 47));
                v37 = 0x9DDFEA08EB382D69 * (v36 ^ (v36 >> 47));
                v38 = (v71 - 1) & v37;
                v39 = *(unsigned __int16 *)(v70 + 2 * v38);
                if (v39 >= 2)
                {
                  while ((v39 & 2) == 0 || v37 != *(_QWORD *)(v68 + 8 * v38))
                  {
                    ++v38;
                    v19 = v39 >= 4;
                    v39 >>= 1;
                    if (!v19)
                      goto LABEL_40;
                  }
                  v40 = v69;
                  if (v69)
                  {
                    v41 = (_BYTE *)CFX::RG::Pass::renderTargetInfo((CFX::RG::Pass *)v22, *v34);
                    if (v41)
                    {
                      if ((*v41 & 1) != 0)
                      {
                        v42 = *(CFX::RG::Pass **)(v40 + 16 * v38);
                        if ((CFX::RG::Pass *)v22 != v42)
                          CFX::RG::Pass::dependsOn((uint64_t *)v22, v42);
                      }
                    }
                  }
                }
LABEL_40:
                ++v34;
              }
              while (v34 != v35);
            }
            ++v20;
          }
          while (v20 != v21);
        }
        LODWORD(v73) = 0;
        (*(void (**)(unint64_t *__return_ptr, uint64_t, CFX::RG::RenderGraphContext *))(*(_QWORD *)v10 + 8))(&v59, v10, v57);
        if ((_DWORD)v59)
        {
          v43 = (uint64_t *)v60;
          v44 = 8 * v59;
          do
          {
            PublishedResource = (CFX::RG *)CFX::RG::RenderGraphBuilder::findPublishedResource(a3, *v43);
            v58.n128_u64[0] = (unint64_t)PublishedResource;
            v58.n128_u64[1] = (unint64_t)v46;
            if (PublishedResource)
            {
              if (CFX::RG::isPublishResourcePass(PublishedResource, v46))
              {
                sub_1B21B1624((uint64_t)&v63, &v58);
              }
              else
              {
                v47 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * v58.n128_u64[1]) ^ ((0x9DDFEA08EB382D69 * v58.n128_u64[1]) >> 47));
                v76 = v58;
                sub_1B21BF55C((uint64_t)&v67, 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47)), &v76);
              }
            }
            ++v43;
            v44 -= 8;
          }
          while (v44);
        }
        if (HIDWORD(v59))
          free(v60);
        v9 = v56 + 1;
      }
      while (v56 + 1 != v55);
    }
    CStackAllocatorPopFrame((uint64_t)v54);
    v48 = (CFX::RG *)CFX::RG::RenderGraphBuilder::build(a3, v57, v53);
    if (v48)
    {
      v49 = (unsigned int *)*((_QWORD *)v57 + 2);
      CStackAllocatorPushFrame(v49);
      v48 = CFX::RG::OptimiseRenderGraph(v48, (CFX::RG::RenderGraph *)a3, v57, v50);
      CStackAllocatorPopFrame((uint64_t)v49);
      if (v48)
        CFX::RG::FreezeRenderGraph((CFX::RG *)a3, v48, v51);
    }
    CFX::RG::RenderGraphContext::setCurrentBuilder((uint64_t)v57, 0);
  }
  else
  {
    v48 = 0;
  }
  prof_endFlame();
  return v48;
}

void sub_1B21BF4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, void *a19)
{
  CFX::RG::RenderGraphContext::setCurrentBuilder(a14, 0);
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B21BF55C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_OWORD *)(v26 + 16 * v15) = *(_OWORD *)(v26 + 16 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_OWORD *)(*(_QWORD *)(a1 + 16) + 16 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21BF77C(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 16 * v10) = *a3;
  return result;
}

void sub_1B21BF77C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B9D30(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21BF55C(a1, *v3, v2);
      ++v3;
      v2 += 16;
      --v6;
    }
    while (v6);
  }
}

uint64_t RGMTLComputeCommandEncoderDispatchOnGrid1D(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  int64x2_t v23;

  v7 = objc_msgSend_maxTotalThreadsPerThreadgroup(a2, (const char *)a2, a3, a4);
  v11 = (void *)objc_msgSend_device(a2, v8, v9, v10);
  if (objc_msgSend_supportsFamily_(v11, v12, 3003, v13))
  {
    v22 = a3;
    v23 = vdupq_n_s64(1uLL);
    v20 = v7;
    v21 = v23;
    return objc_msgSend_dispatchThreads_threadsPerThreadgroup_(a1, v14, (uint64_t)&v22, (uint64_t)&v20);
  }
  else
  {
    v18 = (a3 + v7 - 1) / v7;
    v19 = vdupq_n_s64(1uLL);
    v16 = v7;
    v17 = v19;
    return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(a1, v14, (uint64_t)&v18, (uint64_t)&v16);
  }
}

uint64_t RGMTLComputeCommandEncoderDispatchOnGrid2D(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;

  v4 = a4;
  v8 = objc_msgSend_threadExecutionWidth(a2, (const char *)a2, a3, a4);
  v15 = objc_msgSend_maxTotalThreadsPerThreadgroup(a2, v9, v10, v11);
  if (v4
    && (v16 = (void *)objc_msgSend_device(a2, v12, v13, v14),
        objc_msgSend_supportsFamily_(v16, v17, 3003, v18)))
  {
    v28 = *(_OWORD *)a3;
    v29 = *(_QWORD *)(a3 + 16);
    v27[0] = v8;
    v27[1] = v15 / v8;
    v27[2] = 1;
    return objc_msgSend_dispatchThreads_threadsPerThreadgroup_(a1, v12, (uint64_t)&v28, (uint64_t)v27);
  }
  else
  {
    v20 = *(_QWORD *)(a3 + 8);
    if (v8 >= *(_QWORD *)a3)
      v21 = *(_QWORD *)a3;
    else
      v21 = v8;
    if (v8 >= v20)
      v22 = *(_QWORD *)(a3 + 8);
    else
      v22 = v8;
    do
    {
      v23 = v22;
      v24 = v22 * v21;
      v22 >>= 1;
    }
    while (v24 > v15);
    v26[0] = (*(_QWORD *)a3 + v21 - 1) / v21;
    v26[1] = (v20 + v23 - 1) / v23;
    v26[2] = 1;
    v25[0] = v21;
    v25[1] = v23;
    v25[2] = 1;
    return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(a1, v12, (uint64_t)v26, (uint64_t)v25);
  }
}

uint64_t RGMTLComputeCommandEncoderDispatchOnGrid3D(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;

  v7 = objc_msgSend_threadExecutionWidth(a2, (const char *)a2, a3, a4);
  v11 = objc_msgSend_maxTotalThreadsPerThreadgroup(a2, v8, v9, v10);
  v15 = (void *)objc_msgSend_device(a2, v12, v13, v14);
  if (objc_msgSend_supportsFamily_(v15, v16, 3003, v17))
  {
    v28 = *(_OWORD *)a3;
    v29 = *(_QWORD *)(a3 + 16);
    v27[0] = v7;
    v27[1] = v11 / v7;
    v27[2] = 1;
    return objc_msgSend_dispatchThreads_threadsPerThreadgroup_(a1, v18, (uint64_t)&v28, (uint64_t)v27);
  }
  else
  {
    v20 = *(_QWORD *)(a3 + 8);
    if (v7 >= *(_QWORD *)a3)
      v21 = *(_QWORD *)a3;
    else
      v21 = v7;
    if (v7 >= v20)
      v22 = *(_QWORD *)(a3 + 8);
    else
      v22 = v7;
    v23 = *(_QWORD *)(a3 + 16);
    if (v7 >= v23)
      v24 = *(_QWORD *)(a3 + 16);
    else
      v24 = v7;
    while (v22 * v24 * v21 > v11)
    {
      if (v21 <= v22 || v21 <= v24)
      {
        if (v22 > v24)
          v22 >>= 1;
        else
          v24 >>= 1;
      }
      else
      {
        v21 >>= 1;
      }
    }
    v26[0] = (*(_QWORD *)a3 + v21 - 1) / v21;
    v26[1] = (v20 + v22 - 1) / v22;
    v26[2] = (v23 + v24 - 1) / v24;
    v25[0] = v21;
    v25[1] = v22;
    v25[2] = v24;
    return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(a1, v18, (uint64_t)v26, (uint64_t)v25);
  }
}

CFX::RG *CFX::RG::OptimiseRenderGraph(CFX::RG *this, CFX::RG::RenderGraph *a2, CFX::RG::RenderGraphBuilder *a3, CFX::RG::RenderGraphContext *a4)
{
  CFX::RG *v6;
  int v7;
  const char *v8;
  uint64_t (*v9)(uint64_t);
  const char *v10;
  uint64_t (*v11)(uint64_t);
  const char *v12;
  int v13;
  const char *v14;
  uint64_t (*v15)(uint64_t);
  const char *v16;
  uint64_t (*v17)(uint64_t);
  const char *v18;
  CFX::RG *v19;
  char v20;
  unsigned int *v22;
  CFX::RG *v23;
  void *__p[2];
  uint64_t v25;

  v6 = this;
  v23 = this;
  prof_beginFlame((uint64_t)"_OptimiseRenderGraph", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 768);
  if (!*(_BYTE *)CFX::RG::RenderGraphContext::optimisationParameters(a3))
  {
    v22 = (unsigned int *)*((_QWORD *)a3 + 2);
    CStackAllocatorPushFrame(v22);
    v7 = 0;
    v8 = "Merge blit passes";
    v9 = (uint64_t (*)(uint64_t))sub_1B21C1EBC;
    v10 = "Remove copy passes";
    v11 = (uint64_t (*)(uint64_t))sub_1B21C1608;
    v12 = "Merge compute passes";
    do
    {
      if (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 2))
      {
        prof_beginFlame((uint64_t)"Merge render passes", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 782);
        v13 = sub_1B21C0C58((uint64_t)v23, a2, (uint64_t *)a3, v7 != 0);
        if (v13)
        {
          v14 = v12;
          v15 = v11;
          v16 = v10;
          v17 = v9;
          v18 = v8;
          do
          {
            __p[0] = 0;
            __p[1] = 0;
            v25 = 0;
            v19 = (CFX::RG *)CFX::RG::RenderGraphBuilder::build((uint64_t)a2, a3, (uint64_t)__p);
            if (!v19)
              abort();
            if (SHIBYTE(v25) < 0)
              operator delete(__p[0]);
          }
          while ((sub_1B21C0C58((uint64_t)v19, a2, (uint64_t *)a3, v7 != 0) & 1) != 0);
          v23 = v19;
          v8 = v18;
          v9 = v17;
          v10 = v16;
          v11 = v15;
          v12 = v14;
        }
        prof_endFlame();
      }
      else
      {
        v13 = 0;
      }
      if (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 3))
      {
        prof_beginFlame((uint64_t)v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 787);
        v13 |= sub_1B21C12DC((uint64_t *)&v23, (uint64_t)a2, a3, (uint64_t (*)(uint64_t))sub_1B21C139C);
        prof_endFlame();
      }
      if (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 1))
      {
        prof_beginFlame((uint64_t)v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 792);
        v13 |= sub_1B21C12DC((uint64_t *)&v23, (uint64_t)a2, a3, v11);
        prof_endFlame();
      }
      if (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 4))
      {
        prof_beginFlame((uint64_t)v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 797);
        v20 = v13 | sub_1B21C12DC((uint64_t *)&v23, (uint64_t)a2, a3, v9);
        prof_endFlame();
        if ((v20 & 1) == 0)
          break;
      }
      else if (!v13)
      {
        break;
      }
      ++v7;
    }
    while (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 8));
    CStackAllocatorPopFrame((uint64_t)v22);
    v6 = v23;
  }
  prof_endFlame();
  return v6;
}

void sub_1B21C06B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void CFX::RG::AllocateResources(CFX::RG *this, CFX::RG::RenderGraph *a2, CFX::RG::RenderGraphContext *a3)
{
  CFX::GPUResourceManager *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  CFX::RG::Resource **v13;
  CFX::RG::Resource **v14;
  CFX::RG::Resource *v15;
  char v16;
  _BOOL4 isManaged;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  BOOL isAllocated;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  unsigned __int32 v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  CFX::RG::Resource **v39;
  uint64_t v40;
  CFX::RG::Resource *v41;
  CFX::RG::Resource **v42;
  uint64_t v43;
  const CFX::RG::Resource *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  CFX::RG::RenderGraph *v49;
  unsigned int *v50;
  __n128 v51[5];
  CFX::RG::Resource *v52;
  unsigned int *v53;
  uint64_t v54;
  CFX::RG::Resource **v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;

  prof_beginFlame((uint64_t)"_AllocateResources", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 911);
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  v5 = (CFX::GPUResourceManager *)*((_QWORD *)a2 + 3);
  v49 = a2;
  v50 = v6;
  CStackAllocatorPushFrame(v6);
  v57 = v6;
  sub_1B21B9D30((uint64_t)&v57, 32);
  v7 = *((unsigned int *)this + 64);
  if ((_DWORD)v7)
  {
    v8 = *((_QWORD *)this + 33);
    v45 = v8 + 32 * v7;
    v47 = (uint64_t)v6;
    do
    {
      v53 = v6;
      v54 = 0x1000000000;
      v55 = (CFX::RG::Resource **)&v56;
      v9 = *(unsigned int *)(v8 + 16);
      if ((_DWORD)v9)
      {
        v46 = v8;
        v10 = *(uint64_t **)(v8 + 24);
        v48 = &v10[v9];
        do
        {
          v11 = *v10;
          v12 = *(unsigned int *)(*v10 + 168);
          if ((_DWORD)v12)
          {
            v13 = *(CFX::RG::Resource ***)(v11 + 176);
            v14 = &v13[v12];
            do
            {
              v52 = 0;
              v52 = *v13;
              if (CFX::RG::Resource::type(v52) != 2)
              {
                v15 = v52;
                v16 = CFX::RG::Pass::renderTargetAccess((CFX::RG::Pass *)v11, v52);
                isManaged = CFX::RG::Resource::isManaged(v52);
                v18 = isManaged;
                v19 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (_QWORD)v15) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v15) >> 47));
                v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
                if ((v16 & 1) != 0)
                {
                  if (!isManaged)
                  {
                    v22 = sub_1B21C297C(this, v11, (uint64_t)v52, (uint64_t *)&v50);
                    if (v22 >= 1)
                    {
                      v23 = (v61 - 1) & v20;
                      v24 = *(unsigned __int16 *)(v60 + 2 * v23);
                      if (v24 < 2)
                      {
LABEL_20:
                        v26 = 0;
                      }
                      else
                      {
                        while ((v24 & 2) == 0 || v20 != *(_QWORD *)(v58 + 8 * v23))
                        {
                          ++v23;
                          v25 = v24 > 3;
                          v24 >>= 1;
                          if (!v25)
                            goto LABEL_20;
                        }
                        v26 = v59 + 16 * v23;
                      }
                      v27 = *(_DWORD *)(v26 + 8);
                      if (v27 != 0x7FFFFFFF)
                        *(_DWORD *)(v26 + 8) = v27 + v22;
                    }
                    sub_1B21C29FC(&v53, (uint64_t)&v57, v52);
                  }
                }
                else
                {
                  isAllocated = CFX::GPUResourceManager::isAllocated(v5, v52);
                  if (v18)
                  {
                    if (!isAllocated)
                      sub_1B21C2B64((uint64_t)v49, this, (CFX::RG::Pass *)v11, v52);
                  }
                  else if (isAllocated)
                  {
                    v28 = (v61 - 1) & v20;
                    v29 = *(unsigned __int16 *)(v60 + 2 * v28);
                    if (v29 >= 2)
                    {
                      while ((v29 & 2) == 0 || v20 != *(_QWORD *)(v58 + 8 * v28))
                      {
                        ++v28;
                        v30 = v29 >= 4;
                        v29 >>= 1;
                        if (!v30)
                          goto LABEL_8;
                      }
                      v33 = v59;
                      if (v59)
                      {
                        CFX::RG::RenderGraph::directSuccessorsReadingResource(this, v11, (uint64_t)v52, v47, (uint64_t)v51);
                        v34 = v33 + 16 * v28;
                        v37 = *(_DWORD *)(v34 + 8);
                        v35 = (_DWORD *)(v34 + 8);
                        v36 = v37;
                        if (v37 != 0x7FFFFFFF)
                          *v35 = v36 + v51[0].n128_u32[2];
                      }
                    }
                  }
                  else
                  {
                    sub_1B21C2B64((uint64_t)v49, this, (CFX::RG::Pass *)v11, v52);
                    v31 = sub_1B21C297C(this, v11, (uint64_t)v52, (uint64_t *)&v50);
                    if (v31 < 1)
                    {
                      sub_1B18AE3A0(&v53, &v52);
                    }
                    else
                    {
                      v51[0].n128_u64[0] = (unint64_t)v52;
                      if (CFX::RG::Resource::isManaged(v52))
                        v32 = 0x7FFFFFFF;
                      else
                        v32 = v31;
                      v51[0].n128_u32[2] = v32;
                      sub_1B21C2E04((uint64_t)&v57, v20, v51);
                    }
                  }
                }
              }
LABEL_8:
              ++v13;
            }
            while (v13 != v14);
          }
          v38 = *(unsigned int *)(v11 + 72);
          if ((_DWORD)v38)
          {
            v39 = *(CFX::RG::Resource ***)(v11 + 80);
            v40 = 8 * v38;
            do
            {
              v41 = *v39;
              if (CFX::RG::Resource::type(*v39) != 2)
                sub_1B21C29FC(&v53, (uint64_t)&v57, v41);
              ++v39;
              v40 -= 8;
            }
            while (v40);
          }
          ++v10;
        }
        while (v10 != v48);
        v8 = v46;
        v6 = (unsigned int *)v47;
        if ((_DWORD)v54)
        {
          v42 = v55;
          v43 = 8 * v54;
          do
          {
            v44 = *v42;
            if (!CFX::RG::Resource::isManaged(*v42))
              CFX::GPUResourceManager::free(v5, v44);
            ++v42;
            v43 -= 8;
          }
          while (v43);
        }
      }
      v8 += 32;
    }
    while (v8 != v45);
  }
  CStackAllocatorPopFrame((uint64_t)v6);
  prof_endFlame();
}

void sub_1B21C0AE4(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::DeduceStoreAction(_DWORD *a1, CFX::RG::Pass *this, CFX::RG::Resource *a3, unsigned int *a4, unint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFX::RG::Resource *v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 isManaged;
  BOOL v17;
  uint64_t v18;
  _BYTE v21[8];
  int v22;

  v9 = HIBYTE(a5);
  v10 = CFX::RG::Pass::renderTargetInfo(this, a3);
  CStackAllocatorPushFrame(a4);
  if ((*(_BYTE *)v10 & 4) != 0 || !*((_DWORD *)this + 42))
    goto LABEL_9;
  v11 = 0;
  while (1)
  {
    v12 = *(CFX::RG::Resource **)(*((_QWORD *)this + 22) + 8 * v11);
    v13 = CFX::RG::Pass::renderTargetInfo(this, v12);
    if (v13)
    {
      if (*(unsigned __int8 *)(v10 + 4) == *(unsigned __int8 *)(v13 + 4)
        && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v13 + 8)
        && (*(_BYTE *)v13 & 4) != 0)
      {
        break;
      }
    }
    if (++v11 >= (unint64_t)*((unsigned int *)this + 42))
      goto LABEL_9;
  }
  if (v12)
  {
    CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)v21);
    if (CFX::RG::Resource::type(a3) != 2 && (v9 | v22) == 0)
      v18 = 2;
    else
      v18 = 3;
  }
  else
  {
LABEL_9:
    CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)v21);
    v14 = v22;
    v15 = CFX::RG::Resource::type(a3);
    isManaged = CFX::RG::Resource::isManaged(a3);
    if (v9 | v14)
      v17 = 1;
    else
      v17 = v15 == 2;
    v18 = v17 || isManaged;
  }
  CStackAllocatorPopFrame((uint64_t)a4);
  return v18;
}

uint64_t sub_1B21C0C58(uint64_t a1, CFX::RG::RenderGraphBuilder *a2, uint64_t *a3, char a4)
{
  CFX::RG::Pass *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFX::RG **v9;
  CFX::RG **v10;
  char v11;
  uint64_t i;
  CFX::RG *v13;
  unint64_t v14;
  const CFX::RG::Resource *v15;
  const CFX::RG::Resource *v16;
  int v17;
  const CFX::RG::Resource *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFX::RG **v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const CFX::RG::Resource **v40;
  uint64_t v41;
  const CFX::RG::Resource *v42;
  uint64_t v43;
  uint8x8_t v44;
  uint8x8_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  CFX::RG **v63;
  CFX::RG **v65;
  double *v66;
  double *v67;
  _DWORD *v68;
  _DWORD *v69;
  __int32 *v70;
  __int32 *v71;
  uint64_t v72;
  uint64_t v73;
  CFX::RG::Pass *v74[2];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  CFX::RG::Pass *v78;
  _BYTE v79[64];
  __int128 v80;
  uint64_t v81;
  CFX::RG **v82;
  CFX::RG *v83;
  uint64_t v84;
  char *v85;
  _BYTE v86[72];

  v84 = 0x800000000;
  v85 = v86;
  sub_1B17CC394((uint64_t)&v84, 8u);
  v6 = *(unsigned int *)(a1 + 256);
  if (!(_DWORD)v6)
  {
LABEL_85:
    v57 = 0;
    goto LABEL_87;
  }
  v59 = *(_QWORD *)(a1 + 264) + 32 * v6;
  v7 = *(_QWORD *)(a1 + 264);
  v72 = a1;
  while (1)
  {
    v60 = v7;
    v8 = *(unsigned int *)(v7 + 16);
    if ((_DWORD)v8)
      break;
LABEL_84:
    v7 = v60 + 32;
    if (v60 + 32 == v59)
      goto LABEL_85;
  }
  v9 = *(CFX::RG ***)(v60 + 24);
  v10 = &v9[v8];
  v63 = v10;
  while (1)
  {
    v83 = 0;
    v83 = *v9;
    if (*((_BYTE *)v83 + 344) == 3 && ((a4 & 1) != 0 || !CFX::RG::isCopyPass(v83, v5)))
      break;
LABEL_83:
    if (++v9 == v10)
      goto LABEL_84;
  }
  v80 = *(_OWORD *)a1;
  v81 = 0;
  v82 = &v83;
  sub_1B179C78C((uint64_t)&v80, 8, 1);
  v65 = v9;
  sub_1B179C734((uint64_t *)&v80, &v83);
  v11 = 0;
  do
  {
    for (i = 0; i != 64; i += 8)
      *(_QWORD *)&v85[i] = 0;
    v13 = v83;
    if (*((_DWORD *)v83 + 42))
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = *(const CFX::RG::Resource **)(*((_QWORD *)v13 + 22) + 8 * v14);
        v19 = CFX::RG::Pass::renderTargetInfo(v13, v18);
        if (v19)
        {
          ++v17;
          v20 = *(unsigned __int8 *)(v19 + 4);
          switch(v20)
          {
            case 3:
              v16 = v18;
              break;
            case 2:
              v15 = v18;
              break;
            case 1:
              *(_QWORD *)&v85[8 * *(unsigned int *)(v19 + 8)] = v18;
              break;
          }
        }
        ++v14;
        v13 = v83;
      }
      while (v14 < *((unsigned int *)v83 + 42));
    }
    else
    {
      v17 = 0;
      v16 = 0;
      v15 = 0;
    }
    v76 = *(_OWORD *)a1;
    v77 = 0x800000000;
    v78 = (CFX::RG::Pass *)v79;
    v21 = CFX::RG::RenderGraph::successors((CFX::RG::RenderGraph *)a1, v13);
    v22 = *(unsigned int *)(v21 + 16);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v21 + 24);
      v24 = 24 * v22;
      while (1)
      {
        v25 = *(_QWORD *)(v23 + 16);
        *(_OWORD *)v74 = *(_OWORD *)v23;
        v75 = v25;
        if (LOBYTE(v74[1]) != 3)
          sub_1B21AF404((uint64_t *)&v76, v74);
        v26 = v77;
        if (v77 >= 2)
          break;
        v23 += 24;
        v24 -= 24;
        if (!v24)
          goto LABEL_31;
      }
LABEL_61:
      v50 = 6;
      goto LABEL_64;
    }
    v26 = v77;
LABEL_31:
    if (v26 != 1)
      goto LABEL_61;
    v74[0] = 0;
    v27 = *(_QWORD *)v78;
    v74[0] = (CFX::RG::Pass *)v27;
    if (*(_BYTE *)(v27 + 344) != 3)
      goto LABEL_62;
    v28 = *(_QWORD *)(v27 + 40);
    v29 = atomic_load((unsigned __int8 *)&qword_1EEFD40B0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1EEFD40B0))
    {
      byte_1EEFD40A8 = 1;
      __cxa_guard_release(&qword_1EEFD40B0);
    }
    v30 = 0x646F94B6FAFEAA7CLL;
    if (!byte_1EEFD40A8)
      v30 = 0;
    if (v28 == v30)
      goto LABEL_62;
    v31 = CFX::RG::RenderGraph::predecessors((CFX::RG::RenderGraph *)a1, v74[0]);
    v32 = *(unsigned int *)(v31 + 16);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)(v31 + 24);
      v34 = 24 * v32;
      v35 = (CFX::RG **)(v33 + 8);
      while (*(_BYTE *)v35 == 3 || *(v35 - 1) == v83)
      {
        v35 += 3;
        v34 -= 24;
        if (!v34)
          goto LABEL_42;
      }
LABEL_62:
      v50 = 6;
      goto LABEL_63;
    }
LABEL_42:
    v36 = (unsigned __int8 *)(*(uint64_t (**)(CFX::RG *))(*(_QWORD *)v83 + 32))(v83);
    v37 = (*(uint64_t (**)(CFX::RG::Pass *))(*(_QWORD *)v74[0] + 32))(v74[0]);
    if (v36[268] != *(unsigned __int8 *)(v37 + 268))
      goto LABEL_62;
    v38 = *((unsigned int *)v74[0] + 42);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = (const CFX::RG::Resource **)*((_QWORD *)v74[0] + 22);
      v70 = (__int32 *)(v37 + 274);
      v71 = (__int32 *)(v36 + 274);
      v68 = (_DWORD *)(v37 + 264);
      v69 = v36 + 264;
      v73 = v37;
      v66 = (double *)(v37 + 256);
      v67 = (double *)(v36 + 256);
      v41 = 8 * v38;
      while (1)
      {
        v42 = *v40;
        v43 = CFX::RG::Pass::renderTargetInfo(v74[0], *v40);
        v46 = v43;
        if (v43)
        {
          v47 = v39;
          v11 = 0;
          v44.i32[0] = *v71;
          v45.i32[0] = *v70;
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)vmvn_s8((int8x8_t)vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v44), (int16x4_t)*(_OWORD *)&vmovl_u8(v45))), 0xFuLL))) & 1) != 0|| v36[278] != *(unsigned __int8 *)(v73 + 278))
          {
            v50 = 0;
            goto LABEL_63;
          }
          v48 = v36;
          v49 = v36[279];
          v50 = 0;
          if (v49 != *(unsigned __int8 *)(v73 + 279))
            goto LABEL_63;
          v39 = v47 + 1;
          v51 = *(unsigned __int8 *)(v43 + 4);
          if (v51 == 3)
          {
            v52 = operator==(v69, v68);
            v36 = v48;
            v53 = v16 == v42;
          }
          else
          {
            v36 = v48;
            if (v51 == 2)
            {
              v52 = operator==(v67, v66);
              v53 = v15 == v42;
            }
            else
            {
              if (v51 != 1)
                goto LABEL_59;
              v52 = operator==((double *)&v48[32 * *(unsigned int *)(v43 + 8)], (double *)(v73 + 32 * *(unsigned int *)(v43 + 8)));
              v53 = v42 == *(const CFX::RG::Resource **)&v85[8 * *(unsigned int *)(v46 + 8)];
            }
          }
          if (!v53 || !v52)
            goto LABEL_73;
        }
LABEL_59:
        ++v40;
        v41 -= 8;
        if (!v41)
          goto LABEL_71;
      }
    }
    v39 = 0;
LABEL_71:
    if (v17 == v39)
    {
      sub_1B21AF404((uint64_t *)&v80, v74);
      v50 = 0;
      v83 = v74[0];
      v11 = 1;
    }
    else
    {
LABEL_73:
      v11 = 0;
      v50 = 0;
    }
LABEL_63:
    a1 = v72;
LABEL_64:
    if (HIDWORD(v77))
    {
      if (v78 != (CFX::RG::Pass *)v79)
      {
        v74[0] = v78;
        if (*((_QWORD *)&v76 + 1))
          sub_1B179C834(*((_QWORD **)&v76 + 1), v74);
      }
    }
    v55 = (v50 == 0) & v11;
    v11 = 1;
  }
  while ((v55 & 1) != 0);
  v56 = v81;
  v9 = v65;
  if (v81 >= 2)
    sub_1B21C2128(a1, a2, a3, (uint64_t)&v80, 3u);
  v10 = v63;
  if (HIDWORD(v81))
  {
    *(_QWORD *)&v76 = v82;
    if (*((_QWORD *)&v80 + 1))
      sub_1B179C834(*((_QWORD **)&v80 + 1), &v76);
  }
  if (v56 <= 1)
    goto LABEL_83;
  v57 = 1;
LABEL_87:
  if (HIDWORD(v84) && v85 != v86)
    free(v85);
  return v57;
}

void sub_1B21C1220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,int a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  if (*(_DWORD *)(v35 - 180))
  {
    v37 = *(void **)(v35 - 176);
    if (v37 != a9)
      free(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B21C12DC(uint64_t *a1, uint64_t a2, CFX::RG::RenderGraphContext *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v12;

  v8 = a4(*a1);
  if ((_DWORD)v8)
  {
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v12 = 0;
      v9 = CFX::RG::RenderGraphBuilder::build(a2, a3, (uint64_t)__p);
      *a1 = v9;
      if (!v9)
        abort();
      if (SHIBYTE(v12) < 0)
      {
        operator delete(__p[0]);
        v9 = *a1;
      }
    }
    while ((((uint64_t (*)(uint64_t, uint64_t, CFX::RG::RenderGraphContext *))a4)(v9, a2, a3) & 1) != 0);
  }
  return v8;
}

void sub_1B21C137C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B21C139C(uint64_t a1, CFX::RG::RenderGraphBuilder *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[4];
  int v18;
  int v19;
  _QWORD v20[4];
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v23 = *(_OWORD *)a1;
  v24 = 0;
  v25 = &v26;
  sub_1B179C78C((uint64_t)&v23, 8, 1);
  v20[0] = a3[2];
  sub_1B21B907C((uint64_t)v20, 32);
  v17[0] = a3[2];
  sub_1B21B907C((uint64_t)v17, 32);
  v6 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 264);
    v8 = v7 + 32 * v6;
    while (1)
    {
      v9 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v9)
        break;
LABEL_17:
      v7 += 32;
      if (v7 == v8)
        goto LABEL_18;
    }
    v10 = *(uint64_t **)(v7 + 24);
    v11 = 8 * v9;
    while (1)
    {
      v16 = 0;
      v12 = *v10;
      v16 = v12;
      if (*(_BYTE *)(v12 + 344) == 4)
      {
        if (sub_1B21C28F4(v12))
        {
          v13 = v16;
          if (!sub_1B21C2704(v16, (uint64_t)v17))
          {
            sub_1B21C2824(v13, (uint64_t)v20);
            sub_1B179C734((uint64_t *)&v23, &v16);
            goto LABEL_16;
          }
        }
        if (v24 > 1)
          goto LABEL_19;
      }
      else
      {
        if (!sub_1B21C2704(v12, (uint64_t)v20))
        {
          if ((_DWORD)v24)
            sub_1B21C2824(v12, (uint64_t)v17);
          goto LABEL_16;
        }
        if (v24 >= 2)
          goto LABEL_19;
      }
      LODWORD(v24) = 0;
      memset((void *)v20[1], 255, 8 * (v22 + 15));
      bzero((void *)v20[3], 2 * (v22 + 15));
      v21 = 0;
      memset((void *)v17[1], 255, 8 * (v19 + 15));
      bzero((void *)v17[3], 2 * (v19 + 15));
      v18 = 0;
LABEL_16:
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_17;
    }
  }
LABEL_18:
  if (v24 < 2)
  {
    v14 = 0;
  }
  else
  {
LABEL_19:
    sub_1B21C2128(a1, a2, a3, (uint64_t)&v23, 4u);
    v14 = 1;
  }
  if (HIDWORD(v24))
  {
    v20[0] = v25;
    if (*((_QWORD *)&v23 + 1))
      sub_1B179C834(*((_QWORD **)&v23 + 1), v20);
  }
  return v14;
}

void sub_1B21C15CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,int a23,int a24,uint64_t a25)
{
  if (a24)
  {
    a16 = a25;
    if (a22)
      sub_1B179C834(a22, &a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B21C1608(CFX::RG::RenderGraph *a1, CFX::RG::RenderGraphBuilder *a2, uint64_t a3)
{
  CFX::GPUResourceManager **v3;
  unsigned int *v6;
  uint64_t v7;
  CFX::RG::Resource ***v8;
  CFX::RG::Resource **v9;
  CFX::RG::Resource *v10;
  unsigned __int8 v11;
  uint64_t v12;
  CFX::RG::Resource *v13;
  CFX::RG::Resource *v14;
  uint64_t v15;
  uint64_t v16;
  CFX::RG::Resource **v17;
  uint64_t v18;
  CFX::RG::Pass *v19;
  uint64_t v20;
  uint64_t v21;
  CFX::RG::Resource ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  const CFX::RG::Pass *v28;
  uint64_t v29;
  CFX::RG::Resource **v30;
  CFX::RG::Resource **v31;
  CFX::RG::RenderGraph *v32;
  const CFX::RG::Pass *v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  CFX::RG::Resource **v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  const CFX::RG::Resource *v41;
  unsigned int v42;
  const CFX::RG::Pass **v43;
  uint64_t v44;
  unsigned int v45;
  const CFX::RG::Pass **v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int16x4_t *v50;
  int16x4_t *v51;
  int16x4_t *v52;
  uint8x8_t v53;
  uint8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  CFX::RG::Pass **v57;
  uint64_t v58;
  CFX::RG::Pass *v59;
  uint64_t v60;
  CFX::RG::Pass **v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 isExternal;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  CFX::RG::Resource *v70;
  uint64_t v71;
  char v72;
  CFX::RG::RenderGraphBuilder *v74;
  CFX::GPUResourceManager **v75;
  CFX::RG::Resource *v76;
  CFX::RG::Pass **v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t **v83;
  CFX::RG::Pass **v84;
  uint64_t v85;
  int v86;
  CFX::RG::RenderGraphBuilder *v87;
  CFX::RG::Pass *v88;
  CFX::RG::Resource *v89;
  unsigned int v90;
  CFX::RG::RenderGraphContext *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CFX::RG::Resource ***v95;
  CFX::RG::Resource ***v96;
  char v97[8];
  unsigned int v98;
  CFX::RG::Pass **v99;
  uint64_t v100;
  uint64_t v101;
  const CFX::RG::Pass **v102;
  uint64_t v103;

  v3 = (CFX::GPUResourceManager **)a3;
  v6 = *(unsigned int **)(a3 + 16);
  CStackAllocatorPushFrame(v6);
  v92 = (uint64_t)v6;
  CStackAllocatorPopFrame((uint64_t)v6);
  v7 = *((unsigned int *)a1 + 32);
  if (!(_DWORD)v7)
    return 0;
  v87 = a2;
  v88 = 0;
  v8 = (CFX::RG::Resource ***)*((_QWORD *)a1 + 17);
  v96 = &v8[v7];
  while (1)
  {
    v9 = *v8;
    v10 = (*v8)[5];
    v11 = atomic_load((unsigned __int8 *)&qword_1EEFD40B0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EEFD40B0))
    {
      byte_1EEFD40A8 = 1;
      __cxa_guard_release(&qword_1EEFD40B0);
    }
    v12 = 0x646F94B6FAFEAA7CLL;
    if (!byte_1EEFD40A8)
      v12 = 0;
    if (v10 != (CFX::RG::Resource *)v12)
      goto LABEL_99;
    v13 = CFX::GPUResourceManager::remappedResource(v3[3], v9[46]);
    v14 = CFX::GPUResourceManager::remappedResource(v3[3], v9[48]);
    v15 = CFX::RG::RenderGraph::predecessors(a1, (CFX::RG::Pass *)v9);
    v16 = *(unsigned int *)(v15 + 16);
    if (!(_DWORD)v16)
      goto LABEL_99;
    v17 = (CFX::RG::Resource **)(*(_QWORD *)(v15 + 24) + 16);
    v18 = 24 * v16;
    while (*v17 != v13)
    {
      v17 += 3;
      v18 -= 24;
      if (!v18)
        goto LABEL_99;
    }
    v19 = *(v17 - 2);
    if (!v19 || !CFX::RG::Resource::isTexture(v13) || !CFX::RG::Resource::isTexture(v14))
      goto LABEL_99;
    v20 = CFX::RG::RenderGraph::successors(a1, (CFX::RG::Pass *)v9);
    v21 = *(unsigned int *)(v20 + 16);
    if ((_DWORD)v21)
    {
      v22 = (CFX::RG::Resource ***)(*(_QWORD *)(v20 + 24) + 8);
      v23 = 24 * v21;
      while (*(_BYTE *)v22 == 3 || *(v22 - 1) == v9)
      {
        v22 += 3;
        v23 -= 24;
        if (!v23)
          goto LABEL_20;
      }
      v86 = 0;
    }
    else
    {
LABEL_20:
      v86 = 1;
    }
    v91 = (CFX::RG::RenderGraphContext *)v3;
    v89 = v14;
    v93 = (uint64_t)v9;
    v90 = CFX::RG::RenderGraph::stageIndexForPass(a1, (const CFX::RG::Pass *)v9);
    v24 = CFX::RG::RenderGraph::successors(a1, v19);
    v25 = *(_DWORD *)(v24 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v24 + 24);
      v94 = v26 + 24 * v25;
      v95 = v8;
      v27 = -1;
      do
      {
        if (*(_BYTE *)(v26 + 8) != 3)
        {
          v28 = *(const CFX::RG::Pass **)v26;
          if (*(_QWORD *)v26 != v93)
          {
            v29 = *((unsigned int *)v28 + 42);
            if ((_DWORD)v29)
            {
              v30 = (CFX::RG::Resource **)*((_QWORD *)v28 + 22);
              v31 = &v30[v29];
              do
              {
                if (*v30 == v13)
                {
                  v32 = a1;
                  v33 = *(const CFX::RG::Pass **)v26;
                  if (*(_BYTE *)(*(_QWORD *)v26 + 344) == 3
                    && (v34 = (_BYTE *)CFX::RG::Pass::renderTargetInfo(*(CFX::RG::Pass **)v26, v13)) != 0
                    && (v35 = v34, (*v34 & 1) != 0)
                    && (v36 = *((unsigned int *)v33 + 42), (_DWORD)v36))
                  {
                    v37 = (CFX::RG::Resource **)*((_QWORD *)v33 + 22);
                    v38 = 8 * v36;
                    while (1)
                    {
                      v39 = CFX::RG::Pass::renderTargetInfo(v33, *v37);
                      if (v39)
                      {
                        if ((*(_BYTE *)v39 & 4) != 0 && *(_DWORD *)(v39 + 8) == *((_DWORD *)v35 + 2))
                          break;
                      }
                      ++v37;
                      v38 -= 8;
                      if (!v38)
                        goto LABEL_38;
                    }
                    a1 = v32;
                  }
                  else
                  {
LABEL_38:
                    a1 = v32;
                    v40 = CFX::RG::RenderGraph::stageIndexForPass(v32, *(const CFX::RG::Pass **)v26);
                    if (v40 < v27)
                      v27 = v40;
                  }
                }
                ++v30;
              }
              while (v30 != v31);
            }
          }
        }
        v26 += 24;
        v8 = v95;
      }
      while (v26 != v94);
    }
    else
    {
      v27 = -1;
    }
    if (v27 <= v90)
      goto LABEL_98;
    v41 = v89;
    CFX::RG::RenderGraph::passesWritingResource(a1, (uint64_t)v89, v92, (uint64_t)&v100);
    if ((_DWORD)v101 != 1)
    {
      CFX::RG::RenderGraph::passesReadingResource(a1, (uint64_t)v89, v92, (uint64_t)v97);
      v42 = 0;
      if (v98)
      {
        v43 = v99;
        v44 = 8 * v98;
        do
        {
          if (*v43 != (const CFX::RG::Pass *)v93)
          {
            v45 = CFX::RG::RenderGraph::stageIndexForPass(a1, *v43);
            if (v42 <= v45)
              v42 = v45;
          }
          ++v43;
          v44 -= 8;
        }
        while (v44);
      }
      if ((_DWORD)v101)
      {
        v46 = v102;
        v47 = 8 * v101;
        v48 = -1;
        do
        {
          if (*v46 != (const CFX::RG::Pass *)v93)
          {
            v49 = CFX::RG::RenderGraph::stageIndexForPass(a1, *v46);
            if (v49 < v48)
              v48 = v49;
          }
          ++v46;
          v47 -= 8;
        }
        while (v47);
      }
      else
      {
        v48 = -1;
      }
      v41 = v89;
      if (v42 >= v48)
        goto LABEL_98;
    }
    v50 = (int16x4_t *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v91, v13);
    v51 = (int16x4_t *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v91, v41);
    v52 = v51;
    v53 = (uint8x8_t)*v50;
    v53.i32[0] = v51[9].i32[0];
    v54.i32[0] = v50[9].i32[0];
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v54), (int16x4_t)*(_OWORD *)&vmovl_u8(v53)), (int8x8_t)vceq_s16(*v50, *v51)), 0xFuLL))) & 1) == 0|| v50[1].u8[0] != v51[1].u8[0]|| v50[1].u8[2] != v51[1].u8[2]|| *(_QWORD *)&v50[2] != *(_QWORD *)&v51[2]|| *(_QWORD *)&v50[4] != *(_QWORD *)&v51[4]|| *(_QWORD *)&v50[6] != *(_QWORD *)&v51[6]|| *(_QWORD *)&v50[7] != *(_QWORD *)&v51[7]|| *(_QWORD *)&v50[8] != *(_QWORD *)&v51[8]|| CFX::RG::Resource::isManaged(v13))
    {
      goto LABEL_98;
    }
    if (v50[1].u8[1] > v52[1].u8[1])
      break;
    v55 = v93;
    if (*(_QWORD *)&v50[2] == *(_QWORD *)&v52[2])
      goto LABEL_75;
LABEL_98:
    v3 = (CFX::GPUResourceManager **)v91;
LABEL_99:
    if (++v8 == v96)
      return 0;
  }
  v55 = v93;
  CFX::RG::RenderGraph::directPredecessorsWritingResource(a1, v93, (uint64_t)v13, v92, (uint64_t)v97);
  v88 = *v99;
LABEL_75:
  if (!v88)
  {
    v56 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v91, v41) + 40);
    if ((v56 & 2) == 0)
    {
      CFX::RG::RenderGraph::passesWritingResource(a1, (uint64_t)v13, v92, (uint64_t)v97);
      if (v98)
      {
        v57 = v99;
        v58 = 8 * v98;
        while (1)
        {
          v59 = *v57;
          if (*v57 != (CFX::RG::Pass *)v55 && (*((_BYTE *)v59 + 344) != 3 || !CFX::RG::Pass::isRenderTarget(v59, v13)))
            break;
          ++v57;
          v58 -= 8;
          if (!v58)
            goto LABEL_88;
        }
        if (CFX::RG::Resource::isExternal(v89))
          goto LABEL_97;
        v60 = CFX::RG::Resource::textureDesc(v89);
        *(_QWORD *)(v60 + 72) = v56 | 2;
        *(_BYTE *)(v60 + 80) = 1;
        CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)v91, v89);
      }
    }
LABEL_88:
    if ((v56 == 0) | v56 & 1
      || (CFX::RG::RenderGraph::passesReadingResource(a1, (uint64_t)v13, v92, (uint64_t)v97), !v98))
    {
LABEL_96:
      isExternal = CFX::RG::Resource::isExternal(v13);
      v41 = v89;
      if ((isExternal & (v86 ^ 1) & 1) == 0)
      {
        if (v55)
          v72 = isExternal;
        else
          v72 = 1;
        if ((v72 & 1) != 0)
          return 0;
        v74 = v87;
        v75 = (CFX::GPUResourceManager **)v91;
        v76 = v13;
        goto LABEL_122;
      }
      goto LABEL_97;
    }
    v61 = v99;
    v62 = 8 * v98;
    while (*v61 == (CFX::RG::Pass *)v55)
    {
      ++v61;
      v62 -= 8;
      if (!v62)
        goto LABEL_96;
    }
    if (!CFX::RG::Resource::isExternal(v89))
    {
      v63 = CFX::RG::Resource::textureDesc(v89);
      *(_QWORD *)(v63 + 72) = v56 | 1;
      *(_BYTE *)(v63 + 80) = 1;
      CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)v91, v89);
      goto LABEL_96;
    }
LABEL_97:
    v88 = 0;
    goto LABEL_98;
  }
  if (*((_BYTE *)v88 + 344) != 3)
    goto LABEL_98;
  if (!v55)
    return 0;
  v65 = CFX::RG::Pass::renderTargetInfo(v88, v13);
  v66 = *(_DWORD *)(v65 + 8);
  v67 = *(unsigned __int8 *)(v65 + 4);
  if (*((_DWORD *)v88 + 42))
  {
    v68 = 0;
    while (1)
    {
      v69 = *((_QWORD *)v88 + 22);
      v70 = *(CFX::RG::Resource **)(v69 + 8 * v68);
      if (v70 != v13)
      {
        v71 = CFX::RG::Pass::renderTargetInfo(v88, *(CFX::RG::Resource **)(v69 + 8 * v68));
        if (v71)
        {
          if (*(_DWORD *)(v71 + 8) == v66 && *(unsigned __int8 *)(v71 + 4) == (_DWORD)v67 && (*(_BYTE *)v71 & 4) != 0)
            break;
        }
      }
      if (++v68 >= (unint64_t)*((unsigned int *)v88 + 42))
        goto LABEL_112;
    }
    v74 = v87;
    v75 = (CFX::GPUResourceManager **)v91;
    v76 = v70;
LABEL_122:
    CFX::RG::RenderGraphBuilder::replaceResource(v74, v75, v76, v41, 1);
    goto LABEL_123;
  }
LABEL_112:
  if (!v86 || CFX::RG::Resource::isExternal(v41) || CFX::RG::Resource::isManaged(v41))
    CFX::RG::Pass::renderTo((uint64_t)v88, (uint64_t)v41, (v67 << 32) | 4, v66);
LABEL_123:
  v100 = v92;
  v101 = 0x800000000;
  v102 = (const CFX::RG::Pass **)&v103;
  CFX::RG::RenderGraph::directPredecessorsWritingResource(a1, v55, (uint64_t)v13, v92, (uint64_t)v97);
  if (v98)
  {
    v77 = v99;
    v78 = 8 * v98;
    do
    {
      sub_1B21B3598(&v100, v77++);
      v78 -= 8;
    }
    while (v78);
  }
  v79 = *(unsigned int *)(v55 + 264);
  if ((_DWORD)v79)
  {
    v80 = *(_QWORD **)(v55 + 272);
    v81 = 8 * v79;
    do
    {
      sub_1B21B3598(&v100, v80++);
      v81 -= 8;
    }
    while (v81);
  }
  CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, v55, (uint64_t)v41, v92, (uint64_t)v97);
  if (v98)
  {
    v82 = (uint64_t **)v99;
    v83 = (uint64_t **)&v99[v98];
    do
    {
      if ((_DWORD)v101)
      {
        v84 = v102;
        v85 = 8 * v101;
        do
        {
          CFX::RG::Pass::dependsOn(*v82, *v84++);
          v85 -= 8;
        }
        while (v85);
      }
      ++v82;
    }
    while (v82 != v83);
  }
  CFX::RG::RenderGraphBuilder::removePass(v87, (CFX::RG::Pass *)v55, 1);
  return 1;
}

uint64_t sub_1B21C1EBC(uint64_t a1, CFX::RG::RenderGraphBuilder *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[4];
  int v18;
  int v19;
  _QWORD v20[4];
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v23 = *(_OWORD *)a1;
  v24 = 0;
  v25 = &v26;
  sub_1B179C78C((uint64_t)&v23, 8, 1);
  v20[0] = a3[2];
  sub_1B21B907C((uint64_t)v20, 32);
  v17[0] = a3[2];
  sub_1B21B907C((uint64_t)v17, 32);
  v6 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 264);
    v8 = v7 + 32 * v6;
    while (1)
    {
      v9 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v9)
        break;
LABEL_17:
      v7 += 32;
      if (v7 == v8)
        goto LABEL_18;
    }
    v10 = *(uint64_t **)(v7 + 24);
    v11 = 8 * v9;
    while (1)
    {
      v16 = 0;
      v12 = *v10;
      v16 = v12;
      if (*(_BYTE *)(v12 + 344) == 2)
      {
        if (sub_1B21C28F4(v12))
        {
          v13 = v16;
          if (!sub_1B21C2704(v16, (uint64_t)v17))
          {
            sub_1B21C2824(v13, (uint64_t)v20);
            sub_1B179C734((uint64_t *)&v23, &v16);
            goto LABEL_16;
          }
        }
        if (v24 > 1)
          goto LABEL_19;
      }
      else
      {
        if (!sub_1B21C2704(v12, (uint64_t)v20))
        {
          if ((_DWORD)v24)
            sub_1B21C2824(v12, (uint64_t)v17);
          goto LABEL_16;
        }
        if (v24 >= 2)
          goto LABEL_19;
      }
      LODWORD(v24) = 0;
      memset((void *)v20[1], 255, 8 * (v22 + 15));
      bzero((void *)v20[3], 2 * (v22 + 15));
      v21 = 0;
      memset((void *)v17[1], 255, 8 * (v19 + 15));
      bzero((void *)v17[3], 2 * (v19 + 15));
      v18 = 0;
LABEL_16:
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_17;
    }
  }
LABEL_18:
  if (v24 < 2)
  {
    v14 = 0;
  }
  else
  {
LABEL_19:
    sub_1B21C2128(a1, a2, a3, (uint64_t)&v23, 2u);
    v14 = 1;
  }
  if (HIDWORD(v24))
  {
    v20[0] = v25;
    if (*((_QWORD *)&v23 + 1))
      sub_1B179C834(*((_QWORD **)&v23 + 1), v20);
  }
  return v14;
}

void sub_1B21C20EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,int a23,int a24,uint64_t a25)
{
  if (a24)
  {
    a16 = a25;
    if (a22)
      sub_1B179C834(a22, &a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B21C2128(uint64_t a1, CFX::RG::RenderGraphBuilder *this, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  CFX::RG::Pass **v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  CFX::RG::Resource **v38;
  CFX::RG::Resource **v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char v55[8];
  int v56;
  _QWORD *v57;
  _BYTE *v58;
  int v59;
  _QWORD *v60;
  CFX::RG::Resource *v61;
  __int128 v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[72];
  unint64_t v66;
  uint64_t **v67;
  _QWORD *v68;
  uint64_t v69;
  CFX::RG::Pass **v70;
  _BYTE v71[64];
  uint64_t **v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t **v75;
  _BYTE v76[71];
  unsigned __int8 v77[9];

  v77[0] = a5;
  v9 = *(_QWORD **)(a1 + 8);
  v72 = *(uint64_t ***)a1;
  v73 = v9;
  v74 = 0x800000000;
  v75 = (uint64_t **)v76;
  v67 = v72;
  v68 = v9;
  v69 = 0x800000000;
  v70 = (CFX::RG::Pass **)v71;
  v66 = 0;
  v10 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a4 + 24);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      v14 = 0x9DDFEA08EB382D69 * (*(_QWORD *)(*v11 + 48) ^ v66);
      v66 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v66 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v66 ^ (v14 >> 47) ^ v14)) >> 47));
      v15 = *(unsigned int *)(a1 + 128);
      if ((_DWORD)v15)
      {
        v16 = *(uint64_t **)(a1 + 136);
        v17 = &v16[v15];
        do
        {
          *(_QWORD *)&v62 = 0;
          v18 = *v16;
          *(_QWORD *)&v62 = v18;
          v19 = *(_QWORD *)(v18 + 272);
          v20 = *(unsigned int *)(v18 + 264);
          if ((_DWORD)v20)
          {
            v21 = 8 * v20;
            v22 = *(_QWORD **)(v18 + 272);
            while (*v22 != v13)
            {
              ++v22;
              v21 -= 8;
              if (!v21)
              {
                v22 = (_QWORD *)(v19 + 8 * v20);
                break;
              }
            }
          }
          else
          {
            v22 = *(_QWORD **)(v18 + 272);
          }
          if (v20 != ((uint64_t)v22 - v19) >> 3)
          {
            v23 = *(_QWORD *)(a4 + 24);
            v24 = *(unsigned int *)(a4 + 16);
            if ((_DWORD)v24)
            {
              v25 = 8 * v24;
              v26 = *(_QWORD **)(a4 + 24);
              while (*v26 != v18)
              {
                ++v26;
                v25 -= 8;
                if (!v25)
                {
                  v26 = (_QWORD *)(v23 + 8 * v24);
                  break;
                }
              }
            }
            else
            {
              v26 = *(_QWORD **)(a4 + 24);
            }
            if (v24 == ((uint64_t)v26 - v23) >> 3)
              sub_1B21AF404((uint64_t *)&v72, &v62);
          }
          ++v16;
        }
        while (v16 != v17);
      }
      v27 = *(unsigned int *)(v13 + 264);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD **)(v13 + 272);
        v29 = 8 * v27;
        do
        {
          *(_QWORD *)&v62 = 0;
          *(_QWORD *)&v62 = *v28;
          sub_1B21AF404((uint64_t *)&v67, &v62);
          ++v28;
          v29 -= 8;
        }
        while (v29);
      }
      CFX::RG::RenderGraphBuilder::removePass(this, (CFX::RG::Pass *)v13, 0);
      ++v11;
    }
    while (v11 != v12);
  }
  *(_QWORD *)&v62 = a3[2];
  result = sub_1B21C2634((uint64_t *)this, &v62, a4, &v66, v77);
  v31 = result;
  if ((_DWORD)v74)
  {
    v32 = v75;
    v33 = 8 * v74;
    do
    {
      result = (uint64_t)CFX::RG::Pass::dependsOn(*v32++, (CFX::RG::Pass *)v31);
      v33 -= 8;
    }
    while (v33);
  }
  if ((_DWORD)v69)
  {
    v34 = v70;
    v35 = 8 * v69;
    do
    {
      result = (uint64_t)CFX::RG::Pass::dependsOn((uint64_t *)v31, *v34++);
      v35 -= 8;
    }
    while (v35);
  }
  v36 = v77[0] == 2 || v77[0] == 4;
  if (!v36)
    goto LABEL_75;
  v62 = *(_OWORD *)this;
  v63 = 0x800000000;
  v64 = v65;
  v37 = *(unsigned int *)(v31 + 72);
  if (!(_DWORD)v37)
    goto LABEL_71;
  v38 = *(CFX::RG::Resource ***)(v31 + 80);
  v39 = &v38[v37];
  do
  {
    v61 = *v38;
    CFX::RG::RenderGraph::passesReadingResource((_DWORD *)a1, (uint64_t)v61, a3[2], (uint64_t)&v58);
    CFX::RG::RenderGraph::passesWritingResource((_DWORD *)a1, (uint64_t)v61, a3[2], (uint64_t)v55);
    if (v59)
    {
      v40 = v60;
      v41 = *(_QWORD *)(v31 + 384);
      v42 = *(unsigned int *)(v31 + 376);
      do
      {
        if ((_DWORD)v42)
        {
          v43 = 8 * v42;
          v44 = *(_QWORD **)(v31 + 384);
          while (*v44 != *v40)
          {
            ++v44;
            v43 -= 8;
            if (!v43)
            {
              v44 = (_QWORD *)(v41 + 8 * v42);
              break;
            }
          }
        }
        else
        {
          v44 = *(_QWORD **)(v31 + 384);
        }
        v45 = ((uint64_t)v44 - v41) >> 3;
        v36 = v45 == v42;
        v46 = v45 != v42;
        ++v40;
      }
      while (!v36 && v40 != &v60[v59]);
    }
    else
    {
      v46 = 1;
    }
    if (v56)
    {
      v48 = v57;
      v49 = *(_QWORD *)(v31 + 384);
      v50 = *(unsigned int *)(v31 + 376);
      while (1)
      {
        if ((_DWORD)v50)
        {
          v51 = 8 * v50;
          v52 = *(_QWORD **)(v31 + 384);
          while (*v52 != *v48)
          {
            ++v52;
            v51 -= 8;
            if (!v51)
            {
              v52 = (_QWORD *)(v49 + 8 * v50);
              break;
            }
          }
        }
        else
        {
          v52 = *(_QWORD **)(v31 + 384);
        }
        if (v50 == ((uint64_t)v52 - v49) >> 3)
          break;
        if (++v48 == &v57[v56])
          goto LABEL_63;
      }
LABEL_67:
      result = (uint64_t)sub_1B179C734((uint64_t *)&v62, &v61);
      goto LABEL_68;
    }
LABEL_63:
    if (!v46)
      goto LABEL_67;
    result = CFX::RG::Resource::isTexture(v61);
    if ((_DWORD)result)
    {
      result = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a3, v61);
      v53 = *(_QWORD *)(result + 40);
      if ((v53 & 1) == 0)
      {
        v54 = CFX::RG::Resource::textureDesc(v61);
        *(_QWORD *)(v54 + 72) = v53 | 1;
        *(_BYTE *)(v54 + 80) = 1;
        result = CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)a3, v61);
      }
    }
LABEL_68:
    ++v38;
  }
  while (v38 != v39);
  if ((_DWORD)v63 != *(_DWORD *)(v31 + 72))
    result = CFX::RG::Pass::replaceReads(v31, &v62);
LABEL_71:
  if (HIDWORD(v63))
  {
    if (v64 != v65)
    {
      v58 = v64;
      result = *((_QWORD *)&v62 + 1);
      if (*((_QWORD *)&v62 + 1))
        result = (uint64_t)sub_1B179C834(*((_QWORD **)&v62 + 1), &v58);
    }
  }
LABEL_75:
  if (HIDWORD(v69))
  {
    if (v70 != (CFX::RG::Pass **)v71)
    {
      *(_QWORD *)&v62 = v70;
      result = (uint64_t)v68;
      if (v68)
        result = (uint64_t)sub_1B179C834(v68, &v62);
    }
  }
  if (HIDWORD(v74) && v75 != (uint64_t **)v76)
  {
    v67 = v75;
    result = (uint64_t)v73;
    if (v73)
      return (uint64_t)sub_1B179C834(v73, &v67);
  }
  return result;
}

void sub_1B21C25DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_1B21B8680((uint64_t)&a35);
  sub_1B21B8680((uint64_t)&a49);
  sub_1B21B8680(v49 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_1B21C2634(uint64_t *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v10[2];

  v8 = a1[1];
  v10[0] = *a1;
  v10[1] = v8;
  v10[0] = sub_1B21C2690(v10[0], v8, v10, a2, a3, a4, a5);
  sub_1B179C734(a1 + 18, v10);
  return v10[0];
}

uint64_t sub_1B21C2690(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, unsigned __int8 *a7)
{
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  v12 = sub_1B179C1C0(v14, 0x188u, 8u);
  return CFX::RG::AggregatePass::AggregatePass(v12, *a3, a3[1], *a4, a5, *a6, *a7);
}

uint64_t sub_1B21C2704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)(a1 + 80);
    v4 = &v3[v2];
    v5 = *(_DWORD *)(a2 + 36) - 1;
    while (1)
    {
      v6 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v3) ^ ((0x9DDFEA08EB382D69 * *v3) >> 47));
      v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      v8 = v5 & v7;
      v9 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 2 * (v5 & v7));
      if (v9 >= 2)
      {
        while ((v9 & 2) == 0 || v7 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v8))
        {
          ++v8;
          v10 = v9 >= 4;
          v9 >>= 1;
          if (!v10)
            goto LABEL_9;
        }
        if (*(_QWORD *)(a2 + 16))
          break;
      }
LABEL_9:
      if (++v3 == v4)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v11 = *(unsigned int *)(a1 + 168);
    if (!(_DWORD)v11)
      return 0;
    v12 = *(_QWORD **)(a1 + 176);
    v13 = &v12[v11];
    v14 = *(_DWORD *)(a2 + 36) - 1;
    while (1)
    {
      v15 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v12) ^ ((0x9DDFEA08EB382D69 * *v12) >> 47));
      v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      v17 = v14 & v16;
      v18 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 2 * (v14 & v16));
      if (v18 >= 2)
      {
        while ((v18 & 2) == 0 || v16 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v17))
        {
          ++v17;
          v10 = v18 >= 4;
          v18 >>= 1;
          if (!v10)
            goto LABEL_18;
        }
        if (*(_QWORD *)(a2 + 16))
          break;
      }
LABEL_18:
      if (++v12 == v13)
        return 0;
    }
  }
  return 1;
}

uint64_t sub_1B21C2824(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;

  v3 = result;
  v4 = *(unsigned int *)(result + 72);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(result + 80);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v7) ^ ((0x9DDFEA08EB382D69 * v7) >> 47));
      v15 = 1;
      result = sub_1B21B2AE4(a2, 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)), &v15);
      v6 -= 8;
    }
    while (v6);
  }
  v9 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(v3 + 176);
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      v13 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v12) ^ ((0x9DDFEA08EB382D69 * v12) >> 47));
      v14 = 1;
      result = sub_1B21B2AE4(a2, 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47)), &v14);
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1B21C28F4(uint64_t a1)
{
  uint64_t v2;
  CFX::RG::Resource **v3;
  uint64_t v4;
  uint64_t v5;
  CFX::RG::Resource **v6;
  uint64_t v7;
  CFX::RG::Resource *v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2)
  {
    v3 = *(CFX::RG::Resource ***)(a1 + 80);
    v4 = 8 * v2;
    while (CFX::RG::Resource::isHazardTracked(*v3))
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(a1 + 168);
    if ((_DWORD)v5)
    {
      v6 = *(CFX::RG::Resource ***)(a1 + 176);
      v7 = 8 * v5 - 8;
      do
      {
        v8 = *v6++;
        result = CFX::RG::Resource::isHazardTracked(v8);
        v10 = !result || v7 == 0;
        v7 -= 8;
      }
      while (!v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1B21C297C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE v11[8];
  unsigned int v12;

  CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, a2, a3, *a4, (uint64_t)v11);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = *(_QWORD **)(a2 + 80);
    while (*v9 != a3)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        v9 = (_QWORD *)(v6 + 8 * v7);
        break;
      }
    }
  }
  else
  {
    v9 = *(_QWORD **)(a2 + 80);
  }
  if (v7 == ((uint64_t)v9 - v6) >> 3)
    return v12;
  else
    return v12 + 1;
}

uint64_t sub_1B21C29FC(_DWORD *a1, uint64_t a2, CFX::RG::Resource *this)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int i;
  uint64_t v20;
  CFX::RG::Resource *v21;

  v21 = this;
  result = CFX::RG::Resource::isManaged(this);
  if ((result & 1) == 0)
  {
    v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (_QWORD)this) ^ ((0x9DDFEA08EB382D69 * (unint64_t)this) >> 47));
    v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    v9 = (*(_DWORD *)(a2 + 36) - 1) & v8;
    v10 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 2 * v9);
    if (v10 < 2)
    {
LABEL_6:
      v12 = 0;
    }
    else
    {
      while ((v10 & 2) == 0 || v8 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v9))
      {
        ++v9;
        v11 = v10 > 3;
        v10 >>= 1;
        if (!v11)
          goto LABEL_6;
      }
      v12 = *(_QWORD *)(a2 + 16) + 16 * v9;
    }
    v13 = *(_DWORD *)(v12 + 8);
    if (v13 != 0x7FFFFFFF)
    {
      v14 = v13 - 1;
      *(_DWORD *)(v12 + 8) = v14;
      if (!v14)
      {
        result = (uint64_t)sub_1B18AE3A0(a1, &v21);
        v15 = (*(_DWORD *)(a2 + 36) - 1) & v8;
        v16 = *(_QWORD *)(a2 + 24);
        v17 = *(unsigned __int16 *)(v16 + 2 * v15);
        if (v17 >= 2)
        {
          v18 = 1;
          for (i = *(unsigned __int16 *)(v16 + 2 * v15); ; i >>= 1)
          {
            if ((i & 2) != 0)
            {
              v20 = (v15 + v18 - 1);
              if (v8 == *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v20))
                break;
            }
            ++v18;
            v11 = i > 3;
            if (!v11)
              return result;
          }
          *(_WORD *)(v16 + 2 * v15) = v17 ^ (1 << v18);
          *(_WORD *)(v16 + 2 * v20) ^= 1u;
          --*(_DWORD *)(a2 + 32);
        }
      }
    }
  }
  return result;
}

void sub_1B21C2B64(uint64_t a1, _DWORD *a2, CFX::RG::Pass *a3, const CFX::RG::Resource *a4)
{
  unsigned int *v8;
  char v9;
  char v10;
  CFX::RG::Pass **v11;
  uint64_t v12;
  BOOL isRenderTarget;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD v23[22];
  _BYTE v24[8];
  unsigned int v25;
  CFX::RG::Pass **v26;

  if (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters((CFX::RG::RenderGraphContext *)a1) + 6))
  {
    prof_beginFlame((uint64_t)"_DeduceResourcesUsage", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 854);
    if (CFX::RG::Resource::isTexture(a4))
    {
      v8 = *(unsigned int **)(a1 + 16);
      CStackAllocatorPushFrame(v8);
      CFX::RG::RenderGraph::passesWritingResource(a2, (uint64_t)a4, (uint64_t)v8, (uint64_t)v24);
      if (v25)
      {
        v9 = 0;
        v10 = 0;
        v11 = v26;
        v12 = 8 * v25;
        while (1)
        {
          isRenderTarget = CFX::RG::Pass::isRenderTarget(*v11, a4);
          v9 |= !isRenderTarget;
          v10 |= isRenderTarget;
          if ((v9 & 1) != 0 && (v10 & 1) != 0)
            break;
          ++v11;
          v12 -= 8;
          if (!v12)
            goto LABEL_11;
        }
        v10 = 1;
        v9 = 1;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
LABEL_11:
      CFX::RG::RenderGraph::passesReadingResource(a2, (uint64_t)a4, (uint64_t)v8, (uint64_t)v23);
      v14 = v23[2];
      v15 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a1, a4)
                      + 40);
      v16 = v15 | (v14 != 0);
      if ((v9 & 1) != 0)
        v16 |= 2uLL;
      if ((v10 & 1) != 0)
        v17 = v16 | 4;
      else
        v17 = v16;
      if (v15 != v17)
      {
        v18 = CFX::RG::Resource::textureDesc(a4);
        *(_QWORD *)(v18 + 72) = v17;
        *(_BYTE *)(v18 + 80) = 1;
        CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)a1, a4);
      }
      CStackAllocatorPopFrame((uint64_t)v8);
    }
    prof_endFlame();
  }
  if (*(_BYTE *)(CFX::RG::RenderGraphContext::optimisationParameters((CFX::RG::RenderGraphContext *)a1) + 5))
  {
    if (*((_BYTE *)a3 + 344) == 3)
    {
      v19 = CFX::GPUResourceManager::allocator(*(CFX::GPUResourceManager **)(a1 + 24));
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19))
      {
        if (!CFX::RG::Resource::isManaged(a4)
          && *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a1, a4)
                       + 32) == 2
          && CFX::RG::Pass::isRenderTarget(a3, a4))
        {
          v20 = *(unsigned int **)(a1 + 16);
          CStackAllocatorPushFrame(v20);
          CFX::RG::RenderGraph::directSuccessorsReadingResource(a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)v20, (uint64_t)v24);
          if (!v25 && (*(_BYTE *)CFX::RG::Pass::renderTargetInfo(a3, a4) & 4) == 0)
          {
            v21 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a1, a4)+ 24);
            if (v21 <= 8 && ((1 << v21) & 0x11C) != 0)
            {
              v22 = CFX::RG::Resource::textureDesc(a4);
              *(_QWORD *)(v22 + 56) = 3;
              *(_BYTE *)(v22 + 64) = 1;
              CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)a1, a4);
            }
          }
          CStackAllocatorPopFrame((uint64_t)v20);
        }
      }
    }
  }
  CFX::GPUResourceManager::allocate(*(CFX::GPUResourceManager **)(a1 + 24), a4, (const CFX::RG::RenderGraphContext *)a1);
}

void sub_1B21C2DEC(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

__n128 sub_1B21C2E04(uint64_t a1, uint64_t a2, __n128 *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __n128 result;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_OWORD *)(v26 + 16 * v15) = *(_OWORD *)(v26 + 16 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      result = *a3;
      *(__n128 *)(*(_QWORD *)(a1 + 16) + 16 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v30 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v30 + 2 * v21) |= 1u;
      *(_WORD *)(v30 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B21C302C(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  v28 = a3->n128_u64[0];
  v29 = *(_QWORD *)(a1 + 16) + 16 * v10;
  *(_DWORD *)(v29 + 8) = a3->n128_u32[2];
  *(_QWORD *)v29 = v28;
  return result;
}

void sub_1B21C302C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B21B9D30(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B21C2E04(a1, *v3, v2);
      ++v3;
      v2 += 16;
      --v6;
    }
    while (v6);
  }
}

unint64_t CFX::ConstantBufferAlignSize(CFX *this)
{
  return ((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF0;
}

id *CFX::BufferPool::Frame::prepareForReuse(id *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;

  v1 = (uint64_t)this;
  v2 = *(unsigned int *)this;
  if (!(_DWORD)v2)
    goto LABEL_11;
  v3 = 40 * v2;
  v4 = (char *)this[1] + 16;
  do
  {
    *v4 = 0;
    v4[1] = 0;
    v4 += 5;
    v3 -= 40;
  }
  while (v3);
  v5 = *(_DWORD *)this;
  if (!*(_DWORD *)this)
    goto LABEL_11;
  v6 = (char *)this[1];
  v7 = (uint64_t)v6;
  do
  {
    if (*(_DWORD *)(v7 + 32) < 0xAu)
    {
      v7 += 40;
    }
    else
    {
      this = sub_1B21C3140(v1, (id *)v7);
      v7 = (uint64_t)this;
      v6 = *(char **)(v1 + 8);
      v5 = *(_DWORD *)v1;
    }
  }
  while ((char *)v7 != &v6[40 * v5]);
  if (!v5)
LABEL_11:
    v6 = 0;
  *(_QWORD *)(v1 + 24) = v6;
  *(_DWORD *)(v1 + 16) = 0;
  return this;
}

id *sub_1B21C3140(uint64_t a1, id *__dst)
{
  unsigned int v4;
  id *v5;

  if (*(_DWORD *)(a1 + 4))

  v4 = *(_DWORD *)a1 - 1;
  *(_DWORD *)a1 = v4;
  v5 = (id *)(*(_QWORD *)(a1 + 8) + 40 * v4);
  if (v5 != __dst)
    memmove(__dst, __dst + 5, (char *)v5 - (char *)__dst);
  return __dst;
}

uint64_t CFX::BufferPool::BufferPool(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a3;
  if (a3)
    a4 = 1;
  sub_1B21C3204((unsigned int *)(a1 + 8), a4);
  return a1;
}

void sub_1B21C31F0(_Unwind_Exception *a1)
{
  unsigned int *v1;

  sub_1B21C3684(v1);
  _Unwind_Resume(a1);
}

void sub_1B21C3204(unsigned int *a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (*a1 != a2)
  {
    if (v2 <= a2)
    {
      v7 = a1[1];
      v8 = a2 - v7;
      if (a2 > v7)
      {
        sub_1B21C3754(a1, v8, 0);
        v2 = *a1;
      }
      if (v2 < a2)
      {
        v9 = 40 * v2;
        v10 = a2 - (unint64_t)v2;
        do
        {
          v11 = *((_QWORD *)a1 + 1) + v9;
          *(_OWORD *)(v11 + 16) = 0uLL;
          *(_OWORD *)v11 = 0uLL;
          *(_QWORD *)(v11 + 8) = v11 + 16;
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          v9 += 40;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      v5 = a2;
      v6 = 40 * a2;
      do
      {
        sub_1B21C36EC((unsigned int *)(*((_QWORD *)a1 + 1) + v6));
        ++v5;
        v6 += 40;
      }
      while (v5 < *a1);
    }
    *a1 = a2;
  }
}

void CFX::BufferPool::~BufferPool(CFX::BufferPool *this)
{
  sub_1B21C3684((unsigned int *)this + 2);
}

{
  sub_1B21C3684((unsigned int *)this + 2);
}

uint64_t CFX::BufferPool::resourceOptions(CFX::BufferPool *this)
{
  return 16 * *((_QWORD *)this + 4);
}

int32x2_t CFX::BufferPool::allocate@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unsigned int *v5;
  int32x2_t **v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  int32x2_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int32x2_t *v20;
  int32x2_t v21;
  int32x2_t result;
  id v24[4];
  int v25;
  _QWORD v26[2];

  v4 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (unsigned int *)(a1[2] + 40 * *(unsigned int *)a1);
  v6 = (int32x2_t **)(v5 + 6);
  v7 = v5 + 4;
  v8 = 0x40000;
  if (v4 > 0x40000)
    v8 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = ((v8 - 1) & 0xFFFFFFFFFFFC0000) + 0x40000;
  while (1)
  {
    v10 = *v6;
    if (*v6)
    {
      if (*(_QWORD *)&v10[2] + v4 <= *(_QWORD *)&v10[1])
        break;
    }
    v11 = *v7;
    if (*v7 >= *v5)
    {
      v12 = (*((_QWORD *)v5 + 4) + 15) & 0xFFFFFFFFFFFFFFF0;
      if (!v12)
        v12 = v9;
      v13 = a1[3];
      v14 = 16 * a1[4];
      v26[0] = v12;
      v26[1] = v14;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 24))(v13, v26);
      v15 = (id)objc_claimAutoreleasedReturnValue();
      v24[0] = v15;
      v24[1] = (id)objc_msgSend_length(v15, v16, v17, v18);
      v24[2] = 0;
      v24[3] = 0;
      v25 = 0;
      sub_1B21C34D4((uint64_t)v5, (uint64_t *)v24);
      *v6 = (int32x2_t *)(*((_QWORD *)v5 + 1) + 40 * *v5 - 40);

      v11 = *v7;
    }
    else
    {
      *v6 = (int32x2_t *)(*((_QWORD *)v5 + 1) + 40 * v11);
    }
    *v7 = v11 + 1;
  }
  v19 = *(id *)v10;
  v20 = *v6;
  v21 = (*v6)[2];
  *a3 = v19;
  a3[1] = v21;
  a3[2] = v4;
  v20[2] = (int32x2_t)(*(_QWORD *)&v21 + v4);
  result = vadd_s32(v20[3], (int32x2_t)0x100000001);
  v20[3] = result;
  return result;
}

void sub_1B21C34B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

__n128 sub_1B21C34D4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B21C3950((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
  }
  v5 = *(_QWORD *)(a1 + 8) + 40 * v4;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v5 = v6;
  result = *(__n128 *)(a2 + 1);
  *(_OWORD *)(v5 + 20) = *(_OWORD *)((char *)a2 + 20);
  *(__n128 *)(v5 + 8) = result;
  ++*(_DWORD *)a1;
  return result;
}

void CFX::BufferPool::free(unsigned int *a1, id *a2)
{
  unsigned int *v2;
  uint64_t v3;
  id v4;
  id *v5;
  uint64_t v6;

  v2 = (unsigned int *)(*((_QWORD *)a1 + 2) + 40 * *a1);
  v3 = *v2;
  v4 = *a2;
  if ((_DWORD)v3)
  {
    v5 = (id *)(*((_QWORD *)v2 + 1) + 24);
    v6 = 40 * v3;
    while (*(v5 - 3) != v4)
    {
      v5 += 5;
      v6 -= 40;
      if (!v6)
        goto LABEL_5;
    }
    --*(_DWORD *)v5;

  }
  else
  {
LABEL_5:

  }
}

uint64_t CFX::BufferPool::frameCountWithoutReuse(CFX::BufferPool *this)
{
  return *((char *)this + 8);
}

id *CFX::BufferPool::nextFrame(CFX::BufferPool *this, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  id *result;

  v5 = *(_DWORD *)this;
  v6 = *((_QWORD *)this + 2);
  v7 = (unsigned int *)(v6 + 40 * *(unsigned int *)this);
  if (*v7)
  {
    v8 = 0;
    v9 = *((_QWORD *)v7 + 1);
    v10 = (int *)(v9 + 40 * *v7);
    v11 = (int *)(v9 + 32);
    do
    {
      v12 = v11 - 8;
      v13 = objc_msgSend_length(*((void **)v11 - 4), a2, a3, a4);
      if (*(v11 - 1))
        v14 = 0;
      else
        v14 = *v11 + 1;
      v8 += v13;
      *v11 = v14;
      v11 += 10;
    }
    while (v12 + 10 != v10);
  }
  else
  {
    v8 = 0;
  }
  v15 = 0x40000;
  if (v8 > 0x40000)
    v15 = v8;
  *(_QWORD *)(v6 + 40 * v5 + 32) = v15;
  result = CFX::BufferPool::Frame::prepareForReuse((id *)(v6 + 40 * v5));
  *(_DWORD *)this = (*(_DWORD *)this + 1) % *((_DWORD *)this + 2);
  return result;
}

unsigned int *sub_1B21C3684(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (a1[1])
  {
    if (*a1)
    {
      v2 = 0;
      v3 = 0;
      do
      {
        sub_1B21C36EC((unsigned int *)(*((_QWORD *)a1 + 1) + v2));
        ++v3;
        v2 += 40;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

unsigned int *sub_1B21C36EC(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (a1[1])
  {
    if (*a1)
    {
      v2 = 0;
      v3 = 0;
      do
      {

        ++v3;
        v2 += 40;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

void sub_1B21C3754(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  double v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = 1.5;
  if (a3)
    v5 = 1.0;
  v6 = a1 + 4;
  v7 = (v5 * (double)(a1[1] + a2));
  v8 = (char *)malloc_type_malloc(40 * v7, 0xD5346062uLL);
  memset(v8, 255, 40 * v7);
  if (*a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &v8[v9];
      v12 = *((_QWORD *)a1 + 1) + v9;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = &v8[v9 + 16];
      sub_1B21C387C((unsigned int *)&v8[v9], (unsigned int *)v12);
      v13 = *(_QWORD *)(v12 + 32);
      *((_OWORD *)v11 + 1) = *(_OWORD *)(v12 + 16);
      *((_QWORD *)v11 + 4) = v13;
      if (v4 != v6)
        sub_1B21C36EC((unsigned int *)(*((_QWORD *)a1 + 1) + v9));
      ++v10;
      v9 += 40;
    }
    while (v10 < *a1);
  }
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v6)
    free(v4);
}

unsigned int *sub_1B21C387C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;

  if (a2 != a1)
  {
    if (a1[1])
    {
      if (*a1)
      {
        v4 = 0;
        v5 = 0;
        do
        {

          ++v5;
          v4 += 40;
        }
        while (v5 < *a1);
      }
      free(*((void **)a1 + 1));
      *((_QWORD *)a1 + 1) = a1 + 4;
    }
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v7 == a2 + 4)
    {
      v8 = v6;
      if ((_DWORD)v6)
      {
        v9 = a1 + 6;
        do
        {
          v10 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v9 - 1) = v10;
          v11 = *(_OWORD *)(v7 + 2);
          *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)(v7 + 5);
          *v9 = v11;
          v9 = (_OWORD *)((char *)v9 + 40);
          v7 += 10;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      *((_QWORD *)a1 + 1) = v7;
    }
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = a2 + 4;
  }
  return a1;
}

void sub_1B21C3950(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  double v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = 1.5;
  if (a3)
    v5 = 1.0;
  v6 = a1 + 4;
  v7 = (v5 * (double)(a1[1] + a2));
  v8 = (char *)malloc_type_malloc(40 * v7, 0xD5346062uLL);
  memset(v8, 255, 40 * v7);
  if (*a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &v8[v9];
      v12 = (uint64_t *)(*((_QWORD *)a1 + 1) + v9);
      v13 = *v12;
      *v12 = 0;
      *(_QWORD *)v11 = v13;
      v14 = *(_OWORD *)(v12 + 1);
      *(_OWORD *)(v11 + 20) = *(_OWORD *)((char *)v12 + 20);
      *(_OWORD *)(v11 + 8) = v14;
      if (v4 != v6)

      ++v10;
      v9 += 40;
    }
    while (v10 < *a1);
  }
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v6)
    free(v4);
}

uint64_t CFX::CrossFrameResourceManager::get(CFX::CrossFrameResourceManager *this, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;

  v2 = (*((_DWORD *)this + 7) - 1) & a2;
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 2) + 2 * v2);
  if (v3 < 2)
    return 0;
  while ((v3 & 2) == 0 || *(_QWORD *)(*(_QWORD *)this + 8 * v2) != a2)
  {
    ++v2;
    v4 = v3 >= 4;
    v3 >>= 1;
    if (!v4)
      return 0;
  }
  v6 = *((_QWORD *)this + 1);
  if (!v6)
    return 0;
  result = *(_QWORD *)(v6 + 8 * v2);
  *(_BYTE *)(result + 8) = 0;
  return result;
}

uint64_t CFX::CrossFrameResourceManager::set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  v4 = a3;
  sub_1B21C3B30(a1, a2, &v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B21C3B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B21C3B30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  __int16 *v13;
  uint64_t v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v6 + 15;
    if (v12 >= (int)v7 + 496)
      v12 = v7 + 496;
    if (v7 >= v12)
    {
      LODWORD(v14) = v7;
    }
    else
    {
      v13 = (__int16 *)(v8 + 2 * v7);
      LODWORD(v14) = v7;
      while (1)
      {
        v15 = *v13++;
        if ((v15 & 1) == 0)
          break;
        LODWORD(v14) = v14 + 1;
        if (v12 == (_DWORD)v14)
          goto LABEL_34;
      }
    }
    if ((_DWORD)v14 != v12)
    {
      *(_WORD *)(v8 + 2 * v14) |= 1u;
      if (v14 <= (int)v7 + 14)
      {
        v32 = v14;
LABEL_37:
        v33 = *(_QWORD *)(a1 + 8);
        v34 = *a3;
        *a3 = 0;
        *(_QWORD *)(v33 + 8 * v32) = v34;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = a2;
        v35 = *(_QWORD *)(a1 + 16);
        *(_WORD *)(v35 + 2 * v32) |= 1u;
        result = 1;
        *(_WORD *)(v35 + 2 * v7) |= 1 << (v14 - v7 + 1);
        ++*(_DWORD *)(a1 + 24);
        return result;
      }
      while (1)
      {
        v16 = v14;
        v17 = v14 - 14;
        if (v14 < 0xF)
          v17 = 0;
        v18 = v17 - 1;
        v19 = v17 <= v14 ? v14 : v17;
        v20 = 1;
        while (1)
        {
          v14 = v18 + 1;
          if (v17 <= v14)
            break;
LABEL_26:
          ++v20;
          v18 = v14;
          if ((_DWORD)v14 == v19)
            goto LABEL_33;
        }
        v21 = 1 << (v18 - v17 + 2);
        v22 = v20;
        v23 = v17;
        while (1)
        {
          v24 = v23;
          if (((unsigned __int16)v21 & *(_WORD *)(v8 + 2 * v23)) != 0)
            break;
          ++v23;
          LOWORD(v21) = (unsigned __int16)v21 >> 1;
          --v22;
          if ((int)v24 + 1 > v14)
            goto LABEL_26;
        }
        if (v14 >= v16)
          break;
        v25 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v14);
        v26 = *(_QWORD *)(v25 + 8 * v14);
        *(_QWORD *)(v25 + 8 * v14) = 0;
        *(_QWORD *)(v25 + 8 * v16) = v26;
        v27 = *(_QWORD *)(a1 + 8);
        v28 = *(_QWORD *)(v27 + 8 * v14);
        *(_QWORD *)(v27 + 8 * v14) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v8 = *(_QWORD *)(a1 + 16);
        *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v16 - v24 + 1))) ^ (1 << v22);
        if (v14 <= (int)v7 + 14)
        {
          v32 = v14;
          goto LABEL_37;
        }
      }
LABEL_33:
      *(_WORD *)(v8 + 2 * v16) ^= 1u;
    }
LABEL_34:
    sub_1B21C3F40(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *a3;
  *a3 = 0;
  result = *(_QWORD *)(v29 + 8 * v10);
  *(_QWORD *)(v29 + 8 * v10) = v30;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void CFX::CrossFrameResourceManager::nextFrame(CFX::CrossFrameResourceManager *this)
{
  int v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v20[256];

  v18 = 0x2000000000;
  v19 = v20;
  v1 = *((_DWORD *)this + 7);
  if (v1 != -15)
  {
    v3 = 0;
    do
    {
      if ((*(_WORD *)(*((_QWORD *)this + 2) + 2 * v3) & 1) != 0)
      {
        v4 = *(_QWORD *)this;
        v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v3);
        v6 = *(unsigned __int8 *)(v5 + 8);
        *(_BYTE *)(v5 + 8) = v6 + 1;
        if (v6 >= 0xA)
        {
          sub_1B17A7C40((uint64_t)&v18, (_QWORD *)(v4 + 8 * v3));
          v1 = *((_DWORD *)this + 7);
        }
      }
      ++v3;
    }
    while (v3 < (v1 + 15));
    if ((_DWORD)v18)
    {
      v7 = (char *)v19;
      v8 = (char *)v19 + 8 * v18;
      do
      {
        v9 = (*((_DWORD *)this + 7) - 1) & *(_QWORD *)v7;
        v10 = *((_QWORD *)this + 2);
        v11 = *(unsigned __int16 *)(v10 + 2 * v9);
        if (v11 >= 2)
        {
          v12 = 1;
          v13 = *(unsigned __int16 *)(v10 + 2 * v9);
          while (1)
          {
            if ((v13 & 2) != 0)
            {
              v14 = (v9 + v12 - 1);
              if (*(_QWORD *)v7 == *(_QWORD *)(*(_QWORD *)this + 8 * v14))
                break;
            }
            ++v12;
            v15 = v13 > 3;
            v13 >>= 1;
            if (!v15)
              goto LABEL_18;
          }
          *(_WORD *)(v10 + 2 * v9) = v11 ^ (1 << v12);
          *(_WORD *)(v10 + 2 * v14) ^= 1u;
          v16 = *((_QWORD *)this + 1);
          v17 = *(_QWORD *)(v16 + 8 * v14);
          *(_QWORD *)(v16 + 8 * v14) = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          --*((_DWORD *)this + 6);
        }
LABEL_18:
        v7 += 8;
      }
      while (v7 != v8);
    }
  }
  if (HIDWORD(v18))
  {
    if (v19 != v20)
      free(v19);
  }
}

void sub_1B21C3F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *a11)
{
  void *v11;

  if (a10)
  {
    if (a11 != v11)
      free(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21C3F40(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B17C8454(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        sub_1B21C3B30(a1, *v8, v7);
        v11 = *v7;
        *v7 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

BOOL CFX::RG::isCopyPass(CFX::RG *this, CFX::RG::Pass *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _BYTE *v4;
  BOOL v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 5);
  v3 = atomic_load((unsigned __int8 *)&qword_1EEFD40C0);
  v4 = &unk_1EEFD4000;
  if ((v3 & 1) == 0)
  {
    v9 = *((_QWORD *)this + 5);
    v8 = __cxa_guard_acquire(&qword_1EEFD40C0);
    v4 = &unk_1EEFD4000;
    v2 = v9;
    if (v8)
    {
      byte_1EEFD40B8 = 1;
      __cxa_guard_release(&qword_1EEFD40C0);
      v4 = (_BYTE *)&unk_1EEFD4000;
      v2 = v9;
    }
  }
  v5 = v4[184] == 0;
  v6 = 0x646F94B6FAFEAA7CLL;
  if (v5)
    v6 = 0;
  return v2 == v6;
}

__n128 CFX::RG::CopyPass::CopyPass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v7;
  unsigned __int8 v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = &unk_1EEFD4000;
  v8 = atomic_load((unsigned __int8 *)&qword_1EEFD40C0);
  if ((v8 & 1) == 0)
  {
    v13 = a3;
    v14 = a4;
    v15 = a2;
    v12 = __cxa_guard_acquire(&qword_1EEFD40C0);
    v7 = &unk_1EEFD4000;
    a4 = v14;
    a2 = v15;
    a3 = v13;
    if (v12)
    {
      byte_1EEFD40B8 = 1;
      __cxa_guard_release(&qword_1EEFD40C0);
      v7 = (_BYTE *)&unk_1EEFD4000;
      a4 = v14;
      a2 = v15;
      a3 = v13;
    }
  }
  if (v7[184])
    v9 = 0x646F94B6FAFEAA7CLL;
  else
    v9 = 0;
  CFX::RG::Pass::Pass(a1, a2, a3, a4, 0, v9, 0);
  *(_QWORD *)a1 = &off_1E63D0640;
  *(_QWORD *)(a1 + 360) = 0;
  result = *(__n128 *)a5;
  v11 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 384) = v11;
  *(_WORD *)(a1 + 400) = 0;
  return result;
}

void CFX::RG::CopyPass::execute(const CFX::RG::Resource **this, CFX::GPUResourceManager **a2, int a3, uint64_t a4)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  id v47;
  const CFX::RG::Resource *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  const char *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  id v86;
  const CFX::RG::Resource *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  id v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t ArrayElementType;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  BOOL v138;
  int v139;
  int v140;
  uint64_t v141;
  const char *v142;
  void *v143;
  const char *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  const char *v153;
  void *v154;
  const char *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t *v163;
  void *v164;
  const char *v165;
  unint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t i;
  unint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  _BOOL4 v188;
  uint64_t v189;
  _BOOL4 IsArray;
  unint64_t v191;
  void *v192;
  void *v193;
  _QWORD v194[3];
  _QWORD v195[3];
  _QWORD v196[3];
  _QWORD v197[3];
  id v198;
  id v199;
  _OWORD v200[3];
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 401))
  {
    if (a3 == 2)
    {
      CFX::GPUResourceManager::getTexture(a2[3], this[46]);
      v193 = (void *)objc_claimAutoreleasedReturnValue();
      CFX::GPUResourceManager::getTexture(a2[3], this[48]);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v62 = *((unsigned __int8 *)this + 344);
      if (v62 != 4)
      {
        if (v62 == 3)
        {
          objc_msgSend_setRenderPipelineState_(*(void **)(a4 + 8), v59, *((_QWORD *)this[45] + 2), v61);
          objc_msgSend_setFragmentTexture_atIndex_(*(void **)(a4 + 8), v97, (uint64_t)v193, 0);
          objc_msgSend_drawPrimitives_vertexStart_vertexCount_(*(void **)(a4 + 8), v98, 3, 0, 3);
        }
        else if (v62 == 2)
        {
          v63 = objc_msgSend_mipmapLevelCount(v193, v59, v60, v61);
          v67 = objc_msgSend_mipmapLevelCount(v21, v64, v65, v66);
          if (v63 >= v67)
            v68 = v67;
          else
            v68 = v63;
          v69 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, this[46]);
          if (VFXMTLTextureTypeIsCube(*(_QWORD *)(v69 + 24)))
            v71 = 6;
          else
            v71 = 1;
          objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_(*(void **)(a4 + 8), v70, (uint64_t)v193, (*((_DWORD *)this + 94) * v71), 0, v21, (*((_DWORD *)this + 98) * v71), 0, (*((_DWORD *)this + 99) * v71), v68);
        }
        goto LABEL_66;
      }
      v99 = CFX::GPUResourceManager::allocator(a2[3]);
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 40))(v99);
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      v100 = *(id *)(a4 + 8);
      objc_msgSend_setComputePipelineState_(v100, v101, *((_QWORD *)this[45] + 3), v102);
      v191 = objc_msgSend_maxTotalThreadsPerThreadgroup(*((void **)this[45] + 3), v103, v104, v105);
      if (*((_BYTE *)this + 400))
      {
        v109 = objc_msgSend_textureType(v193, v106, v107, v108);
        IsArray = VFXMTLTextureTypeIsArray(v109);
        v113 = objc_msgSend_textureType(v21, v110, v111, v112);
        v188 = VFXMTLTextureTypeIsArray(v113);
        v117 = objc_msgSend_textureType(v193, v114, v115, v116);
        ArrayElementType = VFXMTLTextureTypeGetArrayElementType(v117);
        v122 = objc_msgSend_textureType(v21, v119, v120, v121);
        v187 = VFXMTLTextureTypeGetArrayElementType(v122);
        v126 = objc_msgSend_mipmapLevelCount(v193, v123, v124, v125);
        v130 = objc_msgSend_mipmapLevelCount(v21, v127, v128, v129);
        v131 = v126 >= v130 ? v130 : v126;
        v189 = v131;
        if ((_DWORD)v131)
        {
          v132 = 0;
          do
          {
            if (VFXMTLTextureTypeIsCube(ArrayElementType))
              v136 = 6;
            else
              v136 = 1;
            v137 = (*((_DWORD *)this + 94) * v136);
            if (v132)
              v138 = 0;
            else
              v138 = (_DWORD)v137 == 0;
            v139 = !v138 || IsArray;
            if (v139 == 1)
            {
              v140 = *((_DWORD *)this + 99);
              v141 = objc_msgSend_pixelFormat(v193, v133, v134, v135);
              v143 = (void *)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v193, v142, v141, ArrayElementType, v132, 1, v137, (v140 * v136));
              objc_msgSend_setTexture_atIndex_(v100, v144, (uint64_t)v143, 0);

            }
            else
            {
              objc_msgSend_setTexture_atIndex_(v100, v133, (uint64_t)v193, 0);
            }
            if ((objc_msgSend_supportsReadWriteTextureCubeArguments(v192, v145, v146, v147) & 1) != 0)
            {
              if (v132)
                v151 = 1;
              else
                v151 = v188;
              if (v151 == 1)
              {
                v152 = objc_msgSend_pixelFormat(v21, v148, v149, v150);
                v154 = (void *)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v21, v153, v152, v187, v132, 1, (6 * *((_DWORD *)this + 98)), 6);
                objc_msgSend_setTexture_atIndex_(v100, v155, (uint64_t)v154, 1);

              }
              else
              {
                objc_msgSend_setTexture_atIndex_(v100, v148, (uint64_t)v21, 1);
              }
              v177 = objc_msgSend_threadExecutionWidth(*((void **)this[45] + 3), v156, v157, v158);
              v181 = objc_msgSend_width(v21, v178, v179, v180);
              v185 = objc_msgSend_height(v21, v182, v183, v184);
              v195[0] = v181;
              v195[1] = v185;
              v195[2] = 6;
              v194[0] = v177;
              v194[1] = v191 / v177;
              v194[2] = 1;
              objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v100, v186, (uint64_t)v195, (uint64_t)v194);
            }
            else
            {
              v159 = 0;
              memset(v200, 0, sizeof(v200));
              while (v159 != 6)
              {
                v160 = objc_msgSend_pixelFormat(v21, v148, v149, v150);
                v162 = objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v21, v161, v160, 2, v132, 1, (v159 + *((_DWORD *)this + 98)), 1);
                v163 = (uint64_t *)v200 + v159;
                v164 = (void *)*v163;
                *v163 = v162;

                objc_msgSend_setTexture_atIndex_(v100, v165, *v163, ++v159);
              }
              v166 = objc_msgSend_threadExecutionWidth(*((void **)this[45] + 3), v148, v149, v150);
              v170 = objc_msgSend_width(*(void **)&v200[0], v167, v168, v169);
              v174 = objc_msgSend_height(*(void **)&v200[0], v171, v172, v173);
              v197[0] = v170;
              v197[1] = v174;
              v197[2] = 6;
              v196[0] = v166;
              v196[1] = v191 / v166;
              v196[2] = 1;
              objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v100, v175, (uint64_t)v197, (uint64_t)v196);
              for (i = 40; i != -8; i -= 8)

            }
            ++v132;
          }
          while (v132 != v189);
        }
      }

      v22 = v192;
    }
    else
    {
      if (a3 != 1)
        return;
      v6 = *((unsigned __int8 *)this + 344);
      if (v6 == 4)
      {
        v72 = CFX::RG::Pass::hash((CFX::RG::Pass *)this);
        v73 = 0x9DDFEA08EB382D69 * (v72 ^ *((unsigned __int8 *)this + 344));
        v74 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v72 ^ (v73 >> 47) ^ v73)) ^ ((0x9DDFEA08EB382D69 * (v72 ^ (v73 >> 47) ^ v73)) >> 47));
        v75 = CFX::CrossFrameResourceManager::get(a2[4], v74);
        this[45] = (const CFX::RG::Resource *)v75;
        if (v75)
          return;
        this[45] = (const CFX::RG::Resource *)sub_1B21C4AC0(a2[4], v74);
        v76 = CFX::GPUResourceManager::allocator(a2[3]);
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = CFX::GPUResourceManager::allocator(a2[3]);
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 32))(v77);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (!*((_BYTE *)this + 400))
        {
LABEL_66:

          return;
        }
        if (objc_msgSend_supportsReadWriteTextureCubeArguments(v193, v78, v79, v80))
          v83 = objc_msgSend_newFunctionWithName_(v21, v81, (uint64_t)CFSTR("texturecube_copy_resample_kernel"), v82);
        else
          v83 = objc_msgSend_newFunctionWithName_(v21, v81, (uint64_t)CFSTR("texturecube_slices_copy_kernel"), v82);
        v198 = 0;
        v22 = (id)v83;
        v85 = objc_msgSend_newComputePipelineStateWithFunction_error_(v193, v84, v83, (uint64_t)&v198);
        v86 = v198;
        v87 = this[45];
        v88 = (void *)*((_QWORD *)v87 + 3);
        *((_QWORD *)v87 + 3) = v85;

        if (v86)
        {
          objc_msgSend_description(v86, v89, v90, v91);
          v92 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v96 = (const char *)objc_msgSend_UTF8String(v92, v93, v94, v95);
          printf("%s", v96);

          abort();
        }
      }
      else
      {
        if (v6 != 3)
          return;
        v7 = CFX::RG::Pass::hash((CFX::RG::Pass *)this);
        v8 = *(unsigned __int8 *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, this[46])+ 9);
        v9 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, this[48]);
        v10 = *(unsigned __int8 *)(v9 + 9);
        v11 = *(_QWORD *)(v9 + 16);
        v12 = 0x9DDFEA08EB382D69 * (v7 ^ *((unsigned __int8 *)this + 344));
        v13 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v7 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v12 >> 47) ^ v12)) >> 47));
        v14 = 0x9DDFEA08EB382D69
            * (v13 ^ ((0x9DDFEA08EB382D69 * (v13 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v13 ^ v11)));
        v15 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                              * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ v10)));
        v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
        v17 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v16 ^ ((0x9DDFEA08EB382D69 * (v16 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (v16 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ ((0x9DDFEA08EB382D69 * (v16 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (v16 ^ v8)))) >> 47));
        v18 = CFX::CrossFrameResourceManager::get(a2[4], v17);
        this[45] = (const CFX::RG::Resource *)v18;
        if (v18)
          return;
        this[45] = (const CFX::RG::Resource *)sub_1B21C4AC0(a2[4], v17);
        v19 = CFX::GPUResourceManager::allocator(a2[3]);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = CFX::GPUResourceManager::allocator(a2[3]);
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_alloc_init(MEMORY[0x1E0CC6B68]);
        v25 = (void *)objc_msgSend_newFunctionWithName_(v21, v23, (uint64_t)CFSTR("vfx_draw_fullscreen_triangle_vertex"), v24);
        objc_msgSend_setVertexFunction_(v22, v26, (uint64_t)v25, v27);

        if (v8 <= 1)
          v30 = objc_msgSend_newFunctionWithName_(v21, v28, (uint64_t)CFSTR("vfx_draw_fullscreen_fragment"), v29);
        else
          v30 = objc_msgSend_newFunctionWithName_(v21, v28, (uint64_t)CFSTR("vfx_draw_fullscreen_fragment_ms"), v29);
        v33 = (void *)v30;
        objc_msgSend_setFragmentFunction_(v22, v31, v30, v32);

        objc_msgSend_colorAttachments(v22, v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v37, v38, 0, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setPixelFormat_(v40, v41, v11, v42);

        objc_msgSend_setRasterSampleCount_(v22, v43, v10, v44);
        v199 = 0;
        v46 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v193, v45, (uint64_t)v22, (uint64_t)&v199);
        v47 = v199;
        v48 = this[45];
        v49 = (void *)*((_QWORD *)v48 + 2);
        *((_QWORD *)v48 + 2) = v46;

        if (v47)
        {
          objc_msgSend_description(v47, v50, v51, v52);
          v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v57 = (const char *)objc_msgSend_UTF8String(v53, v54, v55, v56);
          printf("%s", v57);

          abort();
        }
      }
    }

    goto LABEL_66;
  }
}

void sub_1B21C496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

_QWORD *sub_1B21C4AC0(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = &unk_1E63D0620;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t CFX::RG::CopyPass::init(const CFX::RG::Resource **this, CFX::GPUResourceManager **a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 IsCube;
  _BOOL4 v18;
  _BOOL4 v19;
  int IsDepth;
  uint64_t v21;
  CFX::RG::Resource *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;

  v4 = (unsigned __int16 *)CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, this[46]);
  v5 = (unsigned __int16 *)CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, this[48]);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (!v6)
  {
    v8 = *v4;
    v9 = v4[1];
    v10 = *((unsigned __int8 *)v4 + 9);
    v11 = *((_QWORD *)v4 + 3);
    v28 = *((_QWORD *)v4 + 2);
    v12 = *v5;
    v13 = v5[1];
    v14 = *((unsigned __int8 *)v5 + 9);
    v15 = *((_QWORD *)v5 + 3);
    VFXMTLTextureTypeGetArrayElementType(v11);
    VFXMTLTextureTypeGetArrayElementType(v15);
    if (VFXMTLTextureTypeIsCube(v11))
    {
      IsCube = VFXMTLTextureTypeIsCube(v15);
      *((_BYTE *)this + 400) = IsCube;
      if (IsCube)
      {
        *((_BYTE *)this + 344) = 4;
        CFX::RG::Pass::readFrom((uint64_t *)this, this[46]);
        CFX::RG::Pass::writeTo((uint64_t *)this, this[48]);
        return v7;
      }
    }
    else
    {
      *((_BYTE *)this + 400) = 0;
    }
    *((_BYTE *)this + 344) = 3;
    CFX::RG::Pass::allocInitDependentParams(this);
    v18 = v8 == v12 && v9 == v13;
    v19 = v14 < v10 && v18;
    IsDepth = VFXMTLTexturePixelFormatIsDepth(v28);
    v21 = CFX::RG::Resource::textureDesc(this[48]);
    if (!*(_BYTE *)(v21 + 140))
      *(_BYTE *)(v21 + 140) = 1;
    *(_DWORD *)(v21 + 136) = 84148994;
    v22 = this[46];
    if (v19)
    {
      v23 = IsDepth == 0;
      if (IsDepth)
        v24 = 0x200000001;
      else
        v24 = 0x100000001;
      if (IsDepth)
        v25 = 0x200000004;
      else
        v25 = 0x100000004;
      if (v23)
        v26 = 0;
      else
        v26 = -1;
      CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)v22, v24, v26);
      CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)this[48], v25, v26);
      *((_BYTE *)this + 401) = 1;
    }
    else
    {
      CFX::RG::Pass::readFrom((uint64_t *)this, v22);
      CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)this[48], 0x100000000, 0);
    }
  }
  return v7;
}

uint64_t CFX::RG::makeCopyPass(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;

  v4 = a2;
  return sub_1B21C4D20(a1, &v4, a3);
}

uint64_t sub_1B21C4D20(uint64_t *a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  sub_1B21C5994(v8[0], v5, v8, a2, a3);
  v8[0] = v6;
  sub_1B179C734(a1 + 18, v8);
  return v8[0];
}

CFX::RG::Pass *CFX::RG::makeCopyPass(CFX::RG::RenderGraphContext *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t *v5;
  CFX::RG::Pass *v6;
  uint64_t v8;

  v8 = a2;
  v5 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  v6 = (CFX::RG::Pass *)sub_1B21C4D20(v5, &v8, a3);
  CFX::RG::Pass::triggerInit(v6, a1);
  return v6;
}

CFX::RG::RenderGraphBuilder *CFX::RG::copyIfNeeded_r(CFX::RG *this, CFX::RG::RenderGraphBuilder *a2, CFX::RG::Resource *a3, CFX::RG::Pass *a4, const CFX::RG::TextureDescriptorReference *a5, const char *a6)
{
  CFX::RG::TextureDescriptorReference *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CFX::RG::Resource *v25;
  CFX::RG::Resource *v26;
  const char *v27;
  uint64_t *v28;
  __int128 v30;
  CFX::RG::Resource *v31;
  uint64_t v32;
  _OWORD v33[10];
  const char *v34;

  if (CFX::RG::Resource::isReference(a2))
    goto LABEL_29;
  v11 = (CFX::RG::TextureDescriptorReference *)CFX::RG::Resource::textureDesc(a2);
  *(_QWORD *)&v30 = CFX::RG::TextureDescriptorReference::baseReference(v11);
  v34 = (const char *)CFX::RG::TextureDescriptorReference::baseReference(a4);
  if (!CFX::RG::ResourceIdentifier::operator==(&v30, &v34))
    goto LABEL_29;
  v12 = (unsigned __int16 *)CFX::RG::Resource::constTextureDesc(a2);
  if (*((_BYTE *)v12 + 2) && *((_BYTE *)a4 + 2))
  {
    if (*v12 != *(unsigned __int16 *)a4)
      goto LABEL_29;
  }
  else if ((*((_BYTE *)v12 + 2) != 0) != (*((_BYTE *)a4 + 2) != 0))
  {
    goto LABEL_29;
  }
  v13 = CFX::RG::Resource::constTextureDesc(a2);
  if (*(_BYTE *)(v13 + 6) && *((_BYTE *)a4 + 6))
  {
    if (*(unsigned __int16 *)(v13 + 4) != *((unsigned __int16 *)a4 + 2))
      goto LABEL_29;
  }
  else if ((*(_BYTE *)(v13 + 6) != 0) != (*((_BYTE *)a4 + 6) != 0))
  {
    goto LABEL_29;
  }
  v14 = CFX::RG::Resource::constTextureDesc(a2);
  if (*(_BYTE *)(v14 + 32) && *((_BYTE *)a4 + 32))
  {
    if (*(_QWORD *)(v14 + 24) != *((_QWORD *)a4 + 3))
      goto LABEL_29;
LABEL_18:
    if (*(float *)(CFX::RG::Resource::constTextureDesc(a2) + 144) != *((float *)a4 + 36))
      goto LABEL_29;
    v15 = CFX::RG::Resource::constTextureDesc(a2);
    v16 = *(_BYTE *)(v15 + 19) ? *(_BYTE *)(v15 + 18) : 1;
    v17 = *((_BYTE *)a4 + 19) ? *((_BYTE *)a4 + 18) : 1;
    if (v16 != v17)
      goto LABEL_29;
    v18 = CFX::RG::Resource::constTextureDesc(a2);
    if (*(_BYTE *)(v18 + 48) && *((_BYTE *)a4 + 48))
    {
      if (*(_QWORD *)(v18 + 40) != *((_QWORD *)a4 + 5))
        goto LABEL_29;
    }
    else if ((*(_BYTE *)(v18 + 48) != 0) != (*((_BYTE *)a4 + 48) != 0))
    {
      goto LABEL_29;
    }
    return a2;
  }
  if ((*(_BYTE *)(v14 + 32) != 0) == (*((_BYTE *)a4 + 32) != 0))
    goto LABEL_18;
LABEL_29:
  v19 = CFX::RG::Resource::name(a2);
  v20 = *((_OWORD *)a4 + 7);
  v33[6] = *((_OWORD *)a4 + 6);
  v33[7] = v20;
  v21 = *((_OWORD *)a4 + 9);
  v33[8] = *((_OWORD *)a4 + 8);
  v33[9] = v21;
  v22 = *((_OWORD *)a4 + 3);
  v33[2] = *((_OWORD *)a4 + 2);
  v33[3] = v22;
  v23 = *((_OWORD *)a4 + 5);
  v33[4] = *((_OWORD *)a4 + 4);
  v33[5] = v23;
  v24 = *((_OWORD *)a4 + 1);
  v33[0] = *(_OWORD *)a4;
  v33[1] = v24;
  v25 = sub_1B17A34D0((uint64_t *)this, v19, v33);
  v26 = v25;
  v27 = "Resource copy";
  if (a5)
    v27 = (const char *)a5;
  *(_QWORD *)&v30 = a2;
  DWORD2(v30) = 0;
  v31 = v25;
  v32 = 0x100000000;
  v34 = v27;
  v28 = (uint64_t *)sub_1B21C4D20((uint64_t *)this, (uint64_t *)&v34, &v30);
  if (a3)
    CFX::RG::Pass::dependsOn(v28, a3);
  return v26;
}

BOOL CFX::RG::isAggregatePass(CFX::RG *this, CFX::RG::Pass *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 5);
  v3 = atomic_load((unsigned __int8 *)&qword_1EEFD40D0);
  v4 = &unk_1EEFD4000;
  if ((v3 & 1) == 0)
  {
    v7 = *((_QWORD *)this + 5);
    v6 = __cxa_guard_acquire(&qword_1EEFD40D0);
    v4 = &unk_1EEFD4000;
    v2 = v7;
    if (v6)
    {
      qword_1EEFD40C8 = 0x21ECCCB984E35749;
      __cxa_guard_release(&qword_1EEFD40D0);
      v4 = (_QWORD *)&unk_1EEFD4000;
      v2 = v7;
    }
  }
  return v2 == v4[25];
}

uint64_t CFX::RG::AggregatePass::AggregatePass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, char a7)
{
  uint64_t v8;
  unsigned __int8 v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v8 = a6;
  v12 = atomic_load((unsigned __int8 *)&qword_1EEFD40D0);
  if ((v12 & 1) == 0)
  {
    v17 = a7;
    v15 = a2;
    v16 = a3;
    v14 = __cxa_guard_acquire(&qword_1EEFD40D0);
    a2 = v15;
    a3 = v16;
    a7 = v17;
    v8 = a6;
    if (v14)
    {
      qword_1EEFD40C8 = sub_1B21C587C((unint64_t)"AGGREGATE_PASS", 0xEu);
      __cxa_guard_release(&qword_1EEFD40D0);
      a2 = v15;
      a3 = v16;
      a7 = v17;
      v8 = a6;
    }
  }
  CFX::RG::Pass::Pass(a1, a2, a3, (uint64_t)"", a7, qword_1EEFD40C8, v8);
  *(_QWORD *)a1 = &off_1E63CE7D8;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  sub_1B21B8C38(a1 + 360, a5);
  CFX::RG::AggregatePass::commonInit((CFX::RG::Pass *)a1, a4);
  return a1;
}

void sub_1B21C51C0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;
  uint64_t v2;

  sub_1B190D7C4(v2);
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t *CFX::RG::AggregatePass::commonInit(CFX::RG::Pass *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  CFX::RG::Resource *v10;
  uint64_t v11;
  uint64_t v12;
  CFX::RG::Resource **v13;
  uint64_t v14;
  CFX::RG::Resource *v15;
  uint64_t *v16;
  uint64_t v17;
  CFX::RG::Resource *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD v28[8];
  __n128 v29;

  v25 = a2;
  v26 = 0x800000000;
  v27 = v28;
  memset(v28, 0, sizeof(v28));
  v21 = a2;
  v22 = 0x800000000;
  v23 = &v24;
  v4 = *((unsigned int *)this + 94);
  if ((_DWORD)v4)
  {
    v5 = (unint64_t *)*((_QWORD *)this + 48);
    v6 = &v5[v4];
    do
    {
      v2 = *v5;
      if (*(_DWORD *)(*v5 + 72))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          sub_1B21B3598(&v21, (_QWORD *)(*(_QWORD *)(v2 + 80) + v7));
          ++v8;
          v7 += 8;
        }
        while (v8 < *(unsigned int *)(v2 + 72));
      }
      if (*(_DWORD *)(v2 + 168))
      {
        v9 = 0;
        do
        {
          v10 = *(CFX::RG::Resource **)(*(_QWORD *)(v2 + 176) + 8 * v9);
          v11 = CFX::RG::Pass::renderTargetInfo((CFX::RG::Pass *)v2, v10);
          if ((_DWORD)v26)
          {
            v12 = 16 * v26;
            v13 = (CFX::RG::Resource **)v27;
            while (v10 != *v13)
            {
              v13 += 2;
              v12 -= 16;
              if (!v12)
                goto LABEL_15;
            }
          }
          else
          {
            v13 = (CFX::RG::Resource **)v27;
          }
          if (v13 == (CFX::RG::Resource **)&v27[v26])
          {
LABEL_15:
            v29.n128_u64[0] = (unint64_t)v10;
            v29.n128_u64[1] = v11;
            sub_1B21B1624((uint64_t)&v25, &v29);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(v2 + 168));
      }
      ++v5;
    }
    while (v5 != v6);
    if ((_DWORD)v22)
    {
      v2 = (unint64_t)v23;
      v14 = 8 * v22;
      do
      {
        v15 = *(CFX::RG::Resource **)v2;
        v2 += 8;
        CFX::RG::Pass::readFrom((uint64_t *)this, v15);
        v14 -= 8;
      }
      while (v14);
    }
  }
  if ((_DWORD)v26)
  {
    v16 = (uint64_t *)v27 + 1;
    v17 = 16 * v26;
    do
    {
      v18 = (CFX::RG::Resource *)*(v16 - 1);
      v19 = *v16;
      if (*v16)
      {
        v2 = v2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v19 + 8);
        CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)v18, *(_QWORD *)v19, v2);
      }
      else
      {
        CFX::RG::Pass::writeTo((uint64_t *)this, v18);
      }
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return CFX::RG::AggregatePass::initializePassName(this);
}

void CFX::RG::AggregatePass::~AggregatePass(CFX::RG::AggregatePass *this)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E63CE7D8;
  v2 = (char *)this + 360;
  v3 = *((unsigned int *)this + 94);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 48);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      v7 = *(_QWORD **)(*v4 + 16);
      (**(void (***)(_QWORD))*v4)(*v4);
      v8 = v6;
      if (v7)
        sub_1B179C834(v7, &v8);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  sub_1B190D7C4((uint64_t)v2);
  CFX::RG::Pass::~Pass(this);
}

{
  CFX::RG::AggregatePass::~AggregatePass(this);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21C5464(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;
  uint64_t v2;

  sub_1B190D7C4(v2);
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::AggregatePass::execute(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(result + 376);
  if ((_DWORD)v4)
  {
    v8 = *(uint64_t **)(result + 384);
    v9 = 8 * v4;
    do
    {
      v10 = *v8++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2, a3, a4);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t *CFX::RG::AggregatePass::initializePassName(CFX::RG::AggregatePass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  size_t v17;
  __int128 v19;

  v2 = *((unsigned int *)this + 94);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (uint64_t *)*((_QWORD *)this + 48);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = strlen(*(const char **)(v6 + 24));
      if (v7)
        v8 = v7;
      else
        v8 = 7;
      v3 += v8 + 1;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
  }
  v19 = *(_OWORD *)((char *)this + 8);
  v9 = (const char *)sub_1B179C1C0(&v19, (int)v3 + 1, 1u);
  v10 = *((unsigned int *)this + 94);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = (uint64_t *)*((_QWORD *)this + 48);
    v13 = 8 * v10;
    do
    {
      v14 = *v12++;
      v15 = *(const char **)(v14 + 24);
      if (*v15)
        v16 = v15;
      else
        v16 = "Unnamed";
      v17 = strlcpy((char *)&v9[v11], v16, v3 + 1 - v11);
      v9[v17 + v11] = 124;
      v11 += v17 + 1;
      v13 -= 8;
    }
    while (v13);
  }
  *(_WORD *)&v9[v3 - 1] = 32;
  return CFX::RG::Pass::setAllocatedName((uint64_t *)this, v9);
}

BOOL CFX::RG::isPublishResourcePass(CFX::RG *this, CFX::RG::Pass *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 5);
  v3 = atomic_load((unsigned __int8 *)&qword_1EEFD40E0);
  v4 = &unk_1EEFD4000;
  if ((v3 & 1) == 0)
  {
    v7 = *((_QWORD *)this + 5);
    v6 = __cxa_guard_acquire(&qword_1EEFD40E0);
    v4 = &unk_1EEFD4000;
    v2 = v7;
    if (v6)
    {
      qword_1EEFD40D8 = 0xD6FB455A40EE7AC9;
      __cxa_guard_release(&qword_1EEFD40E0);
      v4 = (_QWORD *)&unk_1EEFD4000;
      v2 = v7;
    }
  }
  return v2 == v4[27];
}

uint64_t CFX::RG::AggregatePass::commonRenderParameters(CFX::RG::AggregatePass *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 48) + 32))(**((_QWORD **)this + 48));
}

_QWORD *CFX::RG::RegisterResourcePass::RegisterResourcePass(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  unsigned __int8 v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v18;

  v9 = a5;
  *a1 = &off_1E63CF6A0;
  v10 = atomic_load((unsigned __int8 *)&qword_1EEFD40E0);
  v11 = &unk_1EEFD4000;
  if ((v10 & 1) == 0)
  {
    v18 = __cxa_guard_acquire(&qword_1EEFD40E0);
    v11 = (_QWORD *)&unk_1EEFD4000;
    if (v18)
    {
      qword_1EEFD40D8 = sub_1B21C587C((unint64_t)"PUBLISH_PASS", 0xCu);
      __cxa_guard_release(&qword_1EEFD40E0);
      v11 = (_QWORD *)&unk_1EEFD4000;
    }
  }
  CFX::RG::Pass::Pass((uint64_t)a1, a2, a3, (uint64_t)"RegisterResource", 1, v11[27], (uint64_t)a1);
  *a1 = &off_1E63CF6A0;
  a1[45] = a4;
  a1[46] = 0;
  v15 = objc_msgSend_copy(v9, v12, v13, v14);
  v16 = (void *)a1[46];
  a1[46] = v15;

  return a1;
}

void sub_1B21C57A8(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  CFX::RG::Pass::~Pass((CFX::RG::Pass *)v2);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RegisterResourcePass::execute(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 1)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(result + 368) + 16))(*(_QWORD *)(result + 368), a2, *(_QWORD *)(result + 360));
  return result;
}

void sub_1B21C57F4(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21C5818(id *a1)
{

  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);
}

void sub_1B21C5840(id *a1)
{

  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);
  JUMPOUT(0x1B5E22E18);
}

unint64_t sub_1B21C587C(unint64_t result, unsigned int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * *(_QWORD *)result) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)result) >> 47))) ^ (0xC6A4A7935BD1E995 * a2));
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_9;
      case 2u:
        goto LABEL_8;
      case 3u:
        goto LABEL_7;
      case 4u:
        goto LABEL_6;
      case 5u:
        goto LABEL_5;
      case 6u:
        goto LABEL_4;
      case 7u:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 14) << 48;
LABEL_4:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 13) << 40;
LABEL_5:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 12) << 32;
LABEL_6:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 11) << 24;
LABEL_7:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 10) << 16;
LABEL_8:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 9) << 8;
LABEL_9:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *(unsigned __int8 *)(result + 8));
        break;
      default:
        return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
    }
    return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
  }
  return result;
}

uint64_t sub_1B21C5924(uint64_t a1)
{

  return a1;
}

void sub_1B21C5954(uint64_t a1)
{

  JUMPOUT(0x1B5E22E18);
}

double sub_1B21C5994(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _OWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  double result;
  _OWORD v14[2];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v8 = sub_1B179C1C0(v15, 0x198u, 8u);
  v9 = *a3;
  v10 = a3[1];
  v11 = *a4;
  v12 = a5[1];
  v14[0] = *a5;
  v14[1] = v12;
  *(_QWORD *)&result = CFX::RG::CopyPass::CopyPass(v8, v9, v10, v11, (uint64_t)v14).n128_u64[0];
  return result;
}

int *sub_1B21C59F8(vm_address_t *address, uint64_t a2)
{
  vm_size_t v3;
  int *result;

  v3 = ((*MEMORY[0x1E0C85AD8] - 1) | (a2 - 1)) + 1;
  result = (int *)vm_allocate(*MEMORY[0x1E0C83DA0], address, v3, 1);
  if ((_DWORD)result)
  {
    result = __error();
    *result = 12;
    *address = 0;
  }
  else
  {
    address[1] = v3;
  }
  return result;
}

int *sub_1B21C5A68(int *result, unint64_t a2)
{
  mach_vm_address_t *v3;
  mach_vm_address_t *v4;
  vm_map_t *v5;
  mach_vm_address_t *v6;
  mach_vm_size_t v7;

  v3 = (mach_vm_address_t *)result;
  *((_QWORD *)result + 2) = 0;
  v4 = (mach_vm_address_t *)*((_QWORD *)result + 3);
  v5 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (v4)
  {
    do
    {
      v6 = (mach_vm_address_t *)v4[3];
      mach_vm_deallocate(*v5, *v4, v4[1]);
      result = (int *)MEMORY[0x1B5E22E18](v4, 0x10A0C4064A2AE3FLL);
      v4 = v6;
    }
    while (v6);
  }
  v3[3] = 0;
  v3[4] = (mach_vm_address_t)v3;
  v7 = v3[1];
  if (v7 < a2)
  {
    mach_vm_deallocate(*v5, *v3, v7);
    return sub_1B21C59F8(v3, a2);
  }
  return result;
}

char *CScratchAllocatorAllocateAligned_0(_QWORD *a1, size_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  uint64_t v19;
  char *v20;

  v8 = 0;
  v9 = a3 - 1;
  v10 = -a3;
  v11 = a1;
  do
  {
    v12 = v11[1];
    v13 = v11[2];
    v14 = *v11 + v13;
    v15 = ((v9 + v14) & v10) - v14 + a2;
    if (v15 <= v12 - v13)
    {
      v20 = (char *)((v9 + v14) & v10);
      v11[2] = v15 + v13;
      return v20;
    }
    v8 += v12;
    v11 = (_QWORD *)v11[3];
  }
  while (v11);
  v16 = operator new();
  v17 = (_QWORD *)v16;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(a1[4] + 24) = v16;
  a1[4] = v16;
  v18 = (float)v8 * 0.5;
  if (a3 + a2 <= (unint64_t)v18)
    v19 = (unint64_t)v18;
  else
    v19 = a3 + a2;
  sub_1B21C59F8((vm_address_t *)v16, v19);
  v20 = (char *)((v9 + *v17 + v17[2]) & v10);
  v17[2] = &v20[a2 - *v17];
  if (a4 == 2)
  {
    memset(v20, 255, a2);
  }
  else if (a4 == 1)
  {
    bzero(v20, a2);
  }
  return v20;
}

int *CScratchAllocatorReset_0(uint64_t a1)
{
  unint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 24); i; i = *(_QWORD *)(i + 24))
    v1 += *(_QWORD *)(i + 8);
  return sub_1B21C5A68((int *)a1, v1);
}

uint64_t CScratchAllocatorCreate(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = v2;
  sub_1B21C59F8((vm_address_t *)v2, a1);
  return v2;
}

int *CScratchAllocatorDestroy(int *result)
{
  mach_vm_address_t *v1;

  if (result)
  {
    v1 = (mach_vm_address_t *)result;
    sub_1B21C5A68(result, 0);
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *v1, v1[1]);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

char *CScratchAllocatorAllocate(_QWORD *a1, size_t a2)
{
  return CScratchAllocatorAllocateAligned_0(a1, a2, 8, 2);
}

uint64_t CScratchAllocatorCapacity(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1;
  for (result = *(_QWORD *)(a1 + 8); ; result += *(_QWORD *)(v1 + 8))
  {
    v1 = *(_QWORD *)(v1 + 24);
    if (!v1)
      break;
  }
  return result;
}

uint64_t CScratchAllocatorSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1;
  for (result = *(_QWORD *)(a1 + 16); ; result += *(_QWORD *)(v1 + 16))
  {
    v1 = *(_QWORD *)(v1 + 24);
    if (!v1)
      break;
  }
  return result;
}

vm_address_t *CStackAllocatorCreate(int a1)
{
  vm_address_t *v2;
  uint64_t v3;
  vm_address_t *v4;
  vm_size_t v5;

  v2 = (vm_address_t *)operator new();
  bzero(v2, 0x238uLL);
  v3 = 6;
  do
  {
    v4 = &v2[v3];
    *v4 = 0;
    *((_DWORD *)v4 + 2) = 0;
    v3 += 2;
  }
  while (v4 + 2 != v2 + 70);
  *((_DWORD *)v2 + 140) = 0;
  v5 = ((*MEMORY[0x1E0C85AD8] - 1) | (a1 - 1)) + 1;
  *((_DWORD *)v2 + 4) = v5;
  vm_allocate(*MEMORY[0x1E0C83DA0], v2 + 1, v5, 1);
  *v2 = (vm_address_t)(v2 + 1);
  *((_DWORD *)v2 + 10) = *((_DWORD *)v2 + 4);
  return v2;
}

uint64_t CStackAllocatorDestroy(uint64_t a1)
{
  uint64_t result;

  result = sub_1B21C5E6C(a1, 0);
  if (a1)
    JUMPOUT(0x1B5E22E18);
  return result;
}

uint64_t sub_1B21C5E6C(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  vm_map_t *v6;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result != a2)
  {
    v5 = result + 8;
    v6 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    do
    {
      v7 = *(_QWORD *)(v4 + 16);
      result = mach_vm_deallocate(*v6, *(_QWORD *)v4, *(unsigned int *)(v4 + 8));
      if (v4 != v5)
        result = MEMORY[0x1B5E22E18](v4, 0x1030C40D5FA72FALL);
      v4 = v7;
    }
    while (v7 != a2);
  }
  *v3 = a2;
  return result;
}

void *CStackAllocatorAllocate(uint64_t a1, size_t a2)
{
  return CStackAllocatorAllocateAligned(a1, a2, 8, 2);
}

void *CStackAllocatorAllocateAligned(uint64_t a1, size_t a2, uint64_t a3, int a4)
{
  int v5;
  vm_address_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  vm_address_t *v14;
  vm_address_t *v15;
  int v16;
  vm_size_t v17;

  v5 = a3;
  v8 = *(_QWORD *)a1;
  v9 = a3 - 1;
  v10 = -a3;
  do
  {
    v11 = *(unsigned int *)(v8 + 12);
    v12 = *(_QWORD *)v8 + v11;
    v13 = (void *)((v9 + v12) & v10);
    if ((unint64_t)v13 + a2 - v12 <= (*(_DWORD *)(v8 + 8) - v11))
    {
      *(_DWORD *)(v8 + 12) = a2 + (_DWORD)v13 - *(_DWORD *)v8;
      goto LABEL_9;
    }
    v8 = *(_QWORD *)(v8 + 16);
  }
  while (v8);
  v14 = (vm_address_t *)operator new();
  v15 = v14;
  *v14 = 0;
  v14[1] = 0;
  v14[2] = *(_QWORD *)a1;
  *(_QWORD *)a1 = v14;
  if (*(_DWORD *)(a1 + 16) <= (v5 + a2))
    v16 = v5 + a2;
  else
    v16 = *(_DWORD *)(a1 + 16);
  v17 = ((v16 - 1) | (*MEMORY[0x1E0C85AD8] - 1)) + 1;
  *((_DWORD *)v14 + 2) = v17;
  vm_allocate(*MEMORY[0x1E0C83DA0], v14, v17, 1);
  *(_DWORD *)(a1 + 40) += v16;
  v13 = (void *)((v9 + *v15 + *((unsigned int *)v15 + 3)) & v10);
  *((_DWORD *)v15 + 3) = a2 + (_DWORD)v13 - *(_DWORD *)v15;
LABEL_9:
  if (a4 == 2)
  {
    memset(v13, 255, a2);
  }
  else if (a4 == 1)
  {
    bzero(v13, a2);
  }
  return v13;
}

void *CStackAllocatorAllocateZero(uint64_t a1, size_t a2)
{
  return CStackAllocatorAllocateAligned(a1, a2, 8, 2);
}

void *CStackAllocatorResizeLast(uint64_t a1, size_t a2)
{
  const void *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  void *Aligned;
  void *v8;
  BOOL v9;

  v2 = *(const void **)(a1 + 32);
  v3 = *(uint64_t **)a1;
  v4 = **(_QWORD **)a1;
  v5 = (_DWORD)v2 + a2 - v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 8) <= v5)
  {
    v6 = (v4 + *((_DWORD *)v3 + 3) - (_DWORD)v2);
    Aligned = CStackAllocatorAllocateAligned(a1, a2, 32, 2);
    v8 = Aligned;
    if (v2)
      v9 = v6 == 0;
    else
      v9 = 1;
    if (!v9)
      memcpy(Aligned, v2, v6);
    return v8;
  }
  else
  {
    *((_DWORD *)v3 + 3) = v5;
  }
  return (void *)v2;
}

void *CStackAllocatorReallocate(uint64_t a1, unint64_t a2, size_t a3, size_t a4, uint64_t a5)
{
  void *Aligned;
  void *v8;

  if (*(_QWORD *)(a1 + 32) == a2 && ((a5 - 1) & a2) == 0)
    return CStackAllocatorResizeLast(a1, a4);
  Aligned = CStackAllocatorAllocateAligned(a1, a4, a5, 2);
  v8 = Aligned;
  if (a2)
  {
    if (a3)
      memcpy(Aligned, (const void *)a2, a3);
  }
  return v8;
}

unsigned int *CStackAllocatorPushFrame(unsigned int *result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int *v3;

  v1 = result[140];
  if ((_DWORD)v1 != 31)
  {
    result[140] = v1 + 1;
    v2 = *(_DWORD *)(*(_QWORD *)result + 12);
    v3 = &result[4 * v1];
    *((_QWORD *)v3 + 6) = *(_QWORD *)result;
    v3[14] = v2;
  }
  return result;
}

uint64_t CStackAllocatorPopFrame(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  mach_vm_size_t v12;
  vm_map_t *v13;
  vm_size_t v14;

  v2 = *(_DWORD *)(a1 + 560) - 1;
  *(_DWORD *)(a1 + 560) = v2;
  v3 = a1 + 16 * v2;
  v6 = *(_QWORD *)(v3 + 48);
  v4 = v3 + 48;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 8);
  *(_DWORD *)(v6 + 12) = v7;
  v8 = a1 + 8;
  if (v7)
    v9 = 1;
  else
    v9 = v5 == v8;
  if (v9)
    v10 = v5;
  else
    v10 = *(_QWORD *)(v5 + 16);
  result = sub_1B21C5E6C(a1, v10);
  if (v5 == v8 && !*(_DWORD *)(v10 + 12))
  {
    v12 = *(unsigned int *)(v10 + 8);
    if (*(_DWORD *)(a1 + 40) > v12)
    {
      v13 = (vm_map_t *)MEMORY[0x1E0C83DA0];
      mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *(_QWORD *)v10, v12);
      v14 = ((*MEMORY[0x1E0C85AD8] - 1) | (*(_DWORD *)(a1 + 40) - 1)) + 1;
      *(_DWORD *)(v10 + 8) = v14;
      result = vm_allocate(*v13, (vm_address_t *)v10, v14, 1);
    }
  }
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t CStackAllocatorCapacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CStackAllocatorSize(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  if (!*a1)
    return 0;
  result = 0;
  do
  {
    result += *(unsigned int *)(v1 + 12);
    v1 = *(_QWORD *)(v1 + 16);
  }
  while (v1);
  return result;
}

uint64_t sub_1B21C62C4(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = result + 24;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1B21C62DC(uint64_t a1)
{
  sub_1B21C6960((unsigned int *)(a1 + 8));
  return a1;
}

id sub_1B21C6304(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  _BYTE v37[88];
  int v38;

  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = *((unsigned __int8 *)a2 + 8);
    v11 = *((unsigned __int8 *)a2 + 9);
    v12 = *((unsigned __int8 *)a2 + 10);
    v13 = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
    v15 = *((_QWORD *)a2 + 4);
    v16 = 96 * v3;
    while (*(unsigned __int16 *)(v5 + v4 + 8) != v6
         || *(unsigned __int16 *)(v5 + v4 + 10) != v7
         || *(unsigned __int16 *)(v5 + v4 + 12) != v8
         || *(unsigned __int16 *)(v5 + v4 + 14) != v9
         || *(unsigned __int8 *)(v5 + v4 + 16) != v10
         || *(unsigned __int8 *)(v5 + v4 + 17) != v11
         || *(unsigned __int8 *)(v5 + v4 + 18) != v12
         || *(_QWORD *)(v5 + v4 + 24) != v13
         || *(_QWORD *)(v5 + v4 + 32) != v14
         || *(_QWORD *)(v5 + v4 + 40) != v15
         || *(_QWORD *)(v5 + v4 + 48) != *((_QWORD *)a2 + 5)
         || *(_QWORD *)(v5 + v4 + 56) != *((_QWORD *)a2 + 6)
         || *(_QWORD *)(v5 + v4 + 64) != *((_QWORD *)a2 + 7)
         || *(_QWORD *)(v5 + v4 + 72) != *((_QWORD *)a2 + 8)
         || *(unsigned __int8 *)(v5 + v4 + 80) != *((unsigned __int8 *)a2 + 72)
         || *(unsigned __int8 *)(v5 + v4 + 81) != *((unsigned __int8 *)a2 + 73)
         || *(unsigned __int8 *)(v5 + v4 + 82) != *((unsigned __int8 *)a2 + 74)
         || *(unsigned __int8 *)(v5 + v4 + 83) != *((unsigned __int8 *)a2 + 75))
    {
      v4 += 96;
      if (v16 == v4)
        goto LABEL_22;
    }
    v22 = *(_QWORD *)(a1 + 16);
    v23 = v5 + v4;
    v18 = *(id *)(v5 + v4);
    *(_DWORD *)(v23 + 88) = 0;
    v25 = a1;
    v26 = *(_DWORD *)(a1 + 24);
    v27 = *(_QWORD *)(a1 + 16) + 96 * v26;
    if (v23 != v27 - 96)
    {
      v28 = v23 + 8;
      v29 = *(_QWORD *)(v22 + v4);
      *(_QWORD *)(v22 + v4) = 0;
      *(_OWORD *)&v37[32] = *(_OWORD *)(v28 + 32);
      *(_OWORD *)&v37[48] = *(_OWORD *)(v28 + 48);
      *(_OWORD *)&v37[64] = *(_OWORD *)(v28 + 64);
      *(_DWORD *)&v37[80] = *(_DWORD *)(v28 + 80);
      *(_OWORD *)v37 = *(_OWORD *)v28;
      *(_OWORD *)&v37[16] = *(_OWORD *)(v28 + 16);
      v30 = *(_QWORD *)(v27 - 96);
      *(_QWORD *)(v27 - 96) = 0;
      v31 = *(void **)(v22 + v4);
      *(_QWORD *)(v22 + v4) = v30;

      v32 = *(_OWORD *)(v27 - 72);
      *(_OWORD *)v28 = *(_OWORD *)(v27 - 88);
      *(_OWORD *)(v28 + 16) = v32;
      v33 = *(_OWORD *)(v27 - 56);
      v34 = *(_OWORD *)(v27 - 40);
      v35 = *(_OWORD *)(v27 - 24);
      *(_DWORD *)(v28 + 80) = *(_DWORD *)(v27 - 8);
      *(_OWORD *)(v28 + 48) = v34;
      *(_OWORD *)(v28 + 64) = v35;
      *(_OWORD *)(v28 + 32) = v33;
      v36 = *(void **)(v27 - 96);
      *(_QWORD *)(v27 - 96) = v29;

      *(_OWORD *)(v27 - 56) = *(_OWORD *)&v37[32];
      *(_OWORD *)(v27 - 40) = *(_OWORD *)&v37[48];
      *(_OWORD *)(v27 - 24) = *(_OWORD *)&v37[64];
      *(_DWORD *)(v27 - 8) = *(_DWORD *)&v37[80];
      *(_OWORD *)(v27 - 88) = *(_OWORD *)v37;
      *(_OWORD *)(v27 - 72) = *(_OWORD *)&v37[16];
      v26 = *(_DWORD *)(v25 + 24);
    }
    *(_DWORD *)(v25 + 24) = v26 - 1;
  }
  else
  {
LABEL_22:
    v17 = a1 + 8;
    (*(void (**)(_QWORD, unsigned __int16 *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)v37 = v18;
    v19 = *(_OWORD *)a2;
    *(_OWORD *)&v37[24] = *((_OWORD *)a2 + 1);
    v20 = *((_OWORD *)a2 + 3);
    *(_OWORD *)&v37[40] = *((_OWORD *)a2 + 2);
    *(_OWORD *)&v37[56] = v20;
    *(_OWORD *)&v37[72] = *((_OWORD *)a2 + 4);
    *(_OWORD *)&v37[8] = v19;
    v38 = 0;
    sub_1B21C6618(v17, (uint64_t *)v37);

  }
  return v18;
}

void sub_1B21C6600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

__n128 sub_1B21C6618(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B21C69C8((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
  }
  v5 = *(_QWORD *)(a1 + 8) + 96 * v4;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v5 = v6;
  v7 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v5 + 8) = v7;
  result = *(__n128 *)(a2 + 5);
  v9 = *(_OWORD *)(a2 + 7);
  v10 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(v5 + 88) = *((_DWORD *)a2 + 22);
  *(_OWORD *)(v5 + 72) = v10;
  *(_OWORD *)(v5 + 56) = v9;
  *(__n128 *)(v5 + 40) = result;
  ++*(_DWORD *)a1;
  return result;
}

void sub_1B21C66B0(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = (void **)(v7 + 96 * v5);
    v9 = 96 * v4 - 96 * v5;
    while (v8[v6 / 8] != v3)
    {
      v6 += 96;
      if (v9 == v6)
        goto LABEL_9;
    }
    if (v6)
    {
      v10 = &v8[v6 / 8];
      *v10 = 0;
      v22 = *(_OWORD *)&v8[v6 / 8 + 5];
      v23 = *(_OWORD *)&v8[v6 / 8 + 7];
      v24 = *(_OWORD *)&v8[v6 / 8 + 9];
      v25 = (int)v8[v6 / 8 + 11];
      v20 = *(_OWORD *)&v8[v6 / 8 + 1];
      v21 = *(_OWORD *)&v8[v6 / 8 + 3];
      v11 = *v8;
      *v8 = 0;
      v12 = *v10;
      *v10 = v11;
      v19 = v3;

      v13 = v7 + 96 * v5;
      v14 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)(v10 + 3) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v10 + 1) = v14;
      v15 = *(_OWORD *)(v13 + 40);
      v16 = *(_OWORD *)(v13 + 56);
      v17 = *(_OWORD *)(v13 + 72);
      *((_DWORD *)v10 + 22) = *(_DWORD *)(v13 + 88);
      *(_OWORD *)(v10 + 9) = v17;
      *(_OWORD *)(v10 + 7) = v16;
      *(_OWORD *)(v10 + 5) = v15;
      v18 = *v8;
      *v8 = v19;

      v3 = v19;
      *(_OWORD *)(v13 + 40) = v22;
      *(_OWORD *)(v13 + 56) = v23;
      *(_OWORD *)(v13 + 72) = v24;
      *(_DWORD *)(v13 + 88) = v25;
      *(_OWORD *)(v13 + 8) = v20;
      *(_OWORD *)(v13 + 24) = v21;
      v5 = *(_DWORD *)(a1 + 24);
    }
    *(_DWORD *)(a1 + 24) = v5 + 1;
  }
LABEL_9:

}

id *sub_1B21C67FC(id *result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v1 = (uint64_t)result;
  v3 = (uint64_t)(result + 1);
  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v4 = (uint64_t)result[2];
    v5 = v4 + 96 * v2;
    do
    {
      v6 = *(_DWORD *)(v4 + 88) + 1;
      *(_DWORD *)(v4 + 88) = v6;
      if (v6 <= 10 * *(_DWORD *)v1)
      {
        v4 += 96;
      }
      else
      {
        result = sub_1B21C6880(v3, (id *)v4);
        v4 = (uint64_t)result;
        v2 = *(_DWORD *)(v1 + 8);
        v5 = *(_QWORD *)(v1 + 16) + 96 * v2;
      }
    }
    while (v4 != v5);
  }
  *(_DWORD *)(v1 + 24) = v2;
  return result;
}

id *sub_1B21C6880(uint64_t a1, id *__dst)
{
  unsigned int v4;
  id *v5;

  if (*(_DWORD *)(a1 + 4))

  v4 = *(_DWORD *)a1 - 1;
  *(_DWORD *)a1 = v4;
  v5 = (id *)(*(_QWORD *)(a1 + 8) + 96 * v4);
  if (v5 != __dst)
    memmove(__dst, __dst + 12, (char *)v5 - (char *)__dst);
  return __dst;
}

void sub_1B21C68E0(uint64_t a1)
{
  sub_1B21C6908((unsigned int *)(a1 + 8));
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_1B21C6908(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (*a1)
  {
    v2 = 0;
    v3 = 0;
    do
    {

      ++v3;
      v2 += 96;
    }
    while (v3 < *a1);
  }
  *a1 = 0;
}

unsigned int *sub_1B21C6960(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (a1[1])
  {
    if (*a1)
    {
      v2 = 0;
      v3 = 0;
      do
      {

        ++v3;
        v2 += 96;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

void sub_1B21C69C8(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  double v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = 1.5;
  if (a3)
    v5 = 1.0;
  v6 = a1 + 4;
  v7 = (v5 * (double)(a1[1] + a2));
  v8 = (char *)malloc_type_malloc(96 * v7, 0xD5346062uLL);
  memset(v8, 255, 96 * v7);
  if (*a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &v8[v9];
      v12 = (uint64_t *)(*((_QWORD *)a1 + 1) + v9);
      v13 = *v12;
      *v12 = 0;
      *(_QWORD *)v11 = v13;
      v14 = *(_OWORD *)(v12 + 1);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 3);
      *(_OWORD *)(v11 + 8) = v14;
      v15 = *(_OWORD *)(v12 + 5);
      v16 = *(_OWORD *)(v12 + 7);
      v17 = *(_OWORD *)(v12 + 9);
      *((_DWORD *)v11 + 22) = *((_DWORD *)v12 + 22);
      *(_OWORD *)(v11 + 72) = v17;
      *(_OWORD *)(v11 + 56) = v16;
      *(_OWORD *)(v11 + 40) = v15;
      if (v4 != v6)

      ++v10;
      v9 += 96;
    }
    while (v10 < *a1);
  }
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v6)
    free(v4);
}

uint64_t RGContext.tryResolve(resource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = RGContextResolveTextureDescriptor(a2, a1);
  if (result)
  {
    v5 = *(_QWORD *)result;
    v6 = *(_OWORD *)(result + 16);
    v7 = *(_OWORD *)(result + 32);
    v8 = *(_OWORD *)(result + 48);
    v9 = *(_QWORD *)(result + 64);
    v10 = *(unsigned int *)(result + 72);
    v11 = 0x10000;
    if (!*(_BYTE *)(result + 10))
      v11 = 0;
    v12 = *(unsigned __int16 *)(result + 8) | (unint64_t)v11;
  }
  else
  {
    v5 = 0;
    v9 = 0;
    v10 = 0;
    v6 = 0uLL;
    v12 = 0x20000;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v12;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 64) = v9;
  *(_QWORD *)(a3 + 72) = v10;
  return result;
}

uint64_t RGContext.tryResolve(textureReference:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _OWORD v14[4];
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  result = RGContextTryResolveTextureDescriptor(a2, a1, &v13, v14);
  if (v13 == 1)
  {
    v5 = *(_QWORD *)&v14[0];
    v6 = v14[1];
    v7 = v14[2];
    v8 = v14[3];
    v9 = v15;
    v10 = v16;
    v11 = 0x10000;
    if (!BYTE10(v14[0]))
      v11 = 0;
    v12 = BYTE8(v14[0]) | ((unint64_t)BYTE9(v14[0]) << 8) | v11;
  }
  else
  {
    v5 = 0;
    v9 = 0;
    v10 = 0;
    v6 = 0uLL;
    v12 = 0x20000;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v12;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 64) = v9;
  *(_QWORD *)(a3 + 72) = v10;
  return result;
}

uint64_t RGResource.name.getter()
{
  RGResourceGetName();
  return sub_1B22288A8();
}

uint64_t RGBuilder.createBuffer(name:desc:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return RGBuilderCreateBuffer(a6, a1, a4, a5);
}

CFX::RG::Resource *RGBuilder.createTexture(name:desc:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  __int16 v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v5 = *((_WORD *)a4 + 4);
  v6 = a4[8];
  v7 = *((_BYTE *)a4 + 10) & 1;
  v10 = *a4;
  v11 = v5;
  v12 = v7;
  v8 = *((_OWORD *)a4 + 2);
  v13 = *((_OWORD *)a4 + 1);
  v14 = v8;
  v15 = *((_OWORD *)a4 + 3);
  v16 = v6;
  v17 = *((_DWORD *)a4 + 18);
  return RGBuilderCreateTexture(a5, a1, (uint64_t)&v10);
}

uint64_t RGBuilder.createTexture(name:desc:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B21C6E7C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))RGBuilderCreateTexture);
}

CFX::RG::Resource *RGBuilder.createExternalTexture(name:desc:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  __int16 v10;
  uint64_t v11;
  char v12;
  void *v13;
  CFX::RG::Resource *ExternalTexture;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t aBlock;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v10 = *((_WORD *)a4 + 4);
  v17 = *((_OWORD *)a4 + 2);
  v18 = *((_OWORD *)a4 + 1);
  v16 = *((_OWORD *)a4 + 3);
  v11 = a4[8];
  v12 = *((_BYTE *)a4 + 10) & 1;
  *(_QWORD *)&v22 = a5;
  *((_QWORD *)&v22 + 1) = a6;
  aBlock = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  *(_QWORD *)&v21 = sub_1B21C6E20;
  *((_QWORD *)&v21 + 1) = &unk_1E63FC2E8;
  v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  aBlock = *a4;
  LOWORD(v20) = v10;
  BYTE2(v20) = v12;
  v21 = v18;
  v22 = v17;
  v23 = v16;
  v24 = v11;
  v25 = *((_DWORD *)a4 + 18);
  ExternalTexture = RGBuilderCreateExternalTexture(a7, a1, (uint64_t)&aBlock, v13, 0);
  _Block_release(v13);
  return ExternalTexture;
}

id sub_1B21C6E20(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  void *v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = (void *)v1(v2);
  swift_release();
  return v3;
}

uint64_t sub_1B21C6E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B21C6E68()
{
  return swift_release();
}

uint64_t RGBuilder.createReference(name:reference:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B21C6E7C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))RGBuilderCreateReference);
}

uint64_t sub_1B21C6E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  return a6(a5, a1, a4);
}

uint64_t RGBuilder.createCopy(name:input:inputPass:expected:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B21C6F14(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))RGBuilderCreateCopy);
}

CFX::RG::RenderGraphBuilder *RGBuilder.createCopyIfNeeded(name:input:inputPass:expected:)(uint64_t a1, uint64_t a2, uint64_t a3, CFX::RG::RenderGraphBuilder *a4, CFX::RG::Resource *a5, uint64_t *a6, CFX::RG *a7)
{
  __int16 v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v12;
  __int16 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v7 = *((_WORD *)a6 + 4);
  v8 = a6[8];
  v9 = *((_BYTE *)a6 + 10) & 1;
  v12 = *a6;
  v13 = v7;
  v14 = v9;
  v10 = *((_OWORD *)a6 + 2);
  v15 = *((_OWORD *)a6 + 1);
  v16 = v10;
  v17 = *((_OWORD *)a6 + 3);
  v18 = v8;
  v19 = *((_DWORD *)a6 + 18);
  return RGBuilderCreateCopyIfNeeded(a7, a1, a4, a5, (uint64_t)&v12);
}

uint64_t RGBuilder.createCopyIfNeeded(name:input:inputPass:expected:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B21C6F14(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))RGBuilderCreateCopyIfNeeded);
}

uint64_t sub_1B21C6F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a8(a7, a1, a4, a5, a6);
}

uint64_t RGBufferSlice.length.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t RGBufferSlice.offset.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t RGBufferSlice.data.getter(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t result;

  if (a1)
  {
    v5 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v6 = a1;
    return (uint64_t)v5 + a3;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t RGGPUResourceManager.getBuffer(_:)(const CFX::RG::Resource *a1, CFX::GPUResourceManager *a2)
{
  uint64_t v3;
  id v4;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = 0;
  v5[0] = 0;
  v3 = 0;
  RGGPUResourceManagerGetBuffer(a2, a1, &v3, v5, &v4);
  return swift_unknownObjectRetain();
}

uint64_t RGTextureReferenceDescriptor.sizeFactor.setter(float a1)
{
  uint64_t *v1;

  return RGTextureReferenceDescriptorSetSizeFactor(*v1, a1);
}

uint64_t (*RGTextureReferenceDescriptor.sizeFactor.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = RGTextureReferenceDescriptorGetSizeFactor(*v1);
  return sub_1B21C70AC;
}

uint64_t sub_1B21C70AC(uint64_t a1)
{
  return RGTextureReferenceDescriptorSetSizeFactor(**(_QWORD **)a1, *(float *)(a1 + 8));
}

uint64_t RGTextureReferenceDescriptor.width.getter(uint64_t a1)
{
  return sub_1B21C71D8(a1, (uint64_t (*)(void))RGTextureReferenceDescriptorGetWidth);
}

uint64_t RGTextureReferenceDescriptor.width.setter(unsigned __int16 a1, char a2)
{
  return sub_1B21C721C(a1, a2, (uint64_t (*)(uint64_t, _QWORD))RGTextureReferenceDescriptorSetWidth, RGTextureReferenceDescriptorClearWidth);
}

uint64_t (*RGTextureReferenceDescriptor.width.modify(uint64_t a1))(unsigned __int16 *a1, char a2)
{
  uint64_t *v1;
  unsigned __int16 *Width;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  Width = (unsigned __int16 *)RGTextureReferenceDescriptorGetWidth(*v1);
  if (Width)
    v4 = *Width;
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = Width == 0;
  return sub_1B21C7130;
}

uint64_t sub_1B21C7130(unsigned __int16 *a1, char a2)
{
  return sub_1B21C729C(a1, a2, (uint64_t (*)(_QWORD, _QWORD))RGTextureReferenceDescriptorSetWidth, RGTextureReferenceDescriptorClearWidth);
}

uint64_t RGTextureReferenceDescriptor.height.getter(uint64_t a1)
{
  return sub_1B21C71D8(a1, (uint64_t (*)(void))RGTextureReferenceDescriptorGetHeight);
}

uint64_t RGTextureReferenceDescriptor.height.setter(unsigned __int16 a1, char a2)
{
  return sub_1B21C721C(a1, a2, (uint64_t (*)(uint64_t, _QWORD))RGTextureReferenceDescriptorSetHeight, RGTextureReferenceDescriptorClearHeight);
}

uint64_t (*RGTextureReferenceDescriptor.height.modify(uint64_t a1))(unsigned __int16 *a1, char a2)
{
  uint64_t *v1;
  unsigned __int16 *Height;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  Height = (unsigned __int16 *)RGTextureReferenceDescriptorGetHeight(*v1);
  if (Height)
    v4 = *Height;
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = Height == 0;
  return sub_1B21C71B8;
}

uint64_t sub_1B21C71B8(unsigned __int16 *a1, char a2)
{
  return sub_1B21C729C(a1, a2, (uint64_t (*)(_QWORD, _QWORD))RGTextureReferenceDescriptorSetHeight, RGTextureReferenceDescriptorClearHeight);
}

uint64_t RGTextureReferenceDescriptor.depth.getter(uint64_t a1)
{
  return sub_1B21C71D8(a1, (uint64_t (*)(void))RGTextureReferenceDescriptorGetDepth);
}

uint64_t sub_1B21C71D8(uint64_t a1, uint64_t (*a2)(void))
{
  unsigned __int16 *v2;

  v2 = (unsigned __int16 *)a2();
  if (v2)
    return *v2;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptor.depth.setter(unsigned __int16 a1, char a2)
{
  return sub_1B21C721C(a1, a2, (uint64_t (*)(uint64_t, _QWORD))RGTextureReferenceDescriptorSetDepth, RGTextureReferenceDescriptorClearDepth);
}

uint64_t sub_1B21C721C(unsigned __int16 a1, char a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  if ((a2 & 1) != 0)
    return a4(v6);
  else
    return a3(v6, a1);
}

uint64_t (*RGTextureReferenceDescriptor.depth.modify(uint64_t a1))(unsigned __int16 *a1, char a2)
{
  uint64_t *v1;
  unsigned __int16 *Depth;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  Depth = (unsigned __int16 *)RGTextureReferenceDescriptorGetDepth(*v1);
  if (Depth)
    v4 = *Depth;
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = Depth == 0;
  return sub_1B21C7288;
}

uint64_t sub_1B21C7288(unsigned __int16 *a1, char a2)
{
  return sub_1B21C729C(a1, a2, (uint64_t (*)(_QWORD, _QWORD))RGTextureReferenceDescriptorSetDepth, RGTextureReferenceDescriptorClearDepth);
}

uint64_t sub_1B21C729C(unsigned __int16 *a1, char a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD))
{
  _QWORD *v4;

  v4 = (_QWORD *)*((_QWORD *)a1 + 2);
  if ((a2 & 1) != 0)
  {
    if ((a1[4] & 1) != 0)
      return a4(*v4);
  }
  else if ((a1[4] & 1) != 0)
  {
    return a4(*v4);
  }
  return a3(*v4, *a1);
}

uint64_t RGTextureReferenceDescriptor.sampleCount.getter(uint64_t a1)
{
  unsigned __int8 *SampleCount;

  SampleCount = (unsigned __int8 *)RGTextureReferenceDescriptorGetSampleCount(a1);
  if (SampleCount)
    return *SampleCount;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptor.sampleCount.setter(unsigned __int8 a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  if ((a2 & 1) != 0)
    return RGTextureReferenceDescriptorClearSampleCount(v4);
  else
    return RGTextureReferenceDescriptorSetSampleCount(v4, a1);
}

uint64_t (*RGTextureReferenceDescriptor.sampleCount.modify(uint64_t a1))(unsigned __int8 *a1, char a2)
{
  uint64_t *v1;
  unsigned __int8 *SampleCount;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  SampleCount = (unsigned __int8 *)RGTextureReferenceDescriptorGetSampleCount(*v1);
  if (SampleCount)
    v4 = *SampleCount;
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = SampleCount == 0;
  return sub_1B21C7368;
}

uint64_t sub_1B21C7368(unsigned __int8 *a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)*((_QWORD *)a1 + 2);
  if ((a2 & 1) != 0)
  {
    if ((a1[8] & 1) != 0)
      return RGTextureReferenceDescriptorClearSampleCount(*v2);
  }
  else if ((a1[8] & 1) != 0)
  {
    return RGTextureReferenceDescriptorClearSampleCount(*v2);
  }
  return RGTextureReferenceDescriptorSetSampleCount(*v2, *a1);
}

uint64_t RGTextureReferenceDescriptor.pixelFormat.getter(uint64_t a1)
{
  uint64_t PixelFormat;

  PixelFormat = RGTextureReferenceDescriptorGetPixelFormat(a1);
  if (PixelFormat)
    return *(_QWORD *)PixelFormat;
  else
    return 0;
}

uint64_t RGTextureReferenceDescriptor.pixelFormat.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  if ((a2 & 1) != 0)
    return RGTextureReferenceDescriptorClearPixelFormat(v4);
  else
    return RGTextureReferenceDescriptorSetPixelFormat(v4, a1);
}

uint64_t (*RGTextureReferenceDescriptor.pixelFormat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  uint64_t *PixelFormat;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  PixelFormat = (uint64_t *)RGTextureReferenceDescriptorGetPixelFormat(*v1);
  if (PixelFormat)
    v4 = *PixelFormat;
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = PixelFormat == 0;
  return sub_1B21C7434;
}

uint64_t sub_1B21C7434(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      return RGTextureReferenceDescriptorClearPixelFormat(*v2);
  }
  else if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    return RGTextureReferenceDescriptorClearPixelFormat(*v2);
  }
  return RGTextureReferenceDescriptorSetPixelFormat(*v2, *(_QWORD *)a1);
}

void RGCrossFrameResourceManager.create<A>(_:with:)(uint64_t a1, uint64_t a2, CFX::CrossFrameResourceManager *a3, uint64_t a4)
{
  sub_1B21C74F0(a1, a2, a3, a4, (uint64_t)&unk_1E63FC320, (uint64_t)sub_1B21C7490, (uint64_t)&unk_1E63FC338);
}

{
  sub_1B21C74F0(a1, a2, a3, a4, (uint64_t)&unk_1E63FC370, (uint64_t)sub_1B21C7BA0, (uint64_t)&unk_1E63FC388);
}

uint64_t sub_1B21C7480()
{
  return swift_deallocObject();
}

uint64_t sub_1B21C7490()
{
  return sub_1B22290C4();
}

uint64_t sub_1B21C7498(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_1B21C74F0(uint64_t a1, uint64_t a2, CFX::CrossFrameResourceManager *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[6];

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B2229118();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v15, a4);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  aBlock[4] = a6;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B21C7498;
  aBlock[3] = a7;
  v18 = _Block_copy(aBlock);
  swift_release();
  RGCrossFrameResourceManagerCreate(a3, a1, v16, 0, v18);
  _Block_release(v18);
}

uint64_t sub_1B21C7620()
{
  return swift_deallocObject();
}

uint64_t _sSo27RGCrossFrameResourceManagera14VFXRenderGraphE3get_3keyxSgxm_SitlF_0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t Data;
  uint64_t v7;
  uint64_t v8;

  v5 = RGCrossFrameResourceManagerGet(a1);
  Data = RGCrossFrameResourceGetData(v5);
  v7 = *(_QWORD *)(a2 - 8);
  if (Data)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, Data, a2);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v8, 1, a2);
}

double sub_1B21C76A4()
{
  double result;
  uint64_t v1;
  __int16 v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  RGTextureDescriptorMakeDefault((uint64_t)&v1);
  result = *(double *)&v4;
  *(_QWORD *)&static RGTextureDescriptor.default = v1;
  WORD4(static RGTextureDescriptor.default) = v2;
  BYTE10(static RGTextureDescriptor.default) = v3;
  xmmword_1EEFD5968 = v4;
  xmmword_1EEFD5978 = v5;
  xmmword_1EEFD5988 = v6;
  *(_QWORD *)&xmmword_1EEFD5998 = v7;
  DWORD2(xmmword_1EEFD5998) = v8;
  return result;
}

__int128 *RGTextureDescriptor.default.unsafeMutableAddressor()
{
  if (qword_1EEFD40E8 != -1)
    swift_once();
  return &static RGTextureDescriptor.default;
}

double static RGTextureDescriptor.default.getter@<D0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  double result;

  if (qword_1EEFD40E8 != -1)
    swift_once();
  v2 = WORD4(static RGTextureDescriptor.default);
  v3 = BYTE10(static RGTextureDescriptor.default);
  v4 = xmmword_1EEFD5998;
  *(_QWORD *)a1 = static RGTextureDescriptor.default;
  *(_WORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 10) = v3;
  v5 = xmmword_1EEFD5978;
  *(_OWORD *)(a1 + 16) = xmmword_1EEFD5968;
  *(_OWORD *)(a1 + 32) = v5;
  result = *(double *)&xmmword_1EEFD5988;
  *(_OWORD *)(a1 + 48) = xmmword_1EEFD5988;
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 72) = DWORD2(xmmword_1EEFD5998);
  return result;
}

__n128 static RGTextureDescriptor.default.setter(uint64_t a1)
{
  __int128 v2;
  __n128 result;

  if (qword_1EEFD40E8 != -1)
    swift_once();
  v2 = *(_OWORD *)(a1 + 48);
  xmmword_1EEFD5978 = *(_OWORD *)(a1 + 32);
  xmmword_1EEFD5988 = v2;
  xmmword_1EEFD5998 = *(_OWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  static RGTextureDescriptor.default = *(_OWORD *)a1;
  xmmword_1EEFD5968 = (__int128)result;
  return result;
}

uint64_t (*static RGTextureDescriptor.default.modify())()
{
  if (qword_1EEFD40E8 != -1)
    swift_once();
  return nullsub_195;
}

__n128 RGTextureDescriptor.init()@<Q0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  RGTextureDescriptorMakeDefault((uint64_t)&v9);
  v2 = v10;
  v3 = v11;
  v4 = v15;
  result = v12;
  v6 = v13;
  v7 = v14;
  v8 = v16;
  *(_QWORD *)a1 = v9;
  *(_WORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 10) = v3;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 72) = v8;
  return result;
}

uint64_t RGTextureDescriptor.width.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

uint64_t RGTextureDescriptor.width.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*RGTextureDescriptor.width.modify(_QWORD *a1))(uint64_t result)
{
  unsigned __int16 *v1;

  *a1 = *v1;
  a1[1] = v1;
  return sub_1B21C7904;
}

uint64_t sub_1B21C7904(uint64_t result)
{
  **(_WORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t RGTextureDescriptor.height.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 2);
}

uint64_t RGTextureDescriptor.height.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 2) = result;
  return result;
}

_QWORD *(*RGTextureDescriptor.height.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(unsigned __int16 *)(v1 + 2);
  a1[1] = v1;
  return sub_1B21C7938;
}

_QWORD *sub_1B21C7938(_QWORD *result)
{
  *(_WORD *)(result[1] + 2) = *result;
  return result;
}

uint64_t RGTextureDescriptor.depth.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 4);
}

uint64_t RGTextureDescriptor.depth.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 4) = result;
  return result;
}

_QWORD *(*RGTextureDescriptor.depth.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(unsigned __int16 *)(v1 + 4);
  a1[1] = v1;
  return sub_1B21C796C;
}

_QWORD *sub_1B21C796C(_QWORD *result)
{
  *(_WORD *)(result[1] + 4) = *result;
  return result;
}

uint64_t RGTextureDescriptor.arrayLength.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 6);
}

uint64_t RGTextureDescriptor.arrayLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 6) = result;
  return result;
}

_QWORD *(*RGTextureDescriptor.arrayLength.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(unsigned __int16 *)(v1 + 6);
  a1[1] = v1;
  return sub_1B21C79A0;
}

_QWORD *sub_1B21C79A0(_QWORD *result)
{
  *(_WORD *)(result[1] + 6) = *result;
  return result;
}

uint64_t RGTextureDescriptor.mipmapLevelCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t RGTextureDescriptor.mipmapLevelCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

_QWORD *(*RGTextureDescriptor.mipmapLevelCount.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(unsigned __int8 *)(v1 + 8);
  a1[1] = v1;
  return sub_1B21C79D4;
}

_QWORD *sub_1B21C79D4(_QWORD *result)
{
  *(_BYTE *)(result[1] + 8) = *result;
  return result;
}

uint64_t RGTextureDescriptor.sampleCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t RGTextureDescriptor.sampleCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

_QWORD *(*RGTextureDescriptor.sampleCount.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(unsigned __int8 *)(v1 + 9);
  a1[1] = v1;
  return sub_1B21C7A08;
}

_QWORD *sub_1B21C7A08(_QWORD *result)
{
  *(_BYTE *)(result[1] + 9) = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RGBufferSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for RGBufferSlice()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for RGBufferSlice(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for RGBufferSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RGBufferSlice(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RGBufferSlice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RGBufferSlice()
{
  return &type metadata for RGBufferSlice;
}

_QWORD *sub_1B21C7BB8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *result = off_1E63CCD10;
  result[1] = v2;
  return result;
}

double sub_1B21C7BCC(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void sub_1B21C7C00(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)a1)
    sub_1B21C7C9C((_QWORD *)a1, *(_QWORD *)a1);
  sub_1B21FF5FC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && *(_BYTE *)(a1 + 56))
    sub_1B21FF5FC(v2);
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_1B21C7C68(uint64_t a1)
{
  sub_1B21C7C00(a1);
  sub_1B1810570(a1 + 64);
  sub_1B1810570(a1 + 32);
  return a1;
}

void sub_1B21C7C9C(_QWORD *a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 48))
  {
    sub_1B21C7C9C(a1, *(_QWORD *)(a2 + 40));
    sub_1B21C7C9C(a1, *(_QWORD *)(a2 + 48));
  }
  if (*a1 == a2)
    *a1 = 0;
  sub_1B21FF5FC(a1[1]);
  a1[1] = a2;
}

uint64_t sub_1B21C7CF8(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;

  v2 = a2;
  v3 = result;
  if (a2 < 0)
    v2 = *(_DWORD *)(result + 20);
  if (*(_QWORD *)result)
    v4 = v2 < 1;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v5 = *(_QWORD *)v3;
      v6 = *(_QWORD *)v3 + 48;
      if (*(_QWORD *)v6)
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(v5 + 32);
          if (v8 <= v5)
          {
            v8 = v5;
          }
          else
          {
            v9 = *(_QWORD *)(v8 + 48);
            v10 = *(_QWORD *)(v8 + 32);
            v11 = (unint64_t *)v3;
            if (v10)
              v11 = (unint64_t *)(v10 + 8 * (*(_QWORD *)(v10 + 48) == v8) + 40);
            v12 = *(_QWORD *)(v8 + 8 * (v9 != v5) + 40);
            *v11 = v5;
            *(_QWORD *)(v12 + 32) = v5;
            *(_QWORD *)(v8 + 32) = v5;
            *(_QWORD *)(v5 + 32) = v10;
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(v5 + 40);
            *(_QWORD *)(v8 + 48) = *(_QWORD *)v6;
            *(_QWORD *)(*(_QWORD *)(v5 + 40) + 32) = v8;
            *(_QWORD *)(*(_QWORD *)v6 + 32) = v8;
            *(_QWORD *)(v5 + 40 + 8 * (v9 == v5)) = v8;
            *(_QWORD *)(v5 + 40 + 8 * (v9 != v5)) = v12;
            v13 = *(_OWORD *)v8;
            v14 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v8 = *(_OWORD *)v5;
            *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 + 16);
            *(_OWORD *)v5 = v13;
            *(_OWORD *)(v5 + 16) = v14;
          }
          v15 = v8 + 8 * ((*(_DWORD *)(v3 + 24) >> v7) & 1);
          v7 = (v7 + 1) & 0x1F;
          v5 = *(_QWORD *)(v15 + 40);
          v6 = v5 + 48;
        }
        while (*(_QWORD *)(v5 + 48));
      }
      result = sub_1B21C7E30((uint64_t *)v3, (float32x4_t *)v5, -1);
      ++*(_DWORD *)(v3 + 24);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1B21C7E30(uint64_t *a1, float32x4_t *a2, int a3)
{
  uint64_t v6;

  v6 = sub_1B21C8154(a1, (uint64_t)a2);
  if (v6)
  {
    if (a3 < 0)
    {
      v6 = *a1;
    }
    else
    {
      for (; a3; --a3)
      {
        if (!*(_QWORD *)(v6 + 32))
          break;
        v6 = *(_QWORD *)(v6 + 32);
      }
    }
  }
  return sub_1B21C7F24((uint64_t)a1, v6, a2);
}

uint64_t sub_1B21C7E94(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v6 = sub_1B21FF5F0(64, 16);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
  }
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)v6 = *a2;
  *(_OWORD *)(v6 + 16) = a2[1];
  sub_1B21C7F24(a1, *(_QWORD *)a1, (float32x4_t *)v6);
  ++*(_DWORD *)(a1 + 20);
  return v6;
}

uint64_t sub_1B21C7F24(uint64_t result, uint64_t a2, float32x4_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  int8x16_t v8;
  int32x2_t v9;
  int8x16_t v10;
  int32x2_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float *v23;
  float v24;

  v4 = (_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = a2;
    v6 = *(float32x4_t **)(a2 + 48);
    if (v6)
    {
      v7 = vaddq_f32(*a3, a3[1]);
      do
      {
        v8 = (int8x16_t)vsubq_f32(v7, vaddq_f32(*(float32x4_t *)*(_QWORD *)(v5 + 40), *(float32x4_t *)(*(_QWORD *)(v5 + 40) + 16)));
        v9 = (int32x2_t)vabs_f32(*(float32x2_t *)v8.i8);
        v10 = (int8x16_t)vsubq_f32(v7, vaddq_f32(*v6, v6[1]));
        v11 = (int32x2_t)vabs_f32(*(float32x2_t *)v10.i8);
        *(float32x2_t *)v8.i8 = vadd_f32(vabs_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL))), vadd_f32((float32x2_t)vzip1_s32(v9, v11), (float32x2_t)vzip2_s32(v9, v11)));
        v5 = *(_QWORD *)(v5
                       + 40
                       + 8
                       * (*(_QWORD *)&vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), *(float32x2_t *)v8.i8)) & 1));
        v6 = *(float32x4_t **)(v5 + 48);
      }
      while (v6);
    }
    v12 = *(_QWORD *)(v5 + 32);
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      v4[1] = 0;
    }
    else
    {
      result = sub_1B21FF5F0(64, 16);
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
    }
    v13 = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = v12;
    do
    {
      v14 = a3->f32[v13 / 4];
      v15 = v5 + v13;
      if (v14 >= *(float *)(v5 + v13))
        v14 = *(float *)(v5 + v13);
      *(float *)(result + v13) = v14;
      v16 = a3[1].f32[v13 / 4];
      if (v16 <= *(float *)(v15 + 16))
        v16 = *(float *)(v15 + 16);
      *(float *)(result + v13 + 16) = v16;
      v13 += 4;
    }
    while (v13 != 12);
    if (v12)
    {
      *(_QWORD *)(v12 + 8 * (*(_QWORD *)(*(_QWORD *)(v5 + 32) + 48) == v5) + 40) = result;
      *(_QWORD *)(result + 40) = v5;
      *(_QWORD *)(v5 + 32) = result;
      *(_QWORD *)(result + 48) = a3;
      a3[2].i64[0] = result;
      do
      {
        v17 = v12;
        if (*(float *)v12 <= *(float *)result
          && *(float *)(v12 + 4) <= *(float *)(result + 4)
          && *(float *)(v12 + 8) <= *(float *)(result + 8)
          && *(float *)(v12 + 16) >= *(float *)(result + 16)
          && *(float *)(v12 + 20) >= *(float *)(result + 20)
          && *(float *)(v12 + 24) >= *(float *)(result + 24))
        {
          break;
        }
        v18 = 0;
        v19 = *(_QWORD *)(v12 + 40) + 16;
        v20 = *(_QWORD *)(v12 + 48) + 16;
        do
        {
          v21 = (float *)(v19 + v18);
          v22 = *(float *)(v19 + v18 - 16);
          v23 = (float *)(v20 + v18);
          if (v22 >= *(float *)(v20 + v18 - 16))
            v22 = *(float *)(v20 + v18 - 16);
          *(float *)(v12 + v18) = v22;
          v24 = *v21;
          if (*v21 <= *v23)
            v24 = *v23;
          *(float *)(v12 + v18 + 16) = v24;
          v18 += 4;
        }
        while (v18 != 12);
        v12 = *(_QWORD *)(v12 + 32);
        result = v17;
      }
      while (v12);
    }
    else
    {
      *(_QWORD *)(result + 40) = v5;
      *(_QWORD *)(v5 + 32) = result;
      *(_QWORD *)(result + 48) = a3;
      a3[2].i64[0] = result;
      *v4 = result;
    }
  }
  else
  {
    *(_QWORD *)result = a3;
    a3[2].i64[0] = 0;
  }
  return result;
}

uint64_t sub_1B21C8154(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  float *v13;
  float v14;

  if (*a1 == a2)
  {
    v4 = 0;
    *a1 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(__int128 **)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 8 * (*(_QWORD *)(v3 + 48) != a2) + 40);
    if (v4)
    {
      *((_QWORD *)v4 + (*((_QWORD *)v4 + 6) == v3) + 5) = v5;
      *(_QWORD *)(v5 + 32) = v4;
      sub_1B21FF5FC(a1[1]);
      a1[1] = v3;
      while (1)
      {
        v6 = 0;
        v8 = *v4;
        v7 = v4[1];
        v9 = *((_QWORD *)v4 + 5) + 16;
        v10 = *((_QWORD *)v4 + 6) + 16;
        do
        {
          v11 = (float *)(v9 + v6);
          v12 = *(float *)(v9 + v6 - 16);
          v13 = (float *)(v10 + v6);
          if (v12 >= *(float *)(v10 + v6 - 16))
            v12 = *(float *)(v10 + v6 - 16);
          *(float *)((char *)v4 + v6) = v12;
          v14 = *v11;
          if (*v11 <= *v13)
            v14 = *v13;
          *(float *)((char *)v4 + v6 + 16) = v14;
          v6 += 4;
        }
        while (v6 != 12);
        if (*(float *)&v8 == *(float *)v4
          && *((float *)&v8 + 1) == *((float *)v4 + 1)
          && *((float *)&v8 + 2) == *((float *)v4 + 2)
          && *(float *)&v7 == *((float *)v4 + 4)
          && *((float *)&v7 + 1) == *((float *)v4 + 5)
          && *((float *)&v7 + 2) == *((float *)v4 + 6))
        {
          break;
        }
        v4 = (__int128 *)*((_QWORD *)v4 + 4);
        if (!v4)
          return *a1;
      }
    }
    else
    {
      *a1 = v5;
      *(_QWORD *)(v5 + 32) = 0;
      sub_1B21FF5FC(a1[1]);
      a1[1] = v3;
      return *a1;
    }
  }
  return (uint64_t)v4;
}

uint64_t sub_1B21C82A8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;

  v6 = sub_1B21C8154((uint64_t *)a1, a2);
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v7 < 0)
    {
      v6 = *(_QWORD *)a1;
    }
    else
    {
      for (; v7; --v7)
      {
        if (!*(_QWORD *)(v6 + 32))
          break;
        v6 = *(_QWORD *)(v6 + 32);
      }
    }
  }
  *(_OWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 16) = a3[1];
  return sub_1B21C7F24(a1, v6, (float32x4_t *)a2);
}

uint64_t sub_1B21C8320(uint64_t a1, float *a2, float32x4_t *a3, uint64_t a4, int32x2_t a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float v11;
  int8x16_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;

  if (*a2 <= a3->f32[0]
    && a2[1] <= a3->f32[1]
    && a2[2] <= a3->f32[2]
    && a2[4] >= a3[1].f32[0]
    && a2[5] >= a3[1].f32[1]
    && a2[6] >= a3[1].f32[2])
  {
    return 0;
  }
  v8 = (float32x4_t)vdupq_lane_s32(a5, 0);
  v8.i32[3] = 0;
  v9 = a3[1];
  v10 = (int8x16_t)vsubq_f32(*a3, v8);
  v12 = (int8x16_t)vaddq_f32(v8, v9);
  *a3 = (float32x4_t)v10;
  a3[1] = (float32x4_t)v12;
  v9.i32[0] = *(_DWORD *)a4;
  a8.i32[0] = 0;
  v11 = *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v9, a8), v12, v10).i32;
  v12.i32[0] = v12.i32[2];
  a3[*(float *)a4 > 0.0].f32[0] = *(float *)a4 + v11;
  v13 = *(float *)(a4 + 4);
  if (v13 <= 0.0)
    v14 = *(float *)&v10.i32[1];
  else
    v14 = *(float *)&v12.i32[1];
  v15 = 1;
  if (v13 > 0.0)
    v15 = 5;
  a3->f32[v15] = v14 + v13;
  v16 = *(float *)(a4 + 8);
  if (v16 <= 0.0)
    v12.i32[0] = v10.i32[2];
  v17 = 2;
  if (v16 > 0.0)
    v17 = 6;
  a3->f32[v17] = *(float *)v12.i32 + v16;
  sub_1B21C82A8(a1, (uint64_t)a2, a3);
  return 1;
}

void sub_1B21C842C(uint64_t a1, uint64_t a2)
{
  sub_1B21C8154((uint64_t *)a1, a2);
  sub_1B21FF5FC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = a2;
  --*(_DWORD *)(a1 + 20);
}

uint64_t sub_1B21C846C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_1B21C8478()
{
  return 1;
}

uint64_t sub_1B21C8480()
{
  return 1;
}

uint64_t sub_1B21C8488(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t i;

  *(_QWORD *)a1 = &off_1E63CC540;
  v4 = (_QWORD *)(a1 + 200);
  for (i = 8; i != 200; i += 96)
    sub_1B21C7BCC(a1 + i);
  *(_WORD *)(a1 + 285) = 256;
  *(_BYTE *)(a1 + 284) = a2 == 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_1B22C9F40;
  *(_OWORD *)(a1 + 252) = xmmword_1B2246910;
  *(_DWORD *)(a1 + 268) = 0;
  if (!a2)
  {
    a2 = sub_1B21FF5F0(128, 16);
    sub_1B21CA0B4();
  }
  *(_QWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  return a1;
}

uint64_t sub_1B21C8544(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E63CC540;
  if (*(_BYTE *)(a1 + 284))
  {
    (***(void (****)(_QWORD))(a1 + 224))(*(_QWORD *)(a1 + 224));
    sub_1B21FF5FC(*(_QWORD *)(a1 + 224));
  }
  for (i = 104; i != -88; i -= 96)
    sub_1B21C7C68(a1 + i);
  return a1;
}

void sub_1B21C85AC(uint64_t a1)
{
  sub_1B21C8544(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21C85D0(uint64_t a1, _OWORD *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  __int128 v23[2];

  v15 = sub_1B21FF5F0(112, 16);
  *(_QWORD *)v15 = a5;
  *(_QWORD *)(v15 + 8) = a6;
  *(_QWORD *)(v15 + 16) = a7;
  *(_QWORD *)(v15 + 24) = a8;
  *(_OWORD *)(v15 + 48) = *a2;
  *(_OWORD *)(v15 + 64) = *a3;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 96) = 0;
  v16 = *a3;
  v23[0] = *a2;
  v23[1] = v16;
  *(_DWORD *)(v15 + 104) = *(_DWORD *)(a1 + 236);
  v17 = *(_DWORD *)(a1 + 280) + 1;
  *(_DWORD *)(a1 + 280) = v17;
  *(_DWORD *)(v15 + 40) = v17;
  *(_QWORD *)(v15 + 80) = sub_1B21C7E94(a1 + 8, v23, v15);
  v18 = a1 + 8 * *(int *)(a1 + 236);
  *(_QWORD *)(v15 + 88) = 0;
  v20 = *(_QWORD *)(v18 + 200);
  v19 = v18 + 200;
  *(_QWORD *)(v15 + 96) = v20;
  if (*(_QWORD *)v19)
    *(_QWORD *)(*(_QWORD *)v19 + 88) = v15;
  *(_QWORD *)v19 = v15;
  if (!*(_BYTE *)(a1 + 285))
  {
    v22[0] = &off_1E63CC968;
    v22[1] = a1;
    v22[2] = v15;
    sub_1B21C86F8(a1 + 8, *(_QWORD *)(a1 + 8), v23, (uint64_t)v22);
    sub_1B21C86F8(a1 + 104, *(_QWORD *)(a1 + 104), v23, (uint64_t)v22);
  }
  return v15;
}

void sub_1B21C86F8(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  if (a2)
  {
    v24 = a3[1];
    v25 = *a3;
    v6 = (_QWORD *)sub_1B21FF5F0(512, 16);
    v8 = *(float *)&v24;
    v7 = *(float *)&v25;
    v9 = (uint64_t)v6;
    *v6 = a2;
    v10 = 1;
    v11 = 64;
    while (1)
    {
      v12 = (v10 - 1);
      v13 = *(_QWORD *)(v9 + 8 * v12);
      if (*(float *)v13 > v8
        || *(float *)(v13 + 16) < v7
        || *(float *)(v13 + 4) > *((float *)&v24 + 1)
        || *(float *)(v13 + 20) < *((float *)&v25 + 1)
        || *(float *)(v13 + 8) > *((float *)&v24 + 2)
        || *(float *)(v13 + 24) < *((float *)&v25 + 2))
      {
        goto LABEL_40;
      }
      if (*(_QWORD *)(v13 + 48))
        break;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 24))(a4, *(_QWORD *)(v9 + 8 * v12));
      v8 = *(float *)&v24;
      v7 = *(float *)&v25;
LABEL_40:
      v10 = v12;
      if ((int)v12 <= 0)
      {
        sub_1B21FF5FC(v9);
        return;
      }
    }
    if ((_DWORD)v12 == (_DWORD)v11
      && (!(_DWORD)v11 ? (v14 = 1) : (v14 = (2 * v11)), (int)v11 < (int)v14))
    {
      if ((_DWORD)v14)
        v15 = sub_1B21FF5F0(8 * v14, 16);
      else
        v15 = 0;
      if (v10 >= 2)
      {
        v16 = v11;
        v17 = (_QWORD *)v15;
        v18 = (uint64_t *)v9;
        do
        {
          v19 = *v18++;
          *v17++ = v19;
          --v16;
        }
        while (v16);
      }
      sub_1B21FF5FC(v9);
      v8 = *(float *)&v24;
      v7 = *(float *)&v25;
    }
    else
    {
      v14 = v11;
      v15 = v9;
    }
    *(_QWORD *)(v15 + 8 * v12) = *(_QWORD *)(v13 + 40);
    if ((_DWORD)v10 == (_DWORD)v14)
    {
      if ((_DWORD)v10)
        v11 = (2 * v10);
      else
        v11 = 1;
      if ((int)v10 < (int)v11)
      {
        if ((_DWORD)v11)
          v9 = sub_1B21FF5F0(8 * (int)v11, 16);
        else
          v9 = 0;
        if ((int)v10 >= 1)
        {
          v20 = v10;
          v21 = (_QWORD *)v9;
          v22 = (uint64_t *)v15;
          do
          {
            v23 = *v22++;
            *v21++ = v23;
            --v20;
          }
          while (v20);
        }
        sub_1B21FF5FC(v15);
        v8 = *(float *)&v24;
        v7 = *(float *)&v25;
        goto LABEL_39;
      }
      v11 = v10;
    }
    else
    {
      v11 = v14;
    }
    v9 = v15;
LABEL_39:
    *(_QWORD *)(v9 + 8 * (int)v10) = *(_QWORD *)(v13 + 48);
    v12 = (v10 + 1);
    goto LABEL_40;
  }
}

void sub_1B21C8918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_DWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 80);
  if (v6 == 2)
    v8 = a1 + 104;
  else
    v8 = a1 + 8;
  sub_1B21C842C(v8, v7);
  v9 = (_QWORD *)(a1 + 8 * *(int *)(a2 + 104) + 200);
  v10 = *(_QWORD *)(a2 + 88);
  if (v10)
    v9 = (_QWORD *)(v10 + 96);
  *v9 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 96);
  if (v11)
    *(_QWORD *)(v11 + 88) = *(_QWORD *)(a2 + 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 224) + 32))(*(_QWORD *)(a1 + 224), a2, a3);
  sub_1B21FF5FC(a2);
  *(_BYTE *)(a1 + 286) = 1;
}

__n128 sub_1B21C89B8(uint64_t a1, uint64_t a2, _OWORD *a3, __n128 *a4)
{
  __n128 result;

  *a3 = *(_OWORD *)(a2 + 48);
  result = *(__n128 *)(a2 + 64);
  *a4 = result;
  return result;
}

void sub_1B21C89CC(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6)
{
  float *v12;
  unsigned int *v13;
  _QWORD v14[2];

  v14[0] = &off_1E63CCB78;
  v14[1] = a4;
  v12 = (float *)(a4 + 16);
  v13 = (unsigned int *)(a4 + 32);
  sub_1B21C8A90(a1 + 8, *(_QWORD *)(a1 + 8), a2, *(float *)(a4 + 44), a3, (float *)(a4 + 16), (unsigned int *)(a4 + 32), a5, a6, (uint64_t)v14);
  sub_1B21C8A90(a1 + 104, *(_QWORD *)(a1 + 104), a2, *(float *)(a4 + 44), a3, v12, v13, a5, a6, (uint64_t)v14);
}

void sub_1B21C8A90(uint64_t a1, uint64_t a2, float *a3, float a4, uint64_t a5, float *a6, unsigned int *a7, float32x4_t *a8, float32x4_t *a9, uint64_t a10)
{
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t *v61;
  _OWORD v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v17 = *(int *)(a1 + 68);
    if ((int)v17 <= 127)
    {
      if (*(int *)(a1 + 72) <= 127)
      {
        v18 = a8;
        v19 = sub_1B21FF5F0(1024, 16);
        v20 = v19;
        v21 = *(unsigned int *)(a1 + 68);
        if ((int)v21 >= 1)
        {
          v22 = 0;
          v23 = 8 * v21;
          do
          {
            *(_QWORD *)(v19 + v22) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v22);
            v22 += 8;
          }
          while (v23 != v22);
        }
        v24 = *(_QWORD *)(a1 + 80);
        a8 = v18;
        if (v24 && *(_BYTE *)(a1 + 88))
        {
          sub_1B21FF5FC(v24);
          a8 = v18;
        }
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = v20;
        *(_DWORD *)(a1 + 72) = 128;
      }
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v17++) = 0;
      while ((_DWORD)v17 != 128);
    }
    *(_DWORD *)(a1 + 68) = 128;
    **(_QWORD **)(a1 + 80) = a2;
    v25 = 126;
    LODWORD(v26) = 1;
    v61 = a9;
    while (1)
    {
      v27 = (int)v26;
      v26 = (int)v26 - 1;
      v28 = *(_QWORD *)(a1 + 80);
      v29 = *(float32x4_t **)(v28 + 8 * v26);
      v30 = vsubq_f32(*v29, *a9);
      v30.i32[3] = 0;
      v31 = vsubq_f32(v29[1], *a8);
      v31.i32[3] = 0;
      v62[0] = v30;
      v62[1] = v31;
      v32 = *a7;
      v33 = a7[1];
      v34 = a3[1];
      v35 = a6[1];
      v36 = (float)(*(float *)&v62[v32] - *a3) * *a6;
      v37 = *a6 * (float)(*(float *)&v62[(1 - v32)] - *a3);
      v38 = (float)(*((float *)&v62[v33] + 1) - v34) * v35;
      v39 = v35 * (float)(*((float *)&v62[(1 - v33)] + 1) - v34);
      if (v36 > v39 || v38 > v37)
        goto LABEL_44;
      if (v38 > v36)
        v36 = v38;
      if (v39 < v37)
        v37 = v39;
      v41 = a7[2];
      v42 = a3[2];
      v43 = a6[2];
      v44 = (float)(*((float *)&v62[v41] + 2) - v42) * v43;
      v45 = v43 * (float)(*((float *)&v62[(1 - v41)] + 2) - v42);
      if (v36 > v45 || v44 > v37)
        goto LABEL_44;
      if (v44 <= v36)
        v44 = v36;
      v47 = v45 >= v37 ? v37 : v45;
      if (v44 >= a4 || v47 <= 0.0)
        goto LABEL_44;
      if (v29[3].i64[0])
      {
        if ((int)v26 > (int)v25)
        {
          v48 = *(int *)(a1 + 68);
          v49 = 2 * v48;
          if ((int)v48 < 2 * (int)v48)
          {
            if (*(_DWORD *)(a1 + 72) < v49)
            {
              v60 = a8;
              if ((_DWORD)v48)
              {
                v50 = sub_1B21FF5F0(16 * v48, 16);
                v51 = v50;
                v52 = *(unsigned int *)(a1 + 68);
                if ((int)v52 >= 1)
                {
                  v53 = 0;
                  v54 = 8 * v52;
                  do
                  {
                    *(_QWORD *)(v50 + v53) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v53);
                    v53 += 8;
                  }
                  while (v54 != v53);
                }
                a8 = v60;
              }
              else
              {
                v51 = 0;
              }
              v58 = *(_QWORD *)(a1 + 80);
              if (v58 && *(_BYTE *)(a1 + 88))
              {
                v59 = v51;
                sub_1B21FF5FC(v58);
                v51 = v59;
                a8 = v60;
              }
              *(_BYTE *)(a1 + 88) = 1;
              *(_QWORD *)(a1 + 80) = v51;
              v49 = 2 * v48;
              *(_DWORD *)(a1 + 72) = 2 * v48;
            }
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v48++) = 0;
            while (v49 != v48);
            v28 = *(_QWORD *)(a1 + 80);
          }
          *(_DWORD *)(a1 + 68) = v49;
          v25 = (v49 - 2);
          a9 = v61;
        }
        *(_QWORD *)(v28 + 8 * v26) = v29[2].i64[1];
        LODWORD(v26) = v27 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v27) = v29[3].i64[0];
        if ((_DWORD)v27 == -1)
          return;
      }
      else
      {
        v55 = v29;
        v56 = a8;
        v57 = v25;
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a10 + 24))(a10, v55);
        v25 = v57;
        a8 = v56;
LABEL_44:
        if (!(_DWORD)v26)
          return;
      }
    }
  }
}

void sub_1B21C8E30(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6[2];
  _QWORD v7[2];

  v7[0] = &off_1E63CCCC8;
  v7[1] = a4;
  v5 = *a3;
  v6[0] = *a2;
  v6[1] = v5;
  sub_1B21C86F8(a1 + 8, *(_QWORD *)(a1 + 8), v6, (uint64_t)v7);
  sub_1B21C86F8(a1 + 104, *(_QWORD *)(a1 + 104), v6, (uint64_t)v7);
}

void sub_1B21C8E94(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29[2];

  v12 = *a3;
  v13 = *a4;
  v29[0] = *a3;
  v29[1] = v13;
  if (*(_DWORD *)(a2 + 104) == 2)
  {
    sub_1B21C842C(a1 + 104, *(_QWORD *)(a2 + 80));
    *(_QWORD *)(a2 + 80) = sub_1B21C7E94(a1 + 8, v29, a2);
LABEL_10:
    v15 = 1;
    goto LABEL_11;
  }
  ++*(_DWORD *)(a1 + 260);
  v14 = *(_QWORD *)(a2 + 80);
  if (*(float *)v14 > v13.f32[0]
    || *(float *)(v14 + 16) < v12.f32[0]
    || *(float *)(v14 + 4) > v13.f32[1]
    || (a8.i32[0] = *(_DWORD *)(v14 + 20), a8.f32[0] < v12.f32[1])
    || *(float *)(v14 + 8) > v13.f32[2]
    || *(float *)(v14 + 24) < v12.f32[2])
  {
    sub_1B21C82A8(a1 + 8, v14, v29);
    ++*(_DWORD *)(a1 + 264);
    goto LABEL_10;
  }
  v23 = *(float32x4_t *)(a2 + 48);
  v24 = vsubq_f32(*a3, v23);
  v25 = vsubq_f32(*(float32x4_t *)(a2 + 64), v23);
  v25.i32[3] = 0;
  v26.i64[0] = 0x3F0000003F000000;
  v26.i64[1] = 0x3F0000003F000000;
  v27 = vmulq_n_f32(vmulq_f32(v25, v26), *(float *)(a1 + 232));
  v27.i32[3] = 0;
  v28 = v27;
  if (v24.f32[0] < 0.0)
    v28.f32[0] = -v27.f32[0];
  v26.i32[0] = v24.i32[1];
  if (v24.f32[1] < 0.0)
  {
    v26.f32[0] = -v27.f32[1];
    v28.f32[1] = -v27.f32[1];
  }
  if (v24.f32[2] < 0.0)
    v28.f32[2] = -v27.f32[2];
  v24.i32[0] = 1028443341;
  v15 = sub_1B21C8320(a1 + 8, (float *)v14, v29, (uint64_t)&v28, *(int32x2_t *)v24.f32, *(double *)v27.i64, *(double *)v26.i64, a8);
  if (v15)
    ++*(_DWORD *)(a1 + 264);
LABEL_11:
  v16 = (_QWORD *)(a1 + 8 * *(int *)(a2 + 104) + 200);
  v17 = *(_QWORD *)(a2 + 88);
  if (v17)
    v16 = (_QWORD *)(v17 + 96);
  *v16 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 96);
  if (v18)
    *(_QWORD *)(v18 + 88) = *(_QWORD *)(a2 + 88);
  *(float32x4_t *)(a2 + 48) = *a3;
  *(float32x4_t *)(a2 + 64) = *a4;
  v19 = *(int *)(a1 + 236);
  *(_DWORD *)(a2 + 104) = v19;
  v20 = a1 + 8 * v19;
  *(_QWORD *)(a2 + 88) = 0;
  v22 = *(_QWORD *)(v20 + 200);
  v21 = v20 + 200;
  *(_QWORD *)(a2 + 96) = v22;
  if (*(_QWORD *)v21)
    *(_QWORD *)(*(_QWORD *)v21 + 88) = a2;
  *(_QWORD *)v21 = a2;
  if (v15)
  {
    *(_BYTE *)(a1 + 286) = 1;
    if (!*(_BYTE *)(a1 + 285))
    {
      v28.i64[0] = (uint64_t)&off_1E63CC968;
      v28.i64[1] = a1;
      sub_1B21C90E4(a1 + 104, *(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 80), (uint64_t)&v28);
      sub_1B21C90E4(a1 + 8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 80), (uint64_t)&v28);
    }
  }
}

void sub_1B21C90E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const double *v39;
  float64x2_t v40;
  const double *v41;
  float64x2_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;

  if (a2 && a3)
  {
    if (*(int *)(a1 + 36) <= 127 && *(int *)(a1 + 40) <= 127)
    {
      v8 = sub_1B21FF5F0(2048, 16);
      v9 = v8;
      v10 = *(unsigned int *)(a1 + 36);
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = 16 * v10;
        do
        {
          *(_OWORD *)(v8 + v11) = *(_OWORD *)(*(_QWORD *)(a1 + 48) + v11);
          v11 += 16;
        }
        while (v12 != v11);
      }
      v13 = *(_QWORD *)(a1 + 48);
      if (v13 && *(_BYTE *)(a1 + 56))
        sub_1B21FF5FC(v13);
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 48) = v9;
      *(_DWORD *)(a1 + 40) = 128;
    }
    *(_DWORD *)(a1 + 36) = 128;
    v14 = *(_QWORD **)(a1 + 48);
    *v14 = a2;
    v14[1] = a3;
    v15 = 124;
    LODWORD(v16) = 1;
    do
    {
      v17 = (int)v16;
      v16 = (int)v16 - 1;
      v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
      v19 = *v18;
      v20 = v18[1];
      if ((int)v16 > v15)
      {
        v21 = *(int *)(a1 + 36);
        v22 = 2 * v21;
        if ((int)v21 < 2 * (int)v21 && *(_DWORD *)(a1 + 40) < v22)
        {
          if ((_DWORD)v21)
          {
            v23 = sub_1B21FF5F0(32 * v21, 16);
            v24 = v23;
            v25 = *(unsigned int *)(a1 + 36);
            if ((int)v25 >= 1)
            {
              v26 = 0;
              v27 = 16 * v25;
              do
              {
                *(_OWORD *)(v23 + v26) = *(_OWORD *)(*(_QWORD *)(a1 + 48) + v26);
                v26 += 16;
              }
              while (v27 != v26);
            }
          }
          else
          {
            v24 = 0;
          }
          v28 = *(_QWORD *)(a1 + 48);
          if (v28 && *(_BYTE *)(a1 + 56))
            sub_1B21FF5FC(v28);
          *(_BYTE *)(a1 + 56) = 1;
          *(_QWORD *)(a1 + 48) = v24;
          *(_DWORD *)(a1 + 40) = v22;
        }
        *(_DWORD *)(a1 + 36) = v22;
        v15 = v22 - 4;
      }
      if (v19 == v20)
      {
        if (*(_QWORD *)(v19 + 48))
        {
          v39 = (const double *)(v19 + 40);
          v40 = vld1q_dup_f64(v39);
          *(float64x2_t *)(*(_QWORD *)(a1 + 48) + 16 * v16) = v40;
          v41 = (const double *)(v19 + 48);
          v42 = vld1q_dup_f64(v41);
          *(float64x2_t *)(*(_QWORD *)(a1 + 48) + 16 * v17) = v42;
          LODWORD(v16) = v17 + 2;
          *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v17 + 16) = *(_OWORD *)(v19 + 40);
        }
      }
      else if (*(float *)v19 <= *(float *)(v20 + 16)
             && *(float *)(v19 + 16) >= *(float *)v20
             && *(float *)(v19 + 4) <= *(float *)(v20 + 20)
             && *(float *)(v19 + 20) >= *(float *)(v20 + 4)
             && *(float *)(v19 + 8) <= *(float *)(v20 + 24)
             && *(float *)(v19 + 24) >= *(float *)(v20 + 8))
      {
        v29 = *(_QWORD *)(v20 + 48);
        if (*(_QWORD *)(v19 + 48))
        {
          v30 = *(_QWORD *)(v19 + 40);
          if (v29)
          {
            v31 = *(_QWORD *)(v20 + 40);
            v32 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v16);
            *v32 = v30;
            v32[1] = v31;
            v33 = *(_QWORD *)(v20 + 40);
            v34 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v17);
            *v34 = *(_QWORD *)(v19 + 48);
            v34[1] = v33;
            v35 = *(_QWORD *)(v20 + 48);
            v36 = *(_QWORD *)(a1 + 48) + 16 * v17;
            *(_QWORD *)(v36 + 16) = *(_QWORD *)(v19 + 40);
            *(_QWORD *)(v36 + 24) = v35;
            v37 = *(_QWORD *)(v20 + 48);
            LODWORD(v16) = v17 + 3;
            v38 = *(_QWORD *)(a1 + 48) + 16 * v17;
            *(_QWORD *)(v38 + 32) = *(_QWORD *)(v19 + 48);
            *(_QWORD *)(v38 + 40) = v37;
          }
          else
          {
            v47 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v16);
            *v47 = v30;
            v47[1] = v20;
            LODWORD(v16) = v17 + 1;
            v48 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v17);
            *v48 = *(_QWORD *)(v19 + 48);
            v48[1] = v20;
          }
        }
        else if (v29)
        {
          v43 = *(_QWORD *)(v20 + 40);
          v44 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v16);
          *v44 = v19;
          v44[1] = v43;
          v45 = *(_QWORD *)(v20 + 48);
          LODWORD(v16) = v17 + 1;
          v46 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v17);
          *v46 = v19;
          v46[1] = v45;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v19, v20);
        }
      }
    }
    while ((_DWORD)v16);
  }
}

void sub_1B21C93F4(uint64_t a1, uint64_t a2)
{
  sub_1B21C9420(a1);
  sub_1B21C9760(a1, a2);
}

void sub_1B21C9420(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int i;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int32 *v27;
  float *v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  _OWORD v32[2];

  v2 = (uint64_t *)(a1 + 8);
  v3 = 1374389535 * *(_DWORD *)(a1 + 244) * *(_DWORD *)(a1 + 28);
  sub_1B21C7CF8(a1 + 8, (v3 >> 37) + ((unint64_t)v3 >> 63) + 1);
  if (*(_DWORD *)(a1 + 256))
  {
    v4 = 1374389535 * *(_DWORD *)(a1 + 240) * *(_DWORD *)(a1 + 124);
    v5 = (v4 >> 37) + ((unint64_t)v4 >> 63) + 1;
    sub_1B21C7CF8(a1 + 104, v5);
    *(_DWORD *)(a1 + 256) = (*(_DWORD *)(a1 + 256) - v5) & ~((*(_DWORD *)(a1 + 256) - v5) >> 31);
  }
  v6 = *(_DWORD *)(a1 + 236);
  v7 = __OFADD__(v6++, 1);
  v8 = (v6 < 0) ^ v7;
  v9 = v6 & 1;
  if (v8)
    v9 = -v9;
  *(_DWORD *)(a1 + 236) = v9;
  v10 = *(_QWORD *)(a1 + 8 * v9 + 200);
  if (v10)
  {
    do
    {
      v11 = (uint64_t *)(a1 + 8 * *(int *)(v10 + 104) + 200);
      v12 = *(_QWORD *)(v10 + 88);
      v13 = *(_QWORD *)(v10 + 96);
      if (v12)
        v11 = (uint64_t *)(v12 + 96);
      *v11 = v13;
      v14 = *(_QWORD *)(v10 + 96);
      if (v14)
        *(_QWORD *)(v14 + 88) = *(_QWORD *)(v10 + 88);
      *(_QWORD *)(v10 + 88) = 0;
      *(_QWORD *)(v10 + 96) = *(_QWORD *)(a1 + 216);
      v15 = *(_QWORD *)(a1 + 216);
      if (v15)
        *(_QWORD *)(v15 + 88) = v10;
      *(_QWORD *)(a1 + 216) = v10;
      sub_1B21C842C((uint64_t)v2, *(_QWORD *)(v10 + 80));
      v16 = *(_OWORD *)(v10 + 64);
      v32[0] = *(_OWORD *)(v10 + 48);
      v32[1] = v16;
      *(_QWORD *)(v10 + 80) = sub_1B21C7E94(a1 + 104, v32, v10);
      *(_DWORD *)(v10 + 104) = 2;
      v10 = v13;
    }
    while (v13);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a1 + 124);
    *(_BYTE *)(a1 + 286) = 1;
  }
  *(_QWORD *)&v32[0] = &off_1E63CC968;
  *((_QWORD *)&v32[0] + 1) = a1;
  if (*(_BYTE *)(a1 + 285))
  {
    sub_1B21C90E4((uint64_t)v2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 104), (uint64_t)v32);
    if (*(_BYTE *)(a1 + 285))
      sub_1B21C90E4((uint64_t)v2, *v2, *v2, (uint64_t)v32);
  }
  if (*(_BYTE *)(a1 + 286))
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 56))(*(_QWORD *)(a1 + 224));
    v19 = *(_DWORD *)(v17 + 4);
    if (v19 >= 1)
    {
      v20 = 1374389535 * *(_DWORD *)(a1 + 248) * v19;
      v21 = (v20 >> 37) + ((unint64_t)v20 >> 63);
      if (*(_DWORD *)(a1 + 252) > v21)
        v21 = *(_DWORD *)(a1 + 252);
      if (v19 >= v21)
        v22 = v21;
      else
        v22 = *(_DWORD *)(v17 + 4);
      if (v22 < 1)
        goto LABEL_35;
      v23 = v17;
      for (i = 0; i < v22; ++i)
      {
        v25 = (_QWORD *)(*(_QWORD *)(v23 + 16) + 32 * ((*(_DWORD *)(a1 + 276) + i) % *(_DWORD *)(v23 + 4)));
        v26 = v25[1];
        v27 = *(unsigned __int32 **)(*v25 + 80);
        v28 = *(float **)(v26 + 80);
        v18.n128_u32[0] = *v27;
        if (*(float *)v27 <= v28[4])
        {
          v18.n128_u32[0] = v27[4];
          if (v18.n128_f32[0] >= *v28)
          {
            v18.n128_u32[0] = v27[1];
            if (v18.n128_f32[0] <= v28[5])
            {
              v18.n128_u32[0] = v27[5];
              if (v18.n128_f32[0] >= v28[1])
              {
                v18.n128_u32[0] = v27[2];
                if (v18.n128_f32[0] <= v28[6])
                {
                  v18.n128_u32[0] = v27[6];
                  if (v18.n128_f32[0] >= v28[2])
                    continue;
                }
              }
            }
          }
        }
        (*(void (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), v18);
        --v22;
        --i;
      }
      v19 = *(_DWORD *)(v23 + 4);
      if (v19 <= 0)
        *(_DWORD *)(a1 + 276) = 0;
      else
LABEL_35:
        *(_DWORD *)(a1 + 276) = (*(_DWORD *)(a1 + 276) + v22) % v19;
    }
  }
  ++*(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 252) = 1;
  *(_BYTE *)(a1 + 286) = 0;
  v29 = *(_DWORD *)(a1 + 260);
  v30 = *(_DWORD *)(a1 + 264);
  if (v29)
    v31 = (float)v30 / (float)v29;
  else
    v31 = 0.0;
  *(float *)(a1 + 268) = v31;
  *(_DWORD *)(a1 + 264) = v30 >> 1;
  *(_DWORD *)(a1 + 260) = v29 >> 1;
}

void sub_1B21C9760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int32 *v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char v32;
  char v33;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 112))(*(_QWORD *)(a1 + 224)))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 56))(*(_QWORD *)(a1 + 224));
    v6 = v4;
    v7 = *(_DWORD *)(v4 + 4);
    v8 = (v7 - 1);
    if (v7 > 1)
    {
      sub_1B21C9BA8(v4, (uint64_t)&v33, 0, v8);
      v7 = *(_DWORD *)(v6 + 4);
    }
    if (v7 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = v13;
        v15 = v12;
        v16 = *(_QWORD *)(v6 + 16);
        v17 = (_QWORD *)(v16 + v9);
        v12 = *(_QWORD *)(v16 + v9);
        v13 = *(_QWORD *)(v16 + v9 + 8);
        if (v12 == v15 && v13 == v14)
          goto LABEL_16;
        v19 = *(unsigned __int32 **)(v12 + 80);
        v20 = *(float **)(v13 + 80);
        v5.n128_u32[0] = *v19;
        if (*(float *)v19 > v20[4]
          || (v5.n128_u32[0] = v19[4], v5.n128_f32[0] < *v20)
          || (v5.n128_u32[0] = v19[1], v5.n128_f32[0] > v20[5])
          || (v5.n128_u32[0] = v19[5], v5.n128_f32[0] < v20[1])
          || (v5.n128_u32[0] = v19[2], v5.n128_f32[0] > v20[6])
          || (v5.n128_u32[0] = v19[6], v5.n128_f32[0] < v20[2]))
        {
LABEL_16:
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 224) + 64))(*(_QWORD *)(a1 + 224), v16 + v9, a2, v8, v5);
          ++v11;
          *v17 = 0;
          v17[1] = 0;
          v7 = *(_DWORD *)(v6 + 4);
        }
        ++v10;
        v9 += 32;
      }
      while (v10 < v7);
      if (v7 >= 2)
      {
        sub_1B21C9BA8(v6, (uint64_t)&v32, 0, (v7 - 1));
        v7 = *(_DWORD *)(v6 + 4);
      }
      v21 = v7 - v11;
      if (v11 < 0)
      {
        if (*(_DWORD *)(v6 + 8) < v21)
        {
          if (v7 == v11)
          {
            v22 = 0;
            v23 = v7;
          }
          else
          {
            v22 = sub_1B21FF5F0(32 * v21, 16);
            v23 = *(_DWORD *)(v6 + 4);
          }
          if (v23 >= 1)
          {
            v24 = 0;
            v25 = 32 * v23;
            do
            {
              v26 = v22 + v24;
              v27 = *(_QWORD *)(v6 + 16) + v24;
              *(_OWORD *)v26 = *(_OWORD *)v27;
              *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
              *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
              v24 += 32;
            }
            while (v25 != v24);
          }
          v28 = *(_QWORD *)(v6 + 16);
          if (v28 && *(_BYTE *)(v6 + 24))
            sub_1B21FF5FC(v28);
          *(_BYTE *)(v6 + 24) = 1;
          *(_QWORD *)(v6 + 16) = v22;
          *(_DWORD *)(v6 + 8) = v21;
        }
        v29 = v7;
        v30 = 32 * v7;
        do
        {
          v31 = (_OWORD *)(*(_QWORD *)(v6 + 16) + v30);
          ++v29;
          *v31 = 0uLL;
          v31[1] = 0uLL;
          v30 += 32;
        }
        while (v29 < v21);
      }
      v7 -= v11;
    }
    *(_DWORD *)(v6 + 4) = v7;
  }
}

uint64_t sub_1B21C99BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t sub_1B21C99C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t sub_1B21C99CC(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  v3 = *(__int128 **)(result + 8);
  v4 = *(__int128 **)(result + 104);
  if (v3)
  {
    if (v4)
    {
      v5 = 0;
      v6 = v3 + 1;
      v7 = v4 + 1;
      do
      {
        v8 = (float *)((char *)v6 + v5);
        v9 = *(float *)((char *)v6 + v5 - 16);
        v10 = (float *)((char *)v7 + v5);
        if (v9 >= *(float *)((char *)v7 + v5 - 16))
          v9 = *(float *)((char *)v7 + v5 - 16);
        *(float *)((char *)v14 + v5) = v9;
        v11 = *v8;
        if (*v8 <= *v10)
          v11 = *v10;
        *(float *)((char *)&v14[1] + v5) = v11;
        v5 += 4;
      }
      while (v5 != 12);
      v13 = v14[0];
      v12 = v14[1];
    }
    else
    {
      v13 = *v3;
      v12 = v3[1];
    }
  }
  else if (v4)
  {
    v13 = *v4;
    v12 = v4[1];
  }
  else
  {
    v12 = 0uLL;
    v13 = 0uLL;
  }
  *a2 = v13;
  *a3 = v12;
  return result;
}

double sub_1B21C9A64(uint64_t a1)
{
  uint64_t v2;
  double result;

  if (!(*(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 124)))
  {
    v2 = a1 + 104;
    sub_1B21C7C00(a1 + 8);
    sub_1B21C7C00(v2);
    *(_WORD *)(a1 + 285) = 256;
    *(_OWORD *)(a1 + 236) = xmmword_1B22C9F40;
    *(_QWORD *)&result = 1;
    *(_QWORD *)(a1 + 252) = 1;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 268) = 0;
    *(_QWORD *)(a1 + 276) = 0;
    *(_QWORD *)(a1 + 260) = 0;
  }
  return result;
}

void sub_1B21C9AE0()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21C9AF4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 != a3)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 224) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 224), *(_QWORD *)(a2 + 40), *(_QWORD *)(a3 + 40));
    ++*(_DWORD *)(*(_QWORD *)(v3 + 8) + 252);
  }
  return result;
}

uint64_t sub_1B21C9B44(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, *(_QWORD *)(a1[2] + 80));
}

void sub_1B21C9B58()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21C9B6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40));
}

void sub_1B21C9B80()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21C9B94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40));
}

uint64_t sub_1B21C9BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v8 = a4 + a3;
  if ((int)a4 + (int)a3 < 0 != __OFADD__((_DWORD)a4, (_DWORD)a3))
    ++v8;
  v9 = *(_QWORD *)(a1 + 16) + 32 * ((uint64_t)v8 >> 1);
  v23 = *(_OWORD *)v9;
  v24 = *(_QWORD *)(v9 + 16);
  v25 = *(_QWORD *)(v9 + 24);
  LODWORD(v10) = a3;
  LODWORD(v11) = a4;
  do
  {
    v12 = 32 * (int)v10;
    do
    {
      v13 = sub_1B21C9CEC(a2, (uint64_t *)(*(_QWORD *)(a1 + 16) + v12), (uint64_t *)&v23);
      v10 = (v10 + 1);
      v12 += 32;
    }
    while (v13);
    v14 = 32 * (int)v11;
    do
    {
      result = sub_1B21C9CEC(a2, (uint64_t *)&v23, (uint64_t *)(*(_QWORD *)(a1 + 16) + v14));
      v11 = (v11 - 1);
      v14 -= 32;
    }
    while ((result & 1) != 0);
    if ((int)v10 - 1 <= (int)v11 + 1)
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = v16 + v12;
      v18 = v16 + v14;
      v19 = *(_OWORD *)(v17 - 32);
      v20 = *(_OWORD *)(v17 - 16);
      v21 = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(v17 - 32) = *(_OWORD *)(v18 + 32);
      *(_OWORD *)(v17 - 16) = v21;
      v22 = *(_QWORD *)(a1 + 16) + v14;
      *(_OWORD *)(v22 + 32) = v19;
      *(_OWORD *)(v22 + 48) = v20;
    }
    else
    {
      v10 = (v10 - 1);
      v11 = (v11 + 1);
    }
  }
  while ((int)v10 <= (int)v11);
  if ((int)v11 > (int)a3)
    result = sub_1B21C9BA8(a1, a2, a3, v11);
  if ((int)v10 < (int)a4)
    return sub_1B21C9BA8(a1, a2, v10, a4);
  return result;
}

BOOL sub_1B21C9CEC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  BOOL v12;

  v3 = *a2;
  if (*a2)
    v4 = *(_DWORD *)(v3 + 40);
  else
    v4 = -1;
  v5 = *a3;
  if (*a3)
    v6 = *(_DWORD *)(v5 + 40);
  else
    v6 = -1;
  v7 = a2[1];
  if (v7)
    v8 = *(_DWORD *)(v7 + 40);
  else
    v8 = -1;
  v9 = a3[1];
  if (v9)
    v10 = *(_DWORD *)(v9 + 40);
  else
    v10 = -1;
  if (v4 > v6)
    return 1;
  v12 = v3 != v5 || v8 <= v10;
  result = !v12;
  if (v12 && v3 == v5)
    return v7 == v9 && a2[2] > (unint64_t)a3[2];
  return result;
}

uint64_t sub_1B21C9D88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E63CDA08;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v2 = sub_1B21FF5F0(64, 16);
  v3 = v2;
  v4 = *(unsigned int *)(a1 + 12);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 32 * v4;
    do
    {
      v7 = v2 + v5;
      v8 = *(_QWORD *)(a1 + 24) + v5;
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      v5 += 32;
    }
    while (v6 != v5);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 && *(_BYTE *)(a1 + 32))
    sub_1B21FF5FC(v9);
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 16) = 2;
  sub_1B21C9E70(a1);
  return a1;
}

void sub_1B21C9E70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 64) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = sub_1B21FF5F0(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 60);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 60);
    }
    v6 = *(_QWORD *)(a1 + 72);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 80) = 1;
        *(_QWORD *)(a1 + 72) = v4;
        *(_DWORD *)(a1 + 64) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 72);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 80))
      sub_1B21FF5FC(v6);
    *(_QWORD *)(a1 + 72) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 72) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 60) = v1;
  v10 = *(_DWORD *)(a1 + 92);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 96) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 104) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = sub_1B21FF5F0(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 92);
    v13 = *(_QWORD *)(a1 + 104);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 112) = 1;
        *(_QWORD *)(a1 + 104) = v11;
        *(_DWORD *)(a1 + 96) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 104);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 112))
      sub_1B21FF5FC(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 92) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 72), 255, 4 * v1);
    memset(*(void **)(a1 + 104), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = *(_QWORD *)(a1 + 104);
    v20 = *(_QWORD *)(a1 + 24) + 8;
    do
    {
      v21 = *(_DWORD *)(*(_QWORD *)(v20 - 8) + 40) | (*(_DWORD *)(*(_QWORD *)v20 + 40) << 16);
      v22 = ~((uint64_t)v21 << 15) + v21;
      v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
      LODWORD(v23) = (*(_DWORD *)(a1 + 16) - 1) & (((unint64_t)(v23 + ~(v23 << 11)) >> 16) ^ (v23 + ~((_DWORD)v23 << 11)));
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * (int)v23);
      *(_DWORD *)(v18 + 4 * (int)v23) = v17++;
      v20 += 32;
    }
    while (v2 != v17);
  }
}

_QWORD *sub_1B21CA0B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CDA08;
  v2 = (uint64_t)(a1 + 1);
  sub_1B1810570((uint64_t)(a1 + 11));
  sub_1B1810570((uint64_t)(a1 + 7));
  sub_1B1810570(v2);
  return a1;
}

void sub_1B21CA104(_QWORD *a1)
{
  sub_1B21CA0B8(a1);
  JUMPOUT(0x1B5E22E18);
}

void (***sub_1B21CA128(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD)
{
  void (***result)(_QWORD);

  result = *(void (****)(_QWORD))(a2 + 16);
  if (result)
  {
    (**result)(result);
    result = (void (***)(_QWORD))(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 120))(a3, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_1B21CA174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[0] = &off_1E63FC490;
  v4[1] = a2;
  v4[2] = a1;
  v4[3] = a3;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, v4);
}

uint64_t sub_1B21CA1B0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = &off_1E63FC4B8;
  v3[1] = a2;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, v3);
}

uint64_t sub_1B21CA1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a3 + 40);
  v5 = v3 <= v4;
  if (v3 <= v4)
    v6 = a2;
  else
    v6 = a3;
  if (v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(_DWORD *)(v6 + 40);
  v9 = *(_DWORD *)(v7 + 40);
  v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  v12 = (*(_DWORD *)(a1 + 16) - 1) & (((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~((_DWORD)v11 << 11)));
  if (v12 >= *(_DWORD *)(a1 + 60))
    return 0;
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  if (v13 == -1)
    return 0;
  v14 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v15 = v13;
    if (*(_DWORD *)(*(_QWORD *)(v14 + 32 * v13) + 40) == v8)
    {
      v16 = v14 + 32 * v13;
      if (*(_DWORD *)(*(_QWORD *)(v16 + 8) + 40) == v9)
        break;
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v15);
    if (v13 == -1)
      return 0;
  }
  return v16;
}

_QWORD *sub_1B21CA2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v38;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a3 + 40);
  if (v4 <= v5)
    v6 = a2;
  else
    v6 = a3;
  if (v4 <= v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(_DWORD *)(v6 + 40);
  v9 = *(_DWORD *)(v7 + 40);
  v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  v12 = ((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~((_DWORD)v11 << 11));
  v13 = *(_DWORD *)(a1 + 16);
  LODWORD(v14) = (v13 - 1) & v12;
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (int)v14);
  if (v15 == -1)
  {
LABEL_12:
    v18 = *(_DWORD *)(a1 + 12);
    v38 = v12;
    if (v18 == v13)
    {
      if (v13)
        v19 = 2 * v13;
      else
        v19 = 1;
      if (v13 >= v19)
      {
        v19 = *(_DWORD *)(a1 + 16);
        v22 = v19;
      }
      else
      {
        if (v19)
        {
          v20 = sub_1B21FF5F0(32 * v19, 16);
          v21 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          v20 = 0;
          v21 = *(_DWORD *)(a1 + 16);
        }
        if (v21 >= 1)
        {
          v23 = 0;
          v24 = 32 * v21;
          do
          {
            v25 = v20 + v23;
            v26 = *(_QWORD *)(a1 + 24) + v23;
            *(_OWORD *)v25 = *(_OWORD *)v26;
            *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
            *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
            v23 += 32;
          }
          while (v24 != v23);
        }
        v27 = *(_QWORD *)(a1 + 24);
        if (v27 && *(_BYTE *)(a1 + 32))
          sub_1B21FF5FC(v27);
        *(_BYTE *)(a1 + 32) = 1;
        *(_QWORD *)(a1 + 24) = v20;
        *(_DWORD *)(a1 + 16) = v19;
        v22 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v19 = *(_DWORD *)(a1 + 16);
      v22 = *(_DWORD *)(a1 + 12);
    }
    v14 = (int)v14;
    *(_DWORD *)(a1 + 12) = v22 + 1;
    v28 = *(_QWORD *)(a1 + 24);
    v17 = (_QWORD *)(v28 + 32 * v18);
    v29 = *(_QWORD *)(a1 + 120);
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v6, v7);
      v19 = *(_DWORD *)(a1 + 16);
    }
    if (v13 < v19)
    {
      sub_1B21C9E70(a1);
      v14 = (*(int *)(a1 + 16) - 1) & v38;
    }
    v30 = *(_DWORD *)(v6 + 40);
    v31 = *(_DWORD *)(v7 + 40);
    v32 = v30 < v31;
    if (v30 >= v31)
      v33 = v7;
    else
      v33 = v6;
    if (v32)
      v34 = v7;
    else
      v34 = v6;
    *v17 = v33;
    v35 = (_QWORD *)(v28 + 32 * v18);
    v35[2] = 0;
    v35[3] = 0;
    v35[1] = v34;
    v36 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v18) = *(_DWORD *)(v36 + 4 * v14);
    *(_DWORD *)(v36 + 4 * v14) = v18;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v16 + 32 * v15) + 40) == v8)
      {
        v17 = (_QWORD *)(v16 + 32 * v15);
        if (*(_DWORD *)(v17[1] + 40) == v9)
          break;
      }
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v15);
      if (v15 == -1)
        goto LABEL_12;
    }
  }
  return v17;
}

uint64_t sub_1B21CA4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a3 + 40);
  if (v4 <= v5)
    v6 = a2;
  else
    v6 = a3;
  if (v4 <= v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(_DWORD *)(v6 + 40);
  v9 = *(_DWORD *)(v7 + 40);
  v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  v12 = (*(int *)(a1 + 16) - 1) & (int)(((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~((_DWORD)v11 << 11)));
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  if (v13 == -1)
    return 0;
  v16 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    if (*(_DWORD *)(*(_QWORD *)(v16 + 32 * v13) + 40) == v8)
    {
      v17 = v16 + 32 * v13;
      if (*(_DWORD *)(*(_QWORD *)(v17 + 8) + 40) == v9)
        break;
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v13);
    if (v13 == -1)
      return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v16 + 32 * v13, a4);
  v18 = *(_QWORD *)(v17 + 24);
  v19 = v17 - *(_QWORD *)(a1 + 24);
  v20 = (unint64_t)v19 >> 5;
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_DWORD *)(v21 + 4 * v12);
  if (v22 == ((unint64_t)v19 >> 5))
    goto LABEL_17;
  do
  {
    v23 = v22;
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v22);
  }
  while (v22 != (_DWORD)v20);
  if (v23 == -1)
LABEL_17:
    *(_DWORD *)(v21 + 4 * v12) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * (int)v20);
  else
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v23) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * (int)v20);
  v24 = *(int *)(a1 + 12) - 1;
  v25 = *(_QWORD *)(a1 + 120);
  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v6, v7, a4);
  if ((_DWORD)v24 != (_DWORD)v20)
  {
    v26 = *(_QWORD *)(a1 + 24);
    v27 = v26 + 32 * v24;
    v28 = *(_DWORD *)(*(_QWORD *)v27 + 40) | (*(_DWORD *)(*(_QWORD *)(v27 + 8) + 40) << 16);
    v29 = ~((uint64_t)v28 << 15) + v28;
    v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
    v31 = (*(int *)(a1 + 16) - 1) & (int)(((unint64_t)(v30 + ~(v30 << 11)) >> 16) ^ (v30 + ~((_DWORD)v30 << 11)));
    v32 = *(_QWORD *)(a1 + 72);
    v33 = *(_DWORD *)(v32 + 4 * v31);
    if (v33 == (_DWORD)v24)
      goto LABEL_25;
    do
    {
      v34 = v33;
      v33 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v33);
    }
    while (v33 != (_DWORD)v24);
    if (v34 == -1)
LABEL_25:
      *(_DWORD *)(v32 + 4 * v31) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v24);
    else
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v34) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v24);
    v35 = (_OWORD *)(v26 + 32 * (int)(v19 >> 5));
    v36 = *(_OWORD *)(v27 + 16);
    *v35 = *(_OWORD *)v27;
    v35[1] = v36;
    v37 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * (int)v20) = *(_DWORD *)(v37 + 4 * v31);
    *(_DWORD *)(v37 + 4 * v31) = v20;
  }
  --*(_DWORD *)(a1 + 12);
  return v18;
}

uint64_t sub_1B21CA758(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;

  if (*(int *)(result + 12) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (_QWORD *)(*(_QWORD *)(v5 + 24) + 32 * v6);
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 16))(a2, v7);
      if ((_DWORD)result)
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, *v7, v7[1], a3);
      else
        ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 12));
  }
  return result;
}

void sub_1B21CA7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  _BYTE v27[4];
  int v28;
  int v29;
  uint64_t v30;
  char v31;

  v31 = 1;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  if (*(int *)(a1 + 12) < 1)
  {
    LODWORD(v6) = 0;
    goto LABEL_25;
  }
  v4 = 0;
  v5 = 0;
  LODWORD(v6) = 0;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(a1 + 24);
    if ((_DWORD)v6 != (_DWORD)v5 || (!(_DWORD)v5 ? (v9 = 1) : (v9 = (2 * v5)), (int)v5 >= (int)v9))
    {
      v9 = v5;
      goto LABEL_19;
    }
    if ((_DWORD)v9)
      v10 = sub_1B21FF5F0(32 * (int)v9, 16);
    else
      v10 = 0;
    if ((int)v5 >= 1)
    {
      v11 = v5;
      v12 = (uint64_t *)(v4 + 24);
      v13 = (_QWORD *)(v10 + 24);
      do
      {
        *(_OWORD *)(v13 - 3) = *(_OWORD *)(v12 - 3);
        *(v13 - 1) = *(v12 - 1);
        v14 = *v12;
        v12 += 4;
        *v13 = v14;
        v13 += 4;
        --v11;
      }
      while (v11);
LABEL_17:
      sub_1B21FF5FC(v4);
      goto LABEL_18;
    }
    if (v4)
      goto LABEL_17;
LABEL_18:
    v31 = 1;
    v30 = v10;
    v4 = v10;
    v29 = v9;
LABEL_19:
    v15 = v8 + 32 * v7;
    v16 = v4 + 32 * (int)v6;
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v16 + 24) = *(_QWORD *)(v15 + 24);
    v17 = v28;
    v6 = ++v28;
    ++v7;
    v5 = v9;
  }
  while (v7 < *(int *)(a1 + 12));
  if ((v17 & 0x80000000) == 0)
  {
    v18 = (_QWORD *)(v4 + 8);
    v19 = v6;
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 24))(a1, *(v18 - 1), *v18, a2);
      v18 += 4;
      --v19;
    }
    while (v19);
  }
LABEL_25:
  if (*(int *)(a1 + 92) >= 1)
  {
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 104);
    do
      *(_DWORD *)(v21 + 4 * v20++) = -1;
    while (v20 < *(int *)(a1 + 92));
  }
  v22 = (v6 - 1);
  if ((int)v6 > 1)
  {
    sub_1B21C9BA8((uint64_t)v27, (uint64_t)&v26, 0, v22);
    LODWORD(v6) = v28;
  }
  if ((int)v6 >= 1)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(v30 + v23), *(_QWORD *)(v30 + v23 + 8), v22);
      ++v24;
      v23 += 32;
    }
    while (v24 < v28);
  }
  if (v30)
    v25 = v31 == 0;
  else
    v25 = 1;
  if (!v25)
    sub_1B21FF5FC(v30);
}

_QWORD *sub_1B21CAA14(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v7 = a2[1];
    v8 = a3[1];
    v9 = (a3[2] & v7) != 0 && (a2[2] & v8) != 0;
    if ((v8 & a2[3]) == 0)
    {
      v10 = (a3[3] & v7) != 0 || v9;
      if (v10 != 1)
        return 0;
    }
    return sub_1B21CA2A8(a1, (uint64_t)a2, (uint64_t)a3);
  }
  if (((*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v6 + 16))(v6, a2, a3) & 1) != 0)
    return sub_1B21CA2A8(a1, (uint64_t)a2, (uint64_t)a3);
  return 0;
}

uint64_t sub_1B21CAAC8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1B21CAAD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1B21CAAD8(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1B21CAAE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1B21CAAE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_1B21CAAF0()
{
  return 0;
}

uint64_t sub_1B21CAAF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

void sub_1B21CAB00()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21CAB14(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2 == v2 || a2[1] == v2)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  return 0;
}

void sub_1B21CAB50()
{
  JUMPOUT(0x1B5E22E18);
}

BOOL sub_1B21CAB64(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return *a2 == v2 || a2[1] == v2;
}

double sub_1B21CAB7C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1E63CC008;
  *(_DWORD *)(a1 + 64) = 281;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 200) = 1;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 240) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  result = -1.40444776e306;
  *(_OWORD *)(a1 + 16) = xmmword_1B2247E90;
  *(_OWORD *)(a1 + 32) = xmmword_1B2247E80;
  return result;
}

void sub_1B21CABF8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9, float a10, float32x4_t a11)
{
  int v13;
  int v14;
  int v16;
  double v17;
  double v18;
  float32x4_t v19;
  double v20;
  float v21;
  float32x4_t v22;
  float v23;
  uint64_t v24;
  int v25;
  __n128 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  float v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  unsigned int v37;
  float32x4_t v38;
  float32x4_t *v39;
  int v40;
  int v41;
  int v42;
  __n128 v43;
  int v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;

  v13 = a3 - a2;
  v14 = *(_DWORD *)(a1 + 68);
  if ((_DWORD)a3 - (_DWORD)a2 == 1)
  {
    sub_1B21CAFAC(a1, *(_DWORD *)(a1 + 68), a2);
    ++*(_DWORD *)(a1 + 68);
  }
  else
  {
    v16 = sub_1B21CAFFC((__n128 *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    v24 = sub_1B21CB210((__n128 *)a1, a2, a3, v16, v17, v18, v19, v20, v21, v22, v23);
    v25 = *(_DWORD *)(a1 + 68);
    sub_1B21CB4B0((float32x4_t *)a1, v25, (float32x4_t *)(a1 + 32));
    v26 = (__n128)sub_1B21CB51C((float32x4_t *)a1, *(_DWORD *)(a1 + 68), (float32x4_t *)(a1 + 16));
    if ((int)a3 > (int)a2)
    {
      v29 = 16 * (int)a2;
      v30 = ((uint64_t)(int)a2 << 6) | 0x10;
      do
      {
        if (*(_BYTE *)(a1 + 72))
        {
          v31 = (__int16 *)(*(_QWORD *)(a1 + 160) + v29);
          v26.n128_u16[0] = *v31;
          v32 = *(float *)(a1 + 48);
          v33 = *(float *)(a1 + 52);
          LOWORD(v27) = v31[1];
          LOWORD(v28) = v31[2];
          v34 = *(float *)(a1 + 56);
          v47.f32[0] = (float)v26.n128_u32[0] / v32;
          v47.f32[1] = (float)v27 / v33;
          v47.i64[1] = COERCE_UNSIGNED_INT((float)v28 / v34);
          v35 = *(float32x4_t *)(a1 + 16);
          v36 = vaddq_f32(v47, v35);
          v47 = v36;
          v36.i16[0] = v31[3];
          v36.f32[0] = (float)v36.u32[0] / v32;
          LOWORD(v32) = v31[4];
          *(float *)&v37 = (float)LODWORD(v32) / v33;
          LOWORD(v33) = v31[5];
          v46.i64[0] = __PAIR64__(v37, v36.u32[0]);
          v46.i64[1] = COERCE_UNSIGNED_INT((float)LODWORD(v33) / v34);
          v38 = vaddq_f32(v46, v35);
        }
        else
        {
          v39 = (float32x4_t *)(*(_QWORD *)(a1 + 96) + v30);
          v47 = v39[-1];
          v38 = *v39;
        }
        v40 = *(_DWORD *)(a1 + 68);
        v46 = v38;
        v26 = (__n128)sub_1B21CB598((float32x4_t *)a1, v40, &v47, &v46);
        v29 += 16;
        v30 += 64;
        --v13;
      }
      while (v13);
    }
    v41 = *(_DWORD *)(a1 + 68) + 1;
    *(_DWORD *)(a1 + 68) = v41;
    sub_1B21CABF8(a1, a2, v24, v26);
    v42 = *(_DWORD *)(a1 + 68);
    sub_1B21CABF8(a1, v24, a3, v43);
    v44 = *(_DWORD *)(a1 + 68) - v14;
    v45 = *(unsigned __int8 *)(a1 + 72);
    if (*(_BYTE *)(a1 + 72) && v44 >= 129)
    {
      sub_1B21CB6B8(a1, v41, v42);
      v45 = *(unsigned __int8 *)(a1 + 72);
    }
    if (v45)
      *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16 * v25 + 12) = -v44;
    else
      *(_DWORD *)(*(_QWORD *)(a1 + 128) + ((uint64_t)v25 << 6) + 32) = v44;
  }
}

float32x4_t sub_1B21CAE28(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int32x2_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t result;

  v4 = (float32x4_t)vdupq_lane_s32(a4, 0);
  v4.i32[3] = 0;
  v5 = vsubq_f32(*a2, v4);
  v6 = v5;
  v6.i32[3] = 0;
  a1[1] = v6;
  v7 = vaddq_f32(v4, *a3);
  v8 = vsubq_f32(v7, v5);
  v8.i32[3] = 0;
  v9 = vrecpeq_f32(v8);
  v10 = vmulq_f32(v9, vrecpsq_f32(v8, v9));
  v11 = vmulq_f32(vrecpsq_f32(v8, v10), vmulq_f32(v10, (float32x4_t)xmmword_1B22C9F50));
  _Q5 = vmulq_f32(vsubq_f32(v6, v6), v11);
  *(float32x2_t *)_Q5.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(_QWORD *)&vcvt_s32_f32(*(float32x2_t *)_Q5.f32) & 0xFFFFFFFEFFFFFFFELL)), *(float32x2_t *)v11.f32);
  _Q5.f32[2] = (float)((int)_Q5.f32[2] & 0xFFFE) / v11.f32[2];
  v13 = vsubq_f32(vaddq_f32(_Q5, v5), v4);
  v13.i32[3] = 0;
  v14 = vminq_f32(v6, v13);
  v15 = vmulq_f32(vsubq_f32(v7, v14), v11);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v15.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(_QWORD *)&vcvt_s32_f32(vadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q5.f32)) | 0x100000001)), *(float32x2_t *)v11.f32);
  v15.f32[2] = (float)((int)(float)(v15.f32[2] + 1.0) | 1u) / v11.f32[2];
  a1[4].i8[8] = 1;
  v15.i32[3] = 0;
  v20 = vmaxq_f32(v7, vaddq_f32(v4, vaddq_f32(v14, v15)));
  a1[1] = v14;
  a1[2] = v20;
  v21 = vsubq_f32(v20, v14);
  v21.i32[3] = 0;
  v22 = vrecpeq_f32(v21);
  v23 = vmulq_f32(v22, vrecpsq_f32(v21, v22));
  result = vmulq_f32(vrecpsq_f32(v21, v23), vmulq_f32(v23, (float32x4_t)xmmword_1B22C9F50));
  a1[3] = result;
  return result;
}

_QWORD *sub_1B21CAF3C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CC008;
  v2 = (uint64_t)(a1 + 10);
  sub_1B1810570((uint64_t)(a1 + 27));
  sub_1B1810570((uint64_t)(a1 + 22));
  sub_1B1810570((uint64_t)(a1 + 18));
  sub_1B1810570((uint64_t)(a1 + 14));
  sub_1B1810570(v2);
  return a1;
}

void sub_1B21CAF98(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1B21CAF3C(a1);
  sub_1B21FF5FC((uint64_t)v1);
}

__n128 sub_1B21CAFAC(uint64_t a1, int a2, int a3)
{
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 72))
  {
    result = *(__n128 *)(*(_QWORD *)(a1 + 160) + 16 * a3);
    *(__n128 *)(*(_QWORD *)(a1 + 192) + 16 * a2) = result;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 96) + ((uint64_t)a3 << 6);
    v5 = *(_QWORD *)(a1 + 128) + ((uint64_t)a2 << 6);
    *(_OWORD *)v5 = *(_OWORD *)v4;
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v4 + 16);
    result = *(__n128 *)(v4 + 32);
    v6 = *(_OWORD *)(v4 + 48);
    *(__n128 *)(v5 + 32) = result;
    *(_OWORD *)(v5 + 48) = v6;
  }
  return result;
}

uint64_t sub_1B21CAFFC(__n128 *a1, int a2, int a3, double a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9, float a10, float32x4_t a11)
{
  float32x4_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  _WORD *v18;
  float v19;
  float v20;
  unsigned int v21;
  float32x4_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  float32x4_t v26;
  float32x4_t *v27;
  float v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _WORD *v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  float32x4_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  _BOOL4 v50;

  v12 = a3 - a2;
  if (a3 <= a2)
  {
    v28 = (float)v12;
    v33 = 0uLL;
  }
  else
  {
    v13 = 16 * a2;
    v14 = ((uint64_t)a2 << 6) | 0x10;
    v15 = 0uLL;
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    v17 = a3 - (uint64_t)a2;
    do
    {
      if (a1[4].n128_u8[8])
      {
        v18 = (_WORD *)(a1[10].n128_u64[0] + v13);
        a6.i16[0] = v18[3];
        v19 = a1[3].n128_f32[0];
        v20 = a1[3].n128_f32[1];
        a9.i16[0] = v18[4];
        LOWORD(a10) = v18[5];
        *(float *)&v21 = (float)LODWORD(a10);
        a11.i32[0] = a1[3].n128_i32[2];
        v11.i32[3] = 0;
        v11.f32[0] = (float)a6.u32[0] / v19;
        v11.f32[1] = (float)a9.u32[0] / v20;
        v11.f32[2] = *(float *)&v21 / a11.f32[0];
        a9 = (float32x4_t)a1[1];
        v22 = vaddq_f32(a9, v11);
        LOWORD(v21) = *v18;
        *(float *)&v23 = (float)v21;
        *(float *)&v24 = *(float *)&v23 / v19;
        LOWORD(v23) = v18[1];
        *(float *)&v25 = (float)v23;
        a8.f32[0] = *(float *)&v25 / v20;
        LOWORD(v25) = v18[2];
        a10 = (float)v25;
        v11.i64[0] = __PAIR64__(a8.u32[0], v24);
        v11.f32[2] = a10 / a11.f32[0];
        v26 = vaddq_f32(a9, v11);
      }
      else
      {
        v27 = (float32x4_t *)(a1[6].n128_u64[0] + v14);
        v26 = v27[-1];
        v22 = *v27;
      }
      a6 = vmulq_f32(vaddq_f32(v22, v26), v16);
      a6.i32[3] = 0;
      v15 = vaddq_f32(v15, a6);
      v13 += 16;
      v14 += 64;
      --v17;
    }
    while (v17);
    v28 = (float)v12;
    v29 = vmulq_n_f32(v15, 1.0 / (float)v12);
    v30 = 16 * a2;
    v31 = ((uint64_t)a2 << 6) | 0x10;
    v32 = a3 - (uint64_t)a2;
    v33 = 0uLL;
    v34.i64[0] = 0x3F0000003F000000;
    v34.i64[1] = 0x3F0000003F000000;
    do
    {
      if (a1[4].n128_u8[8])
      {
        v35 = (_WORD *)(a1[10].n128_u64[0] + v30);
        a8.i16[0] = v35[3];
        v36 = a1[3].n128_f32[0];
        v37 = a1[3].n128_f32[1];
        a11.i16[0] = v35[4];
        v11.i16[0] = v35[5];
        *(float *)&v38 = (float)v11.u32[0];
        v39 = a1[3].n128_f32[2];
        v40.i32[3] = 0;
        v40.f32[0] = (float)a8.u32[0] / v36;
        v40.f32[1] = (float)a11.u32[0] / v37;
        v40.f32[2] = *(float *)&v38 / v39;
        a11 = (float32x4_t)a1[1];
        v41 = vaddq_f32(a11, v40);
        LOWORD(v38) = *v35;
        *(float *)&v42 = (float)v38;
        *(float *)&v43 = *(float *)&v42 / v36;
        LOWORD(v42) = v35[1];
        *(float *)&v44 = (float)v42;
        *(float *)&v45 = *(float *)&v44 / v37;
        LOWORD(v44) = v35[2];
        v11.f32[0] = (float)v44;
        v40.i32[3] = 0;
        v40.i64[0] = __PAIR64__(v45, v43);
        v40.f32[2] = v11.f32[0] / v39;
        v46 = vaddq_f32(a11, v40);
      }
      else
      {
        v47 = (float32x4_t *)(a1[6].n128_u64[0] + v31);
        v46 = v47[-1];
        v41 = *v47;
      }
      v48 = vsubq_f32(vmulq_f32(vaddq_f32(v41, v46), v34), v29);
      v48.i32[3] = 0;
      a8 = vmulq_f32(v48, v48);
      v33 = vaddq_f32(v33, a8);
      v30 += 16;
      v31 += 64;
      --v32;
    }
    while (v32);
  }
  v49 = vmulq_n_f32(v33, 1.0 / (float)(v28 + -1.0));
  v50 = v49.f32[0] < v49.f32[1];
  if (v49.f32[0] < v49.f32[1])
    v49.f32[0] = v49.f32[1];
  if (v49.f32[0] >= v49.f32[2])
    return v50;
  else
    return 2;
}

uint64_t sub_1B21CB210(__n128 *a1, int a2, int a3, int a4, double a5, double a6, float32x4_t a7, double a8, float a9, float32x4_t a10, float a11)
{
  int v12;
  int v13;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  _WORD *v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  int v39;
  _WORD *v40;
  float v41;
  float v42;
  unsigned int v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v56;
  float32x4_t v57;

  v57 = 0uLL;
  v12 = a2;
  v13 = a3 - a2;
  if (a3 > a2)
  {
    v15 = v57;
    v16 = 16 * a2;
    v17 = ((uint64_t)a2 << 6) | 0x10;
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    v19 = a3 - (uint64_t)a2;
    do
    {
      if (a1[4].n128_u8[8])
      {
        v20 = (_WORD *)(a1[10].n128_u64[0] + v16);
        a7.i16[0] = v20[3];
        v21 = a1[3].n128_f32[0];
        v22 = a1[3].n128_f32[1];
        a10.i16[0] = v20[4];
        LOWORD(a11) = v20[5];
        *(float *)&v23 = (float)LODWORD(a11);
        v24 = a1[3].n128_f32[2];
        v25.i32[3] = 0;
        v25.f32[0] = (float)a7.u32[0] / v21;
        v25.f32[1] = (float)a10.u32[0] / v22;
        v25.f32[2] = *(float *)&v23 / v24;
        a10 = (float32x4_t)a1[1];
        v26 = vaddq_f32(a10, v25);
        LOWORD(v23) = *v20;
        *(float *)&v27 = (float)v23;
        *(float *)&v28 = *(float *)&v27 / v21;
        LOWORD(v27) = v20[1];
        *(float *)&v29 = (float)v27;
        a9 = *(float *)&v29 / v22;
        LOWORD(v29) = v20[2];
        a11 = (float)v29;
        v25.i32[3] = 0;
        v25.i64[0] = __PAIR64__(LODWORD(a9), v28);
        v25.f32[2] = a11 / v24;
        v30 = vaddq_f32(a10, v25);
      }
      else
      {
        v31 = (float32x4_t *)(a1[6].n128_u64[0] + v17);
        v30 = v31[-1];
        v26 = *v31;
      }
      a7 = vmulq_f32(vaddq_f32(v26, v30), v18);
      a7.i32[3] = 0;
      v15 = vaddq_f32(v15, a7);
      v16 += 16;
      v17 += 64;
      --v19;
    }
    while (v19);
    v32 = vmulq_n_f32(v15, 1.0 / (float)v13);
    v57 = v32;
    v33 = a4;
    v34 = v57.f32[a4];
    v35 = 16 * a2;
    v36 = ((uint64_t)a2 << 6) | 0x10;
    v37 = a3 - (uint64_t)a2;
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    v39 = a2;
    v12 = a2;
    do
    {
      if (a1[4].n128_u8[8])
      {
        v40 = (_WORD *)(a1[10].n128_u64[0] + v35);
        v32.i16[0] = v40[3];
        v41 = a1[3].n128_f32[0];
        v42 = a1[3].n128_f32[1];
        v30.i16[0] = v40[4];
        LOWORD(a9) = v40[5];
        *(float *)&v43 = (float)LODWORD(a9);
        v44 = a1[3].n128_f32[2];
        v45.i32[3] = 0;
        v45.f32[0] = (float)v32.u32[0] / v41;
        v45.f32[1] = (float)v30.u32[0] / v42;
        v45.f32[2] = *(float *)&v43 / v44;
        v30 = (float32x4_t)a1[1];
        v46 = vaddq_f32(v30, v45);
        LOWORD(v43) = *v40;
        *(float *)&v47 = (float)v43;
        *(float *)&v48 = *(float *)&v47 / v41;
        LOWORD(v47) = v40[1];
        *(float *)&v49 = (float)v47;
        *(float *)&v50 = *(float *)&v49 / v42;
        LOWORD(v49) = v40[2];
        a9 = (float)v49;
        v45.i32[3] = 0;
        v45.i64[0] = __PAIR64__(v50, v48);
        v45.f32[2] = a9 / v44;
        v51 = vaddq_f32(v30, v45);
      }
      else
      {
        v52 = (float32x4_t *)(a1[6].n128_u64[0] + v36);
        v51 = v52[-1];
        v46 = *v52;
      }
      v32 = vmulq_f32(vaddq_f32(v46, v51), v38);
      v32.i32[3] = 0;
      v56 = v32;
      v32.i32[0] = v56.i32[v33];
      if (v32.f32[0] > v34)
      {
        v32.i64[0] = sub_1B21CB91C((uint64_t)a1, v39, v12).n128_u64[0];
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        ++v12;
      }
      ++v39;
      v35 += 16;
      v36 += 64;
      --v37;
    }
    while (v37);
  }
  if (v12 >= ~(v13 / 3) + a3 || v12 <= v13 / 3 + a2)
    return (a2 + (v13 >> 1));
  else
    return v12;
}

float32x4_t sub_1B21CB4B0(float32x4_t *a1, int a2, float32x4_t *a3)
{
  _WORD *v3;
  float32x4_t result;

  if (a1[4].i8[8])
  {
    v3 = (_WORD *)(a1[12].i64[0] + 16 * a2);
    result = vmulq_f32(a1[3], vsubq_f32(*a3, a1[1]));
    *v3 = (int)result.f32[0] & 0xFFFE;
    v3[1] = (int)result.f32[1] & 0xFFFE;
    result.i32[0] = result.i32[2];
    v3[2] = (int)result.f32[2] & 0xFFFE;
  }
  else
  {
    result = *a3;
    *(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6)) = *a3;
  }
  return result;
}

float32x4_t sub_1B21CB51C(float32x4_t *a1, int a2, float32x4_t *a3)
{
  _WORD *v3;
  float32x4_t result;

  if (a1[4].i8[8])
  {
    v3 = (_WORD *)(a1[12].i64[0] + 16 * a2);
    result = vmulq_f32(a1[3], vsubq_f32(*a3, a1[1]));
    v3[3] = (int)(float)(result.f32[0] + 1.0) | 1;
    v3[4] = (int)(float)(result.f32[1] + 1.0) | 1;
    result.f32[0] = result.f32[2] + 1.0;
    v3[5] = (int)(float)(result.f32[2] + 1.0) | 1;
  }
  else
  {
    result = *a3;
    *(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6) + 16) = *a3;
  }
  return result;
}

float32x4_t sub_1B21CB598(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  float32x4_t *v12;
  _WORD v13[3];
  _WORD v14[3];

  if (a1[4].i8[8])
  {
    v4 = 0;
    v5 = a1[1];
    v6 = a1[3];
    v7 = vmulq_f32(v6, vsubq_f32(*a3, v5));
    v14[0] = (int)v7.f32[0] & 0xFFFE;
    v14[1] = (int)v7.f32[1] & 0xFFFE;
    v14[2] = (int)v7.f32[2] & 0xFFFE;
    result = vmulq_f32(v6, vsubq_f32(*a4, v5));
    v13[0] = (int)(float)(result.f32[0] + 1.0) | 1;
    v13[1] = (int)(float)(result.f32[1] + 1.0) | 1;
    result.f32[0] = result.f32[2] + 1.0;
    v13[2] = (int)(float)(result.f32[2] + 1.0) | 1;
    v9 = a1[12].i64[0] + 16 * a2;
    do
    {
      v10 = (unsigned __int16)v14[v4];
      if (*(unsigned __int16 *)(v9 + v4 * 2) > v10)
        *(_WORD *)(v9 + v4 * 2) = v10;
      v11 = (unsigned __int16)v13[v4];
      if (*(unsigned __int16 *)(v9 + v4 * 2 + 6) < v11)
        *(_WORD *)(v9 + v4 * 2 + 6) = v11;
      ++v4;
    }
    while (v4 != 3);
  }
  else
  {
    *(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6)) = vminq_f32(*(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6)), *a3);
    v12 = (float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6));
    result = vmaxq_f32(v12[1], *a4);
    v12[1] = result;
  }
  return result;
}

void sub_1B21CB6B8(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  int v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a1 + 192);
  v6 = v5 + 16 * a2;
  v7 = *(_DWORD *)(v6 + 12);
  if (v7 < 0)
    v8 = -v7;
  else
    v8 = 1;
  v9 = v5 + 16 * a3;
  v10 = *(_DWORD *)(v9 + 12);
  if (v10 < 0)
    v11 = -v10;
  else
    v11 = 1;
  if (v8 <= 0x80)
  {
    v13 = a2;
    v14 = *(_DWORD *)(a1 + 220);
    v15 = v14;
    if (v14 == *(_DWORD *)(a1 + 224))
    {
      v16 = 2 * v14;
      if (!v14)
        v16 = 1;
      if (v14 < v16)
      {
        v38 = v16;
        v39 = a2;
        if (v16)
        {
          v17 = sub_1B21FF5F0(32 * v16, 16);
          v14 = *(_DWORD *)(a1 + 220);
        }
        else
        {
          v17 = 0;
        }
        if (v14 >= 1)
        {
          v18 = 0;
          v19 = 32 * v14;
          do
          {
            v20 = (_OWORD *)(v17 + v18);
            v21 = (_OWORD *)(*(_QWORD *)(a1 + 232) + v18);
            v22 = v21[1];
            *v20 = *v21;
            v20[1] = v22;
            v18 += 32;
          }
          while (v19 != v18);
        }
        v23 = *(_QWORD *)(a1 + 232);
        if (v23 && *(_BYTE *)(a1 + 240))
          sub_1B21FF5FC(v23);
        *(_BYTE *)(a1 + 240) = 1;
        *(_QWORD *)(a1 + 232) = v17;
        v13 = v39;
        *(_DWORD *)(a1 + 224) = v38;
        v14 = *(_DWORD *)(a1 + 220);
      }
    }
    *(_DWORD *)(a1 + 220) = v14 + 1;
    v24 = *(_QWORD *)(a1 + 232) + 32 * v15;
    *(_WORD *)v24 = *(_WORD *)v6;
    *(_WORD *)(v24 + 2) = *(_WORD *)(v6 + 2);
    *(_WORD *)(v24 + 4) = *(_WORD *)(v6 + 4);
    v25 = (_WORD *)(v5 + 16 * v13);
    *(_WORD *)(v24 + 6) = v25[3];
    *(_WORD *)(v24 + 8) = v25[4];
    *(_WORD *)(v24 + 10) = v25[5];
    *(_DWORD *)(v24 + 12) = a2;
    *(_DWORD *)(v24 + 16) = v8;
  }
  if (v11 <= 128)
  {
    v26 = *(_DWORD *)(a1 + 220);
    v27 = v26;
    if (v26 == *(_DWORD *)(a1 + 224))
    {
      v28 = v26 ? 2 * v26 : 1;
      if (v26 < v28)
      {
        if (v28)
        {
          v29 = sub_1B21FF5F0(32 * v28, 16);
          v26 = *(_DWORD *)(a1 + 220);
        }
        else
        {
          v29 = 0;
        }
        if (v26 >= 1)
        {
          v30 = 0;
          v31 = 32 * v26;
          do
          {
            v32 = (_OWORD *)(v29 + v30);
            v33 = (_OWORD *)(*(_QWORD *)(a1 + 232) + v30);
            v34 = v33[1];
            *v32 = *v33;
            v32[1] = v34;
            v30 += 32;
          }
          while (v31 != v30);
        }
        v35 = *(_QWORD *)(a1 + 232);
        if (v35 && *(_BYTE *)(a1 + 240))
          sub_1B21FF5FC(v35);
        *(_BYTE *)(a1 + 240) = 1;
        *(_QWORD *)(a1 + 232) = v29;
        *(_DWORD *)(a1 + 224) = v28;
        v26 = *(_DWORD *)(a1 + 220);
      }
    }
    *(_DWORD *)(a1 + 220) = v26 + 1;
    v36 = *(_QWORD *)(a1 + 232) + 32 * v27;
    *(_WORD *)v36 = *(_WORD *)v9;
    *(_WORD *)(v36 + 2) = *(_WORD *)(v9 + 2);
    *(_WORD *)(v36 + 4) = *(_WORD *)(v9 + 4);
    v37 = (_WORD *)(v5 + 16 * a3);
    *(_WORD *)(v36 + 6) = v37[3];
    *(_WORD *)(v36 + 8) = v37[4];
    *(_WORD *)(v36 + 10) = v37[5];
    *(_DWORD *)(v36 + 12) = a3;
    *(_DWORD *)(v36 + 16) = v11;
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 220);
}

__n128 sub_1B21CB91C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  __n128 *v6;
  __n128 v7;
  __n128 v8;
  __n128 *v9;
  __n128 v10;
  __n128 v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 160);
    result = *(__n128 *)(v3 + 16 * a2);
    *(_OWORD *)(v3 + 16 * a2) = *(_OWORD *)(v3 + 16 * a3);
    *(__n128 *)(*(_QWORD *)(a1 + 160) + 16 * a3) = result;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = (__n128 *)(v5 + ((uint64_t)a2 << 6));
    v7 = *v6;
    v8 = v6[1];
    v13 = v6[2];
    v14 = v6[3];
    v9 = (__n128 *)(v5 + ((uint64_t)a3 << 6));
    v10 = v9[1];
    *v6 = *v9;
    v6[1] = v10;
    v11 = v9[3];
    v6[2] = v9[2];
    v6[3] = v11;
    v12 = (__n128 *)(*(_QWORD *)(a1 + 96) + ((uint64_t)a3 << 6));
    *v12 = v7;
    v12[1] = v8;
    result = v13;
    v12[2] = v13;
    v12[3] = v14;
  }
  return result;
}

uint64_t sub_1B21CB9C8(uint64_t result, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  unsigned __int16 v10[3];
  unsigned __int16 v11[3];

  if (!*(_BYTE *)(result + 72))
    return sub_1B21CBDE0(result, a2, a3->f32, a4->f32);
  v4 = *(float32x4_t *)(result + 16);
  v5 = *(float32x4_t *)(result + 32);
  v6 = *(float32x4_t *)(result + 48);
  v7 = vmulq_f32(v6, vsubq_f32(vminq_f32(vmaxq_f32(*a3, v4), v5), v4));
  v11[0] = (int)v7.f32[0] & 0xFFFE;
  v11[1] = (int)v7.f32[1] & 0xFFFE;
  v11[2] = (int)v7.f32[2] & 0xFFFE;
  v8 = vmulq_f32(v6, vsubq_f32(vminq_f32(vmaxq_f32(*a4, v4), v5), v4));
  v10[0] = (int)(float)(v8.f32[0] + 1.0) | 1;
  v10[1] = (int)(float)(v8.f32[1] + 1.0) | 1;
  v10[2] = (int)(float)(v8.f32[2] + 1.0) | 1;
  v9 = *(_DWORD *)(result + 208);
  switch(v9)
  {
    case 2:
      return sub_1B21CBCDC(result, *(unsigned __int16 **)(result + 192), a2, v11, v10);
    case 1:
      return sub_1B21CBC0C(result, a2, v11, v10);
    case 0:
      return sub_1B21CBAF0(result, a2, v11, v10, 0, *(_DWORD *)(result + 68));
  }
  return result;
}

uint64_t sub_1B21CBAF0(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5, int a6)
{
  int v7;
  int v11;
  unsigned __int16 *v12;
  int v18;
  int v19;

  if (a5 < a6)
  {
    v7 = a5;
    v11 = 0;
    v12 = (unsigned __int16 *)(*(_QWORD *)(result + 192) + 16 * a5);
    while (1)
    {
      v18 = *a3 <= v12[3]
         && *a4 >= *v12
         && a3[2] <= v12[5]
         && a4[2] >= v12[2]
         && a3[1] <= v12[4]
         && a4[1] >= v12[1];
      v19 = *((_DWORD *)v12 + 3);
      if (v19 < 0 || !v18)
      {
        if (((v19 < 0) & ~v18) != 0)
        {
          v12 += 8 * -v19;
          v7 -= v19;
          goto LABEL_27;
        }
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, v19 >> 21, v19 & 0x1FFFFF);
      }
      v12 += 8;
      ++v7;
LABEL_27:
      ++v11;
      if (v7 >= a6)
        goto LABEL_30;
    }
  }
  v11 = 0;
LABEL_30:
  if (dword_1EEFD59A8 < v11)
    dword_1EEFD59A8 = v11;
  return result;
}

uint64_t sub_1B21CBC0C(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int16 *v11;

  v4 = *(_DWORD *)(result + 220);
  if (v4 >= 1)
  {
    v8 = result;
    v9 = 0;
    for (i = 0; i < v4; ++i)
    {
      v11 = (unsigned __int16 *)(*(_QWORD *)(v8 + 232) + v9);
      result = a3[1];
      if (*a3 <= v11[3]
        && *a4 >= *v11
        && a3[2] <= v11[5]
        && a4[2] >= v11[2]
        && result <= v11[4]
        && a4[1] >= v11[1])
      {
        result = sub_1B21CBAF0(v8, a2, a3, a4, *((_DWORD *)v11 + 3), *((_DWORD *)v11 + 4) + *((_DWORD *)v11 + 3));
        v4 = *(_DWORD *)(v8 + 220);
      }
      v9 += 32;
    }
  }
  return result;
}

uint64_t sub_1B21CBCDC(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v9;
  unsigned int v10;
  int v11;

  v9 = result;
  while (*a4 <= a2[3]
       && *a5 >= *a2
       && a4[2] <= a2[5]
       && a5[2] >= a2[2]
       && a4[1] <= a2[4]
       && a5[1] >= a2[1])
  {
    v10 = *((_DWORD *)a2 + 3);
    if ((v10 & 0x80000000) == 0)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 16))(a3, v10 >> 21, v10 & 0x1FFFFF);
    result = sub_1B21CBCDC(v9, a2 + 8, a3, a4, a5);
    v11 = *((_DWORD *)a2 + 7);
    if (v11 >= 0)
      a2 += 16;
    else
      a2 += 8 * -v11 + 8;
  }
  return result;
}

uint64_t sub_1B21CBDE0(uint64_t result, uint64_t a2, float *a3, float *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (*(int *)(result + 68) >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(result + 128);
    while (1)
    {
      v11 = *a3 <= *(float *)(v10 + 16) && *a4 >= *(float *)v10;
      if (a3[2] <= *(float *)(v10 + 24))
      {
        if (a4[2] < *(float *)(v10 + 8))
          v11 = 0;
      }
      else
      {
        v11 = 0;
      }
      if (a3[1] <= *(float *)(v10 + 20) && a4[1] >= *(float *)(v10 + 4))
      {
        v14 = *(_DWORD *)(v10 + 32);
        v15 = v14 == -1;
        v12 = v14 == -1;
        if (v15 && v11)
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(v10 + 36), *(unsigned int *)(v10 + 40));
LABEL_21:
          v10 += 64;
          ++v9;
          goto LABEL_22;
        }
      }
      else
      {
        v11 = 0;
        v12 = *(_DWORD *)(v10 + 32) == -1;
      }
      if (v12 || v11)
        goto LABEL_21;
      v13 = *(int *)(v10 + 32);
      v10 += v13 << 6;
      v9 += v13;
LABEL_22:
      ++v8;
      if (v9 >= *(_DWORD *)(v7 + 68))
        goto LABEL_25;
    }
  }
  v8 = 0;
LABEL_25:
  if (dword_1EEFD59A8 < v8)
    dword_1EEFD59A8 = v8;
  return result;
}

uint64_t sub_1B21CBF34(uint64_t result, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v25;
  int v26;
  int v27;
  float *v28;
  float32x4_t *v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float32x4_t v39;
  BOOL v40;
  char v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v48;
  float v49;
  float v50;
  _BOOL4 v52;
  BOOL v53;
  uint64_t v54;
  __int32 v55;
  BOOL v56;
  float *v57;
  float *v58;
  uint64_t v59;
  float32x4_t v60;
  float *v61;
  float32x4_t v62;
  __n128 v63;
  _OWORD v64[2];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v13 = *a3;
  v14 = *a4;
  v15 = vsubq_f32(*a4, *a3);
  v15.i32[3] = 0;
  v16 = (int8x16_t)vmulq_f32(v15, v15);
  v17 = vmulq_n_f32(v15, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0]));
  if (v17.f32[1] == 0.0)
    v18 = 1.0e18;
  else
    v18 = 1.0 / v17.f32[1];
  if (v17.f32[2] == 0.0)
    v19 = 1.0e18;
  else
    v19 = 1.0 / v17.f32[2];
  if (v17.f32[0] == 0.0)
    v20 = 1.0e18;
  else
    v20 = 1.0 / v17.f32[0];
  if (*(int *)(result + 68) >= 1)
  {
    v25 = result;
    v26 = 0;
    v27 = 0;
    v28 = (float *)&v64[v18 >= 0.0] + 1;
    v29 = *(float32x4_t **)(result + 128);
    v30 = (int8x16_t)vmulq_f32(v17, v15);
    a13.n128_u64[0] = (unint64_t)vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    v31 = vaddq_f32(vmaxq_f32(v13, v14), *a6);
    v32 = vaddq_f32(vminq_f32(v13, v14), *a5);
    v33 = v32.f32[2];
    v34 = v31.f32[2];
    v35 = v32.f32[1];
    v36 = v31.f32[1];
    v37 = (float *)&v64[v19 < 0.0] + 2;
    v38 = (float *)&v64[v19 >= 0.0] + 2;
    while (1)
    {
      v39 = vsubq_f32(v29[1], *a5);
      v64[0] = vsubq_f32(*v29, *a6);
      v64[1] = v39;
      v40 = v32.f32[0] <= v29[1].f32[0] && v31.f32[0] >= v29->f32[0];
      if (v33 <= v29[1].f32[2])
      {
        if (v34 < v29->f32[2])
          v40 = 0;
      }
      else
      {
        v40 = 0;
      }
      if (v35 > v29[1].f32[1])
        goto LABEL_36;
      v41 = !v40;
      if (v36 < v29->f32[1])
        v41 = 1;
      if ((v41 & 1) != 0)
        goto LABEL_36;
      v42 = a3->f32[1];
      v43 = v20 * (float)(*(float *)&v64[v20 < 0.0] - a3->f32[0]);
      v44 = v20 * (float)(*(float *)&v64[v20 >= 0.0] - a3->f32[0]);
      v45 = v18 * (float)(*((float *)&v64[v18 < 0.0] + 1) - v42);
      v46 = v18 * (float)(*v28 - v42);
      if (v43 > v46 || v45 > v44)
        goto LABEL_36;
      if (v45 > v43)
        v43 = v45;
      if (v46 < v44)
        v44 = v46;
      v48 = a3->f32[2];
      v49 = v19 * (float)(*v37 - v48);
      v50 = v19 * (float)(*v38 - v48);
      if (v43 <= v50 && v49 <= v44)
      {
        if (v49 > v43)
          v43 = v49;
        if (v50 < v44)
          v44 = v50;
        v52 = v43 < a13.n128_f32[0];
        if (v44 <= 0.0)
          v52 = 0;
        v55 = v29[2].i32[0];
        v56 = v55 == -1;
        v53 = v55 == -1;
        if (v56 && v52)
        {
          v58 = v37;
          v59 = a2;
          v61 = v28;
          v62 = v31;
          v63 = a13;
          v60 = v32;
          v57 = v38;
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, v29[2].u32[1], v29[2].u32[2]);
          v38 = v57;
          v37 = v58;
          v32 = v60;
          v31 = v62;
          a13 = v63;
          v28 = v61;
          a2 = v59;
LABEL_50:
          v29 += 4;
          ++v27;
          goto LABEL_51;
        }
      }
      else
      {
LABEL_36:
        v52 = 0;
        v53 = v29[2].i32[0] == -1;
      }
      if (v53 || v52)
        goto LABEL_50;
      v54 = v29[2].i32[0];
      v29 += 4 * v54;
      v27 += v54;
LABEL_51:
      ++v26;
      if (v27 >= *(_DWORD *)(v25 + 68))
        goto LABEL_54;
    }
  }
  v26 = 0;
LABEL_54:
  if (dword_1EEFD59A8 < v26)
    dword_1EEFD59A8 = v26;
  return result;
}

float32x4_t *sub_1B21CC294(float32x4_t *result, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, int a7, uint64_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float v13;
  int v14;
  float32x4_t *v16;
  int v17;
  int8x16_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  float32x2_t v35;
  int32x2_t v36;
  unsigned __int16 *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float *v40;
  float *v41;
  float *v42;
  float *v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  BOOL v54;
  int v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  float32x4_t v60;
  float32x4_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  float *v84;
  float32x4_t *v85;
  float32x4_t *v86;
  __int32 v87;
  unsigned int v88;
  float32x4_t *v89;
  unsigned int v90;
  unsigned int v91;
  float32x4_t *v92;
  float v93;
  float32x4_t v94[2];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  v9 = *a3;
  v10 = vsubq_f32(*a4, *a3);
  v10.i32[3] = 0;
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  v12 = vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]));
  if (v12.f32[2] == 0.0)
    v13 = 1.0e18;
  else
    v13 = 1.0 / v12.f32[2];
  if (a7 < (int)a8)
  {
    v14 = a7;
    v16 = result;
    v17 = 0;
    v18 = (int8x16_t)vmulq_f32(v12, v10);
    LODWORD(v19) = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).u32[0];
    v20 = vminq_f32(v9, v8);
    v21 = vmaxq_f32(v9, v8);
    v22 = result[1];
    v23 = result[2];
    v24 = result[3];
    v25 = vmulq_f32(v24, vsubq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v20, *a5), v22), v23), v22));
    v26 = (int)v25.f32[0] & 0xFFFE;
    v27 = (int)v25.f32[1] & 0xFFFE;
    result = (float32x4_t *)((int)v25.f32[2] & 0xFFFE);
    _Q2 = vmulq_f32(v24, vsubq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v21, *a6), v22), v23), v22));
    v29 = (int)(float)(_Q2.f32[0] + 1.0) | 1;
    v30 = (int)(float)(_Q2.f32[1] + 1.0) | 1u;
    v31 = (int)(float)(_Q2.f32[2] + 1.0) | 1;
    __asm { FMOV            V2.2S, #1.0 }
    v35 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v12.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v12.f32));
    v36 = vcltz_f32(v35);
    v37 = (unsigned __int16 *)(v16[12].i64[0] + 16 * v14);
    v38 = &v94[v36.i8[0] & 1];
    v39 = &v94[(v36.i8[0] & 1) == 0];
    v40 = &v94[v36.i8[4] & 1].f32[1];
    v41 = &v94[(v36.i8[4] & 1) == 0].f32[1];
    v42 = &v94[v13 < 0.0].f32[2];
    v43 = &v94[v13 >= 0.0].f32[2];
    v44 = v35.f32[1];
    v93 = v19;
    v92 = a3;
    v90 = v29;
    v91 = (int)v25.f32[2] & 0xFFFE;
    v89 = a5;
    v88 = v31;
    v87 = v35.i32[0];
    v85 = v39;
    v86 = v38;
    v83 = v41;
    v84 = v40;
    while (1)
    {
      v45 = *v37;
      v46 = v37[2];
      v47 = v37[1];
      v48 = *((_DWORD *)v37 + 3);
      if (v26 > v37[3]
        || v29 < v45
        || result > v37[5]
        || v31 < v46
        || v27 > v37[4]
        || v30 < v47)
      {
        goto LABEL_22;
      }
      v56 = v16[3].f32[0];
      v57 = v16[3].f32[1];
      v58 = v16[3].f32[2];
      *(float *)&v59 = (float)v46 / v58;
      v60.i32[3] = 0;
      v60.f32[0] = (float)v45 / v56;
      v60.f32[1] = (float)v47 / v57;
      v60.f32[2] = *(float *)&v59;
      v61 = v16[1];
      v94[0] = vaddq_f32(v61, v60);
      LOWORD(v59) = v37[3];
      *(float *)&v62 = (float)v59;
      *(float *)&v63 = *(float *)&v62 / v56;
      LOWORD(v62) = v37[4];
      *(float *)&v64 = (float)v62;
      *(float *)&v65 = *(float *)&v64 / v57;
      LOWORD(v64) = v37[5];
      *(float *)&v66 = (float)v64 / v58;
      v67.i64[0] = __PAIR64__(v65, v63);
      v67.i64[1] = v66;
      v68 = vsubq_f32(vaddq_f32(v61, v67), *a5);
      v94[0] = vsubq_f32(v94[0], *a6);
      v94[1] = v68;
      v69 = a3->f32[1];
      v70 = v35.f32[0] * (float)(v38->f32[0] - a3->f32[0]);
      v71 = v44 * (float)(*v41 - v69);
      if (v70 > v71)
        goto LABEL_22;
      v72 = v35.f32[0] * (float)(v39->f32[0] - a3->f32[0]);
      v73 = v44 * (float)(*v40 - v69);
      if (v73 > v72)
        goto LABEL_22;
      if (v73 > v70)
        v70 = v73;
      if (v71 >= v72)
        v71 = v35.f32[0] * (float)(v39->f32[0] - a3->f32[0]);
      v74 = a3->f32[2];
      v75 = v13 * (float)(*v43 - v74);
      if (v70 <= v75 && (v76 = v13 * (float)(*v42 - v74), v76 <= v71))
      {
        if (v76 > v70)
          v70 = v76;
        if (v75 < v71)
          v71 = v75;
        v54 = v70 < v19;
        if (v71 <= 0.0)
          v54 = 0;
        if ((v48 & 0x80000000) == 0 && v54)
        {
          v77 = a8;
          v78 = a6;
          v79 = a2;
          v80 = v26;
          v81 = v27;
          v82 = v30;
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, (*((int *)v37 + 3) >> 21), *((_DWORD *)v37 + 3) & 0x1FFFFF);
          v35.i32[0] = v87;
          v31 = v88;
          v30 = v82;
          v29 = v90;
          result = (float32x4_t *)v91;
          a3 = v92;
          v27 = v81;
          v26 = v80;
          v39 = v85;
          v38 = v86;
          v19 = v93;
          a2 = v79;
          v41 = v83;
          v40 = v84;
          a5 = v89;
          a6 = v78;
          a8 = v77;
          v43 = &v94[v13 >= 0.0].f32[2];
          v42 = &v94[v13 < 0.0].f32[2];
LABEL_43:
          v37 += 8;
          ++v14;
          goto LABEL_44;
        }
      }
      else
      {
LABEL_22:
        v54 = 0;
      }
      if (v54 || (v48 & 0x80000000) == 0)
        goto LABEL_43;
      v55 = *((_DWORD *)v37 + 3);
      v37 -= 8 * v55;
      v14 -= v55;
LABEL_44:
      ++v17;
      if (v14 >= (int)a8)
        goto LABEL_47;
    }
  }
  v17 = 0;
LABEL_47:
  if (dword_1EEFD59A8 < v17)
    dword_1EEFD59A8 = v17;
  return result;
}

float32x4_t *sub_1B21CC6D0(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float32x4_t v12;
  float32x4_t v13;

  v13 = 0uLL;
  v12 = 0uLL;
  return sub_1B21CC6FC(a1, a2, a3, a4, &v13, &v12, a5, a6, a7, a8, a9, a10, a11);
}

float32x4_t *sub_1B21CC6FC(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  if (a1[4].i8[8])
    return sub_1B21CC294(a1, a2, a3, a4, a5, a6, 0, a1[4].u32[1]);
  else
    return (float32x4_t *)sub_1B21CBF34((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1B21CC714(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _DWORD *v23;
  _BYTE *v24;
  _DWORD *v25;
  _DWORD *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int8x8_t *v41;
  int8x8_t *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 220);
  sub_1B21CAB7C(a2);
  v7 = *(_DWORD *)(a1 + 68);
  if (a4)
  {
    v8 = 0;
    *(_DWORD *)(a2 + 68) = bswap32(v7);
    v9 = a1 + 19;
    do
    {
      v10 = (_BYTE *)(a2 + 19 + v8);
      *(v10 - 3) = *(_BYTE *)(v9 + v8);
      *(v10 - 2) = *(_BYTE *)(v9 + v8 - 1);
      *(v10 - 1) = *(_BYTE *)(v9 + v8 - 2);
      *v10 = *(_BYTE *)(v9 + v8 - 3);
      v8 += 4;
    }
    while (v8 != 16);
    v11 = 0;
    v12 = a1 + 35;
    do
    {
      v13 = (_BYTE *)(a2 + 35 + v11);
      *(v13 - 3) = *(_BYTE *)(v12 + v11);
      *(v13 - 2) = *(_BYTE *)(v12 + v11 - 1);
      *(v13 - 1) = *(_BYTE *)(v12 + v11 - 2);
      *v13 = *(_BYTE *)(v12 + v11 - 3);
      v11 += 4;
    }
    while (v11 != 16);
    v14 = 0;
    v15 = a1 + 51;
    do
    {
      v16 = (_BYTE *)(a2 + 51 + v14);
      *(v16 - 3) = *(_BYTE *)(v15 + v14);
      *(v16 - 2) = *(_BYTE *)(v15 + v14 - 1);
      *(v16 - 1) = *(_BYTE *)(v15 + v14 - 2);
      *v16 = *(_BYTE *)(v15 + v14 - 3);
      v14 += 4;
    }
    while (v14 != 16);
    *(_DWORD *)(a2 + 208) = bswap32(*(_DWORD *)(a1 + 208));
    v17 = bswap32(*(_DWORD *)(a1 + 248));
  }
  else
  {
    *(_DWORD *)(a2 + 68) = v7;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 208) = *(_DWORD *)(a1 + 208);
    v17 = *(_DWORD *)(a1 + 248);
  }
  *(_DWORD *)(a2 + 248) = v17;
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  v18 = a2 + 256;
  v19 = *(unsigned int *)(a1 + 68);
  v20 = (int)v19;
  if (*(_BYTE *)(a1 + 72))
  {
    v22 = (uint64_t *)(a2 + 192);
    v21 = *(_QWORD *)(a2 + 192);
    if (v21 && *(_BYTE *)(a2 + 200))
      sub_1B21FF5FC(v21);
    v23 = (_DWORD *)(a2 + 180);
    v24 = (_BYTE *)(a2 + 200);
    v25 = (_DWORD *)(a2 + 184);
    *(_QWORD *)(a2 + 192) = v18;
    if ((a4 & 1) != 0)
    {
      if ((int)v19 >= 1)
      {
        v26 = (_DWORD *)(a2 + 268);
        v27 = (unsigned __int16 *)(*(_QWORD *)(a1 + 192) + 6);
        do
        {
          *((_WORD *)v26 - 6) = bswap32(*(v27 - 3)) >> 16;
          *((_WORD *)v26 - 5) = bswap32(*(v27 - 2)) >> 16;
          *((_WORD *)v26 - 4) = bswap32(*(v27 - 1)) >> 16;
          *((_WORD *)v26 - 3) = bswap32(*v27) >> 16;
          *((_WORD *)v26 - 2) = bswap32(v27[1]) >> 16;
          *((_WORD *)v26 - 1) = bswap32(v27[2]) >> 16;
          *v26 = bswap32(*(_DWORD *)(v27 + 3));
          v26 += 4;
          v27 += 8;
          --v19;
        }
        while (v19);
      }
    }
    else if ((int)v19 >= 1)
    {
      v43 = (_DWORD *)(a2 + 268);
      v44 = *(_QWORD *)(a1 + 192) + 6;
      do
      {
        *((_WORD *)v43 - 6) = *(_WORD *)(v44 - 6);
        *((_WORD *)v43 - 5) = *(_WORD *)(v44 - 4);
        *((_WORD *)v43 - 4) = *(_WORD *)(v44 - 2);
        *((_WORD *)v43 - 3) = *(_WORD *)v44;
        *((_WORD *)v43 - 2) = *(_WORD *)(v44 + 2);
        *((_WORD *)v43 - 1) = *(_WORD *)(v44 + 4);
        *v43 = *(_DWORD *)(v44 + 6);
        v43 += 4;
        v44 += 16;
        --v19;
      }
      while (v19);
    }
    v45 = 16 * v20;
    goto LABEL_42;
  }
  v22 = (uint64_t *)(a2 + 128);
  v28 = *(_QWORD *)(a2 + 128);
  if (v28 && *(_BYTE *)(a2 + 136))
    sub_1B21FF5FC(v28);
  *(_DWORD *)(a2 + 120) = v19;
  v25 = (_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 116) = v19;
  v23 = (_DWORD *)(a2 + 116);
  *(_BYTE *)(a2 + 136) = 0;
  v24 = (_BYTE *)(a2 + 136);
  *(_QWORD *)(a2 + 128) = v18;
  if ((a4 & 1) == 0)
  {
    if ((int)v19 >= 1)
    {
      v46 = 0;
      v47 = *(_QWORD *)(a1 + 128);
      v33 = a2 + 256;
      do
      {
        *(_OWORD *)(v33 + v46) = *(_OWORD *)(v47 + v46);
        *(_OWORD *)(*v22 + v46 + 16) = *(_OWORD *)(*(_QWORD *)(a1 + 128) + v46 + 16);
        v47 = *(_QWORD *)(a1 + 128);
        v33 = *v22;
        v48 = *v22 + v46;
        *(_QWORD *)(v48 + 32) = *(_QWORD *)(v47 + v46 + 32);
        *(_DWORD *)(v48 + 40) = *(_DWORD *)(v47 + v46 + 40);
        v46 += 64;
      }
      while (v19 << 6 != v46);
      goto LABEL_40;
    }
LABEL_39:
    v33 = a2 + 256;
    goto LABEL_40;
  }
  if ((int)v19 < 1)
    goto LABEL_39;
  v29 = 0;
  v30 = *(_QWORD *)(a1 + 128);
  v31 = 3;
  v32 = 19;
  v33 = a2 + 256;
  do
  {
    v34 = 0;
    v35 = v30 + v31;
    do
    {
      v36 = (_BYTE *)(v33 + v31 + v34);
      *(v36 - 3) = *(_BYTE *)(v35 + v34);
      *(v36 - 2) = *(_BYTE *)(v35 + v34 - 1);
      *(v36 - 1) = *(_BYTE *)(v35 + v34 - 2);
      *v36 = *(_BYTE *)(v35 + v34 - 3);
      v34 += 4;
    }
    while (v34 != 16);
    v37 = 0;
    v38 = *v22 + v32;
    v39 = *(_QWORD *)(a1 + 128) + v32;
    do
    {
      v40 = (_BYTE *)(v38 + v37);
      *(v40 - 3) = *(_BYTE *)(v39 + v37);
      *(v40 - 2) = *(_BYTE *)(v39 + v37 - 1);
      *(v40 - 1) = *(_BYTE *)(v39 + v37 - 2);
      *v40 = *(_BYTE *)(v39 + v37 - 3);
      v37 += 4;
    }
    while (v37 != 16);
    v30 = *(_QWORD *)(a1 + 128);
    v41 = (int8x8_t *)(v30 + (v29 << 6));
    v33 = *v22;
    v42 = (int8x8_t *)(*v22 + (v29 << 6));
    v42[4] = vrev32_s8(v41[4]);
    v42[5].i32[0] = bswap32(v41[5].u32[0]);
    ++v29;
    v31 += 64;
    v32 += 64;
  }
  while (v29 != v19);
LABEL_40:
  v45 = (uint64_t)(int)v19 << 6;
  if (*v24)
    sub_1B21FF5FC(v33);
LABEL_42:
  *v24 = 0;
  *v22 = 0;
  *v23 = 0;
  *v25 = 0;
  v49 = v18 + v45;
  v50 = *(_QWORD *)(a2 + 232);
  if (v50 && *(_BYTE *)(a2 + 240))
    sub_1B21FF5FC(v50);
  *(_QWORD *)(a2 + 232) = v49;
  v51 = *(unsigned int *)(a1 + 248);
  if ((a4 & 1) != 0)
  {
    if ((int)v51 >= 1)
    {
      v52 = (int8x8_t *)(v45 + a2 + 268);
      v53 = (unsigned __int16 *)(*(_QWORD *)(a1 + 232) + 6);
      do
      {
        v52[-2].i16[2] = bswap32(*(v53 - 3)) >> 16;
        v52[-2].i16[3] = bswap32(*(v53 - 2)) >> 16;
        v52[-1].i16[0] = bswap32(*(v53 - 1)) >> 16;
        v52[-1].i16[1] = bswap32(*v53) >> 16;
        v52[-1].i16[2] = bswap32(v53[1]) >> 16;
        v52[-1].i16[3] = bswap32(v53[2]) >> 16;
        *v52 = vrev32_s8(*(int8x8_t *)(v53 + 3));
        v52 += 4;
        v53 += 16;
        --v51;
      }
      while (v51);
    }
  }
  else if ((int)v51 >= 1)
  {
    v54 = 0;
    v55 = 0;
    v56 = *(_QWORD *)(a1 + 232);
    v57 = a2 + v45;
    do
    {
      v58 = v57 + v54;
      *(_WORD *)(v58 + 256) = *(_WORD *)(v56 + v54);
      *(_WORD *)(v58 + 258) = *(_WORD *)(v56 + v54 + 2);
      *(_WORD *)(v58 + 260) = *(_WORD *)(v56 + v54 + 4);
      *(_WORD *)(v58 + 262) = *(_WORD *)(v56 + v54 + 6);
      *(_WORD *)(v58 + 264) = *(_WORD *)(v56 + v54 + 8);
      *(_WORD *)(v58 + 266) = *(_WORD *)(v56 + v54 + 10);
      *(_QWORD *)(v57 + v54 + 268) = *(_QWORD *)(v56 + v54 + 12);
      *(_DWORD *)(v58 + 276) = 0;
      *(_QWORD *)(v58 + 280) = 0;
      ++v55;
      v54 += 32;
    }
    while (v55 < *(int *)(a1 + 248));
  }
  *(_BYTE *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_DWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a2 + 224) = 0;
  *(_QWORD *)a2 = 0;
  return 1;
}

double sub_1B21CCC98(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  __int128 v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t m;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  __int128 v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;

  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a1 + 32 + i) = *(_DWORD *)(a2 + 16 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a1 + 16 + j) = *(_DWORD *)(a2 + j);
  for (k = 0; k != 16; k += 4)
  {
    LODWORD(v7) = *(_DWORD *)(a2 + 32 + k);
    *(_DWORD *)(a1 + 48 + k) = v7;
  }
  v8 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = v8 != 0;
  v9 = *(unsigned int *)(a2 + 56);
  v10 = *(_DWORD *)(a1 + 116);
  if (v10 < (int)v9)
  {
    v11 = v10;
    if (*(_DWORD *)(a1 + 120) < (int)v9)
    {
      if ((_DWORD)v9)
      {
        v12 = sub_1B21FF5F0((uint64_t)(int)v9 << 6, 16);
        v10 = *(_DWORD *)(a1 + 116);
      }
      else
      {
        v12 = 0;
      }
      if (v10 >= 1)
      {
        v13 = 0;
        v14 = (unint64_t)v10 << 6;
        do
        {
          v15 = (_OWORD *)(v12 + v13);
          v16 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v13);
          *v15 = *v16;
          v15[1] = v16[1];
          v17 = v16[3];
          v15[2] = v16[2];
          v15[3] = v17;
          v13 += 64;
        }
        while (v14 != v13);
      }
      v18 = *(_QWORD *)(a1 + 128);
      if (v18 && *(_BYTE *)(a1 + 136))
        sub_1B21FF5FC(v18);
      *(_BYTE *)(a1 + 136) = 1;
      *(_QWORD *)(a1 + 128) = v12;
      *(_DWORD *)(a1 + 120) = v9;
    }
    v19 = v11 << 6;
    v20 = (int)v9 - v11;
    v7 = 0uLL;
    do
    {
      v21 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v19);
      v21[2] = 0uLL;
      v21[3] = 0uLL;
      *v21 = 0uLL;
      v21[1] = 0uLL;
      v19 += 64;
      --v20;
    }
    while (v20);
  }
  *(_DWORD *)(a1 + 116) = v9;
  if ((int)v9 >= 1)
  {
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a2 + 64);
    v25 = *(_QWORD *)(a1 + 128);
    do
    {
      v26 = v25 + v22;
      for (m = 16; m != 32; m += 4)
        *(_DWORD *)(v26 + m) = *(_DWORD *)(v24 + m);
      v28 = 0;
      v29 = *(_QWORD *)(a1 + 128) + v22;
      do
      {
        *(_DWORD *)(v29 + v28) = *(_DWORD *)(v24 + v28);
        v28 += 4;
      }
      while (v28 != 16);
      v25 = *(_QWORD *)(a1 + 128);
      v30 = v25 + (v23 << 6);
      *(_QWORD *)&v7 = *(_QWORD *)(v24 + 32);
      *(_QWORD *)(v30 + 32) = v7;
      *(_DWORD *)(v30 + 40) = *(_DWORD *)(v24 + 40);
      ++v23;
      v24 += 48;
      v22 += 64;
    }
    while (v23 != v9);
  }
  v31 = *(unsigned int *)(a2 + 60);
  v32 = *(_DWORD *)(a1 + 180);
  if (v32 < (int)v31)
  {
    v33 = v32;
    if (*(_DWORD *)(a1 + 184) < (int)v31)
    {
      if ((_DWORD)v31)
      {
        v34 = sub_1B21FF5F0(16 * (int)v31, 16);
        v32 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        v34 = 0;
      }
      if (v32 >= 1)
      {
        v35 = 0;
        v36 = 16 * v32;
        do
        {
          v7 = *(_OWORD *)(*(_QWORD *)(a1 + 192) + v35);
          *(_OWORD *)(v34 + v35) = v7;
          v35 += 16;
        }
        while (v36 != v35);
      }
      v37 = *(_QWORD *)(a1 + 192);
      if (v37 && *(_BYTE *)(a1 + 200))
        sub_1B21FF5FC(v37);
      *(_BYTE *)(a1 + 200) = 1;
      *(_QWORD *)(a1 + 192) = v34;
      *(_DWORD *)(a1 + 184) = v31;
    }
    v38 = 16 * v33;
    v39 = (int)v31 - v33;
    do
    {
      v40 = (_QWORD *)(*(_QWORD *)(a1 + 192) + v38);
      *v40 = 0;
      v40[1] = 0;
      v38 += 16;
      --v39;
    }
    while (v39);
  }
  *(_DWORD *)(a1 + 180) = v31;
  if ((int)v31 >= 1)
  {
    v41 = *(_QWORD *)(a2 + 72) + 6;
    v42 = *(_QWORD *)(a1 + 192) + 6;
    do
    {
      *(_DWORD *)(v42 + 6) = *(_DWORD *)(v41 + 6);
      *(_WORD *)v42 = *(_WORD *)v41;
      *(_WORD *)(v42 + 2) = *(_WORD *)(v41 + 2);
      *(_WORD *)(v42 + 4) = *(_WORD *)(v41 + 4);
      *(_WORD *)(v42 - 6) = *(_WORD *)(v41 - 6);
      *(_WORD *)(v42 - 4) = *(_WORD *)(v41 - 4);
      *(_WORD *)(v42 - 2) = *(_WORD *)(v41 - 2);
      v41 += 16;
      v42 += 16;
      --v31;
    }
    while (v31);
  }
  v43 = *(unsigned int *)(a2 + 92);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 88);
  v44 = *(_DWORD *)(a1 + 220);
  if (v44 < (int)v43 && *(_DWORD *)(a1 + 224) < (int)v43)
  {
    if ((_DWORD)v43)
    {
      v45 = sub_1B21FF5F0(32 * (int)v43, 16);
      v44 = *(_DWORD *)(a1 + 220);
    }
    else
    {
      v45 = 0;
    }
    if (v44 >= 1)
    {
      v46 = 0;
      v47 = 32 * v44;
      do
      {
        v48 = (__int128 *)(v45 + v46);
        v49 = (__int128 *)(*(_QWORD *)(a1 + 232) + v46);
        v7 = *v49;
        v50 = v49[1];
        *v48 = *v49;
        v48[1] = v50;
        v46 += 32;
      }
      while (v47 != v46);
    }
    v51 = *(_QWORD *)(a1 + 232);
    if (v51 && *(_BYTE *)(a1 + 240))
      sub_1B21FF5FC(v51);
    *(_BYTE *)(a1 + 240) = 1;
    *(_QWORD *)(a1 + 232) = v45;
    *(_DWORD *)(a1 + 224) = v43;
  }
  *(_DWORD *)(a1 + 220) = v43;
  if ((int)v43 >= 1)
  {
    v52 = (_WORD *)(*(_QWORD *)(a2 + 80) + 10);
    v53 = *(_QWORD *)(a1 + 232) + 6;
    do
    {
      *(_WORD *)v53 = v52[2];
      *(_WORD *)(v53 + 2) = v52[3];
      *(_WORD *)(v53 + 4) = v52[4];
      *(_WORD *)(v53 - 6) = *(v52 - 1);
      *(_WORD *)(v53 - 4) = *v52;
      *(_WORD *)(v53 - 2) = v52[1];
      *(_QWORD *)&v7 = *(_QWORD *)(v52 - 5);
      *(_QWORD *)(v53 + 6) = v7;
      v52 += 10;
      v53 += 32;
      --v43;
    }
    while (v43);
  }
  return *(double *)&v7;
}

double sub_1B21CD09C(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  float v5;
  uint64_t j;
  float v7;
  uint64_t k;
  __int128 v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;

  for (i = 0; i != 4; ++i)
  {
    v5 = *(double *)(a2 + 32 + 8 * i);
    *(float *)(a1 + 32 + 4 * i) = v5;
  }
  for (j = 0; j != 4; ++j)
  {
    v7 = *(double *)(a2 + 8 * j);
    *(float *)(a1 + 16 + 4 * j) = v7;
  }
  for (k = 0; k != 4; ++k)
  {
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 64 + 8 * k);
    *(float *)&v9 = *(double *)&v9;
    *(_DWORD *)(a1 + 48 + 4 * k) = v9;
  }
  v10 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 72) = v10 != 0;
  v11 = *(unsigned int *)(a2 + 104);
  v12 = *(_DWORD *)(a1 + 116);
  if (v12 < (int)v11)
  {
    v13 = v12;
    if (*(_DWORD *)(a1 + 120) < (int)v11)
    {
      if ((_DWORD)v11)
      {
        v14 = sub_1B21FF5F0((uint64_t)(int)v11 << 6, 16);
        v12 = *(_DWORD *)(a1 + 116);
      }
      else
      {
        v14 = 0;
      }
      if (v12 >= 1)
      {
        v15 = 0;
        v16 = (unint64_t)v12 << 6;
        do
        {
          v17 = (_OWORD *)(v14 + v15);
          v18 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v15);
          *v17 = *v18;
          v17[1] = v18[1];
          v19 = v18[3];
          v17[2] = v18[2];
          v17[3] = v19;
          v15 += 64;
        }
        while (v16 != v15);
      }
      v20 = *(_QWORD *)(a1 + 128);
      if (v20 && *(_BYTE *)(a1 + 136))
        sub_1B21FF5FC(v20);
      *(_BYTE *)(a1 + 136) = 1;
      *(_QWORD *)(a1 + 128) = v14;
      *(_DWORD *)(a1 + 120) = v11;
    }
    v21 = v13 << 6;
    v22 = (int)v11 - v13;
    v9 = 0uLL;
    do
    {
      v23 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v21);
      v23[2] = 0uLL;
      v23[3] = 0uLL;
      *v23 = 0uLL;
      v23[1] = 0uLL;
      v21 += 64;
      --v22;
    }
    while (v22);
  }
  *(_DWORD *)(a1 + 116) = v11;
  if ((int)v11 >= 1)
  {
    v24 = 0;
    v25 = 0;
    v26 = *(_QWORD *)(a2 + 112);
    v27 = *(_QWORD *)(a1 + 128);
    do
    {
      v28 = v27 + v24;
      for (m = 4; m != 8; ++m)
      {
        v30 = *(double *)(v26 + 8 * m);
        *(float *)(v28 + 4 * m) = v30;
      }
      v31 = 0;
      v32 = *(_QWORD *)(a1 + 128) + v24;
      do
      {
        v33 = *(double *)(v26 + 8 * v31);
        *(float *)(v32 + 4 * v31++) = v33;
      }
      while (v31 != 4);
      v27 = *(_QWORD *)(a1 + 128);
      v34 = v27 + (v25 << 6);
      *(_QWORD *)&v9 = *(_QWORD *)(v26 + 64);
      *(_QWORD *)(v34 + 32) = v9;
      *(_DWORD *)(v34 + 40) = *(_DWORD *)(v26 + 72);
      ++v25;
      v26 += 80;
      v24 += 64;
    }
    while (v25 != v11);
  }
  v35 = *(unsigned int *)(a2 + 108);
  v36 = *(_DWORD *)(a1 + 180);
  if (v36 < (int)v35)
  {
    v37 = v36;
    if (*(_DWORD *)(a1 + 184) < (int)v35)
    {
      if ((_DWORD)v35)
      {
        v38 = sub_1B21FF5F0(16 * (int)v35, 16);
        v36 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        v38 = 0;
      }
      if (v36 >= 1)
      {
        v39 = 0;
        v40 = 16 * v36;
        do
        {
          v9 = *(_OWORD *)(*(_QWORD *)(a1 + 192) + v39);
          *(_OWORD *)(v38 + v39) = v9;
          v39 += 16;
        }
        while (v40 != v39);
      }
      v41 = *(_QWORD *)(a1 + 192);
      if (v41 && *(_BYTE *)(a1 + 200))
        sub_1B21FF5FC(v41);
      *(_BYTE *)(a1 + 200) = 1;
      *(_QWORD *)(a1 + 192) = v38;
      *(_DWORD *)(a1 + 184) = v35;
    }
    v42 = 16 * v37;
    v43 = (int)v35 - v37;
    do
    {
      v44 = (_QWORD *)(*(_QWORD *)(a1 + 192) + v42);
      *v44 = 0;
      v44[1] = 0;
      v42 += 16;
      --v43;
    }
    while (v43);
  }
  *(_DWORD *)(a1 + 180) = v35;
  if ((int)v35 >= 1)
  {
    v45 = *(_QWORD *)(a2 + 120) + 6;
    v46 = *(_QWORD *)(a1 + 192) + 6;
    do
    {
      *(_DWORD *)(v46 + 6) = *(_DWORD *)(v45 + 6);
      *(_WORD *)v46 = *(_WORD *)v45;
      *(_WORD *)(v46 + 2) = *(_WORD *)(v45 + 2);
      *(_WORD *)(v46 + 4) = *(_WORD *)(v45 + 4);
      *(_WORD *)(v46 - 6) = *(_WORD *)(v45 - 6);
      *(_WORD *)(v46 - 4) = *(_WORD *)(v45 - 4);
      *(_WORD *)(v46 - 2) = *(_WORD *)(v45 - 2);
      v45 += 16;
      v46 += 16;
      --v35;
    }
    while (v35);
  }
  v47 = *(unsigned int *)(a2 + 132);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 128);
  v48 = *(_DWORD *)(a1 + 220);
  if (v48 < (int)v47 && *(_DWORD *)(a1 + 224) < (int)v47)
  {
    if ((_DWORD)v47)
    {
      v49 = sub_1B21FF5F0(32 * (int)v47, 16);
      v48 = *(_DWORD *)(a1 + 220);
    }
    else
    {
      v49 = 0;
    }
    if (v48 >= 1)
    {
      v50 = 0;
      v51 = 32 * v48;
      do
      {
        v52 = (__int128 *)(v49 + v50);
        v53 = (__int128 *)(*(_QWORD *)(a1 + 232) + v50);
        v9 = *v53;
        v54 = v53[1];
        *v52 = *v53;
        v52[1] = v54;
        v50 += 32;
      }
      while (v51 != v50);
    }
    v55 = *(_QWORD *)(a1 + 232);
    if (v55 && *(_BYTE *)(a1 + 240))
      sub_1B21FF5FC(v55);
    *(_BYTE *)(a1 + 240) = 1;
    *(_QWORD *)(a1 + 232) = v49;
    *(_DWORD *)(a1 + 224) = v47;
  }
  *(_DWORD *)(a1 + 220) = v47;
  if ((int)v47 >= 1)
  {
    v56 = (_WORD *)(*(_QWORD *)(a2 + 136) + 10);
    v57 = *(_QWORD *)(a1 + 232) + 6;
    do
    {
      *(_WORD *)v57 = v56[2];
      *(_WORD *)(v57 + 2) = v56[3];
      *(_WORD *)(v57 + 4) = v56[4];
      *(_WORD *)(v57 - 6) = *(v56 - 1);
      *(_WORD *)(v57 - 4) = *v56;
      *(_WORD *)(v57 - 2) = v56[1];
      *(_QWORD *)&v9 = *(_QWORD *)(v56 - 5);
      *(_QWORD *)(v57 + 6) = v9;
      v56 += 10;
      v57 += 32;
      --v47;
    }
    while (v47);
  }
  return *(double *)&v9;
}

const char *sub_1B21CD4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t m;
  uint64_t n;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;

  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 16 + i) = *(_DWORD *)(a1 + 32 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + j) = *(_DWORD *)(a1 + 16 + j);
  for (k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + 32 + k) = *(_DWORD *)(a1 + 48 + k);
  v9 = *(unsigned __int8 *)(a1 + 72);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 52) = v9;
  v10 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a2 + 56) = v10;
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 128));
    *(_QWORD *)(a2 + 64) = v11;
    if (v11)
    {
      v12 = *(unsigned int *)(a1 + 116);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 48, v12);
      v14 = *(_QWORD *)(a1 + 128);
      if ((int)v12 >= 1)
      {
        v15 = 0;
        v16 = *(_QWORD *)(v13 + 8);
        v17 = *(_QWORD *)(a1 + 128);
        do
        {
          for (m = 16; m != 32; m += 4)
            *(_DWORD *)(v16 + m) = *(_DWORD *)(v17 + m);
          for (n = 0; n != 16; n += 4)
            *(_DWORD *)(v16 + n) = *(_DWORD *)(v17 + n);
          v20 = v14 + (v15 << 6);
          *(_QWORD *)(v16 + 32) = *(_QWORD *)(v20 + 32);
          *(_DWORD *)(v16 + 40) = *(_DWORD *)(v20 + 40);
          ++v15;
          v16 += 48;
          v17 += 64;
        }
        while (v15 != v12);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v13, "btOptimizedBvhNodeData", 1497453121, v14);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
  }
  v21 = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 60) = v21;
  if (v21)
  {
    v22 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 192));
    *(_QWORD *)(a2 + 72) = v22;
    if (v22)
    {
      v23 = *(unsigned int *)(a1 + 180);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16, v23);
      v25 = *(_QWORD *)(a1 + 192);
      if ((int)v23 >= 1)
      {
        v26 = *(_QWORD *)(v24 + 8) + 6;
        v27 = v25 + 6;
        do
        {
          *(_DWORD *)(v26 + 6) = *(_DWORD *)(v27 + 6);
          *(_WORD *)v26 = *(_WORD *)v27;
          *(_WORD *)(v26 + 2) = *(_WORD *)(v27 + 2);
          *(_WORD *)(v26 + 4) = *(_WORD *)(v27 + 4);
          *(_WORD *)(v26 - 6) = *(_WORD *)(v27 - 6);
          *(_WORD *)(v26 - 4) = *(_WORD *)(v27 - 4);
          *(_WORD *)(v26 - 2) = *(_WORD *)(v27 - 2);
          v26 += 16;
          v27 += 16;
          --v23;
        }
        while (v23);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v24, "btQuantizedBvhNodeData", 1497453121, v25);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 72) = 0;
  }
  v28 = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 92) = v28;
  if (v28)
  {
    v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 232));
    *(_QWORD *)(a2 + 80) = v29;
    if (v29)
    {
      v30 = *(unsigned int *)(a1 + 220);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 20, v30);
      v32 = *(_QWORD *)(a1 + 232);
      if ((int)v30 >= 1)
      {
        v33 = (_WORD *)(*(_QWORD *)(v31 + 8) + 10);
        v34 = v32 + 6;
        do
        {
          v33[2] = *(_WORD *)v34;
          v33[3] = *(_WORD *)(v34 + 2);
          v33[4] = *(_WORD *)(v34 + 4);
          *(v33 - 1) = *(_WORD *)(v34 - 6);
          *v33 = *(_WORD *)(v34 - 4);
          v33[1] = *(_WORD *)(v34 - 2);
          *(_QWORD *)(v33 - 5) = *(_QWORD *)(v34 + 6);
          v33 += 10;
          v34 += 32;
          --v30;
        }
        while (v30);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v31, "btBvhSubtreeInfoData", 1497453121, v32);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 80) = 0;
  }
  return "btQuantizedBvhFloatData";
}

uint64_t sub_1B21CD7D4()
{
  return 96;
}

uint64_t sub_1B21CD7DC(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(_QWORD *)result = &off_1E63CCF60;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(float *)(result + 24) = a4;
  return result;
}

uint64_t sub_1B21CD7F4(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t result;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  _OWORD v39[4];
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;

  v41 = 0.0;
  v8 = a2[2];
  v9 = a2[6];
  v10 = vsubq_f32(a2[3], a2[7]);
  v11 = *a2;
  v12 = a2[1];
  v11.i32[3] = 0;
  v12.i32[3] = 0;
  v8.i32[3] = 0;
  v13 = a2[4];
  v14 = a2[5];
  v10.i32[3] = 0;
  v15 = vmlaq_laneq_f32(vmulq_laneq_f32(v11, v13, 2), v12, v14, 2);
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v16 = vmlaq_laneq_f32(v15, v8, v9, 2);
  v9.i32[3] = 0;
  v39[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, v13.f32[0]), v12, v14.f32[0]), v8, v9.f32[0]);
  v39[2] = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v11, *(float32x2_t *)v13.f32, 1), v12, *(float32x2_t *)v14.f32, 1), v8, *(float32x2_t *)v9.f32, 1);
  v39[3] = v16;
  v40 = vaddq_f32(vaddq_f32(vmulq_n_f32(v13, v10.f32[0]), vmulq_lane_f32(v14, *(float32x2_t *)v10.f32, 1)), vmulq_laneq_f32(v9, v10, 2));
  result = sub_1B21CDA1C(a1, &v40, &v43, &v42, &v41, *(float *)(a1 + 24));
  if ((_DWORD)result)
  {
    if (a5)
    {
      v18 = a2[4];
      v19 = a2[5];
      v20 = vmulq_f32(v18, v42);
      v21 = (int8x16_t)vmulq_f32(v42, v19);
      v22 = a2[6];
      v23 = a2[7];
      v24 = (int8x16_t)vmulq_f32(v42, v22);
      v24.i32[3] = 0;
      *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
      *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
      v24.i64[0] = 0x8000000080000000;
      v24.i64[1] = 0x8000000080000000;
      v39[0] = veorq_s8((int8x16_t)v20, v24);
      v25 = vmulq_f32(v18, v43);
      v26 = (int8x16_t)vmulq_f32(v19, v43);
      v27 = (int8x16_t)vmulq_f32(v22, v43);
      v27.i32[3] = 0;
      *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
      *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
      v28 = vmulq_n_f32(v20, v41);
      v28.i32[3] = 0;
      v38 = vaddq_f32(vaddq_f32(v23, v25), v28);
    }
    else
    {
      v29 = a2[4];
      v30 = a2[5];
      v31 = (int8x16_t)vmulq_f32(v29, v42);
      v32 = (int8x16_t)vmulq_f32(v42, v30);
      v33 = a2[6];
      v34 = (int8x16_t)vmulq_f32(v42, v33);
      v34.i32[3] = 0;
      *(float32x2_t *)v31.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)));
      v31.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0);
      v35 = vmulq_f32(v29, v43);
      v36 = (int8x16_t)vmulq_f32(v30, v43);
      v37 = (int8x16_t)vmulq_f32(v33, v43);
      v37.i32[3] = 0;
      *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)));
      *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)), 0);
      v38 = vaddq_f32(a2[7], v35);
      v39[0] = v31;
    }
    return (*(uint64_t (**)(uint64_t, _OWORD *, float32x4_t *))(*(_QWORD *)a3 + 32))(a3, v39, &v38);
  }
  return result;
}

uint64_t sub_1B21CDA1C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5, float a6)
{
  float32x4_t *v11;
  float v12;
  float v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x8_t v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  float32x4_t v35;
  uint64_t v36;
  char v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x2_t v41;
  float v42;
  int8x16_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float v52;
  float v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;

  v11 = *(float32x4_t **)(a1 + 16);
  v12 = v11[7].f32[3];
  if (v11[6].f32[3] == v12
    && v11[6].f32[2] == v11[7].f32[2]
    && v11[6].f32[1] == v11[7].f32[1]
    && v11[6].f32[0] == v11[7].f32[0]
    || v11[5].f32[3] == v12
    && v11[5].f32[2] == v11[7].f32[2]
    && v11[5].f32[1] == v11[7].f32[1]
    && v11[5].f32[0] == v11[7].f32[0])
  {
    return 0;
  }
  v13 = *(float *)(*(_QWORD *)(a1 + 8) + 48) * *(float *)(*(_QWORD *)(a1 + 8) + 32);
  v14 = v13 + a6;
  v15 = v11[5];
  v16 = vsubq_f32(v11[6], v15);
  v17 = (int8x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v16.i32[3] = 0;
  v18 = vsubq_f32(v11[7], v15);
  v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  v18.i32[3] = 0;
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v16.f32, v17, 4uLL);
  v20.i64[1] = v16.i64[0];
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
  v21.i64[1] = v18.i64[0];
  v22 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v16), vmulq_f32(v20, v18));
  v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
  v23.i64[1] = v22.u32[0];
  v24 = (int8x16_t)vmulq_f32(v23, v23);
  *(float32x2_t *)v18.f32 = vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8);
  v25 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
  v25.f32[0] = vadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v25.f32[0] >= 1.4211e-14)
    v26 = vmulq_n_f32(v23, 1.0 / sqrtf(v25.f32[0]));
  else
    v26 = (float32x4_t)xmmword_1B2244DB0;
  v27 = *a2;
  v28 = vsubq_f32(*a2, v15);
  v28.i32[3] = 0;
  v29 = (int8x16_t)vmulq_f32(v26, v28);
  *(float32x2_t *)v25.f32 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8);
  v30 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
  *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v30.f32);
  v25.f32[0] = -v30.f32[0];
  if (v30.f32[0] >= 0.0)
    v25.f32[0] = v30.f32[0];
  if (v25.f32[0] >= v14)
    return 0;
  v56 = v25.f32[0];
  v58 = *a2;
  v25.i32[0] = 0;
  v59 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v25, v30), 0), (int8x16_t)vnegq_f32(v26), (int8x16_t)v26);
  v60 = v27;
  v55 = v59;
  if (sub_1B21CDD78(a1, v11 + 5, (int8x8_t *)&v59, &v60))
  {
    v31 = v55;
    v32 = v58;
    v33 = vsubq_f32(v58, vmulq_n_f32(v55, v56));
    v33.i32[3] = 0;
    v34 = v14 * v14;
  }
  else
  {
    if ((*(int (**)(float32x4_t *))(v11->i64[0] + 200))(v11) < 1)
      return 0;
    v36 = 0;
    v37 = 0;
    v35.f32[0] = v14 * v14;
    v57 = v35;
    do
    {
      (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16), v36, &v60, &v59);
      v38 = vsubq_f32(*a2, v60);
      v38.i32[3] = 0;
      v39 = vsubq_f32(v59, v60);
      v39.i32[3] = 0;
      v40 = (int8x16_t)vmulq_f32(v38, v39);
      v41 = vadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      v42 = 0.0;
      if (v41.f32[0] > 0.0)
      {
        v43 = (int8x16_t)vmulq_f32(v39, v39);
        v44 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8));
        if ((vcgt_f32(v44, v41).u8[0] & 1) != 0)
        {
          LODWORD(v42) = vdiv_f32(v41, v44).u32[0];
          v45 = vmulq_n_f32(v39, v42);
          v45.i32[3] = 0;
          v38 = vsubq_f32(v38, v45);
        }
        else
        {
          v38 = vsubq_f32(v38, v39);
          v42 = 1.0;
        }
      }
      v46 = vmulq_n_f32(v39, v42);
      v46.i32[3] = 0;
      v47 = (int8x16_t)vaddq_f32(v60, v46);
      v48 = (int8x16_t)vmulq_f32(v38, v38);
      *(float32x2_t *)v46.f32 = vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8);
      v49 = (float32x4_t)vextq_s8(v48, v48, 8uLL);
      *(float32x2_t *)v49.f32 = vadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v49.f32);
      v58 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v57, v49), 0), v47, (int8x16_t)v58);
      if (v49.f32[0] < v57.f32[0])
        v37 = 1;
      v36 = (v36 + 1);
    }
    while ((int)v36 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16)));
    if ((v37 & 1) == 0)
      return 0;
    v32 = *a2;
    v31 = v55;
    v34 = v57.f32[0];
    v33 = v58;
  }
  v50 = vsubq_f32(v32, v33);
  v50.i32[3] = 0;
  v51 = (int8x16_t)vmulq_f32(v50, v50);
  v52 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0];
  if (v52 >= v34)
    return 0;
  if (v52 > 0.00000011921)
  {
    v54 = sqrtf(v52);
    v31 = vmulq_n_f32(v50, 1.0 / v54);
    v13 = v13 - v54;
  }
  *a4 = v31;
  *a3 = v33;
  *a5 = -v13;
  return 1;
}

uint64_t sub_1B21CDD78(uint64_t a1, float32x4_t *a2, int8x8_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x8_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float v22;
  int8x16_t v23;
  float v24;
  int8x16_t v25;
  float v26;
  _BOOL4 v28;

  v4 = a2[1];
  v5 = vsubq_f32(v4, *a2);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = a2[2];
  v8 = vsubq_f32(v7, v4);
  v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  v10 = (int8x16_t)vsubq_f32(*a2, v7);
  v11 = (float32x4_t)v10;
  v11.i32[3] = 0;
  v12 = vsubq_f32(*a4, *a2);
  v12.i32[3] = 0;
  v13 = vsubq_f32(*a4, v4);
  v13.i32[3] = 0;
  v14 = vsubq_f32(*a4, v7);
  v14.i32[3] = 0;
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v15.i64[1] = v5.i64[0];
  *(int8x8_t *)v16.f32 = vext_s8(*a3, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v16.u32[2] = *a3;
  v17 = vsubq_f32(vmulq_f32(v16, v5), vmulq_f32(*(float32x4_t *)a3->i8, v15));
  v15.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
  v15.i64[1] = v17.u32[0];
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v18.i64[1] = v8.i64[0];
  v19 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v8), vmulq_f32(*(float32x4_t *)a3->i8, v18));
  v18.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v18.i64[1] = v19.u32[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), 4uLL);
  v17.i64[1] = v10.i64[0];
  v20 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v11), vmulq_f32(*(float32x4_t *)a3->i8, v17));
  v17.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v17.i64[1] = v20.u32[0];
  v21 = (int8x16_t)vmulq_f32(v12, v15);
  v22 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)).f32[0];
  v23 = (int8x16_t)vmulq_f32(v13, v18);
  LODWORD(v24) = vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).u32[0];
  v25 = (int8x16_t)vmulq_f32(v14, v17);
  LODWORD(v26) = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).u32[0];
  if (v22 > 0.0 && v24 > 0.0 && v26 > 0.0)
    return 1;
  v28 = v22 <= 0.0;
  if (v24 > 0.0)
    v28 = 0;
  return v26 <= 0.0 && v28;
}

void sub_1B21CDEA4()
{
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B21CDEB8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;

  result = sub_1B21C7BB8(a1, a2);
  *result = off_1E63CDAD0;
  return result;
}

uint64_t sub_1B21CDEE0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = sub_1B21CDEB8((_QWORD *)a1, a3);
  *v9 = &off_1E63CD890;
  *((_BYTE *)v9 + 16) = 0;
  v9[3] = a2;
  if (!a2
    && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16)))
  {
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16));
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_1B21CDF80(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CD890;
  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return nullsub_16(a1);
}

void sub_1B21CDFD0(uint64_t a1)
{
  sub_1B21CDF80(a1);
  JUMPOUT(0x1B5E22E18);
}

_BYTE *sub_1B21CDFF4(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  _QWORD v16[3];
  float32x4_t v17[8];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 3);
  if (v5)
  {
    v7 = result;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a3 + 8);
    a5[1] = v5;
    v18 = 1566444395;
    v10 = *(float32x4_t **)(a2 + 24);
    v11 = v10[1];
    v17[0] = *v10;
    v17[1] = v11;
    v12 = v10[3];
    v17[2] = v10[2];
    v17[3] = v12;
    v13 = *(float32x4_t **)(a3 + 24);
    v17[4] = *v13;
    v17[5] = v13[1];
    v17[6] = v13[2];
    v17[7] = v13[3];
    sub_1B21CE1F8(v16, v8, v9);
    result = (_BYTE *)sub_1B21CF924((uint64_t)v16, v17, (uint64_t)a5);
    if (v7[16])
    {
      result = (_BYTE *)a5[1];
      if (*((_DWORD *)result + 200))
      {
        v14 = (float32x4_t *)*((_QWORD *)result + 98);
        v15 = *(float32x4_t **)(a5[2] + 16);
        if (v14 == v15)
          v15 = *(float32x4_t **)(a5[3] + 16);
        else
          v14 = *(float32x4_t **)(a5[3] + 16);
        return sub_1B21ED270(result, v14 + 1, v15 + 1);
      }
    }
  }
  return result;
}

float sub_1B21CE110()
{
  return 1.0;
}

void sub_1B21CE118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = sub_1B21FF5F0(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          sub_1B21FF5FC(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

_QWORD *sub_1B21CE1F8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1E63CC470;
  result[1] = a2;
  result[2] = a3;
  return result;
}

float *sub_1B21CE20C(float *result, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  v6 = a2[1];
  v7 = a4[1];
  v8 = a2[2];
  v9 = a4[2];
  v10 = (float)((float)(v6 * v7) + (float)(*a2 * *a4)) + (float)(v8 * v9);
  v11 = 1.0 - (float)(v10 * v10);
  v12 = 0.0;
  v13 = 0.0;
  if (v11 > 0.0001)
  {
    v14 = a3[2] - result[2];
    v15 = *a3 - *result;
    v16 = a3[1] - result[1];
    v17 = (float)((float)(v7 * v16) + (float)(*a4 * v15)) + (float)(v9 * v14);
    v18 = (float)((float)(v6 * v16) + (float)(*a2 * v15)) + (float)(v8 * v14);
    v12 = (float)(1.0 / v11) * (float)(v18 - (float)(v10 * v17));
    v13 = (float)(1.0 / v11) * (float)-(float)(v17 - (float)(v10 * v18));
  }
  *a5 = v12;
  *a6 = v13;
  return result;
}

void sub_1B21CE29C(int a1, float32x2_t *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float *v27;
  uint64_t v28;
  float v29;
  int v30;
  float v31;
  int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  float v38;
  __int32 v39;
  _DWORD __b[8];
  float v41[8];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v9 = (a1 - 1);
  if (a1 == 1)
  {
    v10 = *a2;
    goto LABEL_5;
  }
  if (a1 == 2)
  {
    v10 = vmul_f32(vadd_f32(*a2, a2[1]), (float32x2_t)0x3F0000003F000000);
LABEL_5:
    v11 = v10.f32[1];
    goto LABEL_14;
  }
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  if (a1 >= 2)
  {
    v15 = (float *)&a2[1];
    do
    {
      v16 = v15[1];
      v17 = *(v15 - 2);
      v18 = *(v15 - 1);
      v19 = (float)(v17 * v16) - (float)(*v15 * v18);
      v12 = v12 + v19;
      v13 = v13 + (float)(v19 * (float)(v17 + *v15));
      v14 = v14 + (float)(v19 * (float)(v16 + v18));
      v15 += 2;
      --v9;
    }
    while (v9);
  }
  v20 = a2[a1 - 1].f32[0];
  v21 = a2->f32[1];
  v22 = a2[a1 - 1].f32[1];
  v23 = (float)(v20 * v21) - (float)(a2->f32[0] * v22);
  v24 = v12 + v23;
  if (fabsf(v24) <= 0.00000011921)
    v25 = 1.0e18;
  else
    v25 = 1.0 / (float)(v24 * 3.0);
  if (a1 <= 0)
  {
    v30 = 0;
    goto LABEL_17;
  }
  v10.f32[0] = (float)(v13 + (float)(v23 * (float)(v20 + a2->f32[0]))) * v25;
  v11 = (float)(v14 + (float)(v23 * (float)(v21 + v22))) * v25;
LABEL_14:
  v26 = (float *)a2 + 1;
  v27 = v41;
  v28 = a1;
  v39 = v10.i32[0];
  do
  {
    v29 = atan2f(*v26 - v11, *(v26 - 1) - v10.f32[0]);
    v10.i32[0] = v39;
    *v27++ = v29;
    v26 += 2;
    --v28;
  }
  while (v28);
  memset_pattern16(__b, &unk_1B22C9F70, 4 * a1);
  v30 = 1;
LABEL_17:
  __b[a4] = 0;
  *a5 = a4;
  if (a3 >= 2)
  {
    v31 = v41[a4];
    v32 = 1;
    do
    {
      a5[1] = a4;
      ++a5;
      v33 = v31 + (float)((float)v32 * (float)(6.2832 / (float)a3));
      if (v33 > 3.1416)
        v33 = v33 + -6.2832;
      v34 = a4;
      if (v30)
      {
        v35 = 0;
        v36 = a4;
        v37 = *(float *)"(knN";
        do
        {
          if (__b[v35])
          {
            v38 = vabds_f32(v41[v35], v33);
            if (v38 > 3.1416)
              v38 = 6.2832 - v38;
            if (v38 < v37)
            {
              *a5 = v35;
              v36 = v35;
              v37 = v38;
            }
          }
          ++v35;
        }
        while (a1 != v35);
        v34 = v36;
      }
      __b[v34] = 0;
      ++v32;
    }
    while (v32 != a3);
  }
}

uint64_t sub_1B21CE520(float32x4_t *a1, float *a2, float32x2_t *a3, float32x4_t *a4, float *a5, float32x2_t *a6, float32x4_t *a7, float *a8, unsigned int *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  float v14;
  float v15;
  float v16;
  float v24;
  float *v25;
  float v26;
  float v27;
  float32x2_t v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v48;
  float v50;
  float v52;
  float v53;
  float v54;
  _BOOL4 v55;
  BOOL v56;
  int v57;
  float *v58;
  float v59;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  _BOOL4 v69;
  BOOL v70;
  int v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  _BOOL4 v77;
  float v78;
  float v79;
  float v80;
  _BOOL4 v81;
  float v82;
  unsigned int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x4_t *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  unsigned int v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  float *v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  float v155;
  float *v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  float v163;
  uint64_t v164;
  float v165;
  int8x16_t v166;
  uint64_t v167;
  float32x2_t *v168;
  float *v169;
  float32x4_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;
  float v175;
  _BOOL4 v176;
  uint64_t v177;
  _BOOL8 v178;
  float v179;
  uint64_t v180;
  char *v181;
  float v182;
  char *v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  float *v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float *v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float *v198;
  float v199;
  float *v200;
  float v201;
  float v202;
  uint64_t v203;
  float *v204;
  float v205;
  float v206;
  float *v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  __int32 v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  uint64_t v231;
  float32x2_t *v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  int v239;
  float v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t *v244;
  uint64_t i;
  int8x16_t v246;
  uint64_t j;
  uint64_t v248;
  uint64_t v249;
  int8x16_t v250;
  __n128 v251;
  int8x16_t v252;
  float v253;
  __n128 v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  float v258;
  int8x16_t v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  uint64_t v281;
  __n128 v282;
  int8x16_t v283;
  float32x4_t v284;
  float v285;
  float v286;
  float v287;
  float32x2_t v288;
  float v289;
  int8x16_t v290;
  float v291[8];
  uint64_t v292;
  __int32 v293;
  float32x2_t __src;
  __int32 v295;
  _DWORD v296[2];
  float v297[8];
  float32x2_t v298;
  float v299;
  float32x2_t v300;
  float v301;
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  _Q23 = vsubq_f32(*a4, *a1);
  v14 = *a2;
  v15 = a2[4];
  v16 = a2[5];
  _S4 = a2[8];
  _S9 = a2[9];
  __asm { FMLA            S21, S4, V23.S[2] }
  v24 = a2[1];
  v25 = a2 + 2;
  v26 = a2[2];
  v27 = a2[6];
  _S19 = a2[10];
  v29 = vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
  v300 = v29;
  v30 = a3[1].f32[0] * 0.5;
  v301 = v30;
  _D5 = vmul_f32(*a6, (float32x2_t)0x3F0000003F000000);
  v298 = _D5;
  v32 = a6[1].f32[0] * 0.5;
  v299 = v32;
  v33 = *a5;
  v35 = a5[4];
  v34 = a5[5];
  v37 = a5[8];
  v36 = a5[9];
  v38 = (float)((float)(v15 * v35) + (float)(v14 * *a5)) + (float)(_S4 * v37);
  v39 = a5[1];
  v40 = (float)((float)(v15 * v34) + (float)(v14 * v39)) + (float)(_S4 * v36);
  v41 = a5 + 2;
  v42 = a5[2];
  v43 = a5[6];
  v44 = a5[10];
  v45 = (float)((float)(v15 * v43) + (float)(v14 * v42)) + (float)(_S4 * v44);
  v46 = fabsf(v38);
  _S26 = fabsf(v40);
  v48 = fabsf(v45);
  __asm { FMLA            S4, S26, V5.S[1] }
  v50 = fabsf(_S21) - (float)(_S4 + (float)(v32 * v48));
  if (v50 > 0.0)
    return 0;
  v273 = v40;
  __asm { FMLA            S7, S9, V23.S[2] }
  v277 = (float)((float)(v16 * v35) + (float)(v24 * v33)) + (float)(_S9 * v37);
  v52 = fabsf(v277);
  v276 = (float)((float)(v16 * v34) + (float)(v24 * v39)) + (float)(_S9 * v36);
  v53 = fabsf(v276);
  v274 = (float)((float)(v16 * v43) + (float)(v24 * v42)) + (float)(_S9 * v44);
  v54 = fabsf(v274);
  v55 = _S21 < 0.0;
  v56 = v50 <= -3.4028e38;
  if (v50 > -3.4028e38)
  {
    v57 = 1;
  }
  else
  {
    v50 = -3.4028e38;
    v55 = 0;
    v57 = 0;
  }
  v58 = v56 ? 0 : a2;
  v59 = fabsf(_S7)
      - (float)((float)((float)(v29.f32[1] + (float)(_D5.f32[0] * v52)) + (float)(_D5.f32[1] * v53)) + (float)(v32 * v54));
  if (v59 > 0.0)
    return 0;
  v271 = v54;
  v264 = v24;
  v265 = v26;
  v266 = v45;
  __asm { FMLA            S14, S19, V23.S[2] }
  v61 = (float)((float)(v27 * v35) + (float)(v26 * v33)) + (float)(_S19 * v37);
  v62 = (float)((float)(v27 * v34) + (float)(v26 * v39)) + (float)(_S19 * v36);
  v63 = (float)((float)(v27 * v43) + (float)(v26 * v42)) + (float)(_S19 * v44);
  v268 = v62;
  v269 = v61;
  v64 = fabsf(v61);
  v65 = fabsf(v62);
  v267 = v63;
  v66 = fabsf(v63);
  if (v59 > v50)
    v67 = v59;
  else
    v67 = v50;
  if (v59 > v50)
  {
    v55 = _S7 < 0.0;
    v57 = 2;
    v58 = a2 + 1;
  }
  v68 = fabsf(_S14)
      - (float)((float)((float)(v30 + (float)(_D5.f32[0] * v64)) + (float)(_D5.f32[1] * v65)) + (float)(v32 * v66));
  if (v68 > 0.0)
    return 0;
  v69 = _S14 < 0.0;
  v70 = v68 <= v67;
  if (v68 <= v67)
    v69 = v55;
  else
    v67 = v68;
  if (v70)
    v71 = v57;
  else
    v71 = 3;
  if (v70)
    v25 = v58;
  v72 = (float)((float)(_Q23.f32[1] * v35) + (float)(v33 * _Q23.f32[0])) + (float)(v37 * _Q23.f32[2]);
  v73 = fabsf(v72)
      - (float)(_D5.f32[0] + (float)((float)((float)(v29.f32[1] * v52) + (float)(v29.f32[0] * v46)) + (float)(v30 * v64)));
  if (v73 > 0.0)
    return 0;
  v74 = v73 <= v67;
  if (v73 > v67)
    v69 = v72 < 0.0;
  else
    v73 = v67;
  if (!v74)
  {
    v71 = 4;
    v25 = a5;
  }
  v75 = (float)((float)(_Q23.f32[1] * v34) + (float)(v39 * _Q23.f32[0])) + (float)(v36 * _Q23.f32[2]);
  v76 = fabsf(v75)
      - (float)(_D5.f32[1]
              + (float)((float)((float)(v29.f32[1] * v53) + (float)(v29.f32[0] * _S26)) + (float)(v30 * v65)));
  if (v76 > 0.0)
    return 0;
  v77 = v75 < 0.0;
  if (v76 > v73)
    v78 = v76;
  else
    v78 = v73;
  if (v76 > v73)
  {
    v69 = v77;
    v71 = 5;
    v25 = a5 + 1;
  }
  v79 = (float)((float)(_Q23.f32[1] * v43) + (float)(v42 * _Q23.f32[0])) + (float)(v44 * _Q23.f32[2]);
  v80 = fabsf(v79)
      - (float)(v32 + (float)((float)((float)(v29.f32[1] * v271) + (float)(v29.f32[0] * v48)) + (float)(v30 * v66)));
  if (v80 > 0.0)
    return 0;
  v81 = v79 < 0.0;
  if (v80 > v78)
    v82 = v80;
  else
    v82 = v78;
  if (v80 > v78)
  {
    v83 = 6;
  }
  else
  {
    v81 = v69;
    v83 = v71;
  }
  if (v80 <= v78)
    v41 = v25;
  v84 = _S26 + 0.00001;
  v85 = v48 + 0.00001;
  v86 = v52 + 0.00001;
  v87 = v64 + 0.00001;
  v88 = (float)(_S14 * v277) - (float)(_S7 * v61);
  v89 = fabsf(v88)
      - (float)((float)((float)((float)(v30 * (float)(v52 + 0.00001)) + (float)(v29.f32[1] * (float)(v64 + 0.00001)))
                      + (float)(_D5.f32[1] * v85))
              + (float)(v32 * v84));
  if (v89 > 0.00000011921)
    return 0;
  v91 = a1;
  v92 = v66;
  v93 = v46 + 0.00001;
  v263 = v53 + 0.00001;
  v94 = v65 + 0.00001;
  v95 = -_S7;
  v96 = 0.0;
  v97 = (float)(v61 * v61) + 0.0;
  v98 = sqrtf(v97 + (float)(v277 * v277));
  if (v98 <= 0.00000011921)
  {
    v100 = 0.0;
    v101 = 0.0;
    v102 = v276;
    v103 = v268;
  }
  else
  {
    v99 = v89 / v98;
    v100 = 0.0;
    v101 = 0.0;
    v102 = v276;
    v103 = v268;
    if ((float)(v99 * 1.05) > v82)
    {
      v41 = 0;
      v96 = 0.0 / v98;
      v100 = (float)-v61 / v98;
      v81 = v88 < 0.0;
      v83 = 7;
      v82 = v99;
      v101 = v277 / v98;
    }
  }
  v104 = (float)(v103 * v95) + (float)(_S14 * v102);
  v105 = fabsf(v104)
       - (float)((float)((float)((float)(v30 * v263) + (float)(v29.f32[1] * v94)) + (float)(_D5.f32[0] * v85))
               + (float)(v32 * v93));
  if (v105 > 0.00000011921)
    return 0;
  v262 = v96;
  v106 = (float)(v103 * v103) + 0.0;
  v107 = sqrtf(v106 + (float)(v102 * v102));
  if (v107 > 0.00000011921 && (float)((float)(v105 / v107) * 1.05) > v82)
  {
    v41 = 0;
    v262 = 0.0 / v107;
    v100 = (float)-v268 / v107;
    v81 = v104 < 0.0;
    v83 = 8;
    v82 = v105 / v107;
    v101 = v102 / v107;
  }
  v261 = v101;
  v108 = (float)(v267 * v95) + (float)(_S14 * v274);
  v109 = fabsf(v108)
       - (float)((float)((float)((float)(v30 * (float)(v271 + 0.00001)) + (float)(v29.f32[1] * (float)(v92 + 0.00001)))
                       + (float)(_D5.f32[0] * v84))
               + (float)(_D5.f32[1] * v93));
  if (v109 > 0.00000011921)
    return 0;
  v110 = v92 + 0.00001;
  v260 = (float)(v267 * v267) + 0.0;
  v111 = sqrtf(v260 + (float)(v274 * v274));
  v272 = v271 + 0.00001;
  if (v111 <= 0.00000011921)
  {
    v113 = v269;
  }
  else
  {
    v112 = v109 / v111;
    v113 = v269;
    if ((float)(v112 * 1.05) > v82)
    {
      v41 = 0;
      v100 = (float)-v267 / v111;
      v81 = v108 < 0.0;
      v83 = 9;
      v82 = v112;
      v261 = v274 / v111;
      v262 = 0.0 / v111;
    }
  }
  v114 = (float)(_S21 * v113) - (float)(_S14 * v38);
  v115 = fabsf(v114)
       - (float)((float)((float)((float)(v30 * v93) + (float)(v29.f32[0] * v87)) + (float)(_D5.f32[1] * v272))
               + (float)(v32 * v263));
  if (v115 > 0.00000011921)
    return 0;
  v270 = v94;
  v116 = -_S14;
  v117 = sqrtf(v97 + (float)(v38 * v38));
  if (v117 <= 0.00000011921)
  {
    v119 = v266;
    v120 = v273;
  }
  else
  {
    v118 = v115 / v117;
    v119 = v266;
    v120 = v273;
    if ((float)(v118 * 1.05) > v82)
    {
      v41 = 0;
      v100 = 0.0 / v117;
      v81 = v114 < 0.0;
      v83 = 10;
      v82 = v118;
      v261 = (float)-v38 / v117;
      v262 = v113 / v117;
    }
  }
  v121 = (float)(v120 * v116) + (float)(_S21 * v268);
  v122 = fabsf(v121)
       - (float)((float)((float)((float)(v30 * v84) + (float)(v29.f32[0] * v270)) + (float)(_D5.f32[0] * v272))
               + (float)(v32 * v86));
  if (v122 > 0.00000011921)
    return 0;
  v123 = sqrtf(v106 + (float)(v120 * v120));
  if (v123 > 0.00000011921)
  {
    v124 = v122 / v123;
    if ((float)(v124 * 1.05) > v82)
    {
      v41 = 0;
      v100 = 0.0 / v123;
      v81 = v121 < 0.0;
      v83 = 11;
      v82 = v124;
      v261 = (float)-v120 / v123;
      v262 = v268 / v123;
    }
  }
  v125 = (float)(v119 * v116) + (float)(_S21 * v267);
  v126 = fabsf(v125)
       - (float)((float)((float)((float)(v30 * v85) + (float)(v29.f32[0] * v110)) + (float)(_D5.f32[0] * v263))
               + (float)(_D5.f32[1] * v86));
  if (v126 > 0.00000011921)
    return 0;
  v127 = sqrtf(v260 + (float)(v119 * v119));
  if (v127 > 0.00000011921)
  {
    v128 = v126 / v127;
    if ((float)(v128 * 1.05) > v82)
    {
      v41 = 0;
      v100 = 0.0 / v127;
      v81 = v125 < 0.0;
      v83 = 12;
      v82 = v128;
      v261 = (float)-v119 / v127;
      v262 = v267 / v127;
    }
  }
  v129 = (float)(_S7 * v38) - (float)(_S21 * v277);
  v130 = fabsf(v129)
       - (float)((float)((float)((float)(v29.f32[1] * v93) + (float)(v29.f32[0] * v86)) + (float)(_D5.f32[1] * v110))
               + (float)(v32 * v270));
  if (v130 > 0.00000011921)
    return 0;
  v131 = -_S21;
  v132 = sqrtf((float)(v38 * v38) + (float)(v277 * v277));
  if (v132 > 0.00000011921)
  {
    v133 = v130 / v132;
    if ((float)(v133 * 1.05) > v82)
    {
      v41 = 0;
      v100 = v38 / v132;
      v81 = v129 < 0.0;
      v83 = 13;
      v82 = v133;
      v261 = 0.0 / v132;
      v262 = (float)-v277 / v132;
    }
  }
  v134 = (float)(v102 * v131) + (float)(_S7 * v120);
  v135 = fabsf(v134)
       - (float)((float)((float)((float)(v29.f32[1] * v84) + (float)(v29.f32[0] * v263)) + (float)(_D5.f32[0] * v110))
               + (float)(v32 * v87));
  if (v135 > 0.00000011921)
    return 0;
  v136 = v100;
  v278 = v82;
  v137 = sqrtf((float)(v120 * v120) + (float)(v102 * v102));
  if (v137 > 0.00000011921)
  {
    v138 = v135 / v137;
    if ((float)(v138 * 1.05) > v82)
    {
      v41 = 0;
      v136 = v273 / v137;
      v81 = v134 < 0.0;
      v83 = 14;
      v278 = v138;
      v261 = 0.0 / v137;
      v262 = (float)-v276 / v137;
    }
  }
  v139 = (float)(v274 * v131) + (float)(_S7 * v266);
  v140 = fabsf(v139)
       - (float)((float)((float)((float)(v29.f32[1] * v85) + (float)(v29.f32[0] * v272)) + (float)(_D5.f32[0] * v270))
               + (float)(_D5.f32[1] * v87));
  if (v140 > 0.00000011921)
    return 0;
  v141 = sqrtf((float)(v266 * v266) + (float)(v274 * v274));
  if (v141 <= 0.00000011921 || (v142 = v140 / v141, (float)(v142 * 1.05) <= v278))
  {
    if (!v83)
      return 0;
    if (v41)
    {
      v143 = *v41;
      a7->f32[0] = *v41;
      v144 = v41[4];
      a7->f32[1] = v144;
      v145 = v41[8];
      goto LABEL_87;
    }
  }
  else
  {
    v136 = v266 / v141;
    v81 = v139 < 0.0;
    v83 = 15;
    v278 = v142;
    v261 = 0.0 / v141;
    v262 = (float)-v274 / v141;
  }
  v143 = (float)((float)(v264 * v136) + (float)(v14 * v262)) + (float)(v265 * v261);
  a7->f32[0] = v143;
  v144 = (float)((float)(v136 * a2[5]) + (float)(a2[4] * v262)) + (float)(a2[6] * v261);
  a7->f32[1] = v144;
  v145 = (float)((float)(v136 * a2[9]) + (float)(a2[8] * v262)) + (float)(a2[10] * v261);
LABEL_87:
  a7->f32[2] = v145;
  if (v81)
  {
    a7->f32[0] = -v143;
    a7->f32[1] = -v144;
    a7->f32[2] = -v145;
  }
  *a8 = -v278;
  v146 = v83 - 7;
  if (v83 >= 7)
  {
    v147 = 0;
    v292 = a1->i64[0];
    v293 = a1->i32[2];
    v149 = a7->f32[0];
    v148 = a7->f32[1];
    v150 = a7->f32[2];
    v151 = a2;
    do
    {
      v152 = 0;
      if ((float)((float)((float)(v148 * a2[v147 + 4]) + (float)(v149 * a2[v147])) + (float)(v150 * a2[v147 + 8])) <= 0.0)
        v153 = -v300.f32[v147];
      else
        v153 = v300.f32[v147];
      do
      {
        *(float *)((char *)&v292 + v152) = *(float *)((char *)&v292 + v152) + (float)(v153 * v151[v152]);
        v152 += 4;
      }
      while (v152 != 12);
      ++v147;
      ++v151;
    }
    while (v147 != 3);
    v154 = 0;
    __src = *(float32x2_t *)a4->f32;
    v295 = a4->i32[2];
    v155 = a7->f32[0];
    v156 = a5;
    do
    {
      v157 = 0;
      if ((float)((float)((float)(v148 * a5[v154 + 4]) + (float)(v155 * a5[v154])) + (float)(v150 * a5[v154 + 8])) <= 0.0)
        v158 = v298.f32[v154];
      else
        v158 = -v298.f32[v154];
      do
      {
        __src.f32[v157] = __src.f32[v157] + (float)(v158 * v156[v157 * 4]);
        ++v157;
      }
      while (v157 != 3);
      ++v154;
      ++v156;
    }
    while (v154 != 3);
    v159 = 0;
    v288.i32[0] = 0;
    v285 = 0.0;
    do
    {
      v297[v159] = a2[v146 / 3uLL + v159 * 4];
      ++v159;
    }
    while (v159 != 3);
    v160 = 0;
    v161 = v146 % 3;
    do
    {
      v291[v160] = a5[(v160 * 4) | v161];
      ++v160;
    }
    while (v160 != 3);
    sub_1B21CE20C((float *)&v292, v297, (float *)&__src, v291, (float *)&v288, &v285);
    v162 = 0;
    v163 = v288.f32[0];
    do
    {
      *(float *)((char *)&v292 + v162 * 4) = *(float *)((char *)&v292 + v162 * 4) + (float)(v297[v162] * v163);
      ++v162;
    }
    while (v162 != 3);
    v164 = 0;
    v165 = v285;
    do
    {
      __src.f32[v164] = __src.f32[v164] + (float)(v291[v164] * v165);
      ++v164;
    }
    while (v164 != 3);
    v166.i64[0] = 0x8000000080000000;
    v166.i64[1] = 0x8000000080000000;
    v290 = veorq_s8(*(int8x16_t *)a7, v166);
    (*(void (**)(uint64_t, int8x16_t *, float32x2_t *, float))(*(_QWORD *)a13 + 32))(a13, &v290, &__src, v278);
    *a9 = v83;
    return 1;
  }
  v280 = a7->f32[0];
  if (v83 > 3)
  {
    v280 = -a7->f32[0];
    v279 = -a7->f32[1];
    v168 = &v298;
    v169 = (float *)&v300;
    v275 = -a7->f32[2];
    v170 = a1;
    v91 = a4;
    v171 = (float32x2_t *)a2;
    a2 = a5;
  }
  else
  {
    v279 = a7->f32[1];
    v275 = a7->f32[2];
    v168 = &v300;
    v169 = (float *)&v298;
    v170 = a4;
    v171 = (float32x2_t *)a5;
  }
  v172 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v171[2], v279), *v171, v280), v171[4], v275);
  v173 = (float)((float)(v279 * v171[3].f32[0]) + (float)(v171[1].f32[0] * v280)) + (float)(v171[5].f32[0] * v275);
  v174 = vabs_f32(v172);
  v175 = fabsf(v173);
  v176 = v174.f32[0] > v175;
  v177 = 2;
  if (v174.f32[1] > v175)
    v177 = 1;
  if (v174.f32[1] <= v174.f32[0])
    v177 = 2 * (v174.f32[0] <= v175);
  else
    v176 = v174.f32[1] > v175;
  v288 = v172;
  v289 = v173;
  v178 = v174.f32[0] > v175 && v174.f32[1] <= v174.f32[0];
  v179 = v169[v177];
  v180 = 0;
  if (*(float *)((unint64_t)&v288 | (4 * v177)) >= 0.0)
  {
    v182 = -v179;
    v183 = (char *)v171 + 4 * v177;
    do
    {
      *(float *)((char *)&v285 + v180 * 4) = (float)(v170->f32[v180] - v91->f32[v180])
                                           + (float)(v182 * *(float *)&v183[1 * v180]);
      ++v180;
    }
    while (v180 != 3);
  }
  else
  {
    v181 = (char *)v171 + 4 * v177;
    do
    {
      *(float *)((char *)&v285 + v180 * 4) = (float)(v170->f32[v180] - v91->f32[v180])
                                           + (float)(v179 * *(float *)&v181[1 * v180]);
      ++v180;
    }
    while (v180 != 3);
  }
  if (v83 < 4)
    v184 = -1;
  else
    v184 = -4;
  v185 = v184 + v83;
  if (v184 + v83)
  {
    v186 = 1;
    v187 = 0;
    if (v185 == 1)
      v186 = 2;
  }
  else
  {
    v186 = 2;
    v187 = 1;
  }
  v188 = &a2[v187];
  v189 = *v188;
  v190 = v188[4];
  v191 = v188[8];
  v192 = (float)((float)(v286 * v190) + (float)(v285 * *v188)) + (float)(v287 * v191);
  v193 = &a2[v186];
  v194 = *v193;
  v195 = v193[4];
  v196 = v193[8];
  v197 = (float)((float)(v286 * v195) + (float)(v285 * *v193)) + (float)(v287 * v196);
  v198 = (float *)v171 + v178;
  v199 = v198[4];
  v200 = v198;
  v201 = v198[8];
  v202 = (float)((float)(v190 * v199) + (float)(v189 * *v198)) + (float)(v191 * v201);
  _ZF = !v176;
  v203 = 1;
  if (!_ZF)
    v203 = 2;
  v204 = (float *)v171 + v203;
  v205 = v204[4];
  v206 = (float)(v190 * v205) + (float)(v189 * *v204);
  v207 = v204;
  v208 = v204[8];
  v209 = v206 + (float)(v191 * v208);
  v210 = (float)((float)(v195 * v199) + (float)(v194 * *v198)) + (float)(v196 * v201);
  v211 = (float)((float)(v195 * v205) + (float)(v194 * *v204)) + (float)(v196 * v208);
  v212 = v169[v178];
  v213 = v202 * v212;
  v214 = v210 * v212;
  v215 = v169[v203];
  v216 = v209 * v215;
  v217 = v211 * v215;
  v297[0] = (float)(v192 - v213) - v216;
  v297[1] = (float)(v197 - v214) - v217;
  v297[2] = (float)(v192 - v213) + v216;
  v297[3] = (float)(v197 - v214) + v217;
  v218 = v192 + v213;
  v219 = v197 + v214;
  v297[4] = v218 + v216;
  v297[5] = v219 + v217;
  v297[6] = v218 - v216;
  v297[7] = v219 - v217;
  v220 = v168->i32[v186];
  v296[0] = v168->i32[v187];
  v296[1] = v220;
  v221 = sub_1B21CF798((uint64_t)v296, (char *)v297, (char *)&__src);
  if (v221 < 1)
    return 0;
  v222 = 0;
  v223 = 0;
  LODWORD(v224) = a10;
  v225 = 1.0 / (float)((float)(v202 * v211) - (float)(v209 * v210));
  v226 = v202 * v225;
  v227 = v211 * v225;
  v228 = -(float)(v209 * v225);
  v229 = -(float)(v210 * v225);
  v230 = v168->f32[v185];
  do
  {
    v231 = 0;
    v232 = &__src + v222;
    v233 = v232->f32[0];
    v234 = v232->f32[1];
    v235 = v232->f32[0] - v192;
    v236 = (float)(v228 * (float)(v234 - v197)) + (float)(v227 * v235);
    v237 = (float)(v226 * (float)(v234 - v197)) + (float)(v229 * v235);
    do
    {
      *(float *)((char *)&v292 + 12 * (int)v223 + v231) = (float)(*(float *)((char *)&v285 + v231)
                                                                + (float)(v236 * v200[v231]))
                                                        + (float)(v237 * v207[v231]);
      v231 += 4;
    }
    while (v231 != 12);
    v238 = v230
         - (float)((float)((float)(v279 * *((float *)&v292 + 3 * (int)v223 + 1))
                         + (float)(v280 * *((float *)&v292 + 3 * (int)v223)))
                 + (float)(v275 * *((float *)&v292 + 3 * (int)v223 + 2)));
    v291[(int)v223] = v238;
    if (v238 >= 0.0)
    {
      __src.f32[2 * (int)v223] = v233;
      __src.f32[2 * (_DWORD)v223 + 1] = v234;
      v223 = (v223 + 1);
    }
    ++v222;
  }
  while (v222 != v221);
  v281 = v223;
  if ((int)v223 < 1)
    return 0;
  if ((int)v223 < a10)
    LODWORD(v224) = v223;
  if ((int)v224 <= 1)
    v224 = 1;
  else
    v224 = v224;
  if (v223 <= v224)
  {
    if (v83 >= 4)
    {
      v255 = 0;
      v256 = &v292;
      do
      {
        v257 = 0;
        v258 = v291[v255];
        do
        {
          *(float *)&v290.i32[v257] = (float)(*(float *)((char *)v256 + v257 * 4) + v91->f32[v257])
                                    - (float)(a7->f32[v257] * v258);
          ++v257;
        }
        while (v257 != 3);
        v259.i64[0] = 0x8000000080000000;
        v259.i64[1] = 0x8000000080000000;
        v284 = (float32x4_t)veorq_s8(*(int8x16_t *)a7, v259);
        (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, float))(*(_QWORD *)a13 + 32))(a13, &v284, &v290, -v258);
        ++v255;
        v256 = (uint64_t *)((char *)v256 + 12);
      }
      while (v255 != v281);
    }
    else
    {
      v243 = 0;
      v244 = &v292;
      do
      {
        for (i = 0; i != 3; ++i)
          *(float *)&v290.i32[i] = *(float *)((char *)v244 + i * 4) + v91->f32[i];
        v246.i64[0] = 0x8000000080000000;
        v246.i64[1] = 0x8000000080000000;
        v284 = (float32x4_t)veorq_s8(*(int8x16_t *)a7, v246);
        (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, float))(*(_QWORD *)a13 + 32))(a13, &v284, &v290, -v291[v243++]);
        v244 = (uint64_t *)((char *)v244 + 12);
      }
      while (v243 != v281);
    }
    v167 = v281;
  }
  else
  {
    v167 = v224;
    if (v223 < 2)
    {
      v239 = 0;
    }
    else
    {
      v239 = 0;
      v240 = v291[0];
      v241 = 1;
      do
      {
        if (v291[v241] > v240)
        {
          v239 = v241;
          v240 = v291[v241];
        }
        ++v241;
      }
      while (v223 != v241);
    }
    sub_1B21CE29C(v223, &__src, v167, v239, &v290);
    for (j = 0; j != v167; ++j)
    {
      v248 = 0;
      v249 = v290.i32[j];
      do
      {
        v284.f32[v248] = *(float *)((char *)&v292 + 12 * (int)v249 + v248 * 4) + v91->f32[v248];
        ++v248;
      }
      while (v248 != 3);
      v250.i64[0] = 0x8000000080000000;
      v250.i64[1] = 0x8000000080000000;
      if (v83 > 3)
      {
        v252 = veorq_s8(*(int8x16_t *)a7, v250);
        v253 = v291[v249];
        v254 = (__n128)vsubq_f32(v284, vmulq_n_f32(*a7, v253));
        v254.n128_u32[3] = 0;
        v282 = v254;
        v283 = v252;
        v254.n128_f32[0] = -v253;
        (*(void (**)(uint64_t, int8x16_t *, __n128 *, __n128))(*(_QWORD *)a13 + 32))(a13, &v283, &v282, v254);
      }
      else
      {
        v251 = (__n128)veorq_s8(*(int8x16_t *)a7, v250);
        v283 = (int8x16_t)v251;
        v251.n128_f32[0] = -v291[v249];
        (*(void (**)(uint64_t, int8x16_t *, float32x4_t *, __n128))(*(_QWORD *)a13 + 32))(a13, &v283, &v284, v251);
      }
    }
  }
  *a9 = v83;
  return v167;
}

uint64_t sub_1B21CF798(uint64_t a1, char *a2, char *__src)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  char v7;
  int v8;
  char *v9;
  int v10;
  float v11;
  int v12;
  char *v13;
  char *v14;
  float v15;
  float v16;
  float v17;
  char *v18;
  _BOOL4 v19;
  float v20;
  BOOL v21;
  char v23;
  uint64_t v24;

  v3 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = 4;
  v5 = 1;
  v6 = __src;
  do
  {
    v7 = v5;
    v8 = -1;
    v9 = a2;
    do
    {
      a2 = v6;
      v10 = v8;
      if ((int)v4 >= 1)
      {
        v11 = (float)v8;
        v12 = v4;
        v13 = a2;
        v14 = v9;
        v4 = 0;
        do
        {
          v15 = *(float *)&v14[4 * v3];
          v16 = v15 * v11;
          v17 = *(float *)(a1 + 4 * v3);
          if ((float)(v15 * v11) < v17)
          {
            *(_DWORD *)v13 = *(_DWORD *)v14;
            *((_DWORD *)v13 + 1) = *((_DWORD *)v14 + 1);
            v4 = (v4 + 1);
            if ((v4 & 8) != 0)
              goto LABEL_24;
            v13 += 8;
            v15 = *(float *)&v14[4 * v3];
            v17 = *(float *)(a1 + 4 * v3);
            v16 = v15 * v11;
          }
          if (v12 <= 1)
            v18 = v9;
          else
            v18 = v14 + 8;
          v19 = v16 < v17;
          v20 = *(float *)&v18[4 * v3];
          if (v19 != (float)(v20 * v11) < v17)
          {
            *(float *)&v13[4 * (v3 ^ 1)] = *(float *)&v14[4 * (v3 ^ 1)]
                                         + (float)((float)((float)(*(float *)&v18[4 * (v3 ^ 1)]
                                                                 - *(float *)&v14[4 * (v3 ^ 1)])
                                                         / (float)(v20 - v15))
                                                 * (float)-(float)(v15 - (float)(v11 * v17)));
            *(float *)&v13[4 * v3] = *(float *)(a1 + 4 * v3) * v11;
            v4 = (v4 + 1);
            if ((v4 & 8) != 0)
              goto LABEL_24;
            v13 += 8;
          }
          v14 += 8;
          v21 = __OFSUB__(v12--, 1);
        }
        while (!((v12 < 0) ^ v21 | (v12 == 0)));
      }
      else
      {
        v4 = 0;
      }
      if (a2 == __src)
        v6 = &v23;
      else
        v6 = __src;
      v8 = v10 + 2;
      v9 = a2;
    }
    while (v10 < 0);
    v5 = 0;
    v3 = 1;
  }
  while ((v7 & 1) != 0);
LABEL_24:
  if (a2 != __src)
    memcpy(__src, a2, 8 * (_DWORD)v4);
  return v4;
}

uint64_t sub_1B21CF924(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  float32x4_t *v9;
  double v10;
  double v11;
  unsigned int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  unsigned int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned int v32;
  float v33;
  float32x4_t v34;
  _OWORD v35[3];
  _OWORD v36[3];
  uint64_t v37;

  v6 = 0;
  v37 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  do
  {
    v7 = &v36[v6];
    v8 = &v35[v6];
    *(_QWORD *)v7 = a2[v6].i64[0];
    *(_QWORD *)v8 = a2[v6 + 4].i64[0];
    *((_DWORD *)v7 + 2) = a2[v6].i32[2];
    *((_DWORD *)v8 + 2) = a2[v6 + 4].i32[2];
    ++v6;
  }
  while (v6 != 3);
  v9 = *(float32x4_t **)(a1 + 8);
  v28 = v9[3];
  v10 = (*(double (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v26 = LODWORD(v10);
  v11 = (*(double (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v24 = LODWORD(v11);
  *(float *)&v12 = (*(float (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v13.i64[0] = __PAIR64__(v24, v26);
  v13.i64[1] = v12;
  v14 = vaddq_f32(v28, v13);
  v15 = vaddq_f32(v14, v14);
  v15.i32[3] = 0;
  v31 = v15;
  v16 = *(float32x4_t **)(a1 + 16);
  v29 = v16[3];
  v27 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(v16->i64[0] + 96))(v16));
  v25 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(v16->i64[0] + 96))(v16));
  *(float *)&v17 = (*(float (**)(float32x4_t *))(v16->i64[0] + 96))(v16);
  v18.i64[0] = __PAIR64__(v25, v27);
  v18.i64[1] = v17;
  v19 = vaddq_f32(v29, v18);
  v20 = vaddq_f32(v19, v19);
  v20.i32[3] = 0;
  v30 = v20;
  return sub_1B21CE520(a2 + 3, (float *)v36, (float32x2_t *)&v31, a2 + 7, (float *)v35, (float32x2_t *)&v30, &v34, &v33, &v32, 4, v22, v23, a3);
}

void sub_1B21CFB08()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21CFB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  *(_QWORD *)a1 = &off_1E63CCD70;
  *(_DWORD *)(a1 + 8) = 2;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E63CC5F8;
  *(_QWORD *)(a1 + 10488) = a2;
  *(_QWORD *)(a1 + 96) = sub_1B21CFBF8;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v5 = 0;
  *(_QWORD *)(a1 + 112) = v4;
  v6 = a1 + 120;
  do
  {
    for (i = 0; i != 36; ++i)
      *(_QWORD *)(v6 + 8 * i) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 10488) + 32))(*(_QWORD *)(a1 + 10488), v5, i);
    ++v5;
    v6 += 288;
  }
  while (v5 != 36);
  return a1;
}

void sub_1B21CFBF8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _QWORD v13[6];
  _QWORD v14[5];
  _QWORD v15[5];

  v6 = **a1;
  v7 = *a1[1];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6, v7))
  {
    v8 = *(_QWORD *)(v6 + 208);
    v15[0] = 0;
    v15[1] = v8;
    v15[2] = v6;
    v15[3] = v6 + 16;
    v15[4] = -1;
    v9 = *(_QWORD *)(v7 + 208);
    v14[0] = 0;
    v14[1] = v9;
    v14[2] = v7;
    v14[3] = v7 + 16;
    v14[4] = -1;
    if (a1[2]
      || (v10 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)a2 + 16))(a2, v15, v14, 0), (a1[2] = (uint64_t *)v10) != 0))
    {
      sub_1B21DB810(v13, (uint64_t)v15, (uint64_t)v14);
      v11 = *a1[2];
      if (*(_DWORD *)(a3 + 8) == 1)
      {
        (*(void (**)(void))(v11 + 16))();
      }
      else
      {
        v12 = (*(float (**)(void))(v11 + 24))();
        if (*(float *)(a3 + 12) > v12)
          *(float *)(a3 + 12) = v12;
      }
    }
  }
}

double sub_1B21CFD1C(_QWORD *a1)
{
  *a1 = &off_1E63CCD70;
  sub_1B1810570((uint64_t)(a1 + 2));
  return nullsub_16(a1);
}

double sub_1B21CFD4C(_QWORD *a1)
{
  *a1 = &off_1E63CCD70;
  sub_1B1810570((uint64_t)(a1 + 2));
  return nullsub_16(a1);
}

void sub_1B21CFD7C(_QWORD *a1)
{
  *a1 = &off_1E63CCD70;
  sub_1B1810570((uint64_t)(a1 + 2));
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21CFDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v21;
  float v22;

  ++dword_1EEFD59AC;
  v6 = (float *)&dword_1EEF652F4;
  if ((*(_DWORD *)(a1 + 8) & 2) != 0)
  {
    v22 = (*(float (**)(_QWORD, float))(**(_QWORD **)(a2 + 208) + 40))(*(_QWORD *)(a2 + 208), *(float *)&dword_1EEF652F4);
    v21 = (*(float (**)(_QWORD, float))(**(_QWORD **)(a3 + 208) + 40))(*(_QWORD *)(a3 + 208), *(float *)&dword_1EEF652F4);
    if (v22 >= v21)
      v6 = &v21;
    else
      v6 = &v22;
  }
  v7 = *(_DWORD *)v6;
  if (*(float *)(a2 + 196) >= *(float *)(a3 + 196))
    v8 = *(_DWORD *)(a3 + 196);
  else
    v8 = *(_DWORD *)(a2 + 196);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)v11;
    *(_DWORD *)(v9 + 8) = v10 - 1;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 8) & 4) != 0)
      return 0;
    v11 = sub_1B21FF5F0(832, 16);
  }
  v12 = 0;
  *(_DWORD *)v11 = 1025;
  do
  {
    v13 = v11 + v12;
    *(_QWORD *)(v13 + 128) = 0;
    *(_BYTE *)(v13 + 136) = 0;
    *(_OWORD *)(v13 + 140) = 0uLL;
    *(_OWORD *)(v13 + 156) = 0uLL;
    v12 += 192;
  }
  while (v12 != 768);
  *(_QWORD *)(v11 + 784) = a2;
  *(_QWORD *)(v11 + 792) = a3;
  *(_DWORD *)(v11 + 800) = 0;
  *(_DWORD *)(v11 + 804) = v7;
  *(_DWORD *)(v11 + 808) = v8;
  *(_QWORD *)(v11 + 824) = 0;
  v14 = *(_DWORD *)(a1 + 20);
  v15 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v11 + 820) = v14;
  if (v14 == v15)
  {
    v16 = v14 ? 2 * v14 : 1;
    if (v14 < v16)
    {
      if (v16)
      {
        v17 = sub_1B21FF5F0(8 * v16, 16);
        v14 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v17 = 0;
      }
      if (v14 >= 1)
      {
        v18 = 0;
        do
        {
          *(_QWORD *)(v17 + v18) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v18);
          v18 += 8;
        }
        while (8 * v14 != v18);
      }
      v19 = *(_QWORD *)(a1 + 32);
      if (v19 && *(_BYTE *)(a1 + 40))
      {
        sub_1B21FF5FC(v19);
        v14 = *(_DWORD *)(a1 + 20);
      }
      *(_BYTE *)(a1 + 40) = 1;
      *(_QWORD *)(a1 + 32) = v17;
      *(_DWORD *)(a1 + 24) = v16;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = v11;
  *(_DWORD *)(a1 + 20) = v14 + 1;
  return v11;
}

_QWORD *sub_1B21CFFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;

  if (*(int *)(a2 + 800) >= 1)
  {
    v3 = 0;
    v4 = a2 + 16;
    do
    {
      result = sub_1B21EC9B0((_QWORD *)a2, v4);
      ++v3;
      v4 += 192;
    }
    while (v3 < *(int *)(a2 + 800));
  }
  *(_DWORD *)(a2 + 800) = 0;
  return result;
}

void sub_1B21D0004(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;

  --dword_1EEFD59AC;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v4 = *(int *)(a2 + 820);
  v5 = *(int *)(a1 + 20) - 1;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v4);
  *(_QWORD *)(v6 + 8 * v4) = *(_QWORD *)(v6 + 8 * v5);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v7;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4) + 820) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  v8 = *(int **)(a1 + 112);
  v9 = *((_QWORD *)v8 + 3);
  if (v9 > a2 || v9 + *v8 * (uint64_t)v8[1] <= a2)
  {
    sub_1B21FF5FC(a2);
  }
  else
  {
    *(_QWORD *)a2 = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 2) = a2;
    ++v8[2];
  }
}

uint64_t sub_1B21D00BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a4;
  v4 = *(_QWORD *)(a1 + 288 * *(int *)(*(_QWORD *)(a2 + 8) + 8) + 8 * *(int *)(*(_QWORD *)(a3 + 8) + 8) + 120);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6, a2, a3);
}

BOOL sub_1B21D0114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _BOOL4 v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;

  v3 = *(_DWORD *)(a2 + 232);
  if ((v3 & 4) != 0)
  {
    result = 0;
  }
  else
  {
    v4 = (v3 & 3) == 0 || (*(_DWORD *)(a3 + 232) & 3) == 0;
    result = (*(_DWORD *)(a3 + 232) & 4) == 0 && v4;
  }
  v6 = *(_QWORD *)(a2 + 200);
  v7 = *(_QWORD *)(a3 + 200);
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (*(_QWORD *)(v7 + 16) & *(_QWORD *)(v6 + 8)) != 0 && (*(_QWORD *)(v6 + 16) & *(_QWORD *)(v7 + 8)) != 0;
    return result && v9;
  }
  return result;
}

uint64_t sub_1B21D0188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v5;

  v3 = *(_DWORD *)(a2 + 244);
  if (v3 == 5 || v3 == 2)
  {
    v5 = *(_DWORD *)(a3 + 244);
    if (v5 == 2 || v5 == 5)
      return 0;
  }
  if (*(_DWORD *)(a2 + 292))
    return (**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, a3);
  return 1;
}

uint64_t sub_1B21D01D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];

  v5[0] = &off_1E63CD1A0;
  v5[1] = a3;
  v5[2] = a1;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v5, a4);
}

_QWORD *sub_1B21D021C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_DWORD *)(v2 + 8);
  if (!v3)
    return (_QWORD *)sub_1B21FF5F0(a2, 16);
  result = *(_QWORD **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = *result;
  *(_DWORD *)(v2 + 8) = v3 - 1;
  return result;
}

void sub_1B21D024C(uint64_t a1, _QWORD *a2)
{
  int *v2;
  unint64_t v3;

  if (a2
    && (v2 = *(int **)(a1 + 104), v3 = *((_QWORD *)v2 + 3), v3 <= (unint64_t)a2)
    && v3 + *v2 * (uint64_t)v2[1] > (unint64_t)a2)
  {
    *a2 = *((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = a2;
    ++v2[2];
  }
  else
  {
    sub_1B21FF5FC((uint64_t)a2);
  }
}

void sub_1B21D0294()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D02A8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 96))(a2);
  return 0;
}

double sub_1B21D02D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1E63CC6C0;
  *(_OWORD *)(a1 + 176) = xmmword_1B2244F70;
  *(_QWORD *)(a1 + 192) = 0x5D5E0B6B00000000;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = xmmword_1B22C9F80;
  *(_OWORD *)(a1 + 248) = xmmword_1B22AD380;
  *(_DWORD *)(a1 + 264) = 1;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 1065353216;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DB0;
  *(_OWORD *)(a1 + 32) = xmmword_1B2244DD0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1B2244D90;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_1B21D0364(uint64_t result, int a2)
{
  if ((*(_DWORD *)(result + 244) & 0xFFFFFFFE) != 4)
    *(_DWORD *)(result + 244) = a2;
  return result;
}

uint64_t sub_1B21D037C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 244) = a2;
  return result;
}

uint64_t sub_1B21D0384(uint64_t result, char a2)
{
  if ((a2 & 1) != 0 || (*(_BYTE *)(result + 232) & 3) == 0)
  {
    if ((*(_DWORD *)(result + 244) & 0xFFFFFFFE) != 4)
      *(_DWORD *)(result + 244) = 1;
    *(_DWORD *)(result + 248) = 0;
  }
  return result;
}

const char *sub_1B21D03B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v10;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = 0;
  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 16; j += 4)
      *(_DWORD *)(a2 + v6 + j + 32) = *(_DWORD *)(a1 + v6 + j + 16);
    v6 += 16;
  }
  for (k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + k + 80) = *(_DWORD *)(a1 + k + 64);
  v10 = 0;
  for (m = 0; m != 3; ++m)
  {
    for (n = 0; n != 16; n += 4)
      *(_DWORD *)(a2 + v10 + n + 96) = *(_DWORD *)(a1 + v10 + n + 80);
    v10 += 16;
  }
  for (ii = 0; ii != 16; ii += 4)
    *(_DWORD *)(a2 + ii + 144) = *(_DWORD *)(a1 + ii + 128);
  for (jj = 0; jj != 16; jj += 4)
    *(_DWORD *)(a2 + jj + 160) = *(_DWORD *)(a1 + jj + 144);
  for (kk = 0; kk != 16; kk += 4)
    *(_DWORD *)(a2 + kk + 176) = *(_DWORD *)(a1 + kk + 160);
  for (mm = 0; mm != 16; mm += 4)
    *(_DWORD *)(a2 + mm + 192) = *(_DWORD *)(a1 + mm + 176);
  *(_DWORD *)(a2 + 240) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a2 + 208) = *(_DWORD *)(a1 + 196);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 208));
  *(_QWORD *)(a2 + 16) = 0;
  v17 = vrev64q_s32(*(int32x4_t *)(a1 + 248));
  v17.i64[0] = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 244) = *(_OWORD *)(a1 + 232);
  *(int32x4_t *)(a2 + 212) = v17;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 264);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v18);
  *(_QWORD *)(a2 + 24) = v19;
  if (v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v18);
  *(_QWORD *)(a2 + 228) = *(_QWORD *)(a1 + 280);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a2 + 264) = *(_DWORD *)(a1 + 292);
  return "btCollisionObjectFloatData";
}

uint64_t sub_1B21D05B8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(v5 + 8), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6, 1245859651, a1);
}

uint64_t sub_1B21D0640()
{
  return 1;
}

uint64_t sub_1B21D0648(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 208) = a2;
  *(_QWORD *)(result + 224) = a2;
  return result;
}

uint64_t sub_1B21D0654()
{
  return 272;
}

double sub_1B21D065C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = &off_1E63CC4C8;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(a1 + 52) = 0x100000000;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 1;
  *(_DWORD *)(a1 + 84) = 1025758986;
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  return result;
}

uint64_t sub_1B21D06C8(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E63CC4C8;
  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i);
      v5 = *(_QWORD *)(v4 + 200);
      if (v5)
      {
        v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, v5, *(_QWORD *)(a1 + 40));
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v5, *(_QWORD *)(a1 + 40));
        *(_QWORD *)(v4 + 200) = 0;
        v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  sub_1B1810570(a1 + 8);
  return a1;
}

void sub_1B21D0778(uint64_t a1)
{
  sub_1B21D06C8(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D079C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  _BYTE v18[16];
  _BYTE v19[16];
  _OWORD v20[4];

  v10 = *(_DWORD *)(a1 + 12);
  if (v10 == *(_DWORD *)(a1 + 16))
  {
    v11 = v10 ? 2 * v10 : 1;
    if (v10 < v11)
    {
      if (v11)
      {
        v12 = sub_1B21FF5F0(8 * v11, 16);
        v10 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v12 = 0;
      }
      if (v10 >= 1)
      {
        v13 = 0;
        do
        {
          *(_QWORD *)(v12 + v13) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v13);
          v13 += 8;
        }
        while (8 * v10 != v13);
      }
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 && *(_BYTE *)(a1 + 32))
      {
        sub_1B21FF5FC(v14);
        v10 = *(_DWORD *)(a1 + 12);
      }
      *(_BYTE *)(a1 + 32) = 1;
      *(_QWORD *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 16) = v11;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v10) = a2;
  *(_DWORD *)(a1 + 12) = v10 + 1;
  v15 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)(a2 + 16);
  v20[1] = v15;
  v16 = *(_OWORD *)(a2 + 64);
  v20[2] = *(_OWORD *)(a2 + 48);
  v20[3] = v16;
  (*(void (**)(_QWORD, _OWORD *, _BYTE *, _BYTE *))(**(_QWORD **)(a2 + 208) + 16))(*(_QWORD *)(a2 + 208), v20, v19, v18);
  result = (*(uint64_t (**)(_QWORD, _BYTE *, _BYTE *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), v19, v18, *(unsigned int *)(*(_QWORD *)(a2 + 208) + 8), a2, a3, a4, a5, *(_QWORD *)(a1 + 40), 0);
  *(_QWORD *)(a2 + 200) = result;
  return result;
}

uint64_t sub_1B21D08F0(uint64_t a1, uint64_t a2)
{
  const float *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  uint64_t result;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *))(**(_QWORD **)(a2 + 208) + 16))(*(_QWORD *)(a2 + 208), a2 + 16, &v15, &v14);
  v4 = (const float *)&dword_1EEF652F4;
  v5 = vld1q_dup_f32(v4);
  v5.i32[3] = 0;
  v6 = vsubq_f32(v15, v5);
  v15 = v6;
  v7 = vaddq_f32(v14, v5);
  v14 = v7;
  if (*(_BYTE *)(a1 + 64) && *(_DWORD *)(a2 + 264) == 2 && (*(_BYTE *)(a2 + 232) & 3) == 0)
  {
    v11 = v5;
    (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *))(**(_QWORD **)(a2 + 208) + 16))(*(_QWORD *)(a2 + 208), a2 + 80, &v13, &v12);
    v6 = vminq_f32(v15, vsubq_f32(v13, v11));
    v15 = v6;
    v7 = vmaxq_f32(v14, vaddq_f32(v11, v12));
    v14 = v7;
  }
  if ((*(_BYTE *)(a2 + 232) & 1) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, float32x4_t *, float32x4_t *, _QWORD))(**(_QWORD **)(a1 + 96)
                                                                                           + 32))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 200), &v15, &v14, *(_QWORD *)(a1 + 40));
  v8 = vsubq_f32(v7, v6);
  v8.i32[3] = 0;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0] < 1.0e12)return (*(uint64_t (**)(_QWORD, _QWORD, float32x4_t *, float32x4_t *, _QWORD))(**(_QWORD **)(a1 + 96)+ 32))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 200), &v15, &v14, *(_QWORD *)(a1 + 40));
  result = sub_1B21D0364(a2, 5);
  if ((byte_1EEFD40F0 & 1) == 0)
  {
    result = *(_QWORD *)(a1 + 104);
    if (result)
    {
      byte_1EEFD40F0 = 1;
      (*(void (**)(uint64_t, const char *))(*(_QWORD *)result + 72))(result, "Overflow in AABB, object removed from simulation");
      (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 104) + 72))(*(_QWORD *)(a1 + 104), "If you can reproduce this, please email bugs@continuousphysics.com\n");
      (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 104) + 72))(*(_QWORD *)(a1 + 104), "Please include above information, your Platform, version of OS.\n");
      return (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 104) + 72))(*(_QWORD *)(a1 + 104), "Thanks.\n");
    }
  }
  return result;
}

uint64_t sub_1B21D0A9C(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  int v5;

  v1 = *(_DWORD *)(result + 12);
  if (v1 >= 1)
  {
    v2 = result;
    for (i = 0; i < v1; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * i);
      if (!*(_BYTE *)(v2 + 112))
      {
        v5 = *(_DWORD *)(v4 + 244);
        if (v5 == 2 || v5 == 5)
          continue;
      }
      result = sub_1B21D08F0(v2, v4);
      v1 = *(_DWORD *)(v2 + 12);
    }
  }
  return result;
}

uint64_t sub_1B21D0B04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1B21D0B1C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, v4, a1 + 48, *(_QWORD *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1B21D0BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a2 + 200);
  if (v3)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 80))(v5, v3, *(_QWORD *)(a1 + 40));
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v3, *(_QWORD *)(a1 + 40));
    *(_QWORD *)(a2 + 200) = 0;
  }
  return sub_1B21D0C28(a1 + 8, &v7);
}

uint64_t sub_1B21D0C28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 16);
    while (*(_QWORD *)(v4 + 8 * v3) != *a2)
    {
      if (v2 == ++v3)
        return result;
    }
    if ((int)v2 > (int)v3)
    {
      v5 = v2 - 1;
      v6 = *(_QWORD *)(v4 + 8 * v3);
      *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
      *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v5) = v6;
      *(_DWORD *)(result + 4) = v5;
    }
  }
  return result;
}

double sub_1B21D0C84(float32x4_t *a1, float32x4_t *a2, _QWORD *a3, uint64_t a4)
{
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int32x2_t v15;
  unsigned __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  int8x16_t v38;
  float v39;
  float v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x2_t v48;
  unsigned __int32 v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  __n128 v70;
  uint64_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int v80;
  uint64_t v81;
  float32x4_t v82;
  _OWORD v83[2];
  __n128 v84[2];
  float v85;
  uint64_t (**v86)();
  uint64_t v87;
  float32x4_t v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int32x4_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  char v100;
  float32x4_t v101[9];
  float32x4_t v102;
  float v103;
  uint64_t v104;
  int v105;
  void *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v8.n128_f64[0] = sub_1B21E0FCC((uint64_t)&v106);
  v106 = &unk_1E63CBCC8;
  v107 = 8;
  v108 = 0;
  v109 = 0;
  v9 = a3[1];
  v10 = a3[3];
  v11 = *(_DWORD *)(v9 + 8);
  if (v11 == 28)
  {
    v12 = *(int32x4_t *)(v10 + 16);
    v13 = *(int8x16_t *)(v10 + 32);
    v14 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v10, v12);
    v15 = vzip2_s32(*(int32x2_t *)v13.i8, 0);
    v16 = vextq_s8(v13, v13, 8uLL).u32[0];
    v17.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    v14.i64[1] = v13.u32[0];
    v13.i64[0] = 0x8000000080000000;
    v13.i64[1] = 0x8000000080000000;
    v18 = (float32x4_t)veorq_s8(*(int8x16_t *)(v10 + 48), v13);
    v19 = vmulq_f32(v14, v18);
    *(int32x2_t *)v20.f32 = vzip2_s32(*(int32x2_t *)v10, *(int32x2_t *)v12.i8);
    *(int32x2_t *)&v20.u32[2] = v15;
    v21 = (int8x16_t)vmulq_f32(v20, v18);
    v17.i64[1] = v16;
    v22 = (int8x16_t)vmulq_f32(v17, v18);
    v22.i32[3] = 0;
    *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    v23 = a1[3];
    v24 = vmulq_f32(v14, v23);
    v25 = (int8x16_t)vmulq_f32(v20, v23);
    v26 = (int8x16_t)vmulq_f32(v17, v23);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    v27 = a2[3];
    v28 = (int8x16_t)vmulq_f32(v14, v27);
    v29 = vmulq_f32(v20, v27);
    v30 = (int8x16_t)vmulq_f32(v17, v27);
    v30.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
    v31 = vaddq_f32(v19, v24);
    v32 = vsubq_f32(vaddq_f32(v19, v29), v31);
    v32.i32[3] = 0;
    v33 = (int8x16_t)vmulq_f32(v32, v32);
    v34 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8)).f32[0]);
    v35 = *(float32x4_t *)(v9 + 64);
    v35.i32[3] = *(_DWORD *)(v9 + 80);
    v36 = (int8x16_t)vmulq_f32(v35, vmulq_n_f32(v32, 1.0 / v34));
    v37 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)).f32[0];
    if (v37 != 0.0)
    {
      v38 = (int8x16_t)vmulq_f32(v31, v35);
      v39 = (float)-(float)(*(float *)(v9 + 80)
                          + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8)).f32[0])/ v37;
      if (v39 >= -0.00000011921 && v39 <= v34)
      {
        v41 = v39 / v34;
        if (v41 < *(float *)(a4 + 8))
        {
          v86 = (uint64_t (**)())a3[2];
          v87 = 0;
          v88 = v35;
          *(float *)&v89 = v41;
          (*(void (**)(uint64_t, uint64_t (***)(), _QWORD))(*(_QWORD *)a4 + 24))(a4, &v86, 0);
        }
      }
    }
  }
  else if (v11 > 19)
  {
    if ((v11 - 21) > 8)
    {
      if (v11 == 31)
      {
        v71 = *(uint64_t **)(v9 + 96);
        v72 = a3[2];
        v86 = &off_1E63FC540;
        v87 = v72;
        v88.i64[0] = v9;
        v88.i64[1] = v10;
        v89 = a1;
        v90 = a2;
        v91 = a4;
        if (v71)
        {
          v74 = *(float32x4_t *)(v10 + 32);
          v73 = *(float32x4_t *)(v10 + 48);
          v75 = vsubq_f32(a1[3], v73);
          v75.i32[3] = 0;
          v76 = *(float32x4_t *)v10;
          v77 = *(float32x4_t *)(v10 + 16);
          v76.i32[3] = 0;
          v77.i32[3] = 0;
          v74.i32[3] = 0;
          v101[0] = vaddq_f32(vaddq_f32(vmulq_n_f32(v76, v75.f32[0]), vmulq_lane_f32(v77, *(float32x2_t *)v75.f32, 1)), vmulq_laneq_f32(v74, v75, 2));
          v78 = vsubq_f32(a2[3], v73);
          v78.i32[3] = 0;
          v84[0] = (__n128)vaddq_f32(vaddq_f32(vmulq_n_f32(v76, v78.f32[0]), vmulq_lane_f32(v77, *(float32x2_t *)v78.f32, 1)), vmulq_laneq_f32(v74, v78, 2));
          sub_1B21D1368(*v71, v101, (float32x4_t *)v84, (uint64_t)&v86);
        }
        else
        {
          v80 = *(_DWORD *)(v9 + 28);
          if (v80 >= 1)
          {
            v81 = 0;
            do
            {
              sub_1B21D1730(&v86, v81, v8);
              v81 = (v81 + 1);
            }
            while (v80 != (_DWORD)v81);
          }
        }
      }
    }
    else
    {
      v46 = *(float32x4_t *)(v10 + 16);
      v47 = *(float32x4_t *)(v10 + 32);
      v48 = vzip2_s32(*(int32x2_t *)v47.f32, 0);
      v49 = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
      v50 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v10, (int32x4_t)v46);
      v47.i64[0] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
      v50.i64[1] = *(_OWORD *)(v10 + 32);
      v51.i64[0] = 0x8000000080000000;
      v51.i64[1] = 0x8000000080000000;
      v52 = (float32x4_t)veorq_s8(*(int8x16_t *)(v10 + 48), v51);
      v53 = (int8x16_t)vmulq_f32(v50, v52);
      *(int32x2_t *)v46.f32 = vzip2_s32(*(int32x2_t *)v10, *(int32x2_t *)v46.f32);
      *(int32x2_t *)&v46.u32[2] = v48;
      v54 = vmulq_f32(v46, v52);
      *(float32x2_t *)v54.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v54.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)));
      v47.i64[1] = v49;
      v55 = (int8x16_t)vmulq_f32(v47, v52);
      v55.i32[3] = 0;
      *(float32x2_t *)&v54.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), 0);
      v56 = a1[3];
      v57 = vmulq_f32(v50, v56);
      v58 = (int8x16_t)vmulq_f32(v46, v56);
      v59 = (int8x16_t)vmulq_f32(v47, v56);
      v59.i32[3] = 0;
      *(float32x2_t *)v57.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
      *(float32x2_t *)&v57.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
      v101[0] = vaddq_f32(v54, v57);
      v60 = a2[3];
      v61 = vmulq_f32(v50, v60);
      v62 = (int8x16_t)vmulq_f32(v46, v60);
      v63 = (int8x16_t)vmulq_f32(v47, v60);
      v63.i32[3] = 0;
      *(float32x2_t *)v61.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)));
      *(float32x2_t *)&v61.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
      v84[0] = (__n128)vaddq_f32(v54, v61);
      v64 = a3[2];
      if (v11 == 21)
      {
        sub_1B21EE988((uint64_t)&v86, v101, v84, *(_DWORD *)(a4 + 48));
        v86 = (uint64_t (**)())&off_1E63FC4E0;
        v92 = a4;
        v93 = v64;
        v94 = v9;
        v95 = *(int32x4_t *)v10;
        v96 = *(_OWORD *)(v10 + 16);
        v97 = *(_OWORD *)(v10 + 32);
        v98 = *(_OWORD *)(v10 + 48);
        HIDWORD(v91) = *(_DWORD *)(a4 + 8);
        sub_1B21DE260(v9, (uint64_t)&v86, v101, (float32x4_t *)v84, COERCE_DOUBLE(__PAIR64__(DWORD1(v98), HIDWORD(v91))), v65, v66, v67, v68, v69, v70);
      }
      else
      {
        sub_1B21EE988((uint64_t)&v86, v101, v84, *(_DWORD *)(a4 + 48));
        v86 = (uint64_t (**)())&off_1E63FC510;
        v92 = a4;
        v93 = v64;
        v94 = v9;
        v95 = *(int32x4_t *)v10;
        v96 = *(_OWORD *)(v10 + 16);
        v97 = *(_OWORD *)(v10 + 32);
        v98 = *(_OWORD *)(v10 + 48);
        HIDWORD(v91) = *(_DWORD *)(a4 + 8);
        v82 = vmaxq_f32(v101[0], (float32x4_t)v84[0]);
        v83[0] = vminq_f32(v101[0], (float32x4_t)v84[0]);
        (*(void (**)(uint64_t, uint64_t (***)(), _OWORD *, float32x4_t *))(*(_QWORD *)v9 + 128))(v9, &v86, v83, &v82);
      }
      nullsub_16(&v86);
    }
  }
  else
  {
    v101[0].i64[0] = (uint64_t)off_1E63CE0A0;
    v104 = 0;
    v105 = 0;
    v103 = *(float *)(a4 + 8);
    v99 = 953267991;
    v100 = 0;
    sub_1B21EEDF0(v83, (uint64_t)&v106, v9, (uint64_t)&v86);
    if (sub_1B21EEE04((uint64_t *)v83, a1, a2, (float32x4_t *)v10, (float32x4_t *)v10, (uint64_t)v101))
    {
      v42 = (int8x16_t)vmulq_f32(v102, v102);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).f32[0] > 0.0001&& v103 < *(float *)(a4 + 8))
      {
        v43 = vmulq_f32(v102, *a1);
        v44 = (int8x16_t)vmulq_f32(v102, a1[1]);
        v45 = (int8x16_t)vmulq_f32(v102, a1[2]);
        v45.i32[3] = 0;
        *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)));
        *(float32x2_t *)v44.i8 = vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
        *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
        v102 = vmulq_n_f32(v43, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), vmul_f32(*(float32x2_t *)&v43.u32[2], *(float32x2_t *)&v43.u32[2])).f32[0]));
        v84[0] = (__n128)(unint64_t)a3[2];
        v84[1] = (__n128)v102;
        v85 = v103;
        (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)a4 + 24))(a4, v84, 1);
      }
    }
    nullsub_16(v83);
  }
  return nullsub_16(&v106);
}

void sub_1B21D1368(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  int8x16_t v9;
  _QWORD *v10;
  float32x2_t v11;
  float v12;
  int8x8_t v13;
  float32x2_t v14;
  float32x2_t v20;
  int32x2_t v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v41;
  float v42;
  float v43;
  float v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t i;
  uint64_t v50;
  float *v51;
  float *v52;
  uint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  float *v57;
  int v58;
  uint64_t v59;
  float *v60;
  int v61;
  float *v62;
  float32x4_t v64;
  __int32 v65;
  unsigned __int32 v66;
  _OWORD v67[2];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = vsubq_f32(*a3, *a2);
    v6.i32[3] = 0;
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    v64 = vmulq_n_f32(v6, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0]));
    v8 = 1.0 / v64.f32[0];
    v9 = (int8x16_t)vmulq_f32(v64, v6);
    v66 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).u32[0];
    v10 = (_QWORD *)sub_1B21FF5F0(1024, 16);
    bzero(v10 + 1, 0x3F8uLL);
    v11.i32[1] = v64.i32[1];
    v12 = *(float *)&v66;
    if (v64.f32[0] == 0.0)
      v8 = 1.0e18;
    v11.i32[0] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u32[0];
    v13 = (int8x8_t)vceqz_f32(v11);
    v14 = v11;
    __asm { FMOV            V1.2S, #1.0 }
    v20 = (float32x2_t)vbsl_s8(v13, (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D1, v14));
    v21 = vcltz_f32(v20);
    v22 = (float *)&v67[v8 < 0.0];
    v23 = (float *)&v67[v8 >= 0.0];
    *v10 = a1;
    v24 = (float *)&v67[v21.i8[4] & 1];
    v25 = (float *)&v67[(v21.i8[4] & 1) == 0];
    v26 = (float *)&v67[v21.i8[0] & 1] + 2;
    v27 = (float *)&v67[(v21.i8[0] & 1) == 0] + 2;
    v28 = v20.f32[1];
    LODWORD(v29) = 1;
    v30 = 126;
    v61 = 128;
    v31 = 128;
    v65 = v20.i32[0];
    v62 = v24;
    while (1)
    {
      v32 = (int)v29;
      v29 = (int)v29 - 1;
      v33 = v10[v29];
      v34 = *(_OWORD *)(v33 + 16);
      v67[0] = *(_OWORD *)v33;
      v67[1] = v34;
      v35 = a2->f32[1];
      v36 = v8 * (float)(*v22 - a2->f32[0]);
      v37 = v8 * (float)(*v23 - a2->f32[0]);
      v38 = v28 * (float)(v24[1] - v35);
      v39 = v28 * (float)(v25[1] - v35);
      if (v36 > v39 || v38 > v37)
        goto LABEL_37;
      if (v38 > v36)
        v36 = v38;
      if (v39 < v37)
        v37 = v39;
      v41 = a2->f32[2];
      v42 = v20.f32[0] * (float)(*v26 - v41);
      v43 = v20.f32[0] * (float)(*v27 - v41);
      if (v36 > v43 || v42 > v37)
        goto LABEL_37;
      if (v42 <= v36)
        v42 = v36;
      v45 = v43 >= v37 ? v37 : v43;
      if (v42 >= v12 || v45 <= 0.0)
        goto LABEL_37;
      if (*(_QWORD *)(v33 + 48))
      {
        if ((int)v29 <= (int)v30)
        {
          v46 = v31;
        }
        else
        {
          v46 = (2 * v31);
          if ((int)v31 <= 2 * (int)v31)
          {
            v59 = (2 * v31);
            v60 = v26;
            if ((int)v31 < (int)v46 && v61 < (int)v46)
            {
              v57 = v27;
              v58 = v31;
              if ((_DWORD)v31)
              {
                v47 = sub_1B21FF5F0(8 * (int)v46, 16);
                v48 = (_QWORD *)v47;
                if (v58 >= 1)
                {
                  for (i = 0; i != v58; ++i)
                    *(_QWORD *)(v47 + i * 8) = v10[i];
                }
              }
              else
              {
                v48 = 0;
              }
              sub_1B21FF5FC((uint64_t)v10);
              v46 = v59;
              v26 = v60;
              v61 = v59;
              v10 = v48;
              v20.i32[0] = v65;
              v12 = *(float *)&v66;
              v27 = v57;
              LODWORD(v31) = v58;
            }
            if ((int)v31 < (int)v46)
            {
              bzero(&v10[(int)v31], 8 * (v31 - 1) + 8);
              v46 = v59;
              v26 = v60;
              v20.i32[0] = v65;
              v12 = *(float *)&v66;
            }
          }
          v30 = (v46 - 2);
        }
        v10[v29] = *(_QWORD *)(v33 + 40);
        LODWORD(v29) = v32 + 1;
        v10[v32] = *(_QWORD *)(v33 + 48);
        v31 = v46;
        if ((_DWORD)v32 == -1)
        {
LABEL_46:
          sub_1B21FF5FC((uint64_t)v10);
          return;
        }
      }
      else
      {
        v50 = v33;
        v51 = v26;
        v52 = v27;
        v53 = v31;
        v54 = v23;
        v55 = v22;
        v56 = v30;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, v50);
        v30 = v56;
        v22 = v55;
        v23 = v54;
        v24 = v62;
        v31 = v53;
        v27 = v52;
        v26 = v51;
        v20.i32[0] = v65;
        v12 = *(float *)&v66;
LABEL_37:
        if (!(_DWORD)v29)
          goto LABEL_46;
      }
    }
  }
}

double sub_1B21D1730(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t (**v20)();
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD v28[4];
  int v29;
  int v30;
  _OWORD v31[4];

  v2 = a1[1];
  v3 = *(_QWORD *)(a1[2] + 40) + 96 * a2;
  v5 = (float32x4_t *)a1[3];
  v4 = (float32x4_t *)a1[4];
  v6 = v5[1];
  v7 = v5[2];
  v8 = *(float32x4_t *)v3;
  v9 = *(float32x4_t *)(v3 + 16);
  v10 = *(float32x4_t *)(v3 + 32);
  v11 = *(float32x4_t *)(v3 + 48);
  v12 = *(_QWORD *)(v3 + 64);
  v13 = vmulq_f32(*v5, v11);
  v14 = (int8x16_t)vmulq_f32(v6, v11);
  *(float32x2_t *)v13.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8));
  v15 = (int8x16_t)vmulq_f32(v7, v11);
  v15.i32[3] = 0;
  *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  v10.i32[3] = 0;
  v16 = vaddq_f32(v5[3], v13);
  v9.i32[3] = 0;
  v8.i32[3] = 0;
  v31[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*v5)), v9, *(float32x2_t *)v5->f32, 1), v10, *v5, 2);
  v31[1] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v6.f32[0]), v9, *(float32x2_t *)v6.f32, 1), v10, v6, 2);
  v31[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v7.f32[0]), v9, *(float32x2_t *)v7.f32, 1), v10, v7, 2);
  v31[3] = v16;
  v28[0] = 0;
  v28[1] = v12;
  v28[2] = v2;
  v28[3] = v31;
  v29 = -1;
  v30 = a2;
  v22 = 0;
  v23 = xmmword_1B2246510;
  v20 = &off_1E63FC588;
  v17 = (float32x4_t *)a1[5];
  v18 = a1[6];
  v24 = 0;
  v26 = v18;
  v27 = a2;
  v21 = *(_DWORD *)(v18 + 8);
  v25 = *(_DWORD *)(v18 + 48);
  return sub_1B21D0C84(v4, v17, v28, (uint64_t)&v20);
}

void sub_1B21D184C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, _QWORD *a4, float *a5, float a6)
{
  uint64_t v12;
  float32x4_t *v13;
  int v14;
  int8x16_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  float v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  uint64_t v68;
  int8x16_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x2_t v73;
  unsigned __int32 v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  uint64_t v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102[3];
  float32x4_t v103;
  float32x4_t v104;
  __int128 v105;
  float v106;
  _OWORD v107[9];
  float32x4_t v108;
  float32x4_t v109;
  float v110;
  uint64_t v111;
  float v112;
  int v113;
  float v114;
  float *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  float32x4_t v120;
  __int128 v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  float32x4_t v125;
  __int128 v126;
  float v127;
  uint64_t v128;
  float v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v12 = a4[1];
  v13 = (float32x4_t *)a4[3];
  v14 = *(_DWORD *)(v12 + 8);
  if (v14 <= 19)
  {
    v120.i64[0] = (uint64_t)off_1E63CE0A0;
    v128 = 0;
    v129 = a6;
    v127 = a5[2];
    v118 = 953267991;
    v119 = 0;
    v101.i64[0] = (uint64_t)&unk_1E63CDB08;
    sub_1B21E8718(v102, a1, v12, (uint64_t)v107, (uint64_t)&v101);
    if ((*(unsigned int (**)(float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(v102[0].i64[0] + 16))(v102, a2, a3, v13, v13, &v120))
    {
      v15 = (int8x16_t)vmulq_f32(v125, v125);
      v16 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0];
      if (v16 > 0.0001 && v127 < a5[2])
      {
        v125 = vmulq_n_f32(v125, 1.0 / sqrtf(v16));
        v103 = (float32x4_t)(unint64_t)a4[2];
        v104 = v125;
        v105 = v126;
        v106 = v127;
        (*(void (**)(float *, float32x4_t *, uint64_t))(*(_QWORD *)a5 + 24))(a5, &v103, 1);
      }
    }
    v17 = v102;
LABEL_7:
    nullsub_16(v17);
    return;
  }
  if ((v14 - 21) > 8)
  {
    if (v14 == 31 && *(int *)(v12 + 28) >= 1)
    {
      v53 = 0;
      v54 = 0;
      do
      {
        v55 = (float32x4_t *)(*(_QWORD *)(v12 + 40) + v53);
        v56 = *v55;
        v57 = v55[1];
        v58 = v55[2];
        v59 = v55[3];
        v60 = v55[4].i64[0];
        v56.i32[3] = 0;
        v57.i32[3] = 0;
        v61 = v13[1];
        v58.i32[3] = 0;
        v62 = v13[2];
        v63 = v13[3];
        v64 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v61.f32[0]), v57, *(float32x2_t *)v61.f32, 1), v58, v61, 2);
        v65 = (int8x16_t)vmulq_f32(v59, *v13);
        v66 = vmulq_f32(v59, v61);
        v67 = (int8x16_t)vmulq_f32(v59, v62);
        v67.i32[3] = 0;
        *(float32x2_t *)v66.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)), vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v66.f32));
        *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), 0);
        v107[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*v13)), v57, *(float32x2_t *)v13->f32, 1), v58, *v13, 2);
        v107[1] = v64;
        v107[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v62.f32[0]), v57, *(float32x2_t *)v62.f32, 1), v58, v62, 2);
        v107[3] = vaddq_f32(v66, v63);
        v121 = xmmword_1B2246510;
        v120.i64[0] = (uint64_t)&off_1E63FC618;
        v122.i64[0] = 0;
        v122.i64[1] = (uint64_t)a5;
        LODWORD(v123) = v54;
        v120.f32[2] = a5[2];
        v68 = a4[2];
        v103.i64[0] = (uint64_t)a4;
        v103.i64[1] = v60;
        v104.i64[0] = v68;
        v104.i64[1] = (uint64_t)v107;
        LODWORD(v105) = -1;
        DWORD1(v105) = v54;
        sub_1B21D184C(a1, a2, a3, &v103, &v120, a6);
        ++v54;
        v53 += 96;
      }
      while (v54 < *(int *)(v12 + 28));
    }
  }
  else
  {
    if (v14 == 28)
    {
      *(_QWORD *)&v107[0] = off_1E63CE0A0;
      v111 = 0;
      v112 = a6;
      v110 = a5[2];
      sub_1B21E8730(&v103, a1, v12);
      if ((*(unsigned int (**)(float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, _OWORD *))(v103.i64[0] + 16))(&v103, a2, a3, v13, v13, v107))
      {
        v69 = (int8x16_t)vmulq_f32(v108, v108);
        v70 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)).f32[0];
        if (v70 > 0.0001 && v110 < a5[2])
        {
          v108 = vmulq_n_f32(v108, 1.0 / sqrtf(v70));
          v120 = (float32x4_t)(unint64_t)a4[2];
          v121 = (__int128)v108;
          v122 = v109;
          *(float *)&v123 = v110;
          (*(void (**)(float *, float32x4_t *, uint64_t))(*(_QWORD *)a5 + 24))(a5, &v120, 1);
        }
      }
      v17 = &v103;
      goto LABEL_7;
    }
    if (v14 == 21)
    {
      v18 = v13[1];
      v19 = v13[2];
      v20 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v13, (int32x4_t)v18);
      v21 = *a3;
      v22 = a3[1];
      v21.i32[3] = 0;
      v22.i32[3] = 0;
      v24 = a3[2];
      v23 = a3[3];
      v24.i32[3] = 0;
      v25 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v21, *(float32x2_t *)v13->f32, 1), v22, *(float32x2_t *)v18.f32, 1), v24, *(float32x2_t *)v19.f32, 1);
      v26 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v21, COERCE_FLOAT(*v13)), v22, v18.f32[0]), v24, v19.f32[0]);
      v27.i64[0] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i64[1] = v19.u32[0];
      v28.i64[0] = 0x8000000080000000;
      v28.i64[1] = 0x8000000080000000;
      v29 = (float32x4_t)veorq_s8((int8x16_t)v13[3], v28);
      v30 = (int8x16_t)vmulq_f32(v20, v29);
      *(int32x2_t *)v31.f32 = vzip2_s32(*(int32x2_t *)v13->f32, *(int32x2_t *)v18.f32);
      *(int32x2_t *)&v31.u32[2] = vzip2_s32(*(int32x2_t *)v19.f32, 0);
      v32 = vmulq_f32(v31, v29);
      v27.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      v33 = (int8x16_t)vmulq_f32(v27, v29);
      v33.i32[3] = 0;
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
      v34 = a2[3];
      v35 = (int8x16_t)vmulq_f32(v20, v34);
      v36 = vmulq_laneq_f32(v21, *v13, 2);
      v37 = (int8x16_t)vmulq_f32(v31, v34);
      v38 = vmlaq_laneq_f32(v36, v22, v18, 2);
      v39 = (int8x16_t)vmulq_f32(v27, v34);
      v39.i32[3] = 0;
      *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
      *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
      v40 = vmlaq_laneq_f32(v38, v24, v19, 2);
      v103 = vaddq_f32(v32, v18);
      v41 = vmulq_f32(v20, v23);
      v42 = (int8x16_t)vmulq_f32(v31, v23);
      v43 = (int8x16_t)vmulq_f32(v27, v23);
      v43.i32[3] = 0;
      *(float32x2_t *)v41.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
      *(float32x2_t *)&v41.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
      v102[0] = vaddq_f32(v32, v41);
      v120 = v26;
      v121 = (__int128)v25;
      v122 = v40;
      v124 = 0;
      v123 = 0;
      v44 = a4[2];
      v45 = (*(float (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
      sub_1B21EEBD4((uint64_t)v107, a1, a2, a3, v13, v45);
      *(_QWORD *)&v107[0] = &off_1E63FC5B8;
      v115 = a5;
      v116 = v44;
      v117 = v12;
      v113 = *((_DWORD *)a5 + 2);
      v114 = a6;
      v46 = (*(double (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, &v120, &v101, &v100);
      sub_1B21DE298(v12, (uint64_t)v107, &v103, v102, &v101, &v100, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      v71 = v13[1];
      v72 = v13[2];
      v73 = vzip2_s32(*(int32x2_t *)v72.f32, 0);
      v74 = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
      v75 = *a3;
      v76 = a3[1];
      v75.i32[3] = 0;
      v76.i32[3] = 0;
      v78 = a3[2];
      v77 = a3[3];
      v78.i32[3] = 0;
      v79 = vmlaq_laneq_f32(vmulq_laneq_f32(v75, *v13, 2), v76, v71, 2);
      v80 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v75, *(float32x2_t *)v13->f32, 1), v76, *(float32x2_t *)v71.f32, 1), v78, *(float32x2_t *)v72.f32, 1);
      v81 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, COERCE_FLOAT(*v13)), v76, v71.f32[0]), v78, v72.f32[0]);
      v82 = vmlaq_laneq_f32(v79, v78, v72, 2);
      v83 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v13, (int32x4_t)v71);
      v78.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
      v83.i64[1] = v72.u32[0];
      v72.i64[0] = 0x8000000080000000;
      v72.i64[1] = 0x8000000080000000;
      v84 = (float32x4_t)veorq_s8((int8x16_t)v13[3], (int8x16_t)v72);
      v85 = (int8x16_t)vmulq_f32(v83, v84);
      *(int32x2_t *)v86.f32 = vzip2_s32(*(int32x2_t *)v13->f32, *(int32x2_t *)v71.f32);
      *(int32x2_t *)&v86.u32[2] = v73;
      v87 = vmulq_f32(v86, v84);
      v78.i64[1] = v74;
      v88 = (int8x16_t)vmulq_f32(v78, v84);
      v88.i32[3] = 0;
      v89 = a2[3];
      v90 = vmulq_f32(v83, v89);
      v91 = (int8x16_t)vmulq_f32(v86, v89);
      v92 = (int8x16_t)vmulq_f32(v78, v89);
      v92.i32[3] = 0;
      *(float32x2_t *)v90.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v91.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)));
      *(float32x2_t *)&v90.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)), 0);
      v93 = (int8x16_t)vmulq_f32(v83, v77);
      v94 = vmulq_f32(v86, v77);
      v95 = (int8x16_t)vmulq_f32(v78, v77);
      v95.i32[3] = 0;
      *(float32x2_t *)v94.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v94.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL)));
      *(float32x2_t *)&v94.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v95.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)), 0);
      *(float32x2_t *)v87.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v87.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)));
      *(float32x2_t *)&v87.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)), 0);
      v98 = vaddq_f32(v87, v94);
      v99 = vaddq_f32(v87, v90);
      v120 = v81;
      v121 = (__int128)v80;
      v122 = v82;
      v124 = 0;
      v123 = 0;
      v96 = a4[2];
      v97 = (*(float (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
      sub_1B21EEBD4((uint64_t)v107, a1, a2, a3, v13, v97);
      *(_QWORD *)&v107[0] = &off_1E63FC5E8;
      v115 = a5;
      v116 = v96;
      v117 = v12;
      v113 = *((_DWORD *)a5 + 2);
      v114 = a6;
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, &v120, &v103, v102);
      v100 = vaddq_f32(vmaxq_f32(v99, v98), v102[0]);
      v101 = vaddq_f32(vminq_f32(v99, v98), v103);
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)v12 + 128))(v12, v107, &v101, &v100);
    }
    nullsub_16(v107);
  }
}

uint64_t sub_1B21D1FAC(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  double v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _BYTE v12[240];

  *(float32x2_t *)&v7 = sub_1B21D3B2C((uint64_t)v12, a2, a3, a1, a4);
  v8 = *(_QWORD *)(a1 + 96);
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, _BYTE *, _QWORD *, _QWORD *, double))(*(_QWORD *)v8 + 48))(v8, a2, a3, v12, v11, v10, v7);
}

uint64_t sub_1B21D2020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float32x4_t v16;
  double v17;
  float32x4_t v19[3];
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24[2];
  float32x4_t v25;
  _OWORD v26[3];
  __int128 v27;
  _OWORD v28[3];
  __int128 v29;

  v12 = *(_OWORD *)(a3 + 16);
  v28[0] = *(_OWORD *)a3;
  v28[1] = v12;
  v13 = *(_OWORD *)(a3 + 48);
  v28[2] = *(_OWORD *)(a3 + 32);
  v29 = v13;
  v14 = *(_OWORD *)(a4 + 16);
  v26[0] = *(_OWORD *)a4;
  v26[1] = v14;
  v15 = *(_OWORD *)(a4 + 48);
  v26[2] = *(_OWORD *)(a4 + 32);
  v27 = v15;
  v25.i32[0] = 0;
  sub_1B21D3CB8(v28, (float32x2_t *)v26, v19, v25.f32);
  v16 = vmulq_n_f32(v19[0], v25.f32[0]);
  v16.i32[3] = 0;
  v23 = v16;
  v22 = 0uLL;
  v19[0] = (float32x4_t)xmmword_1B2244DB0;
  v19[1] = (float32x4_t)xmmword_1B2244DD0;
  v19[2] = (float32x4_t)xmmword_1B2244D90;
  v20 = 0;
  v21 = 0;
  sub_1B21D3EAC((float *)v28, &v25);
  sub_1B19064B8((uint64_t)v19, &v25);
  sub_1B21DF4A4(a2, (uint64_t)v19, &v22, &v23, (float32x2_t *)&v25, v24, 1.0);
  *(float32x2_t *)&v17 = sub_1B21D3FC8((uint64_t)v19, a2, (float32x4_t *)a3, (float32x4_t *)a4, a1, a5, a6);
  return (*(uint64_t (**)(_QWORD, __int128 *, __int128 *, float32x4_t *, float32x4_t *, float32x2_t *, double))(**(_QWORD **)(a1 + 96) + 48))(*(_QWORD *)(a1 + 96), &v29, &v27, v19, &v25, v24, v17);
}

uint64_t sub_1B21D217C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[4];
  _BYTE v8[16];
  _BYTE v9[16];

  (*(void (**)(_QWORD, uint64_t, _BYTE *, _BYTE *))(**(_QWORD **)(a2 + 208) + 16))(*(_QWORD *)(a2 + 208), a2 + 16, v9, v8);
  v7[0] = &off_1E63CD518;
  v7[1] = a2;
  v7[2] = a1;
  v7[3] = a3;
  return (*(uint64_t (**)(_QWORD, _BYTE *, _BYTE *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), v9, v8, v7);
}

uint64_t sub_1B21D21FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[7];
  _QWORD v11[5];
  _QWORD v12[5];

  v6 = *(_QWORD *)(a2 + 208);
  v12[0] = 0;
  v12[1] = v6;
  v12[2] = a2;
  v12[3] = a2 + 16;
  v12[4] = -1;
  v7 = *(_QWORD *)(a3 + 208);
  v11[0] = 0;
  v11[1] = v7;
  v11[2] = a3;
  v11[3] = a3 + 16;
  v11[4] = -1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v12, v11, 0);
  if (result)
  {
    v9 = result;
    sub_1B21DB810(v10, (uint64_t)v12, (uint64_t)v11);
    v10[0] = &off_1E63CD0E0;
    v10[6] = a4;
    (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v12, v11, a1 + 48, v10);
    (**(void (***)(uint64_t))v9)(v9);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40), v9);
  }
  return result;
}

void sub_1B21D22E4(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  float32x4_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float v96;
  __int32 v97;
  void (*v98)(__n128, __n128);
  __n128 v99;
  __n128 v100;
  unsigned __int32 v101;
  unsigned __int32 v102;
  uint64_t v103;
  unsigned int v104;
  float32x4_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int8x16_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int8x16_t v138;
  float32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  uint64_t v142;
  __int32 v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  float32x4_t v158;
  unsigned int v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175[2];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v8 + 112))(v8, a2, 1.0);
  v9 = a3->i32[2];
  switch(v9)
  {
    case 0:
    case 17:
      v160 = a3[3];
      v156 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      v154 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      *(float *)&v10 = (*(float (**)(float32x4_t *))(a3->i64[0] + 96))(a3);
      v11.i64[0] = __PAIR64__(v154, v156);
      v11.i64[1] = v10;
      v166 = vaddq_f32(v160, v11);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v13.i64[0] = 0x8000000080000000;
      v13.i64[1] = 0x8000000080000000;
      v175[0] = (float32x4_t)veorq_s8((int8x16_t)v166, v13);
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v12
                                                                                                  + 144))(v12, v175, &v166, a2, a4);
      return;
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 12:
    case 14:
    case 15:
    case 16:
      goto LABEL_9;
    case 4:
      v69 = a3[9].i32[3];
      if ((v69 + 2) > 4)
      {
        if (v69 >= 3)
        {
          v108 = (v69 / 3);
          v109 = (int *)(a3[10].i64[1] + 8);
          do
          {
            v110 = a3[8].i64[1];
            v111 = a3[2];
            v112 = vmulq_f32(*(float32x4_t *)(v110 + 16 * *(v109 - 2)), v111);
            v113 = vmulq_f32(v111, *(float32x4_t *)(v110 + 16 * *(v109 - 1)));
            v114 = vmulq_f32(v111, *(float32x4_t *)(v110 + 16 * *v109));
            v115 = *a2;
            v116 = a2[1];
            v117 = vmulq_f32(v112, *a2);
            v118 = (int8x16_t)vmulq_f32(v112, v116);
            v119 = a2[2];
            v120 = a2[3];
            v121 = (int8x16_t)vmulq_f32(v112, v119);
            v121.i32[3] = 0;
            *(float32x2_t *)v117.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v118.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL)));
            *(float32x2_t *)&v117.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)), 0);
            v166 = vaddq_f32(v117, v120);
            v122 = vmulq_f32(v113, v115);
            v123 = (int8x16_t)vmulq_f32(v113, v116);
            v124 = (int8x16_t)vmulq_f32(v113, v119);
            v124.i32[3] = 0;
            *(float32x2_t *)v122.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)), vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v123.i8));
            *(float32x2_t *)&v122.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL)), 0);
            v125 = vaddq_f32(v120, v122);
            v126 = vmulq_f32(v114, v115);
            v127 = (int8x16_t)vmulq_f32(v114, v116);
            v128 = (int8x16_t)vmulq_f32(v114, v119);
            v128.i32[3] = 0;
            *(float32x2_t *)v126.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)), vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v127.i8));
            *(float32x2_t *)&v126.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v128.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)), 0);
            v174 = vaddq_f32(v120, v126);
            v175[0] = v125;
            v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v129 + 16))(v129, &v166, v175, a4);
            v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v130 + 16))(v130, &v166, &v174, a4);
            v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v131 + 16))(v131, v175, &v174, a4);
            v109 += 3;
            --v108;
          }
          while (v108);
        }
      }
      else if ((*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3) >= 1)
      {
        v70 = 0;
        do
        {
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(a3->i64[0] + 208))(a3, v70, &v166, v175);
          v71 = a2[1];
          v72 = vmulq_f32(*a2, v166);
          v73 = (int8x16_t)vmulq_f32(v166, v71);
          v74 = a2[2];
          v75 = a2[3];
          v76 = (int8x16_t)vmulq_f32(v166, v74);
          v76.i32[3] = 0;
          *(float32x2_t *)v72.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
          *(float32x2_t *)&v72.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
          v77 = vmulq_f32(*a2, v175[0]);
          v78 = (int8x16_t)vmulq_f32(v71, v175[0]);
          v79 = (int8x16_t)vmulq_f32(v74, v175[0]);
          v79.i32[3] = 0;
          *(float32x2_t *)v77.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v78.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)));
          *(float32x2_t *)&v77.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0);
          v173 = vaddq_f32(v75, v77);
          v174 = vaddq_f32(v72, v75);
          v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v80 + 16))(v80, &v174, &v173, a4);
          v70 = (v70 + 1);
        }
        while ((int)v70 < (*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3));
      }
      return;
    case 8:
      v81 = (*(float (**)(float32x4_t *))(a3->i64[0] + 96))(a3);
      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(_QWORD *)v82 + 32))(v82, a2, a4, v81);
      return;
    case 9:
      v83 = a3[7].u32[3];
      if ((int)v83 >= 1)
      {
        v84 = v83 + 1;
        do
        {
          v164 = *(float32x4_t *)(a3[8].i64[1] + 16 * (v84 - 2));
          v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v86 = *(float *)(a3[10].i64[1] + 4 * (v84 - 2));
          v87 = a2[1];
          v88 = a2[2];
          v89 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v87.f32[0]), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v87.f32, 1), (float32x4_t)xmmword_1B2244D90, v87, 2);
          v90 = (int8x16_t)vmulq_f32(v164, *a2);
          v91 = (int8x16_t)vmulq_f32(v164, v87);
          v92 = (int8x16_t)vmulq_f32(v164, v88);
          v92.i32[3] = 0;
          *(float32x2_t *)v93.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)), vpadd_f32(*(float32x2_t *)v90.i8, *(float32x2_t *)v91.i8));
          *(float32x2_t *)&v93.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)), 0);
          v94 = vaddq_f32(v93, a2[3]);
          v166 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*a2)), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)a2->f32, 1), (float32x4_t)xmmword_1B2244D90, *a2, 2);
          v167 = v89;
          v168 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v88.f32[0]), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v88.f32, 1), (float32x4_t)xmmword_1B2244D90, v88, 2);
          v169 = v94;
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(_QWORD *)v85 + 32))(v85, &v166, a4, v86);
          --v84;
        }
        while (v84 > 1);
      }
      return;
    case 10:
      v95 = a3[4].i32[2];
      v96 = a3[3].f32[((int)v95 + 2) % 3];
      v97 = a3[3].i32[v95];
      v98 = *(void (**)(__n128, __n128))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1)
                                                  + 152);
      goto LABEL_35;
    case 11:
      v101 = a3[4].u32[3];
      v102 = a3[5].u32[0];
      v98 = *(void (**)(__n128, __n128))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1)
                                                  + 168);
      v99.n128_u32[0] = v101;
      v100.n128_u32[0] = v102;
      goto LABEL_36;
    case 13:
      v103 = a3[4].i32[2];
      v96 = (*(float (**)(float32x4_t *))(a3->i64[0] + 184))(a3);
      v165 = a3[3];
      v159 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      v155 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      *(float *)&v104 = (*(float (**)(float32x4_t *))(a3->i64[0] + 96))(a3);
      v105.i64[0] = __PAIR64__(v155, v159);
      v105.i64[1] = v104;
      v166 = vaddq_f32(v165, v105);
      v97 = v166.i32[v103];
      v98 = *(void (**)(__n128, __n128))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1)
                                                  + 160);
LABEL_35:
      v99.n128_f32[0] = v96;
      v100.n128_u32[0] = v97;
LABEL_36:
      v98(v99, v100);
      break;
    default:
      if (v9 == 28)
      {
        v106 = a3[5].f32[0];
        v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float))(*(_QWORD *)v107 + 176))(v107, a3 + 4, a2, a4, v106);
      }
      else if (v9 == 31)
      {
        v14 = a3[1].u32[3];
        if ((int)v14 >= 1)
        {
          v15 = v14 + 1;
          do
          {
            v16 = a3[2].i64[1] + 96 * (v15 - 2);
            v17 = *(float32x4_t *)v16;
            v18 = *(float32x4_t *)(v16 + 16);
            v19 = *(float32x4_t *)(v16 + 32);
            v20 = *(float32x4_t *)(v16 + 48);
            v21 = *(_QWORD *)(v16 + 64);
            v17.i32[3] = 0;
            v18.i32[3] = 0;
            v22 = a2[1];
            v19.i32[3] = 0;
            v23 = a2[2];
            v24 = vmlaq_lane_f32(vmulq_n_f32(v17, v23.f32[0]), v18, *(float32x2_t *)v23.f32, 1);
            v25 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v22.f32[0]), v18, *(float32x2_t *)v22.f32, 1), v19, v22, 2);
            v26 = (int8x16_t)vmulq_f32(v20, *a2);
            v27 = (int8x16_t)vmulq_f32(v20, v22);
            v28 = (int8x16_t)vmulq_f32(v20, v23);
            v28.i32[3] = 0;
            v29 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*a2)), v18, *(float32x2_t *)a2->f32, 1), v19, *a2, 2);
            *(float32x2_t *)v18.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.i8));
            *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
            v30 = vaddq_f32(v18, a2[3]);
            v166 = v29;
            v167 = v25;
            v168 = vmlaq_laneq_f32(v24, v19, v23, 2);
            v169 = v30;
            (*(void (**)(uint64_t, float32x4_t *, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 56))(a1, &v166, v21, a4);
            --v15;
          }
          while (v15 > 1);
        }
      }
      else
      {
LABEL_9:
        if (v9 <= 6)
        {
          v31 = a3[4].i64[1];
          if (v31)
          {
            if (*(int *)(v31 + 44) >= 1)
            {
              v32 = 0;
              do
              {
                v33 = *(_QWORD *)(v31 + 56);
                v34 = v33 + 48 * v32;
                v35 = *(_DWORD *)(v34 + 4);
                v157 = v35;
                if (v35 < 1)
                {
                  v38 = 0uLL;
                }
                else
                {
                  v36 = 0;
                  v37 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + 4 * (v35 - 1));
                  v38 = 0uLL;
                  do
                  {
                    v39 = *(int *)(*(_QWORD *)(v33 + 48 * v32 + 16) + 4 * v36);
                    v161 = vaddq_f32(v38, *(float32x4_t *)(*(_QWORD *)(v31 + 24) + 16 * v39));
                    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
                    v41 = *(_QWORD *)(v31 + 24);
                    v42 = *(float32x4_t *)(v41 + 16 * v37);
                    v43 = *a2;
                    v44 = a2[1];
                    v45 = vmulq_f32(*a2, v42);
                    v46 = (int8x16_t)vmulq_f32(v42, v44);
                    v47 = a2[2];
                    v48 = a2[3];
                    v49 = (int8x16_t)vmulq_f32(v42, v47);
                    v49.i32[3] = 0;
                    *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v46.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)));
                    *(float32x2_t *)&v45.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
                    v166 = vaddq_f32(v45, v48);
                    v50 = *(float32x4_t *)(v41 + 16 * v39);
                    v51 = vmulq_f32(v43, v50);
                    v52 = (int8x16_t)vmulq_f32(v44, v50);
                    v53 = (int8x16_t)vmulq_f32(v47, v50);
                    v53.i32[3] = 0;
                    *(float32x2_t *)v51.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)));
                    *(float32x2_t *)&v51.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0);
                    v175[0] = vaddq_f32(v48, v51);
                    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v40 + 16))(v40, &v166, v175, a4);
                    v38 = v161;
                    ++v36;
                    v33 = *(_QWORD *)(v31 + 56);
                    v37 = v39;
                  }
                  while (v36 < *(int *)(v33 + 48 * v32 + 4));
                }
                v162 = v38;
                v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 96))(v54) & 0x4000) != 0)
                {
                  v166 = (float32x4_t)xmmword_1B2244EC0;
                  v55 = *(_QWORD *)(v31 + 56) + 48 * v32;
                  v56.i64[0] = *(_QWORD *)(v55 + 32);
                  v56.i64[1] = *(unsigned int *)(v55 + 40);
                  v158 = vmulq_n_f32(v162, 1.0 / (float)v157);
                  v163 = v56;
                  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
                  v58 = a2[1];
                  v59 = vmulq_f32(v158, *a2);
                  v60 = (int8x16_t)vmulq_f32(v158, v58);
                  v61 = a2[2];
                  v62 = a2[3];
                  v63 = (int8x16_t)vmulq_f32(v158, v61);
                  v63.i32[3] = 0;
                  *(float32x2_t *)v59.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v60.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)));
                  *(float32x2_t *)&v59.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
                  v64 = vaddq_f32(v59, v62);
                  v65 = vaddq_f32(v158, v163);
                  v66 = vmulq_f32(v65, *a2);
                  v67 = (int8x16_t)vmulq_f32(v65, v58);
                  v68 = (int8x16_t)vmulq_f32(v65, v61);
                  v68.i32[3] = 0;
                  *(float32x2_t *)v66.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v67.i8));
                  *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)), 0);
                  v174 = vaddq_f32(v62, v66);
                  v175[0] = v64;
                  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v57 + 16))(v57, v175, &v174, &v166);
                }
                ++v32;
              }
              while (v32 < *(int *)(v31 + 44));
            }
          }
          else if ((*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3) >= 1)
          {
            v132 = 0;
            do
            {
              (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(a3->i64[0] + 208))(a3, v132, &v166, v175);
              v133 = a2[1];
              v134 = vmulq_f32(*a2, v166);
              v135 = (int8x16_t)vmulq_f32(v166, v133);
              v136 = a2[2];
              v137 = a2[3];
              v138 = (int8x16_t)vmulq_f32(v166, v136);
              v138.i32[3] = 0;
              *(float32x2_t *)v134.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v135.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)));
              *(float32x2_t *)&v134.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v138.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL)), 0);
              v139 = vmulq_f32(*a2, v175[0]);
              v140 = (int8x16_t)vmulq_f32(v133, v175[0]);
              v141 = (int8x16_t)vmulq_f32(v136, v175[0]);
              v141.i32[3] = 0;
              *(float32x2_t *)v139.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v140.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL)));
              *(float32x2_t *)&v139.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v141.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL)), 0);
              v173 = vaddq_f32(v137, v139);
              v174 = vaddq_f32(v134, v137);
              v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v142 + 16))(v142, &v174, &v173, a4);
              v132 = (v132 + 1);
            }
            while ((int)v132 < (*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3));
          }
        }
        v143 = a3->i32[2];
        if ((v143 - 21) <= 8)
        {
          v174 = (float32x4_t)xmmword_1B22C9FB0;
          v175[0] = (float32x4_t)xmmword_1B22C9FA0;
          v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v145 = *a2;
          v146 = a2[1];
          v168 = *a4;
          v169 = v145;
          v147 = a2[2];
          v148 = a2[3];
          v170 = v146;
          v171 = v147;
          v166.i64[0] = (uint64_t)&off_1E63CC668;
          v166.i64[1] = (uint64_t)&unk_1E63CC698;
          v167.i64[0] = v144;
          v172 = v148;
          (*(void (**)(float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(a3->i64[0] + 128))(a3, &v166, &v174, v175);
          nullsub_16(&v166.u32[2]);
          nullsub_16(&v166);
          v143 = a3->i32[2];
        }
        if (v143 == 3)
        {
          v174 = (float32x4_t)xmmword_1B22C9FB0;
          v175[0] = (float32x4_t)xmmword_1B22C9FA0;
          v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v150 = *a2;
          v151 = a2[1];
          v168 = *a4;
          v169 = v150;
          v152 = a2[2];
          v153 = a2[3];
          v170 = v151;
          v171 = v152;
          v166.i64[0] = (uint64_t)&off_1E63CC668;
          v166.i64[1] = (uint64_t)&unk_1E63CC698;
          v167.i64[0] = v149;
          v172 = v153;
          (*(void (**)(uint64_t, unsigned __int32 *, float32x4_t *, float32x4_t *))(*(_QWORD *)a3[7].i64[1]
                                                                                            + 16))(a3[7].i64[1], &v166.u32[2], &v174, v175);
          nullsub_16(&v166.u32[2]);
          nullsub_16(&v166);
        }
      }
      break;
  }
}

double sub_1B21D2F4C(uint64_t a1)
{
  nullsub_16(a1 + 8);
  return nullsub_16(a1);
}

uint64_t sub_1B21D2F74(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v25;
  __int128 v26;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2) & 8) != 0)
    {
      v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40));
      v26 = xmmword_1B2244EC0;
      if (v3 >= 1)
      {
        v4 = v3;
        v5 = 0;
        do
        {
          v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), v5);
          v7 = *(unsigned int *)(v6 + 800);
          if ((int)v7 >= 1)
          {
            v8 = (float *)(v6 + 168);
            do
            {
              v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              v10 = v8 - 30;
              v11 = v8 - 22;
              v12 = *(v8 - 18);
              v13 = *v8;
              v8 += 48;
              (*(void (**)(uint64_t, float *, float *, _QWORD, __int128 *, float))(*(_QWORD *)v9 + 64))(v9, v10, v11, LODWORD(v13), &v26, v12);
              --v7;
            }
            while (v7);
          }
          v5 = (v5 + 1);
        }
        while ((_DWORD)v5 != v4);
      }
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (result)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
    if ((result & 3) != 0 && *(int *)(a1 + 12) >= 1)
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v16);
        if ((*(_BYTE *)(v17 + 232) & 0x20) == 0)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
          {
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18) & 1) != 0)
            {
              switch(*(_DWORD *)(v17 + 244))
              {
                case 1:
                  v19 = xmmword_1B2244DD0;
                  break;
                case 2:
                  v19 = xmmword_1B227E550;
                  break;
                case 3:
                  v19 = xmmword_1B2244EE0;
                  break;
                case 5:
                  v19 = xmmword_1B2244EC0;
                  break;
                default:
                  v19 = xmmword_1B2244DB0;
                  break;
              }
              v26 = v19;
              (*(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(*(_QWORD *)a1 + 56))(a1, v17 + 16, *(_QWORD *)(v17 + 208), &v26);
            }
          }
          result = *(_QWORD *)(a1 + 104);
          if (result)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
            if ((result & 2) != 0)
            {
              v24 = xmmword_1B2244DB0;
              (*(void (**)(_QWORD, uint64_t, __int128 *, float32x4_t *))(**(_QWORD **)(v17 + 208) + 16))(*(_QWORD *)(v17 + 208), v17 + 16, &v26, &v25);
              v20 = vld1q_dup_f32((const float *)&dword_1EEF652F4);
              v20.i32[3] = 0;
              v25 = vaddq_f32(v25, v20);
              v26 = (__int128)vsubq_f32((float32x4_t)v26, v20);
              if (*(_BYTE *)(a1 + 64) && *(_DWORD *)(v17 + 264) == 2 && (*(_BYTE *)(v17 + 232) & 3) == 0)
              {
                v21 = v20;
                (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *))(**(_QWORD **)(v17 + 208) + 16))(*(_QWORD *)(v17 + 208), v17 + 80, &v23, &v22);
                v22 = vaddq_f32(v21, v22);
                v23 = vsubq_f32(v23, v21);
                v25 = vmaxq_f32(v25, v22);
                v26 = (__int128)vminq_f32((float32x4_t)v26, v23);
              }
              result = (*(uint64_t (**)(_QWORD, __int128 *, float32x4_t *, __int128 *))(**(_QWORD **)(a1 + 104)
                                                                                                + 104))(*(_QWORD *)(a1 + 104), &v26, &v25, &v24);
            }
          }
        }
        ++v16;
      }
      while (v16 < *(int *)(a1 + 12));
    }
  }
  return result;
}

void sub_1B21D3294(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t i;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[4];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8 * i);
      if (v6[66] == 1)
      {
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  v13 = 1;
  v12 = 0;
  v11 = 0;
  v16 = 1;
  v15 = 0;
  v14 = 0;
  v19 = 1;
  v18 = 0;
  v17 = 0;
  v22 = 1;
  v21 = 0;
  v20 = 0;
  if (v4 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7) + 208);
      v9 = v8;
      if (sub_1B21D4808((uint64_t)v10, &v8) == -1 || !v18)
      {
        v8 = v9;
        sub_1B21D342C((uint64_t)v10, (int *)&v8, &v9);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(v9, a2);
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 12));
    if (v21 && v22)
      sub_1B21FF5FC(v21);
  }
  v22 = 1;
  v21 = 0;
  v20 = 0;
  if (v18 && v19)
    sub_1B21FF5FC(v18);
  v19 = 1;
  v18 = 0;
  v17 = 0;
  if (v15 && v16)
    sub_1B21FF5FC(v15);
  v16 = 1;
  v15 = 0;
  v14 = 0;
  if (v12)
  {
    if (v13)
      sub_1B21FF5FC(v12);
  }
}

void sub_1B21D342C(uint64_t a1, int *a2, _QWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  v8 = *(_DWORD *)(a1 + 72);
  v9 = sub_1B21D4808(a1, a2);
  if (v9 == -1)
  {
    v10 = 9 * ((v7 + v6 + ~((v7 + v6) << 15)) ^ ((v7 + v6 + ~((v7 + v6) << 15)) >> 10));
    v11 = ((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) ^ (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) >> 16);
    v12 = v8 - 1;
    v13 = *(_DWORD *)(a1 + 68);
    v14 = *(_DWORD *)(a1 + 72);
    v15 = v13;
    if (v13 == v14)
    {
      v16 = v13 ? 2 * v13 : 1;
      v15 = *(_DWORD *)(a1 + 68);
      if (v13 < v16)
      {
        if (v16)
          v17 = sub_1B21FF5F0(8 * v16, 16);
        else
          v17 = 0;
        v15 = *(_DWORD *)(a1 + 68);
        if (v15 >= 1)
        {
          v18 = 0;
          do
          {
            *(_QWORD *)(v17 + v18) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v18);
            v18 += 8;
          }
          while (8 * v15 != v18);
        }
        v19 = *(_QWORD *)(a1 + 80);
        if (v19 && *(_BYTE *)(a1 + 88))
        {
          sub_1B21FF5FC(v19);
          v15 = *(_DWORD *)(a1 + 68);
        }
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = v17;
        *(_DWORD *)(a1 + 72) = v16;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v15) = *a3;
    v20 = v11 & v12;
    *(_DWORD *)(a1 + 68) = v15 + 1;
    v21 = *(_DWORD *)(a1 + 100);
    if (v21 == *(_DWORD *)(a1 + 104))
    {
      v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          v23 = sub_1B21FF5F0(8 * v22, 16);
          v21 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          v23 = 0;
        }
        if (v21 >= 1)
        {
          v24 = 0;
          v25 = 8 * v21;
          do
          {
            *(_QWORD *)(v23 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + v24);
            v24 += 8;
          }
          while (v25 != v24);
        }
        v26 = *(_QWORD *)(a1 + 112);
        if (v26 && *(_BYTE *)(a1 + 120))
          sub_1B21FF5FC(v26);
        *(_BYTE *)(a1 + 120) = 1;
        *(_QWORD *)(a1 + 112) = v23;
        *(_DWORD *)(a1 + 104) = v22;
        v21 = *(_DWORD *)(a1 + 100);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v21) = *(_QWORD *)a2;
    ++*(_DWORD *)(a1 + 100);
    if (v14 < *(_DWORD *)(a1 + 72))
    {
      sub_1B21D4890(a1);
      v27 = 9 * ((a2[1] + *a2 + ~((a2[1] + *a2) << 15)) ^ ((a2[1] + *a2 + ~((a2[1] + *a2) << 15)) >> 10));
      v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
      v20 = (v28 ^ (v28 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
    }
    v29 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13) = *(_DWORD *)(v29 + 4 * v20);
    *(_DWORD *)(v29 + 4 * v20) = v13;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9) = *a3;
  }
}

uint64_t sub_1B21D3684(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  sub_1B21D3294(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

uint64_t sub_1B21D36CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 104) = a2;
  return result;
}

uint64_t sub_1B21D36D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void sub_1B21D36E8()
{
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D36FC(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D3720(float32x4_t *a1, float32x4_t *a2, int a3, int a4, float a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int8 *v9;
  _DWORD v11[2];
  _QWORD v12[2];
  int8x16_t v13;
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = a3;
  v11[1] = a4;
  v5 = (int8x16_t)vmulq_f32(a1[5], *a2);
  v6 = (int8x16_t)vmulq_f32(*a2, a1[6]);
  v7 = (int8x16_t)vmulq_f32(*a2, a1[7]);
  v7.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v5.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  v9 = &a1[3].i8[8];
  v8 = a1[3].i64[1];
  v12[0] = *((_QWORD *)v9 + 1);
  v12[1] = v11;
  v13 = v5;
  v14 = a5;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 24))(v8, v12, 1);
}

void sub_1B21D37D4(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D37F8(float32x4_t *a1, float32x4_t *a2, int a3, int a4, float a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int8 *v9;
  _DWORD v11[2];
  _QWORD v12[2];
  int8x16_t v13;
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = a3;
  v11[1] = a4;
  v5 = (int8x16_t)vmulq_f32(a1[5], *a2);
  v6 = (int8x16_t)vmulq_f32(*a2, a1[6]);
  v7 = (int8x16_t)vmulq_f32(*a2, a1[7]);
  v7.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v5.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  v9 = &a1[3].i8[8];
  v8 = a1[3].i64[1];
  v12[0] = *((_QWORD *)v9 + 1);
  v12[1] = v11;
  v13 = v5;
  v14 = a5;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 24))(v8, v12, 1);
}

void sub_1B21D38AC()
{
  JUMPOUT(0x1B5E22E18);
}

double sub_1B21D38C0(_QWORD *a1, uint64_t a2)
{
  return sub_1B21D1730(a1, *(_DWORD *)(a2 + 40));
}

void sub_1B21D38CC()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D38E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1B21D38F0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  _DWORD v5[2];

  v3 = *(_DWORD *)(a1 + 64);
  v5[0] = -1;
  v5[1] = v3;
  if (!*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = v5;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_1B21D394C(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

float *sub_1B21D3970(uint64_t a1, __int128 *a2, __int128 *a3, int a4, int a5, float a6)
{
  float *result;
  __int128 v8;
  _DWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9[0] = a4;
  v9[1] = a5;
  result = *(float **)(a1 + 224);
  if (result[2] >= a6)
  {
    v10[0] = *(_QWORD *)(a1 + 232);
    v10[1] = v9;
    v8 = *a3;
    v11 = *a2;
    v12 = v8;
    v13 = a6;
    return (float *)(*(uint64_t (**)(float *, _QWORD *, uint64_t))(*(_QWORD *)result + 24))(result, v10, 1);
  }
  return result;
}

void sub_1B21D39FC(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

float *sub_1B21D3A20(uint64_t a1, __int128 *a2, __int128 *a3, int a4, int a5, float a6)
{
  float *result;
  __int128 v8;
  _DWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9[0] = a4;
  v9[1] = a5;
  result = *(float **)(a1 + 224);
  if (result[2] >= a6)
  {
    v10[0] = *(_QWORD *)(a1 + 232);
    v10[1] = v9;
    v8 = *a3;
    v11 = *a2;
    v12 = v8;
    v13 = a6;
    return (float *)(*(uint64_t (**)(float *, _QWORD *, _QWORD))(*(_QWORD *)result + 24))(result, v10, 0);
  }
  return result;
}

void sub_1B21D3AAC()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D3AC0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1B21D3AD0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  _DWORD v5[2];

  v3 = *(_DWORD *)(a1 + 48);
  v5[0] = -1;
  v5[1] = v3;
  if (!*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = v5;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8);
  return result;
}

float32x2_t sub_1B21D3B2C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float v10;
  float32x2_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t result;

  v5 = *a2;
  *(_QWORD *)a1 = &off_1E63CCBF8;
  *(float32x4_t *)(a1 + 48) = v5;
  v6 = *a3;
  *(_QWORD *)(a1 + 224) = a4;
  *(_QWORD *)(a1 + 232) = a5;
  *(float32x4_t *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = xmmword_1B2244DB0;
  *(_OWORD *)(a1 + 96) = xmmword_1B2244DD0;
  *(_OWORD *)(a1 + 112) = xmmword_1B2244D90;
  *(float32x4_t *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = xmmword_1B2244DB0;
  *(_OWORD *)(a1 + 160) = xmmword_1B2244DD0;
  *(_OWORD *)(a1 + 176) = xmmword_1B2244D90;
  *(float32x4_t *)(a1 + 192) = v6;
  v7 = vsubq_f32(*a3, *a2);
  v7.i32[3] = 0;
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  v9 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]));
  v10 = 1.0e18;
  if (v9.f32[2] != 0.0)
    v10 = 1.0 / v9.f32[2];
  *(float *)(a1 + 24) = v10;
  __asm { FMOV            V5.2S, #1.0 }
  v16 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v9.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D5, *(float32x2_t *)v9.f32));
  *(float32x2_t *)(a1 + 16) = v16;
  *(int8x8_t *)(a1 + 32) = vand_s8((int8x8_t)vcltz_f32(v16), (int8x8_t)0x100000001);
  *(_DWORD *)(a1 + 40) = v10 < 0.0;
  v17 = vsubq_f32(v6, v5);
  v17.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v9, v17);
  result = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(_DWORD *)(a1 + 44) = result.i32[0];
  return result;
}

void sub_1B21D3C1C()
{
  JUMPOUT(0x1B5E22E18);
}

BOOL sub_1B21D3C30(float32x4_t *a1, uint64_t *a2)
{
  float *v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v3 = (float *)a1[14].i64[1];
  v4 = v3[2];
  if (v4 != 0.0)
  {
    v5 = *a2;
    if ((*(unsigned int (**)(float *, _QWORD))(*(_QWORD *)v3 + 16))(v3, *(_QWORD *)(*a2 + 200)))
    {
      v6 = *(_QWORD *)(v5 + 208);
      v7 = a1[14].i64[1];
      v9[0] = 0;
      v9[1] = v6;
      v9[2] = v5;
      v9[3] = v5 + 16;
      v9[4] = -1;
      sub_1B21D0C84(a1 + 5, a1 + 9, v9, v7);
    }
  }
  return v4 != 0.0;
}

void sub_1B21D3CB8(_OWORD *a1, float32x2_t *a2, float32x4_t *a3, float *a4)
{
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  __int128 v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  _OWORD v42[3];

  _S3 = *((_DWORD *)a1 + 6);
  _S2 = *((float *)a1 + 4);
  _Q1 = *a1;
  v9 = (float32x2_t)a1[2];
  v10 = (float32x2_t)vrev64_s32((int32x2_t)v9);
  v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1, 0);
  v12.i32[1] = v11.i32[1];
  v12.i32[0] = *((_DWORD *)a1 + 5);
  v13 = *a1;
  *(float *)&v13 = _S2;
  v14 = vmla_f32(vmul_f32(v9, vneg_f32(v12)), v10, *(float32x2_t *)&v13);
  *(int32x2_t *)&v13 = vdup_laneq_s32(*(int32x4_t *)a1, 2);
  v10.i32[0] = *((_DWORD *)a1 + 10);
  v11.i32[0] = _S3;
  v15 = vmla_f32(vmul_f32(v10, vneg_f32((float32x2_t)__PAIR64__(DWORD1(v13), LODWORD(_S2)))), (float32x2_t)__PAIR64__(v10.u32[0], v9.u32[0]), v11);
  v16 = *(int32x4_t *)a1;
  v16.i32[0] = _S3;
  *(float32x2_t *)v16.i8 = vneg_f32(*(float32x2_t *)v16.i8);
  LODWORD(v13) = *((_DWORD *)a1 + 5);
  v9.i32[0] = *((_DWORD *)a1 + 10);
  v17 = vmla_f32(vmul_f32(*(float32x2_t *)((char *)a1 + 36), *(float32x2_t *)v16.i8), v9, *(float32x2_t *)&v13);
  v18.i64[0] = __PAIR64__(v15.u32[0], v17.u32[0]);
  __asm { FMLA            S19, S3, V1.S[1] }
  v18.i64[1] = v14.u32[0];
  v24 = (int8x16_t)vmulq_f32(*(float32x4_t *)a1, v18);
  *(float *)v24.i32 = 1.0
                    / vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0];
  *(float32x2_t *)v25.f32 = vmul_n_f32(v17, *(float *)v24.i32);
  *(float32x2_t *)v26.f32 = vmul_n_f32(v15, *(float *)v24.i32);
  __asm { FMLA            S3, S2, V1.S[2] }
  *(float32x2_t *)v28.f32 = vmul_n_f32(v14, *(float *)v24.i32);
  v25.f32[2] = _S19 * *(float *)v24.i32;
  v26.f32[2] = _S3 * *(float *)v24.i32;
  v28.f32[2] = vmlas_n_f32(vmuls_lane_f32(_S2, *(float32x2_t *)v16.i8, 1), *(float *)&v13, COERCE_FLOAT(*a1))
             * *(float *)v24.i32;
  v25.i32[3] = 0;
  v26.i32[3] = 0;
  v28.i32[3] = 0;
  v29 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v26, a2[2], 1), v28, *(float32x4_t *)a2[2].f32, 2);
  v30 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v26, a2[4], 1), v28, *(float32x4_t *)a2[4].f32, 2);
  v42[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)a2->f32)), v26, *a2, 1), v28, *(float32x4_t *)a2->f32, 2);
  v42[1] = v29;
  v42[2] = v30;
  sub_1B21D3EAC((float *)v42, &v41);
  v31 = vmulq_f32(v41, v41);
  v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
  v32 = vmulq_n_f32(v41, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]));
  v40 = v32;
  v33 = v32.f32[3];
  if (v32.f32[3] < -1.0)
    v33 = -1.0;
  if (v33 > 1.0)
    v33 = 1.0;
  v34 = acosf(v33);
  *a4 = v34 + v34;
  v35 = v40;
  v35.i32[3] = 0;
  *a3 = v35;
  a3->i32[3] = 0;
  v36 = *a3;
  v37 = (int8x16_t)vmulq_f32(v36, v36);
  v38 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0];
  if (v38 >= 1.4211e-14)
    v39 = vmulq_n_f32(v36, 1.0 / sqrtf(v38));
  else
    v39 = (float32x4_t)xmmword_1B2244DB0;
  *a3 = v39;
}

float32x4_t sub_1B21D3EAC(float *a1, float32x4_t *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float32_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t result;
  float32x4_t v21;

  v2 = *a1;
  v3 = a1[5];
  v4 = a1[10];
  v5 = (float)(*a1 + v3) + v4;
  if (v5 <= 0.0)
  {
    v9 = v2 >= v4;
    v8 = 2 * (v2 < v4);
    v10 = 2;
    if (v2 < v4)
      v10 = 1;
    v11 = 2;
    if (v3 >= v4)
      v11 = 1;
    if (v2 < v3)
    {
      v8 = v11;
      v9 = 2 * (v3 >= v4);
    }
    v12 = &a1[4 * v8];
    if (v2 < v3)
      v10 = v3 < v4;
    v13 = &a1[4 * v9];
    v14 = &a1[4 * v10];
    v5 = (float)(v12[v8] - v13[v9]) - v14[v10];
    v15 = v13[v8];
    v16 = v12[v9];
    v21.f32[3] = v14[v9] - v13[v10];
    v17 = v15 + v16;
    v18 = v14[v8];
    *(float *)((unint64_t)&v21 | (4 * v9)) = v17;
    *(float *)((unint64_t)&v21 | (4 * v10)) = v18 + v12[v10];
  }
  else
  {
    v6 = a1[1];
    v7 = a1[2] - a1[8];
    v21.f32[0] = a1[9] - a1[6];
    v21.f32[1] = v7;
    v21.f32[2] = a1[4] - v6;
    v8 = 3;
  }
  v19 = v5 + 1.0;
  *(float *)((unint64_t)&v21 | (4 * v8)) = v19;
  result = vmulq_n_f32(v21, 0.5 / sqrtf(v19));
  *a2 = result;
  return result;
}

float32x2_t sub_1B21D3FC8(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float v12;
  float32x2_t v18;
  int8x16_t v19;
  float32x2_t result;

  *(_QWORD *)a1 = &off_1E63CCF38;
  *(float32x4_t *)(a1 + 48) = *a3;
  *(float32x4_t *)(a1 + 64) = a3[1];
  *(float32x4_t *)(a1 + 80) = a3[2];
  v7 = a3[3];
  *(float32x4_t *)(a1 + 96) = v7;
  *(float32x4_t *)(a1 + 112) = *a4;
  *(float32x4_t *)(a1 + 128) = a4[1];
  *(float32x4_t *)(a1 + 144) = a4[2];
  v8 = a4[3];
  *(float32x4_t *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 192) = a5;
  *(_QWORD *)(a1 + 200) = a6;
  *(float *)(a1 + 208) = a7;
  *(_QWORD *)(a1 + 216) = a2;
  v9 = vsubq_f32(v8, v7);
  v9.i32[3] = 0;
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v11 = vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]));
  v12 = 1.0 / v11.f32[2];
  if (v11.f32[2] == 0.0)
    v12 = 1.0e18;
  *(float *)(a1 + 24) = v12;
  __asm { FMOV            V4.2S, #1.0 }
  v18 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v11.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D4, *(float32x2_t *)v11.f32));
  *(float32x2_t *)(a1 + 16) = v18;
  *(int8x8_t *)(a1 + 32) = vand_s8((int8x8_t)vcltz_f32(v18), (int8x8_t)0x100000001);
  *(_DWORD *)(a1 + 40) = v12 < 0.0;
  v19 = (int8x16_t)vmulq_f32(v11, v9);
  result = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  *(_DWORD *)(a1 + 44) = result.i32[0];
  return result;
}

void sub_1B21D40B8()
{
  JUMPOUT(0x1B5E22E18);
}

BOOL sub_1B21D40CC(float32x4_t *a1, uint64_t *a2)
{
  float *v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float v9;
  _QWORD v11[5];

  v3 = (float *)a1[12].i64[1];
  v4 = v3[2];
  if (v4 != 0.0)
  {
    v5 = *a2;
    if ((*(unsigned int (**)(float *, _QWORD))(*(_QWORD *)v3 + 16))(v3, *(_QWORD *)(*a2 + 200)))
    {
      v6 = a1[13].i64[1];
      v7 = *(_QWORD *)(v5 + 208);
      v8 = (float *)a1[12].i64[1];
      v9 = a1[13].f32[0];
      v11[0] = 0;
      v11[1] = v7;
      v11[2] = v5;
      v11[3] = v5 + 16;
      v11[4] = -1;
      sub_1B21D184C(v6, a1 + 3, a1 + 7, v11, v8, v9);
    }
  }
  return v4 != 0.0;
}

void sub_1B21D415C()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D4170(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  _QWORD v13[5];
  _QWORD v14[5];

  v2 = *a2;
  if (*a2 != a1[1])
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a1[3] + 16))(a1[3], *(_QWORD *)(v2 + 200)))
    {
      v4 = a1[1];
      v5 = a1[2];
      v6 = *(_QWORD *)(v4 + 208);
      v14[0] = 0;
      v14[1] = v6;
      v14[2] = v4;
      v14[3] = v4 + 16;
      v14[4] = -1;
      v7 = *(_QWORD *)(v2 + 208);
      v13[0] = 0;
      v13[1] = v7;
      v13[2] = v2;
      v13[3] = v2 + 16;
      v13[4] = -1;
      v8 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(**(_QWORD **)(v5 + 40) + 16))(*(_QWORD *)(v5 + 40), v14, v13, 0);
      if (v8)
      {
        v9 = v8;
        v10 = a1[3];
        sub_1B21DB810(v12, (uint64_t)v14, (uint64_t)v13);
        v12[0] = &off_1E63CD0E0;
        v12[6] = v10;
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v14, v13, a1[2] + 48, v12);
        (**(void (***)(uint64_t))v9)(v9);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + 40) + 120))(*(_QWORD *)(a1[2] + 40), v9);
      }
    }
  }
  return 1;
}

void sub_1B21D428C()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D42A0(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

uint64_t sub_1B21D42AC(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 36) = a2;
  *(_DWORD *)(result + 44) = a3;
  return result;
}

uint64_t sub_1B21D42B8(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  int *v46;
  int *v47;
  int *v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _OWORD v55[5];
  float v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 784);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v6 = *a2;
  v7 = vmulq_n_f32(*a2, a4);
  v7.i32[3] = 0;
  v8 = *a3;
  v9 = vaddq_f32(*a3, v7);
  if (v4 == v5)
  {
    v30 = *(int8x16_t *)(v4 + 48);
    v31 = vsubq_f32(v9, *(float32x4_t *)(v4 + 64));
    v32 = *(float32x4_t *)(v4 + 16);
    v33 = *(int32x4_t *)(v4 + 32);
    v34 = (float32x4_t)vtrn1q_s32((int32x4_t)v32, v33);
    v35.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v35.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
    v36 = (int8x16_t)vmulq_f32(v35, v31);
    v31.i32[3] = 0;
    *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v32.f32, *(int32x2_t *)v33.i8);
    v34.i64[1] = v30.u32[0];
    *(int32x2_t *)&v32.u32[2] = vzip2_s32(*(int32x2_t *)v30.i8, 0);
    v37 = (int8x16_t)vmulq_f32(v34, v31);
    v38 = (int8x16_t)vmulq_f32(v32, v31);
    v36.i32[3] = 0;
    *(float32x2_t *)v33.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    v40 = *(int8x16_t *)(v39 + 48);
    v41 = vsubq_f32(v8, *(float32x4_t *)(v39 + 64));
    v42 = *(float32x4_t *)(v39 + 16);
    v43 = *(float32x4_t *)(v39 + 32);
    v44 = (float32x4_t)vtrn1q_s32((int32x4_t)v42, (int32x4_t)v43);
    *(int32x2_t *)v42.f32 = vzip2_s32(*(int32x2_t *)v42.f32, *(int32x2_t *)v43.f32);
    v43.i64[0] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
    *(float32x2_t *)&v26 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v38.i8));
    *((_QWORD *)&v26 + 1) = v33.i64[0];
    v41.i32[3] = 0;
    v44.i64[1] = v40.u32[0];
    *(int32x2_t *)&v42.u32[2] = vzip2_s32(*(int32x2_t *)v40.i8, 0);
    v43.i64[1] = vextq_s8(v40, v40, 8uLL).u32[0];
    v27 = (int8x16_t)vmulq_f32(v44, v41);
    v28 = (int8x16_t)vmulq_f32(v42, v41);
    v29 = (int8x16_t)vmulq_f32(v43, v41);
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    v11 = *(int8x16_t *)(v10 + 48);
    v12 = vsubq_f32(v9, *(float32x4_t *)(v10 + 64));
    v13 = *(float32x4_t *)(v10 + 16);
    v14 = *(float32x4_t *)(v10 + 32);
    v15 = (float32x4_t)vtrn1q_s32((int32x4_t)v13, (int32x4_t)v14);
    *(int32x2_t *)v13.f32 = vzip2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
    v14.i64[0] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v16 = v12;
    v16.i32[3] = 0;
    v15.i64[1] = v11.u32[0];
    *(int32x2_t *)&v13.u32[2] = vzip2_s32(*(int32x2_t *)v11.i8, 0);
    v14.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    v17 = (int8x16_t)vmulq_f32(v14, v12);
    v18 = (int8x16_t)vmulq_f32(v15, v16);
    v19 = (int8x16_t)vmulq_f32(v13, v16);
    v17.i32[3] = 0;
    *(float32x2_t *)v15.f32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
    v20 = *(int8x16_t *)(v5 + 48);
    v21 = vsubq_f32(v8, *(float32x4_t *)(v5 + 64));
    v22 = *(int32x4_t *)(v5 + 16);
    v23 = *(float32x4_t *)(v5 + 32);
    v24 = (float32x4_t)vtrn1q_s32(v22, (int32x4_t)v23);
    *(int32x2_t *)v23.f32 = vzip2_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v23.f32);
    v25.i64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(float32x2_t *)&v26 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8));
    *((_QWORD *)&v26 + 1) = v15.i64[0];
    v21.i32[3] = 0;
    v24.i64[1] = v20.u32[0];
    *(int32x2_t *)&v23.u32[2] = vzip2_s32(*(int32x2_t *)v20.i8, 0);
    v25.i64[1] = vextq_s8(v20, v20, 8uLL).u32[0];
    v27 = (int8x16_t)vmulq_f32(v24, v21);
    v28 = (int8x16_t)vmulq_f32(v23, v21);
    v29 = (int8x16_t)vmulq_f32(v25, v21);
  }
  v29.i32[3] = 0;
  *(float32x2_t *)&v45 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.i8));
  *((float32x2_t *)&v45 + 1) = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
  v55[0] = v26;
  v55[1] = v45;
  v55[3] = v9;
  v55[4] = v6;
  v56 = a4;
  v57 = 0;
  v58 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0u;
  v66 = 0u;
  v55[2] = v8;
  if (v4 == v5)
  {
    v46 = (int *)(a1 + 32);
    v47 = (int *)(a1 + 36);
    v48 = (int *)(a1 + 40);
    v49 = (int *)(a1 + 44);
  }
  else
  {
    v46 = (int *)(a1 + 36);
    v47 = (int *)(a1 + 32);
    v48 = (int *)(a1 + 44);
    v49 = (int *)(a1 + 40);
  }
  v50 = *v49;
  v51 = *v48;
  v52 = *v47;
  v59 = *v46;
  v60 = v52;
  v61 = v51;
  v62 = v50;
  if (v4 == v5)
    v53 = 16;
  else
    v53 = 24;
  return (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v55, *(_QWORD *)(a1 + v53));
}

void sub_1B21D4544(uint64_t a1)
{
  nullsub_16(a1 + 8);
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D4580(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  int8x8_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a2[1];
  v6 = vmulq_f32(v3, *a2);
  v7 = (int8x16_t)vmulq_f32(*a2, v4);
  v8 = a1[5];
  v9 = a1[6];
  v10 = (int8x16_t)vmulq_f32(*a2, v8);
  v10.i32[3] = 0;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  v11 = vaddq_f32(v6, v9);
  v12 = vmulq_f32(v3, v5);
  v13 = (int8x16_t)vmulq_f32(v4, v5);
  v14 = (int8x16_t)vmulq_f32(v8, v5);
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v36 = vaddq_f32(v9, v12);
  v37 = v11;
  v15 = a2[2];
  v16 = vmulq_f32(v3, v15);
  v17 = (int8x16_t)vmulq_f32(v4, v15);
  v18 = (int8x16_t)vmulq_f32(v8, v15);
  v18.i32[3] = 0;
  *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v35 = vaddq_f32(v9, v16);
  v19 = vmulq_f32(vaddq_f32(vaddq_f32(v11, v36), v35), (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
  v19.i32[3] = 0;
  v30 = v19;
  v31 = v11;
  v34 = v19;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1].i64[0] + 96))(a1[1].i64[0]) & 0x4000) != 0)
  {
    v20 = vsubq_f32(v36, v31);
    v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v20.i32[3] = 0;
    v22 = vsubq_f32(v35, v31);
    v23 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v22.i32[3] = 0;
    *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
    v24.i64[1] = v20.i64[0];
    *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v22.f32, v23, 4uLL);
    v25.i64[1] = v22.i64[0];
    v26 = (int8x16_t)vsubq_f32(vmulq_f32(v25, v20), vmulq_f32(v24, v22));
    v24.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
    v24.i64[1] = v26.u32[0];
    v27 = (int8x16_t)vmulq_f32(v24, v24);
    v28 = a1[1].i64[0];
    v32 = vaddq_f32(vmulq_n_f32(v24, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0])), v30);
    v33 = xmmword_1B2244EC0;
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, __int128 *))(*(_QWORD *)v28 + 16))(v28, &v34, &v32, &v33);
  }
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1[1].i64[0] + 16))(a1[1].i64[0], &v37, &v36, a1 + 2);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1[1].i64[0] + 16))(a1[1].i64[0], &v36, &v35, a1 + 2);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1[1].i64[0] + 16))(a1[1].i64[0], &v35, &v37, a1 + 2);
}

uint64_t sub_1B21D4794(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

double sub_1B21D47A0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  nullsub_16(a1);
  return nullsub_16(v1);
}

void sub_1B21D47C4(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  nullsub_16(a1);
  nullsub_16(v1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D47FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a1 - 8);
}

uint64_t sub_1B21D4808(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;

  result = 0xFFFFFFFFLL;
  v4 = a2[1] + *a2 + ~((a2[1] + *a2) << 15);
  v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  v6 = ((v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v6 < *(_DWORD *)(a1 + 4))
  {
    result = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v6);
    if ((_DWORD)result == -1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (*(_QWORD *)a2 != *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (int)result))
      {
        result = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)result);
        if ((_DWORD)result == -1)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

void sub_1B21D4890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = sub_1B21FF5F0(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    v6 = *(_QWORD *)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 16);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 24))
      sub_1B21FF5FC(v6);
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = sub_1B21FF5F0(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 36);
    v13 = *(_QWORD *)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 48);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 56))
      sub_1B21FF5FC(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (_DWORD *)(*(_QWORD *)(a1 + 112) + 4);
    do
    {
      v21 = *v20 + *(v20 - 1) + ~((*v20 + *(v20 - 1)) << 15);
      v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
      v23 = ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * v23);
      *(_DWORD *)(v18 + 4 * v23) = v17++;
      v20 += 2;
    }
    while (v2 != v17);
  }
}

_QWORD *sub_1B21D4AC4(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;

  v10 = sub_1B21CDEB8(a1, a2);
  *v10 = &off_1E63CD9D0;
  *((_BYTE *)v10 + 40) = 1;
  v10[4] = 0;
  *((_DWORD *)v10 + 5) = 0;
  *((_DWORD *)v10 + 6) = 0;
  *((_BYTE *)v10 + 48) = a5;
  v10[7] = a2[1];
  *((_BYTE *)v10 + 64) = 0;
  if (a5)
    v11 = a4;
  else
    v11 = a3;
  *((_DWORD *)v10 + 17) = *(_DWORD *)(*(_QWORD *)(v11 + 8) + 104);
  sub_1B21D4B54((uint64_t)v10, a3, a4);
  return a1;
}

void sub_1B21D4B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  int v19;
  int v20;

  if (*(_BYTE *)(a1 + 48))
    v4 = a3;
  else
    v4 = a2;
  if (*(_BYTE *)(a1 + 48))
    v5 = a2;
  else
    v5 = a3;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(unsigned int *)(v6 + 28);
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 < (int)v7)
  {
    v9 = v8;
    if (*(_DWORD *)(a1 + 24) < (int)v7)
    {
      if ((_DWORD)v7)
      {
        v10 = sub_1B21FF5F0(8 * (int)v7, 16);
        v8 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v10 = 0;
      }
      if (v8 >= 1)
      {
        v11 = 0;
        v12 = 8 * v8;
        do
        {
          *(_QWORD *)(v10 + v11) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v11);
          v11 += 8;
        }
        while (v12 != v11);
      }
      v13 = *(_QWORD *)(a1 + 32);
      if (v13 && *(_BYTE *)(a1 + 40))
        sub_1B21FF5FC(v13);
      *(_BYTE *)(a1 + 40) = 1;
      *(_QWORD *)(a1 + 32) = v10;
      *(_DWORD *)(a1 + 24) = v7;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9++) = 0;
    while ((int)v7 != v9);
  }
  *(_DWORD *)(a1 + 20) = v7;
  if ((int)v7 >= 1)
  {
    v14 = 0;
    v15 = 64;
    do
    {
      if (*(_QWORD *)(v6 + 96))
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = 0;
      }
      else
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + v15);
        v17[0] = v4;
        v17[1] = v16;
        v18 = *(_OWORD *)(v4 + 16);
        v19 = -1;
        v20 = v14;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v17, v5, *(_QWORD *)(a1 + 56));
      }
      ++v14;
      v15 += 96;
    }
    while (v7 != v14);
  }
}

uint64_t sub_1B21D4CC4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 20);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = 0;
    v4 = 8 * v1;
    do
    {
      result = *(_QWORD *)(*(_QWORD *)(v2 + 32) + v3);
      if (result)
      {
        (**(void (***)(uint64_t))result)(result);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 120))(*(_QWORD *)(v2 + 8), *(_QWORD *)(*(_QWORD *)(v2 + 32) + v3));
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  return result;
}

double sub_1B21D4D38(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CD9D0;
  v2 = (uint64_t)(a1 + 2);
  sub_1B21D4CC4((uint64_t)a1);
  sub_1B1810570(v2);
  return nullsub_16(a1);
}

void sub_1B21D4D78(_QWORD *a1)
{
  sub_1B21D4D38(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D4D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x2_t v33;
  unsigned __int32 v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x4_t v71;
  __n128 v72;
  BOOL v73;
  float v74[4];
  __int128 v75[2];
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[9];

  if (*(_BYTE *)(a1 + 48))
    v8 = a3;
  else
    v8 = a2;
  if (*(_BYTE *)(a1 + 48))
    v9 = a2;
  else
    v9 = a3;
  v10 = *(_QWORD *)(v8 + 8);
  if (*(_DWORD *)(v10 + 104) != *(_DWORD *)(a1 + 68))
  {
    sub_1B21D4CC4(a1);
    sub_1B21D4B54(a1, a2, a3);
  }
  v13 = *(uint64_t **)(v10 + 96);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 56);
  v82[0] = &off_1E63CD070;
  v82[1] = v8;
  v82[2] = v9;
  v82[3] = v14;
  v82[4] = a4;
  v82[5] = a5;
  v82[6] = v15;
  v82[7] = v16;
  v77.i8[8] = 1;
  v77.i64[0] = 0;
  *(uint64_t *)((char *)v76.i64 + 4) = 0;
  v17 = *(_DWORD *)(a1 + 20);
  if (v17 >= 1)
  {
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18);
      if (v19)
        break;
LABEL_31:
      if (++v18 >= v17)
      {
        if (v77.i64[0])
          v26 = v77.u8[8] == 0;
        else
          v26 = 1;
        if (!v26)
          sub_1B21FF5FC(v77.i64[0]);
        goto LABEL_37;
      }
    }
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v19 + 32))(v19, &v76);
    v20 = v76.i32[1];
    if (v76.i32[1] < 1)
      goto LABEL_22;
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(v77.i64[0] + 8 * v21);
      if (*(_DWORD *)(v22 + 800))
      {
        a5[1] = v22;
        v23 = *(float32x4_t **)(v22 + 784);
        v24 = *(float32x4_t **)(a5[2] + 16);
        if (v23 == v24)
          v24 = *(float32x4_t **)(a5[3] + 16);
        else
          v23 = *(float32x4_t **)(a5[3] + 16);
        sub_1B21ED270((_BYTE *)v22, v23 + 1, v24 + 1);
        a5[1] = 0;
        v20 = v76.i32[1];
      }
      ++v21;
    }
    while (v21 < v20);
    if (v20 <= 0)
    {
LABEL_22:
      if (v20 && v76.i32[2] < 0)
      {
        if (v77.i64[0] && v77.i8[8])
          sub_1B21FF5FC(v77.i64[0]);
        v77.i8[8] = 1;
        v77.i64[0] = 0;
        v76.i32[2] = 0;
        goto LABEL_28;
      }
      if (v20 < 0)
      {
LABEL_28:
        v25 = v20;
        do
          *(_QWORD *)(v77.i64[0] + 8 * v25++) = 0;
        while ((_DWORD)v25);
      }
    }
    v76.i32[1] = 0;
    v17 = *(_DWORD *)(a1 + 20);
    goto LABEL_31;
  }
LABEL_37:
  if (v13)
  {
    v27 = *(_QWORD *)(v8 + 24);
    v28 = *(float32x4_t *)v27;
    v29 = *(float32x4_t *)(v27 + 16);
    v31 = *(float32x4_t *)(v27 + 32);
    v30 = *(int8x16_t *)(v27 + 48);
    v32 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v27, (int32x4_t)v29);
    v33 = vzip2_s32(*(int32x2_t *)v31.f32, 0);
    v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    v35 = *(float32x4_t **)(v9 + 24);
    v36 = *v35;
    v37 = v35[1];
    v36.i32[3] = 0;
    v37.i32[3] = 0;
    v38 = v35[2];
    v39 = v35[3];
    v38.i32[3] = 0;
    v40 = vmlaq_laneq_f32(vmulq_laneq_f32(v36, v28, 2), v37, v29, 2);
    v41 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v36, *(float32x2_t *)v28.f32, 1), v37, *(float32x2_t *)v29.f32, 1), v38, *(float32x2_t *)v31.f32, 1);
    v42 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, v28.f32[0]), v37, v29.f32[0]), v38, v31.f32[0]);
    v43 = vmlaq_laneq_f32(v40, v38, v31, 2);
    v37.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v32.i64[1] = v31.u32[0];
    v31.i64[0] = 0x8000000080000000;
    v31.i64[1] = 0x8000000080000000;
    v44 = (float32x4_t)veorq_s8(v30, (int8x16_t)v31);
    v45 = (int8x16_t)vmulq_f32(v32, v44);
    *(int32x2_t *)v28.f32 = vzip2_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v29.f32);
    *(int32x2_t *)&v28.u32[2] = v33;
    v46 = (int8x16_t)vmulq_f32(v28, v44);
    v37.i64[1] = v34;
    v47 = (int8x16_t)vmulq_f32(v37, v44);
    v47.i32[3] = 0;
    v48 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
    *(float32x2_t *)v46.i8 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.i8);
    v49 = (int8x16_t)vmulq_f32(v32, v39);
    v50 = (int8x16_t)vmulq_f32(v28, v39);
    v51 = (int8x16_t)vmulq_f32(v37, v39);
    v51.i32[3] = 0;
    *(float32x2_t *)v50.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v46.i8, v48), vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v50.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL))));
    v50.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0));
    v76 = v42;
    v77 = v41;
    v78 = v43;
    v79 = v50;
    (*(void (**)(_QWORD, float32x4_t *, __int128 *, __int128 *))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8), &v76, &v81, &v80);
    v75[0] = v81;
    v75[1] = v80;
    sub_1B21C86F8((uint64_t)v13, *v13, v75, (uint64_t)v82);
  }
  else
  {
    v52 = *(unsigned int *)(a1 + 20);
    if ((int)v52 <= 0)
      return;
    v53 = 0;
    v54 = 64;
    do
    {
      sub_1B21D5284((uint64_t)v82, *(_QWORD *)(*(_QWORD *)(v10 + 40) + v54), v53++);
      v54 += 96;
    }
    while (v52 != v53);
  }
  v55 = *(unsigned int *)(a1 + 20);
  if ((int)v55 >= 1)
  {
    v56 = 0;
    v57 = 8 * v55;
    v58 = 32;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + v56))
      {
        v59 = (float32x4_t *)(*(_QWORD *)(v10 + 40) + v58);
        v60 = v59[2].i64[0];
        v61 = *(float32x4_t **)(v8 + 24);
        v62 = v61[1];
        v63 = v59[-2];
        v64 = v59[-1];
        v63.i32[3] = 0;
        v64.i32[3] = 0;
        v65 = v61[2];
        v66 = *v59;
        v67 = v59[1];
        v66.i32[3] = 0;
        v68 = vmulq_f32(*v61, v67);
        v69 = (int8x16_t)vmulq_f32(v62, v67);
        v70 = (int8x16_t)vmulq_f32(v65, v67);
        v70.i32[3] = 0;
        *(float32x2_t *)v68.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
        *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
        v71 = vaddq_f32(v61[3], v68);
        v76 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*v61)), v64, *(float32x2_t *)v61->f32, 1), v66, *v61, 2);
        v77 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v62.f32[0]), v64, *(float32x2_t *)v62.f32, 1), v66, v62, 2);
        v78 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v65.f32[0]), v64, *(float32x2_t *)v65.f32, 1), v66, v65, 2);
        v79 = (int8x16_t)v71;
        (*(void (**)(uint64_t, float32x4_t *, __int128 *, __int128 *))(*(_QWORD *)v60 + 16))(v60, &v76, v75, &v81);
        (*(void (**)(_QWORD, _QWORD, __int128 *, float *))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 24), &v80, v74);
        v73 = 0;
        if (*(float *)v75 <= v74[0])
          v73 = *(float *)&v81 >= *(float *)&v80;
        if (*((float *)v75 + 2) > v74[2] || *((float *)&v81 + 2) < *((float *)&v80 + 2))
          v73 = 0;
        v72.n128_u32[0] = DWORD1(v75[0]);
        if (*((float *)v75 + 1) > v74[1])
          goto LABEL_54;
        v72.n128_u32[0] = DWORD1(v81);
        if (*((float *)&v81 + 1) < *((float *)&v80 + 1))
          v73 = 0;
        if (!v73)
        {
LABEL_54:
          (***(void (****)(_QWORD, __n128))(*(_QWORD *)(a1 + 32) + v56))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v56), v72);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + v56));
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + v56) = 0;
        }
      }
      v56 += 8;
      v58 += 96;
    }
    while (v57 != v56);
  }
}

uint64_t sub_1B21D5284(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  __n128 v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  int v34;
  int v35;
  float v36[4];
  float v37[4];
  float v38;
  float v39;
  float v40;
  float v41[4];
  _OWORD v42[4];

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(float32x4_t **)(v6 + 24);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = (float32x4_t *)(*(_QWORD *)(v7 + 40) + 96 * a3);
  v14 = *v13;
  v15 = v13[1];
  v14.i32[3] = 0;
  v15.i32[3] = 0;
  v16 = v13[2];
  v17 = v13[3];
  v16.i32[3] = 0;
  v18 = vmulq_f32(v9, v17);
  v19 = (int8x16_t)vmulq_f32(v10, v17);
  v20 = (int8x16_t)vmulq_f32(v11, v17);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  v42[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v9.f32[0]), v15, *(float32x2_t *)v9.f32, 1), v16, v9, 2);
  v42[1] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v10.f32[0]), v15, *(float32x2_t *)v10.f32, 1), v16, v10, 2);
  v42[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v11.f32[0]), v15, *(float32x2_t *)v11.f32, 1), v16, v11, 2);
  v42[3] = vaddq_f32(v12, v18);
  (*(void (**)(uint64_t, _OWORD *, float *, float *))(*(_QWORD *)a2 + 16))(a2, v42, v41, &v38);
  result = (*(uint64_t (**)(_QWORD, _QWORD, float *, float *))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v37, v36);
  if (!off_1EEFD59B0 || (result = off_1EEFD59B0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2), (_DWORD)result))
  {
    v23 = v41[0] <= v36[0] && v38 >= v37[0];
    if (v41[2] > v36[2] || v40 < v37[2])
      v23 = 0;
    if (v41[1] <= v36[1])
    {
      v22.n128_f32[0] = v39;
      v24 = !v23;
      if (v39 < v37[1])
        v24 = 1;
      if ((v24 & 1) == 0)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
        v33[0] = *(_QWORD *)(a1 + 8);
        v33[1] = a2;
        v33[2] = v25;
        v33[3] = v42;
        v34 = -1;
        v35 = a3;
        if (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * a3))
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * a3) = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v33, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), v22);
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
        }
        v26 = *(_QWORD **)(a1 + 40);
        v27 = v26 + 2;
        v28 = v26[2];
        if (*(_QWORD *)(v28 + 16) == v25)
        {
          v29 = 2;
        }
        else
        {
          v27 = v26 + 3;
          v28 = v26[3];
          v29 = 3;
        }
        *v27 = v33;
        (*(void (**)(__n128))(*v26 + 8 * v29))(v22);
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * a3);
        result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v30 + 16))(v30, v33, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        v31 = *(_QWORD *)(a1 + 40);
        v32 = 24;
        if (*(_QWORD *)(*(_QWORD *)(v31 + 16) + 16) == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16))
          v32 = 16;
        *(_QWORD *)(v31 + v32) = v28;
      }
    }
  }
  return result;
}

float sub_1B21D5514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float v27;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;

  if (*(_BYTE *)(a1 + 48))
    v5 = a3;
  else
    v5 = a2;
  if (*(_BYTE *)(a1 + 48))
    v6 = a2;
  else
    v6 = a3;
  v7 = *(unsigned int *)(a1 + 20);
  if ((int)v7 < 1)
    return 1.0;
  v11 = 0;
  v12 = *(_QWORD *)(v5 + 208);
  v13 = *(int32x4_t *)(v5 + 16);
  v14 = *(int32x4_t *)(v5 + 32);
  v15 = *(int32x4_t *)(v5 + 48);
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 1);
  v35 = *(float32x4_t *)(v5 + 64);
  v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 1);
  v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1);
  v38 = (float32x4_t)v13;
  v36 = (float32x4_t)v15;
  v37 = (float32x4_t)v14;
  v30 = (float32x4_t)vdupq_laneq_s32(v14, 2);
  v31 = (float32x4_t)vdupq_laneq_s32(v13, 2);
  v16 = 8 * v7;
  v17 = 1.0;
  v18 = 32;
  v29 = (float32x4_t)vdupq_laneq_s32(v15, 2);
  do
  {
    v19 = (float32x4_t *)(*(_QWORD *)(v12 + 40) + v18);
    v20 = v19[-2];
    v21 = v19[-1];
    v20.i32[3] = 0;
    v21.i32[3] = 0;
    v22 = *v19;
    v23 = v19[1];
    v22.i32[3] = 0;
    v24 = vmulq_f32(v38, v23);
    v25 = (int8x16_t)vmulq_f32(v37, v23);
    v26 = (int8x16_t)vmulq_f32(v36, v23);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x4_t *)(v5 + 16) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v38.f32[0]), v34, v21), v31, v22);
    *(float32x4_t *)(v5 + 32) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v37.f32[0]), v33, v21), v30, v22);
    *(float32x4_t *)(v5 + 48) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v36.f32[0]), v32, v21), v29, v22);
    *(float32x4_t *)(v5 + 64) = vaddq_f32(v35, v24);
    v27 = (*(float (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + v11)
                                                                              + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v11), v5, v6, a4, a5);
    if (v27 < v17)
      v17 = v27;
    *(float32x4_t *)(v5 + 16) = v38;
    *(float32x4_t *)(v5 + 32) = v37;
    *(float32x4_t *)(v5 + 48) = v36;
    *(float32x4_t *)(v5 + 64) = v35;
    v11 += 8;
    v18 += 96;
  }
  while (v16 != v11);
  return v17;
}

_DWORD *sub_1B21D56DC(_DWORD *result, uint64_t a2)
{
  int v2;
  _DWORD *v4;
  uint64_t i;

  v2 = result[5];
  if (v2 >= 1)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      result = *(_DWORD **)(*((_QWORD *)v4 + 4) + 8 * i);
      if (result)
      {
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 32))(result, a2);
        v2 = v4[5];
      }
    }
  }
  return result;
}

void sub_1B21D5740()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D5754(uint64_t a1, uint64_t a2)
{
  return sub_1B21D5284(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40) + 96 * *(int *)(a2 + 40) + 64), *(_DWORD *)(a2 + 40));
}

_QWORD *sub_1B21D5774(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = sub_1B21CDEB8(a1, a2);
  *v10 = &off_1E63CDCA8;
  *((_BYTE *)v10 + 16) = a5;
  v11 = *a2;
  a1[13] = *a2;
  a1[14] = 0;
  if (a5)
    v12 = a4;
  else
    v12 = a3;
  a1[4] = &off_1E63CD640;
  a1[5] = v12;
  if (a5)
    v13 = a3;
  else
    v13 = a4;
  a1[6] = v13;
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 24))(v11, *(_QWORD *)(v12 + 16), *(_QWORD *)(v13 + 16));
  a1[16] = v14;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1[13] + 40))(a1[13], v14);
  return a1;
}

double sub_1B21D5820(_QWORD *a1)
{
  *a1 = &off_1E63CDCA8;
  sub_1B21D596C((uint64_t)(a1 + 4));
  return nullsub_16(a1);
}

void sub_1B21D5850(_QWORD *a1)
{
  *a1 = &off_1E63CDCA8;
  sub_1B21D596C((uint64_t)(a1 + 4));
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D5894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 == *(_DWORD *)(a2 + 8))
    {
      v5 = v4 ? 2 * v4 : 1;
      if (v4 < v5)
      {
        if (v5)
        {
          v7 = sub_1B21FF5F0(8 * v5, 16);
          v4 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v4 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v4 != v8);
        }
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          sub_1B21FF5FC(v9);
          v4 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v5;
        v2 = *(_QWORD *)(a1 + 128);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v4) = v2;
    *(_DWORD *)(a2 + 4) = v4 + 1;
  }
}

double sub_1B21D596C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CD640;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 96));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 96));
  return nullsub_16(a1);
}

void sub_1B21D59C0(uint64_t a1)
{
  sub_1B21D596C(a1);
  JUMPOUT(0x1B5E22E18);
}

double sub_1B21D59E4(uint64_t a1, __int128 *a2, int a3, int a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  _QWORD v20[2];
  __int128 v21;
  int v22;
  int v23;
  double (**v24)(_QWORD *);
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8) <= 19)
  {
    v8 = *(_QWORD *)(a1 + 72);
    sub_1B21E464C((uint64_t)&v24);
    v24 = &off_1E63CC310;
    v25 = 1;
    v9 = a2[1];
    v27 = *a2;
    v10 = a2[2];
    v28 = v9;
    v29 = v10;
    v26 = *(_DWORD *)(a1 + 88);
    v11 = *(_QWORD *)(a1 + 8);
    v20[0] = *(_QWORD *)(a1 + 16);
    v20[1] = &v24;
    v21 = *(_OWORD *)(v20[0] + 16);
    v22 = a3;
    v23 = a4;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 16))(v8, v11, v20, *(_QWORD *)(a1 + 96));
    v13 = *(_QWORD **)(a1 + 64);
    v14 = v13 + 2;
    v15 = v13[2];
    if (*(_QWORD *)(v15 + 16) == *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
    {
      v16 = 2;
    }
    else
    {
      v14 = v13 + 3;
      v15 = v13[3];
      v16 = 3;
    }
    *v14 = v20;
    (*(void (**)(void))(*v13 + 8 * v16))();
    (*(void (**)(uint64_t, _QWORD, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v12 + 16))(v12, *(_QWORD *)(a1 + 8), v20, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64));
    v17 = *(_QWORD *)(a1 + 64);
    v18 = 24;
    if (*(_QWORD *)(*(_QWORD *)(v17 + 16) + 16) == *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
      v18 = 16;
    *(_QWORD *)(v17 + v18) = v15;
    (**(void (***)(uint64_t))v12)(v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, v12);
    return sub_1B21E4670(&v24);
  }
  return result;
}

uint64_t sub_1B21D5B9C(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

float32x4_t sub_1B21D5BA8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t a6)
{
  _OWORD *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t result;
  _OWORD v35[4];

  a1->i64[1] = a3;
  a1[1].i64[0] = a4;
  a1[5].i64[0] = a2;
  a1[5].i32[2] = a6.i32[0];
  a1[4].i64[0] = a5;
  v7 = *(_OWORD **)(a4 + 24);
  v8 = *(float32x4_t *)v7;
  v9 = *((float32x4_t *)v7 + 1);
  v10 = *((float32x4_t *)v7 + 2);
  v11 = *((int8x16_t *)v7 + 3);
  v12 = *(float32x4_t **)(a3 + 24);
  v14 = *v12;
  v13 = v12[1];
  v16 = v12[2];
  v15 = v12[3];
  v17 = (float32x4_t)vtrn1q_s32((int32x4_t)v8, (int32x4_t)v9);
  v18.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v18.i64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0];
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  v20 = (float32x4_t)veorq_s8(v11, v19);
  v21 = (int8x16_t)vmulq_f32(v18, v20);
  v21.i32[3] = 0;
  v22 = vzip2_s32(*(int32x2_t *)v10.f32, 0);
  v16.i32[3] = 0;
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v14, v8, 2), v13, v9, 2), v16, v10, 2);
  v24 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v14, *(float32x2_t *)v8.f32, 1), v13, *(float32x2_t *)v9.f32, 1), v16, *(float32x2_t *)v10.f32, 1);
  v25 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v14, v8.f32[0]), v13, v9.f32[0]), v16, v10.f32[0]);
  v17.i64[1] = v10.u32[0];
  v26 = (int8x16_t)vmulq_f32(v17, v20);
  *(int32x2_t *)v8.f32 = vzip2_s32(*(int32x2_t *)v8.f32, *(int32x2_t *)v9.f32);
  *(int32x2_t *)&v8.u32[2] = v22;
  v27 = (int8x16_t)vmulq_f32(v8, v20);
  *(int32x2_t *)v16.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  *(float32x2_t *)v27.i8 = vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.i8);
  v28 = (int8x16_t)vmulq_f32(v18, v15);
  v28.i32[3] = 0;
  v29 = (int8x16_t)vmulq_f32(v17, v15);
  v30 = (int8x16_t)vmulq_f32(v8, v15);
  *(float32x2_t *)v30.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v27.i8), vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8)));
  v30.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0));
  v35[0] = v25;
  v35[1] = v24;
  v35[2] = v23;
  v35[3] = v30;
  (*(void (**)(_QWORD, _OWORD *, float32x4_t *, float32x4_t *))(**(_QWORD **)(a3 + 8) + 16))(*(_QWORD *)(a3 + 8), v35, a1 + 2, a1 + 3);
  v31 = (float32x4_t)vdupq_lane_s32(a6, 0);
  v31.i32[3] = 0;
  v32 = vaddq_f32(v31, a1[3]);
  result = vsubq_f32(a1[2], v31);
  a1[2] = result;
  a1[3] = v32;
  return result;
}

_BYTE *sub_1B21D5D08(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  float32x4_t *v10;
  int32x2_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t *v16;

  if (result[16])
    v5 = a3;
  else
    v5 = a2;
  if (result[16])
    v6 = a2;
  else
    v6 = a3;
  v7 = *(_DWORD **)(v6 + 8);
  if ((v7[2] - 21) <= 8 && *(int *)(*(_QWORD *)(v5 + 8) + 8) <= 19)
  {
    v10 = (float32x4_t *)result;
    *(double *)&v11 = (*(double (**)(_QWORD))(*(_QWORD *)v7 + 96))(*(_QWORD *)(v6 + 8));
    a5[1] = v10[8].i64[0];
    v12 = sub_1B21D5BA8(v10 + 2, a4, v5, v6, (uint64_t)a5, v11);
    v13 = v10[8].i64[0];
    v14 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v13 + 784) = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v13 + 792) = v14;
    (*(void (**)(_DWORD *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t))(*(_QWORD *)v7 + 128))(v7, v10 + 2, v10 + 4, v10 + 5, v12);
    result = (_BYTE *)a5[1];
    if (*((_DWORD *)result + 200))
    {
      v15 = (float32x4_t *)*((_QWORD *)result + 98);
      v16 = *(float32x4_t **)(a5[2] + 16);
      if (v15 == v16)
        v16 = *(float32x4_t **)(a5[3] + 16);
      else
        v15 = *(float32x4_t **)(a5[3] + 16);
      result = sub_1B21ED270(result, v15 + 1, v16 + 1);
    }
    v10[2].i64[1] = 0;
    v10[3].i64[0] = 0;
  }
  return result;
}

float sub_1B21D5E14(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  float32x4_t *v9;
  _DWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  unsigned __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v50;
  float32x4_t v51;
  _QWORD v52[2];
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x2_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16))
    v3 = a3;
  else
    v3 = a2;
  v4 = v3[8];
  v5 = v3[4];
  v6 = vsubq_f32(v4, v5);
  v6.i32[3] = 0;
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = 1.0;
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0] >= (float)(v3[18].f32[0] * v3[18].f32[0]))
  {
    if (*(_BYTE *)(a1 + 16))
      v9 = a2;
    else
      v9 = a3;
    v10 = (_DWORD *)v9[13].i64[0];
    if ((v10[2] - 21) <= 8)
    {
      v11 = v9[1];
      v12 = v9[2];
      v13 = (float32x4_t)vtrn1q_s32((int32x4_t)v11, (int32x4_t)v12);
      v14 = v9[3];
      v15 = vzip2_s32(*(int32x2_t *)v14.f32, 0);
      v16 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
      v18 = v3[6];
      v17 = v3[7];
      v17.i32[3] = 0;
      v19 = v3[5];
      v18.i32[3] = 0;
      v19.i32[3] = 0;
      v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, v11, 2), v18, v12, 2), v17, v14, 2);
      v21 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v19, v11.f32[0]), v18, v12.f32[0]), v17, v14.f32[0]);
      v23 = v3[1];
      v22 = v3[2];
      v22.i32[3] = 0;
      v23.i32[3] = 0;
      v24 = vmlaq_lane_f32(vmulq_lane_f32(v19, *(float32x2_t *)v11.f32, 1), v18, *(float32x2_t *)v12.f32, 1);
      v25 = vmlaq_n_f32(vmulq_n_f32(v23, v11.f32[0]), v22, v12.f32[0]);
      v26 = vmlaq_lane_f32(v24, v17, *(float32x2_t *)v14.f32, 1);
      v27 = vmlaq_laneq_f32(vmulq_laneq_f32(v23, v11, 2), v22, v12, 2);
      v28 = vmlaq_lane_f32(vmulq_lane_f32(v23, *(float32x2_t *)v11.f32, 1), v22, *(float32x2_t *)v12.f32, 1);
      v29 = v3[3];
      v29.i32[3] = 0;
      v30 = vmlaq_n_f32(v25, v29, v14.f32[0]);
      v31 = vmlaq_laneq_f32(v27, v29, v14, 2);
      v32 = vmlaq_lane_f32(v28, v29, *(float32x2_t *)v14.f32, 1);
      v29.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      v13.i64[1] = v14.u32[0];
      v14.i64[0] = 0x8000000080000000;
      v14.i64[1] = 0x8000000080000000;
      v33 = (float32x4_t)veorq_s8((int8x16_t)v9[4], (int8x16_t)v14);
      v34 = (int8x16_t)vmulq_f32(v13, v33);
      *(int32x2_t *)v11.f32 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v12.f32);
      *(int32x2_t *)&v11.u32[2] = v15;
      v35 = vmulq_f32(v11, v33);
      *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v35.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)));
      v29.i64[1] = v16;
      v36 = (int8x16_t)vmulq_f32(v29, v33);
      v36.i32[3] = 0;
      *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
      v37 = vmulq_f32(v4, v13);
      v38 = (int8x16_t)vmulq_f32(v4, v11);
      *(float32x2_t *)v37.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8));
      v39 = (int8x16_t)vmulq_f32(v4, v29);
      v39.i32[3] = 0;
      *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
      v40 = vaddq_f32(v35, v37);
      v41 = (int8x16_t)vmulq_f32(v5, v13);
      v42 = vmulq_f32(v5, v11);
      *(float32x2_t *)v42.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.f32));
      v43 = (int8x16_t)vmulq_f32(v5, v29);
      v43.i32[3] = 0;
      *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
      v44 = vaddq_f32(v35, v42);
      v45 = vminq_f32(v44, v40);
      v46 = vmaxq_f32(v44, v40);
      v52[0] = &off_1E63FC648;
      v53 = v30;
      v54 = v32;
      v55 = v31;
      v56 = v44;
      v57 = v21;
      v58 = v26;
      v59 = v20;
      v60 = v40;
      v44.i64[0] = v3[17].i64[1];
      v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1);
      v47.i32[3] = 0;
      v50 = vaddq_f32(v46, v47);
      v51 = vsubq_f32(v45, v47);
      v61 = vrev64_s32(*(int32x2_t *)v44.f32);
      (*(void (**)(_DWORD *, _QWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)v10 + 128))(v10, v52, &v51, &v50);
      v48 = *(float *)&v61.i32[1];
      if (*(float *)&v61.i32[1] < v3[17].f32[2])
      {
        v3[17].i32[2] = v61.i32[1];
        nullsub_16(v52);
        return v48;
      }
      else
      {
        nullsub_16(v52);
      }
    }
  }
  return v8;
}

void sub_1B21D60A4(_QWORD *a1)
{
  uint64_t v1;

  sub_1B21E4670(a1);
  sub_1B21FF5FC(v1);
}

uint64_t sub_1B21D60B8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

uint64_t sub_1B21D60C4(uint64_t a1)
{
  return a1 + 32;
}

void sub_1B21D60CC(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

const char *sub_1B21D60D4()
{
  return "Triangle";
}

double sub_1B21D60E0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.00781250185;
  *a1 = xmmword_1B2244F70;
  return result;
}

float sub_1B21D60F0(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t sub_1B21D60F8()
{
  return 56;
}

const char *sub_1B21D6100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  sub_1B21DF5E8(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  return "btConvexInternalShapeData";
}

__n128 sub_1B21D6174@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, __n128 *a3@<X8>)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v4 = a1[5];
  v5 = a1[6];
  v3 = a1 + 5;
  v6 = (int8x16_t)vmulq_f32(v4, *a2);
  v7 = (int8x16_t)vmulq_f32(*a2, v5);
  v8 = (int8x16_t)vmulq_f32(*a2, v3[2]);
  v8.i32[3] = 0;
  v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  v10 = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  v11 = 2;
  if (v9.f32[1] >= v10.f32[0])
    v12 = 1;
  else
    v12 = 2;
  if ((vcgt_f32(v10, v9).u8[0] & 1) == 0)
    v11 = 0;
  if (v9.f32[0] < v9.f32[1])
    v11 = v12;
  result = (__n128)v3[v11];
  *a3 = result;
  return result;
}

float32x4_t *sub_1B21D61E8(float32x4_t *result, float32x4_t *a2, _OWORD *a3, int a4)
{
  uint64_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 >= 1)
  {
    v4 = a4;
    do
    {
      v5 = *a2++;
      v6 = (int8x16_t)vmulq_f32(result[5], v5);
      v7 = (int8x16_t)vmulq_f32(v5, result[7]);
      v8 = (int8x16_t)vmulq_f32(v5, result[6]);
      v7.i32[3] = 0;
      v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      v10 = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
      if (v9.f32[1] >= v10.f32[0])
        v11 = 1;
      else
        v11 = 2;
      if ((vcgt_f32(v10, v9).u8[0] & 1) != 0)
        v12 = 2;
      else
        v12 = 0;
      if (v9.f32[0] >= v9.f32[1])
        v11 = v12;
      *a3++ = result[v11 + 5];
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B21D6274()
{
  return 2;
}

int8x16_t sub_1B21D627C(float32x4_t *a1, __int32 a2, int8x16_t *a3, int32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t result;

  a4.i32[0] = 0;
  v4 = a1[5];
  v5 = vsubq_f32(a1[6], v4);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = vsubq_f32(a1[7], v4);
  v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v9.i64[1] = v5.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v10.i64[1] = v7.i64[0];
  v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v5), vmulq_f32(v9, v7));
  v7.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v7.i64[1] = v11.u32[0];
  v12 = (int8x16_t)vmulq_f32(v7, v7);
  v13 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  v7.i32[0] = a2;
  result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v7, a4), 0), (int8x16_t)v13, (int8x16_t)vnegq_f32(v13));
  *a3 = result;
  return result;
}

uint64_t sub_1B21D6304()
{
  return 3;
}

uint64_t sub_1B21D630C()
{
  return 3;
}

uint64_t sub_1B21D6314(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 216))(a1, ((a2 + 1) % 3), a4);
}

__n128 sub_1B21D6380(uint64_t a1, int a2, __n128 *a3)
{
  __n128 result;

  result = *(__n128 *)(a1 + 16 * a2 + 80);
  *a3 = result;
  return result;
}

uint64_t sub_1B21D6390()
{
  return 0;
}

uint64_t sub_1B21D6398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a4, a2, a3);
}

BOOL sub_1B21D63B4(float32x4_t *a1, float32x4_t *a2, float a3)
{
  _BOOL8 result;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  int8x8_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  float v18;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x8_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  BOOL v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  result = 0;
  v5 = a1[5];
  v6 = vsubq_f32(a1[6], v5);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  v8 = vsubq_f32(a1[7], v5);
  v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v10.i64[1] = v6.i64[0];
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v11.i64[1] = v8.i64[0];
  v12 = (int8x16_t)vsubq_f32(vmulq_f32(v11, v6), vmulq_f32(v10, v8));
  v10.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v10.i64[1] = v12.u32[0];
  v13 = (int8x16_t)vmulq_f32(v10, v10);
  v14 = vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]));
  v15 = (int8x16_t)vmulq_f32(*a2, v14);
  v33 = v14;
  v16 = (int8x16_t)vmulq_f32(v5, v14);
  v17 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL))).f32[0];
  v18 = -a3;
  if (v17 >= (float)-a3 && v17 <= a3)
  {
    v21 = 0;
    v22.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
    v22.i64[1] = v14.i64[0];
    v32 = v22;
    do
    {
      (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(a1->i64[0] + 208))(a1, v21, &v35, &v34);
      v23 = vsubq_f32(v34, v35);
      v24 = (int8x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
      v23.i32[3] = 0;
      *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v23.f32, v24, 4uLL);
      v25.i64[1] = v23.i64[0];
      v26 = (int8x16_t)vsubq_f32(vmulq_f32(v32, v23), vmulq_f32(v33, v25));
      v25.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
      v25.i64[1] = v26.u32[0];
      v27 = (int8x16_t)vmulq_f32(v25, v25);
      v28 = vmulq_n_f32(v25, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0]));
      v29 = (int8x16_t)vmulq_f32(*a2, v28);
      v30 = (int8x16_t)vmulq_f32(v35, v28);
      *(float *)v30.i32 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))).f32[0];
      result = *(float *)v30.i32 >= v18;
      v31 = *(float *)v30.i32 < v18 || (_DWORD)v21 == 2;
      v21 = (v21 + 1);
    }
    while (!v31);
  }
  return result;
}

uint64_t sub_1B21D6554()
{
  return 1;
}

__n128 sub_1B21D655C(float32x4_t *a1, uint64_t a2, float32x4_t *a3, __n128 *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  __n128 result;

  v4 = a1[5];
  v5 = vsubq_f32(a1[6], v4);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = vsubq_f32(a1[7], v4);
  v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v9.i64[1] = v5.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v10.i64[1] = v7.i64[0];
  v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v5), vmulq_f32(v9, v7));
  v7.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v7.i64[1] = v11.u32[0];
  v12 = (int8x16_t)vmulq_f32(v7, v7);
  *a3 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  result = (__n128)a1[5];
  *a4 = result;
  return result;
}

void sub_1B21D65D4(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D65F8(float32x4_t *a1, __int128 *a2)
{
  __int32 v4;
  __int128 v5;
  uint64_t v6[4];
  float32x4_t v7[3];
  uint64_t v8;
  uint64_t v9;
  char v10[320];
  int v11;
  char v12;
  double (**v13)(_QWORD *);
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  int v19;
  __int32 v20;
  __int32 v21;
  uint64_t (**v22)();
  float v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7[0] = (float32x4_t)xmmword_1B2244DB0;
  v7[1] = (float32x4_t)xmmword_1B2244DD0;
  v7[2] = (float32x4_t)xmmword_1B2244D90;
  v4 = a1[13].i32[0];
  v23 = a1[13].f32[1];
  v8 = 0;
  v9 = 0;
  v22 = off_1E63CE0A0;
  v24 = 0;
  v25 = 0;
  sub_1B21E0FCC((uint64_t)&v18);
  v18 = &unk_1E63CBCC8;
  v19 = 8;
  v20 = v4;
  v21 = v4;
  sub_1B21E464C((uint64_t)&v13);
  v13 = &off_1E63CC310;
  v14 = 1;
  v5 = a2[1];
  v15 = *a2;
  v16 = v5;
  v17 = a2[2];
  v11 = 953267991;
  v12 = 0;
  sub_1B21EEDF0(v6, (uint64_t)&v18, (uint64_t)&v13, (uint64_t)v10);
  if (sub_1B21EEE04(v6, a1 + 1, a1 + 5, v7, v7, (uint64_t)&v22) && a1[13].f32[1] > v23)
    a1[13].f32[1] = v23;
  nullsub_16(v6);
  sub_1B21E4670(&v13);
  nullsub_16(&v18);
}

double sub_1B21D6760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E63CE130;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 32) = 0x300000000;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

void sub_1B21D6788()
{
  JUMPOUT(0x1B5E22E18);
}

double sub_1B21D679C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CD1F0;
  if (*(_BYTE *)(a1 + 32) && *(_QWORD *)(a1 + 40))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return nullsub_16(a1);
}

void sub_1B21D67EC(uint64_t a1)
{
  sub_1B21D679C(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D6810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float v13;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v32;
  float v33;
  int8x16_t v34;
  float v35;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  double v59;
  float32x4_t v60;
  double v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  _OWORD *v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  _OWORD *v77;
  float32x4_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  _OWORD *v83;
  _OWORD *v84;
  float v85;
  int8x16_t v86;
  float v87;
  float32x4_t v88;
  float v89;
  float v90;
  float v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float32x4_t v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  int8x16_t v100;
  float32x2_t v101;
  int8x16_t v102;
  float v103;
  float v107;
  float32x4_t v108;
  float32x2_t v109;
  float v110;
  float v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  float v115;
  float32x4_t v116;
  int v117;
  int8x16_t v118;
  __float2 v119;
  int v120;
  float v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int32x2_t v125;
  int32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  __float2 v130;
  int8x16_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  int32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t *v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t *v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x4_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  uint64_t v177;
  uint64_t v178;
  float32x4_t *v179;
  float32x4_t *v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  float v188;
  float v189;
  float v190;
  float32x4_t v191;
  float v192;
  float v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  _QWORD *v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  BOOL v228;
  uint64_t v229;
  float32x4_t v230;
  float32x4_t v231;
  _OWORD *v232;
  char v233;
  uint64_t (**v234)();
  _BYTE v235[16];
  float32x4_t v236;
  uint64_t v237;
  float32x4_t *v238;
  float v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 40);
  if (!v10)
  {
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16));
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 32) = 1;
  }
  a5[1] = v10;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(float32x4_t **)(a3 + 8);
  if (*(_DWORD *)(v11 + 8) == 10 && v12->i32[2] == 10)
  {
    v13 = sub_1B21ED14C(v10);
    v14 = *(int *)(v11 + 72);
    v15 = *(float *)(v11 + 48 + 4 * v14);
    v16 = ((int)v14 + 2) % 3;
    v17 = v12[4].i32[2];
    v18 = v12[3].f32[v17];
    v19 = *(float32x4_t **)(a2 + 24);
    v20 = *(float32x4_t **)(a3 + 24);
    v21 = &v19->f32[v14];
    v22 = *v21;
    v23 = v21[4];
    v25.f32[0] = *v21;
    v24 = v21[8];
    v25.f32[1] = v23;
    v25.i64[1] = LODWORD(v24);
    v26 = &v20->i32[v17];
    v27.i32[0] = *v26;
    v27.i32[1] = v26[4];
    v27.i32[2] = v26[8];
    v28 = v20[3];
    v29 = vsubq_f32(v28, v19[3]);
    v29.i32[3] = 0;
    v30 = (int8x16_t)vmulq_f32(v25, v27);
    LODWORD(_S20) = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0];
    v32 = (int8x16_t)vmulq_f32(v25, v29);
    LODWORD(v33) = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).u32[0];
    v34 = (int8x16_t)vmulq_f32(v27, v29);
    v35 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)).f32[0];
    __asm { FMLS            S6, S20, V20.S[0] }
    v41 = 0.0;
    if (_S6 != 0.0)
    {
      v42 = (float)(v33 + (float)((float)-v35 * _S20)) / _S6;
      v41 = -v15;
      if (v42 >= (float)-v15)
      {
        v41 = v42;
        if (v42 > v15)
          v41 = v15;
      }
    }
    v43 = v12[3].f32[((int)v17 + 2) % 3];
    v44 = (float)(v41 * _S20) - v35;
    v45 = -v18;
    if (v44 >= (float)-v18)
    {
      if (v44 <= v18)
        goto LABEL_76;
      v65 = v33 + (float)(v18 * _S20);
      v41 = -v15;
      v44 = v12[3].f32[v17];
      if (v65 < (float)-v15)
        goto LABEL_76;
      if (v65 <= v15)
      {
        v41 = v65;
        goto LABEL_76;
      }
    }
    else
    {
      v46 = v33 + (float)(v45 * _S20);
      v41 = -v15;
      v44 = v45;
      if (v46 < (float)-v15)
      {
LABEL_76:
        v183 = vmulq_n_f32(v25, v41);
        v184 = vmulq_n_f32(v27, v44);
        v184.i32[3] = 0;
        v185 = vsubq_f32(v29, v183);
        v185.i32[3] = 0;
        v186 = vaddq_f32(v184, v185);
        v187 = (int8x16_t)vmulq_f32(v186, v186);
        LODWORD(v188) = vadd_f32(vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)).u32[0];
        v189 = sqrtf(v188);
        v190 = (float)(v189 - *(float *)(v11 + 48 + 4 * v16)) - v43;
        if (v190 <= v13)
        {
          if (v188 <= 1.4211e-14)
          {
            if (fabsf(v24) <= 0.70711)
            {
              v193 = 1.0 / sqrtf((float)(v23 * v23) + (float)(v22 * v22));
              v212.f32[0] = -(float)(v23 * v193);
              *(uint64_t *)((char *)v212.i64 + 4) = COERCE_UNSIGNED_INT(v22 * v193);
            }
            else
            {
              v192 = 1.0 / sqrtf((float)(v24 * v24) + (float)(v23 * v23));
              v212.i32[0] = 0;
              v212.f32[1] = -(float)(v24 * v192);
              v212.f32[2] = v23 * v192;
            }
          }
          else
          {
            v191 = vmulq_n_f32(v186, -1.0 / v189);
            v191.i32[3] = 0;
            v212 = v191;
          }
          v194 = vaddq_f32(v28, v184);
          v195 = vmulq_n_f32(v212, v43);
          v195.i32[3] = 0;
          v240 = vaddq_f32(v194, v195);
        }
        if (v190 < v13)
          (*(void (**)(_QWORD *, float32x4_t *, float32x4_t *, float))(*a5 + 32))(a5, &v212, &v240, v190);
LABEL_85:
        v178 = a5[1];
        if (!*(_DWORD *)(v178 + 800))
          return;
        v196 = *(float32x4_t **)(v178 + 784);
        v197 = *(float32x4_t **)(a5[2] + 16);
        if (v196 == v197)
        {
          v181 = v196 + 1;
          v197 = *(float32x4_t **)(a5[3] + 16);
        }
        else
        {
          v181 = (float32x4_t *)(*(_QWORD *)(a5[3] + 16) + 16);
        }
        v182 = v197 + 1;
        goto LABEL_90;
      }
      if (v46 <= v15)
      {
        v41 = v33 + (float)(v45 * _S20);
        goto LABEL_76;
      }
    }
    v41 = v15;
    goto LABEL_76;
  }
  v248 = 1.0e18;
  sub_1B21EB97C((uint64_t)v235, (_DWORD *)v11, v12, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v237 = v11;
  v238 = v12;
  v47 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  v48 = v47 + (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
  v49 = sub_1B21ED14C(*(_QWORD *)(a1 + 40));
  v248 = (float)(v48 + v49) * (float)(v48 + v49);
  v50 = *(float32x4_t **)(a2 + 24);
  v51 = v50[1];
  v240 = *v50;
  v241 = v51;
  v52 = v50[3];
  v242 = v50[2];
  v243 = v52;
  v53 = *(float32x4_t **)(a3 + 24);
  v244 = *v53;
  v245 = v53[1];
  v246 = v53[2];
  v247 = v53[3];
  v54 = *(_DWORD *)(v11 + 8);
  if (v54 > 6)
    goto LABEL_43;
  v55 = v12->i32[2];
  if (v55 > 6)
    goto LABEL_43;
  v234 = &off_1E63FC670;
  v56 = 0.0;
  if (v54)
  {
    v57 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    if (!v12->i32[2])
      goto LABEL_18;
    goto LABEL_17;
  }
  v57 = 0.0;
  if (v55)
LABEL_17:
    v56 = (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
LABEL_18:
  v212.i64[0] = (uint64_t)&off_1E63FC6A8;
  v212.i64[1] = (uint64_t)a5;
  v214.i64[0] = __PAIR64__(LODWORD(v56), LODWORD(v57));
  v214.i8[12] = 0;
  if (*(_QWORD *)(v11 + 72))
  {
    if (v12[4].i64[1])
    {
      v58 = sub_1B21ED14C(*(_QWORD *)(a1 + 40));
      if (*(_BYTE *)(a4 + 32))
      {
        if ((sub_1B21ED9C4(*(_QWORD *)(v11 + 72), v12[4].i64[1], *(float32x4_t **)(a2 + 24), *(float32x4_t **)(a3 + 24), &v231, (uint64_t)a5) & 1) != 0)
        {
          v64 = -1.0e30;
LABEL_68:
          sub_1B21EE6CC(&v231, *(_QWORD *)(v11 + 72), v12[4].i64[1], *(float32x4_t **)(a2 + 24), *(float32x4_t **)(a3 + 24), (uint64_t)a5, v64 - v58, v58, v59, v60, v61, v62, v63);
        }
      }
      else
      {
        sub_1B21EB9C0(v235, &v240, &v212, *(_QWORD *)(a4 + 24), 0);
        v231 = v213;
        if (v214.i8[12])
        {
          v64 = v214.f32[2];
          if (v214.f32[2] < 0.0)
            goto LABEL_68;
        }
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v178 = a5[1];
        if (*(_DWORD *)(v178 + 800))
        {
          v179 = *(float32x4_t **)(v178 + 784);
          v180 = *(float32x4_t **)(a5[2] + 16);
          if (v179 == v180)
            v180 = *(float32x4_t **)(a5[3] + 16);
          else
            v179 = *(float32x4_t **)(a5[3] + 16);
          v181 = v179 + 1;
          v182 = v180 + 1;
LABEL_90:
          sub_1B21ED270((_BYTE *)v178, v181, v182);
          return;
        }
      }
      return;
    }
    if (v12->i32[2] == 1)
    {
      *(uint64_t *)((char *)v231.i64 + 4) = 0x100000000;
      v66 = *(float32x4_t **)(a3 + 24);
      v67 = v12[5];
      v68 = vmulq_f32(*v66, v67);
      v69 = (int8x16_t)vmulq_f32(v67, v66[1]);
      v70 = (int8x16_t)vmulq_f32(v67, v66[2]);
      v70.i32[3] = 0;
      *(float32x2_t *)v68.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
      *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
      v208 = vaddq_f32(v68, v66[3]);
      v71 = (_OWORD *)sub_1B21FF5F0(16, 16);
      *v71 = v208;
      v72 = *(float32x4_t **)(a3 + 24);
      v73 = v12[6];
      v74 = vmulq_f32(*v72, v73);
      v75 = (int8x16_t)vmulq_f32(v73, v72[1]);
      v76 = (int8x16_t)vmulq_f32(v73, v72[2]);
      v76.i32[3] = 0;
      *(float32x2_t *)v74.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
      *(float32x2_t *)&v74.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
      v209 = vaddq_f32(v74, v72[3]);
      v77 = (_OWORD *)sub_1B21FF5F0(32, 16);
      *v77 = *v71;
      sub_1B21FF5FC((uint64_t)v71);
      v233 = 1;
      v232 = v77;
      v77[1] = v209;
      v78 = *(float32x4_t **)(a3 + 24);
      v79 = v12[7];
      v80 = vmulq_f32(*v78, v79);
      v81 = (int8x16_t)vmulq_f32(v79, v78[1]);
      v82 = (int8x16_t)vmulq_f32(v79, v78[2]);
      v82.i32[3] = 0;
      *(float32x2_t *)v80.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)));
      *(float32x2_t *)&v80.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)), 0);
      v210 = vaddq_f32(v80, v78[3]);
      v83 = (_OWORD *)sub_1B21FF5F0(64, 16);
      v84 = v232;
      *v83 = *v232;
      v83[1] = v84[1];
      if (v233)
        sub_1B21FF5FC((uint64_t)v84);
      v233 = 1;
      v232 = v83;
      v83[2] = v210;
      *(uint64_t *)((char *)v231.i64 + 4) = 0x400000003;
      v85 = sub_1B21ED14C(*(_QWORD *)(a1 + 40));
      sub_1B21EB9C0(v235, &v240, &v234, *(_QWORD *)(a4 + 24), 0);
      v86 = (int8x16_t)vmulq_f32(v236, v236);
      v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0];
      if (v87 > 0.00000011921)
      {
        v88 = vmulq_n_f32(v236, 1.0 / v87);
        v88.i32[3] = 0;
        v230 = v88;
        v89 = v239;
        v90 = v89 - (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
        v91 = (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
        sub_1B21EE2A8(&v230, *(_QWORD *)(v11 + 72), *(float32x4_t **)(a2 + 24), (uint64_t)&v231, (uint64_t)a5, (float)(v90 - v91) - v85, v85, v92, v93, v94, v95, v96);
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v97 = a5[1];
        if (*(_DWORD *)(v97 + 800))
        {
          v98 = *(float32x4_t **)(v97 + 784);
          v99 = *(float32x4_t **)(a5[2] + 16);
          if (v98 == v99)
            v99 = *(float32x4_t **)(a5[3] + 16);
          else
            v98 = *(float32x4_t **)(a5[3] + 16);
          sub_1B21ED270((_BYTE *)v97, v98 + 1, v99 + 1);
        }
      }
      if (v232 && v233)
        sub_1B21FF5FC((uint64_t)v232);
      return;
    }
  }
LABEL_43:
  sub_1B21EB9C0(v235, &v240, a5, *(_QWORD *)(a4 + 24), 0);
  if (*(_DWORD *)(a1 + 52))
  {
    if (*(_DWORD *)(a5[1] + 800) < *(_DWORD *)(a1 + 56))
    {
      v100 = (int8x16_t)vmulq_f32(v236, v236);
      v101 = vpadd_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8);
      v102 = vextq_s8(v100, v100, 8uLL);
      v103 = vadd_f32(v101, *(float32x2_t *)v102.i8).f32[0];
      if (v103 > 0.00000011921)
      {
        _Q3 = vmulq_n_f32(v236, 1.0 / v103);
        _Q3.i32[3] = 0;
        v207 = _Q3;
        v206 = _Q3.f32[2];
        _S1 = _Q3.i32[1];
        if (fabsf(_Q3.f32[2]) <= 0.70711)
        {
          v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.f32, 0);
          v109.f32[0] = -_Q3.f32[1];
          *(float32x2_t *)v102.i8 = vmul_n_f32(v109, 1.0/ sqrtf(vmlas_n_f32(vmuls_lane_f32(_Q3.f32[1], *(float32x2_t *)_Q3.f32, 1), _Q3.f32[0], _Q3.f32[0])));
          v102.i32[2] = 0;
          v200 = (float32x4_t)v102;
        }
        else
        {
          __asm { FMLA            S2, S1, V3.S[1] }
          v107 = 1.0 / sqrtf(_S2);
          v108.i32[0] = 0;
          v108.f32[1] = -(float)(_Q3.f32[2] * v107);
          v108.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v107, *(float32x2_t *)_Q3.f32, 1));
          v200 = v108;
        }
        v110 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        v111 = (*(float (**)(float32x4_t *))(v12->i64[0] + 32))(v12);
        if (v110 >= v111)
        {
          v112 = &v245;
          v113 = &v246;
          v114 = &v247;
          v115 = *(float *)&dword_1EEF652F4 / v111;
          if ((float)(*(float *)&dword_1EEF652F4 / v111) > 0.3927)
            v115 = 0.3927;
          v116 = v244;
        }
        else
        {
          v112 = &v241;
          v113 = &v242;
          v114 = &v243;
          v115 = *(float *)&dword_1EEF652F4 / v110;
          if ((float)(*(float *)&dword_1EEF652F4 / v110) > 0.3927)
            v115 = 0.3927;
          v116 = v240;
        }
        v205 = v116;
        v117 = *(_DWORD *)(a1 + 52);
        if (v117 >= 1)
        {
          v203 = *v113;
          v204 = *v112;
          v202 = *v114;
          v118 = (int8x16_t)vmulq_f32(v200, v200);
          LODWORD(v211) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8)).u32[0];
          v119 = __sincosf_stret(v115 * 0.5);
          v120 = 0;
          v121 = v119.__sinval / sqrtf(v211);
          *(float32x2_t *)v122.i8 = vmul_n_f32(*(float32x2_t *)v200.f32, v121);
          v123.i64[0] = v122.i64[0];
          v123.i64[1] = __PAIR64__(LODWORD(v119.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v121, v200, 2)));
          v124 = (int8x16_t)vmulq_f32(v207, v207);
          v125 = (int32x2_t)vextq_s8(v123, v123, 8uLL).u64[0];
          v126 = vzip1_s32(v125, *(int32x2_t *)v122.i8);
          v199 = (float32x4_t)v123;
          v201 = *(float32x2_t *)v122.i8;
          v198 = (float32x2_t)vextq_s8(v123, v122, 0xCuLL).u64[0];
          v127 = (float32x2_t)vext_s8(*(int8x8_t *)v122.i8, (int8x8_t)v125, 4uLL);
          v128 = (float32x2_t)vrev64_s32(v126);
          v129 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL), vpadd_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v124.i8)).f32[0]);
          do
          {
            if (v211 > 0.00000011921)
            {
              v130 = __sincosf_stret((float)((float)(6.2832 / (float)v117) * (float)v120) * 0.5);
              v131.i64[1] = v207.i64[1];
              *(float32x2_t *)v131.i8 = vmul_n_f32(*(float32x2_t *)v207.f32, v130.__sinval / v129);
              v132.i64[0] = v131.i64[0];
              v132.i64[1] = __PAIR64__(LODWORD(v130.__cosval), v206 * (float)(v130.__sinval / v129));
              if (v110 >= v111)
              {
                v159 = *(float32x4_t **)(a2 + 24);
                v160 = v159[1];
                v240 = *v159;
                v241 = v160;
                v161 = v159[3];
                v242 = v159[2];
                v243 = v161;
                v162 = (float32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)xmmword_1B2269010);
                v161.i64[0] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
                v163 = (float32x2_t)vzip1_s32(*(int32x2_t *)v161.f32, *(int32x2_t *)v162.f32);
                *(int8x8_t *)v161.f32 = vext_s8(*(int8x8_t *)v162.f32, *(int8x8_t *)v161.f32, 4uLL);
                v164 = vmul_f32(v198, v163);
                *(float32x2_t *)v165.f32 = vmul_f32(v127, v163);
                *(float32x2_t *)&v165.u32[2] = vmul_f32(v128, *(float32x2_t *)v161.f32);
                *(float32x2_t *)v161.f32 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v162.f32, v199, 3), vmul_f32((float32x2_t)v126, *(float32x2_t *)v161.f32));
                *(float32x2_t *)&v161.u32[2] = vadd_f32(vmul_lane_f32(*(float32x2_t *)v162.f32, v201, 1), v164);
                v166 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v199, v162, 3), v165), (float32x4_t)veorq_s8((int8x16_t)v161, (int8x16_t)xmmword_1B2269000));
                *(int32x2_t *)v161.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL), *(int32x2_t *)v166.f32);
                v165.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                v167 = vzip1_s32(*(int32x2_t *)v165.f32, *(int32x2_t *)v131.i8);
                v168 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 4uLL).u64[0];
                *(int8x8_t *)v165.f32 = vext_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v165.f32, 4uLL);
                v169 = vmul_laneq_f32(*(float32x2_t *)v166.f32, v132, 3);
                v170 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, v131, 0xCuLL), *(float32x2_t *)v161.f32);
                v171 = vmul_lane_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v131.i8, 1);
                *(float32x2_t *)v161.f32 = vmul_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v161.f32);
                *(float32x2_t *)&v161.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v167), v168);
                v172 = vmulq_laneq_f32(v132, v166, 3);
                *(float32x2_t *)v166.f32 = vadd_f32(v169, vmul_f32((float32x2_t)v167, v168));
                *(float32x2_t *)&v166.u32[2] = vadd_f32(v171, v170);
                v231 = vaddq_f32(vsubq_f32(v172, v161), (float32x4_t)veorq_s8((int8x16_t)v166, (int8x16_t)xmmword_1B2269000));
                sub_1B19064B8((uint64_t)&v212, &v231);
                v173 = *(float32x4_t **)(a3 + 24);
                v174 = *v173;
                v175 = v173[1];
                v174.i32[3] = 0;
                v175.i32[3] = 0;
                v176 = v173[2];
                v176.i32[3] = 0;
                v155 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v212.f32[0]), v175, *(float32x2_t *)v212.f32, 1), v176, v212, 2);
                v156 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v213.f32[0]), v175, *(float32x2_t *)v213.f32, 1), v176, v213, 2);
                v157 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v214.f32[0]), v175, *(float32x2_t *)v214.f32, 1), v176, v214, 2);
                v244 = v155;
                v245 = v156;
                v246 = v157;
                v151 = v240;
                v152 = v241;
                v153 = v242;
                v158 = v247;
              }
              else
              {
                v133 = (float32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)xmmword_1B2269010);
                v134 = (int32x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
                v135 = (float32x2_t)vzip1_s32(v134, *(int32x2_t *)v133.f32);
                v136 = (float32x2_t)vext_s8(*(int8x8_t *)v133.f32, (int8x8_t)v134, 4uLL);
                v137 = vmul_f32(v198, v135);
                *(float32x2_t *)v138.f32 = vmul_f32(v127, v135);
                *(float32x2_t *)&v138.u32[2] = vmul_f32(v128, v136);
                *(float32x2_t *)v139.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v133.f32, v199, 3), vmul_f32((float32x2_t)v126, v136));
                v139.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v133.f32, v201, 1), v137);
                v140 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v199, v133, 3), v138), (float32x4_t)veorq_s8(v139, (int8x16_t)xmmword_1B2269000));
                *(int32x2_t *)v139.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), *(int32x2_t *)v140.f32);
                v138.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                v141 = vzip1_s32(*(int32x2_t *)v138.f32, *(int32x2_t *)v131.i8);
                v142 = (float32x2_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 4uLL).u64[0];
                *(int8x8_t *)v138.f32 = vext_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v138.f32, 4uLL);
                v143 = vmul_laneq_f32(*(float32x2_t *)v140.f32, v132, 3);
                v144 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, v131, 0xCuLL), *(float32x2_t *)v139.i8);
                v145 = vmul_lane_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v131.i8, 1);
                *(float32x2_t *)v139.i8 = vmul_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v139.i8);
                v139.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v141), v142);
                v146 = vmulq_laneq_f32(v132, v140, 3);
                *(float32x2_t *)v140.f32 = vadd_f32(v143, vmul_f32((float32x2_t)v141, v142));
                *(float32x2_t *)&v140.u32[2] = vadd_f32(v145, v144);
                v231 = vaddq_f32(vsubq_f32(v146, (float32x4_t)v139), (float32x4_t)veorq_s8((int8x16_t)v140, (int8x16_t)xmmword_1B2269000));
                sub_1B19064B8((uint64_t)&v212, &v231);
                v147 = *(float32x4_t **)(a2 + 24);
                v148 = *v147;
                v149 = v147[1];
                v148.i32[3] = 0;
                v149.i32[3] = 0;
                v150 = v147[2];
                v150.i32[3] = 0;
                v151 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v212.f32[0]), v149, *(float32x2_t *)v212.f32, 1), v150, v212, 2);
                v152 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v213.f32[0]), v149, *(float32x2_t *)v213.f32, 1), v150, v213, 2);
                v153 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v214.f32[0]), v149, *(float32x2_t *)v214.f32, 1), v150, v214, 2);
                v240 = v151;
                v241 = v152;
                v242 = v153;
                v154 = *(float32x4_t **)(a3 + 24);
                v155 = *v154;
                v244 = *v154;
                v156 = v154[1];
                v245 = v156;
                v157 = v154[2];
                v246 = v157;
                v158 = v154[3];
                v247 = v158;
              }
              v177 = *(_QWORD *)(a4 + 24);
              v212.i64[0] = (uint64_t)&off_1E63CD668;
              v215 = a5;
              v216 = v151;
              v217 = v152;
              v218 = v153;
              v219 = v243;
              v220 = v155;
              v221 = v156;
              v222 = v157;
              v223 = v158;
              v224 = v205;
              v225 = v204;
              v226 = v203;
              v227 = v202;
              v228 = v110 < v111;
              v229 = v177;
              sub_1B21EB9C0(v235, &v240, &v212, v177, 0);
              v117 = *(_DWORD *)(a1 + 52);
            }
            ++v120;
          }
          while (v120 < v117);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 32))
    goto LABEL_85;
}

float sub_1B21D75B4(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;
  uint64_t v11;
  __int32 v12;
  float v13;
  uint64_t v14;
  __int32 v15;
  uint64_t v16;
  float v17;
  _QWORD v19[4];
  _BYTE v20[320];
  int v21;
  char v22;
  _QWORD v23[22];
  float v24;
  uint64_t v25;
  int v26;
  void *v27;
  int v28;
  __int32 v29;
  __int32 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = vsubq_f32(a2[8], a2[4]);
  v5.i32[3] = 0;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0] >= (float)(a2[18].f32[0] * a2[18].f32[0]))
  {
    v9 = 1.0;
    if (byte_1EEFD59B8)
      return v9;
  }
  else
  {
    v7 = vsubq_f32(a3[8], a3[4]);
    v7.i32[3] = 0;
    v8 = (int8x16_t)vmulq_f32(v7, v7);
    v9 = 1.0;
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] < (float)(a3[18].f32[0] * a3[18].f32[0])|| byte_1EEFD59B8 != 0)
    {
      return v9;
    }
  }
  v11 = a2[13].i64[0];
  v12 = a3[17].i32[3];
  sub_1B21E0FCC((uint64_t)&v27);
  v27 = &unk_1E63CBCC8;
  v28 = 8;
  v29 = v12;
  v30 = v12;
  v23[0] = off_1E63CE0A0;
  v24 = 1.0e18;
  v25 = 0;
  v26 = 0;
  v21 = 953267991;
  v22 = 0;
  sub_1B21E9134(v19, v11, (uint64_t)&v27, (uint64_t)v20);
  v9 = 1.0;
  if (sub_1B21E9148((uint64_t)v19, (uint64_t)&a2[1], a2 + 5, a3 + 1, a3 + 5, (uint64_t)v23))
  {
    v13 = v24;
    if (a2[17].f32[2] > v24)
      a2[17].f32[2] = v24;
    if (a3[17].f32[2] > v13)
      a3[17].f32[2] = v13;
    if (v13 < 1.0)
      v9 = v13;
    else
      v9 = 1.0;
  }
  nullsub_16(v19);
  nullsub_16(&v27);
  v14 = a3[13].i64[0];
  v15 = a2[17].i32[3];
  sub_1B21E0FCC(v16);
  v27 = &unk_1E63CBCC8;
  v28 = 8;
  v29 = v15;
  v30 = v15;
  v23[0] = off_1E63CE0A0;
  v24 = 1.0e18;
  v25 = 0;
  v26 = 0;
  v21 = 953267991;
  v22 = 0;
  sub_1B21E9134(v19, (uint64_t)&v27, v14, (uint64_t)v20);
  if (sub_1B21E9148((uint64_t)v19, (uint64_t)&a2[1], a2 + 5, a3 + 1, a3 + 5, (uint64_t)v23))
  {
    v17 = v24;
    if (a2[17].f32[2] > v24)
      a2[17].f32[2] = v24;
    if (a3[17].f32[2] > v17)
      a3[17].f32[2] = v17;
    if (v9 > v17)
      v9 = v17;
  }
  nullsub_16(v19);
  nullsub_16(&v27);
  return v9;
}

int8x16_t sub_1B21D7854(int8x16_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t result;
  int8x16_t v9;

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 64);
  v5 = a2[1];
  v6 = a1[2].i64[0];
  v9 = a1[1];
  v7 = sub_1B21CDEB8(v4, a2);
  *v7 = &off_1E63CD1F0;
  result = vextq_s8(v9, v9, 8uLL);
  *((int8x16_t *)v7 + 1) = result;
  *((_BYTE *)v7 + 32) = 0;
  v7[5] = v5;
  *((_BYTE *)v7 + 48) = 0;
  *(_QWORD *)((char *)v7 + 52) = v6;
  return result;
}

void sub_1B21D78F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && *(_BYTE *)(a1 + 32))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = sub_1B21FF5F0(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          sub_1B21FF5FC(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 40);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void sub_1B21D79D8()
{
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D79F8()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D7A14(uint64_t a1, _OWORD *a2, float a3)
{
  float v3;

  *(float *)(a1 + 40) = a3;
  *(_OWORD *)(a1 + 16) = *a2;
  v3 = (float)(*(float *)(a1 + 36) + *(float *)(a1 + 32)) + a3;
  *(float *)(a1 + 40) = v3;
  if (v3 < 0.0)
    *(_BYTE *)(a1 + 44) = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

void sub_1B21D7A84()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D7A98(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x2_t v34;
  __n128 v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  int32x2_t v39;
  unsigned __int32 v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x2_t v63;

  v4 = *a2;
  v5 = vmulq_n_f32(*a2, a4);
  v5.i32[3] = 0;
  v6 = *a3;
  if (*(_BYTE *)(a1 + 256))
  {
    v7 = *(float32x4_t *)(a1 + 64);
    v8 = *(int32x4_t *)(a1 + 80);
    v9 = *(int8x16_t *)(a1 + 96);
    v10 = (float32x4_t)vtrn1q_s32((int32x4_t)v7, v8);
    v11.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v10.i64[1] = v9.u32[0];
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    v13 = (float32x4_t)veorq_s8(*(int8x16_t *)(a1 + 112), v12);
    *(int32x2_t *)v7.f32 = vzip2_s32(*(int32x2_t *)v7.f32, *(int32x2_t *)v8.i8);
    *(int32x2_t *)&v7.u32[2] = vzip2_s32(*(int32x2_t *)v9.i8, 0);
    v14 = vmulq_f32(v10, v13);
    v15 = (int8x16_t)vmulq_f32(v7, v13);
    v11.i64[1] = vextq_s8(v9, v9, 8uLL).u32[0];
    v16 = (int8x16_t)vmulq_f32(v11, v13);
    v16.i32[3] = 0;
    v17 = *(float32x4_t *)(a1 + 192);
    v18 = *(float32x4_t *)(a1 + 208);
    *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
    *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
    v10.i32[3] = 0;
    v7.i32[3] = 0;
    v11.i32[3] = 0;
    v19 = *(float32x4_t *)(a1 + 224);
    v20 = vmlaq_lane_f32(vmulq_n_f32(v10, v19.f32[0]), v7, *(float32x2_t *)v19.f32, 1);
    v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v18.f32[0]), v7, *(float32x2_t *)v18.f32, 1), v11, v18, 2);
    v22 = (int8x16_t)vmulq_f32(v17, v14);
    v23 = (int8x16_t)vmulq_f32(v18, v14);
    v24 = (int8x16_t)vmulq_f32(v19, v14);
    v24.i32[3] = 0;
    v25 = vaddq_f32(v6, v5);
    v26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v17.f32[0]), v7, *(float32x2_t *)v17.f32, 1), v11, v17, 2);
    *(float32x2_t *)v7.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v23.i8));
    *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
    v27 = vmlaq_laneq_f32(v20, v11, v19, 2);
    v28 = vaddq_f32(v7, *(float32x4_t *)(a1 + 240));
    v29 = vmulq_f32(v25, v26);
    v30 = (int8x16_t)vmulq_f32(v25, v21);
    v31 = (int8x16_t)vmulq_f32(v25, v27);
    v31.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.i8));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    v32 = vsubq_f32(vaddq_f32(v28, v29), v6);
    v32.i32[3] = 0;
    v33 = (int8x16_t)vmulq_f32(v4, v32);
    v34 = vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8);
    v35 = (__n128)vextq_s8(v33, v33, 8uLL);
    v35.n128_u64[0] = (unint64_t)vadd_f32(v34, (float32x2_t)v35.n128_u64[0]);
  }
  else
  {
    v36 = *(float32x4_t *)(a1 + 128);
    v37 = *(int32x4_t *)(a1 + 144);
    v38 = *(float32x4_t *)(a1 + 160);
    v39 = vzip2_s32(*(int32x2_t *)v38.f32, 0);
    v40 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
    v41 = (float32x4_t)vtrn1q_s32((int32x4_t)v36, v37);
    v38.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v41.i64[1] = *(_OWORD *)(a1 + 160);
    v42.i64[0] = 0x8000000080000000;
    v42.i64[1] = 0x8000000080000000;
    v43 = (float32x4_t)veorq_s8(*(int8x16_t *)(a1 + 176), v42);
    v44 = (int8x16_t)vmulq_f32(v41, v43);
    *(int32x2_t *)v36.f32 = vzip2_s32(*(int32x2_t *)v36.f32, *(int32x2_t *)v37.i8);
    *(int32x2_t *)&v36.u32[2] = v39;
    v45 = vmulq_f32(v36, v43);
    v38.i64[1] = v40;
    v46 = (int8x16_t)vmulq_f32(v38, v43);
    v46.i32[3] = 0;
    *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v45.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)));
    *(float32x2_t *)&v45.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0);
    v47 = *(float32x4_t *)(a1 + 192);
    v48 = *(float32x4_t *)(a1 + 208);
    v41.i32[3] = 0;
    v36.i32[3] = 0;
    v38.i32[3] = 0;
    v49 = *(float32x4_t *)(a1 + 224);
    v50 = vmlaq_lane_f32(vmulq_n_f32(v41, v49.f32[0]), v36, *(float32x2_t *)v49.f32, 1);
    v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v48.f32[0]), v36, *(float32x2_t *)v48.f32, 1), v38, v48, 2);
    v52 = (int8x16_t)vmulq_f32(v47, v45);
    v53 = (int8x16_t)vmulq_f32(v48, v45);
    v54 = (int8x16_t)vmulq_f32(v49, v45);
    v54.i32[3] = 0;
    v55 = vaddq_f32(v6, v5);
    v56 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v47.f32[0]), v36, *(float32x2_t *)v47.f32, 1), v38, v47, 2);
    v57 = vmlaq_laneq_f32(v50, v38, v49, 2);
    *(float32x2_t *)v38.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8));
    *(float32x2_t *)&v38.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
    v58 = vmulq_f32(v6, v56);
    v59 = (int8x16_t)vmulq_f32(v6, v51);
    v60 = (int8x16_t)vmulq_f32(v6, v57);
    v60.i32[3] = 0;
    *(float32x2_t *)v58.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v59.i8));
    *(float32x2_t *)&v58.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
    v61 = vsubq_f32(v55, vaddq_f32(vaddq_f32(v38, *(float32x4_t *)(a1 + 240)), v58));
    v61.i32[3] = 0;
    v62 = (int8x16_t)vmulq_f32(v4, v61);
    v63 = vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8);
    v35 = (__n128)vextq_s8(v62, v62, 8uLL);
    v35.n128_u64[0] = (unint64_t)vadd_f32(v63, (float32x2_t)v35.n128_u64[0]);
  }
  return (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v35);
}

uint64_t sub_1B21D7D6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;

  v15 = sub_1B21C7BB8((_QWORD *)a1, a3);
  *v15 = &off_1E63CDB30;
  *((_BYTE *)v15 + 16) = 0;
  v15[3] = a2;
  *((_BYTE *)v15 + 32) = a6;
  *((_DWORD *)v15 + 9) = a7;
  *((_DWORD *)v15 + 10) = a8;
  if (!a2)
  {
    v16 = a6 == 0;
    if (a6)
      v17 = a4;
    else
      v17 = a5;
    if (v16)
      a5 = a4;
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(v17 + 16)))
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(v17 + 16));
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  return a1;
}

uint64_t sub_1B21D7E34(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CDB30;
  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1B21D7E80(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CDB30;
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 24))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  }
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21D7EDC(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  _OWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t *v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88[3];

  if (*(_BYTE *)(a1 + 32))
    v8 = a4;
  else
    v8 = a3;
  if (*(_BYTE *)(a1 + 32))
    v9 = a3;
  else
    v9 = a4;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(float32x4_t **)(v8 + 24);
  v76 = v12[1];
  v78 = *v12;
  v13 = v12[3];
  v74 = v12[2];
  v14 = *(_OWORD **)(v9 + 24);
  v15 = *((float32x4_t *)v14 + 1);
  v16 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v14, (int32x4_t)v15);
  v17 = *((int8x16_t *)v14 + 2);
  v18.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v16.i64[1] = v17.u32[0];
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  v20 = (float32x4_t)veorq_s8(*((int8x16_t *)v14 + 3), v19);
  v21 = (int8x16_t)vmulq_f32(v16, v20);
  *(int32x2_t *)v22.f32 = vzip2_s32(*(int32x2_t *)v14, *(int32x2_t *)v15.f32);
  *(int32x2_t *)&v22.u32[2] = vzip2_s32(*(int32x2_t *)v17.i8, 0);
  v23 = (int8x16_t)vmulq_f32(v22, v20);
  v18.i64[1] = vextq_s8(v17, v17, 8uLL).u32[0];
  v24 = (int8x16_t)vmulq_f32(v18, v20);
  v24.i32[3] = 0;
  v25 = vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  *(float32x2_t *)v24.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
  v26 = v78;
  v26.i32[3] = 0;
  v27 = v76;
  v27.i32[3] = 0;
  v28 = v74;
  v28.i32[3] = 0;
  v71 = (float32x4_t)v17;
  v72 = v28;
  v82 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v26, *(float32x2_t *)v14, 1), v27, *(float32x2_t *)v15.f32, 1), v28, *(float32x2_t *)v17.i8, 1);
  v84 = vmlaq_laneq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)v14, 2), v27, v15, 2);
  v29 = (int8x16_t)vmulq_f32(v13, v16);
  v30 = (int8x16_t)vmulq_f32(v13, v22);
  v31 = (int8x16_t)vmulq_f32(v13, v18);
  v31.i32[3] = 0;
  v32 = vadd_f32(*(float32x2_t *)v24.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8)));
  v80 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v26, COERCE_FLOAT(*v14)), v27, v15.f32[0]), v28, *(float *)v17.i32);
  v33 = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
  sub_1B19064B8((uint64_t)v88, a2);
  v34 = v88[0];
  v35 = v88[1];
  v34.i32[3] = 0;
  v35.i32[3] = 0;
  v36 = v88[2];
  v36.i32[3] = 0;
  v37 = vmulq_n_f32(v34, v78.f32[0]);
  v38 = vmulq_n_f32(v34, v76.f32[0]);
  v39 = vmlaq_lane_f32(vmulq_n_f32(v34, v74.f32[0]), v35, *(float32x2_t *)v74.f32, 1);
  v40 = vmlaq_laneq_f32(vmlaq_lane_f32(v37, v35, *(float32x2_t *)v78.f32, 1), v36, v78, 2);
  v41 = vmlaq_laneq_f32(vmlaq_lane_f32(v38, v35, *(float32x2_t *)v76.f32, 1), v36, v76, 2);
  v42 = *(float32x4_t **)(v9 + 24);
  v43 = *v42;
  v44 = v42[1];
  v43.i32[3] = 0;
  v44.i32[3] = 0;
  v45 = vmlaq_laneq_f32(v39, v36, v74, 2);
  v46 = v42[2];
  v46.i32[3] = 0;
  v47 = vmlaq_laneq_f32(vmulq_laneq_f32(v43, v40, 2), v44, v41, 2);
  v48 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v43, *(float32x2_t *)v40.f32, 1), v44, *(float32x2_t *)v41.f32, 1), v46, *(float32x2_t *)v45.f32, 1);
  v49 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v43, v40.f32[0]), v44, v41.f32[0]), v46, v45.f32[0]);
  v50 = vmlaq_laneq_f32(v47, v46, v45, 2);
  v46.i64[0] = 0x8000000080000000;
  v46.i64[1] = 0x8000000080000000;
  v51 = (float32x4_t)veorq_s8(*(int8x16_t *)(v11 + 64), (int8x16_t)v46);
  v52 = (int8x16_t)vmulq_f32(v49, v51);
  v53 = (int8x16_t)vmulq_f32(v48, v51);
  v54 = (int8x16_t)vmulq_f32(v50, v51);
  v54.i32[3] = 0;
  *(float32x2_t *)v52.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
  v52.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
  v87 = v52;
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)v10 + 128))(v88, v10, &v87);
  v55 = vmulq_f32(v80, v88[0]);
  v56 = (int8x16_t)vmulq_f32(v82, v88[0]);
  v57 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(v84, v72, v71, 2), v88[0]);
  v57.i32[3] = 0;
  *(float32x2_t *)v55.f32 = vadd_f32(v32, vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL))));
  *(float32x2_t *)&v55.u32[2] = vadd_f32(vadd_f32(vpadd_f32(v25, 0), v33), vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0));
  v81 = v55;
  v73 = *(float32x4_t *)(v11 + 64);
  v58 = (int8x16_t)vmulq_f32(v73, v55);
  v85 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0]- *(float *)(v11 + 80);
  v59 = *(float32x4_t **)(v9 + 24);
  v77 = v59[1];
  v79 = *v59;
  v75 = v59[2];
  v83 = v59[3];
  v60 = sub_1B21ED14C(*(_QWORD *)(a1 + 24));
  a6[1] = *(_QWORD *)(a1 + 24);
  if (v85 < v60)
  {
    v61 = vmulq_n_f32(v73, v85);
    v61.i32[3] = 0;
    v62 = vsubq_f32(v81, v61);
    v63 = (int8x16_t)vmulq_f32(v75, v62);
    v62.i32[3] = 0;
    v64 = (int8x16_t)vmulq_f32(v79, v62);
    v65 = vmulq_f32(v77, v62);
    *(float32x2_t *)v65.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.f32));
    v63.i32[3] = 0;
    *(float32x2_t *)&v65.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
    v66 = *(float32x4_t **)(v9 + 24);
    v67 = *(float32x4_t *)(v11 + 64);
    v68 = (int8x16_t)vmulq_f32(*v66, v67);
    v69 = (int8x16_t)vmulq_f32(v67, v66[1]);
    v70 = (int8x16_t)vmulq_f32(v67, v66[2]);
    v70.i32[3] = 0;
    *(float32x2_t *)v68.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
    v68.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
    v86 = vaddq_f32(v83, v65);
    v87 = v68;
    (*(void (**)(_QWORD *, int8x16_t *, float32x4_t *, float))(*a6 + 32))(a6, &v87, &v86, v85);
  }
}

void sub_1B21D82B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  float32x4_t *v13;
  _OWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t *v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float v60;
  float v61;
  float v62;
  float32_t v63;
  unsigned int v64;
  float32x4_t v65;
  float v66;
  float v67;
  float v68;
  float32_t v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  __float2 v74;
  int v75;
  int v76;
  int8x16_t v77;
  float32x2_t v78;
  int8x16_t v79;
  float v80;
  int8x16_t v81;
  int32x2_t v82;
  int32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  int8x16_t v86;
  float v87;
  __float2 v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  int32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x4_t v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_BYTE *)(a1 + 32))
      v9 = a3;
    else
      v9 = a2;
    if (*(_BYTE *)(a1 + 32))
      v10 = a2;
    else
      v10 = a3;
    v11 = *(int **)(v9 + 8);
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(float32x4_t **)(v9 + 24);
    v14 = *(_OWORD **)(v10 + 24);
    v15 = *((float32x4_t *)v14 + 1);
    v16 = *(float32x4_t *)v14;
    v16.i32[3] = 0;
    v17 = v15;
    v17.i32[3] = 0;
    v19 = *v13;
    v18 = v13[1];
    v20 = vmlaq_n_f32(vmulq_n_f32(v16, COERCE_FLOAT(*v13)), v17, v18.f32[0]);
    v21 = vmlaq_laneq_f32(vmulq_laneq_f32(v16, *v13, 2), v17, v18, 2);
    v22 = vmlaq_lane_f32(vmulq_lane_f32(v16, *(float32x2_t *)v13->f32, 1), v17, *(float32x2_t *)v18.f32, 1);
    v23 = *((float32x4_t *)v14 + 2);
    v24 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
    v19.i32[3] = 0;
    v18.i32[3] = 0;
    v25 = v13[2];
    v26 = v13[3];
    v27 = v25;
    v27.i32[3] = 0;
    v116 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v19, COERCE_FLOAT(*v14)), v18, v15.f32[0]), v27, v23.f32[0]);
    v119 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v19, *(float32x2_t *)v14, 1), v18, *(float32x2_t *)v15.f32, 1), v27, *(float32x2_t *)v23.f32, 1);
    v113 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, *(float32x4_t *)v14, 2), v18, v15, 2), v27, v23, 2);
    v23.i32[3] = 0;
    v28 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v14, (int32x4_t)v15);
    v19.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    v28.i64[1] = v14[2];
    v29.i64[0] = 0x8000000080000000;
    v29.i64[1] = 0x8000000080000000;
    v30 = (float32x4_t)veorq_s8(*((int8x16_t *)v14 + 3), v29);
    v31 = (int8x16_t)vmulq_f32(v28, v30);
    *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v14, *(int32x2_t *)v15.f32);
    *(int32x2_t *)&v32.u32[2] = vzip2_s32(*(int32x2_t *)v23.f32, 0);
    v33 = (int8x16_t)vmulq_f32(v32, v30);
    v19.i64[1] = v24;
    v34 = (int8x16_t)vmulq_f32(v19, v30);
    v34.i32[3] = 0;
    v35 = (int8x16_t)vmulq_f32(v28, v26);
    v36 = (int8x16_t)vmulq_f32(v32, v26);
    v37 = (int8x16_t)vmulq_f32(v19, v26);
    v37.i32[3] = 0;
    v38 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))), vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))));
    v39 = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)), 0));
    v40 = (float32x4_t)veorq_s8(*(int8x16_t *)(v12 + 64), v29);
    v41 = (int8x16_t)vmulq_f32(vmlaq_n_f32(v20, v23, v25.f32[0]), v40);
    v42 = (int8x16_t)vmulq_f32(vmlaq_lane_f32(v22, v23, *(float32x2_t *)v25.f32, 1), v40);
    v43 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(v21, v23, v25, 2), v40);
    v43.i32[3] = 0;
    *(float32x2_t *)v41.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
    v41.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
    v124 = (float32x4_t)v41;
    (*(void (**)(float32x4_t *__return_ptr, int *, float32x4_t *))(*(_QWORD *)v11 + 128))(&v125, v11, &v124);
    v44 = vmulq_f32(v116, v125);
    v45 = (int8x16_t)vmulq_f32(v119, v125);
    v46 = (int8x16_t)vmulq_f32(v113, v125);
    v46.i32[3] = 0;
    *(float32x2_t *)v44.f32 = vadd_f32(v38, vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL))));
    *(float32x2_t *)&v44.u32[2] = vadd_f32(v39, vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0));
    v114 = v44;
    v108 = *(float32x4_t *)(v12 + 64);
    v47 = (int8x16_t)vmulq_f32(v108, v44);
    v120 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)).f32[0]- *(float *)(v12 + 80);
    v48 = *(float32x4_t **)(v10 + 24);
    v111 = v48[1];
    v112 = *v48;
    v109 = v48[2];
    v117 = v48[3];
    v49 = sub_1B21ED14C(*(_QWORD *)(a1 + 24));
    a5[1] = *(_QWORD *)(a1 + 24);
    if (v120 < v49)
    {
      v50 = vmulq_n_f32(v108, v120);
      v50.i32[3] = 0;
      v51 = vsubq_f32(v114, v50);
      v52 = (int8x16_t)vmulq_f32(v109, v51);
      v51.i32[3] = 0;
      v53 = (int8x16_t)vmulq_f32(v112, v51);
      v54 = vmulq_f32(v111, v51);
      *(float32x2_t *)v54.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v54.f32));
      v52.i32[3] = 0;
      *(float32x2_t *)&v54.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)), 0);
      v55 = *(float32x4_t **)(v10 + 24);
      v56 = *(float32x4_t *)(v12 + 64);
      v57 = (int8x16_t)vmulq_f32(*v55, v56);
      v58 = (int8x16_t)vmulq_f32(v56, v55[1]);
      v59 = (int8x16_t)vmulq_f32(v56, v55[2]);
      v59.i32[3] = 0;
      *(float32x2_t *)v57.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
      v57.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
      v123 = vaddq_f32(v117, v54);
      v124 = (float32x4_t)v57;
      (*(void (**)(_QWORD *, float32x4_t *, float32x4_t *, float))(*a5 + 32))(a5, &v124, &v123, v120);
    }
    if (v11[2] <= 6 && *(_DWORD *)(a5[1] + 800) < *(_DWORD *)(a1 + 40))
    {
      v60 = *(float *)(v12 + 72);
      if (fabsf(v60) <= 0.70711)
      {
        v66 = *(float *)(v12 + 64);
        v67 = *(float *)(v12 + 68);
        v68 = 1.0 / sqrtf((float)(v67 * v67) + (float)(v66 * v66));
        v69 = v66 * v68;
        v65.i64[1] = 0;
        v65.f32[0] = -(float)(v67 * v68);
        v65.f32[1] = v69;
      }
      else
      {
        v61 = *(float *)(v12 + 68);
        v62 = 1.0 / sqrtf((float)(v60 * v60) + (float)(v61 * v61));
        v63 = -(float)(v60 * v62);
        *(float *)&v64 = v61 * v62;
        v65.i32[0] = 0;
        v65.f32[1] = v63;
        v65.i64[1] = v64;
      }
      v121 = v65;
      v70 = *(float *)&dword_1EEF652F4 / (*(float (**)(int *))(*(_QWORD *)v11 + 32))(v11);
      v71 = v70 * 0.5;
      v72 = v70 <= 0.3927;
      v73 = 0.19635;
      if (v72)
        v73 = v71;
      v74 = __sincosf_stret(v73);
      v75 = *(_DWORD *)(a1 + 36);
      if (v75 >= 1)
      {
        v76 = 0;
        v77 = (int8x16_t)vmulq_f32(v121, v121);
        v78 = vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8);
        v79 = vextq_s8(v77, v77, 8uLL);
        v80 = v74.__sinval / sqrtf(vadd_f32(*(float32x2_t *)v79.i8, v78).f32[0]);
        *(float32x2_t *)v79.i8 = vmul_n_f32(*(float32x2_t *)v121.f32, v80);
        v81.i64[0] = v79.i64[0];
        v81.i64[1] = __PAIR64__(LODWORD(v74.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v80, v121, 2)));
        v82 = (int32x2_t)vextq_s8(v81, v81, 8uLL).u64[0];
        v83 = vzip1_s32(v82, *(int32x2_t *)v79.i8);
        v115 = (float32x4_t)v81;
        v118 = *(float32x2_t *)v79.i8;
        v110 = (float32x2_t)vextq_s8(v81, v79, 0xCuLL).u64[0];
        v84 = (float32x2_t)vext_s8(*(int8x8_t *)v79.i8, (int8x8_t)v82, 4uLL);
        v85 = (float32x2_t)vrev64_s32(v83);
        do
        {
          v122 = *(float32x4_t *)(v12 + 64);
          v86 = (int8x16_t)vmulq_f32(v122, v122);
          v87 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0]);
          v88 = __sincosf_stret((float)((float)(6.2832 / (float)v75) * (float)v76) * 0.5);
          *(float32x2_t *)v89.i8 = vmul_n_f32(*(float32x2_t *)v122.f32, v88.__sinval / v87);
          v90.i64[0] = v89.i64[0];
          v90.i64[1] = __PAIR64__(LODWORD(v88.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v88.__sinval / v87, v122, 2)));
          v91 = (float32x4_t)veorq_s8(v90, (int8x16_t)xmmword_1B2269010);
          v92 = (int32x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
          v93 = (float32x2_t)vzip1_s32(v92, *(int32x2_t *)v91.f32);
          v94 = (float32x2_t)vext_s8(*(int8x8_t *)v91.f32, (int8x8_t)v92, 4uLL);
          v95 = vmul_f32(v110, v93);
          *(float32x2_t *)v96.f32 = vmul_f32(v84, v93);
          *(float32x2_t *)&v96.u32[2] = vmul_f32(v85, v94);
          *(float32x2_t *)v97.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v91.f32, v115, 3), vmul_f32((float32x2_t)v83, v94));
          v97.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v91.f32, v118, 1), v95);
          v98 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v115, v91, 3), v96), (float32x4_t)veorq_s8(v97, (int8x16_t)xmmword_1B2269000));
          *(int32x2_t *)v97.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL), *(int32x2_t *)v98.f32);
          v96.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
          v99 = vzip1_s32(*(int32x2_t *)v96.f32, *(int32x2_t *)v89.i8);
          v100 = (float32x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 4uLL).u64[0];
          *(int8x8_t *)v96.f32 = vext_s8(*(int8x8_t *)v89.i8, *(int8x8_t *)v96.f32, 4uLL);
          v101 = vmul_laneq_f32(*(float32x2_t *)v98.f32, (float32x4_t)v90, 3);
          v102 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v90, v89, 0xCuLL), *(float32x2_t *)v97.i8);
          *(float32x2_t *)v89.i8 = vmul_lane_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v89.i8, 1);
          *(float32x2_t *)v97.i8 = vmul_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v97.i8);
          v97.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v99), v100);
          v103 = vmulq_laneq_f32((float32x4_t)v90, v98, 3);
          *(float32x2_t *)v90.i8 = vadd_f32(v101, vmul_f32((float32x2_t)v99, v100));
          v90.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v89.i8, v102);
          v124 = vaddq_f32(vsubq_f32(v103, (float32x4_t)v97), (float32x4_t)veorq_s8(v90, (int8x16_t)xmmword_1B2269000));
          sub_1B21D7EDC(a1, &v124, a2, a3, v104, a5);
          ++v76;
          v75 = *(_DWORD *)(a1 + 36);
        }
        while (v76 < v75);
      }
    }
    if (*(_BYTE *)(a1 + 16))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 800))
      {
        v105 = a5[1];
        if (*(_DWORD *)(v105 + 800))
        {
          v106 = *(float32x4_t **)(v105 + 784);
          v107 = *(float32x4_t **)(a5[2] + 16);
          if (v106 == v107)
            v107 = *(float32x4_t **)(a5[3] + 16);
          else
            v106 = *(float32x4_t **)(a5[3] + 16);
          sub_1B21ED270((_BYTE *)v105, v106 + 1, v107 + 1);
        }
      }
    }
  }
}

float sub_1B21D88EC()
{
  return 1.0;
}

void sub_1B21D88F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = sub_1B21FF5F0(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          sub_1B21FF5FC(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

uint64_t sub_1B21D89D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;

  *(_QWORD *)a1 = &off_1E63CDB68;
  v4 = sub_1B21FF5F0(400, 16);
  *(_DWORD *)(v4 + 320) = 953267991;
  *(_BYTE *)(v4 + 352) &= 0xF0u;
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_DWORD *)(a2 + 28);
  v6 = (_QWORD *)sub_1B21FF5F0(8, 16);
  v7 = &unk_1E63CDB08;
  if (!v5)
    v7 = &unk_1E63CDCE0;
  *v6 = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = sub_1B21FF5F0(40, 16);
  sub_1B21D6760(v8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 64) = v9;
  v10 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v10 + 8) = 0;
  *(_QWORD *)v10 = &off_1E63CE220;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v11 + 8) = 0;
  *(_QWORD *)v11 = &off_1E63CE248;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v12 + 8) = 0;
  *(_QWORD *)v12 = &off_1E63CE180;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v13 + 8) = 0;
  *(_QWORD *)v13 = &off_1E63CE1A8;
  *(_QWORD *)(a1 + 96) = v13;
  v14 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v14 + 8) = 0;
  *(_QWORD *)v14 = &off_1E63CE108;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v15 + 8) = 0;
  *(_QWORD *)v15 = &off_1E63CE1F8;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v16 + 8) = 0;
  *(_QWORD *)v16 = &off_1E63CE270;
  *(_QWORD *)(a1 + 144) = v16;
  v17 = sub_1B21FF5F0(16, 16);
  *(_QWORD *)v17 = &off_1E63CE270;
  *(_QWORD *)(a1 + 152) = v17;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = sub_1B21FF5F0(16, 16);
  *(_BYTE *)(v18 + 8) = 0;
  *(_QWORD *)v18 = &off_1E63CE158;
  *(_QWORD *)(a1 + 136) = v18;
  v19 = sub_1B21FF5F0(24, 16);
  *(_BYTE *)(v19 + 8) = 0;
  *(_QWORD *)v19 = &off_1E63CE1D0;
  *(_QWORD *)(v19 + 12) = 1;
  *(_QWORD *)(a1 + 168) = v19;
  v20 = sub_1B21FF5F0(24, 16);
  *(_QWORD *)v20 = &off_1E63CE1D0;
  *(_QWORD *)(v20 + 12) = 1;
  *(_QWORD *)(a1 + 160) = v20;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = *(_DWORD *)(a2 + 24);
  if (v21 <= 64)
    v21 = 64;
  if (v21 <= 0x90)
    v22 = 144;
  else
    v22 = v21;
  v23 = *(int **)a2;
  if (*(_QWORD *)a2)
  {
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 1;
    v24 = (int *)sub_1B21FF5F0(32, 16);
    v23 = sub_1B21D92F0(v24, 832, *(_DWORD *)(a2 + 16));
  }
  *(_QWORD *)(a1 + 16) = v23;
  v25 = *(int **)(a2 + 8);
  if (v25)
  {
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 1;
    v26 = (int *)sub_1B21FF5F0(32, 16);
    v25 = sub_1B21D92F0(v26, v22, *(_DWORD *)(a2 + 20));
  }
  *(_QWORD *)(a1 + 32) = v25;
  return a1;
}

uint64_t sub_1B21D8C74(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CDB68;
  if (*(_BYTE *)(a1 + 40))
  {
    sub_1B21FF5FC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    sub_1B21FF5FC(*(_QWORD *)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 24))
  {
    sub_1B21FF5FC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24));
    sub_1B21FF5FC(*(_QWORD *)(a1 + 16));
  }
  (***(void (****)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 64));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 64));
  (***(void (****)(_QWORD))(a1 + 72))(*(_QWORD *)(a1 + 72));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 72));
  (***(void (****)(_QWORD))(a1 + 80))(*(_QWORD *)(a1 + 80));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 80));
  (***(void (****)(_QWORD))(a1 + 88))(*(_QWORD *)(a1 + 88));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 88));
  (***(void (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 96));
  (***(void (****)(_QWORD))(a1 + 104))(*(_QWORD *)(a1 + 104));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 104));
  (***(void (****)(_QWORD))(a1 + 112))(*(_QWORD *)(a1 + 112));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 112));
  (***(void (****)(_QWORD))(a1 + 144))(*(_QWORD *)(a1 + 144));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 144));
  (***(void (****)(_QWORD))(a1 + 152))(*(_QWORD *)(a1 + 152));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 152));
  (***(void (****)(_QWORD))(a1 + 136))(*(_QWORD *)(a1 + 136));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 136));
  (***(void (****)(_QWORD))(a1 + 168))(*(_QWORD *)(a1 + 168));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 168));
  (***(void (****)(_QWORD))(a1 + 160))(*(_QWORD *)(a1 + 160));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 160));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 48));
  (***(void (****)(_QWORD))(a1 + 56))(*(_QWORD *)(a1 + 56));
  sub_1B21FF5FC(*(_QWORD *)(a1 + 56));
  return a1;
}

void sub_1B21D8E1C(uint64_t a1)
{
  sub_1B21D8C74(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D8E40(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  if (a2 == 8 && a3 == 8)
  {
    v3 = a1 + 112;
  }
  else if (a2 == 8 && a3 == 1)
  {
    v3 = a1 + 144;
  }
  else if (a2 == 1 && a3 == 8)
  {
    v3 = a1 + 152;
  }
  else if (a3 | a2)
  {
    if (a2 <= 19 && a3 == 28)
    {
      v3 = a1 + 168;
    }
    else if (a2 == 28 && a3 <= 19)
    {
      v3 = a1 + 160;
    }
    else
    {
      if (a2 > 19)
      {
        if (a3 <= 19 && (a2 - 21) <= 8)
        {
          v3 = a1 + 80;
          return *(_QWORD *)v3;
        }
        if (a2 == 31)
        {
          v3 = a1 + 88;
          return *(_QWORD *)v3;
        }
      }
      else
      {
        if (a3 <= 19)
        {
          v3 = a1 + 64;
          return *(_QWORD *)v3;
        }
        if ((a3 - 21) <= 8)
        {
          v3 = a1 + 72;
          return *(_QWORD *)v3;
        }
      }
      v3 = a1 + 104;
      if (a3 == 31)
        v3 = a1 + 96;
    }
  }
  else
  {
    v3 = a1 + 136;
  }
  return *(_QWORD *)v3;
}

uint64_t sub_1B21D8F38(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B21D8F40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B21D8F48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void sub_1B21D8F54()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D8F68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 144);
  return sub_1B21D5818(v7, a2, a3, a4, 0);
}

void sub_1B21D8FBC()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D8FD0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 144);
  return sub_1B21D5818(v7, a2, a3, a4, 1);
}

void sub_1B21D9024()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D9038(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 72);
  return sub_1B21D4CC0(v7, a2, a3, a4, 0);
}

void sub_1B21D908C()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D90A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 72);
  return sub_1B21D4CC0(v7, a2, a3, a4, 1);
}

void sub_1B21D90F4()
{
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B21D9108(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 16);
  return sub_1B21D9358(v3, a2);
}

void sub_1B21D9140()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D9154(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 32);
  return sub_1B21DC83C(v7, 0, a2, a3, a4);
}

void sub_1B21D91A8()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D91BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 40);
  return sub_1B21DCB94(v8, a2[1], a2, a3, a4, *(unsigned __int8 *)(a1 + 8));
}

void sub_1B21D9218()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D922C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 32);
  return sub_1B21CDF7C(v7, 0, a2, a3, a4);
}

void sub_1B21D9280()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D9294(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 48);
  return sub_1B21D7E30(v8, 0, a2, a3, a4, *(unsigned __int8 *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16));
}

int *sub_1B21D92F0(int *a1, int a2, int a3)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  v4 = (_QWORD *)sub_1B21FF5F0((a3 * a2), 16);
  *((_QWORD *)a1 + 2) = v4;
  *((_QWORD *)a1 + 3) = v4;
  v5 = a1[1];
  a1[2] = v5;
  v6 = v5 - 1;
  if (v6)
  {
    v7 = *a1;
    do
    {
      v8 = (_QWORD *)((char *)v4 + v7);
      *v4 = (char *)v4 + v7;
      v4 = (_QWORD *)((char *)v4 + v7);
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = v4;
  }
  *v8 = 0;
  return a1;
}

_QWORD *sub_1B21D9358(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;

  result = sub_1B21C7BB8(a1, a2);
  *result = &off_1E63CC5C0;
  return result;
}

float sub_1B21D937C()
{
  return 1.0;
}

void sub_1B21D9388()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21D93A0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  float32x2_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float32x2_t v15;
  __int128 v16;
  float v17;
  double (**v18)(_QWORD);
  int v19;
  int v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(result + 80))
  {
    v3 = result;
    *(_QWORD *)(result + 80) = a2;
    v4 = *(float32x2_t **)(result + 64);
    result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v4 + 56))(v4);
    if ((int)result >= 1)
    {
      v5 = 0;
      do
      {
        v31 = 0;
        v29 = 2;
        v30 = 0;
        v28 = 0;
        v26 = 0;
        v27 = 0;
        v25 = 2;
        (*(void (**)(float32x2_t *, uint64_t *, int *, int *, int *, uint64_t *, char *, uint64_t *, int *, int))(*(_QWORD *)v4 + 32))(v4, &v31, &v30, &v29, &v28, &v27, (char *)&v26 + 4, &v26, &v25, v5);
        if ((int)v26 >= 1)
        {
          v6 = 0;
          do
          {
            v7 = 0;
            v8 = v25;
            v9 = v29;
            v10 = v28;
            v11 = v31;
            v12 = v27 + HIDWORD(v26) * v6;
            do
            {
              if (v8 == 3)
              {
                v13 = *(unsigned __int16 *)(v12 + 2 * v7 + 4);
              }
              else if (v8 == 5)
              {
                v13 = *(unsigned __int8 *)(v12 + v7 + 2);
              }
              else
              {
                v13 = *(_DWORD *)(v12 + 4 * v7 + 8);
              }
              v14 = v11 + v10 * (uint64_t)v13;
              v15 = v4[2];
              if (v9)
              {
                *(float32x2_t *)&v16 = vcvt_f32_f64(vmulq_f64(*(float64x2_t *)v14, vcvtq_f64_f32(v15)));
                v17 = *(double *)(v14 + 16) * v4[3].f32[0];
              }
              else
              {
                *(float32x2_t *)&v16 = vmul_f32(*(float32x2_t *)v14, v15);
                v17 = *(float *)(v14 + 8) * v4[3].f32[0];
              }
              *((_QWORD *)&v16 + 1) = LODWORD(v17);
              *((_OWORD *)&v34 + v7--) = v16;
            }
            while (v7 != -3);
            v23 = vmaxq_f32(vmaxq_f32(vmaxq_f32(v32, (float32x4_t)xmmword_1B22C9FB0), v33), v34);
            v24 = vminq_f32(vminq_f32(vminq_f32(v32, (float32x4_t)xmmword_1B22C9FA0), v33), v34);
            v18 = &off_1E63CD1C8;
            v19 = v5;
            v20 = v6;
            v21 = &v32;
            v22 = a2;
            (*(void (**)(uint64_t, double (***)(_QWORD), float32x4_t *, float32x4_t *))(*(_QWORD *)v3 + 128))(v3, &v18, &v24, &v23);
            nullsub_16(&v18);
            ++v6;
          }
          while (v6 < (int)v26);
        }
        ++v5;
        result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v4 + 56))(v4);
      }
      while (v5 < (int)result);
    }
  }
  return result;
}

uint64_t sub_1B21D9614(int8x8_t *a1, int8x8_t *a2, float32x4_t *a3, int8x16_t *a4, float a5)
{
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float v14;
  uint64_t result;
  float v16;
  int8x16_t v17;
  float v18;
  __float2 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24[3];
  float32x4_t v25;

  *(int8x8_t *)v8.f32 = vext_s8(*a1, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1->i8, *(int8x16_t *)a1->i8, 8uLL), 4uLL);
  *(int8x8_t *)v9.f32 = vext_s8(*a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v9.u32[2] = *a2;
  v23 = *(float32x4_t *)a1->i8;
  *(int8x8_t *)&v8.u32[2] = *a1;
  v10 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a1->i8, v9), vmulq_f32(*(float32x4_t *)a2->i8, v8));
  v9.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v9.i64[1] = v10.u32[0];
  v11 = (int8x16_t)vmulq_f32(v9, v9);
  v12 = (int8x16_t)vmulq_f32(*a3, vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])));
  v13 = (int8x16_t)vmulq_f32(*(float32x4_t *)a2->i8, *a3);
  v14 = atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]);
  if (a5 < 0.0 && v14 < a5 || (result = 0, a5 >= 0.0) && v14 > a5)
  {
    v16 = a5 - v14;
    v17 = (int8x16_t)vmulq_f32(v23, v23);
    v18 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8)).f32[0]);
    v19 = __sincosf_stret(v16 * 0.5);
    *(float32x2_t *)v25.f32 = vmul_n_f32(*(float32x2_t *)v23.f32, v19.__sinval / v18);
    v25.i64[1] = __PAIR64__(LODWORD(v19.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v19.__sinval / v18, v23, 2)));
    sub_1B19064B8((uint64_t)v24, &v25);
    v20 = (int8x16_t)vmulq_f32(v24[0], *a3);
    v21 = (int8x16_t)vmulq_f32(*a3, v24[1]);
    v22 = (int8x16_t)vmulq_f32(*a3, v24[2]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    v20.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    *a4 = v20;
    return 1;
  }
  return result;
}

void sub_1B21D9788(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float v36;
  float v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  unint64_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  uint64_t v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float v64;
  int v65;
  float *v66;
  float v67;
  float v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float v80;
  uint64_t v81;
  float *v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x2_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  _DWORD *v95;
  float32x4_t v96;
  int v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int v101;
  float v102;
  float32x4_t v103;
  int8x16_t v104;
  float v105;
  __float2 v106;
  int8x16_t v107;
  int8x16_t v108;
  int32x2_t v109;
  int8x16_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float v122;
  float v123;
  int v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t *v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  uint64_t v133;
  int8x16_t v134;
  float32x4_t v135;
  int32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float v149;
  float v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float v156;
  float32x4_t v157;
  int8x16_t v158;
  float v159;
  __float2 v160;
  int8x16_t v161;
  int8x16_t v162;
  int32x2_t v163;
  int8x16_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x4_t v168;
  int8x16_t v169;
  int32x4_t v170;
  float32x4_t v171;
  int32x4_t v172;
  float32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float v176;
  float v177;
  uint64_t v179;
  int32x4_t v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int v189;
  float32x4_t v190;
  int8x16_t v191;
  float32x4_t *v192;
  float32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  float32x4_t v196;
  uint64_t v197;
  int8x16_t v198;
  float32x4_t v199;
  int32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x2_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float v212;
  float v213;
  float32x4_t v214;
  float v215;
  float32x4_t v216;
  int8x16_t v217;
  float32x4_t v218;
  float v219;
  float32x4_t v220;
  int8x16_t v221;
  float v222;
  __float2 v223;
  int8x16_t v224;
  int8x16_t v225;
  int32x2_t v226;
  int8x16_t v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x4_t v231;
  int8x16_t v232;
  int32x4_t v233;
  float32x4_t v234;
  int32x4_t v235;
  float32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  float v239;
  float v240;
  uint64_t v242;
  int32x4_t v243;
  float32x4_t v244;
  int8x16_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int v252;
  float32x4_t v253;
  int8x16_t v254;
  float32x2_t v255;
  float32x4_t *v256;
  float32x4_t v257;
  int8x16_t v258;
  int8x16_t v259;
  float32x4_t v260;
  uint64_t v261;
  int8x16_t v262;
  float32x4_t v263;
  int32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  float32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  float32x4_t v273;
  float32x4_t *v274;
  float32x4_t v275;
  int8x16_t v276;
  int8x16_t v277;
  float32x4_t v278;
  uint64_t v279;
  int8x16_t v280;
  float32x4_t v281;
  int32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float v293;
  float v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  int8x16_t v313;
  int8x16_t v314[2];

  if (*(_DWORD *)(a2[1] + 8) == 1)
  {
    v9 = *(_QWORD *)(a2[2] + 208);
    if (*(_DWORD *)(v9 + 8) == 22)
      v9 = *(_QWORD *)(v9 + 48);
    v10 = *(_QWORD *)(v9 + 80);
    if (v10)
    {
      v314[0].i32[0] = a5 | (a4 << 21);
      v11 = sub_1B21DB4C0(v10 + 8, v314[0].i32);
      if (v11 != -1)
      {
        v12 = *(_QWORD *)(v10 + 88);
        if (v12)
        {
          v13 = v11;
          v14 = v11;
          v15 = -1.0;
          if ((a6 & 1) == 0)
            v15 = 1.0;
          v307 = v15;
          v16 = (float32x4_t *)a2[1];
          (*(void (**)(float32x4_t *, _QWORD, float32x4_t *))(v16->i64[0] + 216))(v16, 0, &v312);
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *))(v16->i64[0] + 216))(v16, 1, &v311);
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *))(v16->i64[0] + 216))(v16, 2, &v310);
          v17 = v16[5];
          v18 = vsubq_f32(v16[6], v17);
          v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
          v18.i32[3] = 0;
          v20 = vsubq_f32(v16[7], v17);
          v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
          v20.i32[3] = 0;
          *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
          v22.i64[1] = v18.i64[0];
          *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
          v23.i64[1] = v20.i64[0];
          v24 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v18), vmulq_f32(v22, v20));
          v25.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
          v25.i64[1] = v24.u32[0];
          v26 = (int8x16_t)vmulq_f32(v25, v25);
          LODWORD(v27) = vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).u32[0];
          v28 = v311;
          v29 = vsubq_f32(v311, v312);
          v29.i32[3] = 0;
          v30 = (int8x16_t)vmulq_f32(v29, v29);
          v31 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
          v32 = *(float32x4_t *)(a1 + 16);
          v33 = v312;
          if (v31.f32[0] >= 1.4211e-14)
          {
            v34 = vsubq_f32(v32, v312);
            v34.i32[3] = 0;
            v35 = (int8x16_t)vmulq_f32(v29, v34);
            v36 = vdiv_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), v31).f32[0];
            v37 = 0.0;
            if (v36 >= 0.0)
            {
              v37 = v36;
              if (v36 > 1.0)
                v37 = 1.0;
            }
            v38 = vmulq_n_f32(v29, v37);
            v38.i32[3] = 0;
            v33 = vaddq_f32(v312, v38);
          }
          v39 = a2[3];
          v40 = *(float32x4_t *)(v39 + 16);
          v41 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v39, (int32x4_t)v40);
          v42 = *(int8x16_t *)(v39 + 32);
          v43 = vextq_s8(v42, v42, 8uLL).u64[0];
          *(int32x2_t *)v44.f32 = vzip2_s32(*(int32x2_t *)v39, *(int32x2_t *)v40.f32);
          v40.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v41.i64[1] = v42.u32[0];
          *(int32x2_t *)&v44.u32[2] = vzip2_s32(*(int32x2_t *)v42.i8, 0);
          v45 = sqrtf(v27);
          v40.i64[1] = v43;
          v46 = *(float32x4_t *)(a1 + 64);
          v47 = (int8x16_t)vmulq_f32(v41, v46);
          v48 = vmulq_f32(v44, v46);
          v49 = (int8x16_t)vmulq_f32(v40, v46);
          v49.i32[3] = 0;
          *(float32x2_t *)v48.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v48.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL)));
          *(float32x2_t *)v40.f32 = vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
          *(float32x2_t *)&v48.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
          v50 = vmulq_n_f32(v48, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), vmul_f32(*(float32x2_t *)&v48.u32[2], *(float32x2_t *)&v48.u32[2])).f32[0]));
          v309 = v50;
          v51 = v12 + 16 * v14;
          v52 = (float *)(v51 + 4);
          v53 = *(float *)(v51 + 4);
          v54 = fabsf(v53);
          v55 = *(float *)(v10 + 152);
          if (v54 >= v55)
          {
            v65 = -1;
            v64 = 1.0e18;
          }
          else
          {
            v56 = v312;
            if (v31.f32[0] >= 1.4211e-14)
            {
              v57 = vsubq_f32(v32, v312);
              v57.i32[3] = 0;
              v58 = (int8x16_t)vmulq_f32(v29, v57);
              v59 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8)), v31).f32[0];
              v60 = 0.0;
              if (v59 >= 0.0)
              {
                v60 = v59;
                if (v59 > 1.0)
                  v60 = 1.0;
              }
              v61 = vmulq_n_f32(v29, v60);
              v61.i32[3] = 0;
              v56 = vaddq_f32(v312, v61);
            }
            v62 = vsubq_f32(v32, v56);
            v62.i32[3] = 0;
            v63 = (int8x16_t)vmulq_f32(v62, v62);
            v64 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).f32[0]);
            if (v64 < 1.0e18)
            {
              v65 = 0;
            }
            else
            {
              v64 = 1.0e18;
              v65 = -1;
            }
          }
          v67 = *(float *)(v51 + 8);
          v66 = (float *)(v51 + 8);
          v68 = 1.0 / v45;
          if (fabsf(v67) < v55)
          {
            v69 = vsubq_f32(v310, v311);
            v69.i32[3] = 0;
            v70 = (int8x16_t)vmulq_f32(v69, v69);
            v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
            v72 = v311;
            if (v71.f32[0] >= 1.4211e-14)
            {
              v73 = vsubq_f32(v32, v311);
              v73.i32[3] = 0;
              v74 = (int8x16_t)vmulq_f32(v73, v69);
              v75 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8)), v71).f32[0];
              v76 = 0.0;
              if (v75 >= 0.0)
              {
                v76 = v75;
                if (v75 > 1.0)
                  v76 = 1.0;
              }
              v77 = vmulq_n_f32(v69, v76);
              v77.i32[3] = 0;
              v72 = vaddq_f32(v311, v77);
            }
            v78 = vsubq_f32(v32, v72);
            v78.i32[3] = 0;
            v79 = (int8x16_t)vmulq_f32(v78, v78);
            v80 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).f32[0]);
            if (v80 < v64)
            {
              v64 = v80;
              v65 = 1;
            }
          }
          v81 = v12 + 16 * v14;
          v83 = *(float *)(v81 + 12);
          v82 = (float *)(v81 + 12);
          if (fabsf(v83) < v55)
          {
            v84 = v310;
            v85 = vsubq_f32(v312, v310);
            v85.i32[3] = 0;
            v86 = (int8x16_t)vmulq_f32(v85, v85);
            v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL));
            if (v87.f32[0] >= 1.4211e-14)
            {
              v88 = vsubq_f32(v32, v310);
              v88.i32[3] = 0;
              v89 = (int8x16_t)vmulq_f32(v85, v88);
              v90 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8)), v87).f32[0];
              v91 = 0.0;
              if (v90 >= 0.0)
              {
                v91 = v90;
                if (v90 > 1.0)
                  v91 = 1.0;
              }
              v92 = vmulq_n_f32(v85, v91);
              v92.i32[3] = 0;
              v84 = vaddq_f32(v310, v92);
            }
            v93 = vsubq_f32(v32, v84);
            v93.i32[3] = 0;
            v94 = (int8x16_t)vmulq_f32(v93, v93);
            if (sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v94.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)).f32[0]) < v64)v65 = 2;
          }
          v95 = (_DWORD *)(v12 + 16 * v13);
          v96 = vmulq_n_f32(v25, v68);
          v97 = 0;
          if (v54 >= v55)
          {
            v101 = 0;
          }
          else if (v65
                 || (v98 = vsubq_f32(v32, v33),
                     v98.i32[3] = 0,
                     v99 = (int8x16_t)vmulq_f32(v98, v98),
                     sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), vpadd_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8)).f32[0]) >= *(float *)(v10 + 148)))
          {
            v101 = 0;
          }
          else
          {
            v100 = vsubq_f32(v312, v311);
            v100.i32[3] = 0;
            v308 = v100;
            if (v53 == 0.0)
            {
              v97 = 1;
            }
            else
            {
              v102 = 1.0;
              if ((*v95 & 1) == 0)
                v102 = -1.0;
              v293 = v102;
              v296 = v32;
              v103 = vmulq_n_f32(v96, v102);
              v103.i32[3] = 0;
              v288 = v100;
              v290 = v103;
              v104 = (int8x16_t)vmulq_f32(v100, v100);
              v105 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8)).f32[0]);
              v299 = v50;
              v304 = v96;
              v106 = __sincosf_stret(v53 * 0.5);
              *(float32x2_t *)v107.i8 = vmul_n_f32(*(float32x2_t *)v288.f32, v106.__sinval / v105);
              v108.i64[0] = v107.i64[0];
              v108.i64[1] = __PAIR64__(LODWORD(v106.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v106.__sinval / v105, v288, 2)));
              v109 = (int32x2_t)vextq_s8(v108, v108, 8uLL).u64[0];
              v110 = (int8x16_t)v304;
              v111 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), *(int32x2_t *)v304.f32);
              v112 = (float32x2_t)vzip1_s32(v109, *(int32x2_t *)v107.i8);
              v113 = (float32x2_t)vext_s8(*(int8x8_t *)v107.i8, (int8x8_t)v109, 4uLL);
              *(float32x2_t *)v114.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 4uLL), v112);
              *(float32x2_t *)&v114.u32[2] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v111), v113);
              *(float32x2_t *)v115.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v304.f32, (float32x4_t)v108, 3), vmul_f32(v111, v113));
              v115.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v304.f32, 1), vmul_f32(v111, (float32x2_t)*(_OWORD *)&vextq_s8(v108, v107, 0xCuLL)));
              v313 = veorq_s8(v108, (int8x16_t)xmmword_1B2269010);
              v314[0] = (int8x16_t)vsubq_f32((float32x4_t)veorq_s8(v115, (int8x16_t)xmmword_1B2269000), v114);
              v116 = (int32x4_t)sub_1B21DB768(v314, &v313);
              v50 = v299;
              v116.i32[0] = 0;
              v117 = (float32x4_t)v314[0];
              v117.i32[3] = 0;
              v118.i32[0] = *v95 & 8;
              v119 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v118, v116), 0), v314[0], (int8x16_t)vnegq_f32(v117)), v293);
              v119.i32[3] = 0;
              v120 = (int8x16_t)vmulq_f32(v299, v290);
              v121 = (int8x16_t)vmulq_f32(v299, v119);
              LODWORD(v122) = vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)).u32[0];
              v123 = *(float *)(v10 + 136);
              if (vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)).f32[0] < v123&& v122 < v123)
              {
                v97 = 1;
                v96 = v304;
              }
              else
              {
                v313 = (int8x16_t)v290;
                v125 = sub_1B21D9614((int8x8_t *)&v308, (int8x8_t *)&v313, &v309, v314, *v52);
                v96 = v304;
                if (v125)
                {
                  if ((a6 & 4) != 0
                    || (v126 = vmulq_n_f32(v304, v307),
                        v126.i32[3] = 0,
                        v127 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v126),
                        vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)).f32[0] > 0.0))
                  {
                    v128 = (float32x4_t *)a2[3];
                    v129 = vmulq_f32(*v128, (float32x4_t)v314[0]);
                    v130 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v128[1]);
                    v131 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v128[2]);
                    v131.i32[3] = 0;
                    *(float32x2_t *)v129.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v130.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)));
                    *(float32x2_t *)&v129.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)), 0);
                    v132 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v129, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                    v132.i32[3] = 0;
                    *(float32x4_t *)(a1 + 64) = v129;
                    *(float32x4_t *)(a1 + 32) = v132;
                    v133 = a2[3];
                    v134 = *(int8x16_t *)(v133 + 32);
                    v135 = vsubq_f32(v132, *(float32x4_t *)(v133 + 48));
                    v136 = *(int32x4_t *)(v133 + 16);
                    v137 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v133, v136);
                    v138.i64[0] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
                    v138.i64[1] = vextq_s8(v134, v134, 8uLL).u64[0];
                    v139 = (int8x16_t)vmulq_f32(v138, v135);
                    v135.i32[3] = 0;
                    v137.i64[1] = v134.u32[0];
                    *(int32x2_t *)v132.f32 = vzip2_s32(*(int32x2_t *)v133, *(int32x2_t *)v136.i8);
                    *(int32x2_t *)&v132.u32[2] = vzip2_s32(*(int32x2_t *)v134.i8, 0);
                    v140 = (int8x16_t)vmulq_f32(v137, v135);
                    v141 = (int8x16_t)vmulq_f32(v132, v135);
                    v139.i32[3] = 0;
                    *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL)), vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v141.i8));
                    v141.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)), 0);
                    *(int8x16_t *)(a1 + 16) = v141;
                  }
                }
                v97 = 0;
                v50 = v299;
              }
              v32 = v296;
            }
            v101 = 1;
            v28 = v311;
          }
          v142 = v310;
          v143 = vsubq_f32(v310, v28);
          v143.i32[3] = 0;
          v144 = (int8x16_t)vmulq_f32(v143, v143);
          v145 = vadd_f32(vpadd_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL));
          v146 = v28;
          if (v145.f32[0] >= 1.4211e-14)
          {
            v147 = vsubq_f32(v32, v28);
            v147.i32[3] = 0;
            v148 = (int8x16_t)vmulq_f32(v143, v147);
            v149 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8)), v145).f32[0];
            v150 = 0.0;
            if (v149 >= 0.0)
            {
              v150 = v149;
              if (v149 > 1.0)
                v150 = 1.0;
            }
            v151 = vmulq_n_f32(v143, v150);
            v151.i32[3] = 0;
            v146 = vaddq_f32(v28, v151);
          }
          v152 = *v66;
          if (fabsf(*v66) < *(float *)(v10 + 152) && v65 == 1)
          {
            v153 = vsubq_f32(v32, v146);
            v153.i32[3] = 0;
            v154 = (int8x16_t)vmulq_f32(v153, v153);
            if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL), vpadd_f32(*(float32x2_t *)v154.i8, *(float32x2_t *)v154.i8)).f32[0]) < *(float *)(v10 + 148))
            {
              v155 = vsubq_f32(v28, v310);
              v155.i32[3] = 0;
              v308 = v155;
              if (v152 == 0.0)
              {
                ++v97;
              }
              else
              {
                v156 = 1.0;
                if ((*v95 & 2) == 0)
                  v156 = -1.0;
                v294 = v156;
                v297 = v32;
                v157 = vmulq_n_f32(v96, v156);
                v157.i32[3] = 0;
                v289 = v155;
                v291 = v157;
                v158 = (int8x16_t)vmulq_f32(v155, v155);
                v159 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL), vpadd_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v158.i8)).f32[0]);
                v300 = v50;
                v305 = v96;
                v160 = __sincosf_stret(v152 * 0.5);
                *(float32x2_t *)v161.i8 = vmul_n_f32(*(float32x2_t *)v289.f32, v160.__sinval / v159);
                v162.i64[0] = v161.i64[0];
                v162.i64[1] = __PAIR64__(LODWORD(v160.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v160.__sinval / v159, v289, 2)));
                v163 = (int32x2_t)vextq_s8(v162, v162, 8uLL).u64[0];
                v164 = (int8x16_t)v305;
                v165 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL), *(int32x2_t *)v305.f32);
                v166 = (float32x2_t)vzip1_s32(v163, *(int32x2_t *)v161.i8);
                v167 = (float32x2_t)vext_s8(*(int8x8_t *)v161.i8, (int8x8_t)v163, 4uLL);
                *(float32x2_t *)v168.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 4uLL), v166);
                *(float32x2_t *)&v168.u32[2] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v165), v167);
                *(float32x2_t *)v169.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v305.f32, (float32x4_t)v162, 3), vmul_f32(v165, v167));
                v169.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v305.f32, 1), vmul_f32(v165, (float32x2_t)*(_OWORD *)&vextq_s8(v162, v161, 0xCuLL)));
                v313 = veorq_s8(v162, (int8x16_t)xmmword_1B2269010);
                v314[0] = (int8x16_t)vsubq_f32((float32x4_t)veorq_s8(v169, (int8x16_t)xmmword_1B2269000), v168);
                v170 = (int32x4_t)sub_1B21DB768(v314, &v313);
                v50 = v300;
                v170.i32[0] = 0;
                v171 = (float32x4_t)v314[0];
                v171.i32[3] = 0;
                v172.i32[0] = *v95 & 0x10;
                v173 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v172, v170), 0), v314[0], (int8x16_t)vnegq_f32(v171)), v294);
                v173.i32[3] = 0;
                v174 = (int8x16_t)vmulq_f32(v300, v291);
                v175 = (int8x16_t)vmulq_f32(v300, v173);
                LODWORD(v176) = vadd_f32(vpadd_f32(*(float32x2_t *)v175.i8, *(float32x2_t *)v175.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL)).u32[0];
                v177 = *(float *)(v10 + 136);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v174.i8, *(float32x2_t *)v174.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL)).f32[0] < v177&& v176 < v177)
                {
                  ++v97;
                  v96 = v305;
                }
                else
                {
                  v179 = a2[3];
                  v180 = *(int32x4_t *)(v179 + 16);
                  v181 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v179, v180);
                  v182 = *(int8x16_t *)(v179 + 32);
                  v183.i64[0] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
                  v181.i64[1] = v182.u32[0];
                  *(int32x2_t *)v184.f32 = vzip2_s32(*(int32x2_t *)v179, *(int32x2_t *)v180.i8);
                  *(int32x2_t *)&v184.u32[2] = vzip2_s32(*(int32x2_t *)v182.i8, 0);
                  v183.i64[1] = vextq_s8(v182, v182, 8uLL).u64[0];
                  v185 = *(float32x4_t *)(a1 + 64);
                  v186 = (int8x16_t)vmulq_f32(v181, v185);
                  v187 = (int8x16_t)vmulq_f32(v184, v185);
                  v188 = (int8x16_t)vmulq_f32(v183, v185);
                  v188.i32[3] = 0;
                  *(float32x2_t *)v186.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v186.i8, *(float32x2_t *)v187.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)));
                  v186.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v188.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL)), 0);
                  v301 = (float32x4_t)v186;
                  v309 = (float32x4_t)v186;
                  v313 = (int8x16_t)v291;
                  v189 = sub_1B21D9614((int8x8_t *)&v308, (int8x8_t *)&v313, &v309, v314, *v66);
                  v96 = v305;
                  if (v189)
                  {
                    if ((a6 & 4) != 0
                      || (v190 = vmulq_n_f32(v305, v307),
                          v190.i32[3] = 0,
                          v191 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v190),
                          vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL)).f32[0] > 0.0))
                    {
                      v192 = (float32x4_t *)a2[3];
                      v193 = vmulq_f32(*v192, (float32x4_t)v314[0]);
                      v194 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v192[1]);
                      v195 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v192[2]);
                      v195.i32[3] = 0;
                      *(float32x2_t *)v193.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v194.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v194, v194, 8uLL)));
                      *(float32x2_t *)&v193.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v195.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL)), 0);
                      v196 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v193, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                      v196.i32[3] = 0;
                      *(float32x4_t *)(a1 + 64) = v193;
                      *(float32x4_t *)(a1 + 32) = v196;
                      v197 = a2[3];
                      v198 = *(int8x16_t *)(v197 + 32);
                      v199 = vsubq_f32(v196, *(float32x4_t *)(v197 + 48));
                      v200 = *(int32x4_t *)(v197 + 16);
                      v201 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v197, v200);
                      v202.i64[0] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
                      v202.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
                      v203 = (int8x16_t)vmulq_f32(v202, v199);
                      v199.i32[3] = 0;
                      v201.i64[1] = v198.u32[0];
                      *(int32x2_t *)v196.f32 = vzip2_s32(*(int32x2_t *)v197, *(int32x2_t *)v200.i8);
                      *(int32x2_t *)&v196.u32[2] = vzip2_s32(*(int32x2_t *)v198.i8, 0);
                      v204 = (int8x16_t)vmulq_f32(v201, v199);
                      v205 = (int8x16_t)vmulq_f32(v196, v199);
                      v203.i32[3] = 0;
                      *(float32x2_t *)v205.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v205, v205, 8uLL)), vpadd_f32(*(float32x2_t *)v204.i8, *(float32x2_t *)v205.i8));
                      v205.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL)), 0);
                      *(int8x16_t *)(a1 + 16) = v205;
                    }
                  }
                  v50 = v301;
                }
                v32 = v297;
              }
              v101 = 1;
              v142 = v310;
            }
          }
          v206 = vsubq_f32(v312, v142);
          v206.i32[3] = 0;
          v207 = (int8x16_t)vmulq_f32(v206, v206);
          v208 = vadd_f32(vpadd_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v207.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL));
          v209 = v142;
          if (v208.f32[0] >= 1.4211e-14)
          {
            v210 = vsubq_f32(v32, v142);
            v210.i32[3] = 0;
            v211 = (int8x16_t)vmulq_f32(v206, v210);
            v212 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), vpadd_f32(*(float32x2_t *)v211.i8, *(float32x2_t *)v211.i8)), v208).f32[0];
            v213 = 0.0;
            if (v212 >= 0.0)
            {
              v213 = v212;
              if (v212 > 1.0)
                v213 = 1.0;
            }
            v214 = vmulq_n_f32(v206, v213);
            v214.i32[3] = 0;
            v209 = vaddq_f32(v142, v214);
          }
          v215 = *v82;
          if (fabsf(*v82) < *(float *)(v10 + 152) && v65 == 2)
          {
            v216 = vsubq_f32(v32, v209);
            v216.i32[3] = 0;
            v217 = (int8x16_t)vmulq_f32(v216, v216);
            if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL), vpadd_f32(*(float32x2_t *)v217.i8, *(float32x2_t *)v217.i8)).f32[0]) < *(float *)(v10 + 148))
            {
              v218 = vsubq_f32(v142, v312);
              v218.i32[3] = 0;
              v308 = v218;
              if (v215 == 0.0)
              {
                ++v97;
              }
              else
              {
                v219 = 1.0;
                if ((*v95 & 4) == 0)
                  v219 = -1.0;
                v298 = v219;
                v302 = v50;
                v220 = vmulq_n_f32(v96, v219);
                v220.i32[3] = 0;
                v292 = v218;
                v295 = v220;
                v221 = (int8x16_t)vmulq_f32(v218, v218);
                v222 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL), vpadd_f32(*(float32x2_t *)v221.i8, *(float32x2_t *)v221.i8)).f32[0]);
                v306 = v96;
                v223 = __sincosf_stret(v215 * 0.5);
                *(float32x2_t *)v224.i8 = vmul_n_f32(*(float32x2_t *)v292.f32, v223.__sinval / v222);
                v225.i64[0] = v224.i64[0];
                v225.i64[1] = __PAIR64__(LODWORD(v223.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v223.__sinval / v222, v292, 2)));
                v226 = (int32x2_t)vextq_s8(v225, v225, 8uLL).u64[0];
                v227 = (int8x16_t)v306;
                v228 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), *(int32x2_t *)v306.f32);
                v229 = (float32x2_t)vzip1_s32(v226, *(int32x2_t *)v224.i8);
                v230 = (float32x2_t)vext_s8(*(int8x8_t *)v224.i8, (int8x8_t)v226, 4uLL);
                *(float32x2_t *)v231.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 4uLL), v229);
                *(float32x2_t *)&v231.u32[2] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v228), v230);
                *(float32x2_t *)v232.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v306.f32, (float32x4_t)v225, 3), vmul_f32(v228, v230));
                v232.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v306.f32, 1), vmul_f32(v228, (float32x2_t)*(_OWORD *)&vextq_s8(v225, v224, 0xCuLL)));
                v313 = veorq_s8(v225, (int8x16_t)xmmword_1B2269010);
                v314[0] = (int8x16_t)vsubq_f32((float32x4_t)veorq_s8(v232, (int8x16_t)xmmword_1B2269000), v231);
                v233 = (int32x4_t)sub_1B21DB768(v314, &v313);
                v50 = v302;
                v233.i32[0] = 0;
                v234 = (float32x4_t)v314[0];
                v234.i32[3] = 0;
                v235.i32[0] = *v95 & 0x20;
                v236 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v235, v233), 0), v314[0], (int8x16_t)vnegq_f32(v234)), v298);
                v236.i32[3] = 0;
                v237 = (int8x16_t)vmulq_f32(v302, v295);
                *(float32x2_t *)v234.f32 = vpadd_f32(*(float32x2_t *)v237.i8, *(float32x2_t *)v237.i8);
                v142 = (float32x4_t)vextq_s8(v237, v237, 8uLL);
                v142.f32[0] = vadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v142.f32).f32[0];
                v238 = (int8x16_t)vmulq_f32(v302, v236);
                LODWORD(v239) = vadd_f32(vpadd_f32(*(float32x2_t *)v238.i8, *(float32x2_t *)v238.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL)).u32[0];
                v240 = *(float *)(v10 + 136);
                if (v142.f32[0] < v240 && v239 < v240)
                {
                  ++v97;
                  v96 = v306;
                }
                else
                {
                  v242 = a2[3];
                  v243 = *(int32x4_t *)(v242 + 16);
                  v244 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v242, v243);
                  v245 = *(int8x16_t *)(v242 + 32);
                  v246.i64[0] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
                  v244.i64[1] = v245.u32[0];
                  *(int32x2_t *)v247.f32 = vzip2_s32(*(int32x2_t *)v242, *(int32x2_t *)v243.i8);
                  *(int32x2_t *)&v247.u32[2] = vzip2_s32(*(int32x2_t *)v245.i8, 0);
                  v246.i64[1] = vextq_s8(v245, v245, 8uLL).u64[0];
                  v248 = *(float32x4_t *)(a1 + 64);
                  v249 = (int8x16_t)vmulq_f32(v244, v248);
                  v250 = (int8x16_t)vmulq_f32(v247, v248);
                  v251 = (int8x16_t)vmulq_f32(v246, v248);
                  v251.i32[3] = 0;
                  *(float32x2_t *)v249.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v249.i8, *(float32x2_t *)v250.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v249, v249, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL)));
                  v249.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v251.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v251, v251, 8uLL)), 0);
                  v303 = (float32x4_t)v249;
                  v309 = (float32x4_t)v249;
                  v313 = (int8x16_t)v295;
                  v252 = sub_1B21D9614((int8x8_t *)&v308, (int8x8_t *)&v313, &v309, v314, *v82);
                  v96 = v306;
                  if (v252)
                  {
                    if ((a6 & 4) != 0
                      || (v253 = vmulq_n_f32(v306, v307),
                          v253.i32[3] = 0,
                          v254 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v253),
                          v255 = vpadd_f32(*(float32x2_t *)v254.i8, *(float32x2_t *)v254.i8),
                          v142 = (float32x4_t)vextq_s8(v254, v254, 8uLL),
                          vadd_f32(v255, *(float32x2_t *)v142.f32).f32[0] > 0.0))
                    {
                      v256 = (float32x4_t *)a2[3];
                      v257 = vmulq_f32(*v256, (float32x4_t)v314[0]);
                      v258 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v256[1]);
                      v259 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v256[2]);
                      v259.i32[3] = 0;
                      *(float32x2_t *)v257.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v258.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v258, v258, 8uLL)));
                      *(float32x2_t *)&v257.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v259.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v259, v259, 8uLL)), 0);
                      v260 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v257, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                      v260.i32[3] = 0;
                      *(float32x4_t *)(a1 + 64) = v257;
                      *(float32x4_t *)(a1 + 32) = v260;
                      v261 = a2[3];
                      v262 = *(int8x16_t *)(v261 + 32);
                      v263 = vsubq_f32(v260, *(float32x4_t *)(v261 + 48));
                      v264 = *(int32x4_t *)(v261 + 16);
                      v265 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v261, v264);
                      v266.i64[0] = vextq_s8((int8x16_t)v265, (int8x16_t)v265, 8uLL).u64[0];
                      v266.i64[1] = vextq_s8(v262, v262, 8uLL).u64[0];
                      v267 = (int8x16_t)vmulq_f32(v266, v263);
                      v263.i32[3] = 0;
                      v265.i64[1] = v262.u32[0];
                      *(int32x2_t *)v260.f32 = vzip2_s32(*(int32x2_t *)v261, *(int32x2_t *)v264.i8);
                      *(int32x2_t *)&v260.u32[2] = vzip2_s32(*(int32x2_t *)v262.i8, 0);
                      v268 = (int8x16_t)vmulq_f32(v265, v263);
                      v269 = (int8x16_t)vmulq_f32(v260, v263);
                      v267.i32[3] = 0;
                      *(float32x2_t *)v142.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL)), vpadd_f32(*(float32x2_t *)v268.i8, *(float32x2_t *)v269.i8));
                      *(float32x2_t *)&v142.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v267.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v267, v267, 8uLL)), 0);
                      *(float32x4_t *)(a1 + 16) = v142;
                    }
                  }
                  v50 = v303;
                }
              }
              v101 = 1;
            }
          }
          if (v101 && v97)
          {
            if ((a6 & 2) != 0)
            {
              v272 = (int8x16_t)vmulq_f32(v96, v50);
              *(float32x2_t *)v142.f32 = vpadd_f32(*(float32x2_t *)v272.i8, *(float32x2_t *)v272.i8);
              v273 = (float32x4_t)vextq_s8(v272, v272, 8uLL);
              *(float32x2_t *)v273.f32 = vadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v273.f32);
              v142.i32[0] = 0;
              v270 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v142, v273), 0), (int8x16_t)vnegq_f32(v96), (int8x16_t)v96);
            }
            else
            {
              v270 = vmulq_n_f32(v96, v307);
              v270.i32[3] = 0;
              v271 = (int8x16_t)vmulq_f32(v50, v270);
              if (vadd_f32(vpadd_f32(*(float32x2_t *)v271.i8, *(float32x2_t *)v271.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v271, v271, 8uLL)).f32[0] < 0.0)return;
            }
            v274 = (float32x4_t *)a2[3];
            v275 = vmulq_f32(*v274, v270);
            v276 = (int8x16_t)vmulq_f32(v274[1], v270);
            v277 = (int8x16_t)vmulq_f32(v274[2], v270);
            v277.i32[3] = 0;
            *(float32x2_t *)v275.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v276.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v276, v276, 8uLL)));
            *(float32x2_t *)&v275.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v277.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v277, v277, 8uLL)), 0);
            v278 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v275, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
            v278.i32[3] = 0;
            *(float32x4_t *)(a1 + 64) = v275;
            *(float32x4_t *)(a1 + 32) = v278;
            v279 = a2[3];
            v280 = *(int8x16_t *)(v279 + 32);
            v281 = vsubq_f32(v278, *(float32x4_t *)(v279 + 48));
            v282 = *(int32x4_t *)(v279 + 16);
            v283 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v279, v282);
            v284.i64[0] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u64[0];
            v284.i64[1] = vextq_s8(v280, v280, 8uLL).u64[0];
            v285 = (int8x16_t)vmulq_f32(v284, v281);
            v281.i32[3] = 0;
            v283.i64[1] = v280.u32[0];
            *(int32x2_t *)v278.f32 = vzip2_s32(*(int32x2_t *)v279, *(int32x2_t *)v282.i8);
            *(int32x2_t *)&v278.u32[2] = vzip2_s32(*(int32x2_t *)v280.i8, 0);
            v286 = (int8x16_t)vmulq_f32(v283, v281);
            v287 = (int8x16_t)vmulq_f32(v278, v281);
            v285.i32[3] = 0;
            *(float32x2_t *)v287.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v286, v286, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v287, v287, 8uLL)), vpadd_f32(*(float32x2_t *)v286.i8, *(float32x2_t *)v287.i8));
            v287.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v285.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v285, v285, 8uLL)), 0);
            *(int8x16_t *)(a1 + 16) = v287;
          }
        }
      }
    }
  }
}

void sub_1B21DA7DC(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21DA800(uint64_t a1, float32x4_t *a2, int a3, int a4)
{
  int v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  int8x8_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  float32x4_t *v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  __int32 v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x8_t v48;
  float32x4_t v49;
  int8x8_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float v89;
  int8x16_t v90;
  float v91;
  int8x16_t v92;
  float v93;
  __float2 v94;
  float32x4_t v95;
  float v96;
  int8x16_t v97;
  float v98;
  __float2 v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x2_t v102;
  int32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x4_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  int v117;
  float32x4_t v118;
  float v119;
  int8x16_t v120;
  float v121;
  __float2 v122;
  int8x16_t v123;
  int8x16_t v124;
  int32x2_t v125;
  int32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x4_t v129;
  int8x16_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  float v141;
  int8x16_t v142;
  float v143;
  __float2 v144;
  int8x16_t v145;
  int8x16_t v146;
  int32x2_t v147;
  int32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x4_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int32x2_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int32x2_t v167;
  float32x2_t v168;
  float32x4_t v169;
  uint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  _BOOL4 v173;
  float32x4_t v174;
  _BYTE v175[48];
  float32x4_t v176;
  double (**v177)(_QWORD *);
  int v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  _OWORD v182[5];
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int32x2_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 != a3 || *(_DWORD *)(a1 + 12) != a4)
  {
    v188 = -1;
    v189 = -1;
    v187 = -1;
    v186 = (int32x2_t)-1;
    v7 = vsubq_f32(a2[1], *a2);
    v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v7.i32[3] = 0;
    v9 = vsubq_f32(a2[2], *a2);
    v10 = (int8x8_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v9.i32[3] = 0;
    *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
    v11.i64[1] = v7.i64[0];
    *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v9.f32, v10, 4uLL);
    v12.i64[1] = v9.i64[0];
    v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, v7), vmulq_f32(v11, v9));
    v9.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
    v9.i64[1] = v13.u32[0];
    v14 = (int8x16_t)vmulq_f32(v9, v9);
    v9.f32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
    v15 = *(_QWORD *)(a1 + 24);
    v16 = *(float *)(v15 + 144);
    if (v9.f32[0] >= v16)
    {
      v17 = *(float32x4_t **)(a1 + 16);
      v18 = vsubq_f32(v17[1], *v17);
      v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
      v18.i32[3] = 0;
      v20 = vsubq_f32(v17[2], *v17);
      v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i32[3] = 0;
      *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
      v22.i64[1] = v18.i64[0];
      *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
      v23.i64[1] = v20.i64[0];
      v24 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v18), vmulq_f32(v22, v20));
      v20.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
      v20.i64[1] = v24.u32[0];
      v25 = (int8x16_t)vmulq_f32(v20, v20);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0] >= v16)
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = 0;
          v29 = v26;
          v30 = v17[v26];
          do
          {
            v31 = vsubq_f32(v30, a2[v28]);
            v31.i32[3] = 0;
            v32 = (int8x16_t)vmulq_f32(v31, v31);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0] < v16)
            {
              *((_DWORD *)&v188 + v27) = v26;
              v186.i32[v27] = v28;
              if (v27 > 1)
                return;
              ++v27;
            }
            ++v28;
          }
          while (v28 != 3);
          if (v27 > 2)
            return;
          ++v26;
        }
        while (v29 != 2);
        if (v27 != 2)
          return;
        v34 = v188;
        v33 = HIDWORD(v188);
        if (v188 == 0x200000000)
        {
          v33 = 0;
          v188 = 2;
          v186 = vrev64_s32(v186);
          v34 = 2;
        }
        v35 = *(_DWORD *)(a1 + 12) | (v6 << 21);
        LODWORD(v182[0]) = v35;
        v36 = sub_1B21DB4C0(v15 + 8, (int *)v182);
        if (v36 == -1 || (v37 = *(_QWORD *)(v15 + 88)) == 0)
        {
          *(int32x2_t *)((char *)v182 + 4) = vdup_n_s32(0x40C90FDBu);
          HIDWORD(v182[0]) = 1086918619;
          LODWORD(v182[0]) = 0;
          v38 = *(_QWORD *)(a1 + 24) + 8;
          LODWORD(v177) = v35;
          sub_1B21DB268(v38, (int *)&v177, v182);
          v39 = *(_QWORD *)(a1 + 24);
          LODWORD(v177) = v35;
          v36 = sub_1B21DB4C0(v39 + 8, (int *)&v177);
          if (v36 == -1)
          {
            v170 = 0;
LABEL_23:
            v40 = v33 + v34;
            v41 = *(float32x4_t **)(a1 + 16);
            v42 = vsubq_f32(v41[v33], v41[v34]);
            v42.i32[3] = 0;
            v171 = v42;
            sub_1B21E464C((uint64_t)v182);
            *(_QWORD *)&v182[0] = &off_1E63CC310;
            DWORD2(v182[0]) = 1;
            v183 = *v41;
            v184 = v41[1];
            v185 = v41[2];
            v44 = v186.i32[0];
            v43 = v186.i32[1];
            v45 = 3 - (v186.i32[0] + v186.i32[1]);
            sub_1B21E464C((uint64_t)&v177);
            v173 = 0;
            v177 = &off_1E63CC310;
            v178 = 1;
            v46 = a2[v44];
            v179 = a2[v43];
            v180 = v46;
            v47 = vsubq_f32(v184, v183);
            v48 = (int8x8_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
            v47.i32[3] = 0;
            v181 = a2[v45];
            v49 = vsubq_f32(v185, v183);
            v50 = (int8x8_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
            v49.i32[3] = 0;
            *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v47.f32, v48, 4uLL);
            v51.i64[1] = v47.i64[0];
            *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v49.f32, v50, 4uLL);
            v52.i64[1] = v49.i64[0];
            v53 = (int8x16_t)vsubq_f32(vmulq_f32(v52, v47), vmulq_f32(v51, v49));
            v49.i64[0] = vextq_s8(v53, v53, 4uLL).u64[0];
            v49.i64[1] = v53.u32[0];
            v54 = (int8x16_t)vmulq_f32(v49, v49);
            v55 = vmulq_n_f32(v49, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0]));
            v56 = vsubq_f32(v46, v179);
            v51.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
            v56.i32[3] = 0;
            v57 = vsubq_f32(v181, v179);
            v52.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
            v57.i32[3] = 0;
            *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v51.f32, 4uLL);
            v51.i64[1] = v56.i64[0];
            *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v52.f32, 4uLL);
            v52.i64[1] = v57.i64[0];
            v58 = (int8x16_t)vsubq_f32(vmulq_f32(v52, v56), vmulq_f32(v51, v57));
            v51.i64[0] = vextq_s8(v58, v58, 4uLL).u64[0];
            v51.i64[1] = v58.u32[0];
            v59 = (int8x16_t)vmulq_f32(v51, v51);
            v52.f32[0] = 1.0
                       / sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)).f32[0]);
            v60 = (int8x16_t)vmulq_f32(v171, v171);
            v61 = vmulq_n_f32(v171, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)).f32[0]));
            v56.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL).u64[0];
            v56.i64[1] = v61.i64[0];
            v62 = vmulq_n_f32(v51, v52.f32[0]);
            v51.i64[0] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL).u64[0];
            v167 = (int32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u64[0];
            v168 = *(float32x2_t *)v51.f32;
            v51.i64[1] = v55.i64[0];
            v172 = v55;
            v63 = (int8x16_t)vsubq_f32(vmulq_f32(v61, v51), vmulq_f32(v56, v55));
            v51.i64[0] = vextq_s8(v63, v63, 4uLL).u64[0];
            v51.i64[1] = v63.u32[0];
            v64 = (int8x16_t)vmulq_f32(v51, v51);
            v65 = vmulq_n_f32(v51, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)).f32[0]));
            v66 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * (3 - (v33 + v34))), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v34));
            v66.i32[3] = 0;
            v67 = (int8x16_t)vmulq_f32(v65, v66);
            *(float32x2_t *)v55.f32 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
            v68 = (float32x4_t)vextq_s8(v67, v67, 8uLL);
            *(float32x2_t *)v68.f32 = vadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v68.f32);
            v69.i32[0] = 0;
            v55.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL).u64[0];
            v55.i64[1] = v62.i64[0];
            v169 = v62;
            v70 = (int8x16_t)vsubq_f32(vmulq_f32(v61, v55), vmulq_f32(v56, v62));
            v56.i64[0] = vextq_s8(v70, v70, 4uLL).u64[0];
            v56.i64[1] = v70.u32[0];
            v71 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v69, v68), 0), (int8x16_t)vnegq_f32(v65), (int8x16_t)v65);
            v72 = (int8x16_t)vmulq_f32(v56, v56);
            v73 = vsubq_f32(v181, v46);
            v73.i32[3] = 0;
            v74 = vmulq_n_f32(v56, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).f32[0]));
            v75 = (int8x16_t)vmulq_f32(v74, v73);
            *(float32x2_t *)v56.f32 = vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8);
            v76 = (float32x4_t)vextq_s8(v75, v75, 8uLL);
            *(float32x2_t *)v76.f32 = vadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v76.f32);
            v77 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v69, v76), 0);
            v78.i64[0] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL).u64[0];
            v78.i64[1] = v71.i64[0];
            v79 = (float32x4_t)vbslq_s8(v77, (int8x16_t)vnegq_f32(v74), (int8x16_t)v74);
            v74.i64[0] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL).u64[0];
            v74.i64[1] = v79.i64[0];
            v80 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v71), vmulq_f32(v79, v78));
            v81.i64[0] = vextq_s8(v80, v80, 4uLL).u64[0];
            v81.i64[1] = v80.u32[0];
            v82 = (int8x16_t)vmulq_f32(v81, v81);
            v83 = vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0];
            if (v83 >= *(float *)(*(_QWORD *)(a1 + 24) + 140))
            {
              v163 = vmulq_n_f32(v81, 1.0 / sqrtf(v83));
              v84.i64[0] = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 4uLL).u64[0];
              v84.i64[1] = v163.i64[0];
              v85 = (int8x16_t)vsubq_f32(vmulq_f32(v78, v163), vmulq_f32(v71, v84));
              v84.i64[0] = vextq_s8(v85, v85, 4uLL).u64[0];
              v84.i64[1] = v85.u32[0];
              v86 = (int8x16_t)vmulq_f32(v84, v84);
              v87 = (int8x16_t)vmulq_f32(v79, vmulq_n_f32(v84, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL), vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8)).f32[0])));
              v88 = (int8x16_t)vmulq_f32(v79, v71);
              v174 = v79;
              v89 = 3.1416
                  - atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)).f32[0], vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8)).f32[0]);
              v90 = (int8x16_t)vmulq_f32(v172, v174);
              *(float *)v90.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL), vpadd_f32(*(float32x2_t *)v90.i8, *(float32x2_t *)v90.i8)).f32[0];
              v173 = *(float *)v90.i32 < 0.0;
              if (*(float *)v90.i32 >= 0.0)
                v91 = -v89;
              else
                v91 = v89;
              v162 = v91;
              v92 = (int8x16_t)vmulq_f32(v163, v163);
              v93 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8)).f32[0]);
              v94 = __sincosf_stret(v91 * -0.5);
              *(float32x2_t *)v176.f32 = vmul_n_f32(*(float32x2_t *)v163.f32, v94.__sinval / v93);
              v176.i64[1] = __PAIR64__(LODWORD(v94.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v94.__sinval / v93, v163, 2)));
              sub_1B19064B8((uint64_t)v175, &v176);
              v69.f32[0] = v162;
            }
            switch(v40)
            {
              case 3:
                v118 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 32));
                v118.i32[3] = 0;
                v165 = v118;
                v119 = -v69.f32[0];
                v120 = (int8x16_t)vmulq_f32(v118, v118);
                v121 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)).f32[0]);
                v122 = __sincosf_stret(v69.f32[0] * -0.5);
                *(float32x2_t *)v123.i8 = vmul_n_f32(*(float32x2_t *)v165.f32, v122.__sinval / v121);
                v124.i64[0] = v123.i64[0];
                v124.i64[1] = __PAIR64__(LODWORD(v122.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v122.__sinval / v121, v165, 2)));
                v125 = (int32x2_t)vextq_s8(v124, v124, 8uLL).u64[0];
                v126 = vzip1_s32(v167, *(int32x2_t *)v172.f32);
                v127 = (float32x2_t)vzip1_s32(v125, *(int32x2_t *)v123.i8);
                v128 = (float32x2_t)vext_s8(*(int8x8_t *)v123.i8, (int8x8_t)v125, 4uLL);
                *(float32x2_t *)v129.f32 = vmul_f32(v168, v127);
                *(float32x2_t *)&v129.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v126), v128);
                *(float32x2_t *)v130.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v172.f32, (float32x4_t)v124, 3), vmul_f32((float32x2_t)v126, v128));
                v130.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v123.i8, *(float32x2_t *)v172.f32, 1), vmul_f32((float32x2_t)v126, (float32x2_t)*(_OWORD *)&vextq_s8(v124, v123, 0xCuLL)));
                v131 = vsubq_f32((float32x4_t)veorq_s8(v130, (int8x16_t)xmmword_1B2269000), v129);
                v132 = (float32x4_t)veorq_s8(v124, (int8x16_t)xmmword_1B2269010);
                v123.i64[0] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u64[0];
                *(int32x2_t *)v124.i8 = vzip1_s32(*(int32x2_t *)v123.i8, *(int32x2_t *)v131.f32);
                v133 = (int32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                *(int32x2_t *)v129.f32 = vzip1_s32(v133, *(int32x2_t *)v132.f32);
                v134 = (float32x2_t)vextq_s8((int8x16_t)v131, (int8x16_t)v131, 4uLL).u64[0];
                v135 = vmul_laneq_f32(*(float32x2_t *)v131.f32, v132, 3);
                *(float32x2_t *)v123.i8 = vmul_laneq_f32(*(float32x2_t *)v123.i8, v132, 3);
                v136 = vmul_lane_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v132.f32, 1);
                *(float32x2_t *)v124.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v132.f32, (int8x8_t)v133, 4uLL), *(float32x2_t *)v124.i8);
                v124.u64[1] = (unint64_t)vmul_lane_f32(v134, *(float32x2_t *)v129.f32, 1);
                v137 = vmulq_laneq_f32(v132, v131, 3);
                *(float32x2_t *)v132.f32 = vadd_f32(v135, vmul_f32(*(float32x2_t *)v129.f32, v134));
                *(float32x2_t *)&v132.u32[2] = vadd_f32(v136, *(float32x2_t *)v123.i8);
                v138 = vaddq_f32(vsubq_f32(v137, (float32x4_t)v124), v132);
                v138.i32[3] = 0;
                v139 = (int8x16_t)vmulq_f32(v169, v138);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)).f32[0] < 0.0)*(_DWORD *)v170 |= 0x10u;
                *(float *)(v170 + 8) = v119;
                if (!v173)
                  goto LABEL_44;
                v117 = 2;
                break;
              case 2:
                v140 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 32), *(float32x4_t *)*(_QWORD *)(a1 + 16));
                v140.i32[3] = 0;
                v166 = v140;
                v141 = -v69.f32[0];
                v142 = (int8x16_t)vmulq_f32(v140, v140);
                v143 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)v142.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL)).f32[0]);
                v144 = __sincosf_stret(v69.f32[0] * -0.5);
                *(float32x2_t *)v145.i8 = vmul_n_f32(*(float32x2_t *)v166.f32, v144.__sinval / v143);
                v146.i64[0] = v145.i64[0];
                v146.i64[1] = __PAIR64__(LODWORD(v144.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v144.__sinval / v143, v166, 2)));
                v147 = (int32x2_t)vextq_s8(v146, v146, 8uLL).u64[0];
                v148 = vzip1_s32(v167, *(int32x2_t *)v172.f32);
                v149 = (float32x2_t)vzip1_s32(v147, *(int32x2_t *)v145.i8);
                v150 = (float32x2_t)vext_s8(*(int8x8_t *)v145.i8, (int8x8_t)v147, 4uLL);
                *(float32x2_t *)v151.f32 = vmul_f32(v168, v149);
                *(float32x2_t *)&v151.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v148), v150);
                *(float32x2_t *)v152.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v172.f32, (float32x4_t)v146, 3), vmul_f32((float32x2_t)v148, v150));
                v152.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v145.i8, *(float32x2_t *)v172.f32, 1), vmul_f32((float32x2_t)v148, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v145, 0xCuLL)));
                v153 = vsubq_f32((float32x4_t)veorq_s8(v152, (int8x16_t)xmmword_1B2269000), v151);
                v154 = (float32x4_t)veorq_s8(v146, (int8x16_t)xmmword_1B2269010);
                v145.i64[0] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
                *(int32x2_t *)v146.i8 = vzip1_s32(*(int32x2_t *)v145.i8, *(int32x2_t *)v153.f32);
                v155 = (int32x2_t)vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
                *(int32x2_t *)v151.f32 = vzip1_s32(v155, *(int32x2_t *)v154.f32);
                v156 = (float32x2_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 4uLL).u64[0];
                v157 = vmul_laneq_f32(*(float32x2_t *)v153.f32, v154, 3);
                *(float32x2_t *)v145.i8 = vmul_laneq_f32(*(float32x2_t *)v145.i8, v154, 3);
                v158 = vmul_lane_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v154.f32, 1);
                *(float32x2_t *)v146.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v154.f32, (int8x8_t)v155, 4uLL), *(float32x2_t *)v146.i8);
                v146.u64[1] = (unint64_t)vmul_lane_f32(v156, *(float32x2_t *)v151.f32, 1);
                v159 = vmulq_laneq_f32(v154, v153, 3);
                *(float32x2_t *)v154.f32 = vadd_f32(v157, vmul_f32(*(float32x2_t *)v151.f32, v156));
                *(float32x2_t *)&v154.u32[2] = vadd_f32(v158, *(float32x2_t *)v145.i8);
                v160 = vaddq_f32(vsubq_f32(v159, (float32x4_t)v146), v154);
                v160.i32[3] = 0;
                v161 = (int8x16_t)vmulq_f32(v169, v160);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v161.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL)).f32[0] < 0.0)*(_DWORD *)v170 |= 0x20u;
                *(float *)(v170 + 12) = v141;
                if (!v173)
                  goto LABEL_44;
                v117 = 4;
                break;
              case 1:
                v95 = vsubq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 16), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16));
                v95.i32[3] = 0;
                v164 = v95;
                v96 = -v69.f32[0];
                v97 = (int8x16_t)vmulq_f32(v95, v95);
                v98 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)).f32[0]);
                v99 = __sincosf_stret(v69.f32[0] * -0.5);
                *(float32x2_t *)v100.i8 = vmul_n_f32(*(float32x2_t *)v164.f32, v99.__sinval / v98);
                v101.i64[0] = v100.i64[0];
                v101.i64[1] = __PAIR64__(LODWORD(v99.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v99.__sinval / v98, v164, 2)));
                v102 = (int32x2_t)vextq_s8(v101, v101, 8uLL).u64[0];
                v103 = vzip1_s32(v167, *(int32x2_t *)v172.f32);
                v104 = (float32x2_t)vzip1_s32(v102, *(int32x2_t *)v100.i8);
                v105 = (float32x2_t)vext_s8(*(int8x8_t *)v100.i8, (int8x8_t)v102, 4uLL);
                *(float32x2_t *)v106.f32 = vmul_f32(v168, v104);
                *(float32x2_t *)&v106.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v103), v105);
                *(float32x2_t *)v107.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v172.f32, (float32x4_t)v101, 3), vmul_f32((float32x2_t)v103, v105));
                v107.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v172.f32, 1), vmul_f32((float32x2_t)v103, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v100, 0xCuLL)));
                v108 = vsubq_f32((float32x4_t)veorq_s8(v107, (int8x16_t)xmmword_1B2269000), v106);
                v109 = (float32x4_t)veorq_s8(v101, (int8x16_t)xmmword_1B2269010);
                v100.i64[0] = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u64[0];
                *(int32x2_t *)v101.i8 = vzip1_s32(*(int32x2_t *)v100.i8, *(int32x2_t *)v108.f32);
                v110 = (int32x2_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
                *(int32x2_t *)v106.f32 = vzip1_s32(v110, *(int32x2_t *)v109.f32);
                v111 = (float32x2_t)vextq_s8((int8x16_t)v108, (int8x16_t)v108, 4uLL).u64[0];
                v112 = vmul_laneq_f32(*(float32x2_t *)v108.f32, v109, 3);
                *(float32x2_t *)v100.i8 = vmul_laneq_f32(*(float32x2_t *)v100.i8, v109, 3);
                v113 = vmul_lane_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v109.f32, 1);
                *(float32x2_t *)v101.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v109.f32, (int8x8_t)v110, 4uLL), *(float32x2_t *)v101.i8);
                v101.u64[1] = (unint64_t)vmul_lane_f32(v111, *(float32x2_t *)v106.f32, 1);
                v114 = vmulq_laneq_f32(v109, v108, 3);
                *(float32x2_t *)v109.f32 = vadd_f32(v112, vmul_f32(*(float32x2_t *)v106.f32, v111));
                *(float32x2_t *)&v109.u32[2] = vadd_f32(v113, *(float32x2_t *)v100.i8);
                v115 = vaddq_f32(vsubq_f32(v114, (float32x4_t)v101), v109);
                v115.i32[3] = 0;
                v116 = (int8x16_t)vmulq_f32(v169, v115);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v116.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)).f32[0] < 0.0)*(_DWORD *)v170 |= 8u;
                *(float *)(v170 + 4) = v96;
                if (!v173)
                  goto LABEL_44;
                v117 = 1;
                break;
              default:
                goto LABEL_44;
            }
            *(_DWORD *)v170 |= v117;
LABEL_44:
            sub_1B21E4670(&v177);
            sub_1B21E4670(v182);
            return;
          }
          v37 = *(_QWORD *)(v39 + 88);
        }
        v170 = v37 + 16 * v36;
        goto LABEL_23;
      }
    }
  }
}

void sub_1B21DB268(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v6 = *a2;
  v7 = *(_DWORD *)(a1 + 72);
  v8 = sub_1B21DB4C0(a1, a2);
  if (v8 != -1)
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 80) + 16 * v8) = *a3;
    return;
  }
  v9 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
  v10 = ((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) >> 16);
  v11 = v7 - 1;
  v12 = *(_DWORD *)(a1 + 68);
  v13 = *(_DWORD *)(a1 + 72);
  v14 = v12;
  if (v12 == v13)
  {
    v15 = v12 ? 2 * v12 : 1;
    v14 = *(_DWORD *)(a1 + 68);
    if (v12 < v15)
    {
      if (v15)
        v16 = sub_1B21FF5F0(16 * v15, 16);
      else
        v16 = 0;
      if (*(int *)(a1 + 68) >= 1)
      {
        v17 = 0;
        v18 = 16 * *(unsigned int *)(a1 + 68);
        do
        {
          *(_OWORD *)(v16 + v17) = *(_OWORD *)(*(_QWORD *)(a1 + 80) + v17);
          v17 += 16;
        }
        while (v18 != v17);
      }
      v19 = *(_QWORD *)(a1 + 80);
      if (v19 && *(_BYTE *)(a1 + 88))
        sub_1B21FF5FC(v19);
      *(_BYTE *)(a1 + 88) = 1;
      *(_QWORD *)(a1 + 80) = v16;
      *(_DWORD *)(a1 + 72) = v15;
      v14 = *(_DWORD *)(a1 + 68);
    }
  }
  v20 = v10 & v11;
  *(_OWORD *)(*(_QWORD *)(a1 + 80) + 16 * v14) = *a3;
  ++*(_DWORD *)(a1 + 68);
  LODWORD(v21) = *(_DWORD *)(a1 + 100);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 104))
  {
    v22 = (_DWORD)v21 ? 2 * v21 : 1;
    if ((int)v21 < v22)
    {
      if (v22)
      {
        v23 = sub_1B21FF5F0(4 * v22, 16);
        LODWORD(v21) = *(_DWORD *)(a1 + 100);
      }
      else
      {
        v23 = 0;
      }
      v24 = *(_QWORD *)(a1 + 112);
      if ((int)v21 < 1)
      {
        if (!v24)
        {
LABEL_34:
          *(_BYTE *)(a1 + 120) = 1;
          *(_QWORD *)(a1 + 112) = v23;
          *(_DWORD *)(a1 + 104) = v22;
          LODWORD(v21) = *(_DWORD *)(a1 + 100);
          goto LABEL_35;
        }
      }
      else
      {
        v21 = v21;
        v25 = (_DWORD *)v23;
        v26 = *(int **)(a1 + 112);
        do
        {
          v27 = *v26++;
          *v25++ = v27;
          --v21;
        }
        while (v21);
      }
      if (*(_BYTE *)(a1 + 120))
        sub_1B21FF5FC(v24);
      *(_QWORD *)(a1 + 112) = 0;
      goto LABEL_34;
    }
  }
LABEL_35:
  *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (int)v21) = *a2;
  ++*(_DWORD *)(a1 + 100);
  if (v13 < *(_DWORD *)(a1 + 72))
  {
    sub_1B21DB540(a1);
    v28 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
    v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
    v20 = (v29 ^ (v29 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  }
  v30 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12) = *(_DWORD *)(v30 + 4 * v20);
  *(_DWORD *)(v30 + 4 * v20) = v12;
}

uint64_t sub_1B21DB4C0(uint64_t a1, int *a2)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;

  v3 = *a2;
  result = 0xFFFFFFFFLL;
  v5 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ (v6 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v7 < *(_DWORD *)(a1 + 4))
  {
    result = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v7);
    if ((_DWORD)result == -1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (v3 != *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (int)result))
      {
        result = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)result);
        if ((_DWORD)result == -1)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

void sub_1B21DB540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = sub_1B21FF5F0(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    v6 = *(_QWORD *)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 16);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 24))
      sub_1B21FF5FC(v6);
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = sub_1B21FF5F0(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 36);
    v13 = *(_QWORD *)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 48);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 56))
      sub_1B21FF5FC(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 112);
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 48);
    do
    {
      v21 = *(_DWORD *)(v18 + 4 * v17) + ~(*(_DWORD *)(v18 + 4 * v17) << 15);
      v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
      v23 = ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v20 + 4 * v17) = *(_DWORD *)(v19 + 4 * v23);
      *(_DWORD *)(v19 + 4 * v23) = v17++;
    }
    while (v2 != v17);
  }
}

int8x16_t sub_1B21DB768(int8x16_t *a1, int8x16_t *a2)
{
  int32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int8x16_t result;

  v2 = (int32x2_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  v3 = (float32x2_t)vzip1_s32(v2, *(int32x2_t *)a1->i8);
  v4 = (int32x2_t)vextq_s8(*a2, *a2, 8uLL).u64[0];
  v5 = (float32x2_t)vzip1_s32(v4, *(int32x2_t *)a2->i8);
  v6 = (float32x2_t)vext_s8(*(int8x8_t *)a1->i8, (int8x8_t)v2, 4uLL);
  v7 = vmul_f32(v3, (float32x2_t)vext_s8((int8x8_t)v4, *(int8x8_t *)a2->i8, 4uLL));
  *(float32x2_t *)v8.f32 = vmul_f32(v3, (float32x2_t)vext_s8(*(int8x8_t *)a2->i8, (int8x8_t)v4, 4uLL));
  *(float32x2_t *)&v8.u32[2] = vmul_f32(v6, (float32x2_t)vrev64_s32((int32x2_t)v5));
  *(float32x2_t *)v9.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a1->i8, *(float32x4_t *)a2, 3), vmul_f32(v6, v5));
  v9.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)a2->i8, 1), v7);
  result = (int8x16_t)vaddq_f32(vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)a2, *(float32x4_t *)a1, 3), v8), (float32x4_t)veorq_s8(v9, (int8x16_t)xmmword_1B2269000));
  *a1 = result;
  return result;
}

float sub_1B21DB7D8(uint64_t a1, uint64_t a2)
{
  float result;

  result = *(float *)(a1 + 252) * *(float *)(a2 + 252);
  if (result < -10.0)
    result = -10.0;
  if (result > 10.0)
    return 10.0;
  return result;
}

float sub_1B21DB800(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 256) * *(float *)(a2 + 256);
}

_QWORD *sub_1B21DB810(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1E63CC5F8;
  result[1] = 0;
  result[2] = a2;
  result[3] = a3;
  return result;
}

void sub_1B21DB824(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v61;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  float32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v84[4];
  float32x4_t v85;
  float v86;
  int8x8_t v87;
  float v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;

  if (sub_1B21ED14C(a1[1]) >= a4)
  {
    v7 = a1[1];
    v8 = *(_QWORD *)(v7 + 784);
    v9 = *(_QWORD *)(a1[2] + 16);
    v10 = *a2;
    v11 = vmulq_n_f32(*a2, a4);
    v11.i32[3] = 0;
    v12 = *a3;
    v13 = vaddq_f32(*a3, v11);
    if (v8 == v9)
    {
      v34 = *(int8x16_t *)(v8 + 48);
      v35 = vsubq_f32(v13, *(float32x4_t *)(v8 + 64));
      v36 = *(float32x4_t *)(v8 + 16);
      v37 = *(int32x4_t *)(v8 + 32);
      v38 = (float32x4_t)vtrn1q_s32((int32x4_t)v36, v37);
      v39.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v39.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
      v40 = (int8x16_t)vmulq_f32(v39, v35);
      v35.i32[3] = 0;
      *(int32x2_t *)v36.f32 = vzip2_s32(*(int32x2_t *)v36.f32, *(int32x2_t *)v37.i8);
      v38.i64[1] = v34.u32[0];
      *(int32x2_t *)&v36.u32[2] = vzip2_s32(*(int32x2_t *)v34.i8, 0);
      v41 = (int8x16_t)vmulq_f32(v38, v35);
      v42 = (int8x16_t)vmulq_f32(v36, v35);
      v40.i32[3] = 0;
      *(float32x2_t *)v37.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), 0);
      v43 = *(_QWORD *)(a1[3] + 16);
      v44 = *(int8x16_t *)(v43 + 48);
      v45 = vsubq_f32(v12, *(float32x4_t *)(v43 + 64));
      v46 = *(float32x4_t *)(v43 + 16);
      v47 = *(float32x4_t *)(v43 + 32);
      v48 = (float32x4_t)vtrn1q_s32((int32x4_t)v46, (int32x4_t)v47);
      *(int32x2_t *)v46.f32 = vzip2_s32(*(int32x2_t *)v46.f32, *(int32x2_t *)v47.f32);
      v47.i64[0] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8));
      v30.i64[1] = v37.i64[0];
      v45.i32[3] = 0;
      v48.i64[1] = v44.u32[0];
      *(int32x2_t *)&v46.u32[2] = vzip2_s32(*(int32x2_t *)v44.i8, 0);
      v47.i64[1] = vextq_s8(v44, v44, 8uLL).u32[0];
      v31 = (int8x16_t)vmulq_f32(v48, v45);
      v32 = (int8x16_t)vmulq_f32(v46, v45);
      v33 = (int8x16_t)vmulq_f32(v47, v45);
    }
    else
    {
      v14 = *(_QWORD *)(a1[3] + 16);
      v15 = *(int8x16_t *)(v14 + 48);
      v16 = vsubq_f32(v13, *(float32x4_t *)(v14 + 64));
      v17 = *(float32x4_t *)(v14 + 16);
      v18 = *(float32x4_t *)(v14 + 32);
      v19 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, (int32x4_t)v18);
      *(int32x2_t *)v17.f32 = vzip2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.f32);
      v18.i64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v20 = v16;
      v20.i32[3] = 0;
      v19.i64[1] = v15.u32[0];
      *(int32x2_t *)&v17.u32[2] = vzip2_s32(*(int32x2_t *)v15.i8, 0);
      v18.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
      v21 = (int8x16_t)vmulq_f32(v18, v16);
      v22 = (int8x16_t)vmulq_f32(v19, v20);
      v23 = (int8x16_t)vmulq_f32(v17, v20);
      v21.i32[3] = 0;
      *(float32x2_t *)v19.f32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
      v24 = *(int8x16_t *)(v9 + 48);
      v25 = vsubq_f32(v12, *(float32x4_t *)(v9 + 64));
      v26 = *(int32x4_t *)(v9 + 16);
      v27 = *(float32x4_t *)(v9 + 32);
      v28 = (float32x4_t)vtrn1q_s32(v26, (int32x4_t)v27);
      *(int32x2_t *)v27.f32 = vzip2_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v27.f32);
      v29.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v23.i8));
      v30.i64[1] = v19.i64[0];
      v25.i32[3] = 0;
      v28.i64[1] = v24.u32[0];
      *(int32x2_t *)&v27.u32[2] = vzip2_s32(*(int32x2_t *)v24.i8, 0);
      v29.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
      v31 = (int8x16_t)vmulq_f32(v28, v25);
      v32 = (int8x16_t)vmulq_f32(v27, v25);
      v33 = (int8x16_t)vmulq_f32(v29, v25);
    }
    v33.i32[3] = 0;
    *(float32x2_t *)v49.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.i8));
    *(float32x2_t *)&v49.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
    v84[0] = v30;
    v84[1] = v49;
    v84[3] = v13;
    v85 = v10;
    v86 = a4;
    v87 = 0;
    v88 = 0.0;
    v93 = 0;
    v94 = 0;
    v95 = 0u;
    v96 = 0u;
    v84[2] = v12;
    v50 = sub_1B21ED0E8(v7, v84);
    v51 = *(_QWORD *)(a1[2] + 16);
    v52 = *(_QWORD *)(a1[3] + 16);
    v53.i32[0] = *(_DWORD *)(v51 + 252);
    v54.i32[0] = *(_DWORD *)(v52 + 252);
    v88 = *(float *)(v51 + 256) * *(float *)(v52 + 256);
    v53.i32[1] = *(_DWORD *)(v51 + 260);
    v54.i32[1] = *(_DWORD *)(v52 + 260);
    v55 = vmul_f32(v53, v54);
    __asm { FMOV            V1.2S, #-10.0 }
    v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, v55), (int8x8_t)_D1, (int8x8_t)v55);
    __asm { FMOV            V1.2S, #10.0 }
    v87 = vbsl_s8((int8x8_t)vcgt_f32(v61, _D1), (int8x8_t)_D1, (int8x8_t)v61);
    if (fabsf(v85.f32[2]) <= 0.70711)
    {
      v71 = (float)(v85.f32[1] * v85.f32[1]) + (float)(v85.f32[0] * v85.f32[0]);
      v72 = 1.0 / sqrtf(v71);
      v70 = -(float)(v85.f32[1] * v72);
      v65 = v85.f32[0] * v72;
      v67 = -(float)(v85.f32[2] * (float)(v85.f32[0] * v72));
      v68 = v85.f32[2] * v70;
      v69 = v71 * v72;
      v66 = 0.0;
    }
    else
    {
      v63 = (float)(v85.f32[2] * v85.f32[2]) + (float)(v85.f32[1] * v85.f32[1]);
      v64 = 1.0 / sqrtf(v63);
      v65 = -(float)(v85.f32[2] * v64);
      v66 = v85.f32[1] * v64;
      v67 = v63 * v64;
      v68 = -(float)(v85.f32[0] * (float)(v85.f32[1] * v64));
      v69 = v65 * v85.f32[0];
      v70 = 0.0;
    }
    v97 = v70;
    v98 = v65;
    v99 = v66;
    v100 = v67;
    v101 = v68;
    v102 = v69;
    if (v8 == v9)
    {
      v73 = (unsigned int *)(a1 + 4);
      v74 = (unsigned int *)a1 + 9;
      v75 = (unsigned int *)(a1 + 5);
      v76 = (unsigned int *)a1 + 11;
    }
    else
    {
      v73 = (unsigned int *)a1 + 9;
      v74 = (unsigned int *)(a1 + 4);
      v75 = (unsigned int *)a1 + 11;
      v76 = (unsigned int *)(a1 + 5);
    }
    v77 = *v76;
    v78 = *v75;
    v79 = *v74;
    v89 = *v73;
    v90 = v79;
    v91 = v78;
    v92 = v77;
    v80 = (float32x4_t *)a1[1];
    if (v50 < 0)
      v50 = sub_1B21ED154(v80, (uint64_t)v84);
    else
      sub_1B21DBC28((uint64_t)v80, v84, v50);
    if (off_1EEFD59C0
      && ((*(_BYTE *)(*(_QWORD *)(a1[2] + 16) + 232) & 8) != 0
       || (*(_BYTE *)(*(_QWORD *)(a1[3] + 16) + 232) & 8) != 0))
    {
      v81 = 3;
      if (v8 == v9)
        v82 = 2;
      else
        v82 = 3;
      if (v8 != v9)
        v81 = 2;
      off_1EEFD59C0(a1[1] + 192 * v50 + 16, a1[v82], v89, v91, a1[v81], v90, v92);
    }
  }
}

_BYTE *sub_1B21DBC28(uint64_t a1, _OWORD *a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *result;

  v4 = a1 + 192 * a3;
  v5 = *(_DWORD *)(v4 + 168);
  v6 = *(_DWORD *)(v4 + 148);
  v7 = *(_QWORD *)(v4 + 128);
  *(_OWORD *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 32) = a2[1];
  *(_OWORD *)(v4 + 48) = a2[2];
  *(_OWORD *)(v4 + 64) = a2[3];
  *(_OWORD *)(v4 + 80) = a2[4];
  v8 = *(_QWORD *)(v4 + 140);
  *(_OWORD *)(v4 + 96) = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  *(_OWORD *)(v4 + 156) = *(_OWORD *)((char *)a2 + 140);
  *(_OWORD *)(v4 + 128) = v10;
  *(_OWORD *)(v4 + 144) = v11;
  *(_OWORD *)(v4 + 112) = v9;
  *(_OWORD *)(v4 + 176) = a2[10];
  *(_OWORD *)(v4 + 192) = a2[11];
  *(_QWORD *)(v4 + 128) = v7;
  *(_QWORD *)(v4 + 140) = v8;
  *(_DWORD *)(v4 + 148) = v6;
  *(_DWORD *)(v4 + 168) = v5;
  result = *(_BYTE **)(a1 + 824);
  if (result)
  {
    if ((result[8] & 2) != 0)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 8))(result, a1);
  }
  return result;
}

void sub_1B21DBCD4()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21DBCE8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CD808;
  sub_1B21DCE98(a1 + 8);
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  return a1;
}

_QWORD *sub_1B21DBD3C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CD808;
  v2 = (uint64_t)(a1 + 1);
  sub_1B1810570((uint64_t)(a1 + 9));
  sub_1B1810570((uint64_t)(a1 + 5));
  sub_1B21DCE74(v2);
  return a1;
}

void sub_1B21DBD88(_QWORD *a1)
{
  sub_1B21DBD3C(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21DBDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 96) + 72))(*(_QWORD *)(a3 + 96));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  if ((_DWORD)result)
  {
    LODWORD(v6) = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if ((int)v6 >= 1)
    {
      v7 = a1 + 8;
      v6 = v6;
      v8 = (uint64_t **)(result + 8);
      do
      {
        v9 = **(v8 - 1);
        if (v9)
        {
          v10 = **v8;
          v11 = (*(_BYTE *)(v9 + 232) & 7) != 0 || v10 == 0;
          if (!v11 && (*(_BYTE *)(v10 + 232) & 7) == 0)
            result = sub_1B21DBE6C(v7, *(unsigned int *)(v9 + 236), *(unsigned int *)(v10 + 236));
        }
        v8 += 4;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1B21DBE6C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  int i;
  uint64_t v6;
  int *v7;
  int j;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(_QWORD *)(result + 16);
  v4 = (int *)(v3 + 8 * (int)a2);
  for (i = *v4; (_DWORD)a2 != *v4; i = *v4)
  {
    v6 = 8 * i;
    *v4 = *(_DWORD *)(v3 + v6);
    a2 = *(int *)(v3 + v6);
    v4 = (int *)(v3 + 8 * a2);
  }
  v7 = (int *)(v3 + 8 * (int)a3);
  for (j = *v7; (_DWORD)a3 != *v7; j = *v7)
  {
    v9 = 8 * j;
    *v7 = *(_DWORD *)(v3 + v9);
    a3 = *(int *)(v3 + v9);
    v7 = (int *)(v3 + 8 * a3);
  }
  if ((_DWORD)a2 != (_DWORD)a3)
  {
    v10 = (_DWORD *)(v3 + 8 * (int)a2);
    *v10 = a3;
    *(_DWORD *)(v3 + 8 * (int)a3 + 4) += v10[1];
  }
  return result;
}

uint64_t sub_1B21DBEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  if ((int)v4 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 24);
    do
    {
      v7 = *(_DWORD **)v6;
      if ((*(_BYTE *)(*(_QWORD *)v6 + 232) & 3) == 0)
        v7[59] = v5++;
      v7[60] = -1;
      v7[70] = 1065353216;
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  sub_1B21DCF7C(a1 + 8, v5);
  return sub_1B21DBDAC(a1, v8, a2);
}

uint64_t sub_1B21DBF78(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a2 + 12);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 24);
    do
    {
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if ((*(_BYTE *)(v6 + 232) & 3) != 0)
      {
        *(_QWORD *)(v6 + 236) = 0xFFFFFFFEFFFFFFFFLL;
      }
      else
      {
        v7 = *(_QWORD *)(result + 24);
        v8 = (int *)(v7 + 8 * v4);
        v9 = *v8;
        LODWORD(v10) = v4;
        if (*v8 != v4)
        {
          do
          {
            v11 = 8 * v9;
            *v8 = *(_DWORD *)(v7 + v11);
            v10 = *(int *)(v7 + v11);
            v8 = (int *)(v7 + 8 * v10);
            v9 = *v8;
          }
          while ((_DWORD)v10 != *v8);
        }
        *(_DWORD *)(v7 + 8 * v4 + 4) = v3;
        *(_DWORD *)(v6 + 236) = v10;
        *(_DWORD *)(v6 + 240) = -1;
        ++v4;
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_1B21DC010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(int *)(a1 + 44);
  if ((v6 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
    {
      v7 = *(_QWORD *)(a1 + 56);
      if (v7 && *(_BYTE *)(a1 + 64))
        sub_1B21FF5FC(v7);
      *(_BYTE *)(a1 + 64) = 1;
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6++) = 0;
    while ((_DWORD)v6);
  }
  *(_DWORD *)(a1 + 44) = 0;
  sub_1B21DCFD0(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 24);
      v12 = 8 * v9;
      v13 = (int *)(v11 + v12 + 8);
      v14 = *(_DWORD *)(v11 + v12);
      if ((int)v8 <= v9 + 1)
        v15 = v9 + 1;
      else
        v15 = v8;
      v16 = v15 - 1;
      v17 = v9 + 1;
      while (v17 < v8)
      {
        v18 = *v13;
        v13 += 2;
        ++v9;
        ++v17;
        if (v18 != v14)
        {
          v16 = v9 - 1;
          goto LABEL_18;
        }
      }
      v9 = v15;
LABEL_18:
      if (v10 <= v16)
      {
        v19 = (int *)(v11 + v12 + 4);
        v20 = v16 - v10 + 1;
        v21 = 1;
        v22 = v20;
        do
        {
          v23 = *v19;
          v19 += 2;
          v24 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v23);
          if (*(_DWORD *)(v24 + 236) == v14)
          {
            v25 = *(_DWORD *)(v24 + 244);
            v27 = v25 != 4 && v25 != 1;
            v21 &= v27;
          }
          --v22;
        }
        while (v22);
        if ((v21 & 1) != 0)
        {
          v28 = v12 + 4;
          do
          {
            v29 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(*(_QWORD *)(a1 + 24) + v28));
            if (*(_DWORD *)(v29 + 236) == v14)
              sub_1B21D0364(v29, 2);
            v28 += 8;
            --v20;
          }
          while (v20);
        }
        else
        {
          v30 = v12 + 4;
          do
          {
            v31 = *(_DWORD **)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(*(_QWORD *)(a1 + 24) + v30));
            if (v31[59] == v14 && v31[61] == 2)
            {
              sub_1B21D0364(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(*(_QWORD *)(a1 + 24) + v30)), 3);
              v31[62] = 0;
            }
            v30 += 8;
            --v20;
          }
          while (v20);
        }
      }
    }
    while (v9 < (int)v8);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  if (v32 >= 1)
  {
    v33 = v32;
    v34 = 0;
    do
    {
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v34);
      v36 = v35;
      v37 = *(_QWORD *)(v35 + 784);
      v38 = *(_QWORD *)(v35 + 792);
      if (v37 && *(_DWORD *)(v37 + 244) != 2 || v38 && *(_DWORD *)(v38 + 244) != 2)
      {
        v39 = *(_DWORD *)(v37 + 232);
        if ((v39 & 2) != 0 && (v39 & 4) == 0 && *(_DWORD *)(v37 + 244) != 2)
          sub_1B21D0384(*(_QWORD *)(v35 + 792), 0);
        v40 = *(_DWORD *)(v38 + 232);
        if ((v40 & 2) != 0 && (v40 & 4) == 0 && *(_DWORD *)(v38 + 244) != 2)
          sub_1B21D0384(v37, 0);
        if (*(_BYTE *)(a1 + 104)
          && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v37, v38))
        {
          v41 = *(_DWORD *)(a1 + 44);
          if (v41 == *(_DWORD *)(a1 + 48))
          {
            v42 = v41 ? 2 * v41 : 1;
            if (v41 < v42)
            {
              if (v42)
              {
                v43 = sub_1B21FF5F0(8 * v42, 16);
                v41 = *(_DWORD *)(a1 + 44);
              }
              else
              {
                v43 = 0;
              }
              if (v41 >= 1)
              {
                v44 = 0;
                do
                {
                  *(_QWORD *)(v43 + v44) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v44);
                  v44 += 8;
                }
                while (8 * v41 != v44);
              }
              v45 = *(_QWORD *)(a1 + 56);
              if (v45)
              {
                if (*(_BYTE *)(a1 + 64))
                {
                  sub_1B21FF5FC(v45);
                  v41 = *(_DWORD *)(a1 + 44);
                }
              }
              *(_BYTE *)(a1 + 64) = 1;
              *(_QWORD *)(a1 + 56) = v43;
              *(_DWORD *)(a1 + 48) = v42;
            }
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v41) = v36;
          *(_DWORD *)(a1 + 44) = v41 + 1;
        }
      }
      v34 = (v34 + 1);
    }
    while ((_DWORD)v34 != v33);
  }
}

void sub_1B21DC360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char v42;

  sub_1B21DC010(a1, a2, a3);
  if (*(_BYTE *)(a1 + 104))
  {
    v38 = a4;
    v8 = *(unsigned int *)(a1 + 12);
    v9 = *(int *)(a1 + 44);
    if ((int)v9 > 1)
      sub_1B21DC698(a1 + 40, (uint64_t)&v42, 0, v9 - 1);
    if ((int)v8 >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = 1;
      v39 = v9;
      do
      {
        v41 = v11;
        v13 = v10;
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 8 * v10);
        if ((int)v8 <= v10 + 1)
          v15 = v10 + 1;
        else
          v15 = v8;
        v40 = v15;
        v16 = 1;
        while (1)
        {
          v17 = *(_QWORD *)(a1 + 24);
          if (*(_DWORD *)(v17 + 8 * v13) != (_DWORD)v14)
            break;
          v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(v17 + 8 * v13 + 4));
          v19 = *(_DWORD *)(a1 + 76);
          if (v19 == *(_DWORD *)(a1 + 80))
          {
            v20 = v19 ? 2 * v19 : 1;
            if (v19 < v20)
            {
              if (v20)
              {
                v21 = sub_1B21FF5F0(8 * v20, 16);
                v19 = *(_DWORD *)(a1 + 76);
              }
              else
              {
                v21 = 0;
              }
              if (v19 >= 1)
              {
                v22 = 0;
                do
                {
                  *(_QWORD *)(v21 + v22) = *(_QWORD *)(*(_QWORD *)(a1 + 88) + v22);
                  v22 += 8;
                }
                while (8 * v19 != v22);
              }
              v23 = *(_QWORD *)(a1 + 88);
              if (v23 && *(_BYTE *)(a1 + 96))
              {
                sub_1B21FF5FC(v23);
                v19 = *(_DWORD *)(a1 + 76);
              }
              *(_BYTE *)(a1 + 96) = 1;
              *(_QWORD *)(a1 + 88) = v21;
              *(_DWORD *)(a1 + 80) = v20;
            }
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v19) = v18;
          *(_DWORD *)(a1 + 76) = v19 + 1;
          v24 = *(_DWORD *)(v18 + 244);
          if (v24 != 2)
            v16 &= v24 == 5;
          if (++v13 >= v8)
            goto LABEL_31;
        }
        v40 = v13;
        if (v41 >= (int)v39)
          goto LABEL_44;
LABEL_31:
        v25 = *(_QWORD *)(a1 + 56);
        v26 = v25 + 8 * v41;
        v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 784) + 236);
        if (v27 < 0)
          v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 792) + 236);
        if (v27 == (_DWORD)v14)
        {
          if ((int)v39 <= v41 + 1)
            v28 = v41 + 1;
          else
            v28 = v39;
          v29 = v41 + 1;
          v12 = v41;
          while (v29 < v39)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            v31 = *(_DWORD *)(*(_QWORD *)(v30 + 784) + 236);
            if (v31 < 0)
              v31 = *(_DWORD *)(*(_QWORD *)(v30 + 792) + 236);
            ++v12;
            ++v29;
            if ((_DWORD)v14 != v31)
              goto LABEL_46;
          }
          v12 = v28;
LABEL_46:
          v32 = (v12 - v41);
        }
        else
        {
LABEL_44:
          v32 = 0;
          v26 = 0;
        }
        v33 = *(_DWORD *)(a1 + 76);
        if ((v16 & 1) == 0)
        {
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, *(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 76), v26, v32, v14);
          v33 = *(_DWORD *)(a1 + 76);
        }
        v10 = v40;
        if ((_DWORD)v32)
          v11 = v12;
        else
          v11 = v41;
        if (v33 < 0)
        {
          if ((*(_DWORD *)(a1 + 80) & 0x80000000) != 0)
          {
            v34 = *(_QWORD *)(a1 + 88);
            if (v34 && *(_BYTE *)(a1 + 96))
              sub_1B21FF5FC(v34);
            *(_BYTE *)(a1 + 96) = 1;
            *(_QWORD *)(a1 + 88) = 0;
            *(_DWORD *)(a1 + 80) = 0;
          }
          v35 = v33;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v35++) = 0;
          while ((_DWORD)v35);
        }
        *(_DWORD *)(a1 + 76) = 0;
      }
      while (v40 < (int)v8);
    }
  }
  else
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, *(_QWORD *)(a3 + 24), *(unsigned int *)(a3 + 12), v36, v37, 0xFFFFFFFFLL);
  }
}

uint64_t sub_1B21DC698(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;

  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v9 >> 1));
    v11 = a4;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_DWORD *)(*(_QWORD *)(v10 + 784) + 236);
      v14 = (uint64_t *)(v12 + 8 * a3);
      v15 = a3;
      do
      {
        v16 = *v14;
        v17 = *(_DWORD *)(*(_QWORD *)(*v14 + 784) + 236);
        if (v17 < 0)
          v17 = *(_DWORD *)(*(_QWORD *)(v16 + 792) + 236);
        v18 = *(_DWORD *)(*(_QWORD *)(v10 + 784) + 236);
        if (v13 < 0)
          v18 = *(_DWORD *)(*(_QWORD *)(v10 + 792) + 236);
        ++v15;
        ++v14;
      }
      while (v17 < v18);
      a3 = v15 - 1;
      v19 = 8 * v11;
      v20 = v11;
      do
      {
        v21 = *(_DWORD *)(*(_QWORD *)(v10 + 784) + 236);
        if (v13 < 0)
          v21 = *(_DWORD *)(*(_QWORD *)(v10 + 792) + 236);
        v22 = *(_QWORD *)(v12 + v19);
        result = *(unsigned int *)(*(_QWORD *)(v22 + 784) + 236);
        if ((result & 0x80000000) != 0)
          result = *(unsigned int *)(*(_QWORD *)(v22 + 792) + 236);
        --v20;
        v19 -= 8;
      }
      while (v21 < (int)result);
      v11 = v20 + 1;
      if (a3 <= v20 + 1)
      {
        *(v14 - 1) = v22;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + v19 + 8) = v16;
        a3 = v15;
        v11 = v20;
      }
    }
    while (a3 <= v11);
    if (v11 > v8)
      result = sub_1B21DC698(a1, a2);
  }
  while (a3 < a4);
  return result;
}

uint64_t sub_1B21DC7BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = sub_1B21CDEB8((_QWORD *)a1, a3);
  *v9 = &off_1E63CDC70;
  *((_BYTE *)v9 + 16) = 0;
  v9[3] = a2;
  if (!a2)
  {
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16));
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_1B21DC840(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CDC70;
  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return nullsub_16(a1);
}

void sub_1B21DC890(uint64_t a1)
{
  sub_1B21DC840(a1);
  JUMPOUT(0x1B5E22E18);
}

_BYTE *sub_1B21DC8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _BYTE *result;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  __n128 v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  __int128 v22;

  result = *(_BYTE **)(a1 + 24);
  if (result)
  {
    a5[1] = result;
    v7 = *(float32x4_t *)(*(_QWORD *)(a3 + 24) + 48);
    v8 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 24) + 48), v7);
    v8.i32[3] = 0;
    v9 = (int8x16_t)vmulq_f32(v8, v8);
    v10 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
    v13 = (__n128)vextq_s8(v9, v9, 8uLL);
    v13.n128_u64[0] = (unint64_t)vadd_f32(v10, (float32x2_t)v13.n128_u64[0]);
    v11 = sqrtf(v13.n128_f32[0]);
    v12 = *(float *)(*(_QWORD *)(a3 + 8) + 48) * *(float *)(*(_QWORD *)(a3 + 8) + 32);
    v13.n128_f32[0] = (float)(*(float *)(*(_QWORD *)(a2 + 8) + 48) * *(float *)(*(_QWORD *)(a2 + 8) + 32)) + v12;
    if (v11 <= v13.n128_f32[0])
    {
      v13.n128_f32[0] = v11 - v13.n128_f32[0];
      v22 = xmmword_1B2244DB0;
      if (v11 <= 0.00000011921)
      {
        v17 = (float32x4_t)v22;
      }
      else
      {
        v17 = vmulq_n_f32(v8, 1.0 / v11);
        v17.i32[3] = 0;
        v22 = (__int128)v17;
      }
      v18 = vmulq_n_f32(v17, v12);
      v18.i32[3] = 0;
      v21 = vaddq_f32(v7, v18);
      (*(void (**)(_QWORD *, __int128 *, float32x4_t *, __n128))(*a5 + 32))(a5, &v22, &v21, v13);
      result = (_BYTE *)a5[1];
      if (*((_DWORD *)result + 200))
      {
        v19 = (float32x4_t *)*((_QWORD *)result + 98);
        v20 = *(float32x4_t **)(a5[2] + 16);
        if (v19 == v20)
          v20 = *(float32x4_t **)(a5[3] + 16);
        else
          v19 = *(float32x4_t **)(a5[3] + 16);
        return sub_1B21ED270(result, v19 + 1, v20 + 1);
      }
    }
    else if (*((_DWORD *)result + 200))
    {
      v14 = (float32x4_t *)*((_QWORD *)result + 98);
      v15 = *(float32x4_t **)(a5[2] + 16);
      if (v14 == v15)
      {
        v16 = v14 + 1;
        v15 = *(float32x4_t **)(a5[3] + 16);
      }
      else
      {
        v16 = (float32x4_t *)(*(_QWORD *)(a5[3] + 16) + 16);
      }
      return sub_1B21ED270(result, v16, v15 + 1);
    }
  }
  return result;
}

float sub_1B21DCA1C()
{
  return 1.0;
}

void sub_1B21DCA24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = sub_1B21FF5F0(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          sub_1B21FF5FC(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

uint64_t sub_1B21DCB04(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v11;

  v11 = sub_1B21CDEB8((_QWORD *)a1, a3);
  *v11 = &off_1E63CDE40;
  *((_BYTE *)v11 + 16) = 0;
  v11[3] = a2;
  *((_BYTE *)v11 + 32) = a6;
  if (!a2)
  {
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16));
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_1B21DCB98(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CDE40;
  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return nullsub_16(a1);
}

void sub_1B21DCBE8(uint64_t a1)
{
  sub_1B21DCB98(a1);
  JUMPOUT(0x1B5E22E18);
}

_BYTE *sub_1B21DCC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  _BYTE v20[32];
  float32x4_t v21[8];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  result = *(_BYTE **)(a1 + 24);
  if (result)
  {
    v9 = *(_BYTE *)(a1 + 32) ? a3 : a2;
    v10 = *(_BYTE *)(a1 + 32) ? a2 : a3;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(v10 + 8);
    a5[1] = result;
    v13 = sub_1B21ED14C((uint64_t)result);
    sub_1B21CD7DC((uint64_t)v20, v11, v12, v13);
    v22 = 1566444395;
    v14 = *(float32x4_t **)(v9 + 24);
    v15 = v14[1];
    v21[0] = *v14;
    v21[1] = v15;
    v16 = v14[3];
    v21[2] = v14[2];
    v21[3] = v16;
    v17 = *(float32x4_t **)(v10 + 24);
    v21[4] = *v17;
    v21[5] = v17[1];
    v21[6] = v17[2];
    v21[7] = v17[3];
    result = (_BYTE *)sub_1B21CD7F4((uint64_t)v20, v21, (uint64_t)a5, *(_QWORD *)(a4 + 24), *(unsigned __int8 *)(a1 + 32));
    if (*(_BYTE *)(a1 + 16))
    {
      result = (_BYTE *)a5[1];
      if (*((_DWORD *)result + 200))
      {
        v18 = (float32x4_t *)*((_QWORD *)result + 98);
        v19 = *(float32x4_t **)(a5[2] + 16);
        if (v18 == v19)
          v19 = *(float32x4_t **)(a5[3] + 16);
        else
          v18 = *(float32x4_t **)(a5[3] + 16);
        return sub_1B21ED270(result, v18 + 1, v19 + 1);
      }
    }
  }
  return result;
}

float sub_1B21DCD4C()
{
  return 1.0;
}

void sub_1B21DCD54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = sub_1B21FF5F0(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          sub_1B21FF5FC(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void sub_1B21DCE34(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && *(_BYTE *)(a1 + 24))
    sub_1B21FF5FC(v2);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t sub_1B21DCE74(uint64_t a1)
{
  sub_1B21DCE34(a1);
  return sub_1B1810570(a1);
}

uint64_t sub_1B21DCE98(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void sub_1B21DCEAC(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 4);
  if (v4 < a2)
  {
    v5 = v4;
    if (*(_DWORD *)(a1 + 8) < a2)
    {
      if (a2)
      {
        v6 = sub_1B21FF5F0(8 * a2, 16);
        v4 = *(_DWORD *)(a1 + 4);
      }
      else
      {
        v6 = 0;
      }
      if (v4 >= 1)
      {
        v7 = 0;
        v8 = 8 * v4;
        do
        {
          *(_QWORD *)(v6 + v7) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v7);
          v7 += 8;
        }
        while (v8 != v7);
      }
      v9 = *(_QWORD *)(a1 + 16);
      if (v9 && *(_BYTE *)(a1 + 24))
        sub_1B21FF5FC(v9);
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = a2;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5++) = 0;
    while (a2 != v5);
  }
  *(_DWORD *)(a1 + 4) = a2;
}

void sub_1B21DCF7C(uint64_t a1, int a2)
{
  uint64_t v4;
  _DWORD *v5;

  sub_1B21DCEAC(a1, a2);
  if (a2 >= 1)
  {
    v4 = 0;
    v5 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4);
    do
    {
      *(v5 - 1) = v4;
      *v5 = 1;
      ++v4;
      v5 += 2;
    }
    while (a2 != v4);
  }
}

uint64_t sub_1B21DCFD0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;

  v1 = *(unsigned int *)(result + 4);
  if ((int)v1 > 0)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 16);
    do
    {
      v4 = (_DWORD *)(v3 + 8 * v2);
      v5 = *v4;
      LODWORD(v6) = v2;
      if (v2 != v5)
      {
        v7 = (_DWORD *)(v3 + 8 * v2);
        do
        {
          v8 = 8 * (int)v5;
          *v7 = *(_DWORD *)(v3 + v8);
          v6 = *(int *)(v3 + v8);
          v7 = (_DWORD *)(v3 + 8 * v6);
          LODWORD(v5) = *v7;
        }
        while ((_DWORD)v6 != *v7);
      }
      *v4 = v6;
      ++v2;
    }
    while (v2 != v1);
    if ((int)v1 >= 2)
      return sub_1B21DD05C(result, (uint64_t)&v9, 0, (int)v1 - 1);
  }
  return result;
}

uint64_t sub_1B21DD05C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v7 = result;
  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * (v9 >> 1));
    v11 = a4;
    do
    {
      v12 = *(_QWORD *)(v7 + 16);
      v13 = v12 + 8 * a3 - 8;
      v14 = a3;
      do
      {
        v15 = *(_DWORD *)(v13 + 8);
        v13 += 8;
        ++v14;
      }
      while (v15 < (int)v10);
      a3 = v14 - 1;
      v16 = 8 * v11;
      v17 = v11;
      do
      {
        v18 = *(_DWORD *)(v12 + v16);
        v16 -= 8;
        --v17;
      }
      while (v18 > (int)v10);
      v11 = v17 + 1;
      if (a3 <= v17 + 1)
      {
        v19 = *(_QWORD *)v13;
        *(_QWORD *)v13 = *(_QWORD *)(v12 + v16 + 8);
        *(_QWORD *)(*(_QWORD *)(v7 + 16) + v16 + 8) = v19;
        a3 = v14;
        v11 = v17;
      }
    }
    while (a3 <= v11);
    if (v11 > v8)
      result = sub_1B21DD05C(v7, a2);
  }
  while (a3 < a4);
  return result;
}

float32x4_t sub_1B21DD13C(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9 = *(float32x4_t *)(a2 + 48);
  v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  v11 = vaddq_f32(a1[3], v10);
  v12 = vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B22CA020));
  v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B22CA020));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = vsubq_f32(v9, v12);
  v15.i32[3] = 0;
  *a3 = v15;
  result = vaddq_f32(v9, v12);
  *a4 = result;
  return result;
}

float32_t sub_1B21DD1F0(float32x4_t *a1, float32x2_t *a2, float a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32_t result;
  __int32 v11;
  float32x4_t v12;
  float32x4_t v13;

  v13 = a1[3];
  v12.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7 = v12;
  v7.i32[1] = v11;
  v7.f32[2] = v6;
  v8 = vaddq_f32(v13, v7);
  v7.f32[0] = (float)(v8.f32[2] + v8.f32[2]) * (float)(v8.f32[2] + v8.f32[2]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  v9 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v9, v9), a3 / 12.0);
  result = (float)(a3 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8).i32[1]), v8.f32[0], v8.f32[0]);
  a2[1].f32[0] = result;
  a2[1].i32[1] = 0;
  return result;
}

void sub_1B21DD2BC(_QWORD *a1)
{
  uint64_t v1;

  sub_1B21E4670(a1);
  sub_1B21FF5FC(v1);
}

float32x4_t sub_1B21DD2D0(float32x4_t *a1, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = a1[2];
  v9 = vaddq_f32(a1[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B21E1004(a1, a2);
  result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B21DD394()
{
  return "Box2d";
}

float32x4_t sub_1B21DD3A0(float32x4_t *a1, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

void sub_1B21DD48C(float32x4_t *a1@<X0>, float32x2_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  float v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  __int32 v10;
  float32x4_t v11;
  float32x4_t v12;

  v12 = a1[3];
  v11.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v10 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7 = v11;
  v7.i32[1] = v10;
  v7.f32[2] = v6;
  v9 = vaddq_f32(v12, v7);
  v7.i32[0] = a2[1].i32[0];
  v8 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)v9.f32, (int8x8_t)vneg_f32(*(float32x2_t *)v9.f32));
  v9.i32[0] = v9.i32[2];
  *a3 = v8;
  if (v7.f32[0] < 0.0)
    v9.f32[0] = -v9.f32[2];
  a3[1].i32[0] = v9.i32[0];
  a3[1].i32[1] = 0;
}

uint64_t sub_1B21DD540@<X0>(uint64_t result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;

  if (a2[1].f32[0] < 0.0)
    v3 = -*(float *)(result + 56);
  else
    v3 = *(float *)(result + 56);
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
  *(float *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = 0;
  return result;
}

uint64_t sub_1B21DD578(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;

  if (a4 >= 1)
  {
    v4 = a4;
    v5 = (float *)(a3 + 12);
    v6 = (float *)(a2 + 8);
    do
    {
      if (*v6 < 0.0)
        v7 = -*(float *)(result + 56);
      else
        v7 = *(float *)(result + 56);
      *(int8x8_t *)(v5 - 3) = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v6 - 2)), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
      *(v5 - 1) = v7;
      *v5 = 0.0;
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B21DD5D0()
{
  return 6;
}

float sub_1B21DD5D8(uint64_t a1, signed int a2, uint64_t a3)
{
  float result;
  int v4;
  int v5;

  if (a2 <= 5)
  {
    result = flt_1B22CA0C0[a2];
    v4 = dword_1B22CA0D8[a2];
    v5 = dword_1B22CA0F0[a2];
    *(float *)a3 = result;
    *(_DWORD *)(a3 + 4) = v4;
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 12) = 0;
  }
  return result;
}

uint64_t sub_1B21DD614()
{
  return 4;
}

uint64_t sub_1B21DD61C()
{
  return 12;
}

uint64_t sub_1B21DD624(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 > 0xB)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = dword_1B22CA030[a2];
    v8 = dword_1B22CA060[a2];
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v8, a4);
}

__n128 sub_1B21DD6A0(__n128 *a1, unsigned __int32 a2, _OWORD *a3)
{
  __n128 result;
  int8x8_t v4;
  int32x2_t v5;
  __int128 v6;

  result = a1[3];
  v4.i32[0] = a2;
  v4.i32[1] = a2 >> 1;
  v5 = (int32x2_t)vand_s8(v4, (int8x8_t)0x100000001);
  *(float32x2_t *)&v6 = vmla_f32(vmul_f32(vcvt_f32_s32(v5), vneg_f32((float32x2_t)result.n128_u64[0])), vcvt_f32_s32((int32x2_t)veor_s8((int8x8_t)v5, (int8x8_t)0x100000001)), (float32x2_t)result.n128_u64[0]);
  _S3 = (float)((a2 & 4) == 0);
  __asm { FMLA            S2, S3, V0.S[2] }
  *((_QWORD *)&v6 + 1) = _S2;
  *a3 = v6;
  return result;
}

double sub_1B21DD6FC(uint64_t a1, int8x16_t *a2, _OWORD *a3, uint64_t a4)
{
  int8x16_t v7;
  int8x16_t v8;
  double result;
  int8x16_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;

  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 256))(a1, &v12, a4);
  v7.i64[0] = v12;
  v7.i64[1] = v13;
  *a2 = v7;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v10 = veorq_s8(v7, v8);
  (*(void (**)(__int128 *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a1 + 128))(&v11, a1, &v10);
  result = *(double *)&v11;
  *a3 = v11;
  return result;
}

BOOL sub_1B21DD788(uint64_t a1, float *a2, float a3)
{
  __int128 v3;
  float v4;
  float v5;

  v3 = *(_OWORD *)(a1 + 48);
  if (*a2 <= (float)(*(float *)&v3 + a3)
    && *a2 >= (float)((float)-*(float *)&v3 - a3)
    && (v4 = a2[1], v4 <= (float)(*((float *)&v3 + 1) + a3))
    && v4 >= (float)((float)-*((float *)&v3 + 1) - a3)
    && (v5 = a2[2], v5 <= (float)(*((float *)&v3 + 2) + a3)))
  {
    return v5 >= (float)((float)-*((float *)&v3 + 2) - a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B21DD800()
{
  return 6;
}

float sub_1B21DD808(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  int v4;
  float v5;
  float result;

  if (a3 <= 5)
  {
    v3 = dword_1B22CA0D8[a3];
    v4 = dword_1B22CA0F0[a3];
    v5 = *(float *)(a1 + 4 * (qword_1B22CA090[a3] & 3) + 48);
    *(float *)a2 = flt_1B22CA0C0[a3];
    *(_DWORD *)(a2 + 4) = v3;
    result = -v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(float *)(a2 + 12) = -v5;
  }
  return result;
}

uint64_t sub_1B21DD85C(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v9;
  float32x4_t v10;

  sub_1B21E464C(a1);
  *(_QWORD *)v4 = &off_1E63CB8C0;
  *(_DWORD *)(v4 + 8) = 0;
  sub_1B21DD90C(v4, a2->f32, 0.1);
  v10.i64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v9 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
  v5 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v6 = v10;
  v6.i32[1] = v9;
  v6.f32[2] = v5;
  v7 = vsubq_f32(vmulq_f32(*a2, *(float32x4_t *)(a1 + 32)), v6);
  v7.i32[3] = 0;
  *(float32x4_t *)(a1 + 48) = v7;
  return a1;
}

void sub_1B21DD90C(uint64_t a1, float *a2, float a3)
{
  float v4;
  float v5;
  uint64_t v6;
  float v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a2 >= v5;
  if (*a2 >= v5)
    v4 = a2[1];
  if (v4 >= a2[2])
    v6 = 2;
  v7 = a2[v6] * a3;
  if (v7 < (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
    (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 88))(a1, v7);
}

float32x4_t sub_1B21DD990(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9 = *(float32x4_t *)(a2 + 48);
  v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  v11 = vaddq_f32(a1[3], v10);
  v12 = vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B22CA020));
  v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B22CA020));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = vsubq_f32(v9, v12);
  v15.i32[3] = 0;
  *a3 = v15;
  result = vaddq_f32(v9, v12);
  *a4 = result;
  return result;
}

float32_t sub_1B21DDA44(float32x4_t *a1, float32x2_t *a2, float a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32_t result;
  __int32 v11;
  float32x4_t v12;
  float32x4_t v13;

  v13 = a1[3];
  v12.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7 = v12;
  v7.i32[1] = v11;
  v7.f32[2] = v6;
  v8 = vaddq_f32(v13, v7);
  v7.f32[0] = (float)(v8.f32[2] + v8.f32[2]) * (float)(v8.f32[2] + v8.f32[2]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  v9 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v9, v9), a3 / 12.0);
  result = (float)(a3 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8).i32[1]), v8.f32[0], v8.f32[0]);
  a2[1].f32[0] = result;
  a2[1].i32[1] = 0;
  return result;
}

void sub_1B21DDB10(_QWORD *a1)
{
  uint64_t v1;

  sub_1B21E4670(a1);
  sub_1B21FF5FC(v1);
}

float32x4_t sub_1B21DDB24(float32x4_t *a1, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = a1[2];
  v9 = vaddq_f32(a1[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B21E1004(a1, a2);
  result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B21DDBE8()
{
  return "Box";
}

float32x4_t sub_1B21DDBF4(float32x4_t *a1, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

void sub_1B21DDCE0(float32x4_t *a1@<X0>, float32x2_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  float v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  __int32 v10;
  float32x4_t v11;
  float32x4_t v12;

  v12 = a1[3];
  v11.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v10 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7 = v11;
  v7.i32[1] = v10;
  v7.f32[2] = v6;
  v9 = vaddq_f32(v12, v7);
  v7.i32[0] = a2[1].i32[0];
  v8 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)v9.f32, (int8x8_t)vneg_f32(*(float32x2_t *)v9.f32));
  v9.i32[0] = v9.i32[2];
  *a3 = v8;
  if (v7.f32[0] < 0.0)
    v9.f32[0] = -v9.f32[2];
  a3[1].i32[0] = v9.i32[0];
  a3[1].i32[1] = 0;
}

uint64_t sub_1B21DDD94@<X0>(uint64_t result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;

  if (a2[1].f32[0] < 0.0)
    v3 = -*(float *)(result + 56);
  else
    v3 = *(float *)(result + 56);
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
  *(float *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = 0;
  return result;
}

uint64_t sub_1B21DDDCC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;

  if (a4 >= 1)
  {
    v4 = a4;
    v5 = (float *)(a3 + 12);
    v6 = (float *)(a2 + 8);
    do
    {
      if (*v6 < 0.0)
        v7 = -*(float *)(result + 56);
      else
        v7 = *(float *)(result + 56);
      *(int8x8_t *)(v5 - 3) = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v6 - 2)), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
      *(v5 - 1) = v7;
      *v5 = 0.0;
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B21DDE24()
{
  return 6;
}

float sub_1B21DDE2C(uint64_t a1, signed int a2, uint64_t a3)
{
  float result;
  int v4;
  int v5;

  if (a2 <= 5)
  {
    result = flt_1B22CA198[a2];
    v4 = dword_1B22CA1B0[a2];
    v5 = dword_1B22CA1C8[a2];
    *(float *)a3 = result;
    *(_DWORD *)(a3 + 4) = v4;
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 12) = 0;
  }
  return result;
}

uint64_t sub_1B21DDE68()
{
  return 8;
}

uint64_t sub_1B21DDE70()
{
  return 12;
}

uint64_t sub_1B21DDE78(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 > 0xB)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = dword_1B22CA108[a2];
    v8 = dword_1B22CA138[a2];
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v8, a4);
}

float32x4_t sub_1B21DDEF4(float32x4_t *a1, unsigned __int32 a2, float32x4_t *a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t result;
  __int32 v15;
  float32x4_t v16;
  float32x4_t v17;

  v17 = a1[3];
  v16.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v15 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7 = v16;
  v7.i32[1] = v15;
  v7.f32[2] = v6;
  result = vaddq_f32(v17, v7);
  v7.i32[0] = a2;
  v7.i32[1] = a2 >> 1;
  *(int8x8_t *)v7.f32 = vand_s8(*(int8x8_t *)v7.f32, (int8x8_t)0x100000001);
  *(float32x2_t *)v7.f32 = vmla_f32(vmul_f32(vcvt_f32_s32(*(int32x2_t *)v7.f32), vneg_f32(*(float32x2_t *)result.f32)), vcvt_f32_s32((int32x2_t)veor_s8(*(int8x8_t *)v7.f32, (int8x8_t)0x100000001)), *(float32x2_t *)result.f32);
  _S3 = (float)((a2 & 4) == 0);
  __asm { FMLA            S2, S3, V0.S[2] }
  v7.i64[1] = _S2;
  *a3 = v7;
  return result;
}

double sub_1B21DDFCC(uint64_t a1, int8x16_t *a2, _OWORD *a3, uint64_t a4)
{
  int8x16_t v7;
  int8x16_t v8;
  double result;
  int8x16_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;

  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 256))(a1, &v12, a4);
  v7.i64[0] = v12;
  v7.i64[1] = v13;
  *a2 = v7;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v10 = veorq_s8(v7, v8);
  (*(void (**)(__int128 *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a1 + 128))(&v11, a1, &v10);
  result = *(double *)&v11;
  *a3 = v11;
  return result;
}

BOOL sub_1B21DE058(uint64_t a1, float *a2, float a3)
{
  __int128 v3;
  float v4;
  float v5;

  v3 = *(_OWORD *)(a1 + 48);
  if (*a2 <= (float)(*(float *)&v3 + a3)
    && *a2 >= (float)((float)-*(float *)&v3 - a3)
    && (v4 = a2[1], v4 <= (float)(*((float *)&v3 + 1) + a3))
    && v4 >= (float)((float)-*((float *)&v3 + 1) - a3)
    && (v5 = a2[2], v5 <= (float)(*((float *)&v3 + 2) + a3)))
  {
    return v5 >= (float)((float)-*((float *)&v3 + 2) - a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B21DE0D0()
{
  return 6;
}

float sub_1B21DE0D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  int v4;
  float v5;
  float result;

  if (a3 <= 5)
  {
    v3 = dword_1B22CA1B0[a3];
    v4 = dword_1B22CA1C8[a3];
    v5 = *(float *)(a1 + 4 * (qword_1B22CA168[a3] & 3) + 48);
    *(float *)a2 = flt_1B22CA198[a3];
    *(_DWORD *)(a2 + 4) = v3;
    result = -v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(float *)(a2 + 12) = -v5;
  }
  return result;
}

float32x4_t *sub_1B21DE12C(float32x4_t *a1, uint64_t a2, char a3, int a4)
{
  float *v7;

  v7 = sub_1B21E8184(a1->f32, a2);
  *(_QWORD *)v7 = off_1E63CCF88;
  *((_QWORD *)v7 + 9) = 0;
  *((_QWORD *)v7 + 10) = 0;
  *((_BYTE *)v7 + 88) = a3;
  *((_BYTE *)v7 + 89) = 0;
  *((_DWORD *)v7 + 2) = 21;
  if (a4)
    sub_1B21DE18C(a1);
  return a1;
}

void sub_1B21DE18C(float32x4_t *a1)
{
  uint64_t v2;
  float32x4_t *v3;
  int32x2_t v4;

  if (a1[5].i8[9])
  {
    (**(void (***)(uint64_t))a1[4].i64[1])(a1[4].i64[1]);
    sub_1B21FF5FC(a1[4].i64[1]);
  }
  v2 = sub_1B21FF5F0(256, 16);
  sub_1B21E3E84(v2);
  a1[4].i64[1] = (uint64_t)v3;
  sub_1B21E3EBC(v3, a1[4].i64[0], a1[5].u8[8], a1 + 2, a1 + 3, v4);
  a1[5].i8[9] = 1;
}

double sub_1B21DE1FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E63CCF88;
  if (*(_BYTE *)(a1 + 89))
  {
    (***(void (****)(_QWORD))(a1 + 72))(*(_QWORD *)(a1 + 72));
    sub_1B21FF5FC(*(_QWORD *)(a1 + 72));
  }
  return j_nullsub_16(a1);
}

void sub_1B21DE24C(uint64_t a1)
{
  uint64_t v1;

  sub_1B21DE1FC(a1);
  sub_1B21FF5FC(v1);
}

float32x4_t *sub_1B21DE260(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float32x4_t *v11;
  uint64_t v12;
  _QWORD v14[3];

  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(float32x4_t **)(a1 + 72);
  v14[0] = &off_1E63FC6E0;
  v14[1] = v12;
  v14[2] = a2;
  return sub_1B21CC6D0(v11, (uint64_t)v14, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

float32x4_t *sub_1B21DE298(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  float32x4_t *v13;
  uint64_t v14;
  _QWORD v16[3];

  v14 = *(_QWORD *)(a1 + 64);
  v13 = *(float32x4_t **)(a1 + 72);
  v16[0] = &off_1E63FC708;
  v16[1] = v14;
  v16[2] = a2;
  return sub_1B21CC6FC(v13, (uint64_t)v16, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1B21DE2D0(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[10];

  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v7[0] = &off_1E63FC730;
  v7[1] = v5;
  v7[2] = a2;
  return sub_1B21CB9C8(v4, (uint64_t)v7, a3, a4);
}

void sub_1B21DE308(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v4;
  int8x16_t v5;

  v4 = vsubq_f32(*(float32x4_t *)(*(uint64_t (**)(float32x4_t *))(a1->i64[0] + 56))(a1), *a2);
  v4.i32[3] = 0;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0] > 0.00000011921)
  {
    sub_1B21E8430(a1->f32, a2);
    sub_1B21DE18C(a1);
  }
}

const char *sub_1B21DE37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  sub_1B21DF5E8(a1, a2, a3);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 112))(*(_QWORD *)(a1 + 64), a2 + 16, a3);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  if (!*(_QWORD *)(a1 + 72) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) & 1) != 0)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, *(_QWORD *)(a1 + 72));
    if (v6)
    {
      *(_QWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 72));
      *(_QWORD *)(a2 + 56) = 0;
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(a3, v9, 1);
      v11 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), *(_QWORD *)(v10 + 8), a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v10, v11, 1213612625, *(_QWORD *)(a1 + 72));
    }
  }
  if (!*(_QWORD *)(a1 + 80) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) & 2) != 0)
  {
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, *(_QWORD *)(a1 + 80));
    if (v7)
    {
      *(_QWORD *)(a2 + 64) = v7;
    }
    else
    {
      *(_QWORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 80));
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80));
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(a3, v12, 1);
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v13 + 8), a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v13, v14, 1346456916, *(_QWORD *)(a1 + 80));
    }
  }
  return "btTriangleMeshShapeData";
}

uint64_t sub_1B21DE55C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v5, 1);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), *(_QWORD *)(v6 + 8), a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, v6, v7, 1213612625, *(_QWORD *)(a1 + 72));
  }
  return result;
}

uint64_t sub_1B21DE5FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v5, 1);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v6 + 8), a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, v6, v7, 1346456916, *(_QWORD *)(a1 + 80));
  }
  return result;
}

const char *sub_1B21DE69C()
{
  return "BVHTRIANGLEMESH";
}

uint64_t sub_1B21DE6A8(uint64_t result, float a2)
{
  *(float *)(result + 24) = a2;
  return result;
}

float sub_1B21DE6B0(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

uint64_t sub_1B21DE6B8()
{
  return 80;
}

uint64_t sub_1B21DE6C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

void sub_1B21DE6CC()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21DE6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float64x2_t *v14;
  __int128 v15;
  float v16;
  float *v17;
  float32x2_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[56];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &v25, (char *)&v24 + 4, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  v6 = 0;
  v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  v8 = *(float32x2_t **)(a1 + 8);
  v9 = v20;
  v10 = v24;
  v11 = v23;
  v12 = v25;
  do
  {
    if (v9 == 5)
    {
      v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    else if (v9 == 3)
    {
      v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else
    {
      v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      v16 = v14[1].f64[0];
      v17 = (float *)&v8[3];
    }
    else
    {
      v18 = *(float32x2_t *)&v14->f64[0];
      v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&v15 = vmul_f32(v18, v8[2]);
      v16 = v8[3].f32[0];
    }
    *((_QWORD *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)&v26[16 * v6-- + 32] = v15;
  }
  while (v6 != -3);
  (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v26, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

void sub_1B21DE870()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21DE884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float64x2_t *v14;
  __int128 v15;
  float v16;
  float *v17;
  float32x2_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[56];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &v25, (char *)&v24 + 4, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  v6 = 0;
  v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  v8 = *(float32x2_t **)(a1 + 8);
  v9 = v20;
  v10 = v24;
  v11 = v23;
  v12 = v25;
  do
  {
    if (v9 == 3)
    {
      v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else if (v9 == 5)
    {
      v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    else
    {
      v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      v16 = v14[1].f64[0];
      v17 = (float *)&v8[3];
    }
    else
    {
      v18 = *(float32x2_t *)&v14->f64[0];
      v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&v15 = vmul_f32(v18, v8[2]);
      v16 = v8[3].f32[0];
    }
    *((_QWORD *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)&v26[16 * v6-- + 32] = v15;
  }
  while (v6 != -3);
  (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v26, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

void sub_1B21DEA14()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21DEA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float64x2_t *v14;
  __int128 v15;
  float v16;
  float *v17;
  float32x2_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, int *, int *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &v26, &v25, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  v6 = 0;
  v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  v8 = *(float32x2_t **)(a1 + 8);
  v9 = v20;
  v10 = v24;
  v11 = v23;
  v12 = v26;
  do
  {
    if (v9 == 2)
    {
      v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    else if (v9 == 3)
    {
      v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else
    {
      v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      v16 = v14[1].f64[0];
      v17 = (float *)&v8[3];
    }
    else
    {
      v18 = *(float32x2_t *)&v14->f64[0];
      v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&v15 = vmul_f32(v18, v8[2]);
      v16 = v8[3].f32[0];
    }
    *((_QWORD *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)(a1 + 64 + 16 * v6--) = v15;
  }
  while (v6 != -3);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1 + 32, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

float sub_1B21DEB8C(uint64_t a1, float a2, float a3)
{
  uint64_t v5;
  float result;

  sub_1B21E0FCC(a1);
  *(_QWORD *)v5 = &off_1E63CBE58;
  *(_DWORD *)(v5 + 8) = 10;
  *(_DWORD *)(v5 + 72) = 1;
  result = a3 * 0.5;
  *(float *)(v5 + 48) = a2;
  *(float *)(v5 + 52) = a3 * 0.5;
  *(float *)(v5 + 56) = a2;
  *(_DWORD *)(v5 + 60) = 0;
  return result;
}

void sub_1B21DEBE0(int *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v5;
  int8x16_t v6;
  float v7;
  float32x4_t v8;
  uint64_t v9;
  float v10;
  __int32 v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v5 = *a2;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0];
  if (v7 >= 0.0001)
    v8 = vmulq_n_f32(v5, 1.0 / sqrtf(v7));
  else
    v8 = (float32x4_t)xmmword_1B2244DB0;
  v20 = v8;
  v9 = a1[18];
  v10 = *(float *)&a1[((int)v9 + 2) % 3 + 12];
  v11 = a1[v9 + 12];
  v21 = 0uLL;
  v21.i32[v9] = v11;
  v12 = vmulq_n_f32(v8, v10);
  v12.i32[3] = 0;
  v19 = v12;
  v13 = vsubq_f32(vaddq_f32(v21, v12), vmulq_n_f32(v8, (*(float (**)(int *))(*(_QWORD *)a1 + 96))(a1)));
  v13.i32[3] = 0;
  v14 = (int8x16_t)vmulq_f32(v20, v13);
  v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
  v16 = -1.0e18;
  if (v15 > -1.0e18)
  {
    *a3 = v13;
    v16 = v15;
  }
  v21 = 0uLL;
  v21.f32[a1[18]] = -*(float *)&a1[a1[18] + 12];
  v17 = vsubq_f32(vaddq_f32(v21, v19), vmulq_n_f32(v20, (*(float (**)(int *))(*(_QWORD *)a1 + 96))(a1)));
  v17.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v20, v17);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0] > v16)*a3 = v17;
}

void sub_1B21DED64(_DWORD *a1, float32x4_t *a2, float32x4_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v11;
  const float *v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a4 >= 1)
  {
    v28 = v7;
    v29 = v6;
    v30 = v4;
    v31 = v5;
    v11 = a1 + 12;
    v12 = (const float *)&a1[(a1[18] + 2) % 3 + 12];
    v13 = vld1q_dup_f32(v12);
    v14 = a4;
    v26 = v13;
    do
    {
      v27 = 0uLL;
      v27.i32[a1[18]] = v11[a1[18]];
      v15 = vmulq_f32(v13, *a2);
      v15.i32[3] = 0;
      v25 = vaddq_f32(v27, v15);
      v16 = (*(float (**)(_DWORD *))(*(_QWORD *)a1 + 96))(a1);
      v17 = *a2;
      v18 = vsubq_f32(v25, vmulq_n_f32(*a2, v16));
      v18.i32[3] = 0;
      v19 = (int8x16_t)vmulq_f32(*a2, v18);
      v20 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0];
      v21 = -1.0e18;
      if (v20 > -1.0e18)
      {
        *a3 = v18;
        v17 = *a2;
        v21 = v20;
      }
      v27 = 0uLL;
      v27.f32[a1[18]] = -*(float *)&v11[a1[18]];
      v22 = vmulq_f32(v26, v17);
      v22.i32[3] = 0;
      v23 = vsubq_f32(vaddq_f32(v27, v22), vmulq_n_f32(*a2, (*(float (**)(_DWORD *))(*(_QWORD *)a1 + 96))(a1)));
      v23.i32[3] = 0;
      v24 = (int8x16_t)vmulq_f32(*a2, v23);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > v21)*a3 = v23;
      ++a3;
      ++a2;
      --v14;
      v13 = v26;
    }
    while (v14);
  }
}

float32_t sub_1B21DEEF8(uint64_t a1, float32x2_t *a2, float a3)
{
  float32_t v3;
  float v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32_t result;
  unsigned int v10;
  float v11;
  unsigned int v12;

  *((float *)&v10 + *(int *)(a1 + 72)) = *(float *)(a1 + 48 + 4 * *(int *)(a1 + 72))
                                       + *((float *)&v10 + *(int *)(a1 + 72));
  v3 = (float)((float)(v11 + 0.04) + (float)(v11 + 0.04)) * (float)((float)(v11 + 0.04) + (float)(v11 + 0.04));
  v4 = a3 * 0.083333;
  v5 = vadd_f32((float32x2_t)__PAIR64__(v10, v12), (float32x2_t)vdup_n_s32(0x3D23D70Au));
  v6 = vadd_f32(v5, v5);
  v7 = vmul_f32(v6, v6);
  v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0);
  v8.f32[0] = v3;
  *a2 = vmul_n_f32(vadd_f32(v7, v8), v4);
  result = v4 * (float)(v7.f32[1] + v3);
  a2[1].f32[0] = result;
  return result;
}

void sub_1B21DEFC4(uint64_t a1)
{
  uint64_t v1;

  nullsub_16(a1);
  sub_1B21FF5FC(v1);
}

float32x4_t sub_1B21DEFD8(int *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  int32x4_t v10;
  unsigned int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t result;
  unsigned int v20;
  unsigned int v21;
  float32x4_t v22;

  v8 = a1[18];
  v9 = a1[((int)v8 + 2) % 3 + 12];
  v10 = vzip1q_s32((int32x4_t)v9, (int32x4_t)v9);
  v10.i32[2] = a1[((int)v8 + 2) % 3 + 12];
  v22 = (float32x4_t)v10;
  v22.f32[v8] = *(float *)&v10.i32[2] + *(float *)&a1[v8 + 12];
  v21 = COERCE_UNSIGNED_INT64((*(double (**)(int *))(*(_QWORD *)a1 + 96))(a1));
  v20 = COERCE_UNSIGNED_INT64((*(double (**)(int *))(*(_QWORD *)a1 + 96))(a1));
  *(float *)&v11 = (*(float (**)(int *))(*(_QWORD *)a1 + 96))(a1);
  v12.i64[0] = __PAIR64__(v20, v21);
  v12.i64[1] = v11;
  v13 = vaddq_f32(v22, v12);
  v14 = *(float32x4_t *)(a2 + 48);
  v15 = vmulq_f32(v13, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v16 = (int8x16_t)vmulq_f32(v13, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B22CA020));
  v17 = (int8x16_t)vmulq_f32(v13, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B22CA020));
  v17.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v18 = vsubq_f32(v14, v15);
  v18.i32[3] = 0;
  *a3 = v18;
  result = vaddq_f32(v14, v15);
  *a4 = result;
  return result;
}

float32x4_t sub_1B21DF120(float32x4_t *a1, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = a1[2];
  v9 = vaddq_f32(a1[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B21E1004(a1, a2);
  result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B21DF1E4()
{
  return "CapsuleShape";
}

uint64_t sub_1B21DF1F0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + *(int *)(result + 72)) = 1065353216;
  return result;
}

float32x4_t sub_1B21DF204(float32x4_t *a1, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

uint64_t sub_1B21DF2F0()
{
  return 64;
}

const char *sub_1B21DF2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  sub_1B21DF5E8(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
  return "btCapsuleShapeData";
}

uint64_t sub_1B21DF374()
{
  return 0;
}

__n128 sub_1B21DF380(uint64_t a1, __n128 *a2, float *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  __n128 result;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v13[0] = xmmword_1B2244DB0;
  v13[1] = xmmword_1B2244DD0;
  v13[2] = xmmword_1B2244D90;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, v13, &v12, &v11);
  v5 = v11;
  v6 = v12;
  v7 = vsubq_f32(v11, v12);
  v7.i32[3] = 0;
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  *a3 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0])* 0.5;
  v9 = vaddq_f32(v5, v6);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  result = (__n128)vmulq_f32(v9, v6);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

float sub_1B21DF428(uint64_t a1, float a2)
{
  return (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) * a2;
}

float sub_1B21DF454(uint64_t a1)
{
  int8x16_t v1;
  float v3;
  float32x4_t v4;

  v3 = 0.0;
  (*(void (**)(uint64_t, float32x4_t *, float *))(*(_QWORD *)a1 + 24))(a1, &v4, &v3);
  v1 = (int8x16_t)vmulq_f32(v4, v4);
  return v3
       + sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v1.i8, *(float32x2_t *)v1.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)).f32[0]);
}

float32x4_t sub_1B21DF4A4(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, float32x2_t *a6, float a7)
{
  float32x4_t v12;
  int8x8_t v13;
  float v14;
  float v15;
  int8x16_t v16;
  float v17;
  double v18;
  float32x4_t v19;
  __int128 v20;
  float32x4_t result;
  unsigned int v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;

  (*(void (**)(uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)a1 + 16))(a1, a2, a5, a6);
  v12 = vmulq_n_f32(*a3, a7);
  v13 = (int8x8_t)vcgtz_f32(*(float32x2_t *)v12.f32);
  v24 = vadd_f32(*a5, (float32x2_t)vbsl_s8(v13, (int8x8_t)0x8000000080000000, *(int8x8_t *)v12.f32));
  v25 = vadd_f32(*a6, (float32x2_t)vbsl_s8(v13, *(int8x8_t *)v12.f32, (int8x8_t)0x8000000080000000));
  if (v12.f32[2] <= 0.0)
    v14 = -0.0;
  else
    v14 = v12.f32[2];
  v23 = a6[1].f32[0] + v14;
  if (v12.f32[2] <= 0.0)
    v15 = v12.f32[2];
  else
    v15 = -0.0;
  *(float *)&v22 = a5[1].f32[0] + v15;
  v16 = (int8x16_t)vmulq_f32(*a4, *a4);
  v17 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0]);
  v18 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  *(float *)&v18 = (float)(*(float *)&v18 * v17) * a7;
  v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
  v19.i32[3] = 0;
  *(float32x2_t *)&v20 = v24;
  *((_QWORD *)&v20 + 1) = v22;
  *(_OWORD *)a5->f32 = v20;
  *(float32x2_t *)&v20 = v25;
  *((_QWORD *)&v20 + 1) = LODWORD(v23);
  *(_OWORD *)a6->f32 = v20;
  *(float32x4_t *)a5->f32 = vsubq_f32(*(float32x4_t *)a5->f32, v19);
  result = vaddq_f32(*(float32x4_t *)a6->f32, v19);
  *(float32x4_t *)a6->f32 = result;
  return result;
}

const char *sub_1B21DF5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v6);
  *(_QWORD *)a2 = v7;
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v6);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return "btCollisionShapeData";
}

uint64_t sub_1B21DF66C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *(_QWORD *)(v5 + 8), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6, 1346455635, a1);
}

uint64_t sub_1B21DF6F4()
{
  return 16;
}

uint64_t sub_1B21DF6FC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E63CC050;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1B22C9FA0;
  *(_OWORD *)(a1 + 80) = xmmword_1B22C9FB0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 108) = xmmword_1B22CA1F0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 8) = 31;
  if (a2)
  {
    v3 = sub_1B21FF5F0(96, 16);
    sub_1B21C7BCC(v3);
    *(_QWORD *)(a1 + 96) = v4;
  }
  return a1;
}

_QWORD *sub_1B21DF78C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CC050;
  v2 = a1[12];
  if (v2)
  {
    sub_1B21C7C68(v2);
    sub_1B21FF5FC(a1[12]);
  }
  sub_1B1810570((uint64_t)(a1 + 3));
  return a1;
}

void sub_1B21DF7D8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1B21DF78C(a1);
  sub_1B21FF5FC((uint64_t)v1);
}

__n128 sub_1B21DF7EC(uint64_t a1, __n128 *a2, _DWORD *a3, char a4)
{
  int v8;
  float v9;
  uint64_t i;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;

  ++*(_DWORD *)(a1 + 104);
  v29 = a2[1];
  v30 = *a2;
  v27 = a2[3];
  v28 = a2[2];
  v8 = a3[2];
  v9 = (*(float (**)(_DWORD *))(*(_QWORD *)a3 + 96))(a3);
  (*(void (**)(_DWORD *, __n128 *, __int128 *, __int128 *))(*(_QWORD *)a3 + 16))(a3, a2, &v33, &v32);
  for (i = 0; i != 12; i += 4)
  {
    v11 = a1 + i;
    v12 = *(float *)((char *)&v33 + i);
    if (*(float *)(a1 + i + 64) > v12)
      *(float *)(v11 + 64) = v12;
    v13 = *(float *)((char *)&v32 + i);
    if (*(float *)(v11 + 80) < v13)
      *(float *)(v11 + 80) = v13;
  }
  v14 = *(_QWORD *)(a1 + 96);
  if (v14)
  {
    v31[0] = v33;
    v31[1] = v32;
    v15 = sub_1B21C7E94(v14, v31, *(int *)(a1 + 28));
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_DWORD *)(a1 + 28);
  if (v16 == *(_DWORD *)(a1 + 32))
  {
    v17 = v16 ? 2 * v16 : 1;
    if (v16 < v17)
    {
      if (v17)
      {
        v18 = sub_1B21FF5F0(96 * v17, 16);
        v16 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = 0;
      }
      if (v16 >= 1)
      {
        v19 = 0;
        v20 = 96 * v16;
        do
        {
          v21 = (_OWORD *)(v18 + v19);
          v22 = (_OWORD *)(*(_QWORD *)(a1 + 40) + v19);
          *v21 = *v22;
          v21[1] = v22[1];
          v21[2] = v22[2];
          v21[3] = v22[3];
          v23 = v22[4];
          *(_OWORD *)((char *)v21 + 73) = *(_OWORD *)((char *)v22 + 73);
          v21[4] = v23;
          v19 += 96;
        }
        while (v20 != v19);
      }
      v24 = *(_QWORD *)(a1 + 40);
      if (v24 && *(_BYTE *)(a1 + 48))
        sub_1B21FF5FC(v24);
      *(_BYTE *)(a1 + 48) = 1;
      *(_QWORD *)(a1 + 40) = v18;
      *(_DWORD *)(a1 + 32) = v17;
      v16 = *(_DWORD *)(a1 + 28);
    }
  }
  v25 = *(_QWORD *)(a1 + 40) + 96 * v16;
  *(__n128 *)v25 = v30;
  *(__n128 *)(v25 + 16) = v29;
  result = v27;
  *(__n128 *)(v25 + 32) = v28;
  *(__n128 *)(v25 + 48) = v27;
  *(_QWORD *)(v25 + 64) = a3;
  *(_DWORD *)(v25 + 72) = v8;
  *(float *)(v25 + 76) = v9;
  *(_QWORD *)(v25 + 80) = v15;
  *(_BYTE *)(v25 + 88) = a4;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t sub_1B21DFA10(uint64_t result, int a2, _OWORD *a3, int a4)
{
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;

  v5 = (_QWORD *)result;
  v6 = (_OWORD *)(*(_QWORD *)(result + 40) + 96 * a2);
  *v6 = *a3;
  v6[1] = a3[1];
  v6[2] = a3[2];
  v6[3] = a3[3];
  if (*(_QWORD *)(result + 96))
  {
    v7 = 3 * a2;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 40) + 96 * a2 + 64);
    (*(void (**)(uint64_t, _OWORD *, __int128 *, __int128 *))(*(_QWORD *)v8 + 16))(v8, a3, &v11, &v10);
    v9[0] = v11;
    v9[1] = v10;
    result = sub_1B21C82A8(v5[12], *(_QWORD *)(v5[5] + 32 * v7 + 80), v9);
  }
  if (a4)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 136))(v5);
  return result;
}

void sub_1B21DFAD8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _BYTE v18[25];

  ++*(_DWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
    sub_1B21C842C(v4, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * a2 + 80));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (__int128 *)(v6 + 96 * a2);
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  *(_OWORD *)v18 = v7[4];
  *(_OWORD *)&v18[9] = *(__int128 *)((char *)v7 + 73);
  v12 = 96 * *(int *)(a1 + 28) - 96;
  v13 = (__int128 *)(v6 + v12);
  v14 = v13[1];
  *v7 = *v13;
  v7[1] = v14;
  v15 = v13[3];
  v7[2] = v13[2];
  v7[3] = v15;
  v16 = *(__int128 *)((char *)v13 + 73);
  v7[4] = v13[4];
  *(__int128 *)((char *)v7 + 73) = v16;
  v17 = (_OWORD *)(*(_QWORD *)(a1 + 40) + v12);
  *v17 = v8;
  v17[1] = v9;
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = *(_OWORD *)v18;
  *(_OWORD *)((char *)v17 + 73) = *(_OWORD *)&v18[9];
  if (*(_QWORD *)(a1 + 96))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * a2 + 80) + 40) = a2;
  --*(_DWORD *)(a1 + 28);
}

uint64_t sub_1B21DFBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  ++*(_DWORD *)(a1 + 104);
  v3 = *(unsigned int *)(a1 + 28);
  if ((int)v3 >= 1)
  {
    do
    {
      v5 = v3 - 1;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * (v3 - 1) + 64) == a2)
        sub_1B21DFAD8(a1, v3 - 1);
      v3 = v5;
    }
    while ((unint64_t)(v5 + 1) > 1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_1B21DFC64(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  float v5;
  float v6;
  _BYTE v7[16];
  _BYTE v8[16];

  *(_OWORD *)(result + 64) = xmmword_1B22C9FA0;
  *(_OWORD *)(result + 80) = xmmword_1B22C9FB0;
  if (*(int *)(result + 28) >= 1)
  {
    v1 = result;
    v2 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, _BYTE *))(**(_QWORD **)(*(_QWORD *)(v1 + 40)
                                                                                          + 96 * v2
                                                                                          + 64)
                                                                            + 16))(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 96 * v2 + 64), *(_QWORD *)(v1 + 40) + 96 * v2, v8, v7);
      for (i = 0; i != 12; i += 4)
      {
        v4 = v1 + i;
        v5 = *(float *)&v8[i];
        if (*(float *)(v1 + i + 64) > v5)
          *(float *)(v4 + 64) = v5;
        v6 = *(float *)&v7[i];
        if (*(float *)(v4 + 80) < v6)
          *(float *)(v4 + 80) = v6;
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 28));
  }
  return result;
}

float32x4_t sub_1B21DFD34(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v8;
  unsigned int v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t result;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned int v32;
  unsigned int v33;

  v30 = a1[4];
  v8 = v30;
  v31 = a1[5];
  v8.i32[0] = a1[1].i32[3];
  v29 = (int32x4_t)v8;
  v33 = COERCE_UNSIGNED_INT64((*(double (**)(void))(a1->i64[0] + 96))());
  v32 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&v9 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v10.i32[0] = 0;
  v11 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v29, v10), 0);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = (int8x16_t)vmulq_f32(vaddq_f32(v31, v30), v12);
  v13.i32[3] = 0;
  v14 = a2[1];
  v15 = (float32x4_t)vbicq_s8(v13, v11);
  v16 = (int8x16_t)vmulq_f32(vsubq_f32(v31, v30), v12);
  v16.i32[3] = 0;
  v17 = a2[2];
  v18.i64[0] = __PAIR64__(v32, v33);
  v18.i64[1] = v9;
  v19 = vaddq_f32((float32x4_t)vbicq_s8(v16, v11), v18);
  v20 = vmulq_f32(v15, *a2);
  v21 = (int8x16_t)vmulq_f32(v15, v14);
  v22 = (int8x16_t)vmulq_f32(v15, v17);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  v23 = vaddq_f32(v20, a2[3]);
  v24 = vmulq_f32(v19, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v25 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1B22CA020));
  v26 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)xmmword_1B22CA020));
  v26.i32[3] = 0;
  *(float32x2_t *)v24.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8));
  *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
  v27 = vsubq_f32(v23, v24);
  v27.i32[3] = 0;
  *a3 = v27;
  result = vaddq_f32(v23, v24);
  *a4 = result;
  return result;
}

float32_t sub_1B21DFEA4(uint64_t a1, float32x2_t *a2, float a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x2_t v7;
  float32_t result;
  float32x4_t v9;
  float32x4_t v10;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[0] = xmmword_1B2244DB0;
  v11[1] = xmmword_1B2244DD0;
  v11[2] = xmmword_1B2244D90;
  v12 = 0;
  v13 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, v11, &v10, &v9);
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = vmulq_f32(vsubq_f32(v9, v10), v5);
  v5.f32[0] = (float)(v6.f32[2] + v6.f32[2]) * (float)(v6.f32[2] + v6.f32[2]);
  *(float32x2_t *)v6.f32 = vadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  v7 = (float32x2_t)vrev64_s32(*(int32x2_t *)v6.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0), v7, v7), a3 / 12.0);
  result = (float)(a3 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v6, *(float32x2_t *)&v6).i32[1]), v6.f32[0], v6.f32[0]);
  a2[1].f32[0] = result;
  return result;
}

uint64_t sub_1B21DFF60(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v13;
  _OWORD v14[3];
  float32x4_t v15;

  if (*(int *)(a1 + 28) >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(a1 + 40) + v4;
      v14[0] = *(_OWORD *)v6;
      v14[1] = *(_OWORD *)(v6 + 16);
      v14[2] = *(_OWORD *)(v6 + 32);
      v15 = *(float32x4_t *)(v6 + 48);
      v7 = (float32x4_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 64) + 56))(*(_QWORD *)(v6 + 64));
      v8 = *(float32x4_t *)(a1 + 112);
      v9 = vrecpeq_f32(v8);
      v10 = vmulq_f32(v9, vrecpsq_f32(v8, v9));
      v13 = vmulq_f32(vrecpsq_f32(v8, v10), vmulq_f32(vmulq_f32(*v7, *a2), v10));
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + v4 + 64);
      (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v11 + 48))(v11, &v13);
      v15 = vmulq_f32(v15, *a2);
      sub_1B21DFA10(a1, v5++, v14, 0);
      v4 += 96;
    }
    while (v5 < *(int *)(a1 + 28));
  }
  *(float32x4_t *)(a1 + 112) = *a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

void sub_1B21E0074(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;

  if (!*(_QWORD *)(a1 + 96))
  {
    v2 = sub_1B21FF5F0(96, 16);
    v3.n128_f64[0] = sub_1B21C7BCC(v2);
    *(_QWORD *)(a1 + 96) = v4;
    if (*(int *)(a1 + 28) >= 1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(a1 + 40) + v5;
        (*(void (**)(_QWORD, uint64_t, __int128 *, __int128 *, __n128))(**(_QWORD **)(v7 + 64) + 16))(*(_QWORD *)(v7 + 64), v7, &v10, &v9, v3);
        v8[0] = v10;
        v8[1] = v9;
        *(_QWORD *)(v7 + 80) = sub_1B21C7E94(*(_QWORD *)(a1 + 96), v8, v6++);
        v5 += 96;
      }
      while (v6 < *(int *)(a1 + 28));
    }
  }
}

const char *sub_1B21E0124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t j;

  sub_1B21DF5E8(a1, a2, a3);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 108);
  v6 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 80);
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v8);
    if (*(int *)(a2 + 24) >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 40);
      do
      {
        v12 = v11 + 96 * v10;
        *(_DWORD *)(v8 + 76) = *(_DWORD *)(v12 + 76);
        *(_QWORD *)(v8 + 64) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v12 + 64));
        if (!(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64)))
        {
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64);
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
          v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(a3, v14, 1);
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64);
          v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 112))(v16, *(_QWORD *)(v15 + 8), a3);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v15, v17, 1346455635, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64));
        }
        v18 = 0;
        v11 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)(v8 + 72) = *(_DWORD *)(v11 + 96 * v10 + 72);
        v19 = v11 + v9;
        v20 = v8;
        do
        {
          for (i = 0; i != 16; i += 4)
            *(_DWORD *)(v20 + i) = *(_DWORD *)(v19 + i);
          ++v18;
          v19 += 16;
          v20 += 16;
        }
        while (v18 != 3);
        for (j = 48; j != 64; j += 4)
          *(_DWORD *)(v8 + j) = *(_DWORD *)(v11 + v9 + j);
        ++v10;
        v8 += 80;
        v9 += 96;
      }
      while (v10 < *(int *)(a2 + 24));
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v7, "btCompoundShapeChildData", 1497453121, *(_QWORD *)(v7 + 8));
  }
  return "btCompoundShapeData";
}

uint64_t sub_1B21E0348(uint64_t a1)
{
  return a1 + 112;
}

const char *sub_1B21E0350()
{
  return "Compound";
}

uint64_t sub_1B21E035C(uint64_t result, float a2)
{
  *(float *)(result + 108) = a2;
  return result;
}

float sub_1B21E0364(uint64_t a1)
{
  return *(float *)(a1 + 108);
}

uint64_t sub_1B21E036C()
{
  return 32;
}

uint64_t sub_1B21E0374(uint64_t result)
{
  *(_DWORD *)(result + 8) = 35;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E63CBF20;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

float sub_1B21E039C(uint64_t a1, float a2, float a3)
{
  uint64_t v5;
  float result;

  sub_1B21E0FCC(a1);
  *(_QWORD *)v5 = &off_1E63CB9D8;
  *(float *)(v5 + 76) = a2;
  *(float *)(v5 + 80) = a3;
  *(_DWORD *)(v5 + 8) = 11;
  *(_QWORD *)(v5 + 84) = 0x100000000;
  *(_DWORD *)(v5 + 92) = 2;
  result = a2 / sqrtf((float)(a3 * a3) + (float)(a2 * a2));
  *(float *)(v5 + 72) = result;
  return result;
}

uint64_t sub_1B21E0400@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = *(float *)(result + 80) * 0.5;
  v5 = *(int *)(result + 84);
  v4 = *(int *)(result + 88);
  v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  if (a2->f32[v4] <= (float)(*(float *)(result + 72)
                            * sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0])))
  {
    v9 = a2->f32[v5];
    v8 = *(int *)(result + 92);
    v10 = a2->f32[v8];
    v11 = sqrtf((float)(v10 * v10) + (float)(v9 * v9));
    if (v11 <= 0.00000011921)
    {
      *(_DWORD *)(a3 + 4 * v5) = 0;
      *(float *)(a3 + 4 * v4) = -v3;
      v7 = 0.0;
    }
    else
    {
      v12 = *(float *)(result + 76) / v11;
      *(float *)(a3 + 4 * v5) = v9 * v12;
      *(float *)(a3 + 4 * v4) = -v3;
      v7 = v10 * v12;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 4 * v5) = 0;
    *(float *)(a3 + 4 * v4) = v3;
    v7 = 0.0;
    v8 = *(int *)(result + 92);
  }
  *(float *)(a3 + 4 * v8) = v7;
  return result;
}

double sub_1B21E04B0(uint64_t a1, float32x4_t *a2, _OWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  double result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a4 >= 1)
  {
    v12 = v4;
    v13 = v5;
    v9 = a4;
    do
    {
      sub_1B21E0400(a1, a2, (uint64_t)&v11);
      result = *(double *)&v11;
      *a3++ = v11;
      ++a2;
      --v9;
    }
    while (v9);
  }
  return result;
}

float32x4_t sub_1B21E0514@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  sub_1B21E0400(a1, a2, (uint64_t)a3);
  result.f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B2246520, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

double sub_1B21E05E0(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float32_t v5;
  float32_t v6;
  double result;

  v2 = a1[5].i32[1];
  v3 = a1[5].i32[3];
  v4 = a1[4].f32[3];
  v5 = a1[5].f32[0] * (float)(a2->f32[a1[5].i32[2]] / a1[2].f32[a1[5].i32[2]]);
  a1[5].f32[0] = v5;
  v6 = v4 * (float)((float)((float)(a2->f32[v2] / a1[2].f32[v2]) + (float)(a2->f32[v3] / a1[2].f32[v3])) * 0.5);
  a1[4].f32[2] = v6 / sqrtf((float)(v5 * v5) + (float)(v6 * v6));
  a1[4].f32[3] = v6;
  *(_QWORD *)&result = sub_1B21E1004(a1, a2).u64[0];
  return result;
}

void sub_1B21E0648(uint64_t a1)
{
  uint64_t v1;

  nullsub_16(a1);
  sub_1B21FF5FC(v1);
}

uint64_t sub_1B21E065C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

__n128 sub_1B21E0668(uint64_t a1, __n128 *a2, float a3)
{
  float32x4_t v6;
  double v7;
  float32_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  __n128 result;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v17[0] = xmmword_1B2244DB0;
  v17[1] = xmmword_1B2244DD0;
  v17[2] = xmmword_1B2244D90;
  v18 = 0;
  v19 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, v17, &v16, &v15);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v14 = (int8x16_t)vmulq_f32(vsubq_f32(v15, v16), v6);
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v8 = (float)((float)(*(float *)&v14.i32[1] + *(float *)&v7) + (float)(*(float *)&v14.i32[1] + *(float *)&v7))
     * (float)((float)(*(float *)&v14.i32[1] + *(float *)&v7) + (float)(*(float *)&v14.i32[1] + *(float *)&v7));
  v9 = (float32x4_t)vextq_s8(v14, v14, 8uLL);
  v9.i32[1] = v14.i32[0];
  v10 = vadd_f32(*(float32x2_t *)v9.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v7, 0));
  v11 = vadd_f32(v10, v10);
  v12 = vmul_f32(v11, v11);
  *(int32x2_t *)v9.f32 = vdup_lane_s32((int32x2_t)v12, 0);
  v9.f32[0] = v8;
  *(float32x2_t *)v9.f32 = vadd_f32(v12, *(float32x2_t *)v9.f32);
  v9.f32[2] = v12.f32[1] + v8;
  result = (__n128)vmulq_n_f32(v9, a3 * 0.083333);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

const char *sub_1B21E0758()
{
  return "Cone";
}

double sub_1B21E0764@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0078125;
  *a1 = xmmword_1B2244DD0;
  return result;
}

uint64_t sub_1B21E0774(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  __int128 v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int *v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  int v33;

  sub_1B21E64DC(a1);
  *(_QWORD *)v12 = off_1E63CC708;
  *(_BYTE *)(v12 + 144) = 1;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 124) = 0;
  *(_BYTE *)(v12 + 176) = 1;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 156) = 0;
  *(_DWORD *)(v12 + 8) = 4;
  if (a3 < 1)
  {
    *(_DWORD *)(a1 + 124) = a3;
  }
  else
  {
    v13 = sub_1B21FF5F0(16 * a3, 16);
    v14 = v13;
    v15 = *(unsigned int *)(a1 + 124);
    if ((int)v15 >= 1)
    {
      v16 = 0;
      v17 = 16 * v15;
      do
      {
        *(_OWORD *)(v13 + v16) = *(_OWORD *)(*(_QWORD *)(a1 + 136) + v16);
        v16 += 16;
      }
      while (v17 != v16);
    }
    v18 = *(_QWORD *)(a1 + 136);
    if (v18 && *(_BYTE *)(a1 + 144))
      sub_1B21FF5FC(v18);
    *(_BYTE *)(a1 + 144) = 1;
    *(_QWORD *)(a1 + 136) = v14;
    *(_DWORD *)(a1 + 124) = a3;
    *(_DWORD *)(a1 + 128) = a3;
    v19 = 0;
    v20 = (_DWORD *)(a2 + 8);
    do
    {
      *(_QWORD *)&v21 = *((_QWORD *)v20 - 1);
      DWORD2(v21) = *v20;
      v20 = (_DWORD *)((char *)v20 + a4);
      *((_QWORD *)&v21 + 1) = DWORD2(v21);
      *(_OWORD *)(*(_QWORD *)(a1 + 136) + v19) = v21;
      v19 += 16;
    }
    while (16 * a3 != v19);
  }
  v22 = 3 * a6;
  v23 = *(_DWORD *)(a1 + 156);
  if (v23 < 3 * a6)
  {
    if (*(_DWORD *)(a1 + 160) >= v22)
    {
LABEL_25:
      bzero((void *)(*(_QWORD *)(a1 + 168) + 4 * v23), 4 * (v22 + ~v23) + 4);
      goto LABEL_26;
    }
    if (a6)
      v24 = sub_1B21FF5F0(4 * v22, 16);
    else
      v24 = 0;
    LODWORD(v25) = *(_DWORD *)(a1 + 156);
    v26 = *(_QWORD *)(a1 + 168);
    if ((int)v25 < 1)
    {
      if (!v26)
      {
LABEL_24:
        *(_BYTE *)(a1 + 176) = 1;
        *(_QWORD *)(a1 + 168) = v24;
        *(_DWORD *)(a1 + 160) = v22;
        goto LABEL_25;
      }
    }
    else
    {
      v25 = v25;
      v27 = (_DWORD *)v24;
      v28 = *(int **)(a1 + 168);
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    if (*(_BYTE *)(a1 + 176))
      sub_1B21FF5FC(v26);
    goto LABEL_24;
  }
LABEL_26:
  *(_DWORD *)(a1 + 156) = v22;
  if (a6 >= 1)
  {
    v30 = a6;
    v31 = (_DWORD *)(*(_QWORD *)(a1 + 168) + 8);
    v32 = (int *)(a5 + 8);
    do
    {
      *(v31 - 2) = *(v32 - 2);
      *(v31 - 1) = *(v32 - 1);
      v33 = *v32;
      v32 += 3;
      *v31 = v33;
      v31 += 3;
      --v30;
    }
    while (v30);
  }
  sub_1B21E639C(a1);
  return a1;
}

uint64_t sub_1B21E0998(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 32) = *a2;
  return sub_1B21E639C(a1);
}

float32x4_t sub_1B21E09A4@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t result@<Q0>)
{
  uint64_t v5;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  int8x16_t v13;
  float v14;
  float32x4_t v15;
  int v16;

  v16 = -581039253;
  v5 = a1[7].u32[3];
  if ((int)v5 < 1)
  {
    a3->i64[0] = 0;
    a3->i64[1] = 0;
  }
  else
  {
    v7 = a1[2];
    v8 = vmulq_f32(*a2, v7);
    v15 = v8;
    v9 = a1[8].i64[1];
    if (v5 > 3)
    {
      v11 = off_1ED4AD5B0(v9, (uint64_t)&v15, v5, (uint64_t)&v16);
      v9 = a1[8].i64[1];
      v7 = a1[2];
    }
    else
    {
      v10 = 0;
      v11 = -1;
      v12 = -3.4028e38;
      do
      {
        v13 = (int8x16_t)vmulq_f32(v8, *(float32x4_t *)(v9 + 16 * v10));
        v14 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0];
        if (v14 > v12)
        {
          v12 = v14;
          v11 = v10;
        }
        ++v10;
      }
      while (v5 != v10);
    }
    result = vmulq_f32(*(float32x4_t *)(v9 + 16 * v11), v7);
    *a3 = result;
  }
  return result;
}

uint64_t sub_1B21E0A78(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  int8x16_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;

  if (a4 >= 1)
  {
    v26 = v4;
    v27 = v5;
    v8 = (float32x4_t *)result;
    v9 = a3 + 12;
    v10 = a4;
    v11 = a4;
    v12 = (_DWORD *)(a3 + 12);
    do
    {
      *v12 = -581039253;
      v12 += 4;
      --v11;
    }
    while (v11);
    v13 = 0;
    v25 = 0.0;
    do
    {
      v14 = v8[2];
      v15 = vmulq_f32(*(float32x4_t *)(a2 + 16 * v13), v14);
      v24 = v15;
      v16 = v8[7].u32[3];
      if ((int)v16 < 1)
      {
        *(_DWORD *)(v9 + 16 * v13) = -581039253;
      }
      else
      {
        result = v8[8].i64[1];
        if (v16 > 3)
        {
          v18 = off_1ED4AD5B0(result, (uint64_t)&v24, v16, (uint64_t)&v25);
          result = v8[8].i64[1];
          v14 = v8[2];
          v19 = v25;
        }
        else
        {
          v17 = 0;
          v18 = -1;
          v19 = -3.4028e38;
          do
          {
            v20 = (int8x16_t)vmulq_f32(v15, *(float32x4_t *)(result + 16 * v17));
            v21 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)).f32[0];
            if (v21 > v19)
            {
              v19 = v21;
              v18 = v17;
            }
            ++v17;
          }
          while (v16 != v17);
          v25 = v19;
        }
        v22 = vmulq_f32(*(float32x4_t *)(result + 16 * v18), v14);
        v23 = (float32x4_t *)(a3 + 16 * v13);
        *v23 = v22;
        v23->f32[3] = v19;
      }
      ++v13;
    }
    while (v13 != v10);
  }
  return result;
}

float32x4_t sub_1B21E0BBC@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)a1 + 136))(a3);
  result.f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B2246520, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

uint64_t sub_1B21E0C94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1B21E0C9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

float32x4_t sub_1B21E0CA4(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t *a4)
{
  __int32 v4;
  float32x4_t result;

  v4 = a1[7].i32[3];
  *a3 = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + 16 * (a2 % v4)), a1[2]);
  result = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + 16 * ((a2 + 1) % v4)), a1[2]);
  *a4 = result;
  return result;
}

float32x4_t sub_1B21E0CE8(float32x4_t *a1, int a2, float32x4_t *a3)
{
  float32x4_t result;

  result = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + 16 * a2), a1[2]);
  *a3 = result;
  return result;
}

uint64_t sub_1B21E0D00()
{
  return 0;
}

uint64_t sub_1B21E0D0C()
{
  return 0;
}

const char *sub_1B21E0D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t k;

  sub_1B21DF5E8(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  v8 = *(unsigned int *)(a1 + 124);
  *(_DWORD *)(a2 + 72) = v8;
  if ((_DWORD)v8)
  {
    *(_QWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 136));
    *(_QWORD *)(a2 + 64) = 0;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16, v8);
    v10 = *(_QWORD *)(a1 + 136);
    if ((int)v8 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v9 + 8);
      v13 = *(_QWORD *)(a1 + 136);
      do
      {
        for (k = 0; k != 16; k += 4)
          *(_DWORD *)(v12 + k) = *(_DWORD *)(v13 + k);
        ++v11;
        v12 += 16;
        v13 += 16;
      }
      while (v11 != v8);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v9, "btVector3FloatData", 1497453121, v10);
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  return "btConvexHullShapeData";
}

float32x4_t sub_1B21E0E40(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float *a4, float *a5, float32x4_t *a6, float32x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t result;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float v17;
  float v18;

  *a4 = 3.4028e38;
  *a5 = -3.4028e38;
  v7 = a1[7].u32[3];
  if ((int)v7 < 1)
  {
    result.i32[0] = -8388609;
  }
  else
  {
    v8 = 0;
    v9 = 16 * v7;
    result.i32[1] = 0;
    do
    {
      v11 = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + v8), a1[2]);
      v12 = vmulq_f32(*a2, v11);
      v13 = (int8x16_t)vmulq_f32(v11, a2[1]);
      v14 = (int8x16_t)vmulq_f32(v11, a2[2]);
      v14.i32[3] = 0;
      *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
      *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
      v15 = vaddq_f32(v12, a2[3]);
      v16 = (int8x16_t)vmulq_f32(v15, *a3);
      v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0];
      if (v17 < *a4)
      {
        *a4 = v17;
        *a6 = v15;
      }
      if (v17 > *a5)
      {
        *a5 = v17;
        *a7 = v15;
      }
      v8 += 16;
    }
    while (v9 != v8);
    result.f32[0] = *a5;
  }
  v18 = *a4;
  if (*a4 > result.f32[0])
  {
    *a4 = result.f32[0];
    *a5 = v18;
    result = *a6;
    *a6 = *a7;
    *a7 = result;
  }
  return result;
}

double sub_1B21E0F34(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CC708;
  v2 = (uint64_t)(a1 + 15);
  sub_1B1810570((uint64_t)(a1 + 19));
  sub_1B1810570(v2);
  return sub_1B21E4670(a1);
}

void sub_1B21E0F74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E63CC708;
  v2 = (uint64_t)(a1 + 15);
  sub_1B1810570((uint64_t)(a1 + 19));
  sub_1B1810570(v2);
  sub_1B21E4670(a1);
  sub_1B21FF5FC(v3);
}

const char *sub_1B21E0FB8()
{
  return "Convex";
}

uint64_t sub_1B21E0FC4()
{
  return 80;
}

double sub_1B21E0FCC(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_1B21E242C(a1);
  *(_QWORD *)v1 = off_1E63CCE70;
  result = 0.00781250185;
  *(_OWORD *)(v1 + 32) = xmmword_1B2244F70;
  *(_DWORD *)(v1 + 64) = 1025758986;
  return result;
}

float32x4_t sub_1B21E1004(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t result;

  result = vabsq_f32(*a2);
  a1[2] = result;
  return result;
}

_QWORD *sub_1B21E1014(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  float v8;
  uint64_t i;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD *result;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v8 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  for (i = 0; i != 3; ++i)
  {
    v27 = 0uLL;
    v27.i32[i] = 1065353216;
    v10 = *a2;
    v11 = a2[1];
    v10.i32[3] = 0;
    v11.i32[3] = 0;
    v12 = a2[2];
    v12.i32[3] = 0;
    v25 = vaddq_f32(vaddq_f32(vmulq_n_f32(v10, v27.f32[0]), vmulq_lane_f32(v11, *(float32x2_t *)v27.f32, 1)), vmulq_laneq_f32(v12, v27, 2));
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 128))(&v26, a1, &v25);
    v13 = vmulq_f32(*a2, v26);
    v14 = (int8x16_t)vmulq_f32(v26, a2[1]);
    v15 = (int8x16_t)vmulq_f32(v26, a2[2]);
    v15.i32[3] = 0;
    *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
    v25 = vaddq_f32(v13, a2[3]);
    *(float *)(a4 + i * 4) = v8 + v25.f32[i];
    v27.i32[i] = -1082130432;
    v16 = *a2;
    v17 = a2[1];
    v16.i32[3] = 0;
    v17.i32[3] = 0;
    v18 = a2[2];
    v18.i32[3] = 0;
    v23 = vaddq_f32(vaddq_f32(vmulq_n_f32(v16, v27.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v27.f32, 1)), vmulq_laneq_f32(v18, v27, 2));
    result = (*(_QWORD *(**)(float32x4_t *__return_ptr, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 128))(&v24, a1, &v23);
    v20 = vmulq_f32(*a2, v24);
    v21 = (int8x16_t)vmulq_f32(v24, a2[1]);
    v22 = (int8x16_t)vmulq_f32(v24, a2[2]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    v25 = vaddq_f32(v20, a2[3]);
    *(float *)(a3 + i * 4) = v25.f32[i] - v8;
  }
  return result;
}

float32x4_t sub_1B21E11E4@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)a1 + 136))(a3);
  result.f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B2246520, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

double sub_1B21E12BC(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_1B21E242C(a1);
  result = 0.00781250185;
  *(_OWORD *)(v1 + 32) = xmmword_1B2244F70;
  *(_DWORD *)(v1 + 64) = 1025758986;
  *(_QWORD *)v1 = off_1E63CDBA8;
  *(_OWORD *)(v1 + 80) = xmmword_1B2244F70;
  *(_OWORD *)(v1 + 96) = xmmword_1B2246520;
  *(_BYTE *)(v1 + 112) = 0;
  return result;
}

float32x4_t sub_1B21E1304(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v10 = a1[5];
  v9 = a1[6];
  v11 = a2[1];
  v12 = a2[2];
  v13 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)xmmword_1B22CA020);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  v15 = vmulq_f32(vaddq_f32(v9, v10), v14);
  v16 = (int8x16_t)vmulq_f32(v12, v15);
  v15.i32[3] = 0;
  v17 = vmulq_f32(vsubq_f32(v9, v10), v14);
  v17.i32[3] = 0;
  v18 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v18.i32[3] = 0;
  v19 = vaddq_f32(v18, v17);
  v20 = vmulq_f32(*a2, v15);
  v21 = (int8x16_t)vmulq_f32(v11, v15);
  v16.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  v22 = vaddq_f32(a2[3], v20);
  v23 = vmulq_f32(v19, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v24 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)xmmword_1B22CA020));
  v25 = (int8x16_t)vmulq_f32(v19, v13);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  v26 = vsubq_f32(v22, v23);
  v26.i32[3] = 0;
  *a3 = v26;
  result = vaddq_f32(v22, v23);
  *a4 = result;
  return result;
}

uint64_t sub_1B21E1410(uint64_t a1, float32x4_t *a2)
{
  *(float32x4_t *)(a1 + 32) = vabsq_f32(*a2);
  return sub_1B21E1420(a1);
}

uint64_t sub_1B21E1420(uint64_t a1)
{
  unsigned __int8 v2;
  float *v3;
  uint64_t result;
  float v5;
  float *v6;
  uint64_t v7;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 112) = 1;
  v2 = atomic_load((unsigned __int8 *)qword_1EEFD4160);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_1EEFD4160))
  {
    dword_1EEFD4100 = 1065353216;
    unk_1EEFD410C = 0;
    unk_1EEFD4104 = 0;
    dword_1EEFD4114 = 1065353216;
    qword_1EEFD4118 = 0;
    unk_1EEFD4120 = 0;
    qword_1EEFD4128 = 1065353216;
    dword_1EEFD4130 = -1082130432;
    unk_1EEFD413C = 0;
    unk_1EEFD4134 = 0;
    dword_1EEFD4144 = -1082130432;
    qword_1EEFD4148 = 0;
    unk_1EEFD4150 = 0;
    qword_1EEFD4158 = 3212836864;
    __cxa_guard_release(qword_1EEFD4160);
  }
  memset(v8, 0, sizeof(v8));
  v3 = (float *)v8;
  result = (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 152))(a1, &dword_1EEFD4100, v8, 6);
  v5 = *(float *)(a1 + 64);
  v6 = (float *)(a1 + 96);
  v7 = -48;
  do
  {
    *v6 = *v3 + v5;
    *(v6 - 4) = v3[12] - v5;
    ++v6;
    v3 += 5;
    v7 += 16;
  }
  while (v7);
  return result;
}

double sub_1B21E1560(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1E63CC948;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  return result;
}

_QWORD *sub_1B21E159C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CC948;
  v2 = (uint64_t)(a1 + 1);
  sub_1B1810570((uint64_t)(a1 + 9));
  sub_1B21E2124((uint64_t)(a1 + 5));
  sub_1B1810570(v2);
  return a1;
}

void sub_1B21E15E8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1B21E159C(a1);
  sub_1B21FF5FC((uint64_t)v1);
}

BOOL sub_1B21E15FC(float32x4_t *a1, float32x4_t a2)
{
  BOOL v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  float *v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = 0;
  v3 = 0;
  while (1)
  {
    switch(v3)
    {
      case 0u:
        v4 = a1[8].f32[0];
        v5 = a1[8].f32[1];
        goto LABEL_11;
      case 1u:
        v5 = a1[8].f32[1];
        v6 = -a1[8].f32[2];
        v4 = a1[8].f32[0];
        goto LABEL_15;
      case 2u:
        v4 = a1[8].f32[0];
        v7 = a1[8].f32[1];
        goto LABEL_10;
      case 3u:
        v4 = a1[8].f32[0];
        v8 = a1[8].f32[1];
        goto LABEL_13;
      case 4u:
        v5 = a1[8].f32[1];
        v4 = -a1[8].f32[0];
        goto LABEL_11;
      case 5u:
        v5 = a1[8].f32[1];
        v4 = -a1[8].f32[0];
        goto LABEL_14;
      case 6u:
        v7 = a1[8].f32[1];
        v4 = -a1[8].f32[0];
LABEL_10:
        v5 = -v7;
LABEL_11:
        v6 = a1[8].f32[2];
        goto LABEL_15;
      case 7u:
        v8 = a1[8].f32[1];
        v4 = -a1[8].f32[0];
LABEL_13:
        v5 = -v8;
LABEL_14:
        v6 = -a1[8].f32[2];
LABEL_15:
        v9.i64[0] = __PAIR64__(LODWORD(v5), LODWORD(v4));
        v9.i64[1] = LODWORD(v6);
        a2 = vaddq_f32(a1[7], v9);
        break;
      default:
        break;
    }
    if (a1[2].i32[3] >= 1)
      break;
LABEL_20:
    v2 = v3++ > 6;
    if (v3 == 8)
      return 1;
  }
  v10 = (float *)(a1[3].i64[1] + 44);
  v11 = a1[2].u32[3];
  while (1)
  {
    v12.i64[0] = *(_QWORD *)(v10 - 3);
    v12.i64[1] = *((unsigned int *)v10 - 1);
    v13 = (int8x16_t)vmulq_f32(a2, v12);
    if ((float)(*v10
               + vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]) > 0.0)return v2;
    v10 += 12;
    if (!--v11)
      goto LABEL_20;
  }
}

void sub_1B21E1720(float32x4_t *a1)
{
  float32x4_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  int v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float32x4_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  float32x4_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x8_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float *v52;
  float v53;
  float32x4_t v54;
  int8x16_t v55;
  float v56;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float *v60;
  float v61;
  float v62;
  int8x8_t v63;
  float v64;
  float v65;
  float32x2_t v66;
  float32x2_t v67;
  __int32 v68;
  float v69;
  float v70;
  unsigned int v71;
  uint64_t v72;
  float v73;
  float32x4_t *v74;
  float v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float32x4_t v84;
  int v85;
  BOOL v86;
  BOOL v87;
  float32x4_t v88;
  int v89;
  __int16 v90;
  __int16 v91;
  _BYTE v92[4];
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;

  v95 = 1;
  v94 = 0;
  v93 = 0;
  v98 = 1;
  v97 = 0;
  v96 = 0;
  v101 = 1;
  v100 = 0;
  v99 = 0;
  v104 = 1;
  v103 = 0;
  v102 = 0;
  a1[7].i64[0] = 0;
  a1[7].i64[1] = 0;
  v2 = a1 + 7;
  LODWORD(v3) = a1[2].i32[3];
  if ((int)v3 < 1)
    goto LABEL_54;
  v4 = 0;
  do
  {
    v5 = *(unsigned int *)(a1[3].i64[1] + 48 * v4 + 4);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      do
      {
        v7 = v6 + 1;
        v8 = (v6 + 1);
        v9 = *(_QWORD *)(a1[3].i64[1] + 48 * v4 + 16);
        v10 = *(_DWORD *)(v9 + 4 * v6);
        if (v7 == v5)
          v8 = 0;
        v11 = *(_DWORD *)(v9 + 4 * v8);
        v90 = v10;
        v91 = v11;
        if ((__int16)v11 > (__int16)v10)
        {
          v90 = v11;
          v91 = v10;
        }
        v12 = sub_1B21E21A0((uint64_t)v92, &v90);
        if (v12 == -1)
          v13 = 0;
        else
          v13 = v100 + 4 * v12;
        v14 = vsubq_f32(*(float32x4_t *)(a1[1].i64[1] + 16 * v91), *(float32x4_t *)(a1[1].i64[1] + 16 * v90));
        v14.i32[3] = 0;
        v15 = (int8x16_t)vmulq_f32(v14, v14);
        v16 = vmulq_n_f32(v14, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]));
        v17 = a1[4].i32[3];
        if (v17 < 1)
        {
LABEL_21:
          if (v17 == a1[5].i32[0])
          {
            v22 = v17 ? 2 * v17 : 1;
            if (v17 < v22)
            {
              v88 = v16;
              if (v22)
              {
                v23 = sub_1B21FF5F0(16 * v22, 16);
                v16 = v88;
                v24 = v23;
                v17 = a1[4].i32[3];
              }
              else
              {
                v24 = 0;
              }
              if (v17 >= 1)
              {
                v25 = 0;
                v26 = 16 * v17;
                do
                {
                  *(_OWORD *)(v24 + v25) = *(_OWORD *)(a1[5].i64[1] + v25);
                  v25 += 16;
                }
                while (v26 != v25);
              }
              v27 = a1[5].i64[1];
              if (v27 && a1[6].i8[0])
              {
                sub_1B21FF5FC(v27);
                v16 = v88;
              }
              a1[6].i8[0] = 1;
              a1[5].i64[1] = v24;
              a1[5].i32[0] = v22;
              v17 = a1[4].i32[3];
            }
          }
          *(float32x4_t *)(a1[5].i64[1] + 16 * v17) = v16;
          ++a1[4].i32[3];
        }
        else
        {
          v18 = (float32x4_t *)a1[5].i64[1];
          v19 = a1[4].u32[3];
          while (1)
          {
            v20 = vsubq_f32(*v18, v16);
            if (fabsf(v20.f32[0]) <= 0.000001 && fabsf(v20.f32[1]) <= 0.000001 && fabsf(v20.f32[2]) <= 0.000001)
              break;
            v21 = vaddq_f32(v16, *v18);
            if (fabsf(v21.f32[0]) <= 0.000001 && fabsf(v21.f32[1]) <= 0.000001 && fabsf(v21.f32[2]) <= 0.000001)
              break;
            ++v18;
            if (!--v19)
              goto LABEL_21;
          }
        }
        if (v13)
        {
          *(_WORD *)(v13 + 2) = v4;
        }
        else
        {
          HIWORD(v89) = -1;
          LOWORD(v89) = v4;
          sub_1B21E1E1C((uint64_t)v92, &v90, &v89);
        }
        v6 = v7;
      }
      while (v7 != v5);
      LODWORD(v3) = a1[2].i32[3];
    }
    ++v4;
  }
  while (v4 < (int)v3);
  if ((int)v3 < 1)
  {
LABEL_54:
    v51 = vmulq_f32(a1[7], (float32x4_t)vdupq_n_s32(0x7F800000u));
    a1[7] = v51;
    a1[9].i32[0] = 2139095039;
    v53 = 3.4028e38;
  }
  else
  {
    v28 = 0;
    v29 = a1[3].i64[1];
    v30 = a1[1].i64[1];
    v3 = v3;
    v31 = 0.0;
    v32 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      v33 = v29 + 48 * v28;
      v34 = *(_DWORD *)(v33 + 4);
      if (v34 >= 3)
      {
        v35 = **(int **)(v33 + 16);
        v36 = (_QWORD *)(v29 + 48 * v28 + 16);
        v37 = *v2;
        v38 = 1;
        do
        {
          v39 = *(float32x4_t *)(v30 + 16 * v35);
          v40 = *(float32x4_t *)(v30 + 16 * *(int *)(*v36 + 4 * v38));
          v41 = vsubq_f32(v39, v40);
          v42 = (int8x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v41.i32[3] = 0;
          v43 = *(float32x4_t *)(v30 + 16 * *(int *)(*v36 + 4 * (((int)v38 + 1) % v34)));
          v44 = vsubq_f32(v39, v43);
          v45 = (int8x8_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
          v44.i32[3] = 0;
          *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v41.f32, v42, 4uLL);
          v46.i64[1] = v41.i64[0];
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v44.f32, v45, 4uLL);
          v47.i64[1] = v44.i64[0];
          v48 = (int8x16_t)vsubq_f32(vmulq_f32(v47, v41), vmulq_f32(v46, v44));
          v46.i64[0] = vextq_s8(v48, v48, 4uLL).u64[0];
          v46.i64[1] = v48.u32[0];
          v49 = (int8x16_t)vmulq_f32(v46, v46);
          *(float *)v49.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).f32[0])* 0.5;
          v50 = vmulq_n_f32(vmulq_f32(vaddq_f32(vaddq_f32(v39, v40), v43), v32), *(float *)v49.i32);
          v50.i32[3] = 0;
          v37 = vaddq_f32(v37, v50);
          *v2 = v37;
          v31 = v31 + *(float *)v49.i32;
          ++v38;
        }
        while (v34 - 1 != v38);
      }
      ++v28;
    }
    while (v28 != v3);
    v51 = vmulq_n_f32(a1[7], 1.0 / v31);
    a1[7] = v51;
    a1[9].i32[0] = 2139095039;
    v52 = (float *)(a1[3].i64[1] + 44);
    v53 = 3.4028e38;
    do
    {
      v54.i64[0] = *(_QWORD *)(v52 - 3);
      v54.i64[1] = *((unsigned int *)v52 - 1);
      v55 = (int8x16_t)vmulq_f32(v51, v54);
      v56 = fabsf(*v52+ vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]);
      if (v56 < v53)
      {
        a1[9].f32[0] = v56;
        v53 = v56;
      }
      v52 += 12;
      --v3;
    }
    while (v3);
  }
  v57 = a1->u32[3];
  if ((int)v57 < 1)
  {
    v58 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    v59 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
    v62 = -3.4028e38;
    v61 = 3.4028e38;
  }
  else
  {
    v58 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    v59 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
    v60 = (float *)(a1[1].i64[1] + 8);
    v61 = 3.4028e38;
    v62 = -3.4028e38;
    do
    {
      v63 = *(int8x8_t *)(v60 - 2);
      v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v59.u32[1], v63.u32[0]), (float32x2_t)__PAIR64__(v63.u32[1], v59.u32[0])), v63, (int8x8_t)v59);
      v58 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v63.u32[1], v58.u32[0]), (float32x2_t)__PAIR64__(v58.u32[1], v63.u32[0])), v63, (int8x8_t)v58);
      v64 = *v60;
      v60 += 4;
      v65 = v64;
      if (v64 < v61)
        v61 = v65;
      if (v65 > v62)
        v62 = v65;
      --v57;
    }
    while (v57);
  }
  v66 = vadd_f32(v59, v58);
  v67 = (float32x2_t)__PAIR64__(v58.u32[1], v59.u32[0]);
  v68 = v59.i32[1];
  *(float32x2_t *)v51.f32 = vsub_f32(v67, v58);
  a1[11].i64[0] = v51.i64[0];
  *(float32x2_t *)a1[10].f32 = v66;
  a1[10].f32[2] = v61 + v62;
  a1[10].i32[3] = 0;
  v69 = v62 - v61;
  a1[11].f32[2] = v69;
  a1[11].i32[3] = 0;
  v70 = v53 / 1.7321;
  if (v51.f32[1] >= v69)
    v71 = 1;
  else
    v71 = 2;
  if (v51.f32[0] >= v51.f32[1])
    v72 = 2 * (v51.f32[0] < v69);
  else
    v72 = v71;
  v51.i32[0] = a1[11].i32[v72];
  v73 = (float)-(float)(v70 - (float)(v51.f32[0] * 0.5)) * 0.00097656;
  a1[8].f32[1] = v70;
  a1[8].f32[2] = v70;
  a1[8].f32[0] = v70;
  v74 = a1 + 8;
  v75 = v51.f32[0] * 0.5;
  a1[8].f32[v72] = v51.f32[0] * 0.5;
  v76 = 1024;
  while (!sub_1B21E15FC(a1, v51))
  {
    v75 = v75 - v73;
    v74->f32[v72] = v75;
    if (!--v76)
    {
      a1[8].f32[1] = v70;
      a1[8].f32[2] = v70;
      a1[8].f32[0] = v70;
      goto LABEL_79;
    }
  }
  v51.f32[0] = v53 - v70;
  v77 = 1 << v72;
  v78 = (1 << v72) & 3;
  v79 = (1 << (v77 & 3)) & 3;
  v80 = v74->f32[v79];
  v81 = v51.f32[0] * 0.00097656;
  v82 = v74->f32[v78];
  v74->f32[v78] = (float)(v51.f32[0] * 0.00097656) + v82;
  v51.i32[0] = v74->i32[v79];
  v83 = v81 + v51.f32[0];
  v74->f32[v79] = v81 + v51.f32[0];
  if (sub_1B21E15FC(a1, v51))
  {
    v85 = 1024;
    while (--v85)
    {
      v80 = v83;
      v82 = v74->f32[v78];
      v74->f32[v78] = v81 + v82;
      v84.i32[0] = v74->i32[v79];
      v83 = v81 + v84.f32[0];
      v74->f32[v79] = v81 + v84.f32[0];
      if (!sub_1B21E15FC(a1, v84))
        goto LABEL_78;
    }
  }
  else
  {
LABEL_78:
    v74->f32[v78] = v82;
    v74->f32[v79] = v80;
  }
LABEL_79:
  if (v103)
    v86 = v104 == 0;
  else
    v86 = 1;
  if (!v86)
    sub_1B21FF5FC(v103);
  v104 = 1;
  v103 = 0;
  v102 = 0;
  if (v100)
    v87 = v101 == 0;
  else
    v87 = 1;
  if (!v87)
    sub_1B21FF5FC(v100);
  v101 = 1;
  v100 = 0;
  v99 = 0;
  if (v97 && v98)
    sub_1B21FF5FC(v97);
  v98 = 1;
  v97 = 0;
  v96 = 0;
  if (v94)
  {
    if (v95)
      sub_1B21FF5FC(v94);
  }
}

void sub_1B21E1E1C(uint64_t a1, __int16 *a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = a2[1];
  v8 = *(_DWORD *)(a1 + 72);
  v9 = sub_1B21E21A0(a1, a2);
  if (v9 == -1)
  {
    v10 = v6 + (v7 << 16);
    v11 = v8 - 1;
    v12 = *(_DWORD *)(a1 + 68);
    v13 = *(_DWORD *)(a1 + 72);
    v14 = v12;
    if (v12 == v13)
    {
      v15 = v12 ? 2 * v12 : 1;
      v14 = *(_DWORD *)(a1 + 68);
      if (v12 < v15)
      {
        if (v15)
          v16 = sub_1B21FF5F0(4 * v15, 16);
        else
          v16 = 0;
        if (*(int *)(a1 + 68) >= 1)
        {
          v17 = 0;
          v18 = 4 * *(unsigned int *)(a1 + 68);
          do
          {
            *(_DWORD *)(v16 + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v17);
            v17 += 4;
          }
          while (v18 != v17);
        }
        v19 = *(_QWORD *)(a1 + 80);
        if (v19 && *(_BYTE *)(a1 + 88))
          sub_1B21FF5FC(v19);
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = v16;
        *(_DWORD *)(a1 + 72) = v15;
        v14 = *(_DWORD *)(a1 + 68);
      }
    }
    v20 = v10 & v11;
    *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v14) = *a3;
    ++*(_DWORD *)(a1 + 68);
    v21 = *(_DWORD *)(a1 + 100);
    if (v21 == *(_DWORD *)(a1 + 104))
    {
      v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          v23 = sub_1B21FF5F0(4 * v22, 16);
          v21 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          v23 = 0;
        }
        if (v21 >= 1)
        {
          v24 = 0;
          v25 = 4 * v21;
          do
          {
            *(_DWORD *)(v23 + v24) = *(_DWORD *)(*(_QWORD *)(a1 + 112) + v24);
            v24 += 4;
          }
          while (v25 != v24);
        }
        v26 = *(_QWORD *)(a1 + 112);
        if (v26 && *(_BYTE *)(a1 + 120))
          sub_1B21FF5FC(v26);
        *(_BYTE *)(a1 + 120) = 1;
        *(_QWORD *)(a1 + 112) = v23;
        *(_DWORD *)(a1 + 104) = v22;
        v21 = *(_DWORD *)(a1 + 100);
      }
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v21) = *(_DWORD *)a2;
    ++*(_DWORD *)(a1 + 100);
    if (v13 < *(_DWORD *)(a1 + 72))
    {
      sub_1B21E221C(a1);
      v20 = (*a2 + ((unsigned __int16)a2[1] << 16)) & (*(_DWORD *)(a1 + 72) - 1);
    }
    v27 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12) = *(_DWORD *)(v27 + 4 * v20);
    *(_DWORD *)(v27 + 4 * v20) = v12;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v9) = *a3;
  }
}

float32x4_t sub_1B21E2038(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float *a4, float *a5, float32x4_t *a6, float32x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t result;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float v17;
  float v18;

  *a4 = 3.4028e38;
  *a5 = -3.4028e38;
  v7 = *(unsigned int *)(a1 + 12);
  if ((int)v7 < 1)
  {
    result.i32[0] = -8388609;
  }
  else
  {
    v8 = 0;
    v9 = 16 * v7;
    result.i32[1] = 0;
    do
    {
      v11 = *(float32x4_t *)(*(_QWORD *)(a1 + 24) + v8);
      v12 = vmulq_f32(*a2, v11);
      v13 = (int8x16_t)vmulq_f32(v11, a2[1]);
      v14 = (int8x16_t)vmulq_f32(v11, a2[2]);
      v14.i32[3] = 0;
      *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
      *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
      v15 = vaddq_f32(v12, a2[3]);
      v16 = (int8x16_t)vmulq_f32(v15, *a3);
      v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0];
      if (v17 < *a4)
      {
        *a4 = v17;
        *a6 = v15;
      }
      if (v17 > *a5)
      {
        *a5 = v17;
        *a7 = v15;
      }
      v8 += 16;
    }
    while (v9 != v8);
    result.f32[0] = *a5;
  }
  v18 = *a4;
  if (*a4 > result.f32[0])
  {
    *a4 = result.f32[0];
    *a5 = v18;
    result = *a6;
    *a6 = *a7;
    *a7 = result;
  }
  return result;
}

uint64_t sub_1B21E2124(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 48 * v2;
    do
    {
      sub_1B1810570(*(_QWORD *)(a1 + 16) + v3);
      v3 += 48;
    }
    while (v4 != v3);
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && *(_BYTE *)(a1 + 24))
    sub_1B21FF5FC(v5);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1B21E21A0(uint64_t a1, __int16 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned __int16)a2[1];
  v3 = (*a2 + (v2 << 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v3 >= *(_DWORD *)(a1 + 4))
    return 0xFFFFFFFFLL;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v3);
  if ((_DWORD)v4 == -1)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 112);
  while (*a2 != *(_WORD *)(v5 + 4 * (int)v4) || v2 != *(unsigned __int16 *)(v5 + 4 * (int)v4 + 2))
  {
    v4 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v4);
    if ((_DWORD)v4 == -1)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

void sub_1B21E221C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  int v23;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = sub_1B21FF5F0(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    v6 = *(_QWORD *)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 16);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 24))
      sub_1B21FF5FC(v6);
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = sub_1B21FF5F0(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 36);
    v13 = *(_QWORD *)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 48);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 56))
      sub_1B21FF5FC(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 2);
    do
    {
      v21 = (__int16)*(v20 - 1);
      v22 = *v20;
      v20 += 2;
      v23 = (v21 + (v22 << 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * v23);
      *(_DWORD *)(v18 + 4 * v23) = v17++;
    }
    while (v2 != v17);
  }
}

uint64_t sub_1B21E242C(uint64_t result)
{
  *(_DWORD *)(result + 8) = 35;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E63CBC00;
  return result;
}

_QWORD *sub_1B21E2450(uint64_t a1, float32x4_t *a2, float32x2_t *a3, float *a4, float *a5)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  _QWORD *result;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;

  v10 = *a2;
  v11 = a2[1];
  v10.i32[3] = 0;
  v11.i32[3] = 0;
  v12 = a2[2];
  v12.i32[3] = 0;
  v29 = (int8x16_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a3->f32)), vmulq_lane_f32(v11, *a3, 1)), vmulq_laneq_f32(v12, *(float32x4_t *)a3->f32, 2));
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a1 + 128))(&v28, a1, &v29);
  v13 = vmulq_f32(*a2, v28);
  v14 = (int8x16_t)vmulq_f32(v28, a2[1]);
  v15 = (int8x16_t)vmulq_f32(v28, a2[2]);
  v15.i32[3] = 0;
  *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
  *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  v16 = vaddq_f32(v13, a2[3]);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v26 = v16;
  v27 = veorq_s8(v29, (int8x16_t)v13);
  result = (*(_QWORD *(**)(float32x4_t *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a1 + 128))(&v28, a1, &v27);
  v18 = vmulq_f32(*a2, v28);
  v19 = (int8x16_t)vmulq_f32(v28, a2[1]);
  v20 = (int8x16_t)vmulq_f32(v28, a2[2]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  v21 = vaddq_f32(v18, a2[3]);
  v22 = (int8x16_t)vmulq_f32(v26, *(float32x4_t *)a3->f32);
  *(_DWORD *)a4 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).u32[0];
  v23 = (int8x16_t)vmulq_f32(v21, *(float32x4_t *)a3->f32);
  v24 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0];
  *a5 = v24;
  v25 = *a4;
  if (*a4 > v24)
  {
    *a4 = v24;
    *a5 = v25;
  }
  return result;
}

uint64_t sub_1B21E25DC@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q6>)
{
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t *v16;
  int v17;
  float32x4_t v18;
  uint64_t v19;
  float v20;
  float v21;
  int8x16_t v22;
  float v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  _BOOL8 v27;
  _BOOL8 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  __int32 v49;
  uint64_t v50;
  __int32 v51;
  uint64_t v52;
  __int32 v53;
  int v54;
  float32x4_t v55;

  switch(*(_DWORD *)(result + 8))
  {
    case 0:
      v4.i64[0] = 0x8000000080000000;
      v4.i64[1] = 0x8000000080000000;
      *(int8x16_t *)a3 = veorq_s8(vandq_s8(*a2, v4), *(int8x16_t *)(result + 48));
      return result;
    case 1:
      v5 = *(float32x4_t *)a2;
      v5.i32[2] = a2->i32[2];
      v6 = *(float32x4_t *)(result + 80);
      v7 = *(float32x4_t *)(result + 96);
      result += 80;
      v8 = (int8x16_t)vmulq_f32(v5, *(float32x4_t *)(result + 32));
      v5.i32[3] = 0;
      v9 = (int8x16_t)vmulq_f32(v6, v5);
      v10 = (int8x16_t)vmulq_f32(v5, v7);
      v8.i32[3] = 0;
      v11 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      v12 = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
      v13 = 2;
      if (v11.f32[1] >= v12.f32[0])
        v14 = 1;
      else
        v14 = 2;
      if ((vcgt_f32(v12, v11).u8[0] & 1) == 0)
        v13 = 0;
      if (v11.f32[0] < v11.f32[1])
        v13 = v14;
      v15 = *(int8x16_t *)(result + 16 * v13);
      goto LABEL_33;
    case 4:
      v16 = *(float32x4_t **)(result + 136);
      v17 = *(_DWORD *)(result + 124);
      return sub_1B21E291C((float32x4_t *)a2, v16, v17, (float32x4_t *)(result + 32), a3);
    case 5:
      v16 = *(float32x4_t **)(result + 120);
      v17 = *(_DWORD *)(result + 128);
      return sub_1B21E291C((float32x4_t *)a2, v16, v17, (float32x4_t *)(result + 32), a3);
    case 8:
      a3->i64[0] = 0;
      a3->i64[1] = 0;
      return result;
    case 0xA:
      v18 = *(float32x4_t *)a2;
      v18.i64[1] = a2->u32[2];
      v19 = *(int *)(result + 72);
      v20 = *(float *)(result + 48 + 4 * v19);
      v21 = *(float *)(result + 48 + 4 * (((int)v19 + 2) % 3));
      v22 = (int8x16_t)vmulq_f32(v18, v18);
      v23 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)).f32[0];
      if (v23 >= 0.0001)
        v24 = vmulq_n_f32(v18, 1.0 / sqrtf(v23));
      else
        v24 = (float32x4_t)xmmword_1B2244DB0;
      v55 = 0uLL;
      v55.f32[v19] = v20;
      v40 = vmulq_n_f32(v24, v21);
      v41 = vmulq_n_f32(v24, *(float *)(result + 64));
      v42 = vsubq_f32(vaddq_f32(v55, v40), v41);
      v42.i32[3] = 0;
      v43 = (int8x16_t)vmulq_f32(v24, v42);
      *(float32x2_t *)a4.f32 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8);
      v44 = (float32x4_t)vextq_s8(v43, v43, 8uLL);
      *(float32x2_t *)v44.f32 = vadd_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)v44.f32);
      a4.i32[0] = -581039253;
      v45 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v44, a4), 0), (int8x16_t)v42, (int8x16_t)0);
      v44.f32[0] = fmaxf(v44.f32[0], -1.0e18);
      v55 = 0uLL;
      v55.f32[v19] = -v20;
      v46 = vsubq_f32(vaddq_f32(v55, v40), v41);
      v46.i32[3] = 0;
      v47 = (int8x16_t)vmulq_f32(v24, v46);
      *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8);
      v48 = (float32x4_t)vextq_s8(v47, v47, 8uLL);
      *(float32x2_t *)v48.f32 = vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v48.f32);
      v15 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v48, v44), 0), (int8x16_t)v46, v45);
LABEL_33:
      a3->i64[0] = v15.i64[0];
      a3->i32[2] = v15.i32[2];
      goto LABEL_38;
    case 0xD:
      v55 = *(float32x4_t *)(result + 48);
      v52 = a2->i64[0];
      v53 = a2->i32[2];
      v54 = 0;
      v25 = *(_DWORD *)(result + 72);
      v26 = v25;
      v27 = v25 == 1;
      v28 = v25 != 1;
      v29 = v25 == 2;
      if (v25 == 2)
        v30 = 1;
      else
        v30 = 2;
      if (v29)
        v31 = 2;
      else
        v31 = v27;
      v32 = !v29 && v28;
      v33 = *(float *)((unint64_t)&v55 | (4 * v32));
      v34 = v55.f32[v26];
      v35 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFFBLL | (4 * v32));
      v36 = *(float *)((unint64_t)&v52 | (4 * v30));
      v37 = sqrtf((float)(v36 * v36) + (float)(v35 * v35));
      if (v37 == 0.0)
      {
        *(float *)((unint64_t)&v50 | (4 * v32)) = v33;
        if (*(float *)((unint64_t)&v52 | (4 * v31)) < 0.0)
          v34 = -v34;
        *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3))) = v34;
        v39 = 0.0;
      }
      else
      {
        v38 = v33 / v37;
        *(float *)((unint64_t)&v50 | (4 * v32)) = v35 * v38;
        if (*(float *)((unint64_t)&v52 | (4 * v31)) < 0.0)
          v34 = -v34;
        *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3))) = v34;
        v39 = v36 * v38;
      }
      *(float *)((unint64_t)&v50 | (4 * v30)) = v39;
      v49 = v51;
      a3->i64[0] = v50;
      a3->i32[2] = v49;
LABEL_38:
      a3->i32[3] = 0;
      break;
    default:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
      break;
  }
  return result;
}

uint64_t sub_1B21E291C@<X0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>)
{
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  int8x16_t v14;
  float v15;
  uint64_t result;
  float32x4_t v17;
  int v18;
  float32x4_t v19;

  v9 = vmulq_f32(*a1, *a4);
  v19 = v9;
  v10 = a3;
  if (a3 > 3)
  {
    v18 = 0;
    result = off_1ED4AD5B0((uint64_t)a2, (uint64_t)&v19, a3, (uint64_t)&v18);
    if (result < 0)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (a3 < 1)
  {
    result = -1;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = -1;
  v13 = -3.4028e38;
  do
  {
    v14 = (int8x16_t)vmulq_f32(v9, a2[v11]);
    v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
    if (v15 > v13)
    {
      v13 = v15;
      v12 = v11;
    }
    ++v11;
  }
  while (a3 != v11);
  result = v12;
  if ((v12 & 0x8000000000000000) == 0)
  {
LABEL_12:
    if (result < v10)
    {
      v17 = a2[result];
LABEL_16:
      *a5 = vmulq_f32(v17, *a4);
      return result;
    }
  }
LABEL_14:
  if (a3 >= 1)
  {
    v17 = *a2;
    goto LABEL_16;
  }
  a5->i64[0] = 0;
  a5->i64[1] = 0;
  return result;
}

float32x4_t sub_1B21E2A30@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q6>)
{
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  float v14;
  float32x4_t v15;
  float32x4_t result;
  float32x4_t v17;
  float32x4_t v18;

  v6 = *a2;
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0];
  if (v8 < 1.4211e-14)
  {
    v6 = (float32x4_t)xmmword_1B2246520;
    v18 = (float32x4_t)xmmword_1B2246520;
    __asm { FMOV            V1.2S, #1.0 }
    v8 = vpadd_f32(_D1, _D1).f32[0] + 1.0;
  }
  v18 = vmulq_n_f32(v6, 1.0 / sqrtf(v8));
  sub_1B21E25DC(a1, (int8x16_t *)&v18, &v17, a4);
  v14 = sub_1B21E2ADC(a1);
  v15 = vmulq_n_f32(v18, v14);
  v15.i32[3] = 0;
  result = vaddq_f32(v17, v15);
  *a3 = result;
  return result;
}

float sub_1B21E2ADC(uint64_t a1)
{
  float result;

  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 1:
    case 4:
    case 5:
    case 0xA:
    case 0xD:
      result = *(float *)(a1 + 64);
      break;
    case 8:
      result = *(float *)(a1 + 48) * *(float *)(a1 + 32);
      break;
    default:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      break;
  }
  return result;
}

uint64_t sub_1B21E2B24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  sub_1B21E64DC(a1);
  *(_QWORD *)v6 = off_1E63CD6D0;
  *(_QWORD *)(v6 + 120) = a2;
  *(_DWORD *)(v6 + 8) = 3;
  if (a3)
    sub_1B21E639C(a1);
  return a1;
}

double sub_1B21E2B7C@<D0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  float32x4_t v4;
  int8x16_t v5;
  float v6;
  float32x4_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;
  int v14;
  float32x4_t v15;

  v4 = *a2;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
  if (v6 >= 0.0001)
    v7 = vmulq_n_f32(v4, 1.0 / sqrtf(v6));
  else
    v7 = (float32x4_t)xmmword_1B2244DB0;
  v13 = 0uLL;
  v12[0] = &off_1E63CD868;
  v14 = -581039253;
  v15 = v7;
  v8 = *(_QWORD *)(a1 + 120);
  v10 = xmmword_1B22CA240;
  v11 = xmmword_1B22C9FA0;
  (*(void (**)(uint64_t, _QWORD *, __int128 *, __int128 *))(*(_QWORD *)v8 + 16))(v8, v12, &v10, &v11);
  *a3 = v13;
  return nullsub_16(v12);
}

void sub_1B21E2C44(uint64_t a1, __int128 *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  if (a4 >= 1)
  {
    v20 = v4;
    v21 = v5;
    v6 = (_OWORD *)a3;
    v9 = (_DWORD *)(a3 + 12);
    v10 = a4;
    v11 = a4;
    do
    {
      *v9 = -581039253;
      v9 += 4;
      --v11;
    }
    while (v11);
    do
    {
      v16[0] = &off_1E63CD868;
      v17 = 0uLL;
      v18 = -581039253;
      v12 = *a2++;
      v19 = v12;
      v13 = *(_QWORD *)(a1 + 120);
      v14 = xmmword_1B22CA240;
      v15 = xmmword_1B22C9FA0;
      (*(void (**)(uint64_t, _QWORD *, __int128 *, __int128 *))(*(_QWORD *)v13 + 16))(v13, v16, &v14, &v15);
      *v6++ = v17;
      nullsub_16(v16);
      --v10;
    }
    while (v10);
  }
}

float32x4_t sub_1B21E2D34@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)a1 + 136))(a3);
  result.f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B2246520, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

uint64_t sub_1B21E2E0C()
{
  return 0;
}

uint64_t sub_1B21E2E14()
{
  return 0;
}

uint64_t sub_1B21E2E24()
{
  return 0;
}

uint64_t sub_1B21E2E30()
{
  return 0;
}

uint64_t sub_1B21E2E38(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(_QWORD *)(a1 + 120) + 16) = *a2;
  return sub_1B21E639C(a1);
}

uint64_t sub_1B21E2E48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) + 16;
}

void sub_1B21E2E58(_QWORD *a1)
{
  uint64_t v1;

  sub_1B21E4670(a1);
  sub_1B21FF5FC(v1);
}

const char *sub_1B21E2E6C()
{
  return "ConvexTrimesh";
}

void sub_1B21E2E78(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21E2E9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  float v4;
  int8x16_t v5;
  float v6;

  v2 = 0;
  v3 = *(float32x4_t *)(result + 48);
  v4 = *(float *)(result + 32);
  do
  {
    v5 = (int8x16_t)vmulq_f32(v3, *(float32x4_t *)(a2 + v2));
    v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > v4)
    {
      *(float *)(result + 32) = v6;
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + v2);
      v4 = v6;
    }
    v2 += 16;
  }
  while (v2 != 48);
  return result;
}

uint64_t sub_1B21E2EE4(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v9;
  float32x4_t v10;

  sub_1B21E0FCC(a1);
  *(_QWORD *)v4 = &off_1E63CC0F0;
  *(_DWORD *)(v4 + 72) = 1;
  sub_1B21DD90C(v4, a2->f32, 0.1);
  v10.i64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v9 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
  v5 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v6 = v10;
  v6.i32[1] = v9;
  v6.f32[2] = v5;
  v7 = vsubq_f32(vmulq_f32(*a2, *(float32x4_t *)(a1 + 32)), v6);
  v7.i32[3] = 0;
  *(float32x4_t *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 8) = 13;
  return a1;
}

float32x4_t sub_1B21E2FA4(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9 = *(float32x4_t *)(a2 + 48);
  v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  v11 = vaddq_f32(a1[3], v10);
  v12 = vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B22CA020));
  v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B22CA020));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = vsubq_f32(v9, v12);
  v15.i32[3] = 0;
  *a3 = v15;
  result = vaddq_f32(v9, v12);
  *a4 = result;
  return result;
}

void sub_1B21E3058(float32x4_t *a1, uint64_t a2, float a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  __int32 v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __int32 v16;
  float32x4_t v17;
  float32x4_t v18;

  v18 = a1[3];
  v17.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v16 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7 = v17;
  v7.i32[1] = v16;
  v7.f32[2] = v6;
  v8 = vaddq_f32(v18, v7);
  v9 = a1[4].i32[2];
  v10 = (float32x2_t)vmulq_f32(v8, v8).u64[0];
  v11 = (float)((float)(a3 * 0.25) * v10.f32[0])
      + (float)((float)(a3 / 12.0) * vmuls_lane_f32(vmuls_lane_f32(4.0, v8, 2), v8, 2));
  v12 = (float)((float)(a3 * 0.25) * v10.f32[0])
      + (float)((float)(a3 / 12.0)
              * vmuls_lane_f32(vmuls_lane_f32(4.0, *(float32x2_t *)v8.f32, 1), *(float32x2_t *)v8.f32, 1));
  v13 = vmuls_lane_f32(a3 * 0.25, v10, 1) + (float)((float)(a3 / 12.0) * (float)((float)(4.0 * v8.f32[0]) * v8.f32[0]));
  v14 = vmuls_lane_f32(a3 * 0.5, v10, 1);
  if (v9)
  {
    v14 = v12;
    v15 = (float)(a3 * 0.5) * v10.f32[0];
  }
  else
  {
    v15 = v13;
  }
  if (v9)
    v13 = v12;
  if (v9 == 2)
  {
    v14 = v11;
    v15 = v11;
  }
  *(float *)a2 = v14;
  *(float *)(a2 + 4) = v15;
  if (v9 == 2)
    v13 = (float)(a3 * 0.5) * v10.f32[0];
  *(float *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = 0;
}

uint64_t sub_1B21E3168@<X0>(uint64_t result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = *(float *)(result + 48);
  v4 = *(float *)(result + 52);
  v5 = *a2;
  v6 = a2[2];
  v7 = sqrtf((float)(v6 * v6) + (float)(v5 * v5));
  if (v7 == 0.0)
  {
    if (a2[1] < 0.0)
      v4 = -v4;
    v9 = 0.0;
  }
  else
  {
    v8 = v3 / v7;
    v3 = v5 * v8;
    if (a2[1] < 0.0)
      v4 = -v4;
    v9 = v6 * v8;
  }
  *a3 = v3;
  a3[1] = v4;
  a3[2] = v9;
  return result;
}

__n128 sub_1B21E31C8(uint64_t a1, uint64_t a2, __n128 *a3, int a4, __n128 a5)
{
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  __n128 result;

  if (a4 >= 1)
  {
    v5 = a4;
    v6 = (float *)(a2 + 4);
    do
    {
      v7 = *(float *)(a1 + 48);
      v8 = *(float *)(a1 + 52);
      v9 = *(v6 - 1);
      v10 = v6[1];
      v11 = sqrtf((float)(v10 * v10) + (float)(v9 * v9));
      if (v11 == 0.0)
      {
        if (*v6 >= 0.0)
          v13 = *(float *)(a1 + 52);
        else
          v13 = -v8;
        v14 = 0.0;
      }
      else
      {
        v12 = v7 / v11;
        v7 = v9 * v12;
        if (*v6 >= 0.0)
          v13 = *(float *)(a1 + 52);
        else
          v13 = -v8;
        v14 = v10 * v12;
      }
      a5.n128_u64[0] = __PAIR64__(LODWORD(v13), LODWORD(v7));
      a5.n128_f32[2] = v14;
      *a3++ = a5;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  result.n128_u64[0] = a5.n128_u64[0];
  result.n128_u32[2] = a5.n128_u32[2];
  return result;
}

void sub_1B21E3250(uint64_t a1)
{
  uint64_t v1;

  nullsub_16(a1);
  sub_1B21FF5FC(v1);
}

float32x4_t sub_1B21E3264(float32x4_t *a1, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = a1[2];
  v9 = vaddq_f32(a1[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B21E1004(a1, a2);
  result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B21E3328()
{
  return "CylinderY";
}

uint64_t sub_1B21E3334@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + *(int *)(result + 72)) = 1065353216;
  return result;
}

float32x4_t sub_1B21E3348(float32x4_t *a1, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

uint64_t sub_1B21E3434()
{
  return 64;
}

const char *sub_1B21E343C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  sub_1B21DF5E8(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
  return "btCylinderShapeData";
}

float32x4_t sub_1B21E34B8@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v14);
  v13 = v14;
  *a3 = v14;
  result.f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B2246520, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
    v12.i32[3] = 0;
    result = vaddq_f32(v13, v12);
    *a3 = result;
  }
  return result;
}

float sub_1B21E359C(float *a1)
{
  float v2;
  float v3;

  v2 = a1[12];
  v3 = (*(float (**)(void))(*(_QWORD *)a1 + 96))();
  (*(void (**)(float *))(*(_QWORD *)a1 + 96))(a1);
  (*(void (**)(float *))(*(_QWORD *)a1 + 96))(a1);
  return v2 + v3;
}

uint64_t sub_1B21E35F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  int v21;
  uint64_t v22;

  sub_1B21E12BC(a1);
  *(_QWORD *)v8 = off_1E63CC9B0;
  *(_BYTE *)(v8 + 144) = 1;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_BYTE *)(v8 + 176) = 1;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 156) = 0;
  *(_DWORD *)(v8 + 8) = 9;
  if (a4 < 0)
  {
    v15 = 0;
  }
  else
  {
    if (!a4)
    {
      *(_DWORD *)(a1 + 124) = 0;
      *(_DWORD *)(a1 + 156) = 0;
      goto LABEL_29;
    }
    v9 = sub_1B21FF5F0(16 * a4, 16);
    v10 = v9;
    v11 = *(unsigned int *)(a1 + 124);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = 16 * v11;
      do
      {
        *(_OWORD *)(v9 + v12) = *(_OWORD *)(*(_QWORD *)(a1 + 136) + v12);
        v12 += 16;
      }
      while (v13 != v12);
    }
    v14 = *(_QWORD *)(a1 + 136);
    if (v14 && *(_BYTE *)(a1 + 144))
      sub_1B21FF5FC(v14);
    *(_BYTE *)(a1 + 144) = 1;
    *(_QWORD *)(a1 + 136) = v10;
    *(_DWORD *)(a1 + 128) = a4;
    v15 = *(_DWORD *)(a1 + 156);
  }
  *(_DWORD *)(a1 + 124) = a4;
  if (v15 < a4)
  {
    if (*(_DWORD *)(a1 + 160) >= a4)
    {
LABEL_25:
      bzero((void *)(*(_QWORD *)(a1 + 168) + 4 * v15), 4 * (~v15 + a4) + 4);
      goto LABEL_26;
    }
    if (a4)
    {
      v16 = sub_1B21FF5F0(4 * a4, 16);
      LODWORD(v17) = *(_DWORD *)(a1 + 156);
    }
    else
    {
      v16 = 0;
      LODWORD(v17) = v15;
    }
    v18 = *(_QWORD *)(a1 + 168);
    if ((int)v17 < 1)
    {
      if (!v18)
      {
LABEL_24:
        *(_BYTE *)(a1 + 176) = 1;
        *(_QWORD *)(a1 + 168) = v16;
        *(_DWORD *)(a1 + 160) = a4;
        goto LABEL_25;
      }
    }
    else
    {
      v17 = v17;
      v19 = (_DWORD *)v16;
      v20 = *(int **)(a1 + 168);
      do
      {
        v21 = *v20++;
        *v19++ = v21;
        --v17;
      }
      while (v17);
    }
    if (*(_BYTE *)(a1 + 176))
      sub_1B21FF5FC(v18);
    goto LABEL_24;
  }
LABEL_26:
  *(_DWORD *)(a1 + 156) = a4;
  if (a4 >= 1)
  {
    v22 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 136) + 16 * v22) = *(_OWORD *)(a2 + 16 * v22);
      *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v22) = *(_DWORD *)(a3 + 4 * v22);
      ++v22;
    }
    while (a4 != v22);
  }
LABEL_29:
  sub_1B21E1420(a1);
  return a1;
}

uint64_t sub_1B21E37D8@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t *v3;
  float32x4_t v4;
  int8x16_t v5;
  float v6;
  float32x4_t v7;
  int v8;
  int v9;
  float *v10;
  float32x4_t *v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  uint64_t v25;
  int v26;
  float v27;
  int8x16_t v28;
  float v29;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34[128];
  uint64_t v35;

  v3 = (float32x4_t *)result;
  v35 = *MEMORY[0x1E0C80C00];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v4 = *a2;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
  if (v6 >= 1.4211e-14)
    v7 = vmulq_n_f32(v4, 1.0 / sqrtf(v6));
  else
    v7 = (float32x4_t)xmmword_1B2244DB0;
  v33 = v7;
  v32 = 0.0;
  v8 = *(_DWORD *)(result + 124);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = *(float **)(result + 168);
    v11 = *(float32x4_t **)(result + 136);
    v12 = -1.0e18;
    v13 = *(_DWORD *)(result + 124);
    do
    {
      v14 = v13 - 128;
      if (v13 >= 128)
        v13 = 128;
      if (v13 <= 1)
        v15 = 1;
      else
        v15 = v13;
      if (v8 - v9 >= 128)
        v16 = 128;
      else
        v16 = v8 - v9;
      v17 = v16;
      if (v8 - v9 < 1)
      {
        if (v16 >= 4)
          goto LABEL_26;
        v26 = -1;
        v27 = -3.4028e38;
      }
      else
      {
        v18 = v34;
        v19 = v33;
        do
        {
          v20 = *v10++;
          v21 = vmulq_n_f32(vmulq_f32(v19, v3[2]), v20);
          v21.i32[3] = 0;
          v22 = *v11++;
          v31 = vaddq_f32(v22, v21);
          v23 = (*(float (**)(float32x4_t *))(v3->i64[0] + 96))(v3);
          v19 = v33;
          v24 = vsubq_f32(v31, vmulq_n_f32(v33, v23));
          v24.i32[3] = 0;
          *v18++ = v24;
          --v15;
        }
        while (v15);
        if ((int)v17 >= 4)
        {
LABEL_26:
          result = off_1ED4AD5B0((uint64_t)v34, (uint64_t)&v33, v17, (uint64_t)&v32);
          v27 = v32;
          goto LABEL_27;
        }
        v25 = 0;
        v26 = -1;
        v27 = -3.4028e38;
        do
        {
          v28 = (int8x16_t)vmulq_f32(v34[v25], v33);
          v29 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).f32[0];
          if (v29 > v27)
          {
            v27 = v29;
            v26 = v25;
          }
          ++v25;
        }
        while (v25 < v17);
      }
      v32 = v27;
      result = v26;
LABEL_27:
      if (v27 > v12)
      {
        *a3 = v34[result];
        v12 = v27;
      }
      v9 += 128;
      v13 = v14;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t sub_1B21E3A10(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float32x4_t *v4;
  uint64_t v5;
  int v6;
  float *v7;
  float32x4_t *v8;
  int v9;
  float v10;
  float32x4_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  uint64_t v24;
  int v25;
  float v26;
  int8x16_t v27;
  float v28;
  uint64_t v30;
  uint64_t v32;
  int v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a4 >= 1)
  {
    v4 = (float32x4_t *)result;
    v32 = 0;
    v30 = a4;
    while (1)
    {
      v35 = 0.0;
      v5 = v4[7].u32[3];
      if ((int)v5 >= 1)
        break;
LABEL_30:
      if (++v32 == v30)
        return result;
    }
    v6 = 0;
    v7 = (float *)v4[10].i64[1];
    v8 = (float32x4_t *)v4[8].i64[1];
    v9 = v4[7].i32[3];
    v10 = -1.0e18;
    v11 = (float32x4_t *)(a2 + 16 * v32);
    while (1)
    {
      v12 = v9 - 128;
      if (v9 >= 128)
        v9 = 128;
      if (v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 - v6 >= 128)
        v14 = 128;
      else
        v14 = v5 - v6;
      v15 = v14;
      if ((int)v5 - v6 < 1)
      {
        if (v14 >= 4)
          goto LABEL_26;
        v25 = -1;
        v26 = -3.4028e38;
      }
      else
      {
        v33 = v12;
        v16 = v5;
        v17 = *v11;
        v18 = v36;
        do
        {
          v19 = *v7++;
          v20 = vmulq_n_f32(vmulq_f32(v17, v4[2]), v19);
          v20.i32[3] = 0;
          v21 = *v8++;
          v34 = vaddq_f32(v21, v20);
          v22 = (*(float (**)(float32x4_t *))(v4->i64[0] + 96))(v4);
          v17 = *v11;
          v23 = vsubq_f32(v34, vmulq_n_f32(*v11, v22));
          v23.i32[3] = 0;
          *v18++ = v23;
          --v13;
        }
        while (v13);
        if ((int)v15 >= 4)
        {
          v5 = v16;
          v12 = v33;
LABEL_26:
          result = off_1ED4AD5B0((uint64_t)v36, (uint64_t)v11, v15, (uint64_t)&v35);
          v26 = v35;
          goto LABEL_27;
        }
        v24 = 0;
        v25 = -1;
        v26 = -3.4028e38;
        v5 = v16;
        do
        {
          v27 = (int8x16_t)vmulq_f32(v36[v24], *v11);
          v28 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
          if (v28 > v26)
          {
            v26 = v28;
            v25 = v24;
          }
          ++v24;
        }
        while (v24 < v15);
        v12 = v33;
      }
      v35 = v26;
      result = v25;
LABEL_27:
      if (v26 > v10)
      {
        *(float32x4_t *)(a3 + 16 * v32) = v36[result];
        v10 = v26;
      }
      v6 += 128;
      v9 = v12;
      if (v6 >= (int)v5)
        goto LABEL_30;
    }
  }
  return result;
}

float32_t sub_1B21E3C58(float32x4_t *a1, float32x2_t *a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float32x2_t v6;
  float32_t result;

  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmulq_f32(vsubq_f32(a1[6], a1[5]), v3);
  v5 = a3 / 12.0;
  v3.f32[0] = (float)(v4.f32[2] + v4.f32[2]) * (float)(v4.f32[2] + v4.f32[2]);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32);
  v6 = (float32x2_t)vrev64_s32(*(int32x2_t *)v4.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.f32, 0), v6, v6), v5);
  result = v5
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v4, *(float32x2_t *)&v4).i32[1]), v4.f32[0], v4.f32[0]);
  a2[1].f32[0] = result;
  a2[1].i32[1] = 0;
  return result;
}

const char *sub_1B21E3CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t k;

  sub_1B21DF5E8(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  v8 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v8)
  {
    *(_QWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 136));
    *(_DWORD *)(a2 + 64) = v8;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 20, v8);
    v10 = *(_QWORD *)(a1 + 136);
    if ((int)v8 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v9 + 8);
      v13 = *(_QWORD *)(a1 + 168);
      v14 = *(_QWORD *)(a1 + 136);
      do
      {
        for (k = 0; k != 16; k += 4)
          *(_DWORD *)(v12 + k) = *(_DWORD *)(v14 + k);
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 4 * v11++);
        v12 += 20;
        v14 += 16;
      }
      while (v11 != v8);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v9, "btPositionAndRadius", 1497453121, v10);
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
  }
  return "btMultiSphereShapeData";
}

double sub_1B21E3DEC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CC9B0;
  v2 = (uint64_t)(a1 + 15);
  sub_1B1810570((uint64_t)(a1 + 19));
  sub_1B1810570(v2);
  return nullsub_16(a1);
}

void sub_1B21E3E2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E63CC9B0;
  v2 = (uint64_t)(a1 + 15);
  sub_1B1810570((uint64_t)(a1 + 19));
  sub_1B1810570(v2);
  nullsub_16(a1);
  sub_1B21FF5FC(v3);
}

const char *sub_1B21E3E70()
{
  return "MultiSphere";
}

uint64_t sub_1B21E3E7C()
{
  return 72;
}

void sub_1B21E3E84(uint64_t a1)
{
  _QWORD *v1;

  sub_1B21CAB7C(a1);
  *v1 = &off_1E63CBFB8;
}

void sub_1B21E3EA8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1B21CAF3C(a1);
  sub_1B21FF5FC((uint64_t)v1);
}

void sub_1B21E3EBC(float32x4_t *a1, uint64_t a2, int a3, float32x4_t *a4, float32x4_t *a5, int32x2_t a6)
{
  float32x4_t v8;
  uint64_t v9;
  __int32 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  double v33;
  double v34;
  float32x4_t v35;
  double v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  double (**v59)(_QWORD);
  float32x4_t *v60;
  float32x4_t *v61;

  a1[4].i8[8] = a3;
  if (a3)
  {
    a6.i32[0] = 1.0;
    v8 = sub_1B21CAE28(a1, a4, a5, a6);
    v59 = &off_1E63FC758;
    v60 = a1 + 9;
    v61 = a1;
    (*(void (**)(uint64_t, double (***)(_QWORD), float32x4_t *, float32x4_t *, float32x4_t))(*(_QWORD *)a2 + 16))(a2, &v59, a1 + 1, a1 + 2, v8);
    v9 = a1[9].i32[1];
    v10 = 2 * v9;
    v11 = a1[11].i32[1];
    if (v11 < 2 * (int)v9)
    {
      v12 = v11;
      if (a1[11].i32[2] < v10)
      {
        if ((_DWORD)v9)
        {
          v13 = sub_1B21FF5F0(32 * v9, 16);
          v11 = a1[11].i32[1];
        }
        else
        {
          v13 = 0;
        }
        if (v11 >= 1)
        {
          v18 = 0;
          v19 = 16 * v11;
          do
          {
            *(_OWORD *)(v13 + v18) = *(_OWORD *)(a1[12].i64[0] + v18);
            v18 += 16;
          }
          while (v19 != v18);
        }
        v20 = a1[12].i64[0];
        if (v20 && a1[12].i8[8])
          sub_1B21FF5FC(v20);
        a1[12].i8[8] = 1;
        a1[12].i64[0] = v13;
        a1[11].i32[2] = v10;
      }
      v21 = 16 * v12;
      v22 = v10 - v12;
      do
      {
        v23 = (_QWORD *)(a1[12].i64[0] + v21);
        *v23 = 0;
        v23[1] = 0;
        v21 += 16;
        --v22;
      }
      while (v22);
    }
    a1[11].i32[1] = v10;
  }
  else
  {
    v59 = &off_1E63FC780;
    v60 = a1 + 5;
    v57 = xmmword_1B22C9FA0;
    v58 = xmmword_1B22C9FB0;
    (*(void (**)(uint64_t, double (***)(_QWORD), __int128 *, __int128 *))(*(_QWORD *)a2 + 16))(a2, &v59, &v58, &v57);
    v9 = a1[5].i32[1];
    v14 = 2 * v9;
    v15 = a1[7].i32[1];
    if (v15 < 2 * (int)v9)
    {
      v16 = v15;
      if (a1[7].i32[2] < v14)
      {
        if ((_DWORD)v9)
        {
          v17 = sub_1B21FF5F0(v9 << 7, 16);
          v15 = a1[7].i32[1];
        }
        else
        {
          v17 = 0;
        }
        if (v15 >= 1)
        {
          v24 = 0;
          v25 = (unint64_t)v15 << 6;
          do
          {
            v26 = (_OWORD *)(v17 + v24);
            v27 = (_OWORD *)(a1[8].i64[0] + v24);
            *v26 = *v27;
            v26[1] = v27[1];
            v28 = v27[3];
            v26[2] = v27[2];
            v26[3] = v28;
            v24 += 64;
          }
          while (v25 != v24);
        }
        v29 = a1[8].i64[0];
        if (v29 && a1[8].i8[8])
          sub_1B21FF5FC(v29);
        a1[8].i8[8] = 1;
        a1[8].i64[0] = v17;
        a1[7].i32[2] = v14;
      }
      v30 = v16 << 6;
      v31 = v14 - v16;
      do
      {
        v32 = (_OWORD *)(a1[8].i64[0] + v30);
        v32[2] = 0uLL;
        v32[3] = 0uLL;
        *v32 = 0uLL;
        v32[1] = 0uLL;
        v30 += 64;
        --v31;
      }
      while (v31);
    }
    a1[7].i32[1] = v14;
  }
  v33 = nullsub_16(&v59);
  a1[4].i32[1] = 0;
  if ((_DWORD)v9)
  {
    sub_1B21CABF8((uint64_t)a1, 0, v9, v33, v34, v35, v36, v37, v38, v39, v40);
    if (a1[4].i8[8] && !a1[13].i32[3])
    {
      v41 = 1;
      if (!a1[14].i32[0])
      {
        v42 = sub_1B21FF5F0(32, 16);
        v43 = v42;
        v44 = a1[13].u32[3];
        if ((int)v44 >= 1)
        {
          v45 = 0;
          v46 = 32 * v44;
          do
          {
            v47 = (_OWORD *)(v42 + v45);
            v48 = (_OWORD *)(a1[14].i64[1] + v45);
            v49 = v48[1];
            *v47 = *v48;
            v47[1] = v49;
            v45 += 32;
          }
          while (v46 != v45);
        }
        v50 = a1[14].i64[1];
        if (v50 && a1[15].i8[0])
          sub_1B21FF5FC(v50);
        a1[15].i8[0] = 1;
        a1[14].i64[1] = v43;
        a1[14].i32[0] = 1;
        v41 = a1[13].i32[3] + 1;
      }
      a1[13].i32[3] = v41;
      v51 = a1[14].i64[1];
      v52 = a1[12].i64[0];
      *(_WORD *)v51 = *(_WORD *)v52;
      *(_WORD *)(v51 + 2) = *(_WORD *)(v52 + 2);
      *(_WORD *)(v51 + 4) = *(_WORD *)(v52 + 4);
      *(_WORD *)(v51 + 6) = *(_WORD *)(v52 + 6);
      *(_WORD *)(v51 + 8) = *(_WORD *)(v52 + 8);
      *(_WORD *)(v51 + 10) = *(_WORD *)(v52 + 10);
      *(_DWORD *)(v51 + 12) = 0;
      v53 = *(_DWORD *)(v52 + 12);
      if (v53 < 0)
        v54 = -v53;
      else
        v54 = 1;
      *(_DWORD *)(v51 + 16) = v54;
    }
    a1[15].i32[2] = a1[13].i32[3];
    v55 = a1[10].i64[0];
    if (v55 && a1[10].i8[8])
      sub_1B21FF5FC(v55);
    a1[10].i8[8] = 1;
    a1[10].i64[0] = 0;
    a1[9].i32[1] = 0;
    a1[9].i32[2] = 0;
    v56 = a1[6].i64[0];
    if (v56)
    {
      if (a1[6].i8[8])
        sub_1B21FF5FC(v56);
    }
    a1[6].i8[8] = 1;
    a1[6].i64[0] = 0;
    a1[5].i32[1] = 0;
    a1[5].i32[2] = 0;
  }
}

void sub_1B21E4274(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

float32x4_t sub_1B21E4298(uint64_t a1, float32x4_t *a2, int a3, int a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  int v29;
  int v30;
  int v31;
  float32x4_t result;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;

  v6 = a2[1];
  v7 = vminq_f32(vminq_f32(*a2, (float32x4_t)xmmword_1B22C9FA0), v6);
  v8 = vmaxq_f32(vmaxq_f32(*a2, (float32x4_t)xmmword_1B22C9FB0), v6);
  v9 = a2[2];
  v10 = vminq_f32(v7, v9);
  v11 = vmaxq_f32(v8, v9);
  v12 = (int8x16_t)v10;
  *(float *)v12.i32 = v10.f32[0] + -0.001;
  v13 = (int8x16_t)v11;
  *(float *)v13.i32 = v11.f32[0] + 0.001;
  v9.i32[0] = 990057071;
  v14 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v9, vsubq_f32(v11, v10)), 0);
  v15 = (float32x4_t)vbslq_s8(v14, v12, (int8x16_t)v10);
  v16 = (float32x4_t)vbslq_s8(v14, v13, (int8x16_t)v11);
  if ((float)(v16.f32[1] - v15.f32[1]) < 0.002)
  {
    v16.f32[1] = v16.f32[1] + 0.001;
    v15.f32[1] = v15.f32[1] + -0.001;
  }
  if ((float)(v16.f32[2] - v15.f32[2]) < 0.002)
  {
    v16.f32[2] = v16.f32[2] + 0.001;
    v15.f32[2] = v15.f32[2] + -0.001;
  }
  v18 = *(_QWORD *)(a1 + 8);
  v17 = *(float32x4_t **)(a1 + 16);
  v19 = v17[1];
  v20 = v17[3];
  v21 = *(_DWORD *)(v18 + 4);
  if (v21 == *(_DWORD *)(v18 + 8))
  {
    v22 = v21 ? 2 * v21 : 1;
    if (v21 < v22)
    {
      v36 = v16;
      v37 = v15;
      v34 = v19;
      v35 = v20;
      if (v22)
      {
        v23 = sub_1B21FF5F0(16 * v22, 16);
        v19 = v34;
        v20 = v35;
        v16 = v36;
        v15 = v37;
        v24 = v23;
        v21 = *(_DWORD *)(v18 + 4);
      }
      else
      {
        v24 = 0;
      }
      if (v21 >= 1)
      {
        v25 = 0;
        v26 = 16 * v21;
        do
        {
          *(_OWORD *)(v24 + v25) = *(_OWORD *)(*(_QWORD *)(v18 + 16) + v25);
          v25 += 16;
        }
        while (v26 != v25);
      }
      v27 = *(_QWORD *)(v18 + 16);
      if (v27 && *(_BYTE *)(v18 + 24))
      {
        sub_1B21FF5FC(v27);
        v19 = v34;
        v20 = v35;
        v16 = v36;
        v15 = v37;
      }
      *(_BYTE *)(v18 + 24) = 1;
      *(_QWORD *)(v18 + 16) = v24;
      *(_DWORD *)(v18 + 8) = v22;
      v21 = *(_DWORD *)(v18 + 4);
    }
  }
  v28 = vmulq_f32(v20, vsubq_f32(v16, v19));
  v29 = (int)(float)(v28.f32[2] + 1.0) | 1;
  v30 = (int)(float)(v28.f32[1] + 1.0) | 1;
  v31 = (int)(float)(v28.f32[0] + 1.0) | 1;
  result = vmulq_f32(v20, vsubq_f32(v15, v19));
  v33 = *(_QWORD *)(v18 + 16) + 16 * v21;
  *(_WORD *)v33 = (int)result.f32[0] & 0xFFFE;
  *(_WORD *)(v33 + 2) = (int)result.f32[1] & 0xFFFE;
  *(_WORD *)(v33 + 4) = (int)result.f32[2] & 0xFFFE;
  *(_WORD *)(v33 + 6) = v31;
  *(_WORD *)(v33 + 8) = v30;
  *(_WORD *)(v33 + 10) = v29;
  *(_DWORD *)(v33 + 12) = a4 | (a3 << 21);
  ++*(_DWORD *)(v18 + 4);
  return result;
}

void sub_1B21E44D4(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

float32x4_t sub_1B21E44F8(uint64_t a1, float32x4_t *a2, __int32 a3, __int32 a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  float32x4_t result;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v9 + 4);
  if (v10 == *(_DWORD *)(v9 + 8))
  {
    v11 = v10 ? 2 * v10 : 1;
    if (v10 < v11)
    {
      v23 = a2[1];
      v24 = *a2;
      v22 = a2[2];
      if (v11)
      {
        v12 = sub_1B21FF5F0((uint64_t)v11 << 6, 16);
        v8 = v22;
        v7 = v23;
        v6 = v24;
        v13 = v12;
        v10 = *(_DWORD *)(v9 + 4);
      }
      else
      {
        v13 = 0;
      }
      if (v10 >= 1)
      {
        v14 = 0;
        v15 = (unint64_t)v10 << 6;
        do
        {
          v16 = (_OWORD *)(v13 + v14);
          v17 = (_OWORD *)(*(_QWORD *)(v9 + 16) + v14);
          *v16 = *v17;
          v16[1] = v17[1];
          v18 = v17[3];
          v16[2] = v17[2];
          v16[3] = v18;
          v14 += 64;
        }
        while (v15 != v14);
      }
      v19 = *(_QWORD *)(v9 + 16);
      if (v19 && *(_BYTE *)(v9 + 24))
      {
        sub_1B21FF5FC(v19);
        v8 = v22;
        v7 = v23;
        v6 = v24;
      }
      *(_BYTE *)(v9 + 24) = 1;
      *(_QWORD *)(v9 + 16) = v13;
      *(_DWORD *)(v9 + 8) = v11;
      v10 = *(_DWORD *)(v9 + 4);
    }
  }
  result = vmaxq_f32(vmaxq_f32(vmaxq_f32(v6, (float32x4_t)xmmword_1B22C9FB0), v7), v8);
  v21 = (float32x4_t *)(*(_QWORD *)(v9 + 16) + ((uint64_t)v10 << 6));
  *v21 = vminq_f32(vminq_f32(vminq_f32(v6, (float32x4_t)xmmword_1B22C9FA0), v7), v8);
  v21[1] = result;
  v21[2].i32[0] = -1;
  v21[2].i32[1] = a3;
  v21[2].i32[2] = a4;
  ++*(_DWORD *)(v9 + 4);
  return result;
}

void sub_1B21E464C(uint64_t a1)
{
  _QWORD *v1;

  sub_1B21E0FCC(a1);
  *v1 = off_1E63CD410;
  v1[9] = 0;
}

double sub_1B21E4670(_QWORD *a1)
{
  void (***v2)(_QWORD);

  *a1 = off_1E63CD410;
  v2 = (void (***)(_QWORD))a1[9];
  if (v2)
  {
    (**v2)(v2);
    sub_1B21FF5FC(a1[9]);
  }
  return nullsub_16(a1);
}

uint64_t sub_1B21E46C0(uint64_t a1, int a2)
{
  float32x4_t **v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  double v5;
  float32x4_t *v6;
  double v7;
  double v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  float v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v42;
  uint64_t v43;
  float32x4_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int *v62;
  int v63;
  float32x4_t v64;
  int8x16_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t *v74;
  int8x16_t v75;
  float32x4_t v76;
  _DWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  int *v82;
  uint64_t v83;
  int8x16_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  int *v92;
  int v93;
  int v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  float32x4_t v103;
  int8x16_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  int *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  float32x4_t v113;
  int v114;
  uint64_t i;
  unsigned int v116;
  __int128 v117;
  uint64_t v118;
  int *v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t j;
  int8x16_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  int *v140;
  int v141;
  uint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  uint64_t k;
  int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  int v152;
  uint64_t v153;
  int *v154;
  int v155;
  char v156;
  float32x4_t *v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t *v172;
  int v173;
  float32x4_t **v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  int *v188;
  __int128 v190;
  uint64_t v191;
  float32x4_t v192;
  __int128 v193;
  uint64_t v194;
  _BYTE v195[4];
  int v196;
  int v197;
  uint64_t v198;
  char v199;
  float32x4_t v200;
  _BYTE v201[4];
  unsigned int v202;
  int v203;
  uint64_t v204;
  char v205;
  _BYTE v206[4];
  int v207;
  int v208;
  uint64_t v209;
  char v210;
  _BYTE v211[4];
  uint64_t v212;
  uint64_t v213;
  char v214;
  _BYTE v215[4];
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  _BYTE v225[4];
  uint64_t v226;
  uint64_t v227;
  char v228;
  int8x16_t v229;
  int8x16_t v230;
  __int128 v231;
  uint64_t v232;

  v2 = (float32x4_t **)a1;
  v232 = *MEMORY[0x1E0C80C00];
  v3 = *(void (****)(_QWORD))(a1 + 72);
  if (v3)
  {
    (**v3)(v3);
    sub_1B21FF5FC((uint64_t)v2[9]);
  }
  v4 = sub_1B21FF5F0(192, 16);
  v5 = sub_1B21E1560(v4);
  v2[9] = v6;
  v228 = 1;
  v227 = 0;
  v226 = 0;
  if (((int (*)(float32x4_t **, double))(*v2)[12].i64[0])(v2, v5) >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      if (v13 == (_DWORD)v12)
      {
        if ((_DWORD)v12)
          v15 = (2 * v12);
        else
          v15 = 1;
        if ((int)v12 < (int)v15)
        {
          if ((_DWORD)v15)
            v16 = sub_1B21FF5F0(16 * (int)v15, 16);
          else
            v16 = 0;
          if ((int)v12 >= 1)
          {
            v18 = 0;
            do
            {
              *(_OWORD *)(v16 + v18) = *(_OWORD *)(v227 + v18);
              v18 += 16;
            }
            while (16 * v12 != v18);
            v11 = v227;
          }
          if (v11)
            v19 = v228 == 0;
          else
            v19 = 1;
          if (!v19)
            sub_1B21FF5FC(v11);
          v228 = 1;
          v227 = v16;
          HIDWORD(v226) = v15;
          v17 = v226;
          goto LABEL_26;
        }
        v16 = v11;
        v17 = v12;
      }
      else
      {
        v16 = v11;
        v17 = v13;
      }
      v15 = v12;
LABEL_26:
      v20 = v17 + 1;
      LODWORD(v226) = v17 + 1;
      ((void (*)(float32x4_t **, uint64_t, uint64_t))(*v2)[13].i64[1])(v2, v14, v16 + 16 * v13);
      v14 = (v14 + 1);
      v11 = v16;
      v12 = v15;
      v13 = v20;
      if ((int)v14 >= ((int (*)(float32x4_t **))(*v2)[12].i64[0])(v2))
        goto LABEL_29;
    }
  }
  v20 = 0;
  v16 = 0;
LABEL_29:
  v218 = 1;
  v217 = 0;
  v216 = 0;
  v221 = 1;
  v220 = 0;
  v219 = 0;
  v224 = 1;
  v223 = 0;
  v222 = 0;
  if (a2)
  {
    v230.i8[8] = 1;
    v230.i64[0] = 0;
    *(uint64_t *)((char *)v229.i64 + 4) = 0;
    sub_1B2206B84((uint64_t)v225, (uint64_t)&v229);
    v214 = 1;
    v213 = 0;
    v212 = 0;
    if (v229.i32[1] >= 1)
    {
      v21 = 0;
      do
      {
        v190 = *(_OWORD *)(v230.i64[0] + 16 * v21);
        v22 = ((float (*)(float32x4_t **))(*v2)[6].i64[0])(v2);
        v23 = v212;
        if ((_DWORD)v212 == HIDWORD(v212))
        {
          v24 = (_DWORD)v212 ? 2 * v212 : 1;
          if ((int)v212 < v24)
          {
            if (v24)
            {
              v25 = sub_1B21FF5F0(16 * v24, 16);
              v23 = v212;
            }
            else
            {
              v25 = 0;
            }
            if (v23 >= 1)
            {
              v26 = 0;
              v27 = 16 * v23;
              do
              {
                *(_OWORD *)(v25 + v26) = *(_OWORD *)(v213 + v26);
                v26 += 16;
              }
              while (v27 != v26);
            }
            if (v213)
              v28 = v214 == 0;
            else
              v28 = 1;
            if (!v28)
              sub_1B21FF5FC(v213);
            v214 = 1;
            v213 = v25;
            HIDWORD(v212) = v24;
            v23 = v212;
          }
        }
        v29 = v190;
        *((float *)&v29 + 3) = *((float *)&v190 + 3) - v22;
        *(_OWORD *)(v213 + 16 * v23) = v29;
        LODWORD(v212) = v212 + 1;
        ++v21;
      }
      while (v21 < v229.i32[1]);
    }
    v210 = 1;
    v209 = 0;
    v207 = 0;
    v208 = 0;
    sub_1B2206EA8((uint64_t)v211, (uint64_t)v206);
    LODWORD(v30) = 0;
    LODWORD(v31) = 0;
    sub_1B22060B8((uint64_t)v215, v209, 0, 16, v207, v30, v31, v32, v33, v34);
    if (v209 && v210)
      sub_1B21FF5FC(v209);
    if (v213 && v214)
      sub_1B21FF5FC(v213);
    if (v230.i64[0] && v230.i8[8])
      sub_1B21FF5FC(v230.i64[0]);
  }
  else
  {
    LODWORD(v7) = 0;
    sub_1B22060B8((uint64_t)v215, v16, 0, 16, v20, 0.0, v7, v8, v9, v10);
  }
  v35 = v222;
  if ((int)v222 < 1)
    v36 = 0;
  else
    v36 = sub_1B21FF5F0(16 * v222, 16);
  v186 = v36;
  v214 = 1;
  v213 = 0;
  HIDWORD(v212) = 0;
  v229 = 0u;
  v230 = 0u;
  v231 = 0u;
  v230.i8[8] = 1;
  v229.i32[1] = 0;
  if ((v35 & 0x80000000) != 0)
  {
    v39 = 48 * (int)v35;
    v40 = (int)v35 + 1;
    do
      v39 = sub_1B1810570(v39) + 48;
    while ((_DWORD)v40++);
    goto LABEL_70;
  }
  if (!(_DWORD)v35)
  {
LABEL_70:
    v37 = 0;
    goto LABEL_71;
  }
  v37 = sub_1B21FF5F0(48 * v35, 16);
  v38 = 0;
  v214 = 1;
  v213 = v37;
  HIDWORD(v212) = v35;
  do
  {
    *(_OWORD *)(sub_1B21E6808(v37 + v38, (uint64_t)&v229) + 32) = v231;
    v38 += 48;
  }
  while (48 * v35 != v38);
LABEL_71:
  LODWORD(v212) = v35;
  if (v230.i64[0])
    v42 = v230.u8[8] == 0;
  else
    v42 = 1;
  if (!v42)
    sub_1B21FF5FC(v230.i64[0]);
  v43 = v216;
  v44 = v2[9];
  v45 = v44->i32[3];
  if (v45 < (int)v216 && v44[1].i32[0] < (int)v216)
  {
    if ((_DWORD)v216)
    {
      v46 = sub_1B21FF5F0(16 * (int)v216, 16);
      v45 = v44->i32[3];
    }
    else
    {
      v46 = 0;
    }
    if (v45 >= 1)
    {
      v47 = 0;
      v48 = 16 * v45;
      do
      {
        *(_OWORD *)(v46 + v47) = *(_OWORD *)(v44[1].i64[1] + v47);
        v47 += 16;
      }
      while (v48 != v47);
    }
    v49 = v44[1].i64[1];
    if (v49 && v44[2].i8[0])
      sub_1B21FF5FC(v49);
    v44[2].i8[0] = 1;
    v44[1].i64[1] = v46;
    v44[1].i32[0] = v43;
  }
  v44->i32[3] = v43;
  if ((int)v43 >= 1)
  {
    v50 = 0;
    do
    {
      *(_OWORD *)(v2[9][1].i64[1] + v50) = *(_OWORD *)(v217 + v50);
      v50 += 16;
    }
    while (16 * v43 != v50);
  }
  if ((int)v35 <= 0)
  {
    v210 = 1;
    v209 = 0;
    v207 = 0;
    v208 = 0;
    goto LABEL_310;
  }
  v51 = 0;
  v191 = v35;
  do
  {
    v52 = 0;
    v53 = v220 + 12 * *(int *)(v223 + 4 * v51);
    v54 = v37 + 48 * v51;
    v55 = v53;
    do
    {
      while (1)
      {
        v56 = *(_DWORD *)(v55 + 12 * *(int *)(v55 + 4) + 8);
        LODWORD(v57) = *(_DWORD *)(v54 + 4);
        if ((_DWORD)v57 == *(_DWORD *)(v54 + 8))
        {
          v58 = (_DWORD)v57 ? 2 * v57 : 1;
          if ((int)v57 < v58)
          {
            if (v58)
            {
              v59 = sub_1B21FF5F0(4 * v58, 16);
              LODWORD(v57) = *(_DWORD *)(v54 + 4);
            }
            else
            {
              v59 = 0;
            }
            v60 = *(_QWORD *)(v54 + 16);
            if ((int)v57 < 1)
            {
              if (!v60)
              {
LABEL_110:
                *(_BYTE *)(v54 + 24) = 1;
                *(_QWORD *)(v54 + 16) = v59;
                *(_DWORD *)(v54 + 8) = v58;
                LODWORD(v57) = *(_DWORD *)(v54 + 4);
                goto LABEL_111;
              }
            }
            else
            {
              v57 = v57;
              v61 = (_DWORD *)v59;
              v62 = *(int **)(v54 + 16);
              do
              {
                v63 = *v62++;
                *v61++ = v63;
                --v57;
              }
              while (v57);
            }
            if (*(_BYTE *)(v54 + 24))
              sub_1B21FF5FC(v60);
            *(_QWORD *)(v54 + 16) = 0;
            goto LABEL_110;
          }
        }
LABEL_111:
        *(_DWORD *)(*(_QWORD *)(v54 + 16) + 4 * (int)v57) = v56;
        ++*(_DWORD *)(v54 + 4);
        if ((int)v52 <= 1)
          break;
        v68 = (int *)(v55 + 12 * *(int *)(v55 + 4));
        v55 = (unint64_t)&v68[3 * *v68];
        v52 = 2;
        if (v55 == v53)
          goto LABEL_117;
      }
      v64 = vsubq_f32(*(float32x4_t *)(v217 + 16 * *(int *)(v55 + 8)), *(float32x4_t *)(v217 + 16 * v56));
      v64.i32[3] = 0;
      v65 = (int8x16_t)vmulq_f32(v64, v64);
      v66 = v52 + 1;
      *((float32x4_t *)&v229 + v52) = vmulq_n_f32(v64, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)).f32[0]));
      v67 = (int *)(v55 + 12 * *(int *)(v55 + 4));
      v55 = (unint64_t)&v67[3 * *v67];
      ++v52;
    }
    while (v55 != v53);
    if (v66 == 2)
    {
LABEL_117:
      *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v229.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v229, v229, 8uLL), 4uLL);
      v69.i64[1] = v229.i64[0];
      *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)v230.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v230, v230, 8uLL), 4uLL);
      v70.i64[1] = v230.i64[0];
      v71 = (int8x16_t)vsubq_f32(vmulq_f32((float32x4_t)v229, v70), vmulq_f32((float32x4_t)v230, v69));
      v72.i64[0] = vextq_s8(v71, v71, 4uLL).u64[0];
      v72.i64[1] = v71.u32[0];
      v73 = v186;
      v74 = (float32x4_t *)(v186 + 16 * v51);
      v75 = (int8x16_t)vmulq_f32(v72, v72);
      v76 = vmulq_n_f32(v72, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)).f32[0]));
      *v74 = v76;
      v37 = v213;
      v77 = (_DWORD *)(v213 + 48 * v51);
      v77[8] = v76.i32[0];
      v77[9] = v74->i32[1];
      v77[10] = v74->i32[2];
      v77[11] = 1900671690;
      goto LABEL_119;
    }
    v73 = v186;
    v78 = (_QWORD *)(v186 + 16 * v51);
    *v78 = 0;
    v78[1] = 0;
    v37 = v213;
LABEL_119:
    v79 = v37 + 48 * v51;
    v80 = *(unsigned int *)(v79 + 4);
    v81 = 1.0e30;
    if ((int)v80 >= 1)
    {
      v82 = *(int **)(v79 + 16);
      v81 = 1.0e30;
      do
      {
        v83 = *v82++;
        v84 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v2[9][1].i64[1] + 16 * v83), *(float32x4_t *)(v73 + 16 * v51));
        v85 = vadd_f32(vpadd_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)).f32[0];
        if (v81 > v85)
          v81 = v85;
        --v80;
      }
      while (v80);
    }
    *(float *)(v37 + 48 * v51++ + 44) = -v81;
  }
  while (v51 != v191);
  v210 = 1;
  v209 = 0;
  v207 = 0;
  v208 = 0;
  if ((int)v212 >= 1)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    v88 = 0;
    while (2)
    {
      if ((_DWORD)v87 == v208 && (!(_DWORD)v87 ? (v89 = 1) : (v89 = 2 * v87), (int)v87 < v89))
      {
        if (v89)
        {
          v90 = sub_1B21FF5F0(4 * v89, 16);
          LODWORD(v87) = v207;
          v86 = v209;
        }
        else
        {
          v90 = 0;
        }
        if ((int)v87 >= 1)
        {
          v87 = v87;
          v91 = (_DWORD *)v90;
          v92 = (int *)v86;
          do
          {
            v93 = *v92++;
            *v91++ = v93;
            --v87;
          }
          while (v87);
          goto LABEL_141;
        }
        if (v86)
        {
LABEL_141:
          if (v210)
            sub_1B21FF5FC(v86);
        }
        v210 = 1;
        v209 = v90;
        v208 = v89;
        LODWORD(v87) = v207;
      }
      else
      {
        v90 = v86;
      }
      *(_DWORD *)(v90 + 4 * (int)v87) = v88;
      LODWORD(v87) = ++v207;
      ++v88;
      v86 = v90;
      if (v88 < (int)v212)
        continue;
      break;
    }
    if ((_DWORD)v87)
    {
      while (2)
      {
        v94 = *(_DWORD *)(v209 + 4 * ((int)v87 - 1));
        v95 = (int *)sub_1B21FF5F0(4, 16);
        *v95 = v94;
        v96 = v207--;
        v97 = (v96 - 2);
        if (v96 < 2)
        {
          LODWORD(v100) = 1;
          goto LABEL_281;
        }
        v98 = v213 + 48 * v94;
        v99.i64[0] = *(_QWORD *)(v98 + 32);
        v99.i64[1] = *(unsigned int *)(v98 + 40);
        LODWORD(v100) = 1;
        v101 = 1;
        v192 = v99;
LABEL_148:
        v229.i32[0] = 0;
        v229.i32[0] = *(_DWORD *)(v209 + 4 * v97);
        v102 = v213 + 48 * v229.i32[0];
        v103.i64[0] = *(_QWORD *)(v102 + 32);
        v103.i64[1] = *(unsigned int *)(v102 + 40);
        v104 = (int8x16_t)vmulq_f32(v99, v103);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL)).f32[0] > 0.999)
        {
          if ((_DWORD)v100 == v101)
          {
            if ((_DWORD)v100)
              v101 = 2 * v100;
            else
              v101 = 1;
            if ((int)v100 >= v101)
            {
              v105 = (uint64_t)v95;
              v101 = v100;
            }
            else
            {
              if (v101)
                v105 = sub_1B21FF5F0(4 * v101, 16);
              else
                v105 = 0;
              if ((int)v100 < 1)
              {
                if (v95)
                  goto LABEL_164;
              }
              else
              {
                v106 = v100;
                v107 = (_DWORD *)v105;
                v108 = v95;
                do
                {
                  v109 = *v108++;
                  *v107++ = v109;
                  --v106;
                }
                while (v106);
LABEL_164:
                sub_1B21FF5FC((uint64_t)v95);
              }
            }
          }
          else
          {
            v105 = (uint64_t)v95;
          }
          *(_DWORD *)(v105 + 4 * (int)v100) = v229.i32[0];
          LODWORD(v100) = v100 + 1;
          sub_1B21E5898((uint64_t)v206, &v229);
          v95 = (int *)v105;
          v99 = v192;
        }
        v147 = v97-- <= 0;
        if (v147)
        {
          if ((int)v100 <= 1)
            goto LABEL_280;
          v110 = 0;
          v111 = 0;
          v205 = 1;
          v204 = 0;
          v202 = 0;
          v203 = 0;
          v200 = 0uLL;
          v187 = v213;
          v188 = v95;
          do
          {
            v112 = v187 + 48 * v95[v111];
            v113.i64[0] = *(_QWORD *)(v112 + 32);
            v113.i64[1] = *(unsigned int *)(v112 + 40);
            v200 = vaddq_f32(v200, v113);
            v114 = *(_DWORD *)(v112 + 4);
            if (v114 >= 1)
            {
              for (i = 0; i < v114; ++i)
              {
                v116 = *(_DWORD *)(*(_QWORD *)(v112 + 16) + 4 * i);
                v117 = *(_OWORD *)(v2[9][1].i64[1] + 16 * (int)v116);
                if (v110 < 1)
                {
LABEL_176:
                  if (v110 == v203)
                  {
                    v121 = v110 ? 2 * v110 : 1;
                    if (v110 < v121)
                    {
                      v193 = *(_OWORD *)(v2[9][1].i64[1] + 16 * *(int *)(*(_QWORD *)(v112 + 16) + 4 * i));
                      if (v121)
                      {
                        v122 = sub_1B21FF5F0(32 * v121, 16);
                        v110 = v202;
                      }
                      else
                      {
                        v122 = 0;
                      }
                      if (v110 >= 1)
                      {
                        v123 = 0;
                        v124 = 32 * v110;
                        do
                        {
                          v125 = v122 + v123;
                          v126 = v204 + v123;
                          *(_OWORD *)v125 = *(_OWORD *)(v204 + v123);
                          *(_QWORD *)(v125 + 16) = *(_QWORD *)(v126 + 16);
                          v123 += 32;
                        }
                        while (v124 != v123);
                      }
                      if (v204)
                        v127 = v205 == 0;
                      else
                        v127 = 1;
                      if (!v127)
                        sub_1B21FF5FC(v204);
                      v205 = 1;
                      v204 = v122;
                      v203 = v121;
                      v110 = v202;
                      v117 = v193;
                    }
                  }
                  v55 = v55 | ((unint64_t)v116 << 32);
                  v128 = v204 + 32 * v110;
                  *(_OWORD *)v128 = v117;
                  *(_QWORD *)(v128 + 16) = v55;
                  v110 = ++v202;
                  v114 = *(_DWORD *)(v112 + 4);
                }
                else
                {
                  v118 = v110;
                  v119 = (int *)(v204 + 20);
                  while (1)
                  {
                    v120 = *v119;
                    v119 += 8;
                    if (v120 == v116)
                      break;
                    if (!--v118)
                      goto LABEL_176;
                  }
                }
              }
            }
            ++v111;
            v95 = v188;
          }
          while (v111 != v100);
          v230.i8[8] = 1;
          v230.i64[0] = 0;
          *(uint64_t *)((char *)v229.i64 + 4) = 0;
          v129 = v187 + 48 * *v188;
          for (j = 8; j != 12; ++j)
            v229.i32[j] = *(_DWORD *)(v129 + j * 4);
          v199 = 1;
          v198 = 0;
          v196 = 0;
          v197 = 0;
          v131 = (int8x16_t)vmulq_f32(v200, v200);
          v200 = vmulq_n_f32(v200, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v131.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)).f32[0]));
          sub_1B21E58F8((uint64_t)v201, (uint64_t)v195, &v200);
          if (v196 > 0)
          {
            v132 = 0;
            v133 = v229.i32[1];
            while (1)
            {
              v134 = v198;
              if (v133 == v229.i32[2])
                break;
LABEL_217:
              *(_DWORD *)(v230.i64[0] + 4 * v133) = *(_DWORD *)(v134 + 32 * v132 + 20);
              v133 = ++v229.i32[1];
              v142 = v202;
              if ((int)v202 >= 1)
              {
                v143 = (_DWORD *)(v204 + 20);
                v144 = v202;
                while (*v143 != *(_DWORD *)(v198 + 32 * v132 + 20))
                {
                  v143 += 8;
                  if (!--v144)
                    goto LABEL_223;
                }
                *v143 = -1;
              }
LABEL_223:
              if (++v132 >= v196)
                goto LABEL_227;
            }
            if (v133)
              v135 = 2 * v133;
            else
              v135 = 1;
            if (v133 < v135)
            {
              if (v135)
              {
                v136 = sub_1B21FF5F0(4 * v135, 16);
                v133 = v229.i32[1];
              }
              else
              {
                v136 = 0;
              }
              v137 = v230.i64[0];
              if (v133 >= 1)
              {
                v138 = v133;
                v139 = (_DWORD *)v136;
                v140 = (int *)v230.i64[0];
                do
                {
                  v141 = *v140++;
                  *v139++ = v141;
                  --v138;
                }
                while (v138);
                goto LABEL_213;
              }
              if (v230.i64[0])
              {
LABEL_213:
                if (v230.i8[8])
                  sub_1B21FF5FC(v137);
              }
              v230.i8[8] = 1;
              v230.i64[0] = v136;
              v229.i32[2] = v135;
              v133 = v229.i32[1];
            }
            v95 = v188;
            goto LABEL_217;
          }
          v142 = v202;
LABEL_227:
          if ((int)v142 >= 1)
          {
            for (k = 0; k != v142; ++k)
            {
              v146 = *(_DWORD *)(v204 + 32 * k + 20);
              v147 = v146 == -1 || (int)v212 < 1;
              if (!v147)
              {
                v148 = 0;
                while (2)
                {
                  v149 = v100;
                  v150 = v187 + 48 * v148;
                  v151 = v95;
                  while (1)
                  {
                    v152 = *v151++;
                    if (v148 == v152)
                      break;
                    if (!--v149)
                    {
                      v153 = *(unsigned int *)(v150 + 4);
                      if ((int)v153 >= 1)
                      {
                        v154 = *(int **)(v150 + 16);
                        while (1)
                        {
                          v155 = *v154++;
                          if (v155 == v146)
                            break;
                          if (!--v153)
                            goto LABEL_243;
                        }
                        v156 = 0;
                        goto LABEL_266;
                      }
                      break;
                    }
                  }
LABEL_243:
                  if (++v148 != v212)
                    continue;
                  break;
                }
              }
            }
          }
          v157 = v2[9];
          v158 = v157[2].i32[3];
          if (v158 == v157[3].i32[0])
          {
            if (v158)
              v159 = 2 * v158;
            else
              v159 = 1;
            if (v158 < v159)
            {
              if (v159)
              {
                v160 = sub_1B21FF5F0(48 * v159, 16);
                v158 = v157[2].i32[3];
              }
              else
              {
                v160 = 0;
              }
              if (v158 >= 1)
              {
                v161 = 0;
                v162 = 48 * v158;
                do
                {
                  v163 = v157[3].i64[1] + v161;
                  *(_OWORD *)(sub_1B21E6808(v160 + v161, v163) + 32) = *(_OWORD *)(v163 + 32);
                  v161 += 48;
                }
                while (v162 != v161);
                v164 = v157[2].u32[3];
                if ((int)v164 >= 1)
                {
                  v165 = 0;
                  v166 = 48 * v164;
                  do
                  {
                    sub_1B1810570(v157[3].i64[1] + v165);
                    v165 += 48;
                  }
                  while (v166 != v165);
                }
              }
              v167 = v157[3].i64[1];
              if (v167 && v157[4].i8[0])
                sub_1B21FF5FC(v167);
              v157[4].i8[0] = 1;
              v157[3].i64[1] = v160;
              v157[3].i32[0] = v159;
              v158 = v157[2].i32[3];
            }
            v95 = v188;
          }
          *(_OWORD *)(sub_1B21E6808(v157[3].i64[1] + 48 * v158, (uint64_t)&v229) + 32) = v231;
          ++v157[2].i32[3];
          v156 = 1;
LABEL_266:
          if (v198)
            v168 = v199 == 0;
          else
            v168 = 1;
          if (!v168)
            sub_1B21FF5FC(v198);
          if (v230.i64[0])
            v169 = v230.u8[8] == 0;
          else
            v169 = 1;
          if (!v169)
            sub_1B21FF5FC(v230.i64[0]);
          if (v204 && v205)
            sub_1B21FF5FC(v204);
          if ((v156 & 1) == 0)
          {
LABEL_280:
            if ((int)v100 >= 1)
            {
LABEL_281:
              v170 = 0;
              v100 = v100;
              v194 = v100;
              do
              {
                v171 = v213 + 48 * v95[v170];
                sub_1B21E6808((uint64_t)&v229, v171);
                v231 = *(_OWORD *)(v171 + 32);
                v172 = v2[9];
                v173 = v172[2].i32[3];
                if (v173 == v172[3].i32[0])
                {
                  v174 = v2;
                  v175 = v95;
                  if (v173)
                    v176 = 2 * v173;
                  else
                    v176 = 1;
                  if (v173 < v176)
                  {
                    if (v176)
                    {
                      v177 = sub_1B21FF5F0(48 * v176, 16);
                      v173 = v172[2].i32[3];
                    }
                    else
                    {
                      v177 = 0;
                    }
                    if (v173 >= 1)
                    {
                      v178 = 0;
                      v179 = 48 * v173;
                      do
                      {
                        v180 = v172[3].i64[1] + v178;
                        *(_OWORD *)(sub_1B21E6808(v177 + v178, v180) + 32) = *(_OWORD *)(v180 + 32);
                        v178 += 48;
                      }
                      while (v179 != v178);
                      v181 = v172[2].u32[3];
                      if ((int)v181 >= 1)
                      {
                        v182 = 0;
                        v183 = 48 * v181;
                        do
                        {
                          sub_1B1810570(v172[3].i64[1] + v182);
                          v182 += 48;
                        }
                        while (v183 != v182);
                      }
                    }
                    v184 = v172[3].i64[1];
                    if (v184 && v172[4].i8[0])
                      sub_1B21FF5FC(v184);
                    v172[4].i8[0] = 1;
                    v172[3].i64[1] = v177;
                    v172[3].i32[0] = v176;
                    v173 = v172[2].i32[3];
                  }
                  v95 = v175;
                  v2 = v174;
                  v100 = v194;
                }
                *(_OWORD *)(sub_1B21E6808(v172[3].i64[1] + 48 * v173, (uint64_t)&v229) + 32) = v231;
                ++v172[2].i32[3];
                if (v230.i64[0] && v230.i8[8])
                  sub_1B21FF5FC(v230.i64[0]);
                ++v170;
              }
              while (v170 != v100);
            }
          }
          if (v95)
            sub_1B21FF5FC((uint64_t)v95);
          LODWORD(v87) = v207;
          if (!v207)
            break;
          continue;
        }
        goto LABEL_148;
      }
    }
  }
LABEL_310:
  sub_1B21E1720(v2[9]);
  if (v209 && v210)
    sub_1B21FF5FC(v209);
  sub_1B21E2124((uint64_t)v211);
  if (v186)
    sub_1B21FF5FC(v186);
  if (v223 && v224)
    sub_1B21FF5FC(v223);
  v224 = 1;
  v223 = 0;
  v222 = 0;
  if (v220 && v221)
    sub_1B21FF5FC(v220);
  v221 = 1;
  v220 = 0;
  v219 = 0;
  if (v217 && v218)
    sub_1B21FF5FC(v217);
  if (v227 && v228)
    sub_1B21FF5FC(v227);
  return 1;
}

uint64_t sub_1B21E5898(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 16);
    while (*(_DWORD *)(v4 + 4 * v3) != *a2)
    {
      if (v2 == ++v3)
        return result;
    }
    if ((int)v2 > (int)v3)
    {
      v5 = v2 - 1;
      v6 = *(_DWORD *)(v4 + 4 * v3);
      *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * v5);
      *(_DWORD *)(v4 + 4 * v5) = v6;
      --*(_DWORD *)(result + 4);
    }
  }
  return result;
}

void sub_1B21E58F8(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float v6;
  float v7;
  float v8;
  float32_t v9;
  float32x4_t v10;
  float v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  float32x4_t *v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int8x16_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float *f32;
  uint64_t v39;
  float32x4_t v40;
  int8x8_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x8_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  float32x4_t *v88;
  float32x4_t v89;

  v6 = a3->f32[2];
  v7 = a3->f32[1];
  if (fabsf(v6) <= 0.70711)
  {
    v11 = 1.0 / sqrtf((float)(v7 * v7) + (float)(a3->f32[0] * a3->f32[0]));
    v10.i64[1] = 0;
    v10.f32[0] = -(float)(v7 * v11);
    v10.f32[1] = a3->f32[0] * v11;
  }
  else
  {
    v8 = 1.0 / sqrtf((float)(v6 * v6) + (float)(v7 * v7));
    v9 = -(float)(v6 * v8);
    v10.i32[0] = 0;
    v10.i32[3] = 0;
    v10.f32[1] = v9;
    v10.f32[2] = v7 * v8;
  }
  v12 = *(_DWORD *)(a1 + 4);
  if (v12 >= 2)
  {
    v25 = 0;
    for (i = 0; i < v12; ++i)
    {
      v27 = *(float32x4_t **)(a1 + 16);
      v28 = v27[v25];
      v29 = (int8x16_t)vmulq_f32(v10, v28);
      v30 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      v31 = *v27;
      v32 = (int8x16_t)vmulq_f32(v10, *v27);
      if ((vcgt_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), v30).u8[0] & 1) != 0)
      {
        v33 = v27[1].i64[0];
        *v27 = v28;
        v27[1].i64[0] = v27[v25 + 1].i64[0];
        v34 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v25 * 16);
        *v34 = v31;
        v34[1].i64[0] = v33;
        v12 = *(_DWORD *)(a1 + 4);
      }
      v25 += 2;
    }
    v35 = *(float32x4_t **)(a1 + 16);
    v35[1].i32[0] = -246811958;
    v36 = *v35;
    if (v12 >= 2)
    {
      v37.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      v37.i64[1] = v10.i64[0];
      f32 = v35[3].f32;
      v39 = v12 - 1;
      do
      {
        v40 = vsubq_f32(*(float32x4_t *)(f32 - 4), v36);
        v41 = (int8x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        v40.i32[3] = 0;
        *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v40.f32, v41, 4uLL);
        v42.i64[1] = v40.i64[0];
        v43 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v42), vmulq_f32(v37, v40));
        v44.i64[0] = vextq_s8(v43, v43, 4uLL).u64[0];
        v44.i64[1] = v43.u32[0];
        v45 = (int8x16_t)vmulq_f32(*a3, v44);
        v46 = (int8x16_t)vmulq_f32(v40, v40);
        *f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0]/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).f32[0]);
        f32 += 8;
        --v39;
      }
      while (v39);
    }
    v89 = v36;
    sub_1B21E6634(a1, &v89, 1, v12 - 1);
    v47 = 0;
    v48 = *(_DWORD *)(a2 + 4);
    v49 = 1;
    do
    {
      v50 = v49;
      v51 = *(_QWORD *)(a1 + 16);
      if (v48 == *(_DWORD *)(a2 + 8))
      {
        v52 = v48 ? 2 * v48 : 1;
        if (v48 < v52)
        {
          if (v52)
          {
            v53 = sub_1B21FF5F0(32 * v52, 16);
            v48 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            v53 = 0;
          }
          if (v48 >= 1)
          {
            v54 = 0;
            v55 = 32 * v48;
            do
            {
              v56 = v53 + v54;
              v57 = *(_QWORD *)(a2 + 16) + v54;
              *(_OWORD *)v56 = *(_OWORD *)v57;
              *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
              v54 += 32;
            }
            while (v55 != v54);
          }
          v58 = *(_QWORD *)(a2 + 16);
          if (v58)
            v59 = *(_BYTE *)(a2 + 24) == 0;
          else
            v59 = 1;
          if (!v59)
            sub_1B21FF5FC(v58);
          *(_BYTE *)(a2 + 24) = 1;
          *(_QWORD *)(a2 + 16) = v53;
          *(_DWORD *)(a2 + 8) = v52;
          v48 = *(_DWORD *)(a2 + 4);
        }
      }
      v49 = 0;
      v60 = v51 + 32 * v47;
      v61 = *(_QWORD *)(a2 + 16) + 32 * v48;
      *(_OWORD *)v61 = *(_OWORD *)v60;
      *(_QWORD *)(v61 + 16) = *(_QWORD *)(v60 + 16);
      v48 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)(a2 + 4) = v48;
      v47 = 1;
    }
    while ((v50 & 1) != 0);
    v62 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v62 != 2)
    {
      for (j = 2; j != v62; ++j)
      {
        if (v48 >= 2)
        {
          v64 = *(_QWORD *)(a2 + 16);
          v65 = *(_QWORD *)(a1 + 16);
          v66 = (float32x4_t *)(v65 + 32 * j);
          v67 = 2 * v48;
          v68 = 32 * (v48 - 2);
          v69 = 32 * (v48 - 1);
          while (1)
          {
            v70 = *(float32x4_t *)(v64 + v68);
            v71 = vsubq_f32(v70, *(float32x4_t *)(v64 + v69));
            v72 = (int8x8_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
            v71.i32[3] = 0;
            v73 = *v66;
            v74 = vsubq_f32(v70, *v66);
            v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
            v74.i32[3] = 0;
            *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v71.f32, v72, 4uLL);
            v76.i64[1] = v71.i64[0];
            *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
            v77.i64[1] = v74.i64[0];
            v78 = (int8x16_t)vsubq_f32(vmulq_f32(v77, v71), vmulq_f32(v76, v74));
            v71.i64[0] = vextq_s8(v78, v78, 4uLL).u64[0];
            v71.i64[1] = v78.u32[0];
            v79 = (int8x16_t)vmulq_f32(*a3, v71);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).f32[0] > 0.0)break;
            *(_DWORD *)(a2 + 4) = --v48;
            v67 -= 2;
            v68 -= 32;
            v69 -= 32;
            if ((v48 + 1) < 3)
              goto LABEL_71;
          }
          if (*(_DWORD *)(a2 + 8) == v48 && v48 < v67)
          {
            v80 = sub_1B21FF5F0(32 * v67, 16);
            v64 = v80;
            v81 = *(unsigned int *)(a2 + 4);
            if ((int)v81 >= 1)
            {
              v82 = 0;
              v83 = 32 * v81;
              do
              {
                v84 = v80 + v82;
                v85 = *(_QWORD *)(a2 + 16) + v82;
                *(_OWORD *)v84 = *(_OWORD *)v85;
                *(_QWORD *)(v84 + 16) = *(_QWORD *)(v85 + 16);
                v82 += 32;
              }
              while (v83 != v82);
            }
            v86 = *(_QWORD *)(a2 + 16);
            if (v86)
              v87 = *(_BYTE *)(a2 + 24) == 0;
            else
              v87 = 1;
            if (!v87)
              sub_1B21FF5FC(v86);
            *(_BYTE *)(a2 + 24) = 1;
            *(_QWORD *)(a2 + 16) = v64;
            *(_DWORD *)(a2 + 8) = v67;
            v48 = *(_DWORD *)(a2 + 4);
            v73 = *v66;
          }
          v88 = (float32x4_t *)(v64 + 32 * v48);
          *v88 = v73;
          v88[1].i64[0] = *(_QWORD *)(v65 + 32 * j + 16);
          v48 = *(_DWORD *)(a2 + 4) + 1;
          *(_DWORD *)(a2 + 4) = v48;
LABEL_71:
          v62 = *(unsigned int *)(a1 + 4);
        }
      }
    }
  }
  else if (v12 == 1)
  {
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 4);
    do
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (v14 == *(_DWORD *)(a2 + 8))
      {
        v16 = v14 ? 2 * v14 : 1;
        if (v14 < v16)
        {
          if (v16)
          {
            v17 = sub_1B21FF5F0(32 * v16, 16);
            v14 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            v17 = 0;
          }
          if (v14 >= 1)
          {
            v18 = 0;
            v19 = 32 * v14;
            do
            {
              v20 = v17 + v18;
              v21 = *(_QWORD *)(a2 + 16) + v18;
              *(_OWORD *)v20 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
              v18 += 32;
            }
            while (v19 != v18);
          }
          v22 = *(_QWORD *)(a2 + 16);
          if (v22)
            v23 = *(_BYTE *)(a2 + 24) == 0;
          else
            v23 = 1;
          if (!v23)
            sub_1B21FF5FC(v22);
          *(_BYTE *)(a2 + 24) = 1;
          *(_QWORD *)(a2 + 16) = v17;
          *(_DWORD *)(a2 + 8) = v16;
          v14 = *(_DWORD *)(a2 + 4);
        }
      }
      v24 = *(_QWORD *)(a2 + 16) + 32 * v14;
      *(_OWORD *)v24 = *(_OWORD *)v15;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v15 + 16);
      v14 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)(a2 + 4) = v14;
      ++v13;
    }
    while (v13 < *(_DWORD *)(a1 + 4));
  }
}

uint64_t sub_1B21E5E54@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v5;
  int8x16_t v6;
  float v7;
  float32x4_t v8;
  uint64_t result;
  int v10;
  float v11;
  int v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  int8x16_t v19;
  float v20;
  int v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v5 = *a2;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0];
  if (v7 >= 0.0001)
    v8 = vmulq_n_f32(v5, 1.0 / sqrtf(v7));
  else
    v8 = (float32x4_t)xmmword_1B2244DB0;
  v23 = v8;
  v22 = 0.0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  if ((int)result >= 1)
  {
    v10 = 0;
    v11 = -1.0e18;
    do
    {
      if ((int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1) - v10) > 127)
      {
        v12 = 128;
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1) - v10;
        if (v12 < 1)
        {
          v13 = -1;
          v14 = -3.4028e38;
          goto LABEL_17;
        }
      }
      v15 = 0;
      v16 = v12;
      v17 = (_OWORD *)v24;
      do
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 216))(a1, v15++, v17++);
      while (v16 != v15);
      if ((int)v16 > 3)
      {
        v21 = off_1ED4AD5B0((uint64_t)v24, (uint64_t)&v23, v16, (uint64_t)&v22);
        v14 = v22;
        goto LABEL_19;
      }
      v18 = 0;
      v13 = -1;
      v14 = -3.4028e38;
      do
      {
        v19 = (int8x16_t)vmulq_f32(v24[v18], v23);
        v20 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0];
        if (v20 > v14)
        {
          v14 = v20;
          v13 = v18;
        }
        ++v18;
      }
      while (v16 != v18);
LABEL_17:
      v22 = v14;
      v21 = v13;
LABEL_19:
      if (v14 > v11)
      {
        *a3 = v24[v21];
        v11 = v14;
      }
      v10 += 128;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t sub_1B21E6070(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float32x4_t *v9;
  float32x4_t *v10;
  int v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  int8x16_t v18;
  float v19;
  int v20;
  uint64_t v23;
  float v24;
  float32x4_t v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a4 >= 1)
  {
    v4 = result;
    v5 = (_DWORD *)(a3 + 12);
    v6 = a4;
    v23 = a4;
    do
    {
      *v5 = -581039253;
      v5 += 4;
      --v6;
    }
    while (v6);
    v7 = 0;
    v24 = 0.0;
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
      if ((int)result >= 1)
        break;
LABEL_23:
      if (++v7 == v23)
        return result;
    }
    v8 = 0;
    v9 = (float32x4_t *)(a2 + 16 * v7);
    v10 = (float32x4_t *)(a3 + 16 * v7);
    while (1)
    {
      if ((int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4) - v8) > 127)
      {
        v11 = 128;
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4) - v8;
        if (v11 < 1)
        {
          v12 = -1;
          v13 = -3.4028e38;
          goto LABEL_18;
        }
      }
      v14 = 0;
      v15 = v11;
      v16 = (_OWORD *)v25;
      do
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v4 + 216))(v4, v14++, v16++);
      while (v15 != v14);
      if ((int)v15 > 3)
      {
        v20 = off_1ED4AD5B0((uint64_t)v25, (uint64_t)v9, v15, (uint64_t)&v24);
        v13 = v24;
        goto LABEL_20;
      }
      v17 = 0;
      v12 = -1;
      v13 = -3.4028e38;
      do
      {
        v18 = (int8x16_t)vmulq_f32(v25[v17], *v9);
        v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
        if (v19 > v13)
        {
          v13 = v19;
          v12 = v17;
        }
        ++v17;
      }
      while (v15 != v17);
LABEL_18:
      v24 = v13;
      v20 = v12;
LABEL_20:
      if (v13 > v10->f32[3])
      {
        *v10 = v25[v20];
        v10->f32[3] = v13;
      }
      v8 += 128;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
      if (v8 >= (int)result)
        goto LABEL_23;
    }
  }
  return result;
}

__n128 sub_1B21E6288(uint64_t a1, __n128 *a2, float a3)
{
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  __n128 result;
  int32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v13 = COERCE_INT32X2_T((*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
  v16[0] = xmmword_1B2244DB0;
  v16[1] = xmmword_1B2244DD0;
  v16[2] = xmmword_1B2244D90;
  v17 = 0;
  v18 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, v16, &v15, &v14);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v7 = (int8x16_t)vmulq_f32(vsubq_f32(v14, v15), v6);
  v8 = (float32x4_t)vextq_s8(v7, v7, 8uLL);
  v8.i32[1] = v7.i32[0];
  v9 = vadd_f32((float32x2_t)vdup_lane_s32(v13, 0), *(float32x2_t *)v8.f32);
  v10 = vadd_f32(v9, v9);
  v11 = vmul_f32(v10, v10);
  *(int32x2_t *)v8.f32 = vdup_lane_s32((int32x2_t)v11, 0);
  v8.f32[0] = (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                    + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]))
            * (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                    + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]));
  *(float32x2_t *)v8.f32 = vadd_f32(v11, *(float32x2_t *)v8.f32);
  v8.f32[2] = v11.f32[1]
            + (float)((float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                            + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]))
                    * (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                            + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1])));
  result = (__n128)vmulq_n_f32(v8, a3 * 0.083333);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

uint64_t sub_1B21E6378(float32x4_t *a1, float32x4_t *a2)
{
  sub_1B21E1004(a1, a2);
  return sub_1B21E639C((uint64_t)a1);
}

uint64_t sub_1B21E639C(uint64_t a1)
{
  unsigned __int8 v2;
  float *v3;
  uint64_t result;
  float v5;
  float *v6;
  uint64_t v7;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 112) = 1;
  v2 = atomic_load((unsigned __int8 *)qword_1EEFD41D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_1EEFD41D0))
  {
    dword_1EEFD4170 = 1065353216;
    unk_1EEFD417C = 0;
    unk_1EEFD4174 = 0;
    dword_1EEFD4184 = 1065353216;
    qword_1EEFD4188 = 0;
    unk_1EEFD4190 = 0;
    qword_1EEFD4198 = 1065353216;
    dword_1EEFD41A0 = -1082130432;
    unk_1EEFD41AC = 0;
    unk_1EEFD41A4 = 0;
    dword_1EEFD41B4 = -1082130432;
    qword_1EEFD41B8 = 0;
    unk_1EEFD41C0 = 0;
    qword_1EEFD41C8 = 3212836864;
    __cxa_guard_release(qword_1EEFD41D0);
  }
  memset(v8, 0, sizeof(v8));
  v3 = (float *)v8;
  result = (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 152))(a1, &dword_1EEFD4170, v8, 6);
  v5 = *(float *)(a1 + 64);
  v6 = (float *)(a1 + 96);
  v7 = -48;
  do
  {
    *v6 = *v3 + v5;
    *(v6 - 4) = v3[12] - v5;
    ++v6;
    v3 += 5;
    v7 += 16;
  }
  while (v7);
  return result;
}

double sub_1B21E64DC(uint64_t a1)
{
  uint64_t v1;
  double result;

  sub_1B21E0FCC(a1);
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)v1 = off_1E63CDD38;
  result = 0.00781250185;
  *(_OWORD *)(v1 + 80) = xmmword_1B2244F70;
  *(_OWORD *)(v1 + 96) = xmmword_1B2246520;
  *(_BYTE *)(v1 + 112) = 0;
  return result;
}

float32x4_t sub_1B21E6518(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v10 = a1[5];
  v9 = a1[6];
  v11 = a2[1];
  v12 = a2[2];
  v13 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)xmmword_1B22CA020);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  v15 = vmulq_f32(vaddq_f32(v9, v10), v14);
  v16 = (int8x16_t)vmulq_f32(v12, v15);
  v15.i32[3] = 0;
  v17 = vmulq_f32(vsubq_f32(v9, v10), v14);
  v17.i32[3] = 0;
  v18 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v18.i32[3] = 0;
  v19 = vaddq_f32(v18, v17);
  v20 = vmulq_f32(*a2, v15);
  v21 = (int8x16_t)vmulq_f32(v11, v15);
  v16.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  v22 = vaddq_f32(a2[3], v20);
  v23 = vmulq_f32(v19, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v24 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)xmmword_1B22CA020));
  v25 = (int8x16_t)vmulq_f32(v19, v13);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  v26 = vsubq_f32(v22, v23);
  v26.i32[3] = 0;
  *a3 = v26;
  result = vaddq_f32(v22, v23);
  *a4 = result;
  return result;
}

uint64_t sub_1B21E6624()
{
  return 0;
}

uint64_t sub_1B21E662C()
{
  return 0;
}

uint64_t sub_1B21E6634(uint64_t result, float32x4_t *a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float v12;
  int v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x2_t v19;
  uint64_t i;
  float32x4_t v21;
  int8x16_t v22;
  float32x2_t v23;
  unsigned __int8 v24;
  BOOL v25;
  uint64_t j;
  uint64_t v27;
  float v28;
  float32x2_t v29;
  float32x4_t v30;
  int8x16_t v31;
  unsigned __int8 v32;
  BOOL v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;

  v7 = result;
  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(v7 + 16) + 32 * ((uint64_t)v9 >> 1);
    v11 = *(float32x4_t *)v10;
    v12 = *(float *)(v10 + 16);
    v13 = *(_DWORD *)(v10 + 20);
    v14 = a4;
    do
    {
      v15 = *a2;
      v16 = vsubq_f32(v11, *a2);
      v16.i32[3] = 0;
      v17 = *(_QWORD *)(v7 + 16);
      v18 = (int8x16_t)vmulq_f32(v16, v16);
      v19 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
      for (i = v17 + 32 * a3 + 16; *(float *)i != v12; i += 32)
      {
        if (*(float *)i >= v12)
          goto LABEL_14;
LABEL_13:
        ++a3;
      }
      v21 = vsubq_f32(*(float32x4_t *)(i - 16), v15);
      v21.i32[3] = 0;
      v22 = (int8x16_t)vmulq_f32(v21, v21);
      *(float32x2_t *)v22.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      v23 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), v19);
      v24 = vcgt_f32(v23, *(float32x2_t *)v22.i8).u8[0];
      if ((vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)v22.i8, v23)).u8[0] & 1) != 0)
        v25 = v24;
      else
        v25 = *(_DWORD *)(i + 4) < v13;
      if (v25)
        goto LABEL_13;
LABEL_14:
      for (j = (32 * v14) | 0x10; ; j -= 32)
      {
        v27 = v17 + j;
        v28 = *(float *)(v17 + j);
        if (v12 == v28)
          break;
        if (v12 >= v28)
          goto LABEL_22;
LABEL_21:
        --v14;
      }
      v29 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), v19);
      v30 = vsubq_f32(*(float32x4_t *)(v27 - 16), v15);
      v30.i32[3] = 0;
      v31 = (int8x16_t)vmulq_f32(v30, v30);
      *(float32x2_t *)v31.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      v32 = vcgt_f32(*(float32x2_t *)v31.i8, v29).u8[0];
      v33 = v13 < *(_DWORD *)(v27 + 4);
      if ((vmvn_s8((int8x8_t)vceq_f32(v29, *(float32x2_t *)v31.i8)).u8[0] & 1) != 0)
        v33 = v32;
      if (v33)
        goto LABEL_21;
LABEL_22:
      if (a3 <= v14)
      {
        v34 = (_QWORD *)(v17 + j);
        v35 = *(_OWORD *)(i - 16);
        v36 = *(_QWORD *)i;
        *(_OWORD *)(i - 16) = *((_OWORD *)v34 - 1);
        *(_QWORD *)i = *v34;
        v37 = (_QWORD *)(*(_QWORD *)(v7 + 16) + j);
        *((_OWORD *)v37 - 1) = v35;
        *v37 = v36;
        ++a3;
        --v14;
      }
    }
    while (a3 <= v14);
    if (v14 > v8)
      result = sub_1B21E6634(v7, a2);
  }
  while (a3 < a4);
  return result;
}

uint64_t sub_1B21E6808(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;

  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(unsigned int *)(a2 + 4);
  if ((int)v3 < 1)
  {
    *(_DWORD *)(a1 + 4) = v3;
    return a1;
  }
  v5 = (_DWORD *)sub_1B21FF5F0(4 * v3, 16);
  v6 = *(unsigned int *)(a1 + 4);
  v7 = *(_QWORD *)(a1 + 16);
  if ((int)v6 >= 1)
  {
    v8 = v5;
    v9 = *(int **)(a1 + 16);
    do
    {
      v10 = *v9++;
      *v8++ = v10;
      --v6;
    }
    while (v6);
    goto LABEL_7;
  }
  if (v7)
  {
LABEL_7:
    if (*(_BYTE *)(a1 + 24))
      sub_1B21FF5FC(v7);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 8) = v3;
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = v3;
LABEL_10:
  bzero(v5, 4 * v3);
  *(_DWORD *)(a1 + 4) = v3;
  v11 = *(int **)(a2 + 16);
  do
  {
    v12 = *v11++;
    *v5++ = v12;
    --v3;
  }
  while (v3);
  return a1;
}

double sub_1B21E6900(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1B21E692C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && *(_BYTE *)(a1 + 56))
    sub_1B21FF5FC(v2);
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_BYTE *)(a1 + 24))
    sub_1B21FF5FC(v3);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_1B1810570(a1 + 32);
  return sub_1B1810570(a1);
}

BOOL sub_1B21E699C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BYTE v33[20];
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BYTE v40[4];
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _DWORD v47[2];
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[62];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 168))(*(_QWORD *)(a1 + 72));
  if (v2 < 1)
  {
    v5 = 42;
  }
  else
  {
    v3 = 0;
    v4 = v2;
    do
    {
      (*(void (**)(_QWORD, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 72) + 176))(*(_QWORD *)(a1 + 72), v3, v51);
      sub_1B21E6D6C();
      xmmword_1EEFD41E0[v3++ + 42] = v51[0];
    }
    while (v4 != (_DWORD)v3);
    v5 = v3 + 42;
  }
  v6 = 0;
  do
  {
    v7 = *(_QWORD *)(a1 + 72);
    sub_1B21E6D6C();
    (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v7 + 128))(v33, v7, &xmmword_1EEFD41E0[v6]);
    v51[v6++] = *(_OWORD *)v33;
  }
  while (v5 != v6);
  v50 = 0x100000001000;
  v47[0] = 1;
  v47[1] = v5;
  v48 = v51;
  v49 = 0x3A83126F00000010;
  v43 = 1;
  v42 = 0;
  v41 = 0;
  v46 = 1;
  v45 = 0;
  v44 = 0;
  v35 = 1;
  v34 = 0;
  *(_QWORD *)&v33[12] = 0;
  v39 = 1;
  v38 = 0;
  v37 = 0;
  v33[0] = 1;
  *(_DWORD *)&v33[4] = 0;
  v36 = 0;
  v10 = sub_1B2200D34((uint64_t)v40, (uint64_t)v47, (uint64_t)v33, 0.0, v8, v9);
  if (v10 == 1)
    goto LABEL_44;
  v11 = *(_DWORD *)&v33[4];
  v12 = *(_DWORD *)(a1 + 4);
  v13 = *(_DWORD *)&v33[4];
  if (v12 < *(int *)&v33[4])
  {
    v13 = *(_DWORD *)&v33[4];
    if (*(_DWORD *)(a1 + 8) < *(int *)&v33[4])
    {
      if (*(_DWORD *)&v33[4])
      {
        v14 = sub_1B21FF5F0(16 * *(int *)&v33[4], 16);
        v12 = *(_DWORD *)(a1 + 4);
      }
      else
      {
        v14 = 0;
      }
      if (v12 >= 1)
      {
        v15 = 0;
        v16 = 16 * v12;
        do
        {
          *(_OWORD *)(v14 + v15) = *(_OWORD *)(*(_QWORD *)(a1 + 16) + v15);
          v15 += 16;
        }
        while (v16 != v15);
      }
      v17 = *(_QWORD *)(a1 + 16);
      if (v17 && *(_BYTE *)(a1 + 24))
        sub_1B21FF5FC(v17);
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 8) = v11;
      v13 = *(_DWORD *)&v33[4];
    }
  }
  *(_DWORD *)(a1 + 4) = v11;
  if (v13 >= 1)
  {
    v18 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 16) + 16 * v18) = *(_OWORD *)(v34 + 16 * v18);
      ++v18;
    }
    while (v18 < *(int *)&v33[4]);
  }
  v19 = HIDWORD(v36);
  *(_DWORD *)(a1 + 64) = HIDWORD(v36);
  v20 = *(_DWORD *)(a1 + 36);
  v21 = v19;
  if (v20 <= v19)
  {
    if (v20 >= v19)
    {
LABEL_39:
      v21 = *(_DWORD *)(a1 + 64);
      goto LABEL_40;
    }
    if (*(_DWORD *)(a1 + 40) >= v19)
    {
LABEL_38:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v20), 4 * (v19 + ~v20) + 4);
      goto LABEL_39;
    }
    if (v19)
      v22 = sub_1B21FF5F0(4 * v19, 16);
    else
      v22 = 0;
    LODWORD(v23) = *(_DWORD *)(a1 + 36);
    v24 = *(_QWORD *)(a1 + 48);
    if ((int)v23 < 1)
    {
      if (!v24)
      {
LABEL_37:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v22;
        *(_DWORD *)(a1 + 40) = v19;
        goto LABEL_38;
      }
    }
    else
    {
      v23 = v23;
      v25 = (_DWORD *)v22;
      v26 = *(int **)(a1 + 48);
      do
      {
        v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
    }
    if (*(_BYTE *)(a1 + 56))
      sub_1B21FF5FC(v24);
    goto LABEL_37;
  }
LABEL_40:
  *(_DWORD *)(a1 + 36) = v19;
  if (v21 >= 1)
  {
    v28 = 0;
    v29 = v38;
    v30 = *(_QWORD *)(a1 + 48);
    do
    {
      *(_DWORD *)(v30 + 4 * v28) = *(_DWORD *)(v29 + 4 * v28);
      ++v28;
    }
    while (v28 < *(int *)(a1 + 64));
  }
  sub_1B2201AA8((uint64_t)v40, (uint64_t)v33);
LABEL_44:
  if (v38)
    v31 = v39 == 0;
  else
    v31 = 1;
  if (!v31)
    sub_1B21FF5FC(v38);
  v39 = 1;
  v38 = 0;
  v37 = 0;
  if (v34 && v35)
    sub_1B21FF5FC(v34);
  if (v45 && v46)
    sub_1B21FF5FC(v45);
  v46 = 1;
  v45 = 0;
  v44 = 0;
  if (v42 && v43)
    sub_1B21FF5FC(v42);
  return v10 != 1;
}

__int128 *sub_1B21E6D6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)qword_1EEFD45C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(qword_1EEFD45C0))
  {
    xmmword_1EEFD41E0 = xmmword_1B22CA260;
    *(_OWORD *)algn_1EEFD41F0 = xmmword_1B22CA270;
    xmmword_1EEFD4200 = xmmword_1B22CA280;
    unk_1EEFD4210 = xmmword_1B22CA290;
    xmmword_1EEFD4220 = xmmword_1B22CA2A0;
    unk_1EEFD4230 = xmmword_1B22CA2B0;
    xmmword_1EEFD4240 = xmmword_1B22CA2C0;
    unk_1EEFD4250 = xmmword_1B22CA2D0;
    xmmword_1EEFD4260 = xmmword_1B22CA2E0;
    unk_1EEFD4270 = xmmword_1B22CA2F0;
    xmmword_1EEFD4280 = xmmword_1B22CA300;
    unk_1EEFD4290 = xmmword_1B22CA310;
    xmmword_1EEFD42A0 = xmmword_1B22CA320;
    unk_1EEFD42B0 = xmmword_1B22CA330;
    xmmword_1EEFD42C0 = xmmword_1B22CA340;
    unk_1EEFD42D0 = xmmword_1B22CA350;
    xmmword_1EEFD42E0 = xmmword_1B22CA360;
    unk_1EEFD42F0 = xmmword_1B22CA370;
    xmmword_1EEFD4300 = xmmword_1B22CA380;
    unk_1EEFD4310 = xmmword_1B22CA390;
    xmmword_1EEFD4320 = xmmword_1B22CA3A0;
    unk_1EEFD4330 = xmmword_1B22CA3B0;
    xmmword_1EEFD4340 = xmmword_1B22CA3C0;
    unk_1EEFD4350 = xmmword_1B22CA3D0;
    xmmword_1EEFD4360 = xmmword_1B22CA3E0;
    unk_1EEFD4370 = xmmword_1B2244DE0;
    xmmword_1EEFD4380 = xmmword_1B22CA3F0;
    unk_1EEFD4390 = xmmword_1B22CA400;
    xmmword_1EEFD43A0 = xmmword_1B22CA410;
    unk_1EEFD43B0 = xmmword_1B22CA420;
    xmmword_1EEFD43C0 = xmmword_1B2291410;
    unk_1EEFD43D0 = xmmword_1B22CA430;
    xmmword_1EEFD43E0 = xmmword_1B22CA440;
    unk_1EEFD43F0 = xmmword_1B22CA450;
    xmmword_1EEFD4400 = xmmword_1B22CA460;
    unk_1EEFD4410 = xmmword_1B22CA470;
    xmmword_1EEFD4420 = xmmword_1B22CA480;
    unk_1EEFD4430 = xmmword_1B22CA490;
    xmmword_1EEFD4440 = xmmword_1B22CA4A0;
    unk_1EEFD4450 = xmmword_1B22CA4B0;
    xmmword_1EEFD4460 = xmmword_1B22CA4C0;
    unk_1EEFD4470 = xmmword_1B22CA4D0;
    __cxa_guard_release(qword_1EEFD45C0);
  }
  return &xmmword_1EEFD41E0;
}

unint64_t sub_1B21E6F60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64) / 3uLL;
}

uint64_t sub_1B21E6F78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

void sub_1B21E6F80(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1B21E6F88(int a1, int a2, void *a3, int a4)
{
  if (a4 >= 1)
    bzero(a3, 16 * a4);
}

float32x4_t sub_1B21E6FA0@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t result;
  float32x4_t v13;
  float32x4_t v14;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v14);
  v13 = v14;
  v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8);
  v8 = (float32x4_t)vextq_s8(v6, v6, 8uLL);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32);
  v7.i32[0] = 679477248;
  v9 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v8), 0), (int8x16_t)xmmword_1B2246520, *(int8x16_t *)a2);
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v11 = vmulq_n_f32(vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
  v11.i32[3] = 0;
  result = vaddq_f32(v13, v11);
  *a3 = result;
  return result;
}

float32x4_t sub_1B21E7068(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  unsigned int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t result;
  unsigned int v12;
  unsigned int v13;

  v13 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
  v12 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1));
  *(float *)&v8 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v9.i64[0] = __PAIR64__(v12, v13);
  v9.i64[1] = v8;
  v10 = vsubq_f32(a2[3], v9);
  v10.i32[3] = 0;
  *a3 = v10;
  result = vaddq_f32(v9, a2[3]);
  *a4 = result;
  return result;
}

float sub_1B21E7108(uint64_t a1, int32x4_t *a2, float a3)
{
  float v5;
  float result;
  int32x4_t v7;

  v5 = (float)(a3 * 0.4) * (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  result = v5 * (*(float (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v7 = vzip1q_s32((int32x4_t)LODWORD(result), (int32x4_t)LODWORD(result));
  *(float *)&v7.i32[2] = result;
  *a2 = v7;
  return result;
}

void sub_1B21E7178(uint64_t a1)
{
  uint64_t v1;

  nullsub_16(a1);
  sub_1B21FF5FC(v1);
}

const char *sub_1B21E718C()
{
  return "SPHERE";
}

uint64_t sub_1B21E7198(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

float sub_1B21E71A0(uint64_t a1)
{
  return *(float *)(a1 + 48) * *(float *)(a1 + 32);
}

float32x4_t sub_1B21E71B0(uint64_t a1, float32x4_t *a2, float32_t a3)
{
  float32x4_t *v5;
  int8x16_t v6;
  float32x4_t result;

  v5 = (float32x4_t *)sub_1B21E0374(a1);
  v5->i64[0] = (uint64_t)&off_1E63CCAE0;
  v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  result = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0]));
  v5[4] = result;
  v5[5].f32[0] = a3;
  v5[6].i64[0] = 0;
  v5[6].i64[1] = 0;
  v5->i32[2] = 28;
  return result;
}

void sub_1B21E7224(uint64_t a1)
{
  uint64_t v1;

  nullsub_16(a1);
  sub_1B21FF5FC(v1);
}

double sub_1B21E7238(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  double result;

  *a3 = xmmword_1B22C9FB0;
  result = 5.72459157e141;
  *a4 = xmmword_1B22C9FA0;
  return result;
}

uint64_t sub_1B21E7254(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v13 = *a4;
  v14 = *a3;
  v15 = a1[4].f32[2];
  if (fabsf(v15) <= 0.70711)
  {
    v22.i32[0] = a1[4].i32[0];
    v23 = a1[4].f32[1];
    v24 = (float)(v23 * v23) + (float)(v22.f32[0] * v22.f32[0]);
    v25 = 1.0 / sqrtf(v24);
    v22.f32[1] = -v23;
    v26.f32[0] = -v15;
    *(float32x2_t *)a12.i8 = vmul_n_f32(v22, v25);
    v21 = (float32x4_t)vrev64q_s32(a12).u64[0];
    v26.i32[1] = a1[4].i32[2];
    *(float32x2_t *)a8.f32 = vmul_f32(*(float32x2_t *)a12.i8, v26);
    a8.f32[2] = v24 * v25;
  }
  else
  {
    v17 = a1[4].f32[0];
    v16 = a1[4].f32[1];
    v18 = (float)(v15 * v15) + (float)(v16 * v16);
    v19 = 1.0 / sqrtf(v18);
    v20 = -(float)(v15 * v19);
    a8.f32[0] = v18 * v19;
    v21.i32[0] = 0;
    v21.i32[3] = 0;
    v21.f32[1] = v20;
    v21.f32[2] = v16 * v19;
    a8.f32[1] = -(float)(v17 * (float)(v16 * v19));
    a8.f32[2] = v17 * v20;
  }
  v27 = a1[4];
  v28.i64[0] = 0x3F0000003F000000;
  v28.i64[1] = 0x3F0000003F000000;
  v29 = vmulq_f32(vaddq_f32(v13, v14), v28);
  v30 = v29;
  v30.i32[3] = 0;
  v31 = (int8x16_t)vmulq_f32(v27, v30);
  v32 = vsubq_f32(v29, vmulq_n_f32(v27, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8)).f32[0]- a1[5].f32[0]));
  v32.i32[3] = 0;
  v33 = vmulq_f32(vsubq_f32(v13, v14), v28);
  v33.i32[3] = 0;
  v34 = (int8x16_t)vmulq_f32(v33, v33);
  *(float *)v34.i32 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0]);
  v35 = vmulq_n_f32(v21, *(float *)v34.i32);
  v35.i32[3] = 0;
  v36 = vaddq_f32(v35, v32);
  v37 = vmulq_n_f32(a8, *(float *)v34.i32);
  v38 = vsubq_f32(v36, v37);
  v39 = vsubq_f32(v32, v35);
  v40 = vsubq_f32(v39, v37);
  v37.i32[3] = 0;
  v44 = v37;
  v45 = vaddq_f32(v36, v37);
  v46 = v45;
  v38.i32[3] = 0;
  v39.i32[3] = 0;
  v40.i32[3] = 0;
  v42 = v40;
  v43 = v39;
  v47 = v38;
  v48 = v40;
  (*(void (**)(uint64_t, float32x4_t *, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, &v46, 0, 0);
  v46 = v42;
  v47 = vaddq_f32(v44, v43);
  v48 = v45;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v46, 0, 1);
}

void sub_1B21E743C(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

__n128 sub_1B21E7444(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[6] = *a2;
  return result;
}

uint64_t sub_1B21E7450(uint64_t a1)
{
  return a1 + 96;
}

const char *sub_1B21E7458()
{
  return "STATICPLANE";
}

uint64_t sub_1B21E7464()
{
  return 56;
}

const char *sub_1B21E746C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  sub_1B21DF5E8(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 16 + i) = *(_DWORD *)(a1 + 96 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 32 + j) = *(_DWORD *)(a1 + 64 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 80);
  return "btStaticPlaneShapeData";
}

uint64_t sub_1B21E74E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  float v7;
  float32x2_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  float32x2_t *v11;
  float v12;
  float32x2_t *v13;
  float v14;
  float32x2_t *v15;
  float v16;
  float32x2_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  float64x2_t *v20;
  float v21;
  float64x2_t *v22;
  float v23;
  float64x2_t *v24;
  float v25;
  float32x2_t v26;
  uint64_t v27;
  _DWORD *v28;
  float32x2_t *v29;
  float v30;
  float32x2_t *v31;
  float v32;
  float32x2_t *v33;
  float v34;
  float32x2_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  float32x2_t *v38;
  float v39;
  float32x2_t *v40;
  float v41;
  float32x2_t *v42;
  float v43;
  float32x2_t v44;
  uint64_t v45;
  _DWORD *v46;
  float64x2_t *v47;
  float v48;
  float64x2_t *v49;
  float v50;
  float64x2_t *v51;
  float v52;
  float32x2_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  float64x2_t *v56;
  float v57;
  float64x2_t *v58;
  float v59;
  float64x2_t *v60;
  float v61;
  __int128 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float v71;
  int v72;
  float32x2_t v73;
  float v74;
  int v75;
  float32x2_t v76;
  float v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if ((int)result >= 1)
  {
    v5 = result;
    v6 = 0;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v62 = *(_OWORD *)(a1 + 16);
    LODWORD(v7) = *(_QWORD *)(a1 + 24);
    do
    {
      v63 = 0;
      v66 = 2;
      (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, int *, uint64_t *, char *, int *, int *, _DWORD))(*(_QWORD *)a1 + 32))(a1, &v69, &v64, &v67, &v65, &v68, (char *)&v67 + 4, &v63, &v66, v6);
      if ((_DWORD)v67 == 1)
      {
        if (v66 == 2)
        {
          v44 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v45 = 0;
            do
            {
              v46 = (_DWORD *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v45);
              v47 = (float64x2_t *)(v69 + (v65 * *v46));
              v48 = v47[1].f64[0];
              v70 = vmul_f32(v44, vcvt_f32_f64(*v47));
              v71 = v7 * v48;
              v72 = 0;
              v49 = (float64x2_t *)(v69 + (v46[1] * v65));
              v50 = v49[1].f64[0];
              v73 = vmul_f32(v44, vcvt_f32_f64(*v49));
              v74 = v7 * v50;
              v75 = 0;
              v51 = (float64x2_t *)(v69 + (v46[2] * v65));
              v52 = v51[1].f64[0];
              v76 = vmul_f32(v44, vcvt_f32_f64(*v51));
              v77 = v7 * v52;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v45);
              v44 = (float32x2_t)v62;
              v45 = (v45 + 1);
            }
            while ((int)v45 < v63);
          }
        }
        else if (v66 == 3)
        {
          v53 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v54 = 0;
            do
            {
              v55 = (unsigned __int16 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v54);
              v56 = (float64x2_t *)(v69 + v65 * (unint64_t)*v55);
              v57 = v56[1].f64[0];
              v70 = vmul_f32(v53, vcvt_f32_f64(*v56));
              v71 = v7 * v57;
              v72 = 0;
              v58 = (float64x2_t *)(v69 + v65 * (unint64_t)v55[1]);
              v59 = v58[1].f64[0];
              v73 = vmul_f32(v53, vcvt_f32_f64(*v58));
              v74 = v7 * v59;
              v75 = 0;
              v60 = (float64x2_t *)(v69 + v65 * (unint64_t)v55[2]);
              v61 = v60[1].f64[0];
              v76 = vmul_f32(v53, vcvt_f32_f64(*v60));
              v77 = v7 * v61;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v54);
              v53 = (float32x2_t)v62;
              v54 = (v54 + 1);
            }
            while ((int)v54 < v63);
          }
        }
        else
        {
          v17 = (float32x2_t)v62;
          if (v66 == 5 && v63 >= 1)
          {
            v18 = 0;
            do
            {
              v19 = (unsigned __int8 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v18);
              v20 = (float64x2_t *)(v69 + v65 * (unint64_t)*v19);
              v21 = v20[1].f64[0];
              v70 = vmul_f32(v17, vcvt_f32_f64(*v20));
              v71 = v7 * v21;
              v72 = 0;
              v22 = (float64x2_t *)(v69 + v65 * (unint64_t)v19[1]);
              v23 = v22[1].f64[0];
              v73 = vmul_f32(v17, vcvt_f32_f64(*v22));
              v74 = v7 * v23;
              v75 = 0;
              v24 = (float64x2_t *)(v69 + v65 * (unint64_t)v19[2]);
              v25 = v24[1].f64[0];
              v76 = vmul_f32(v17, vcvt_f32_f64(*v24));
              v77 = v7 * v25;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v18);
              v17 = (float32x2_t)v62;
              v18 = (v18 + 1);
            }
            while ((int)v18 < v63);
          }
        }
      }
      else if (!(_DWORD)v67)
      {
        if (v66 == 2)
        {
          v26 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v27 = 0;
            do
            {
              v28 = (_DWORD *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v27);
              v29 = (float32x2_t *)(v69 + (v65 * *v28));
              v30 = v7 * v29[1].f32[0];
              v70 = vmul_f32(v26, *v29);
              v71 = v30;
              v72 = 0;
              v31 = (float32x2_t *)(v69 + (v28[1] * v65));
              v32 = v7 * v31[1].f32[0];
              v73 = vmul_f32(v26, *v31);
              v74 = v32;
              v75 = 0;
              v33 = (float32x2_t *)(v69 + (v28[2] * v65));
              v34 = v7 * v33[1].f32[0];
              v76 = vmul_f32(v26, *v33);
              v77 = v34;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v27);
              v26 = (float32x2_t)v62;
              v27 = (v27 + 1);
            }
            while ((int)v27 < v63);
          }
        }
        else if (v66 == 3)
        {
          v35 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v36 = 0;
            do
            {
              v37 = (unsigned __int16 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v36);
              v38 = (float32x2_t *)(v69 + v65 * (unint64_t)*v37);
              v39 = v7 * v38[1].f32[0];
              v70 = vmul_f32(v35, *v38);
              v71 = v39;
              v72 = 0;
              v40 = (float32x2_t *)(v69 + v65 * (unint64_t)v37[1]);
              v41 = v7 * v40[1].f32[0];
              v73 = vmul_f32(v35, *v40);
              v74 = v41;
              v75 = 0;
              v42 = (float32x2_t *)(v69 + v65 * (unint64_t)v37[2]);
              v43 = v7 * v42[1].f32[0];
              v76 = vmul_f32(v35, *v42);
              v77 = v43;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v36);
              v35 = (float32x2_t)v62;
              v36 = (v36 + 1);
            }
            while ((int)v36 < v63);
          }
        }
        else
        {
          v8 = (float32x2_t)v62;
          if (v66 == 5 && v63 >= 1)
          {
            v9 = 0;
            do
            {
              v10 = (unsigned __int8 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v9);
              v11 = (float32x2_t *)(v69 + v65 * (unint64_t)*v10);
              v12 = v7 * v11[1].f32[0];
              v70 = vmul_f32(v8, *v11);
              v71 = v12;
              v72 = 0;
              v13 = (float32x2_t *)(v69 + v65 * (unint64_t)v10[1]);
              v14 = v7 * v13[1].f32[0];
              v73 = vmul_f32(v8, *v13);
              v74 = v14;
              v75 = 0;
              v15 = (float32x2_t *)(v69 + v65 * (unint64_t)v10[2]);
              v16 = v7 * v15[1].f32[0];
              v76 = vmul_f32(v8, *v15);
              v77 = v16;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v9);
              v8 = (float32x2_t)v62;
              v9 = (v9 + 1);
            }
            while ((int)v9 < v63);
          }
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v6);
      v6 = (v6 + 1);
    }
    while ((_DWORD)v6 != v5);
  }
  return result;
}

const char *sub_1B21E7B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_DWORD *)(a2 + 24) = v6;
  *(_QWORD *)a2 = 0;
  if ((_DWORD)v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 56, v6);
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v48 = 0;
    v49 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    if (v9 >= 1)
    {
      v10 = v9;
      v11 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, char *, uint64_t *, char *, _DWORD))(*(_QWORD *)a1 + 32))(a1, &v49, (char *)&v45 + 4, &v47, &v46, &v48, (char *)&v47 + 4, &v45, (char *)&v46 + 4, v11);
        v12 = v45;
        v13 = HIDWORD(v45);
        *(_DWORD *)(v8 + 48) = v45;
        *(_DWORD *)(v8 + 52) = v13;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        if (HIDWORD(v46) == 5)
        {
          if (v12)
          {
            v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 4);
            v27 = *(_QWORD *)(v26 + 8);
            *(_QWORD *)(v8 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v27);
            if ((int)v45 >= 1)
            {
              v28 = 0;
              v29 = (_BYTE *)(v27 + 2);
              do
              {
                v30 = (_BYTE *)(v48 + SHIDWORD(v47) * (uint64_t)(int)v28);
                *(v29 - 2) = *v30;
                *(v29 - 1) = v30[1];
                *v29 = v30[2];
                v29 += 4;
                ++v28;
              }
              while (v28 < (int)v45);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v26, "btCharIndexTripletData", 1497453121, *(_QWORD *)(v26 + 8));
          }
        }
        else if (HIDWORD(v46) == 3)
        {
          if (v12)
          {
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 8);
            v21 = *(_QWORD *)(v20 + 8);
            *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v21);
            v22 = v45;
            if ((int)v45 >= 1)
            {
              v23 = SHIDWORD(v47);
              v24 = (_WORD *)(v48 + 4);
              v25 = (_WORD *)(v21 + 4);
              do
              {
                *(v25 - 2) = *(v24 - 2);
                *(v25 - 1) = *(v24 - 1);
                *v25 = *v24;
                v25 += 4;
                v24 = (_WORD *)((char *)v24 + v23);
                --v22;
              }
              while (v22);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v20, "btShortIntIndexTripletData", 1497453121, *(_QWORD *)(v20 + 8));
          }
        }
        else if (HIDWORD(v46) == 2 && v12)
        {
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 4, (3 * v12));
          v15 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v8 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v15);
          if ((int)v45 >= 1)
          {
            v16 = 0;
            v17 = v48;
            v18 = (_DWORD *)(v15 + 8);
            do
            {
              v19 = (_DWORD *)(v17 + SHIDWORD(v47) * (uint64_t)(int)v16);
              *(v18 - 2) = *v19;
              *(v18 - 1) = v19[1];
              *v18 = v19[2];
              v18 += 3;
              ++v16;
            }
            while (v16 < (int)v45);
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v14, "btIntIndexData", 1497453121, *(_QWORD *)(v14 + 8));
        }
        if ((_DWORD)v47 == 1)
        {
          if (HIDWORD(v45))
          {
            v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 32);
            v38 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(v8 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v38);
            v39 = HIDWORD(v45);
            if (SHIDWORD(v45) >= 1)
            {
              v40 = (int)v46;
              v41 = (_QWORD *)(v49 + 16);
              v42 = (_QWORD *)(v38 + 16);
              do
              {
                *(v42 - 2) = *(v41 - 2);
                *(v42 - 1) = *(v41 - 1);
                *v42 = *v41;
                v42 += 4;
                v41 = (_QWORD *)((char *)v41 + v40);
                --v39;
              }
              while (v39);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v37, "btVector3DoubleData", 1497453121, *(_QWORD *)(v37 + 8));
          }
        }
        else if (!(_DWORD)v47 && HIDWORD(v45))
        {
          v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16);
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v32);
          v33 = HIDWORD(v45);
          if (SHIDWORD(v45) >= 1)
          {
            v34 = (int)v46;
            v35 = (_DWORD *)(v49 + 8);
            v36 = (_DWORD *)(v32 + 8);
            do
            {
              *(v36 - 2) = *(v35 - 2);
              *(v36 - 1) = *(v35 - 1);
              *v36 = *v35;
              v36 += 4;
              v35 = (_DWORD *)((char *)v35 + v34);
              --v33;
            }
            while (v33);
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v31, "btVector3FloatData", 1497453121, *(_QWORD *)(v31 + 8));
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v11);
        v11 = (v11 + 1);
        v8 += 56;
      }
      while ((_DWORD)v11 != v10);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v7, "btMeshPartData", 1497453121, *(_QWORD *)(v7 + 8));
  }
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 8 + i) = *(_DWORD *)(a1 + 16 + i);
  return "btStridingMeshInterfaceData";
}

double sub_1B21E8020(_QWORD *a1)
{
  *a1 = off_1E63CD8F8;
  sub_1B1810570((uint64_t)(a1 + 4));
  return nullsub_16(a1);
}

void sub_1B21E8050(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CD8F8;
  sub_1B1810570((uint64_t)(a1 + 4));
  nullsub_16(a1);
  sub_1B21FF5FC(v2);
}

uint64_t sub_1B21E8084(uint64_t result, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10)
{
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(result + 48) + 48 * a10;
  *a3 = *(_DWORD *)(v10 + 20);
  *a2 = *(_QWORD *)(v10 + 24);
  *a4 = *(_DWORD *)(v10 + 40);
  v11 = *(_DWORD *)(v10 + 36);
  *a5 = *(_DWORD *)(v10 + 32);
  *a8 = *(_DWORD *)v10;
  *a6 = *(_QWORD *)(v10 + 8);
  *a7 = *(_DWORD *)(v10 + 16);
  *a9 = v11;
  return result;
}

uint64_t sub_1B21E80D8(uint64_t result, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10)
{
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(result + 48) + 48 * a10;
  *a3 = *(_DWORD *)(v10 + 20);
  *a2 = *(_QWORD *)(v10 + 24);
  *a4 = *(_DWORD *)(v10 + 40);
  v11 = *(_DWORD *)(v10 + 36);
  *a5 = *(_DWORD *)(v10 + 32);
  *a8 = *(_DWORD *)v10;
  *a6 = *(_QWORD *)(v10 + 8);
  *a7 = *(_DWORD *)(v10 + 16);
  *a9 = v11;
  return result;
}

BOOL sub_1B21E812C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) == 1;
}

__n128 sub_1B21E813C(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *(_OWORD *)(a1 + 80) = *a2;
  result = *a3;
  *(__n128 *)(a1 + 96) = *a3;
  *(_DWORD *)(a1 + 72) = 1;
  return result;
}

__n128 sub_1B21E8158(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *a2 = *(_OWORD *)(a1 + 80);
  result = *(__n128 *)(a1 + 96);
  *a3 = result;
  return result;
}

uint64_t sub_1B21E8174(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

float *sub_1B21E8184(float *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B21E0374((uint64_t)a1);
  *(_QWORD *)v4 = &off_1E63CCC20;
  *(_QWORD *)(v4 + 64) = a2;
  *(_DWORD *)(v4 + 8) = 21;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2))
    (*(void (**)(uint64_t, float *, float *))(*(_QWORD *)a2 + 96))(a2, a1 + 8, a1 + 12);
  else
    sub_1B21E81FC(a1);
  return a1;
}

float sub_1B21E81FC(float *a1)
{
  uint64_t i;
  float result;
  __int128 v4;
  __int128 v5;
  _QWORD v6[2];

  for (i = 0; i != 3; ++i)
  {
    v6[0] = 0;
    v6[1] = 0;
    *(_DWORD *)((char *)v6 + i * 4) = 1065353216;
    (*(void (**)(__int128 *__return_ptr, float *, _QWORD *))(*(_QWORD *)a1 + 136))(&v5, a1, v6);
    a1[i + 12] = *(float *)((char *)&v6[-2] + i * 4) + a1[6];
    *(_DWORD *)((char *)v6 + i * 4) = -1082130432;
    (*(void (**)(__int128 *__return_ptr, float *, _QWORD *))(*(_QWORD *)a1 + 136))(&v4, a1, v6);
    v5 = v4;
    result = *(float *)((char *)&v6[-2] + i * 4) - a1[6];
    a1[i + 8] = result;
  }
  return result;
}

void sub_1B21E82C4(uint64_t a1)
{
  uint64_t v1;

  nullsub_16(a1);
  sub_1B21FF5FC(v1);
}

float32x4_t sub_1B21E82D8(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  unsigned int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t result;
  unsigned int v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;

  v28 = a1[2];
  v29 = a1[3];
  v27 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  v26 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9 = a2[1];
  v10 = a2[2];
  v11 = (float32x4_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1B22CA020);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = vmulq_f32(vaddq_f32(a1[3], a1[2]), v12);
  v14 = (int8x16_t)vmulq_f32(v10, v13);
  v13.i32[3] = 0;
  v15 = vmulq_f32(vsubq_f32(v29, v28), v12);
  v15.i32[3] = 0;
  v16.i64[0] = __PAIR64__(v26, v27);
  v16.i64[1] = v8;
  v17 = vaddq_f32(v16, v15);
  v18 = (int8x16_t)vmulq_f32(*a2, v13);
  v19 = vmulq_f32(v9, v13);
  v14.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v20 = vaddq_f32(v19, a2[3]);
  v21 = vmulq_f32(v17, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B22CA020));
  v22 = (int8x16_t)vmulq_f32(v17, (float32x4_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1B22CA020));
  v23 = (int8x16_t)vmulq_f32(v17, v11);
  v23.i32[3] = 0;
  *(float32x2_t *)v21.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  v24 = vsubq_f32(v20, v21);
  v24.i32[3] = 0;
  *a3 = v24;
  result = vaddq_f32(v20, v21);
  *a4 = result;
  return result;
}

float sub_1B21E8430(float *a1, _OWORD *a2)
{
  *(_OWORD *)(*((_QWORD *)a1 + 8) + 16) = *a2;
  return sub_1B21E81FC(a1);
}

uint64_t sub_1B21E8440(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) + 16;
}

double sub_1B21E844C(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;

  v6[0] = &off_1E63FC7A8;
  v6[1] = a2;
  v4 = *a4;
  v7 = *a3;
  v8 = v4;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), v6);
  return nullsub_16(v6);
}

void sub_1B21E849C(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

double sub_1B21E84A4@<D0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float32x4_t v15;

  v8 = 0uLL;
  v7[0] = &off_1E63CCD48;
  v9 = xmmword_1B2244DB0;
  v10 = xmmword_1B2244DD0;
  v11 = xmmword_1B2244D90;
  v12 = 0;
  v13 = 0;
  v14 = -581039253;
  v15 = vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B2244D90, *a2, 2), vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*a2)), vmulq_lane_f32((float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)a2->f32, 1)));
  v5 = xmmword_1B22CA240;
  v6 = xmmword_1B22C9FA0;
  (*(void (**)(uint64_t, _QWORD *, __int128 *, __int128 *))(*(_QWORD *)a1 + 128))(a1, v7, &v5, &v6);
  *a3 = v8;
  return nullsub_16(v7);
}

const char *sub_1B21E8564()
{
  return "TRIANGLEMESH";
}

void sub_1B21E8570(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21E8594(uint64_t result, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  _BOOL4 v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v2 = *a2;
  v3 = a2[4];
  if (*a2 >= v3)
    v4 = a2[4];
  else
    v4 = *a2;
  v5 = a2[8];
  if (v4 >= v5)
    v4 = a2[8];
  if (v4 <= *(float *)(result + 32))
  {
    v6 = v2 <= v3;
    if (v2 <= v3)
      v2 = a2[4];
    v7 = 4 * v6;
    if (v2 <= v5)
      v7 = 8;
    if (a2[v7] >= *(float *)(result + 16))
    {
      v8 = a2 + 2;
      v9 = a2[2];
      v10 = a2[6];
      v11 = a2[10];
      if (v9 >= v10)
        v12 = a2[6];
      else
        v12 = a2[2];
      if (v12 >= v11)
        v12 = a2[10];
      if (v12 <= *(float *)(result + 40))
      {
        if (v9 <= v10)
        {
          v9 = a2[6];
          v8 = a2 + 6;
        }
        if (v9 <= v11)
          v8 = a2 + 10;
        if (*v8 >= *(float *)(result + 24))
        {
          v13 = a2 + 1;
          v14 = a2[1];
          v15 = a2[5];
          v16 = a2[9];
          if (v14 >= v15)
            v17 = a2[5];
          else
            v17 = a2[1];
          if (v17 >= v16)
            v17 = a2[9];
          if (v17 <= *(float *)(result + 36))
          {
            if (v14 <= v15)
            {
              v14 = a2[5];
              v13 = a2 + 5;
            }
            if (v14 <= v16)
              v13 = a2 + 9;
            if (*v13 >= *(float *)(result + 20))
              return (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), *v13);
          }
        }
      }
    }
  }
  return result;
}

void sub_1B21E86AC(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21E86D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  float v4;
  int8x16_t v5;
  float v6;

  v2 = 0;
  v3 = *(float32x4_t *)(result + 112);
  v4 = *(float *)(result + 96);
  do
  {
    v5 = (int8x16_t)vmulq_f32(v3, *(float32x4_t *)(a2 + v2));
    v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > v4)
    {
      *(float *)(result + 96) = v6;
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + v2);
      v4 = v6;
    }
    v2 += 16;
  }
  while (v2 != 48);
  return result;
}

_QWORD *sub_1B21E8718(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *result = &off_1E63CD9A8;
  result[1] = a4;
  result[2] = a5;
  result[3] = a2;
  result[4] = a3;
  result[5] = 0;
  return result;
}

_QWORD *sub_1B21E8730(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1E63CD9A8;
  result[1] = 0;
  result[2] = 0;
  result[3] = a2;
  result[4] = 0;
  result[5] = a3;
  return result;
}

uint64_t sub_1B21E8748(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  double v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71[8];
  int v72;
  _OWORD v73[7];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (a1[4])
  {
    v8 = sub_1B21EF418(a1[1]);
    v9 = (_DWORD *)a1[3];
    v10 = a1[4];
    v11 = v9[2];
    v12 = *(_DWORD *)(v10 + 8);
    v13 = (*(float (**)(_DWORD *, double))(*(_QWORD *)v9 + 96))(v9, v8);
    v14 = (*(float (**)(uint64_t))(*(_QWORD *)a1[4] + 96))(a1[4]);
    sub_1B21EB980((uint64_t)v73, (uint64_t)v9, v10, v11, v12, a1[1], a1[2], v13, v14);
    v72 = 1566444395;
    v15 = a2[1];
    v71[0] = *a2;
    v71[1] = v15;
    v16 = a2[3];
    v71[2] = a2[2];
    v71[3] = v16;
    v17 = a3[1];
    v71[4] = *a3;
    v71[5] = v17;
    v18 = a3[3];
    v71[6] = a3[2];
    v71[7] = v18;
    return sub_1B21EB9C0(v73, v71, a4, 0, 0);
  }
  else
  {
    v20 = a1[3];
    v21 = a1[5];
    v22 = a2[1];
    v23 = a2[2];
    v24 = a2[3];
    v26 = *a3;
    v25 = a3[1];
    v27 = a3[2];
    v28 = (int8x16_t)vtrn1q_s32(*(int32x4_t *)a3, (int32x4_t)v25);
    v29.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
    v30.i64[0] = v28.i64[0];
    v30.i64[1] = v27.u32[0];
    v28.i64[0] = 0x8000000080000000;
    v28.i64[1] = 0x8000000080000000;
    v31 = (float32x4_t)veorq_s8((int8x16_t)a3[3], v28);
    v32 = (int8x16_t)vmulq_f32(v30, v31);
    *(int32x2_t *)v33.f32 = vzip2_s32(*(int32x2_t *)a3->f32, *(int32x2_t *)v25.f32);
    *(int32x2_t *)&v33.u32[2] = vzip2_s32(*(int32x2_t *)v27.f32, 0);
    v34 = (int8x16_t)vmulq_f32(v33, v31);
    v29.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
    v35 = (int8x16_t)vmulq_f32(v29, v31);
    v35.i32[3] = 0;
    *(float32x2_t *)v32.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
    v36 = *a2;
    v36.i32[3] = 0;
    v37 = v22;
    v37.i32[3] = 0;
    v38 = v23;
    v38.i32[3] = 0;
    v69 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v36, *(float32x2_t *)a3->f32, 1), v37, *(float32x2_t *)v25.f32, 1), v38, *(float32x2_t *)v27.f32, 1);
    v39 = (int8x16_t)vmulq_f32(v24, v30);
    v40 = (int8x16_t)vmulq_f32(v24, v33);
    v41 = (int8x16_t)vmulq_f32(v24, v29);
    v41.i32[3] = 0;
    v42 = vadd_f32(*(float32x2_t *)v32.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.i8)));
    v68 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, COERCE_FLOAT(*a3)), v37, v25.f32[0]), v38, v27.f32[0]);
    v26.i32[3] = 0;
    v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v36, *a3, 2), v37, v25, 2), v38, v27, 2);
    v25.i32[3] = 0;
    v27.i32[3] = 0;
    v43 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v26, *(float32x2_t *)a2->f32, 1), v25, *(float32x2_t *)v22.f32, 1), v27, *(float32x2_t *)v23.f32, 1);
    v44 = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0));
    v45 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v26, COERCE_FLOAT(*a2)), v25, v22.f32[0]), v27, v23.f32[0]);
    v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v26, *a2, 2), v25, v22, 2), v27, v23, 2);
    v47 = (float32x4_t)veorq_s8(*(int8x16_t *)(v21 + 64), v28);
    v48 = (int8x16_t)vmulq_f32(v45, v47);
    v49 = (int8x16_t)vmulq_f32(v43, v47);
    v50 = (int8x16_t)vmulq_f32(v46, v47);
    v50.i32[3] = 0;
    *(float32x2_t *)v48.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v49.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)));
    v48.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)), 0);
    v73[0] = v48;
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v20 + 128))(v71, v20, v73);
    v51 = vmulq_f32(v68, v71[0]);
    v52 = (int8x16_t)vmulq_f32(v69, v71[0]);
    v53 = (int8x16_t)vmulq_f32(v67, v71[0]);
    v53.i32[3] = 0;
    *(float32x2_t *)v51.f32 = vadd_f32(v42, vadd_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL))));
    *(float32x2_t *)&v51.u32[2] = vadd_f32(v44, vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0));
    v54 = *(float32x4_t *)(v21 + 64);
    v55 = (int8x16_t)vmulq_f32(v54, v51);
    v56 = vmulq_n_f32(v54, vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]- *(float *)(v21 + 80));
    v56.i32[3] = 0;
    v57 = vsubq_f32(v51, v56);
    v58 = a3[2];
    v59 = (int8x16_t)vmulq_f32(v58, v57);
    v57.i32[3] = 0;
    v60 = *a3;
    v61 = a3[1];
    v62 = (int8x16_t)vmulq_f32(*a3, v57);
    v63 = vmulq_f32(v61, v57);
    v59.i32[3] = 0;
    *(float32x2_t *)v63.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v63.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL)));
    *(float32x2_t *)&v63.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
    v73[0] = vaddq_f32(a3[3], v63);
    v64 = (int8x16_t)vmulq_f32(v54, v60);
    v65 = (int8x16_t)vmulq_f32(v54, v61);
    v66 = (int8x16_t)vmulq_f32(v54, v58);
    v66.i32[3] = 0;
    *(float32x2_t *)v64.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.i8));
    v64.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)), 0);
    v70 = v64;
    return (*(uint64_t (**)(uint64_t, int8x16_t *, _OWORD *))(*(_QWORD *)a4 + 32))(a4, &v70, v73);
  }
}

uint64_t sub_1B21E8B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  uint64_t v16;
  float v17;
  int8x16_t v18;
  int8x16_t v19;
  float v20;
  float32x4_t v21;
  int8x16_t v22;
  uint64_t result;
  __int128 v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  BOOL v35;
  uint64_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44[4];
  float32x4_t v45[3];
  uint64_t v46;
  __int128 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  _OWORD v52[2];
  __int128 v53;
  float v54[2];
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  float v58[2];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = vsubq_f32(*(float32x4_t *)(a3 + 48), *(float32x4_t *)(a2 + 48));
  v11.i32[3] = 0;
  v42 = v11;
  v51 = v11;
  v45[0].i32[0] = 0;
  sub_1B21D3CB8((_OWORD *)a2, (float32x2_t *)a3, &v55, v45[0].f32);
  v12 = vmulq_n_f32(v55, v45[0].f32[0]);
  v12.i32[3] = 0;
  v39 = v12;
  v50 = v12;
  v13 = vsubq_f32(*(float32x4_t *)(a5 + 48), *(float32x4_t *)(a4 + 48));
  v13.i32[3] = 0;
  v40 = v13;
  v49 = v13;
  v45[0].i32[0] = 0;
  sub_1B21D3CB8((_OWORD *)a4, (float32x2_t *)a5, &v55, v45[0].f32);
  v14 = vmulq_n_f32(v55, v45[0].f32[0]);
  v14.i32[3] = 0;
  v38 = v14;
  v48 = v14;
  v15 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  else
    v17 = 0.0;
  v18 = (int8x16_t)vmulq_f32(v39, v39);
  v19 = (int8x16_t)vmulq_f32(v38, v38);
  v20 = (float)(v17
              * sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0]))+ (float)(sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0])* v15);
  v21 = vsubq_f32(v40, v42);
  v21.i32[3] = 0;
  v22 = (int8x16_t)vmulq_f32(v21, v21);
  if ((float)(v20
             + sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0])) != 0.0)
  {
    v43 = v21;
    v55.i64[0] = (uint64_t)&off_1E63CC630;
    strcpy((char *)v58, "k\v^]");
    sub_1B21E8748((uint64_t *)a1, (float32x4_t *)a2, (float32x4_t *)a4, (uint64_t)&v55);
    v24 = v57;
    v47 = v57;
    if (LOBYTE(v58[1]))
    {
      v25 = v56;
      v26 = (int8x16_t)vmulq_f32(v56, v43);
      if ((float)(v20
                 + vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).f32[0]) > 0.00000011921)
      {
        v27 = v58[0] + *(float *)(a6 + 192);
        v28 = 0.0;
        if (v27 <= 0.001)
        {
LABEL_25:
          *(float *)(a6 + 176) = v28;
          result = 1;
          *(float32x4_t *)(a6 + 144) = v25;
          *(_OWORD *)(a6 + 160) = v24;
          return result;
        }
        v29 = 0;
        v30 = 0.0;
        while (1)
        {
          v31 = *(_QWORD *)(a6 + 184);
          if (v31)
          {
            v45[0] = (float32x4_t)xmmword_1B2244F70;
            v41 = v25;
            (*(void (**)(uint64_t, __int128 *, float32x4_t *, float))(*(_QWORD *)v31 + 40))(v31, &v47, v45, 0.2);
            v25 = v41;
          }
          v32 = (int8x16_t)vmulq_f32(v25, v43);
          v33 = v20
              + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8)).f32[0];
          if (v33 <= 0.00000011921)
            break;
          result = 0;
          v34 = v27 / v33;
          v28 = v30 + v34;
          v35 = (float)(v30 + v34) > v30 && v28 <= 1.0;
          if (!v35 || v28 < 0.0)
            return result;
          sub_1B21E8F2C((float32x4_t *)a2, &v51, &v50, v45, v30 + v34);
          sub_1B21E8F2C((float32x4_t *)a4, &v49, &v48, v44, v28);
          v36 = *(_QWORD *)(a6 + 184);
          if (v36)
          {
            v52[0] = xmmword_1B2244DB0;
            (*(void (**)(uint64_t, uint64_t *, _OWORD *, float))(*(_QWORD *)v36 + 40))(v36, &v46, v52, 0.2);
          }
          (**(void (***)(uint64_t, float))a6)(a6, v28);
          *(_QWORD *)&v52[0] = &off_1E63CC630;
          strcpy((char *)v54, "k\v^]");
          sub_1B21E8748((uint64_t *)a1, v45, v44, (uint64_t)v52);
          if (!LOBYTE(v54[1]))
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, 0xFFFFFFFFLL, v29);
            return 0;
          }
          v37 = *(float *)(a6 + 192);
          v24 = v53;
          v47 = v53;
          if ((_DWORD)v29 == 64)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, 4294967294, 65);
            return 0;
          }
          v29 = (v29 + 1);
          v25 = (float32x4_t)v52[1];
          v27 = v54[0] + v37;
          v30 = v28;
          if ((float)(v54[0] + v37) <= 0.001)
            goto LABEL_25;
        }
      }
    }
  }
  return 0;
}

void sub_1B21E8F2C(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float a5)
{
  float v6;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  int32x2_t v17;
  float32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;

  v6 = a5;
  v8 = vmulq_n_f32(*a2, a5);
  v8.i32[3] = 0;
  a4[3] = vaddq_f32(a1[3], v8);
  v9 = *a3;
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v11 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]);
  if ((float)(v11 * v6) <= 0.7854)
    v12 = v11;
  else
    v12 = 0.7854 / v6;
  if (v12 >= 0.001)
  {
    v27 = *a3;
    v29 = v6;
    v14 = sinf((float)(v12 * 0.5) * v6);
    v9 = v27;
    v6 = v29;
    v13 = v14 / v12;
  }
  else
  {
    v13 = (float)(v12 * (float)((float)((float)((float)(v6 * v6) * v6) * -0.020833) * v12)) + (float)(v6 * 0.5);
  }
  v30 = vmulq_n_f32(v9, v13);
  v15 = cosf((float)(v12 * v6) * 0.5);
  v16 = v30;
  v16.f32[3] = v15;
  v28 = v16;
  sub_1B21D3EAC(a1->f32, (float32x4_t *)&v32);
  v17 = (int32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  v18 = (float32x2_t)vzip1_s32(v17, *(int32x2_t *)v30.f32);
  v19 = (int32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
  v20 = vzip1_s32(v19, *(int32x2_t *)v32.i8);
  v21 = (float32x2_t)vext_s8(*(int8x8_t *)v30.f32, (int8x8_t)v17, 4uLL);
  v22 = vmul_f32(v18, (float32x2_t)vext_s8((int8x8_t)v19, *(int8x8_t *)v32.i8, 4uLL));
  *(float32x2_t *)v23.f32 = vmul_f32(v18, (float32x2_t)vext_s8(*(int8x8_t *)v32.i8, (int8x8_t)v19, 4uLL));
  *(float32x2_t *)&v23.u32[2] = vmul_f32(v21, (float32x2_t)vrev64_s32(v20));
  *(float32x2_t *)v24.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v30.f32, (float32x4_t)v32, 3), vmul_f32(v21, (float32x2_t)v20));
  v24.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v32.i8, 1), v22);
  v25 = vaddq_f32(vsubq_f32(vmulq_laneq_f32((float32x4_t)v32, v28, 3), v23), (float32x4_t)veorq_s8(v24, (int8x16_t)xmmword_1B2269000));
  v26 = vmulq_f32(v25, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  v31 = vmulq_n_f32(v25, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32).f32[0]));
  sub_1B19064B8((uint64_t)a4, &v31);
}

void sub_1B21E90C8(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21E90EC()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21E9108(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  if (*(float *)(result + 48) > a4)
  {
    *(_BYTE *)(result + 52) = 1;
    *(_OWORD *)(result + 16) = *a2;
    *(_OWORD *)(result + 32) = *a3;
    *(float *)(result + 48) = a4;
  }
  return result;
}

_QWORD *sub_1B21E9134(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = &off_1E63CC2E8;
  result[1] = a4;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t sub_1B21E9148(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  __int128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  int v20;
  uint64_t result;
  int8x16_t v22;
  float v23;
  BOOL v24;
  float32x4_t v25;
  float v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  _OWORD v36[3];
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int v42;
  _BYTE v43[112];
  _QWORD v44[2];
  float32x4_t v45;
  __int128 v46;
  float v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  sub_1B21EF418(*(_QWORD *)(a1 + 8));
  v32 = *(float32x4_t *)(a2 + 48);
  v34 = a3[3];
  v30 = a4[3];
  v31 = a5[3];
  v44[0] = &off_1E63CC630;
  strcpy((char *)v47, "k\v^]");
  sub_1B21EB97C((uint64_t)v43, *(_DWORD **)(a1 + 16), *(_DWORD **)(a1 + 24), *(_QWORD *)(a1 + 8), 0);
  v42 = 1566444395;
  v12 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  v36[1] = v12;
  v13 = *(float32x4_t *)(a2 + 48);
  v36[2] = *(_OWORD *)(a2 + 32);
  v37 = v13;
  v14 = a4[1];
  v38 = *a4;
  v39 = v14;
  v15 = a4[3];
  v40 = a4[2];
  v41 = v15;
  sub_1B21EB9C0(v43, v36, v44, 0, 0);
  if (LOBYTE(v47[1]))
  {
    v16 = vsubq_f32(vsubq_f32(v34, v32), vsubq_f32(v31, v30));
    v16.i32[3] = 0;
    v33 = v16;
    v17 = v47[0];
    v18 = v45;
    if (v47[0] <= 0.001)
    {
      v27 = v46;
      v26 = 0.0;
LABEL_16:
      v28 = (int8x16_t)vmulq_f32(v18, v33);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8)).f32[0] < (float)-*(float *)(a6 + 192))
      {
        *(float *)(a6 + 176) = v26;
        result = 1;
        *(float32x4_t *)(a6 + 144) = v18;
        *(_OWORD *)(a6 + 160) = v27;
        return result;
      }
    }
    else
    {
      v19 = 0.0;
      v20 = 33;
      while (--v20)
      {
        result = 0;
        v22 = (int8x16_t)vmulq_f32(v18, v33);
        v23 = v19
            - (float)(v17
                    / vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)).f32[0]);
        v24 = v23 > v19 && v23 <= 1.0;
        if (!v24 || v23 < 0.0)
          return result;
        v35 = v23;
        (**(void (***)(uint64_t))a6)(a6);
        v25 = vaddq_f32(a4[3], vmulq_n_f32(vsubq_f32(a5[3], a4[3]), v35));
        v37 = vaddq_f32(*(float32x4_t *)(a2 + 48), vmulq_n_f32(vsubq_f32(a3[3], *(float32x4_t *)(a2 + 48)), v35));
        v41 = v25;
        sub_1B21EB9C0(v43, v36, v44, 0, 0);
        if (!LOBYTE(v47[1]))
          return 0;
        v17 = v47[0];
        if (v47[0] < 0.0)
        {
          *(float *)(a6 + 176) = v35;
          v29 = v46;
          *(float32x4_t *)(a6 + 144) = v45;
          *(_OWORD *)(a6 + 160) = v29;
          return 1;
        }
        v18 = v45;
        v26 = v35;
        v19 = v35;
        if (v47[0] <= 0.001)
        {
          v27 = v46;
          goto LABEL_16;
        }
      }
    }
  }
  return 0;
}

void sub_1B21E93C8(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

BOOL sub_1B21E93EC(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  double v9;
  double v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  void (*v19)(float32x4_t *__return_ptr, _QWORD *, _QWORD);
  _QWORD *v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41[8];
  void (*v42)(float32x4_t *__return_ptr, _QWORD *, _QWORD);
  uint64_t v43;
  _BYTE v44[144];
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  sub_1B21E964C(a1, a2, a3, a4, a6, v41, 0);
  v45 = 0;
  v46 = 0;
  v50 = 2;
  v48 = 0;
  v47 = 0;
  v13 = sub_1B21E9734((uint64_t)v44, v41, a5, v9, v10, v11, v12);
  v14 = v13;
  if (v13)
  {
    if (v13 == 1)
      v15 = 1;
    else
      v15 = 2;
    *(_DWORD *)a6 = v15;
  }
  else
  {
    v16 = v49;
    if (*(_DWORD *)(v49 + 48))
    {
      v17 = 0;
      v37 = 0u;
      v18 = 0uLL;
      do
      {
        v19 = v42;
        v20 = (_QWORD *)(v41[0].i64[0] + (v43 >> 1));
        v36 = v18;
        if ((v43 & 1) != 0)
          v19 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, _QWORD))(*v20 + v42);
        v38 = *(float *)(v16 + 4 * v17 + 32);
        v19(&v40, v20, *(_QWORD *)(v16 + 8 * v17));
        v21 = vmulq_n_f32(v40, v38);
        v21.i32[3] = 0;
        v37 = vaddq_f32(v37, v21);
        v22.i64[0] = 0x8000000080000000;
        v22.i64[1] = 0x8000000080000000;
        v39 = veorq_s8(*(int8x16_t *)*(_QWORD *)(v49 + 8 * v17), v22);
        sub_1B21E9BC8(v41, (float32x4_t *)&v39, 1, &v40);
        v23 = vmulq_n_f32(v40, v38);
        v23.i32[3] = 0;
        v18 = vaddq_f32(v36, v23);
        ++v17;
        v16 = v49;
      }
      while (v17 < *(unsigned int *)(v49 + 48));
    }
    else
    {
      v18 = 0uLL;
      v37 = 0u;
    }
    v24 = vmulq_f32(v37, *a2);
    v25 = (int8x16_t)vmulq_f32(v37, a2[1]);
    v26 = (int8x16_t)vmulq_f32(v37, a2[2]);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x4_t *)(a6 + 16) = vaddq_f32(v24, a2[3]);
    v27 = vmulq_f32(v18, *a2);
    v28 = (int8x16_t)vmulq_f32(v18, a2[1]);
    v29 = (int8x16_t)vmulq_f32(v18, a2[2]);
    v29.i32[3] = 0;
    *(float32x2_t *)v27.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v28.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
    *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
    v30 = vaddq_f32(v27, a2[3]);
    v31 = vsubq_f32(v37, v18);
    v31.i32[3] = 0;
    v32 = (int8x16_t)vmulq_f32(v31, v31);
    v33 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8)).f32[0]);
    *(float *)(a6 + 64) = v33;
    if (v33 <= 0.0001)
      v34 = 1.0;
    else
      v34 = 1.0 / v33;
    *(float32x4_t *)(a6 + 32) = v30;
    *(float32x4_t *)(a6 + 48) = vmulq_n_f32(v31, v34);
  }
  return v14 == 0;
}

uint64_t sub_1B21E964C(uint64_t result, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, int a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  void *v25;

  *(_DWORD *)a5 = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  a6->i64[0] = result;
  a6->i64[1] = a3;
  v7 = *a2;
  v8 = a2[1];
  v7.i32[3] = 0;
  v8.i32[3] = 0;
  v9 = a2[2];
  v9.i32[3] = 0;
  v10 = a4[1];
  v11 = a4[2];
  v12 = vmulq_n_f32(v7, COERCE_FLOAT(*a4));
  v13 = vmulq_lane_f32(v7, *(float32x2_t *)a4->f32, 1);
  v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, *a4, 2), v8, v10, 2), v9, v11, 2);
  a6[1] = vmlaq_n_f32(vmlaq_n_f32(v12, v8, v10.f32[0]), v9, v11.f32[0]);
  a6[2] = vmlaq_lane_f32(vmlaq_lane_f32(v13, v8, *(float32x2_t *)v10.f32, 1), v9, *(float32x2_t *)v11.f32, 1);
  a6[3] = v14;
  v15 = *a4;
  v16 = a4[1];
  v17 = a4[2];
  v18 = a2[2];
  v19 = vsubq_f32(a4[3], a2[3]);
  v19.i32[3] = 0;
  v20 = *a2;
  v21 = a2[1];
  v15.i32[3] = 0;
  v22 = vmulq_lane_f32(v15, *(float32x2_t *)a2->f32, 1);
  v20.i32[3] = 0;
  v16.i32[3] = 0;
  v23 = vmlaq_laneq_f32(vmulq_laneq_f32(v15, *a2, 2), v16, v21, 2);
  v21.i32[3] = 0;
  v17.i32[3] = 0;
  v24 = vmlaq_laneq_f32(v23, v17, v18, 2);
  v18.i32[3] = 0;
  a6[4] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, COERCE_FLOAT(*a2)), v16, v21.f32[0]), v17, v18.f32[0]);
  a6[5] = vmlaq_lane_f32(vmlaq_lane_f32(v22, v16, *(float32x2_t *)v21.f32, 1), v17, *(float32x2_t *)v18.f32, 1);
  a6[6] = v24;
  a6[7] = vaddq_f32(vaddq_f32(vmulq_n_f32(v20, v19.f32[0]), vmulq_lane_f32(v21, *(float32x2_t *)v19.f32, 1)), vmulq_laneq_f32(v18, v19, 2));
  v25 = sub_1B21E25DC;
  if (a7)
    v25 = sub_1B21E2A30;
  a6[8].i64[0] = (uint64_t)v25;
  a6[8].i64[1] = 0;
  return result;
}

uint64_t sub_1B21E9734(uint64_t a1, _OWORD *a2, float32x4_t *a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  int8x16_t v13;
  unsigned int v14;
  int8x16_t v15;
  float32x4_t v16;
  unsigned int v17;
  int8x16_t v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float v33;
  int8x16_t v34;
  float32x4_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t i;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t v54;
  unsigned int v55;
  int8x16_t v56;
  float32x4_t v57[4];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 416) = a1 + 288;
  *(_QWORD *)(a1 + 424) = a1 + 320;
  *(_QWORD *)(a1 + 432) = a1 + 352;
  *(_QWORD *)(a1 + 440) = a1 + 384;
  *(_QWORD *)(a1 + 448) = 4;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  v8 = *a3;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)a6.f32 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
  v10 = vextq_s8(v9, v9, 8uLL);
  *(float32x2_t *)a7.f32 = vadd_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v10.i8);
  a6.i32[0] = 0;
  v10.i32[0] = 0;
  v53 = a7;
  v54 = v10;
  *(float32x4_t *)(a1 + 144) = *a3;
  v57[0] = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(a7, a6), 0), (int8x16_t)vnegq_f32(v8), (int8x16_t)xmmword_1B2244DB0);
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 448) = 3;
  *(_QWORD *)(a1 + 168) = a1 + 384;
  *(_DWORD *)(a1 + 216) = 1;
  sub_1B21EAC14((float32x4_t *)a1, v57, a1 + 384);
  v11 = 0;
  v12 = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  v13 = *(int8x16_t *)(*(_QWORD *)(a1 + 168) + 16);
  *(int8x16_t *)(a1 + 144) = v13;
  v57[2] = (float32x4_t)v13;
  v57[3] = (float32x4_t)v13;
  v57[0] = (float32x4_t)v13;
  v57[1] = (float32x4_t)v13;
  v14 = *(_DWORD *)(a1 + 452);
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v16 = (float32x4_t)v13;
  while (2)
  {
    v17 = v14;
    v18 = (int8x16_t)vmulq_f32(v16, v16);
    v19 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0]);
    if (v19 < 0.0001)
    {
      *(_DWORD *)(a1 + 464) = 1;
LABEL_28:
      result = *(unsigned int *)(a1 + 464);
      v20 = v17;
    }
    else
    {
      v20 = 1 - v14;
      v21 = a1 + 168 + 56 * v14;
      v22 = a1 + 168 + 56 * (1 - v14);
      v23 = a1 + 56 * v14;
      v25 = (int *)(v23 + 216);
      v24 = *(unsigned int *)(v23 + 216);
      v56 = veorq_s8(v13, v15);
      *(_DWORD *)(v23 + 4 * v24 + 200) = 0;
      LODWORD(v23) = *(_DWORD *)(a1 + 448) - 1;
      *(_DWORD *)(a1 + 448) = v23;
      v26 = *(_QWORD *)(a1 + 8 * v23 + 416);
      *(_QWORD *)(v21 + 8 * v24) = v26;
      *v25 = v24 + 1;
      sub_1B21EAC14((float32x4_t *)a1, (float32x4_t *)&v56, v26);
      v27 = 0;
      v28 = *v25;
      v29 = *(float32x4_t *)(*(_QWORD *)(v21 + 8 * (*v25 - 1)) + 16);
      do
      {
        v30 = vsubq_f32(v29, v57[v27]);
        v30.i32[3] = 0;
        v31 = (int8x16_t)vmulq_f32(v30, v30);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).f32[0] < 0.0001)goto LABEL_27;
        ++v27;
      }
      while (v27 != 4);
      v11 = (v11 + 1) & 3;
      v57[v11] = v29;
      v32 = (int8x16_t)vmulq_f32(v29, *(float32x4_t *)(a1 + 144));
      v33 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0]/ v19;
      v34 = v54;
      if (v33 > *(float *)v54.i32)
        *(float *)v34.i32 = v33;
      if ((float)((float)(v19 - *(float *)v34.i32) + (float)(v19 * -0.0001)) <= 0.0)
        goto LABEL_27;
      v55 = 0;
      v54 = v34;
      if (v28 == 4)
      {
        v35.f32[0] = sub_1B21EA924((float32x4_t *)(*(_QWORD *)v21 + 16), (float32x4_t *)(*(_QWORD *)(v21 + 8) + 16), (float32x4_t *)(*(_QWORD *)(v21 + 16) + 16), (float32x4_t *)(*(_QWORD *)(v21 + 24) + 16), (uint64_t)&v56, &v55);
      }
      else if (v28 == 3)
      {
        v35.f32[0] = sub_1B21EA618((float32x4_t *)(*(_QWORD *)v21 + 16), (float32x4_t *)(*(_QWORD *)(v21 + 8) + 16), (float32x4_t *)(*(_QWORD *)(v21 + 16) + 16), (uint64_t)&v56, &v55);
      }
      else
      {
        v35 = v53;
        if (v28 == 2)
          *(float32x2_t *)v35.f32 = sub_1B21EA554((float32x4_t *)(*(_QWORD *)v21 + 16), (float32x4_t *)(*(_QWORD *)(v21 + 8) + 16), (uint64_t)&v56, &v55);
      }
      if (v35.f32[0] < 0.0)
      {
LABEL_27:
        v17 = *(_DWORD *)(a1 + 452);
        v48 = a1 + 56 * v17;
        v49 = *(_DWORD *)(v48 + 216) - 1;
        *(_DWORD *)(v48 + 216) = v49;
        v50 = *(_QWORD *)(v48 + 8 * v49 + 168);
        v51 = *(unsigned int *)(a1 + 448);
        *(_DWORD *)(a1 + 448) = v51 + 1;
        *(_QWORD *)(a1 + 8 * v51 + 416) = v50;
        goto LABEL_28;
      }
      v36 = a1 + 56 * v20;
      *(_DWORD *)(v36 + 216) = 0;
      v37 = (unsigned int *)(v36 + 216);
      v13 = 0uLL;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_DWORD *)(a1 + 452) = v20;
      v38 = *v25;
      v39 = v55;
      v16 = 0uLL;
      v15.i64[0] = 0x8000000080000000;
      v15.i64[1] = 0x8000000080000000;
      if ((_DWORD)v38)
      {
        v40 = 0;
        for (i = 0; i != v38; ++i)
        {
          v42 = *(_QWORD *)(v21 + 8 * i);
          if (((v39 >> i) & 1) != 0)
          {
            *(_QWORD *)(v22 + 8 * v40) = v42;
            v43 = *(float *)&v56.i32[i];
            v44 = a1 + 56 * v20 + 4 * v40++;
            *v37 = v40;
            *(float *)(v44 + 200) = v43;
            v45 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(v21 + 8 * i) + 16), v43);
            v45.i32[3] = 0;
            v13 = (int8x16_t)vaddq_f32(v16, v45);
            *(int8x16_t *)(a1 + 144) = v13;
            v16 = (float32x4_t)v13;
          }
          else
          {
            v46 = *(unsigned int *)(a1 + 448);
            *(_DWORD *)(a1 + 448) = v46 + 1;
            *(_QWORD *)(a1 + 8 * v46 + 416) = v42;
          }
        }
      }
      if (v39 == 15)
        *(_DWORD *)(a1 + 464) = 1;
      if (v12 == 127)
      {
        result = 2;
        *(_DWORD *)(a1 + 464) = 2;
        *(_QWORD *)(a1 + 456) = v22;
        return result;
      }
      v53 = v35;
      ++v12;
      result = *(unsigned int *)(a1 + 464);
      v14 = v20;
      if (!(_DWORD)result)
        continue;
    }
    break;
  }
  *(_QWORD *)(a1 + 456) = a1 + 56 * v20 + 168;
  if ((_DWORD)result == 1)
  {
    *(_DWORD *)(a1 + 160) = 0;
  }
  else if (!(_DWORD)result)
  {
    v52 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 144), *(float32x4_t *)(a1 + 144));
    *(float *)(a1 + 160) = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0]);
  }
  return result;
}

_QWORD *sub_1B21E9BC8@<X0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  _QWORD *(*v6)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *);
  uint64_t v7;
  _QWORD *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  _QWORD *result;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t (*v16)(_QWORD *);
  uint64_t v17;
  _QWORD *v18;
  int8x16_t v19;
  float32x4_t v20;

  if (a3)
  {
    v6 = (_QWORD *(*)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))a1[8].i64[0];
    v7 = a1[8].i64[1];
    v8 = (_QWORD *)(a1->i64[1] + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(_QWORD *(**)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))(*v8 + v6);
    v9 = (int8x16_t)vmulq_f32(a1[1], *a2);
    v10 = (int8x16_t)vmulq_f32(*a2, a1[2]);
    v11 = (int8x16_t)vmulq_f32(*a2, a1[3]);
    v11.i32[3] = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
    v9.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), 0);
    v19 = v9;
    result = v6(&v20, v8, &v19);
    v13 = vmulq_f32(a1[4], v20);
    v14 = (int8x16_t)vmulq_f32(v20, a1[5]);
    v15 = (int8x16_t)vmulq_f32(v20, a1[6]);
    v15.i32[3] = 0;
    *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
    *a4 = vaddq_f32(v13, a1[7]);
  }
  else
  {
    v16 = (uint64_t (*)(_QWORD *))a1[8].i64[0];
    v17 = a1[8].i64[1];
    v18 = (_QWORD *)(a1->i64[0] + (v17 >> 1));
    if ((v17 & 1) != 0)
      v16 = *(uint64_t (**)(_QWORD *))(*v18 + v16);
    return (_QWORD *)v16(v18);
  }
  return result;
}

float sub_1B21E9CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  int v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int v15;
  float result;
  int8x16_t v17;
  float32x4_t v18;
  unint64_t i;
  void (*v20)(float32x4_t *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35[8];
  void (*v36)(float32x4_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v37;
  float32x4_t v38[3];
  unsigned int v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  float32x4_t v46[9];
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v52 = *MEMORY[0x1E0C80C00];
  sub_1B21E964C(v8, v6, v9, v10, v2, v35, v11);
  v48 = 0;
  v47 = 0;
  v51 = 2;
  v50 = 0;
  v49 = 0;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  v38[0] = (float32x4_t)veorq_s8(*v5, v12);
  v15 = sub_1B21E9734((uint64_t)v46, v35, v38, *(double *)v38[0].i64, COERCE_DOUBLE(0x8000000080000000), v13, v14);
  if (v15 == 2)
  {
    *(_DWORD *)v3 = 2;
  }
  else if (v15 == 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_1B21EADA8((uint64_t)v38);
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    v34 = (float32x4_t)veorq_s8(*v5, v17);
    if (sub_1B21E9F4C((int *)v38, v46, (int8x16_t *)&v34) == 9)
    {
      *(_DWORD *)v3 = 3;
    }
    else
    {
      v18 = 0uLL;
      if (v39)
      {
        for (i = 0; i < v39; ++i)
        {
          v20 = v36;
          v21 = (_QWORD *)(v35[0].i64[0] + (v37 >> 1));
          v33 = v18;
          if ((v37 & 1) != 0)
            v20 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, uint64_t))(*v21 + v36);
          v20(&v34, v21, v38[0].i64[i + 1]);
          v22 = vmulq_n_f32(v34, v38[2].f32[i + 2]);
          v22.i32[3] = 0;
          v18 = vaddq_f32(v33, v22);
        }
      }
      *(_DWORD *)v3 = 1;
      v23 = vmulq_f32(v18, *v7);
      v24 = (int8x16_t)vmulq_f32(v18, v7[1]);
      v25 = (int8x16_t)vmulq_f32(v18, v7[2]);
      v25.i32[3] = 0;
      *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
      *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
      *(float32x4_t *)(v3 + 16) = vaddq_f32(v23, v7[3]);
      *(float *)v24.i32 = v41;
      v26 = vmulq_n_f32(v40, v41);
      v26.i32[3] = 0;
      v27 = vsubq_f32(v18, v26);
      v28 = v27;
      v28.i32[3] = 0;
      v29 = (int8x16_t)vmulq_f32(v7[2], v27);
      v30 = (int8x16_t)vmulq_f32(*v7, v28);
      v31 = vmulq_f32(v7[1], v28);
      v29.i32[3] = 0;
      *(float32x2_t *)v31.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v31.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL)));
      *(float32x2_t *)&v31.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      v32 = veorq_s8((int8x16_t)v40, v29);
      *(float32x4_t *)(v3 + 32) = vaddq_f32(v7[3], v31);
      *(int8x16_t *)(v3 + 48) = v32;
      result = -*(float *)v24.i32;
      *(float *)(v3 + 64) = -*(float *)v24.i32;
    }
  }
  return result;
}

uint64_t sub_1B21E9F4C(int *a1, float32x4_t *a2, int8x16_t *a3)
{
  float32x4_t **v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v18;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float v36;
  int v37;
  float32x4_t v38;
  float v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  int8x16_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float v60;
  float32x4_t v61;
  int v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x4_t v67;
  int8x8_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x8_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;

  v5 = (float32x4_t **)a2[28].i64[1];
  if (*((_DWORD *)v5 + 12) < 2u || !sub_1B21EAE14(a2))
    goto LABEL_49;
  v7 = *((_QWORD *)a1 + 1805);
  if (v7)
  {
    v8 = a1[3612];
    v9 = a1[3616];
    do
    {
      v10 = *(_QWORD *)(v7 + 80);
      if (v10)
        *(_QWORD *)(v10 + 72) = *(_QWORD *)(v7 + 72);
      v11 = *(_QWORD *)(v7 + 72);
      if (v11)
        *(_QWORD *)(v11 + 80) = *(_QWORD *)(v7 + 80);
      if (*((_QWORD *)a1 + 1805) == v7)
        *((_QWORD *)a1 + 1805) = *(_QWORD *)(v7 + 80);
      *(_QWORD *)(v7 + 72) = 0;
      *(_QWORD *)(v7 + 80) = *((_QWORD *)a1 + 1807);
      v12 = *((_QWORD *)a1 + 1807);
      if (v12)
        *(_QWORD *)(v12 + 72) = v7;
      *((_QWORD *)a1 + 1807) = v7;
      ++v9;
      v7 = *((_QWORD *)a1 + 1805);
      --v8;
    }
    while (v7);
    a1[3612] = v8;
    a1[3616] = v9;
  }
  *a1 = 0;
  a1[3608] = 0;
  v13 = v5[2];
  v14 = v5[3][1];
  v16 = *v5;
  v15 = v5[1];
  _Q1 = vsubq_f32((*v5)[1], v14);
  v18 = vsubq_f32(v15[1], v14);
  _Q0 = vsubq_f32(v13[1], v14);
  _S4 = vmuls_lane_f32(-_Q1.f32[0], v18, 2);
  __asm { FMLA            S6, S4, V0.S[1] }
  _S3 = (float)-_Q1.f32[1] * v18.f32[0];
  __asm { FMLA            S6, S3, V0.S[2] }
  _Q1.f32[0] = vmuls_lane_f32(_Q1.f32[0], *(float32x2_t *)v18.f32, 1);
  __asm { FMLA            S6, S1, V0.S[2] }
  if (vmlas_n_f32(_S6, vmuls_lane_f32(-_Q1.f32[2], *(float32x2_t *)v18.f32, 1), _Q0.f32[0]) >= 0.0)
  {
    v29 = v5[1];
    v15 = *v5;
  }
  else
  {
    *v5 = v15;
    v5[1] = v16;
    v5[4] = (float32x4_t *)vrev64_s32((int32x2_t)v5[4]);
    v29 = v16;
  }
  v30 = sub_1B21EB290((uint64_t)a1, v15, v29, v13, 1);
  v31 = sub_1B21EB290((uint64_t)a1, v5[1], *v5, v5[3], 1);
  v32 = sub_1B21EB290((uint64_t)a1, v5[2], v5[1], v5[3], 1);
  v33 = sub_1B21EB290((uint64_t)a1, *v5, v5[2], v5[3], 1);
  if (a1[3612] == 4)
  {
    v34 = (float32x4_t *)*((_QWORD *)a1 + 1805);
    v35 = (float32x4_t *)v34[5].i64[0];
    if (v35)
    {
      v36 = v34[1].f32[0] * v34[1].f32[0];
      do
      {
        if ((float)(v35[1].f32[0] * v35[1].f32[0]) < v36)
        {
          v34 = v35;
          v36 = v35[1].f32[0] * v35[1].f32[0];
        }
        v35 = (float32x4_t *)v35[5].i64[0];
      }
      while (v35);
    }
    v37 = 0;
    v38 = *v34;
    v39 = v34[1].f32[0];
    v41 = (float32x4_t *)v34[1].i64[1];
    v40 = (float32x4_t *)v34[2].i64[0];
    v42 = (float32x4_t *)v34[2].i64[1];
    v30[5].i8[8] = 0;
    v30[3].i64[0] = (uint64_t)v31;
    v31[5].i8[8] = 0;
    v31[3].i64[0] = (uint64_t)v30;
    v30[5].i8[9] = 0;
    v30[3].i64[1] = (uint64_t)v32;
    v32[5].i8[8] = 1;
    v32[3].i64[0] = (uint64_t)v30;
    v30[5].i8[10] = 0;
    v30[4].i64[0] = (uint64_t)v33;
    v33[5].i8[8] = 2;
    v33[3].i64[0] = (uint64_t)v30;
    v31[5].i8[9] = 2;
    v31[3].i64[1] = (uint64_t)v33;
    v33[5].i8[10] = 1;
    v33[4].i64[0] = (uint64_t)v31;
    v31[5].i8[10] = 1;
    v31[4].i64[0] = (uint64_t)v32;
    *(__int16 *)((char *)&v32[5].i16[4] + 1) = 258;
    v32[3].i64[1] = (uint64_t)v31;
    v32[4].i64[0] = (uint64_t)v33;
    v33[5].i8[9] = 2;
    v33[3].i64[1] = (uint64_t)v32;
    *a1 = 0;
    while (1)
    {
      v43 = a1[3608];
      if (v43 > 0x3F)
      {
        *a1 = 6;
        goto LABEL_57;
      }
      v83 = v39;
      v84 = v38;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      a1[3608] = v43 + 1;
      v44 = (float32x4_t *)&a1[8 * v43];
      v45 = v44 + 6;
      v34[5].i8[11] = ++v37;
      sub_1B21EAC14(a2, v34, (uint64_t)&v44[6]);
      v46 = (int8x16_t)vmulq_f32(*v34, v44[7]);
      if ((float)(vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).f32[0]- v34[1].f32[0]) <= 0.0001)
      {
        v63 = 7;
        goto LABEL_56;
      }
      v47 = 0;
      do
      {
        v48 = sub_1B21EB4FC((uint64_t)a1, v37, v45, (float32x4_t *)v34[3].i64[v47], v34[5].u8[v47 + 8], &v85);
        if (v47 > 1)
          break;
        ++v47;
      }
      while ((v48 & 1) != 0);
      v49 = v87 > 2 ? v48 : 0;
      if ((v49 & 1) == 0)
        break;
      v50 = v85;
      v51 = v86;
      *(_BYTE *)(v85 + 89) = 2;
      *(_QWORD *)(v50 + 56) = v51;
      *(_BYTE *)(v51 + 90) = 1;
      *(_QWORD *)(v51 + 64) = v50;
      v52 = v34[5].i64[0];
      if (v52)
        *(_QWORD *)(v52 + 72) = v34[4].i64[1];
      v53 = v34[4].i64[1];
      if (v53)
        *(_QWORD *)(v53 + 80) = v34[5].i64[0];
      if (*((float32x4_t **)a1 + 1805) == v34)
        *((_QWORD *)a1 + 1805) = v34[5].i64[0];
      --a1[3612];
      v34[4].i64[1] = 0;
      v34[5].i64[0] = *((_QWORD *)a1 + 1807);
      v54 = *((_QWORD *)a1 + 1807);
      if (v54)
        *(_QWORD *)(v54 + 72) = v34;
      *((_QWORD *)a1 + 1807) = v34;
      ++a1[3616];
      v34 = (float32x4_t *)*((_QWORD *)a1 + 1805);
      v55 = (float32x4_t *)v34[5].i64[0];
      if (v55)
      {
        v56 = v34[1].f32[0] * v34[1].f32[0];
        do
        {
          if ((float)(v55[1].f32[0] * v55[1].f32[0]) < v56)
          {
            v34 = v55;
            v56 = v55[1].f32[0] * v55[1].f32[0];
          }
          v55 = (float32x4_t *)v55[5].i64[0];
        }
        while (v55);
      }
      v38 = *v34;
      v39 = v34[1].f32[0];
      v41 = (float32x4_t *)v34[1].i64[1];
      v40 = (float32x4_t *)v34[2].i64[0];
      v42 = (float32x4_t *)v34[2].i64[1];
      if (v37 == 255)
        goto LABEL_57;
    }
    v63 = 4;
LABEL_56:
    *a1 = v63;
    v39 = v83;
    v38 = v84;
LABEL_57:
    v64 = vmulq_n_f32(v38, v39);
    v64.i32[3] = 0;
    *((float32x4_t *)a1 + 4) = v38;
    *((float *)a1 + 20) = v39;
    a1[14] = 3;
    *((_QWORD *)a1 + 1) = v41;
    *((_QWORD *)a1 + 2) = v40;
    *((_QWORD *)a1 + 3) = v42;
    v65 = vsubq_f32(v40[1], v64);
    v66 = (int8x8_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
    v65.i32[3] = 0;
    v67 = vsubq_f32(v42[1], v64);
    v68 = (int8x8_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
    v67.i32[3] = 0;
    *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v65.f32, v66, 4uLL);
    v69.i64[1] = v65.i64[0];
    *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)v67.f32, v68, 4uLL);
    v70.i64[1] = v67.i64[0];
    v71 = (int8x16_t)vsubq_f32(vmulq_f32(v70, v65), vmulq_f32(v69, v67));
    v69.i64[0] = vextq_s8(v71, v71, 4uLL).u64[0];
    v69.i64[1] = v71.u32[0];
    v72 = (int8x16_t)vmulq_f32(v69, v69);
    *(float *)v72.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).f32[0]);
    a1[10] = v72.i32[0];
    v73 = vsubq_f32(v42[1], v64);
    v67.i64[0] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v73.i32[3] = 0;
    v74 = vsubq_f32(v41[1], v64);
    v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
    v74.i32[3] = 0;
    *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v73.f32, *(int8x8_t *)v67.f32, 4uLL);
    v67.i64[1] = v73.i64[0];
    *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
    v76.i64[1] = v74.i64[0];
    v77 = (int8x16_t)vsubq_f32(vmulq_f32(v76, v73), vmulq_f32(v67, v74));
    v67.i64[0] = vextq_s8(v77, v77, 4uLL).u64[0];
    v67.i64[1] = v77.u32[0];
    v78 = (int8x16_t)vmulq_f32(v67, v67);
    *(float *)v78.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)).f32[0]);
    a1[11] = v78.i32[0];
    v79 = vsubq_f32(v41[1], v64);
    v67.i64[0] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
    v79.i32[3] = 0;
    v80 = vsubq_f32(v40[1], v64);
    v74.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
    v80.i32[3] = 0;
    *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v67.f32, 4uLL);
    v67.i64[1] = v79.i64[0];
    *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v74.f32, 4uLL);
    v74.i64[1] = v80.i64[0];
    v81 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v79), vmulq_f32(v67, v80));
    v79.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
    v79.i64[1] = v81.u32[0];
    v82 = (int8x16_t)vmulq_f32(v79, v79);
    *(float *)v82.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0]);
    v79.f32[0] = (float)(*(float *)v72.i32 + *(float *)v78.i32) + *(float *)v82.i32;
    *((float *)a1 + 10) = *(float *)v72.i32 / v79.f32[0];
    *((float *)a1 + 11) = *(float *)v78.i32 / v79.f32[0];
    *((float *)a1 + 12) = *(float *)v82.i32 / v79.f32[0];
    return *a1;
  }
  else
  {
LABEL_49:
    *a1 = 8;
    v57.i64[0] = 0x8000000080000000;
    v57.i64[1] = 0x8000000080000000;
    v58 = (float32x4_t)veorq_s8(*a3, v57);
    v59 = (int8x16_t)vmulq_f32(v58, v58);
    v60 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)).f32[0]);
    if (v60 <= 0.0)
    {
      v61 = (float32x4_t)xmmword_1B2244DB0;
    }
    else
    {
      v61 = vmulq_n_f32(v58, 1.0 / v60);
      v61.i32[3] = 0;
    }
    *((float32x4_t *)a1 + 4) = v61;
    a1[20] = 0;
    a1[14] = 1;
    *((_QWORD *)a1 + 1) = *v5;
    a1[10] = 1065353216;
    return 8;
  }
}

float32x2_t sub_1B21EA554(float32x4_t *a1, float32x4_t *a2, uint64_t a3, _DWORD *a4)
{
  float32x4_t v4;
  int8x16_t v5;
  float32x2_t v6;
  float v7;
  float32x2_t result;
  int8x16_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v4 = vsubq_f32(*a2, *a1);
  v4.i32[3] = 0;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  v6 = vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8);
  result = (float32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
  v7 = vadd_f32(v6, result).f32[0];
  result.i32[0] = -1.0;
  if (v7 > 0.0)
  {
    v9 = (int8x16_t)vmulq_f32(*a1, v4);
    v10 = (float)-vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0]/ v7;
    if (v10 >= 1.0)
    {
      *(_QWORD *)a3 = 0x3F80000000000000;
      *a4 = 2;
      v12 = *a2;
    }
    else if (v10 <= 0.0)
    {
      *(_QWORD *)a3 = 1065353216;
      *a4 = 1;
      v12 = *a1;
    }
    else
    {
      *(float *)a3 = 1.0 - v10;
      *(float *)(a3 + 4) = v10;
      *a4 = 3;
      v11 = vmulq_n_f32(v4, v10);
      v11.i32[3] = 0;
      v12 = vaddq_f32(*a1, v11);
    }
    v13 = (int8x16_t)vmulq_f32(v12, v12);
    return vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  }
  return result;
}

float32_t sub_1B21EA618(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, _DWORD *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  int8x16_t v8;
  int8x8_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  float32x4_t v16;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  float v29;
  int v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x8_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x2_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int v51;
  uint64_t v52;
  _OWORD v53[3];
  _QWORD v54[5];

  v54[3] = *MEMORY[0x1E0C80C00];
  v54[0] = a1;
  v54[1] = a2;
  v54[2] = a3;
  v5 = *a1;
  v6 = vsubq_f32(*a1, *a2);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  v16 = *a3;
  v8 = (int8x16_t)vsubq_f32(*a2, *a3);
  v9 = (int8x8_t)vextq_s8(v8, v8, 8uLL).u64[0];
  v10 = (float32x4_t)v8;
  v10.i32[3] = 0;
  v53[0] = v6;
  v53[1] = v10;
  v11 = vsubq_f32(v16, v5);
  v11.i32[3] = 0;
  *(int8x8_t *)v5.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v5.i64[1] = v6.i64[0];
  v46 = v10;
  v47 = v11;
  v53[2] = v11;
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v10.f32, v9, 4uLL);
  v11.i64[1] = v10.i64[0];
  v45 = v11;
  v12 = (int8x16_t)vsubq_f32(vmulq_f32(v11, v6), vmulq_f32(v5, v10));
  v13.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v13.i64[1] = v12.u32[0];
  v14 = (int8x16_t)vmulq_f32(v13, v13);
  v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v16.i32[0] = -1.0;
  if (v15.f32[0] > 0.0)
  {
    v43 = v15;
    v21 = 0;
    v52 = 0;
    v51 = 0;
    v22.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
    v22.i64[1] = v13.i64[0];
    v16.i32[0] = -1.0;
    v48 = v22;
    v49 = v13;
    do
    {
      v23 = (float32x4_t *)v54[v21];
      v24 = (float32x4_t)v53[v21];
      *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), 4uLL);
      v25.i64[1] = *(_QWORD *)&v53[v21];
      v26 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v24), vmulq_f32(v25, v13));
      v25.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
      v25.i64[1] = v26.u32[0];
      v27 = (int8x16_t)vmulq_f32(*v23, v25);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0] > 0.0)
      {
        v28 = dword_1B22CA4F4[v21];
        v50 = v16;
        LODWORD(v29) = sub_1B21EA554(v23, (float32x4_t *)v54[v28], (uint64_t)&v52, &v51).u32[0];
        v22 = v48;
        v13 = v49;
        v16 = v50;
        if (v50.f32[0] < 0.0 || v29 < v50.f32[0])
        {
          *a5 = ((v51 << 31 >> 31) & (1 << v21)) + ((1 << v28) & (v51 << 30 >> 31));
          v30 = HIDWORD(v52);
          *(_DWORD *)(a4 + 4 * v21) = v52;
          *(_DWORD *)(a4 + 4 * v28) = v30;
          *(_DWORD *)(a4 + 4 * dword_1B22CA4F4[v28]) = 0;
          v16.f32[0] = v29;
        }
      }
      ++v21;
    }
    while (v21 != 3);
    if (v16.f32[0] < 0.0)
    {
      v31 = (int8x16_t)vmulq_f32(*a1, v13);
      v32 = vmulq_n_f32(v13, vdiv_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), v43).f32[0]);
      v32.i32[3] = 0;
      *(float *)v31.i32 = sqrtf(v43.f32[0]);
      v33 = (int8x16_t)vmulq_f32(v32, v32);
      *a5 = 7;
      v34 = vsubq_f32(*a2, v32);
      v35 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      v34.i32[3] = 0;
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v34.f32, v35, 4uLL);
      v36.i64[1] = v34.i64[0];
      v16 = vsubq_f32(vmulq_f32(v36, v46), vmulq_f32(v45, v34));
      v36.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
      v36.i64[1] = v16.u32[0];
      v37 = (int8x16_t)vmulq_f32(v36, v36);
      *(float *)v37.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0])/ *(float *)v31.i32;
      *(_DWORD *)a4 = v37.i32[0];
      v38 = vsubq_f32(*a3, v32);
      v36.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v38.i32[3] = 0;
      v39.i64[0] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 4uLL).u64[0];
      v39.i64[1] = v47.i64[0];
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v38.f32, *(int8x8_t *)v36.f32, 4uLL);
      v36.i64[1] = v38.i64[0];
      v40 = (int8x16_t)vsubq_f32(vmulq_f32(v36, v47), vmulq_f32(v39, v38));
      v36.i64[0] = vextq_s8(v40, v40, 4uLL).u64[0];
      v36.i64[1] = v40.u32[0];
      v16.i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)).u32[0];
      v41 = (int8x16_t)vmulq_f32(v36, v36);
      *(float *)v31.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).f32[0])/ *(float *)v31.i32;
      *(_DWORD *)(a4 + 4) = v31.i32[0];
      *(float *)(a4 + 8) = 1.0 - (float)(*(float *)v37.i32 + *(float *)v31.i32);
    }
  }
  return v16.f32[0];
}

float sub_1B21EA924(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, _DWORD *a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v22;
  float v23;
  float32x4_t v24;
  int8x8_t v25;
  float32x4_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float v44;
  int v45;
  float v46;
  float v47;
  int v51;
  uint64_t v52;
  int v53;
  _OWORD v54[3];
  _QWORD v55[6];

  v55[4] = *MEMORY[0x1E0C80C00];
  v55[0] = a1;
  v55[1] = a2;
  v55[2] = a3;
  v55[3] = a4;
  v6 = *a1;
  v7 = *a4;
  _Q4 = vsubq_f32(*a1, *a4);
  _Q4.i32[3] = 0;
  v9 = *a2;
  v10 = vsubq_f32(*a2, *a4);
  v10.i32[3] = 0;
  v54[0] = _Q4;
  v54[1] = v10;
  v11 = *a3;
  _Q3 = vsubq_f32(*a3, v7);
  _Q3.i32[3] = 0;
  v54[2] = _Q3;
  _S7 = vmuls_lane_f32(-_Q4.f32[0], v10, 2);
  __asm { FMLA            S9, S7, V3.S[1] }
  _S6 = (float)-_Q4.f32[1] * v10.f32[0];
  __asm { FMLA            S9, S6, V3.S[2] }
  _Q4.f32[0] = vmuls_lane_f32(_Q4.f32[0], *(float32x2_t *)v10.f32, 1);
  __asm { FMLA            S9, S4, V3.S[2] }
  v22 = vmlas_n_f32(_S9, vmuls_lane_f32(-_Q4.f32[2], *(float32x2_t *)v10.f32, 1), _Q3.f32[0]);
  v23 = -1.0;
  if (v22 != 0.0)
  {
    v24 = vsubq_f32(v9, v11);
    v25 = (int8x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v24.i32[3] = 0;
    v26 = vsubq_f32(v6, v9);
    v27 = (int8x8_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    v26.i32[3] = 0;
    *(int8x8_t *)v28.f32 = vext_s8(*(int8x8_t *)v24.f32, v25, 4uLL);
    v28.i64[1] = v24.i64[0];
    *(int8x8_t *)v29.f32 = vext_s8(*(int8x8_t *)v26.f32, v27, 4uLL);
    v29.i64[1] = v26.i64[0];
    v30 = (int8x16_t)vsubq_f32(vmulq_f32(v29, v24), vmulq_f32(v28, v26));
    v24.i64[0] = vextq_s8(v30, v30, 4uLL).u64[0];
    v24.i64[1] = v30.u32[0];
    v31 = (int8x16_t)vmulq_f32(v6, v24);
    if ((float)(v22
               * vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).f32[0]) <= 0.0)
    {
      v36 = 0;
      v53 = 0;
      v52 = 0;
      v51 = 0;
      do
      {
        v37 = dword_1B22CA500[v36];
        v38 = (float32x4_t)v54[v36];
        v39 = (float32x4_t)v54[v37];
        *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
        v40.i64[1] = *(_QWORD *)&v54[v36];
        *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
        v41.i64[1] = *(_QWORD *)&v54[v37];
        v42 = (int8x16_t)vsubq_f32(vmulq_f32(v38, v41), vmulq_f32(v39, v40));
        v39.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
        v39.i64[1] = v42.u32[0];
        v43 = (int8x16_t)vmulq_f32(*a4, v39);
        if ((float)(v22
                   * vadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)).f32[0]) > 0.0)
        {
          v44 = sub_1B21EA618((float32x4_t *)v55[v36], (float32x4_t *)v55[v37], a4, (uint64_t)&v52, &v51);
          if (v23 < 0.0 || v44 < v23)
          {
            *a6 = ((1 << v37) & (v51 << 30 >> 31)) + ((2 * v51) & 8) + ((v51 << 31 >> 31) & (1 << v36));
            v45 = HIDWORD(v52);
            *(_DWORD *)(a5 + 4 * v36) = v52;
            *(_DWORD *)(a5 + 4 * v37) = v45;
            *(_DWORD *)(a5 + 4 * dword_1B22CA500[v37]) = 0;
            *(_DWORD *)(a5 + 12) = v53;
            v23 = v44;
          }
        }
        ++v36;
      }
      while (v36 != 3);
      if (v23 < 0.0)
      {
        *a6 = 15;
        *(float *)a5 = sub_1B21EAD5C(a3->f32, a2->f32, a4->f32) / v22;
        *(float *)(a5 + 4) = sub_1B21EAD5C(a1->f32, a3->f32, a4->f32) / v22;
        v46 = sub_1B21EAD5C(a2->f32, a1->f32, a4->f32) / v22;
        v47 = 1.0 - (float)(v46 + (float)(*(float *)a5 + *(float *)(a5 + 4)));
        *(float *)(a5 + 8) = v46;
        *(float *)(a5 + 12) = v47;
        return 0.0;
      }
    }
  }
  return v23;
}

__n128 sub_1B21EAC14(float32x4_t *a1, float32x4_t *a2, uint64_t a3)
{
  int8x16_t v5;
  float32x4_t v6;
  void (*v7)(float32x4_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *);
  uint64_t v11;
  _QWORD *v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  __n128 result;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;

  v5 = (int8x16_t)vmulq_f32(*a2, *a2);
  v6 = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0]));
  v6.i32[3] = 0;
  *(float32x4_t *)a3 = v6;
  v7 = (void (*)(float32x4_t *__return_ptr, _QWORD *, uint64_t))a1[8].i64[0];
  v8 = a1[8].i64[1];
  v9 = (_QWORD *)(a1->i64[0] + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, uint64_t))(*v9 + v7);
  v7(&v22, v9, a3);
  v10 = (void (*)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))a1[8].i64[0];
  v11 = a1[8].i64[1];
  v12 = (_QWORD *)(a1->i64[1] + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))(*v12 + v10);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v14 = (float32x4_t)veorq_s8(*(int8x16_t *)a3, v13);
  v15 = (int8x16_t)vmulq_f32(a1[1], v14);
  v16 = (int8x16_t)vmulq_f32(a1[2], v14);
  v17 = (int8x16_t)vmulq_f32(a1[3], v14);
  v17.i32[3] = 0;
  *(float32x2_t *)v15.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  v15.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v23 = v15;
  v10(&v24, v12, &v23);
  v18 = vmulq_f32(a1[4], v24);
  v19 = (int8x16_t)vmulq_f32(v24, a1[5]);
  v20 = (int8x16_t)vmulq_f32(v24, a1[6]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  result = (__n128)vsubq_f32(v22, vaddq_f32(v18, a1[7]));
  result.n128_u32[3] = 0;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

float sub_1B21EAD5C(float *a1, float *a2, float *a3)
{
  return (float)((float)((float)((float)((float)((float)(a1[2] * *a2) * a3[1]) + (float)((float)(a1[1] * a2[2]) * *a3))
                               + (float)((float)-(float)(*a1 * a2[2]) * a3[1]))
                       + (float)((float)-(float)(a1[1] * *a2) * a3[2]))
               + (float)((float)(*a1 * a2[1]) * a3[2]))
       + (float)((float)-(float)(a1[2] * a2[1]) * *a3);
}

uint64_t sub_1B21EADA8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = 0;
  *(_DWORD *)result = 9;
  *(_DWORD *)(result + 14432) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  v2 = *(_DWORD *)(result + 14464);
  v3 = 12288;
  v4 = *(_QWORD *)(result + 14456);
  do
  {
    v5 = result + v3;
    v6 = result + v3 + 2048;
    *(_QWORD *)(v5 + 2120) = 0;
    *(_QWORD *)(v5 + 2128) = v4;
    if (v4)
      *(_QWORD *)(v4 + 72) = v6;
    v4 = result + 96 * (127 - v1) + 2144;
    *(_QWORD *)(result + 14456) = v6;
    ++v1;
    v3 -= 96;
  }
  while (v3);
  *(_DWORD *)(result + 14464) = v2 + 128;
  return result;
}

uint64_t sub_1B21EAE14(float32x4_t *a1)
{
  float32x4_t **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x8_t v46;
  float32x4_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  unsigned int v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t result;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v71;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;

  v1 = (float32x4_t **)a1[28].i64[1];
  switch(*((_DWORD *)v1 + 12))
  {
    case 1:
      v3 = 0;
      LODWORD(v4) = a1[28].i32[0] - 1;
      while (1)
      {
        v87 = 0uLL;
        v87.i32[v3] = 1065353216;
        v5 = a1[28].i64[1];
        v6 = *(unsigned int *)(v5 + 48);
        *(_DWORD *)(v5 + 4 * v6 + 32) = 0;
        a1[28].i32[0] = v4;
        v7 = a1[26].i64[v4];
        *(_QWORD *)(v5 + 8 * v6) = v7;
        *(_DWORD *)(v5 + 48) = v6 + 1;
        v8 = sub_1B21EAC14(a1, (float32x4_t *)&v87, v7);
        if ((sub_1B21EAE14(a1, v8) & 1) != 0)
          break;
        v9 = a1[28].i64[1];
        v10 = *(_DWORD *)(v9 + 48) - 1;
        *(_DWORD *)(v9 + 48) = v10;
        v11 = *(_QWORD *)(v9 + 8 * v10);
        v12 = a1[28].u32[0];
        a1[26].i64[v12] = v11;
        v13 = a1[28].i64[1];
        v14.i64[0] = 0x8000000080000000;
        v14.i64[1] = 0x8000000080000000;
        v86 = veorq_s8(v87, v14);
        v15 = *(unsigned int *)(v13 + 48);
        *(_DWORD *)(v13 + 4 * v15 + 32) = 0;
        a1[28].i32[0] = v12;
        *(_QWORD *)(v13 + 8 * v15) = v11;
        *(_DWORD *)(v13 + 48) = v15 + 1;
        v16 = sub_1B21EAC14(a1, (float32x4_t *)&v86, v11);
        if ((sub_1B21EAE14(a1, v16) & 1) != 0)
          break;
        v17 = a1[28].i64[1];
        v18 = *(_DWORD *)(v17 + 48) - 1;
        *(_DWORD *)(v17 + 48) = v18;
        v19 = *(_QWORD *)(v17 + 8 * v18);
        v4 = a1[28].u32[0];
        a1[28].i32[0] = v4 + 1;
        a1[26].i64[v4] = v19;
        if (++v3 == 3)
          return 0;
      }
      return 1;
    case 2:
      v20 = 0;
      v22 = vsubq_f32(v1[1][1], (*v1)[1]);
      v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
      v22.i32[3] = 0;
      *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v21, 4uLL);
      v23.i64[1] = v22.i64[0];
      v83 = v23;
      v84 = v22;
      break;
    case 3:
      v44 = (*v1)[1];
      v45 = vsubq_f32(v1[1][1], v44);
      v46 = (int8x8_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
      v45.i32[3] = 0;
      v47 = vsubq_f32(v1[2][1], v44);
      v48 = (int8x8_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
      v47.i32[3] = 0;
      *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v45.f32, v46, 4uLL);
      v49.i64[1] = v45.i64[0];
      *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v47.f32, v48, 4uLL);
      v50.i64[1] = v47.i64[0];
      v51 = (int8x16_t)vsubq_f32(vmulq_f32(v50, v45), vmulq_f32(v49, v47));
      v47.i64[0] = vextq_s8(v51, v51, 4uLL).u64[0];
      v47.i64[1] = v51.u32[0];
      v87 = (int8x16_t)v47;
      v52 = (int8x16_t)vmulq_f32(v47, v47);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0] <= 0.0)return 0;
      *(float32x4_t **)((char *)v1 + 44) = (float32x4_t *)0x400000000;
      v53 = a1[28].i32[0] - 1;
      a1[28].i32[0] = v53;
      v54 = a1[26].i64[v53];
      v1[3] = (float32x4_t *)v54;
      v55 = sub_1B21EAC14(a1, (float32x4_t *)&v87, v54);
      if ((sub_1B21EAE14(a1, v55) & 1) != 0)
        return 1;
      v56 = a1[28].i64[1];
      v57 = *(_DWORD *)(v56 + 48) - 1;
      *(_DWORD *)(v56 + 48) = v57;
      v58 = *(_QWORD *)(v56 + 8 * v57);
      v59 = a1[28].u32[0];
      a1[26].i64[v59] = v58;
      v60 = a1[28].i64[1];
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
      v86 = veorq_s8(v87, v61);
      v62 = *(unsigned int *)(v60 + 48);
      *(_DWORD *)(v60 + 4 * v62 + 32) = 0;
      a1[28].i32[0] = v59;
      *(_QWORD *)(v60 + 8 * v62) = v58;
      *(_DWORD *)(v60 + 48) = v62 + 1;
      v63 = sub_1B21EAC14(a1, (float32x4_t *)&v86, v58);
      if ((sub_1B21EAE14(a1, v63) & 1) != 0)
        return 1;
      v65 = a1[28].i64[1];
      v66 = *(_DWORD *)(v65 + 48) - 1;
      *(_DWORD *)(v65 + 48) = v66;
      v67 = *(_QWORD *)(v65 + 8 * v66);
      v68 = a1[28].u32[0];
      a1[28].i32[0] = v68 + 1;
      a1[26].i64[v68] = v67;
      return 0;
    case 4:
      v69 = v1[3][1];
      _Q0 = vsubq_f32((*v1)[1], v69);
      v71 = vsubq_f32(v1[1][1], v69);
      _Q1 = vsubq_f32(v1[2][1], v69);
      _S4 = vmuls_lane_f32(-_Q0.f32[0], v71, 2);
      __asm { FMLA            S6, S4, V1.S[1] }
      _S3 = (float)-_Q0.f32[1] * v71.f32[0];
      __asm { FMLA            S6, S3, V1.S[2] }
      _Q0.f32[0] = vmuls_lane_f32(_Q0.f32[0], *(float32x2_t *)v71.f32, 1);
      __asm { FMLA            S6, S0, V1.S[2] }
      v82 = vmlas_n_f32(_S6, vmuls_lane_f32(-_Q0.f32[2], *(float32x2_t *)v71.f32, 1), _Q1.f32[0]);
      result = 1;
      if (v82 >= 0.0 && v82 <= 0.0)
        return 0;
      return result;
    default:
      return 0;
  }
  do
  {
    v87 = 0uLL;
    v87.i32[v20] = 1065353216;
    *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), 4uLL);
    v24.i64[1] = v87.i64[0];
    v25 = (int8x16_t)vsubq_f32(vmulq_f32(v24, v22), vmulq_f32(v23, (float32x4_t)v87));
    v24.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
    v24.i64[1] = v25.u32[0];
    v86 = (int8x16_t)v24;
    v26 = (int8x16_t)vmulq_f32(v24, v24);
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).f32[0] > 0.0)
    {
      v27 = a1[28].i64[1];
      v28 = *(unsigned int *)(v27 + 48);
      *(_DWORD *)(v27 + 4 * v28 + 32) = 0;
      v29 = a1[28].i32[0] - 1;
      a1[28].i32[0] = v29;
      v30 = a1[26].i64[v29];
      *(_QWORD *)(v27 + 8 * v28) = v30;
      *(_DWORD *)(v27 + 48) = v28 + 1;
      v31 = sub_1B21EAC14(a1, (float32x4_t *)&v86, v30);
      if ((sub_1B21EAE14(a1, v31) & 1) != 0)
        return 1;
      v32 = a1[28].i64[1];
      v33 = *(_DWORD *)(v32 + 48) - 1;
      *(_DWORD *)(v32 + 48) = v33;
      v34 = *(_QWORD *)(v32 + 8 * v33);
      v35 = a1[28].u32[0];
      a1[26].i64[v35] = v34;
      v36 = a1[28].i64[1];
      v37.i64[0] = 0x8000000080000000;
      v37.i64[1] = 0x8000000080000000;
      v85 = veorq_s8(v86, v37);
      v38 = *(unsigned int *)(v36 + 48);
      *(_DWORD *)(v36 + 4 * v38 + 32) = 0;
      a1[28].i32[0] = v35;
      *(_QWORD *)(v36 + 8 * v38) = v34;
      *(_DWORD *)(v36 + 48) = v38 + 1;
      v39 = sub_1B21EAC14(a1, (float32x4_t *)&v85, v34);
      if ((sub_1B21EAE14(a1, v39) & 1) != 0)
        return 1;
      v40 = a1[28].i64[1];
      v41 = *(_DWORD *)(v40 + 48) - 1;
      *(_DWORD *)(v40 + 48) = v41;
      v42 = *(_QWORD *)(v40 + 8 * v41);
      v43 = a1[28].u32[0];
      a1[28].i32[0] = v43 + 1;
      a1[26].i64[v43] = v42;
      v23 = v83;
      v22 = v84;
    }
    ++v20;
  }
  while (v20 != 3);
  return 0;
}

float32x4_t *sub_1B21EB290(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, char a5)
{
  float32x4_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x8_t v16;
  float32x4_t v17;
  int8x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  int8x16_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(float32x4_t **)(a1 + 14456);
  if (!v6)
  {
    *(_DWORD *)a1 = 5;
    return v6;
  }
  v11 = v6[5].i64[0];
  if (v11)
    *(_QWORD *)(v11 + 72) = v6[4].i64[1];
  v12 = v6[4].i64[1];
  if (v12)
    *(_QWORD *)(v12 + 80) = v6[5].i64[0];
  if (*(float32x4_t **)(a1 + 14456) == v6)
    *(_QWORD *)(a1 + 14456) = v6[5].i64[0];
  --*(_DWORD *)(a1 + 14464);
  v6[4].i64[1] = 0;
  v6[5].i64[0] = *(_QWORD *)(a1 + 14440);
  v13 = *(_QWORD *)(a1 + 14440);
  if (v13)
    *(_QWORD *)(v13 + 72) = v6;
  *(_QWORD *)(a1 + 14440) = v6;
  ++*(_DWORD *)(a1 + 14448);
  v6[5].i8[11] = 0;
  v6[1].i64[1] = (uint64_t)a2;
  v6[2].i64[0] = (uint64_t)a3;
  v6[2].i64[1] = (uint64_t)a4;
  v14 = a2[1];
  v15 = vsubq_f32(a3[1], v14);
  v16 = (int8x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v15.i32[3] = 0;
  v17 = vsubq_f32(a4[1], v14);
  v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)v15.f32, v16, 4uLL);
  v19.i64[1] = v15.i64[0];
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v20.i64[1] = v17.i64[0];
  v21 = (int8x16_t)vsubq_f32(vmulq_f32(v20, v15), vmulq_f32(v19, v17));
  v17.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
  v17.i64[1] = v21.u32[0];
  *v6 = v17;
  v22 = (int8x16_t)vmulq_f32(v17, v17);
  v23 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0]);
  if (v23 <= 0.0001)
  {
    v25 = 2;
    goto LABEL_20;
  }
  if (!sub_1B21EB6D0(a1, (int8x8_t *)v6, a2, a3, v6[1].f32)
    && !sub_1B21EB6D0(a1, (int8x8_t *)v6, a3, a4, v6[1].f32)
    && !sub_1B21EB6D0(a1, (int8x8_t *)v6, a4, a2, v6[1].f32))
  {
    v24 = (int8x16_t)vmulq_f32(a2[1], *v6);
    v6[1].f32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0]/ v23;
  }
  *v6 = vmulq_n_f32(*v6, 1.0 / v23);
  if ((a5 & 1) == 0 && v6[1].f32[0] < -0.00001)
  {
    v25 = 3;
LABEL_20:
    *(_DWORD *)a1 = v25;
    v26 = v6[5].i64[0];
    if (v26)
      *(_QWORD *)(v26 + 72) = v6[4].i64[1];
    v27 = v6[4].i64[1];
    if (v27)
      *(_QWORD *)(v27 + 80) = v6[5].i64[0];
    if (*(float32x4_t **)(a1 + 14440) == v6)
      *(_QWORD *)(a1 + 14440) = v6[5].i64[0];
    --*(_DWORD *)(a1 + 14448);
    v6[4].i64[1] = 0;
    v6[5].i64[0] = *(_QWORD *)(a1 + 14456);
    v28 = *(_QWORD *)(a1 + 14456);
    if (v28)
      *(_QWORD *)(v28 + 72) = v6;
    *(_QWORD *)(a1 + 14456) = v6;
    ++*(_DWORD *)(a1 + 14464);
    return 0;
  }
  return v6;
}

uint64_t sub_1B21EB4FC(uint64_t a1, int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, uint64_t *a6)
{
  uint64_t result;
  char v8;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  if (a4[5].u8[11] == a2)
    return 0;
  v8 = a5;
  v11 = a5;
  v12 = (int8x16_t)vmulq_f32(*a4, a3[1]);
  if ((float)(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]- a4[1].f32[0]) < -0.00001)
  {
    result = (uint64_t)sub_1B21EB290(a1, (float32x4_t *)a4[1].i64[dword_1B22CA50C[a5] + 1], (float32x4_t *)a4[1].i64[a5 + 1], a3, 0);
    if (!result)
      return result;
    *(_BYTE *)(result + 88) = v8;
    *(_QWORD *)(result + 48) = a4;
    a4[5].i8[v11 + 8] = 0;
    a4[3].i64[v11] = result;
    v13 = *a6;
    if (*a6)
    {
      *(_BYTE *)(v13 + 89) = 2;
      *(_QWORD *)(v13 + 56) = result;
      *(_BYTE *)(result + 90) = 1;
      *(_QWORD *)(result + 64) = v13;
    }
    else
    {
      a6[1] = result;
    }
    *a6 = result;
    v17 = a6 + 2;
    goto LABEL_20;
  }
  a4[5].i8[11] = a2;
  result = sub_1B21EB4FC(a1);
  if ((_DWORD)result)
  {
    result = sub_1B21EB4FC(a1);
    if ((_DWORD)result)
    {
      v14 = a4[5].i64[0];
      if (v14)
        *(_QWORD *)(v14 + 72) = a4[4].i64[1];
      v15 = a4[4].i64[1];
      if (v15)
        *(_QWORD *)(v15 + 80) = a4[5].i64[0];
      if (*(float32x4_t **)(a1 + 14440) == a4)
        *(_QWORD *)(a1 + 14440) = a4[5].i64[0];
      --*(_DWORD *)(a1 + 14448);
      a4[4].i64[1] = 0;
      a4[5].i64[0] = *(_QWORD *)(a1 + 14456);
      v16 = *(_QWORD *)(a1 + 14456);
      if (v16)
        *(_QWORD *)(v16 + 72) = a4;
      *(_QWORD *)(a1 + 14456) = a4;
      v17 = (_DWORD *)(a1 + 14464);
LABEL_20:
      ++*v17;
      return 1;
    }
  }
  return result;
}

BOOL sub_1B21EB6D0(uint64_t a1, int8x8_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;

  v5 = a4[1];
  v6 = a3[1];
  v8 = vsubq_f32(v5, v6);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v8.f32, v7, 4uLL);
  v9.i64[1] = v8.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v10.u32[2] = *a2;
  v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v8), vmulq_f32(*(float32x4_t *)a2->i8, v9));
  v9.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v9.i64[1] = v11.u32[0];
  v12 = (int8x16_t)vmulq_f32(v6, v9);
  v13 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0];
  if (v13 < 0.0)
  {
    v14 = (int8x16_t)vmulq_f32(v6, v8);
    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0] <= 0.0)
    {
      v16 = (int8x16_t)vmulq_f32(v5, v8);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8)).f32[0] >= 0.0)
      {
        v18 = (int8x16_t)vmulq_f32(v8, v8);
        v19 = (int8x16_t)vmulq_f32(v5, v6);
        *(float *)v19.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)).f32[0];
        v20 = (int8x16_t)vmulq_f32(v6, v6);
        v21 = (int8x16_t)vmulq_f32(v5, v5);
        v17 = fmaxf(vmlas_n_f32((float)-*(float *)v19.i32 * *(float *)v19.i32, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8)).f32[0], vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8)).f32[0])/ vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8)).f32[0], 0.0);
        goto LABEL_8;
      }
      v15 = (int8x16_t)vmulq_f32(v5, v5);
    }
    else
    {
      v15 = (int8x16_t)vmulq_f32(v6, v6);
    }
    LODWORD(v17) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).u32[0];
LABEL_8:
    *a5 = sqrtf(v17);
  }
  return v13 < 0.0;
}

uint64_t sub_1B21EB7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9)
{
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  float32x4_t v20;
  _BYTE v21[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v15 = vsubq_f32(a6[3], a5[3]);
  v15.i32[3] = 0;
  v20 = v15;
  sub_1B21E9CE0(a3, (uint64_t)a5);
  v17 = v16;
  if ((v16 & 1) != 0 || sub_1B21E93EC(a3, a5, a4, a6, &v20, (uint64_t)v21))
  {
    v18 = v23;
    *a8 = v22;
    *a9 = v18;
    *a7 = v24;
  }
  return v17;
}

void sub_1B21EB8DC()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21EB8F0(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v7;

  *(_QWORD *)a1 = &off_1E63CC820;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  v7 = a3[2];
  *(_DWORD *)(a1 + 64) = a2[2];
  *(_DWORD *)(a1 + 68) = v7;
  *(float *)(a1 + 72) = (*(float (**)(_DWORD *))(*(_QWORD *)a2 + 96))(a2);
  *(float *)(a1 + 76) = (*(float (**)(_DWORD *))(*(_QWORD *)a3 + 96))(a3);
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 100) = 0x100000001;
  return a1;
}

double sub_1B21EB980(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  double result;

  *(_QWORD *)a1 = &off_1E63CC820;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 68) = a5;
  *(float *)(a1 + 72) = a8;
  *(float *)(a1 + 76) = a9;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 100) = 0x100000001;
  return result;
}

void sub_1B21EB9C4(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float i;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x2_t v43;
  int v44;
  int8x16_t v45;
  float v46;
  int v47;
  int v48;
  int v49;
  float32x4_t v50;
  int8x16_t v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float v62;
  int8x16_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float v66;
  char v67;
  int v68;
  float32x4_t v69;
  int8x16_t v70;
  float v71;
  float32x4_t v72;
  int8x16_t v73;
  float v74;
  char v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  __n128 v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  _OWORD v102[3];
  float32x4_t v103;
  _OWORD v104[3];
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;

  v8 = 0;
  a1[5].i32[1] = 0;
  v108 = 0uLL;
  v92 = a2[1];
  v93 = *a2;
  v104[0] = *a2;
  v104[1] = v92;
  v10 = a2[2];
  v9 = a2[3];
  v89 = a2[5];
  v90 = a2[4];
  v102[0] = v90;
  v102[1] = v89;
  v12 = a2[6];
  v11 = a2[7];
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vmulq_f32(vaddq_f32(v9, v11), v13);
  v14.i32[3] = 0;
  v91 = v10;
  v104[2] = v10;
  v105 = vsubq_f32(v9, v14);
  v87 = v105;
  v88 = v12;
  v102[2] = v12;
  v103 = vsubq_f32(v11, v14);
  v85 = v14;
  v86 = v103;
  if ((*(_DWORD *)(a1[3].i64[0] + 8) - 17) <= 1)
    v8 = (*(_DWORD *)(a1[3].i64[1] + 8) - 17) < 2;
  a1[1] = (float32x4_t)xmmword_1B2244DD0;
  v15 = a1 + 1;
  v16 = a1[4].f32[2];
  v17 = a1[4].f32[3];
  ++dword_1EEFD59CC;
  v18 = 0.0;
  if (a1[5].i8[0])
    v17 = 0.0;
  else
    v18 = v16;
  a1[6].i32[0] = 0;
  a1[5].i64[1] = 0xFFFFFFFFLL;
  v83 = v18;
  v84 = v17;
  v19 = v18 + v17;
  sub_1B21EF418(a1[2].i64[1]);
  v21 = *v15;
  for (i = 1.0e18; ; i = v46)
  {
    v23.i64[0] = 0x8000000080000000;
    v23.i64[1] = 0x8000000080000000;
    v24 = (float32x4_t)veorq_s8((int8x16_t)v21, v23);
    v25 = *a2;
    v26 = a2[1];
    v25.i32[3] = 0;
    v26.i32[3] = 0;
    v27 = a2[2];
    v27.i32[3] = 0;
    v28 = vaddq_f32(vaddq_f32(vmulq_n_f32(v25, v24.f32[0]), vmulq_lane_f32(v26, *(float32x2_t *)v24.f32, 1)), vmulq_laneq_f32(v27, v24, 2));
    v29 = a2[4];
    v30 = a2[5];
    v29.i32[3] = 0;
    v30.i32[3] = 0;
    v31 = a2[6];
    v31.i32[3] = 0;
    v106 = vaddq_f32(vaddq_f32(vmulq_n_f32(v29, v21.f32[0]), vmulq_lane_f32(v30, *(float32x2_t *)v21.f32, 1)), vmulq_laneq_f32(v31, v21, 2));
    v107 = v28;
    sub_1B21E25DC(a1[3].i64[0], (int8x16_t *)&v107, &v101, v20);
    sub_1B21E25DC(a1[3].i64[1], (int8x16_t *)&v106, &v100, v32);
    v33 = vmulq_f32(v93, v101);
    v34 = (int8x16_t)vmulq_f32(v101, v92);
    v35 = (int8x16_t)vmulq_f32(v101, v91);
    v35.i32[3] = 0;
    *(float32x2_t *)v33.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
    *(float32x2_t *)&v33.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
    v36 = vaddq_f32(v33, v87);
    v37 = vmulq_f32(v90, v100);
    v38 = (int8x16_t)vmulq_f32(v100, v89);
    v39 = (int8x16_t)vmulq_f32(v100, v88);
    v39.i32[3] = 0;
    *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
    *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
    v40 = vaddq_f32(v37, v86);
    v98 = (__n128)v40;
    v99 = v36;
    if (v8)
    {
      v99.i32[2] = 0;
      v98.n128_u32[2] = 0;
      v40 = (float32x4_t)v98;
      v36 = v99;
    }
    v41 = vsubq_f32(v36, v40);
    v41.i32[3] = 0;
    v97 = v41;
    v42 = (int8x16_t)vmulq_f32(*v15, v41);
    v43 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    if (v43.f32[0] > 0.0 && vmul_f32(v43, v43).f32[0] > (float)(i * a2[8].f32[0]))
    {
      v48 = 10;
      goto LABEL_29;
    }
    v94 = v43.f32[0];
    if ((sub_1B21EFF60((float *)a1[2].i64[1], &v97) & 1) != 0)
    {
      v48 = 1;
      goto LABEL_29;
    }
    if ((float)(i - v94) <= (float)(i * 0.000001))
      break;
    sub_1B21EF454((int *)a1[2].i64[1], &v97, &v99, &v98);
    sub_1B21EFF34((__n128 *)a1[2].i64[1], (__n128 *)&v96);
    if (!v44)
    {
      v48 = 3;
      goto LABEL_29;
    }
    v21 = v96;
    v45 = (int8x16_t)vmulq_f32(v21, v21);
    v46 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0];
    if (v46 < 0.000001)
    {
      *v15 = v96;
      v48 = 6;
      goto LABEL_29;
    }
    if ((float)(i - v46) <= (float)(i * 0.00000011921))
    {
      v48 = 12;
      i = v46;
      goto LABEL_29;
    }
    a1[1] = v96;
    v47 = a1[5].i32[3];
    a1[5].i32[3] = v47 + 1;
    if (v47 > 1000)
    {
      v49 = 0;
      goto LABEL_34;
    }
    if (*(_DWORD *)a1[2].i64[1] == 4)
    {
      v49 = 0;
      a1[6].i32[0] = 13;
      goto LABEL_34;
    }
  }
  if ((float)(i - v94) <= 0.0)
    v48 = 2;
  else
    v48 = 11;
LABEL_29:
  a1[6].i32[0] = v48;
  sub_1B21F0004(a1[2].i64[1], &v107, (__n128 *)&v106);
  v50 = a1[1];
  v108 = v50;
  v51 = (int8x16_t)vmulq_f32(v50, v50);
  v52 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0];
  if (v52 < 0.0001)
    a1[6].i32[0] = 5;
  if (v52 > 1.4211e-14)
  {
    v53 = 1.0 / sqrtf(v52);
    v54 = sqrtf(i);
    v55 = vmulq_n_f32(v50, v83 / v54);
    v55.i32[3] = 0;
    v107 = vsubq_f32(v107, v55);
    v108 = vmulq_n_f32(v50, v53);
    v56 = vmulq_n_f32(v50, v84 / v54);
    v56.i32[3] = 0;
    v106 = vaddq_f32(v106, v56);
    v57 = (float)(1.0 / v53) - v19;
    v49 = 1;
    a1[5].i32[2] = 1;
    goto LABEL_35;
  }
  v49 = 0;
  a1[5].i32[2] = 2;
LABEL_34:
  v57 = 0.0;
LABEL_35:
  LODWORD(v58) = a1[6].i32[1];
  if ((_DWORD)v58)
  {
    v58 = a1[2].i64[0];
    if (v58)
    {
      LODWORD(v58) = a1[6].i32[0];
      if ((_DWORD)v58)
        LODWORD(v58) = (float)(v19 + v57) < 0.01;
    }
  }
  if ((!v49 || (_DWORD)v58) && (v59 = a1[2].i64[0]) != 0)
  {
    ++dword_1EEFD59C8;
    a1[1].i64[0] = 0;
    a1[1].i64[1] = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, _OWORD *, float32x4_t *, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)v59 + 16))(v59, a1[2].i64[1], a1[3].i64[0], a1[3].i64[1], v104, v102, a1 + 1, &v101, &v100, a4))
    {
      v60 = vsubq_f32(v100, v101);
      v60.i32[3] = 0;
      v61 = (int8x16_t)vmulq_f32(v60, v60);
      v62 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)).f32[0];
      if (v62 <= 1.4211e-14)
      {
        v60 = *v15;
        v63 = (int8x16_t)vmulq_f32(v60, v60);
        LODWORD(v62) = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).u32[0];
      }
      if (v62 <= 1.4211e-14)
      {
        v68 = 9;
        goto LABEL_60;
      }
      v64 = vsubq_f32(v101, v100);
      v64.i32[3] = 0;
      v65 = (int8x16_t)vmulq_f32(v64, v64);
      v66 = -sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8)).f32[0]);
      if (v57 <= v66)
        v67 = v49;
      else
        v67 = 0;
      if ((v67 & 1) != 0)
      {
        v68 = 8;
LABEL_60:
        a1[5].i32[2] = v68;
LABEL_61:
        if ((v49 & 1) == 0)
          return;
        goto LABEL_65;
      }
      v106 = v100;
      v107 = v101;
      v108 = vmulq_n_f32(v60, 1.0 / sqrtf(v62));
      a1[5].i32[2] = 3;
      v57 = v66;
    }
    else
    {
      v69 = *v15;
      v70 = (int8x16_t)vmulq_f32(v69, v69);
      v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
      if (v71 <= 0.0)
        goto LABEL_61;
      v72 = vsubq_f32(v101, v100);
      v72.i32[3] = 0;
      v73 = (int8x16_t)vmulq_f32(v72, v72);
      v74 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0])- v19;
      if (v74 >= v57)
        v75 = v49;
      else
        v75 = 0;
      if ((v75 & 1) != 0)
      {
        a1[5].i32[2] = 5;
      }
      else
      {
        v76 = vmulq_n_f32(v69, v83);
        v76.i32[3] = 0;
        v77 = vmulq_n_f32(v69, v84);
        v77.i32[3] = 0;
        v106 = vaddq_f32(v100, v77);
        v107 = vsubq_f32(v101, v76);
        v108 = vmulq_n_f32(v69, 1.0 / sqrtf(v71));
        a1[5].i32[2] = 6;
        v57 = v74;
      }
    }
  }
  else if (!v49)
  {
    return;
  }
LABEL_65:
  if (v57 < 0.0 || (float)(v57 * v57) < a2[8].f32[0])
  {
    if (a1[6].i32[2])
    {
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1[3].i64[0] + 16))(a1[3].i64[0], v104, &v101, &v100);
      v78.i64[0] = 0x3F0000003F000000;
      v78.i64[1] = 0x3F0000003F000000;
      v95 = vmulq_f32(vaddq_f32(v100, v101), v78);
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)a1[3].i64[1] + 16))(a1[3].i64[1], v102, &v101, &v100);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vsubq_f32(v95, vmulq_f32(vaddq_f32(v101, v100), v79));
      v80.i32[3] = 0;
      v81 = v108;
      v82 = (int8x16_t)vmulq_f32(v108, v80);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0] < 0.0)
      {
        v81 = vnegq_f32(v108);
        v108 = v81;
      }
    }
    else
    {
      v81 = v108;
    }
    a1[1] = v81;
    a1[5].f32[1] = v57;
    v101 = vaddq_f32(v106, v85);
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(_QWORD *)a3 + 32))(a3, &v108, &v101, v57);
  }
}

void sub_1B21EC100()
{
  JUMPOUT(0x1B5E22E18);
}

BOOL sub_1B21EC114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t *a9, uint64_t a10)
{
  _DWORD *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t i;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  __int128 *v50;
  int v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t *v64;
  float32x4_t *v65;
  int8x16_t *v66;
  float v67;
  int8x16_t v68;
  unsigned int v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float v83;
  float v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int v92;
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float32x4_t *v96;
  float32x4_t *v97;
  uint64_t v98;
  int v99;
  float32x4_t v100;
  uint64_t (**v101)();
  float32x4_t v102;
  float v103;
  unsigned __int8 v104;
  _OWORD v105[8];
  int v106;
  _BYTE v107[16];
  int8x16_t v108;
  _BYTE v109[992];
  _BYTE v110[992];
  _BYTE v111[992];
  float32x4_t v112[62];
  uint64_t v113;

  MEMORY[0x1E0C80A78](a1, a2);
  v96 = v12;
  v97 = v11;
  v14 = v13;
  v16 = v15;
  v17 = v10;
  v19 = v18;
  v98 = v20;
  v113 = *MEMORY[0x1E0C80C00];
  v21 = (v18[2] - 17) <= 1 && (v10[2] - 17) < 2;
  for (i = 0; i != 42; ++i)
  {
    sub_1B21EC764();
    v23 = (float32x4_t)xmmword_1EEFD45D0[i];
    v24 = vnegq_f32(v23);
    v25 = *v16;
    v26 = v16[1];
    v25.i32[3] = 0;
    v26.i32[3] = 0;
    v27 = v16[2];
    v27.i32[3] = 0;
    *(float32x4_t *)&v110[i * 16] = vaddq_f32(vaddq_f32(vmulq_n_f32(v25, v24.f32[0]), vmulq_lane_f32(v26, *(float32x2_t *)v24.f32, 1)), vmulq_laneq_f32(v27, v24, 2));
    v28 = *v14;
    v29 = v14[1];
    v28.i32[3] = 0;
    v29.i32[3] = 0;
    v30 = v14[2];
    v30.i32[3] = 0;
    *(float32x4_t *)&v109[i * 16] = vaddq_f32(vaddq_f32(vmulq_n_f32(v28, v23.f32[0]), vmulq_lane_f32(v29, *(float32x2_t *)v23.f32, 1)), vmulq_laneq_f32(v30, v23, 2));
  }
  v31 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 168))(v19);
  if (v31 < 1)
  {
    v45 = 42;
  }
  else
  {
    v32 = 0;
    v33 = v31;
    do
    {
      (*(void (**)(_DWORD *, uint64_t, float32x4_t *))(*(_QWORD *)v19 + 176))(v19, v32, v112);
      v34 = (int8x16_t)vmulq_f32(*v16, v112[0]);
      v35 = (int8x16_t)vmulq_f32(v112[0], v16[1]);
      v36 = (int8x16_t)vmulq_f32(v112[0], v16[2]);
      v36.i32[3] = 0;
      *(float32x2_t *)v34.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v35.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)));
      v34.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
      v112[0] = (float32x4_t)v34;
      sub_1B21EC764();
      v37 = v112[0];
      xmmword_1EEFD45D0[v32 + 42] = (__int128)v112[0];
      v38 = vnegq_f32(v37);
      v39 = *v16;
      v40 = v16[1];
      v39.i32[3] = 0;
      v40.i32[3] = 0;
      v41 = v16[2];
      v41.i32[3] = 0;
      *(float32x4_t *)&v110[16 * v32 + 672] = vaddq_f32(vaddq_f32(vmulq_n_f32(v39, v38.f32[0]), vmulq_lane_f32(v40, *(float32x2_t *)v38.f32, 1)), vmulq_laneq_f32(v41, v38, 2));
      v42 = *v14;
      v43 = v14[1];
      v42.i32[3] = 0;
      v43.i32[3] = 0;
      v44 = v14[2];
      v44.i32[3] = 0;
      *(float32x4_t *)&v109[16 * v32++ + 672] = vaddq_f32(vaddq_f32(vmulq_n_f32(v42, v37.f32[0]), vmulq_lane_f32(v43, *(float32x2_t *)v37.f32, 1)), vmulq_laneq_f32(v44, v37, 2));
    }
    while (v33 != (_DWORD)v32);
    v45 = (v32 + 42);
  }
  v46 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 168))(v17);
  if (v46 >= 1)
  {
    v47 = 0;
    v99 = v45;
    v48 = &v109[16 * v45];
    v49 = &v110[16 * v45];
    v50 = &xmmword_1EEFD45D0[v45];
    v51 = v46;
    do
    {
      (*(void (**)(_DWORD *, uint64_t, float32x4_t *))(*(_QWORD *)v17 + 176))(v17, v47, v112);
      v52 = (int8x16_t)vmulq_f32(*v14, v112[0]);
      v53 = (int8x16_t)vmulq_f32(v112[0], v14[1]);
      v54 = (int8x16_t)vmulq_f32(v112[0], v14[2]);
      v54.i32[3] = 0;
      *(float32x2_t *)v52.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
      v52.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
      v112[0] = (float32x4_t)v52;
      sub_1B21EC764();
      v55 = v112[0];
      v50[v47] = (__int128)v112[0];
      v56 = vnegq_f32(v55);
      v57 = *v16;
      v58 = v16[1];
      v57.i32[3] = 0;
      v58.i32[3] = 0;
      v59 = v16[2];
      v59.i32[3] = 0;
      *(float32x4_t *)&v49[16 * v47] = vaddq_f32(vaddq_f32(vmulq_n_f32(v57, v56.f32[0]), vmulq_lane_f32(v58, *(float32x2_t *)v56.f32, 1)), vmulq_laneq_f32(v59, v56, 2));
      v60 = *v14;
      v61 = v14[1];
      v60.i32[3] = 0;
      v61.i32[3] = 0;
      v62 = v14[2];
      v62.i32[3] = 0;
      *(float32x4_t *)&v48[16 * v47++] = vaddq_f32(vaddq_f32(vmulq_n_f32(v60, v55.f32[0]), vmulq_lane_f32(v61, *(float32x2_t *)v55.f32, 1)), vmulq_laneq_f32(v62, v55, 2));
    }
    while (v51 != (_DWORD)v47);
    v45 = (v99 + v47);
  }
  (*(void (**)(_DWORD *, _BYTE *, float32x4_t *, uint64_t))(*(_QWORD *)v19 + 152))(v19, v110, v112, v45);
  (*(void (**)(_DWORD *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v17 + 152))(v17, v109, v111, v45);
  if ((int)v45 < 1)
  {
    v100 = 0u;
    v67 = 1.0e18;
  }
  else
  {
    v63 = v45;
    v100 = 0u;
    v64 = (float32x4_t *)v111;
    v65 = v112;
    v66 = (int8x16_t *)xmmword_1EEFD45D0;
    v67 = 1.0e18;
    do
    {
      sub_1B21EC764();
      v68 = *v66;
      v68.i32[2] = 0;
      if (v21)
        v69 = -1;
      else
        v69 = 0;
      v70 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v69), v68, *v66);
      v71 = (int8x16_t)vmulq_f32(v70, v70);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v71.i8, *(float32x2_t *)v71.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)).f32[0] <= 0.01)
      {
        v80 = v100;
      }
      else
      {
        v72 = vmulq_f32(*v65, *v16);
        v73 = (int8x16_t)vmulq_f32(*v65, v16[1]);
        v74 = (int8x16_t)vmulq_f32(*v65, v16[2]);
        v74.i32[3] = 0;
        *(float32x2_t *)v72.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
        *(float32x2_t *)&v72.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), 0);
        v75 = vaddq_f32(v72, v16[3]);
        v76 = vmulq_f32(*v64, *v14);
        v77 = (int8x16_t)vmulq_f32(*v64, v14[1]);
        v78 = (int8x16_t)vmulq_f32(*v64, v14[2]);
        v78.i32[3] = 0;
        *(float32x2_t *)v76.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v77.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)));
        *(float32x2_t *)&v76.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v78.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), 0);
        v79 = vaddq_f32(v76, v14[3]);
        if (v21)
        {
          v75.i32[2] = 0;
          v79.i32[2] = 0;
        }
        v80 = v100;
        v81 = vsubq_f32(v79, v75);
        v81.i32[3] = 0;
        v82 = (int8x16_t)vmulq_f32(v70, v81);
        v83 = vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0];
        if (v83 < v67)
        {
          v80 = v70;
          v67 = v83;
        }
      }
      v100 = v80;
      ++v64;
      ++v65;
      ++v66;
      --v63;
    }
    while (v63);
  }
  sub_1B21E2ADC((uint64_t)v19);
  sub_1B21E2ADC((uint64_t)v17);
  if (v67 < 0.0)
    return 0;
  v85 = sub_1B21E2ADC((uint64_t)v19);
  v95 = v67 + (float)((float)(v85 + sub_1B21E2ADC((uint64_t)v17)) + 0.5);
  sub_1B21EB97C((uint64_t)v107, v19, v17, v98, 0);
  v86 = vmulq_n_f32(v100, v95);
  v86.i32[3] = 0;
  v87 = v16[2];
  v88 = (int8x16_t)vaddq_f32(v16[3], v86);
  v89 = v16[1];
  v105[0] = *v16;
  v105[1] = v89;
  v105[2] = v87;
  v105[3] = v88;
  v90 = v14[1];
  v105[4] = *v14;
  v105[5] = v90;
  v91 = v14[3];
  v105[6] = v14[2];
  v105[7] = v91;
  v106 = 1566444395;
  v101 = &off_1E63FC7D0;
  v104 = 0;
  v88.i64[0] = 0x8000000080000000;
  v88.i64[1] = 0x8000000080000000;
  v108 = veorq_s8((int8x16_t)v100, v88);
  sub_1B21EB9C0(v107, v105, &v101, a10, 0);
  v92 = v104;
  if (v104)
  {
    v93 = v102;
    v94 = vsubq_f32(v102, vmulq_n_f32(v100, v95 - v103));
    v94.i32[3] = 0;
    *v96 = v94;
    *a9 = v93;
    *v97 = v100;
  }
  return v92 != 0;
}

__int128 *sub_1B21EC764()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEFD49B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EEFD49B0))
  {
    xmmword_1EEFD45D0 = xmmword_1B22CA260;
    unk_1EEFD45E0 = xmmword_1B22CA270;
    xmmword_1EEFD45F0 = xmmword_1B22CA280;
    unk_1EEFD4600 = xmmword_1B22CA290;
    xmmword_1EEFD4610 = xmmword_1B22CA2A0;
    unk_1EEFD4620 = xmmword_1B22CA2B0;
    xmmword_1EEFD4630 = xmmword_1B22CA2C0;
    unk_1EEFD4640 = xmmword_1B22CA2D0;
    xmmword_1EEFD4650 = xmmword_1B22CA2E0;
    unk_1EEFD4660 = xmmword_1B22CA2F0;
    xmmword_1EEFD4670 = xmmword_1B22CA300;
    unk_1EEFD4680 = xmmword_1B22CA310;
    xmmword_1EEFD4690 = xmmword_1B22CA320;
    unk_1EEFD46A0 = xmmword_1B22CA330;
    xmmword_1EEFD46B0 = xmmword_1B22CA340;
    unk_1EEFD46C0 = xmmword_1B22CA350;
    xmmword_1EEFD46D0 = xmmword_1B22CA360;
    unk_1EEFD46E0 = xmmword_1B22CA370;
    xmmword_1EEFD46F0 = xmmword_1B22CA380;
    unk_1EEFD4700 = xmmword_1B22CA390;
    xmmword_1EEFD4710 = xmmword_1B22CA3A0;
    unk_1EEFD4720 = xmmword_1B22CA3B0;
    xmmword_1EEFD4730 = xmmword_1B22CA3C0;
    unk_1EEFD4740 = xmmword_1B22CA3D0;
    xmmword_1EEFD4750 = xmmword_1B22CA3E0;
    unk_1EEFD4760 = xmmword_1B2244DE0;
    xmmword_1EEFD4770 = xmmword_1B22CA3F0;
    unk_1EEFD4780 = xmmword_1B22CA400;
    xmmword_1EEFD4790 = xmmword_1B22CA410;
    unk_1EEFD47A0 = xmmword_1B22CA420;
    xmmword_1EEFD47B0 = xmmword_1B2291410;
    unk_1EEFD47C0 = xmmword_1B22CA430;
    xmmword_1EEFD47D0 = xmmword_1B22CA440;
    unk_1EEFD47E0 = xmmword_1B22CA450;
    xmmword_1EEFD47F0 = xmmword_1B22CA460;
    unk_1EEFD4800 = xmmword_1B22CA470;
    xmmword_1EEFD4810 = xmmword_1B22CA480;
    unk_1EEFD4820 = xmmword_1B22CA490;
    xmmword_1EEFD4830 = xmmword_1B22CA4A0;
    unk_1EEFD4840 = xmmword_1B22CA4B0;
    xmmword_1EEFD4850 = xmmword_1B22CA4C0;
    unk_1EEFD4860 = xmmword_1B22CA4D0;
    __cxa_guard_release(&qword_1EEFD49B0);
  }
  return &xmmword_1EEFD45D0;
}

void sub_1B21EC960()
{
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21EC974()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21EC990(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  *(_OWORD *)(result + 16) = *a2;
  *(_OWORD *)(result + 32) = *a3;
  *(float *)(result + 48) = a4;
  *(_BYTE *)(result + 52) = 1;
  return result;
}

_QWORD *sub_1B21EC9B0(_QWORD *result, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 112);
  if (v3)
  {
    result = (_QWORD *)result[103];
    if (result)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
    }
    else
    {
      if (!off_1EEFD59D0)
        return result;
      result = (_QWORD *)off_1EEFD59D0(v3);
    }
    *(_QWORD *)(a2 + 112) = 0;
  }
  return result;
}

uint64_t sub_1B21ECA04(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  float v3;
  float *f32;
  int v5;
  float v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x8_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x8_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x8_t v33;
  float32x4_t v34;
  int8x8_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x2_t v51;
  int8x16_t v52;
  float v53;
  float32x4_t v54;
  int8x8_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x8_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  int8x8_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x8_t v68;
  int8x8_t v69;
  float32x4_t v70;
  int8x8_t v71;
  float32x4_t v72;
  int8x8_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x2_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float v86;
  int8x8_t v87;
  int8x8_t v88;
  int8x8_t v89;
  float32x4_t v90;
  int8x8_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x2_t v102;
  int8x16_t v103;
  float v104;
  int8x16_t v105;
  float32x4_t v106;
  int8x8_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x8_t v115;
  float32x4_t v116;
  int8x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x2_t v126;
  int8x16_t v127;
  float32x2_t v128;
  int8x16_t v129;
  float v130;
  float32x4_t v131;
  float32x4_t v132;
  float v133;
  unsigned int v134;

  v2 = 0;
  v3 = a2[5].f32[0];
  f32 = a1[6].f32;
  v5 = -1;
  do
  {
    v6 = *f32;
    f32 += 48;
    v7 = v6;
    if (v6 < v3)
    {
      v3 = v7;
      v5 = v2;
    }
    ++v2;
  }
  while (v2 != 4);
  v8 = *a2;
  if (byte_1EEF652F8)
  {
    if (v5)
    {
      v9 = a1[13];
      v10 = vsubq_f32(v8, v9);
      v11 = (int8x8_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
      v10.i32[3] = 0;
      v12 = a1[37];
      v13 = a1[25];
      v15 = vsubq_f32(v12, v13);
      v14 = (int8x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
      v15.i32[3] = 0;
      *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)v10.f32, v11, 4uLL);
      v16.i64[1] = v10.i64[0];
      *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v15.f32, v14, 4uLL);
      v17.i64[1] = v15.i64[0];
      v18 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v10), vmulq_f32(v16, v15));
      v16.i64[0] = vextq_s8(v18, v18, 4uLL).u64[0];
      v16.i64[1] = v18.u32[0];
      v19 = (int8x16_t)vmulq_f32(v16, v16);
      *(float32x2_t *)v16.f32 = vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8);
      v20 = (int32x4_t)vextq_s8(v19, v19, 8uLL);
      *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v20.i8);
      if (v5 == 1)
      {
        v22 = vsubq_f32(v8, a1[1]);
        v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
        v22.i32[3] = 0;
        *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v21, 4uLL);
        v23.i64[1] = v22.i64[0];
        v24 = 0;
LABEL_18:
        v59 = vsubq_f32(v12, v9);
        v60 = (int8x8_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
        v59.i32[3] = 0;
        *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v59.f32, v60, 4uLL);
        v61.i64[1] = v59.i64[0];
        v62 = (int8x16_t)vsubq_f32(vmulq_f32(v61, v22), vmulq_f32(v23, v59));
        v61.i64[0] = vextq_s8(v62, v62, 4uLL).u64[0];
        v61.i64[1] = v62.u32[0];
        v58 = (int8x16_t)vmulq_f32(v61, v61);
        v58.i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
        if (v5 == 3)
        {
          v13.i32[1] = 0;
LABEL_21:
          v13.i32[0] = v24;
          goto LABEL_42;
        }
LABEL_20:
        v63 = vsubq_f32(v13, v9);
        v64 = (int8x8_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
        v63.i32[3] = 0;
        *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v63.f32, v64, 4uLL);
        v65.i64[1] = v63.i64[0];
        v66 = (int8x16_t)vsubq_f32(vmulq_f32(v65, v22), vmulq_f32(v23, v63));
        v65.i64[0] = vextq_s8(v66, v66, 4uLL).u64[0];
        v65.i64[1] = v66.u32[0];
        v67 = (int8x16_t)vmulq_f32(v65, v65);
        *(float32x2_t *)v65.f32 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
        v13 = (float32x4_t)vextq_s8(v67, v67, 8uLL);
        *(int32x2_t *)v13.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v13.f32), 0);
        goto LABEL_21;
      }
    }
    else
    {
      v12 = a1[37];
      v13 = a1[25];
      v15 = vsubq_f32(v12, v13);
      v20 = (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
      v15.i32[3] = 0;
      *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v20.i8, 4uLL);
      v17.i64[1] = v15.i64[0];
      v20.i32[0] = 0;
    }
    v22 = vsubq_f32(v8, a1[1]);
    v55 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v22.i32[3] = 0;
    *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v55, 4uLL);
    v23.i64[1] = v22.i64[0];
    v56 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v22), vmulq_f32(v23, v15));
    v57.i64[0] = vextq_s8(v56, v56, 4uLL).u64[0];
    v57.i64[1] = v56.u32[0];
    v58 = (int8x16_t)vmulq_f32(v57, v57);
    v24 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
    v9 = a1[13];
    v58.i32[0] = 0;
    if (v5 == 2)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (v5)
  {
    v25 = a1[13];
    v26 = vsubq_f32(v8, v25);
    v27 = v26;
    v27.i32[3] = 0;
    v28 = a1[25];
    v29 = (int8x16_t)vsubq_f32(v8, v28);
    v13 = (float32x4_t)v29;
    v13.i32[3] = 0;
    v30 = a1[37];
    v31 = (int8x16_t)vsubq_f32(v8, v30);
    v32 = (float32x4_t)v31;
    v32.i32[3] = 0;
    v34 = vsubq_f32(v28, v30);
    v33 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v34.i32[3] = 0;
    v36 = vsubq_f32(v25, v30);
    v35 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
    v36.i32[3] = 0;
    v37 = (int8x16_t)vsubq_f32(v25, v28);
    v38 = (float32x4_t)v37;
    v38.i32[3] = 0;
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
    v39.i64[1] = v26.i64[0];
    v26.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v34.f32, v33, 4uLL);
    v40.i64[1] = v34.i64[0];
    v41 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v27), vmulq_f32(v39, v34));
    v42.i64[0] = vextq_s8(v41, v41, 4uLL).u64[0];
    v42.i64[1] = v41.u32[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), 4uLL);
    v43.i64[1] = v29.i64[0];
    *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v36.f32, v35, 4uLL);
    v44.i64[1] = v36.i64[0];
    v45 = vsubq_f32(vmulq_f32(v44, v13), vmulq_f32(v43, v36));
    v46.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
    v46.i64[1] = v45.u32[0];
    *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v26.f32, 4uLL);
    v47.i64[1] = v32.i64[0];
    *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), 4uLL);
    v26.i64[1] = v37.i64[0];
    v48 = (int8x16_t)vsubq_f32(vmulq_f32(v26, v32), vmulq_f32(v47, v38));
    v45.i64[0] = vextq_s8(v48, v48, 4uLL).u64[0];
    v45.i64[1] = v48.u32[0];
    v49 = (int8x16_t)vmulq_f32(v42, v42);
    *(float32x2_t *)v37.i8 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
    v20 = (int32x4_t)vextq_s8(v49, v49, 8uLL);
    *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v20.i8);
    v50 = (int8x16_t)vmulq_f32(v46, v46);
    v51 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
    v52 = (int8x16_t)vmulq_f32(v45, v45);
    LODWORD(v53) = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).u32[0];
    if ((vcgt_f32(*(float32x2_t *)v20.i8, v51).u8[0] & 1) == 0)
      *(float *)v20.i32 = v51.f32[0];
    if (*(float *)v20.i32 <= v53)
      *(float *)v20.i32 = v53;
    if (v5 == 1)
    {
      v54 = a1[1];
      v13.i32[0] = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v28 = a1[25];
    v30 = a1[37];
    v13 = vsubq_f32(v8, v28);
    v20 = (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
    v13.i32[3] = 0;
    v32 = vsubq_f32(v8, v30);
    v68 = (int8x8_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v32.i32[3] = 0;
    v34 = vsubq_f32(v28, v30);
    v69 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v34.i32[3] = 0;
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v34.f32, v69, 4uLL);
    v40.i64[1] = v34.i64[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v13.f32, *(int8x8_t *)v20.i8, 4uLL);
    v43.i64[1] = v13.i64[0];
    *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, v68, 4uLL);
    v47.i64[1] = v32.i64[0];
    v20.i32[0] = 0;
  }
  v54 = a1[1];
  v70 = vsubq_f32(v8, v54);
  v71 = (int8x8_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
  v70.i32[3] = 0;
  v72 = vsubq_f32(v54, v30);
  v73 = (int8x8_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
  v72.i32[3] = 0;
  v74 = (int8x16_t)vsubq_f32(v54, v28);
  v75 = (float32x4_t)v74;
  v75.i32[3] = 0;
  *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v70.f32, v71, 4uLL);
  v76.i64[1] = v70.i64[0];
  v77 = vsubq_f32(vmulq_f32(v40, v70), vmulq_f32(v76, v34));
  v76.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL).u64[0];
  v76.i64[1] = v77.u32[0];
  *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v72.f32, v73, 4uLL);
  v77.i64[1] = v72.i64[0];
  v78 = vsubq_f32(vmulq_f32(v77, v13), vmulq_f32(v43, v72));
  v79.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL).u64[0];
  v79.i64[1] = v78.u32[0];
  *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), 4uLL);
  v78.i64[1] = v74.i64[0];
  v80 = (int8x16_t)vsubq_f32(vmulq_f32(v78, v32), vmulq_f32(v47, v75));
  v81.i64[0] = vextq_s8(v80, v80, 4uLL).u64[0];
  v81.i64[1] = v80.u32[0];
  v82 = (int8x16_t)vmulq_f32(v76, v76);
  v83 = vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
  v84 = (int8x16_t)vmulq_f32(v79, v79);
  *(float32x2_t *)v72.f32 = vpadd_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8);
  v13 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
  *(float32x2_t *)v13.f32 = vadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v13.f32);
  v85 = (int8x16_t)vmulq_f32(v81, v81);
  LODWORD(v86) = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).u32[0];
  if ((vcgt_f32(v83, *(float32x2_t *)v13.f32).u8[0] & 1) == 0)
    v83.f32[0] = v13.f32[0];
  if (v83.f32[0] <= v86)
    v13.f32[0] = v86;
  else
    v13.f32[0] = v83.f32[0];
  v58.i32[0] = 0;
  if (v5 == 2)
    goto LABEL_37;
  v8 = *a2;
  v25 = a1[13];
  v30 = a1[37];
  v27 = vsubq_f32(*a2, v25);
  v87 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  v27.i32[3] = 0;
  v32 = vsubq_f32(*a2, v30);
  v88 = (int8x8_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v32.i32[3] = 0;
  v36 = vsubq_f32(v25, v30);
  v89 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  v36.i32[3] = 0;
  *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v36.f32, v89, 4uLL);
  v44.i64[1] = v36.i64[0];
  *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v27.f32, v87, 4uLL);
  v39.i64[1] = v27.i64[0];
  *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, v88, 4uLL);
  v47.i64[1] = v32.i64[0];
LABEL_30:
  v90 = vsubq_f32(v8, v54);
  v91 = (int8x8_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
  v90.i32[3] = 0;
  v92 = vsubq_f32(v54, v30);
  v93 = v92;
  v93.i32[3] = 0;
  v94 = vsubq_f32(v54, v25);
  v95 = v94;
  v95.i32[3] = 0;
  *(int8x8_t *)v96.f32 = vext_s8(*(int8x8_t *)v90.f32, v91, 4uLL);
  v96.i64[1] = v90.i64[0];
  v97 = vsubq_f32(vmulq_f32(v44, v90), vmulq_f32(v96, v36));
  v96.i64[0] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL).u64[0];
  v96.i64[1] = v97.u32[0];
  v97.i64[0] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL), 4uLL);
  v94.i64[1] = v92.i64[0];
  v98 = (int8x16_t)vsubq_f32(vmulq_f32(v94, v27), vmulq_f32(v39, v93));
  v92.i64[0] = vextq_s8(v98, v98, 4uLL).u64[0];
  v92.i64[1] = v98.u32[0];
  *(int8x8_t *)v97.f32 = vext_s8(*(int8x8_t *)v95.f32, *(int8x8_t *)v97.f32, 4uLL);
  v97.i64[1] = v95.i64[0];
  v99 = (int8x16_t)vsubq_f32(vmulq_f32(v97, v32), vmulq_f32(v47, v95));
  v100.i64[0] = vextq_s8(v99, v99, 4uLL).u64[0];
  v100.i64[1] = v99.u32[0];
  v58 = (int8x16_t)vmulq_f32(v96, v96);
  *(float32x2_t *)v58.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
  v101 = (int8x16_t)vmulq_f32(v92, v92);
  v102 = vadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
  v103 = (int8x16_t)vmulq_f32(v100, v100);
  LODWORD(v104) = vadd_f32(vpadd_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL)).u32[0];
  if ((vcgt_f32(*(float32x2_t *)v58.i8, v102).u8[0] & 1) == 0)
    *(float *)v58.i32 = v102.f32[0];
  if (*(float *)v58.i32 <= v104)
    *(float *)v58.i32 = v104;
  if (v5 == 3)
  {
    v13.i64[0] = v13.u32[0];
    goto LABEL_42;
  }
  v54 = a1[1];
LABEL_37:
  v105 = (int8x16_t)vsubq_f32(*a2, v54);
  v106 = (float32x4_t)v105;
  v106.i32[3] = 0;
  v107 = (int8x8_t)vextq_s8(v105, v105, 8uLL).u64[0];
  v108 = a1[13];
  v109 = vsubq_f32(*a2, v108);
  v110 = v109;
  v110.i32[3] = 0;
  v111 = a1[25];
  v112 = (int8x16_t)vsubq_f32(*a2, v111);
  v113 = (float32x4_t)v112;
  v113.i32[3] = 0;
  v114 = vsubq_f32(v108, v111);
  v115 = (int8x8_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
  v114.i32[3] = 0;
  v116 = vsubq_f32(v54, v111);
  v117 = (int8x8_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
  v116.i32[3] = 0;
  v118 = vsubq_f32(v54, v108);
  v119 = v118;
  v119.i32[3] = 0;
  *(int8x8_t *)v120.f32 = vext_s8(*(int8x8_t *)v106.f32, v107, 4uLL);
  v120.i64[1] = v106.i64[0];
  *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v114.f32, v115, 4uLL);
  v121.i64[1] = v114.i64[0];
  v122 = vsubq_f32(vmulq_f32(v121, v106), vmulq_f32(v120, v114));
  v120.i64[0] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 4uLL).u64[0];
  v120.i64[1] = v122.u32[0];
  *(int8x8_t *)v122.f32 = vext_s8(*(int8x8_t *)v109.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL), 4uLL);
  v122.i64[1] = v109.i64[0];
  *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v116.f32, v117, 4uLL);
  v109.i64[1] = v116.i64[0];
  v123 = vsubq_f32(vmulq_f32(v109, v110), vmulq_f32(v122, v116));
  v110.i64[0] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 4uLL).u64[0];
  v110.i64[1] = v123.u32[0];
  *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v112.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), 4uLL);
  v123.i64[1] = v112.i64[0];
  *(int8x8_t *)v118.f32 = vext_s8(*(int8x8_t *)v118.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), 4uLL);
  v118.i64[1] = v119.i64[0];
  v124 = (int8x16_t)vsubq_f32(vmulq_f32(v118, v113), vmulq_f32(v123, v119));
  v118.i64[0] = vextq_s8(v124, v124, 4uLL).u64[0];
  v118.i64[1] = v124.u32[0];
  v125 = (int8x16_t)vmulq_f32(v120, v120);
  v126 = vadd_f32(vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
  v127 = (int8x16_t)vmulq_f32(v110, v110);
  v128 = vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL));
  v129 = (int8x16_t)vmulq_f32(v118, v118);
  LODWORD(v130) = vadd_f32(vpadd_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v129.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL)).u32[0];
  if ((vcgt_f32(v126, v128).u8[0] & 1) == 0)
    v126.f32[0] = v128.f32[0];
  if (v126.f32[0] <= v130)
    v126.f32[0] = v130;
  v13.i32[1] = v126.i32[0];
LABEL_42:
  v131 = (float32x4_t)vzip1q_s32(v20, (int32x4_t)v13);
  v131.i32[2] = v58.i32[0];
  v132 = vabsq_f32(v131);
  v133 = -1.0e18;
  if (v132.f32[0] > -1.0e18)
    v134 = 0;
  else
    v134 = -1;
  if (v132.f32[0] > -1.0e18)
    v133 = v132.f32[0];
  if (v132.f32[1] > v133)
  {
    v134 = 1;
    v133 = v132.f32[1];
  }
  if (v132.f32[2] > v133)
  {
    v134 = 2;
    v133 = v132.f32[2];
  }
  if (v132.f32[3] <= v133)
    return v134;
  else
    return 3;
}

uint64_t sub_1B21ED0E8(uint64_t result, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;

  v2 = *(unsigned int *)(result + 800);
  if ((int)v2 < 1)
    return 0xFFFFFFFFLL;
  v3 = 0;
  v4 = *(float *)(result + 804) * *(float *)(result + 804);
  v5 = (float32x4_t *)(result + 16);
  LODWORD(result) = -1;
  do
  {
    v6 = *v5;
    v5 += 12;
    v7 = vsubq_f32(v6, *a2);
    v7.i32[3] = 0;
    v8 = (int8x16_t)vmulq_f32(v7, v7);
    v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0];
    if (v9 >= v4)
      result = result;
    else
      result = v3;
    if (v9 < v4)
      v4 = v9;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

float sub_1B21ED14C(uint64_t a1)
{
  return *(float *)(a1 + 804);
}

uint64_t sub_1B21ED154(float32x4_t *a1, uint64_t a2)
{
  int v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *f32;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[50].i32[0];
  if (v4 == 4)
  {
    v4 = sub_1B21ECA04(a1, (float32x4_t *)a2);
    v5 = &a1[12 * v4];
    v8 = v5[8].i64[0];
    v7 = v5 + 8;
    v6 = v8;
    if (v8)
    {
      v9 = a1[51].i64[1];
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
LABEL_8:
        v7->i64[0] = 0;
        goto LABEL_9;
      }
      if (off_1EEFD59D0)
      {
        off_1EEFD59D0(v6);
        goto LABEL_8;
      }
    }
  }
  else
  {
    a1[50].i32[0] = v4 + 1;
  }
LABEL_9:
  v10 = v4 & ~(v4 >> 31);
  f32 = (_OWORD *)a1[12 * v10].f32;
  f32[1] = *(_OWORD *)a2;
  f32[2] = *(_OWORD *)(a2 + 16);
  f32[3] = *(_OWORD *)(a2 + 32);
  f32[4] = *(_OWORD *)(a2 + 48);
  f32[5] = *(_OWORD *)(a2 + 64);
  f32[6] = *(_OWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 96);
  v13 = *(_OWORD *)(a2 + 112);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)f32 + 156) = *(_OWORD *)(a2 + 140);
  f32[8] = v13;
  f32[9] = v14;
  f32[7] = v12;
  f32[11] = *(_OWORD *)(a2 + 160);
  f32[12] = *(_OWORD *)(a2 + 176);
  v15 = a1[51].i64[1];
  if (v15 && (*(_BYTE *)(v15 + 8) & 1) != 0)
    (**(void (***)(uint64_t, float32x4_t *, uint64_t))v15)(v15, a1, v10);
  return v10;
}

_BYTE *sub_1B21ED270(_BYTE *result, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float32x4_t v22;
  int8x16_t v23;

  v3 = *((unsigned int *)result + 200);
  if ((int)v3 >= 1)
  {
    v4 = (uint64_t)result;
    v5 = v3 + 1;
    do
    {
      v6 = (float32x4_t *)&result[192 * (v5 - 2)];
      v7 = v6[1];
      v8 = v6[2];
      v9 = vmulq_f32(*a2, v7);
      v10 = (int8x16_t)vmulq_f32(v7, a2[1]);
      v11 = (int8x16_t)vmulq_f32(v7, a2[2]);
      v11.i32[3] = 0;
      *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), 0);
      v12 = vaddq_f32(v9, a2[3]);
      v6[4] = v12;
      v13 = vmulq_f32(*a3, v8);
      v14 = (int8x16_t)vmulq_f32(v8, a3[1]);
      v15 = (int8x16_t)vmulq_f32(v8, a3[2]);
      v15.i32[3] = 0;
      *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
      *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
      v16 = vaddq_f32(v13, a3[3]);
      v17 = vsubq_f32(v12, v16);
      v17.i32[3] = 0;
      v6[3] = v16;
      v18 = (int8x16_t)vmulq_f32(v6[5], v17);
      v6[6].i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).u32[0];
      ++v6[10].i32[2];
      --v5;
    }
    while (v5 > 1);
    do
    {
      v19 = v4 + 192 * --v3;
      v20 = *(float *)(v19 + 96);
      v21 = *(float *)(v4 + 804);
      if (v20 <= v21
        && (v22 = vsubq_f32(*(float32x4_t *)(v4 + 192 * v3 + 48), vsubq_f32(*(float32x4_t *)(v4 + 192 * v3 + 64), vmulq_n_f32(*(float32x4_t *)(v4 + 192 * v3 + 80), v20))), v22.i32[3] = 0, v23 = (int8x16_t)vmulq_f32(v22, v22), vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0] <= (float)(v21 * v21)))
      {
        if (off_1EEFD59D8)
          result = (_BYTE *)((uint64_t (*)(uint64_t, _QWORD, _QWORD))off_1EEFD59D8)(v19 + 16, *(_QWORD *)(v4 + 784), *(_QWORD *)(v4 + 792));
      }
      else
      {
        result = sub_1B21ED40C(v4, v3);
      }
    }
    while ((unint64_t)(v3 + 1) > 1);
  }
  return result;
}

_BYTE *sub_1B21ED40C(uint64_t a1, uint64_t a2)
{
  int v2;
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = a2;
  result = *(_BYTE **)(a1 + 824);
  if (result && (result[8] & 4) != 0)
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a1, a2);
  v5 = a1 + 192 * v2;
  v8 = *(_QWORD *)(v5 + 128);
  v7 = (_QWORD *)(v5 + 128);
  v6 = v8;
  if (v8)
  {
    result = *(_BYTE **)(a1 + 824);
    if (result)
    {
      result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 24))(result);
    }
    else
    {
      if (!off_1EEFD59D0)
        goto LABEL_10;
      result = (_BYTE *)off_1EEFD59D0(v6);
    }
    *v7 = 0;
  }
LABEL_10:
  v9 = *(int *)(a1 + 800) - 1;
  if ((_DWORD)v9 != v2)
  {
    v9 = a1 + 16 + 192 * v9;
    v10 = *(_OWORD *)(v9 + 16);
    *((_OWORD *)v7 - 7) = *(_OWORD *)v9;
    v11 = (_OWORD *)(a1 + 16 + 192 * v2);
    v12 = *(_OWORD *)(v9 + 32);
    v13 = *(_OWORD *)(v9 + 48);
    v11[1] = v10;
    v11[2] = v12;
    v14 = *(_OWORD *)(v9 + 64);
    v11[3] = v13;
    v11[4] = v14;
    v15 = *(_OWORD *)(v9 + 96);
    v16 = *(_OWORD *)(v9 + 112);
    v17 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)((char *)v11 + 140) = *(_OWORD *)(v9 + 140);
    v11[7] = v16;
    v11[8] = v17;
    v11[6] = v15;
    v11[5] = *(_OWORD *)(v9 + 80);
    v18 = *(_OWORD *)(v9 + 176);
    v11[10] = *(_OWORD *)(v9 + 160);
    v11[11] = v18;
    *(_QWORD *)(v9 + 112) = 0;
    *(_BYTE *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 128) = 0;
    *(_DWORD *)(v9 + 124) = 0;
    *(_DWORD *)(v9 + 152) = 0;
    LODWORD(v9) = *(_DWORD *)(a1 + 800) - 1;
  }
  *(_DWORD *)(a1 + 800) = v9;
  return result;
}

void sub_1B21ED520(uint64_t a1, uint64_t a2, float32x4_t *a3, float a4)
{
  uint64_t v4;
  uint64_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v4 = *(unsigned int *)(a1 + 4);
  if ((int)v4 >= 2)
  {
    v9 = 0;
    v10 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * (v4 - 1));
    v11 = (int8x16_t)vmulq_f32(v10, *a3);
    v12 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]+ a4;
    while (1)
    {
      v13 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
      v14 = (int8x16_t)vmulq_f32(v13, *a3);
      v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]+ a4;
      if (v12 < 0.0)
        break;
      if (v15 < 0.0)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 == *(_DWORD *)(a2 + 8))
        {
          v21 = v20 ? 2 * v20 : 1;
          if (v20 < v21)
          {
            v41 = v10;
            v45 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
            if (v21)
            {
              v22 = sub_1B21FF5F0(16 * v21, 16);
              v10 = v41;
              v13 = v45;
              v23 = v22;
              v20 = *(_DWORD *)(a2 + 4);
            }
            else
            {
              v23 = 0;
            }
            if (v20 >= 1)
            {
              v28 = 0;
              v29 = 16 * v20;
              do
              {
                *(_OWORD *)(v23 + v28) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v28);
                v28 += 16;
              }
              while (v29 != v28);
            }
            v30 = *(_QWORD *)(a2 + 16);
            if (v30)
              v31 = *(_BYTE *)(a2 + 24) == 0;
            else
              v31 = 1;
            if (!v31)
            {
              sub_1B21FF5FC(v30);
              v10 = v41;
              v13 = v45;
            }
            *(_BYTE *)(a2 + 24) = 1;
            *(_QWORD *)(a2 + 16) = v23;
            *(_DWORD *)(a2 + 8) = v21;
            v20 = *(_DWORD *)(a2 + 4);
          }
        }
        *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v20) = vaddq_f32(v10, vmulq_n_f32(vsubq_f32(v13, v10), v12 / (float)(v12 - v15)));
        v32 = *(_DWORD *)(a2 + 8);
        v16 = *(_DWORD *)(a2 + 4) + 1;
        *(_DWORD *)(a2 + 4) = v16;
        if (v16 == v32)
        {
          v17 = v16 ? 2 * v16 : 1;
          if (v16 < v17)
          {
            if (v17)
            {
              v47 = v13;
              v33 = sub_1B21FF5F0(16 * v17, 16);
              v13 = v47;
              v19 = v33;
              v16 = *(_DWORD *)(a2 + 4);
            }
            else
            {
              v19 = 0;
            }
            if (v16 >= 1)
            {
              v38 = 0;
              v39 = 16 * v16;
              do
              {
                *(_OWORD *)(v19 + v38) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v38);
                v38 += 16;
              }
              while (v39 != v38);
            }
LABEL_64:
            v36 = *(_QWORD *)(a2 + 16);
            if (v36)
              v40 = *(_BYTE *)(a2 + 24) == 0;
            else
              v40 = 1;
            v24 = v13;
            if (!v40)
            {
LABEL_68:
              v43 = v24;
              v48 = v13;
              sub_1B21FF5FC(v36);
              v24 = v43;
              v13 = v48;
            }
LABEL_69:
            *(_BYTE *)(a2 + 24) = 1;
            *(_QWORD *)(a2 + 16) = v19;
            *(_DWORD *)(a2 + 8) = v17;
            v16 = *(_DWORD *)(a2 + 4);
LABEL_70:
            *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v16) = v24;
            ++*(_DWORD *)(a2 + 4);
            goto LABEL_71;
          }
        }
LABEL_49:
        v24 = v13;
        goto LABEL_70;
      }
LABEL_71:
      ++v9;
      v12 = v15;
      v10 = v13;
      if (v9 == v4)
        return;
    }
    if (v15 >= 0.0)
    {
      v24 = vaddq_f32(v10, vmulq_n_f32(vsubq_f32(v13, v10), v12 / (float)(v12 - v15)));
      v16 = *(_DWORD *)(a2 + 4);
      if (v16 == *(_DWORD *)(a2 + 8))
      {
        v17 = v16 ? 2 * v16 : 1;
        if (v16 < v17)
        {
          if (v17)
          {
            v42 = v24;
            v46 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
            v25 = sub_1B21FF5F0(16 * v17, 16);
            v24 = v42;
            v13 = v46;
            v19 = v25;
            v16 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            v19 = 0;
          }
          if (v16 >= 1)
          {
            v34 = 0;
            v35 = 16 * v16;
            do
            {
              *(_OWORD *)(v19 + v34) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v34);
              v34 += 16;
            }
            while (v35 != v34);
          }
          v36 = *(_QWORD *)(a2 + 16);
          if (v36)
            v37 = *(_BYTE *)(a2 + 24) == 0;
          else
            v37 = 1;
          if (!v37)
            goto LABEL_68;
          goto LABEL_69;
        }
      }
      goto LABEL_70;
    }
    v16 = *(_DWORD *)(a2 + 4);
    if (v16 == *(_DWORD *)(a2 + 8))
    {
      v17 = v16 ? 2 * v16 : 1;
      if (v16 < v17)
      {
        if (v17)
        {
          v44 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
          v18 = sub_1B21FF5F0(16 * v17, 16);
          v13 = v44;
          v19 = v18;
          v16 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v19 = 0;
        }
        if (v16 >= 1)
        {
          v26 = 0;
          v27 = 16 * v16;
          do
          {
            *(_OWORD *)(v19 + v26) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v26);
            v26 += 16;
          }
          while (v27 != v26);
        }
        goto LABEL_64;
      }
    }
    goto LABEL_49;
  }
}

BOOL sub_1B21ED88C(_DWORD *a1, _DWORD *a2, float32x4_t *a3, float32x4_t *a4, float *a5, float *a6, float a7)
{
  int8x16_t v8;
  float v9;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;

  _Q2 = *a4;
  v8 = (int8x16_t)vmulq_f32(*a3, *a4);
  LODWORD(v9) = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).u32[0];
  _S5 = a1[8];
  _S7 = a1[9];
  __asm
  {
    FMLA            S3, S5, V2.S[2]
    FMLA            S4, S7, V2.S[2]
  }
  _S5 = a1[10];
  __asm { FMLA            S6, S5, V2.S[2] }
  _S16 = a2[8];
  _S18 = a2[9];
  __asm
  {
    FMLA            S5, S16, V2.S[2]
    FMLA            S7, S18, V2.S[2]
  }
  _S16 = a2[10];
  __asm { FMLA            S17, S16, V2.S[2] }
  v26 = a5[32];
  v27 = a5[33];
  if (_S3 < 0.0)
    v26 = -v26;
  if (_S4 < 0.0)
    v27 = -v27;
  v28 = a5[34];
  if (_S6 < 0.0)
    v28 = -v28;
  v29 = a6[32];
  v30 = a6[33];
  if (_S5 < 0.0)
    v29 = -v29;
  if (_S7 < 0.0)
    v30 = -v30;
  v31 = a6[34];
  if (_S17 < 0.0)
    v31 = -v31;
  v32 = (float)((float)(_S4 * v27) + (float)(v26 * _S3)) + (float)(v28 * _S6);
  v33 = (float)((float)(_S7 * v30) + (float)(v29 * _S5)) + (float)(v31 * _S17);
  if (v32 <= a5[36])
    v32 = a5[36];
  if (v33 <= a6[36])
    v33 = a6[36];
  v34 = v32 + v33;
  v35 = v9 + v34;
  v36 = v34 - v9;
  if (v35 < v36)
    v36 = v35;
  return v36 <= a7;
}

uint64_t sub_1B21ED9C4(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  uint64_t result;
  float v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v75;
  float v76;
  int8x16_t v77;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float v93;
  float v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int v105;
  int v106;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float32x4_t v115;
  float32x4_t v116[2];

  v10 = *(float32x4_t *)(a1 + 112);
  v11 = vmulq_f32(*a3, v10);
  v12 = (int8x16_t)vmulq_f32(v10, a3[1]);
  v13 = (int8x16_t)vmulq_f32(v10, a3[2]);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  v14 = vaddq_f32(v11, a3[3]);
  v15 = *(float32x4_t *)(a2 + 112);
  v16 = vmulq_f32(*a4, v15);
  v17 = (int8x16_t)vmulq_f32(v15, a4[1]);
  v18 = a4[3];
  v19 = (int8x16_t)vmulq_f32(v15, a4[2]);
  v20 = (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  v19.i32[3] = 0;
  ++dword_1EEFD49B8;
  *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32(*(int32x2_t *)v20.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 0);
  v21 = vsubq_f32(v14, vaddq_f32(v16, v18));
  v21.i32[3] = 0;
  v111 = v21;
  v116[0] = v21;
  v22 = *(unsigned int *)(a1 + 44);
  if ((int)v22 < 1)
  {
    v27 = 3.4028e38;
  }
  else
  {
    v23 = 0;
    v24 = dword_1EEFD59E0;
    v25 = byte_1EEF652F9;
    v26 = 48 * v22;
    v27 = 3.4028e38;
    do
    {
      v28 = *(_QWORD *)(a1 + 56) + v23;
      v21.i64[0] = *(_QWORD *)(v28 + 32);
      v21.i32[2] = *(_DWORD *)(v28 + 40);
      v29 = v21;
      v29.i32[3] = 0;
      v30 = (int8x16_t)vmulq_f32(v21, a3[2]);
      v31 = (int8x16_t)vmulq_f32(v29, *a3);
      v32 = vmulq_f32(v29, a3[1]);
      v30.i32[3] = 0;
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      v33 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v33.f32), 0);
      v34 = (int8x16_t)vmulq_f32(v32, v111);
      *(float32x2_t *)v33.f32 = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
      v35 = (float32x4_t)vextq_s8(v34, v34, 8uLL);
      *(float32x2_t *)v35.f32 = vadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v35.f32);
      v33.i32[0] = 0;
      v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v33, v35), 0), (int8x16_t)vnegq_f32(v32), (int8x16_t)v32);
      dword_1EEFD59E0 = ++v24;
      if (!v25 || sub_1B21ED88C(a3, a4, v116, &v115, (float *)a1, (float *)a2, v27))
      {
        ++dword_1EEFD59E4;
        v114 = 0.0;
        result = sub_1B21EE1B0(a1, a2, a3, a4, &v115, &v114, &v113, &v112);
        if (!(_DWORD)result)
          return result;
        v37 = v114;
        if (v114 < v27)
        {
          *a5 = v115;
          v27 = v37;
        }
        v24 = dword_1EEFD59E0;
        v25 = byte_1EEF652F9;
      }
      v23 += 48;
    }
    while (v26 != v23);
  }
  v38 = *(unsigned int *)(a2 + 44);
  if ((int)v38 >= 1)
  {
    v39 = 0;
    v40 = dword_1EEFD59E0;
    v41 = byte_1EEF652F9;
    v42 = 48 * v38;
    do
    {
      v43 = *(_QWORD *)(a2 + 56) + v39;
      v21.i64[0] = *(_QWORD *)(v43 + 32);
      v21.i32[2] = *(_DWORD *)(v43 + 40);
      v44 = v21;
      v44.i32[3] = 0;
      v45 = (int8x16_t)vmulq_f32(v21, a4[2]);
      v46 = (int8x16_t)vmulq_f32(v44, *a4);
      v47 = vmulq_f32(v44, a4[1]);
      v45.i32[3] = 0;
      *(float32x2_t *)v47.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL)));
      v48 = (float32x4_t)vextq_s8(v45, v45, 8uLL);
      *(float32x2_t *)&v47.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v48.f32), 0);
      v49 = (int8x16_t)vmulq_f32(v47, v111);
      *(float32x2_t *)v48.f32 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
      v50 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
      *(float32x2_t *)v50.f32 = vadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v50.f32);
      v48.i32[0] = 0;
      v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v48, v50), 0), (int8x16_t)vnegq_f32(v47), (int8x16_t)v47);
      dword_1EEFD59E0 = ++v40;
      if (!v41 || sub_1B21ED88C(a3, a4, v116, &v115, (float *)a1, (float *)a2, v27))
      {
        ++dword_1EEFD59E4;
        v114 = 0.0;
        result = sub_1B21EE1B0(a1, a2, a3, a4, &v115, &v114, &v113, &v112);
        if (!(_DWORD)result)
          return result;
        v51 = v114;
        if (v114 < v27)
        {
          *a5 = v115;
          v27 = v51;
        }
        v40 = dword_1EEFD59E0;
        v41 = byte_1EEF652F9;
      }
      v39 += 48;
    }
    while (v42 != v39);
  }
  v52 = *(_DWORD *)(a1 + 76);
  if (v52 >= 1)
  {
    v53 = 0;
    v54 = *(_DWORD *)(a2 + 76);
    v105 = -1;
    v106 = -1;
    do
    {
      if (v54 >= 1)
      {
        v55 = 0;
        v56 = *(float32x4_t *)(*(_QWORD *)(a1 + 88) + 16 * v53);
        v57 = (int8x16_t)vmulq_f32(v56, *a3);
        v58 = (int8x16_t)vmulq_f32(v56, a3[1]);
        v59 = (int8x16_t)vmulq_f32(v56, a3[2]);
        v59.i32[3] = 0;
        *(float32x2_t *)v57.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
        *(float32x2_t *)v59.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
        *(int8x8_t *)v58.i8 = vext_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v59.i8, 4uLL);
        v58.i64[1] = v57.i64[0];
        v108 = (float32x4_t)v58;
        v57.i64[1] = v59.i64[0];
        v110 = (float32x4_t)v57;
        do
        {
          v60 = *(float32x4_t *)(*(_QWORD *)(a2 + 88) + 16 * v55);
          v61 = vmulq_f32(v60, *a4);
          v62 = vmulq_f32(v60, a4[1]);
          v63 = (int8x16_t)vmulq_f32(v60, a4[2]);
          v20 = (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL);
          v63.i32[3] = 0;
          *(float32x2_t *)v64.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), *(int32x2_t *)v20.f32));
          *(float32x2_t *)v63.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
          *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v64.f32, *(int8x8_t *)v63.i8, 4uLL);
          v61.i64[1] = v64.i64[0];
          v64.i64[1] = v63.i64[0];
          v65 = (int8x16_t)vsubq_f32(vmulq_f32(v110, v61), vmulq_f32(v108, v64));
          v66.i64[0] = vextq_s8(v65, v65, 4uLL).u64[0];
          v66.i64[1] = v65.u32[0];
          if (fabsf(*(float *)&v65.i32[1]) > 0.000001
            || fabsf(v66.f32[1]) > 0.000001
            || fabsf(*(float *)v65.i32) > 0.000001)
          {
            v109 = v64;
            v67 = (int8x16_t)vmulq_f32(v66, v66);
            v68 = vmulq_n_f32(v66, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0]));
            v69 = (int8x16_t)vmulq_f32(v68, v111);
            *(float32x2_t *)v62.f32 = vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8);
            v70 = (float32x4_t)vextq_s8(v69, v69, 8uLL);
            *(float32x2_t *)v70.f32 = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v70.f32);
            v62.i32[0] = 0;
            v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v62, v70), 0), (int8x16_t)vnegq_f32(v68), (int8x16_t)v68);
            ++dword_1EEFD59E0;
            if (!byte_1EEF652F9 || sub_1B21ED88C(a3, a4, v116, &v115, (float *)a1, (float *)a2, v27))
            {
              ++dword_1EEFD59E4;
              v114 = 0.0;
              result = sub_1B21EE1B0(a1, a2, a3, a4, &v115, &v114, &v113, &v112);
              if (!(_DWORD)result)
                return result;
              v71 = v114;
              if (v114 < v27)
              {
                *a5 = v115;
                v103 = v109;
                v104 = v112;
                v101 = v113;
                v102 = v110;
                v105 = v55;
                v106 = v53;
                v27 = v71;
              }
              v54 = *(_DWORD *)(a2 + 76);
            }
          }
          ++v55;
        }
        while (v55 < v54);
        v52 = *(_DWORD *)(a1 + 76);
      }
      ++v53;
    }
    while (v53 < v52);
    if ((v106 & 0x80000000) == 0 && (v105 & 0x80000000) == 0)
    {
      v72 = vsubq_f32(v104, v101);
      v72.i32[3] = 0;
      v73 = (int8x16_t)vmulq_f32(v103, v102);
      LODWORD(_S1) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8)).u32[0];
      v75 = (int8x16_t)vmulq_f32(v102, v72);
      LODWORD(v76) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL), vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8)).u32[0];
      v77 = (int8x16_t)vmulq_f32(v103, v72);
      __asm { FMLS            S5, S1, V1.S[0] }
      v83 = -vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8)).f32[0];
      v84 = 0.0;
      if (_S5 != 0.0)
      {
        v85 = (float)(v76 + (float)(v83 * _S1)) / _S5;
        v84 = -1.0e30;
        if (v85 >= -1.0e30)
        {
          v84 = v85;
          if (v85 > 1.0e30)
            v84 = 1.0e30;
        }
      }
      v86 = v83 + (float)(v84 * _S1);
      if (v86 >= -1.0e30)
      {
        if (v86 > 1.0e30)
        {
          v88 = v76 + (float)(_S1 * 1.0e30);
          v84 = -1.0e30;
          v86 = 1.0e30;
          if (v88 >= -1.0e30)
          {
            v86 = 1.0e30;
            v84 = v88;
            if (v88 > 1.0e30)
            {
              v84 = 1.0e30;
              v86 = 1.0e30;
            }
          }
        }
      }
      else
      {
        v86 = -1.0e30;
        v87 = v76 + (float)(_S1 * -1.0e30);
        if (v87 >= -1.0e30)
        {
          v84 = 1.0e30;
          if (v87 <= 1.0e30)
            v84 = v87;
        }
        else
        {
          v84 = -1.0e30;
        }
      }
      v89 = vmulq_n_f32(v103, v86);
      v89.i32[3] = 0;
      v90 = vsubq_f32(v72, vmulq_n_f32(v102, v84));
      v90.i32[3] = 0;
      v91 = vaddq_f32(v89, v90);
      v92 = (int8x16_t)vmulq_f32(v91, v91);
      v93 = vadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)).f32[0];
      if (v93 > 0.00000011921)
      {
        v94 = sqrtf(v93);
        v95 = vmulq_n_f32(v91, 1.0 / v94);
        v96 = (int8x16_t)vmulq_f32(v95, v111);
        *(float32x2_t *)v20.f32 = vpadd_f32(*(float32x2_t *)v96.i8, *(float32x2_t *)v96.i8);
        v97 = (float32x4_t)vextq_s8(v96, v96, 8uLL);
        *(float32x2_t *)v97.f32 = vadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v20.f32);
        v20.i32[0] = 0;
        v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v20, v97), 0), (int8x16_t)vnegq_f32(v95), (int8x16_t)v95);
        v113 = vaddq_f32(v104, v89);
        (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(_QWORD *)a6 + 32))(a6, &v115, &v113, -v94);
      }
    }
  }
  v98 = (int8x16_t)vmulq_f32(*a5, v111);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL)).f32[0] < 0.0)
  {
    v99.i64[0] = 0x8000000080000000;
    v99.i64[1] = 0x8000000080000000;
    *(int8x16_t *)a5 = veorq_s8(*(int8x16_t *)a5, v99);
  }
  return 1;
}

uint64_t sub_1B21EE1B0(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float *a6, float32x4_t *a7, float32x4_t *a8)
{
  uint64_t result;
  float v15;
  BOOL v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0.0;
  v23 = 0.0;
  sub_1B21E2038(a1, a3, a5, (float *)&v25 + 1, (float *)&v25, &v22, &v21);
  sub_1B21E2038(a2, a4, a5, &v24, &v23, &v20, &v19);
  result = 0;
  if (*(float *)&v25 >= v24)
  {
    if (v23 >= *((float *)&v25 + 1))
    {
      v15 = *(float *)&v25 - v24;
      v16 = (float)(*(float *)&v25 - v24) < (float)(v23 - *((float *)&v25 + 1));
      if ((float)(*(float *)&v25 - v24) >= (float)(v23 - *((float *)&v25 + 1)))
        v15 = v23 - *((float *)&v25 + 1);
      *a6 = v15;
      v17 = &v22;
      if (v16)
        v17 = &v21;
      *a7 = *v17;
      v18 = &v19;
      if (v16)
        v18 = &v20;
      *a8 = *v18;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1B21EE2A8(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  unsigned __int32 *v23;
  unsigned int v24;
  float v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float v68;
  uint64_t v69;
  int8x16_t v70;
  float v71;
  BOOL v72;
  uint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  char v80;
  int v81;
  int v82;
  uint64_t v83;
  char v84;

  v15 = a4;
  v84 = 1;
  v83 = 0;
  v81 = 0;
  v82 = 0;
  v19 = *(unsigned int *)(a4 + 4);
  if ((int)v19 >= 1)
  {
    v84 = 1;
    v83 = sub_1B21FF5F0(16 * v19, 16);
    v82 = v19;
  }
  v20 = *(unsigned int *)(a2 + 44);
  if ((int)v20 >= 1)
  {
    v21 = 0;
    v22 = *a3;
    v23 = (unsigned __int32 *)(*(_QWORD *)(a2 + 56) + 40);
    v24 = -1;
    v25 = 3.4028e38;
    do
    {
      a12.i64[0] = *((_QWORD *)v23 - 1);
      a12.i32[2] = *v23;
      v26 = (int8x16_t)vmulq_f32(a12, a3[2]);
      a12.i32[3] = 0;
      v27 = (int8x16_t)vmulq_f32(v22, a12);
      v28 = vmulq_f32(a12, a3[1]);
      v26.i32[3] = 0;
      *(float32x2_t *)v28.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)));
      *(float32x2_t *)&v28.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
      v29 = (int8x16_t)vmulq_f32(v28, *a1);
      *(float32x2_t *)v26.i8 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8);
      a12 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
      a12.f32[0] = vadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)a12.f32).f32[0];
      if (a12.f32[0] < v25)
      {
        v25 = a12.f32[0];
        v24 = v21;
      }
      ++v21;
      v23 += 12;
    }
    while (v20 != v21);
    if ((v24 & 0x80000000) == 0)
    {
      v74 = a1;
      v75 = a5;
      v30 = *(_QWORD *)(a2 + 56);
      v31 = v30 + 48 * v24;
      v32 = *(unsigned int *)(v31 + 4);
      v73 = v30;
      if ((int)v32 < 1)
      {
        v52 = v15;
      }
      else
      {
        v33 = 0;
        v34 = v30 + 48 * v24;
        v76 = (uint64_t *)(v34 + 32);
        v77 = a2;
        v35 = (__int32 *)(v34 + 40);
        v36 = &v80;
        do
        {
          v37 = *(_QWORD *)(v31 + 16);
          v38 = *(_QWORD *)(v77 + 24);
          if (v32 - 1 == v33)
            v39 = 0;
          else
            v39 = v33 + 1;
          v40 = *(float32x4_t *)(v38 + 16 * *(int *)(v37 + 4 * v33));
          v41 = vsubq_f32(v40, *(float32x4_t *)(v38 + 16 * *(int *)(v37 + 4 * v39)));
          v42 = v41;
          v42.i32[3] = 0;
          v43 = a3[2];
          v44 = (int8x16_t)vmulq_f32(v43, v41);
          v45 = a3[1];
          v46 = (int8x16_t)vmulq_f32(*a3, v42);
          v47 = (int8x16_t)vmulq_f32(v45, v42);
          v44.i32[3] = 0;
          *(float32x2_t *)v47.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
          v48 = (float32x4_t)vextq_s8(v44, v44, 8uLL);
          *(float32x2_t *)v44.i8 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v48.f32);
          v48.i64[0] = *v76;
          v48.i32[2] = *v35;
          v49 = (int8x16_t)vmulq_f32(v43, v48);
          v48.i32[3] = 0;
          v50 = (int8x16_t)vmulq_f32(*a3, v48);
          v51 = (int8x16_t)vmulq_f32(v45, v48);
          v52 = (uint64_t)v36;
          *(float32x2_t *)v44.i8 = vpadd_f32(*(float32x2_t *)v44.i8, 0);
          v49.i32[3] = 0;
          *(float32x2_t *)v51.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
          *(float32x2_t *)v49.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
          *(int8x8_t *)v50.i8 = vext_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v44.i8, 4uLL);
          *(float32x2_t *)v44.i8 = vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v51.i8);
          *(float32x2_t *)v51.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v47.i8, (float32x2_t)vext_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v49.i8, 4uLL)), vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v51.i8));
          *(int8x8_t *)v47.i8 = vext_s8(*(int8x8_t *)v51.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v44.i8, vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v49.i8)), 4uLL);
          v47.i64[1] = v51.u32[0];
          v36 = (char *)v15;
          v44.i64[0] = 0x8000000080000000;
          v44.i64[1] = 0x8000000080000000;
          v53 = (float32x4_t)veorq_s8(v47, v44);
          v54 = (int8x16_t)vmulq_f32(v40, *a3);
          v55 = (int8x16_t)vmulq_f32(v40, v45);
          v56 = (int8x16_t)vmulq_f32(v40, v43);
          v56.i32[3] = 0;
          *(float32x2_t *)v43.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v55.i8));
          *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), 0);
          v57 = (int8x16_t)vmulq_f32(vaddq_f32(v43, a3[3]), v53);
          v79 = v53;
          sub_1B21ED520(v15, v52, &v79, -vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0]);
          if ((*(_DWORD *)(v15 + 4) & 0x80000000) != 0 && (*(_DWORD *)(v15 + 8) & 0x80000000) != 0)
          {
            v58 = *(_QWORD *)(v15 + 16);
            if (v58 && *(_BYTE *)(v15 + 24))
              sub_1B21FF5FC(v58);
            *(_BYTE *)(v15 + 24) = 1;
            *(_QWORD *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 8) = 0;
          }
          ++v33;
          *(_DWORD *)(v15 + 4) = 0;
          v15 = v52;
        }
        while (v32 != v33);
      }
      v59 = *(_DWORD *)(v52 + 4);
      if (v59 >= 1)
      {
        v60 = 0;
        v61 = v73 + 48 * v24;
        v22.i64[0] = *(_QWORD *)(v61 + 32);
        v22.i32[2] = *(_DWORD *)(v61 + 40);
        v62 = v22;
        v62.i32[3] = 0;
        v63 = (int8x16_t)vmulq_f32(v22, a3[2]);
        v64 = (int8x16_t)vmulq_f32(v62, *a3);
        v65 = (int8x16_t)vmulq_f32(v62, a3[1]);
        v63.i32[3] = 0;
        *(float32x2_t *)v66.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)));
        *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
        v67 = (int8x16_t)vmulq_f32(v66, a3[3]);
        v68 = *(float *)(v61 + 44)
            - vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0];
        v78 = v66;
        do
        {
          v69 = *(_QWORD *)(v52 + 16);
          v70 = (int8x16_t)vmulq_f32(v66, *(float32x4_t *)(v69 + 16 * v60));
          v71 = v68
              + vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
          if (v71 <= a6)
            v71 = a6;
          if (v71 <= a7)
          {
            v79 = *(float32x4_t *)(v69 + 16 * v60);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)v75 + 32))(v75, v74, &v79);
            v66 = v78;
            v59 = *(_DWORD *)(v52 + 4);
          }
          ++v60;
        }
        while (v60 < v59);
      }
    }
  }
  if (v83)
    v72 = v84 == 0;
  else
    v72 = 1;
  if (!v72)
    sub_1B21FF5FC(v83);
}

void sub_1B21EE6CC(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, float a7, float a8, double a9, float32x4_t a10, double a11, float32x4_t a12, float32x4_t a13)
{
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int32 *v23;
  int v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  __int128 v42;
  float32x4_t v43;
  int8x16_t v44;
  BOOL v45;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  char v54[4];
  int v55;
  int v56;
  uint64_t v57;
  char v58;
  float32x4_t v59[2];

  v17 = (int8x16_t)vmulq_f32(*a1, *a1);
  *(float32x2_t *)v18.f32 = vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  *(float *)v17.i32 = sqrtf(vadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)).f32[0]);
  v18.i32[0] = 1.0;
  v19 = vmulq_n_f32(*a1, 1.0 / *(float *)v17.i32);
  v59[0] = v19;
  v20 = *(unsigned int *)(a3 + 44);
  v21 = *(_QWORD *)(a3 + 56);
  if ((int)v20 < 1)
  {
    v24 = -1;
  }
  else
  {
    v22 = 0;
    v18 = a5[1];
    a10 = a5[2];
    v23 = (unsigned __int32 *)(v21 + 40);
    v24 = -1;
    LODWORD(a11) = -8388609;
    a12.i64[0] = 0;
    do
    {
      a13.i64[0] = *((_QWORD *)v23 - 1);
      a13.i32[2] = *v23;
      v25 = (int8x16_t)vmulq_f32(a13, a10);
      a13.i32[3] = 0;
      v26 = (int8x16_t)vmulq_f32(*a5, a13);
      v27 = vmulq_f32(a13, v18);
      v25.i32[3] = 0;
      *(float32x2_t *)v27.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)));
      *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
      v28 = (int8x16_t)vmulq_f32(v19, v27);
      *(float32x2_t *)v25.i8 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
      a13 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
      *(float32x2_t *)a13.f32 = vadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)a13.f32);
      if (a13.f32[0] > *(float *)&a11)
      {
        *(float *)&a11 = a13.f32[0];
        v24 = v22;
      }
      ++v22;
      v23 += 12;
    }
    while (v20 != v22);
  }
  v58 = 1;
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v29 = v21 + 48 * v24;
  v30 = *(unsigned int *)(v29 + 4);
  if ((int)v30 >= 1)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      v34 = *(float32x4_t *)(*(_QWORD *)(a3 + 24) + 16 * *(int *)(*(_QWORD *)(v29 + 16) + 4 * v31));
      v35 = *a5;
      v36 = a5[1];
      a10 = a5[2];
      a12 = a5[3];
      if (v32 != (_DWORD)v31)
        goto LABEL_24;
      v37 = v31 ? 2 * v32 : 1;
      if (v32 >= v37)
        goto LABEL_24;
      v52 = *(float32x4_t *)(*(_QWORD *)(a3 + 24) + 16 * *(int *)(*(_QWORD *)(v29 + 16) + 4 * v31));
      v53 = a5[3];
      v50 = a5[2];
      v51 = a5[1];
      v49 = *a5;
      if (v37)
      {
        v38 = sub_1B21FF5F0(16 * v37, 16);
        if (v31)
          goto LABEL_17;
      }
      else
      {
        v38 = 0;
        if (v31)
        {
LABEL_17:
          v39 = v32;
          v40 = (_OWORD *)v38;
          v41 = (__int128 *)v33;
          do
          {
            v42 = *v41++;
            *v40++ = v42;
            --v39;
          }
          while (v39);
LABEL_22:
          sub_1B21FF5FC(v33);
          goto LABEL_23;
        }
      }
      if (v33)
        goto LABEL_22;
LABEL_23:
      v33 = v38;
      v32 = v37;
      v34 = v52;
      a12 = v53;
      a10 = v50;
      v36 = v51;
      v35 = v49;
LABEL_24:
      v43 = vmulq_f32(v35, v34);
      v44 = (int8x16_t)vmulq_f32(v34, v36);
      v18 = vmulq_f32(v34, a10);
      *(_QWORD *)&a11 = vextq_s8(v44, v44, 8uLL).u64[0];
      *(int32x2_t *)a10.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), *(int32x2_t *)&a11);
      v18.i32[3] = 0;
      *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), *(float32x2_t *)a10.f32);
      *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), 0);
      *(float32x4_t *)(v33 + 16 * v31++) = vaddq_f32(v43, a12);
      if (v31 == v30)
        goto LABEL_27;
    }
  }
  v33 = 0;
  v32 = 0;
  LODWORD(v31) = 0;
LABEL_27:
  v55 = v31;
  v56 = v32;
  v57 = v33;
  v58 = 1;
  if (v24 < 0)
  {
    v45 = 0;
    if (!v33)
      return;
  }
  else
  {
    sub_1B21EE2A8(v59, a2, a4, (uint64_t)v54, a6, a7, a8, *(double *)v18.i64, *(double *)a10.i64, a11, *(double *)a12.i64, a13);
    v33 = v57;
    v45 = v58 == 0;
    if (!v57)
      return;
  }
  if (!v45)
    sub_1B21FF5FC(v33);
}

__n128 sub_1B21EE988(uint64_t a1, _OWORD *a2, __n128 *a3, int a4)
{
  __n128 result;

  *(_QWORD *)a1 = off_1E63CD838;
  *(_OWORD *)(a1 + 16) = *a2;
  result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = 1065353216;
  return result;
}

void sub_1B21EE9B0(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  int8x8_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  __int32 v20;
  float v22;
  int8x16_t v23;
  float v24;
  float32x4_t v25;
  int8x8_t v26;
  float32x4_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x8_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float v45;
  int8x16_t v47;
  int v48;
  float v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;

  v2 = a2[1];
  v3 = vsubq_f32(v2, *a2);
  v4 = (int8x8_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v3.i32[3] = 0;
  v5 = a2[2];
  v6 = vsubq_f32(v5, *a2);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)v3.f32, v4, 4uLL);
  v8.i64[1] = v3.i64[0];
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v9.i64[1] = v6.i64[0];
  v10 = (int8x16_t)vsubq_f32(vmulq_f32(v9, v3), vmulq_f32(v8, v6));
  v11.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v11.i64[1] = v10.u32[0];
  v12 = (int8x16_t)vmulq_f32(*a2, v11);
  *(float32x2_t *)v12.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = a1[1];
  v14 = a1[2];
  v15 = (int8x16_t)vmulq_f32(v13, v11);
  v16 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), *(float32x2_t *)v12.i8);
  v17 = (int8x16_t)vmulq_f32(v14, v11);
  v18 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), *(float32x2_t *)v12.i8);
  if (vmul_f32(v16, v18).f32[0] < 0.0)
  {
    v20 = a1[3].i32[0];
    if (v16.f32[0] > 0.0 || (a1[3].i32[0] & 1) == 0)
    {
      v22 = vdiv_f32(v16, vsub_f32(v16, v18)).f32[0];
      if (v22 < a1[3].f32[1])
      {
        v23 = (int8x16_t)vmulq_f32(v11, v11);
        v24 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)).f32[0];
        v25 = vaddq_f32(v13, vmulq_n_f32(vsubq_f32(v14, v13), v22));
        v27 = vsubq_f32(*a2, v25);
        v26 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
        v27.i32[3] = 0;
        v29 = vsubq_f32(v2, v25);
        v28 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        v29.i32[3] = 0;
        *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v27.f32, v26, 4uLL);
        v30.i64[1] = v27.i64[0];
        *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v29.f32, v28, 4uLL);
        v31.i64[1] = v29.i64[0];
        v32 = (int8x16_t)vsubq_f32(vmulq_f32(v31, v27), vmulq_f32(v30, v29));
        v33.i64[0] = vextq_s8(v32, v32, 4uLL).u64[0];
        v33.i64[1] = v32.u32[0];
        v34 = -0.0001 * v24;
        v35 = (int8x16_t)vmulq_f32(v11, v33);
        if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0] >= (float)(-0.0001 * v24))
        {
          v36 = vsubq_f32(v5, v25);
          v37 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
          v36.i32[3] = 0;
          *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v36.f32, v37, 4uLL);
          v38.i64[1] = v36.i64[0];
          v39 = (int8x16_t)vsubq_f32(vmulq_f32(v38, v29), vmulq_f32(v31, v36));
          v40.i64[0] = vextq_s8(v39, v39, 4uLL).u64[0];
          v40.i64[1] = v39.u32[0];
          v41 = (int8x16_t)vmulq_f32(v11, v40);
          v42 = (int8x16_t)vsubq_f32(vmulq_f32(v30, v36), vmulq_f32(v38, v27));
          v43.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
          v43.i64[1] = v42.u32[0];
          v44 = (int8x16_t)vmulq_f32(v11, v43);
          LODWORD(v45) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8)).u32[0];
          if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8)).f32[0] >= v34&& v45 >= v34)
          {
            v47 = (int8x16_t)vmulq_n_f32(v11, 1.0 / sqrtf(v24));
            v53 = v47;
            v48 = v20 & 2;
            if (v16.f32[0] <= 0.0 && v48 == 0)
            {
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52 = veorq_s8(v47, v51);
              v50 = (*(float (**)(float32x4_t *, int8x16_t *))(a1->i64[0] + 24))(a1, &v52);
            }
            else
            {
              v50 = (*(float (**)(float32x4_t *, int8x16_t *))(a1->i64[0] + 24))(a1, &v53);
            }
            a1[3].f32[1] = v50;
          }
        }
      }
    }
  }
}

uint64_t sub_1B21EEBD4(uint64_t result, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, float a6)
{
  *(_QWORD *)result = off_1E63CDAA0;
  *(_QWORD *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = *a3;
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = a3[2];
  *(_OWORD *)(result + 64) = a3[3];
  *(_OWORD *)(result + 80) = *a4;
  *(_OWORD *)(result + 96) = a4[1];
  *(_OWORD *)(result + 112) = a4[2];
  *(_OWORD *)(result + 128) = a4[3];
  *(_OWORD *)(result + 144) = *a5;
  *(_OWORD *)(result + 160) = a5[1];
  *(_OWORD *)(result + 176) = a5[2];
  *(_OWORD *)(result + 192) = a5[3];
  *(_DWORD *)(result + 208) = 1065353216;
  *(float *)(result + 212) = a6;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

double sub_1B21EEC54(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  int8x16_t v9;
  float v10;
  _QWORD v12[6];
  void *v13;
  uint64_t (**v14)();
  float32x4_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  int v19;
  _BYTE v20[320];
  int v21;
  char v22;
  double (**v23)(_QWORD *);
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_1B21E464C((uint64_t)&v23);
  v23 = &off_1E63CC310;
  v24 = 1;
  v8 = a2[1];
  v26 = *a2;
  v27 = v8;
  v28 = a2[2];
  v25 = *(_DWORD *)(a1 + 212);
  v21 = 953267991;
  v22 = 0;
  v13 = &unk_1E63CDB08;
  sub_1B21E8718(v12, *(_QWORD *)(a1 + 8), (uint64_t)&v23, (uint64_t)v20, (uint64_t)&v13);
  v14 = off_1E63CE0A0;
  v18 = 0;
  v17 = 1.0;
  v19 = *(_DWORD *)(a1 + 216);
  if (sub_1B21E8B1C((uint64_t)v12, a1 + 16, a1 + 80, a1 + 144, a1 + 144, (uint64_t)&v14))
  {
    v9 = (int8x16_t)vmulq_f32(v15, v15);
    v10 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0];
    if (v10 > 0.0001 && v17 < *(float *)(a1 + 208))
    {
      v15 = vmulq_n_f32(v15, 1.0 / sqrtf(v10));
      (*(void (**)(uint64_t, float32x4_t *, uint64_t *, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 24))(a1, &v15, &v16, a3, a4, v17);
    }
  }
  nullsub_16(v12);
  return sub_1B21E4670(&v23);
}

_QWORD *sub_1B21EEDF0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = &off_1E63CD0B8;
  result[1] = a4;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t sub_1B21EEE04(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x4_t v52;
  int v53;
  int8x16_t v54;
  int8x16_t v55;
  float v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  __n128 v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;

  sub_1B21EF418(a1[1]);
  v75 = a2[3];
  v73 = a4[2];
  v74 = a4[3];
  v12 = *a2;
  v13 = a2[1];
  v71 = a4[1];
  v72 = *a4;
  v14 = (int8x16_t)vsubq_f32(vsubq_f32(a3[3], v75), vsubq_f32(a5[3], v74));
  v14.i32[3] = 0;
  v64 = (float32x4_t)v14;
  v15 = a1[2];
  v16.i64[0] = 0x8000000080000000;
  v16.i64[1] = 0x8000000080000000;
  v68 = v13;
  v69 = *a2;
  v12.i32[3] = 0;
  v13.i32[3] = 0;
  v17 = (float32x4_t)veorq_s8(v14, v16);
  v70 = a2[2];
  v18 = v70;
  v18.i32[3] = 0;
  v66 = v13;
  v67 = v12;
  v65 = v18;
  v80 = vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v17.f32[0]), vmulq_lane_f32(v13, *(float32x2_t *)v17.f32, 1)), vmulq_laneq_f32(v18, v17, 2));
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, float32x4_t *))(*(_QWORD *)v15 + 128))(&v82, v15, &v80);
  v19 = vmulq_f32(*a2, v82);
  v20 = (int8x16_t)vmulq_f32(v82, a2[1]);
  v21 = (int8x16_t)vmulq_f32(v82, a2[2]);
  v21.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
  v76 = vaddq_f32(v19, a2[3]);
  v81 = v76;
  v22 = *a4;
  v23 = a4[1];
  v22.i32[3] = 0;
  v23.i32[3] = 0;
  v24 = a1[3];
  v25 = a4[2];
  v25.i32[3] = 0;
  v79 = vaddq_f32(vaddq_f32(vmulq_n_f32(v22, v64.f32[0]), vmulq_lane_f32(v23, *(float32x2_t *)v64.f32, 1)), vmulq_laneq_f32(v25, v64, 2));
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, float32x4_t *))(*(_QWORD *)v24 + 128))(&v82, v24, &v79);
  v26 = vmulq_f32(*a4, v82);
  v27 = (int8x16_t)vmulq_f32(v82, a4[1]);
  v28 = (int8x16_t)vmulq_f32(v82, a4[2]);
  v28.i32[3] = 0;
  *(float32x2_t *)v26.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v27.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)));
  *(float32x2_t *)&v26.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
  v80 = vaddq_f32(v26, a4[3]);
  v29 = vsubq_f32(v76, v80);
  v29.i32[3] = 0;
  v82 = v29;
  v30 = (int8x16_t)vmulq_f32(v29, v29);
  v76.i32[0] = 0;
  v60 = 0u;
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).f32[0] > 0.0001)
  {
    v31 = v72;
    v31.i32[3] = 0;
    v63 = v31;
    v32 = v71;
    v32.i32[3] = 0;
    v62 = v32;
    v33 = v73;
    v33.i32[3] = 0;
    v61 = v33;
    v60 = 0u;
    v76 = 0u;
    v34 = -33;
    do
    {
      if (__CFADD__(v34++, 1))
        break;
      v36 = a1[2];
      v37.i64[0] = 0x8000000080000000;
      v37.i64[1] = 0x8000000080000000;
      v38 = (float32x4_t)veorq_s8((int8x16_t)v82, v37);
      v77 = (__n128)vaddq_f32(vmulq_laneq_f32(v65, v38, 2), vaddq_f32(vmulq_n_f32(v67, v38.f32[0]), vmulq_lane_f32(v66, *(float32x2_t *)v38.f32, 1)));
      (*(void (**)(float32x4_t *__return_ptr, uint64_t, __n128 *))(*(_QWORD *)v36 + 128))(&v78, v36, &v77);
      v39 = vmulq_f32(v69, v78);
      v40 = (int8x16_t)vmulq_f32(v68, v78);
      v41 = (int8x16_t)vmulq_f32(v70, v78);
      v41.i32[3] = 0;
      *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
      *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
      v81 = vaddq_f32(v75, v39);
      v42 = a1[3];
      v77 = (__n128)vaddq_f32(vmulq_laneq_f32(v61, v82, 2), vaddq_f32(vmulq_n_f32(v63, v82.f32[0]), vmulq_lane_f32(v62, *(float32x2_t *)v82.f32, 1)));
      (*(void (**)(float32x4_t *__return_ptr, uint64_t, __n128 *))(*(_QWORD *)v42 + 128))(&v78, v42, &v77);
      v43 = vmulq_f32(v72, v78);
      v44 = (int8x16_t)vmulq_f32(v71, v78);
      v45 = (int8x16_t)vmulq_f32(v73, v78);
      v45.i32[3] = 0;
      *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)));
      *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
      v46 = vaddq_f32(v74, v43);
      v47 = vsubq_f32(v81, v46);
      v47.i32[3] = 0;
      v79 = v47;
      v80 = v46;
      if (v76.f32[0] > 1.0)
        return 0;
      v48 = (int8x16_t)vmulq_f32(v82, v47);
      v49 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
      if (v49.f32[0] > 0.0)
      {
        v50 = (int8x16_t)vmulq_f32(v82, v64);
        v51 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8));
        if (v51.f32[0] >= -1.4211e-14)
          return 0;
        v52 = v76;
        v52.f32[0] = v76.f32[0] - vdiv_f32(v49, v51).f32[0];
        v75 = vaddq_f32(a2[3], vmulq_n_f32(vsubq_f32(a3[3], a2[3]), v52.f32[0]));
        v76 = v52;
        v74 = vaddq_f32(a4[3], vmulq_n_f32(vsubq_f32(a5[3], a4[3]), v52.f32[0]));
        v60 = v82;
      }
      if ((sub_1B21EFF60((float *)a1[1], &v79) & 1) == 0)
        sub_1B21EF454((int *)a1[1], &v79, &v81, (__n128 *)&v80);
      sub_1B21EFF34((__n128 *)a1[1], (__n128 *)&v82);
      if (!v53)
        break;
      v54 = (int8x16_t)vmulq_f32(v82, v82);
    }
    while (vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0] > 0.0001);
  }
  *(_DWORD *)(a6 + 176) = v76.i32[0];
  v55 = (int8x16_t)vmulq_f32(v60, v60);
  v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).f32[0];
  v57 = 0uLL;
  if (v56 >= 1.4211e-14)
    v57 = vmulq_n_f32(v60, 1.0 / sqrtf(v56));
  *(float32x4_t *)(a6 + 144) = v57;
  v58 = (int8x16_t)vmulq_f32(v57, v64);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0] >= (float)-*(float *)(a6 + 192))return 0;
  sub_1B21F0004(a1[1], &v78, &v77);
  *(__n128 *)(a6 + 160) = v77;
  return 1;
}

void sub_1B21EF304(uint64_t a1)
{
  nullsub_16(a1);
  JUMPOUT(0x1B5E22E18);
}

__n128 sub_1B21EF328(uint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 4)
  {
    if ((*a2 & 8) == 0)
    {
      *(_DWORD *)a1 = --v2;
      v3 = a1 + 16 * v2;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(v3 + 16);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(v3 + 96);
      result = *(__n128 *)(v3 + 176);
      *(__n128 *)(a1 + 224) = result;
    }
    goto LABEL_5;
  }
  if (v2 == 3)
  {
LABEL_5:
    if ((*a2 & 4) == 0)
    {
      *(_DWORD *)a1 = --v2;
      v5 = a1 + 16 * v2;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(v5 + 96);
      result = *(__n128 *)(v5 + 176);
      *(__n128 *)(a1 + 208) = result;
    }
    goto LABEL_9;
  }
  if ((int)v2 < 2)
  {
    if (v2 != 1)
      return result;
    goto LABEL_11;
  }
  v2 = 2;
LABEL_9:
  if ((*a2 & 2) == 0)
  {
    *(_DWORD *)a1 = --v2;
    v6 = a1 + 16 * v2;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(v6 + 96);
    result = *(__n128 *)(v6 + 176);
    *(__n128 *)(a1 + 192) = result;
  }
LABEL_11:
  if ((*a2 & 1) == 0)
  {
    v7 = v2 - 1;
    *(_DWORD *)a1 = v7;
    v8 = *(_OWORD *)(a1 + 96 + 16 * v7);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 16 + 16 * v7);
    *(_OWORD *)(a1 + 96) = v8;
    result = *(__n128 *)(a1 + 176 + 16 * v7);
    *(__n128 *)(a1 + 176) = result;
  }
  return result;
}

double sub_1B21EF418(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 324) = 0;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 384) = 1;
  result = 5.72459157e141;
  *(_OWORD *)(a1 + 304) = xmmword_1B22C9FA0;
  *(_BYTE *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 356) = 0;
  *(_BYTE *)(a1 + 352) &= 0xF0u;
  return result;
}

__n128 sub_1B21EF454(int *a1, _OWORD *a2, _OWORD *a3, __n128 *a4)
{
  __n128 result;

  *((_OWORD *)a1 + 19) = *a2;
  *((_BYTE *)a1 + 384) = 1;
  *(_OWORD *)&a1[4 * *a1 + 4] = *a2;
  *(_OWORD *)&a1[4 * *a1 + 24] = *a3;
  result = *a4;
  *(__n128 *)&a1[4 * (*a1)++ + 44] = *a4;
  return result;
}

BOOL sub_1B21EF4A4(uint64_t a1)
{
  char v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x2_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float v14;
  char v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v50;

  if (*(_BYTE *)(a1 + 384))
  {
    *(_QWORD *)(a1 + 356) = 0;
    *(_QWORD *)(a1 + 364) = 0;
    *(_BYTE *)(a1 + 372) = 0;
    v2 = *(_BYTE *)(a1 + 352) & 0xF0;
    *(_BYTE *)(a1 + 352) = v2;
    *(_BYTE *)(a1 + 384) = 0;
    switch(*(_DWORD *)a1)
    {
      case 1:
        v3 = *(float32x4_t *)(a1 + 96);
        v4 = *(float32x4_t *)(a1 + 176);
        *(float32x4_t *)(a1 + 256) = v3;
        *(float32x4_t *)(a1 + 272) = v4;
        v5 = vsubq_f32(v3, v4);
        v5.i32[3] = 0;
        *(float32x4_t *)(a1 + 288) = v5;
        *(_BYTE *)(a1 + 372) = 0;
        *(_OWORD *)(a1 + 356) = xmmword_1B2244DB0;
        v6 = 1;
        goto LABEL_24;
      case 2:
        v7 = *(float32x4_t *)(a1 + 16);
        v8 = vsubq_f32((float32x4_t)0, v7);
        v8.i32[3] = 0;
        v9 = vsubq_f32(*(float32x4_t *)(a1 + 32), v7);
        v9.i32[3] = 0;
        v10 = (int8x16_t)vmulq_f32(v8, v9);
        v11 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
        if (v11.f32[0] <= 0.0)
        {
          v14 = 0.0;
          v15 = 1;
        }
        else
        {
          v12 = (int8x16_t)vmulq_f32(v9, v9);
          v13 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8));
          if ((vcgt_f32(v13, v11).u8[0] & 1) != 0)
          {
            LODWORD(v14) = vdiv_f32(v11, v13).u32[0];
            v15 = 3;
          }
          else
          {
            v14 = 1.0;
            v15 = 2;
          }
        }
        *(_BYTE *)(a1 + 352) = v2 | v15;
        *(float *)(a1 + 356) = 1.0 - v14;
        *(float *)(a1 + 360) = v14;
        *(_QWORD *)(a1 + 364) = 0;
        v42 = *(float32x4_t *)(a1 + 96);
        v43 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 112), v42), v14);
        v43.i32[3] = 0;
        v44 = vaddq_f32(v42, v43);
        v45 = *(float32x4_t *)(a1 + 176);
        v46 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 192), v45), v14);
        v46.i32[3] = 0;
        v47 = vaddq_f32(v45, v46);
        *(float32x4_t *)(a1 + 256) = v44;
        *(float32x4_t *)(a1 + 272) = v47;
        v48 = vsubq_f32(v44, v47);
        v48.i32[3] = 0;
        *(float32x4_t *)(a1 + 288) = v48;
        sub_1B21EF328(a1, (_BYTE *)(a1 + 352));
        v6 = 0;
        if (*(float *)(a1 + 356) < 0.0)
          goto LABEL_24;
        if (*(float *)(a1 + 360) < 0.0)
          goto LABEL_22;
        v41 = *(float *)(a1 + 364);
        goto LABEL_21;
      case 3:
        v50 = 0uLL;
        sub_1B21EF7E4(a1, &v50, (float32x4_t *)(a1 + 16), (float32x4_t *)(a1 + 32), (float32x4_t *)(a1 + 48), (float32x4_t *)(a1 + 336));
        v16 = *(float *)(a1 + 356);
        v17 = vmulq_n_f32(*(float32x4_t *)(a1 + 96), v16);
        v17.i32[3] = 0;
        v18 = *(float *)(a1 + 360);
        v19 = vmulq_n_f32(*(float32x4_t *)(a1 + 112), v18);
        v19.i32[3] = 0;
        v20 = vaddq_f32(v17, v19);
        v21 = *(float *)(a1 + 364);
        v22 = vmulq_n_f32(*(float32x4_t *)(a1 + 128), v21);
        v22.i32[3] = 0;
        v23 = vaddq_f32(v20, v22);
        v24 = vmulq_n_f32(*(float32x4_t *)(a1 + 176), v16);
        v24.i32[3] = 0;
        v25 = vmulq_n_f32(*(float32x4_t *)(a1 + 192), v18);
        v25.i32[3] = 0;
        v26 = vaddq_f32(v24, v25);
        v27 = vmulq_n_f32(*(float32x4_t *)(a1 + 208), v21);
        goto LABEL_11;
      case 4:
        v50 = 0uLL;
        if (sub_1B21EFA68(a1, &v50, (float32x4_t *)(a1 + 16), (float32x4_t *)(a1 + 32), (float32x4_t *)(a1 + 48), (float32x4_t *)(a1 + 64), a1 + 336))
        {
          v28 = *(float *)(a1 + 356);
          v29 = vmulq_n_f32(*(float32x4_t *)(a1 + 96), v28);
          v29.i32[3] = 0;
          v30 = *(float *)(a1 + 360);
          v31 = vmulq_n_f32(*(float32x4_t *)(a1 + 112), v30);
          v31.i32[3] = 0;
          v32 = vaddq_f32(v29, v31);
          v31.i32[0] = *(_DWORD *)(a1 + 364);
          v33 = vmulq_n_f32(*(float32x4_t *)(a1 + 128), v31.f32[0]);
          v33.i32[3] = 0;
          v34 = vaddq_f32(v32, v33);
          v33.i32[0] = *(_DWORD *)(a1 + 368);
          v35 = vmulq_n_f32(*(float32x4_t *)(a1 + 144), v33.f32[0]);
          v35.i32[3] = 0;
          v23 = vaddq_f32(v34, v35);
          v36 = vmulq_n_f32(*(float32x4_t *)(a1 + 176), v28);
          v37 = vmulq_n_f32(*(float32x4_t *)(a1 + 192), v30);
          v38 = vmulq_n_f32(*(float32x4_t *)(a1 + 208), v31.f32[0]);
          v36.i32[3] = 0;
          v37.i32[3] = 0;
          v38.i32[3] = 0;
          v26 = vaddq_f32(vaddq_f32(v36, v37), v38);
          v27 = vmulq_n_f32(*(float32x4_t *)(a1 + 224), v33.f32[0]);
LABEL_11:
          v27.i32[3] = 0;
          v39 = vaddq_f32(v26, v27);
          *(float32x4_t *)(a1 + 256) = v23;
          *(float32x4_t *)(a1 + 272) = v39;
          v40 = vsubq_f32(v23, v39);
          v40.i32[3] = 0;
          *(float32x4_t *)(a1 + 288) = v40;
          sub_1B21EF328(a1, (_BYTE *)(a1 + 352));
          v6 = 0;
          if (*(float *)(a1 + 356) >= 0.0)
          {
            if (*(float *)(a1 + 360) < 0.0)
              goto LABEL_22;
            v41 = *(float *)(a1 + 364);
LABEL_21:
            if (v41 >= 0.0)
              v6 = *(float *)(a1 + 368) >= 0.0;
            else
LABEL_22:
              v6 = 0;
          }
LABEL_24:
          *(_BYTE *)(a1 + 324) = v6;
        }
        else if (*(_BYTE *)(a1 + 372))
        {
LABEL_16:
          v6 = 0;
          *(_BYTE *)(a1 + 324) = 0;
        }
        else
        {
          v6 = 1;
          *(_BYTE *)(a1 + 324) = 1;
          *(_QWORD *)(a1 + 288) = 0;
          *(_QWORD *)(a1 + 296) = 0;
        }
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 324);
  }
  return v6 != 0;
}

uint64_t sub_1B21EF7E4(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  __int8 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  float32x4_t v26;
  float v27;
  float32x4_t v29;
  int8x16_t v30;
  float32x2_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float v34;
  float32x4_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;

  v6 = a6[1].i8[0] & 0xF0;
  a6[1].i8[0] = v6;
  v7 = *a4;
  v8 = *a3;
  v9 = vsubq_f32(*a4, *a3);
  v9.i32[3] = 0;
  v10 = *a5;
  v11 = vsubq_f32(*a5, *a3);
  v11.i32[3] = 0;
  v12 = *a2;
  v13 = vsubq_f32(*a2, *a3);
  v13.i32[3] = 0;
  v14 = (int8x16_t)vmulq_f32(v9, v13);
  v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v16 = (int8x16_t)vmulq_f32(v11, v13);
  v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  if (v15.f32[0] <= 0.0 && v17.f32[0] <= 0.0)
  {
    *a6 = v8;
    a6[1].i8[0] = v6 | 1;
    v18 = 0.0;
    v19 = 1.0;
LABEL_11:
    v27 = 0.0;
    goto LABEL_12;
  }
  v20 = vsubq_f32(v12, v7);
  v20.i32[3] = 0;
  v21 = (int8x16_t)vmulq_f32(v9, v20);
  v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8));
  v23 = (int8x16_t)vmulq_f32(v11, v20);
  v24 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8));
  if (v22.f32[0] >= 0.0 && (vmvn_s8((int8x8_t)vcge_f32(v22, v24)).u8[0] & 1) == 0)
  {
    *a6 = v7;
    a6[1].i8[0] = v6 | 2;
    v18 = 1.0;
    v19 = 0.0;
    goto LABEL_11;
  }
  v25 = (float)(v15.f32[0] * v24.f32[0]) - (float)(v22.f32[0] * v17.f32[0]);
  if (v22.f32[0] <= 0.0 && v15.f32[0] >= 0.0 && v25 <= 0.0)
  {
    v18 = vdiv_f32(v15, vsub_f32(v15, v22)).f32[0];
    v26 = vmulq_n_f32(v9, v18);
    v26.i32[3] = 0;
    *a6 = vaddq_f32(v8, v26);
    a6[1].i8[0] = v6 | 3;
    v19 = 1.0 - v18;
    goto LABEL_11;
  }
  v29 = vsubq_f32(v12, v10);
  v29.i32[3] = 0;
  v30 = (int8x16_t)vmulq_f32(v9, v29);
  v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8));
  v32 = (int8x16_t)vmulq_f32(v11, v29);
  v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8));
  if (v33.f32[0] >= 0.0 && (vmvn_s8((int8x8_t)vcge_f32(v33, v31)).u8[0] & 1) == 0)
  {
    *a6 = v10;
    a6[1].i8[0] = v6 | 4;
    v27 = 1.0;
    v19 = 0.0;
LABEL_20:
    v18 = 0.0;
    goto LABEL_12;
  }
  v34 = (float)(v31.f32[0] * v17.f32[0]) - (float)(v15.f32[0] * v33.f32[0]);
  if (v33.f32[0] <= 0.0 && v34 <= 0.0 && v17.f32[0] >= 0.0)
  {
    v27 = vdiv_f32(v17, vsub_f32(v17, v33)).f32[0];
    v35 = vmulq_n_f32(v11, v27);
    v35.i32[3] = 0;
    *a6 = vaddq_f32(v8, v35);
    a6[1].i8[0] = v6 | 5;
    v19 = 1.0 - v27;
    goto LABEL_20;
  }
  v36 = (float)(v22.f32[0] * v33.f32[0]) - (float)(v31.f32[0] * v24.f32[0]);
  if (v36 <= 0.0 && (v37 = vsub_f32(v24, v22), v37.f32[0] >= 0.0) && (v38 = vsub_f32(v31, v33), v38.f32[0] >= 0.0))
  {
    v27 = vdiv_f32(v37, vadd_f32(v37, v38)).f32[0];
    v42 = vmulq_n_f32(vsubq_f32(v10, v7), v27);
    v42.i32[3] = 0;
    *a6 = vaddq_f32(v7, v42);
    a6[1].i8[0] = v6 | 6;
    v18 = 1.0 - v27;
    v19 = 0.0;
  }
  else
  {
    v39 = 1.0 / (float)(v25 + (float)(v36 + v34));
    v18 = v34 * v39;
    v27 = v25 * v39;
    v40 = vmulq_n_f32(v9, v18);
    v40.i32[3] = 0;
    v41 = vmulq_n_f32(v11, v27);
    v41.i32[3] = 0;
    *a6 = vaddq_f32(vaddq_f32(v8, v40), v41);
    a6[1].i8[0] = v6 | 7;
    v19 = (float)(1.0 - v18) - v27;
  }
LABEL_12:
  a6[1].f32[1] = v19;
  a6[1].f32[2] = v18;
  a6[1].f32[3] = v27;
  a6[2].i32[0] = 0;
  return 1;
}

uint64_t sub_1B21EFA68(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, uint64_t a7)
{
  char v8;
  float32x4_t v9;
  int8x8_t v10;
  float32x4_t v11;
  int8x8_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x8_t v18;
  int8x16_t v19;
  int32x2_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int32x2_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x4_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x4_t v40;
  uint64_t result;
  float32x4_t v47;
  int8x16_t v48;
  float v49;
  float32x4_t v50;
  int8x16_t v51;
  float v52;
  int8x16_t v53;
  float v54;
  int8x16_t v55;
  float v56;
  float32x4_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  int v61;
  float32x4_t v62;
  int8x16_t v63;
  float v64;
  float v65;
  float v66;
  float32x4_t v67;
  int8x16_t v68;
  float v69;
  int v70;
  int v71;
  float32x4_t v72;
  int8x16_t v73;
  int v74;
  float32x4_t v75;
  float v76;
  float v77;
  float v78;
  float32x4_t v79;
  char v80;
  _BYTE v81[12];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v80 = 0;
  *(float32x4_t *)a7 = *a2;
  v8 = *(_BYTE *)(a7 + 16);
  *(_BYTE *)(a7 + 16) = v8 | 0xF;
  v9 = vsubq_f32(*a4, *a3);
  v10 = (int8x8_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v9.i32[3] = 0;
  v11 = vsubq_f32(*a5, *a3);
  v12 = (int8x8_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v11.i32[3] = 0;
  *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v9.f32, v10, 4uLL);
  v13.i64[1] = v9.i64[0];
  *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v11.f32, v12, 4uLL);
  v14.i64[1] = v11.i64[0];
  v15 = (int8x16_t)vsubq_f32(vmulq_f32(v14, v9), vmulq_f32(v13, v11));
  v16.i64[0] = vextq_s8(v15, v15, 4uLL).u64[0];
  v16.i64[1] = v15.u32[0];
  v17 = vsubq_f32(*a6, *a3);
  v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  v19 = (int8x16_t)vmulq_f32(v17, v16);
  v20 = (int32x2_t)vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v21.i64[1] = v17.i64[0];
  v22 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v11), vmulq_f32(v14, v17));
  v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
  v23.i64[1] = v22.u32[0];
  v24 = (int8x16_t)vmulq_f32(v9, v23);
  v25 = (int32x2_t)vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  v26 = (int8x16_t)vsubq_f32(vmulq_f32(v13, v17), vmulq_f32(v21, v9));
  v27.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
  v27.i64[1] = v26.u32[0];
  v28 = (int8x16_t)vmulq_f32(v11, v27);
  v29 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
  v30 = vsubq_f32(*a6, *a4);
  v31 = (int8x8_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  v30.i32[3] = 0;
  v32 = vsubq_f32(*a5, *a4);
  v17.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v32.i32[3] = 0;
  *(int8x8_t *)v33.f32 = vext_s8(*(int8x8_t *)v30.f32, v31, 4uLL);
  v33.i64[1] = v30.i64[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v17.f32, 4uLL);
  v17.i64[1] = v32.i64[0];
  v34 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v30), vmulq_f32(v33, v32));
  v35.i64[0] = vextq_s8(v34, v34, 4uLL).u64[0];
  v35.i64[1] = v34.u32[0];
  v34.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
  v36 = vsubq_f32(*a3, *a4);
  v36.i32[3] = 0;
  v37 = vadd_f32(v29, *(float32x2_t *)v34.i8);
  v38 = (int8x16_t)vmulq_f32(v36, v35);
  v39 = vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  *(int32x2_t *)v40.f32 = vzip1_s32(v25, v20);
  v40.i64[1] = __PAIR64__(v39.u32[0], v37.u32[0]);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32((float32x4_t)vdupq_n_s32(0x322BCC76u), vmulq_f32(v40, v40)))) & 1) != 0)
  {
    result = 0;
    *(_BYTE *)(a7 + 36) = 1;
  }
  else
  {
    v47 = vsubq_f32(*a2, *a4);
    v47.i32[3] = 0;
    v48 = (int8x16_t)vmulq_f32(v47, v35);
    LODWORD(v49) = vmul_f32(v39, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).u32[0];
    v50 = vsubq_f32(*a2, *a3);
    v50.i32[3] = 0;
    v51 = (int8x16_t)vmulq_f32(v50, v27);
    LODWORD(v52) = vmul_f32(v37, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8))).u32[0];
    v53 = (int8x16_t)vmulq_f32(v50, v23);
    LODWORD(v54) = vmul_f32((float32x2_t)v25, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8))).u32[0];
    v55 = (int8x16_t)vmulq_f32(v50, v16);
    v56 = vmul_f32((float32x2_t)v20, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8))).f32[0];
    if (v56 < 0.0 || v54 < 0.0 || v52 < 0.0 || v49 < 0.0)
    {
      v77 = v52;
      v78 = v49;
      if (v56 >= 0.0)
      {
        v60 = 3.4028e38;
      }
      else
      {
        v75 = *a2;
        v76 = v54;
        a1 = sub_1B21EF7E4(a1, a2, a3, a4, a5, &v79);
        v54 = v76;
        v57 = vsubq_f32(v79, v75);
        v57.i32[3] = 0;
        v58 = (int8x16_t)vmulq_f32(v57, v57);
        v59 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0];
        v60 = 3.4028e38;
        if (v59 < 3.4028e38)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = v80 & 7 | v8 & 0xF0;
          v61 = *(_DWORD *)&v81[8];
          *(_QWORD *)(a7 + 20) = *(_QWORD *)v81;
          *(_DWORD *)(a7 + 28) = v61;
          *(_DWORD *)(a7 + 32) = 0;
          v60 = v59;
        }
      }
      if (v54 >= 0.0)
      {
        v65 = v77;
      }
      else
      {
        a1 = sub_1B21EF7E4(a1, a2, a3, a5, a6, &v79);
        v62 = vsubq_f32(v79, *a2);
        v62.i32[3] = 0;
        v63 = (int8x16_t)vmulq_f32(v62, v62);
        v64 = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).f32[0];
        v65 = v77;
        if (v64 < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = (2 * v80) & 0xC | v80 & 1 | *(_BYTE *)(a7 + 16) & 0xF0;
          *(_DWORD *)(a7 + 20) = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 24) = 0;
          *(_QWORD *)(a7 + 28) = *(_QWORD *)&v81[4];
          v60 = v64;
        }
      }
      if (v65 >= 0.0)
      {
        v66 = v78;
      }
      else
      {
        a1 = sub_1B21EF7E4(a1, a2, a3, a6, a4, &v79);
        v66 = v78;
        v67 = vsubq_f32(v79, *a2);
        v67.i32[3] = 0;
        v68 = (int8x16_t)vmulq_f32(v67, v67);
        v69 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)).f32[0];
        if (v69 < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = v80 & 1 | (2 * ((v80 & 4) != 0)) & 0xF7 | (8 * ((v80 & 2) != 0)) | *(_BYTE *)(a7 + 16) & 0xF0;
          v71 = *(_DWORD *)&v81[4];
          v70 = *(_DWORD *)&v81[8];
          *(_DWORD *)(a7 + 20) = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 24) = v70;
          *(_DWORD *)(a7 + 28) = 0;
          *(_DWORD *)(a7 + 32) = v71;
          v60 = v69;
        }
      }
      if (v66 < 0.0)
      {
        sub_1B21EF7E4(a1, a2, a4, a6, a5, &v79);
        v72 = vsubq_f32(v79, *a2);
        v72.i32[3] = 0;
        v73 = (int8x16_t)vmulq_f32(v72, v72);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0] < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = v80 & 4 | (2 * (v80 & 1)) & 0xF7 | (8 * ((v80 & 2) != 0)) | *(_BYTE *)(a7 + 16) & 0xF0;
          v74 = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 20) = 0;
          *(_DWORD *)(a7 + 24) = v74;
          *(int32x2_t *)(a7 + 28) = vrev64_s32(*(int32x2_t *)&v81[4]);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 sub_1B21EFF34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  sub_1B21EF4A4((uint64_t)a1);
  result = a1[18];
  *a2 = result;
  return result;
}

uint64_t sub_1B21EFF60(float *a1, float32x4_t *a2)
{
  uint64_t v2;
  char v3;
  float v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;

  v2 = *(unsigned int *)a1;
  if ((int)v2 <= 0)
  {
    v3 = 0;
    v4 = a2->f32[3];
  }
  else
  {
    v3 = 0;
    LODWORD(v4) = HIDWORD(*(unsigned __int128 *)a2);
    v5 = (float32x4_t *)(a1 + 4);
    do
    {
      v6 = *v5++;
      v7 = vsubq_f32(*a2, v6);
      v7.i32[3] = 0;
      v8 = (int8x16_t)vmulq_f32(v7, v7);
      v3 |= vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] <= a1[80];
      --v2;
    }
    while (v2);
  }
  if (v4 == a1[79] && a2->f32[2] == a1[78] && a2->f32[1] == a1[77])
    v3 |= a2->f32[0] == a1[76];
  return v3 & 1;
}

__n128 sub_1B21F0004(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  sub_1B21EF4A4(a1);
  *a2 = *(_OWORD *)(a1 + 256);
  result = *(__n128 *)(a1 + 272);
  *a3 = result;
  return result;
}

double sub_1B21F0044(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v7;
  __int128 v8;
  double result;

  sub_1B21FACE4(a1, 5, a2, a3);
  *(_QWORD *)v7 = off_1E63CCE00;
  *(_OWORD *)(v7 + 368) = *a4;
  *(_OWORD *)(v7 + 384) = a4[1];
  *(_OWORD *)(v7 + 400) = a4[2];
  *(_OWORD *)(v7 + 416) = a4[3];
  *(_OWORD *)(v7 + 432) = *a5;
  *(_OWORD *)(v7 + 448) = a5[1];
  *(_OWORD *)(v7 + 464) = a5[2];
  v8 = a5[3];
  *(_BYTE *)(v7 + 624) = 0;
  *(_DWORD *)(v7 + 592) = 0;
  *(_DWORD *)(v7 + 656) = -1082130432;
  *(_OWORD *)(v7 + 480) = v8;
  *(_OWORD *)(v7 + 496) = xmmword_1B22CA530;
  *(_OWORD *)(v7 + 512) = xmmword_1B22CA540;
  *(_QWORD *)(v7 + 688) = 0;
  *(_QWORD *)&result = 1060320051;
  *(_QWORD *)(v7 + 696) = 1060320051;
  return result;
}

double sub_1B21F00F8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;

  v4 = sub_1B21FABC4(a1, 5, a2);
  *(_QWORD *)v4 = off_1E63CCE00;
  v5 = *a3;
  *(_OWORD *)(v4 + 368) = *a3;
  v6 = a3[1];
  *(_OWORD *)(v4 + 384) = v6;
  v7 = a3[2];
  *(_OWORD *)(v4 + 400) = v7;
  *(_OWORD *)(v4 + 416) = a3[3];
  *(_OWORD *)(v4 + 432) = v5;
  *(_OWORD *)(v4 + 448) = v6;
  *(_OWORD *)(v4 + 464) = v7;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_DWORD *)(v4 + 592) = 0;
  *(_BYTE *)(v4 + 624) = 0;
  *(_DWORD *)(v4 + 656) = -1082130432;
  *(_OWORD *)(v4 + 496) = xmmword_1B22CA530;
  *(_OWORD *)(v4 + 512) = xmmword_1B22CA540;
  *(_QWORD *)(v4 + 688) = 0;
  *(_QWORD *)&result = 1060320051;
  *(_QWORD *)(v4 + 696) = 1060320051;
  return result;
}

void sub_1B21F018C(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v5;
  int v6;
  float v7;
  int v8;

  if (*(_BYTE *)(a1 + 595))
  {
    v3 = 0;
    *a2 = 0;
LABEL_9:
    a2[1] = v3;
    return;
  }
  *(_QWORD *)a2 = 0x300000003;
  sub_1B21F023C(a1, (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 40) + 304), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 304));
  if (*(_BYTE *)(a1 + 594))
  {
    v5 = *a2;
    v6 = a2[1];
    ++*a2;
    a2[1] = v6 - 1;
    v7 = *(float *)(a1 + 524);
    if (*(float *)(a1 + 512) < v7 && *(float *)(a1 + 516) < v7)
    {
      *a2 = v5 + 2;
      a2[1] = v6 - 2;
    }
  }
  if (*(_BYTE *)(a1 + 593))
  {
    v8 = a2[1];
    ++*a2;
    v3 = v8 - 1;
    goto LABEL_9;
  }
}

void sub_1B21F023C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  int32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int8x16_t v17;
  uint64_t v18;
  int32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x2_t v29;
  unint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  int32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x2_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float cosval;
  float sinval;
  float v103;
  float v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  float v111;
  __float2 v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  int8x16_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int8x16_t v158;
  float32x4_t v159;
  int8x16_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  uint64_t v165;
  float v166;
  float v167;
  float v168;
  float v169;
  int8x16_t v170;
  int8x16_t v171;
  float v172;
  __float2 v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int32x2_t v177;
  int32x2_t v178;
  float32x2_t v179;
  int8x16_t v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  float v192;
  __float2 v193;
  __float2 v194;
  int8x16_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  int8x16_t v199;
  float32x4_t v200;
  int8x16_t v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  BOOL v207;
  float v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int32x2_t v212;
  int32x2_t v213;
  float32x2_t v214;
  int8x16_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  int8x16_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float32x4_t v228;
  int32x2_t v229;
  float32x2_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  int32x2_t v234;
  int32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float v240;
  float v241;
  float v242;
  float v243;
  __int32 v244;
  float32x2_t v245;
  float32x2_t v246;
  __int32 v247;
  float32x4_t v248;
  float32x2_t v249;
  __int32 v250;
  float32x4_t v251;
  float32x2_t v252;
  float32x4_t v253;
  int32x2_t v254;
  int32x2_t v255;
  float32x4_t v256;
  float32x4_t v257;
  uint64_t v258;
  int8x16_t v259;
  float32x4_t v260[4];
  float32x4_t v261[4];

  *(_QWORD *)(a1 + 568) = 0;
  *(_WORD *)(a1 + 593) = 0;
  if (!*(_BYTE *)(a1 + 624) || *(_BYTE *)(a1 + 595))
  {
    sub_1B21D3EAC(a2->f32, v261);
    sub_1B21D3EAC((float *)(a1 + 368), v260);
    v10 = (int32x2_t)vextq_s8((int8x16_t)v261[0], (int8x16_t)v261[0], 8uLL).u64[0];
    v11 = (float32x2_t)vzip1_s32(v10, *(int32x2_t *)v261[0].f32);
    v12 = (int32x2_t)vextq_s8((int8x16_t)v260[0], (int8x16_t)v260[0], 8uLL).u64[0];
    v13 = vzip1_s32(v12, *(int32x2_t *)v260[0].f32);
    v14 = (float32x2_t)vext_s8(*(int8x8_t *)v261[0].f32, (int8x8_t)v10, 4uLL);
    v15 = vmul_f32(v11, (float32x2_t)vext_s8((int8x8_t)v12, *(int8x8_t *)v260[0].f32, 4uLL));
    *(float32x2_t *)v16.f32 = vmul_f32(v11, (float32x2_t)vext_s8(*(int8x8_t *)v260[0].f32, (int8x8_t)v12, 4uLL));
    *(float32x2_t *)&v16.u32[2] = vmul_f32(v14, (float32x2_t)vrev64_s32(v13));
    *(float32x2_t *)v17.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v261[0].f32, v260[0], 3), vmul_f32(v14, (float32x2_t)v13));
    v17.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v261[0].f32, *(float32x2_t *)v260[0].f32, 1), v15);
    v257 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v260[0], v261[0], 3), v16), (float32x4_t)veorq_s8(v17, (int8x16_t)xmmword_1B2269000));
    sub_1B21D3EAC(a3->f32, v261);
    sub_1B21D3EAC((float *)(a1 + 432), v260);
    v19 = (int32x2_t)vextq_s8((int8x16_t)v261[0], (int8x16_t)v261[0], 8uLL).u64[0];
    v20 = (float32x2_t)vzip1_s32(v19, *(int32x2_t *)v261[0].f32);
    v21 = (int32x2_t)vextq_s8((int8x16_t)v260[0], (int8x16_t)v260[0], 8uLL).u64[0];
    v22 = vzip1_s32(v21, *(int32x2_t *)v260[0].f32);
    v23 = (float32x2_t)vext_s8(*(int8x8_t *)v261[0].f32, (int8x8_t)v19, 4uLL);
    v24 = vmul_f32(v20, (float32x2_t)vext_s8((int8x8_t)v21, *(int8x8_t *)v260[0].f32, 4uLL));
    *(float32x2_t *)v25.f32 = vmul_f32(v20, (float32x2_t)vext_s8(*(int8x8_t *)v260[0].f32, (int8x8_t)v21, 4uLL));
    *(float32x2_t *)&v25.u32[2] = vmul_f32(v23, (float32x2_t)vrev64_s32(v22));
    *(float32x2_t *)v26.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v261[0].f32, v260[0], 3), vmul_f32(v23, (float32x2_t)v22));
    v26.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v261[0].f32, *(float32x2_t *)v260[0].f32, 1), v24);
    v27 = v257;
    v253 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v260[0], v261[0], 3), v25), (float32x4_t)veorq_s8(v26, (int8x16_t)xmmword_1B2269000));
    v28 = (float32x4_t)veorq_s8((int8x16_t)v253, (int8x16_t)xmmword_1B2269010);
    v29 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), *(int32x2_t *)v257.f32);
    v30 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL).u64[0];
    v254 = (int32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    v255 = vzip1_s32(v254, *(int32x2_t *)v28.f32);
    v31 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v254, 4uLL);
    v32 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
    v27.i64[0] = v28.i64[0];
    *(int32x2_t *)&v27.u32[2] = v255;
    *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v257, 3);
    v33.i64[1] = v30;
    *(float32x2_t *)v34.f32 = vmul_f32((float32x2_t)v29, v31);
    *(float32x2_t *)&v34.u32[2] = vmul_lane_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v257.f32, 1);
    v251 = v33;
    v252 = v32;
    *(float32x2_t *)v25.f32 = vmul_f32(v32, (float32x2_t)v255);
    *(float32x2_t *)&v25.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v29), v31);
    v256 = v28;
    v35 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v257, v28, 3), v25), (float32x4_t)veorq_s8((int8x16_t)vaddq_f32(v34, vmulq_f32(v33, v27)), (int8x16_t)xmmword_1B2269000));
    v36 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), *(int32x2_t *)v35.f32);
    v37 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL).u64[0];
    *(int32x2_t *)v38.f32 = vdup_laneq_s32((int32x4_t)v35, 3);
    v38.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL).u64[0];
    *(int32x2_t *)v39.f32 = v36;
    *(float32x2_t *)&v39.u32[2] = v37;
    *(float32x2_t *)v33.f32 = v37;
    v33.i64[1] = v35.i64[0];
    v40 = vaddq_f32((float32x4_t)veorq_s8((int8x16_t)vaddq_f32(vmulq_f32(v33, (float32x4_t)xmmword_1B2244DD0), vmulq_f32(v38, (float32x4_t)xmmword_1B2244E40)), (int8x16_t)xmmword_1B2269000), vmulq_f32(v39, (float32x4_t)xmmword_1B22684E0));
    v41 = (float32x4_t)veorq_s8((int8x16_t)v35, (int8x16_t)xmmword_1B2269010);
    v28.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    v42 = (float32x2_t)vzip1_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v40.f32);
    v43 = (int32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v44 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v41.f32);
    v45 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL).u64[0];
    v46 = vmul_laneq_f32(*(float32x2_t *)v40.f32, v41, 3);
    *(float32x2_t *)v28.f32 = vmul_laneq_f32(*(float32x2_t *)v28.f32, v41, 3);
    v47 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v41.f32, 1);
    *(float32x2_t *)v48.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)v43, 4uLL), v42);
    *(float32x2_t *)&v48.u32[2] = vmul_lane_f32(v45, v44, 1);
    v49 = vmulq_laneq_f32(v41, v40, 3);
    *(float32x2_t *)v41.f32 = vadd_f32(v46, vmul_f32(v44, v45));
    *(float32x2_t *)&v41.u32[2] = vadd_f32(v47, *(float32x2_t *)v28.f32);
    v50 = vaddq_f32(vsubq_f32(v49, v48), v41);
    v50.i32[3] = 0;
    v51 = (int8x16_t)vmulq_f32(v50, v50);
    v52 = vmulq_n_f32(v50, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0]));
    v53 = (int8x16_t)vmulq_f32(v52, (float32x4_t)xmmword_1B2244DB0);
    v54 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).f32[0];
    if (v54 >= -1.0)
    {
      v56.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL).u64[0];
      v56.i64[1] = v52.i64[0];
      v57 = (int8x16_t)vaddq_f32(vmulq_f32(v56, (float32x4_t)xmmword_1B2244DB0), vmulq_f32(v52, (float32x4_t)xmmword_1B2244F20));
      v58 = (float32x4_t)vextq_s8(vextq_s8(v57, v57, 0xCuLL), v57, 8uLL);
      v58.i32[3] = sqrtf((float)(v54 + 1.0) + (float)(v54 + 1.0));
      v59.i32[1] = 1056964608;
      v59.i64[1] = 0x3F0000003F000000;
      *(float *)v59.i32 = 1.0 / v58.f32[3];
      v60 = (float32x4_t)vzip1q_s32(v59, v59);
      v60.f32[2] = 1.0 / v58.f32[3];
      v55 = vmulq_f32(v58, v60);
    }
    else
    {
      v55 = (float32x4_t)xmmword_1B22465B0;
    }
    v61 = vmulq_f32(v55, v55);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    v261[0] = vmulq_n_f32(v55, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32).f32[0]));
    v62 = (float32x4_t)veorq_s8((int8x16_t)v261[0], (int8x16_t)xmmword_1B2269010);
    v61.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
    v63 = (float32x2_t)vzip1_s32(*(int32x2_t *)v61.f32, *(int32x2_t *)v62.f32);
    *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v62.f32, *(int8x8_t *)v61.f32, 4uLL);
    v64 = (float32x2_t)vrev64_s32(v36);
    v65 = vmul_lane_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v35.f32, 1);
    v66 = vmulq_laneq_f32(v35, v62, 3);
    *(float32x2_t *)&v62.u32[2] = v63;
    *(float32x2_t *)v67.f32 = vmul_f32((float32x2_t)v36, *(float32x2_t *)v61.f32);
    *(float32x2_t *)&v67.u32[2] = v65;
    *(float32x2_t *)v68.f32 = vmul_f32(v37, v63);
    *(float32x2_t *)&v68.u32[2] = vmul_f32(v64, *(float32x2_t *)v61.f32);
    v69 = vaddq_f32(vsubq_f32(v66, v68), (float32x4_t)veorq_s8((int8x16_t)vaddq_f32(v67, vmulq_f32(v38, v62)), (int8x16_t)xmmword_1B2269000));
    v70 = vmulq_f32(v69, v69);
    v71 = vpaddq_f32(v70, v70);
    v260[0] = vmulq_n_f32(v69, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0]));
    v72 = *(float *)(a1 + 512);
    v73 = *(float *)(a1 + 524);
    if (v72 >= v73)
    {
      v74 = *(float *)(a1 + 516);
      if (v74 >= v73)
      {
        v258 = 0;
        sub_1B21F2988((float32x2_t *)a1, v261, (float *)&v258 + 1, (float32x4_t *)&v259, (float *)&v258);
        v165 = v258;
        v166 = *(float *)(a1 + 496);
        if (*((float *)&v258 + 1) > (float)(*(float *)&v258 * v166))
        {
          *(_BYTE *)(a1 + 594) = 1;
          v167 = *((float *)&v165 + 1) - (float)(*(float *)&v165 * v166);
          v168 = 1.0;
          if (*((float *)&v165 + 1) < *(float *)&v165 && v166 < 1.0)
            v168 = v167 / (float)(*(float *)&v165 + (float)((float)-*(float *)&v165 * v166));
          *(float *)(a1 + 596) = v168;
          *(float *)(a1 + 572) = v167;
          if (fabsf(*(float *)&v259.i32[1]) <= 0.00000011921)
          {
            v171 = v259;
          }
          else
          {
            v169 = fabsf(*(float *)&v259.i32[1]* (float)((float)(v74 / v72) * (float)((float)-*(float *)&v259.i32[2] / *(float *)&v259.i32[1])));
            if (*(float *)&v259.i32[2] < 0.0)
              v169 = -v169;
            *(float *)&v259.i32[2] = v169;
            v170 = (int8x16_t)vmulq_f32((float32x4_t)v259, (float32x4_t)v259);
            v171 = (int8x16_t)vmulq_n_f32((float32x4_t)v259, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v170.i8, *(float32x2_t *)v170.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL)).f32[0]));
          }
          v174.i64[0] = 0x8000000080000000;
          v174.i64[1] = 0x8000000080000000;
          v175 = veorq_s8(v171, v174);
          v176 = (int8x16_t)v253;
          v177 = (int32x2_t)vextq_s8(v175, v175, 8uLL).u64[0];
          v178 = vzip1_s32(v177, *(int32x2_t *)v175.i8);
          v179 = (float32x2_t)vextq_s8(v176, v176, 4uLL).u64[0];
          *(float32x2_t *)v174.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL), *(int32x2_t *)v253.f32), (float32x2_t)vext_s8(*(int8x8_t *)v175.i8, (int8x8_t)v177, 4uLL));
          v174.u64[1] = (unint64_t)vmul_f32(v179, (float32x2_t)vrev64_s32(v178));
          *(float32x2_t *)v180.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v175.i8, v253, 3), vmul_f32(v179, (float32x2_t)v178));
          v180.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v175.i8, 1), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 0xCuLL), (float32x2_t)v178));
          v181 = vsubq_f32((float32x4_t)veorq_s8(v180, (int8x16_t)xmmword_1B2269000), (float32x4_t)v174);
          *(int32x2_t *)v174.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL), *(int32x2_t *)v181.f32);
          v180.i64[0] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 4uLL).u64[0];
          v182 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v254, *(int8x8_t *)v256.f32, 4uLL), *(float32x2_t *)v174.i8);
          *(float32x2_t *)v174.i8 = vmul_f32(v31, *(float32x2_t *)v174.i8);
          v174.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v255), *(float32x2_t *)v180.i8);
          *(float32x2_t *)v180.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v181.f32, v256, 3), vmul_f32((float32x2_t)v255, *(float32x2_t *)v180.i8));
          v180.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v256.f32, 1), v182);
          v183 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v256, v181, 3), (float32x4_t)v174), (float32x4_t)v180);
          v183.i32[3] = 0;
          *(float32x4_t *)(a1 + 528) = v183;
          *(_OWORD *)(a1 + 608) = 0u;
          v184 = *a4;
          v185 = a4[1];
          v184.i32[3] = 0;
          v185.i32[3] = 0;
          v186 = a4[2];
          v186.i32[3] = 0;
          v187 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v186, v183, 2), vaddq_f32(vmulq_n_f32(v184, v183.f32[0]), vmulq_lane_f32(v185, *(float32x2_t *)v183.f32, 1))), v183);
          v188 = *a5;
          v189 = a5[1];
          v188.i32[3] = 0;
          v189.i32[3] = 0;
          v190 = a5[2];
          v190.i32[3] = 0;
          v191 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v190, v183, 2), vaddq_f32(vmulq_n_f32(v188, v183.f32[0]), vmulq_lane_f32(v189, *(float32x2_t *)v183.f32, 1))), v183);
          *(float *)(a1 + 560) = 1.0
                               / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL))).f32[0];
        }
        goto LABEL_49;
      }
    }
    v71.i32[0] = *(_DWORD *)(a1 + 368);
    v71.i32[1] = *(_DWORD *)(a1 + 384);
    v71.i32[2] = *(_DWORD *)(a1 + 400);
    v75 = a2[1];
    v76 = (int8x16_t)vmulq_f32(*a2, v71);
    v77 = (int8x16_t)vmulq_f32(v71, v75);
    v78 = a2[2];
    v79 = (int8x16_t)vmulq_f32(v71, v78);
    v79.i32[3] = 0;
    v80 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v77.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)));
    v81 = (float32x4_t)vextq_s8(v79, v79, 8uLL);
    v82 = vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v81.f32), 0);
    v81.i32[0] = *(_DWORD *)(a1 + 372);
    v81.i32[1] = *(_DWORD *)(a1 + 388);
    v81.i32[2] = *(_DWORD *)(a1 + 404);
    v83 = (int8x16_t)vmulq_f32(*a2, v81);
    v84 = (int8x16_t)vmulq_f32(v75, v81);
    v85 = vmulq_f32(v78, v81);
    v86 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
    v85.i32[3] = 0;
    v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v84.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL), *(int32x2_t *)v86.f32));
    v88 = vpadd_f32(vpadd_f32(*(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL)), 0);
    v85.i32[0] = *(_DWORD *)(a1 + 376);
    v85.i32[1] = *(_DWORD *)(a1 + 392);
    v85.i32[2] = *(_DWORD *)(a1 + 408);
    v89 = (int8x16_t)vmulq_f32(*a2, v85);
    v90 = (int8x16_t)vmulq_f32(v75, v85);
    v91 = (int8x16_t)vmulq_f32(v78, v85);
    v91.i32[3] = 0;
    v92 = vadd_f32(vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v90.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)));
    v93 = (float32x4_t)vextq_s8(v91, v91, 8uLL);
    v94 = vpadd_f32(vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v93.f32), 0);
    v93.i32[0] = *(_DWORD *)(a1 + 432);
    v93.i32[1] = *(_DWORD *)(a1 + 448);
    v93.i32[2] = *(_DWORD *)(a1 + 464);
    v95 = (int8x16_t)vmulq_f32(*a3, v93);
    v96 = (int8x16_t)vmulq_f32(v93, a3[1]);
    v97 = (int8x16_t)vmulq_f32(v93, a3[2]);
    v97.i32[3] = 0;
    v98 = vadd_f32(vpadd_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v96.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)));
    v99 = vpadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)), 0);
    *(float32x2_t *)v100.f32 = v98;
    *(float32x2_t *)&v100.u32[2] = v99;
    *(float32x2_t *)v79.i8 = vmul_f32(v80, v98);
    LODWORD(cosval) = vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), vmul_f32(v82, v99)).u32[0];
    *(float32x2_t *)v97.i8 = vmul_f32(v87, v98);
    LODWORD(sinval) = vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), vmul_f32(v88, v99)).u32[0];
    *(float32x2_t *)v97.i8 = vmul_f32(v92, v98);
    LODWORD(v103) = vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), vmul_f32(v94, v99)).u32[0];
    if (v72 >= v73)
    {
      if (fabsf(cosval) < 0.00000011921 && fabsf(sinval) < 0.00000011921)
        goto LABEL_46;
      *(_BYTE *)(a1 + 594) = 1;
      if (v72 < v73)
        goto LABEL_46;
      v244 = v94.i32[0];
      v245 = v99;
      v246 = v98;
      v247 = v88.i32[0];
      v248 = v100;
      v249 = v80;
      v250 = v82.i32[0];
      v240 = sinval;
      v242 = cosval;
      v111 = atan2f(sinval, cosval);
      if (v111 > v72)
      {
        v112 = __sincosf_stret(v72);
        cosval = v112.__cosval;
        sinval = v112.__sinval;
        v103 = 0.0;
LABEL_44:
        v80 = v249;
        v82.i32[0] = v250;
        v88.i32[0] = v247;
        v100 = v248;
        v99 = v245;
        v98 = v246;
        v94.i32[0] = v244;
        goto LABEL_46;
      }
      sinval = v240;
      v192 = v242;
      v103 = 0.0;
      if (v111 < (float)-v72)
      {
        v193 = __sincosf_stret(v72);
        cosval = v193.__cosval;
        v103 = 0.0;
        sinval = -v193.__sinval;
        goto LABEL_44;
      }
    }
    else
    {
      v104 = *(float *)(a1 + 516);
      v105 = fabsf(v103);
      if (v104 < v73)
      {
        if (fabsf(sinval) < 0.00000011921 && v105 < 0.00000011921)
        {
LABEL_49:
          if (*(float *)(a1 + 520) >= 0.0)
          {
            sub_1B21F2A88(v18, (int8x16_t *)v260, (float *)(a1 + 580), (float32x4_t *)&v259);
            v203 = *(float *)(a1 + 580);
            v204 = *(float *)(a1 + 520);
            v205 = *(float *)(a1 + 496);
            if (v203 > (float)(v204 * v205))
            {
              *(_BYTE *)(a1 + 593) = 1;
              v206 = v203 - (float)(v204 * v205);
              v207 = v203 < v204;
              v208 = 1.0;
              if (v207)
              {
                v208 = 1.0;
                if (v205 < 1.0)
                  v208 = v206 / (float)(v204 + (float)((float)-v204 * v205));
              }
              *(float *)(a1 + 600) = v208;
              v209.i64[0] = 0x8000000080000000;
              v209.i64[1] = 0x8000000080000000;
              v210 = veorq_s8(v259, v209);
              v211 = (int8x16_t)v253;
              v212 = (int32x2_t)vextq_s8(v210, v210, 8uLL).u64[0];
              v213 = vzip1_s32(v212, *(int32x2_t *)v210.i8);
              v214 = (float32x2_t)vextq_s8(v211, v211, 4uLL).u64[0];
              *(float32x2_t *)v209.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), *(int32x2_t *)v253.f32), (float32x2_t)vext_s8(*(int8x8_t *)v210.i8, (int8x8_t)v212, 4uLL));
              v209.u64[1] = (unint64_t)vmul_f32(v214, (float32x2_t)vrev64_s32(v213));
              *(float32x2_t *)v215.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v210.i8, v253, 3), vmul_f32(v214, (float32x2_t)v213));
              v215.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v210.i8, 1), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 0xCuLL), (float32x2_t)v213));
              v216 = vsubq_f32((float32x4_t)veorq_s8(v215, (int8x16_t)xmmword_1B2269000), (float32x4_t)v209);
              *(int32x2_t *)v209.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL), *(int32x2_t *)v216.f32);
              v215.i64[0] = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 4uLL).u64[0];
              v217 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v254, *(int8x8_t *)v256.f32, 4uLL), *(float32x2_t *)v209.i8);
              *(float32x2_t *)v209.i8 = vmul_f32(v31, *(float32x2_t *)v209.i8);
              v209.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v255), *(float32x2_t *)v215.i8);
              *(float32x2_t *)v215.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v216.f32, v256, 3), vmul_f32((float32x2_t)v255, *(float32x2_t *)v215.i8));
              v215.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v256.f32, 1), v217);
              v218 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v256, v216, 3), (float32x4_t)v209), (float32x4_t)v215);
              v218.i32[3] = 0;
              *(float *)(a1 + 576) = v206;
              *(float32x4_t *)(a1 + 544) = v218;
              v219 = *a4;
              v220 = a4[1];
              v219.i32[3] = 0;
              v220.i32[3] = 0;
              v221 = a4[2];
              v221.i32[3] = 0;
              v222 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v221, v218, 2), vaddq_f32(vmulq_n_f32(v219, v218.f32[0]), vmulq_lane_f32(v220, *(float32x2_t *)v218.f32, 1))), v218);
              v223 = *a5;
              v224 = a5[1];
              v223.i32[3] = 0;
              v224.i32[3] = 0;
              v225 = a5[2];
              v225.i32[3] = 0;
              v226 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v225, v218, 2), vaddq_f32(vmulq_n_f32(v223, v218.f32[0]), vmulq_lane_f32(v224, *(float32x2_t *)v218.f32, 1))), v218);
              *(float *)(a1 + 564) = 1.0
                                   / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL))).f32[0];
            }
            if (*(_BYTE *)(a1 + 594))
            {
              v227.i64[0] = 0x8000000080000000;
              v227.i64[1] = 0x8000000080000000;
              v228 = (float32x4_t)veorq_s8(v259, v227);
              v227.i64[0] = vextq_s8((int8x16_t)v228, (int8x16_t)v228, 8uLL).u64[0];
              v229 = vzip1_s32(*(int32x2_t *)v227.i8, *(int32x2_t *)v228.f32);
              v230 = (float32x2_t)vrev64_s32(v229);
              *(int32x2_t *)&v228.u32[2] = v229;
              *(float32x2_t *)v231.f32 = vmul_f32(v252, (float32x2_t)v229);
              *(float32x2_t *)&v231.u32[2] = vmul_lane_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v228.f32, 1);
              *(float32x2_t *)v227.i8 = vmul_f32((float32x2_t)v29, (float32x2_t)vext_s8(*(int8x8_t *)v228.f32, *(int8x8_t *)v227.i8, 4uLL));
              v227.u64[1] = (unint64_t)vmul_f32(v252, v230);
              v232 = vsubq_f32((float32x4_t)veorq_s8((int8x16_t)vaddq_f32(vmulq_f32(v251, v228), v231), (int8x16_t)xmmword_1B2269000), (float32x4_t)v227);
              v233 = (float32x4_t)veorq_s8((int8x16_t)v257, (int8x16_t)xmmword_1B2269010);
              *(int32x2_t *)v231.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL), *(int32x2_t *)v232.f32);
              v234 = (int32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 8uLL).u64[0];
              v235 = vzip1_s32(v234, *(int32x2_t *)v233.f32);
              v236 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 4uLL).u64[0];
              v237 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v234, *(int8x8_t *)v233.f32, 4uLL), *(float32x2_t *)v231.f32);
              *(float32x2_t *)v231.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v233.f32, (int8x8_t)v234, 4uLL), *(float32x2_t *)v231.f32);
              *(float32x2_t *)&v231.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v235), v236);
              *(float32x2_t *)v238.f32 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v232.f32, v233, 3), vmul_f32((float32x2_t)v235, v236));
              *(float32x2_t *)&v238.u32[2] = vadd_f32(vmul_lane_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v233.f32, 1), v237);
              v239 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v233, v232, 3), v231), v238);
              v239.i32[3] = 0;
              *(float32x4_t *)(a1 + 608) = v239;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 580) = 0;
          }
          return;
        }
        *(float32x2_t *)v106.f32 = v80;
        *(float32x2_t *)&v106.u32[2] = v82;
        *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)v98, (int8x8_t)v99, 4uLL);
        *(float32x2_t *)&v107.u32[2] = v98;
        *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)v80, (int8x8_t)v82, 4uLL);
        *(float32x2_t *)&v108.u32[2] = v80;
        v109 = (int8x16_t)vsubq_f32(vmulq_f32(v108, v100), vmulq_f32(v106, v107));
        v107.i64[0] = vextq_s8(v109, v109, 4uLL).u64[0];
        v107.i64[1] = v109.u32[0];
        *(_BYTE *)(a1 + 594) = 1;
        v109.i64[0] = 0x8000000080000000;
        v109.i64[1] = 0x8000000080000000;
        v110 = (float32x4_t)veorq_s8((int8x16_t)v107, v109);
LABEL_48:
        *(float32x4_t *)(a1 + 528) = v110;
        goto LABEL_49;
      }
      if (fabsf(cosval) < 0.00000011921 && v105 < 0.00000011921 || (*(_BYTE *)(a1 + 594) = 1, v104 < v73))
      {
LABEL_46:
        *(float32x2_t *)v86.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v87, sinval), v80, cosval), v92, v103);
        v86.i32[2] = vmlas_n_f32(vmlas_n_f32(sinval * v88.f32[0], cosval, v82.f32[0]), v103, v94.f32[0]);
        v195 = (int8x16_t)vmulq_f32(v86, v86);
        *(int8x8_t *)v196.f32 = vext_s8((int8x8_t)v98, (int8x8_t)v99, 4uLL);
        *(float32x2_t *)&v196.u32[2] = v98;
        v197 = vmulq_n_f32(v86, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v195.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL)).f32[0]));
        v198.i64[0] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 4uLL).u64[0];
        v198.i64[1] = v197.i64[0];
        v199 = (int8x16_t)vsubq_f32(vmulq_f32(v100, v198), vmulq_f32(v196, v197));
        v198.i64[0] = vextq_s8(v199, v199, 4uLL).u64[0];
        v198.i64[1] = v199.u32[0];
        v199.i64[0] = 0x8000000080000000;
        v199.i64[1] = 0x8000000080000000;
        v200 = (float32x4_t)veorq_s8((int8x16_t)v198, v199);
        *(float32x4_t *)(a1 + 528) = v200;
        v201 = (int8x16_t)vmulq_f32(v200, v200);
        v202 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v201.i8, *(float32x2_t *)v201.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v201, v201, 8uLL)).f32[0]);
        *(float *)(a1 + 572) = v202;
        if (fabsf(v202) < 0.00000011921)
          goto LABEL_49;
        v110 = vmulq_n_f32(v200, 1.0 / v202);
        goto LABEL_48;
      }
      v244 = v94.i32[0];
      v245 = v99;
      v246 = v98;
      v247 = v88.i32[0];
      v248 = v100;
      v249 = v80;
      v250 = v82.i32[0];
      v241 = v103;
      v243 = cosval;
      v172 = atan2f(v103, cosval);
      if (v172 > v104)
      {
        v173 = __sincosf_stret(v104);
        cosval = v173.__cosval;
        v103 = v173.__sinval;
        sinval = 0.0;
        goto LABEL_44;
      }
      v103 = v241;
      v192 = v243;
      sinval = 0.0;
      if (v172 < (float)-v104)
      {
        v194 = __sincosf_stret(v104);
        cosval = v194.__cosval;
        sinval = 0.0;
        v103 = -v194.__sinval;
        goto LABEL_44;
      }
    }
    v80 = v249;
    v82.i32[0] = v250;
    v88.i32[0] = v247;
    v100 = v248;
    v99 = v245;
    v98 = v246;
    v94.i32[0] = v244;
    cosval = v192;
    goto LABEL_46;
  }
  sub_1B19064B8((uint64_t)v261, (float32x4_t *)(a1 + 640));
  v261[3] = 0u;
  v113 = *(float32x4_t *)(a1 + 368);
  v114 = *(float32x4_t *)(a1 + 384);
  v113.i32[3] = 0;
  v114.i32[3] = 0;
  v115 = a2[1];
  v116 = *(float32x4_t *)(a1 + 400);
  v117 = *(float32x4_t *)(a1 + 416);
  v116.i32[3] = 0;
  v118 = a2[2];
  v119 = vmlaq_lane_f32(vmulq_n_f32(v113, v118.f32[0]), v114, *(float32x2_t *)v118.f32, 1);
  v120 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v113, v115.f32[0]), v114, *(float32x2_t *)v115.f32, 1), v116, v115, 2);
  v121 = (int8x16_t)vmulq_f32(*a2, v117);
  v122 = (int8x16_t)vmulq_f32(v115, v117);
  v123 = (int8x16_t)vmulq_f32(v118, v117);
  v123.i32[3] = 0;
  v124 = vmlaq_lane_f32(vmulq_n_f32(v113, COERCE_FLOAT(*a2)), v114, *(float32x2_t *)a2->f32, 1);
  *(float32x2_t *)v114.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v122.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)));
  *(float32x2_t *)&v114.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)), 0);
  v125 = (int32x4_t)vmlaq_laneq_f32(v124, v116, *a2, 2);
  v126 = a3[1];
  v127 = *(float32x4_t *)(a1 + 432);
  v128 = *(float32x4_t *)(a1 + 448);
  v127.i32[3] = 0;
  v128.i32[3] = 0;
  v129 = *(float32x4_t *)(a1 + 464);
  v130 = *(float32x4_t *)(a1 + 480);
  v129.i32[3] = 0;
  v131 = vmlaq_laneq_f32(v119, v116, v118, 2);
  v132 = a3[2];
  v133 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v126.f32[0]), v128, *(float32x2_t *)v126.f32, 1), v129, v126, 2);
  v134 = (int8x16_t)vmulq_f32(*a3, v130);
  v135 = (int8x16_t)vmulq_f32(v126, v130);
  v136 = (int8x16_t)vmulq_f32(v132, v130);
  v136.i32[3] = 0;
  v137 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*a3)), v128, *(float32x2_t *)a3->f32, 1), v129, *a3, 2);
  v138 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v132.f32[0]), v128, *(float32x2_t *)v132.f32, 1), v129, v132, 2);
  *(float32x2_t *)v127.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v134.i8, *(float32x2_t *)v135.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)));
  *(float32x2_t *)&v127.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v136.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)), 0);
  v139 = v261[0];
  v140 = v261[1];
  v139.i32[3] = 0;
  v140.i32[3] = 0;
  v141 = v261[2];
  v141.i32[3] = 0;
  v142 = vmlaq_lane_f32(vmulq_n_f32(v139, v138.f32[0]), v140, *(float32x2_t *)v138.f32, 1);
  v143 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v133.f32[0]), v140, *(float32x2_t *)v133.f32, 1), v141, v133, 2);
  v144 = vmulq_f32(v137, (float32x4_t)0);
  v145 = (int8x16_t)vmulq_f32(v133, (float32x4_t)0);
  v146 = (int8x16_t)vmulq_f32(v138, (float32x4_t)0);
  v146.i32[3] = 0;
  *(float32x2_t *)v144.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)), vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v145.i8));
  *(float32x2_t *)&v144.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v146.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL)), 0);
  v147 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v137.f32[0]), v140, *(float32x2_t *)v137.f32, 1), v141, v137, 2);
  v148 = vmlaq_laneq_f32(v142, v141, v138, 2);
  v149 = (float32x4_t)vtrn1q_s32(v125, (int32x4_t)v120);
  *(int32x2_t *)v141.f32 = vzip2_s32(*(int32x2_t *)v131.f32, 0);
  v145.i32[0] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  v146.i64[0] = v131.u32[0];
  v131.i64[0] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
  v149.i64[1] = v146.i64[0];
  v150 = vnegq_f32(vaddq_f32(a2[3], v114));
  v151 = (int8x16_t)vmulq_f32(v149, v150);
  *(int32x2_t *)v120.f32 = vzip2_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v120.f32);
  v120.i64[1] = v141.i64[0];
  v152 = vmulq_f32(v120, v150);
  v131.i64[1] = v145.u32[0];
  v153 = (int8x16_t)vmulq_f32(v131, v150);
  v153.i32[3] = 0;
  v154 = vaddq_f32(a3[3], v127);
  *(float32x2_t *)v152.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL)), vpadd_f32(*(float32x2_t *)v151.i8, *(float32x2_t *)v152.f32));
  *(float32x2_t *)&v152.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v153.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL)), 0);
  v149.i32[3] = 0;
  v120.i32[3] = 0;
  v131.i32[3] = 0;
  v155 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v143.f32[0]), v120, *(float32x2_t *)v143.f32, 1), v131, v143, 2);
  v156 = (int8x16_t)vmulq_f32(v147, v152);
  v157 = vmulq_f32(v143, v152);
  v158 = (int8x16_t)vmulq_f32(v148, v152);
  v158.i32[3] = 0;
  *(float32x2_t *)v157.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL)), vpadd_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v157.f32));
  *(float32x2_t *)&v157.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)), 0);
  v260[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v147.f32[0]), v120, *(float32x2_t *)v147.f32, 1), v131, v147, 2);
  v260[1] = v155;
  v260[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v148.f32[0]), v120, *(float32x2_t *)v148.f32, 1), v131, v148, 2);
  v260[3] = vaddq_f32(vaddq_f32(v154, v144), v157);
  sub_1B21D3EAC(v260[0].f32, (float32x4_t *)&v259);
  v159.i64[0] = v259.i64[0];
  v159.i64[1] = v259.u32[2];
  v160 = (int8x16_t)vmulq_f32(v159, v159);
  LODWORD(v161) = vadd_f32(vpadd_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v160.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)).u32[0];
  if (fabsf(v161) >= 0.00000011921)
  {
    *(float32x4_t *)(a1 + 528) = vmulq_n_f32(v159, 1.0 / sqrtf(v161));
    v162 = *(float *)&v259.i32[3];
    if (*(float *)&v259.i32[3] < -1.0)
      v162 = -1.0;
    if (v162 > 1.0)
      v162 = 1.0;
    v163 = acosf(v162);
    v164 = v163 + v163;
    *(float *)(a1 + 572) = v164;
    if (fabsf(v164) >= 0.00000011921)
      *(_BYTE *)(a1 + 594) = 1;
  }
}

uint64_t sub_1B21F1164(uint64_t a1, uint64_t a2)
{
  return sub_1B21F117C(a1, a2, (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 40) + 304), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 304));
}

uint64_t sub_1B21F117C(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  _DWORD *v21;
  uint64_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float *v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float *v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  uint64_t v58;
  float v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  int8x16_t v65;
  float32x4_t v66;

  sub_1B21F023C(a1, a3, a4, a5, a6);
  v10 = 0;
  v11 = *(_DWORD **)(a2 + 8);
  *v11 = 1065353216;
  v12 = *(int *)(a2 + 40);
  v11[v12 + 1] = 1065353216;
  v11[2 * (int)v12 + 2] = 1065353216;
  v13 = *(float32x4_t *)(a1 + 416);
  v14 = vmulq_f32(*a3, v13);
  v15 = (int8x16_t)vmulq_f32(v13, a3[1]);
  v16 = (int8x16_t)vmulq_f32(v13, a3[2]);
  v16.i32[3] = 0;
  *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
  *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = v17 + 4 * v12;
  v19 = v17 + 8 * v12;
  v20 = vnegq_f32(v14);
  *(_DWORD *)v17 = 0;
  *(float *)(v17 + 4) = -v20.f32[2];
  *(_DWORD *)(v17 + 8) = v20.i32[1];
  *(_DWORD *)(v17 + 12) = 0;
  *(_DWORD *)v18 = v20.i32[2];
  *(_DWORD *)(v18 + 4) = 0;
  *(float *)(v18 + 8) = -v20.f32[0];
  *(_DWORD *)(v18 + 12) = 0;
  *(float *)v19 = -v20.f32[1];
  *(_DWORD *)(v19 + 4) = v20.i32[0];
  *(_QWORD *)(v19 + 8) = 0;
  v21 = *(_DWORD **)(a2 + 24);
  *v21 = -1082130432;
  v22 = *(int *)(a2 + 40);
  v21[v22 + 1] = -1082130432;
  v21[2 * (int)v22 + 2] = -1082130432;
  v66 = v14;
  v23 = *(float32x4_t *)(a1 + 480);
  v24 = (int8x16_t)vmulq_f32(*a4, v23);
  v25 = (int8x16_t)vmulq_f32(v23, a4[1]);
  v26 = (int8x16_t)vmulq_f32(v23, a4[2]);
  v26.i32[3] = 0;
  *(float32x2_t *)v24.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
  *(float32x2_t *)v26.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
  v27 = *(_QWORD *)(a2 + 32);
  v28 = v27 + 4 * v22;
  v29 = v27 + 8 * v22;
  *(_DWORD *)v27 = 0;
  *(float *)(v27 + 4) = -*(float *)v26.i32;
  *(_DWORD *)(v27 + 8) = v24.i32[1];
  *(_DWORD *)(v27 + 12) = 0;
  *(_QWORD *)v28 = v26.u32[0];
  *(float *)(v28 + 8) = -*(float *)v24.i32;
  *(_DWORD *)(v28 + 12) = 0;
  *(float *)v29 = -*(float *)&v24.i32[1];
  *(_DWORD *)(v29 + 4) = v24.i32[0];
  v24.i64[1] = v26.i64[0];
  v65 = v24;
  *(_QWORD *)(v29 + 8) = 0;
  v30 = *(_DWORD *)(a1 + 688);
  v31 = (float *)(a1 + 696);
  if ((v30 & 2) == 0)
    v31 = (float *)(a2 + 4);
  v32 = *v31 * *(float *)a2;
  v33 = *(_QWORD *)(a2 + 48);
  v34 = *(int *)(a2 + 40);
  v35 = 12;
  v37 = *(_QWORD *)(a2 + 64);
  v36 = *(_QWORD *)(a2 + 72);
  result = 4286578687;
  do
  {
    *(float *)(v33 + v10) = v32
                          * (float)((float)((float)(*(float *)&v65.i32[v35 - 12] + a4->f32[v35]) - v66.f32[v35 - 12])
                                  - a3->f32[v35]);
    *(_DWORD *)(v37 + v10) = -8388609;
    *(_DWORD *)(v36 + v10) = 2139095039;
    if ((v30 & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v10) = *(_DWORD *)(a1 + 692);
    v10 += 4 * v34;
    ++v35;
  }
  while (v35 != 15);
  v39 = 3 * v34;
  if (*(_BYTE *)(a1 + 594))
  {
    v40 = *(_QWORD *)(a2 + 16);
    v41 = *(_QWORD *)(a2 + 32);
    v42 = *(float *)(a1 + 524);
    if (*(float *)(a1 + 512) >= v42 || *(float *)(a1 + 516) >= v42)
    {
      v57 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 528), *(float *)(a1 + 504)), *(float *)(a1 + 504));
      *(_DWORD *)(v40 + 4 * v39) = v57.i32[0];
      result = 12 * v34 + 4;
      *(_DWORD *)(v40 + result) = v57.i32[1];
      v58 = 4 * v39 + 8;
      *(_DWORD *)(v40 + v58) = v57.i32[2];
      *(float *)(v41 + 4 * v39) = -v57.f32[0];
      *(float *)(v41 + result) = -v57.f32[1];
      *(float *)(v41 + v58) = -v57.f32[2];
      *(float *)(v33 + 4 * v39) = (float)(*(float *)a2 * *(float *)(a1 + 500)) * *(float *)(a1 + 572);
      if ((v30 & 4) != 0)
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v39) = *(_DWORD *)(a1 + 700);
      *(_DWORD *)(v37 + 4 * v39) = 0;
      if (!*(_BYTE *)(a1 + 624) || (v59 = *(float *)(a1 + 656), v59 < 0.0))
        v59 = 3.4028e38;
      *(float *)(v36 + 4 * v39) = v59;
      v39 = 4 * v34;
    }
    else
    {
      v43 = *(float32x4_t *)(a1 + 368);
      v44 = *(float32x4_t *)(a1 + 384);
      v43.i32[3] = 0;
      v44.i32[3] = 0;
      v45 = *(float32x4_t *)(a1 + 400);
      v45.i32[3] = 0;
      v46 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&a3[1])), v44, *(float32x2_t *)a3[1].f32, 1), v45, a3[1], 2);
      v47 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*a3)), v44, *(float32x2_t *)a3->f32, 1), v45, *a3, 2);
      v48 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&a3[2])), v44, *(float32x2_t *)a3[2].f32, 1), v45, a3[2], 2);
      v45.i64[0] = __PAIR64__(v46.u32[1], v47.u32[1]);
      v45.i32[2] = v48.i32[1];
      v49.i64[0] = __PAIR64__(v46.u32[2], v47.u32[2]);
      v49.i64[1] = v48.u32[2];
      v50 = 4 * v39;
      *(int32x2_t *)(v40 + v50) = vzip2_s32(*(int32x2_t *)v47.f32, *(int32x2_t *)v46.f32);
      v50 += 8;
      *(_DWORD *)(v40 + v50) = v48.i32[1];
      v51 = 16 * v34;
      *(_DWORD *)(v40 + 16 * v34) = v47.i32[2];
      v52 = (unint64_t)(4 * (int)v34) >> 2;
      v53 = (16 * v52) | 4;
      *(_DWORD *)(v40 + v53) = v46.i32[2];
      result = (16 * v52) | 8;
      *(_DWORD *)(v40 + result) = v48.i32[2];
      v54 = (float *)(v41 + 4 * v39);
      *v54 = -v47.f32[1];
      v54[1] = -v46.f32[1];
      *(float *)(v41 + v50) = -v48.f32[1];
      *(float *)(v41 + v51) = -v47.f32[2];
      *(float *)(v41 + v53) = -v46.f32[2];
      *(float *)(v41 + result) = -v48.f32[2];
      v47.f32[0] = *(float *)a2 * *(float *)(a1 + 504);
      v55 = (int8x16_t)vmulq_f32(v45, *(float32x4_t *)(a1 + 528));
      *(float *)(v33 + 4 * v39) = v47.f32[0]
                                  * vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0];
      v56 = (int8x16_t)vmulq_f32(v49, *(float32x4_t *)(a1 + 528));
      *(float *)(v33 + v51) = v47.f32[0]
                            * vadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)).f32[0];
      v37 = *(_QWORD *)(a2 + 64);
      *(_DWORD *)(v37 + 4 * v39) = -8388609;
      v36 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)(v36 + 4 * v39) = 2139095039;
      *(_DWORD *)(v37 + v51) = -8388609;
      *(_DWORD *)(v36 + v51) = 2139095039;
      v39 = 5 * v34;
    }
  }
  if (*(_BYTE *)(a1 + 593))
  {
    v60 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 544), *(float *)(a1 + 504)), *(float *)(a1 + 504));
    v61 = *(_QWORD *)(a2 + 16);
    v62 = *(_QWORD *)(a2 + 32);
    v63 = 4 * v39;
    *(_QWORD *)(v61 + v63) = v60.i64[0];
    v63 += 8;
    *(_DWORD *)(v61 + v63) = v60.i32[2];
    v64 = (float *)(v62 + 4 * v39);
    *v64 = -v60.f32[0];
    v64[1] = -v60.f32[1];
    *(float *)(v62 + v63) = -v60.f32[2];
    *(float *)(*(_QWORD *)(a2 + 48) + 4 * v39) = (float)(*(float *)a2 * *(float *)(a1 + 500)) * *(float *)(a1 + 576);
    if ((v30 & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v39) = *(_DWORD *)(a1 + 700);
    if (*(float *)(a1 + 520) <= 0.0)
    {
      *(_DWORD *)(v37 + 4 * v39) = -8388609;
      goto LABEL_24;
    }
    if (*(float *)(a1 + 576) > 0.0)
    {
      *(_DWORD *)(v37 + 4 * v39) = 0;
LABEL_24:
      *(_DWORD *)(v36 + 4 * v39) = 2139095039;
      return result;
    }
    *(_DWORD *)(v37 + 4 * v39) = -8388609;
    *(_DWORD *)(v36 + 4 * v39) = 0;
  }
  return result;
}

void sub_1B21F16DC(uint64_t a1)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  int8x16_t v17;
  float32x2_t v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57[3];
  float32x4_t v58[3];
  __int128 v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 595))
  {
    *(_DWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 584) = 0;
    *(_OWORD *)(a1 + 672) = 0u;
    if (!*(_BYTE *)(a1 + 592))
    {
      v2 = *(float32x4_t **)(a1 + 40);
      v3 = *(float32x4_t **)(a1 + 48);
      v4 = *(float32x4_t *)(a1 + 416);
      v5 = vmulq_f32(v2[1], v4);
      v6 = (int8x16_t)vmulq_f32(v4, v2[2]);
      v7 = (int8x16_t)vmulq_f32(v4, v2[3]);
      v7.i32[3] = 0;
      *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
      *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
      v8 = vaddq_f32(v5, v2[4]);
      v9 = *(float32x4_t *)(a1 + 480);
      v10 = vmulq_f32(v3[1], v9);
      v11 = (int8x16_t)vmulq_f32(v9, v3[2]);
      v12 = (int8x16_t)vmulq_f32(v9, v3[3]);
      v12.i32[3] = 0;
      *(float32x2_t *)v10.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v11.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
      *(float32x2_t *)&v10.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
      v13 = vaddq_f32(v10, v3[4]);
      v14 = vsubq_f32(v13, v8);
      v14.i32[3] = 0;
      v15 = (int8x16_t)vmulq_f32(v14, v14);
      v16 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).f32[0];
      if (v16 <= 0.00000011921)
      {
        v59 = xmmword_1B2244DB0;
        v18 = 0;
        v17.i32[0] = 1.0;
      }
      else
      {
        v17 = (int8x16_t)vmulq_n_f32(v14, 1.0 / sqrtf(v16));
        v59 = (__int128)v17;
        v18 = (float32x2_t)vextq_s8(v17, v17, 4uLL).u64[0];
      }
      v19 = 0;
      v20 = fabsf(v18.f32[1]) <= 0.70711;
      v21 = vmul_f32(v18, v18).f32[0] + (float)(*(float *)v17.i32 * *(float *)v17.i32);
      v22 = 1.0 / sqrtf(v21);
      v23 = -(float)(v18.f32[0] * v22);
      v24 = *(float *)v17.i32 * v22;
      v25 = -(float)(v18.f32[1] * (float)(*(float *)v17.i32 * v22));
      v26 = v18.f32[1] * v23;
      v27 = v21 * v22;
      v28 = vmlas_n_f32(v18.f32[1] * v18.f32[1], v18.f32[0], v18.f32[0]);
      v29 = sqrtf(v28);
      v30 = -(float)(v18.f32[1] * (float)(1.0 / v29));
      v31 = (float)(1.0 / v29) * v18.f32[0];
      v32 = v28 * (float)(1.0 / v29);
      v33 = -(float)(*(float *)v17.i32 * v31);
      v34 = v30 * *(float *)v17.i32;
      if (v20)
      {
        v30 = v24;
        v31 = 0.0;
      }
      else
      {
        v23 = 0.0;
      }
      if (v20)
        v35 = v25;
      else
        v35 = v32;
      if (v20)
        v36 = v26;
      else
        v36 = v33;
      v60 = v23;
      v61 = v30;
      if (v20)
        v34 = v27;
      v62 = v31;
      v63 = v35;
      v64 = v36;
      v65 = v34;
      v37 = (float32x4_t *)(a1 + 80);
      v53 = v13;
      v54 = v8;
      do
      {
        v38 = *(_QWORD *)(a1 + 40);
        v39 = *(_QWORD *)(a1 + 48);
        v40 = *(int32x4_t *)(v38 + 16);
        v41 = *(int32x4_t *)(v38 + 32);
        v42 = (int8x16_t)vtrn1q_s32(v40, v41);
        v43 = *(int8x16_t *)(v38 + 48);
        v44 = *(float32x4_t *)(v38 + 64);
        *(int32x2_t *)v40.i8 = vzip2_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v41.i8);
        v41.i64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
        v42.i64[1] = v43.u32[0];
        v40.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v43.i8, 0);
        v41.i64[1] = vextq_s8(v43, v43, 8uLL).u32[0];
        v58[0] = (float32x4_t)v42;
        v58[1] = (float32x4_t)v40;
        v58[2] = (float32x4_t)v41;
        v45 = *(int32x4_t *)(v39 + 16);
        v46 = *(int32x4_t *)(v39 + 32);
        v47 = (int8x16_t)vtrn1q_s32(v45, v46);
        v48 = *(int8x16_t *)(v39 + 48);
        v49 = *(float32x4_t *)(v39 + 64);
        *(int32x2_t *)v45.i8 = vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v46.i8);
        v46.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
        v47.i64[1] = v48.u32[0];
        v45.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v48.i8, 0);
        v46.i64[1] = vextq_s8(v48, v48, 8uLL).u32[0];
        v57[0] = (float32x4_t)v47;
        v57[1] = (float32x4_t)v45;
        v57[2] = (float32x4_t)v46;
        v50 = vsubq_f32(v8, v44);
        v50.i32[3] = 0;
        v56 = v50;
        v51 = vsubq_f32(v13, v49);
        v51.i32[3] = 0;
        v55 = v51;
        sub_1B21F2F60(v37, v58, v57, (int8x8_t *)&v56, (int8x8_t *)&v55, (float32x4_t *)((char *)&v59 + v19), (float32x4_t *)(v38 + 448), (float32x4_t *)(v39 + 448), *(float *)(v38 + 384), *(float *)(v39 + 384));
        v13 = v53;
        v8 = v54;
        v19 += 16;
        v37 = v52 + 6;
      }
      while (v19 != 48);
    }
    sub_1B21F023C(a1, (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 40) + 304), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 304));
  }
}

void sub_1B21F19C4(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t *v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x2_t v83;
  unsigned __int32 v84;
  int8x16_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x2_t v121;
  float v122;
  float v123;
  float32x4_t v124;
  float v125;
  float32x4_t *v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x2_t v132;
  float v133;
  float32x4_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  float v144;
  float32x4_t *v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  float v158;
  float v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x16_t v162;
  float v163;
  int8x16_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  int8x16_t v175;
  int8x16_t v176;
  float v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float v181;
  float32x4_t v182;
  float32x4_t v183;
  int8x16_t v184;
  float v185;
  float32x4_t *v186;
  float32x4_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t v196;
  float32x4_t v197;
  float32x4_t v198;
  int8x16_t v199;
  float v200;
  float32x4_t v201;
  int8x16_t v202;
  float32x4_t v203;
  int8x16_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t *v207;
  float32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  float v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float v216;
  float v217;
  float32x4_t v218;
  float32x4_t v219;
  int8x16_t v220;
  float v221;
  float v222;
  float v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int8x16_t v230;
  float v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t v234;
  int8x16_t v235;
  int8x16_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t *v240;
  float32x4_t v241;
  int8x16_t v242;
  int8x16_t v243;
  float v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float v248;
  float v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float32x4_t *v258;
  float32x4_t v259;
  int8x16_t v260;
  int8x16_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t *v265;
  float32x4_t v266;
  float32x4_t v267;
  int8x16_t v268;
  int8x16_t v269;
  float v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  _OWORD v275[3];
  float32x4_t v276;
  _OWORD v277[3];
  float32x4_t v278;
  _OWORD v279[4];
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291[3];
  float32x4_t v292;
  float32x4_t v293[3];
  float32x4_t v294;
  float v295;
  float32x4_t v296;

  if (!*(_BYTE *)(a1 + 595))
    return;
  if (!*(_BYTE *)(a1 + 592))
  {
    v8 = 0;
    v10 = *(float32x4_t **)(a1 + 40);
    v9 = *(float32x4_t **)(a1 + 48);
    v11 = v9[4];
    v12 = *(float32x4_t *)(a1 + 480);
    v13 = (int8x16_t)vmulq_f32(v9[1], v12);
    v14 = (int8x16_t)vmulq_f32(v12, v9[2]);
    *(float32x2_t *)v15.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    v16 = (int8x16_t)vmulq_f32(v12, v9[3]);
    v16.i32[3] = 0;
    *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
    v17 = *(float32x4_t *)(a1 + 416);
    v18 = vmulq_f32(v10[1], v17);
    v19 = (int8x16_t)vmulq_f32(v17, v10[2]);
    v20 = v10[4];
    v21 = (int8x16_t)vmulq_f32(v17, v10[3]);
    v21.i32[3] = 0;
    *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
    *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
    v22 = vaddq_f32(v18, v20);
    v23 = vsubq_f32(v22, v20);
    v19.i64[0] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v23.i32[3] = 0;
    v24 = vaddq_f32(v15, v11);
    v25 = vsubq_f32(v24, v11);
    v15.i64[0] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    v25.i32[3] = 0;
    v26 = vaddq_f32(a2[12], a2[5]);
    v27.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
    v27.i64[1] = v26.i64[0];
    *(int8x8_t *)v28.f32 = vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v19.i8, 4uLL);
    v28.i64[1] = v23.i64[0];
    v29 = (int8x16_t)vsubq_f32(vmulq_f32(v28, v26), vmulq_f32(v27, v23));
    v26.i64[0] = vextq_s8(v29, v29, 4uLL).u64[0];
    v26.i64[1] = v29.i64[0];
    v30 = vaddq_f32(a3[12], a3[5]);
    v31.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
    v31.i64[1] = v30.i64[0];
    *(int8x8_t *)v32.f32 = vext_s8(*(int8x8_t *)v25.f32, *(int8x8_t *)v15.f32, 4uLL);
    v32.i64[1] = v25.i64[0];
    v33 = (int8x16_t)vsubq_f32(vmulq_f32(v32, v30), vmulq_f32(v31, v25));
    v30.i64[0] = vextq_s8(v33, v33, 4uLL).u64[0];
    v30.i64[1] = v33.i64[0];
    v34 = vsubq_f32(vaddq_f32(vaddq_f32(a2[11], a2[4]), v26), vaddq_f32(vaddq_f32(a3[11], a3[4]), v30));
    v34.i32[3] = 0;
    v35 = vsubq_f32(v22, v24);
    v35.i32[3] = 0;
    do
    {
      v36 = *(float32x4_t *)(a1 + v8 + 80);
      v37 = (int8x16_t)vmulq_f32(v36, v34);
      v38 = (int8x16_t)vmulq_f32(v36, v35);
      v39 = (float)((float)((float)(-0.3
                                  * vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)).f32[0])/ a4)* (float)(1.0 / *(float *)(a1 + v8 + 160)))- (float)(vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0]* (float)(1.0 / *(float *)(a1 + v8 + 160)));
      *(float *)(a1 + 56) = *(float *)(a1 + 56) + v39;
      *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v36.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), 4uLL);
      v40.i64[1] = v36.i64[0];
      if (a2[13].i64[0])
      {
        v41 = *(float32x4_t **)(a1 + 40);
        v42 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v23), vmulq_f32(v28, v36));
        v43.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
        v43.i64[1] = v42.i64[0];
        v44 = (int8x16_t)vmulq_f32(v41[21], v43);
        v43.i32[3] = 0;
        v45 = (int8x16_t)vmulq_f32(v41[19], v43);
        v46 = vmulq_f32(v41[20], v43);
        v44.i32[3] = 0;
        *(float32x2_t *)v46.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)));
        *(float32x2_t *)&v46.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
        v47 = vmulq_n_f32(vmulq_n_f32(v36, v41[24].f32[0]), v39);
        v47.i32[3] = 0;
        v48 = vmulq_n_f32(a2[6], v39);
        v48.i32[3] = 0;
        v49 = vaddq_f32(a2[5], vmulq_f32(v46, v48));
        a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v47));
        a2[5] = v49;
      }
      if (a3[13].i64[0])
      {
        v50 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v25), vmulq_f32(v32, v36));
        v51.i64[0] = vextq_s8(v50, v50, 4uLL).u64[0];
        v51.i64[1] = v50.u32[0];
        *(float *)v50.i32 = -v39;
        v52 = *(float32x4_t **)(a1 + 48);
        v53 = vmulq_f32(v52[19], v51);
        v54 = (int8x16_t)vmulq_f32(v52[20], v51);
        *(float32x2_t *)v53.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v54.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)));
        v55 = (int8x16_t)vmulq_f32(v52[21], v51);
        v55.i32[3] = 0;
        *(float32x2_t *)&v53.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), 0);
        v56 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + v8 + 80), v52[24].f32[0]), *(float *)v50.i32);
        v56.i32[3] = 0;
        v57 = vmulq_n_f32(a3[6], *(float *)v50.i32);
        v57.i32[3] = 0;
        v58 = vaddq_f32(a3[5], vmulq_f32(v53, v57));
        a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v56));
        a3[5] = v58;
      }
      v8 += 96;
    }
    while (v8 != 288);
  }
  if (*(_BYTE *)(a1 + 624))
  {
    v59 = *(float32x4_t **)(a1 + 40);
    v60 = *(float32x4_t **)(a1 + 48);
    v61 = v59[2];
    v62 = v59[3];
    v63 = v59[4];
    v293[0] = v59[1];
    v293[1] = v61;
    v293[2] = v62;
    v294 = v63;
    v64 = v60[2];
    v291[0] = v60[1];
    v291[1] = v64;
    v65 = v60[4];
    v291[2] = v60[3];
    v292 = v65;
    v66 = vaddq_f32(a2[12], a2[5]);
    v289 = vaddq_f32(a3[12], a3[5]);
    v290 = v66;
    v285 = (float32x4_t)xmmword_1B2244DB0;
    v286 = (float32x4_t)xmmword_1B2244DD0;
    v287 = (float32x4_t)xmmword_1B2244D90;
    v288 = 0uLL;
    v284 = 0uLL;
    sub_1B21E8F2C(v293, &v284, &v290, &v285, a4);
    v280 = (float32x4_t)xmmword_1B2244DB0;
    v281 = (float32x4_t)xmmword_1B2244DD0;
    v282 = (float32x4_t)xmmword_1B2244D90;
    v283 = 0uLL;
    sub_1B21E8F2C(v291, &v284, &v289, &v280, a4);
    sub_1B19064B8((uint64_t)v279, (float32x4_t *)(a1 + 640));
    v279[3] = 0u;
    v68 = *(float32x4_t *)(a1 + 432);
    v67 = *(float32x4_t *)(a1 + 448);
    v69 = (float32x4_t)v279[0];
    v70 = (float32x4_t)v279[1];
    v69.i32[3] = 0;
    v70.i32[3] = 0;
    v71 = (float32x4_t)v279[2];
    v71.i32[3] = 0;
    v72 = *(float32x4_t *)(a1 + 464);
    v73 = vmlaq_lane_f32(vmulq_n_f32(v69, v72.f32[0]), v70, *(float32x2_t *)v72.f32, 1);
    v74 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v67.f32[0]), v70, *(float32x2_t *)v67.f32, 1), v71, v67, 2);
    v75 = (int8x16_t)vmulq_f32(v68, (float32x4_t)0);
    v76 = (int8x16_t)vmulq_f32(v67, (float32x4_t)0);
    v77 = (int8x16_t)vmulq_f32(v72, (float32x4_t)0);
    v77.i32[3] = 0;
    v78 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v68.f32[0]), v70, *(float32x2_t *)v68.f32, 1), v71, v68, 2);
    *(float32x2_t *)v68.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v76.i8));
    *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)), 0);
    v79 = *(int32x4_t *)(a1 + 368);
    v80 = *(float32x4_t *)(a1 + 384);
    v81 = *(float32x4_t *)(a1 + 400);
    v82 = (float32x4_t)vtrn1q_s32(v79, (int32x4_t)v80);
    v83 = vzip2_s32(*(int32x2_t *)v81.f32, 0);
    v84 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
    v81.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
    v82.i64[1] = *(_OWORD *)(a1 + 400);
    v85.i64[0] = 0x8000000080000000;
    v85.i64[1] = 0x8000000080000000;
    v86 = (float32x4_t)veorq_s8(*(int8x16_t *)(a1 + 416), v85);
    v87 = (int8x16_t)vmulq_f32(v82, v86);
    *(int32x2_t *)v80.f32 = vzip2_s32(*(int32x2_t *)v79.i8, *(int32x2_t *)v80.f32);
    *(int32x2_t *)&v80.u32[2] = v83;
    v88 = vmulq_f32(v80, v86);
    v81.i64[1] = v84;
    v89 = (int8x16_t)vmulq_f32(v81, v86);
    v89.i32[3] = 0;
    *(float32x2_t *)v88.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v88.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL)));
    *(float32x2_t *)&v88.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)), 0);
    v82.i32[3] = 0;
    v80.i32[3] = 0;
    v81.i32[3] = 0;
    v90 = vmlaq_laneq_f32(v73, v71, v72, 2);
    v91 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v74.f32[0]), v80, *(float32x2_t *)v74.f32, 1), v81, v74, 2);
    v92 = (int8x16_t)vmulq_f32(v78, v88);
    v93 = vmulq_f32(v74, v88);
    v94 = (int8x16_t)vmulq_f32(v90, v88);
    v94.i32[3] = 0;
    *(float32x2_t *)v93.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL)), vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v93.f32));
    *(float32x2_t *)&v93.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v94.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)), 0);
    v95 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v78.f32[0]), v80, *(float32x2_t *)v78.f32, 1), v81, v78, 2);
    v96 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v90.f32[0]), v80, *(float32x2_t *)v90.f32, 1), v81, v90, 2);
    v97 = vaddq_f32(v68, *(float32x4_t *)(a1 + 480));
    v98 = (float32x4_t)vtrn1q_s32((int32x4_t)v95, (int32x4_t)v91);
    *(int32x2_t *)v68.f32 = vzip2_s32(*(int32x2_t *)v95.f32, *(int32x2_t *)v91.f32);
    v95.i32[3] = 0;
    v91.i32[3] = 0;
    v80.i64[0] = v96.u32[0];
    *(int32x2_t *)v92.i8 = vzip2_s32(*(int32x2_t *)v96.f32, 0);
    v82.i32[0] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
    v96.i32[3] = 0;
    v99 = vaddq_f32(v97, v93);
    v100 = (int8x16_t)vmulq_f32(v99, v282);
    v100.i32[3] = 0;
    v101 = vmlaq_lane_f32(vmulq_n_f32(v95, v282.f32[0]), v91, *(float32x2_t *)v282.f32, 1);
    v102 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, v281.f32[0]), v91, *(float32x2_t *)v281.f32, 1), v96, v281, 2);
    v103 = vmlaq_lane_f32(vmulq_n_f32(v95, v280.f32[0]), v91, *(float32x2_t *)v280.f32, 1);
    v104 = (int8x16_t)vmulq_f32(v99, v280);
    v105 = (int8x16_t)vmulq_f32(v99, v281);
    *(float32x2_t *)v97.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL)), vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v105.i8));
    *(float32x2_t *)&v97.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)), 0);
    v277[0] = vmlaq_laneq_f32(v103, v96, v280, 2);
    v277[1] = v102;
    v277[2] = vmlaq_laneq_f32(v101, v96, v282, 2);
    v278 = vaddq_f32(v97, v283);
    v96.i64[0] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
    v98.i64[1] = v80.i64[0];
    v106 = vnegq_f32(v99);
    v107 = vmulq_f32(v98, v106);
    v68.i64[1] = v92.i64[0];
    v108 = (int8x16_t)vmulq_f32(v68, v106);
    v96.i64[1] = v82.u32[0];
    v109 = (int8x16_t)vmulq_f32(v96, v106);
    v109.i32[3] = 0;
    *(float32x2_t *)v107.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL)), vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v108.i8));
    *(float32x2_t *)&v107.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)), 0);
    v98.i32[3] = 0;
    v68.i32[3] = 0;
    v96.i32[3] = 0;
    v110 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v286.f32[0]), v68, *(float32x2_t *)v286.f32, 1), v96, v286, 2);
    v111 = (int8x16_t)vmulq_f32(v285, v107);
    v112 = (int8x16_t)vmulq_f32(v107, v286);
    v113 = (int8x16_t)vmulq_f32(v107, v287);
    v113.i32[3] = 0;
    *(float32x2_t *)v76.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL)), 0);
    v114 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v285.f32[0]), v68, *(float32x2_t *)v285.f32, 1), v96, v285, 2);
    v115 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v287.f32[0]), v68, *(float32x2_t *)v287.f32, 1), v96, v287, 2);
    *(float32x2_t *)v96.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)), vpadd_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v112.i8));
    v96.i64[1] = v76.i64[0];
    v275[0] = v114;
    v275[1] = v110;
    v275[2] = v115;
    v276 = vaddq_f32(v96, v288);
    v116 = vmulq_n_f32(vsubq_f32(v278, v294), 1.0 / a4);
    v116.i32[3] = 0;
    v284 = v116;
    v295 = 0.0;
    sub_1B21D3CB8(v293, (float32x2_t *)v277, &v296, &v295);
    v274 = vmulq_n_f32(vmulq_n_f32(v296, v295), 1.0 / a4);
    v117 = vmulq_n_f32(vsubq_f32(v276, v292), 1.0 / a4);
    v117.i32[3] = 0;
    v284 = v117;
    v295 = 0.0;
    sub_1B21D3CB8(v291, (float32x2_t *)v275, &v296, &v295);
    v118 = vsubq_f32(v274, v290);
    v118.i32[3] = 0;
    v119 = vsubq_f32(vmulq_n_f32(vmulq_n_f32(v296, v295), 1.0 / a4), v289);
    v119.i32[3] = 0;
    v120 = (int8x16_t)vmulq_f32(v118, v118);
    v121 = vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8);
    v124 = (float32x4_t)vextq_s8(v120, v120, 8uLL);
    v122 = vadd_f32(v121, *(float32x2_t *)v124.f32).f32[0];
    v123 = 0.0;
    v124.i64[0] = 0x3400000034000000;
    v125 = 0.0;
    if (v122 > 0.00000011921)
    {
      v124 = vmulq_n_f32(v118, 1.0 / sqrtf(v122));
      v126 = *(float32x4_t **)(a1 + 40);
      v127 = v126[19];
      v128 = v126[20];
      v127.i32[3] = 0;
      v128.i32[3] = 0;
      v129 = v126[21];
      v129.i32[3] = 0;
      v130 = (int8x16_t)vmulq_f32(v124, vaddq_f32(vaddq_f32(vmulq_n_f32(v127, v124.f32[0]), vmulq_lane_f32(v128, *(float32x2_t *)v124.f32, 1)), vmulq_laneq_f32(v129, v124, 2)));
      LODWORD(v125) = vadd_f32(vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)).u32[0];
    }
    v131 = (int8x16_t)vmulq_f32(v119, v119);
    v132 = vpadd_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v131.i8);
    v134 = (float32x4_t)vextq_s8(v131, v131, 8uLL);
    v133 = vadd_f32(*(float32x2_t *)v134.f32, v132).f32[0];
    v134.i64[0] = 0x3400000034000000;
    if (v133 > 0.00000011921)
    {
      v134 = vmulq_n_f32(v119, 1.0 / sqrtf(v133));
      v135 = *(float32x4_t **)(a1 + 48);
      v136 = v135[19];
      v137 = v135[20];
      v136.i32[3] = 0;
      v137.i32[3] = 0;
      v138 = v135[21];
      v138.i32[3] = 0;
      v139 = (int8x16_t)vmulq_f32(v134, vaddq_f32(vaddq_f32(vmulq_n_f32(v136, v134.f32[0]), vmulq_lane_f32(v137, *(float32x2_t *)v134.f32, 1)), vmulq_laneq_f32(v138, v134, 2)));
      LODWORD(v123) = vadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)).u32[0];
    }
    v140 = vmulq_n_f32(v124, v125);
    v140.i32[3] = 0;
    v141 = vmulq_n_f32(v134, v123);
    v141.i32[3] = 0;
    v142 = vaddq_f32(v140, v141);
    v143 = (int8x16_t)vmulq_f32(v142, v142);
    v144 = vadd_f32(vpadd_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL)).f32[0];
    if (v144 <= 0.00000011921)
      goto LABEL_32;
    v145 = *(float32x4_t **)(a1 + 40);
    v146 = *(float32x4_t **)(a1 + 48);
    v147 = v145[19];
    v148 = v145[20];
    v147.i32[3] = 0;
    v148.i32[3] = 0;
    v149 = vmulq_n_f32(v142, 1.0 / sqrtf(v144));
    v150 = v145[21];
    v150.i32[3] = 0;
    v151 = (int8x16_t)vmulq_f32(v149, vaddq_f32(vaddq_f32(vmulq_n_f32(v147, v149.f32[0]), vmulq_lane_f32(v148, *(float32x2_t *)v149.f32, 1)), vmulq_laneq_f32(v150, v149, 2)));
    v152 = v146[19];
    v153 = v146[20];
    v152.i32[3] = 0;
    v153.i32[3] = 0;
    v154 = vadd_f32(vpadd_f32(*(float32x2_t *)v151.i8, *(float32x2_t *)v151.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL));
    v155 = v146[21];
    v155.i32[3] = 0;
    v156 = (int8x16_t)vmulq_f32(v149, vaddq_f32(vaddq_f32(vmulq_n_f32(v152, v149.f32[0]), vmulq_lane_f32(v153, *(float32x2_t *)v149.f32, 1)), vmulq_laneq_f32(v155, v149, 2)));
    *(float32x2_t *)v156.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v156.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
    *(float32x2_t *)v155.f32 = vadd_f32(v154, *(float32x2_t *)v156.i8);
    v157 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(v118, v154.f32[0]), vmulq_n_f32(v119, *(float *)v156.i32)), 1.0 / vmul_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32).f32[0]);
    v157.i32[3] = 0;
    v158 = *(float *)(a1 + 656);
    if (v158 >= 0.0)
    {
      if (!*(_BYTE *)(a1 + 625))
        v154.f32[0] = 1.0;
      v159 = v158 / v154.f32[0];
      v160 = *(float32x4_t *)(a1 + 672);
      v161 = vaddq_f32(v160, v157);
      v162 = (int8x16_t)vmulq_f32(v161, v161);
      v163 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v162.i8, *(float32x2_t *)v162.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL)).f32[0]);
      if (v163 > v159)
      {
        v157 = vsubq_f32(vmulq_n_f32(vmulq_n_f32(v161, 1.0 / v163), v159), v160);
        v157.i32[3] = 0;
        v161 = vaddq_f32(v160, v157);
      }
      *(float32x4_t *)(a1 + 672) = v161;
    }
    v164 = (int8x16_t)vmulq_f32(v157, v157);
    v165 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v164.i8, *(float32x2_t *)v164.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL)).f32[0]);
    v166 = vmulq_n_f32(v157, 1.0 / v165);
    v166.i32[3] = 0;
    if (a2[13].i64[0])
    {
      v167 = vmulq_f32(v145[19], v166);
      v168 = (int8x16_t)vmulq_f32(v145[20], v166);
      *(float32x2_t *)v167.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v168.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)));
      v169 = (int8x16_t)vmulq_f32(v145[21], v166);
      v169.i32[3] = 0;
      *(float32x2_t *)&v167.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v169.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)), 0);
      v170 = vmulq_n_f32((float32x4_t)0, v165);
      v170.i32[3] = 0;
      v171 = vmulq_n_f32(a2[6], v165);
      v171.i32[3] = 0;
      v172 = vaddq_f32(a2[5], vmulq_f32(v167, v171));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v170));
      a2[5] = v172;
    }
    if (!a3[13].i64[0])
      goto LABEL_32;
    v173 = *(float32x4_t **)(a1 + 48);
    v174 = vmulq_f32(v173[19], v166);
    v175 = (int8x16_t)vmulq_f32(v173[20], v166);
    *(float32x2_t *)v174.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v175.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL)));
    v176 = (int8x16_t)vmulq_f32(v173[21], v166);
    v176.i32[3] = 0;
    *(float32x2_t *)&v174.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v176.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)), 0);
    v177 = -v165;
    v178 = vmulq_n_f32((float32x4_t)0, v177);
    v178.i32[3] = 0;
    v179 = vmulq_n_f32(a3[6], v177);
    v179.i32[3] = 0;
    v180 = vaddq_f32(a3[5], vmulq_f32(v174, v179));
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v178));
  }
  else
  {
    v181 = *(float *)(a1 + 508);
    if (v181 <= 0.00000011921)
      goto LABEL_32;
    v182 = a2[5];
    v183 = vsubq_f32(vaddq_f32(a3[12], a3[5]), vaddq_f32(a2[12], v182));
    v183.i32[3] = 0;
    v184 = (int8x16_t)vmulq_f32(v183, v183);
    v185 = vadd_f32(vpadd_f32(*(float32x2_t *)v184.i8, *(float32x2_t *)v184.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)).f32[0];
    if (v185 <= 0.00000011921)
      goto LABEL_32;
    v186 = *(float32x4_t **)(a1 + 40);
    v187 = *(float32x4_t **)(a1 + 48);
    v188 = v186[19];
    v188.i32[3] = 0;
    v189 = v186[20];
    v189.i32[3] = 0;
    v190 = vmulq_n_f32(v183, 1.0 / sqrtf(v185));
    v191 = v186[21];
    v191.i32[3] = 0;
    v192 = (int8x16_t)vmulq_f32(v190, vaddq_f32(vaddq_f32(vmulq_n_f32(v188, v190.f32[0]), vmulq_lane_f32(v189, *(float32x2_t *)v190.f32, 1)), vmulq_laneq_f32(v191, v190, 2)));
    v193 = v187[19];
    v194 = v187[20];
    v193.i32[3] = 0;
    v194.i32[3] = 0;
    v195 = v187[21];
    v195.i32[3] = 0;
    v196 = (int8x16_t)vmulq_f32(v190, vaddq_f32(vaddq_f32(vmulq_n_f32(v193, v190.f32[0]), vmulq_lane_f32(v194, *(float32x2_t *)v190.f32, 1)), vmulq_laneq_f32(v195, v190, 2)));
    v197 = vmulq_n_f32(v183, v181* (float)(1.0/ vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v192.i8, *(float32x2_t *)v192.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v192, v192, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v196.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL))).f32[0]));
    v198 = v197;
    v198.i32[3] = 0;
    v199 = (int8x16_t)vmulq_f32(v198, v198);
    v200 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v199.i8, *(float32x2_t *)v199.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v199, v199, 8uLL)).f32[0]);
    v201 = vmulq_n_f32(v197, 1.0 / v200);
    v201.i32[3] = 0;
    if (a2[13].i64[0])
    {
      v202 = (int8x16_t)vmulq_f32(v186[19], v201);
      v203 = vmulq_f32(v186[20], v201);
      *(float32x2_t *)v203.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v202.i8, *(float32x2_t *)v203.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL)));
      v204 = (int8x16_t)vmulq_f32(v186[21], v201);
      v204.i32[3] = 0;
      *(float32x2_t *)&v203.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v204.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL)), 0);
      v205 = vmulq_n_f32((float32x4_t)0, v200);
      v205.i32[3] = 0;
      v206 = vmulq_n_f32(a2[6], v200);
      v206.i32[3] = 0;
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v205));
      a2[5] = vaddq_f32(v182, vmulq_f32(v203, v206));
    }
    if (!a3[13].i64[0])
      goto LABEL_32;
    v207 = *(float32x4_t **)(a1 + 48);
    v208 = vmulq_f32(v207[19], v201);
    v209 = (int8x16_t)vmulq_f32(v207[20], v201);
    *(float32x2_t *)v208.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v209.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL)));
    v210 = (int8x16_t)vmulq_f32(v207[21], v201);
    v210.i32[3] = 0;
    *(float32x2_t *)&v208.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v210.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v210, v210, 8uLL)), 0);
    v211 = -v200;
    v212 = vmulq_n_f32((float32x4_t)0, v211);
    v212.i32[3] = 0;
    v213 = vmulq_n_f32(a3[6], v211);
    v213.i32[3] = 0;
    v180 = vaddq_f32(a3[5], vmulq_f32(v208, v213));
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v212));
  }
  a3[5] = v180;
LABEL_32:
  v214 = vaddq_f32(a2[12], a2[5]);
  v215 = vaddq_f32(a3[12], a3[5]);
  if (*(_BYTE *)(a1 + 594))
  {
    v216 = *(float *)(a1 + 596);
    v217 = (float)((float)(v216 * *(float *)(a1 + 572)) * *(float *)(a1 + 500)) / a4;
    v218 = vsubq_f32(v215, v214);
    v218.i32[3] = 0;
    v219 = *(float32x4_t *)(a1 + 528);
    v220 = (int8x16_t)vmulq_f32(v219, v218);
    v221 = vadd_f32(vpadd_f32(*(float32x2_t *)v220.i8, *(float32x2_t *)v220.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)).f32[0];
    if (v221 > 0.0)
      v217 = v217 + (float)((float)(v216 * v221) * *(float *)(a1 + 504));
    v222 = *(float *)(a1 + 584);
    v223 = fmaxf(v222 + (float)(v217 * *(float *)(a1 + 560)), 0.0);
    v224 = vmulq_n_f32(v219, v223 - v222);
    v224.i32[3] = 0;
    v225 = *(float32x4_t *)(a1 + 608);
    v226 = (int8x16_t)vmulq_f32(v225, v224);
    v227 = vmulq_n_f32(v225, vadd_f32(vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL)).f32[0]);
    v227.i32[3] = 0;
    v228 = vsubq_f32(v224, v227);
    v229 = v228;
    v229.i32[3] = 0;
    *(float *)(a1 + 584) = v223;
    v230 = (int8x16_t)vmulq_f32(v229, v229);
    v231 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v230.i8, *(float32x2_t *)v230.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v230, v230, 8uLL)).f32[0]);
    v232 = vmulq_n_f32(v228, 1.0 / v231);
    v232.i32[3] = 0;
    if (a2[13].i64[0])
    {
      v233 = *(float32x4_t **)(a1 + 40);
      v234 = vmulq_f32(v233[19], v232);
      v235 = (int8x16_t)vmulq_f32(v233[20], v232);
      *(float32x2_t *)v234.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v235.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v235, v235, 8uLL)));
      v236 = (int8x16_t)vmulq_f32(v233[21], v232);
      v236.i32[3] = 0;
      *(float32x2_t *)&v234.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v236.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL)), 0);
      v237 = vmulq_n_f32((float32x4_t)0, v231);
      v237.i32[3] = 0;
      v238 = vmulq_n_f32(a2[6], v231);
      v238.i32[3] = 0;
      v239 = vaddq_f32(a2[5], vmulq_f32(v234, v238));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v237));
      a2[5] = v239;
    }
    if (a3[13].i64[0])
    {
      v240 = *(float32x4_t **)(a1 + 48);
      v241 = vmulq_f32(v240[19], v232);
      v242 = (int8x16_t)vmulq_f32(v240[20], v232);
      *(float32x2_t *)v241.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v242.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL)));
      v243 = (int8x16_t)vmulq_f32(v240[21], v232);
      v243.i32[3] = 0;
      *(float32x2_t *)&v241.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v243.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL)), 0);
      v244 = -v231;
      v245 = vmulq_n_f32((float32x4_t)0, v244);
      v245.i32[3] = 0;
      v246 = vmulq_n_f32(a3[6], v244);
      v246.i32[3] = 0;
      v247 = vaddq_f32(a3[5], vmulq_f32(v241, v246));
      a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v245));
      a3[5] = v247;
    }
  }
  if (*(_BYTE *)(a1 + 593))
  {
    v248 = *(float *)(a1 + 600);
    v249 = (float)((float)(v248 * *(float *)(a1 + 576)) * *(float *)(a1 + 500)) / a4;
    v250 = vsubq_f32(v215, v214);
    v250.i32[3] = 0;
    v251 = *(float32x4_t *)(a1 + 544);
    v252 = (int8x16_t)vmulq_f32(v251, v250);
    v253 = vadd_f32(vpadd_f32(*(float32x2_t *)v252.i8, *(float32x2_t *)v252.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v252, v252, 8uLL)).f32[0];
    if (v253 > 0.0)
      v249 = v249 + (float)((float)(v248 * v253) * *(float *)(a1 + 504));
    v254 = v249 * *(float *)(a1 + 564);
    v255 = *(float *)(a1 + 588);
    v256 = fmaxf(v255 + v254, 0.0);
    *(float *)(a1 + 588) = v256;
    v257 = v256 - v255;
    if (a2[13].i64[0])
    {
      v258 = *(float32x4_t **)(a1 + 40);
      v259 = vmulq_f32(v251, v258[19]);
      v260 = (int8x16_t)vmulq_f32(v251, v258[20]);
      *(float32x2_t *)v259.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v260.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v260, v260, 8uLL)));
      v261 = (int8x16_t)vmulq_f32(v251, v258[21]);
      v261.i32[3] = 0;
      *(float32x2_t *)&v259.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v261.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v261, v261, 8uLL)), 0);
      v262 = vmulq_n_f32((float32x4_t)0, v257);
      v262.i32[3] = 0;
      v263 = vmulq_n_f32(a2[6], v257);
      v263.i32[3] = 0;
      v264 = vaddq_f32(a2[5], vmulq_f32(v259, v263));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v262));
      a2[5] = v264;
    }
    if (a3[13].i64[0])
    {
      v265 = *(float32x4_t **)(a1 + 48);
      v266 = *(float32x4_t *)(a1 + 544);
      v267 = vmulq_f32(v265[19], v266);
      v268 = (int8x16_t)vmulq_f32(v266, v265[20]);
      *(float32x2_t *)v267.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v268.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL)));
      v269 = (int8x16_t)vmulq_f32(v266, v265[21]);
      v269.i32[3] = 0;
      *(float32x2_t *)&v267.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v269.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL)), 0);
      v270 = -v257;
      v271 = vmulq_n_f32((float32x4_t)0, v270);
      v271.i32[3] = 0;
      v272 = vmulq_n_f32(a3[6], v270);
      v272.i32[3] = 0;
      v273 = vaddq_f32(a3[5], vmulq_f32(v267, v272));
      a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v271));
      a3[5] = v273;
    }
  }
}

void sub_1B21F2988(float32x2_t *a1, float32x4_t *a2, float *a3, float32x4_t *a4, float *a5)
{
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;

  v10 = a2->f32[3];
  if (v10 < -1.0)
    v10 = -1.0;
  if (v10 > 1.0)
    v10 = 1.0;
  v11 = acosf(v10);
  v12 = v11 + v11;
  *a3 = v12;
  if (v12 > 0.00000011921)
  {
    v13 = *a2;
    v13.i64[1] = a2->u32[2];
    v14 = (int8x16_t)vmulq_f32(v13, v13);
    v15 = vmulq_n_f32(v13, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]));
    *a4 = v15;
    *a5 = a1[64].f32[0];
    if (fabsf(v15.f32[1]) > 0.00000011921)
    {
      __asm { FMOV            V2.2S, #1.0 }
      _D2.f32[0] = COERCE_FLOAT(vmulq_f32(v15, v15).i32[2]) / (float)(v15.f32[1] * v15.f32[1]);
      *a5 = sqrtf((float)(_D2.f32[0] + 1.0) / vaddv_f32(vdiv_f32(_D2, vmul_f32(a1[64], a1[64]))));
    }
  }
}

void sub_1B21F2A88(uint64_t a1, int8x16_t *a2, float *a3, float32x4_t *a4)
{
  float v7;
  float v8;
  float v9;
  int8x16_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;

  v16 = *a2;
  LODWORD(v7) = HIDWORD(*(unsigned __int128 *)a2);
  if (v7 < -1.0)
    v7 = -1.0;
  if (v7 > 1.0)
    v7 = 1.0;
  v8 = acosf(v7);
  v9 = v8 + v8;
  *a3 = v9;
  if (v9 > 3.1416)
  {
    v10.i64[0] = 0x8000000080000000;
    v10.i64[1] = 0x8000000080000000;
    v11 = veorq_s8(*a2, v10);
    v16 = v11;
    v12 = *(float *)&v11.i32[3];
    if (*(float *)&v11.i32[3] < -1.0)
      v12 = -1.0;
    if (v12 > 1.0)
      v12 = 1.0;
    v13 = acosf(v12);
    *a3 = v13 + v13;
  }
  v14 = (float32x4_t)v16;
  v14.i32[3] = 0;
  *a4 = v14;
  if (*a3 > 0.00000011921)
  {
    v15 = (int8x16_t)vmulq_f32(v14, v14);
    *a4 = vmulq_n_f32(v14, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).f32[0]));
  }
}

__n128 sub_1B21F2B74@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>, float a3@<S0>, unsigned int a4@<S1>)
{
  __float2 v6;
  float v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  __float2 v11;
  float32x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  __n128 result;

  v6 = __sincosf_stret(a3);
  v7 = *(float *)(a1 + 512);
  if (fabsf(v6.__cosval) > 0.00000011921)
    v7 = sqrtf((float)((float)((float)(v6.__sinval * v6.__sinval) / (float)(v6.__cosval * v6.__cosval)) + 1.0)/ (float)((float)((float)((float)(v6.__sinval * v6.__sinval) / (float)(v6.__cosval * v6.__cosval))/ (float)(v7 * v7))+ (float)(1.0 / (float)(*(float *)(a1 + 516) * *(float *)(a1 + 516)))));
  v8.i32[0] = 0;
  v8.i32[3] = 0;
  v8.i32[1] = LODWORD(v6.__cosval);
  v8.f32[2] = -v6.__sinval;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0]);
  v11 = __sincosf_stret(v7 * 0.5);
  v12.i32[0] = 0;
  v12.i32[1] = LODWORD(v6.__cosval);
  *(float32x2_t *)v13.i8 = vmul_n_f32(v12, v11.__sinval / v10);
  v14.i64[0] = v13.i64[0];
  *(float *)&v14.i32[2] = -(float)(v6.__sinval * (float)(v11.__sinval / v10));
  v14.i32[3] = LODWORD(v11.__cosval);
  v15 = (int32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
  v16.i32[0] = 0;
  v16.i32[1] = a4;
  v17 = (float32x2_t)vzip1_s32(v15, *(int32x2_t *)v13.i8);
  v18 = (float32x2_t)vext_s8(*(int8x8_t *)v13.i8, (int8x8_t)v15, 4uLL);
  *(float32x2_t *)v19.f32 = vmul_f32(v17, 0);
  *(float32x2_t *)&v19.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v16), v18);
  *(float32x2_t *)v20.i8 = vadd_f32(vmul_laneq_f32((float32x2_t)a4, (float32x4_t)v14, 3), vmul_f32((float32x2_t)v16, v18));
  v20.u64[1] = (unint64_t)vadd_f32(vmul_f32(*(float32x2_t *)v13.i8, 0), vmul_f32((float32x2_t)v16, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v13, 0xCuLL)));
  v21 = vsubq_f32((float32x4_t)veorq_s8(v20, (int8x16_t)xmmword_1B2269000), v19);
  v22 = (float32x4_t)veorq_s8(v14, (int8x16_t)xmmword_1B2269010);
  *(int32x2_t *)v13.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), *(int32x2_t *)v21.f32);
  v14.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v23 = vzip1_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v22.f32);
  v24 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
  v25 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v22.f32, 4uLL), *(float32x2_t *)v13.i8);
  *(float32x2_t *)v13.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v22.f32, *(int8x8_t *)v14.i8, 4uLL), *(float32x2_t *)v13.i8);
  v13.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v23), v24);
  *(float32x2_t *)v14.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v21.f32, v22, 3), vmul_f32((float32x2_t)v23, v24));
  v14.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.f32, 1), v25);
  result = (__n128)vaddq_f32(vsubq_f32(vmulq_laneq_f32(v22, v21, 3), (float32x4_t)v13), (float32x4_t)v14);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

uint64_t sub_1B21F2D18(uint64_t result, int a2, unsigned int a3, float a4)
{
  int v4;

  if ((a2 - 3) < 2)
  {
    if (a3 > 2)
    {
      *(float *)(result + 700) = a4;
      v4 = *(_DWORD *)(result + 688) | 4;
    }
    else
    {
      *(float *)(result + 692) = a4;
      v4 = *(_DWORD *)(result + 688) | 1;
    }
  }
  else
  {
    if ((a2 - 1) > 1)
      return result;
    if (a3 > 2)
    {
      *(float *)(result + 500) = a4;
      return result;
    }
    *(float *)(result + 696) = a4;
    v4 = *(_DWORD *)(result + 688) | 2;
  }
  *(_DWORD *)(result + 688) = v4;
  return result;
}

float sub_1B21F2D7C(float *a1, int a2, unsigned int a3)
{
  float result;

  result = 0.0;
  if ((a2 - 3) < 2)
  {
    if (a3 > 2)
    {
      if (a3 - 3 <= 2)
        return a1[175];
    }
    else
    {
      return a1[173];
    }
  }
  else if ((a2 - 1) <= 1)
  {
    if (a3 > 2)
    {
      if (a3 - 3 <= 2)
        return a1[125];
    }
    else
    {
      return a1[174];
    }
  }
  return result;
}

uint64_t sub_1B21F2DE0(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  a1[23] = *a2;
  a1[24] = a2[1];
  a1[25] = a2[2];
  a1[26] = a2[3];
  a1[27] = *a3;
  a1[28] = a3[1];
  a1[29] = a3[2];
  a1[30] = a3[3];
  return (*(uint64_t (**)(_OWORD *))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *sub_1B21F2E2C(_QWORD *result)
{
  *result = off_1E63CC8E0;
  return result;
}

void sub_1B21F2E40(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E63CC8E0;
  sub_1B21FF5FC(a1);
}

uint64_t sub_1B21F2E58()
{
  return 224;
}

const char *sub_1B21F2E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  uint64_t m;
  __int128 v15;

  sub_1B21FADBC(a1, a2, a3);
  v5 = 0;
  v6 = a1 + 368;
  v7 = a2 + 64;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)(v7 + i) = *(_DWORD *)(v6 + i);
    ++v5;
    v6 += 16;
    v7 += 16;
  }
  while (v5 != 3);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 112 + j) = *(_DWORD *)(a1 + 416 + j);
  v10 = 0;
  v11 = a1 + 432;
  v12 = a2 + 128;
  do
  {
    for (k = 0; k != 16; k += 4)
      *(_DWORD *)(v12 + k) = *(_DWORD *)(v11 + k);
    ++v10;
    v11 += 16;
    v12 += 16;
  }
  while (v10 != 3);
  for (m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 176 + m) = *(_DWORD *)(a1 + 480 + m);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 512);
  *(_QWORD *)&v15 = *(_QWORD *)(a1 + 516);
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(a1 + 496);
  *(_OWORD *)(a2 + 196) = v15;
  *(_QWORD *)(a2 + 212) = *(_QWORD *)(a1 + 504);
  return "btConeTwistConstraintData";
}

float32_t sub_1B21F2F60(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int8x8_t *a4, int8x8_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, float a9, float a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v28;
  int8x16_t v29;
  float32_t result;

  v10 = *a6;
  *a1 = *a6;
  *(int8x8_t *)v11.f32 = vext_s8(*a4, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v11.u32[2] = *a4;
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v10.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), 4uLL);
  v12.i64[1] = v10.i64[0];
  v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, *(float32x4_t *)a4->i8), vmulq_f32(v10, v11));
  v12.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v12.i64[1] = v13.i64[0];
  v14 = v12;
  v14.i32[3] = 0;
  v15 = (int8x16_t)vmulq_f32(a2[2], v12);
  v16 = (int8x16_t)vmulq_f32(*a2, v14);
  v17 = vmulq_f32(a2[1], v14);
  v15.i32[3] = 0;
  *(float32x2_t *)v17.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v17.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)));
  *(float32x2_t *)&v17.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  a1[1] = v17;
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v18 = (float32x4_t)veorq_s8((int8x16_t)v10, v15);
  *(int8x8_t *)v19.f32 = vext_s8(*a5, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v19.u32[2] = *a5;
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
  v20.i64[1] = v18.i64[0];
  v21 = (int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)a5->i8, v20), vmulq_f32(v19, v10));
  v18.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
  v18.i64[1] = v21.i64[0];
  v22 = (int8x16_t)vmulq_f32(a3[2], v18);
  v18.i32[3] = 0;
  v23 = vmulq_f32(*a3, v18);
  v24 = (int8x16_t)vmulq_f32(a3[1], v18);
  v22.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  a1[2] = v23;
  v25 = vmulq_f32(v17, *a7);
  a1[3] = v25;
  v26 = vmulq_f32(*a8, v23);
  a1[4] = v26;
  v27 = (int8x16_t)vmulq_f32(v17, v25);
  v28 = (float)(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)).f32[0]+ a9)+ a10;
  v29 = (int8x16_t)vmulq_f32(v23, v26);
  result = v28
         + vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0];
  a1[5].f32[0] = result;
  return result;
}

uint64_t sub_1B21F30B4()
{
  return 64;
}

float sub_1B21F30BC(uint64_t a1, int a2)
{
  return *(float *)(a1 + 4 * a2 + 1328);
}

float32x2_t sub_1B21F30C8(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x2_t result;

  a1->i64[0] = 0;
  a1->i64[1] = 0;
  v6 = vmulq_f32(*a3, *a2);
  v7 = (int8x16_t)vmulq_f32(*a2, a3[1]);
  v8 = (int8x16_t)vmulq_f32(*a2, a3[2]);
  v8.i32[3] = 0;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  a1[1] = v6;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10 = (float32x4_t)veorq_s8(*(int8x16_t *)a2, v9);
  v11 = vmulq_f32(*a4, v10);
  v12 = (int8x16_t)vmulq_f32(a4[1], v10);
  v13 = (int8x16_t)vmulq_f32(a4[2], v10);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  a1[2] = v11;
  v14 = vmulq_f32(v6, *a5);
  a1[3] = v14;
  v15 = vmulq_f32(v11, *a6);
  a1[4] = v15;
  v16 = (int8x16_t)vmulq_f32(v6, v14);
  v17 = (int8x16_t)vmulq_f32(v11, v15);
  result = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8)), vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  a1[5].i32[0] = result.i32[0];
  return result;
}

void sub_1B21F31A4(uint64_t a1, _DWORD *a2, uint64_t a3, _OWORD *a4, _OWORD *a5, float32x4_t *a6, int8x8_t *a7, int a8)
{
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x2_t v43;
  float32x2_t v44;
  int32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  int32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x8_t v63;
  float v64;

  sub_1B21FACE4(a1, 4, (uint64_t)a2, a3);
  *(_QWORD *)v14 = off_1E63CC848;
  *(_OWORD *)(v14 + 792) = xmmword_1B22CA570;
  *(_DWORD *)(v14 + 808) = 1065353216;
  *(_QWORD *)(v14 + 812) = 0;
  *(_BYTE *)(v14 + 820) = 0;
  *(_DWORD *)(v14 + 840) = 0x1000000;
  *(_BYTE *)(v14 + 844) = a8;
  *(_DWORD *)(v14 + 852) = 0;
  *(_OWORD *)(v14 + 704) = *a4;
  v15.i32[0] = a2[4];
  v15.i32[1] = a2[8];
  v16 = v15;
  v16.i32[2] = a2[12];
  v17 = *a6;
  v18 = (int8x16_t)vmulq_f32(*a6, v16);
  v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
  if (v19 >= 1.0)
  {
    v15.i32[0] = a2[5];
    v17.i32[0] = a2[6];
    v17.i32[1] = a2[10];
    v17.i32[2] = a2[14];
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    v17 = (float32x4_t)veorq_s8((int8x16_t)v17, v24);
  }
  else
  {
    if (v19 > -1.0)
    {
      v20.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
      v20.i64[1] = a6->i64[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), 4uLL);
      v21.i64[1] = v15.i64[0];
      v22 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v21), vmulq_f32(v16, v20));
      v15.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v22.i8, 4uLL);
      v21.i64[1] = v15.i64[0];
      v15.i64[1] = v22.u32[0];
      v23 = (int8x16_t)vsubq_f32(vmulq_f32(v20, v15), vmulq_f32(v17, v21));
      v17.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
      v17.i64[1] = v23.u32[0];
      goto LABEL_7;
    }
    v15.i32[0] = a2[5];
    v17.i32[0] = a2[6];
    v17.i32[1] = a2[10];
    v17.i32[2] = a2[14];
  }
  v15.i32[1] = a2[9];
  v15.i32[2] = a2[13];
LABEL_7:
  *(int32x2_t *)(v14 + 656) = vzip1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v15.f32);
  *(_DWORD *)(v14 + 664) = a6->i32[0];
  *(_DWORD *)(v14 + 668) = 0;
  *(int32x2_t *)(v14 + 672) = vzip2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v15.f32);
  *(_DWORD *)(v14 + 680) = a6->i32[1];
  *(_DWORD *)(v14 + 684) = 0;
  v25 = (int32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  *(int32x2_t *)(v14 + 688) = vzip1_s32(v25, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL));
  *(_DWORD *)(v14 + 696) = a6->i32[2];
  *(_DWORD *)(v14 + 700) = 0;
  v26 = *a6;
  v27 = *(float32x4_t *)a7->i8;
  *(int8x8_t *)v28.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), 4uLL);
  *(int8x8_t *)&v28.u32[2] = *a7;
  v29 = (int8x16_t)vmulq_f32(*a6, *(float32x4_t *)a7->i8);
  v30 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0];
  if (v30 >= -1.0)
  {
    v38.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
    v38.i64[1] = a6->i64[0];
    v39 = (int8x16_t)vsubq_f32(vmulq_f32(v26, v28), vmulq_f32(v27, v38));
    v40 = (float32x4_t)vextq_s8(vextq_s8(v39, v39, 0xCuLL), v39, 8uLL);
    v40.i32[3] = sqrtf((float)(v30 + 1.0) + (float)(v30 + 1.0));
    v41.i32[1] = 1056964608;
    v41.i64[1] = 0x3F0000003F000000;
    *(float *)v41.i32 = 1.0 / v40.f32[3];
    v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = 1.0 / v40.f32[3];
    v37 = vmulq_f32(v40, v42);
  }
  else
  {
    LODWORD(v31) = HIDWORD(a6->i64[0]);
    v32 = 1.0 / sqrtf((float)(v31 * v31) + (float)(v26.f32[0] * v26.f32[0]));
    v26.f32[0] = v26.f32[0] * v32;
    v33 = -(float)(v26.f32[1] * v32);
    v34 = 1.0 / sqrtf((float)(v26.f32[2] * v26.f32[2]) + (float)(v31 * v31));
    v35 = -(float)(v26.f32[2] * v34);
    v36 = v26.f32[1] * v34;
    if (fabsf(v26.f32[2]) <= 0.70711)
    {
      v35 = v26.f32[0];
      v36 = 0.0;
    }
    else
    {
      v33 = 0.0;
    }
    v37.i64[0] = __PAIR64__(LODWORD(v35), LODWORD(v33));
    v37.i64[1] = LODWORD(v36);
  }
  v43 = (int32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v44 = (float32x2_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v37.f32, 4uLL);
  v45 = vzip1_s32(v25, *(int32x2_t *)v17.f32);
  v46 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v37.f32);
  v47 = (float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v43, 4uLL);
  v48 = vmul_f32((float32x2_t)v45, v44);
  *(float32x2_t *)v49.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), v46);
  *(float32x2_t *)&v49.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v45), v47);
  *(float32x2_t *)v50.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v17.f32, v37, 3), vmul_f32((float32x2_t)v45, v47));
  v50.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v17.f32, 1), v48);
  v51 = vsubq_f32((float32x4_t)veorq_s8(v50, (int8x16_t)xmmword_1B2269000), v49);
  v52 = (float32x4_t)veorq_s8((int8x16_t)v37, (int8x16_t)xmmword_1B2269010);
  v53 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), *(int32x2_t *)v51.f32);
  v54 = (int32x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  *(int32x2_t *)v49.f32 = vzip1_s32(v54, *(int32x2_t *)v52.f32);
  v55 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL).u64[0];
  v56 = vmul_laneq_f32(*(float32x2_t *)v51.f32, v52, 3);
  v57 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v54, *(int8x8_t *)v52.f32, 4uLL), v53);
  v58 = vmul_lane_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.f32, 1);
  *(float32x2_t *)v59.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v52.f32, (int8x8_t)v54, 4uLL), v53);
  *(float32x2_t *)&v59.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v49.f32), v55);
  v60 = vmulq_laneq_f32(v52, v51, 3);
  *(float32x2_t *)v52.f32 = vadd_f32(v56, vmul_f32(*(float32x2_t *)v49.f32, v55));
  *(float32x2_t *)&v52.u32[2] = vadd_f32(v58, v57);
  v61 = vaddq_f32(vsubq_f32(v60, v59), (float32x4_t)veorq_s8((int8x16_t)v52, (int8x16_t)xmmword_1B2269000));
  v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  v61.i32[3] = 0;
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v61.f32, *(int8x8_t *)v60.f32, 4uLL);
  v60.i64[1] = v61.i64[0];
  v62 = (int8x16_t)vsubq_f32(vmulq_f32(v27, v60), vmulq_f32(v28, v61));
  *(_OWORD *)(v14 + 768) = *a5;
  v63 = vext_s8(*(int8x8_t *)v61.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), 4uLL);
  v60.i64[0] = vzip2q_s32((int32x4_t)v61, vuzp1q_s32((int32x4_t)v61, (int32x4_t)v62)).u64[0];
  v61.i32[1] = v62.i32[1];
  *(_QWORD *)(v14 + 720) = v61.i64[0];
  *(_DWORD *)(v14 + 728) = a7->i32[0];
  *(_DWORD *)(v14 + 732) = 0;
  *(int8x8_t *)(v14 + 736) = v63;
  *(_DWORD *)(v14 + 744) = a7->i32[1];
  *(_DWORD *)(v14 + 748) = 0;
  *(_QWORD *)(v14 + 752) = v60.i64[0];
  *(_DWORD *)(v14 + 760) = a7[1].i32[0];
  *(_DWORD *)(v14 + 764) = 0;
  v64 = 1.0;
  if (a8)
    v64 = -1.0;
  *(float *)(v14 + 836) = v64;
}

uint64_t sub_1B21F3580(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, int a5)
{
  uint64_t result;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float v15;
  int8x16_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x8_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  int32x2_t v48;
  float32x2_t v49;
  int32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  int32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unint64_t v70;
  float v71;

  result = sub_1B21FABC4(a1, 4, a2);
  *(_QWORD *)result = off_1E63CC848;
  *(_OWORD *)(result + 792) = xmmword_1B22CA570;
  *(_DWORD *)(result + 808) = 1065353216;
  *(_QWORD *)(result + 812) = 0;
  *(_BYTE *)(result + 820) = 0;
  *(_DWORD *)(result + 840) = 0x1000000;
  *(_BYTE *)(result + 844) = a5;
  *(_DWORD *)(result + 852) = 0;
  v10 = a4->f32[2];
  v11 = a4->f32[1];
  if (fabsf(v10) <= 0.70711)
  {
    v19 = (float)(v11 * v11) + (float)(a4->f32[0] * a4->f32[0]);
    v20 = 1.0 / sqrtf(v19);
    v16.i64[1] = 0;
    *(float *)v16.i32 = -(float)(v11 * v20);
    *(float *)&v16.i32[1] = a4->f32[0] * v20;
    v15 = -(float)(v10 * *(float *)&v16.i32[1]);
    v17 = v10 * *(float *)v16.i32;
    v18 = v19 * v20;
  }
  else
  {
    v12 = (float)(v10 * v10) + (float)(v11 * v11);
    v13 = 1.0 / sqrtf(v12);
    *(float *)&v14 = v11 * v13;
    v15 = v12 * v13;
    v16.i32[0] = 0;
    *(float *)&v16.i32[1] = -(float)(v10 * v13);
    v16.i64[1] = v14;
    v17 = -(float)(a4->f32[0] * *(float *)&v14);
    v18 = a4->f32[0] * *(float *)&v16.i32[1];
  }
  *(float32x4_t *)(result + 704) = *a3;
  *(_DWORD *)(result + 656) = v16.i32[0];
  *(float *)(result + 660) = v15;
  *(_DWORD *)(result + 664) = a4->i32[0];
  *(_DWORD *)(result + 668) = 0;
  *(_DWORD *)(result + 672) = v16.i32[1];
  *(float *)(result + 676) = v17;
  *(_DWORD *)(result + 680) = a4->i32[1];
  *(_DWORD *)(result + 688) = v16.i32[2];
  *(_DWORD *)(result + 684) = 0;
  *(float *)(result + 692) = v18;
  *(_DWORD *)(result + 696) = a4->i32[2];
  *(_DWORD *)(result + 700) = 0;
  v21 = *a4;
  v22 = *(float32x4_t *)(a2 + 16);
  v23 = *(float32x4_t *)(a2 + 32);
  v24 = (int8x16_t)vmulq_f32(v22, *a4);
  v25 = (int8x16_t)vmulq_f32(*a4, v23);
  v26 = *(float32x4_t *)(a2 + 48);
  v27 = (int8x16_t)vmulq_f32(*a4, v26);
  v27.i32[3] = 0;
  v28 = (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
  v29 = (int8x8_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  *(int8x8_t *)v30.f32 = vext_s8(v28, v29, 4uLL);
  *(int8x8_t *)&v30.u32[2] = v28;
  *(int8x8_t *)v31.f32 = v28;
  *(int8x8_t *)&v31.u32[2] = v29;
  v32 = (int8x16_t)vmulq_f32(*a4, v31);
  v33 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0];
  if (v33 >= -1.0)
  {
    v43.i64[0] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
    v43.i64[1] = a4->i64[0];
    v44 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v30), vmulq_f32(v43, v31));
    v45 = (float32x4_t)vextq_s8(vextq_s8(v44, v44, 0xCuLL), v44, 8uLL);
    v45.i32[3] = sqrtf((float)(v33 + 1.0) + (float)(v33 + 1.0));
    v46.i32[1] = 1056964608;
    v46.i64[1] = 0x3F0000003F000000;
    *(float *)v46.i32 = 1.0 / v45.f32[3];
    v47 = (float32x4_t)vzip1q_s32(v46, v46);
    v47.f32[2] = 1.0 / v45.f32[3];
    v42 = vmulq_f32(v45, v47);
  }
  else
  {
    LODWORD(v34) = HIDWORD(a4->i64[0]);
    v35 = fabsf(v21.f32[2]);
    v36 = 1.0 / sqrtf((float)(v34 * v34) + (float)(v21.f32[0] * v21.f32[0]));
    v37 = -(float)(v21.f32[1] * v36);
    v38 = v21.f32[0] * v36;
    v39 = v37;
    v21.f32[0] = 1.0 / sqrtf((float)(v21.f32[2] * v21.f32[2]) + (float)(v34 * v34));
    v40 = v21.f32[1] * v21.f32[0];
    if (v35 <= 0.70711)
    {
      v41 = v38;
    }
    else
    {
      v39 = 0.0;
      v41 = -(float)(v21.f32[2] * v21.f32[0]);
    }
    if (v35 <= 0.70711)
      v40 = 0.0;
    v42.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v39));
    v42.i64[1] = LODWORD(v40);
  }
  v48 = (int32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
  v49 = (float32x2_t)vext_s8((int8x8_t)v48, *(int8x8_t *)v42.f32, 4uLL);
  v50 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(int32x2_t *)v16.i8);
  v51 = (float32x2_t)vzip1_s32(v48, *(int32x2_t *)v42.f32);
  v52 = (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v48, 4uLL);
  *(float32x2_t *)v53.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v51);
  *(float32x2_t *)&v53.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v50), v52);
  *(float32x2_t *)v54.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v16.i8, v42, 3), vmul_f32((float32x2_t)v50, v52));
  v54.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v16.i8, 1), vmul_f32((float32x2_t)v50, v49));
  v55 = vsubq_f32((float32x4_t)veorq_s8(v54, (int8x16_t)xmmword_1B2269000), v53);
  v56 = (float32x4_t)veorq_s8((int8x16_t)v42, (int8x16_t)xmmword_1B2269010);
  v57 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), *(int32x2_t *)v55.f32);
  v58 = (int32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
  *(int32x2_t *)v53.f32 = vzip1_s32(v58, *(int32x2_t *)v56.f32);
  v59 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL).u64[0];
  v60 = vmul_laneq_f32(*(float32x2_t *)v55.f32, v56, 3);
  v61 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v58, *(int8x8_t *)v56.f32, 4uLL), v57);
  v62 = vmul_lane_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.f32, 1);
  *(float32x2_t *)v63.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)v58, 4uLL), v57);
  *(float32x2_t *)&v63.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v53.f32), v59);
  v64 = vmulq_laneq_f32(v56, v55, 3);
  *(float32x2_t *)v55.f32 = vadd_f32(v60, vmul_f32(*(float32x2_t *)v53.f32, v59));
  *(float32x2_t *)&v55.u32[2] = vadd_f32(v62, v61);
  v65 = vaddq_f32(vsubq_f32(v64, v63), (float32x4_t)veorq_s8((int8x16_t)v55, (int8x16_t)xmmword_1B2269000));
  v64.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v65.i32[3] = 0;
  *(int8x8_t *)v64.f32 = vext_s8(*(int8x8_t *)v65.f32, *(int8x8_t *)v64.f32, 4uLL);
  v64.i64[1] = v65.i64[0];
  v66 = (int8x16_t)vsubq_f32(vmulq_f32(v31, v64), vmulq_f32(v30, v65));
  v67 = vmulq_f32(v22, *a3);
  v68 = (int8x16_t)vmulq_f32(v23, *a3);
  v69 = (int8x16_t)vmulq_f32(v26, *a3);
  v69.i32[3] = 0;
  *(float32x2_t *)v67.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
  *(float32x2_t *)&v67.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
  *(int8x8_t *)v69.i8 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), 4uLL);
  v70 = vzip2q_s32((int32x4_t)v65, vuzp1q_s32((int32x4_t)v65, (int32x4_t)v66)).u64[0];
  v65.i32[1] = v66.i32[1];
  *(float32x4_t *)(result + 768) = vaddq_f32(*(float32x4_t *)(a2 + 64), v67);
  *(_QWORD *)(result + 720) = v65.i64[0];
  *(_DWORD *)(result + 728) = v28.i32[0];
  *(_DWORD *)(result + 732) = 0;
  *(_QWORD *)(result + 736) = v69.i64[0];
  *(_DWORD *)(result + 744) = v28.i32[1];
  *(_DWORD *)(result + 748) = 0;
  *(_QWORD *)(result + 752) = v70;
  *(_DWORD *)(result + 760) = v29.i32[0];
  *(_DWORD *)(result + 764) = 0;
  v71 = 1.0;
  if (a5)
    v71 = -1.0;
  *(float *)(result + 836) = v71;
  return result;
}

void sub_1B21F3968(uint64_t a1, __n128 a2, double a3, double a4, double a5, __n128 a6)
{
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float v22;
  int8x16_t v23;
  uint64_t v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float32x4_t *v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float v63;
  float v64;
  float32x2_t v65;
  float32x4_t *v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint64_t v85;
  uint64_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  uint64_t v95;
  uint64_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float v106;
  float32x4_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125[3];
  float32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  __int128 v129;
  float32x4_t v130;
  int8x16_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 842))
  {
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 848) = 0;
    if (!*(_BYTE *)(a1 + 840))
    {
      v7 = *(float32x4_t **)(a1 + 40);
      v8 = *(float32x4_t **)(a1 + 48);
      v9 = *(float32x4_t *)(a1 + 704);
      v10 = (int8x16_t)vmulq_f32(v7[1], v9);
      v11 = vmulq_f32(v9, v7[2]);
      v12 = (int8x16_t)vmulq_f32(v9, v7[3]);
      v12.i32[3] = 0;
      *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      v13 = 0;
      *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
      v14 = vaddq_f32(v11, v7[4]);
      v15 = *(float32x4_t *)(a1 + 768);
      v16 = vmulq_f32(v8[1], v15);
      v17 = (int8x16_t)vmulq_f32(v15, v8[2]);
      v18 = (int8x16_t)vmulq_f32(v15, v8[3]);
      v18.i32[3] = 0;
      *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
      *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
      v19 = vaddq_f32(v16, v8[4]);
      v20 = vsubq_f32(v19, v14);
      v20.i32[3] = 0;
      v21 = (int8x16_t)vmulq_f32(v20, v20);
      v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8)).f32[0];
      if (v22 <= 0.00000011921)
      {
        v129 = xmmword_1B2244DB0;
        v23.i32[0] = 1.0;
      }
      else
      {
        v23 = (int8x16_t)vmulq_n_f32(v20, 1.0 / sqrtf(v22));
        v129 = (__int128)v23;
        v13 = (float32x2_t)vextq_s8(v23, v23, 4uLL).u64[0];
      }
      v24 = 0;
      v25 = fabsf(v13.f32[1]) <= 0.70711;
      v26 = vmul_f32(v13, v13).f32[0] + (float)(*(float *)v23.i32 * *(float *)v23.i32);
      v27 = 1.0 / sqrtf(v26);
      v28 = -(float)(v13.f32[0] * v27);
      v29 = *(float *)v23.i32 * v27;
      v30 = -(float)(v13.f32[1] * (float)(*(float *)v23.i32 * v27));
      v31 = v13.f32[1] * v28;
      v32 = v26 * v27;
      v33 = vmlas_n_f32(v13.f32[1] * v13.f32[1], v13.f32[0], v13.f32[0]);
      v34 = sqrtf(v33);
      v35 = -(float)(v13.f32[1] * (float)(1.0 / v34));
      v36 = (float)(1.0 / v34) * v13.f32[0];
      v37 = v33 * (float)(1.0 / v34);
      v38 = -(float)(*(float *)v23.i32 * v36);
      v39 = v35 * *(float *)v23.i32;
      if (v25)
      {
        v35 = v29;
        v36 = 0.0;
      }
      else
      {
        v28 = 0.0;
      }
      if (v25)
        v40 = v30;
      else
        v40 = v37;
      if (v25)
        v41 = v31;
      else
        v41 = v38;
      v130.i64[0] = __PAIR64__(LODWORD(v35), LODWORD(v28));
      if (v25)
        v39 = v32;
      v130.f32[2] = v36;
      v131.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v40));
      *(float *)&v131.i32[2] = v39;
      v42 = (float32x4_t *)(a1 + 80);
      v121 = v19;
      v122 = v14;
      do
      {
        v43 = *(_QWORD *)(a1 + 40);
        v44 = *(_QWORD *)(a1 + 48);
        v45 = *(int32x4_t *)(v43 + 16);
        v46 = *(int32x4_t *)(v43 + 32);
        v47 = (int8x16_t)vtrn1q_s32(v45, v46);
        v48 = *(int8x16_t *)(v43 + 48);
        v49 = *(float32x4_t *)(v43 + 64);
        *(int32x2_t *)v45.i8 = vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v46.i8);
        v46.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
        v47.i64[1] = v48.u32[0];
        v45.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v48.i8, 0);
        v46.i64[1] = vextq_s8(v48, v48, 8uLL).u32[0];
        v126 = (float32x4_t)v47;
        v127 = v45;
        v128 = v46;
        v50 = *(int32x4_t *)(v44 + 16);
        v51 = *(int32x4_t *)(v44 + 32);
        v52 = (int8x16_t)vtrn1q_s32(v50, v51);
        v53 = *(int8x16_t *)(v44 + 48);
        v54 = *(float32x4_t *)(v44 + 64);
        *(int32x2_t *)v50.i8 = vzip2_s32(*(int32x2_t *)v50.i8, *(int32x2_t *)v51.i8);
        v51.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
        v52.i64[1] = v53.u32[0];
        v50.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v53.i8, 0);
        v51.i64[1] = vextq_s8(v53, v53, 8uLL).u32[0];
        v125[0] = (float32x4_t)v52;
        v125[1] = (float32x4_t)v50;
        v125[2] = (float32x4_t)v51;
        v55 = vsubq_f32(v14, v49);
        v55.i32[3] = 0;
        v124 = v55;
        v56 = vsubq_f32(v19, v54);
        v56.i32[3] = 0;
        v123 = v56;
        sub_1B21F2F60(v42, &v126, v125, (int8x8_t *)&v124, (int8x8_t *)&v123, (float32x4_t *)((char *)&v129 + v24), (float32x4_t *)(v43 + 448), (float32x4_t *)(v44 + 448), *(float *)(v43 + 384), *(float *)(v44 + 384));
        v19 = v121;
        v14 = v122;
        v24 += 16;
        v42 = v57 + 6;
      }
      while (v24 != 48);
    }
    a2.n128_u32[0] = *(_DWORD *)(a1 + 664);
    v58 = *(float *)(a1 + 680);
    v59 = *(float *)(a1 + 696);
    if (fabsf(v59) <= 0.70711)
    {
      v63 = (float)(v58 * v58) + (float)(a2.n128_f32[0] * a2.n128_f32[0]);
      v64 = 1.0 / sqrtf(v63);
      a6 = a2;
      a6.n128_f32[1] = -v58;
      v65.f32[0] = -v59;
      a6.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)a6.n128_u64[0], v64);
      v62 = (float32x4_t)vrev64q_s32((int32x4_t)a6).u64[0];
      v65.i32[1] = *(_DWORD *)(a1 + 696);
      a6.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)a6.n128_u64[0], v65);
      a6.n128_f32[2] = v63 * v64;
    }
    else
    {
      v60 = (float)(v59 * v59) + (float)(v58 * v58);
      v61 = 1.0 / sqrtf(v60);
      v62.i32[0] = 0;
      v62.i32[3] = 0;
      v62.f32[1] = -(float)(v59 * v61);
      v62.f32[2] = v58 * v61;
      a6.n128_f32[0] = v60 * v61;
      a6.n128_f32[1] = -(float)(a2.n128_f32[0] * (float)(v58 * v61));
      a6.n128_f32[2] = a2.n128_f32[0] * v62.f32[1];
    }
    v66 = *(float32x4_t **)(a1 + 40);
    v67 = *(_QWORD *)(a1 + 48);
    v68 = v66[1];
    v69 = v66[2];
    v70 = (int8x16_t)vmulq_f32(v62, v68);
    v71 = (int8x16_t)vmulq_f32(v62, v69);
    v72 = v66[3];
    v73 = (int8x16_t)vmulq_f32(v62, v72);
    v73.i32[3] = 0;
    *(float32x2_t *)v70.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v71.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v70.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)), 0);
    v125[0] = (float32x4_t)v70;
    v74 = vmulq_f32((float32x4_t)a6, v68);
    v75 = (int8x16_t)vmulq_f32((float32x4_t)a6, v69);
    v76 = (int8x16_t)vmulq_f32((float32x4_t)a6, v72);
    v76.i32[3] = 0;
    *(float32x2_t *)v74.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)), vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.i8));
    *(float32x2_t *)&v74.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
    v124 = v74;
    v74.i64[0] = __PAIR64__(LODWORD(v58), a2.n128_u32[0]);
    v74.i64[1] = LODWORD(v59);
    v77 = (int8x16_t)vmulq_f32(v74, v68);
    v78 = (int8x16_t)vmulq_f32(v74, v69);
    v79 = (int8x16_t)vmulq_f32(v74, v72);
    v79.i32[3] = 0;
    *(float32x2_t *)v77.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v78.i8));
    v77.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0);
    v123 = (float32x4_t)v77;
    v80 = (int8x16_t)vtrn1q_s32((int32x4_t)v68, (int32x4_t)v69);
    *(int32x2_t *)v74.f32 = vzip2_s32(*(int32x2_t *)v68.f32, *(int32x2_t *)v69.f32);
    v76.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
    v80.i64[1] = v72.u32[0];
    *(int32x2_t *)&v74.u32[2] = vzip2_s32(*(int32x2_t *)v72.f32, 0);
    v76.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
    v129 = (__int128)v80;
    v130 = v74;
    v131 = v76;
    v81 = *(int32x4_t *)(v67 + 16);
    v82 = *(int32x4_t *)(v67 + 32);
    v83 = (int8x16_t)vtrn1q_s32(v81, v82);
    v84 = *(int8x16_t *)(v67 + 48);
    *(int32x2_t *)v81.i8 = vzip2_s32(*(int32x2_t *)v81.i8, *(int32x2_t *)v82.i8);
    v82.i64[0] = vextq_s8(v83, v83, 8uLL).u64[0];
    v83.i64[1] = v84.u32[0];
    v81.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v84.i8, 0);
    v82.i64[1] = vextq_s8(v84, v84, 8uLL).u32[0];
    v126 = (float32x4_t)v83;
    v127 = v81;
    v128 = v82;
    sub_1B21F30C8((float32x4_t *)(a1 + 368), v125, (float32x4_t *)&v129, &v126, v66 + 28, (float32x4_t *)(v67 + 448));
    v85 = *(_QWORD *)(a1 + 40);
    v86 = *(_QWORD *)(a1 + 48);
    v87 = *(int32x4_t *)(v85 + 16);
    v88 = *(int32x4_t *)(v85 + 32);
    v89 = (int8x16_t)vtrn1q_s32(v87, v88);
    v90 = *(int8x16_t *)(v85 + 48);
    *(int32x2_t *)v87.i8 = vzip2_s32(*(int32x2_t *)v87.i8, *(int32x2_t *)v88.i8);
    v88.i64[0] = vextq_s8(v89, v89, 8uLL).u64[0];
    v89.i64[1] = v90.u32[0];
    v87.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v90.i8, 0);
    v88.i64[1] = vextq_s8(v90, v90, 8uLL).u32[0];
    v129 = (__int128)v89;
    v130 = (float32x4_t)v87;
    v131 = (int8x16_t)v88;
    v91 = *(int32x4_t *)(v86 + 16);
    v92 = *(int32x4_t *)(v86 + 32);
    v93 = (int8x16_t)vtrn1q_s32(v91, v92);
    v94 = *(int8x16_t *)(v86 + 48);
    *(int32x2_t *)v91.i8 = vzip2_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v92.i8);
    v92.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
    v93.i64[1] = v94.u32[0];
    v91.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v94.i8, 0);
    v92.i64[1] = vextq_s8(v94, v94, 8uLL).u32[0];
    v126 = (float32x4_t)v93;
    v127 = v91;
    v128 = v92;
    sub_1B21F30C8((float32x4_t *)(a1 + 464), &v124, (float32x4_t *)&v129, &v126, (float32x4_t *)(v85 + 448), (float32x4_t *)(v86 + 448));
    v95 = *(_QWORD *)(a1 + 40);
    v96 = *(_QWORD *)(a1 + 48);
    v97 = *(int32x4_t *)(v95 + 16);
    v98 = *(int32x4_t *)(v95 + 32);
    v99 = (int8x16_t)vtrn1q_s32(v97, v98);
    v100 = *(int8x16_t *)(v95 + 48);
    *(int32x2_t *)v97.i8 = vzip2_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v98.i8);
    v98.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
    v99.i64[1] = v100.u32[0];
    v97.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v100.i8, 0);
    v98.i64[1] = vextq_s8(v100, v100, 8uLL).u32[0];
    v129 = (__int128)v99;
    v130 = (float32x4_t)v97;
    v131 = (int8x16_t)v98;
    v101 = *(int32x4_t *)(v96 + 16);
    v102 = *(int32x4_t *)(v96 + 32);
    v103 = (int8x16_t)vtrn1q_s32(v101, v102);
    v104 = *(int8x16_t *)(v96 + 48);
    *(int32x2_t *)v101.i8 = vzip2_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v102.i8);
    v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
    v103.i64[1] = v104.u32[0];
    v101.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v104.i8, 0);
    v102.i64[1] = vextq_s8(v104, v104, 8uLL).u32[0];
    v126 = (float32x4_t)v103;
    v127 = v101;
    v128 = v102;
    *(float32x2_t *)v105.f32 = sub_1B21F30C8((float32x4_t *)(a1 + 560), &v123, (float32x4_t *)&v129, &v126, (float32x4_t *)(v95 + 448), (float32x4_t *)(v96 + 448));
    *(_DWORD *)(a1 + 828) = 0;
    v106 = sub_1B21F4FC4(a1, (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 16), v105);
    *(float *)(a1 + 832) = v106;
    sub_1B21FAF44(a1 + 792, v106);
    v107.i32[0] = *(_DWORD *)(a1 + 664);
    v107.i32[1] = *(_DWORD *)(a1 + 680);
    v107.i32[2] = *(_DWORD *)(a1 + 696);
    v108 = *(float32x4_t **)(a1 + 40);
    v109 = *(float32x4_t **)(a1 + 48);
    v110 = vmulq_f32(v108[1], v107);
    v111 = (int8x16_t)vmulq_f32(v107, v108[2]);
    v112 = (int8x16_t)vmulq_f32(v107, v108[3]);
    v112.i32[3] = 0;
    *(float32x2_t *)v110.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v111.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)));
    v113 = v108[19];
    v114 = v108[20];
    v113.i32[3] = 0;
    v114.i32[3] = 0;
    v115 = v109[19];
    v116 = v109[20];
    v115.i32[3] = 0;
    v116.i32[3] = 0;
    *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)), 0);
    v117 = v108[21];
    v117.i32[3] = 0;
    v118 = (int8x16_t)vmulq_f32(v110, vaddq_f32(vaddq_f32(vmulq_n_f32(v113, v110.f32[0]), vmulq_lane_f32(v114, *(float32x2_t *)v110.f32, 1)), vmulq_n_f32(v117, v110.f32[2])));
    v119 = v109[21];
    v119.i32[3] = 0;
    v120 = (int8x16_t)vmulq_f32(v110, vaddq_f32(vaddq_f32(vmulq_n_f32(v115, v110.f32[0]), vmulq_lane_f32(v116, *(float32x2_t *)v110.f32, 1)), vmulq_n_f32(v119, v110.f32[2])));
    *(float *)(a1 + 824) = 1.0
                         / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL))).f32[0];
  }
}

void sub_1B21F4034(uint64_t a1, _DWORD *a2, float32x4_t a3)
{
  int v4;
  float v6;
  int v7;

  if (*(_BYTE *)(a1 + 842))
  {
    v4 = 0;
    *a2 = 0;
LABEL_6:
    a2[1] = v4;
    return;
  }
  a3.i64[0] = 0x100000005;
  *(_QWORD *)a2 = 0x100000005;
  v6 = sub_1B21F4FC4(a1, (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16), (float32x4_t *)(*(_QWORD *)(a1 + 48) + 16), a3);
  *(float *)(a1 + 832) = v6;
  sub_1B21FAF44(a1 + 792, v6);
  if (*(_BYTE *)(a1 + 820) || *(_BYTE *)(a1 + 841))
  {
    v7 = a2[1];
    ++*a2;
    v4 = v7 - 1;
    goto LABEL_6;
  }
}

void sub_1B21F40B4(float32x4_t *a1, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;

  v2 = (float32x4_t *)a1[2].i64[1];
  v3 = (float32x4_t *)a1[3].i64[0];
  v4 = v2 + 1;
  v5 = v3 + 1;
  v6 = v2 + 23;
  v7 = v3 + 23;
  if (a1[52].i8[11])
    sub_1B21F40D8(a1, a2, v4, v5, v6, v7);
  else
    sub_1B21F4954(a1, a2, v4, v5, v6, v7);
}

void sub_1B21F40D8(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  _BOOL4 v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float v71;
  uint64_t v72;
  int v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float *v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t i;
  uint64_t v110;
  uint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int v124;
  float32x4_t *v125;
  float v126;
  int v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  BOOL v137;
  uint64_t v138;
  char v139;
  __int32 v140;
  float *f32;
  float v142;
  float v143;
  uint64_t v144;
  int v145;
  float v146;
  int8x16_t v147;
  int8x16_t v148;
  float v149;
  float v150;
  float v151;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;

  v8 = a1[41];
  v9 = a1[42];
  v8.i32[3] = 0;
  v9.i32[3] = 0;
  v10 = *(int *)(a2 + 40);
  v11 = a1[43];
  v12 = a1[44];
  v11.i32[3] = 0;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  v16 = vmlaq_lane_f32(vmulq_n_f32(v8, v14.f32[0]), v9, *(float32x2_t *)v14.f32, 1);
  v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v11, v13, 2);
  v18 = (int8x16_t)vmulq_f32(*a3, v12);
  v19 = (int8x16_t)vmulq_f32(v13, v12);
  v20 = (int8x16_t)vmulq_f32(v14, v12);
  v20.i32[3] = 0;
  v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*a3)), v9, *(float32x2_t *)a3->f32, 1), v11, *a3, 2);
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  v22 = a4[1];
  v23 = a1[45];
  v24 = a1[46];
  v23.i32[3] = 0;
  v24.i32[3] = 0;
  v25 = a1[47];
  v26 = a1[48];
  v25.i32[3] = 0;
  v27 = (int8x16_t)vmlaq_laneq_f32(v16, v11, v14, 2);
  v28 = a4[2];
  v29 = a4[3];
  v30 = vmlaq_lane_f32(vmulq_n_f32(v23, v28.f32[0]), v24, *(float32x2_t *)v28.f32, 1);
  v31 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v22.f32[0]), v24, *(float32x2_t *)v22.f32, 1), v25, v22, 2);
  v32 = (int8x16_t)vmulq_f32(*a4, v26);
  v33 = (int8x16_t)vmulq_f32(v22, v26);
  v34 = (int8x16_t)vmulq_f32(v28, v26);
  v34.i32[3] = 0;
  v35 = vaddq_f32(v15, v9);
  v36 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*a4)), v24, *(float32x2_t *)a4->f32, 1), v25, *a4, 2);
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0);
  v37 = (int8x16_t)vmlaq_laneq_f32(v30, v25, v28, 2);
  v38 = vaddq_f32(v29, v9);
  v39 = vsubq_f32(v38, v35);
  v40 = *(float *)(a1[2].i64[1] + 384);
  v41 = *(float *)(a1[3].i64[0] + 384);
  if ((float)(v40 + v41) <= 0.0)
    v42 = 0.5;
  else
    v42 = v41 / (float)(v40 + v41);
  v43 = v41 < 0.00000011921;
  v44 = 1.0 - v42;
  v45.i32[3] = 0;
  v46 = (float32x4_t)__PAIR64__(v17.u32[2], v21.u32[2]);
  v46.i32[2] = v27.i32[2];
  v47 = (int8x8_t)__PAIR64__(v31.u32[2], v36.u32[2]);
  v48 = (float32x4_t)__PAIR64__(v31.u32[2], v36.u32[2]);
  v48.i32[2] = v37.i32[2];
  v49 = vmulq_n_f32(v46, v42);
  v49.i32[3] = 0;
  v50 = vmulq_n_f32(v48, 1.0 - v42);
  v50.i32[3] = 0;
  v51 = vaddq_f32(v49, v50);
  v52 = (int8x16_t)vmulq_f32(v51, v51);
  v53 = vmulq_n_f32(v51, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0]));
  v157 = v53;
  v54 = vsubq_f32(v38, v29);
  v54.i32[3] = 0;
  v55 = (int8x16_t)vmulq_f32(v53, v54);
  v56 = vmulq_n_f32(v53, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).f32[0]);
  v56.i32[3] = 0;
  v57 = v43 || v40 < 0.00000011921;
  v58 = vsubq_f32(v54, v56);
  v59 = vsubq_f32(v35, v15);
  v59.i32[3] = 0;
  v60 = (int8x16_t)vmulq_f32(v53, v59);
  v61 = vmulq_n_f32(v53, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)).f32[0]);
  v61.i32[3] = 0;
  v62 = vsubq_f32(v59, v61);
  v63 = vmulq_n_f32(v62, v44);
  v62.i32[3] = 0;
  v64 = vsubq_f32(v61, v56);
  v65 = vmulq_n_f32(v64, v42);
  v65.i32[3] = 0;
  v66 = vsubq_f32(v58, vmulq_n_f32(v64, v44));
  v66.i32[3] = 0;
  v67 = vaddq_f32(v62, v65);
  v68 = vmulq_n_f32(v58, v42);
  v68.i32[3] = 0;
  v63.i32[3] = 0;
  v69 = vaddq_f32(v68, v63);
  v70 = (int8x16_t)vmulq_f32(v69, v69);
  v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
  if (v71 <= 0.00000011921)
  {
    v45.i64[0] = __PAIR64__(v17.u32[1], v21.u32[1]);
    v45.i32[2] = v27.i32[1];
  }
  else
  {
    v45 = vmulq_n_f32(v69, 1.0 / sqrtf(v71));
  }
  v72 = 0;
  v39.i32[3] = 0;
  v73 = 2 * v10;
  v74.i64[0] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL).u64[0];
  v74.i64[1] = v53.i64[0];
  v75.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
  v75.i64[1] = v45.i64[0];
  v76 = (int8x16_t)vsubq_f32(vmulq_f32(v53, v75), vmulq_f32(v74, v45));
  v77.i64[0] = vextq_s8(v76, v76, 4uLL).u64[0];
  v77.i64[1] = v76.u32[0];
  v154 = v77;
  v155 = v45;
  v78.i64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL).u64[0];
  v78.i64[1] = v67.i64[0];
  v79 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v75), vmulq_f32(v78, v45));
  v80.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL).u64[0];
  v80.i64[1] = v66.i64[0];
  v81 = (int8x16_t)vsubq_f32(vmulq_f32(v75, v66), vmulq_f32(v80, v45));
  v82.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
  v82.i64[1] = v81.u32[0];
  v156 = v82;
  v83 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v83 + 8) = v79.i32[0];
  *(_QWORD *)v83 = vextq_s8(v79, v79, 4uLL).u64[0];
  v84 = *(_QWORD *)(a2 + 32);
  do
  {
    *(float *)(v84 + v72 * 4) = -v156.f32[v72];
    ++v72;
  }
  while (v72 != 3);
  v85.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL).u64[0];
  v85.i64[1] = v77.i64[0];
  v86 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v85), vmulq_f32(v78, v77));
  v87.i64[0] = vextq_s8(v86, v86, 4uLL).u64[0];
  v87.i64[1] = v86.u32[0];
  v88 = (int8x16_t)vsubq_f32(vmulq_f32(v85, v66), vmulq_f32(v80, v77));
  v89.i64[0] = vextq_s8(v88, v88, 4uLL).u64[0];
  v89.i64[1] = v88.u32[0];
  v156 = v89;
  if (v57 && a1[51].i8[4])
  {
    v156 = vmulq_n_f32(v89, v44);
    v87 = vmulq_n_f32(v87, v42);
  }
  v90 = 0;
  v91 = v83 + 4 * v10;
  *(_QWORD *)v91 = v87.i64[0];
  *(_DWORD *)(v91 + 8) = v87.i32[2];
  do
  {
    *(float *)(v84 + 4 * v10 + v90 * 4) = -v156.f32[v90];
    ++v90;
  }
  while (v90 != 3);
  v92 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v67), vmulq_f32(v53, v78));
  v93.i64[0] = vextq_s8(v92, v92, 4uLL).u64[0];
  v93.i64[1] = v92.u32[0];
  v94 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v66), vmulq_f32(v53, v80));
  v95.i64[0] = vextq_s8(v94, v94, 4uLL).u64[0];
  v95.i64[1] = v94.u32[0];
  v156 = v95;
  if (v57)
  {
    v156 = vmulq_n_f32(v95, v44);
    v93 = vmulq_n_f32(v93, v42);
  }
  v96 = 0;
  v97 = v73;
  v98 = 4 * v73;
  v99 = v83 + v98;
  *(_QWORD *)v99 = v93.i64[0];
  *(_DWORD *)(v99 + 8) = v93.i32[2];
  do
  {
    *(float *)(v84 + v98 + v96 * 4) = -v156.f32[v96];
    ++v96;
  }
  while (v96 != 3);
  v100 = *(float *)(a2 + 4);
  if (a1[52].i8[8])
  {
    v101 = *(float **)(a2 + 48);
  }
  else
  {
    v102 = 0;
    v103 = *(float *)a2;
    v104 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v104 = v155.i64[0];
    *(_DWORD *)(v104 + 8) = v155.i32[2];
    v105 = v104 + 4 * v10;
    *(_QWORD *)v105 = v154.i64[0];
    *(_DWORD *)(v105 + 8) = v154.i32[2];
    v106 = v103 * v100;
    v107 = v104 + v98;
    *(_QWORD *)v107 = v157.i64[0];
    *(_DWORD *)(v107 + 8) = v157.i32[2];
    v108 = *(_QWORD *)(a2 + 24);
    do
    {
      *(float *)(v108 + v102 * 4) = -v155.f32[v102];
      ++v102;
    }
    while (v102 != 3);
    for (i = 0; i != 3; ++i)
      *(float *)(v108 + 4 * v10 + i * 4) = -v154.f32[i];
    v110 = 0;
    v111 = v108 + 4 * v97;
    do
    {
      *(float *)(v111 + v110 * 4) = -v157.f32[v110];
      ++v110;
    }
    while (v110 != 3);
    v112 = (int8x16_t)vmulq_f32(v45, v39);
    v101 = *(float **)(a2 + 48);
    *v101 = v106
          * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), vpadd_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8)).f32[0];
    v113 = (int8x16_t)vmulq_f32(v39, v77);
    v101[v10] = v106
              * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL), vpadd_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8)).f32[0];
    v114 = (int8x16_t)vmulq_f32(v53, v39);
    v101[v97] = v106
              * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), vpadd_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v114.i8)).f32[0];
  }
  *(_DWORD *)(v83 + 12 * (_DWORD)v10) = v45.i32[0];
  v115 = 12 * v10 + 4;
  *(_DWORD *)(v83 + v115) = v45.i32[1];
  v116 = 12 * (_DWORD)v10 + 8;
  *(_DWORD *)(v83 + v116) = v45.i32[2];
  v117 = 16 * v10;
  *(_QWORD *)(v83 + v117) = v77.i64[0];
  v118 = (4 * v10) | 2;
  *(_DWORD *)(v83 + 4 * v118) = v77.i32[2];
  *(float *)(v84 + 12 * (_DWORD)v10) = -v45.f32[0];
  *(float *)(v84 + v115) = -v45.f32[1];
  *(float *)(v84 + v116) = -v45.f32[2];
  *(float32x2_t *)(v84 + v117) = vneg_f32(*(float32x2_t *)v77.f32);
  *(float *)(v84 + 4 * v118) = -v77.f32[2];
  *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)__PAIR64__(v17.u32[2], v21.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), 4uLL);
  v119.i64[1] = __PAIR64__(v17.u32[2], v21.u32[2]);
  *(int8x8_t *)v120.f32 = vext_s8(v47, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), 4uLL);
  *(int8x8_t *)&v120.u32[2] = v47;
  v121 = (int8x16_t)vsubq_f32(vmulq_f32(v46, v120), vmulq_f32(v119, v48));
  v120.i64[0] = vextq_s8(v121, v121, 4uLL).u64[0];
  v120.i64[1] = v121.u32[0];
  *(float *)v121.i32 = *(float *)a2 * *(float *)(a2 + 4);
  v122 = (int8x16_t)vmulq_f32(v45, v120);
  v101[3 * (_DWORD)v10] = *(float *)v121.i32
                        * vadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)).f32[0];
  v123 = (int8x16_t)vmulq_f32(v77, v120);
  v101[(unint64_t)v117 / 4] = *(float *)v121.i32
                                   * vadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, *(float32x2_t *)v123.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)).f32[0];
  v124 = a1[51].u8[4];
  if (a1[51].i8[4])
  {
    v125 = a5;
    v126 = a1[50].f32[3] * a1[52].f32[1];
    if (v126 > 0.0)
      v127 = 1;
    else
      v127 = 2;
    v128 = a1[52].i8[9] == 0;
  }
  else
  {
    if (!a1[52].i8[9])
      return;
    v125 = a5;
    v128 = 0;
    v127 = 0;
    v126 = 0.0;
  }
  v129 = 5 * v10;
  v130 = 5 * (int)v10;
  *(_DWORD *)(v83 + 4 * v130) = v53.i32[0];
  v131 = 20 * v10 + 4;
  *(_DWORD *)(v83 + v131) = v53.i32[1];
  v132 = 4 * v130 + 8;
  *(_DWORD *)(v83 + v132) = v53.i32[2];
  v153 = v53;
  *(float *)(v84 + 4 * v129) = -v53.f32[0];
  *(float *)(v84 + v131) = -v53.f32[1];
  *(float *)(v84 + v132) = -v53.f32[2];
  sub_1B21FB074(&a1[49].f32[2]);
  v134 = v133;
  sub_1B21FB010(&a1[49].f32[2]);
  v136 = v135;
  v137 = v134 != v135 || v124 == 0;
  v138 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v138 + 4 * v129) = 0;
  v139 = !v137;
  v140 = a1[53].i32[1];
  f32 = a1[54].f32;
  if ((v140 & 2) == 0)
    f32 = (float *)(a2 + 4);
  v142 = *f32;
  if (!v128 && (v139 & 1) == 0)
  {
    if ((v140 & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v130) = a1[53].i32[2];
    v143 = sub_1B21FAD2C(a1[52].f32[0], v134, v135, a1[49].f32[0], v142 * *(float *)a2);
    v138 = *(_QWORD *)(a2 + 48);
    *(float *)(v138 + 4 * v130) = *(float *)(v138 + 4 * v130) + (float)((float)(v143 * a1[49].f32[0]) * a1[52].f32[1]);
    *(float *)(*(_QWORD *)(a2 + 64) + 4 * v130) = -a1[49].f32[1];
    *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v130) = a1[49].i32[1];
  }
  if (v124)
  {
    *(float *)(v138 + 4 * v130) = *(float *)(v138 + 4 * v130) + (float)((float)(v142 * *(float *)a2) * v126);
    if ((a1[53].i8[4] & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v130) = a1[53].i32[3];
    if (v134 == v136)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v130) = -8388609;
    }
    else
    {
      v144 = *(_QWORD *)(a2 + 64);
      if (v127 != 1)
      {
        *(_DWORD *)(v144 + 4 * v130) = -8388609;
        v145 = 0;
LABEL_58:
        *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v130) = v145;
        v146 = a1[50].f32[2];
        if (v146 <= 0.0)
        {
          v150 = *(float *)(v138 + 4 * v130);
        }
        else
        {
          v147 = (int8x16_t)vmulq_f32(*v125, v153);
          v148 = (int8x16_t)vmulq_f32(v153, *a6);
          LODWORD(v149) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL))).u32[0];
          v150 = *(float *)(v138 + 4 * v130);
          if (v127 == 1)
          {
            if (v149 >= 0.0)
              goto LABEL_67;
            v151 = -(float)(v146 * v149);
            if (v151 <= v150)
              goto LABEL_67;
          }
          else
          {
            if (v149 <= 0.0)
              goto LABEL_67;
            v151 = -(float)(v146 * v149);
            if (v151 >= v150)
              goto LABEL_67;
          }
          *(float *)(v138 + 4 * v130) = v151;
          v150 = v151;
        }
LABEL_67:
        *(float *)(v138 + 4 * v130) = a1[50].f32[1] * v150;
        return;
      }
      *(_DWORD *)(v144 + 4 * v130) = 0;
    }
    v145 = 2139095039;
    goto LABEL_58;
  }
}

void sub_1B21F4954(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  _DWORD *v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int v83;
  float v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  __int32 v97;
  float *f32;
  float v99;
  float v100;
  uint64_t v101;
  int v102;
  float v103;
  int8x16_t v104;
  int8x16_t v105;
  float v106;
  float v107;
  float v108;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;

  v10 = *(int *)(a2 + 40);
  v11 = *a3;
  v12 = a3[1];
  v13 = a1[41];
  v14 = a1[42];
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v16 = a1[43];
  v15 = a1[44];
  v16.i32[3] = 0;
  v17 = a3[2];
  v18 = a3[3];
  v19 = vmlaq_lane_f32(vmulq_n_f32(v13, v12.f32[0]), v14, *(float32x2_t *)v12.f32, 1);
  v20 = vmlaq_lane_f32(vmulq_n_f32(v13, v17.f32[0]), v14, *(float32x2_t *)v17.f32, 1);
  v21 = vmulq_f32(*a3, v15);
  v22 = (int8x16_t)vmulq_f32(v12, v15);
  v23 = (int8x16_t)vmulq_f32(v17, v15);
  v23.i32[3] = 0;
  v24 = vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*a3)), v14, *(float32x2_t *)a3->f32, 1);
  *(float32x2_t *)v21.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  v25 = *a4;
  v26 = a4[1];
  v27 = a1[45];
  v28 = a1[46];
  v27.i32[3] = 0;
  v28.i32[3] = 0;
  v30 = a1[47];
  v29 = a1[48];
  v30.i32[3] = 0;
  v31 = a4[2];
  v32 = vmlaq_lane_f32(vmulq_n_f32(v27, v26.f32[0]), v28, *(float32x2_t *)v26.f32, 1);
  v33 = vmlaq_lane_f32(vmulq_n_f32(v27, v31.f32[0]), v28, *(float32x2_t *)v31.f32, 1);
  v34 = (int8x16_t)vmulq_f32(*a4, v29);
  v35 = (int8x16_t)vmulq_f32(v31, v29);
  v35.i32[3] = 0;
  v36 = (int8x16_t)vmulq_f32(v26, v29);
  v37 = (int32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  v38 = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v36.i8);
  v39 = vaddq_f32(v18, v21);
  v40 = vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*a4)), v28, *(float32x2_t *)a4->f32, 1);
  *(float32x2_t *)v27.f32 = vadd_f32(v38, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), v37));
  *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
  v41 = vaddq_f32(a4[3], v27);
  v112 = v41;
  v113 = v39;
  if (a1[52].i8[8])
  {
    v42 = 2 * v10;
  }
  else
  {
    v43 = *(_DWORD **)(a2 + 8);
    *v43 = 1065353216;
    v44 = v10 + 1;
    v43[v44] = 1065353216;
    v42 = 2 * v10;
    v45 = 2 * v10 + 2;
    v43[v45] = 1065353216;
    v46 = *(_DWORD **)(a2 + 24);
    *v46 = -1082130432;
    v46[v44] = -1082130432;
    v46[v45] = -1082130432;
    v18 = a3[3];
  }
  v47 = vmlaq_laneq_f32(v19, v16, v12, 2);
  v48 = vmlaq_laneq_f32(v24, v16, v11, 2);
  v49 = (int8x16_t)vmlaq_laneq_f32(v20, v16, v17, 2);
  v50 = vmlaq_laneq_f32(v32, v30, v26, 2);
  v51 = vmlaq_laneq_f32(v40, v30, v25, 2);
  v52 = (int8x16_t)vmlaq_laneq_f32(v33, v30, v31, 2);
  v53 = *(_QWORD *)(a2 + 16);
  v54 = v53 + 4 * v10;
  v55 = v53 + 4 * v42;
  v56 = vnegq_f32(vsubq_f32(v39, v18));
  *(_DWORD *)v53 = 0;
  *(float *)(v53 + 4) = -v56.f32[2];
  *(_DWORD *)(v53 + 8) = v56.i32[1];
  *(_DWORD *)(v53 + 12) = 0;
  *(_DWORD *)v54 = v56.i32[2];
  *(_DWORD *)(v54 + 4) = 0;
  *(float *)(v54 + 8) = -v56.f32[0];
  *(_DWORD *)(v54 + 12) = 0;
  *(float *)v55 = -v56.f32[1];
  *(_DWORD *)(v55 + 4) = v56.i32[0];
  *(_QWORD *)(v55 + 8) = 0;
  v57 = vsubq_f32(v41, a4[3]);
  v58 = *(_QWORD *)(a2 + 32);
  v59 = v58 + 4 * v10;
  v60 = v58 + 4 * v42;
  *(_DWORD *)v58 = 0;
  *(float *)(v58 + 4) = -v57.f32[2];
  *(_DWORD *)(v58 + 8) = v57.i32[1];
  *(_DWORD *)(v58 + 12) = 0;
  *(_DWORD *)v59 = v57.i32[2];
  *(_DWORD *)(v59 + 4) = 0;
  *(float *)(v59 + 8) = -v57.f32[0];
  *(_DWORD *)(v59 + 12) = 0;
  *(float *)v60 = -v57.f32[1];
  *(_DWORD *)(v60 + 4) = v57.i32[0];
  *(_QWORD *)(v60 + 8) = 0;
  v61 = *(float *)a2 * *(float *)(a2 + 4);
  v62 = *(_QWORD *)(a2 + 48);
  if (!a1[52].i8[8])
  {
    v63 = 0;
    v64 = 4 * v10;
    v65 = *(float **)(a2 + 48);
    do
    {
      *v65 = v61 * (float)(v112.f32[v63] - v113.f32[v63]);
      v65 = (float *)((char *)v65 + v64);
      ++v63;
    }
    while (v63 != 3);
  }
  *(int8x8_t *)v66.f32 = vext_s8((int8x8_t)__PAIR64__(v47.u32[2], v48.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), 4uLL);
  v66.i64[1] = __PAIR64__(v47.u32[2], v48.u32[2]);
  v67 = (float32x4_t)__PAIR64__(v47.u32[2], v48.u32[2]);
  v67.i32[2] = v49.i32[2];
  v68.i64[0] = __PAIR64__(v47.u32[0], v48.u32[0]);
  v68.i64[1] = v49.u32[0];
  v69.i64[0] = __PAIR64__(v47.u32[1], v48.u32[1]);
  v69.i64[1] = v49.u32[1];
  v70 = *(int *)(a2 + 40);
  v71 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v71 + 12 * v70) = v48.i32[0];
  v72 = 12 * (_DWORD)v70 + 4;
  *(int32x2_t *)(v71 + v72) = vzip1_s32(*(int32x2_t *)v47.f32, *(int32x2_t *)v49.i8);
  v73 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v71 + 16 * v70) = v48.i32[1];
  v74 = (unint64_t)(4 * (int)v70) >> 2;
  v75 = (16 * v74) | 4;
  *(_DWORD *)(v71 + v75) = v47.i32[1];
  v76 = (16 * v74) | 8;
  *(_DWORD *)(v71 + v76) = v49.i32[1];
  *(float *)(v73 + 12 * v70) = -v48.f32[0];
  *(float *)(v73 + v72) = -v47.f32[0];
  v77 = 16 * v70;
  *(float *)(v73 + 12 * (_DWORD)v70 + 8) = -*(float *)v49.i32;
  *(float *)(v73 + v77) = -v48.f32[1];
  *(float *)(v73 + v75) = -v47.f32[1];
  *(float *)(v73 + v76) = -*(float *)&v49.i32[1];
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)__PAIR64__(v50.u32[2], v51.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
  v50.i64[1] = __PAIR64__(v50.u32[2], v51.u32[2]);
  v78.i64[0] = v50.i64[1];
  v78.i64[1] = v52.u32[2];
  v111 = v67;
  v79 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v50), vmulq_f32(v66, v78));
  v80.i64[0] = vextq_s8(v79, v79, 4uLL).u64[0];
  v80.i64[1] = v79.u32[0];
  v81 = (int8x16_t)vmulq_f32(v68, v80);
  *(float *)(v62 + 12 * v70) = v61
                             * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), vpadd_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)v81.i8)).f32[0];
  v82 = (int8x16_t)vmulq_f32(v69, v80);
  *(float *)(v62 + v77) = v61
                        * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8)).f32[0];
  v83 = a1[51].u8[4];
  if (a1[51].i8[4])
  {
    v84 = a1[50].f32[3] * a1[52].f32[1];
    if (v84 > 0.0)
      v85 = 1;
    else
      v85 = 2;
    v86 = a1[52].i8[9] == 0;
  }
  else
  {
    if (!a1[52].i8[9])
      return;
    v86 = 0;
    v85 = 0;
    v84 = 0.0;
  }
  v87 = 5 * v70;
  *(_DWORD *)(v71 + 20 * v70) = v48.i32[2];
  v88 = 20 * (_DWORD)v70;
  v89 = v88 + 4;
  *(_DWORD *)(v71 + v89) = v47.i32[2];
  v88 += 8;
  *(_DWORD *)(v71 + v88) = v49.i32[2];
  *(float *)(v73 + 4 * v87) = -v48.f32[2];
  *(float *)(v73 + v89) = -v47.f32[2];
  *(float *)(v73 + v88) = -*(float *)&v49.i32[2];
  sub_1B21FB074(&a1[49].f32[2]);
  v91 = v90;
  sub_1B21FB010(&a1[49].f32[2]);
  v93 = v92;
  v94 = v91 != v92 || v83 == 0;
  v95 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v95 + 4 * v87) = 0;
  v96 = !v94;
  v97 = a1[53].i32[1];
  f32 = a1[54].f32;
  if ((v97 & 2) == 0)
    f32 = (float *)(a2 + 4);
  v99 = *f32;
  if (!v86 && (v96 & 1) == 0)
  {
    if ((v97 & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v87) = a1[53].i32[2];
    v100 = sub_1B21FAD2C(a1[52].f32[0], v91, v92, a1[49].f32[0], v99 * *(float *)a2);
    v95 = *(_QWORD *)(a2 + 48);
    *(float *)(v95 + 4 * v87) = *(float *)(v95 + 4 * v87) + (float)((float)(v100 * a1[49].f32[0]) * a1[52].f32[1]);
    *(float *)(*(_QWORD *)(a2 + 64) + 4 * v87) = -a1[49].f32[1];
    *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v87) = a1[49].i32[1];
  }
  if (v83)
  {
    *(float *)(v95 + 4 * v87) = *(float *)(v95 + 4 * v87) + (float)((float)(v99 * *(float *)a2) * v84);
    if ((a1[53].i8[4] & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v87) = a1[53].i32[3];
    if (v91 == v93)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v87) = -8388609;
    }
    else
    {
      v101 = *(_QWORD *)(a2 + 64);
      if (v85 != 1)
      {
        *(_DWORD *)(v101 + 4 * v87) = -8388609;
        v102 = 0;
LABEL_35:
        *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v87) = v102;
        v103 = a1[50].f32[2];
        if (v103 <= 0.0)
        {
          v107 = *(float *)(v95 + 4 * v87);
        }
        else
        {
          v104 = (int8x16_t)vmulq_f32(v111, *a5);
          v105 = (int8x16_t)vmulq_f32(v111, *a6);
          LODWORD(v106) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL))).u32[0];
          v107 = *(float *)(v95 + 4 * v87);
          if (v85 == 1)
          {
            v108 = -(float)(v103 * v106);
            if (v106 >= 0.0 || v108 <= v107)
              goto LABEL_49;
          }
          else
          {
            v108 = -(float)(v103 * v106);
            if (v106 <= 0.0 || v108 >= v107)
              goto LABEL_49;
          }
          *(float *)(v95 + 4 * v87) = v108;
          v107 = v108;
        }
LABEL_49:
        *(float *)(v95 + 4 * v87) = a1[50].f32[1] * v107;
        return;
      }
      *(_DWORD *)(v101 + 4 * v87) = 0;
    }
    v102 = 2139095039;
    goto LABEL_35;
  }
}

uint64_t sub_1B21F4F78(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  a1[41] = *a2;
  a1[42] = a2[1];
  a1[43] = a2[2];
  a1[44] = a2[3];
  a1[45] = *a3;
  a1[46] = a3[1];
  a1[47] = a3[2];
  a1[48] = a3[3];
  return (*(uint64_t (**)(_OWORD *))(*(_QWORD *)a1 + 16))(a1);
}

float sub_1B21F4FC4(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t a4)
{
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;

  a4.i32[0] = *(_DWORD *)(a1 + 656);
  a4.i32[1] = *(_DWORD *)(a1 + 672);
  a4.i32[2] = *(_DWORD *)(a1 + 688);
  v4 = a2[1];
  v5 = (int8x16_t)vmulq_f32(*a2, a4);
  v6 = (int8x16_t)vmulq_f32(a4, v4);
  v7 = a2[2];
  v8 = (int8x16_t)vmulq_f32(a4, v7);
  v9 = (float32x4_t)vextq_s8(v5, v5, 8uLL);
  v8.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32(*(int32x2_t *)v9.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v9.i32[0] = *(_DWORD *)(a1 + 660);
  v9.i32[1] = *(_DWORD *)(a1 + 676);
  v9.i32[2] = *(_DWORD *)(a1 + 692);
  v10 = (int8x16_t)vmulq_f32(*a2, v9);
  v11 = (int8x16_t)vmulq_f32(v4, v9);
  v12 = vmulq_f32(v7, v9);
  v12.i32[3] = 0;
  *(float32x2_t *)v10.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
  *(float32x2_t *)v11.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 0);
  v12.i32[0] = *(_DWORD *)(a1 + 724);
  v12.i32[1] = *(_DWORD *)(a1 + 740);
  v12.i32[2] = *(_DWORD *)(a1 + 756);
  v13 = (int8x16_t)vmulq_f32(*a3, v12);
  v14 = (int8x16_t)vmulq_f32(v12, a3[1]);
  v15 = (int8x16_t)vmulq_f32(v12, a3[2]);
  v15.i32[3] = 0;
  *(float32x2_t *)v13.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
  *(float32x2_t *)v6.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v13.i8);
  *(float32x2_t *)v10.i8 = vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v13.i8);
  return atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), vmul_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0), *(float32x2_t *)v6.i8)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v6.i8)).f32[0])* *(float *)(a1 + 836);
}

uint64_t sub_1B21F50EC(uint64_t result, int a2, int a3, float a4)
{
  int v4;

  if (a3 == 5 || a3 == -1)
  {
    switch(a2)
    {
      case 4:
        *(float *)(result + 860) = a4;
        v4 = 1;
        break;
      case 3:
        *(float *)(result + 856) = a4;
        v4 = 4;
        break;
      case 2:
        *(float *)(result + 864) = a4;
        v4 = 2;
        break;
      default:
        return result;
    }
    *(_DWORD *)(result + 852) |= v4;
  }
  return result;
}

float sub_1B21F5144(float *a1, int a2, int a3)
{
  float result;

  result = 0.0;
  if (a3 == 5 || a3 == -1)
  {
    switch(a2)
    {
      case 4:
        return a1[215];
      case 3:
        return a1[214];
      case 2:
        return a1[216];
    }
  }
  return result;
}

_QWORD *sub_1B21F5188(_QWORD *result)
{
  *result = off_1E63CC8E0;
  return result;
}

void sub_1B21F519C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E63CC8E0;
  sub_1B21FF5FC(a1);
}

uint64_t sub_1B21F51B0()
{
  return 232;
}

const char *sub_1B21F51B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  uint64_t m;
  int v15;
  int v16;
  int v17;

  sub_1B21FADBC(a1, a2, a3);
  v5 = 0;
  v6 = a1 + 656;
  v7 = a2 + 64;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)(v7 + i) = *(_DWORD *)(v6 + i);
    ++v5;
    v6 += 16;
    v7 += 16;
  }
  while (v5 != 3);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 112 + j) = *(_DWORD *)(a1 + 704 + j);
  v10 = 0;
  v11 = a1 + 720;
  v12 = a2 + 128;
  do
  {
    for (k = 0; k != 16; k += 4)
      *(_DWORD *)(v12 + k) = *(_DWORD *)(v11 + k);
    ++v10;
    v11 += 16;
    v12 += 16;
  }
  while (v10 != 3);
  for (m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 176 + m) = *(_DWORD *)(a1 + 768 + m);
  v15 = *(unsigned __int8 *)(a1 + 840);
  *(_DWORD *)(a2 + 200) = *(unsigned __int8 *)(a1 + 841);
  *(_QWORD *)(a2 + 204) = *(_QWORD *)(a1 + 784);
  *(_DWORD *)(a2 + 192) = *(unsigned __int8 *)(a1 + 844);
  *(_DWORD *)(a2 + 196) = v15;
  sub_1B21FB074((float *)(a1 + 792));
  *(_DWORD *)(a2 + 212) = v16;
  sub_1B21FB010((float *)(a1 + 792));
  *(_DWORD *)(a2 + 216) = v17;
  *(_QWORD *)(a2 + 220) = *(_QWORD *)(a1 + 800);
  *(_DWORD *)(a2 + 228) = *(_DWORD *)(a1 + 808);
  return "btHingeConstraintFloatData";
}

double sub_1B21F52E4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v7;
  double result;

  sub_1B21FACE4(a1, 3, a2, a3);
  *(_QWORD *)v7 = off_1E63CD3A8;
  *(_OWORD *)(v7 + 368) = *a4;
  *(_OWORD *)(v7 + 384) = *a5;
  *(_DWORD *)(v7 + 400) = 0;
  *(_BYTE *)(v7 + 412) = 0;
  result = 0.00781250182;
  *(_QWORD *)(v7 + 416) = 0x3F8000003E99999ALL;
  *(_DWORD *)(v7 + 424) = 0;
  return result;
}

double sub_1B21F5348(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  double result;

  v5 = sub_1B21FABC4(a1, 3, a2);
  *(float32x4_t *)(v5 + 368) = *a3;
  v6 = vmulq_f32(*(float32x4_t *)(a2 + 16), *a3);
  v7 = (int8x16_t)vmulq_f32(*a3, *(float32x4_t *)(a2 + 32));
  v8 = *(float32x4_t *)(a2 + 64);
  v9 = (int8x16_t)vmulq_f32(*a3, *(float32x4_t *)(a2 + 48));
  v9.i32[3] = 0;
  *(_QWORD *)v5 = off_1E63CD3A8;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
  *(float32x4_t *)(v5 + 384) = vaddq_f32(v6, v8);
  *(_DWORD *)(v5 + 400) = 0;
  *(_BYTE *)(v5 + 412) = 0;
  result = 0.00781250182;
  *(_QWORD *)(v5 + 416) = 0x3F8000003E99999ALL;
  *(_DWORD *)(v5 + 424) = 0;
  return result;
}

float32x4_t *sub_1B21F53F0(float32x4_t *a1)
{
  uint64_t v2;
  float32x4_t *result;
  uint64_t v4;
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unsigned __int32 v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unsigned __int32 v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31[3];
  float32x4_t v32[3];
  float32x4_t v33;

  v2 = 0;
  a1[3].i32[2] = 0;
  v33 = 0uLL;
  result = a1 + 5;
  do
  {
    v33.i32[v2] = 1065353216;
    v4 = a1[2].i64[1];
    v5 = a1[3].i64[0];
    v6 = *(int32x4_t *)(v4 + 16);
    v7 = *(int32x4_t *)(v4 + 32);
    v8 = (int8x16_t)vtrn1q_s32(v6, v7);
    v9 = *(float32x4_t *)(v4 + 48);
    v10 = *(float32x4_t *)(v4 + 64);
    v11 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
    *(int32x2_t *)v6.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v7.i8);
    v7.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
    v8.i64[1] = v9.u32[0];
    v6.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v9.f32, 0);
    v12 = a1[23];
    v13 = a1[24];
    v14 = (int8x16_t)vmulq_f32(v9, v12);
    v7.i64[1] = v11;
    v32[0] = (float32x4_t)v8;
    v32[1] = (float32x4_t)v6;
    v32[2] = (float32x4_t)v7;
    v15 = *(int32x4_t *)(v5 + 16);
    v16 = *(int32x4_t *)(v5 + 32);
    v17 = (int8x16_t)vtrn1q_s32(v15, v16);
    v18 = *(float32x4_t *)(v5 + 48);
    v19 = *(float32x4_t *)(v5 + 64);
    v20 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
    *(int32x2_t *)v15.i8 = vzip2_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8);
    v16.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
    v17.i64[1] = v18.u32[0];
    v15.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v18.f32, 0);
    v21 = (int8x16_t)vmulq_f32(v18, v13);
    v16.i64[1] = v20;
    v31[0] = (float32x4_t)v17;
    v31[1] = (float32x4_t)v15;
    v31[2] = (float32x4_t)v16;
    v22 = vmulq_f32(*(float32x4_t *)(v4 + 16), v12);
    v23 = (int8x16_t)vmulq_f32(v12, *(float32x4_t *)(v4 + 32));
    v14.i32[3] = 0;
    *(float32x2_t *)v22.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
    *(float32x2_t *)&v22.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
    v24 = vsubq_f32(vaddq_f32(v10, v22), v10);
    v24.i32[3] = 0;
    v25 = vmulq_f32(*(float32x4_t *)(v5 + 16), v13);
    v26 = (int8x16_t)vmulq_f32(v13, *(float32x4_t *)(v5 + 32));
    v21.i32[3] = 0;
    *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
    *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
    v27 = vsubq_f32(vaddq_f32(v19, v25), v19);
    v27.i32[3] = 0;
    v29 = v27;
    v30 = v24;
    sub_1B21F2F60(result, v32, v31, (int8x8_t *)&v30, (int8x8_t *)&v29, &v33, (float32x4_t *)(v4 + 448), (float32x4_t *)(v5 + 448), *(float *)(v4 + 384), *(float *)(v5 + 384));
    v33.i32[v2++] = 0;
    result = v28 + 6;
  }
  while (v2 != 3);
  return result;
}

uint64_t sub_1B21F558C(uint64_t result, int *a2)
{
  int v2;

  if (*(_BYTE *)(result + 412))
    v2 = 0;
  else
    v2 = 3;
  *a2 = v2;
  a2[1] = v2;
  return result;
}

float sub_1B21F55A4(float32x4_t *a1, uint64_t a2)
{
  return sub_1B21F55B4(a1, a2, (float32x4_t *)(a1[2].i64[1] + 16), (float32x4_t *)(a1[3].i64[0] + 16));
}

float sub_1B21F55B4(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  _DWORD *v15;
  uint64_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  float *v25;
  float v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  float v33;
  int v34;
  float v35;
  float result;
  _OWORD v37[2];

  v4 = 0;
  v5 = *(_DWORD **)(a2 + 8);
  *v5 = 1065353216;
  v6 = *(int *)(a2 + 40);
  v5[v6 + 1] = 1065353216;
  v5[2 * (int)v6 + 2] = 1065353216;
  v7 = a1[23];
  v8 = (int8x16_t)vmulq_f32(*a3, v7);
  v9 = (int8x16_t)vmulq_f32(v7, a3[1]);
  v10 = (int8x16_t)vmulq_f32(v7, a3[2]);
  v10.i32[3] = 0;
  *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
  *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v11 + 4 * v6;
  v13 = v11 + 8 * v6;
  v14 = vnegq_f32(v7);
  *(_DWORD *)v11 = 0;
  *(float *)(v11 + 4) = -v14.f32[2];
  *(_DWORD *)(v11 + 8) = v14.i32[1];
  *(_DWORD *)(v11 + 12) = 0;
  *(_DWORD *)v12 = v14.i32[2];
  *(_DWORD *)(v12 + 4) = 0;
  *(float *)(v12 + 8) = -v14.f32[0];
  *(_DWORD *)(v12 + 12) = 0;
  *(float *)v13 = -v14.f32[1];
  *(_DWORD *)(v13 + 4) = v14.i32[0];
  *(_QWORD *)(v13 + 8) = 0;
  v15 = *(_DWORD **)(a2 + 24);
  *v15 = -1082130432;
  v16 = *(int *)(a2 + 40);
  v15[v16 + 1] = -1082130432;
  v15[2 * (int)v16 + 2] = -1082130432;
  v17 = a1[24];
  v18 = (int8x16_t)vmulq_f32(*a4, v17);
  v19 = (int8x16_t)vmulq_f32(v17, a4[1]);
  v20 = (int8x16_t)vmulq_f32(v17, a4[2]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float *)v20.i32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0).f32[0];
  v21 = *(_QWORD *)(a2 + 32);
  v22 = v21 + 4 * v16;
  v23 = v21 + 8 * v16;
  *(_DWORD *)v21 = 0;
  *(float *)(v21 + 4) = -*(float *)v20.i32;
  *(_DWORD *)(v21 + 8) = v18.i32[1];
  *(_DWORD *)(v21 + 12) = 0;
  *(_QWORD *)v22 = v20.u32[0];
  *(float *)(v22 + 8) = -*(float *)v18.i32;
  *(_DWORD *)(v22 + 12) = 0;
  *(float *)v23 = -*(float *)&v18.i32[1];
  *(_DWORD *)(v23 + 4) = v18.i32[0];
  *(_QWORD *)(v23 + 8) = 0;
  v24 = a1[25].i32[0];
  v25 = &a1[25].f32[1];
  if ((v24 & 1) == 0)
    v25 = (float *)(a2 + 4);
  v26 = *v25 * *(float *)a2;
  v27 = *(float **)(a2 + 48);
  v28 = *(int *)(a2 + 40);
  v29 = 4 * v28;
  do
  {
    *v27 = v26
         * (float)((float)((float)(*(float *)((char *)v37 + v4 * 4) + a4[3].f32[v4])
                         - *(float *)((char *)&v37[1] + v4 * 4))
                 - a3[3].f32[v4]);
    v27 = (float *)((char *)v27 + v29);
    ++v4;
  }
  while (v4 != 3);
  if ((v24 & 2) != 0)
  {
    v30 = *(_DWORD **)(a2 + 56);
    v31 = 3;
    do
    {
      *v30 = a1[25].i32[2];
      v30 = (_DWORD *)((char *)v30 + v29);
      --v31;
    }
    while (v31);
  }
  v32 = 0;
  v33 = a1[26].f32[2];
  v34 = 2;
  v35 = v33;
  while (1)
  {
    if (v35 > 0.0)
    {
      *(float *)(*(_QWORD *)(a2 + 64) + 4 * v32) = -v33;
      *(float *)(*(_QWORD *)(a2 + 72) + 4 * v32) = v33;
    }
    if (!v34)
      break;
    v35 = a1[26].f32[2];
    --v34;
    v32 += v28;
  }
  result = a1[26].f32[1];
  *(float *)(a2 + 92) = result;
  return result;
}

uint64_t sub_1B21F5800(uint64_t result, int a2, int a3, float a4)
{
  int v4;

  if (a3 == -1)
  {
    if ((a2 - 3) < 2)
    {
      *(float *)(result + 408) = a4;
      v4 = 2;
    }
    else
    {
      if ((a2 - 1) > 1)
        return result;
      *(float *)(result + 404) = a4;
      v4 = 1;
    }
    *(_DWORD *)(result + 400) |= v4;
  }
  return result;
}

float sub_1B21F5848(uint64_t a1, int a2, int a3)
{
  if (a3 != -1)
    return 3.4028e38;
  if ((a2 - 3) < 2)
    return *(float *)(a1 + 408);
  if ((a2 - 1) > 1)
    return 3.4028e38;
  return *(float *)(a1 + 404);
}

_QWORD *sub_1B21F5884(_QWORD *result)
{
  *result = off_1E63CC8E0;
  return result;
}

void sub_1B21F5898(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E63CC8E0;
  sub_1B21FF5FC(a1);
}

uint64_t sub_1B21F58AC()
{
  return 96;
}

const char *sub_1B21F58B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  sub_1B21FADBC(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 64 + i) = *(_DWORD *)(a1 + 368 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 80 + j) = *(_DWORD *)(a1 + 384 + j);
  return "btPoint2PointConstraintFloatData";
}

double sub_1B21F5920(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1E63CDE78;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 256) = 1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 288) = 1;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  return result;
}

_QWORD *sub_1B21F59B0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CDE78;
  v2 = (uint64_t)(a1 + 1);
  sub_1B1810570((uint64_t)(a1 + 33));
  sub_1B1810570((uint64_t)(a1 + 29));
  sub_1B1810570((uint64_t)(a1 + 25));
  sub_1B1810570((uint64_t)(a1 + 21));
  sub_1B1810570((uint64_t)(a1 + 17));
  sub_1B1810570((uint64_t)(a1 + 13));
  sub_1B1810570((uint64_t)(a1 + 9));
  sub_1B1810570((uint64_t)(a1 + 5));
  sub_1B1810570(v2);
  return a1;
}

void sub_1B21F5A2C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1B21F59B0(a1);
  sub_1B21FF5FC((uint64_t)v1);
}

float32x4_t sub_1B21F5A40(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float v4;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v11;
  float32x4_t result;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;

  v4 = a4[6].f32[1];
  _S4 = a4[6].i32[3];
  v6 = a4[7].f32[2];
  v7 = a4[1];
  v8 = (int8x16_t)vmulq_f32(v7, a2[4]);
  _Q5 = (int8x16_t)vmulq_f32(*a4, a2[5]);
  _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL))).u32[0];
  _Q6 = (int8x16_t)vmulq_f32(a4[3], a3[4]);
  v11 = (int8x16_t)vmulq_f32(a4[2], a3[5]);
  _Q6.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))).u32[0];
  __asm
  {
    FMLS            S0, S4, V5.S[0]
    FMLS            S0, S4, V6.S[0]
  }
  v18 = v4 + result.f32[0];
  if ((float)(v4 + result.f32[0]) < v6 || (v6 = a4[7].f32[3], v18 > v6))
  {
    result.f32[0] = v6 - v4;
    v18 = v6;
  }
  a4[6].f32[1] = v18;
  if (a2[13].i64[0])
  {
    v19 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
    v19.i32[3] = 0;
    v20 = a2[6];
    v21 = a2[5];
    a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v19));
    v22 = vmulq_n_f32(v20, result.f32[0]);
    v22.i32[3] = 0;
    a2[5] = vaddq_f32(v21, vmulq_f32(a4[4], v22));
  }
  if (a3[13].i64[0])
  {
    v23 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
    v23.i32[3] = 0;
    v24 = a3[6];
    v25 = a3[5];
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v23));
    v26 = vmulq_n_f32(v24, result.f32[0]);
    v26.i32[3] = 0;
    result = vaddq_f32(v25, vmulq_f32(a4[5], v26));
    a3[5] = result;
  }
  return result;
}

float32x4_t sub_1B21F5B64(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float v4;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v11;
  float v18;
  float32x4_t result;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v4 = a4[6].f32[1];
  _S2 = a4[6].i32[3];
  v6 = a4[7].f32[2];
  v7 = a4[1];
  v8 = (int8x16_t)vmulq_f32(v7, a2[4]);
  _Q5 = (int8x16_t)vmulq_f32(*a4, a2[5]);
  _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL))).u32[0];
  _Q6 = (int8x16_t)vmulq_f32(a4[3], a3[4]);
  v11 = (int8x16_t)vmulq_f32(a4[2], a3[5]);
  _Q6.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))).u32[0];
  __asm
  {
    FMLS            S3, S2, V5.S[0]
    FMLS            S3, S2, V6.S[0]
  }
  v18 = v4 + _S3;
  result.f32[0] = v6 - v4;
  if (v18 >= v6)
    result.f32[0] = _S3;
  else
    v18 = a4[7].f32[2];
  a4[6].f32[1] = v18;
  if (a2[13].i64[0])
  {
    v20 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
    v20.i32[3] = 0;
    v21 = a2[6];
    v22 = a2[5];
    a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v20));
    v23 = vmulq_n_f32(v21, result.f32[0]);
    v23.i32[3] = 0;
    a2[5] = vaddq_f32(v22, vmulq_f32(a4[4], v23));
  }
  if (a3[13].i64[0])
  {
    v24 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
    v24.i32[3] = 0;
    v25 = a3[6];
    v26 = a3[5];
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v24));
    v27 = vmulq_n_f32(v25, result.f32[0]);
    v27.i32[3] = 0;
    result = vaddq_f32(v26, vmulq_f32(a4[5], v27));
    a3[5] = result;
  }
  return result;
}

float32x4_t sub_1B21F5C7C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t result;
  float v5;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  float v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  result.i32[0] = a4[8].i32[0];
  if (result.f32[0] != 0.0)
  {
    v5 = a4[6].f32[0];
    v6 = a4[7].f32[2];
    v7 = a4[1];
    v8 = (int8x16_t)vmulq_f32(v7, a2[9]);
    _Q4 = (int8x16_t)vmulq_f32(*a4, a2[10]);
    _Q4.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q4.i8, *(float32x2_t *)_Q4.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q4, _Q4, 8uLL))).u32[0];
    _Q5 = (int8x16_t)vmulq_f32(a4[3], a3[9]);
    _Q6 = (int8x16_t)vmulq_f32(a4[2], a3[10]);
    ++dword_1EEFD59E8;
    _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL))).u32[0];
    _Q6.i32[0] = a4[6].i32[3];
    __asm
    {
      FMLS            S0, S6, V4.S[0]
      FMLS            S0, S6, V5.S[0]
    }
    v17 = v5 + result.f32[0];
    v18 = v6 - v5;
    if (v17 < v6)
      result.f32[0] = v18;
    else
      v6 = v17;
    a4[6].f32[0] = v6;
    if (a2[13].i64[0])
    {
      v19 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
      v19.i32[3] = 0;
      v20 = vmulq_n_f32(a2[6], result.f32[0]);
      v20.i32[3] = 0;
      a2[9] = vaddq_f32(a2[9], vmulq_f32(a2[7], v19));
      a2[10] = vaddq_f32(a2[10], vmulq_f32(a4[4], v20));
    }
    if (a3[13].i64[0])
    {
      v21 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
      v21.i32[3] = 0;
      v22 = vmulq_n_f32(a3[6], result.f32[0]);
      v22.i32[3] = 0;
      a3[9] = vaddq_f32(a3[9], vmulq_f32(a3[7], v21));
      result = vaddq_f32(a3[10], vmulq_f32(a4[5], v22));
      a3[10] = result;
    }
  }
  return result;
}

uint64_t sub_1B21F5DB0(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  v2 = (1664525 * *(_DWORD *)(a1 + 304) + 1013904223);
  *(_QWORD *)(a1 + 304) = v2;
  if (a2 <= 0x10000)
  {
    v2 ^= v2 >> 16;
    if (a2 <= 0x100)
    {
      v2 ^= v2 >> 8;
      if (a2 <= 0x10)
      {
        v2 ^= v2 >> 4;
        if (a2 <= 4)
        {
          v2 ^= v2 >> 2;
          if (a2 <= 2)
            v2 ^= v2 >> 1;
        }
      }
    }
  }
  return (v2 % (int)a2);
}

void sub_1B21F5E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  const float *v5;
  float32x4_t v6;

  if (a3)
  {
    if ((*(_BYTE *)(a3 + 264) & 2) != 0)
      v3 = a3;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 0uLL;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  if (v3)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v3 + 64);
    v5 = (const float *)(v3 + 384);
    v6 = vld1q_dup_f32(v5);
    v6.i32[3] = 0;
    *(float32x4_t *)(a2 + 128) = vmulq_f32(*(float32x4_t *)(v3 + 400), v6);
    *(_QWORD *)(a2 + 208) = v3;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 624);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(v3 + 400);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(v3 + 352);
    v4 = *(_OWORD *)(v3 + 368);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1B2244DB0;
    *(_OWORD *)(a2 + 16) = xmmword_1B2244DD0;
    *(_OWORD *)(a2 + 32) = xmmword_1B2244D90;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_OWORD *)(a2 + 96) = xmmword_1B2244F70;
    *(_OWORD *)(a2 + 112) = xmmword_1B2244F70;
    *(_OWORD *)(a2 + 176) = 0uLL;
  }
  *(_OWORD *)(a2 + 192) = v4;
}

double sub_1B21F5EE0(uint64_t a1, uint64_t a2, int8x16_t *a3, int a4, int a5, uint64_t a6, int8x8_t *a7, int8x8_t *a8, float a9, float a10, float a11)
{
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float v46;
  float32x4_t *v47;
  float32x4_t v48;
  int8x16_t v49;
  unsigned __int32 v50;
  float32x4_t *v51;
  float32x4_t v52;
  int8x16_t v53;
  unsigned __int32 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  double result;

  v11 = *(float32x4_t *)a3;
  *(int8x16_t *)(a2 + 16) = *a3;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  v13 = (float32x4_t)veorq_s8(*a3, v12);
  *(float32x4_t *)(a2 + 48) = v13;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(float32x4_t **)(v14 + 224 * a4 + 208);
  v16 = *(float32x4_t **)(v14 + 224 * a5 + 208);
  *(_DWORD *)(a2 + 152) = a4;
  *(_DWORD *)(a2 + 156) = a5;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a6 + 84);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(int8x8_t *)v17.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a7->i8, *(int8x16_t *)a7->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v17.u32[2] = *a7;
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), 4uLL);
  v18.i64[1] = v11.i64[0];
  v19 = (int8x16_t)vsubq_f32(vmulq_f32(v18, *(float32x4_t *)a7->i8), vmulq_f32(v11, v17));
  v20.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v20.i64[1] = v19.u32[0];
  *(float32x4_t *)a2 = v20;
  v21 = 0uLL;
  v22 = 0uLL;
  if (v15)
  {
    v23 = vmulq_f32(v15[19], v20);
    v24 = (int8x16_t)vmulq_f32(v15[20], v20);
    v25 = (int8x16_t)vmulq_f32(v15[21], v20);
    v25.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
    v22 = vmulq_f32(v23, v15[39]);
  }
  *(float32x4_t *)(a2 + 64) = v22;
  *(int8x8_t *)v26.f32 = vext_s8(*a8, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v26.u32[2] = *a8;
  v27.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
  v27.i64[1] = v13.i64[0];
  v28 = (int8x16_t)vsubq_f32(vmulq_f32(v27, *(float32x4_t *)a8->i8), vmulq_f32(v26, v13));
  v29.i64[0] = vextq_s8(v28, v28, 4uLL).u64[0];
  v29.i64[1] = v28.u32[0];
  *(float32x4_t *)(a2 + 32) = v29;
  if (v16)
  {
    v30 = vmulq_f32(v16[19], v29);
    v31 = (int8x16_t)vmulq_f32(v16[20], v29);
    v32 = (int8x16_t)vmulq_f32(v16[21], v29);
    v32.i32[3] = 0;
    *(float32x2_t *)v30.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v31.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
    *(float32x2_t *)&v30.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
    v21 = (int8x16_t)vmulq_f32(v30, v16[39]);
  }
  *(int8x16_t *)(a2 + 80) = v21;
  v33 = 0.0;
  v34 = 0.0;
  if (v15)
  {
    v35.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
    v35.i64[1] = v22.i64[0];
    *(int8x8_t *)v36.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a7->i8, *(int8x16_t *)a7->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v36.u32[2] = *a7;
    v37 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v36), vmulq_f32(v35, *(float32x4_t *)a7->i8));
    v38.i64[0] = vextq_s8(v37, v37, 4uLL).u64[0];
    v38.i64[1] = v37.u32[0];
    v39 = (int8x16_t)vmulq_f32(*(float32x4_t *)a3, v38);
    v34 = v15[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)).f32[0];
  }
  if (v16)
  {
    v40.i64[0] = 0x8000000080000000;
    v40.i64[1] = 0x8000000080000000;
    v41 = (float32x4_t)veorq_s8(v21, v40);
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
    v42.i64[1] = v41.i64[0];
    *(int8x8_t *)v43.f32 = vext_s8(*a8, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v43.u32[2] = *a8;
    v44 = (int8x16_t)vsubq_f32(vmulq_f32(v43, v41), vmulq_f32(*(float32x4_t *)a8->i8, v42));
    v40.i64[0] = vextq_s8(v44, v44, 4uLL).u64[0];
    v40.i64[1] = v44.u32[0];
    v45 = (int8x16_t)vmulq_f32(*(float32x4_t *)a3, (float32x4_t)v40);
    v33 = v16[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0];
  }
  v46 = a9 / (float)(v34 + v33);
  *(float *)(a2 + 108) = v46;
  if (!v15)
  {
    v48 = 0uLL;
    v55 = (int8x16_t)vmulq_f32(v11, (float32x4_t)0);
    v50 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).u32[0];
    if (v16)
      goto LABEL_11;
LABEL_13:
    v52 = 0uLL;
    v56 = (int8x16_t)vmulq_f32(v13, (float32x4_t)0);
    v54 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8)).u32[0];
    goto LABEL_14;
  }
  v47 = (float32x4_t *)(v14 + 224 * a4);
  v48 = v47[12];
  v49 = (int8x16_t)vmulq_f32(v11, v47[11]);
  v50 = vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).u32[0];
  if (!v16)
    goto LABEL_13;
LABEL_11:
  v51 = (float32x4_t *)(v14 + 224 * a5);
  v52 = v51[12];
  v53 = (int8x16_t)vmulq_f32(v51[11], v13);
  v54 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).u32[0];
LABEL_14:
  v57 = (int8x16_t)vmulq_f32(v48, v20);
  *(float *)v57.i32 = *(float *)&v50
                    + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8)).f32[0];
  v58 = (int8x16_t)vmulq_f32(v52, v29);
  *(float *)(a2 + 112) = v46
                       * (float)(a10
                               - (float)(*(float *)v57.i32
                                       + (float)(*(float *)&v54
                                               + vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0])));
  *(float *)(a2 + 116) = a11;
  result = 6.08244611e77;
  *(_QWORD *)(a2 + 120) = 0x501502F900000000;
  return result;
}

uint64_t sub_1B21F61B8(uint64_t a1, int8x16_t *a2, int a3, int a4, int a5, uint64_t a6, int8x8_t *a7, int8x8_t *a8, float a9, float a10, float a11)
{
  int v21;
  int v22;
  int v23;
  int8x8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t *v37;

  v21 = *(_DWORD *)(a1 + 108);
  v22 = v21;
  if (v21 == *(_DWORD *)(a1 + 112))
  {
    v23 = v21 ? 2 * v21 : 1;
    if (v21 < v23)
    {
      if (v23)
      {
        v24 = a8;
        v25 = sub_1B21FF5F0(160 * v23, 16);
        a8 = v24;
        v26 = v25;
        v21 = *(_DWORD *)(a1 + 108);
      }
      else
      {
        v26 = 0;
      }
      if (v21 >= 1)
      {
        v27 = 0;
        v28 = 160 * v21;
        do
        {
          v29 = (_OWORD *)(v26 + v27);
          v30 = (_OWORD *)(*(_QWORD *)(a1 + 120) + v27);
          *v29 = *v30;
          v29[1] = v30[1];
          v29[2] = v30[2];
          v29[3] = v30[3];
          v29[4] = v30[4];
          v29[5] = v30[5];
          v31 = v30[6];
          v32 = v30[7];
          v33 = v30[9];
          v29[8] = v30[8];
          v29[9] = v33;
          v29[6] = v31;
          v29[7] = v32;
          v27 += 160;
        }
        while (v28 != v27);
      }
      v34 = *(_QWORD *)(a1 + 120);
      if (v34 && *(_BYTE *)(a1 + 128))
      {
        v37 = a8;
        sub_1B21FF5FC(v34);
        a8 = v37;
      }
      *(_BYTE *)(a1 + 128) = 1;
      *(_QWORD *)(a1 + 120) = v26;
      *(_DWORD *)(a1 + 112) = v23;
      v21 = *(_DWORD *)(a1 + 108);
    }
  }
  *(_DWORD *)(a1 + 108) = v21 + 1;
  v35 = *(_QWORD *)(a1 + 120) + 160 * v22;
  *(_DWORD *)(v35 + 148) = a5;
  sub_1B21F5EE0(a1, v35, a2, a3, a4, a6, a7, a8, a9, a10, a11);
  return v35;
}

double sub_1B21F6364(uint64_t a1, uint64_t a2, int8x16_t *a3, int a4, int a5, uint64_t a6, double a7, float a8, float a9)
{
  float32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float v33;
  float32x4_t *v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  unsigned __int32 v42;
  int8x16_t v43;
  int8x16_t v44;
  double result;

  v9 = 0uLL;
  *(_OWORD *)(a2 + 16) = 0u;
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  *(int8x16_t *)(a2 + 48) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(float32x4_t **)(v11 + 224 * a4 + 208);
  v13 = *(float32x4_t **)(v11 + 224 * a5 + 208);
  *(_DWORD *)(a2 + 152) = a4;
  *(_DWORD *)(a2 + 156) = a5;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a6 + 88);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v14 = (float32x4_t)veorq_s8(*a3, v10);
  *(float32x4_t *)a2 = v14;
  v15 = 0uLL;
  if (v12)
  {
    v16 = vmulq_f32(v12[19], v14);
    v17 = (int8x16_t)vmulq_f32(v12[20], v14);
    v18 = (int8x16_t)vmulq_f32(v12[21], v14);
    v18.i32[3] = 0;
    *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
    *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
    v15 = vmulq_f32(v16, v12[39]);
  }
  *(float32x4_t *)(a2 + 64) = v15;
  v19 = *(float32x4_t *)a3;
  *(int8x16_t *)(a2 + 32) = *a3;
  if (v13)
  {
    v20 = vmulq_f32(v19, v13[19]);
    v21 = (int8x16_t)vmulq_f32(v19, v13[20]);
    v22 = (int8x16_t)vmulq_f32(v19, v13[21]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    v9 = vmulq_f32(v20, v13[39]);
  }
  *(float32x4_t *)(a2 + 80) = v9;
  v23 = 0uLL;
  v24 = 0uLL;
  if (v12)
  {
    v25 = (int8x16_t)vmulq_f32(v12[19], v14);
    v26 = (int8x16_t)vmulq_f32(v12[20], v14);
    v27 = (int8x16_t)vmulq_f32(v12[21], v14);
    v27.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  }
  if (v13)
  {
    v28 = (int8x16_t)vmulq_f32(v19, v13[19]);
    v29 = (int8x16_t)vmulq_f32(v19, v13[20]);
    v30 = (int8x16_t)vmulq_f32(v19, v13[21]);
    v30.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
  }
  v31 = (int8x16_t)vmulq_f32(v24, v14);
  v32 = (int8x16_t)vmulq_f32(v19, v23);
  v33 = 1.0
      / (float)((float)(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8)).f32[0]+ 0.0)+ vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0]);
  *(float *)(a2 + 108) = v33;
  if (!v12)
  {
    v37 = vpadd_f32(0, 0).f32[0] + 0.0;
    v35 = 0uLL;
    if (v13)
      goto LABEL_11;
LABEL_13:
    v42 = vpadd_f32((float32x2_t)0x8000000080000000, (float32x2_t)0x8000000080000000).u32[0];
    v40 = 0uLL;
    goto LABEL_14;
  }
  v34 = (float32x4_t *)(v11 + 224 * a4);
  v35 = v34[12];
  v36 = (int8x16_t)vmulq_f32(v34[11], (float32x4_t)0);
  LODWORD(v37) = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)).u32[0];
  if (!v13)
    goto LABEL_13;
LABEL_11:
  v38 = (float32x4_t *)(v11 + 224 * a5);
  v39.i64[0] = 0x8000000080000000;
  v39.i64[1] = 0x8000000080000000;
  v40 = v38[12];
  v41 = (int8x16_t)vmulq_f32(v38[11], v39);
  v42 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).u32[0];
LABEL_14:
  v43 = (int8x16_t)vmulq_f32(v35, v14);
  v44 = (int8x16_t)vmulq_f32(v19, v40);
  *(float *)(a2 + 112) = v33
                       * (float)(a8
                               - (float)((float)(v37
                                               + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8)).f32[0])+ (float)(*(float *)&v42+ vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)).f32[0])));
  *(float *)(a2 + 116) = a9;
  result = 6.08244611e77;
  *(_QWORD *)(a2 + 120) = 0x501502F900000000;
  return result;
}

uint64_t sub_1B21F65DC(uint64_t a1, int8x16_t *a2, int a3, int a4, int a5, uint64_t a6, __n128 a7, float a8, float a9)
{
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v17 = *(_DWORD *)(a1 + 140);
  v18 = v17;
  if (v17 == *(_DWORD *)(a1 + 144))
  {
    v19 = v17 ? 2 * v17 : 1;
    if (v17 < v19)
    {
      if (v19)
      {
        v20 = sub_1B21FF5F0(160 * v19, 16);
        v17 = *(_DWORD *)(a1 + 140);
      }
      else
      {
        v20 = 0;
      }
      if (v17 >= 1)
      {
        v21 = 0;
        v22 = 160 * v17;
        do
        {
          v23 = v20 + v21;
          v24 = *(_QWORD *)(a1 + 152) + v21;
          *(_OWORD *)v23 = *(_OWORD *)v24;
          *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
          *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v23 + 48) = *(_OWORD *)(v24 + 48);
          *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
          *(_OWORD *)(v23 + 80) = *(_OWORD *)(v24 + 80);
          a7 = *(__n128 *)(v24 + 96);
          v25 = *(_OWORD *)(v24 + 112);
          v26 = *(_OWORD *)(v24 + 144);
          *(_OWORD *)(v23 + 128) = *(_OWORD *)(v24 + 128);
          *(_OWORD *)(v23 + 144) = v26;
          *(__n128 *)(v23 + 96) = a7;
          *(_OWORD *)(v23 + 112) = v25;
          v21 += 160;
        }
        while (v22 != v21);
      }
      v27 = *(_QWORD *)(a1 + 152);
      if (v27 && *(_BYTE *)(a1 + 160))
        sub_1B21FF5FC(v27);
      *(_BYTE *)(a1 + 160) = 1;
      *(_QWORD *)(a1 + 152) = v20;
      *(_DWORD *)(a1 + 144) = v19;
      v17 = *(_DWORD *)(a1 + 140);
    }
  }
  *(_DWORD *)(a1 + 140) = v17 + 1;
  v28 = *(_QWORD *)(a1 + 152) + 160 * v18;
  *(_DWORD *)(v28 + 148) = a5;
  sub_1B21F6364(a1, v28, a2, a3, a4, a6, a7.n128_f64[0], a8, a9);
  return v28;
}

uint64_t sub_1B21F6760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(a2 + 240);
  if ((v2 & 0x80000000) != 0)
  {
    if ((*(_BYTE *)(a2 + 264) & 2) != 0 && ((v4 = a1, *(float *)(a2 + 384) != 0.0) || (*(_BYTE *)(a2 + 232) & 2) != 0))
    {
      v2 = *(unsigned int *)(a1 + 12);
      v5 = *(_DWORD *)(a1 + 12);
      if ((_DWORD)v2 == *(_DWORD *)(a1 + 16))
      {
        v6 = (_DWORD)v2 ? 2 * v2 : 1;
        v5 = *(_DWORD *)(a1 + 12);
        if ((int)v2 < v6)
        {
          if (v6)
            v7 = sub_1B21FF5F0(224 * v6, 16);
          else
            v7 = 0;
          v8 = *(_DWORD *)(v4 + 12);
          if (v8 >= 1)
          {
            v9 = 0;
            v10 = 224 * v8;
            do
            {
              v11 = *(_QWORD *)(v4 + 24) + v9;
              v12 = v7 + v9;
              *(_OWORD *)v12 = *(_OWORD *)v11;
              *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v11 + 32);
              *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
              *(_OWORD *)(v12 + 64) = *(_OWORD *)(v11 + 64);
              *(_OWORD *)(v12 + 80) = *(_OWORD *)(v11 + 80);
              *(_OWORD *)(v12 + 96) = *(_OWORD *)(v11 + 96);
              *(_OWORD *)(v12 + 112) = *(_OWORD *)(v11 + 112);
              *(_OWORD *)(v12 + 128) = *(_OWORD *)(v11 + 128);
              *(_OWORD *)(v12 + 144) = *(_OWORD *)(v11 + 144);
              *(_OWORD *)(v12 + 160) = *(_OWORD *)(v11 + 160);
              *(_OWORD *)(v12 + 176) = *(_OWORD *)(v11 + 176);
              *(_OWORD *)(v12 + 192) = *(_OWORD *)(v11 + 192);
              *(_QWORD *)(v12 + 208) = *(_QWORD *)(v11 + 208);
              v9 += 224;
            }
            while (v10 != v9);
          }
          a1 = *(_QWORD *)(v4 + 24);
          if (a1 && *(_BYTE *)(v4 + 32))
            sub_1B21FF5FC(a1);
          *(_BYTE *)(v4 + 32) = 1;
          *(_QWORD *)(v4 + 24) = v7;
          *(_DWORD *)(v4 + 16) = v6;
          v5 = *(_DWORD *)(v4 + 12);
        }
      }
      *(_DWORD *)(v4 + 12) = v5 + 1;
      v13 = *(_QWORD *)(v4 + 24) + 224 * (int)v2;
      *(_QWORD *)(v13 + 208) = 0;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)v13 = 0u;
      sub_1B21F5E18(a1, *(_QWORD *)(v4 + 24) + 224 * (int)v2, a2);
      *(_DWORD *)(a2 + 240) = v2;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1B21F6928(uint64_t result, uint64_t a2, int a3, int a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, float *a8, float *a9, int8x8_t *a10, int8x8_t *a11)
{
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float v66;
  float v67;
  float32x4_t v68;
  int8x16_t v69;
  float v70;
  float v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  int8x16_t v86;
  float v87;
  int8x16_t v88;
  float v89;
  float32x4_t *v90;
  float32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float v94;
  _BOOL4 v96;
  float v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;

  v11 = *(_QWORD *)(result + 24);
  v12 = (float32x4_t *)(v11 + 224 * a3);
  v15 = (float32x4_t *)v12[13].i64[0];
  v14 = v12 + 13;
  v13 = v15;
  v16 = (float32x4_t *)(v11 + 224 * a4);
  v19 = (float32x4_t *)v16[13].i64[0];
  v18 = v16 + 13;
  v17 = v19;
  v20 = vsubq_f32(a5[3], v14[-10]);
  v20.i32[3] = 0;
  *(float32x4_t *)a10->i8 = v20;
  v21 = vsubq_f32(a5[2], v18[-10]);
  v21.i32[3] = 0;
  *(float32x4_t *)a11->i8 = v21;
  *a9 = 1.0;
  v22 = a5[4];
  *(int8x8_t *)v23.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v23.u32[2] = *a10;
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v24.i64[1] = a5[4].i64[0];
  v25 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a10->i8, v24), vmulq_f32(v22, v23));
  v26.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
  v26.i64[1] = v25.u32[0];
  v27 = 0uLL;
  v28 = 0uLL;
  if (v13)
  {
    v29 = vmulq_f32(v13[19], v26);
    v30 = (int8x16_t)vmulq_f32(v13[20], v26);
    v31 = (int8x16_t)vmulq_f32(v13[21], v26);
    v31.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    v28 = vmulq_f32(v29, v13[39]);
  }
  *(float32x4_t *)(a2 + 64) = v28;
  v32 = a5[4];
  *(int8x8_t *)v33.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v33.u32[2] = *a11;
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v32.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
  v34.i64[1] = a5[4].i64[0];
  v35 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a11->i8, v34), vmulq_f32(v32, v33));
  v36.i64[0] = vextq_s8(v35, v35, 4uLL).u64[0];
  v36.i64[1] = v35.u32[0];
  if (v17)
  {
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    v38 = (float32x4_t)veorq_s8(v36, v37);
    v39 = vmulq_f32(v17[19], v38);
    v40 = (int8x16_t)vmulq_f32(v17[20], v38);
    v41 = (int8x16_t)vmulq_f32(v17[21], v38);
    v41.i32[3] = 0;
    *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
    *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
    v27 = (int8x16_t)vmulq_f32(v39, v17[39]);
  }
  *(int8x16_t *)(a2 + 80) = v27;
  v42 = 0.0;
  v43 = 0.0;
  if (v13)
  {
    v44.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL).u64[0];
    v44.i64[1] = v28.i64[0];
    *(int8x8_t *)v45.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v45.u32[2] = *a10;
    v46 = (int8x16_t)vsubq_f32(vmulq_f32(v28, v45), vmulq_f32(v44, *(float32x4_t *)a10->i8));
    v47.i64[0] = vextq_s8(v46, v46, 4uLL).u64[0];
    v47.i64[1] = v46.u32[0];
    v48 = (int8x16_t)vmulq_f32(a5[4], v47);
    v43 = v13[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)).f32[0];
  }
  if (v17)
  {
    v49.i64[0] = 0x8000000080000000;
    v49.i64[1] = 0x8000000080000000;
    v50 = (float32x4_t)veorq_s8(v27, v49);
    *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), 4uLL);
    v51.i64[1] = v50.i64[0];
    *(int8x8_t *)v52.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v52.u32[2] = *a11;
    v53 = (int8x16_t)vsubq_f32(vmulq_f32(v52, v50), vmulq_f32(*(float32x4_t *)a11->i8, v51));
    v49.i64[0] = vextq_s8(v53, v53, 4uLL).u64[0];
    v49.i64[1] = v53.u32[0];
    v54 = (int8x16_t)vmulq_f32(a5[4], (float32x4_t)v49);
    v42 = v17[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0];
  }
  *(float *)(a2 + 108) = *a9 / (float)(v43 + v42);
  *(float32x4_t *)(a2 + 16) = a5[4];
  v57.i64[0] = 0x8000000080000000;
  v57.i64[1] = 0x8000000080000000;
  v55 = veorq_s8((int8x16_t)a5[4], (int8x16_t)v57);
  *(float32x4_t *)a2 = v26;
  *(int8x16_t *)(a2 + 32) = veorq_s8(v36, (int8x16_t)v57);
  *(int8x16_t *)(a2 + 48) = v55;
  v56 = 0uLL;
  v57.i8[3] = 0;
  v57.i8[7] = 0;
  v57.i8[11] = 0;
  v57.i8[15] = 0;
  if (v13)
  {
    v58 = v13[23];
    *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
    v59.i64[1] = v13[23].i64[0];
    *(int8x8_t *)v60.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v60.u32[2] = *a10;
    v61 = (int8x16_t)vsubq_f32(vmulq_f32(v58, v60), vmulq_f32(*(float32x4_t *)a10->i8, v59));
    v58.i64[0] = vextq_s8(v61, v61, 4uLL).u64[0];
    v58.i64[1] = v61.u32[0];
    v57 = vaddq_f32(v13[22], v58);
  }
  if (v17)
  {
    v62 = v17[23];
    *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v62.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), 4uLL);
    v63.i64[1] = v17[23].i64[0];
    *(int8x8_t *)v64.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v64.u32[2] = *a11;
    v65 = (int8x16_t)vsubq_f32(vmulq_f32(v62, v64), vmulq_f32(*(float32x4_t *)a11->i8, v63));
    v62.i64[0] = vextq_s8(v65, v65, 4uLL).u64[0];
    v62.i64[1] = v65.u32[0];
    v56 = vaddq_f32(v17[22], v62);
  }
  v66 = a5[5].f32[0];
  v67 = *(float *)(a6 + 56);
  v68 = vsubq_f32(v57, v56);
  v68.i32[3] = 0;
  *a7 = v68;
  v69 = (int8x16_t)vmulq_f32(a5[4], v68);
  *(_DWORD *)a8 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)).u32[0];
  *(_DWORD *)(a2 + 104) = a5[5].i32[1];
  v70 = -(float)(*a8 * a5[5].f32[3]);
  if (v70 <= 0.0)
    v70 = 0.0;
  if ((*(_BYTE *)(a6 + 64) & 4) != 0)
  {
    v71 = a5[7].f32[3] * *(float *)(a6 + 60);
    *(float *)(a2 + 100) = v71;
    if (v13 && v14->i64[0])
    {
      v72 = (float32x4_t *)(v11 + 224 * a3);
      v73 = vmulq_n_f32(vmulq_f32(vmulq_f32(*(float32x4_t *)(a2 + 16), v72[8]), v13[25]), v71);
      v73.i32[3] = 0;
      v74 = v72[6];
      v75 = v72[5];
      v72[4] = vaddq_f32(v72[4], vmulq_f32(v72[7], v73));
      v76 = vmulq_n_f32(v74, v71);
      v76.i32[3] = 0;
      v72[5] = vaddq_f32(v75, vmulq_f32(*(float32x4_t *)(a2 + 64), v76));
    }
    if (v17 && v18->i64[0])
    {
      v77 = -*(float *)(a2 + 100);
      v78.i64[0] = 0x8000000080000000;
      v78.i64[1] = 0x8000000080000000;
      v79 = (float32x4_t)veorq_s8(*(int8x16_t *)(a2 + 80), v78);
      v80 = (float32x4_t *)(v11 + 224 * a4);
      v81 = vmulq_n_f32(vmulq_f32(v17[25], vmulq_f32(v80[8], (float32x4_t)veorq_s8(*(int8x16_t *)(a2 + 48), v78))), v77);
      v81.i32[3] = 0;
      v82 = vmulq_n_f32(v80[6], v77);
      v82.i32[3] = 0;
      v83 = vaddq_f32(v80[5], vmulq_f32(v79, v82));
      v80[4] = vaddq_f32(v80[4], vmulq_f32(v80[7], v81));
      v80[5] = v83;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 100) = 0;
  }
  *(_DWORD *)(a2 + 96) = 0;
  if (v13)
  {
    v84 = (float32x4_t *)(v11 + 224 * a3);
    v85 = v84[12];
    v86 = (int8x16_t)vmulq_f32(v84[11], *(float32x4_t *)(a2 + 16));
  }
  else
  {
    v85 = 0uLL;
    v86 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16), (float32x4_t)0);
  }
  v87 = v66 + v67;
  v88 = (int8x16_t)vmulq_f32(v85, *(float32x4_t *)a2);
  v89 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)).f32[0];
  if (v17)
  {
    v90 = (float32x4_t *)(v11 + 224 * a4);
    v91 = v90[12];
    v92 = (int8x16_t)vmulq_f32(v90[11], *(float32x4_t *)(a2 + 48));
  }
  else
  {
    v91 = 0uLL;
    v92 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 48), (float32x4_t)0);
  }
  v93 = (int8x16_t)vmulq_f32(v91, *(float32x4_t *)(a2 + 32));
  v94 = v70
      - (float)(v89
              + (float)(vadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)).f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v93.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)).f32[0]));
  v96 = v87 > *(float *)(a6 + 48) || *(_DWORD *)(a6 + 44) == 0;
  if (v87 <= 0.0)
  {
    v98 = 36;
    if (v96)
      v98 = 32;
    v97 = (float)-(float)(v87 * *(float *)(a6 + v98)) / *(float *)(a6 + 12);
  }
  else
  {
    v94 = v94 - (float)(v87 / *(float *)(a6 + 12));
    v97 = 0.0;
  }
  v99 = *(float *)(a2 + 108);
  v100 = v97 * v99;
  v101 = v94 * v99;
  v102 = -0.0;
  if (v96)
    v102 = v100;
  *(float *)(a2 + 112) = v101 + v102;
  if (v96)
    v103 = 0.0;
  else
    v103 = v100;
  *(float *)(a2 + 128) = v103;
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 124) = 1343554297;
  return result;
}

float32x4_t sub_1B21F6E78(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, float32x4_t result)
{
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t *v40;
  int8x16_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(float32x4_t **)(v7 + 224 * a3 + 208);
  v9 = *(float32x4_t **)(v7 + 224 * a4 + 208);
  v10 = *(_DWORD *)(a2 + 148);
  v11 = *(_QWORD *)(a1 + 120);
  if ((*(_BYTE *)(a6 + 64) & 4) != 0)
  {
    result.f32[0] = *(float *)(a5 + 128) * *(float *)(a6 + 60);
    v12 = v11 + 160 * v10;
    *(_DWORD *)(v12 + 100) = result.i32[0];
    v13 = (float *)(v12 + 100);
    if (v8)
    {
      v14 = (float32x4_t *)(v11 + 160 * v10);
      v15 = vmulq_n_f32(vmulq_f32(v8[25], vmulq_n_f32(v14[1], v8[24].f32[0])), result.f32[0]);
      v15.i32[3] = 0;
      v16 = (float32x4_t *)(v7 + 224 * a3);
      v17 = v16[6];
      v18 = v16[5];
      v16[4] = vaddq_f32(v16[4], vmulq_f32(v16[7], v15));
      v19 = vmulq_n_f32(v17, result.f32[0]);
      v19.i32[3] = 0;
      result = vaddq_f32(v18, vmulq_f32(v14[4], v19));
      v16[5] = result;
    }
    if (v9)
    {
      v20 = (int8x16_t *)(v11 + 160 * v10);
      v21.i64[0] = 0x8000000080000000;
      v21.i64[1] = 0x8000000080000000;
      v22 = vmulq_f32(v9[25], vmulq_n_f32((float32x4_t)veorq_s8(v20[3], v21), v9[24].f32[0]));
      v23 = (float32x4_t)veorq_s8(v20[5], v21);
      v24 = -*v13;
      v25 = vmulq_n_f32(v22, v24);
      v25.i32[3] = 0;
      v26 = (float32x4_t *)(v7 + 224 * a4);
      result = vaddq_f32(v26[4], vmulq_f32(v26[7], v25));
      v27 = vmulq_n_f32(v26[6], v24);
      v27.i32[3] = 0;
      v28 = vaddq_f32(v26[5], vmulq_f32(v23, v27));
      v26[4] = result;
      v26[5] = v28;
    }
  }
  else
  {
    *(_DWORD *)(v11 + 160 * v10 + 100) = 0;
  }
  v29 = *(_DWORD *)(a6 + 64);
  if ((v29 & 0x10) != 0)
  {
    v30 = *(int *)(a2 + 148) + 1;
    v31 = *(_QWORD *)(a1 + 120);
    if ((v29 & 4) != 0)
    {
      result.f32[0] = *(float *)(a5 + 132) * *(float *)(a6 + 60);
      v32 = v31 + 160 * v30;
      *(_DWORD *)(v32 + 100) = result.i32[0];
      v33 = (float *)(v32 + 100);
      if (v8)
      {
        v34 = (float32x4_t *)(v31 + 160 * v30);
        v35 = vmulq_n_f32(vmulq_n_f32(v34[1], v8[24].f32[0]), result.f32[0]);
        v35.i32[3] = 0;
        v36 = (float32x4_t *)(v7 + 224 * a3);
        v37 = v36[6];
        v38 = v36[5];
        v36[4] = vaddq_f32(v36[4], vmulq_f32(v36[7], v35));
        v39 = vmulq_n_f32(v37, result.f32[0]);
        v39.i32[3] = 0;
        result = vaddq_f32(v38, vmulq_f32(v34[4], v39));
        v36[5] = result;
      }
      if (v9)
      {
        v40 = (int8x16_t *)(v31 + 160 * v30);
        v41.i64[0] = 0x8000000080000000;
        v41.i64[1] = 0x8000000080000000;
        v42 = -*v33;
        v43 = vmulq_n_f32(vmulq_n_f32((float32x4_t)veorq_s8(v40[3], v41), v9[24].f32[0]), v42);
        v43.i32[3] = 0;
        v44 = (float32x4_t *)(v7 + 224 * a4);
        result = vaddq_f32(v44[4], vmulq_f32(v44[7], v43));
        v45 = vmulq_n_f32(v44[6], v42);
        v45.i32[3] = 0;
        v46 = vaddq_f32(v44[5], vmulq_f32((float32x4_t)veorq_s8(v40[5], v41), v45));
        v44[4] = result;
        v44[5] = v46;
      }
    }
    else
    {
      *(_DWORD *)(v31 + 160 * v30 + 100) = 0;
    }
  }
  return result;
}

void sub_1B21F7094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v41;
  int8x16_t v42;
  float v43;
  int8x16_t v44;
  float32x2_t v45;
  __n128 v46;
  float32x4_t *v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  int8x16_t v60;
  float32x2_t v61;
  __n128 v62;
  int8x16_t v63;
  float32x2_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  int v68;
  float v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t *v74;
  int v75;
  int8x16_t v76;
  float v77;
  float32x4_t v78;
  float v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  uint64_t v84;
  int8x16_t v85;
  float v86;
  float32x2_t *v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  int v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t *v111;
  float32x4_t *v112;
  float32x4_t *v113;
  int v114;
  uint64_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t v119;
  int8x8_t v120[2];
  int8x8_t v121[4];

  v6 = *(_QWORD *)(a2 + 792);
  v113 = *(float32x4_t **)(a2 + 784);
  v7 = sub_1B21F6760(a1, (uint64_t)v113);
  v112 = (float32x4_t *)v6;
  v8 = sub_1B21F6760(a1, v6);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = v10 + 224 * v7;
  v13 = *(float *)(v11 + 128);
  v12 = v11 + 128;
  if (v13 != 0.0
    || *(float *)(v12 + 4) != 0.0
    || *(float *)(v12 + 8) != 0.0
    || (v14 = v10 + 224 * v8, v16 = *(float *)(v14 + 128), v15 = v14 + 128, v16 != 0.0)
    || *(float *)(v15 + 4) != 0.0
    || *(float *)(v15 + 8) != 0.0)
  {
    v17 = *(_DWORD *)(a2 + 800);
    if (v17 >= 1)
    {
      v18 = 0;
      v19 = (float32x4_t *)(v10 + 224 * v7);
      v108 = v19 + 5;
      v109 = v19 + 12;
      v20 = (float32x4_t *)(v10 + 224 * v8);
      v110 = v20 + 13;
      v111 = v19 + 13;
      v106 = v20 + 5;
      v107 = v20 + 12;
      v114 = 1;
      v105 = v8;
      v115 = a3;
      while (1)
      {
        v21 = (float32x4_t *)(a2 + 192 * v18);
        if (v21[6].f32[0] <= *(float *)(a2 + 808))
          break;
LABEL_68:
        if (++v18 >= v17)
          return;
      }
      v119 = 0;
      v22 = *(_DWORD *)(a1 + 44);
      v23 = v22;
      if (v22 == *(_DWORD *)(a1 + 48))
      {
        v24 = v22 ? 2 * v22 : 1;
        v23 = *(_DWORD *)(a1 + 44);
        if (v22 < v24)
        {
          if (v24)
            v25 = sub_1B21FF5F0(160 * v24, 16);
          else
            v25 = 0;
          v26 = *(_DWORD *)(a1 + 44);
          if (v26 >= 1)
          {
            v27 = 0;
            v28 = 160 * v26;
            do
            {
              v29 = (_OWORD *)(v25 + v27);
              v30 = (_OWORD *)(*(_QWORD *)(a1 + 56) + v27);
              *v29 = *v30;
              v29[1] = v30[1];
              v29[2] = v30[2];
              v29[3] = v30[3];
              v29[4] = v30[4];
              v29[5] = v30[5];
              v31 = v30[6];
              v32 = v30[7];
              v33 = v30[9];
              v29[8] = v30[8];
              v29[9] = v33;
              v29[6] = v31;
              v29[7] = v32;
              v27 += 160;
            }
            while (v28 != v27);
          }
          v34 = *(_QWORD *)(a1 + 56);
          if (v34 && *(_BYTE *)(a1 + 64))
            sub_1B21FF5FC(v34);
          *(_BYTE *)(a1 + 64) = 1;
          *(_QWORD *)(a1 + 56) = v25;
          *(_DWORD *)(a1 + 48) = v24;
          v23 = *(_DWORD *)(a1 + 44);
        }
      }
      v35 = (uint64_t)&v21[1];
      *(_DWORD *)(a1 + 44) = v23 + 1;
      v36 = *(_QWORD *)(a1 + 56) + 160 * v22;
      *(_DWORD *)(v36 + 152) = v7;
      *(_DWORD *)(v36 + 156) = v9;
      *(_QWORD *)(v36 + 136) = v21 + 1;
      v37 = v115;
      sub_1B21F6928(a1, v36, v7, v9, v21 + 1, v115, &v118, (float *)&v119, (float *)&v119 + 1, v121, v120);
      *(_DWORD *)(v36 + 148) = *(_DWORD *)(a1 + 108);
      v38 = 0uLL;
      v39 = 0uLL;
      if (v111->i64[0])
        v39 = vaddq_f32(*v109, *v108);
      if (v110->i64[0])
        v38 = vaddq_f32(*v107, *v106);
      if (*(float *)(a2 + 192 * v18 + 104) <= 0.0 || v114 < 1)
      {
LABEL_45:
        v65 = a2 + 192 * v18;
        v68 = *(unsigned __int8 *)(v65 + 136);
        v67 = (_BYTE *)(v65 + 136);
        v66 = v68;
        if ((*(_BYTE *)(v37 + 64) & 0x20) != 0 && v66)
        {
          v69 = *((float *)&v119 + 1);
          sub_1B21F61B8(a1, (int8x16_t *)(a2 + 192 * v18 + 176), v7, v9, v22, v35, v121, v120, *((float *)&v119 + 1), *(float *)(a2 + 192 * v18 + 152), *(float *)(a2 + 192 * v18 + 160));
          if ((*(_BYTE *)(v37 + 64) & 0x10) != 0)
            sub_1B21F61B8(a1, (int8x16_t *)(a2 + 192 * v18 + 192), v7, v9, v22, v35, v121, v120, v69, *(float *)(a2 + 192 * v18 + 156), *(float *)(a2 + 192 * v18 + 164));
          sub_1B21F6E78(a1, v36, v7, v9, v35, v37, v70);
        }
        else
        {
          v71 = a2 + 192 * v18;
          v72 = *(float32x4_t *)(v71 + 80);
          v73 = vsubq_f32(v118, vmulq_n_f32(v72, *(float *)&v119));
          v73.i32[3] = 0;
          *(float32x4_t *)(v71 + 176) = v73;
          v74 = (float32x2_t *)(v71 + 176);
          v75 = *(_DWORD *)(v37 + 64);
          if ((v75 & 0x40) != 0
            || (v76 = (int8x16_t)vmulq_f32(v73, v73),
                v77 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)).f32[0], v77 <= 0.00000011921))
          {
            v86 = v72.f32[1];
            v87 = (float32x2_t *)(a2 + 192 * v18 + 192);
            v88 = fabsf(v72.f32[2]) <= 0.70711;
            v89 = (float)(v86 * v86) + (float)(v72.f32[0] * v72.f32[0]);
            v90 = 1.0 / sqrtf(v89);
            v91 = -(float)(v72.f32[1] * v90);
            v92 = v72.f32[0] * v90;
            v93 = -(float)(v72.f32[2] * (float)(v72.f32[0] * v90));
            v94 = v72.f32[2] * v91;
            v95 = v89 * v90;
            v96 = (float)(v72.f32[2] * v72.f32[2]) + (float)(v86 * v86);
            v97 = 1.0 / sqrtf(v96);
            v98 = -(float)(v72.f32[2] * v97);
            v99 = v72.f32[1] * v97;
            v100 = v96 * v97;
            v101 = -(float)(v72.f32[0] * (float)(v72.f32[1] * v97));
            v102 = v98 * v72.f32[0];
            if (v88)
            {
              v98 = v92;
              v99 = 0.0;
            }
            else
            {
              v91 = 0.0;
            }
            if (v88)
            {
              v100 = v93;
              v103 = v94;
            }
            else
            {
              v103 = v101;
            }
            if (v88)
              v102 = v95;
            v74->f32[0] = v91;
            v74->f32[1] = v98;
            v74[1].f32[0] = v99;
            v87->f32[0] = v100;
            *(float *)(a2 + 192 * v18 + 196) = v103;
            *(float *)(a2 + 192 * v18 + 200) = v102;
            v104 = *((float *)&v119 + 1);
            if ((v75 & 0x10) != 0)
            {
              sub_1B21F7930(v113, (float32x2_t *)(a2 + 192 * v18 + 192), 1);
              sub_1B21F7930(v112, v87, 1);
              sub_1B21F61B8(a1, (int8x16_t *)v87, v7, v9, v22, v35, v121, v120, v104, 0.0, 0.0);
            }
            sub_1B21F7930(v113, v74, 1);
            sub_1B21F7930(v112, v74, 1);
            sub_1B21F61B8(a1, (int8x16_t *)v74, v7, v9, v22, v35, v121, v120, v104, 0.0, 0.0);
            if ((~*(_DWORD *)(v115 + 64) & 0x50) == 0)
              *v67 = 1;
          }
          else
          {
            v78 = vmulq_n_f32(v73, 1.0 / sqrtf(v77));
            *(float32x4_t *)v74->f32 = v78;
            v79 = *((float *)&v119 + 1);
            if ((*(_BYTE *)(v37 + 64) & 0x10) != 0)
            {
              v80.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL).u64[0];
              v80.i64[1] = v78.i64[0];
              v81.i64[0] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
              v81.i64[1] = v72.i64[0];
              v82 = (int8x16_t)vsubq_f32(vmulq_f32(v81, v78), vmulq_f32(v72, v80));
              v83.i64[0] = vextq_s8(v82, v82, 4uLL).u64[0];
              v83.i64[1] = v82.u32[0];
              v84 = a2 + 192 * v18;
              v85 = (int8x16_t)vmulq_f32(v83, v83);
              *(float32x4_t *)(v84 + 192) = vmulq_n_f32(v83, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8)).f32[0]));
              v84 += 192;
              sub_1B21F7930(v113, (float32x2_t *)v84, 1);
              sub_1B21F7930(v112, (float32x2_t *)v84, 1);
              sub_1B21F61B8(a1, (int8x16_t *)v84, v7, v9, v22, v35, v121, v120, v79, 0.0, 0.0);
            }
            sub_1B21F7930(v113, v74, 1);
            sub_1B21F7930(v112, v74, 1);
            sub_1B21F61B8(a1, (int8x16_t *)v74, v7, v9, v22, v35, v121, v120, v79, 0.0, 0.0);
          }
        }
        v17 = *(_DWORD *)(a2 + 800);
        goto LABEL_68;
      }
      v41 = (__n128)vsubq_f32(v38, v39);
      v41.n128_u32[3] = 0;
      v42 = (int8x16_t)vmulq_f32((float32x4_t)v41, (float32x4_t)v41);
      v43 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8)).f32[0]);
      if (v43 <= *(float *)(v115 + 80))
      {
        v48 = (float *)(a2 + 192 * v18);
        v49 = v48 + 20;
        sub_1B21F65DC(a1, (int8x16_t *)v48 + 5, v7, v9, v22, v35, v41, 0.0, 0.0);
        v50 = v48[22];
        if (fabsf(v50) <= 0.70711)
        {
          v56 = v48[21];
          v57 = (float)(v56 * v56) + (float)(*v49 * *v49);
          v58 = 1.0 / sqrtf(v57);
          *(float *)&v59 = *v49 * v58;
          v117.f32[0] = -(float)(v56 * v58);
          *(uint64_t *)((char *)v117.i64 + 4) = v59;
          v116.f32[0] = -(float)(v50 * *(float *)&v59);
          v116.f32[1] = v50 * v117.f32[0];
          v55 = v57 * v58;
        }
        else
        {
          v52 = *v49;
          v51 = v48[21];
          v53 = (float)(v50 * v50) + (float)(v51 * v51);
          v54 = 1.0 / sqrtf(v53);
          v117.i32[0] = 0;
          v117.f32[1] = -(float)(v50 * v54);
          v117.f32[2] = v51 * v54;
          v116.f32[0] = v53 * v54;
          v116.f32[1] = -(float)(v52 * (float)(v51 * v54));
          v55 = v117.f32[1] * v52;
        }
        v37 = v115;
        v116.f32[2] = v55;
        sub_1B21F7930(v113, (float32x2_t *)&v117, 2);
        sub_1B21F7930(v112, (float32x2_t *)&v117, 2);
        sub_1B21F7930(v113, (float32x2_t *)&v116, 2);
        sub_1B21F7930(v112, (float32x2_t *)&v116, 2);
        v60 = (int8x16_t)vmulq_f32(v117, v117);
        v61 = vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8);
        v62 = (__n128)vextq_s8(v60, v60, 8uLL);
        v62.n128_f64[0] = sqrtf(vadd_f32(v61, (float32x2_t)v62.n128_u64[0]).f32[0]);
        v9 = v105;
        if (v62.n128_f64[0] > 0.001)
          sub_1B21F65DC(a1, (int8x16_t *)&v117, v7, v105, v22, v35, v62, 0.0, 0.0);
        v63 = (int8x16_t)vmulq_f32(v116, v116);
        v64 = vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8);
        v46 = (__n128)vextq_s8(v63, v63, 8uLL);
        v46.n128_f64[0] = sqrtf(vadd_f32(v64, (float32x2_t)v46.n128_u64[0]).f32[0]);
        if (v46.n128_f64[0] <= 0.001)
          goto LABEL_44;
        v47 = &v116;
      }
      else
      {
        v117 = vmulq_n_f32((float32x4_t)v41, 1.0 / v43);
        sub_1B21F7930(v113, (float32x2_t *)&v117, 2);
        sub_1B21F7930(v112, (float32x2_t *)&v117, 2);
        v44 = (int8x16_t)vmulq_f32(v117, v117);
        v45 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
        v46 = (__n128)vextq_s8(v44, v44, 8uLL);
        v46.n128_f64[0] = sqrtf(vadd_f32(v45, (float32x2_t)v46.n128_u64[0]).f32[0]);
        if (v46.n128_f64[0] <= 0.001)
        {
LABEL_44:
          v114 = 0;
          goto LABEL_45;
        }
        v47 = &v117;
      }
      sub_1B21F65DC(a1, (int8x16_t *)v47, v7, v9, v22, v35, v46, 0.0, 0.0);
      goto LABEL_44;
    }
  }
}

float32x2_t sub_1B21F7930(float32x4_t *a1, float32x2_t *a2, int a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float32x2_t result;

  if (a1)
  {
    if ((a1[12].i32[0] & a3) != 0)
    {
      v3 = a1[1];
      v3.i32[3] = 0;
      v4 = a1[2];
      v4.i32[3] = 0;
      v5 = a1[3];
      v5.i32[3] = 0;
      v6 = vmulq_f32(a1[11], vaddq_f32(vaddq_f32(vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)a2->f32)), vmulq_lane_f32(v4, *a2, 1)), vmulq_laneq_f32(v5, *(float32x4_t *)a2->f32, 2)));
      v7 = (int8x16_t)vmulq_f32(v6, a1[1]);
      v8 = (int8x16_t)vmulq_f32(v6, a1[2]);
      v9 = (int8x16_t)vmulq_f32(v6, a1[3]);
      v9.i32[3] = 0;
      *(float32x2_t *)v7.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      result = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
      v7.u64[1] = (unint64_t)result;
      *(int8x16_t *)a2->f32 = v7;
    }
  }
  return result;
}

float sub_1B21F79C0(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5, _DWORD **a6, int a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  float32x4_t v42;
  uint64_t v43;
  float v45;
  int v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  _DWORD **v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _OWORD *v69;
  int *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int *v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  _OWORD *v97;
  _OWORD *v98;
  __int32 v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float v103;
  float v104;
  float32x4_t *v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float v129;
  int8x16_t v130;
  int8x16_t v133;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  int *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  int *v157;
  int v158;
  uint64_t v159;
  _DWORD *v160;
  int *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  int *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v178;
  uint64_t v179;
  float32x4_t v180;
  float32x4_t *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  __int32 v190;

  v12 = a2;
  *(_DWORD *)(a1 + 296) = 0;
  v14 = a3;
  if (a3 >= 1)
  {
    v15 = a3;
    v16 = a2;
    do
    {
      v17 = *v16++;
      *(_DWORD *)(v17 + 240) = -1;
      --v15;
    }
    while (v15);
  }
  v18 = *(_DWORD *)(a1 + 16);
  if (v18 <= a3)
  {
    v18 = a3 + 1;
    if (a3 == -1)
      v19 = 0;
    else
      v19 = sub_1B21FF5F0(224 * v18, 16);
    v20 = *(unsigned int *)(a1 + 12);
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = 224 * v20;
      do
      {
        v23 = *(_QWORD *)(a1 + 24) + v21;
        v24 = v19 + v21;
        *(_OWORD *)v24 = *(_OWORD *)v23;
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v23 + 16);
        *(_OWORD *)(v24 + 32) = *(_OWORD *)(v23 + 32);
        *(_OWORD *)(v24 + 48) = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v24 + 64) = *(_OWORD *)(v23 + 64);
        *(_OWORD *)(v24 + 80) = *(_OWORD *)(v23 + 80);
        *(_OWORD *)(v24 + 96) = *(_OWORD *)(v23 + 96);
        *(_OWORD *)(v24 + 112) = *(_OWORD *)(v23 + 112);
        *(_OWORD *)(v24 + 128) = *(_OWORD *)(v23 + 128);
        *(_OWORD *)(v24 + 144) = *(_OWORD *)(v23 + 144);
        *(_OWORD *)(v24 + 160) = *(_OWORD *)(v23 + 160);
        *(_OWORD *)(v24 + 176) = *(_OWORD *)(v23 + 176);
        *(_OWORD *)(v24 + 192) = *(_OWORD *)(v23 + 192);
        *(_QWORD *)(v24 + 208) = *(_QWORD *)(v23 + 208);
        v21 += 224;
      }
      while (v22 != v21);
    }
    v25 = *(_QWORD *)(a1 + 24);
    if (v25 && *(_BYTE *)(a1 + 32))
      sub_1B21FF5FC(v25);
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 24) = v19;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v26 = *(int *)(a1 + 12);
  if ((v26 & 0x80000000) != 0)
  {
    if (v18 < 0)
    {
      v27 = *(_QWORD *)(a1 + 24);
      if (v27 && *(_BYTE *)(a1 + 32))
        sub_1B21FF5FC(v27);
      *(_BYTE *)(a1 + 32) = 1;
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
    v28 = 224 * v26;
    v29 = v26 + 1;
    do
    {
      v30 = *(_QWORD *)(a1 + 24) + v28;
      *(_QWORD *)(v30 + 208) = 0;
      *(_OWORD *)(v30 + 176) = 0uLL;
      *(_OWORD *)(v30 + 192) = 0uLL;
      *(_OWORD *)(v30 + 144) = 0uLL;
      *(_OWORD *)(v30 + 160) = 0uLL;
      *(_OWORD *)(v30 + 112) = 0uLL;
      *(_OWORD *)(v30 + 128) = 0uLL;
      *(_OWORD *)(v30 + 80) = 0uLL;
      *(_OWORD *)(v30 + 96) = 0uLL;
      *(_OWORD *)(v30 + 48) = 0uLL;
      *(_OWORD *)(v30 + 64) = 0uLL;
      *(_OWORD *)(v30 + 16) = 0uLL;
      *(_OWORD *)(v30 + 32) = 0uLL;
      v28 += 224;
      *(_OWORD *)v30 = 0uLL;
      LODWORD(v30) = v29++;
    }
    while ((_DWORD)v30);
    v18 = *(_DWORD *)(a1 + 16);
  }
  *(_DWORD *)(a1 + 12) = 0;
  if (v18)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v33 = sub_1B21FF5F0(224, 16);
    v32 = v33;
    v34 = *(unsigned int *)(a1 + 12);
    if ((int)v34 >= 1)
    {
      v35 = 0;
      v36 = 224 * v34;
      do
      {
        v37 = *(_QWORD *)(a1 + 24) + v35;
        v38 = v33 + v35;
        *(_OWORD *)v38 = *(_OWORD *)v37;
        *(_OWORD *)(v38 + 16) = *(_OWORD *)(v37 + 16);
        *(_OWORD *)(v38 + 32) = *(_OWORD *)(v37 + 32);
        *(_OWORD *)(v38 + 48) = *(_OWORD *)(v37 + 48);
        *(_OWORD *)(v38 + 64) = *(_OWORD *)(v37 + 64);
        *(_OWORD *)(v38 + 80) = *(_OWORD *)(v37 + 80);
        *(_OWORD *)(v38 + 96) = *(_OWORD *)(v37 + 96);
        *(_OWORD *)(v38 + 112) = *(_OWORD *)(v37 + 112);
        *(_OWORD *)(v38 + 128) = *(_OWORD *)(v37 + 128);
        *(_OWORD *)(v38 + 144) = *(_OWORD *)(v37 + 144);
        *(_OWORD *)(v38 + 160) = *(_OWORD *)(v37 + 160);
        *(_OWORD *)(v38 + 176) = *(_OWORD *)(v37 + 176);
        *(_OWORD *)(v38 + 192) = *(_OWORD *)(v37 + 192);
        *(_QWORD *)(v38 + 208) = *(_QWORD *)(v37 + 208);
        v35 += 224;
      }
      while (v36 != v35);
    }
    v39 = *(_QWORD *)(a1 + 24);
    if (v39 && *(_BYTE *)(a1 + 32))
      sub_1B21FF5FC(v39);
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 24) = v32;
    *(_DWORD *)(a1 + 16) = 1;
    v31 = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v31 + 1;
  *(_QWORD *)(v32 + 208) = 0;
  *(_OWORD *)(v32 + 176) = 0u;
  *(_OWORD *)(v32 + 192) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_OWORD *)(v32 + 160) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_OWORD *)(v32 + 128) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)v32 = 0u;
  v40 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_OWORD *)(v40 + 144) = 0u;
  *(_OWORD *)(v40 + 160) = 0u;
  *(_OWORD *)v40 = xmmword_1B2244DB0;
  *(_OWORD *)(v40 + 16) = xmmword_1B2244DD0;
  *(_OWORD *)(v40 + 32) = xmmword_1B2244D90;
  *(_QWORD *)(v40 + 48) = 0;
  *(_QWORD *)(v40 + 56) = 0;
  *(_QWORD *)(v40 + 128) = 0;
  *(_QWORD *)(v40 + 136) = 0;
  *(_QWORD *)(v40 + 208) = 0;
  *(_OWORD *)(v40 + 96) = xmmword_1B2244F70;
  *(_OWORD *)(v40 + 112) = xmmword_1B2244F70;
  *(_OWORD *)(v40 + 176) = 0u;
  *(_OWORD *)(v40 + 192) = 0u;
  if (a3 >= 1)
  {
    do
    {
      v41 = sub_1B21F6760(a1, *v12);
      v43 = *v12;
      if (*v12)
        _ZF = (*(_DWORD *)(*v12 + 264) & 2) == 0;
      else
        _ZF = 1;
      if (!_ZF)
      {
        v45 = *(float *)(v43 + 384);
        if (v45 != 0.0)
        {
          v46 = v41;
          v47 = *(_QWORD *)(a1 + 24);
          v48 = 0uLL;
          if ((*(_BYTE *)(v43 + 576) & 2) != 0)
          {
            sub_1B21FEEB0(*v12, &v180, *(float *)(a8 + 76), v42);
            v48 = v180;
            v45 = *(float *)(v43 + 384);
          }
          v49 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(v43 + 464), v45), COERCE_FLOAT(*(_OWORD *)(a8 + 12)));
          v49.i32[3] = 0;
          v50 = (float32x4_t *)(v47 + 224 * v46);
          v51 = v50[12];
          v50[11] = vaddq_f32(v50[11], v49);
          v52 = vsubq_f32(*(float32x4_t *)(v43 + 480), v48);
          v52.i32[3] = 0;
          v53 = *(float32x4_t *)(v43 + 304);
          v54 = *(float32x4_t *)(v43 + 320);
          v53.i32[3] = 0;
          v54.i32[3] = 0;
          v55 = *(float32x4_t *)(v43 + 336);
          v55.i32[3] = 0;
          v56 = vmulq_n_f32(vaddq_f32(vmulq_laneq_f32(v55, v52, 2), vaddq_f32(vmulq_n_f32(v53, v52.f32[0]), vmulq_lane_f32(v54, *(float32x2_t *)v52.f32, 1))), COERCE_FLOAT(*(_OWORD *)(a8 + 12)));
          v56.i32[3] = 0;
          v50[12] = vaddq_f32(v51, v56);
        }
      }
      ++v12;
      --v14;
    }
    while (v14);
  }
  v178 = a7;
  if (a7 >= 1)
  {
    v57 = a7;
    v58 = a6;
    do
    {
      v59 = *v58++;
      (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 16))(v59);
      v59[14] = 0;
      --v57;
    }
    while (v57);
  }
  v60 = *(_DWORD *)(a1 + 268);
  if (v60 < a7 && *(_DWORD *)(a1 + 272) < a7)
  {
    if (a7)
    {
      v61 = sub_1B21FF5F0(8 * a7, 16);
      v60 = *(_DWORD *)(a1 + 268);
    }
    else
    {
      v61 = 0;
    }
    if (v60 >= 1)
    {
      v62 = 0;
      v63 = 8 * v60;
      do
      {
        *(_QWORD *)(v61 + v62) = *(_QWORD *)(*(_QWORD *)(a1 + 280) + v62);
        v62 += 8;
      }
      while (v63 != v62);
    }
    v64 = *(_QWORD *)(a1 + 280);
    if (v64 && *(_BYTE *)(a1 + 288))
      sub_1B21FF5FC(v64);
    *(_BYTE *)(a1 + 288) = 1;
    *(_QWORD *)(a1 + 280) = v61;
    *(_DWORD *)(a1 + 272) = a7;
  }
  v179 = a8;
  *(_DWORD *)(a1 + 268) = a7;
  if (a7 < 1)
  {
    v66 = 0;
  }
  else
  {
    v65 = 0;
    v66 = 0;
    do
    {
      v67 = *(_QWORD *)(a1 + 280);
      v68 = a6[v65];
      v69 = (_OWORD *)*((_QWORD *)v68 + 8);
      if (v69)
      {
        v69[2] = 0u;
        v69[3] = 0u;
        *v69 = 0u;
        v69[1] = 0u;
        v68 = a6[v65];
      }
      v70 = (int *)(v67 + v65 * 8);
      v71 = *((unsigned __int8 *)v68 + 28);
      if (*((_BYTE *)v68 + 28))
      {
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)v68 + 32))(v68, v70);
        v71 = *v70;
      }
      else
      {
        *(_QWORD *)v70 = 0;
      }
      v66 += v71;
      ++v65;
    }
    while (a7 != v65);
  }
  v72 = *(_DWORD *)(a1 + 76);
  if (v72 < v66 && *(_DWORD *)(a1 + 80) < v66)
  {
    if (v66)
    {
      v73 = sub_1B21FF5F0(160 * v66, 16);
      v72 = *(_DWORD *)(a1 + 76);
    }
    else
    {
      v73 = 0;
    }
    if (v72 >= 1)
    {
      v74 = 0;
      v75 = 160 * v72;
      do
      {
        v76 = (_OWORD *)(v73 + v74);
        v77 = (_OWORD *)(*(_QWORD *)(a1 + 88) + v74);
        *v76 = *v77;
        v76[1] = v77[1];
        v76[2] = v77[2];
        v76[3] = v77[3];
        v76[4] = v77[4];
        v76[5] = v77[5];
        v78 = v77[6];
        v79 = v77[7];
        v80 = v77[9];
        v76[8] = v77[8];
        v76[9] = v80;
        v76[6] = v78;
        v76[7] = v79;
        v74 += 160;
      }
      while (v75 != v74);
    }
    v81 = *(_QWORD *)(a1 + 88);
    if (v81 && *(_BYTE *)(a1 + 96))
      sub_1B21FF5FC(v81);
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 88) = v73;
    *(_DWORD *)(a1 + 80) = v66;
  }
  *(_DWORD *)(a1 + 76) = v66;
  if (a7 >= 1)
  {
    v82 = 0;
    v83 = 0;
    v84 = *(_QWORD *)(a1 + 280);
    do
    {
      v85 = (int *)(v84 + 8 * v82);
      v86 = *v85;
      if (*v85)
      {
        v87 = *(_QWORD *)(a1 + 88);
        v88 = a6[v82];
        v89 = (float32x4_t *)*((_QWORD *)v88 + 5);
        v90 = (float32x4_t *)*((_QWORD *)v88 + 6);
        v91 = sub_1B21F6760(a1, (uint64_t)v89);
        v92 = sub_1B21F6760(a1, (uint64_t)v90);
        v93 = *(_DWORD *)(v179 + 20);
        if ((int)v88[8] > 0)
          v93 = v88[8];
        if (v93 > *(_DWORD *)(a1 + 296))
          *(_DWORD *)(a1 + 296) = v93;
        v94 = *(_QWORD *)(a1 + 24);
        if (*v85 >= 1)
        {
          v95 = 0;
          v96 = (_DWORD *)(v87 + 160 * v83 + 156);
          do
          {
            *(_OWORD *)(v96 - 11) = 0uLL;
            *(_OWORD *)(v96 - 15) = 0uLL;
            *(_OWORD *)(v96 - 3) = 0uLL;
            *(_OWORD *)(v96 - 7) = 0uLL;
            *(_OWORD *)(v96 - 19) = 0uLL;
            *(_OWORD *)(v96 - 23) = 0uLL;
            *(_OWORD *)(v96 - 27) = 0uLL;
            *(_OWORD *)(v96 - 31) = 0uLL;
            *(_OWORD *)(v96 - 35) = 0uLL;
            *(_OWORD *)(v96 - 39) = 0uLL;
            *(_QWORD *)(v96 - 9) = 0x7F7FFFFFFF7FFFFFLL;
            *(_QWORD *)(v96 - 15) = 0;
            *(v96 - 1) = v91;
            *v96 = v92;
            *(v96 - 3) = v93;
            ++v95;
            v96 += 40;
          }
          while (v95 < *v85);
        }
        v97 = (_OWORD *)(v94 + 224 * v91);
        v98 = (_OWORD *)(v94 + 224 * v92);
        v97[4] = 0uLL;
        v97[5] = 0uLL;
        v97[9] = 0uLL;
        v97[10] = 0uLL;
        v98[4] = 0uLL;
        v98[5] = 0uLL;
        v98[9] = 0uLL;
        v98[10] = 0uLL;
        v99 = *(_DWORD *)(v179 + 32);
        v180.f32[0] = 1.0 / *(float *)(v179 + 12);
        v180.i32[1] = v99;
        v100 = v87 + 160 * v83;
        *(_DWORD *)(v100 + 116) = *(_DWORD *)(v179 + 40);
        v100 += 116;
        v101 = (float32x4_t *)(v87 + 160 * v83);
        v180.i64[1] = v100 - 100;
        v181 = v101;
        v182 = v100 - 68;
        v183 = v100 - 84;
        v184 = 40;
        v190 = *(_DWORD *)(v179 + 4);
        v185 = v100 - 4;
        v186 = v100;
        v187 = v100 + 4;
        v188 = v100 + 8;
        v189 = *(_DWORD *)(v179 + 20);
        (*(void (**)(_DWORD *, float32x4_t *))(*(_QWORD *)a6[v82] + 40))(a6[v82], &v180);
        if (*v85 >= 1)
        {
          v102 = 0;
          do
          {
            v103 = *((float *)a6[v82] + 6);
            if (v101[7].f32[3] >= v103)
              v101[7].f32[3] = v103;
            v104 = -v103;
            if (v101[7].f32[2] <= v104)
              v101[7].f32[2] = v104;
            v101[8].i64[1] = (uint64_t)v88;
            v105 = (float32x4_t *)*((_QWORD *)v88 + 5);
            v106 = *v101;
            v107 = v101[1];
            v108 = vmulq_f32(v105[19], *v101);
            v109 = (int8x16_t)vmulq_f32(*v101, v105[20]);
            v110 = (int8x16_t)vmulq_f32(*v101, v105[21]);
            v110.i32[3] = 0;
            *(float32x2_t *)v108.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v109.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)));
            *(float32x2_t *)&v108.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v110.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL)), 0);
            v101[4] = vmulq_f32(v108, v105[39]);
            v111 = (float32x4_t *)*((_QWORD *)v88 + 6);
            v112 = v101[2];
            v113 = v101[3];
            v114 = vmulq_f32(v111[19], v112);
            v115 = (int8x16_t)vmulq_f32(v112, v111[20]);
            v116 = (int8x16_t)vmulq_f32(v112, v111[21]);
            v116.i32[3] = 0;
            *(float32x2_t *)v114.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v115.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL)));
            *(float32x2_t *)&v114.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)), 0);
            v101[5] = vmulq_f32(v114, v111[39]);
            v117 = vmulq_n_f32(v107, v89[24].f32[0]);
            v117.i32[3] = 0;
            v118 = vmulq_f32(v106, v89[19]);
            v119 = (int8x16_t)vmulq_f32(v106, v89[20]);
            v120 = (int8x16_t)vmulq_f32(v106, v89[21]);
            v120.i32[3] = 0;
            *(float32x2_t *)v118.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v119.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)));
            *(float32x2_t *)&v118.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)), 0);
            v121 = vmulq_n_f32(v113, v90[24].f32[0]);
            v121.i32[3] = 0;
            v122 = vmulq_f32(v112, v90[19]);
            v123 = (int8x16_t)vmulq_f32(v112, v90[20]);
            v124 = (int8x16_t)vmulq_f32(v112, v90[21]);
            v124.i32[3] = 0;
            *(float32x2_t *)v122.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v123.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)));
            *(float32x2_t *)&v122.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL)), 0);
            v125 = (int8x16_t)vmulq_f32(v107, v117);
            v126 = (int8x16_t)vmulq_f32(v106, v118);
            *(float32x2_t *)v125.i8 = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL), vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL), vpadd_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8)));
            v127 = (int8x16_t)vmulq_f32(v113, v121);
            *(float32x2_t *)v125.i8 = vadd_f32(*(float32x2_t *)v125.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL), vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8)));
            v128 = (int8x16_t)vmulq_f32(v112, v122);
            *(float *)v125.i32 = vadd_f32(*(float32x2_t *)v125.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), vpadd_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8))).f32[0];
            *(float *)v128.i32 = fabsf(*(float *)v125.i32);
            v129 = 1.0 / *(float *)v125.i32;
            if (*(float *)v128.i32 <= 0.00000011921)
              v129 = 0.0;
            v101[6].f32[3] = v129;
            v130 = (int8x16_t)vmulq_f32(v107, v89[22]);
            _Q0 = (int8x16_t)vmulq_f32(v106, v89[23]);
            *(float32x2_t *)_Q0.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL)));
            _Q2 = (int8x16_t)vmulq_f32(v113, v90[22]);
            v133 = (int8x16_t)vmulq_f32(v112, v90[23]);
            _Q0.i32[0] = vadd_f32(*(float32x2_t *)_Q0.i8, vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)_Q2.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v133.i8, *(float32x2_t *)v133.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL)))).u32[0];
            _Q2.i32[0] = v190;
            __asm { FMLS            S3, S2, V0.S[0] }
            v101[7].f32[0] = (float)(v129 * v101[7].f32[0]) + (float)(v129 * _S3);
            v101[6].i32[1] = 0;
            ++v102;
            v101 += 10;
          }
          while (v102 < *v85);
        }
        v84 = *(_QWORD *)(a1 + 280);
        v86 = *(_DWORD *)(v84 + 8 * v82);
      }
      v83 += v86;
      ++v82;
    }
    while (v82 != v178);
  }
  v138 = a4;
  if (a5 >= 1)
  {
    v139 = a5;
    do
    {
      v140 = *v138++;
      sub_1B21F7094(a1, v140, v179);
      --v139;
    }
    while (v139);
  }
  v141 = *(unsigned int *)(a1 + 76);
  v142 = *(unsigned int *)(a1 + 44);
  v143 = *(unsigned int *)(a1 + 108);
  LODWORD(v144) = *(_DWORD *)(a1 + 204);
  if ((int)v144 < (int)v141 && *(_DWORD *)(a1 + 208) < (int)v141)
  {
    if ((_DWORD)v141)
    {
      v145 = sub_1B21FF5F0(4 * (int)v141, 16);
      LODWORD(v144) = *(_DWORD *)(a1 + 204);
    }
    else
    {
      v145 = 0;
    }
    v146 = *(_QWORD *)(a1 + 216);
    if ((int)v144 < 1)
    {
      if (!v146)
      {
LABEL_117:
        *(_BYTE *)(a1 + 224) = 1;
        *(_QWORD *)(a1 + 216) = v145;
        *(_DWORD *)(a1 + 208) = v141;
        goto LABEL_118;
      }
    }
    else
    {
      v144 = v144;
      v147 = (_DWORD *)v145;
      v148 = *(int **)(a1 + 216);
      do
      {
        v149 = *v148++;
        *v147++ = v149;
        --v144;
      }
      while (v144);
    }
    if (*(_BYTE *)(a1 + 224))
      sub_1B21FF5FC(v146);
    *(_QWORD *)(a1 + 216) = 0;
    goto LABEL_117;
  }
LABEL_118:
  *(_DWORD *)(a1 + 204) = v141;
  if ((*(_BYTE *)(v179 + 64) & 0x10) != 0)
  {
    v152 = 2 * v142;
    LODWORD(v153) = *(_DWORD *)(a1 + 172);
    if ((int)v153 >= 2 * (int)v142 || *(_DWORD *)(a1 + 176) >= v152)
      goto LABEL_148;
    if ((_DWORD)v142)
    {
      v154 = sub_1B21FF5F0(8 * (int)v142, 16);
      LODWORD(v153) = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v154 = 0;
    }
    v159 = *(_QWORD *)(a1 + 184);
    if ((int)v153 < 1)
    {
      if (!v159)
      {
LABEL_147:
        *(_BYTE *)(a1 + 192) = 1;
        *(_QWORD *)(a1 + 184) = v154;
        *(_DWORD *)(a1 + 176) = v152;
LABEL_148:
        *(_DWORD *)(a1 + 172) = v152;
        goto LABEL_149;
      }
    }
    else
    {
      v153 = v153;
      v160 = (_DWORD *)v154;
      v161 = *(int **)(a1 + 184);
      do
      {
        v162 = *v161++;
        *v160++ = v162;
        --v153;
      }
      while (v153);
    }
    if (*(_BYTE *)(a1 + 192))
      sub_1B21FF5FC(v159);
    *(_QWORD *)(a1 + 184) = 0;
    goto LABEL_147;
  }
  LODWORD(v150) = *(_DWORD *)(a1 + 172);
  if ((int)v150 >= (int)v142 || *(_DWORD *)(a1 + 176) >= (int)v142)
    goto LABEL_142;
  if ((_DWORD)v142)
  {
    v151 = sub_1B21FF5F0(4 * (int)v142, 16);
    LODWORD(v150) = *(_DWORD *)(a1 + 172);
  }
  else
  {
    v151 = 0;
  }
  v155 = *(_QWORD *)(a1 + 184);
  if ((int)v150 >= 1)
  {
    v150 = v150;
    v156 = (_DWORD *)v151;
    v157 = *(int **)(a1 + 184);
    do
    {
      v158 = *v157++;
      *v156++ = v158;
      --v150;
    }
    while (v150);
    goto LABEL_138;
  }
  if (v155)
  {
LABEL_138:
    if (*(_BYTE *)(a1 + 192))
      sub_1B21FF5FC(v155);
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 184) = v151;
  *(_DWORD *)(a1 + 176) = v142;
LABEL_142:
  *(_DWORD *)(a1 + 172) = v142;
LABEL_149:
  LODWORD(v163) = *(_DWORD *)(a1 + 236);
  if ((int)v163 < (int)v143 && *(_DWORD *)(a1 + 240) < (int)v143)
  {
    if ((_DWORD)v143)
    {
      v164 = sub_1B21FF5F0(4 * (int)v143, 16);
      LODWORD(v163) = *(_DWORD *)(a1 + 236);
    }
    else
    {
      v164 = 0;
    }
    v165 = *(_QWORD *)(a1 + 248);
    if ((int)v163 < 1)
    {
      if (!v165)
      {
LABEL_162:
        *(_BYTE *)(a1 + 256) = 1;
        *(_QWORD *)(a1 + 248) = v164;
        *(_DWORD *)(a1 + 240) = v143;
        goto LABEL_163;
      }
    }
    else
    {
      v163 = v163;
      v166 = (_DWORD *)v164;
      v167 = *(int **)(a1 + 248);
      do
      {
        v168 = *v167++;
        *v166++ = v168;
        --v163;
      }
      while (v163);
    }
    if (*(_BYTE *)(a1 + 256))
      sub_1B21FF5FC(v165);
    *(_QWORD *)(a1 + 248) = 0;
    goto LABEL_162;
  }
LABEL_163:
  *(_DWORD *)(a1 + 236) = v143;
  if ((int)v141 >= 1)
  {
    v169 = 0;
    v170 = *(_QWORD *)(a1 + 216);
    do
    {
      *(_DWORD *)(v170 + 4 * v169) = v169;
      ++v169;
    }
    while (v141 != v169);
  }
  if ((int)v142 >= 1)
  {
    v171 = 0;
    v172 = *(_QWORD *)(a1 + 184);
    do
    {
      *(_DWORD *)(v172 + 4 * v171) = v171;
      ++v171;
    }
    while (v142 != v171);
  }
  if ((int)v143 >= 1)
  {
    v173 = 0;
    v174 = *(_QWORD *)(a1 + 248);
    do
    {
      *(_DWORD *)(v174 + 4 * v173) = v173;
      ++v173;
    }
    while (v143 != v173);
  }
  return 0.0;
}

float sub_1B21F8730(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, uint64_t a9)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t j;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  float v41;
  float32x4_t *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float v48;
  float v49;
  float v50;
  uint64_t i;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  float v67;
  float32x4_t *v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  int v78;
  float32x4_t *v79;
  float v80;
  float32x4_t *v81;
  float v82;
  float32x4_t *v83;
  float v84;

  v9 = a8;
  v12 = a1;
  if ((*(_BYTE *)(a9 + 64) & 1) != 0)
  {
    v13 = *(unsigned int *)(a1 + 76);
    v14 = *(unsigned int *)(a1 + 44);
    v15 = *(unsigned int *)(a1 + 108);
    if ((int)v13 >= 1)
    {
      v16 = 0;
      v17 = *(_QWORD *)(a1 + 216);
      do
      {
        v18 = *(_DWORD *)(v17 + 4 * v16);
        a1 = sub_1B21F5DB0(v12, (int)v16 + 1);
        v17 = *(_QWORD *)(v12 + 216);
        *(_DWORD *)(v17 + 4 * v16) = *(_DWORD *)(v17 + 4 * (int)a1);
        *(_DWORD *)(v17 + 4 * (int)a1) = v18;
        ++v16;
      }
      while (v13 != v16);
    }
    v9 = a8;
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if ((int)v14 >= 1)
      {
        v19 = 0;
        v20 = *(_QWORD *)(v12 + 184);
        do
        {
          v21 = *(_DWORD *)(v20 + 4 * v19);
          a1 = sub_1B21F5DB0(v12, (int)v19 + 1);
          v20 = *(_QWORD *)(v12 + 184);
          *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v20 + 4 * (int)a1);
          *(_DWORD *)(v20 + 4 * (int)a1) = v21;
          ++v19;
        }
        while (v14 != v19);
      }
      if ((int)v15 >= 1)
      {
        v22 = 0;
        v23 = *(_QWORD *)(v12 + 248);
        do
        {
          v24 = *(_DWORD *)(v23 + 4 * v22);
          a1 = sub_1B21F5DB0(v12, (int)v22 + 1);
          v23 = *(_QWORD *)(v12 + 248);
          *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v23 + 4 * (int)a1);
          *(_DWORD *)(v23 + 4 * (int)a1) = v24;
          ++v22;
        }
        while (v15 != v22);
      }
    }
  }
  v25 = *(_DWORD *)(v12 + 76);
  if ((*(_BYTE *)(a9 + 65) & 1) != 0)
  {
    if (v25 >= 1)
    {
      for (i = 0; i < v25; ++i)
      {
        v52 = *(_DWORD *)(*(_QWORD *)(v12 + 216) + 4 * i);
        v53 = *(_QWORD *)(v12 + 88);
        if (*(_DWORD *)(v53 + 160 * v52 + 144) > a2)
        {
          sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * *(int *)(v53 + 160 * v52 + 152)), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * *(int *)(v53 + 160 * v52 + 156)), (float32x4_t *)(v53 + 160 * v52));
          v25 = *(_DWORD *)(v12 + 76);
        }
      }
    }
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if (v9 >= 1)
      {
        v54 = v9;
        do
        {
          if (*(_BYTE *)(*a7 + 28))
          {
            v55 = sub_1B21F6760(v12, *(_QWORD *)(*a7 + 40));
            v56 = sub_1B21F6760(v12, *(_QWORD *)(*a7 + 48));
            a1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float))(*(_QWORD *)*a7 + 48))(*a7, *(_QWORD *)(v12 + 24) + 224 * v55, *(_QWORD *)(v12 + 24) + 224 * v56, *(float *)(a9 + 12));
          }
          ++a7;
          --v54;
        }
        while (v54);
      }
      v57 = *(_DWORD *)(a9 + 64);
      v58 = *(unsigned int *)(v12 + 44);
      if ((v57 & 0x200) != 0)
      {
        if ((int)v58 >= 1)
        {
          v77 = 0;
          v78 = (v57 >> 4) & 1;
          do
          {
            v79 = (float32x4_t *)(*(_QWORD *)(v12 + 56) + 160 * *(int *)(*(_QWORD *)(v12 + 184) + 4 * v77));
            sub_1B21F5B64(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v79[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v79[9].i32[3]), v79);
            v80 = v79[6].f32[1];
            if (v80 > 0.0)
            {
              v81 = (float32x4_t *)(*(_QWORD *)(v12 + 120)
                                  + 160 * *(int *)(*(_QWORD *)(v12 + 248) + 4 * (int)((_DWORD)v77 << v78)));
              v82 = v81[6].f32[2];
              v81[7].f32[2] = -(float)(v82 * v80);
              v81[7].f32[3] = v80 * v82;
              sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v81[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v81[9].i32[3]), v81);
              if ((*(_BYTE *)(a9 + 64) & 0x10) != 0)
              {
                v83 = (float32x4_t *)(*(_QWORD *)(v12 + 120)
                                    + 160 * *(int *)(*(_QWORD *)(v12 + 248) + 4 * (int)((_DWORD)v77 << v78) + 4));
                v84 = v83[6].f32[2];
                v83[7].f32[2] = -(float)(v84 * v80);
                v83[7].f32[3] = v80 * v84;
                sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v83[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v83[9].i32[3]), v83);
              }
            }
            ++v77;
          }
          while (v58 != v77);
        }
      }
      else
      {
        if ((int)v58 >= 1)
        {
          v59 = 0;
          v60 = 4 * v58;
          do
          {
            v61 = (float32x4_t *)(*(_QWORD *)(v12 + 56) + 160 * *(int *)(*(_QWORD *)(v12 + 184) + v59));
            sub_1B21F5B64(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v61[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v61[9].i32[3]), v61);
            v59 += 4;
          }
          while (v60 != v59);
        }
        v62 = *(unsigned int *)(v12 + 108);
        if ((int)v62 >= 1)
        {
          v63 = 0;
          v64 = 4 * v62;
          do
          {
            v65 = *(_DWORD *)(*(_QWORD *)(v12 + 248) + v63);
            v66 = *(_QWORD *)(v12 + 120);
            v67 = *(float *)(*(_QWORD *)(v12 + 56) + 160 * *(int *)(v66 + 160 * v65 + 148) + 100);
            if (v67 > 0.0)
            {
              v68 = (float32x4_t *)(v66 + 160 * v65);
              v69 = v68[6].f32[2];
              v68[7].f32[2] = -(float)(v69 * v67);
              v68[7].f32[3] = v67 * v69;
              sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v68[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v68[9].i32[3]), v68);
            }
            v63 += 4;
          }
          while (v64 != v63);
        }
        v70 = *(unsigned int *)(v12 + 140);
        if ((int)v70 >= 1)
        {
          v71 = 0;
          v72 = 160 * v70;
          do
          {
            v73 = (float32x4_t *)(*(_QWORD *)(v12 + 152) + v71);
            v74 = *(float *)(*(_QWORD *)(v12 + 56) + 160 * v73[9].i32[1] + 100);
            if (v74 > 0.0)
            {
              v75 = v73[6].f32[2];
              v76 = v74 * v75;
              if (v76 > v75)
                v76 = v73[6].f32[2];
              v73[7].f32[2] = -v76;
              v73[7].f32[3] = v76;
              sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v73[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v73[9].i32[3]), v73);
            }
            v71 += 160;
          }
          while (v72 != v71);
        }
      }
    }
  }
  else
  {
    if (v25 >= 1)
    {
      for (j = 0; j < v25; ++j)
      {
        v27 = *(_DWORD *)(*(_QWORD *)(v12 + 216) + 4 * j);
        v28 = *(_QWORD *)(v12 + 88);
        if (*(_DWORD *)(v28 + 160 * v27 + 144) > a2)
        {
          sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * *(int *)(v28 + 160 * v27 + 152)), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * *(int *)(v28 + 160 * v27 + 156)), (float32x4_t *)(v28 + 160 * v27));
          v25 = *(_DWORD *)(v12 + 76);
        }
      }
    }
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if (v9 >= 1)
      {
        v29 = v9;
        do
        {
          if (*(_BYTE *)(*a7 + 28))
          {
            v30 = sub_1B21F6760(v12, *(_QWORD *)(*a7 + 40));
            v31 = sub_1B21F6760(v12, *(_QWORD *)(*a7 + 48));
            a1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float))(*(_QWORD *)*a7 + 48))(*a7, *(_QWORD *)(v12 + 24) + 224 * v30, *(_QWORD *)(v12 + 24) + 224 * v31, *(float *)(a9 + 12));
          }
          ++a7;
          --v29;
        }
        while (v29);
      }
      v32 = *(unsigned int *)(v12 + 44);
      if ((int)v32 >= 1)
      {
        v33 = 0;
        v34 = 4 * v32;
        do
        {
          v35 = (float32x4_t *)(*(_QWORD *)(v12 + 56) + 160 * *(int *)(*(_QWORD *)(v12 + 184) + v33));
          sub_1B21F5B64(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v35[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v35[9].i32[3]), v35);
          v33 += 4;
        }
        while (v34 != v33);
      }
      v36 = *(unsigned int *)(v12 + 108);
      if ((int)v36 >= 1)
      {
        v37 = 0;
        v38 = 4 * v36;
        do
        {
          v39 = *(_DWORD *)(*(_QWORD *)(v12 + 248) + v37);
          v40 = *(_QWORD *)(v12 + 120);
          v41 = *(float *)(*(_QWORD *)(v12 + 56) + 160 * *(int *)(v40 + 160 * v39 + 148) + 100);
          if (v41 > 0.0)
          {
            v42 = (float32x4_t *)(v40 + 160 * v39);
            v43 = v42[6].f32[2];
            v42[7].f32[2] = -(float)(v43 * v41);
            v42[7].f32[3] = v41 * v43;
            sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v42[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v42[9].i32[3]), v42);
          }
          v37 += 4;
        }
        while (v38 != v37);
      }
      v44 = *(unsigned int *)(v12 + 140);
      if ((int)v44 >= 1)
      {
        v45 = 0;
        v46 = 160 * v44;
        do
        {
          v47 = (float32x4_t *)(*(_QWORD *)(v12 + 152) + v45);
          v48 = *(float *)(*(_QWORD *)(v12 + 56) + 160 * v47[9].i32[1] + 100);
          if (v48 > 0.0)
          {
            v49 = v47[6].f32[2];
            v50 = v48 * v49;
            if (v50 > v49)
              v50 = v47[6].f32[2];
            v47[7].f32[2] = -v50;
            v47[7].f32[3] = v50;
            sub_1B21F5A40(a1, (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v47[9].i32[2]), (float32x4_t *)(*(_QWORD *)(v12 + 24) + 224 * v47[9].i32[3]), v47);
          }
          v45 += 160;
        }
        while (v46 != v45);
      }
    }
  }
  return 0.0;
}

void sub_1B21F8D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;

  if (*(_DWORD *)(a8 + 44))
  {
    v10 = *(_DWORD *)(a8 + 20);
    if ((*(_BYTE *)(a8 + 65) & 1) != 0)
    {
      if (v10 >= 1)
      {
        for (i = 0; i < v10; ++i)
        {
          v17 = *(unsigned int *)(a1 + 44);
          if ((int)v17 >= 1)
          {
            v18 = 0;
            v19 = 4 * v17;
            do
            {
              v20 = (float32x4_t *)(*(_QWORD *)(a1 + 56) + 160 * *(int *)(*(_QWORD *)(a1 + 184) + v18));
              sub_1B21F5C7C(a1, (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v20[9].i32[2]), (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v20[9].i32[3]), v20);
              v18 += 4;
            }
            while (v19 != v18);
            v10 = *(_DWORD *)(a8 + 20);
          }
        }
      }
    }
    else if (v10 >= 1)
    {
      for (j = 0; j < v10; ++j)
      {
        v12 = *(unsigned int *)(a1 + 44);
        if ((int)v12 >= 1)
        {
          v13 = 0;
          v14 = 4 * v12;
          do
          {
            v15 = (float32x4_t *)(*(_QWORD *)(a1 + 56) + 160 * *(int *)(*(_QWORD *)(a1 + 184) + v13));
            sub_1B21F5C7C(a1, (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v15[9].i32[2]), (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v15[9].i32[3]), v15);
            v13 += 4;
          }
          while (v14 != v13);
          v10 = *(_DWORD *)(a8 + 20);
        }
      }
    }
  }
}

float sub_1B21F8E94(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int i;

  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
  if (a1[74] <= *(_DWORD *)(a8 + 20))
    v16 = *(_DWORD *)(a8 + 20);
  else
    v16 = a1[74];
  if (v16 >= 1)
  {
    for (i = 0; i != v16; ++i)
      sub_1B21F8730((uint64_t)a1, i, v12, v13, v14, v15, a6, a7, a8);
  }
  return 0.0;
}

float sub_1B21F8F2C(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = *(_DWORD *)(a5 + 64);
  if ((v7 & 4) != 0)
  {
    v8 = *(unsigned int *)(a1 + 44);
    if ((int)v8 >= 1)
    {
      v9 = *(_QWORD *)(a1 + 120);
      v10 = (int *)(*(_QWORD *)(a1 + 56) + 148);
      do
      {
        v11 = *(_DWORD **)(v10 - 3);
        v12 = *v10;
        v13 = *(_DWORD *)(v9 + 160 * *v10 + 100);
        v11[31] = *(v10 - 12);
        v11[32] = v13;
        if ((v7 & 0x10) != 0)
          v11[33] = *(_DWORD *)(v9 + 160 * v12 + 260);
        v10 += 40;
        --v8;
      }
      while (v8);
    }
  }
  v14 = *(unsigned int *)(a1 + 76);
  if ((int)v14 >= 1)
  {
    v15 = 0;
    v16 = 160 * v14;
    do
    {
      v17 = (float32x4_t *)(*(_QWORD *)(a1 + 88) + v15);
      v18 = v17[8].i64[1];
      v19 = *(float32x4_t **)(v18 + 64);
      if (v19)
      {
        v20 = vmulq_n_f32(vmulq_f32(*(float32x4_t *)(*(_QWORD *)(v18 + 40) + 400), vmulq_n_f32(v17[1], v17[6].f32[1])), 1.0 / *(float *)(a5 + 12));
        v20.i32[3] = 0;
        v21 = v19[1];
        *v19 = vaddq_f32(*v19, v20);
        v22 = vmulq_n_f32(vmulq_f32(*(float32x4_t *)(*(_QWORD *)(v18 + 48) + 400), vmulq_n_f32(v17[3], v17[6].f32[1])), 1.0 / *(float *)(a5 + 12));
        v22.i32[3] = 0;
        v23 = v19[3];
        v19[2] = vaddq_f32(v19[2], v22);
        v24 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(*v17, *(float32x4_t *)(*(_QWORD *)(v18 + 40) + 624)), v17[6].f32[1]), 1.0 / *(float *)(a5 + 12));
        v24.i32[3] = 0;
        v19[1] = vaddq_f32(v21, v24);
        v25 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(v17[2], *(float32x4_t *)(*(_QWORD *)(v18 + 48) + 624)), v17[6].f32[1]), 1.0 / *(float *)(a5 + 12));
        v25.i32[3] = 0;
        v19[3] = vaddq_f32(v23, v25);
      }
      v26 = v17[6].f32[1];
      *(float *)(v18 + 56) = v26;
      if (fabsf(v26) >= *(float *)(v18 + 24))
        *(_BYTE *)(v18 + 28) = 0;
      v15 += 160;
    }
    while (v16 != v15);
  }
  v27 = *(_DWORD *)(a1 + 12);
  if (v27 >= 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = *(_QWORD *)(a1 + 24);
    do
    {
      if (*(_QWORD *)(v30 + v28 + 208))
      {
        if (*(_DWORD *)(a5 + 44))
        {
          a2.n128_u32[0] = *(_DWORD *)(a5 + 12);
          sub_1B21F92C8(v30 + v28, a2.n128_f64[0], *(float *)(a5 + 52));
        }
        else
        {
          v31 = (float32x4_t *)(v30 + v28);
          v32 = vaddq_f32(v31[12], v31[5]);
          v31[11] = vaddq_f32(v31[11], v31[4]);
          v31[12] = v32;
        }
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v28 + 208) + 352) = *(_OWORD *)(*(_QWORD *)(a1 + 24) + v28 + 176);
        v33 = (__n128 *)(*(_QWORD *)(a1 + 24) + v28);
        a2 = v33[12];
        *(__n128 *)(v33[13].n128_u64[0] + 368) = a2;
        if (*(_DWORD *)(a5 + 44))
        {
          v34 = *(_QWORD *)(a1 + 24) + v28;
          v35 = *(_QWORD *)(v34 + 208);
          *(_OWORD *)(v35 + 16) = *(_OWORD *)v34;
          *(_OWORD *)(v35 + 32) = *(_OWORD *)(v34 + 16);
          *(_OWORD *)(v35 + 48) = *(_OWORD *)(v34 + 32);
          a2 = *(__n128 *)(v34 + 48);
          *(__n128 *)(v35 + 64) = a2;
        }
        v30 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(*(_QWORD *)(v30 + v28 + 208) + 240) = -1;
        v27 = *(_DWORD *)(a1 + 12);
      }
      ++v29;
      v28 += 224;
    }
    while (v29 < v27);
  }
  if ((*(_DWORD *)(a1 + 44) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
  {
    v36 = *(_QWORD *)(a1 + 56);
    if (v36 && *(_BYTE *)(a1 + 64))
      sub_1B21FF5FC(v36);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x80000000) != 0)
  {
    v37 = *(_QWORD *)(a1 + 88);
    if (v37 && *(_BYTE *)(a1 + 96))
      sub_1B21FF5FC(v37);
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 76) = 0;
  if ((*(_DWORD *)(a1 + 108) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 112) & 0x80000000) != 0)
  {
    v38 = *(_QWORD *)(a1 + 120);
    if (v38 && *(_BYTE *)(a1 + 128))
      sub_1B21FF5FC(v38);
    *(_BYTE *)(a1 + 128) = 1;
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 112) = 0;
  }
  *(_DWORD *)(a1 + 108) = 0;
  if ((*(_DWORD *)(a1 + 140) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 144) & 0x80000000) != 0)
  {
    v39 = *(_QWORD *)(a1 + 152);
    if (v39 && *(_BYTE *)(a1 + 160))
      sub_1B21FF5FC(v39);
    *(_BYTE *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 144) = 0;
  }
  *(_DWORD *)(a1 + 140) = 0;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
  {
    v40 = *(_QWORD *)(a1 + 24);
    if (v40 && *(_BYTE *)(a1 + 32))
      sub_1B21FF5FC(v40);
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 12) = 0;
  return 0.0;
}

double sub_1B21F92C8(uint64_t a1, double result, float a3)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  __int128 v7;
  float32x4_t v8;
  float32x4_t v9[2];
  __int128 v10;
  __int128 v11;

  if (*(_QWORD *)(a1 + 208))
  {
    v4 = vaddq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a1 + 80));
    *(float32x4_t *)(a1 + 176) = vaddq_f32(*(float32x4_t *)(a1 + 176), *(float32x4_t *)(a1 + 64));
    *(float32x4_t *)(a1 + 192) = v4;
    if (*(float *)(a1 + 144) != 0.0
      || *(float *)(a1 + 148) != 0.0
      || *(float *)(a1 + 152) != 0.0
      || *(float *)(a1 + 160) != 0.0
      || *(float *)(a1 + 164) != 0.0
      || *(float *)(a1 + 168) != 0.0)
    {
      v5 = vmulq_n_f32(*(float32x4_t *)(a1 + 160), a3);
      v5.i32[3] = 0;
      v8 = v5;
      sub_1B21E8F2C((float32x4_t *)a1, (float32x4_t *)(a1 + 144), &v8, v9, *(float *)&result);
      v6 = v9[1];
      *(float32x4_t *)a1 = v9[0];
      *(float32x4_t *)(a1 + 16) = v6;
      result = *(double *)&v10;
      v7 = v11;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v7;
    }
  }
  return result;
}

float sub_1B21F9384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3, a8);
  return 0.0;
}

uint64_t sub_1B21F9448(uint64_t result)
{
  *(_QWORD *)(result + 304) = 0;
  return result;
}

double sub_1B21F9458(uint64_t a1)
{
  float32x4_t *v1;
  float32x4_t *v2;

  *(_OWORD *)(a1 + 212) = xmmword_1B2245D80;
  *(_OWORD *)(a1 + 228) = xmmword_1B22CA5A0;
  *(_OWORD *)(a1 + 244) = xmmword_1B22CA5A0;
  *(_OWORD *)(a1 + 292) = xmmword_1B22CA5B0;
  *(_OWORD *)(a1 + 308) = xmmword_1B22CA5B0;
  *(_OWORD *)(a1 + 260) = xmmword_1B22CA5B0;
  *(_OWORD *)(a1 + 276) = xmmword_1B22CA5B0;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1236) = 0;
  *(_QWORD *)(a1 + 1220) = 0;
  *(_QWORD *)(a1 + 1225) = 0;
  *(_BYTE *)(a1 + 73) = 1;
  v1 = (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16);
  v2 = (float32x4_t *)(*(_QWORD *)(a1 + 48) + 16);
  *(_QWORD *)(a1 + 1240) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  return sub_1B21F94C0((float32x4_t *)a1, v1, v2);
}

double sub_1B21F94C0(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  uint64_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x2_t v64;

  v3 = a1[13].u8[0];
  if (a1[13].i8[0] || !a1[4].i8[8])
  {
    v4 = a2[1];
    v5 = a1[5];
    v6 = a1[6];
    v5.i32[3] = 0;
    v6.i32[3] = 0;
    v7 = a1[7];
    v8 = a1[8];
    v7.i32[3] = 0;
    v9 = a2[2];
    v10 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v4.f32[0]), v6, *(float32x2_t *)v4.f32, 1), v7, v4, 2);
    v11 = (int8x16_t)vmulq_f32(*a2, v8);
    v12 = (int8x16_t)vmulq_f32(v4, v8);
    v13 = (int8x16_t)vmulq_f32(v9, v8);
    v14 = (int32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
    v13.i32[3] = 0;
    v15 = vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v12.i8);
    v33 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(*a2)), v6, *(float32x2_t *)a2->f32, 1), v7, *a2, 2);
    v16 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v9.f32[0]), v6, *(float32x2_t *)v9.f32, 1), v7, v9, 2);
    *(float32x2_t *)v17.f32 = vadd_f32(v15, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v14));
    *(float32x2_t *)&v17.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
    v18 = vaddq_f32(a2[3], v17);
    v19 = a1 + 59;
    v20 = a1 + 60;
    a1[59] = v33;
    a1[60] = v10;
    v21 = a1 + 61;
    a1[61] = v16;
    a1[62] = v18;
    v22 = a3[1];
    v23 = a1[9];
    v24 = a1[10];
    v23.i32[3] = 0;
    v24.i32[3] = 0;
    v25 = a1[11];
    v26 = a1[12];
    v25.i32[3] = 0;
    v27 = a3[2];
    v28 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v22.f32[0]), v24, *(float32x2_t *)v22.f32, 1), v25, v22, 2);
    v29 = (int8x16_t)vmulq_f32(*a3, v26);
    v30 = (int8x16_t)vmulq_f32(v22, v26);
    v31 = (int8x16_t)vmulq_f32(v27, v26);
    v31.i32[3] = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    v32 = vaddq_f32(a3[3], v5);
    a1[63] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*a3)), v24, *(float32x2_t *)a3->f32, 1), v25, *a3, 2);
    a1[64] = v28;
    a1[65] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v27.f32[0]), v24, *(float32x2_t *)v27.f32, 1), v25, v27, 2);
    a1[66] = v32;
    a1[68] = v18;
    v33.i32[1] = v10.i32[0];
    a1[69] = v32;
    v33.i64[1] = v16.u32[0];
    a1[67] = v33;
    if (v3)
      goto LABEL_7;
  }
  else
  {
    v34 = a3[1];
    v35 = a1[9];
    v36 = a1[10];
    v35.i32[3] = 0;
    v36.i32[3] = 0;
    v37 = a1[11];
    v38 = a1[12];
    v37.i32[3] = 0;
    v39 = a3[2];
    v40 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v34.f32[0]), v36, *(float32x2_t *)v34.f32, 1), v37, v34, 2);
    v41 = (int8x16_t)vmulq_f32(*a3, v38);
    v42 = (int8x16_t)vmulq_f32(v34, v38);
    v43 = (int8x16_t)vmulq_f32(v39, v38);
    v44 = (int32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
    v43.i32[3] = 0;
    v45 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8);
    v33 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(*a3)), v36, *(float32x2_t *)a3->f32, 1), v37, *a3, 2);
    v46 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v39.f32[0]), v36, *(float32x2_t *)v39.f32, 1), v37, v39, 2);
    *(float32x2_t *)v47.f32 = vadd_f32(v45, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), v44));
    *(float32x2_t *)&v47.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
    v18 = vaddq_f32(a3[3], v47);
    v19 = a1 + 59;
    v20 = a1 + 60;
    a1[59] = v33;
    a1[60] = v40;
    v21 = a1 + 61;
    a1[61] = v46;
    a1[62] = v18;
    v48 = a2[1];
    v49 = a1[5];
    v50 = a1[6];
    v49.i32[3] = 0;
    v50.i32[3] = 0;
    v51 = a1[7];
    v52 = a1[8];
    v51.i32[3] = 0;
    v53 = a2[2];
    v54 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v48.f32[0]), v50, *(float32x2_t *)v48.f32, 1), v51, v48, 2);
    v55 = (int8x16_t)vmulq_f32(*a2, v52);
    v56 = (int8x16_t)vmulq_f32(v48, v52);
    v57 = (int8x16_t)vmulq_f32(v53, v52);
    v57.i32[3] = 0;
    *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
    *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0);
    v32 = vaddq_f32(a2[3], v35);
    a1[63] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*a2)), v50, *(float32x2_t *)a2->f32, 1), v51, *a2, 2);
    a1[64] = v54;
    a1[65] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v53.f32[0]), v50, *(float32x2_t *)v53.f32, 1), v51, v53, 2);
    a1[66] = v32;
    a1[68] = v18;
    v33.i32[1] = v40.i32[0];
    a1[69] = v32;
    v33.i64[1] = v46.u32[0];
    a1[67] = v33;
  }
  if (!a1[4].i8[8])
  {
    v58 = vsubq_f32(v18, v32);
    goto LABEL_9;
  }
LABEL_7:
  v58 = vsubq_f32(v32, v18);
LABEL_9:
  v59 = 0;
  v58.i32[3] = 0;
  a1[71] = v58;
  v60 = (int8x16_t)vmulq_f32(v33, v58);
  v61 = vmulq_n_f32(v33, vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0]);
  v61.i32[3] = 0;
  v62 = vaddq_f32(v18, v61);
  a1[70] = v62;
  do
  {
    v62.i32[0] = v19->i32[v59];
    v62.i32[1] = v20->i32[v59];
    v62.i32[2] = v21->i32[v59];
    v63 = (int8x16_t)vmulq_f32(v62, v58);
    v64 = vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8);
    v62 = (float32x4_t)vextq_s8(v63, v63, 8uLL);
    *(float32x2_t *)v62.f32 = vadd_f32(v64, *(float32x2_t *)v62.f32);
    a1[72].i32[v59++] = v62.i32[0];
  }
  while (v59 != 3);
  return *(double *)v62.i64;
}

uint64_t sub_1B21F97B0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5, char a6)
{
  uint64_t v10;

  sub_1B21FACE4(a1, 7, a2, a3);
  *(_QWORD *)v10 = off_1E63CCA78;
  *(_BYTE *)(v10 + 72) = 0;
  *(_OWORD *)(v10 + 80) = *a4;
  *(_OWORD *)(v10 + 96) = a4[1];
  *(_OWORD *)(v10 + 112) = a4[2];
  *(_OWORD *)(v10 + 128) = a4[3];
  *(_OWORD *)(v10 + 144) = *a5;
  *(_OWORD *)(v10 + 160) = a5[1];
  *(_OWORD *)(v10 + 176) = a5[2];
  *(_OWORD *)(v10 + 192) = a5[3];
  *(_BYTE *)(v10 + 208) = a6;
  sub_1B21F9458(v10);
  return a1;
}

uint64_t sub_1B21F9850(uint64_t a1, uint64_t a2, float32x4_t *a3, char a4)
{
  void *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  uint64_t v20;

  v8 = sub_1B21FAC38();
  sub_1B21FACE4(a1, 7, (uint64_t)v8, a2);
  *(_QWORD *)a1 = off_1E63CCA78;
  *(_BYTE *)(a1 + 72) = 0;
  v9 = *a3;
  *(float32x4_t *)(a1 + 144) = *a3;
  v10 = a3[1];
  *(float32x4_t *)(a1 + 160) = v10;
  v11 = a3[2];
  *(float32x4_t *)(a1 + 176) = v11;
  v12 = a3[3];
  *(float32x4_t *)(a1 + 192) = v12;
  *(_BYTE *)(a1 + 208) = a4;
  v13 = *(float32x4_t *)(a2 + 16);
  v14 = *(float32x4_t *)(a2 + 32);
  v15 = *(float32x4_t *)(a2 + 48);
  v16 = vmulq_f32(v12, v13);
  v17 = (int8x16_t)vmulq_f32(v12, v14);
  *(float32x2_t *)v16.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8));
  v18 = (int8x16_t)vmulq_f32(v12, v15);
  v18.i32[3] = 0;
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v11.i32[3] = 0;
  v19 = vaddq_f32(*(float32x4_t *)(a2 + 64), v16);
  v10.i32[3] = 0;
  v9.i32[3] = 0;
  *(float32x4_t *)(a1 + 80) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v13.f32[0]), v10, *(float32x2_t *)v13.f32, 1), v11, v13, 2);
  *(float32x4_t *)(a1 + 96) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v14.f32[0]), v10, *(float32x2_t *)v14.f32, 1), v11, v14, 2);
  *(float32x4_t *)(a1 + 112) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v15.f32[0]), v10, *(float32x2_t *)v15.f32, 1), v11, v15, 2);
  *(float32x4_t *)(a1 + 128) = v19;
  sub_1B21F9458(v20);
  return a1;
}

float32x4_t *sub_1B21F9954(float32x4_t *result, int32x2_t *a2)
{
  __int32 v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v8;

  if (result[4].i8[8])
  {
    v3 = 0;
    a2->i32[0] = 0;
LABEL_9:
    a2->i32[1] = v3;
    return result;
  }
  v4 = result;
  *a2 = (int32x2_t)0x200000004;
  *(double *)v5.i64 = sub_1B21F94C0(result, (float32x4_t *)(result[2].i64[1] + 16), (float32x4_t *)(result[3].i64[0] + 16));
  sub_1B21F99FC((uint64_t)v4, v5, v6, v7);
  result = (float32x4_t *)sub_1B21F9C18((uint64_t)v4);
  if (v4[20].i8[4] || v4[76].i8[0])
    *a2 = vadd_s32(*a2, (int32x2_t)0xFFFFFFFF00000001);
  if (v4[20].i8[5] || v4[77].i8[0])
  {
    v8 = a2->i32[1];
    ++a2->i32[0];
    v3 = v8 - 1;
    goto LABEL_9;
  }
  return result;
}

void sub_1B21F99FC(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float v4;
  float v5;
  int8x16_t v7;
  int8x16_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  *(_DWORD *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 325) = 0;
  v4 = *(float *)(a1 + 220);
  v5 = *(float *)(a1 + 224);
  if (v4 <= v5)
  {
    a3.i32[0] = *(_DWORD *)(a1 + 948);
    a3.i32[1] = *(_DWORD *)(a1 + 964);
    a3.i32[2] = *(_DWORD *)(a1 + 980);
    a2.i32[0] = *(_DWORD *)(a1 + 952);
    a2.i32[1] = *(_DWORD *)(a1 + 968);
    a2.i32[2] = *(_DWORD *)(a1 + 984);
    a4.i32[0] = *(_DWORD *)(a1 + 1012);
    a4.i32[1] = *(_DWORD *)(a1 + 1028);
    a4.i32[2] = *(_DWORD *)(a1 + 1044);
    v7 = (int8x16_t)vmulq_f32(a2, a4);
    v8 = (int8x16_t)vmulq_f32(a3, a4);
    v9 = atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]);
    v10 = v9;
    if (v4 < v5)
    {
      if (v9 >= v4)
      {
        if (v9 > v5)
        {
          v12 = fmodf(v9 - v5, 6.2832);
          if (v12 >= -3.1416)
          {
            if (v12 > 3.1416)
              v12 = v12 + -6.2832;
          }
          else
          {
            v12 = v12 + 6.2832;
          }
          v15 = fabsf(v12);
          v16 = fmodf(v10 - v4, 6.2832);
          if (v16 >= -3.1416)
          {
            if (v16 > 3.1416)
              v16 = v16 + -6.2832;
          }
          else
          {
            v16 = v16 + 6.2832;
          }
          if (fabsf(v16) < v15)
            v10 = v10 + -6.2832;
        }
      }
      else
      {
        v11 = fmodf(v4 - v9, 6.2832);
        if (v11 >= -3.1416)
        {
          if (v11 > 3.1416)
            v11 = v11 + -6.2832;
        }
        else
        {
          v11 = v11 + 6.2832;
        }
        v13 = fabsf(v11);
        v14 = fmodf(v5 - v10, 6.2832);
        if (v14 >= -3.1416)
        {
          if (v14 > 3.1416)
            v14 = v14 + -6.2832;
        }
        else
        {
          v14 = v14 + 6.2832;
        }
        if (v13 >= fabsf(v14))
          v10 = v10 + 6.2832;
      }
    }
    *(float *)(a1 + 1204) = v10;
    if (v10 < v4 || (v4 = v5, v10 > v5))
    {
      *(float *)(a1 + 1208) = v10 - v4;
      *(_BYTE *)(a1 + 325) = 1;
    }
  }
}

uint64_t sub_1B21F9C18(uint64_t result)
{
  float v1;
  float v2;
  float v3;
  float v4;

  *(_BYTE *)(result + 324) = 0;
  v1 = *(float *)(result + 1152);
  *(float *)(result + 1200) = v1;
  v2 = *(float *)(result + 212);
  v3 = *(float *)(result + 216);
  if (v2 <= v3)
  {
    if (v1 > v3)
    {
      v4 = v1 - v3;
LABEL_6:
      *(float *)(result + 1152) = v4;
      *(_BYTE *)(result + 324) = 1;
      return result;
    }
    if (v1 < v2)
    {
      v4 = v1 - v2;
      goto LABEL_6;
    }
  }
  *(_DWORD *)(result + 1152) = 0;
  return result;
}

void sub_1B21F9C64(float32x4_t *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  sub_1B21F9C84(a1, a2, (float32x4_t *)(a1[2].i64[1] + 16), (float32x4_t *)(a1[3].i64[0] + 16), (float32x4_t *)(a1[2].i64[1] + 352), (float32x4_t *)(a1[3].i64[0] + 352), *(float *)(a1[2].i64[1] + 384), *(float *)(a1[3].i64[0] + 384), a5, a6, a7);
}

void sub_1B21F9C84(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float a7, float a8, double a9, float32x4_t a10, float32x4_t a11)
{
  uint64_t v15;
  float v16;
  _BOOL4 v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  _DWORD *v46;
  int v47;
  float *v48;
  __int32 v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float *v58;
  float32x4_t v59;
  int8x16_t v60;
  _DWORD *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int v65;
  int v66;
  _DWORD *v67;
  _DWORD *v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float v86;
  uint64_t v87;
  int8x8_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  uint64_t j;
  uint64_t v95;
  float32x4_t v96;
  int8x16_t v97;
  uint64_t k;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t m;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t i;
  float v124;
  float v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  int v129;
  float v130;
  float v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  int8x16_t v141;
  float v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  float v146;
  float v147;
  uint64_t v149;
  uint64_t v150;
  char v151;
  float *v152;
  float v153;
  float v154;
  int v155;
  int v156;
  float v157;
  float v158;
  float v159;
  int8x16_t v160;
  int8x16_t v161;
  float v162;
  float v163;
  int v166;
  float v167;
  int v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  float v176;
  BOOL v178;
  __int32 v179;
  float *v180;
  float v181;
  float v182;
  float v183;
  float v184;
  uint64_t v185;
  int v186;
  float v187;
  float v188;
  float v189;
  int8x16_t v190;
  int8x16_t v191;
  float v192;
  float v193;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;

  v15 = *(int *)(a2 + 40);
  if (a1[13].i8[0])
    v16 = 1.0;
  else
    v16 = -1.0;
  v17 = a8 < 0.00000011921 || a7 < 0.00000011921;
  v18 = a7 + a8;
  v19 = a8 / v18;
  if (v18 <= 0.0)
    v19 = 0.5;
  v20 = 1.0 - v19;
  a10.i32[0] = a1[59].i32[0];
  a10.i32[1] = a1[60].i32[0];
  v21 = a10;
  v21.i32[2] = a1[61].i32[0];
  a11.i32[0] = a1[63].i32[0];
  a11.i32[1] = a1[64].i32[0];
  v22 = a11;
  v22.i32[2] = a1[65].i32[0];
  v23 = a1[4].u8[9];
  if (a1[4].i8[9])
  {
    v24 = vmulq_n_f32(v21, v19);
    v24.i32[3] = 0;
    v25 = vmulq_n_f32(v22, v20);
    v25.i32[3] = 0;
    v26 = vaddq_f32(v24, v25);
    v27 = (int8x16_t)vmulq_f32(v26, v26);
    _Q22 = vmulq_n_f32(v26, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)).f32[0]));
    if (fabsf(_Q22.f32[2]) <= 0.70711)
    {
      v42 = vmlas_n_f32(vmuls_lane_f32(_Q22.f32[1], *(float32x2_t *)_Q22.f32, 1), _Q22.f32[0], _Q22.f32[0]);
      v43 = 1.0 / sqrtf(v42);
      v39 = -(float)(_Q22.f32[1] * v43);
      v34 = v43 * _Q22.f32[0];
      v201.f32[0] = v39;
      *(uint64_t *)((char *)v201.i64 + 4) = COERCE_UNSIGNED_INT(v43 * _Q22.f32[0]);
      v36 = -(float)(_Q22.f32[2] * (float)(v43 * _Q22.f32[0]));
      v37 = _Q22.f32[2] * v39;
      v200.f32[0] = v36;
      v200.f32[1] = _Q22.f32[2] * v39;
      v38 = v42 * v43;
      v200.f32[2] = v38;
      v35 = 0.0;
    }
    else
    {
      _S7 = _Q22.i32[1];
      __asm { FMLA            S17, S7, V22.S[1] }
      v33 = 1.0 / sqrtf(_S17);
      v201.i32[0] = 0;
      v34 = -(float)(_Q22.f32[2] * v33);
      v35 = vmuls_lane_f32(v33, *(float32x2_t *)_Q22.f32, 1);
      *(uint64_t *)((char *)v201.i64 + 4) = __PAIR64__(LODWORD(v35), LODWORD(v34));
      v36 = _S17 * v33;
      v37 = -(float)(_Q22.f32[0] * v35);
      v200.f32[0] = _S17 * v33;
      v200.f32[1] = v37;
      v38 = v34 * _Q22.f32[0];
      v200.f32[2] = v34 * _Q22.f32[0];
      v39 = 0.0;
    }
  }
  else
  {
    v39 = a1[59].f32[1];
    v34 = a1[60].f32[1];
    v35 = a1[61].f32[1];
    v40.i64[0] = __PAIR64__(LODWORD(v34), LODWORD(v39));
    v40.i64[1] = LODWORD(v35);
    v36 = a1[59].f32[2];
    v37 = a1[60].f32[2];
    v38 = a1[61].f32[2];
    v41.i64[0] = __PAIR64__(LODWORD(v37), LODWORD(v36));
    v41.i64[1] = LODWORD(v38);
    v200 = v41;
    v201 = v40;
    _Q22 = v21;
  }
  v44 = a1[66];
  v45 = a1[62];
  v46 = *(_DWORD **)(a2 + 16);
  *v46 = LODWORD(v39);
  v46[1] = LODWORD(v34);
  v46[2] = LODWORD(v35);
  v46[v15] = LODWORD(v36);
  v47 = v15 + 1;
  v46[v47] = LODWORD(v37);
  *(float *)&v46[(int)v15 + 2] = v38;
  v48 = *(float **)(a2 + 32);
  *v48 = -v39;
  v48[1] = -v34;
  v48[2] = -v35;
  v48[v15] = -v36;
  v48[v47] = -v37;
  v48[(int)v15 + 2] = -v38;
  v49 = a1[20].i32[2];
  v50 = a1[19].f32[1];
  if ((v49 & 0x80) == 0)
    v50 = v50 * *(float *)(a2 + 4);
  v51 = v50 * *(float *)a2;
  *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)a10.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), 4uLL);
  v52.i64[1] = a10.i64[0];
  *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)a11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v53.i64[1] = a11.i64[0];
  v54 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v53), vmulq_f32(v52, v22));
  v55.i64[0] = vextq_s8(v54, v54, 4uLL).u64[0];
  v55.i64[1] = v54.u32[0];
  v56 = v201;
  v57 = (int8x16_t)vmulq_f32(v201, v55);
  v58 = *(float **)(a2 + 48);
  *v58 = v51
       * vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0];
  v59 = v200;
  v60 = (int8x16_t)vmulq_f32(v200, v55);
  v58[v15] = v51
           * vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0];
  if ((v49 & 0x40) != 0)
  {
    v61 = *(_DWORD **)(a2 + 56);
    *v61 = a1[20].i32[0];
    v61[v15] = a1[20].i32[0];
  }
  v62 = vsubq_f32(v44, v45);
  v63 = a3[3];
  v64 = a4[3];
  v65 = 2 * v15;
  v66 = 3 * v15;
  v199 = 0uLL;
  v67 = &v46[2 * (_DWORD)v15];
  v68 = &v46[3 * (_DWORD)v15];
  if (v23)
  {
    v69 = vsubq_f32(a1[66], v64);
    v69.i32[3] = 0;
    v70 = (int8x16_t)vmulq_f32(_Q22, v69);
    v71 = vmulq_n_f32(_Q22, vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0]);
    v71.i32[3] = 0;
    v72 = vsubq_f32(a1[62], v63);
    v72.i32[3] = 0;
    v73 = (int8x16_t)vmulq_f32(_Q22, v72);
    v74 = vmulq_n_f32(_Q22, vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0]);
    v74.i32[3] = 0;
    v75 = vsubq_f32(v72, v74);
    v76 = v75;
    v76.i32[3] = 0;
    v77 = vmulq_n_f32(_Q22, a1[75].f32[0] - a1[72].f32[0]);
    v77.i32[3] = 0;
    v78 = vmulq_n_f32(v75, v20);
    v79 = vsubq_f32(vaddq_f32(v77, v74), v71);
    v80 = vmulq_n_f32(v79, v19);
    v80.i32[3] = 0;
    v81 = vsubq_f32(v69, v71);
    v82 = vaddq_f32(v76, v80);
    v83 = vsubq_f32(v81, vmulq_n_f32(v79, v20));
    v83.i32[3] = 0;
    v84 = vmulq_n_f32(v81, v19);
    v84.i32[3] = 0;
    v78.i32[3] = 0;
    v56 = vaddq_f32(v84, v78);
    v85 = (int8x16_t)vmulq_f32(v56, v56);
    v86 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).f32[0];
    if (v86 <= 0.00000011921)
    {
      v56.i32[0] = a1[59].i32[1];
      v56.i32[1] = a1[60].i32[1];
      v56.i32[2] = a1[61].i32[1];
    }
    else
    {
      v56 = vmulq_n_f32(v56, 1.0 / sqrtf(v86));
    }
    v105 = 0;
    v106.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v106.i64[1] = _Q22.i64[0];
    v107.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
    v107.i64[1] = v56.i64[0];
    v108 = (int8x16_t)vsubq_f32(vmulq_f32(_Q22, v107), vmulq_f32(v106, v56));
    v59.i64[0] = vextq_s8(v108, v108, 4uLL).u64[0];
    v59.i64[1] = v108.u32[0];
    v200 = v59;
    v201 = v56;
    v109.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
    v109.i64[1] = v82.i64[0];
    v110 = (int8x16_t)vsubq_f32(vmulq_f32(v82, v107), vmulq_f32(v109, v56));
    v111.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
    v111.i64[1] = v83.i64[0];
    v112 = (int8x16_t)vsubq_f32(vmulq_f32(v107, v83), vmulq_f32(v111, v56));
    v113.i64[0] = vextq_s8(v112, v112, 4uLL).u64[0];
    v113.i64[1] = v112.u32[0];
    v199 = v113;
    v67[2] = v110.i32[0];
    *(_QWORD *)v67 = vextq_s8(v110, v110, 4uLL).u64[0];
    do
    {
      v48[v65 + v105] = -v199.f32[v105];
      ++v105;
    }
    while (v105 != 3);
    v114.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL).u64[0];
    v114.i64[1] = v59.i64[0];
    v115 = (int8x16_t)vsubq_f32(vmulq_f32(v82, v114), vmulq_f32(v109, v59));
    v116.i64[0] = vextq_s8(v115, v115, 4uLL).u64[0];
    v116.i64[1] = v115.u32[0];
    v117 = (int8x16_t)vsubq_f32(vmulq_f32(v114, v83), vmulq_f32(v111, v59));
    v118.i64[0] = vextq_s8(v117, v117, 4uLL).u64[0];
    v118.i64[1] = v117.u32[0];
    v199 = v118;
    if (v17 && a1[20].i8[5])
    {
      v199 = vmulq_n_f32(v118, v20);
      v116 = vmulq_n_f32(v116, v19);
    }
    v119 = 0;
    *(_QWORD *)v68 = v116.i64[0];
    v68[2] = v116.i32[2];
    do
    {
      v48[v66 + v119] = -v199.f32[v119];
      ++v119;
    }
    while (v119 != 3);
    v120 = 0;
    v100 = *(_QWORD *)(a2 + 8);
    v121 = v100 + 4 * v65;
    *(_QWORD *)v121 = v201.i64[0];
    *(_DWORD *)(v121 + 8) = v201.i32[2];
    v122 = v100 + 4 * v66;
    *(_QWORD *)v122 = v200.i64[0];
    *(_DWORD *)(v122 + 8) = v200.i32[2];
    v103 = *(_QWORD *)(a2 + 24);
    do
    {
      *(float *)(v103 + 4 * v65 + v120 * 4) = -v201.f32[v120];
      ++v120;
    }
    while (v120 != 3);
    for (i = 0; i != 3; ++i)
      *(float *)(v103 + 4 * v66 + i * 4) = -v200.f32[i];
    v89 = 0uLL;
  }
  else
  {
    v87 = 0;
    v89 = vsubq_f32(v64, v63);
    v88 = (int8x8_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
    v89.i32[3] = 0;
    *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v89.f32, v88, 4uLL);
    v90.i64[1] = v89.i64[0];
    v91.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
    v91.i64[1] = v56.i64[0];
    v92 = (int8x16_t)vsubq_f32(vmulq_f32(v91, v89), vmulq_f32(v56, v90));
    v93.i64[0] = vextq_s8(v92, v92, 4uLL).u64[0];
    v93.i64[1] = v92.u32[0];
    v198 = v93;
    do
    {
      *(float *)&v67[v87] = v19 * v198.f32[v87];
      ++v87;
    }
    while (v87 != 3);
    for (j = 0; j != 3; ++j)
      v48[v65 + j] = v20 * v198.f32[j];
    v95 = 0;
    v96.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL).u64[0];
    v96.i64[1] = v59.i64[0];
    v97 = (int8x16_t)vsubq_f32(vmulq_f32(v96, v89), vmulq_f32(v59, v90));
    v96.i64[0] = vextq_s8(v97, v97, 4uLL).u64[0];
    v96.i64[1] = v97.u32[0];
    v198 = v96;
    do
    {
      *(float *)&v68[v95] = v19 * v198.f32[v95];
      ++v95;
    }
    while (v95 != 3);
    for (k = 0; k != 3; ++k)
      v48[v66 + k] = v20 * v198.f32[k];
    v99 = 0;
    v100 = *(_QWORD *)(a2 + 8);
    v101 = v100 + 4 * v65;
    *(_QWORD *)v101 = v201.i64[0];
    *(_DWORD *)(v101 + 8) = v201.i32[2];
    v102 = v100 + 4 * v66;
    *(_QWORD *)v102 = v200.i64[0];
    *(_DWORD *)(v102 + 8) = v200.i32[2];
    v103 = *(_QWORD *)(a2 + 24);
    do
    {
      *(float *)(v103 + 4 * v65 + v99 * 4) = -v201.f32[v99];
      ++v99;
    }
    while (v99 != 3);
    for (m = 0; m != 3; ++m)
      *(float *)(v103 + 4 * v66 + m * 4) = -v200.f32[m];
    v83 = 0uLL;
    v82 = 0uLL;
  }
  v62.i32[3] = 0;
  v124 = a1[18].f32[1];
  if ((v49 & 0x20) == 0)
    v124 = v124 * *(float *)(a2 + 4);
  v125 = v124 * *(float *)a2;
  v126 = (int8x16_t)vmulq_f32(v56, v62);
  v58[v65] = v125
           * vadd_f32(vpadd_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL)).f32[0];
  v127 = (int8x16_t)vmulq_f32(v59, v62);
  v58[v66] = v125
           * vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)).f32[0];
  if ((v49 & 0x10) != 0)
  {
    v128 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(v128 + 4 * v65) = a1[19].i32[0];
    *(_DWORD *)(v128 + 4 * v66) = a1[19].i32[0];
  }
  v129 = a1[20].u8[4];
  v130 = _Q22.f32[2];
  if (a1[20].i8[4])
  {
    v131 = v16 * a1[72].f32[0];
    if (v131 <= 0.0)
      v132 = 1;
    else
      v132 = 2;
    v133 = a1[76].u8[0];
  }
  else
  {
    if (!a1[76].i8[0])
    {
      v156 = 4;
      goto LABEL_101;
    }
    v132 = 0;
    v131 = 0.0;
    v133 = 1;
  }
  v134 = 4 * (int)v15;
  v135 = 4 * v134;
  *(_QWORD *)(v100 + v135) = _Q22.i64[0];
  v136 = (4 * v15) | 2;
  *(_DWORD *)(v100 + 4 * v136) = _Q22.i32[2];
  *(float32x2_t *)(v103 + v135) = vneg_f32(*(float32x2_t *)_Q22.f32);
  *(float *)(v103 + 4 * v136) = -_Q22.f32[2];
  if (v23)
  {
    if (v17)
      goto LABEL_63;
    v137.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
    v137.i64[1] = v82.i64[0];
    v138.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v138.i64[1] = _Q22.i64[0];
    v139 = (int8x16_t)vsubq_f32(vmulq_f32(v138, v82), vmulq_f32(_Q22, v137));
    v140.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
    v140.i64[1] = v83.i64[0];
    v141 = (int8x16_t)vsubq_f32(vmulq_f32(v138, v83), vmulq_f32(_Q22, v140));
    v140.i64[0] = vextq_s8(v141, v141, 4uLL).u64[0];
    v140.i64[1] = v141.u32[0];
    v199 = v140;
    *(_QWORD *)&v46[v134] = vextq_s8(v139, v139, 4uLL).u64[0];
    v46[v136] = v139.i32[0];
    *(float32x2_t *)&v48[v134] = vneg_f32(*(float32x2_t *)v140.f32);
    v142 = -*(float *)v141.i32;
  }
  else
  {
    v143.i64[0] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL).u64[0];
    v143.i64[1] = v89.i64[0];
    v144.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v144.i64[1] = _Q22.i64[0];
    v145 = (int8x16_t)vsubq_f32(vmulq_f32(v144, v89), vmulq_f32(_Q22, v143));
    v144.i64[0] = vextq_s8(v145, v145, 4uLL).u64[0];
    *(float32x2_t *)&v46[v134] = vmul_n_f32(*(float32x2_t *)v144.f32, v19);
    *(float *)&v46[v136] = v19 * *(float *)v145.i32;
    *(float32x2_t *)&v48[v134] = vmul_n_f32(*(float32x2_t *)v144.f32, v20);
    v142 = v20 * *(float *)v145.i32;
  }
  v48[v136] = v142;
LABEL_63:
  v146 = a1[13].f32[1];
  v147 = a1[13].f32[2];
  _ZF = v146 != v147 || v129 == 0;
  v58[v134] = 0.0;
  v149 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(v149 + 4 * v134) = 0;
  v150 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(v150 + 4 * v134) = 0;
  v151 = !_ZF;
  v152 = (float *)(a2 + 4);
  if ((v49 & 0x200) != 0)
    v152 = &a1[16].f32[1];
  v153 = *v152;
  if (v133 && (v151 & 1) == 0)
  {
    v196 = _Q22;
    if ((v49 & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v134) = a1[15].i32[0];
    v154 = sub_1B21FAD2C(a1[75].f32[0], a1[13].f32[1], a1[13].f32[2], a1[76].f32[1], v153 * *(float *)a2);
    v58 = *(float **)(a2 + 48);
    v58[v134] = v58[v134] + (float)((float)-(float)(v16 * v154) * a1[76].f32[1]);
    v149 = *(_QWORD *)(a2 + 64);
    *(float *)(v149 + 4 * v134) = *(float *)(v149 + 4 * v134) - (float)(a1[76].f32[2] * *(float *)a2);
    v150 = *(_QWORD *)(a2 + 72);
    *(float *)(v150 + 4 * v134) = *(float *)(v150 + 4 * v134) + (float)(a1[76].f32[2] * *(float *)a2);
    _Q22 = v196;
  }
  if (!v129)
    goto LABEL_100;
  v58[v134] = v58[v134] + (float)((float)(v153 * *(float *)a2) * v131);
  if ((a1[20].i8[9] & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v134) = a1[17].i32[0];
  if (v146 == v147)
  {
    *(_DWORD *)(v149 + 4 * v134) = -8388609;
LABEL_85:
    v155 = 2139095039;
    goto LABEL_86;
  }
  if (v132 != 1)
  {
    *(_DWORD *)(v149 + 4 * v134) = 0;
    goto LABEL_85;
  }
  *(_DWORD *)(v149 + 4 * v134) = -8388609;
  v155 = 0;
LABEL_86:
  *(_DWORD *)(v150 + 4 * v134) = v155;
  v157 = a1[16].f32[3];
  if ((float)(1.0 - v157) < 0.0 || (float)(1.0 - v157) > 0.0)
  {
    v159 = vabds_f32(1.0, v157);
    v160 = (int8x16_t)vmulq_f32(_Q22, *a5);
    v161 = (int8x16_t)vmulq_f32(_Q22, *a6);
    v162 = v16
         * vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v160.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v161.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL))).f32[0];
    v158 = v58[v134];
    if (v132 == 1)
    {
      v163 = -(float)(v159 * v162);
      if (v162 >= 0.0 || v163 <= v158)
        goto LABEL_99;
    }
    else
    {
      v163 = -(float)(v159 * v162);
      if (v162 <= 0.0 || v163 >= v158)
        goto LABEL_99;
    }
    v58[v134] = v163;
    v158 = v163;
  }
  else
  {
    v158 = v58[v134];
  }
LABEL_99:
  v58[v134] = a1[16].f32[1] * v158;
LABEL_100:
  v156 = 5;
LABEL_101:
  v166 = a1[20].u8[5];
  if (a1[20].i8[5])
  {
    v167 = a1[75].f32[2];
    if (v167 > 0.0)
      v168 = 1;
    else
      v168 = 2;
    v169 = a1[77].i8[0] == 0;
  }
  else
  {
    if (!a1[77].i8[0])
      return;
    v169 = 0;
    v168 = 0;
    v167 = 0.0;
  }
  v170 = *(int *)(a2 + 40) * (uint64_t)v156;
  v171 = *(_QWORD *)(a2 + 16);
  v172 = 4 * v170;
  *(_QWORD *)(v171 + v172) = _Q22.i64[0];
  v173 = 4 * v170 + 8;
  *(_DWORD *)(v171 + v173) = _Q22.i32[2];
  v174 = *(_QWORD *)(a2 + 32);
  *(float32x2_t *)(v174 + v172) = vneg_f32(*(float32x2_t *)_Q22.f32);
  *(float *)(v174 + v173) = -v130;
  v175 = a1[13].f32[3];
  v176 = a1[14].f32[0];
  v178 = v175 == v176 && v166 != 0;
  v179 = a1[20].i32[2];
  v180 = (float *)(a2 + 4);
  if ((v179 & 0x800) != 0)
    v180 = &a1[17].f32[1];
  v181 = *v180;
  if (!v169 && !v178)
  {
    v197 = _Q22;
    v182 = a1[14].f32[0];
    v183 = a1[13].f32[3];
    if ((v179 & 4) != 0)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v170) = a1[16].i32[0];
      v183 = a1[13].f32[3];
      v182 = a1[14].f32[0];
    }
    v184 = sub_1B21FAD2C(a1[75].f32[1], v183, v182, a1[77].f32[1], v181 * *(float *)a2);
    v58 = *(float **)(a2 + 48);
    v58[v170] = v184 * a1[77].f32[1];
    *(float *)(*(_QWORD *)(a2 + 64) + 4 * v170) = -(float)(a1[77].f32[2] * *(float *)a2);
    *(float *)(*(_QWORD *)(a2 + 72) + 4 * v170) = a1[77].f32[2] * *(float *)a2;
    _Q22 = v197;
  }
  if (v166)
  {
    v58[v170] = v58[v170] + (float)((float)(v181 * *(float *)a2) * v167);
    if ((a1[20].i8[9] & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v170) = a1[18].i32[0];
    if (v175 == v176)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v170) = -8388609;
    }
    else
    {
      v185 = *(_QWORD *)(a2 + 64);
      if (v168 != 1)
      {
        *(_DWORD *)(v185 + 4 * v170) = -8388609;
        v186 = 0;
        goto LABEL_129;
      }
      *(_DWORD *)(v185 + 4 * v170) = 0;
    }
    v186 = 2139095039;
LABEL_129:
    *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v170) = v186;
    v187 = a1[17].f32[3];
    if ((float)(1.0 - v187) < 0.0 || (float)(1.0 - v187) > 0.0)
    {
      v189 = vabds_f32(1.0, v187);
      v190 = (int8x16_t)vmulq_f32(_Q22, *(float32x4_t *)(a1[2].i64[1] + 368));
      v191 = (int8x16_t)vmulq_f32(_Q22, *(float32x4_t *)(a1[3].i64[0] + 368));
      LODWORD(v192) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v190, v190, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL))).u32[0];
      v188 = v58[v170];
      if (v168 == 1)
      {
        v193 = -(float)(v189 * v192);
        if (v192 >= 0.0 || v193 <= v188)
          goto LABEL_142;
      }
      else
      {
        v193 = -(float)(v189 * v192);
        if (v192 <= 0.0 || v193 >= v188)
          goto LABEL_142;
      }
      v58[v170] = v193;
      v188 = v193;
    }
    else
    {
      v188 = v58[v170];
    }
LABEL_142:
    v58[v170] = a1[17].f32[1] * v188;
  }
}

