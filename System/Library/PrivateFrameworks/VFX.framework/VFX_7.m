unint64_t sub_1B1B7D3B0()
{
  unint64_t result;

  result = qword_1EEF5B2C8;
  if (!qword_1EEF5B2C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D514, &type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2C8);
  }
  return result;
}

unint64_t sub_1B1B7D3F8()
{
  unint64_t result;

  result = qword_1EEF5B2D0;
  if (!qword_1EEF5B2D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D49C, &type metadata for ParticleGlobalFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2D0);
  }
  return result;
}

unint64_t sub_1B1B7D440()
{
  unint64_t result;

  result = qword_1EEF5B2D8;
  if (!qword_1EEF5B2D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D4C4, &type metadata for ParticleGlobalFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2D8);
  }
  return result;
}

unint64_t sub_1B1B7D488()
{
  unint64_t result;

  result = qword_1EEF5B2E0;
  if (!qword_1EEF5B2E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D44C, &type metadata for ParticleGlobalFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2E0);
  }
  return result;
}

unint64_t sub_1B1B7D4D0()
{
  unint64_t result;

  result = qword_1EEF5B2E8;
  if (!qword_1EEF5B2E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D474, &type metadata for ParticleGlobalFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2E8);
  }
  return result;
}

uint64_t sub_1B1B7D518(uint64_t *a1)
{
  uint64_t *DynamicType;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  sub_1B19FA070(a1, a1[3]);
  DynamicType = (uint64_t *)swift_getDynamicType();
  v3 = sub_1B1B7D6FC(DynamicType);
  if (!v3)
    return 0;
  v4 = v3;
  *((_QWORD *)&v22 + 1) = &type metadata for Extensions;
  *(_QWORD *)&v23 = &off_1E63744C8;
  sub_1B1B7D784((uint64_t *)&v21, a1);
  sub_1B1A02518(&v21, (uint64_t)v24);
  v5 = v25;
  v6 = v26;
  sub_1B19FC264((uint64_t)v24, v25);
  v7 = sub_1B1EFF710(v5, v6);
  v8 = v4[2];
  if (v8)
  {
    v9 = v7;
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B202A17C(0, v8, 0);
    v10 = v20;
    v11 = v4 + 7;
    do
    {
      v12 = *(v11 - 3);
      v13 = *(v11 - 2);
      sub_1B1EFF724(v9 + *v11, *(v11 - 1), (uint64_t *)&v22);
      *(_QWORD *)&v21 = v12;
      *((_QWORD *)&v21 + 1) = v13;
      v14 = *(_QWORD *)(v20 + 16);
      v15 = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain();
      if (v14 >= v15 >> 1)
        sub_1B202A17C(v15 > 1, v14 + 1, 1);
      v11 += 4;
      *(_QWORD *)(v20 + 16) = v14 + 1;
      v16 = (_OWORD *)(v20 + 48 * v14);
      v17 = v21;
      v18 = v23;
      v16[3] = v22;
      v16[4] = v18;
      v16[2] = v17;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v24);
  return v10;
}

_QWORD *sub_1B1B7D6FC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t i;

  v1 = a1;
  for (i = *a1; ; i = *v1)
  {
    if (!sub_1B1BAAABC(i))
      return sub_1B1BA9C84(v1);
    if (sub_1B1BAAABC(*v1) == 14)
      break;
    if (sub_1B1BAAABC(*v1) == 9)
    {
      v1 = (uint64_t *)v1[1];
      if (v1)
        continue;
    }
    return 0;
  }
  return sub_1B1BAA144(v1);
}

uint64_t *sub_1B1B7D784(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for Property.Description(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Property.Description(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for Property.Description(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for Property.Description()
{
  return &type metadata for Property.Description;
}

uint64_t destroy for Property(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
}

_QWORD *initializeWithCopy for Property(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, uint64_t);

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2 + 2;
  v5 = a2[5];
  a1[5] = v5;
  v6 = **(void (***)(_QWORD *, _QWORD *, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 2, v4, v5);
  return a1;
}

_QWORD *assignWithCopy for Property(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B1B7D784(a1 + 2, a2 + 2);
  return a1;
}

uint64_t assignWithTake for Property(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for Property()
{
  return &type metadata for Property;
}

uint64_t sub_1B1B7DB10()
{
  uint64_t result;

  result = type metadata accessor for Scheduler();
  qword_1ED4D0E80 = result;
  return result;
}

_QWORD *sub_1B1B7DB30(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99AD8();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = a1 + 32;
      swift_retain();
      do
      {
        sub_1B1B99B3C(v4, (uint64_t)&v15, &qword_1EEF5B378);
        v5 = v15;
        v6 = v16;
        v7 = sub_1B1DC3B00(v15, v16);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = (uint64_t *)(v2[6] + 16 * v7);
        *v8 = v5;
        v8[1] = v6;
        v9 = v2[7] + 88 * v7;
        v10 = v18;
        *(_OWORD *)v9 = v17;
        v11 = v19;
        v12 = v20;
        v13 = v21;
        *(_QWORD *)(v9 + 80) = v22;
        *(_OWORD *)(v9 + 48) = v12;
        *(_OWORD *)(v9 + 64) = v13;
        *(_OWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 32) = v11;
        ++v2[2];
        v4 += 104;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7DC84(uint64_t a1)
{
  return sub_1B1B7F214(a1, (void (*)(_QWORD))sub_1B1B9D124);
}

_QWORD *sub_1B1B7DC90(uint64_t a1)
{
  return sub_1B1B80378(a1, &qword_1EEF5B858, (void (*)(uint64_t))type metadata accessor for AuthoringNode, (unint64_t *)&qword_1EEF5B860);
}

_QWORD *sub_1B1B7DCAC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9DB0C();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 56);
      do
      {
        v5 = (void *)*(v4 - 3);
        v6 = (void *)*(v4 - 2);
        v7 = *((unsigned __int8 *)v4 - 4);
        v8 = *((unsigned int *)v4 - 2);
        v9 = *v4;
        v4 += 4;
        sub_1B1A026F0(v5, v6, v8 | (v7 << 32));
        swift_bridgeObjectRetain();
        v10 = sub_1B1DC3D88(v5, v6, v8 | (v7 << 32));
        *(_QWORD *)((char *)v2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
        v11 = v2[6] + 24 * v10;
        *(_QWORD *)v11 = v5;
        *(_QWORD *)(v11 + 8) = v6;
        *(_BYTE *)(v11 + 20) = v7;
        *(_DWORD *)(v11 + 16) = v8;
        *(_QWORD *)(v2[7] + 8 * v10) = v9;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7DDE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9D92C();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = a1 + 40;
      do
      {
        v5 = *(_QWORD *)(v4 - 8);
        v6 = *(_QWORD *)(v4 + 8);
        v7 = *(_BYTE *)(v4 + 16);
        v8 = *(_QWORD *)(v4 + 24);
        v9 = *(_QWORD *)(v4 + 32);
        v10 = *(_BYTE *)v4;
        v4 += 48;
        sub_1B1B1DD24(v5);
        swift_bridgeObjectRetain();
        v11 = sub_1B1DC3E04(v5, v10, v6, v7);
        *(_QWORD *)((char *)v2 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
        v12 = v2[6] + 32 * v11;
        *(_QWORD *)v12 = v5;
        *(_BYTE *)(v12 + 8) = v10;
        *(_QWORD *)(v12 + 16) = v6;
        *(_BYTE *)(v12 + 24) = v7;
        v13 = (_QWORD *)(v2[7] + 16 * v11);
        *v13 = v8;
        v13[1] = v9;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7DF14(uint64_t a1)
{
  return sub_1B1B7F544(a1, (void (*)(_QWORD))sub_1B1B99980);
}

_QWORD *sub_1B1B7DF20(uint64_t a1)
{
  return sub_1B1B80670(a1, (unint64_t *)&unk_1EEF5B330, (void (*)(uint64_t))_s11TemplateSetCMa);
}

_QWORD *sub_1B1B7DF34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B999E4();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 56);
      do
      {
        v5 = *(v4 - 3);
        v6 = *(v4 - 2);
        v8 = *(v4 - 1);
        v7 = *v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
        v10 = (uint64_t *)(v2[6] + 16 * v9);
        *v10 = v5;
        v10[1] = v6;
        v11 = (_QWORD *)(v2[7] + 16 * v9);
        *v11 = v8;
        v11[1] = v7;
        ++v2[2];
        v4 += 4;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7E040(uint64_t a1)
{
  return sub_1B1B7F214(a1, (void (*)(_QWORD))sub_1B1B9C550);
}

_QWORD *sub_1B1B7E04C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  unsigned __int8 v5;
  unint64_t v6;
  __int128 v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9C780();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (_OWORD *)(a1 + 40);
      do
      {
        v8 = *v4;
        v5 = *((_BYTE *)v4 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = sub_1B1DC3C04(v5);
        *(_QWORD *)((char *)v2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
        *(_BYTE *)(v2[6] + v6) = v5;
        *(_OWORD *)(v2[7] + 16 * v6) = v8;
        ++v2[2];
        v4 = (_OWORD *)((char *)v4 + 24);
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7E154(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B678, (void (*)(uint64_t))_s12ContextEntryCMa);
}

_QWORD *sub_1B1B7E168(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B670, (void (*)(uint64_t))_s11ContextExitCMa);
}

_QWORD *sub_1B1B7E17C(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B668, (void (*)(uint64_t))_s10SubContextCMa);
}

_QWORD *sub_1B1B7E190(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B660, (void (*)(uint64_t))_s20ArraySequenceSnippetCMa);
}

_QWORD *sub_1B1B7E1A4(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B658, (void (*)(uint64_t))_s11CodeSnippetCMa);
}

_QWORD *sub_1B1B7E1B8(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B650, (void (*)(uint64_t))_s17CustomCodeSnippetCMa);
}

_QWORD *sub_1B1B7E1CC(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B648, (void (*)(uint64_t))_s17TypedArraySnippetCMa);
}

_QWORD *sub_1B1B7E1E0(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B640, (void (*)(uint64_t))_s19StaticSwitchSnippetCMa);
}

_QWORD *sub_1B1B7E1F4(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B638, (void (*)(uint64_t))type metadata accessor for GraphV1CodeGeneration.BaseObject);
}

_QWORD *sub_1B1B7E208(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B630, (void (*)(uint64_t))_s15VariableSnippetCMa);
}

_QWORD *sub_1B1B7E21C(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF60080, (void (*)(uint64_t))_s24VariableReferenceSnippetCMa);
}

_QWORD *sub_1B1B7E230(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99B8C(0, (unint64_t *)&unk_1EEF5B610, (void (*)(uint64_t))sub_1B1B9B510);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 64);
      do
      {
        v5 = *(v4 - 4);
        v6 = *(v4 - 3);
        v8 = *(v4 - 2);
        v7 = *(v4 - 1);
        v9 = *v4;
        v4 += 5;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
        v11 = (uint64_t *)(v2[6] + 16 * v10);
        *v11 = v5;
        v11[1] = v6;
        v12 = (_QWORD *)(v2[7] + 24 * v10);
        *v12 = v8;
        v12[1] = v7;
        v12[2] = v9;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7E378(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B608, (void (*)(uint64_t))_s13ParameterBaseCMa);
}

_QWORD *sub_1B1B7E38C(uint64_t a1)
{
  return sub_1B1B80670(a1, (unint64_t *)&unk_1EEF60070, (void (*)(uint64_t))_s7ContextCMa);
}

_QWORD *sub_1B1B7E3A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9B4AC();
    v2 = sub_1B22296DC();
    v3 = (_QWORD *)v2;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v17 = v2 + 64;
      swift_retain();
      v5 = (uint64_t *)(a1 + 48);
      do
      {
        v6 = *(v5 - 2);
        v7 = *(v5 - 1);
        v9 = *v5;
        v8 = v5[1];
        v10 = v5[3];
        v11 = v5[5];
        v18 = v5[4];
        v19 = v5[2];
        v12 = v5[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = sub_1B1DC3B00(v6, v7);
        *(_QWORD *)(v17 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        v14 = (uint64_t *)(v3[6] + 16 * v13);
        *v14 = v6;
        v14[1] = v7;
        v15 = (_QWORD *)(v3[7] + 56 * v13);
        *v15 = v9;
        v15[1] = v8;
        v15[2] = v19;
        v15[3] = v10;
        v15[4] = v18;
        v15[5] = v11;
        v15[6] = v12;
        ++v3[2];
        v5 += 9;
        --v4;
      }
      while (v4);
      swift_release();
    }
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_1B1B7E500(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1ED4BA930, (void (*)(uint64_t))type metadata accessor for Bindings.Value);
}

_QWORD *sub_1B1B7E514(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v22[2];

  sub_1B1B9C9F0(0, &qword_1EEF5B760, (void (*)(uint64_t))sub_1B1B9CA60);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v22 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9CAEC(0, (unint64_t *)&qword_1EEF5B768, (void (*)(uint64_t))sub_1B1B9CA60);
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &v7[*(int *)(v3 + 48)];
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v22[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9D584(v14, (uint64_t)v7, &qword_1EEF5B760, (void (*)(uint64_t))sub_1B1B9CA60);
        v16 = sub_1B1DC3CA8((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B222826C();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v7, v18);
        v19 = v9[7] + 16 * v16;
        v20 = v11[8];
        *(_QWORD *)v19 = *(_QWORD *)v11;
        *(_BYTE *)(v19 + 8) = v20;
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B7E6C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  sub_1B1B9A958(0, (unint64_t *)&unk_1EEF5B750, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v20 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9C920();
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(int *)(v3 + 48);
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v20[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9C9A0(v14, (uint64_t)v7, (unint64_t *)&unk_1EEF5B750, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
        v16 = sub_1B1DC3CA8((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B222826C();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v7, v18);
        *(_BYTE *)(v9[7] + v16) = v7[v11];
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B7E86C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9D0C0();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (_BYTE *)(a1 + 64);
      do
      {
        v5 = *((_QWORD *)v4 - 4);
        v6 = *((_QWORD *)v4 - 3);
        v8 = *((_QWORD *)v4 - 2);
        v7 = *((_QWORD *)v4 - 1);
        v9 = *v4;
        v4 += 40;
        swift_bridgeObjectRetain();
        v10 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
        v11 = (uint64_t *)(v2[6] + 16 * v10);
        *v11 = v5;
        v11[1] = v6;
        v12 = v2[7] + 24 * v10;
        *(_QWORD *)v12 = v8;
        *(_QWORD *)(v12 + 8) = v7;
        *(_BYTE *)(v12 + 16) = v9;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7E984(uint64_t a1)
{
  return sub_1B1B7F328(a1, &qword_1EEF5B7F0, (void (*)(uint64_t))sub_1B1B9D058);
}

_QWORD *sub_1B1B7E998(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9BD64(0, (unint64_t *)&unk_1ED4BA940, (uint64_t)&qword_1ED4B7990, (uint64_t)&protocolRef_MTLTexture_0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B19F8F48);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        v7 = *v4;
        v4 += 3;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v8 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7EAB8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v13;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9B10C();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (_QWORD *)(a1 + 72);
      do
      {
        v5 = *(v4 - 5);
        v6 = *(v4 - 4);
        v7 = *(v4 - 3);
        v13 = *((_OWORD *)v4 - 1);
        v8 = *v4;
        v4 += 6;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v9 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
        v10 = (uint64_t *)(v2[6] + 16 * v9);
        *v10 = v5;
        v10[1] = v6;
        v11 = v2[7] + 32 * v9;
        *(_QWORD *)v11 = v7;
        *(_OWORD *)(v11 + 8) = v13;
        *(_QWORD *)(v11 + 24) = v8;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7EBDC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9B404();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 56);
      do
      {
        v5 = *(v4 - 3);
        v6 = *(v4 - 2);
        v7 = *v4;
        swift_bridgeObjectRetain();
        swift_retain();
        v8 = *(v4 - 1);
        v9 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
        v10 = (uint64_t *)(v2[6] + 16 * v9);
        *v10 = v5;
        v10[1] = v6;
        v11 = (_QWORD *)(v2[7] + 16 * v9);
        *v11 = v8;
        v11[1] = v7;
        ++v2[2];
        v4 += 4;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7ECF8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  __int128 v12;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9A4FC();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (_OWORD *)(a1 + 64);
      do
      {
        v5 = *((_QWORD *)v4 - 4);
        v6 = *((_QWORD *)v4 - 3);
        swift_bridgeObjectRetain();
        v12 = *(v4 - 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = *v4;
        v4 += 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v8 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        v10 = (_OWORD *)(v2[7] + 32 * v8);
        *v10 = v12;
        v10[1] = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7EE30(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  id v6;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99DB0(0, &qword_1EEF5B5F0, (void (*)(uint64_t))type metadata accessor for VFXREBindingMeshData, (void (*)(void))sub_1B1B9B468);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (id *)(a1 + 40);
      do
      {
        v5 = *((unsigned __int8 *)v4 - 8);
        v6 = *v4;
        v7 = sub_1B1DC40B0(v5);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        *(_BYTE *)(v2[6] + v7) = v5;
        *(_QWORD *)(v2[7] + 8 * v7) = v6;
        ++v2[2];
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7EF3C(uint64_t a1)
{
  return sub_1B1B7EF78(a1, &qword_1EEF60140, &qword_1EEF5B3B0, MEMORY[0x1E0DEE9B8] + 8);
}

_QWORD *sub_1B1B7EF5C(uint64_t a1)
{
  return sub_1B1B7EF78(a1, (unint64_t *)&unk_1EEF5B390, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
}

_QWORD *sub_1B1B7EF78(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  _BYTE v23[37];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99C78(0, a2, a3, a4);
    v5 = (_QWORD *)sub_1B22296DC();
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      swift_retain();
      v7 = (_QWORD *)(a1 + 104);
      do
      {
        v8 = *(v7 - 8);
        v9 = *(v7 - 7);
        v10 = *(v7 - 6);
        v11 = *(v7 - 5);
        v12 = *(v7 - 2);
        v13 = *((_DWORD *)v7 - 2);
        v14 = *((_BYTE *)v7 - 4);
        v15 = *v7;
        *(_QWORD *)&v21 = *(v7 - 9);
        *((_QWORD *)&v21 + 1) = v8;
        *(_QWORD *)&v22 = v9;
        *((_QWORD *)&v22 + 1) = v10;
        *(_QWORD *)v23 = v11;
        *(_OWORD *)&v23[8] = *((_OWORD *)v7 - 2);
        *(_QWORD *)&v23[24] = v12;
        *(_DWORD *)&v23[32] = v13;
        v23[36] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = sub_1B1DC40E0((uint64_t *)&v21);
        *(_QWORD *)((char *)v5 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v16;
        v17 = v5[6] + 72 * v16;
        v18 = *(_OWORD *)&v23[16];
        *(_OWORD *)(v17 + 32) = *(_OWORD *)v23;
        *(_OWORD *)(v17 + 48) = v18;
        *(_QWORD *)(v17 + 61) = *(_QWORD *)&v23[29];
        v19 = v22;
        *(_OWORD *)v17 = v21;
        *(_OWORD *)(v17 + 16) = v19;
        *(_QWORD *)(v5[7] + 8 * v16) = v15;
        ++v5[2];
        v7 += 10;
        --v6;
      }
      while (v6);
      swift_release();
    }
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v5;
}

_QWORD *sub_1B1B7F0F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9B3A0();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        v7 = *v4;
        v4 += 3;
        swift_bridgeObjectRetain();
        swift_retain();
        v8 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7F1F4(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1ED4BA918, (void (*)(uint64_t))type metadata accessor for PropertyDescription);
}

_QWORD *sub_1B1B7F208(uint64_t a1)
{
  return sub_1B1B7F214(a1, (void (*)(_QWORD))sub_1B1B9B590);
}

_QWORD *sub_1B1B7F214(uint64_t a1, void (*a2)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  if (*(_QWORD *)(a1 + 16))
  {
    a2(0);
    v3 = (_QWORD *)sub_1B22296DC();
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      swift_retain();
      v5 = (uint64_t *)(a1 + 48);
      do
      {
        v6 = *(v5 - 2);
        v7 = *(v5 - 1);
        v8 = *v5;
        v5 += 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = sub_1B1DC3B00(v6, v7);
        *(_QWORD *)((char *)v3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
        v10 = (uint64_t *)(v3[6] + 16 * v9);
        *v10 = v6;
        v10[1] = v7;
        *(_QWORD *)(v3[7] + 8 * v9) = v8;
        ++v3[2];
        --v4;
      }
      while (v4);
      swift_release();
    }
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_1B1B7F314(uint64_t a1)
{
  return sub_1B1B7F328(a1, (unint64_t *)&unk_1EEF60000, (void (*)(uint64_t))sub_1B1B9A5D4);
}

_QWORD *sub_1B1B7F328(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99B8C(0, a2, a3);
    v4 = (_QWORD *)sub_1B22296DC();
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      swift_retain();
      v6 = (uint64_t *)(a1 + 48);
      do
      {
        v7 = *(v6 - 2);
        v8 = *(v6 - 1);
        v9 = *v6;
        v6 += 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10 = sub_1B1DC3B00(v7, v8);
        *(_QWORD *)((char *)v4 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
        v11 = (uint64_t *)(v4[6] + 16 * v10);
        *v11 = v7;
        v11[1] = v8;
        *(_QWORD *)(v4[7] + 8 * v10) = v9;
        ++v4[2];
        --v5;
      }
      while (v5);
      swift_release();
    }
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v4;
}

_QWORD *sub_1B1B7F438(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9A560();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        v7 = *v4;
        v4 += 3;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v8 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7F538(uint64_t a1)
{
  return sub_1B1B7F544(a1, (void (*)(_QWORD))sub_1B1B996C0);
}

_QWORD *sub_1B1B7F544(uint64_t a1, void (*a2)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  if (*(_QWORD *)(a1 + 16))
  {
    a2(0);
    v3 = (_QWORD *)sub_1B22296DC();
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      swift_retain();
      v5 = (uint64_t *)(a1 + 48);
      do
      {
        v6 = *(v5 - 2);
        v7 = *(v5 - 1);
        v8 = *v5;
        v5 += 3;
        swift_bridgeObjectRetain();
        v9 = sub_1B1DC3B00(v6, v7);
        *(_QWORD *)((char *)v3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
        v10 = (uint64_t *)(v3[6] + 16 * v9);
        *v10 = v6;
        v10[1] = v7;
        *(_QWORD *)(v3[7] + 8 * v9) = v8;
        ++v3[2];
        --v4;
      }
      while (v4);
      swift_release();
    }
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_1B1B7F63C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99824();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 40);
      do
      {
        v5 = *v4;
        v6 = (id)*(v4 - 1);
        swift_bridgeObjectRetain();
        v7 = sub_1B1DC4238(v6);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = 8 * v7;
        *(_QWORD *)(v2[6] + v8) = v6;
        *(_QWORD *)(v2[7] + v8) = v5;
        ++v2[2];
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7F730(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9D4E0();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (unint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        v7 = *v4;
        v4 += 3;
        swift_retain();
        sub_1B1B632F0(v7);
        v8 = sub_1B1DC423C(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7F830(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9A08C();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (_BYTE *)(a1 + 40);
      do
      {
        v5 = *((_QWORD *)v4 - 1);
        v6 = *v4;
        v4 += 16;
        sub_1B1B1DD24(v5);
        v7 = sub_1B1DC4350(v5);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        *(_QWORD *)(v2[6] + 8 * v7) = v5;
        *(_BYTE *)(v2[7] + v7) = v6;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7F918(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9A02C();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 40);
      do
      {
        v5 = *(v4 - 1);
        v6 = *v4;
        sub_1B1B1DD24(v5);
        v7 = sub_1B1DC4350(v5);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = 8 * v7;
        *(_QWORD *)(v2[6] + v8) = v5;
        *(_QWORD *)(v2[7] + v8) = v6;
        ++v2[2];
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7FA04(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99FC8();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (_BYTE *)(a1 + 72);
      do
      {
        v5 = *((_QWORD *)v4 - 5);
        v6 = *((_QWORD *)v4 - 4);
        v7 = *((_QWORD *)v4 - 3);
        v8 = *(v4 - 16);
        v9 = *((_QWORD *)v4 - 1);
        v10 = *v4;
        v4 += 48;
        swift_bridgeObjectRetain();
        sub_1B1B1DD24(v7);
        v11 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
        v12 = (uint64_t *)(v2[6] + 16 * v11);
        *v12 = v5;
        v12[1] = v6;
        v13 = v2[7] + 32 * v11;
        *(_QWORD *)v13 = v7;
        *(_BYTE *)(v13 + 8) = v8;
        *(_QWORD *)(v13 + 16) = v9;
        *(_BYTE *)(v13 + 24) = v10;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7FB30(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99DB0(0, &qword_1EEF5B3B8, (void (*)(uint64_t))type metadata accessor for XcodeInfo, (void (*)(void))sub_1B1B99E24);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = a1 + 32;
      swift_retain();
      do
      {
        v5 = *(_BYTE *)v4;
        v6 = *(_QWORD *)(v4 + 8);
        v7 = *(_BYTE *)(v4 + 1);
        swift_retain();
        sub_1B1DC43A8(v5);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (char *)(v2[6] + 2 * v8);
        *v9 = v5;
        v9[1] = v7;
        *(_QWORD *)(v2[7] + 8 * v8) = v6;
        ++v2[2];
        v4 += 16;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7FC54(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t *v10;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9BD64(0, (unint64_t *)&qword_1EEF5B950, (uint64_t)&unk_1ED4BA680, 0x1E0CB3650, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1B9DAD4);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (void **)(a1 + 48);
      do
      {
        v5 = (uint64_t)*(v4 - 2);
        v6 = (uint64_t)*(v4 - 1);
        v7 = *v4;
        v4 += 3;
        swift_bridgeObjectRetain();
        v8 = v7;
        v9 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
        v10 = (uint64_t *)(v2[6] + 16 * v9);
        *v10 = v5;
        v10[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v9) = v8;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B7FD74(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD v12[2];
  uint64_t v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9D728();
    v2 = sub_1B22296DC();
    v3 = (_QWORD *)v2;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = v2 + 64;
      v6 = a1 + 32;
      swift_retain();
      do
      {
        sub_1B1B99B3C(v6, (uint64_t)v12, &qword_1EEF5B890);
        v7 = sub_1B1DC44E0((uint64_t)v12);
        *(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
        v8 = v3[6] + 40 * v7;
        v9 = v13;
        v10 = v12[1];
        *(_OWORD *)v8 = v12[0];
        *(_OWORD *)(v8 + 16) = v10;
        *(_QWORD *)(v8 + 32) = v9;
        sub_1B1A0DDAC(&v14, (_OWORD *)(v3[7] + 32 * v7));
        ++v3[2];
        v6 += 72;
        --v4;
      }
      while (v4);
      swift_release();
    }
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_1B1B7FEC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  sub_1B1B9A958(0, &qword_1ED4BA868, (void (*)(uint64_t))MEMORY[0x1E0DEC990]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v20 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9A9BC();
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &v7[*(int *)(v3 + 48)];
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v20[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9C9A0(v14, (uint64_t)v7, &qword_1ED4BA868, (void (*)(uint64_t))MEMORY[0x1E0DEC990]);
        v16 = sub_1B1DC3F30((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B2229610();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v7, v18);
        sub_1B1A0DDAC(v11, (_OWORD *)(v9[7] + 32 * v16));
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B80070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  sub_1B1B9A958(0, &qword_1ED4BF570, (void (*)(uint64_t))type metadata accessor for TextureCache.TextureKey);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (unsigned __int8 *)v20 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9C0A8();
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = (uint64_t)&v7[*(int *)(v3 + 48)];
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v20[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9C9A0(v14, (uint64_t)v7, &qword_1ED4BF570, (void (*)(uint64_t))type metadata accessor for TextureCache.TextureKey);
        v16 = sub_1B1DC457C(v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = type metadata accessor for TextureCache.TextureKey();
        sub_1B1A025EC((uint64_t)v7, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        sub_1B1B9C128(v11, v9[7] + 160 * v16);
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B8021C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99918();
    v2 = sub_1B22296DC();
    v3 = (_QWORD *)v2;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = v2 + 64;
      v6 = a1 + 32;
      swift_retain();
      do
      {
        sub_1B1B99B3C(v6, (uint64_t)&v12, (unint64_t *)&qword_1ED4BA350);
        v7 = v12;
        v8 = v13;
        v9 = sub_1B1DC3B00(v12, v13);
        *(_QWORD *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        v10 = (uint64_t *)(v3[6] + 16 * v9);
        *v10 = v7;
        v10[1] = v8;
        sub_1B1A0DDAC(&v14, (_OWORD *)(v3[7] + 32 * v9));
        ++v3[2];
        v6 += 48;
        --v4;
      }
      while (v4);
      swift_release();
    }
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_1B1B8035C(uint64_t a1)
{
  return sub_1B1B80378(a1, (unint64_t *)&unk_1EEF5B770, (void (*)(uint64_t))type metadata accessor for Node, (unint64_t *)&qword_1EEF60190);
}

_QWORD *sub_1B1B80378(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  sub_1B1B9C9F0(0, a2, a3);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v25 - v12;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9CAEC(0, a4, a3);
    v14 = sub_1B22296DC();
    v15 = (_QWORD *)v14;
    v16 = *(_QWORD *)(a1 + 16);
    if (v16)
    {
      v17 = *(int *)(v9 + 48);
      v25 = a1;
      v26 = v17;
      v18 = v14 + 64;
      v19 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v20 = *(_QWORD *)(v10 + 72);
      swift_retain();
      do
      {
        sub_1B1B9D584(v19, (uint64_t)v13, a2, a3);
        v21 = sub_1B1DC3CA8((uint64_t)v13);
        *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        v22 = v15[6];
        v23 = sub_1B222826C();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v13, v23);
        *(_QWORD *)(v15[7] + 8 * v21) = *(_QWORD *)&v13[v26];
        ++v15[2];
        v19 += v20;
        --v16;
      }
      while (v16);
      swift_release();
    }
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v15;
}

_QWORD *sub_1B1B80504(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B380, (void (*)(uint64_t))_s12ParameterOutCMa);
}

_QWORD *sub_1B1B80518(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B388, (void (*)(uint64_t))_s11MetadataSetCMa);
}

_QWORD *sub_1B1B8052C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v8[40];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99DB0(0, (unint64_t *)&unk_1EEF5B7A8, (void (*)(uint64_t))sub_1B1B9CCA4, (void (*)(void))sub_1B1B9CCE0);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 72);
      do
      {
        sub_1B19FA278((uint64_t)(v4 - 5), (uint64_t)v8);
        v5 = *v4;
        v4 += 6;
        sub_1B1B9C750((uint64_t)v8);
        v6 = sub_1B1DC3EBC((uint64_t)v8);
        *(_QWORD *)((char *)v2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
        sub_1B19FA278((uint64_t)v8, v2[6] + 40 * v6);
        *(_QWORD *)(v2[7] + 8 * v6) = v5;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B8065C(uint64_t a1)
{
  return sub_1B1B80670(a1, &qword_1EEF5B738, (void (*)(uint64_t))type metadata accessor for SceneAssetRegistryEntry);
}

_QWORD *sub_1B1B80670(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99B8C(0, a2, a3);
    v4 = (_QWORD *)sub_1B22296DC();
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      swift_retain();
      v6 = (uint64_t *)(a1 + 48);
      do
      {
        v7 = *(v6 - 2);
        v8 = *(v6 - 1);
        v9 = *v6;
        v6 += 3;
        swift_bridgeObjectRetain();
        swift_retain();
        v10 = sub_1B1DC3B00(v7, v8);
        *(_QWORD *)((char *)v4 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
        v11 = (uint64_t *)(v4[6] + 16 * v10);
        *v11 = v7;
        v11[1] = v8;
        *(_QWORD *)(v4[7] + 8 * v10) = v9;
        ++v4[2];
        --v5;
      }
      while (v5);
      swift_release();
    }
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v4;
}

_QWORD *sub_1B1B80780(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_1B1B9A958(0, &qword_1ED4B7B28, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v22 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9C824();
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &v7[*(int *)(v3 + 48)];
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v22[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9C9A0(v14, (uint64_t)v7, &qword_1ED4B7B28, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        v16 = sub_1B1DC49A8((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B2228110();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v7, v18);
        v19 = (_QWORD *)(v9[7] + 16 * v16);
        v20 = *((_QWORD *)v11 + 1);
        *v19 = *(_QWORD *)v11;
        v19[1] = v20;
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B8092C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  sub_1B1B9D5D0(0, &qword_1EEF5B868, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (_QWORD *)((char *)v23 - v6);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99B8C(0, &qword_1EEF5B870, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = (char *)v7 + *(int *)(v3 + 48);
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v23[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9DC78(v14, (uint64_t)v7, (uint64_t)&qword_1EEF5B868, (uint64_t)MEMORY[0x1E0CAFFF8], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1B9D5D0);
        v17 = *v7;
        v16 = v7[1];
        v18 = sub_1B1DC3B00(*v7, v16);
        *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = (uint64_t *)(v9[6] + 16 * v18);
        *v19 = v17;
        v19[1] = v16;
        v20 = v9[7];
        v21 = sub_1B2228110();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v11, v21);
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B80B00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  sub_1B1B9D330();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9D3B4();
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(int *)(v3 + 48);
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v20[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1792810(v14, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1B1B9D330);
        v16 = sub_1B1DC3CA8((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B222826C();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v7, v18);
        *(_QWORD *)(v9[7] + 8 * v16) = *(_QWORD *)&v7[v11];
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B80C7C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9A8F4();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        swift_bridgeObjectRetain();
        v7 = *v4;
        v4 += 3;
        v8 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B80D74(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9AB5C();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 40);
      do
      {
        v5 = *v4;
        v6 = (id)*(v4 - 1);
        swift_retain();
        v7 = sub_1B1DC4BA0((uint64_t)v6);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = 8 * v7;
        *(_QWORD *)(v2[6] + v8) = v6;
        *(_QWORD *)(v2[7] + v8) = v5;
        ++v2[2];
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B80E68(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9AEA8(0, &qword_1EEF60010, &qword_1EEF5B4D0, 0x1E0CC77C8, &qword_1EEF5B4D8);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 40);
      do
      {
        v5 = (id)*(v4 - 1);
        v6 = *v4;
        v4 += 2;
        v7 = sub_1B1DC4BA0((uint64_t)v5);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = 8 * v7;
        *(_QWORD *)(v2[6] + v8) = v5;
        *(_QWORD *)(v2[7] + v8) = v6;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B80F78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99B8C(0, (unint64_t *)&unk_1EEF5B6F0, type metadata accessor for vfx_vertex_attribute);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        v7 = *v4;
        v4 += 3;
        swift_bridgeObjectRetain();
        v8 = sub_1B1DC3B00(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B81090(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9AEA8(0, &qword_1EEF5B548, &qword_1EEF5E8B0, (uint64_t)off_1E636B5E0, &qword_1EEF5B550);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 40);
      do
      {
        v5 = (id)*(v4 - 1);
        v6 = *v4;
        v4 += 2;
        v7 = sub_1B1DC4CC4((uint64_t)v5);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = 8 * v7;
        *(_QWORD *)(v2[6] + v8) = v5;
        *(_QWORD *)(v2[7] + v8) = v6;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B811A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9AEA8(0, (unint64_t *)&unk_1EEF5FFA0, &qword_1EEF5B4F0, (uint64_t)off_1E636B5B8, &qword_1EEF5B540);
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 40);
      do
      {
        v5 = (id)*(v4 - 1);
        v6 = *v4;
        v4 += 2;
        v7 = sub_1B1DC4C78((uint64_t)v5);
        *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
        v8 = 8 * v7;
        *(_QWORD *)(v2[6] + v8) = v5;
        *(_QWORD *)(v2[7] + v8) = v6;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B812B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9AE04();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 48);
      do
      {
        v5 = *(v4 - 2);
        v6 = *(v4 - 1);
        v7 = *v4;
        v4 += 3;
        sub_1B1A0DC90(v5, v6);
        v8 = sub_1B1DC4BEC(v5, v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = (uint64_t *)(v2[6] + 16 * v8);
        *v9 = v5;
        v9[1] = v6;
        *(_QWORD *)(v2[7] + 8 * v8) = v7;
        ++v2[2];
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B813AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  sub_1B1B9A958(0, &qword_1EEF5B520, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v20 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9AD84();
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(int *)(v3 + 48);
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v20[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1B9C9A0(v14, (uint64_t)v7, &qword_1EEF5B520, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        v16 = sub_1B1DC49A8((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B2228110();
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v7, v18);
        *(_QWORD *)(v9[7] + 8 * v16) = *(_QWORD *)&v7[v11];
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B81550(uint64_t a1)
{
  return sub_1B1B81894(a1, (void (*)(_QWORD))sub_1B1B9AF38, &qword_1EEF5B568, type metadata accessor for VFXWorldLoaderOption, sub_1B1DC4238);
}

_QWORD *sub_1B1B81574(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9C4B0();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (uint64_t *)(a1 + 56);
      do
      {
        v5 = *(v4 - 2);
        v6 = *((_BYTE *)v4 - 8);
        v7 = *v4;
        v8 = v4[1];
        v10 = v4[2];
        v9 = v4[3];
        v11 = *((_BYTE *)v4 + 32);
        v13 = v4[5];
        v12 = v4[6];
        *(_QWORD *)&v19 = *(v4 - 3);
        *((_QWORD *)&v19 + 1) = v5;
        LOBYTE(v20) = v6;
        *((_QWORD *)&v20 + 1) = v7;
        v21 = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14 = sub_1B1DC4DF8((uint64_t)&v19);
        *(_QWORD *)((char *)v2 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
        v15 = v2[6] + 40 * v14;
        v16 = v20;
        *(_OWORD *)v15 = v19;
        *(_OWORD *)(v15 + 16) = v16;
        *(_QWORD *)(v15 + 32) = v21;
        v17 = v2[7] + 40 * v14;
        *(_QWORD *)v17 = v10;
        *(_QWORD *)(v17 + 8) = v9;
        *(_BYTE *)(v17 + 16) = v11;
        *(_QWORD *)(v17 + 24) = v13;
        *(_QWORD *)(v17 + 32) = v12;
        ++v2[2];
        v4 += 10;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *sub_1B1B816D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  _QWORD v24[2];

  sub_1B1B9C414();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9D198(0, (unint64_t *)&unk_1ED4BA880, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECD58]);
    v8 = sub_1B22296DC();
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &v7[*(int *)(v3 + 48)];
      v12 = v8 + 64;
      v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v24[1] = a1;
      v14 = a1 + v13;
      v15 = *(_QWORD *)(v4 + 72);
      swift_retain();
      do
      {
        sub_1B1792810(v14, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1B1B9C414);
        v16 = sub_1B1DC3CA8((uint64_t)v7);
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = v9[6];
        v18 = sub_1B222826C();
        v19 = *(_QWORD *)(v18 - 8);
        v20 = *(_QWORD *)(v19 + 72) * v16;
        v21 = v17 + v20;
        v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
        v22(v21, v7, v18);
        v22(v9[7] + v20, v11, v18);
        ++v9[2];
        v14 += v15;
        --v10;
      }
      while (v10);
      swift_release();
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1B1B81870(uint64_t a1)
{
  return sub_1B1B81894(a1, (void (*)(_QWORD))sub_1B1B9B088, (unint64_t *)&qword_1EEF5B5A0, type metadata accessor for LoadingOption, sub_1B1DC4238);
}

_QWORD *sub_1B1B81894(uint64_t a1, void (*a2)(_QWORD), unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  __int128 v18;

  if (*(_QWORD *)(a1 + 16))
  {
    a2(0);
    v9 = sub_1B22296DC();
    v10 = (_QWORD *)v9;
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v12 = v9 + 64;
      v13 = a1 + 32;
      swift_retain();
      do
      {
        sub_1B1B9C9A0(v13, (uint64_t)&v17, a3, a4);
        v14 = v17;
        v15 = a5(v17);
        *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(v10[6] + 8 * v15) = v14;
        sub_1B1A0DDAC(&v18, (_OWORD *)(v10[7] + 32 * v15));
        ++v10[2];
        v13 += 40;
        --v11;
      }
      while (v11);
      swift_release();
    }
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1B1B819CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B9B234();
    v2 = (_QWORD *)sub_1B22296DC();
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      swift_retain();
      v4 = (void **)(a1 + 40);
      do
      {
        v5 = *v4;
        v6 = *(v4 - 1);
        v7 = v5;
        v8 = sub_1B1DC4238(v6);
        *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
        v9 = 8 * v8;
        *(_QWORD *)(v2[6] + v9) = v6;
        *(_QWORD *)(v2[7] + v9) = v7;
        ++v2[2];
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_release();
    }
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B1B81AC0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_1B1B81AC8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

double (*sub_1B1B81AD0())(_QWORD)
{
  return nullsub_16;
}

BOOL static VFXSaver.Layout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t VFXSaver.Layout.hash(into:)()
{
  return sub_1B222A078();
}

uint64_t VFXSaver.Layout.hashValue.getter()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1B81B64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void sub_1B1B81B7C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 25);
}

_BYTE *sub_1B1B81B88(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = *result;
  return result;
}

double (*sub_1B1B81B94())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1B81BA4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t sub_1B1B81BAC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 26) = result;
  return result;
}

double (*sub_1B1B81BB4())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1B81BC4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 27);
}

uint64_t sub_1B1B81BCC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 27) = result;
  return result;
}

double (*sub_1B1B81BD4())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1B81BE4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1B81BEC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

double (*sub_1B1B81BFC())(_QWORD)
{
  return nullsub_16;
}

double VFXSaver.__allocating_init(world:)(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  *(_QWORD *)&result = 0x1000000010000;
  *(_DWORD *)(v2 + 24) = 0x10000;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  return result;
}

uint64_t VFXSaver.init(world:)(uint64_t a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = 0x10000;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

char *sub_1B1B81C60(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  char *v7;

  v7 = sub_1B1B81C94(a1, a2, a3, a4, a5);
  if (!v5)

  return v7;
}

char *sub_1B1B81C94(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  id v49;
  id v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  void *v71;
  id v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  uint64_t v86;
  char v87;
  _QWORD v88[3];
  id v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  id v93;
  id v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;

  LODWORD(v97) = a4;
  v101 = a1;
  v9 = 0xEB00000000747369;
  v98 = sub_1B2227CD8();
  MEMORY[0x1E0C80A78](v98, v10);
  v12 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (_QWORD *)((char *)v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = sub_1B1B7FC54(MEMORY[0x1E0DEE9D8]);
  v17 = *(_BYTE *)(v5 + 27);
  v102 = v5;
  if ((v17 & 1) != 0)
  {
    LODWORD(v95) = 1;
    v100 = 0x6C702E656E656373;
  }
  else
  {
    v18 = *(_BYTE *)(v5 + 24) == 0;
    v19 = 0x736A2E656E656373;
    if (*(_BYTE *)(v5 + 24))
      v19 = 0x66762E656E656373;
    v100 = v19;
    if (v18)
      v9 = 0xEA00000000006E6FLL;
    else
      v9 = 0xEC0000006E696278;
    if (v18)
      v20 = 3;
    else
      v20 = 2;
    LODWORD(v95) = v20;
  }
  v96 = v9;
  v108 = a5;
  swift_bridgeObjectRetain();
  sub_1B1B8A534((uint64_t *)&v106, 2048);
  v21 = (char *)v16 + v13[5];
  v22 = sub_1B222826C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a3, v22);
  v23 = *(_BYTE *)(v102 + 24);
  v24 = v108;
  v25 = v13[10];
  *v16 = v101;
  v16[1] = a2;
  *(_QWORD *)((char *)v16 + v13[6]) = 2048;
  *((_BYTE *)v16 + v13[7]) = v23;
  *((_BYTE *)v16 + v13[8]) = v97 & 1;
  v26 = (_QWORD *)((char *)v16 + v25);
  *(_QWORD *)((char *)v16 + v13[9]) = v24;
  *v26 = v100;
  v26[1] = v9;
  sub_1B2227D20();
  swift_allocObject();
  v97 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = sub_1B2227D14();
  v28 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE0E0];
  sub_1B1791524(0, &qword_1EEF5B2F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE0E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1B226CD10;
  sub_1B2227CCC();
  v30 = v27;
  sub_1B2227CC0();
  *(_QWORD *)&v106 = v29;
  sub_1B19E52CC(&qword_1EEF5B2F8, v28, MEMORY[0x1E0CAE0F8]);
  sub_1B1791524(0, &qword_1EEF5B300, v28, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1B8A62C();
  sub_1B2229364();
  sub_1B2227CE4();
  sub_1B19E52CC((unint64_t *)&unk_1EEF5B310, (uint64_t (*)(uint64_t))type metadata accessor for BundleInfo, (uint64_t)&unk_1B22C06A0);
  v31 = v99;
  v32 = sub_1B2227CF0();
  if (v31)
  {
    sub_1B1B8A68C((uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = v32;
    v35 = v33;
    v99 = v30;
    v36 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    sub_1B1A0DC90(v34, v35);
    v37 = (void *)sub_1B2228170();
    v38 = objc_msgSend(v36, sel_initRegularFileWithContents_, v37);
    sub_1B1A0DADC(v34, v35);

    v39 = v38;
    v40 = v109;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v106 = v40;
    v98 = v34;
    v94 = v39;
    sub_1B1B86688((uint64_t)v39, 0x6F736A2E6F666E69, 0xE90000000000006ELL, isUniquelyReferenced_nonNull_native);
    v109 = (_QWORD *)v106;
    swift_bridgeObjectRelease();
    v107 = MEMORY[0x1E0DEE9E8];
    v106 = xmmword_1B226DCF0;
    v42 = v102;
    v93 = *(id *)(v102 + 16);
    v43 = (char *)objc_msgSend(v93, sel_scene);
    v44 = *(_QWORD *)&v43[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
    swift_retain();

    swift_getKeyPath();
    v45 = *(_QWORD *)(v44 + 176);
    swift_retain();
    v46 = (char *)sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v45, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B95400);
    swift_release();
    swift_release();
    v105 = 0;
    v47 = v97;
    swift_bridgeObjectRetain();
    swift_retain();
    v49 = sub_1B1B98B50(v44, v46, v42, v42, v101, v47, &v109, &v107, (uint64_t *)&v106, &v105, v95);
    v50 = v93;
    v92 = v44;
    v90 = v35;
    swift_release();
    swift_bridgeObjectRelease();
    v51 = v105;
    v95 = v46;
    v91 = v16;
    if (v105)
    {
      *(_QWORD *)(v105 + 112) = v49;
      swift_bridgeObjectRelease();
      swift_retain();
      v52 = (char *)objc_msgSend(v50, sel_scene);
      v53 = *(_QWORD *)&v52[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
      swift_retain();

      *(_QWORD *)(v51 + 16) = v53;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v54 = v96;
    v55 = v106;
    v56 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    sub_1B1A0DC90(v55, *((unint64_t *)&v55 + 1));
    v57 = (void *)sub_1B2228170();
    v58 = objc_msgSend(v56, sel_initRegularFileWithContents_, v57);
    v88[1] = *((_QWORD *)&v55 + 1);
    v88[2] = v55;
    sub_1B1A0DADC(v55, *((unint64_t *)&v55 + 1));

    v59 = v58;
    v60 = (uint64_t)v109;
    v61 = swift_isUniquelyReferenced_nonNull_native();
    v103 = (_QWORD *)v60;
    v89 = v59;
    sub_1B1B86688((uint64_t)v59, v100, v54, v61);
    v62 = (uint64_t)v103;
    v109 = v103;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = (void *)objc_opt_self();
    swift_retain();
    v64 = (void *)sub_1B2228728();
    objc_msgSend(v63, sel_setValue_forKey_, v51, v64);
    swift_release();

    sub_1B1B7FD74(MEMORY[0x1E0DEE9D8]);
    v65 = (void *)sub_1B2228524();
    swift_bridgeObjectRelease();
    v66 = objc_msgSend(v93, sel_dataRepresentationWithOptions_, v65);

    v67 = sub_1B222817C();
    v69 = v68;

    v70 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    sub_1B1A0DC90(v67, v69);
    v71 = (void *)sub_1B2228170();
    v72 = objc_msgSend(v70, (SEL)&classRef_VFXLight + 2, v71);
    sub_1B1A0DADC(v67, v69);

    if (v72)
    {
      v73 = swift_isUniquelyReferenced_nonNull_native();
      v103 = (_QWORD *)v62;
      sub_1B1B86688((uint64_t)v72, 0x6C702E646C726F77, 0xEB00000000747369, v73);
      v109 = v103;
      swift_bridgeObjectRelease();
    }
    else
    {

    }
    if (v95 && *(_QWORD *)&v95[OBJC_IVAR____TtC3VFX12AssetManager_authoringFileManager])
    {
      v74 = swift_retain();
      sub_1B1D54A18(v74, &v107);
      swift_release();
      v83 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
      sub_1B1B9DAD4(0, &qword_1ED4BA680);
      v84 = (void *)sub_1B2228524();
      swift_bridgeObjectRelease();
      v85 = objc_msgSend(v83, sel_initDirectoryWithFileWrappers_, v84);

      if (v85)
      {
        v86 = (uint64_t)v109;
        v87 = swift_isUniquelyReferenced_nonNull_native();
        v103 = (_QWORD *)v86;
        sub_1B1B86688((uint64_t)v85, 0x737465737361, 0xE600000000000000, v87);
        v109 = v103;
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    else
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v103 = 0;
      v104 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v103 = (_QWORD *)0xD000000000000015;
      v104 = 0x80000001B23314E0;
      sub_1B2228890();
      v75 = (uint64_t)v103;
      v76 = v104;
      v77 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v103 = 0;
      swift_retain();
      sub_1B1F1AD70(v77, (uint64_t *)&v103, v75, v76);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v78 = v98;
    v79 = v94;
    v80 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    sub_1B1B9DAD4(0, &qword_1ED4BA680);
    swift_bridgeObjectRetain();
    v81 = (void *)sub_1B2228524();
    swift_bridgeObjectRelease();
    v82 = objc_msgSend(v80, sel_initDirectoryWithFileWrappers_, v81);

    if ((*(_BYTE *)(v102 + 25) & 1) != 0)
    {
      v12 = (char *)sub_1B1B98E44(v82, (uint64_t)v101, v97);
      swift_release();
      swift_release();

      sub_1B1A0DADC(v67, v69);
      sub_1B1A0DADC(v78, v90);
      sub_1B1B8A68C((uint64_t)v91);
    }
    else
    {
      sub_1B1B8A68C((uint64_t)v91);
      sub_1B1A0DADC(v78, v90);

      sub_1B1A0DADC(v67, v69);
      swift_release();
      swift_release();

      v12 = (char *)v82;
    }
    swift_release();
    sub_1B1A0DADC(v106, *((unint64_t *)&v106 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_1B1B8293C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, unsigned __int8 a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void (*v44)(char *, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  unint64_t v51;
  unint64_t v52;
  id v53;
  void *v54;
  id v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  void *v72;
  id v73;
  _QWORD *v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t inited;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void (*v99)(char *, uint64_t);
  id v100;
  void *v101;
  id v102;
  _QWORD *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  id v118;
  void *v119;
  id v120;
  void (*v121)(char *, uint64_t);
  _QWORD *v122;
  char v123;
  void *v124;
  _QWORD v125[3];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  void (*v139)(char *, uint64_t);
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD v144[23];
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151[12];
  _OWORD v152[12];
  uint64_t v153;
  int v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  unint64_t v159;

  v140 = a8;
  v137 = a7;
  v138 = a6;
  v142 = a5;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v133 = (uint64_t)v125 - v15;
  v16 = sub_1B2228110();
  v135 = *(_QWORD *)(v16 - 8);
  v136 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v132 = (char *)v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v134 = (char *)v125 - v21;
  v22 = sub_1B22287A0();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (void (*)(char *, uint64_t))((char *)v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = a2;
  v27 = *(unsigned __int8 *)(a2 + 24);
  type metadata accessor for SwiftScriptCodeGen();
  swift_initStackObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v143 = a3;
  v28 = sub_1B1B5A24C(a1, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();
  v29 = v159;
  v30 = sub_1B1B59590(v27);
  if (v29)
    return swift_release();
  v126 = v23;
  LODWORD(v130) = v27;
  v139 = v26;
  v159 = v22;
  v131 = a4;
  v127 = v28;
  v128 = a1;
  if (v30 < 1)
  {
    v41 = 0;
    swift_bridgeObjectRelease();
    v38 = v128;
    v39 = v142;
  }
  else
  {
    v129 = 0;
    v31 = v139;
    sub_1B2228788();
    v32 = sub_1B2228758();
    v34 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, unint64_t))(v126 + 8))(v31, v159);
    v35 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    v36 = (void *)sub_1B2228170();
    v37 = objc_msgSend(v35, sel_initRegularFileWithContents_, v36);
    sub_1B1A0DAC8(v32, v34);

    v38 = v128;
    v39 = v142;
    if (v37)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v144[0] = *v39;
      *v39 = 0x8000000000000000;
      sub_1B1B86688((uint64_t)v37, 0x6977732E65646F63, 0xEA00000000007466, isUniquelyReferenced_nonNull_native);
      *v39 = v144[0];
      swift_bridgeObjectRelease();
    }
    else
    {

    }
    v41 = v129;
  }
  v42 = v131;
  v43 = v143;
  v44 = v139;
  v45 = v130;
  type metadata accessor for CScriptCodeGen();
  swift_initStackObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v46 = sub_1B1B5A24C(v38, v43, v42);
  swift_release();
  swift_bridgeObjectRelease();
  v47 = v41;
  sub_1B1B5812C(v45);
  v48 = v159;
  if (v47)
    goto LABEL_14;
  v125[2] = v46;
  v129 = 0;
  sub_1B2228788();
  v49 = sub_1B2228758();
  v50 = v44;
  v52 = v51;
  swift_bridgeObjectRelease();
  v126 = *(_QWORD *)(v126 + 8);
  ((void (*)(_QWORD, unint64_t))v126)(v50, v48);
  v53 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
  v54 = (void *)sub_1B2228170();
  v55 = objc_msgSend(v53, sel_initRegularFileWithContents_, v54);
  sub_1B1A0DAC8(v49, v52);

  if (v55)
  {
    v56 = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = *v39;
    *v39 = 0x8000000000000000;
    sub_1B1B86688((uint64_t)v55, 0x7070632E65646F63, 0xE800000000000000, v56);
    *v39 = v144[0];
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v57 = v129;
  v58 = v131;
  v59 = v143;
  v60 = type metadata accessor for MetalScriptCodeGen();
  swift_initStackObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v61 = sub_1B1B5A24C(v38, v59, v58);
  swift_release();
  swift_bridgeObjectRelease();
  v62 = sub_1B1B511D8(v130);
  v63 = v159;
  if (v57)
  {
    swift_release();
LABEL_14:
    swift_release();
    return swift_release();
  }
  v65 = v62;
  v125[1] = v60;
  v129 = 0;
  v130 = v61;
  v144[0] = sub_1B1B503C0();
  v144[1] = v66;
  if (qword_1EEF572C8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1B63320(v65);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v67 = v139;
  sub_1B2228788();
  v68 = sub_1B2228758();
  v70 = v69;
  swift_bridgeObjectRelease();
  ((void (*)(_QWORD, unint64_t))v126)(v67, v63);
  v71 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
  v72 = (void *)sub_1B2228170();
  v73 = objc_msgSend(v71, sel_initRegularFileWithContents_, v72);
  sub_1B1A0DAC8(v68, v70);

  if (v73)
  {
    v74 = v142;
    v75 = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = *v74;
    *v74 = 0x8000000000000000;
    sub_1B1B86688((uint64_t)v73, 0x74656D2E65646F63, 0xEA00000000006C61, v75);
    *v74 = v144[0];
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v77 = v140;
  v76 = v141;
  v78 = *(_QWORD *)(v141 + 32);
  v79 = v129;
  if (!v78 || !*(_QWORD *)(v78 + 16))
  {
    v82 = v137;
    v83 = v128;
    goto LABEL_26;
  }
  v80 = swift_bridgeObjectRetain();
  v81 = sub_1B1F4E9E8(v80);
  sub_1B211F594(v128, v143, v131, v81, 1);
  if (v79)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  swift_bridgeObjectRelease();
  v95 = v134;
  sub_1B2228050();
  swift_bridgeObjectRelease();
  v96 = sub_1B2228128();
  v98 = v97;
  v129 = 0;
  v99 = *(void (**)(char *, uint64_t))(v135 + 8);
  v99(v95, v136);
  v100 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
  sub_1B1A0DC90(v96, v98);
  v101 = (void *)sub_1B2228170();
  v102 = objc_msgSend(v100, sel_initRegularFileWithContents_, v101);
  sub_1B1A0DADC(v96, v98);

  v159 = v98;
  v139 = v99;
  if (v102)
  {
    v103 = v142;
    v104 = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = *v103;
    *v103 = 0x8000000000000000;
    sub_1B1B86688((uint64_t)v102, 0x2E73747069726373, 0xEE00656C646E7562, v104);
    *v103 = v144[0];
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v77 = v140;
  swift_initStackObject();
  v105 = v128;
  swift_retain();
  v106 = v131;
  swift_bridgeObjectRetain();
  sub_1B1B5A24C(v105, v143, v106);
  swift_release();
  swift_bridgeObjectRelease();
  v107 = *(_WORD *)(v78 + 32);
  swift_bridgeObjectRelease();
  LOWORD(v144[0]) = v107;
  v108 = v133;
  v109 = v129;
  sub_1B1B5529C((char *)v144, v133);
  v129 = v109;
  if (!v109)
  {
    v111 = v135;
    v110 = v136;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v108, 1, v136) == 1)
    {
      sub_1B1A0DADC(v96, v159);
      swift_release();
      sub_1B19EC9A4(v108);
      v82 = v137;
      v83 = v128;
    }
    else
    {
      v112 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v132, v108, v110);
      v113 = v129;
      v114 = sub_1B2228128();
      v129 = v113;
      if (v113)
      {
        v139(v112, v110);
        sub_1B1A0DADC(v96, v159);
        swift_release();
        goto LABEL_37;
      }
      v116 = v114;
      v117 = v115;
      v118 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
      v119 = (void *)sub_1B2228170();
      v120 = objc_msgSend(v118, sel_initRegularFileWithContents_, v119);
      sub_1B1A0DADC(v116, v117);

      v121 = v139;
      if (v120)
      {
        v122 = v142;
        v123 = swift_isUniquelyReferenced_nonNull_native();
        v144[0] = *v122;
        *v122 = 0x8000000000000000;
        sub_1B1B86688((uint64_t)v120, 0xD000000000000010, 0x80000001B23315E0, v123);
        *v122 = v144[0];
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v124 = (void *)sub_1B1B83EE8(0xD000000000000010, 0x80000001B23315E0, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EAC16C);
        swift_release();

      }
      sub_1B1A0DADC(v96, v159);
      v77 = v140;
      v82 = v137;
      v83 = v128;
      v121(v132, v136);
    }
    v76 = v141;
LABEL_26:
    sub_1B1C1AA68(v83);
    if (*(_BYTE *)(v76 + 24) == 1)
    {
      sub_1B20954F0();
      sub_1B2095A90();
      sub_1B2095D3C();
      sub_1B209687C();
      sub_1B2096DCC();
      sub_1B209723C();
      v84 = *(_BYTE *)(v76 + 24);
    }
    else
    {
      v84 = 0;
    }
    v85 = v138;
    *v85 = sub_1B1D56F0C(v83, v84);
    swift_bridgeObjectRelease();
    sub_1B1A19B14();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    *(_QWORD *)(inited + 32) = &type metadata for DoNotSave;
    *(_QWORD *)(inited + 40) = &off_1E63C3B10;
    v87 = (char *)MEMORY[0x1E0DEE9D8];
    sub_1B1E569A0(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], inited, MEMORY[0x1E0DEE9D8], 0x200000000uLL, 0, 0, 2, (uint64_t)&v145);
    swift_release();
    swift_bridgeObjectRelease();
    v153 = v145;
    v154 = v146;
    v155 = v147;
    v156 = v148 | 1;
    v157 = v149;
    v158 = v150;
    sub_1B1E8FCE4(v83, (uint64_t)&v153, 0x200000000, v151);
    sub_1B1B41294((uint64_t)v151, (uint64_t)v152, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (*(_QWORD *)&v152[0])
    {
      v152[8] = v152[2];
      v152[9] = v152[3];
      v152[10] = v152[4];
      v152[11] = v152[5];
      v152[6] = v152[0];
      v152[7] = v152[1];
      v87 = (char *)sub_1B1BEA85C();
      sub_1B19ED748(v151);
    }
    v88 = sub_1B2067C28(v87, a9, *(unsigned __int8 *)(v141 + 26));
    v90 = v89;
    v92 = v91;
    sub_1B19ED720((uint64_t)&v145);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v93 = *v82;
    v94 = v82[1];
    *v82 = v88;
    v82[1] = v90;
    sub_1B1A0DADC(v93, v94);
    *v77 = v92;
    return swift_release();
  }
  sub_1B1A0DADC(v96, v159);
  swift_release();
LABEL_37:
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t VFXSaver.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VFXSaver.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_1B1B8371C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  uint64_t v16;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1B1DC3B00(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v16 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B1EA805C();
      v11 = v16;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56) + 88 * v8;
    v13 = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v12 + 32);
    *(_OWORD *)(a3 + 48) = v13;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v12 + 64);
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(v12 + 80);
    v14 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v12;
    *(_OWORD *)(a3 + 16) = v14;
    sub_1B1EA4748(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 80) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t sub_1B1B83834(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3B00(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EA8284();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_1B1EA4920(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B1B83900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3CA8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v16 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B1EA8838();
      v9 = v16;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_1B222826C();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, *(_QWORD *)(v9 + 56) + v13, v11);
    sub_1B1EA4CB8(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v15 = sub_1B222826C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

uint64_t sub_1B1B83A30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1B1DC3CA8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EA93A4();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = sub_1B222826C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  sub_1B1EA50FC(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1B1B83B1C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3F30(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B1EA9950();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_1B2229610();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_1B1A0DDAC((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1B1EA53A0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1B1B83C18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = sub_1B1DC3CA4(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EA9B9C();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_1B1EA5628(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1B83CC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = sub_1B1DC3AC8(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EACC44();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_1B1EA4F70(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1B83D54(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EAD7D4);
}

uint64_t sub_1B1B83D68(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EAE410);
}

uint64_t sub_1B1B83D7C(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EAE41C);
}

double sub_1B1B83D90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  double result;
  uint64_t v12;

  v4 = v3;
  v6 = sub_1B1DC4138(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v12 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B1EAE9C8();
      v10 = v12;
    }
    sub_1B1B99D74(*(_QWORD *)(v10 + 56) + 96 * v8, a3);
    sub_1B1EA68C8(v8, v10);
    *v4 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 80) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_BYTE *)(a3 + 88) = -1;
  }
  return result;
}

uint64_t sub_1B1B83E48(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB1224);
}

uint64_t sub_1B1B83E5C(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB1230);
}

uint64_t sub_1B1B83E70(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB123C);
}

uint64_t sub_1B1B83E84(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB1248);
}

uint64_t sub_1B1B83E98(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB1254);
}

uint64_t sub_1B1B83EAC(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB1260);
}

uint64_t sub_1B1B83EC0(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB126C);
}

uint64_t sub_1B1B83ED4(uint64_t a1, uint64_t a2)
{
  return sub_1B1B83EE8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1B1EA60C0, (void (*)(void))sub_1B1EB1278);
}

uint64_t sub_1B1B83EE8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), void (*a4)(void))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = v4;
  swift_bridgeObjectRetain();
  v10 = sub_1B1DC3B00(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v7;
  v16 = *v7;
  *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    v13 = v16;
  }
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v10);
  a3(v10, v13);
  *v7 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1B1B83FC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1B1DC40B0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EB1650();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_1B1EA6E0C(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1B84078(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3B00(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EB1E14();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6);
  sub_1B1EA73E4(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B1B84174(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = sub_1B1DC3AC8(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1EB2224();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_1B1EA4F70(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1B84208(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v14[7] + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EA7974();
    goto LABEL_6;
  }
  sub_1B1E8FF1C(result, a3 & 1);
  result = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84304(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3B14(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_release();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32BC(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EA7B38();
    goto LABEL_6;
  }
  sub_1B1E9047C(v13, a3 & 1);
  v17 = sub_1B1DC3B14(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32BC(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8440C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B25BD8(a1, v16[7] + 88 * v11);
    goto LABEL_10;
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EA805C();
    goto LABEL_6;
  }
  sub_1B1E90CBC(v15, a4 & 1);
  v18 = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v19 & 1))
  {
    v11 = v18;
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B25BD8(a1, v16[7] + 88 * v11);
LABEL_10:
    sub_1B1EB3380(v11, a2, a3, a1, v16);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1B1DC3AC8(a4);
  v15 = v14;
  v16 = v12[3];
  v17 = v12[2] + ((v14 & 1) == 0);
  if (v16 >= v17 && (a5 & 1) != 0)
  {
LABEL_6:
    v18 = *v6;
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v19 = (uint64_t *)(v18[7] + 24 * v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_release();
      *v19 = a1;
      v19[1] = a2;
      v19[2] = a3;
      return result;
    }
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  if (v16 >= v17 && (a5 & 1) == 0)
  {
    sub_1B1EA7CD0();
    goto LABEL_6;
  }
  sub_1B1E90708(v17, a5 & 1);
  v21 = sub_1B1DC3AC8(a4);
  if ((v15 & 1) == (v22 & 1))
  {
    v13 = v21;
    v18 = *v6;
    if ((v15 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84668(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = v16[7];
      result = swift_unknownObjectRelease();
      *(_QWORD *)(v17 + 8 * v11) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EA8284();
    goto LABEL_6;
  }
  sub_1B1E91000(v15, a4 & 1);
  v19 = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB33E4(v11, a2, a3, a1, v16);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1B1DC3B00(a3, a4);
  v15 = v14;
  v16 = v12[3];
  v17 = v12[2] + ((v14 & 1) == 0);
  if (v16 >= v17 && (a5 & 1) != 0)
  {
LABEL_6:
    v18 = *v6;
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v19 = (uint64_t *)(v18[7] + 16 * v13);
      result = swift_bridgeObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_10;
  }
  if (v16 >= v17 && (a5 & 1) == 0)
  {
    sub_1B1EA8664();
    goto LABEL_6;
  }
  sub_1B1E91634(v17, a5 & 1);
  v21 = sub_1B1DC3B00(a3, a4);
  if ((v15 & 1) == (v22 & 1))
  {
    v13 = v21;
    v18 = *v6;
    if ((v15 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3424(v13, a3, a4, a1, a2, v18);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B848BC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = sub_1B222826C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v14 = sub_1B1DC3CA8(a2);
  v16 = v15;
  v17 = v13[3];
  v18 = v13[2] + ((v15 & 1) == 0);
  if (v17 >= v18 && (a3 & 1) != 0)
  {
LABEL_6:
    v19 = *v4;
    if ((v16 & 1) != 0)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v19[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
    goto LABEL_10;
  }
  if (v17 >= v18 && (a3 & 1) == 0)
  {
    sub_1B1EA8838();
    goto LABEL_6;
  }
  sub_1B1E91BCC(v18, a3 & 1);
  v21 = sub_1B1DC3CA8(a2);
  if ((v16 & 1) == (v22 & 1))
  {
    v14 = v21;
    v19 = *v4;
    if ((v16 & 1) != 0)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v19[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return sub_1B1EB346C(v14, (uint64_t)v12, a1, v19);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84A2C(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  char v15;
  _QWORD *v16;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 < result || (a3 & 1) == 0)
  {
    if (v12 < result || (a3 & 1) != 0)
    {
      sub_1B1E92218(result, a3 & 1);
      result = sub_1B1DC3AC8(a2);
      if ((v11 & 1) != (v14 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v9 = result;
    }
    else
    {
      result = sub_1B1EA8C54();
    }
  }
  v15 = a1 & 1;
  v16 = *v4;
  if ((v11 & 1) == 0)
    return sub_1B1EB3548(v9, a2, v15, v16);
  *(_BYTE *)(v16[7] + v9) = v15;
  return result;
}

uint64_t sub_1B1B84B24(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3AC8(a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (uint64_t *)(v16[7] + 16 * v11);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EA8C84();
    goto LABEL_6;
  }
  sub_1B1E924B0(v15, a4 & 1);
  v19 = sub_1B1DC3AC8(a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84C3C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EA8E58();
    goto LABEL_6;
  }
  sub_1B1E9275C(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84D44(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99A88(a1, v14[7] + 88 * v9, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return sub_1B1EB358C(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EA9030();
    goto LABEL_6;
  }
  sub_1B1E92BBC(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99A88(a1, v14[7] + 88 * v9, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return sub_1B1EB358C(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84E64(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3C04(a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (uint64_t *)(v16[7] + 16 * v11);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
    return sub_1B1EB3608(v11, a3, a1, a2, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EA95D8();
    goto LABEL_6;
  }
  sub_1B1E934FC(v15, a4 & 1);
  v19 = sub_1B1DC3C04(a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3608(v11, a3, a1, a2, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B84F7C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3EBC(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EA9788();
    goto LABEL_6;
  }
  sub_1B1E937F8(v13, a3 & 1);
  v17 = sub_1B1DC3EBC(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3648(v9, a2, a1, v14);
    return sub_1B1B9C750(a2);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8508C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v27 = a1;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v15 = sub_1B1DC3CA8(a3);
  v17 = v16;
  v18 = v14[3];
  v19 = v14[2] + ((v16 & 1) == 0);
  if (v18 < v19 || (a4 & 1) == 0)
  {
    if (v18 < v19 || (a4 & 1) != 0)
    {
      sub_1B1E9319C(v19, a4 & 1);
      v20 = sub_1B1DC3CA8(a3);
      if ((v17 & 1) != (v21 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v15 = v20;
    }
    else
    {
      sub_1B1EA93A4();
    }
  }
  v22 = v27;
  v23 = *v5;
  if ((v17 & 1) != 0)
  {
    v24 = (uint64_t *)(v23[7] + 16 * v15);
    result = swift_release();
    *v24 = v22;
    v24[1] = a2;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
    return sub_1B1EB36BC(v15, (uint64_t)v13, v22, a2, v23);
  }
  return result;
}

uint64_t sub_1B1B851E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EA9944, (void (*)(void))sub_1B1E93B20, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

_OWORD *sub_1B1B85204(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_1B2229610();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v14 = sub_1B1DC3F30(a2);
  v16 = v15;
  v17 = v13[3];
  v18 = v13[2] + ((v15 & 1) == 0);
  if (v17 >= v18 && (a3 & 1) != 0)
  {
LABEL_6:
    v19 = *v4;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      v20 = (_OWORD *)(v19[7] + 32 * v14);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
      return sub_1B1A0DDAC(a1, v20);
    }
    goto LABEL_10;
  }
  if (v17 >= v18 && (a3 & 1) == 0)
  {
    sub_1B1EA9950();
    goto LABEL_6;
  }
  sub_1B1E93B2C(v18, a3 & 1);
  v22 = sub_1B1DC3F30(a2);
  if ((v16 & 1) == (v23 & 1))
  {
    v14 = v22;
    v19 = *v4;
    if ((v16 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return sub_1B1EB3754(v14, (uint64_t)v12, a1, v19);
  }
  result = (_OWORD *)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85374(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EA9B84, (void (*)(void))sub_1B1E93E78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B85390(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EA9B90, (void (*)(void))sub_1B1E93E84, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B853AC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3CA4(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v14[7] + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EA9B9C();
    goto LABEL_6;
  }
  sub_1B1E93E90(result, a3 & 1);
  result = sub_1B1DC3CA4(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B854B0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_release();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EA9D2C();
    goto LABEL_6;
  }
  sub_1B1E94400(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B855B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v15 = sub_1B1DC3B00(a4, a5);
  v17 = v16;
  v18 = v14[3];
  result = v14[2] + ((v16 & 1) == 0);
  if (v18 < result || (a6 & 1) == 0)
  {
    if (v18 < result || (a6 & 1) != 0)
    {
      sub_1B1E94A04(result, a6 & 1);
      result = sub_1B1DC3B00(a4, a5);
      if ((v17 & 1) != (v20 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v15 = result;
    }
    else
    {
      result = sub_1B1EAA140();
    }
  }
  v21 = a3 & 1;
  v22 = *v7;
  if ((v17 & 1) != 0)
  {
    v23 = v22[7] + 24 * v15;
    *(_QWORD *)v23 = a1;
    *(_QWORD *)(v23 + 8) = a2;
    *(_BYTE *)(v23 + 16) = v21 != 0;
  }
  else
  {
    sub_1B1EB37EC(v15, a4, a5, a1, a2, v21, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1B856F8(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3F80(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB383C(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAA314();
    goto LABEL_6;
  }
  sub_1B1E94D14(v13, a3 & 1);
  v17 = sub_1B1DC3F80(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB383C(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85800(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3CCC(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v14[7] + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB383C(v9, a2, a1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EAA678();
    goto LABEL_6;
  }
  sub_1B1E952A4(result, a3 & 1);
  result = sub_1B1DC3CCC(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB383C(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85904(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B85974(a1, a2, a3, a4, (void (*)(void))sub_1B1EAA7F0, (void (*)(void))sub_1B1E95540, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B85920(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EAA7FC, (void (*)(void))sub_1B1E9554C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B8593C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B85974(a1, a2, a3, a4, (void (*)(void))sub_1B1EAA814, (void (*)(void))sub_1B1E95564, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B85958(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B85974(a1, a2, a3, a4, (void (*)(void))sub_1B1EAA820, (void (*)(void))sub_1B1E95570, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B85974(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  v10 = v7;
  v15 = *v7;
  v16 = sub_1B1DC3B00(a2, a3);
  v18 = v17;
  v19 = *(_QWORD *)(v15 + 24);
  v20 = *(_QWORD *)(v15 + 16) + ((v17 & 1) == 0);
  if (v19 >= v20 && (a4 & 1) != 0)
  {
LABEL_6:
    v21 = *v10;
    if ((v18 & 1) != 0)
    {
LABEL_7:
      v22 = *(_QWORD *)(v21 + 56);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v22 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v19 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_6;
  }
  a6();
  v24 = sub_1B1DC3B00(a2, a3);
  if ((v18 & 1) == (v25 & 1))
  {
    v16 = v24;
    v21 = *v10;
    if ((v18 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    a7(v16, a2, a3, a1, v21);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85ABC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v14[7] + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EA920C();
    goto LABEL_6;
  }
  sub_1B1E92F04(result, a3 & 1);
  result = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85BC0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9A484(a1, v14[7] + 80 * v9);
    return sub_1B1EB3878(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAA9D8();
    goto LABEL_6;
  }
  sub_1B1E95854(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9A484(a1, v14[7] + 80 * v9);
    return sub_1B1EB3878(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85CC4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99788(a1, v14[7] + 56 * v9);
    return sub_1B1EB38D8(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAAB90();
    goto LABEL_6;
  }
  sub_1B1E95B60(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99788(a1, v14[7] + 56 * v9);
    return sub_1B1EB38D8(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85DC8(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_BYTE *)(v14[7] + v9) = a1 & 1;
      return result;
    }
    return sub_1B1EB3938(v9, a2, a1 & 1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EAAD6C();
    goto LABEL_6;
  }
  sub_1B1E95E84(result, a3 & 1);
  result = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3938(v9, a2, a1 & 1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B85EC8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99A88(a1, v14[7] + 80 * v9, (unint64_t *)&unk_1EEF5AE70, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    return sub_1B1EB3974(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAAF18();
    goto LABEL_6;
  }
  sub_1B1E96110(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99A88(a1, v14[7] + 80 * v9, (unint64_t *)&unk_1EEF5AE70, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    return sub_1B1EB3974(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

id sub_1B1B85FE8(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id result;
  uint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_1B1DC4238(a2);
  v10 = v9;
  v11 = v7[3];
  v12 = v7[2] + ((v9 & 1) == 0);
  if (v11 >= v12 && (a3 & 1) != 0)
  {
LABEL_6:
    v13 = *v4;
    if ((v10 & 1) != 0)
    {
LABEL_7:
      v14 = v13[7];
      result = (id)swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 8 * v8) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v11 >= v12 && (a3 & 1) == 0)
  {
    sub_1B1EAB0F4();
    goto LABEL_6;
  }
  sub_1B1E96448(v12, a3 & 1);
  v16 = sub_1B1DC4238(a2);
  if ((v10 & 1) == (v17 & 1))
  {
    v8 = v16;
    v13 = *v4;
    if ((v10 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB32B8(v8, (uint64_t)a2, a1, v13);
    return a2;
  }
  type metadata accessor for VFXTriggerType(0);
  result = (id)sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1B860F8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3CA4(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7] + 40 * v9;
      v16 = *(void **)v15;
      swift_release();

      v17 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)(v15 + 16) = v17;
      *(_QWORD *)(v15 + 32) = *(_QWORD *)(a1 + 32);
      return;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAB290();
    goto LABEL_6;
  }
  sub_1B1E96740(v13, a3 & 1);
  v18 = sub_1B1DC3CA4(a2);
  if ((v11 & 1) == (v19 & 1))
  {
    v9 = v18;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB39F0(v9, a2, a1, v14);
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1B86218(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9B60C(a1, v14[7] + 8 * v9);
    return sub_1B1EB3A40(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAB46C();
    goto LABEL_6;
  }
  sub_1B1E96A6C(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9B60C(a1, v14[7] + 8 * v9);
    return sub_1B1EB3A40(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86318(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99A88(a1, v14[7] + 832 * v9, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    return sub_1B1EB3A4C(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAB634();
    goto LABEL_6;
  }
  sub_1B1E96D28(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B99A88(a1, v14[7] + 832 * v9, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    return sub_1B1EB3A4C(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86438(uint64_t a1, __int16 a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  sub_1B1DC43A8(a2);
  v10 = v9;
  v12 = v11;
  v13 = v8[3];
  v14 = v8[2] + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v15 = *v4;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      v16 = v15[7];
      result = swift_release();
      *(_QWORD *)(v16 + 8 * v10) = a1;
      return result;
    }
    return sub_1B1EB3AC8(v10, a2, a1, v15);
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EABD64();
    goto LABEL_6;
  }
  sub_1B1E97900(v14, a3 & 1);
  sub_1B1DC43A8(a2);
  if ((v12 & 1) == (v19 & 1))
  {
    v10 = v18;
    v15 = *v4;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3AC8(v10, a2, a1, v15);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86540(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = HIDWORD(a2) & 1;
  v9 = a2;
  v10 = sub_1B1DC41BC(a2 | (unint64_t)(v8 << 32));
  v12 = v11;
  v13 = v7[3];
  v14 = v7[2] + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v15 = *v4;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      v16 = v15[7];
      v17 = sub_1B2228110();
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v10, a1, v17);
    }
    return sub_1B1EB3B04(v10, v9 | (v8 << 32), a1, v15);
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EABF1C();
    goto LABEL_6;
  }
  sub_1B1E97B10(v14, a3 & 1);
  v19 = sub_1B1DC41BC(v9 | (v8 << 32));
  if ((v12 & 1) == (v20 & 1))
  {
    v10 = v19;
    v15 = *v4;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3B04(v10, v9 | (v8 << 32), a1, v15);
  }
  sub_1B1A02758(0, &qword_1ED4BB048, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1B86688(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v11) = a1;
      return;
    }
    goto LABEL_10;
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EAC16C();
    goto LABEL_6;
  }
  sub_1B1E97E6C(v15, a4 & 1);
  v18 = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v19 & 1))
  {
    v11 = v18;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3510(v11, a2, a3, a1, v16);
    swift_bridgeObjectRetain();
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1B867A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t *v19;
  char v20;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1B1DC3AC8(a4);
  v15 = v14;
  v16 = v12[3];
  result = v12[2] + ((v14 & 1) == 0);
  if (v16 >= result && (a5 & 1) != 0)
  {
LABEL_6:
    v18 = *v6;
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v19 = (uint64_t *)(v18[7] + 24 * v13);
      *v19 = a1;
      v19[1] = a2;
      v19[2] = a3;
      return result;
    }
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  if (v16 >= result && (a5 & 1) == 0)
  {
    result = sub_1B1EAC310();
    goto LABEL_6;
  }
  sub_1B1E98140(result, a5 & 1);
  result = sub_1B1DC3AC8(a4);
  if ((v15 & 1) == (v20 & 1))
  {
    v13 = result;
    v18 = *v6;
    if ((v15 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B868CC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9BDC8(a1, v14[7] + 8 * v9, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache);
    return sub_1B1EB3B94(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAC690();
    goto LABEL_6;
  }
  sub_1B1E98744(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9BDC8(a1, v14[7] + 8 * v9, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache);
    return sub_1B1EB3B94(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B869E0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9BDC8(a1, v14[7] + 8 * v9, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache);
    return sub_1B1EB3BA0(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAC87C();
    goto LABEL_6;
  }
  sub_1B1E98A20(v13, a3 & 1);
  v16 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      return sub_1B1B9BDC8(a1, v14[7] + 8 * v9, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache);
    return sub_1B1EB3BA0(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1B1DC3CA4(a4);
  v15 = v14;
  v16 = v12[3];
  v17 = v12[2] + ((v14 & 1) == 0);
  if (v16 >= v17 && (a5 & 1) != 0)
  {
LABEL_6:
    v18 = *v6;
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v19 = (uint64_t *)(v18[7] + 24 * v13);
      result = swift_unknownObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      v19[2] = a3;
      return result;
    }
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  if (v16 >= v17 && (a5 & 1) == 0)
  {
    sub_1B1EAC898();
    goto LABEL_6;
  }
  sub_1B1E98A3C(v17, a5 & 1);
  v21 = sub_1B1DC3CA4(a4);
  if ((v15 & 1) == (v22 & 1))
  {
    v13 = v21;
    v18 = *v6;
    if ((v15 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86C20(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC488C(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7] + 40 * v9;
      result = swift_unknownObjectRelease();
      v17 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)(v15 + 16) = v17;
      *(_BYTE *)(v15 + 32) = *(_BYTE *)(a1 + 32);
      return result;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EACA64();
    goto LABEL_6;
  }
  sub_1B1E98D58(v13, a3 & 1);
  v18 = sub_1B1DC488C(a2);
  if ((v11 & 1) == (v19 & 1))
  {
    v9 = v18;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3C0C(v9, a2, a1, v14);
    return swift_unknownObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86D40(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_unknownObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EACC44();
    goto LABEL_6;
  }
  sub_1B1E990D8(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B86E48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  char v17;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  result = v10[2] + ((v12 & 1) == 0);
  if (v14 >= result && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v16[7] + 8 * v11) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v14 >= result && (a4 & 1) == 0)
  {
    result = sub_1B1EACDF0();
    goto LABEL_6;
  }
  sub_1B1E99394(result, a4 & 1);
  result = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v17 & 1))
  {
    v11 = result;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB33E4(v11, a2, a3, a1, v16);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

unint64_t sub_1B1B86F5C(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, char a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t result;

  v8 = (_QWORD **)v7;
  v14 = (_QWORD *)*v7;
  v15 = a6 & 1;
  v16 = sub_1B1DC3E04(a3, a4, a5, a6 & 1);
  v18 = v17;
  v19 = v14[3];
  v20 = v14[2] + ((v17 & 1) == 0);
  if (v19 < v20 || (a7 & 1) == 0)
  {
    if (v19 < v20 || (a7 & 1) != 0)
    {
      sub_1B1E993A8(v20, a7 & 1);
      v21 = sub_1B1DC3E04(a3, a4, a5, v15);
      if ((v18 & 1) != (v22 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v16 = v21;
    }
    else
    {
      sub_1B1EACE04();
    }
  }
  v23 = *v8;
  if ((v18 & 1) != 0)
  {
    v24 = (uint64_t *)(v23[7] + 16 * v16);
    result = swift_bridgeObjectRelease();
    *v24 = a1;
    v24[1] = a2;
  }
  else
  {
    sub_1B1EB3C70(v16, a3, a4, a5, v15, a1, a2, v23);
    return sub_1B1B1DD24(a3);
  }
  return result;
}

uint64_t sub_1B1B870BC(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = sub_1B222826C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v14 = sub_1B1DC3CA8(a2);
  v16 = v15;
  v17 = v13[3];
  result = v13[2] + ((v15 & 1) == 0);
  if (v17 < result || (a3 & 1) == 0)
  {
    if (v17 < result || (a3 & 1) != 0)
    {
      sub_1B1E996DC(result, a3 & 1);
      result = sub_1B1DC3CA8(a2);
      if ((v16 & 1) != (v19 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v14 = result;
    }
    else
    {
      result = sub_1B1EACFCC();
    }
  }
  v20 = *v4;
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(v20[7] + v14) = a1 & 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return sub_1B1EB3CC4(v14, (uint64_t)v12, a1 & 1, v20);
  }
  return result;
}

void sub_1B1B87200(uint64_t a1, int a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v5 = (_QWORD **)v4;
  v27 = a2;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v15 = sub_1B1DC3CA8(a3);
  v17 = v16;
  v18 = v14[3];
  v19 = v14[2] + ((v16 & 1) == 0);
  if (v18 < v19 || (a4 & 1) == 0)
  {
    if (v18 < v19 || (a4 & 1) != 0)
    {
      sub_1B1E99A38(v19, a4 & 1);
      v20 = sub_1B1DC3CA8(a3);
      if ((v17 & 1) != (v21 & 1))
      {
        sub_1B2229FC4();
        __break(1u);
        return;
      }
      v15 = v20;
    }
    else
    {
      sub_1B1EAD1FC();
    }
  }
  v22 = a1;
  v23 = v27 & 1;
  v24 = *v5;
  if ((v17 & 1) != 0)
  {
    v25 = v24[7] + 16 * v15;
    sub_1B1B9CAE0(*(id *)v25, *(_BYTE *)(v25 + 8));
    *(_QWORD *)v25 = v22;
    *(_BYTE *)(v25 + 8) = v23 != 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
    sub_1B1EB3D54(v15, (uint64_t)v13, v22, v23, v24);
  }
}

unint64_t sub_1B1B87374(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t result;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3AC8(a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (uint64_t *)(v16[7] + 16 * v11);
      result = sub_1B1B28D2C(v17[1]);
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EAD470();
    goto LABEL_6;
  }
  sub_1B1E99DBC(v15, a4 & 1);
  v19 = sub_1B1DC3AC8(a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B87484(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EAD7D4, (void (*)(void))sub_1B1E9A6EC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B874A0(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = HIDWORD(a2) & 1;
  v9 = a2;
  v10 = sub_1B1DC4040(a2 | (unint64_t)(v8 << 32));
  v12 = v11;
  v13 = v7[3];
  v14 = v7[2] + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v15 = *v4;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      v16 = v15[7];
      v17 = v16
          + *(_QWORD *)(*(_QWORD *)(type metadata accessor for GraphScriptingConfig.ScriptInfo() - 8) + 72) * v10;
      return sub_1B1B99BF0(a1, v17);
    }
    return sub_1B1EB3DF4(v10, v9 | (v8 << 32), a1, v15);
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EAD7E0();
    goto LABEL_6;
  }
  sub_1B1E9A6F8(v14, a3 & 1);
  v19 = sub_1B1DC4040(v9 | (v8 << 32));
  if ((v12 & 1) == (v20 & 1))
  {
    v10 = v19;
    v15 = *v4;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3DF4(v10, v9 | (v8 << 32), a1, v15);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B875C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EADA44, (void (*)(void))sub_1B1E9AAA0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B875E4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3B48(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EADA50();
    goto LABEL_6;
  }
  sub_1B1E9AAAC(v13, a3 & 1);
  v17 = sub_1B1DC3B48(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B876EC(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  char v15;
  _QWORD *v16;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3B48(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 < result || (a3 & 1) == 0)
  {
    if (v12 < result || (a3 & 1) != 0)
    {
      sub_1B1E9AD70(result, a3 & 1);
      result = sub_1B1DC3B48(a2);
      if ((v11 & 1) != (v14 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v9 = result;
    }
    else
    {
      result = sub_1B1EADA5C();
    }
  }
  v15 = a1 & 1;
  v16 = *v4;
  if ((v11 & 1) == 0)
    return sub_1B1EB3548(v9, a2, v15, v16);
  *(_BYTE *)(v16[7] + v9) = v15;
  return result;
}

uint64_t sub_1B1B877E4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_1B222826C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v14 = sub_1B1DC3CA8(a2);
  v16 = v15;
  v17 = v13[3];
  v18 = v13[2] + ((v15 & 1) == 0);
  if (v17 >= v18 && (a3 & 1) != 0)
  {
LABEL_6:
    v19 = *v4;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      v20 = v19[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v17 >= v18 && (a3 & 1) == 0)
  {
    sub_1B1EADC24();
    goto LABEL_6;
  }
  sub_1B1E9B2D8(v18, a3 & 1);
  v22 = sub_1B1DC3CA8(a2);
  if ((v16 & 1) != (v23 & 1))
  {
    result = sub_1B2229FC4();
    __break(1u);
    return result;
  }
  v14 = v22;
  v19 = *v4;
  if ((v16 & 1) != 0)
    goto LABEL_7;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_1B1EB3EC4(v14, (uint64_t)v12, a1, v19);
}

uint64_t sub_1B1B87934(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3EBC(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_release();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAE228();
    goto LABEL_6;
  }
  sub_1B1E9BC24(v13, a3 & 1);
  v17 = sub_1B1DC3EBC(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3648(v9, a2, a1, v14);
    return sub_1B1B9C750(a2);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B87A44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EAE404, (void (*)(void))sub_1B1E9BF6C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B87A60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EAE410, (void (*)(void))sub_1B1E9BF78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B87A7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EAE41C, (void (*)(void))sub_1B1E9BF84, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B87A98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC4138(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B99F48(a1, v16[7] + 48 * v11);
    return sub_1B1EB3FEC(v11, a2, a3, a1, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EAE428();
    goto LABEL_6;
  }
  sub_1B1E9BF90(v15, a4 & 1);
  v18 = sub_1B1DC4138(a2, a3);
  if ((v13 & 1) == (v19 & 1))
  {
    v11 = v18;
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B99F48(a1, v16[7] + 48 * v11);
    return sub_1B1EB3FEC(v11, a2, a3, a1, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1B87BAC(uint64_t *a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  _OWORD v49[8];
  _QWORD v50[3];
  char v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  v5 = v4;
  v9 = *a1;
  v28 = a1[1];
  v29 = a1[2];
  v30 = *((_BYTE *)a1 + 24);
  v31 = *((_WORD *)a1 + 16);
  v32 = *((_WORD *)a1 + 17);
  v33 = *((_WORD *)a1 + 18);
  v34 = *((_WORD *)a1 + 19);
  v35 = *((_BYTE *)a1 + 40);
  v36 = *((_BYTE *)a1 + 41);
  v37 = *((_BYTE *)a1 + 42);
  v38 = a1[6];
  v39 = a1[7];
  v40 = a1[8];
  v41 = a1[9];
  v42 = a1[10];
  v43 = a1[11];
  v44 = a1[12];
  v45 = *((_BYTE *)a1 + 104);
  v46 = *((_BYTE *)a1 + 105);
  v47 = *((_BYTE *)a1 + 106);
  v48 = *((_BYTE *)a1 + 107);
  v11 = a1[14];
  v10 = a1[15];
  v12 = *v4;
  v13 = sub_1B1DC4510(a2, a3);
  v15 = v14;
  v16 = *(_QWORD *)(v12 + 24);
  v17 = *(_QWORD *)(v12 + 16) + ((v14 & 1) == 0);
  if (v16 >= v17 && (a4 & 1) != 0)
  {
LABEL_6:
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v18 = *(_QWORD *)(*v5 + 56) + (v13 << 7);
      v19 = *(_OWORD *)(v18 + 48);
      v21 = *(_OWORD *)v18;
      v20 = *(_OWORD *)(v18 + 16);
      v49[2] = *(_OWORD *)(v18 + 32);
      v49[3] = v19;
      v49[0] = v21;
      v49[1] = v20;
      v22 = *(_OWORD *)(v18 + 112);
      v24 = *(_OWORD *)(v18 + 64);
      v23 = *(_OWORD *)(v18 + 80);
      v49[6] = *(_OWORD *)(v18 + 96);
      v49[7] = v22;
      v49[4] = v24;
      v49[5] = v23;
      sub_1B1B99CF4((uint64_t)v49);
      *(_QWORD *)v18 = v9;
      *(_QWORD *)(v18 + 8) = v28;
      *(_QWORD *)(v18 + 16) = v29;
      *(_BYTE *)(v18 + 24) = v30;
      *(_WORD *)(v18 + 32) = v31;
      *(_WORD *)(v18 + 34) = v32;
      *(_WORD *)(v18 + 36) = v33;
      *(_WORD *)(v18 + 38) = v34;
      *(_BYTE *)(v18 + 40) = v35;
      *(_BYTE *)(v18 + 41) = v36;
      *(_BYTE *)(v18 + 42) = v37;
      *(_QWORD *)(v18 + 48) = v38;
      *(_QWORD *)(v18 + 56) = v39;
      *(_QWORD *)(v18 + 64) = v40;
      *(_QWORD *)(v18 + 72) = v41;
      *(_QWORD *)(v18 + 80) = v42;
      *(_QWORD *)(v18 + 88) = v43;
      *(_QWORD *)(v18 + 96) = v44;
      *(_BYTE *)(v18 + 104) = v45;
      *(_BYTE *)(v18 + 105) = v46;
      *(_BYTE *)(v18 + 106) = v47;
      *(_BYTE *)(v18 + 107) = v48;
      *(_QWORD *)(v18 + 112) = v11;
      *(_QWORD *)(v18 + 120) = v10;
      return;
    }
    goto LABEL_10;
  }
  if (v16 >= v17 && (a4 & 1) == 0)
  {
    sub_1B1EAE604();
    goto LABEL_6;
  }
  sub_1B1E9C294(v17, a4 & 1);
  v25 = sub_1B1DC4510(a2, a3);
  if ((v15 & 1) != (v26 & 1))
  {
    sub_1B2229FC4();
    __break(1u);
    return;
  }
  v13 = v25;
  if ((v15 & 1) != 0)
    goto LABEL_7;
LABEL_10:
  v27 = (_QWORD *)*v5;
  v50[0] = v9;
  v50[1] = v28;
  v50[2] = v29;
  v51 = v30;
  v52 = v31;
  v53 = v32;
  v54 = v33;
  v55 = v34;
  v56 = v35;
  v57 = v36;
  v58 = v37;
  v59 = v38;
  v60 = v39;
  v61 = v40;
  v62 = v41;
  v63 = v42;
  v64 = v43;
  v65 = v44;
  v66 = v45;
  v67 = v46;
  v68 = v47;
  v69 = v48;
  v70 = v11;
  v71 = v10;
  sub_1B1EB4058(v13, a2, a3, (uint64_t)v50, v27);
}

uint64_t sub_1B1B87EA0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = v3;
  v8 = *v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 16) + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = *(_QWORD *)(v14 + 56);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB6E04(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAE810();
    goto LABEL_6;
  }
  sub_1B1E9C710(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB6E04(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B87FA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC4138(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B99D38(a1, v16[7] + 96 * v11);
    return sub_1B1EB40F4(v11, a2, a3, a1, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EAE9C8();
    goto LABEL_6;
  }
  sub_1B1E9CA24(v15, a4 & 1);
  v18 = sub_1B1DC4138(a2, a3);
  if ((v13 & 1) == (v19 & 1))
  {
    v11 = v18;
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B99D38(a1, v16[7] + 96 * v11);
    return sub_1B1EB40F4(v11, a2, a3, a1, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1B880BC(uint64_t a1, int64x2_t *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  sub_1B1DC3F84(a2);
  v10 = v9;
  v12 = v11;
  v13 = v8[3];
  v14 = v8[2] + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v15 = *v4;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      sub_1B1B9A384(a1, v15[7] + 112 * v10);
      return;
    }
    goto LABEL_10;
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EAED60();
    goto LABEL_6;
  }
  sub_1B1E9D000(v14, a3 & 1);
  sub_1B1DC3F84(a2);
  if ((v12 & 1) == (v17 & 1))
  {
    v10 = v16;
    v15 = *v4;
    if ((v12 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB4160(v10, a2, a1, v15);
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1B881C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EAEFA0, (void (*)(void))sub_1B1E9D424, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

void sub_1B1B881DC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      sub_1B1B9A4C0(a1, v14[7] + 120 * v9);
      return;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EAEFAC();
    goto LABEL_6;
  }
  sub_1B1E9D430(v13, a3 & 1);
  v15 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v16 & 1))
  {
    v9 = v15;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB41DC(v9, a2, a1, v14);
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

id sub_1B1B882E0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id result;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_1B1DC4BA0((uint64_t)a2);
  v10 = v9;
  v11 = v7[3];
  v12 = v7[2] + ((v9 & 1) == 0);
  if (v11 >= v12 && (a3 & 1) != 0)
  {
LABEL_6:
    v13 = *v4;
    if ((v10 & 1) != 0)
    {
LABEL_7:
      v14 = v13[7];
      result = (id)swift_release();
      *(_QWORD *)(v14 + 8 * v8) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v11 >= v12 && (a3 & 1) == 0)
  {
    sub_1B1EAF440();
    goto LABEL_6;
  }
  sub_1B1E9DB40(v12, a3 & 1);
  v16 = sub_1B1DC4BA0((uint64_t)a2);
  if ((v10 & 1) == (v17 & 1))
  {
    v8 = v16;
    v13 = *v4;
    if ((v10 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3340(v8, (uint64_t)a2, a1, v13);
    return a2;
  }
  sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
  result = (id)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88400(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC4AE4(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v14[7] + 8 * v9) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EAF5DC();
    goto LABEL_6;
  }
  sub_1B1E9DDDC(result, a3 & 1);
  result = sub_1B1DC4AE4(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3340(v9, a2, a1, v14);
    return swift_retain();
  }
  type metadata accessor for VertexLayoutDescriptor();
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

id sub_1B1B88504(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  id result;
  _QWORD *v13;
  char v14;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_1B1DC4BA0((uint64_t)a2);
  v10 = v9;
  v11 = v7[3];
  result = (id)(v7[2] + ((v9 & 1) == 0));
  if (v11 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_6:
    v13 = *v4;
    if ((v10 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v13[7] + 8 * v8) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v11 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = (id)sub_1B1EAF770();
    goto LABEL_6;
  }
  sub_1B1E9E0A0((uint64_t)result, a3 & 1);
  result = (id)sub_1B1DC4BA0((uint64_t)a2);
  if ((v10 & 1) == (v14 & 1))
  {
    v8 = (unint64_t)result;
    v13 = *v4;
    if ((v10 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB32B8(v8, (uint64_t)a2, a1, v13);
    return a2;
  }
  sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
  result = (id)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88620(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  char v17;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC4BEC(a2, a3);
  v13 = v12;
  v14 = v10[3];
  result = v10[2] + ((v12 & 1) == 0);
  if (v14 >= result && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v16[7] + 8 * v11) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v14 >= result && (a4 & 1) == 0)
  {
    result = sub_1B1EAF794();
    goto LABEL_6;
  }
  sub_1B1E9E0C4(result, a4 & 1);
  result = sub_1B1DC4BEC(a2, a3);
  if ((v13 & 1) == (v17 & 1))
  {
    v11 = result;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB33E4(v11, a2, a3, a1, v16);
    return sub_1B1A0DC90(a2, a3);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88740(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = sub_1B2228110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v14 = sub_1B1DC49A8(a2);
  v16 = v15;
  v17 = v13[3];
  result = v13[2] + ((v15 & 1) == 0);
  if (v17 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v19 = *v4;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v19[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EAF934();
    goto LABEL_6;
  }
  sub_1B1E9E38C(result, a3 & 1);
  result = sub_1B1DC49A8(a2);
  if ((v16 & 1) != (v20 & 1))
  {
    result = sub_1B2229FC4();
    __break(1u);
    return result;
  }
  v14 = result;
  v19 = *v4;
  if ((v16 & 1) != 0)
    goto LABEL_7;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_1B1EB4244(v14, (uint64_t)v12, a1, v19);
}

id sub_1B1B8888C(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  id result;
  _QWORD *v13;
  char v14;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_1B1DC4C78((uint64_t)a2);
  v10 = v9;
  v11 = v7[3];
  result = (id)(v7[2] + ((v9 & 1) == 0));
  if (v11 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_6:
    v13 = *v4;
    if ((v10 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v13[7] + 8 * v8) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v11 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = (id)sub_1B1EAFB60();
    goto LABEL_6;
  }
  sub_1B1E9E6D4((uint64_t)result, a3 & 1);
  result = (id)sub_1B1DC4C78((uint64_t)a2);
  if ((v10 & 1) == (v14 & 1))
  {
    v8 = (unint64_t)result;
    v13 = *v4;
    if ((v10 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB32B8(v8, (uint64_t)a2, a1, v13);
    return a2;
  }
  sub_1B1B9DAD4(0, &qword_1EEF5B4F0);
  result = (id)sub_1B2229FC4();
  __break(1u);
  return result;
}

id sub_1B1B889A8(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  id result;
  _QWORD *v13;
  char v14;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_1B1DC4CC4((uint64_t)a2);
  v10 = v9;
  v11 = v7[3];
  result = (id)(v7[2] + ((v9 & 1) == 0));
  if (v11 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_6:
    v13 = *v4;
    if ((v10 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v13[7] + 8 * v8) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v11 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = (id)sub_1B1EAFD28();
    goto LABEL_6;
  }
  sub_1B1E9E9A0((uint64_t)result, a3 & 1);
  result = (id)sub_1B1DC4CC4((uint64_t)a2);
  if ((v10 & 1) == (v14 & 1))
  {
    v8 = (unint64_t)result;
    v13 = *v4;
    if ((v10 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB32B8(v8, (uint64_t)a2, a1, v13);
    return a2;
  }
  sub_1B1B9DAD4(0, &qword_1EEF5E8B0);
  result = (id)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88AC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3CA4(a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (uint64_t *)(v16[7] + 16 * v11);
      result = swift_bridgeObjectRelease();
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EAFD4C();
    goto LABEL_6;
  }
  sub_1B1E9E9C4(v15, a4 & 1);
  v19 = sub_1B1DC3CA4(a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88BD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  char v17;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  result = v10[2] + ((v12 & 1) == 0);
  if (v14 >= result && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v16[7] + 8 * v11) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v14 >= result && (a4 & 1) == 0)
  {
    result = sub_1B1EAFEEC();
    goto LABEL_6;
  }
  sub_1B1E9ECA4(result, a4 & 1);
  result = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v17 & 1))
  {
    v11 = result;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB33E4(v11, a2, a3, a1, v16);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88CF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DCC390(a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (uint64_t *)(v16[7] + 16 * v11);
      result = swift_release();
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EB00AC();
    goto LABEL_6;
  }
  sub_1B1E9EF90(v15, a4 & 1);
  v19 = sub_1B1DCC390(a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB354C(v11, a3, a1, a2, v16);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v15 = sub_1B1DC3CA4(a5);
  v17 = v16;
  v18 = v14[3];
  v19 = v14[2] + ((v16 & 1) == 0);
  if (v18 >= v19 && (a6 & 1) != 0)
  {
LABEL_6:
    v20 = *v7;
    if ((v17 & 1) != 0)
    {
LABEL_7:
      v21 = (uint64_t *)(v20[7] + 32 * v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      v21[3] = a4;
      return result;
    }
    return sub_1B1EB42D4(v15, a5, a1, a2, a3, a4, v20);
  }
  if (v18 >= v19 && (a6 & 1) == 0)
  {
    sub_1B1EB0268();
    goto LABEL_6;
  }
  sub_1B1E9F230(v19, a6 & 1);
  v23 = sub_1B1DC3CA4(a5);
  if ((v17 & 1) == (v24 & 1))
  {
    v15 = v23;
    v20 = *v7;
    if ((v17 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB42D4(v15, a5, a1, a2, a3, a4, v20);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B88F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v16 = sub_1B1DC3B00(a5, a6);
  v18 = v17;
  v19 = v15[3];
  v20 = v15[2] + ((v17 & 1) == 0);
  if (v19 >= v20 && (a7 & 1) != 0)
  {
LABEL_6:
    v21 = *v8;
    if ((v18 & 1) != 0)
    {
LABEL_7:
      v22 = (uint64_t *)(v21[7] + 32 * v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v22 = a1;
      v22[1] = a2;
      v22[2] = a3;
      v22[3] = a4;
      return result;
    }
    goto LABEL_10;
  }
  if (v19 >= v20 && (a7 & 1) == 0)
  {
    sub_1B1EB043C();
    goto LABEL_6;
  }
  sub_1B1E9F528(v20, a7 & 1);
  v24 = sub_1B1DC3B00(a5, a6);
  if ((v18 & 1) == (v25 & 1))
  {
    v16 = v24;
    v21 = *v8;
    if ((v18 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB4318(v16, a5, a6, a1, a2, a3, a4, v21);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B890C0(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC4DA0(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_release();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB383C(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB0640();
    goto LABEL_6;
  }
  sub_1B1E9F854(v13, a3 & 1);
  v17 = sub_1B1DC4DA0(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB383C(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B891C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1B1DC3AC8(a4);
  v15 = v14;
  v16 = v12[3];
  v17 = v12[2] + ((v14 & 1) == 0);
  if (v16 >= v17 && (a5 & 1) != 0)
  {
LABEL_6:
    v18 = *v6;
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v19 = (uint64_t *)(v18[7] + 24 * v13);
      result = swift_unknownObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      v19[2] = a3;
      return result;
    }
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  if (v16 >= v17 && (a5 & 1) == 0)
  {
    sub_1B1EB07F4();
    goto LABEL_6;
  }
  sub_1B1E9FB30(v17, a5 & 1);
  v21 = sub_1B1DC3AC8(a4);
  if ((v15 & 1) == (v22 & 1))
  {
    v13 = v21;
    v18 = *v6;
    if ((v15 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32F8(v13, a4, a1, a2, a3, v18);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B892F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = v3;
  v8 = *v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 16) + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = *(_QWORD *)(v14 + 56);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB6E04(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB09C0();
    goto LABEL_6;
  }
  sub_1B1E9FE00(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB6E04(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B893FC(int a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_DWORD *)(v14[7] + 4 * v9) = a1;
      return result;
    }
    return sub_1B1EB4360(v9, a2, a1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EB0B64();
    goto LABEL_6;
  }
  sub_1B1E9FE0C(result, a3 & 1);
  result = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB4360(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B894F8(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3B14(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32BC(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB0D00();
    goto LABEL_6;
  }
  sub_1B1EA0098(v13, a3 & 1);
  v17 = sub_1B1DC3B14(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32BC(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B89600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v15 = sub_1B1DC3B00(a4, a5);
  v17 = v16;
  v18 = v14[3];
  v19 = v14[2] + ((v16 & 1) == 0);
  if (v18 >= v19 && (a6 & 1) != 0)
  {
LABEL_6:
    v20 = *v7;
    if ((v17 & 1) != 0)
    {
LABEL_7:
      v21 = (uint64_t *)(v20[7] + 24 * v15);
      swift_bridgeObjectRelease();
      result = swift_release();
      *v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_10;
  }
  if (v18 >= v19 && (a6 & 1) == 0)
  {
    sub_1B1EB1030();
    goto LABEL_6;
  }
  sub_1B1EA05F4(v19, a6 & 1);
  v23 = sub_1B1DC3B00(a4, a5);
  if ((v17 & 1) == (v24 & 1))
  {
    v15 = v23;
    v20 = *v7;
    if ((v17 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB439C(v15, a4, a5, a1, a2, a3, v20);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8974C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB1224, (void (*)(void))sub_1B1EA0914, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B89768(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB1230, (void (*)(void))sub_1B1EA0920, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B89784(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB123C, (void (*)(void))sub_1B1EA092C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B897A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB1248, (void (*)(void))sub_1B1EA0938, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B897BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB1254, (void (*)(void))sub_1B1EA0944, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B897D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB1260, (void (*)(void))sub_1B1EA0950, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B897F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB126C, (void (*)(void))sub_1B1EA095C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B89810(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B1B8982C(a1, a2, a3, a4, (void (*)(void))sub_1B1EB1278, (void (*)(void))sub_1B1EA0968, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB3510);
}

uint64_t sub_1B1B8982C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  v10 = v7;
  v15 = *v7;
  v16 = sub_1B1DC3B00(a2, a3);
  v18 = v17;
  v19 = *(_QWORD *)(v15 + 24);
  v20 = *(_QWORD *)(v15 + 16) + ((v17 & 1) == 0);
  if (v19 >= v20 && (a4 & 1) != 0)
  {
LABEL_6:
    v21 = *v10;
    if ((v18 & 1) != 0)
    {
LABEL_7:
      v22 = *(_QWORD *)(v21 + 56);
      result = swift_release();
      *(_QWORD *)(v22 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v19 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_6;
  }
  a6();
  v24 = sub_1B1DC3B00(a2, a3);
  if ((v18 & 1) == (v25 & 1))
  {
    v16 = v24;
    v21 = *v10;
    if ((v18 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    a7(v16, a2, a3, a1, v21);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B89974(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B9C474(a1, v16[7] + 56 * v11);
    goto LABEL_10;
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EB1430();
    goto LABEL_6;
  }
  sub_1B1EA0C4C(v15, a4 & 1);
  v18 = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v19 & 1))
  {
    v11 = v18;
    v16 = *v5;
    if ((v13 & 1) != 0)
      return sub_1B1B9C474(a1, v16[7] + 56 * v11);
LABEL_10:
    sub_1B1EB43E8(v11, a2, a3, a1, v16);
    return swift_bridgeObjectRetain();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1B89A90(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC40B0(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];

      *(_QWORD *)(v15 + 8 * v9) = a1;
      return;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB1650();
    goto LABEL_6;
  }
  sub_1B1EA0FA0(v13, a3 & 1);
  v16 = sub_1B1DC40B0(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB383C(v9, a2, a1, v14);
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1B89B98(uint64_t a1, uint64_t *a2, char a3)
{
  return sub_1B1B89BD0(a1, a2, a3, (void (*)(void))sub_1B1EB1804, (void (*)(void))sub_1B1EA134C, (void (*)(unint64_t, uint64_t *, uint64_t, uint64_t))sub_1B1EB4444);
}

uint64_t sub_1B1B89BB4(uint64_t a1, uint64_t *a2, char a3)
{
  return sub_1B1B89BD0(a1, a2, a3, (void (*)(void))sub_1B1EB1824, (void (*)(void))sub_1B1EA136C, (void (*)(unint64_t, uint64_t *, uint64_t, uint64_t))sub_1B1EB4444);
}

uint64_t sub_1B1B89BD0(uint64_t a1, uint64_t *a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, uint64_t *, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v10;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v10 = v6;
  v14 = *v6;
  v15 = sub_1B1DC40E0(a2);
  v17 = v16;
  v18 = *(_QWORD *)(v14 + 24);
  v19 = *(_QWORD *)(v14 + 16) + ((v16 & 1) == 0);
  if (v18 >= v19 && (a3 & 1) != 0)
  {
LABEL_6:
    v20 = *v10;
    if ((v17 & 1) != 0)
    {
LABEL_7:
      v21 = *(_QWORD *)(v20 + 56);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v18 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_6;
  }
  a5();
  v23 = sub_1B1DC40E0(a2);
  if ((v17 & 1) == (v24 & 1))
  {
    v15 = v23;
    v20 = *v10;
    if ((v17 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    a6(v15, a2, a1, v20);
    return sub_1B1B9CC50((uint64_t)a2);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B89CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t result;

  v8 = (_QWORD **)v7;
  v14 = (_QWORD *)*v7;
  v15 = a6 & 1;
  v16 = sub_1B1DC4F34(a3, a4, a5, a6 & 1);
  v18 = v17;
  v19 = v14[3];
  v20 = v14[2] + ((v17 & 1) == 0);
  if (v19 < v20 || (a7 & 1) == 0)
  {
    if (v19 < v20 || (a7 & 1) != 0)
    {
      sub_1B1EA1AD8(v20, a7 & 1);
      v21 = sub_1B1DC4F34(a3, a4, a5, v15);
      if ((v18 & 1) != (v22 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v16 = v21;
    }
    else
    {
      sub_1B1EB1C24();
    }
  }
  v23 = *v8;
  if ((v18 & 1) != 0)
  {
    v24 = (uint64_t *)(v23[7] + 16 * v16);
    result = swift_unknownObjectRelease();
    *v24 = a1;
    v24[1] = a2;
  }
  else
  {
    sub_1B1EB44A0(v16, a3, a4, a5, v15, a1, a2, v23);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1B89E58(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  char v15;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  result = v8[2] + ((v10 & 1) == 0);
  if (v12 >= result && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(v14[7] + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  if (v12 >= result && (a3 & 1) == 0)
  {
    result = sub_1B1EB1DF8();
    goto LABEL_6;
  }
  sub_1B1EA1E00(result, a3 & 1);
  result = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v15 & 1))
  {
    v9 = result;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB32B8(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B89F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t result;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v16 = sub_1B1DC3B00(a5, a6);
  v18 = v17;
  v19 = v15[3];
  v20 = v15[2] + ((v17 & 1) == 0);
  if (v19 < v20 || (a7 & 1) == 0)
  {
    if (v19 < v20 || (a7 & 1) != 0)
    {
      sub_1B1EA2094(v20, a7 & 1);
      v21 = sub_1B1DC3B00(a5, a6);
      if ((v18 & 1) != (v22 & 1))
      {
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v16 = v21;
    }
    else
    {
      sub_1B1EB1E14();
    }
  }
  v23 = *v8;
  if ((v18 & 1) != 0)
  {
    v24 = (uint64_t *)(v23[7] + 32 * v16);
    result = swift_unknownObjectRelease();
    *v24 = a1;
    v24[1] = a2;
    v24[2] = a3;
    v24[3] = a4;
  }
  else
  {
    sub_1B1EB4318(v16, a5, a6, a1, a2, a3, a4, v23);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1B8A0A8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB2224();
    goto LABEL_6;
  }
  sub_1B1EA2608(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB3340(v9, a2, a1, v14);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8A1B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1B1DC4B3C(a4);
  v15 = v14;
  v16 = v12[3];
  v17 = v12[2] + ((v14 & 1) == 0);
  if (v16 >= v17 && (a5 & 1) != 0)
  {
LABEL_6:
    v18 = *v6;
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v19 = (uint64_t *)(v18[7] + 24 * v13);
      result = swift_unknownObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      v19[2] = a3;
      return result;
    }
    return sub_1B1EB461C(v13, a4, a1, a2, a3, v18);
  }
  if (v16 >= v17 && (a5 & 1) == 0)
  {
    sub_1B1EB27C4();
    goto LABEL_6;
  }
  sub_1B1EA2E14(v17, a5 & 1);
  v21 = sub_1B1DC4B3C(a4);
  if ((v15 & 1) == (v22 & 1))
  {
    v13 = v21;
    v18 = *v6;
    if ((v15 & 1) != 0)
      goto LABEL_7;
    return sub_1B1EB461C(v13, a4, a1, a2, a3, v18);
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8A2DC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_1B222826C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v14 = sub_1B1DC3CA8(a2);
  v16 = v15;
  v17 = v13[3];
  v18 = v13[2] + ((v15 & 1) == 0);
  if (v17 >= v18 && (a3 & 1) != 0)
  {
LABEL_6:
    v19 = *v4;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      v20 = v19[7];
      result = swift_release();
      *(_QWORD *)(v20 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v17 >= v18 && (a3 & 1) == 0)
  {
    sub_1B1EB2EA8();
    goto LABEL_6;
  }
  sub_1B1EA3688(v18, a3 & 1);
  v22 = sub_1B1DC3CA8(a2);
  if ((v16 & 1) != (v23 & 1))
  {
    result = sub_1B2229FC4();
    __break(1u);
    return result;
  }
  v14 = v22;
  v19 = *v4;
  if ((v16 & 1) != 0)
    goto LABEL_7;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_1B1EB3EC4(v14, (uint64_t)v12, a1, v19);
}

void sub_1B1B8A42C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC4750(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 & 1) == 0);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      swift_unknownObjectRelease();
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB30E4();
    goto LABEL_6;
  }
  sub_1B1EA39F4(v13, a3 & 1);
  v16 = sub_1B1DC4750(a2);
  if ((v11 & 1) == (v17 & 1))
  {
    v9 = v16;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB4664(v9, a2, a1, v14);
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1B8A534(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1B222A060();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B8F214(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

unint64_t sub_1B1B8A62C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5B308;
  if (!qword_1EEF5B308)
  {
    sub_1B1791524(255, &qword_1EEF5B300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE0E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5B308);
  }
  return result;
}

uint64_t sub_1B1B8A68C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BundleInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1B8A6C8(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;

  v4 = a3;
  v7 = HIDWORD(a3);
  v8 = *v3;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  v9 = sub_1B222A0C0();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    while (1)
    {
      v13 = *(_QWORD *)(v8 + 48) + 16 * v11;
      v15 = *(_DWORD *)(v13 + 8);
      v14 = *(_DWORD *)(v13 + 12);
      if (v15 == (_DWORD)v4 && v14 == (_DWORD)v7)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_8;
    }
    result = 0;
    v20 = (_DWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v11);
    LODWORD(a2) = *v20;
    LODWORD(v17) = v20[1];
    LODWORD(v4) = v20[2];
    LODWORD(v7) = v20[3];
  }
  else
  {
LABEL_8:
    v17 = HIDWORD(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B8F344(a2, v4, v11, isUniquelyReferenced_nonNull_native);
    *v3 = v21;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = a2;
  a1[1] = v17;
  a1[2] = v4;
  a1[3] = v7;
  return result;
}

uint64_t sub_1B1B8A810(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;
  _QWORD v33[9];

  v31 = a5 & 1;
  v11 = *v5;
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B1C9721C((uint64_t)v33, a2);
  v32 = a3;
  sub_1B222A084();
  sub_1B222A084();
  if ((a5 & 1) == 0)
    sub_1B222A078();
  v12 = sub_1B222A0C0();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v29 = v5;
  v30 = a4;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    do
    {
      v16 = *(_QWORD *)(v11 + 48) + 32 * v14;
      v17 = *(_QWORD *)v16;
      v18 = *(unsigned __int8 *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 16);
      v20 = *(_BYTE *)(v16 + 24);
      sub_1B1B1DD24(*(_QWORD *)v16);
      sub_1B1CA8B88(v17);
      v22 = v21;
      sub_1B1A05610(v17);
      if ((v22 & 1) != 0 && v18 == v32)
      {
        if ((v20 & 1) != 0)
        {
          if (v31)
            goto LABEL_12;
        }
        else if (!v31 && v19 == v30)
        {
LABEL_12:
          swift_bridgeObjectRelease();
          sub_1B1A05610(a2);
          v23 = *(_QWORD *)(*v29 + 48) + 32 * v14;
          v24 = *(_QWORD *)v23;
          v25 = *(_BYTE *)(v23 + 8);
          v26 = *(_QWORD *)(v23 + 16);
          LOBYTE(v23) = *(_BYTE *)(v23 + 24);
          *(_QWORD *)a1 = v24;
          *(_BYTE *)(a1 + 8) = v25;
          *(_QWORD *)(a1 + 16) = v26;
          *(_BYTE *)(a1 + 24) = v23;
          sub_1B1B1DD24(v24);
          return 0;
        }
      }
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33[0] = *v29;
  *v29 = 0x8000000000000000;
  sub_1B1B1DD24(a2);
  sub_1B1B8F4AC(a2, v32, v30, v31, v14, isUniquelyReferenced_nonNull_native);
  *v29 = v33[0];
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v30;
  result = 1;
  *(_BYTE *)(a1 + 24) = v31 != 0;
  return result;
}

uint64_t sub_1B1B8AA74(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1B222A060();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B8F6C0(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1B1B8AB6C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  void *v33;
  void *v34;
  BOOL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  char v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  BOOL v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64[10];

  v9 = *v4;
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B20CB97C((uint64_t)v64, (void *)a2, (void *)a3, a4 & 0xFFFFFFFFFFLL);
  v10 = sub_1B222A0C0();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  v13 = v9 + 56;
  v63 = (void *)a2;
  v55 = v4;
  v56 = a1;
  v53 = a4 & 0xFFFFFFFFFFLL;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64[0] = *v55;
    *v55 = 0x8000000000000000;
    sub_1B1A026F0(v63, (void *)a3, a4);
    sub_1B1B8F7F0((unint64_t)v63, a3, v53, v12, isUniquelyReferenced_nonNull_native);
    *v55 = v64[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)v56 = v63;
    *(_QWORD *)(v56 + 8) = a3;
    *(_BYTE *)(v56 + 20) = BYTE4(a4);
    *(_DWORD *)(v56 + 16) = a4;
    return 1;
  }
  v14 = ~v11;
  v15 = a4 & 0xC000000000;
  v16 = a2 == 1;
  v17 = (a3 | a2) != 0;
  if ((a4 & 0xFFFFFFFFFFLL) != 0x8000000000)
  {
    v16 = 0;
    v17 = 1;
  }
  if (a3)
    v16 = 0;
  v18 = v15 == 0x8000000000;
  v61 = a2;
  v19 = v15 == 0x8000000000 && v16;
  v60 = v19;
  v20 = !v18 || v17;
  v59 = v20;
  v21 = a4 & 0xC000000000;
  v62 = a4;
  v58 = ~v11;
  v57 = a4 & 0xC000000000;
  while (1)
  {
    v22 = *(_QWORD *)(v9 + 48) + 24 * v12;
    v23 = *(_QWORD *)v22;
    v24 = *(unsigned __int8 *)(v22 + 20);
    if (!(v24 >> 6))
      break;
    v25 = *(_QWORD *)(v22 + 8);
    v26 = *(unsigned int *)(v22 + 16) | ((unint64_t)*(unsigned __int8 *)(v22 + 20) << 32);
    if (v24 >> 6 != 1)
    {
      if (v25 | v23)
        v35 = 0;
      else
        v35 = v26 == 0x8000000000;
      if (v35)
      {
        if ((v59 & 1) == 0)
          goto LABEL_51;
      }
      else if (v60)
      {
        goto LABEL_51;
      }
      goto LABEL_14;
    }
    if (v21 != 0x4000000000)
      goto LABEL_14;
    v27 = sub_1B222874C();
    v29 = v28;
    if (v27 == sub_1B222874C() && v29 == v30)
    {
      sub_1B1A026F0((id)v23, (void *)v25, v26);
      v36 = (id)v25;
      v37 = (id)a3;
      v38 = (id)v23;
      v39 = v63;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v54 = sub_1B2229D24();
      sub_1B1A026F0((id)v23, (void *)v25, v26);
      v51 = (id)v25;
      v52 = (id)a3;
      v50 = (id)v23;
      v32 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0)
      {

        a4 = v62;
        v34 = v51;
        v33 = v52;
LABEL_45:

        goto LABEL_46;
      }
    }
    a4 = v62;
    if (!v25)
    {

      if (a3)
      {
        v25 = 0;
        v33 = (void *)a3;
LABEL_46:

        sub_1B1A02724((void *)v23, (void *)v25, v26);
        v14 = v58;
        v13 = v9 + 56;
        v21 = v57;
        goto LABEL_14;
      }
      sub_1B1A02724((void *)v23, 0, v26);
      v14 = v58;
      v13 = v9 + 56;
      v21 = v57;
      if ((v26 & 0x100000000) != 0)
      {
LABEL_48:
        if ((a4 & 0x100000000) != 0)
          goto LABEL_49;
        goto LABEL_14;
      }
      goto LABEL_39;
    }
    if (!a3)
    {
      v32 = (id)v25;
      v34 = (void *)v23;
      v33 = v63;
      goto LABEL_45;
    }
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7E0);
    v40 = (id)v25;
    v41 = (id)a3;
    v42 = sub_1B222901C();

    a4 = v62;
    sub_1B1A02724((void *)v23, (void *)v25, v26);
    v14 = v58;
    v13 = v9 + 56;
    v21 = v57;
    if ((v42 & 1) != 0)
    {
      if ((v26 & 0x100000000) != 0)
        goto LABEL_48;
LABEL_39:
      if ((a4 & 0x100000000) == 0 && (_DWORD)v26 == (_DWORD)a4)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        sub_1B1A02724(v63, (void *)a3, a4);
        goto LABEL_52;
      }
    }
LABEL_14:
    v12 = (v12 + 1) & v14;
    if (((*(_QWORD *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_50;
  }
  if (((a4 >> 38) & 3) != 0 || *(_QWORD *)v22 != v61)
    goto LABEL_14;
LABEL_51:
  swift_bridgeObjectRelease();
LABEL_52:
  v45 = *(_QWORD *)(*v55 + 48) + 24 * v12;
  v46 = *(void **)v45;
  v47 = *(void **)(v45 + 8);
  v48 = *(unsigned __int8 *)(v45 + 20);
  v49 = *(unsigned int *)(v45 + 16);
  *(_QWORD *)v56 = v46;
  *(_QWORD *)(v56 + 8) = v47;
  *(_BYTE *)(v56 + 20) = v48;
  *(_DWORD *)(v56 + 16) = v49;
  sub_1B1A026F0(v46, v47, v49 | (v48 << 32));
  return 0;
}

uint64_t sub_1B1B8B00C(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _DWORD *v17;
  uint64_t v18;

  v3 = a2;
  v5 = HIDWORD(a2);
  v6 = *v2;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  v7 = sub_1B222A0C0();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      v11 = (int *)(*(_QWORD *)(v6 + 48) + 8 * v9);
      v13 = *v11;
      v12 = v11[1];
      if (v13 == (_DWORD)v3 && v12 == (_DWORD)v5)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_8;
    }
    result = 0;
    v17 = (_DWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v9);
    LODWORD(v3) = *v17;
    LODWORD(v5) = v17[1];
  }
  else
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B8FC50(v3, v9, isUniquelyReferenced_nonNull_native);
    *v2 = v18;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t sub_1B1B8B140(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  id v24;
  void *v26;
  id v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  sub_1B222874C();
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  v7 = sub_1B222A0C0();
  swift_bridgeObjectRelease();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v3;
    *v3 = 0x8000000000000000;
    v24 = a2;
    sub_1B1B8FDA4((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  v10 = sub_1B222874C();
  v12 = v11;
  if (v10 == sub_1B222874C() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v16 = ~v8;
      do
      {
        v9 = (v9 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_15;
        v17 = sub_1B222874C();
        v19 = v18;
        if (v17 == sub_1B222874C() && v19 == v20)
          goto LABEL_16;
        v22 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  v26 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  v27 = v26;
  return 0;
}

uint64_t sub_1B1B8B368(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  v8 = sub_1B222A0C0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1B2229D24() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1B1B8FFC8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1B1B8B514(unint64_t *a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v20[9];

  v3 = v2;
  v6 = *v2;
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B1C9721C((uint64_t)v20, a2);
  v7 = sub_1B222A0C0();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
    sub_1B1B1DD24(v10);
    sub_1B1CA8B88(v10);
    v12 = v11;
    sub_1B1A05610(v10);
    if ((v12 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      sub_1B1A05610(a2);
      v17 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v9);
      *a1 = v17;
      sub_1B1B1DD24(v17);
      return 0;
    }
    v13 = ~v8;
    while (1)
    {
      v9 = (v9 + 1) & v13;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        break;
      v14 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
      sub_1B1B1DD24(v14);
      sub_1B1CA8B88(v14);
      v16 = v15;
      sub_1B1A05610(v14);
      if ((v16 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_1B1B1DD24(a2);
  sub_1B1B90158(a2, v9, isUniquelyReferenced_nonNull_native);
  *v3 = v20[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1B1B8B6B0(_DWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_1B222A06C();
  sub_1B222A09C();
  v6 = sub_1B222A0C0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B902E0(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2);
  }
  result = 0;
  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(*v2 + 48) + 4 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1B1B8B7CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v5 = a2;
  v7 = HIDWORD(a2);
  v8 = *v3;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  swift_bridgeObjectRetain();
  sub_1B222A078();
  v9 = sub_1B222A0C0();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    while (1)
    {
      v13 = *(_QWORD *)(v8 + 48) + 16 * v11;
      v14 = *(_DWORD *)v13 == (_DWORD)v5 && *(_DWORD *)(v13 + 4) == (_DWORD)v7;
      if (v14 && *(_QWORD *)(v13 + 8) == a3)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    result = 0;
    v16 = *(_QWORD *)(*v3 + 48) + 16 * v11;
    LODWORD(v5) = *(_DWORD *)v16;
    LODWORD(v7) = *(_DWORD *)(v16 + 4);
    a3 = *(_QWORD *)(v16 + 8);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B90424(v5, a3, v11, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *(_DWORD *)a1 = v5;
  *(_DWORD *)(a1 + 4) = v7;
  *(_QWORD *)(a1 + 8) = a3;
  return result;
}

uint64_t sub_1B1B8B944(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _DWORD *v17;
  uint64_t v18;

  v3 = a2;
  v5 = HIDWORD(a2);
  v6 = *v2;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  v7 = sub_1B222A0C0();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      v11 = (int *)(*(_QWORD *)(v6 + 48) + 8 * v9);
      v13 = *v11;
      v12 = v11[1];
      if (v13 == (_DWORD)v3 && v12 == (_DWORD)v5)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_8;
    }
    result = 0;
    v17 = (_DWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v9);
    LODWORD(v3) = *v17;
    LODWORD(v5) = v17[1];
  }
  else
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B905A4(v3, v9, isUniquelyReferenced_nonNull_native);
    *v2 = v18;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v3;
  a1[1] = v5;
  return result;
}

void sub_1B1B8BA78(uint64_t a1, char a2)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1B8BADC()
{
  __int16 v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1B8BB60 + 4 * byte_1B227D70C[HIBYTE(v0)]))(v1);
}

uint64_t sub_1B1B8BB60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v6;
  _BYTE *v7;
  uint64_t v8;

  sub_1B2228824();
  swift_bridgeObjectRelease();
  v3 = sub_1B222A0C0() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *v6;
  *v6 = 0x8000000000000000;
  sub_1B1B906F8(v0, v3, isUniquelyReferenced_nonNull_native);
  *v6 = v8;
  swift_bridgeObjectRelease();
  result = 1;
  *v7 = v0;
  v7[1] = v2;
  return result;
}

uint64_t sub_1B1B8BEF0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v13;

  v5 = *v2;
  sub_1B222A06C();
  sub_1B222A078();
  v6 = sub_1B222A0C0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = ~v7;
    while (*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8) != a2)
    {
      v8 = (v8 + 1) & v9;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_5;
    }
    swift_unknownObjectRelease();
    *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
    swift_unknownObjectRetain();
    return 0;
  }
  else
  {
LABEL_5:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    v11 = swift_unknownObjectRetain();
    sub_1B1B90B5C(v11, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
}

uint64_t sub_1B1B8C018(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0CB0998]);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1B22285D8();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = sub_1B22286E0();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B90C94((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1B1B8C274(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v7 = *v3;
  sub_1B222A06C();
  sub_1B222A078();
  v8 = sub_1B222A0C0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    if (*(_QWORD *)(v11 + 16 * v10) == a2)
    {
LABEL_6:
      swift_release();
      v13 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v14 = v13[1];
      *a1 = *v13;
      a1[1] = v14;
      swift_retain();
      return 0;
    }
    v12 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      if (*(_QWORD *)(v11 + 16 * v10) == a2)
        goto LABEL_6;
    }
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *v3;
  *v3 = 0x8000000000000000;
  swift_retain();
  sub_1B1B90E90(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v17;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1B1B8C3C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1B1AED5E4(0, &qword_1ED4BA838, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 0;
  v6 = (uint64_t *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  v25 = -1 << v7;
  v26 = v1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  v27 = 1 << *(_BYTE *)(v2 + 32);
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = v6[v15];
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = v6[v15];
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = v6[v15];
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = v6[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    v18 = sub_1B222A060();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 96 + 8 * v5++);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  if (v27 >= 64)
    bzero((void *)(v2 + 56), 8 * v10);
  else
    *v6 = v25;
  v1 = v26;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8C63C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  __int128 v29;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BA800, (uint64_t (*)(void))sub_1B1B995B8, (uint64_t)&type metadata for CommandQueue.DirtyPropagation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v6 = 0;
  v7 = (_QWORD *)(v2 + 56);
  v8 = 1 << *(_BYTE *)(v2 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v3 + 56;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v6 << 6);
      goto LABEL_22;
    }
    v17 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_29;
    v18 = v7[v17];
    if (!v18)
    {
      v17 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_29;
      v18 = v7[v17];
      if (!v18)
      {
        v17 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_29;
        v18 = v7[v17];
        if (!v18)
        {
          v17 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_29;
          v18 = v7[v17];
          if (!v18)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v6 = v17;
LABEL_22:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v20 = *v19;
    *(_QWORD *)&v4 = v19[1];
    v29 = v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v5 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v13);
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v29 + 1);
    *v14 = v20;
    v14[1] = v29;
    ++*(_QWORD *)(v5 + 16);
  }
  while (v11 - 5 != v6)
  {
    v18 = *(_QWORD *)(v2 + 96 + 8 * v6++);
    if (v18)
    {
      v17 = v6 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  v27 = 1 << *(_BYTE *)(v2 + 32);
  if (v27 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v27;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v5;
  return result;
}

uint64_t sub_1B1B8C900()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  _QWORD *v31;
  char v32[72];

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B780, (uint64_t (*)(void))sub_1B1B9CB84, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_35;
  v30 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v8)
      goto LABEL_31;
    v16 = v31[v15];
    if (!v16)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_31;
      v16 = v31[v15];
      if (!v16)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_31;
        v16 = v31[v15];
        if (!v16)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_31;
          v16 = v31[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v10 = v15;
LABEL_22:
    v17 = *(_QWORD *)(v2 + 48) + 32 * v14;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(unsigned __int8 *)(v17 + 24);
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v32, v18);
    sub_1B222A084();
    sub_1B222A084();
    if (v21 != 1)
      sub_1B222A078();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 32 * v11;
    *(_QWORD *)v12 = v18;
    *(_BYTE *)(v12 + 8) = v19;
    *(_QWORD *)(v12 + 16) = v20;
    *(_BYTE *)(v12 + 24) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v8 - 5 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v15 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_31:
  swift_release();
  v1 = v30;
  v28 = 1 << *(_BYTE *)(v2 + 32);
  if (v28 > 63)
    bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v28;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_35:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8CC30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1B1AED5E4(0, &qword_1EEF5B4A0, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 0;
  v6 = (uint64_t *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  v25 = -1 << v7;
  v26 = v1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  v27 = 1 << *(_BYTE *)(v2 + 32);
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = v6[v15];
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = v6[v15];
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = v6[v15];
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = v6[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    v18 = sub_1B222A060();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 96 + 8 * v5++);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  if (v27 >= 64)
    bzero((void *)(v2 + 56), 8 * v10);
  else
    *v6 = v25;
  v1 = v26;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8CEA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  id v37;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B8F0, (uint64_t (*)(void))sub_1B1A0293C, (uint64_t)&type metadata for GraphScheduling, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_42;
  v33 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v36 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  v34 = v2;
  v35 = v8;
  v32 = v8 - 5;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v10;
      v15 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (v10 + 1 >= v35)
      goto LABEL_38;
    v16 = v36[v14];
    if (!v16)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v35)
        goto LABEL_38;
      v16 = v36[v14];
      if (!v16)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v35)
          goto LABEL_38;
        v16 = v36[v14];
        if (!v16)
        {
          v14 = v10 + 4;
          if (v10 + 4 >= v35)
            goto LABEL_38;
          v16 = v36[v14];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v15 = __clz(__rbit64(v16)) + (v14 << 6);
LABEL_22:
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v19 = *(void **)v17;
    v18 = *(void **)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 20);
    v21 = *(unsigned int *)(v17 + 16) | ((unint64_t)*(unsigned __int8 *)(v17 + 20) << 32);
    sub_1B222A06C();
    if (v20 >> 6)
    {
      if (v20 >> 6 == 1)
      {
        sub_1B222A078();
        sub_1B222874C();
        v22 = v18;
        v37 = v19;
        sub_1B2228824();
        swift_bridgeObjectRelease();
        sub_1B222A084();
        if (v18)
        {
          v23 = v22;
          sub_1B2229028();

        }
        v2 = v34;
        sub_1B222A084();
        if ((v21 & 0x100000000) == 0)
          sub_1B222A09C();

      }
      else
      {
        sub_1B222A078();
      }
    }
    else
    {
      sub_1B222A078();
      sub_1B222A084();
    }
    v24 = sub_1B222A0C0();
    v25 = -1 << *(_BYTE *)(v4 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (v27 + 1 == v28)
          v27 = 0;
        else
          ++v27;
        v29 = *(_QWORD *)(v9 + 8 * v27);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v27 << 6);
    }
    v10 = v14;
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 24 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v18;
    *(_BYTE *)(v12 + 20) = BYTE4(v21);
    *(_DWORD *)(v12 + 16) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v32 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v14 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_38:
  swift_release();
  v1 = v33;
  v30 = 1 << *(_BYTE *)(v2 + 32);
  if (v30 > 63)
    bzero(v36, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v36 = -1 << v30;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_42:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8D2A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  __int128 v26;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1ED4B7A10, (uint64_t (*)(void))sub_1B1B68ED0, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v6 = 0;
  v7 = (_QWORD *)(v2 + 56);
  v8 = 1 << *(_BYTE *)(v2 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v3 + 56;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v6 << 6);
      goto LABEL_22;
    }
    v16 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_29;
    v17 = v7[v16];
    if (!v17)
    {
      v16 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_29;
      v17 = v7[v16];
      if (!v17)
      {
        v16 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_29;
        v17 = v7[v16];
        if (!v17)
        {
          v16 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_29;
          v17 = v7[v16];
          if (!v17)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v6 = v16;
LABEL_22:
    *(_QWORD *)&v4 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v26 = v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v5 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v23 == -1);
      v13 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v26 + 1);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v13) = v26;
    ++*(_QWORD *)(v5 + 16);
  }
  while (v11 - 5 != v6)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v6++);
    if (v17)
    {
      v16 = v6 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  v24 = 1 << *(_BYTE *)(v2 + 32);
  if (v24 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v24;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v5;
  return result;
}

uint64_t sub_1B1B8D554()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t *v26;
  int64_t v27;
  _QWORD *v28;

  v1 = v0;
  v2 = *v0;
  sub_1B1B9D460(0, &qword_1EEF5B348, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, &qword_1EEF58070, (uint64_t)&unk_1B2269BC0);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v26 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v28 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  v27 = v8;
  v25 = v8 - 5;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (v10 + 1 >= v27)
      goto LABEL_29;
    v15 = v28[v14];
    if (!v15)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v27)
        goto LABEL_29;
      v15 = v28[v14];
      if (!v15)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v27)
          goto LABEL_29;
        v15 = v28[v14];
        if (!v15)
        {
          v14 = v10 + 4;
          if (v10 + 4 >= v27)
            goto LABEL_29;
          v15 = v28[v14];
          if (!v15)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v10 = v14;
LABEL_22:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_1B222874C();
    sub_1B222A06C();
    sub_1B2228824();
    v17 = sub_1B222A0C0();
    swift_bridgeObjectRelease();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v9 + 8 * (v19 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v9 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (v20 + 1 == v21)
          v20 = 0;
        else
          ++v20;
        v22 = *(_QWORD *)(v9 + 8 * v20);
      }
      while (v22 == -1);
      v11 = __clz(__rbit64(~v22)) + (v20 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v16;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v25 != v10)
  {
    v15 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v15)
    {
      v14 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v1 = v26;
  v23 = 1 << *(_BYTE *)(v2 + 32);
  if (v23 > 63)
    bzero(v28, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v23;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8D84C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;

  v1 = v0;
  v2 = *v0;
  sub_1B1AED5E4(0, (unint64_t *)&unk_1ED4BA828, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v28 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v8)
      goto LABEL_29;
    v16 = v28[v15];
    if (!v16)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_29;
      v16 = v28[v15];
      if (!v16)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_29;
        v16 = v28[v15];
        if (!v16)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_29;
          v16 = v28[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v10 = v15;
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v18 = *v17;
    v19 = v17[1];
    sub_1B222A06C();
    sub_1B2228824();
    v20 = sub_1B222A0C0();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (v23 + 1 == v24)
          v23 = 0;
        else
          ++v23;
        v25 = *(_QWORD *)(v9 + 8 * v23);
      }
      while (v25 == -1);
      v11 = __clz(__rbit64(~v25)) + (v23 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v18;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v8 - 5 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v15 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v1 = v0;
  v26 = 1 << *(_BYTE *)(v2 + 32);
  if (v26 > 63)
    bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v26;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8DB14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char v26[72];

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1EEF5B3D8, (uint64_t (*)(void))sub_1B1B99F84, (uint64_t)&type metadata for ScriptLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    v15 = v11 + 1;
    if (v11 + 1 >= v9)
      goto LABEL_29;
    v16 = v6[v15];
    if (!v16)
    {
      v15 = v11 + 2;
      if (v11 + 2 >= v9)
        goto LABEL_29;
      v16 = v6[v15];
      if (!v16)
      {
        v15 = v11 + 3;
        if (v11 + 3 >= v9)
          goto LABEL_29;
        v16 = v6[v15];
        if (!v16)
        {
          v15 = v11 + 4;
          if (v11 + 4 >= v9)
            goto LABEL_29;
          v16 = v6[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v26, v17);
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v10 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v9 - 5 != v11)
  {
    v16 = *(_QWORD *)(v2 + 8 * v11++ + 96);
    if (v16)
    {
      v15 = v11 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v1 = v0;
  v24 = 1 << *(_BYTE *)(v2 + 32);
  if (v24 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v6 = -1 << v24;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8DDBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1ED4BA810, (uint64_t (*)(void))sub_1B1B9D014, (uint64_t)&type metadata for EffectID, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 0;
  v6 = (_QWORD *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = v6[v15];
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = v6[v15];
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = v6[v15];
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = v6[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    sub_1B222A06C();
    sub_1B222A09C();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 96 + 8 * v5++);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  v24 = 1 << *(_BYTE *)(v2 + 32);
  if (v24 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v6 = -1 << v24;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8E058()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t *v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1EEF5B798, (uint64_t (*)(void))sub_1B1B9CBC8, (uint64_t)&type metadata for EntityInstance, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v29 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v8)
      goto LABEL_29;
    v16 = v30[v15];
    if (!v16)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_29;
      v16 = v30[v15];
      if (!v16)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_29;
        v16 = v30[v15];
        if (!v16)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_29;
          v16 = v30[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v10 = v15;
LABEL_22:
    v17 = *(_QWORD *)(v2 + 48) + 16 * v14;
    v18 = *(_DWORD *)v17;
    v19 = *(_DWORD *)(v17 + 4);
    v20 = *(_QWORD *)(v17 + 8);
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    sub_1B222A078();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v26 == -1);
      v11 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
    *(_DWORD *)v12 = v18;
    *(_DWORD *)(v12 + 4) = v19;
    *(_QWORD *)(v12 + 8) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v8 - 5 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v15 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v1 = v29;
  v27 = 1 << *(_BYTE *)(v2 + 32);
  if (v27 > 63)
    bzero(v30, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v27;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8E354()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  __int128 v26;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1ED4842C8, (uint64_t (*)(void))sub_1B1B9CC0C, (uint64_t)&type metadata for EmitterReference, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v6 = 0;
  v7 = (_QWORD *)(v2 + 56);
  v8 = 1 << *(_BYTE *)(v2 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v3 + 56;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v6 << 6);
      goto LABEL_22;
    }
    v16 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_29;
    v17 = v7[v16];
    if (!v17)
    {
      v16 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_29;
      v17 = v7[v16];
      if (!v17)
      {
        v16 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_29;
        v17 = v7[v16];
        if (!v17)
        {
          v16 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_29;
          v17 = v7[v16];
          if (!v17)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v6 = v16;
LABEL_22:
    *(_QWORD *)&v4 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v26 = v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v5 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v23 == -1);
      v13 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v26 + 1);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v13) = v26;
    ++*(_QWORD *)(v5 + 16);
  }
  while (v11 - 5 != v6)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v6++);
    if (v17)
    {
      v16 = v6 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  v24 = 1 << *(_BYTE *)(v2 + 32);
  if (v24 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v24;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v5;
  return result;
}

uint64_t sub_1B1B8E608()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1EEF5B688, (uint64_t (*)(void))sub_1B1B99E24, (uint64_t)&type metadata for Target, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  v6 = -1;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_6;
    }
    v12 = v9 + 1;
    if (v9 + 1 >= v8)
      goto LABEL_20;
    v13 = v5[v12];
    if (!v13)
    {
      v12 = v9 + 2;
      if (v9 + 2 >= v8)
        goto LABEL_20;
      v13 = v5[v12];
      if (!v13)
      {
        v12 = v9 + 3;
        if (v9 + 3 >= v8)
          goto LABEL_20;
        v13 = v5[v12];
        if (!v13)
        {
          v12 = v9 + 4;
          if (v9 + 4 >= v8)
            goto LABEL_20;
          v13 = v5[v12];
          if (!v13)
            break;
        }
      }
    }
LABEL_19:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v9 = v12;
LABEL_6:
    sub_1B1B8F094(*(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v11));
  }
  while (v8 - 5 != v9)
  {
    v13 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v13)
    {
      v12 = v9 + 4;
      goto LABEL_19;
    }
  }
LABEL_20:
  swift_release();
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_24:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1B1B8E7E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BA818, (uint64_t (*)(void))sub_1B1B99A44, (uint64_t)&type metadata for Renderer.UnscheduledCommandBuffer, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 0;
  v6 = (_QWORD *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = v6[v15];
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = v6[v15];
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = v6[v15];
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = v6[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1B222A06C();
    sub_1B222A078();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 96 + 8 * v5++);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  v24 = 1 << *(_BYTE *)(v2 + 32);
  if (v24 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v6 = -1 << v24;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B8EA80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v1 = v0;
  v2 = sub_1B222826C();
  v39 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1B1B9D460(0, &qword_1EEF5B840, v7, (unint64_t *)&qword_1ED4B7B38, MEMORY[0x1E0CB09C8]);
  v8 = sub_1B22293E8();
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_33;
  v36 = v0;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v11 = *(_QWORD *)(v6 + 56);
  v38 = (_QWORD *)(v6 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  v15 = v8 + 56;
  swift_retain();
  v16 = 0;
  v37 = v14;
  v35 = v14 - 5;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_22;
    }
    v20 = v16 + 1;
    if (v16 + 1 >= v37)
      goto LABEL_29;
    v21 = v38[v20];
    if (!v21)
    {
      v20 = v16 + 2;
      if (v16 + 2 >= v37)
        goto LABEL_29;
      v21 = v38[v20];
      if (!v21)
      {
        v20 = v16 + 3;
        if (v16 + 3 >= v37)
          goto LABEL_29;
        v21 = v38[v20];
        if (!v21)
        {
          v20 = v16 + 4;
          if (v16 + 4 >= v37)
            goto LABEL_29;
          v21 = v38[v20];
          if (!v21)
            break;
        }
      }
    }
LABEL_21:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v16 = v20;
LABEL_22:
    v22 = v6;
    v23 = *(_QWORD *)(v6 + 48);
    v24 = *(_QWORD *)(v39 + 72);
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
    v25(v5, v23 + v24 * v19, v2);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v26 = sub_1B22285D8();
    v27 = -1 << *(_BYTE *)(v9 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (v29 + 1 == v30)
          v29 = 0;
        else
          ++v29;
        v31 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v31 == -1);
      v17 = __clz(__rbit64(~v31)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v25((char *)(*(_QWORD *)(v9 + 48) + v17 * v24), (unint64_t)v5, v2);
    ++*(_QWORD *)(v9 + 16);
    v6 = v22;
  }
  while (v35 != v16)
  {
    v21 = *(_QWORD *)(v6 + 8 * v16++ + 96);
    if (v21)
    {
      v20 = v16 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v1 = v36;
  v32 = 1 << *(_BYTE *)(v6 + 32);
  if (v32 > 63)
    bzero(v38, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v38 = -1 << v32;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v9;
  return result;
}

uint64_t sub_1B1B8EDD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B570, (uint64_t (*)(void))sub_1B1B9AFBC, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_33;
  v5 = 0;
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = v3 + 56;
  v28 = (_QWORD *)(v2 + 56);
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v9)
      goto LABEL_29;
    v16 = v28[v15];
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v9)
        goto LABEL_29;
      v16 = v28[v15];
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v9)
          goto LABEL_29;
        v16 = v28[v15];
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v9)
            goto LABEL_29;
          v16 = v28[v15];
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v19 = *v17;
    v18 = v17[1];
    sub_1B222A06C();
    sub_1B222A078();
    v20 = sub_1B222A0C0();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (v23 + 1 == v24)
          v23 = 0;
        else
          ++v23;
        v25 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v25 == -1);
      v11 = __clz(__rbit64(~v25)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v19;
    v12[1] = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v9 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 96 + 8 * v5++);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  v26 = 1 << *(_BYTE *)(v2 + 32);
  if (v26 > 63)
    bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v26;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_33:
  result = swift_release();
  *v1 = v4;
  return result;
}

void sub_1B1B8F094(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1B8F0E4()
{
  __int16 v0;
  uint64_t v1;

  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1B1B8F15C + 4 * byte_1B227D724[HIBYTE(v0)]))(v1, 0x34365F363878);
}

unint64_t sub_1B1B8F15C()
{
  uint64_t v0;
  __int16 v1;
  unint64_t result;

  sub_1B2228824();
  swift_bridgeObjectRelease();
  sub_1B222A0C0();
  result = sub_1B222937C();
  *(_QWORD *)(v0 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_WORD *)(*(_QWORD *)(v0 + 48) + 2 * result) = v1;
  ++*(_QWORD *)(v0 + 16);
  return result;
}

uint64_t sub_1B1B8F214(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1B1B8C3C8();
    }
    else
    {
      if (v7 > v6)
      {
        result = sub_1B1B9137C(&qword_1ED4BA838, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428]);
        goto LABEL_14;
      }
      sub_1B1B92A14();
    }
    v8 = *v3;
    result = sub_1B222A060();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 48);
      if (*(_QWORD *)(v10 + 8 * a2) == v5)
      {
LABEL_13:
        result = sub_1B2229FB8();
        __break(1u);
      }
      else
      {
        v11 = ~v9;
        while (1)
        {
          a2 = (a2 + 1) & v11;
          if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          if (*(_QWORD *)(v10 + 8 * a2) == v5)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  ++*(_QWORD *)(v12 + 16);
  return result;
}

uint64_t sub_1B1B8F344(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;

  v6 = a2;
  v7 = result;
  v8 = HIDWORD(a2);
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_15;
  if ((a4 & 1) != 0)
  {
    sub_1B1B8C63C();
  }
  else
  {
    if (v10 > v9)
    {
      result = sub_1B1B91000();
LABEL_15:
      v18 = *v4;
      *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
      v19 = *(_QWORD *)(v18 + 48) + 16 * a3;
      *(_QWORD *)v19 = v7;
      *(_DWORD *)(v19 + 8) = v6;
      *(_DWORD *)(v19 + 12) = v8;
      ++*(_QWORD *)(v18 + 16);
      return result;
    }
    sub_1B1B92C64();
  }
  v11 = *v4;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  result = sub_1B222A0C0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
    goto LABEL_15;
  v13 = ~v12;
  while (1)
  {
    v14 = *(_QWORD *)(v11 + 48) + 16 * a3;
    v16 = *(_DWORD *)(v14 + 8);
    v15 = *(_DWORD *)(v14 + 12);
    if (v16 == v6 && v15 == (_DWORD)v8)
      break;
    a3 = (a3 + 1) & v13;
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
      goto LABEL_15;
  }
  result = sub_1B2229FB8();
  __break(1u);
  return result;
}

unint64_t sub_1B1B8F4AC(unint64_t result, unsigned __int8 a2, uint64_t a3, char a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _BYTE v27[72];

  v8 = result;
  v9 = *(_QWORD *)(*v6 + 16);
  v10 = *(_QWORD *)(*v6 + 24);
  if (v10 <= v9 || (a6 & 1) == 0)
  {
    if ((a6 & 1) != 0)
    {
      sub_1B1B8C900();
    }
    else
    {
      if (v10 > v9)
      {
        result = sub_1B1B911A0();
        goto LABEL_20;
      }
      sub_1B1B92EF4();
    }
    v11 = *v6;
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v27, v8);
    sub_1B222A084();
    sub_1B222A084();
    if ((a4 & 1) == 0)
      sub_1B222A078();
    result = sub_1B222A0C0();
    v12 = -1 << *(_BYTE *)(v11 + 32);
    a5 = result & ~v12;
    if (((*(_QWORD *)(v11 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
    {
      v13 = ~v12;
      do
      {
        v14 = *(_QWORD *)(v11 + 48) + 32 * a5;
        v15 = *(_QWORD *)v14;
        v16 = *(unsigned __int8 *)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 16);
        v18 = *(_BYTE *)(v14 + 24);
        sub_1B1B1DD24(*(_QWORD *)v14);
        sub_1B1CA8B88(v15);
        v20 = v19;
        result = sub_1B1A05610(v15);
        if ((v20 & 1) != 0 && v16 == a2)
        {
          if ((v18 & 1) != 0)
          {
            if ((a4 & 1) != 0)
              goto LABEL_19;
          }
          else if ((a4 & 1) == 0 && v17 == a3)
          {
LABEL_19:
            result = sub_1B2229FB8();
            __break(1u);
            break;
          }
        }
        a5 = (a5 + 1) & v13;
      }
      while (((*(_QWORD *)(v11 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
    }
  }
LABEL_20:
  v21 = *v23;
  *(_QWORD *)(*v23 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v22 = *(_QWORD *)(v21 + 48) + 32 * a5;
  *(_QWORD *)v22 = v8;
  *(_BYTE *)(v22 + 8) = a2;
  *(_QWORD *)(v22 + 16) = a3;
  *(_BYTE *)(v22 + 24) = a4 & 1;
  ++*(_QWORD *)(v21 + 16);
  return result;
}

uint64_t sub_1B1B8F6C0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1B1B8CC30();
    }
    else
    {
      if (v7 > v6)
      {
        result = sub_1B1B9137C(&qword_1EEF5B4A0, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528]);
        goto LABEL_14;
      }
      sub_1B1B931F0();
    }
    v8 = *v3;
    result = sub_1B222A060();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 48);
      if (*(_QWORD *)(v10 + 8 * a2) == v5)
      {
LABEL_13:
        result = sub_1B2229FB8();
        __break(1u);
      }
      else
      {
        v11 = ~v9;
        while (1)
        {
          a2 = (a2 + 1) & v11;
          if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          if (*(_QWORD *)(v10 + 8 * a2) == v5)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  ++*(_QWORD *)(v12 + 16);
  return result;
}

void sub_1B1B8F7F0(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v33;
  void *v34;
  void *v35;
  BOOL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  id v47;
  id v48;
  id v49;
  char v50;
  unint64_t v51;
  char v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t *v59;
  char v60[80];

  v10 = a3 & 0xFFFFFFFFFFLL;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 <= v11 || (a5 & 1) == 0)
  {
    if ((a5 & 1) != 0)
    {
      sub_1B1B8CEA4();
    }
    else
    {
      if (v12 > v11)
      {
        sub_1B1B91510();
        goto LABEL_56;
      }
      sub_1B1B93440();
    }
    v13 = *v5;
    sub_1B222A06C();
    sub_1B20CB97C((uint64_t)v60, (void *)a1, (void *)a2, a3 & 0xFFFFFFFFFFLL);
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v13 + 32);
    a4 = v14 & ~v15;
    v16 = v13 + 56;
    if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
    {
      v46 = a3;
      v17 = ~v15;
      v18 = v10 & 0xC000000000;
      v19 = a1 == 1;
      v20 = (a2 | a1) != 0;
      if (v10 != 0x8000000000)
      {
        v19 = 0;
        v20 = 1;
      }
      if (a2)
        v19 = 0;
      if (v18 != 0x8000000000)
        v19 = 0;
      v53 = v19;
      v54 = a1;
      v21 = v18 != 0x8000000000 || v20;
      v52 = v21;
      v22 = v10 >> 38;
      v57 = (void *)a1;
      v58 = v10;
      v56 = v17;
      v55 = v10 & 0xC000000000;
      v51 = v10 >> 38;
      do
      {
        v23 = *(_QWORD *)(v13 + 48) + 24 * a4;
        v24 = *(_QWORD *)v23;
        v25 = *(unsigned __int8 *)(v23 + 20);
        if (v25 >> 6)
        {
          v26 = *(_QWORD *)(v23 + 8);
          v27 = *(unsigned int *)(v23 + 16) | ((unint64_t)*(unsigned __int8 *)(v23 + 20) << 32);
          if (v25 >> 6 != 1)
          {
            if (v26 | v24)
              v36 = 0;
            else
              v36 = v27 == 0x8000000000;
            if (v36)
            {
              if ((v52 & 1) == 0)
                goto LABEL_55;
            }
            else if (v53)
            {
              goto LABEL_55;
            }
            goto LABEL_20;
          }
          if (v18 != 0x4000000000)
            goto LABEL_20;
          v28 = sub_1B222874C();
          v30 = v29;
          if (v28 == sub_1B222874C() && v30 == v31)
          {
            sub_1B1A026F0((id)v24, (void *)v26, v27);
            v37 = (id)v26;
            v38 = (id)a2;
            v39 = (id)v24;
            v40 = (id)a1;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v50 = sub_1B2229D24();
            sub_1B1A026F0((id)v24, (void *)v26, v27);
            v48 = (id)v26;
            v49 = (id)a2;
            v47 = (id)v24;
            v33 = (id)a1;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v50 & 1) == 0)
            {

              a1 = (unint64_t)v57;
              v35 = v48;
              v34 = v49;
LABEL_51:

              v10 = v58;
              goto LABEL_52;
            }
          }
          if (!v26)
          {

            a1 = (unint64_t)v57;
            v10 = v58;
            if (a2)
            {
              v26 = 0;
              v34 = (void *)a2;
LABEL_52:

              sub_1B1A02724((void *)v24, (void *)v26, v27);
              v17 = v56;
              v16 = v13 + 56;
              v18 = v55;
              v22 = v51;
              goto LABEL_20;
            }
            sub_1B1A02724((void *)v24, 0, v27);
            v17 = v56;
            v16 = v13 + 56;
            v18 = v55;
            v22 = v51;
            if ((v27 & 0x100000000) != 0)
            {
LABEL_54:
              if ((v10 & 0x100000000) != 0)
                goto LABEL_55;
              goto LABEL_20;
            }
            goto LABEL_45;
          }
          if (!a2)
          {
            v33 = (id)v26;
            v35 = (void *)v24;
            a1 = (unint64_t)v57;
            v34 = v57;
            goto LABEL_51;
          }
          sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7E0);
          v41 = (id)v26;
          v42 = (id)a2;
          v43 = sub_1B222901C();

          a1 = (unint64_t)v57;
          sub_1B1A02724((void *)v24, (void *)v26, v27);
          v10 = v58;
          v17 = v56;
          v16 = v13 + 56;
          v18 = v55;
          v22 = v51;
          if ((v43 & 1) != 0)
          {
            if ((v27 & 0x100000000) != 0)
              goto LABEL_54;
LABEL_45:
            if ((v10 & 0x100000000) == 0 && (_DWORD)v27 == v46)
              goto LABEL_55;
          }
        }
        else if (!v22 && *(_QWORD *)v23 == v54)
        {
LABEL_55:
          sub_1B2229FB8();
          __break(1u);
          break;
        }
LABEL_20:
        a4 = (a4 + 1) & v17;
      }
      while (((*(_QWORD *)(v16 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
    }
  }
LABEL_56:
  v44 = *v59;
  *(_QWORD *)(*v59 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v45 = *(_QWORD *)(v44 + 48) + 24 * a4;
  *(_QWORD *)v45 = a1;
  *(_QWORD *)(v45 + 8) = a2;
  *(_BYTE *)(v45 + 20) = BYTE4(v10);
  *(_DWORD *)(v45 + 16) = v10;
  ++*(_QWORD *)(v44 + 16);
}

unint64_t sub_1B1B8FC50(unint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v16;
  _DWORD *v17;

  v5 = result;
  v6 = HIDWORD(result);
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_15;
  if ((a3 & 1) != 0)
  {
    sub_1B1B8D2A0();
  }
  else
  {
    if (v8 > v7)
    {
      result = sub_1B1B916EC();
LABEL_15:
      v16 = *v3;
      *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      v17 = (_DWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2);
      *v17 = v5;
      v17[1] = v6;
      ++*(_QWORD *)(v16 + 16);
      return result;
    }
    sub_1B1B93818();
  }
  v9 = *v3;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  result = sub_1B222A0C0();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_15;
  v11 = ~v10;
  while (1)
  {
    v12 = (int *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v14 = *v12;
    v13 = v12[1];
    if (v14 == v5 && v13 == (_DWORD)v6)
      break;
    a2 = (a2 + 1) & v11;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
      goto LABEL_15;
  }
  result = sub_1B2229FB8();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8FDA4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  if ((a3 & 1) != 0)
  {
    sub_1B1B8D554();
  }
  else
  {
    if (v8 > v7)
    {
      result = sub_1B1B9188C();
LABEL_22:
      v25 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * a2) = v6;
      ++*(_QWORD *)(v25 + 16);
      return result;
    }
    sub_1B1B93A98();
  }
  v9 = *v3;
  sub_1B222874C();
  sub_1B222A06C();
  sub_1B2228824();
  v10 = sub_1B222A0C0();
  result = swift_bridgeObjectRelease();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v12 = sub_1B222874C();
  v14 = v13;
  if (v12 == sub_1B222874C() && v14 == v15)
  {
LABEL_23:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v17 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      v18 = ~v11;
      do
      {
        a2 = (a2 + 1) & v18;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_22;
        v19 = sub_1B222874C();
        v21 = v20;
        if (v19 == sub_1B222874C() && v21 == v22)
          goto LABEL_23;
        v24 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      while ((v24 & 1) == 0);
    }
  }
  type metadata accessor for VFXTriggerType(0);
  result = sub_1B2229FB8();
  __break(1u);
  return result;
}

uint64_t sub_1B1B8FFC8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1B1B8D84C();
    }
    else
    {
      if (v10 > v9)
      {
        result = sub_1B1B91A4C();
        goto LABEL_22;
      }
      sub_1B1B93D5C();
    }
    v11 = *v4;
    sub_1B222A06C();
    sub_1B2228824();
    result = sub_1B222A0C0();
    v12 = -1 << *(_BYTE *)(v11 + 32);
    a3 = result & ~v12;
    v13 = v11 + 56;
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = *(_QWORD *)(v11 + 48);
      v15 = (_QWORD *)(v14 + 16 * a3);
      v16 = *v15 == v8 && v15[1] == a2;
      if (v16 || (result = sub_1B2229D24(), (result & 1) != 0))
      {
LABEL_21:
        result = sub_1B2229FB8();
        __break(1u);
      }
      else
      {
        v17 = ~v12;
        while (1)
        {
          a3 = (a3 + 1) & v17;
          if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
            break;
          v18 = (_QWORD *)(v14 + 16 * a3);
          if (*v18 != v8 || v18[1] != a2)
          {
            result = sub_1B2229D24();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  ++*(_QWORD *)(v20 + 16);
  return result;
}

unint64_t sub_1B1B90158(unint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  _BYTE v19[72];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1B1B8DB14();
    }
    else
    {
      if (v8 > v7)
      {
        result = sub_1B1B91C10();
        goto LABEL_14;
      }
      sub_1B1B93FF4();
    }
    v9 = *v3;
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v19, v6);
    result = sub_1B222A0C0();
    v10 = -1 << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
      sub_1B1B1DD24(v11);
      sub_1B1CA8B88(v11);
      v13 = v12;
      result = sub_1B1A05610(v11);
      if ((v13 & 1) != 0)
      {
LABEL_13:
        result = sub_1B2229FB8();
        __break(1u);
      }
      else
      {
        v14 = ~v10;
        while (1)
        {
          a2 = (a2 + 1) & v14;
          if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          v15 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
          sub_1B1B1DD24(v15);
          sub_1B1CA8B88(v15);
          v17 = v16;
          result = sub_1B1A05610(v15);
          if ((v17 & 1) != 0)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = v6;
  ++*(_QWORD *)(v18 + 16);
  return result;
}

uint64_t sub_1B1B902E0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1B1B8DDBC();
    }
    else
    {
      if (v7 > v6)
      {
        result = sub_1B1B91DCC();
        goto LABEL_14;
      }
      sub_1B1B94270();
    }
    v8 = *v3;
    sub_1B222A06C();
    sub_1B222A09C();
    result = sub_1B222A0C0();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 48);
      if (*(_DWORD *)(v10 + 4 * a2) == v5)
      {
LABEL_13:
        result = sub_1B2229FB8();
        __break(1u);
      }
      else
      {
        v11 = ~v9;
        while (1)
        {
          a2 = (a2 + 1) & v11;
          if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          if (*(_DWORD *)(v10 + 4 * a2) == v5)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v12 + 48) + 4 * a2) = v5;
  ++*(_QWORD *)(v12 + 16);
  return result;
}

unint64_t sub_1B1B90424(unint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  v8 = HIDWORD(result);
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1B1B8E058();
    }
    else
    {
      if (v10 > v9)
      {
        result = sub_1B1B91F6C();
        goto LABEL_18;
      }
      sub_1B1B944D8();
    }
    v11 = *v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    sub_1B222A078();
    result = sub_1B222A0C0();
    v12 = -1 << *(_BYTE *)(v11 + 32);
    a3 = result & ~v12;
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v13 = ~v12;
      while (1)
      {
        v14 = *(_QWORD *)(v11 + 48) + 16 * a3;
        v15 = *(_DWORD *)v14 == v7 && *(_DWORD *)(v14 + 4) == (_DWORD)v8;
        if (v15 && *(_QWORD *)(v14 + 8) == a2)
          break;
        a3 = (a3 + 1) & v13;
        if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          goto LABEL_18;
      }
      result = sub_1B2229FB8();
      __break(1u);
    }
  }
LABEL_18:
  v16 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v17 = *(_QWORD *)(v16 + 48) + 16 * a3;
  *(_DWORD *)v17 = v7;
  *(_DWORD *)(v17 + 4) = v8;
  *(_QWORD *)(v17 + 8) = a2;
  ++*(_QWORD *)(v16 + 16);
  return result;
}

unint64_t sub_1B1B905A4(unint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v16;
  _DWORD *v17;

  v5 = result;
  v6 = HIDWORD(result);
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_15;
  if ((a3 & 1) != 0)
  {
    sub_1B1B8E354();
  }
  else
  {
    if (v8 > v7)
    {
      result = sub_1B1B9211C();
LABEL_15:
      v16 = *v3;
      *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      v17 = (_DWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2);
      *v17 = v5;
      v17[1] = v6;
      ++*(_QWORD *)(v16 + 16);
      return result;
    }
    sub_1B1B94798();
  }
  v9 = *v3;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  result = sub_1B222A0C0();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_15;
  v11 = ~v10;
  while (1)
  {
    v12 = (int *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v14 = *v12;
    v13 = v12[1];
    if (v14 == v5 && v13 == (_DWORD)v6)
      break;
    a2 = (a2 + 1) & v11;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
      goto LABEL_15;
  }
  result = sub_1B2229FB8();
  __break(1u);
  return result;
}

uint64_t sub_1B1B906F8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int16 v10;

  v5 = result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1B1B8E608();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_1B1B94A18();
LABEL_8:
      sub_1B222A06C();
      __asm { BR              X10 }
    }
    result = sub_1B1B922BC();
  }
  v8 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_WORD *)(*(_QWORD *)(v8 + 48) + 2 * a2) = v10;
  ++*(_QWORD *)(v8 + 16);
  return result;
}

uint64_t sub_1B1B90B5C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1B1B8E7E4();
  }
  else
  {
    if (v7 > v6)
    {
      result = sub_1B1B9245C();
LABEL_12:
      v11 = *v3;
      *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * a2) = v5;
      ++*(_QWORD *)(v11 + 16);
      return result;
    }
    sub_1B1B94BB8();
  }
  v8 = *v3;
  sub_1B222A06C();
  sub_1B222A078();
  result = sub_1B222A0C0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_12;
  v10 = ~v9;
  while (*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * a2) != v5)
  {
    a2 = (a2 + 1) & v10;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
      goto LABEL_12;
  }
  result = sub_1B2229FB8();
  __break(1u);
  return result;
}

uint64_t sub_1B1B90C94(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;

  v25 = a1;
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v24 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1B1B8EA80();
  }
  else
  {
    if (v13 > v12)
    {
      sub_1B1B92618();
LABEL_12:
      v21 = v25;
      v22 = *v24;
      *(_QWORD *)(*v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v22 + 48) + *(_QWORD *)(v7 + 72) * a2, v21, v6, v9);
      ++*(_QWORD *)(v22 + 16);
      return result;
    }
    sub_1B1B94E28();
  }
  v14 = *v3;
  sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v15 = sub_1B22285D8();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_12;
  v17 = ~v16;
  v18 = *(_QWORD *)(v7 + 72);
  v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  while (1)
  {
    v19(v11, *(_QWORD *)(v14 + 48) + v18 * a2, v6);
    sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
    v20 = sub_1B22286E0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    if ((v20 & 1) != 0)
      break;
    a2 = (a2 + 1) & v17;
    if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
      goto LABEL_12;
  }
  result = sub_1B2229FB8();
  __break(1u);
  return result;
}

uint64_t sub_1B1B90E90(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1B1B8EDD8();
    }
    else
    {
      if (v9 > v8)
      {
        result = sub_1B1B92850();
        goto LABEL_14;
      }
      sub_1B1B95138();
    }
    v10 = *v4;
    sub_1B222A06C();
    sub_1B222A078();
    result = sub_1B222A0C0();
    v11 = -1 << *(_BYTE *)(v10 + 32);
    a3 = result & ~v11;
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = *(_QWORD *)(v10 + 48);
      if (*(_QWORD *)(v12 + 16 * a3) == v7)
      {
LABEL_13:
        result = sub_1B2229FB8();
        __break(1u);
      }
      else
      {
        v13 = ~v11;
        while (1)
        {
          a3 = (a3 + 1) & v13;
          if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
            break;
          if (*(_QWORD *)(v12 + 16 * a3) == v7)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v15 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * a3);
  *v15 = v7;
  v15[1] = a2;
  ++*(_QWORD *)(v14 + 16);
  return result;
}

uint64_t sub_1B1B90FE4()
{
  return sub_1B1B9137C(&qword_1ED4BA838, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428]);
}

uint64_t sub_1B1B91000()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BA800, (uint64_t (*)(void))sub_1B1B995B8, (uint64_t)&type metadata for CommandQueue.DirtyPropagation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v18 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v18 + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
  }
  while (v13 - 5 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B911A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B780, (uint64_t (*)(void))sub_1B1B9CB84, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v22);
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v23 = *(_QWORD *)(v6 + 8 * v22);
        if (!v23)
        {
          v22 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v23 = *(_QWORD *)(v6 + 8 * v22);
          if (!v23)
            break;
        }
      }
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_BYTE *)(v21 + 8) = v19;
    *(_QWORD *)(v21 + 16) = v20;
    *(_BYTE *)(v21 + 24) = v17;
    sub_1B1B1DD24(v18);
  }
  while (v13 - 5 != v9)
  {
    v23 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v23)
    {
      v22 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B9137C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v4 = v3;
  sub_1B1AED5E4(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v5 = *v3;
  v6 = sub_1B22293DC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v8 = (void *)(v6 + 56);
  v9 = v5 + 56;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 56 + 8 * v10)
    memmove(v8, (const void *)(v5 + 56), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v19 = v12 + 1;
    if (v12 + 1 >= v16)
      goto LABEL_26;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    if (!v20)
    {
      v19 = v12 + 2;
      if (v12 + 2 >= v16)
        goto LABEL_26;
      v20 = *(_QWORD *)(v9 + 8 * v19);
      if (!v20)
      {
        v19 = v12 + 3;
        if (v12 + 3 >= v16)
          goto LABEL_26;
        v20 = *(_QWORD *)(v9 + 8 * v19);
        if (!v20)
        {
          v19 = v12 + 4;
          if (v12 + 4 >= v16)
            goto LABEL_26;
          v20 = *(_QWORD *)(v9 + 8 * v19);
          if (!v20)
            break;
        }
      }
    }
LABEL_25:
    v21 = __clz(__rbit64(v20));
    v15 = (v20 - 1) & v20;
    v18 = v21 + (v19 << 6);
    v12 = v19;
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
  }
  while (v16 - 5 != v12)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v12++);
    if (v20)
    {
      v19 = v12 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v4 = v7;
  return result;
}

uint64_t sub_1B1B91510()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B8F0, (uint64_t (*)(void))sub_1B1A0293C, (uint64_t)&type metadata for GraphScheduling, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
        {
          v23 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v24 = *(_QWORD *)(v6 + 8 * v23);
          if (!v24)
            break;
        }
      }
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(void **)v17;
    v19 = *(void **)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 20);
    v21 = *(unsigned int *)(v17 + 16);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = v18;
    *(_QWORD *)(v22 + 8) = v19;
    *(_DWORD *)(v22 + 16) = v21;
    *(_BYTE *)(v22 + 20) = v20;
    sub_1B1A026F0(v18, v19, v21 | (v20 << 32));
  }
  while (v13 - 5 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B916EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, &qword_1ED4B7A10, (uint64_t (*)(void))sub_1B1B68ED0, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v18 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v18 + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  while (v13 - 5 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B9188C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1B9D460(0, &qword_1EEF5B348, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, &qword_1EEF58070, (uint64_t)&unk_1B2269BC0);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_23;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v6 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_23;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_23;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_23;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
        {
          v18 = v8 + 4;
          if (v8 + 4 >= v12)
            goto LABEL_23;
          v19 = *(_QWORD *)(v6 + 8 * v18);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v11 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_9:
    v15 = 8 * v14;
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    v17 = v16;
  }
  while (v12 - 5 != v8)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 4;
      goto LABEL_22;
    }
  }
LABEL_23:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B91A4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v1 = v0;
  sub_1B1AED5E4(0, (unint64_t *)&unk_1ED4BA828, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    if (!v22)
    {
      v21 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v21);
      if (!v22)
      {
        v21 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v22 = *(_QWORD *)(v6 + 8 * v21);
        if (!v22)
        {
          v21 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v22 = *(_QWORD *)(v6 + 8 * v21);
          if (!v22)
            break;
        }
      }
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v21 << 6);
    v9 = v21;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    swift_bridgeObjectRetain();
  }
  while (v13 - 5 != v9)
  {
    v22 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v22)
    {
      v21 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B91C10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, &qword_1EEF5B3D8, (uint64_t (*)(void))sub_1B1B99F84, (uint64_t)&type metadata for ScriptLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
        {
          v18 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v19 = *(_QWORD *)(v6 + 8 * v18);
          if (!v19)
            break;
        }
      }
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1B1B1DD24(v17);
  }
  while (v13 - 5 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B91DCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, &qword_1ED4BA810, (uint64_t (*)(void))sub_1B1B9D014, (uint64_t)&type metadata for EffectID, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v18 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v18 + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  while (v13 - 5 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B91F6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, &qword_1EEF5B798, (uint64_t (*)(void))sub_1B1B9CBC8, (uint64_t)&type metadata for EntityInstance, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
        {
          v20 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v21 = *(_QWORD *)(v6 + 8 * v20);
          if (!v21)
            break;
        }
      }
    }
LABEL_25:
    v22 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v22 + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
  }
  while (v13 - 5 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B9211C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, &qword_1ED4842C8, (uint64_t (*)(void))sub_1B1B9CC0C, (uint64_t)&type metadata for EmitterReference, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v18 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v18 + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  while (v13 - 5 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B922BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, &qword_1EEF5B688, (uint64_t (*)(void))sub_1B1B99E24, (uint64_t)&type metadata for Target, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v18 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v18 + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
  }
  while (v13 - 5 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B9245C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BA818, (uint64_t (*)(void))sub_1B1B99A44, (uint64_t)&type metadata for Renderer.UnscheduledCommandBuffer, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    swift_unknownObjectRetain();
  }
  while (v13 - 5 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B92618()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9D460(0, &qword_1EEF5B840, v7, (unint64_t *)&qword_1ED4B7B38, MEMORY[0x1E0CB09C8]);
  v8 = *v0;
  v9 = sub_1B22293DC();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
    goto LABEL_28;
  }
  v27 = v1;
  v11 = (void *)(v9 + 56);
  v12 = v8 + 56;
  v13 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 56 + 8 * v13)
    memmove(v11, (const void *)(v8 + 56), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v16 = 1 << *(_BYTE *)(v8 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v8 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  v26 = v19 - 5;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v23 = v15 + 1;
    if (v15 + 1 >= v19)
      goto LABEL_26;
    v24 = *(_QWORD *)(v12 + 8 * v23);
    if (!v24)
    {
      v23 = v15 + 2;
      if (v15 + 2 >= v19)
        goto LABEL_26;
      v24 = *(_QWORD *)(v12 + 8 * v23);
      if (!v24)
      {
        v23 = v15 + 3;
        if (v15 + 3 >= v19)
          goto LABEL_26;
        v24 = *(_QWORD *)(v12 + 8 * v23);
        if (!v24)
        {
          v23 = v15 + 4;
          if (v15 + 4 >= v19)
            goto LABEL_26;
          v24 = *(_QWORD *)(v12 + 8 * v23);
          if (!v24)
            break;
        }
      }
    }
LABEL_25:
    v18 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
    v15 = v23;
LABEL_12:
    v22 = *(_QWORD *)(v3 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v8 + 48) + v22, v2);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v22, v6, v2);
  }
  while (v26 != v15)
  {
    v24 = *(_QWORD *)(v8 + 8 * v15++ + 96);
    if (v24)
    {
      v23 = v15 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  v1 = v27;
LABEL_28:
  *v1 = v10;
  return result;
}

uint64_t sub_1B1B92850()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v1 = v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B570, (uint64_t (*)(void))sub_1B1B9AFBC, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1B22293DC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    if (!v22)
    {
      v21 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v21);
      if (!v22)
      {
        v21 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_26;
        v22 = *(_QWORD *)(v6 + 8 * v21);
        if (!v22)
        {
          v21 = v9 + 4;
          if (v9 + 4 >= v13)
            goto LABEL_26;
          v22 = *(_QWORD *)(v6 + 8 * v21);
          if (!v22)
            break;
        }
      }
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v21 << 6);
    v9 = v21;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    swift_retain();
  }
  while (v13 - 5 != v9)
  {
    v22 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v22)
    {
      v21 = v9 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B92A14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;

  v1 = v0;
  v2 = *v0;
  sub_1B1AED5E4(0, &qword_1ED4BA838, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v25 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = *(_QWORD *)(v6 + 8 * v15);
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = *(_QWORD *)(v6 + 8 * v15);
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = *(_QWORD *)(v6 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    v18 = sub_1B222A060();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 8 * v5++ + 96);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v25;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B92C64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  __int128 v28;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BA800, (uint64_t (*)(void))sub_1B1B995B8, (uint64_t)&type metadata for CommandQueue.DirtyPropagation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v6 = 0;
  v7 = v2 + 56;
  v8 = 1 << *(_BYTE *)(v2 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v3 + 56;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v6 << 6);
      goto LABEL_22;
    }
    v17 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_29;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    if (!v18)
    {
      v17 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_29;
      v18 = *(_QWORD *)(v7 + 8 * v17);
      if (!v18)
      {
        v17 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_29;
        v18 = *(_QWORD *)(v7 + 8 * v17);
        if (!v18)
        {
          v17 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_29;
          v18 = *(_QWORD *)(v7 + 8 * v17);
          if (!v18)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v6 = v17;
LABEL_22:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v20 = *v19;
    *(_QWORD *)&v4 = v19[1];
    v28 = v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v5 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v28 + 1);
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v13);
    *v14 = v20;
    v14[1] = v28;
    ++*(_QWORD *)(v5 + 16);
  }
  while (v11 - 5 != v6)
  {
    v18 = *(_QWORD *)(v2 + 8 * v6++ + 96);
    if (v18)
    {
      v17 = v6 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v0;
LABEL_31:
  *v1 = v5;
  return result;
}

uint64_t sub_1B1B92EF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t *v29;
  uint64_t v30;
  char v31[72];

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B780, (uint64_t (*)(void))sub_1B1B9CB84, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_33;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v29 = v0;
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v8)
      goto LABEL_31;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    if (!v16)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_31;
      v16 = *(_QWORD *)(v30 + 8 * v15);
      if (!v16)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_31;
        v16 = *(_QWORD *)(v30 + 8 * v15);
        if (!v16)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_31;
          v16 = *(_QWORD *)(v30 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v10 = v15;
LABEL_22:
    v17 = *(_QWORD *)(v2 + 48) + 32 * v14;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(unsigned __int8 *)(v17 + 24);
    sub_1B222A06C();
    sub_1B1B1DD24(v18);
    sub_1B1C9721C((uint64_t)v31, v18);
    sub_1B222A084();
    sub_1B222A084();
    if (v21 != 1)
      sub_1B222A078();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 32 * v11;
    *(_QWORD *)v12 = v18;
    *(_BYTE *)(v12 + 8) = v19;
    *(_QWORD *)(v12 + 16) = v20;
    *(_BYTE *)(v12 + 24) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v8 - 5 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v15 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_31:
  result = swift_release_n();
  v1 = v29;
LABEL_33:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B931F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;

  v1 = v0;
  v2 = *v0;
  sub_1B1AED5E4(0, &qword_1EEF5B4A0, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v25 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = *(_QWORD *)(v6 + 8 * v15);
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = *(_QWORD *)(v6 + 8 * v15);
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = *(_QWORD *)(v6 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    v18 = sub_1B222A060();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 8 * v5++ + 96);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v25;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B93440()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  id v36;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B8F0, (uint64_t (*)(void))sub_1B1A0293C, (uint64_t)&type metadata for GraphScheduling, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_40;
  }
  v32 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v34 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  v35 = v8;
  v31 = v8 - 5;
  v33 = v2;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v10;
      v15 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (v10 + 1 >= v35)
      goto LABEL_38;
    v16 = *(_QWORD *)(v34 + 8 * v14);
    if (!v16)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v35)
        goto LABEL_38;
      v16 = *(_QWORD *)(v34 + 8 * v14);
      if (!v16)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v35)
          goto LABEL_38;
        v16 = *(_QWORD *)(v34 + 8 * v14);
        if (!v16)
        {
          v14 = v10 + 4;
          if (v10 + 4 >= v35)
            goto LABEL_38;
          v16 = *(_QWORD *)(v34 + 8 * v14);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v15 = __clz(__rbit64(v16)) + (v14 << 6);
LABEL_22:
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(void **)v17;
    v19 = *(void **)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 20);
    v21 = *(unsigned int *)(v17 + 16) | ((unint64_t)*(unsigned __int8 *)(v17 + 20) << 32);
    sub_1B222A06C();
    if (v20 >> 6)
    {
      if (v20 >> 6 == 1)
      {
        sub_1B222A078();
        sub_1B222874C();
        v36 = v18;
        sub_1B1A026F0(v18, v19, v21);
        v22 = v19;
        sub_1B2228824();
        swift_bridgeObjectRelease();
        sub_1B222A084();
        if (v19)
        {
          v23 = v22;
          sub_1B2229028();

        }
        v2 = v33;
        sub_1B222A084();
        if ((v21 & 0x100000000) == 0)
          sub_1B222A09C();

      }
      else
      {
        sub_1B222A078();
      }
    }
    else
    {
      sub_1B222A078();
      sub_1B222A084();
    }
    v24 = sub_1B222A0C0();
    v25 = -1 << *(_BYTE *)(v4 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (v27 + 1 == v28)
          v27 = 0;
        else
          ++v27;
        v29 = *(_QWORD *)(v9 + 8 * v27);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v27 << 6);
    }
    v10 = v14;
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 24 * v11;
    *(_QWORD *)v12 = v18;
    *(_QWORD *)(v12 + 8) = v19;
    *(_BYTE *)(v12 + 20) = BYTE4(v21);
    *(_DWORD *)(v12 + 16) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v31 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v14 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_38:
  result = swift_release_n();
  v1 = v32;
LABEL_40:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B93818()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1ED4B7A10, (uint64_t (*)(void))sub_1B1B68ED0, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v6 = 0;
  v7 = v2 + 56;
  v8 = 1 << *(_BYTE *)(v2 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v3 + 56;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v6 << 6);
      goto LABEL_22;
    }
    v16 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_29;
    v17 = *(_QWORD *)(v7 + 8 * v16);
    if (!v17)
    {
      v16 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_29;
      v17 = *(_QWORD *)(v7 + 8 * v16);
      if (!v17)
      {
        v16 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_29;
        v17 = *(_QWORD *)(v7 + 8 * v16);
        if (!v17)
        {
          v16 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_29;
          v17 = *(_QWORD *)(v7 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v6 = v16;
LABEL_22:
    *(_QWORD *)&v4 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v25 = v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v5 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v23 == -1);
      v13 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v25 + 1);
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v13) = v25;
    ++*(_QWORD *)(v5 + 16);
  }
  while (v11 - 5 != v6)
  {
    v17 = *(_QWORD *)(v2 + 8 * v6++ + 96);
    if (v17)
    {
      v16 = v6 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v0;
LABEL_31:
  *v1 = v5;
  return result;
}

uint64_t sub_1B1B93A98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  sub_1B1B9D460(0, &qword_1EEF5B348, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, &qword_1EEF58070, (uint64_t)&unk_1B2269BC0);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v26 = v0;
  v27 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  v28 = v8;
  v25 = v8 - 5;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (v10 + 1 >= v28)
      goto LABEL_29;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    if (!v15)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v28)
        goto LABEL_29;
      v15 = *(_QWORD *)(v27 + 8 * v14);
      if (!v15)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v28)
          goto LABEL_29;
        v15 = *(_QWORD *)(v27 + 8 * v14);
        if (!v15)
        {
          v14 = v10 + 4;
          if (v10 + 4 >= v28)
            goto LABEL_29;
          v15 = *(_QWORD *)(v27 + 8 * v14);
          if (!v15)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v10 = v14;
LABEL_22:
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_1B222874C();
    sub_1B222A06C();
    v17 = v16;
    sub_1B2228824();
    v18 = sub_1B222A0C0();
    swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v9 + 8 * v21);
      }
      while (v23 == -1);
      v11 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v25 != v10)
  {
    v15 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v15)
    {
      v14 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release_n();
  v1 = v26;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B93D5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1B1AED5E4(0, (unint64_t *)&unk_1ED4BA828, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v27 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v27 + 8 * v15);
    if (!v16)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_29;
      v16 = *(_QWORD *)(v27 + 8 * v15);
      if (!v16)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_29;
        v16 = *(_QWORD *)(v27 + 8 * v15);
        if (!v16)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_29;
          v16 = *(_QWORD *)(v27 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v10 = v15;
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v18 = *v17;
    v19 = v17[1];
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    v20 = sub_1B222A0C0();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (v23 + 1 == v24)
          v23 = 0;
        else
          ++v23;
        v25 = *(_QWORD *)(v9 + 8 * v23);
      }
      while (v25 == -1);
      v11 = __clz(__rbit64(~v25)) + (v23 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v18;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v8 - 5 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v15 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release_n();
  v1 = v0;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B93FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  char v25[72];

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1EEF5B3D8, (uint64_t (*)(void))sub_1B1B99F84, (uint64_t)&type metadata for ScriptLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    v15 = v11 + 1;
    if (v11 + 1 >= v9)
      goto LABEL_29;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    if (!v16)
    {
      v15 = v11 + 2;
      if (v11 + 2 >= v9)
        goto LABEL_29;
      v16 = *(_QWORD *)(v6 + 8 * v15);
      if (!v16)
      {
        v15 = v11 + 3;
        if (v11 + 3 >= v9)
          goto LABEL_29;
        v16 = *(_QWORD *)(v6 + 8 * v15);
        if (!v16)
        {
          v15 = v11 + 4;
          if (v11 + 4 >= v9)
            goto LABEL_29;
          v16 = *(_QWORD *)(v6 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1B222A06C();
    sub_1B1B1DD24(v17);
    sub_1B1C9721C((uint64_t)v25, v17);
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v10 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v9 - 5 != v11)
  {
    v16 = *(_QWORD *)(v2 + 8 * v11++ + 96);
    if (v16)
    {
      v15 = v11 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release_n();
  v1 = v0;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B94270()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1ED4BA810, (uint64_t (*)(void))sub_1B1B9D014, (uint64_t)&type metadata for EffectID, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = *(_QWORD *)(v6 + 8 * v15);
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = *(_QWORD *)(v6 + 8 * v15);
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = *(_QWORD *)(v6 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    sub_1B222A06C();
    sub_1B222A09C();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 8 * v5++ + 96);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v0;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B944D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1EEF5B798, (uint64_t (*)(void))sub_1B1B9CBC8, (uint64_t)&type metadata for EntityInstance, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v28 = v0;
  v29 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_22;
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v29 + 8 * v15);
    if (!v16)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_29;
      v16 = *(_QWORD *)(v29 + 8 * v15);
      if (!v16)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_29;
        v16 = *(_QWORD *)(v29 + 8 * v15);
        if (!v16)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_29;
          v16 = *(_QWORD *)(v29 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v10 = v15;
LABEL_22:
    v17 = *(_QWORD *)(v2 + 48) + 16 * v14;
    v18 = *(_DWORD *)v17;
    v19 = *(_DWORD *)(v17 + 4);
    v20 = *(_QWORD *)(v17 + 8);
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    sub_1B222A078();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v26 == -1);
      v11 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
    *(_DWORD *)v12 = v18;
    *(_DWORD *)(v12 + 4) = v19;
    *(_QWORD *)(v12 + 8) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  while (v8 - 5 != v10)
  {
    v16 = *(_QWORD *)(v2 + 8 * v10++ + 96);
    if (v16)
    {
      v15 = v10 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release_n();
  v1 = v28;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B94798()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1ED4842C8, (uint64_t (*)(void))sub_1B1B9CC0C, (uint64_t)&type metadata for EmitterReference, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v6 = 0;
  v7 = v2 + 56;
  v8 = 1 << *(_BYTE *)(v2 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v3 + 56;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v6 << 6);
      goto LABEL_22;
    }
    v16 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_29;
    v17 = *(_QWORD *)(v7 + 8 * v16);
    if (!v17)
    {
      v16 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_29;
      v17 = *(_QWORD *)(v7 + 8 * v16);
      if (!v17)
      {
        v16 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_29;
        v17 = *(_QWORD *)(v7 + 8 * v16);
        if (!v17)
        {
          v16 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_29;
          v17 = *(_QWORD *)(v7 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v6 = v16;
LABEL_22:
    *(_QWORD *)&v4 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v25 = v4;
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v5 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v23 == -1);
      v13 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v25 + 1);
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v13) = v25;
    ++*(_QWORD *)(v5 + 16);
  }
  while (v11 - 5 != v6)
  {
    v17 = *(_QWORD *)(v2 + 8 * v6++ + 96);
    if (v17)
    {
      v16 = v6 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v0;
LABEL_31:
  *v1 = v5;
  return result;
}

uint64_t sub_1B1B94A18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, &qword_1EEF5B688, (uint64_t (*)(void))sub_1B1B99E24, (uint64_t)&type metadata for Target, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_21;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = v2 + 56;
  v6 = -1;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_6;
    }
    v12 = v9 + 1;
    if (v9 + 1 >= v8)
      goto LABEL_20;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    if (!v13)
    {
      v12 = v9 + 2;
      if (v9 + 2 >= v8)
        goto LABEL_20;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      if (!v13)
      {
        v12 = v9 + 3;
        if (v9 + 3 >= v8)
          goto LABEL_20;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        if (!v13)
        {
          v12 = v9 + 4;
          if (v9 + 4 >= v8)
            goto LABEL_20;
          v13 = *(_QWORD *)(v5 + 8 * v12);
          if (!v13)
            break;
        }
      }
    }
LABEL_19:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v9 = v12;
LABEL_6:
    sub_1B1B8F094(*(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v11));
  }
  while (v8 - 5 != v9)
  {
    v13 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v13)
    {
      v12 = v9 + 4;
      goto LABEL_19;
    }
  }
LABEL_20:
  swift_release();
LABEL_21:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1B1B94BB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BA818, (uint64_t (*)(void))sub_1B1B99A44, (uint64_t)&type metadata for Renderer.UnscheduledCommandBuffer, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v10)
      goto LABEL_29;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_29;
      v16 = *(_QWORD *)(v6 + 8 * v15);
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_29;
        v16 = *(_QWORD *)(v6 + 8 * v15);
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_29;
          v16 = *(_QWORD *)(v6 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1B222A06C();
    sub_1B222A078();
    v18 = sub_1B222A0C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (v21 + 1 == v22)
          v21 = 0;
        else
          ++v21;
        v23 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v23 == -1);
      v12 = __clz(__rbit64(~v23)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v17;
    ++*(_QWORD *)(v4 + 16);
    swift_unknownObjectRetain();
  }
  while (v10 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 8 * v5++ + 96);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v0;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B94E28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  sub_1B1B9D460(0, &qword_1EEF5B840, v8, (unint64_t *)&qword_1ED4B7B38, MEMORY[0x1E0CB09C8]);
  v9 = sub_1B22293E8();
  v10 = v9;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v11 = 1 << *(_BYTE *)(v7 + 32);
  v12 = *(_QWORD *)(v7 + 56);
  v32 = v0;
  v33 = v7 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  v16 = v9 + 56;
  swift_retain();
  v17 = 0;
  v34 = v15;
  v31 = v15 - 5;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (v17 + 1 >= v34)
      goto LABEL_29;
    v22 = *(_QWORD *)(v33 + 8 * v21);
    if (!v22)
    {
      v21 = v17 + 2;
      if (v17 + 2 >= v34)
        goto LABEL_29;
      v22 = *(_QWORD *)(v33 + 8 * v21);
      if (!v22)
      {
        v21 = v17 + 3;
        if (v17 + 3 >= v34)
          goto LABEL_29;
        v22 = *(_QWORD *)(v33 + 8 * v21);
        if (!v22)
        {
          v21 = v17 + 4;
          if (v17 + 4 >= v34)
            goto LABEL_29;
          v22 = *(_QWORD *)(v33 + 8 * v21);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v17 = v21;
LABEL_22:
    v23 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v23 * v20, v2);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v24 = sub_1B22285D8();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v16 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v16 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (v27 + 1 == v28)
          v27 = 0;
        else
          ++v27;
        v29 = *(_QWORD *)(v16 + 8 * v27);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v27 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v23, v6, v2);
    ++*(_QWORD *)(v10 + 16);
  }
  while (v31 != v17)
  {
    v22 = *(_QWORD *)(v7 + 8 * v17++ + 96);
    if (v22)
    {
      v21 = v17 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release_n();
  v1 = v32;
LABEL_31:
  *v1 = v10;
  return result;
}

uint64_t sub_1B1B95138()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5B570, (uint64_t (*)(void))sub_1B1B9AFBC, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_31;
  }
  v5 = 0;
  v27 = v2 + 56;
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = v3 + 56;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (v5 + 1 >= v9)
      goto LABEL_29;
    v16 = *(_QWORD *)(v27 + 8 * v15);
    if (!v16)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v9)
        goto LABEL_29;
      v16 = *(_QWORD *)(v27 + 8 * v15);
      if (!v16)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v9)
          goto LABEL_29;
        v16 = *(_QWORD *)(v27 + 8 * v15);
        if (!v16)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v9)
            goto LABEL_29;
          v16 = *(_QWORD *)(v27 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v5 = v15;
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v19 = *v17;
    v18 = v17[1];
    sub_1B222A06C();
    sub_1B222A078();
    v20 = sub_1B222A0C0();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (v23 + 1 == v24)
          v23 = 0;
        else
          ++v23;
        v25 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v25 == -1);
      v11 = __clz(__rbit64(~v25)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v19;
    v12[1] = v18;
    ++*(_QWORD *)(v4 + 16);
    swift_retain();
  }
  while (v9 - 5 != v5)
  {
    v16 = *(_QWORD *)(v2 + 8 * v5++ + 96);
    if (v16)
    {
      v15 = v5 + 4;
      goto LABEL_21;
    }
  }
LABEL_29:
  result = swift_release();
  v1 = v0;
LABEL_31:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1B953C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getAtKeyPath();
  *a1 = v3;
  return result;
}

uint64_t sub_1B1B95400@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getAtKeyPath();
  *a1 = v3;
  return result;
}

_QWORD *sub_1B1B95440(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9965C();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_DWORD *)(a1 + 40);
  do
  {
    v5 = *((_QWORD *)v4 - 1);
    v6 = *v4;
    v4 += 4;
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_QWORD *)(v3[6] + 8 * v7) = v5;
    *(_DWORD *)(v3[7] + 4 * v7) = v6;
    ++v3[2];
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B954FC(uint64_t a1)
{
  return sub_1B1B989B8(a1, (void (*)(_QWORD))sub_1B1B995FC, (uint64_t (*)(uint64_t))sub_1B1DC3AC8);
}

_QWORD *sub_1B1B95510(uint64_t a1)
{
  return sub_1B1B98808(a1, (void (*)(_QWORD))sub_1B1B9B170, (uint64_t (*)(_QWORD))sub_1B1DC3F80);
}

_QWORD *sub_1B1B95524(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9D7E0();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_QWORD *)(a1 + 36);
  do
  {
    v5 = *v4;
    v6 = *((_BYTE *)v4 - 4);
    v7 = sub_1B1DC3CCC(v6);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_BYTE *)(v3[6] + v7) = v6;
    *(_QWORD *)(v3[7] + 8 * v7) = v5;
    ++v3[2];
    v4 = (_QWORD *)((char *)v4 + 12);
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B955E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99B8C(0, (unint64_t *)&unk_1EEF5FF70, (void (*)(uint64_t))sub_1B1B9A3C0);
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    swift_bridgeObjectRetain();
    v4 += 2;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B956CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v26[96];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[48];
  _BYTE v32[96];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A22C();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (__int128 *)(a1 + 32);
  do
  {
    v5 = v4[11];
    *(_OWORD *)v31 = v4[10];
    *(_OWORD *)&v31[16] = v5;
    *(_OWORD *)&v31[32] = v4[12];
    v6 = v4[7];
    v27 = v4[6];
    v28 = v6;
    v7 = v4[9];
    v29 = v4[8];
    v30 = v7;
    v8 = v4[3];
    *(_OWORD *)&v26[32] = v4[2];
    *(_OWORD *)&v26[48] = v8;
    v9 = v4[5];
    *(_OWORD *)&v26[64] = v4[4];
    *(_OWORD *)&v26[80] = v9;
    v11 = *v4;
    v10 = v4[1];
    v4 += 13;
    *(_OWORD *)v26 = v11;
    *(_OWORD *)&v26[16] = v10;
    *(_DWORD *)v32 = v11;
    *(_OWORD *)&v32[8] = *(_OWORD *)&v26[8];
    *(_OWORD *)&v32[24] = *(_OWORD *)&v26[24];
    *(_OWORD *)&v32[40] = *(_OWORD *)&v26[40];
    *(_OWORD *)&v32[56] = *(_OWORD *)&v26[56];
    *(_OWORD *)&v32[72] = *(_OWORD *)&v26[72];
    *(_QWORD *)&v32[88] = *(_QWORD *)&v26[88];
    sub_1B1DC3F84((int64x2_t *)v32);
    *(_QWORD *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
    v13 = (_OWORD *)(v3[6] + 96 * v12);
    v14 = *(_OWORD *)&v32[48];
    v13[2] = *(_OWORD *)&v32[32];
    v13[3] = v14;
    v15 = *(_OWORD *)&v32[80];
    v13[4] = *(_OWORD *)&v32[64];
    v13[5] = v15;
    v16 = *(_OWORD *)&v32[16];
    *v13 = *(_OWORD *)v32;
    v13[1] = v16;
    v17 = v3[7] + 112 * v12;
    v18 = v28;
    v19 = BYTE8(v28);
    v20 = *(_QWORD *)v31;
    *(_QWORD *)&v16 = *(_QWORD *)&v31[40];
    v21 = v29;
    v22 = v30;
    v23 = *(_OWORD *)&v31[8];
    v24 = *(_OWORD *)&v31[24];
    *(_OWORD *)v17 = v27;
    *(_QWORD *)(v17 + 16) = v18;
    *(_BYTE *)(v17 + 24) = v19;
    *(_OWORD *)(v17 + 32) = v21;
    *(_OWORD *)(v17 + 48) = v22;
    *(_QWORD *)(v17 + 64) = v20;
    *(_OWORD *)(v17 + 72) = v23;
    *(_OWORD *)(v17 + 88) = v24;
    *(_QWORD *)(v17 + 104) = v16;
    ++v3[2];
    sub_1B1B9A2D0((uint64_t)v26);
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95870(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A420();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = a1 + 56;
  do
  {
    v5 = *(_QWORD *)(v4 - 24);
    v13 = *(_OWORD *)(v4 + 8);
    v14 = *(_OWORD *)(v4 - 8);
    v12 = *(_OWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 48);
    v8 = *(_BYTE *)(v4 + 56);
    v9 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
    *(_QWORD *)(v3[6] + 8 * v9) = v5;
    v10 = v3[7] + 80 * v9;
    *(_OWORD *)v10 = v14;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 48) = v6;
    *(_QWORD *)(v10 + 56) = v7;
    *(_BYTE *)(v10 + 64) = v8;
    ++v3[2];
    v4 += 96;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95978(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9B33C();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v4 += 2;
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95A38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 v20;

  sub_1B1B9D5D0(0, (unint64_t *)&qword_1ED4B9510, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (unsigned int *)((char *)&v19 - v6);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99DB0(0, (unint64_t *)&qword_1ED4BA8C0, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo, (void (*)(void))sub_1B1B9DE34);
  v9 = (_QWORD *)sub_1B22296DC();
  v19 = (uint64_t)v7 + *(int *)(v3 + 48);
  v10 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v11 = *(_QWORD *)(v4 + 72);
  do
  {
    sub_1B1B9DC78(v10, (uint64_t)v7, (uint64_t)&qword_1ED4B9510, (uint64_t)type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t)&type metadata for GraphScriptingConfig.EvaluationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1B9D5D0);
    v12 = *v7;
    v20 = *((_BYTE *)v7 + 4);
    v13 = v20;
    v14 = sub_1B1DC4040(v12 | ((unint64_t)v20 << 32));
    *(_QWORD *)((char *)v9 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
    v15 = v9[6] + 8 * v14;
    *(_DWORD *)v15 = v12;
    *(_BYTE *)(v15 + 4) = v13;
    v16 = v9[7];
    v17 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    sub_1B1A025EC(v19, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v14, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++v9[2];
    v10 += v11;
    --v8;
  }
  while (v8);
  return v9;
}

_QWORD *sub_1B1B95BF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9DE78();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_OWORD *)(a1 + 48);
  do
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    v4 += 2;
    v8 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v5;
    v9 = v3[7] + 24 * v8;
    *(_QWORD *)v9 = v6;
    *(_OWORD *)(v9 + 8) = v7;
    ++v3[2];
    swift_unknownObjectRetain();
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95CD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8[102];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9DCC8();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (char *)(a1 + 32);
  do
  {
    memcpy(v8, v4, sizeof(v8));
    v5 = v8[0];
    v6 = sub_1B1DC3AC8(v8[0]);
    *(_QWORD *)((char *)v3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    *(_QWORD *)(v3[6] + 8 * v6) = v5;
    memcpy((void *)(v3[7] + 808 * v6), &v8[1], 0x328uLL);
    ++v3[2];
    sub_1B1B9DD2C(v8);
    v4 += 816;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95DCC(uint64_t a1)
{
  return sub_1B1B973BC(a1, (void (*)(_QWORD))sub_1B1B9BB50, (uint64_t (*)(uint64_t))sub_1B1DC3B48);
}

_QWORD *sub_1B1B95DE0(uint64_t a1)
{
  return sub_1B1B989B8(a1, (void (*)(_QWORD))sub_1B1B9BAEC, (uint64_t (*)(uint64_t))sub_1B1DC3B48);
}

_QWORD *sub_1B1B95DF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99724();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 48);
  do
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v4 += 3;
    v8 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v5;
    v9 = (_QWORD *)(v3[7] + 16 * v8);
    *v9 = v6;
    v9[1] = v7;
    ++v3[2];
    swift_bridgeObjectRetain();
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95EBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9D218();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_1B1DC3CA4(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    v4 += 2;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B95F7C(uint64_t a1)
{
  return sub_1B1B973BC(a1, (void (*)(_QWORD))sub_1B1B9A7CC, (uint64_t (*)(uint64_t))sub_1B1DC3AC8);
}

_QWORD *sub_1B1B95F90(uint64_t a1)
{
  return sub_1B1B96B14(a1, (unint64_t *)&unk_1EEF601A0, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
}

_QWORD *sub_1B1B95FA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9AAB8();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_QWORD *)(a1 + 36);
  do
  {
    v5 = *((_DWORD *)v4 - 1);
    v6 = *v4;
    v4 = (_QWORD *)((char *)v4 + 12);
    v7 = sub_1B1DC3B14(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_DWORD *)(v3[6] + 4 * v7) = v5;
    *(_QWORD *)(v3[7] + 8 * v7) = v6;
    ++v3[2];
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96060(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B6943C();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_QWORD *)(a1 + 56);
  do
  {
    v5 = *(v4 - 3);
    v6 = *v4;
    v10 = *((_OWORD *)v4 - 1);
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_QWORD *)(v3[6] + 8 * v7) = v5;
    v8 = v3[7] + 24 * v7;
    *(_OWORD *)v8 = v10;
    *(_QWORD *)(v8 + 16) = v6;
    ++v3[2];
    swift_bridgeObjectRetain();
    v4 += 4;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96148(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99B8C(0, (unint64_t *)&qword_1ED4BA9C8, (void (*)(uint64_t))sub_1B1B9CEF8);
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_1B1DC3B48(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    swift_bridgeObjectRetain();
    v4 += 2;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96230(uint64_t a1)
{
  return sub_1B1B967F0(a1, (void (*)(_QWORD))sub_1B1B9CE04, (uint64_t (*)(uint64_t))sub_1B1DC3B48);
}

_QWORD *sub_1B1B96244(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9CDA0();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_QWORD *)(a1 + 56);
  do
  {
    v5 = *(v4 - 3);
    v6 = *v4;
    v10 = *((_OWORD *)v4 - 1);
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_QWORD *)(v3[6] + 8 * v7) = v5;
    v8 = v3[7] + 24 * v7;
    *(_OWORD *)v8 = v10;
    *(_QWORD *)(v8 + 16) = v6;
    ++v3[2];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 += 4;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96340(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9CD24();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_QWORD *)(a1 + 40);
  do
  {
    v5 = *((_DWORD *)v4 - 2);
    v6 = *v4;
    v4 += 2;
    v7 = sub_1B1DC3B14(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_DWORD *)(v3[6] + 4 * v7) = v5;
    *(_QWORD *)(v3[7] + 8 * v7) = v6;
    ++v3[2];
    swift_retain();
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96404(uint64_t a1)
{
  return sub_1B1B9644C(a1, (unint64_t *)&qword_1EEF5B470, (unint64_t *)&qword_1EEF5B478, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
}

_QWORD *sub_1B1B96428(uint64_t a1)
{
  return sub_1B1B9644C(a1, (unint64_t *)&qword_1EEF5B460, (unint64_t *)&qword_1EEF5B468, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
}

_QWORD *sub_1B1B9644C(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A6B8(0, a2, a3, a4, a5);
  v7 = (_QWORD *)sub_1B22296DC();
  v8 = (uint64_t *)(a1 + 40);
  do
  {
    v9 = *(v8 - 1);
    v10 = *v8;
    v11 = sub_1B1DC3AC8(v9);
    *(_QWORD *)((char *)v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
    v12 = 8 * v11;
    *(_QWORD *)(v7[6] + v12) = v9;
    *(_QWORD *)(v7[7] + v12) = v10;
    ++v7[2];
    swift_bridgeObjectRetain();
    v8 += 2;
    --v5;
  }
  while (v5);
  return v7;
}

_QWORD *sub_1B1B96514(uint64_t a1)
{
  return sub_1B1B9655C(a1, &qword_1EEF5B928, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (unint64_t *)&qword_1EEF58A28);
}

_QWORD *sub_1B1B96538(uint64_t a1)
{
  return sub_1B1B9655C(a1, (unint64_t *)&unk_1EEF5B910, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript, &qword_1EEF5B920);
}

_QWORD *sub_1B1B9655C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;

  sub_1B1B9DC08(0, a2, a3, a4);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v27 = (unsigned __int8 *)&v24 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9DB8C(0, a5, a3, a4);
  v16 = (_QWORD *)sub_1B22296DC();
  v26 = &v27[*(int *)(v11 + 48)];
  v17 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v25 = *(_QWORD *)(v12 + 72);
  do
  {
    v18 = v27;
    sub_1B1B9DC78(v17, (uint64_t)v27, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1B9DC08);
    v19 = *v18;
    v20 = sub_1B1DC3CCC(*v18);
    *(_QWORD *)((char *)v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    *(_BYTE *)(v16[6] + v20) = v19;
    v21 = v16[7];
    sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    sub_1B1B9BF58((uint64_t)v26, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    ++v16[2];
    v17 += v25;
    --v15;
  }
  while (v15);
  return v16;
}

_QWORD *sub_1B1B96704(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9DA70();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_OWORD *)(a1 + 40);
  do
  {
    v5 = *((_QWORD *)v4 - 1);
    v6 = *v4;
    v4 = (_OWORD *)((char *)v4 + 24);
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_QWORD *)(v3[6] + 8 * v7) = v5;
    *(_OWORD *)(v3[7] + 16 * v7) = v6;
    ++v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B967DC(uint64_t a1)
{
  return sub_1B1B967F0(a1, (void (*)(_QWORD))sub_1B1B9D9EC, (uint64_t (*)(uint64_t))sub_1B1DC3AC8);
}

_QWORD *sub_1B1B967F0(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  a2(0);
  v6 = (_QWORD *)sub_1B22296DC();
  v7 = (uint64_t *)(a1 + 40);
  do
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v10 = a3(v8);
    *(_QWORD *)((char *)v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    v11 = 8 * v10;
    *(_QWORD *)(v6[6] + v11) = v8;
    *(_QWORD *)(v6[7] + v11) = v9;
    ++v6[2];
    swift_bridgeObjectRetain();
    v7 += 2;
    --v3;
  }
  while (v3);
  return v6;
}

_QWORD *sub_1B1B968BC(uint64_t a1)
{
  return sub_1B1B968E0(a1, (unint64_t *)&qword_1EEF5B8B8, (unint64_t *)&unk_1EEF5B8C0, &qword_1EEF5BDE0, (void (*)(uint64_t))type metadata accessor for Node);
}

_QWORD *sub_1B1B968E0(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9D274(0, a2, a3, a4, a5);
  v7 = (_QWORD *)sub_1B22296DC();
  v8 = (uint64_t *)(a1 + 40);
  do
  {
    v9 = *(v8 - 1);
    v10 = *v8;
    v11 = sub_1B1DC3AC8(v9);
    *(_QWORD *)((char *)v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
    v12 = 8 * v11;
    *(_QWORD *)(v7[6] + v12) = v9;
    *(_QWORD *)(v7[7] + v12) = v10;
    ++v7[2];
    swift_bridgeObjectRetain();
    v8 += 2;
    --v5;
  }
  while (v5);
  return v7;
}

_QWORD *sub_1B1B969A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9D840();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 64);
  do
  {
    v5 = *(v4 - 4);
    v18 = *(v4 - 2);
    v19 = *(v4 - 3);
    v6 = v4[1];
    v16 = *v4;
    v17 = *(v4 - 1);
    v7 = v4[2];
    v8 = v4[3];
    v9 = v4[5];
    v15 = v4[4];
    v10 = v4[6];
    v11 = v4[7];
    v12 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
    *(_QWORD *)(v3[6] + 8 * v12) = v5;
    v13 = (uint64_t *)(v3[7] + 88 * v12);
    *v13 = v19;
    v13[1] = v18;
    v13[2] = v17;
    v13[3] = v16;
    v13[4] = v6;
    v13[5] = v7;
    v13[6] = v8;
    v13[7] = v15;
    v13[8] = v9;
    v13[9] = v10;
    v13[10] = v11;
    ++v3[2];
    sub_1B1B9D8BC(v19);
    v4 += 12;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96ADC(uint64_t a1)
{
  return sub_1B1B968E0(a1, (unint64_t *)&qword_1EEF5B800, (unint64_t *)&unk_1EEF5BDB0, (unint64_t *)&unk_1EEF5B810, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
}

_QWORD *sub_1B1B96B00(uint64_t a1)
{
  return sub_1B1B96B14(a1, (unint64_t *)&unk_1EEF5B940, (void (*)(uint64_t))type metadata accessor for Node);
}

_QWORD *sub_1B1B96B14(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99B8C(0, a2, a3);
  v5 = (_QWORD *)sub_1B22296DC();
  v6 = (uint64_t *)(a1 + 40);
  do
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = sub_1B1DC3AC8(v7);
    *(_QWORD *)((char *)v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
    v10 = 8 * v9;
    *(_QWORD *)(v5[6] + v10) = v7;
    *(_QWORD *)(v5[7] + v10) = v8;
    ++v5[2];
    swift_retain();
    v6 += 2;
    --v3;
  }
  while (v3);
  return v5;
}

_QWORD *sub_1B1B96BEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A1CC();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = a1 + 32;
  do
  {
    sub_1B1B99B3C(v4, (uint64_t)&v11, &qword_1EEF5B410);
    v5 = v11;
    v6 = v12;
    v7 = v13;
    v8 = sub_1B1DC4138(v11, v12 | ((unint64_t)v13 << 32));
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    v9 = v3[6] + 16 * v8;
    *(_QWORD *)v9 = v5;
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v7;
    sub_1B1B99D74((uint64_t)&v14, v3[7] + 96 * v8);
    ++v3[2];
    v4 += 112;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96D04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A0EC();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = a1 + 32;
  do
  {
    sub_1B1B99B3C(v4, (uint64_t)&v11, &qword_1EEF5B400);
    v5 = v11;
    v6 = v12;
    v7 = v13;
    v8 = sub_1B1DC4138(v11, v12 | ((unint64_t)v13 << 32));
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    v9 = v3[6] + 16 * v8;
    *(_QWORD *)v9 = v5;
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v7;
    sub_1B1B9A190((uint64_t)&v14, v3[7] + 48 * v8);
    ++v3[2];
    v4 += 64;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96E1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *v4;
  int v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  id v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B997C4();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_OWORD *)(a1 + 64);
  do
  {
    v5 = *((_DWORD *)v4 - 2);
    v6 = *((_BYTE *)v4 - 4);
    v7 = *((_QWORD *)v4 - 4);
    v8 = (void *)*((_QWORD *)v4 - 3);
    v9 = *((_QWORD *)v4 - 2);
    v10 = *v4;
    v4 += 3;
    v11 = sub_1B1DC3CA4(v7);
    *(_QWORD *)((char *)v3 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
    *(_QWORD *)(v3[6] + 8 * v11) = v7;
    v12 = v3[7] + 40 * v11;
    *(_QWORD *)v12 = v8;
    *(_QWORD *)(v12 + 8) = v9;
    *(_DWORD *)(v12 + 16) = v5;
    *(_BYTE *)(v12 + 20) = v6;
    *(_OWORD *)(v12 + 24) = v10;
    ++v3[2];
    v13 = v8;
    swift_retain();
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B96F2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9BA4C();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = a1 + 32;
  do
  {
    sub_1B1B99B3C(v4, (uint64_t)&v8, &qword_1EEF5B6A0);
    v5 = v8;
    v6 = sub_1B1DC3AC8(v8);
    *(_QWORD *)((char *)v3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    *(_QWORD *)(v3[6] + 8 * v6) = v5;
    sub_1B1B9BAB0((uint64_t)&v9, v3[7] + 8 * v6);
    ++v3[2];
    v4 += 16;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B9703C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8[106];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9B7F0();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (char *)(a1 + 32);
  do
  {
    memcpy(v8, v4, 0x341uLL);
    v5 = v8[0];
    v6 = sub_1B1DC3AC8(v8[0]);
    *(_QWORD *)((char *)v3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    *(_QWORD *)(v3[6] + 8 * v6) = v5;
    sub_1B1B41294((uint64_t)&v8[1], v3[7] + 832 * v6, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    ++v3[2];
    sub_1B1B9B86C((uint64_t)v8);
    v4 += 840;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97158(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9B774();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = a1 + 56;
  do
  {
    v5 = *(_QWORD *)(v4 - 24);
    v17 = *(_QWORD *)(v4 - 8);
    v18 = *(void **)(v4 - 16);
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    v9 = *(_QWORD *)(v4 + 32);
    v15 = *(_QWORD *)(v4 + 40);
    v16 = *(_QWORD *)v4;
    v10 = *(void **)(v4 + 48);
    v11 = *(_BYTE *)(v4 + 56);
    v12 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
    *(_QWORD *)(v3[6] + 8 * v12) = v5;
    v13 = v3[7] + 80 * v12;
    *(_QWORD *)v13 = v18;
    *(_QWORD *)(v13 + 8) = v17;
    *(_QWORD *)(v13 + 16) = v16;
    *(_QWORD *)(v13 + 24) = v6;
    *(_QWORD *)(v13 + 32) = v7;
    *(_QWORD *)(v13 + 40) = v8;
    *(_QWORD *)(v13 + 48) = v9;
    *(_QWORD *)(v13 + 56) = v15;
    *(_QWORD *)(v13 + 64) = v10;
    *(_BYTE *)(v13 + 72) = v11;
    ++v3[2];
    sub_1B1B3FCA8(v18, v17, v16, v6, v7, v8, v9, v15, v10, v11);
    v4 += 88;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B9728C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9B710();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = a1 + 48;
  do
  {
    v5 = *(_QWORD *)(v4 - 16);
    v15 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)v4;
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 24);
    v10 = *(_QWORD *)(v4 + 32);
    v11 = *(_BYTE *)(v4 + 40);
    v12 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
    *(_QWORD *)(v3[6] + 8 * v12) = v5;
    v13 = v3[7] + 56 * v12;
    *(_QWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v6;
    *(_QWORD *)(v13 + 16) = v7;
    *(_QWORD *)(v13 + 24) = v8;
    *(_QWORD *)(v13 + 32) = v9;
    *(_QWORD *)(v13 + 40) = v10;
    *(_BYTE *)(v13 + 48) = v11;
    ++v3[2];
    sub_1B1B3C554(v15, v6, v7, v8, v9, v10, v11);
    v4 += 64;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B973A8(uint64_t a1)
{
  return sub_1B1B973BC(a1, (void (*)(_QWORD))sub_1B1B9B6AC, (uint64_t (*)(uint64_t))sub_1B1DC3AC8);
}

_QWORD *sub_1B1B973BC(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  a2(0);
  v6 = (_QWORD *)sub_1B22296DC();
  v7 = (_BYTE *)(a1 + 40);
  do
  {
    v8 = *((_QWORD *)v7 - 1);
    v9 = *v7;
    v7 += 16;
    v10 = a3(v8);
    *(_QWORD *)((char *)v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    *(_QWORD *)(v6[6] + 8 * v10) = v8;
    *(_BYTE *)(v6[7] + v10) = v9;
    ++v6[2];
    --v3;
  }
  while (v3);
  return v6;
}

_QWORD *sub_1B1B9747C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9B648();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (__int128 *)(a1 + 40);
  do
  {
    v5 = *((_QWORD *)v4 - 1);
    v17 = v4[8];
    v18 = v4[9];
    v19 = *((_DWORD *)v4 + 40);
    v13 = v4[4];
    v14 = v4[5];
    v15 = v4[6];
    v16 = v4[7];
    v9 = *v4;
    v10 = v4[1];
    v11 = v4[2];
    v12 = v4[3];
    v6 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    *(_QWORD *)(v3[6] + 8 * v6) = v5;
    v7 = v3[7] + 164 * v6;
    *(_OWORD *)v7 = v9;
    *(_OWORD *)(v7 + 16) = v10;
    *(_OWORD *)(v7 + 64) = v13;
    *(_OWORD *)(v7 + 80) = v14;
    *(_OWORD *)(v7 + 32) = v11;
    *(_OWORD *)(v7 + 48) = v12;
    *(_DWORD *)(v7 + 160) = v19;
    *(_OWORD *)(v7 + 128) = v17;
    *(_OWORD *)(v7 + 144) = v18;
    *(_OWORD *)(v7 + 96) = v15;
    *(_OWORD *)(v7 + 112) = v16;
    ++v3[2];
    v4 += 11;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B975A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99B8C(0, &qword_1ED4BA908, (void (*)(uint64_t))sub_1B1B9AA24);
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_QWORD *)(a1 + 56);
  do
  {
    v5 = *(v4 - 3);
    v6 = *v4;
    v10 = *((_OWORD *)v4 - 1);
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_QWORD *)(v3[6] + 8 * v7) = v5;
    v8 = v3[7] + 24 * v7;
    *(_OWORD *)v8 = v10;
    *(_QWORD *)(v8 + 16) = v6;
    ++v3[2];
    v4 += 4;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B976A4(uint64_t a1)
{
  return sub_1B1B97904(a1, (void (*)(_QWORD))sub_1B1B9C1C8, (uint64_t)&unk_1EEF5B6B8, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache);
}

_QWORD *sub_1B1B976C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9C164();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    swift_bridgeObjectRetain();
    v4 += 2;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97790(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99DB0(0, (unint64_t *)&unk_1EEF5FF20, (void (*)(uint64_t))sub_1B1B9BFA8, (void (*)(void))sub_1B1B9C020);
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (__int128 *)(a1 + 32);
  do
  {
    v5 = v4[7];
    v27 = v4[6];
    v28 = v5;
    v29 = v4[8];
    v6 = v4[1];
    v21 = *v4;
    v22 = v6;
    v7 = v4[3];
    v23 = v4[2];
    v24 = v7;
    v8 = v4[5];
    v25 = v4[4];
    v26 = v8;
    v9 = *((_QWORD *)&v21 + 1);
    v10 = v21;
    v11 = sub_1B1DC4510(v21, *((uint64_t *)&v21 + 1));
    *(_QWORD *)((char *)v3 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
    v12 = v3[6] + 16 * v11;
    *(_BYTE *)v12 = v10;
    *(_QWORD *)(v12 + 8) = v9;
    v13 = (_OWORD *)(v3[7] + (v11 << 7));
    v14 = v24;
    v15 = v25;
    v16 = v23;
    *v13 = v22;
    v17 = v26;
    v18 = v27;
    v19 = v29;
    v13[6] = v28;
    v13[7] = v19;
    v13[4] = v17;
    v13[5] = v18;
    v13[2] = v14;
    v13[3] = v15;
    v13[1] = v16;
    ++v3[2];
    sub_1B1B9C064((uint64_t)&v21);
    v4 += 9;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B978E0(uint64_t a1)
{
  return sub_1B1B97904(a1, (void (*)(_QWORD))sub_1B1B9BEDC, (uint64_t)&unk_1EEF5B6A8, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache);
}

_QWORD *sub_1B1B97904(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  a2(0);
  v10 = (_QWORD *)sub_1B22296DC();
  v11 = a1 + 32;
  do
  {
    sub_1B1B9DC78(v11, (uint64_t)&v15, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1B9C244);
    v12 = v15;
    v13 = sub_1B1DC3AC8(v15);
    *(_QWORD *)((char *)v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v13;
    *(_QWORD *)(v10[6] + 8 * v13) = v12;
    sub_1B1B9BF58((uint64_t)&v16, v10[7] + 8 * v13, a4, a5, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
    ++v10[2];
    v11 += 16;
    --v5;
  }
  while (v5);
  return v10;
}

_QWORD *sub_1B1B97A24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 *v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[48];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9BE20();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (__int128 *)(a1 + 64);
  do
  {
    v5 = *((_BYTE *)v4 - 24);
    v6 = *((_QWORD *)v4 + 8);
    *(_QWORD *)&v14 = *((_QWORD *)v4 - 4);
    BYTE8(v14) = v5;
    v7 = *v4;
    v15 = *(v4 - 1);
    v16 = v7;
    *(_QWORD *)v17 = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v17[8] = *(__int128 *)((char *)v4 + 24);
    *(_OWORD *)&v17[24] = *(__int128 *)((char *)v4 + 40);
    *(_QWORD *)&v17[40] = *((_QWORD *)v4 + 7);
    v8 = sub_1B1DC4750((uint64_t)&v14);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    v9 = (_OWORD *)(v3[6] + 96 * v8);
    v10 = *(_OWORD *)v17;
    v9[2] = v16;
    v9[3] = v10;
    v11 = *(_OWORD *)&v17[32];
    v9[4] = *(_OWORD *)&v17[16];
    v9[5] = v11;
    v12 = v15;
    *v9 = v14;
    v9[1] = v12;
    *(_QWORD *)(v3[7] + 8 * v8) = v6;
    ++v3[2];
    swift_unknownObjectRetain();
    v4 = (__int128 *)((char *)v4 + 104);
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97B44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9BC58();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    swift_unknownObjectRetain();
    v4 += 2;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97C0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  _BYTE v24[32];
  __int128 v25;
  _BYTE v26[64];
  __int128 v27;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9BCCC();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_OWORD *)(a1 + 32);
  do
  {
    v5 = v4[5];
    *(_OWORD *)&v26[16] = v4[4];
    *(_OWORD *)&v26[32] = v5;
    v6 = v4[7];
    *(_OWORD *)&v26[48] = v4[6];
    v27 = v6;
    v7 = v4[1];
    *(_OWORD *)v24 = *v4;
    *(_OWORD *)&v24[16] = v7;
    v8 = v4[3];
    v25 = v4[2];
    *(_OWORD *)v26 = v8;
    v9 = *(_QWORD *)v24;
    v10 = sub_1B1DC3AC8(*(uint64_t *)v24);
    *(_QWORD *)((char *)v3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    *(_QWORD *)(v3[6] + 8 * v10) = v9;
    v11 = v3[7] + 120 * v10;
    v12 = *(_QWORD *)&v24[24];
    v13 = v25;
    v14 = *(_WORD *)v26;
    v15 = v26[2];
    v16 = *(_QWORD *)&v26[56];
    v17 = *((_QWORD *)&v27 + 1);
    v18 = *((_QWORD *)&v25 + 1);
    v19 = *(_OWORD *)&v26[8];
    v20 = *(_OWORD *)&v26[24];
    v21 = *(_OWORD *)&v26[40];
    v22 = v27;
    *(_OWORD *)v11 = *(_OWORD *)&v24[8];
    *(_QWORD *)(v11 + 16) = v12;
    *(_BYTE *)(v11 + 24) = v13;
    *(_QWORD *)(v11 + 32) = v18;
    *(_WORD *)(v11 + 40) = v14;
    *(_BYTE *)(v11 + 42) = v15;
    *(_OWORD *)(v11 + 48) = v19;
    *(_OWORD *)(v11 + 64) = v20;
    *(_OWORD *)(v11 + 80) = v21;
    *(_QWORD *)(v11 + 96) = v16;
    *(_DWORD *)(v11 + 104) = v22;
    *(_QWORD *)(v11 + 112) = v17;
    ++v3[2];
    sub_1B1B9BD30((uint64_t)v24);
    v4 += 8;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97D58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9BBB4();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_OWORD *)(a1 + 112);
  do
  {
    v6 = *((_QWORD *)v4 - 8);
    v5 = *((_QWORD *)v4 - 7);
    v7 = *((_QWORD *)v4 - 4);
    v8 = *((_BYTE *)v4 - 24);
    v9 = *((_QWORD *)v4 - 2);
    v10 = *((_BYTE *)v4 - 8);
    v15 = *(v4 - 3);
    v16 = *v4;
    v11 = *((_BYTE *)v4 - 80);
    v12 = sub_1B1DC3F80(v11);
    *(_QWORD *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
    *(_BYTE *)(v3[6] + v12) = v11;
    v13 = v3[7] + 80 * v12;
    *(_QWORD *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v5;
    *(_OWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 32) = v7;
    *(_BYTE *)(v13 + 40) = v8;
    *(_QWORD *)(v13 + 48) = v9;
    *(_BYTE *)(v13 + 56) = v10;
    *(_OWORD *)(v13 + 64) = v16;
    ++v3[2];
    swift_bridgeObjectRetain();
    v4 += 6;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97E7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99DB0(0, &qword_1EEF5B6D0, (void (*)(uint64_t))sub_1B1B9C354, (void (*)(void))sub_1B1B9C3D0);
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 56);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = *(v4 - 3);
    v8 = *(v4 - 2);
    v9 = sub_1B1DC3CA4(v7);
    *(_QWORD *)((char *)v3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
    *(_QWORD *)(v3[6] + 8 * v9) = v7;
    v10 = (_QWORD *)(v3[7] + 24 * v9);
    *v10 = v8;
    v10[1] = v5;
    v10[2] = v6;
    ++v3[2];
    swift_unknownObjectRetain();
    v4 += 4;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B97F80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  _BYTE v16[32];
  char v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9C2B4();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 56);
  do
  {
    v5 = *v4;
    v6 = *((_BYTE *)v4 + 8);
    v7 = v4[2];
    v15 = *(_OWORD *)(v4 + 3);
    v8 = v4[5];
    v9 = *((_BYTE *)v4 + 48);
    *(_QWORD *)v16 = *(v4 - 3);
    *(_OWORD *)&v16[8] = *((_OWORD *)v4 - 1);
    *(_QWORD *)&v16[24] = v5;
    v17 = v6;
    v10 = sub_1B1DC488C((uint64_t)v16);
    *(_QWORD *)((char *)v3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    v12 = *(_OWORD *)&v16[16];
    *(_OWORD *)v11 = *(_OWORD *)v16;
    *(_OWORD *)(v11 + 16) = v12;
    *(_BYTE *)(v11 + 32) = v17;
    v13 = v3[7] + 40 * v10;
    *(_QWORD *)v13 = v7;
    *(_OWORD *)(v13 + 8) = v15;
    *(_QWORD *)(v13 + 24) = v8;
    *(_BYTE *)(v13 + 32) = v9;
    ++v3[2];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v4 += 10;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B980BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9C8A4();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (unint64_t *)(a1 + 48);
  do
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v4 += 3;
    v8 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v5;
    v9 = (_QWORD *)(v3[7] + 16 * v8);
    *v9 = v6;
    v9[1] = v7;
    ++v3[2];
    sub_1B1B632F0(v7);
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B98184(uint64_t a1)
{
  return sub_1B1B98A88(a1, (void (*)(_QWORD))sub_1B1B9D634);
}

_QWORD *sub_1B1B98190(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B99E68();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (unint64_t *)(a1 + 56);
  do
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v8 = *((unsigned int *)v4 - 6);
    v9 = *((unsigned int *)v4 - 5);
    v10 = sub_1B1DC4A60(v8 | (v9 << 32), v5);
    *(_QWORD *)((char *)v3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    v11 = v3[6] + 16 * v10;
    *(_DWORD *)v11 = v8;
    *(_DWORD *)(v11 + 4) = v9;
    *(_QWORD *)(v11 + 8) = v5;
    v12 = (uint64_t *)(v3[7] + 16 * v10);
    *v12 = v6;
    v12[1] = v7;
    ++v3[2];
    sub_1B1B99F0C(v6, v7);
    v4 += 4;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B9827C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A304();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_1B1DC4AE4(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v8 = 8 * v7;
    *(_QWORD *)(v3[6] + v8) = v5;
    *(_QWORD *)(v3[7] + v8) = v6;
    ++v3[2];
    swift_retain();
    v4 += 2;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B98344(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A894();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 48);
  do
  {
    v6 = *(v4 - 1);
    v5 = *v4;
    v7 = *(v4 - 2);
    v8 = sub_1B1DC3CA4(v7);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v7;
    v9 = (_QWORD *)(v3[7] + 16 * v8);
    *v9 = v6;
    v9[1] = v5;
    ++v3[2];
    swift_bridgeObjectRetain();
    v4 += 3;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B98418(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  id v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9A720();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (uint64_t *)(a1 + 48);
  do
  {
    v5 = *(v4 - 2);
    v6 = (void *)*(v4 - 1);
    v7 = *v4;
    v4 += 3;
    v8 = sub_1B1DC4D10(v5);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v5;
    v9 = (_QWORD *)(v3[7] + 16 * v8);
    *v9 = v6;
    v9[1] = v7;
    ++v3[2];
    v10 = v6;
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B984DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9AD04();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_BYTE *)(a1 + 40);
  do
  {
    v5 = *((_QWORD *)v4 - 1);
    v6 = *v4;
    v4 += 16;
    v7 = sub_1B1DC4D10(v5);
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    *(_QWORD *)(v3[6] + 8 * v7) = v5;
    *(_BYTE *)(v3[7] + v7) = v6;
    ++v3[2];
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B98598(uint64_t a1)
{
  return sub_1B1B973BC(a1, (void (*)(_QWORD))sub_1B1B9AC84, (uint64_t (*)(uint64_t))sub_1B1DC4D10);
}

_QWORD *sub_1B1B985AC(uint64_t a1)
{
  return sub_1B1B973BC(a1, (void (*)(_QWORD))sub_1B1B9AC04, (uint64_t (*)(uint64_t))sub_1B1DC4D10);
}

_QWORD *sub_1B1B985C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 v21;

  sub_1B1B9C5CC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (unsigned int *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9C650();
  v9 = (_QWORD *)sub_1B22296DC();
  v10 = (char *)v7 + *(int *)(v3 + 48);
  v11 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v12 = *(_QWORD *)(v4 + 72);
  do
  {
    sub_1B1792810(v11, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1B1B9C5CC);
    v13 = *v7;
    v21 = *((_BYTE *)v7 + 4);
    v14 = v21;
    v15 = sub_1B1DC41BC(v13 | ((unint64_t)v21 << 32));
    *(_QWORD *)((char *)v9 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v15;
    v16 = v9[6] + 8 * v15;
    *(_DWORD *)v16 = v13;
    *(_BYTE *)(v16 + 4) = v14;
    v17 = v9[7];
    v18 = sub_1B2228110();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v15, v10, v18);
    ++v9[2];
    v11 += v12;
    --v8;
  }
  while (v8);
  return v9;
}

_QWORD *sub_1B1B98728(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9CFB0();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (unint64_t *)(a1 + 48);
  do
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v4 += 3;
    v8 = sub_1B1DCC390(v5);
    *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v5;
    v9 = (uint64_t *)(v3[7] + 16 * v8);
    *v9 = v6;
    v9[1] = v7;
    ++v3[2];
    sub_1B1A0DC90(v6, v7);
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B987F4(uint64_t a1)
{
  return sub_1B1B98808(a1, (void (*)(_QWORD))sub_1B1B9DEDC, (uint64_t (*)(_QWORD))sub_1B1DC3F80);
}

_QWORD *sub_1B1B98808(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  a2(0);
  v6 = (_QWORD *)sub_1B22296DC();
  v7 = (_QWORD *)(a1 + 40);
  do
  {
    v8 = *v7;
    v9 = *((_BYTE *)v7 - 8);
    v10 = a3(v9);
    *(_QWORD *)((char *)v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    *(_BYTE *)(v6[6] + v10) = v9;
    *(_QWORD *)(v6[7] + 8 * v10) = v8;
    ++v6[2];
    swift_bridgeObjectRetain();
    v7 += 2;
    --v3;
  }
  while (v3);
  return v6;
}

_QWORD *sub_1B1B988D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  sub_1B1B9B2D8();
  v3 = (_QWORD *)sub_1B22296DC();
  v4 = (_BYTE *)(a1 + 64);
  do
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 2);
    v7 = *((_QWORD *)v4 - 1);
    v8 = *v4;
    v4 += 48;
    v9 = sub_1B1DC3AC8(v5);
    *(_QWORD *)((char *)v3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
    *(_QWORD *)(v3[6] + 8 * v9) = v5;
    v10 = v3[7] + 32 * v9;
    *(_QWORD *)v10 = v6;
    *(_QWORD *)(v10 + 8) = v7;
    *(_BYTE *)(v10 + 16) = v8;
    ++v3[2];
    --v1;
  }
  while (v1);
  return v3;
}

_QWORD *sub_1B1B989A4(uint64_t a1)
{
  return sub_1B1B989B8(a1, (void (*)(_QWORD))sub_1B1B9A830, (uint64_t (*)(uint64_t))sub_1B1DC3AC8);
}

_QWORD *sub_1B1B989B8(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  a2(0);
  v6 = (_QWORD *)sub_1B22296DC();
  v7 = (uint64_t *)(a1 + 40);
  do
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v10 = a3(v8);
    *(_QWORD *)((char *)v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
    v11 = 8 * v10;
    *(_QWORD *)(v6[6] + v11) = v8;
    *(_QWORD *)(v6[7] + v11) = v9;
    ++v6[2];
    v7 += 2;
    --v3;
  }
  while (v3);
  return v6;
}

_QWORD *sub_1B1B98A7C(uint64_t a1)
{
  return sub_1B1B98A88(a1, (void (*)(_QWORD))sub_1B1B9B000);
}

_QWORD *sub_1B1B98A88(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  a2(0);
  v4 = (_QWORD *)sub_1B22296DC();
  v5 = (uint64_t *)(a1 + 40);
  do
  {
    v6 = *v5;
    v7 = *(v5 - 1);
    v8 = sub_1B1DC3CA4(v7);
    *(_QWORD *)((char *)v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    v9 = 8 * v8;
    *(_QWORD *)(v4[6] + v9) = v7;
    *(_QWORD *)(v4[7] + v9) = v6;
    ++v4[2];
    swift_bridgeObjectRetain();
    v5 += 2;
    --v2;
  }
  while (v2);
  return v4;
}

id sub_1B1B98B50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, uint64_t *a8, uint64_t *a9, _QWORD *a10, unsigned __int8 a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t inited;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;

  type metadata accessor for EntityManager();
  swift_allocObject();
  v14 = sub_1B1DA6CC4(0x53726F46706D6554, 0xED0000676E697661, 1, 0);
  v15 = **(_QWORD **)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for RemapContext();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 24) = sub_1B1B95EBC(v16);
  v19 = sub_1B1B7F214(v16, (void (*)(_QWORD))sub_1B1B9D124);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 32) = v19;
  *(_BYTE *)(v18 + 16) = 0;
  swift_retain();
  swift_retain();
  sub_1B1DAD9B0(a1, a1, v18);
  swift_release();
  swift_release();
  v45 = 1;
  sub_1B1F07378(v18, a1, 0x100000000uLL, 0, v15);
  if (*(_BYTE *)(a3 + 24) != 1)
    goto LABEL_8;
  v20 = a2;
  if (a2)
  {
    type metadata accessor for ShaderFileSystem();
    inited = swift_initStackObject();
    v22 = qword_1ED4B7DB8;
    v20 = a2;
    if (v22 != -1)
      swift_once();
    v39 = qword_1ED4D09F8;
    v40 = 0;
    v41 = 2;
    v42 = 0;
    v43 = 2;
    v44 = 0;
    swift_retain();
    sub_1B1E3C3C0(1, (uint64_t)&v34);
    swift_release();
    v23 = v35;
    v24 = v36;
    v25 = v38;
    v26 = v37 | 4;
    *(_QWORD *)(inited + 16) = v34;
    *(_DWORD *)(inited + 24) = v23;
    *(_BYTE *)(inited + 28) = v24;
    *(_QWORD *)(inited + 32) = v26;
    *(_BYTE *)(inited + 40) = 2;
    *(_QWORD *)(inited + 48) = v25;
    sub_1B1D45A88(v14);
    sub_1B19ED720((uint64_t)&v34);

  }
  sub_1B19FF3C0();
  if (v11)
  {
    swift_release();
  }
  else
  {
LABEL_8:
    v20 = a10;
    sub_1B1C18034(v14, 1);
    sub_1B1C1A56C(v14, 1, 1);
    sub_1B1B8293C(v14, a4, a5, a6, a7, a8, a9, a10, a11);
    swift_release();
    if (!v11)
    {
      v20 = *(id *)(v18 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      return v20;
    }
  }
  swift_release();
  return v20;
}

id sub_1B1B98E44(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  void *v33;
  id v34;

  sub_1B1791524(0, &qword_1EEF5B878, (uint64_t (*)(uint64_t))sub_1B1B9D6B4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a1;
  v7 = a1;
  sub_1B1B7FC54(inited);
  v8 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
  sub_1B1B9DAD4(0, &qword_1ED4BA680);
  v9 = (void *)sub_1B2228524();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initDirectoryWithFileWrappers_, v9);

  v11 = objc_msgSend(v7, sel_fileWrappers);
  if (v11)
  {
    v12 = v11;
    v13 = sub_1B2228530();

    if (*(_QWORD *)(v13 + 16) && (v14 = sub_1B1DC3B00(0x6977732E65646F63, 0xEA00000000007466), (v15 & 1) != 0))
    {
      v16 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v14);
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_removeFileWrapper_, v16);
      swift_bridgeObjectRetain();
      sub_1B2228890();
      v17 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_setPreferredFilename_, v17);

      v18 = objc_msgSend(v10, sel_addFileWrapper_, v16);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v19 = objc_msgSend(v7, sel_fileWrappers);
  if (v19)
  {
    v20 = v19;
    v21 = sub_1B2228530();

    if (*(_QWORD *)(v21 + 16) && (v22 = sub_1B1DC3B00(0x7070632E65646F63, 0xE800000000000000), (v23 & 1) != 0))
    {
      v24 = *(id *)(*(_QWORD *)(v21 + 56) + 8 * v22);
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_removeFileWrapper_, v24);
      swift_bridgeObjectRetain();
      sub_1B2228890();
      v25 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v24, sel_setPreferredFilename_, v25);

      v26 = objc_msgSend(v10, sel_addFileWrapper_, v24);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v27 = objc_msgSend(v7, sel_fileWrappers);
  if (v27)
  {
    v28 = v27;
    v29 = sub_1B2228530();

    if (*(_QWORD *)(v29 + 16) && (v30 = sub_1B1DC3B00(0x74656D2E65646F63, 0xEA00000000006C61), (v31 & 1) != 0))
    {
      v32 = *(id *)(*(_QWORD *)(v29 + 56) + 8 * v30);
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_removeFileWrapper_, v32);
      swift_bridgeObjectRetain();
      sub_1B2228890();
      v33 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v32, sel_setPreferredFilename_, v33);

      v34 = objc_msgSend(v10, sel_addFileWrapper_, v32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v10;
}

unint64_t sub_1B1B992C8()
{
  unint64_t result;

  result = qword_1EEF5B320;
  if (!qword_1EEF5B320)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXSaver.Layout, &type metadata for VFXSaver.Layout);
    atomic_store(result, (unint64_t *)&qword_1EEF5B320);
  }
  return result;
}

uint64_t sub_1B1B9930C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 24);
  return result;
}

_BYTE *sub_1B1B9931C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 24) = *result;
  return result;
}

uint64_t sub_1B1B9932C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 25);
  return result;
}

_BYTE *sub_1B1B9933C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 25) = *result;
  return result;
}

uint64_t sub_1B1B9934C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 26);
  return result;
}

_BYTE *sub_1B1B9935C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 26) = *result;
  return result;
}

uint64_t sub_1B1B9936C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 27);
  return result;
}

_BYTE *sub_1B1B9937C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 27) = *result;
  return result;
}

uint64_t sub_1B1B9938C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1B9939C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for VFXSaver()
{
  return objc_opt_self();
}

uint64_t method lookup function for VFXSaver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXSaver.isSavingForExport.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of VFXSaver.isSavingForExport.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of VFXSaver.isSavingForExport.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of VFXSaver.layout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of VFXSaver.layout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of VFXSaver.layout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of VFXSaver.saveBindingsMetadata.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of VFXSaver.saveBindingsMetadata.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of VFXSaver.saveBindingsMetadata.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of VFXSaver.saveAsPlist.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of VFXSaver.saveAsPlist.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of VFXSaver.saveAsPlist.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of VFXSaver.targetsToPrecompile.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of VFXSaver.targetsToPrecompile.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of VFXSaver.targetsToPrecompile.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of VFXSaver.__allocating_init(world:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of VFXSaver.save(projectName:documentUUID:isVFX2:versionHistory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of VFXSaver.save2(projectName:documentUUID:isVFX2:versionHistory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t storeEnumTagSinglePayload for VFXSaver.Layout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1B99538 + 4 * byte_1B227D745[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1B9956C + 4 * byte_1B227D740[v4]))();
}

uint64_t sub_1B1B9956C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B99574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B9957CLL);
  return result;
}

uint64_t sub_1B1B99588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B99590);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1B99594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B9959C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFXSaver.Layout()
{
  return &type metadata for VFXSaver.Layout;
}

unint64_t sub_1B1B995B8()
{
  unint64_t result;

  result = qword_1ED4B7F98;
  if (!qword_1ED4B7F98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F49C, &type metadata for CommandQueue.DirtyPropagation);
    atomic_store(result, (unint64_t *)&qword_1ED4B7F98);
  }
  return result;
}

void sub_1B1B995FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA900)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA900);
  }
}

void sub_1B1B9965C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9B8)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9B8);
  }
}

void sub_1B1B996C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA938)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA938);
  }
}

void sub_1B1B99724()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9A0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9A0);
  }
}

uint64_t sub_1B1B99788(uint64_t a1, uint64_t a2)
{
  assignWithTake for ShaderCache.CacheEntry(a2, a1);
  return a2;
}

void sub_1B1B997C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B340)
  {
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B340);
  }
}

void sub_1B1B99824()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FEF0)
  {
    type metadata accessor for VFXTriggerType(255);
    sub_1B1B998B8();
    sub_1B19E52CC(&qword_1EEF58070, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269BC0);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FEF0);
  }
}

void sub_1B1B998B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B350)
  {
    sub_1B1B68ED0();
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B350);
  }
}

void sub_1B1B99918()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5BCF0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5BCF0);
  }
}

void sub_1B1B99980()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B358)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B358);
  }
}

void sub_1B1B999E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B360)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B360);
  }
}

unint64_t sub_1B1B99A44()
{
  unint64_t result;

  result = qword_1ED4BA120;
  if (!qword_1ED4BA120)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E0DC, &type metadata for Renderer.UnscheduledCommandBuffer);
    atomic_store(result, (unint64_t *)&qword_1ED4BA120);
  }
  return result;
}

uint64_t sub_1B1B99A88(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  sub_1B1A02758(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

void sub_1B1B99AD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B370)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B370);
  }
}

uint64_t sub_1B1B99B3C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  sub_1B1B9D790(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1B1B99B8C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1B22296E8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1B1B99BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1B99C34()
{
  unint64_t result;

  result = qword_1EEF5B3A0;
  if (!qword_1EEF5B3A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283D60, &type metadata for GraphDebuggingComponent.DebugValuesKey);
    atomic_store(result, (unint64_t *)&qword_1EEF5B3A0);
  }
  return result;
}

void sub_1B1B99C78(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1A02758(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B99C34();
    v5 = sub_1B22296E8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1B1B99CF4(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B1B99D38(uint64_t a1, uint64_t a2)
{
  assignWithTake for CompilationStatus(a2, a1);
  return a2;
}

uint64_t sub_1B1B99D74(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CompilationStatus(a2, a1);
  return a2;
}

void sub_1B1B99DB0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = sub_1B22296E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1B1B99E24()
{
  unint64_t result;

  result = qword_1EEF5B3C0;
  if (!qword_1EEF5B3C0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for Target, &type metadata for Target);
    atomic_store(result, (unint64_t *)&qword_1EEF5B3C0);
  }
  return result;
}

void sub_1B1B99E68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B3C8)
  {
    sub_1B1B99EC8();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B3C8);
  }
}

unint64_t sub_1B1B99EC8()
{
  unint64_t result;

  result = qword_1EEF5B3D0;
  if (!qword_1EEF5B3D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B0CD0, &type metadata for ScriptHandle);
    atomic_store(result, (unint64_t *)&qword_1EEF5B3D0);
  }
  return result;
}

id sub_1B1B99F0C(uint64_t a1, unint64_t a2)
{
  id result;
  void *v3;

  if (a2 >> 62 == 1)
  {
    v3 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRetain();
    return v3;
  }
  else if (!(a2 >> 62))
  {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1B99F48(uint64_t a1, uint64_t a2)
{
  _s18CachedBuildResultsV6ResultOwta(a2, a1);
  return a2;
}

unint64_t sub_1B1B99F84()
{
  unint64_t result;

  result = qword_1EEF5B3E0;
  if (!qword_1EEF5B3E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22891D4, &type metadata for ScriptLocation);
    atomic_store(result, (unint64_t *)&qword_1EEF5B3E0);
  }
  return result;
}

void sub_1B1B99FC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FF40)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FF40);
  }
}

void sub_1B1B9A02C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B3F0)
  {
    sub_1B1B99F84();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B3F0);
  }
}

void sub_1B1B9A08C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B3F8)
  {
    sub_1B1B99F84();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B3F8);
  }
}

void sub_1B1B9A0EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA8D0)
  {
    sub_1B1B9A14C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA8D0);
  }
}

unint64_t sub_1B1B9A14C()
{
  unint64_t result;

  result = qword_1ED4B9690;
  if (!qword_1ED4B9690)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228CF18, &type metadata for ScriptCompilerSystem.CompilationHandle);
    atomic_store(result, (unint64_t *)&qword_1ED4B9690);
  }
  return result;
}

uint64_t sub_1B1B9A190(uint64_t a1, uint64_t a2)
{
  _s18CachedBuildResultsV6ResultOwtk(a2, a1);
  return a2;
}

void sub_1B1B9A1CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B408)
  {
    sub_1B1B9A14C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B408);
  }
}

void sub_1B1B9A22C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA8E0)
  {
    sub_1B1B9A28C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA8E0);
  }
}

unint64_t sub_1B1B9A28C()
{
  unint64_t result;

  result = qword_1ED4B7920;
  if (!qword_1ED4B7920)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C88C0, &type metadata for RenderVariantDescriptor);
    atomic_store(result, (unint64_t *)&qword_1ED4B7920);
  }
  return result;
}

uint64_t sub_1B1B9A2D0(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void sub_1B1B9A304()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B418)
  {
    type metadata accessor for VertexLayoutDescriptor();
    sub_1B19E52CC((unint64_t *)&unk_1EEF5B420, (uint64_t (*)(uint64_t))type metadata accessor for VertexLayoutDescriptor, (uint64_t)&unk_1B2296F78);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B418);
  }
}

uint64_t sub_1B1B9A384(uint64_t a1, uint64_t a2)
{
  assignWithTake for RenderStates(a2, a1);
  return a2;
}

void sub_1B1B9A3C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B430)
  {
    sub_1B1B9A28C();
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B430);
  }
}

void sub_1B1B9A420()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FF80)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FF80);
  }
}

uint64_t sub_1B1B9A484(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DataValue(a2, a1);
  return a2;
}

uint64_t sub_1B1B9A4C0(uint64_t a1, uint64_t a2)
{
  assignWithTake for TextureCPURuntime(a2, a1);
  return a2;
}

void sub_1B1B9A4FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B440)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B440);
  }
}

void sub_1B1B9A560()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B448)
  {
    sub_1B19F8F48(255, (unint64_t *)&qword_1ED4BA5D0);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B448);
  }
}

void sub_1B1B9A5D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B450)
  {
    sub_1B1791524(255, &qword_1EEF58810, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B450);
  }
}

void sub_1B1B9A650(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B19F8E54(255, a3, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], a4);
    v5 = sub_1B2228B6C();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1B1B9A6B8(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B1B9A650(255, a3, a4, a5);
    v6 = sub_1B22296E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1B1B9A720()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B488)
  {
    type metadata accessor for vfx_vertex_attribute(255);
    sub_1B1B9A958(255, &qword_1EEF5B490, type metadata accessor for VFXMeshSourceSemantic);
    sub_1B19E52CC(&qword_1EEF5B498, (uint64_t (*)(uint64_t))type metadata accessor for vfx_vertex_attribute, (uint64_t)&unk_1B226C570);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B488);
  }
}

void sub_1B1B9A7CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B4A8)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B4A8);
  }
}

void sub_1B1B9A830()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B4B0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B4B0);
  }
}

void sub_1B1B9A894()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B4B8)
  {
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B4B8);
  }
}

void sub_1B1B9A8F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B4C0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B4C0);
  }
}

void sub_1B1B9A958(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1B1B9A9BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9E0)
  {
    sub_1B2229610();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9E0);
  }
}

unint64_t sub_1B1B9AA24()
{
  unint64_t result;

  result = qword_1ED4BA550;
  if (!qword_1ED4BA550)
  {
    sub_1B1B9AA5C();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA550);
  }
  return result;
}

unint64_t sub_1B1B9AA5C()
{
  unint64_t result;

  result = qword_1ED4BA548;
  if (!qword_1ED4BA548)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA548);
  }
  return result;
}

void sub_1B1B9AAB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9F0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9F0);
  }
}

uint64_t sub_1B1B9AB1C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1B1B9DAD4(255, a2);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B1B9AB5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B4E0)
  {
    sub_1B1B9DAD4(255, &qword_1EEF5B4D0);
    type metadata accessor for SkeletonAnimation();
    sub_1B1B9AB1C(&qword_1EEF5B4D8, &qword_1EEF5B4D0);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B4E0);
  }
}

void sub_1B1B9AC04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B4F8)
  {
    type metadata accessor for VFXWrapMode(255);
    sub_1B19E52CC(&qword_1EEF5B500, (uint64_t (*)(uint64_t))type metadata accessor for VFXWrapMode, (uint64_t)&unk_1B226C500);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B4F8);
  }
}

void sub_1B1B9AC84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B508)
  {
    type metadata accessor for VFXFilterMode(255);
    sub_1B19E52CC(&qword_1EEF5B510, (uint64_t (*)(uint64_t))type metadata accessor for VFXFilterMode, (uint64_t)&unk_1B226C4BC);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B508);
  }
}

void sub_1B1B9AD04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B518)
  {
    type metadata accessor for VFXFilterMode(255);
    sub_1B19E52CC(&qword_1EEF5B510, (uint64_t (*)(uint64_t))type metadata accessor for VFXFilterMode, (uint64_t)&unk_1B226C4BC);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B518);
  }
}

void sub_1B1B9AD84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B528)
  {
    sub_1B2228110();
    sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B528);
  }
}

void sub_1B1B9AE04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FFB0)
  {
    sub_1B1B9AE64();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FFB0);
  }
}

unint64_t sub_1B1B9AE64()
{
  unint64_t result;

  result = qword_1EEF5B530;
  if (!qword_1EEF5B530)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB0358], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EEF5B530);
  }
  return result;
}

void sub_1B1B9AEA8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_1B1B9DAD4(255, a3);
    sub_1B1B9AB1C(a5, a3);
    v8 = sub_1B22296E8();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1B1B9AF38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B558)
  {
    type metadata accessor for VFXWorldLoaderOption(255);
    sub_1B19E52CC((unint64_t *)&qword_1EEF5B560, (uint64_t (*)(uint64_t))type metadata accessor for VFXWorldLoaderOption, (uint64_t)&unk_1B226C478);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B558);
  }
}

unint64_t sub_1B1B9AFBC()
{
  unint64_t result;

  result = qword_1EEF5FFC0;
  if (!qword_1EEF5FFC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296E70, &type metadata for VertexLayout);
    atomic_store(result, (unint64_t *)&qword_1EEF5FFC0);
  }
  return result;
}

void sub_1B1B9B000()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B580)
  {
    sub_1B19F8E54(255, &qword_1EEF5B588, (uint64_t (*)(void))sub_1B1B9AFBC, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B580);
  }
}

void sub_1B1B9B088()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B590)
  {
    type metadata accessor for LoadingOption(255);
    sub_1B19E52CC(&qword_1EEF58568, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226C434);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B590);
  }
}

void sub_1B1B9B10C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B5B0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B5B0);
  }
}

void sub_1B1B9B170()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA890)
  {
    sub_1B1A02758(255, &qword_1ED4BA528, MEMORY[0x1E0DEE068], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B9B1F0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA890);
  }
}

unint64_t sub_1B1B9B1F0()
{
  unint64_t result;

  result = qword_1ED4B7D60;
  if (!qword_1ED4B7D60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5034, &type metadata for FlyModeKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D60);
  }
  return result;
}

void sub_1B1B9B234()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B5B8)
  {
    type metadata accessor for Option(255);
    sub_1B1B9DAD4(255, (unint64_t *)&qword_1EEF5B5C0);
    sub_1B19E52CC((unint64_t *)&qword_1EEF5BD00, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C3AC);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B5B8);
  }
}

void sub_1B1B9B2D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B5D0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B5D0);
  }
}

void sub_1B1B9B33C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FFE0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FFE0);
  }
}

void sub_1B1B9B3A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B5E0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B5E0);
  }
}

void sub_1B1B9B404()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA920)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA920);
  }
}

unint64_t sub_1B1B9B468()
{
  unint64_t result;

  result = qword_1EEF5B5F8;
  if (!qword_1EEF5B5F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B84C4, &type metadata for PointCacheProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF5B5F8);
  }
  return result;
}

void sub_1B1B9B4AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B600)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B600);
  }
}

void sub_1B1B9B510()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5E8D0)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1EEF5B620, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5E8D0);
  }
}

void sub_1B1B9B590()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B680)
  {
    sub_1B1791524(255, &qword_1EEF58810, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B680);
  }
}

uint64_t sub_1B1B9B60C(uint64_t a1, uint64_t a2)
{
  assignWithTake for ShaderCache.ShaderCacheWeakReference(a2, a1);
  return a2;
}

void sub_1B1B9B648()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B690)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B690);
  }
}

void sub_1B1B9B6AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B698)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B698);
  }
}

void sub_1B1B9B710()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA950)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA950);
  }
}

void sub_1B1B9B774()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FEE0)
  {
    sub_1B1A02758(255, (unint64_t *)&unk_1EEF5AE70, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FEE0);
  }
}

void sub_1B1B9B7F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA960)
  {
    sub_1B1A02758(255, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA960);
  }
}

uint64_t sub_1B1B9B86C(uint64_t a1)
{
  sub_1B1B4157C(*(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
  return a1;
}

void sub_1B1B9BA4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF6B0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF6B0);
  }
}

uint64_t sub_1B1B9BAB0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ShaderCache.ShaderCacheWeakReference(a2, a1);
  return a2;
}

void sub_1B1B9BAEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9D0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9D0);
  }
}

void sub_1B1B9BB50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7A50)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7A50);
  }
}

void sub_1B1B9BBB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF6A0)
  {
    sub_1B1B9BC14();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF6A0);
  }
}

unint64_t sub_1B1B9BC14()
{
  unint64_t result;

  result = qword_1ED4BF448;
  if (!qword_1ED4BF448)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B51D8, &type metadata for RenderGraph.RenderTarget);
    atomic_store(result, (unint64_t *)&qword_1ED4BF448);
  }
  return result;
}

void sub_1B1B9BC58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9B0)
  {
    sub_1B19F8F48(255, (unint64_t *)&qword_1ED4B7990);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9B0);
  }
}

void sub_1B1B9BCCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA990)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA990);
  }
}

uint64_t sub_1B1B9BD30(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1B1B9BD64(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_1B22296E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1B1B9BDC8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void sub_1B1B9BE20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FF50)
  {
    sub_1B19F8F48(255, (unint64_t *)&unk_1ED4B79F0);
    sub_1B1B9BE98();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FF50);
  }
}

unint64_t sub_1B1B9BE98()
{
  unint64_t result;

  result = qword_1EEF5FF60;
  if (!qword_1EEF5FF60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0E10, &type metadata for DepthStencilDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF5FF60);
  }
  return result;
}

void sub_1B1B9BEDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF6D0)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF6D0);
  }
}

uint64_t sub_1B1B9BF58(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_1B1791524(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_1B1B9BFA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5B6B0)
  {
    sub_1B19F8F48(255, (unint64_t *)&qword_1ED4B7990);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5B6B0);
  }
}

unint64_t sub_1B1B9C020()
{
  unint64_t result;

  result = qword_1EEF5FF30;
  if (!qword_1EEF5FF30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2294ACC, &type metadata for NoiseParameters);
    atomic_store(result, (unint64_t *)&qword_1EEF5FF30);
  }
  return result;
}

uint64_t sub_1B1B9C064(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void sub_1B1B9C0A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA898)
  {
    type metadata accessor for TextureCache.TextureKey();
    sub_1B19E52CC((unint64_t *)&unk_1ED4B84A0, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache.TextureKey, (uint64_t)&unk_1B22AA130);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA898);
  }
}

uint64_t sub_1B1B9C128(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TextureCache.CacheEntry(a2, a1);
  return a2;
}

void sub_1B1B9C164()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7A48)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7A48);
  }
}

void sub_1B1B9C1C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF6C0)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF6C0);
  }
}

void sub_1B1B9C244(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1791524(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1B1B9C2B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B6C0)
  {
    sub_1B1B9C310();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B6C0);
  }
}

unint64_t sub_1B1B9C310()
{
  unint64_t result;

  result = qword_1EEF5FFD0;
  if (!qword_1EEF5FFD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297080, &type metadata for MeshBuffer);
    atomic_store(result, (unint64_t *)&qword_1EEF5FFD0);
  }
  return result;
}

void sub_1B1B9C354()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEF5B6D8)
  {
    sub_1B19F8F48(255, (unint64_t *)&qword_1ED4B7A00);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEF5B6D8);
  }
}

unint64_t sub_1B1B9C3D0()
{
  unint64_t result;

  result = qword_1EEF5B6E8;
  if (!qword_1EEF5B6E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E144, &type metadata for Renderer.StripDesc);
    atomic_store(result, (unint64_t *)&qword_1EEF5B6E8);
  }
  return result;
}

void sub_1B1B9C414()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4B7B58)
  {
    sub_1B222826C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4B7B58);
  }
}

uint64_t sub_1B1B9C474(uint64_t a1, uint64_t a2)
{
  _s11CodeSnippetC17SerializationInfoVwta(a2, a1);
  return a2;
}

void sub_1B1B9C4B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B700)
  {
    sub_1B1B9C50C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B700);
  }
}

unint64_t sub_1B1B9C50C()
{
  unint64_t result;

  result = qword_1EEF5B708;
  if (!qword_1EEF5B708)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2295A40, &_s7ContextC14AssignmentInfoVN);
    atomic_store(result, (unint64_t *)&qword_1EEF5B708);
  }
  return result;
}

void sub_1B1B9C550()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B710)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B710);
  }
}

void sub_1B1B9C5CC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BB050)
  {
    sub_1B1A02758(255, &qword_1ED4BB048, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B2228110();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BB050);
  }
}

void sub_1B1B9C650()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAA00)
  {
    sub_1B1A02758(255, &qword_1ED4BB048, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B2228110();
    sub_1B1B9C6E0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAA00);
  }
}

unint64_t sub_1B1B9C6E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED4BB060;
  if (!qword_1ED4BB060)
  {
    sub_1B1A02758(255, &qword_1ED4BB048, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEDBD8];
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED4BB060);
  }
  return result;
}

uint64_t sub_1B1B9C750(uint64_t a1)
{
  sub_1B19FA2B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1B1B9C780()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B718)
  {
    sub_1B1B9C7E0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B718);
  }
}

unint64_t sub_1B1B9C7E0()
{
  unint64_t result;

  result = qword_1EEF5B720;
  if (!qword_1EEF5B720)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2A2C, &type metadata for Language);
    atomic_store(result, (unint64_t *)&qword_1EEF5B720);
  }
  return result;
}

void sub_1B1B9C824()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B730)
  {
    sub_1B2228110();
    sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B730);
  }
}

void sub_1B1B9C8A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B740)
  {
    sub_1B1B9D790(255, (unint64_t *)&qword_1EEF600E0);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B740);
  }
}

void sub_1B1B9C920()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60100)
  {
    sub_1B222826C();
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60100);
  }
}

uint64_t sub_1B1B9C9A0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1B9A958(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1B1B9C9F0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B222826C();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1B1B9CA60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF600F0)
  {
    type metadata accessor for Node();
    sub_1B1AEC268(255, (unint64_t *)&qword_1ED4BB030);
    v0 = sub_1B222A120();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF600F0);
  }
}

void sub_1B1B9CAE0(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

void sub_1B1B9CAEC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B222826C();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    a3(255);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v5, MEMORY[0x1E0CB09C8]);
    v6 = sub_1B22296E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1B1B9CB84()
{
  unint64_t result;

  result = qword_1EEF60130;
  if (!qword_1EEF60130)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228907C, &type metadata for ScriptParameter);
    atomic_store(result, (unint64_t *)&qword_1EEF60130);
  }
  return result;
}

unint64_t sub_1B1B9CBC8()
{
  unint64_t result;

  result = qword_1EEF5B7A0;
  if (!qword_1EEF5B7A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280544, &type metadata for EntityInstance);
    atomic_store(result, (unint64_t *)&qword_1EEF5B7A0);
  }
  return result;
}

unint64_t sub_1B1B9CC0C()
{
  unint64_t result;

  result = qword_1ED484280;
  if (!qword_1ED484280)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228CB18, &type metadata for EmitterReference);
    atomic_store(result, (unint64_t *)&qword_1ED484280);
  }
  return result;
}

uint64_t sub_1B1B9CC50(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1B1B9CCA4()
{
  unint64_t result;

  result = qword_1ED4BB170;
  if (!qword_1ED4BB170)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BB170);
  }
  return result;
}

unint64_t sub_1B1B9CCE0()
{
  unint64_t result;

  result = qword_1EEF5B7B8;
  if (!qword_1EEF5B7B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22961BC, &_s12MetadataTypeON);
    atomic_store(result, (unint64_t *)&qword_1EEF5B7B8);
  }
  return result;
}

void sub_1B1B9CD24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAA10)
  {
    sub_1B1A02758(255, &qword_1ED4BA848, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEC708]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAA10);
  }
}

void sub_1B1B9CDA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA970)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA970);
  }
}

void sub_1B1B9CE04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B7C8)
  {
    sub_1B1791524(255, (unint64_t *)&qword_1EEF5B7D0, (uint64_t (*)(uint64_t))sub_1B1B9CE80, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B7C8);
  }
}

void sub_1B1B9CE80()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5B7D8)
  {
    sub_1B1AEC268(255, &qword_1EEF5B7E0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5B7D8);
  }
}

void sub_1B1B9CEF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA3D0)
  {
    sub_1B1B9CF68(255, (unint64_t *)&qword_1ED4B8C68, &qword_1ED4B8C60);
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA3D0);
  }
}

uint64_t sub_1B1B9CF68(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    sub_1B1AEC268(255, a3);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1B1B9CFB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B7E8)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B7E8);
  }
}

unint64_t sub_1B1B9D014()
{
  unint64_t result;

  result = qword_1ED4BA088;
  if (!qword_1ED4BA088)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0660, &type metadata for EffectID);
    atomic_store(result, (unint64_t *)&qword_1ED4BA088);
  }
  return result;
}

void sub_1B1B9D058()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B7F8)
  {
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B7F8);
  }
}

void sub_1B1B9D0C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA910)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA910);
  }
}

void sub_1B1B9D124()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7A40)
  {
    sub_1B1B9D198(255, (unint64_t *)&qword_1ED4BA260, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA048]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7A40);
  }
}

void sub_1B1B9D198(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_1B222826C();
    v7 = sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v8 = a3(a1, v6, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1B1B9D218()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA8F0)
  {
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA8F0);
  }
}

void sub_1B1B9D274(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B1B9D2DC(255, a3, a4, a5);
    v6 = sub_1B22296E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1B1B9D2DC(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1B9D98C(255, a3, a4);
    v5 = sub_1B2228B6C();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1B1B9D330()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5B820)
  {
    sub_1B222826C();
    sub_1B1A02758(255, (unint64_t *)&unk_1EEF600D0, (uint64_t)&type metadata for TexturePreview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5B820);
  }
}

void sub_1B1B9D3B4()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEF5B830)
  {
    sub_1B222826C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    sub_1B1A02758(255, (unint64_t *)&unk_1EEF600D0, (uint64_t)&type metadata for TexturePreview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v0, MEMORY[0x1E0CB09C8]);
    v1 = sub_1B22296E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEF5B830);
  }
}

void sub_1B1B9D460(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_1B19E52CC(a4, a3, a5);
    v9 = sub_1B2229400();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1B1B9D4E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B848)
  {
    sub_1B1B9D540();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B848);
  }
}

unint64_t sub_1B1B9D540()
{
  unint64_t result;

  result = qword_1EEF5B850;
  if (!qword_1EEF5B850)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BADF8, &type metadata for AuthoringNode.Port);
    atomic_store(result, (unint64_t *)&qword_1EEF5B850);
  }
  return result;
}

uint64_t sub_1B1B9D584(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1B9C9F0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1B1B9D5D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1B1B9D634()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF601B0)
  {
    sub_1B1791524(255, &qword_1EEF58810, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF601B0);
  }
}

void sub_1B1B9D6B4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5B880)
  {
    sub_1B1B9DAD4(255, &qword_1ED4BA680);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5B880);
  }
}

void sub_1B1B9D728()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B888)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B888);
  }
}

void sub_1B1B9D790(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1B1B9D7E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B898)
  {
    sub_1B1A057A8();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B898);
  }
}

void sub_1B1B9D840()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B8A8)
  {
    sub_1B1A02758(255, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B8A8);
  }
}

uint64_t sub_1B1B9D8BC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1B1B9D92C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B8B0)
  {
    sub_1B1B9CB84();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B8B0);
  }
}

void sub_1B1B9D98C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void sub_1B1B9D9EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B8D0)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1EEF5B8D8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B8D0);
  }
}

void sub_1B1B9DA70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B8E0)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B8E0);
  }
}

uint64_t sub_1B1B9DAD4(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1B1B9DB0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B900)
  {
    sub_1B1791524(255, &qword_1EEF58830, (uint64_t (*)(uint64_t))type metadata accessor for Node, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1A0293C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B900);
  }
}

void sub_1B1B9DB8C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1791524(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    sub_1B1A057A8();
    v5 = sub_1B22296E8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1B1B9DC08(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1791524(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1B1B9DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

void sub_1B1B9DCC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B958)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B958);
  }
}

uint64_t *sub_1B1B9DD2C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[11];
  v5 = a1[12];
  v7 = a1[17];
  v8 = a1[16];
  sub_1B1B410E4(a1[1], a1[2]);
  sub_1B1B410E4(v2, v3);
  sub_1B1B410E4(v4, v5);
  sub_1B1B410E4(v8, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1B1B9DE34()
{
  unint64_t result;

  result = qword_1ED4B94F0;
  if (!qword_1ED4B94F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283DC0, &type metadata for GraphScriptingConfig.EvaluationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B94F0);
  }
  return result;
}

void sub_1B1B9DE78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B968)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B968);
  }
}

void sub_1B1B9DEDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B970)
  {
    sub_1B1A02758(255, &qword_1EEF5B978, (uint64_t)&type metadata for GraphNodeLibrary.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B9DF5C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B970);
  }
}

unint64_t sub_1B1B9DF5C()
{
  unint64_t result;

  result = qword_1EEF5B980;
  if (!qword_1EEF5B980)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAEFC, &type metadata for GraphNodeLibrary.NodeCategory);
    atomic_store(result, (unint64_t *)&qword_1EEF5B980);
  }
  return result;
}

uint64_t type metadata accessor for ParticleSizeOverTexture.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1B9DFC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B9DFF4 + 4 * byte_1B227D840[a1]))(0x65727574786574, 0xE700000000000000);
}

uint64_t sub_1B1B9DFF4()
{
  return 0x6C656E6E616863;
}

uint64_t sub_1B1B9E008()
{
  return 0x4D73736572646461;
}

uint64_t sub_1B1B9E028()
{
  return 0x7469736F706D6F63;
}

uint64_t sub_1B1B9E048()
{
  return 1701080941;
}

uint64_t sub_1B1B9E058()
{
  return 0x65676E615278;
}

uint64_t sub_1B1B9E06C()
{
  return 0x65676E615279;
}

uint64_t sub_1B1B9E084()
{
  return 0x65676E61527ALL;
}

uint64_t sub_1B1B9E09C()
{
  return 1935763810;
}

uint64_t sub_1B1B9E0AC()
{
  return 0x656C676E61;
}

uint64_t sub_1B1B9E0C0()
{
  return 0x656C616373;
}

uint64_t sub_1B1B9E0D4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5B9A0, (uint64_t (*)(void))sub_1B1BA0544, (uint64_t)&type metadata for ParticleSizeOverTexture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BA0544();
  sub_1B222A180();
  v14 = *v3;
  v13 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v14) = *((_BYTE *)v3 + 8);
    v13 = 1;
    sub_1B1A70ED0();
    sub_1B2229958();
    LOBYTE(v14) = *((_BYTE *)v3 + 9);
    v13 = 2;
    sub_1B1A71D70();
    sub_1B2229958();
    v14 = *(uint64_t *)((char *)v3 + 12);
    v13 = 3;
    sub_1B1BA05CC();
    sub_1B2229958();
    LOBYTE(v14) = *((_BYTE *)v3 + 20);
    v13 = 4;
    sub_1B1A71B00();
    sub_1B2229958();
    v14 = v3[3];
    v13 = 5;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    v14 = v3[4];
    v13 = 6;
    sub_1B2229958();
    v14 = v3[5];
    v13 = 7;
    sub_1B2229958();
    v14 = v3[6];
    v13 = 8;
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1B7283C((unint64_t *)&qword_1ED4B72D8, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
    v14 = v3[7];
    v13 = 9;
    sub_1B2229958();
    LOBYTE(v14) = 10;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B1B9E4AC()
{
  return "ParticleSizeOverTexture";
}

uint64_t sub_1B1B9E4C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1B9DFC0(*a1);
  v5 = v4;
  if (v3 == sub_1B1B9DFC0(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1B9E548()
{
  unsigned __int8 *v0;

  return sub_1B1B9DFC0(*v0);
}

uint64_t sub_1B1B9E550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1B9E68C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1B9E574()
{
  sub_1B1BA0544();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B9E59C()
{
  sub_1B1BA0544();
  return sub_1B222A1E0();
}

__n128 sub_1B1B9E5C4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  int v7;

  sub_1B1BA00AC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_DWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B1B9E614(_QWORD *a1)
{
  return sub_1B1B9E0D4(a1);
}

uint64_t sub_1B1B9E628()
{
  return type metadata accessor for ParticleSizeOverTexture.System();
}

double sub_1B1B9E644@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 8) = 512;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 1065353216;
  *(_BYTE *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1B2244E50;
  result = 0.0078125;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 40) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 48) = _D1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1B1B9E68C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65727574786574 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4D73736572646461 && a2 == 0xEB0000000065646FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65676E615278 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65676E615279 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65676E61527ALL && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1935763810 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t *sub_1B1B9EAC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  double v8;
  uint64_t v14;
  unsigned int v15;
  float v16;
  __int128 v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _QWORD *v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[40];
  _QWORD v112[5];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  _OWORD v125[2];
  __int128 v126;
  uint64_t v127;
  int64x2_t v128[7];
  _BYTE v129[49];
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _OWORD v139[2];
  __int128 v140;
  uint64_t v141;
  _OWORD v142[7];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[40];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  swift_retain();
  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D15D18(v3, (uint64_t)&v144);
  swift_release();
  if ((v145 & 0xFF00000000) == 0x300000000)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = 0.0;
    __asm { FMOV            V9.2S, #1.0 }
    LOBYTE(v14) = 2;
    v15 = -1;
    v16 = 0.0;
  }
  else
  {
    v16 = *(float *)&v148;
    v8 = *((double *)&v147 + 1);
    _D9 = *(double *)&v147;
    v5 = BYTE8(v144);
    v15 = v144;
    v4 = v144 & 0xFFFFFFFF00000000;
    v14 = *((_QWORD *)&v144 + 1) >> 8;
    v6 = BYTE12(v144);
    v7 = DWORD1(v145);
  }
  sub_1B20F03D8(v4 | v15, v128);
  sub_1B19F66A0((uint64_t)v128, (uint64_t)v142, (unint64_t *)&unk_1ED4B9160);
  if (!v143)
    return (uint64_t *)swift_release();
  v148 = v142[4];
  v149 = v142[5];
  v150 = v142[6];
  v151 = v143;
  v144 = v142[0];
  v145 = v142[1];
  v146 = v142[2];
  v147 = v142[3];
  sub_1B1EDFCF8((uint64_t)&v144, v14, 1, (uint64_t)v129);
  sub_1B1A0857C((uint64_t)v129, (uint64_t)v139);
  if (*((_QWORD *)&v140 + 1) == 1)
    goto LABEL_6;
  v125[0] = v139[0];
  v125[1] = v139[1];
  v126 = v140;
  v127 = v141;
  v18 = *(_OWORD *)(a1 + 104);
  v116 = *(_OWORD *)(a1 + 88);
  v117 = v18;
  v118 = *(_QWORD *)(a1 + 120);
  v19 = v111;
  sub_1B19EFD9C((uint64_t)v111);
  if (v6)
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v20 + 32) = &type metadata for TransientOriginScale;
    *(_QWORD *)(v20 + 40) = &off_1E639F8B0;
    v19 = v112;
    sub_1B1E68C98(v112);
    swift_setDeallocating();
    swift_deallocClassInstance();
    sub_1B19ED720((uint64_t)v111);
  }
  v21 = *((_DWORD *)v19 + 2);
  v22 = v19[12];
  v23 = *((_QWORD *)v19 + 2);
  v24 = v19[24];
  v25 = *((_QWORD *)v19 + 4);
  v119 = *(_QWORD *)v19;
  v120 = v21;
  v121 = v22;
  v122 = v23;
  v123 = v24;
  v124 = v25;
  sub_1B1C31BBC(&v108, _D9, v16, v8);
  if (!(_BYTE)v7)
  {
    sub_1B1E8FCE4(v2, (uint64_t)&v119, 0x200000000, &v130);
    sub_1B19F66A0((uint64_t)&v130, (uint64_t)&v131, (unint64_t *)&qword_1ED4B7DE0);
    if (!(_QWORD)v131)
    {
      swift_release();
      sub_1B1A08614(v128[0].i64);
      return (uint64_t *)swift_release();
    }
    if (v138 > 0 && (v92 = v135) != 0)
    {
      v38 = v137[4];
      v97 = *(_BYTE *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v113 = v131;
      v114 = v132;
      v115 = v133;
      v85 = (uint64_t)(v137 + 6);
      v88 = v134;
      v98 = v137;
      v82 = v137 + 8;
      v103 = (float32x2_t)v109;
      v106 = *(float32x2_t *)v108.f32;
      v100 = (float32x2_t)v110;
      swift_retain();
      swift_retain();
      swift_retain();
      v39 = 0;
      v40 = 0;
      v41 = v5;
      v90 = v38;
      v79 = v5;
      do
      {
        v96 = v39;
        v42 = (unsigned int *)(v88 + 48 * v39);
        v94 = *v42;
        v93 = v42[1];
        v44 = (uint64_t *)*((_QWORD *)v42 + 2);
        v43 = *((_QWORD *)v42 + 3);
        v46 = *((_QWORD *)v42 + 4);
        v45 = *((_QWORD *)v42 + 5);
        v95 = v40;
        if ((v97 & 1) != 0)
        {
          v47 = *(os_unfair_lock_s **)(v45 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v47);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v38);
        sub_1B19F66A0(v85, (uint64_t)v152, &qword_1ED4B7FB0);
        v48 = v98[4];
        v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v98[6] = ecs_stack_allocator_allocate(v48, 48 * v49, 8);
        v98[7] = v49;
        v82[1] = 0;
        v82[2] = 0;
        *v82 = 0;
        swift_release();
        v50 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v44, v43, v46, (uint64_t)v98);
        sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v44, v43, v46, (uint64_t)v98);
        if (v44)
        {
          v40 = v95;
          if (v46)
          {
            (*((void (**)(_OWORD *, double))&v126 + 1))(v125, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v103, *v50, 2), vadd_f32(v100, vmul_n_f32(v106, COERCE_FLOAT(*v50))))));
            __asm { BR              X8 }
          }
        }
        else
        {
          v40 = v95;
          if ((_DWORD)v94 != v93)
          {
            (*((void (**)(_OWORD *, double))&v126 + 1))(v125, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v103, v50[v94], 2), vadd_f32(v100, vmul_n_f32(v106, COERCE_FLOAT(*(_OWORD *)&v50[v94]))))));
            __asm { BR              X8 }
          }
        }
        v38 = v90;
        sub_1B1F05D48(v98, (unsigned __int16 **)&v113, (uint64_t)v152);
        sub_1B1F03804((char *)v45);
        ecs_stack_allocator_pop_snapshot(v90);
        if ((v97 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 376));
        }
        swift_release();
        v39 = v96 + 1;
      }
      while (v96 + 1 != v92);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
    }
    goto LABEL_60;
  }
  if (v7 == 1)
  {
    sub_1B1E8FCE4(v2, (uint64_t)&v119, 0x200000000, &v130);
    sub_1B19F66A0((uint64_t)&v130, (uint64_t)&v131, (unint64_t *)&qword_1ED4B7DE0);
    if ((_QWORD)v131)
    {
      if (v138 > 0)
      {
        v70 = v135;
        if (v135)
        {
          v84 = v137[4];
          v87 = v137;
          v81 = *(_BYTE *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v113 = v131;
          v114 = v132;
          v115 = v133;
          v66 = (uint64_t)(v137 + 6);
          v68 = v134;
          v64 = v137 + 8;
          v102 = (float32x2_t)v109;
          v105 = *(float32x2_t *)v108.f32;
          v99 = (float32x2_t)v110;
          swift_retain();
          swift_retain();
          swift_retain();
          v26 = 0;
          v27 = 0;
          v63 = v5;
          v28 = v5;
          do
          {
            v76 = v27;
            v78 = v26;
            v29 = (unsigned int *)(v68 + 48 * v26);
            v74 = *v29;
            v72 = v29[1];
            v30 = (uint64_t *)*((_QWORD *)v29 + 2);
            v31 = *((_QWORD *)v29 + 3);
            v33 = *((_QWORD *)v29 + 4);
            v32 = *((_QWORD *)v29 + 5);
            if ((v81 & 1) != 0)
            {
              v34 = *(os_unfair_lock_s **)(v32 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v34);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v84);
            sub_1B19F66A0(v66, (uint64_t)v152, &qword_1ED4B7FB0);
            v35 = v87[4];
            v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v87[6] = ecs_stack_allocator_allocate(v35, 48 * v36, 8);
            v87[7] = v36;
            v64[1] = 0;
            v64[2] = 0;
            *v64 = 0;
            swift_release();
            v37 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v30, v31, v33, (uint64_t)v87);
            sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v30, v31, v33, (uint64_t)v87);
            if (v30)
            {
              v27 = v76;
              if (v33)
              {
                (*((void (**)(_OWORD *, double))&v126 + 1))(v125, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v102, *v37, 2), vadd_f32(v99, vmul_n_f32(v105, COERCE_FLOAT(*v37))))));
                __asm { BR              X8 }
              }
            }
            else
            {
              v27 = v76;
              if ((_DWORD)v74 != v72)
              {
                (*((void (**)(_OWORD *, double))&v126 + 1))(v125, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v102, v37[v74], 2), vadd_f32(v99, vmul_n_f32(v105, COERCE_FLOAT(*(_OWORD *)&v37[v74]))))));
                __asm { BR              X8 }
              }
            }
            sub_1B1F05D48(v87, (unsigned __int16 **)&v113, (uint64_t)v152);
            sub_1B1F03804((char *)v32);
            ecs_stack_allocator_pop_snapshot(v84);
            if ((v81 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
            }
            swift_release();
            v26 = v78 + 1;
          }
          while (v78 + 1 != v70);
LABEL_60:
          swift_release();
          sub_1B1A08614(v128[0].i64);
          goto LABEL_61;
        }
      }
      goto LABEL_57;
    }
LABEL_58:
    swift_release();
LABEL_6:
    sub_1B1A08614(v128[0].i64);
    return (uint64_t *)swift_release();
  }
  sub_1B1E8FCE4(v2, (uint64_t)&v119, 0x200000000, &v130);
  sub_1B19F66A0((uint64_t)&v130, (uint64_t)&v131, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v131)
    goto LABEL_58;
  if (v138 > 0)
  {
    v73 = v135;
    if (v135)
    {
      v89 = v137[4];
      v91 = v137;
      v86 = *(_BYTE *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v113 = v131;
      v114 = v132;
      v115 = v133;
      v69 = (uint64_t)(v137 + 6);
      v71 = v134;
      v67 = v137 + 8;
      v104 = (float32x2_t)v109;
      v107 = *(float32x2_t *)v108.f32;
      v101 = (float32x2_t)v110;
      swift_retain();
      swift_retain();
      swift_retain();
      v51 = 0;
      v52 = 0;
      v53 = v5;
      v65 = v5;
      do
      {
        v54 = (unsigned int *)(v71 + 48 * v51);
        v77 = *v54;
        v80 = v52;
        v75 = v54[1];
        v56 = (uint64_t *)*((_QWORD *)v54 + 2);
        v55 = *((_QWORD *)v54 + 3);
        v57 = *((_QWORD *)v54 + 4);
        v58 = *((_QWORD *)v54 + 5);
        v83 = v51;
        if ((v86 & 1) != 0)
        {
          v59 = *(os_unfair_lock_s **)(v58 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v59);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v58 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v89);
        sub_1B19F66A0(v69, (uint64_t)v152, &qword_1ED4B7FB0);
        v60 = v91[4];
        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v91[6] = ecs_stack_allocator_allocate(v60, 48 * v61, 8);
        v91[7] = v61;
        v67[1] = 0;
        v67[2] = 0;
        *v67 = 0;
        swift_release();
        v62 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v56, v55, v57, (uint64_t)v91);
        sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v56, v55, v57, (uint64_t)v91);
        if (v56)
        {
          if (v57)
          {
            (*((void (**)(_OWORD *, double))&v126 + 1))(v125, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v104, *v62, 2), vadd_f32(v101, vmul_n_f32(v107, COERCE_FLOAT(*v62))))));
            __asm { BR              X8 }
          }
        }
        else if ((_DWORD)v77 != v75)
        {
          (*((void (**)(_OWORD *, double))&v126 + 1))(v125, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v104, v62[v77], 2), vadd_f32(v101, vmul_n_f32(v107, COERCE_FLOAT(*(_OWORD *)&v62[v77]))))));
          __asm { BR              X8 }
        }
        v52 = v80;
        sub_1B1F05D48(v91, (unsigned __int16 **)&v113, (uint64_t)v152);
        sub_1B1F03804((char *)v58);
        ecs_stack_allocator_pop_snapshot(v89);
        if ((v86 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v58 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v58 + 376));
        }
        swift_release();
        ++v51;
      }
      while (v83 + 1 != v73);
      goto LABEL_60;
    }
  }
LABEL_57:
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  sub_1B1A08614(v128[0].i64);
LABEL_61:
  swift_release();
  sub_1B19ED748(&v130);
  return sub_1B19ED748(&v130);
}

__n128 initializeWithCopy for ParticleSizeOverTexture(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleSizeOverTexture(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 68))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleSizeOverTexture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 68) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 68) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeOverTexture()
{
  return &type metadata for ParticleSizeOverTexture;
}

uint64_t sub_1B1BA00AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  sub_1B19F8E54(0, &qword_1EEF5B990, (uint64_t (*)(void))sub_1B1BA0544, (uint64_t)&type metadata for ParticleSizeOverTexture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BA0544();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v28 = 0;
  sub_1B1A08878();
  sub_1B2229814();
  v10 = v29;
  v28 = 1;
  sub_1B1A70E8C();
  sub_1B2229814();
  v11 = v29;
  v28 = 2;
  sub_1B1A71D2C();
  sub_1B2229814();
  v26 = v11;
  v12 = v29;
  v28 = 3;
  sub_1B1BA0588();
  sub_1B2229814();
  v25 = v12;
  v13 = v29;
  v14 = HIDWORD(v29);
  v28 = 4;
  sub_1B1A71ABC();
  sub_1B2229814();
  v23 = v13;
  v24 = v29;
  sub_1B1B4D924();
  v28 = 5;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v15 = v29;
  v28 = 6;
  sub_1B2229814();
  v16 = v29;
  v28 = 7;
  sub_1B2229814();
  v17 = v29;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v28 = 8;
  sub_1B1B7283C((unint64_t *)&qword_1ED4B72F0, MEMORY[0x1E0DEDD40]);
  sub_1B2229814();
  v18 = v29;
  v28 = 9;
  sub_1B2229814();
  v19 = v29;
  LOBYTE(v29) = 10;
  sub_1B22297F0();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v27);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 9) = v25;
  *(_BYTE *)(a2 + 12) = v23;
  *(_DWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 20) = v24;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v19;
  *(_DWORD *)(a2 + 64) = v21;
  return result;
}

unint64_t sub_1B1BA0544()
{
  unint64_t result;

  result = qword_1EEF5B998;
  if (!qword_1EEF5B998)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227DA5C, &type metadata for ParticleSizeOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B998);
  }
  return result;
}

unint64_t sub_1B1BA0588()
{
  unint64_t result;

  result = qword_1ED4B7C70[0];
  if (!qword_1ED4B7C70[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229FFF0, &type metadata for Composition);
    atomic_store(result, qword_1ED4B7C70);
  }
  return result;
}

unint64_t sub_1B1BA05CC()
{
  unint64_t result;

  result = qword_1EEF5B9A8;
  if (!qword_1EEF5B9A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229FFC8, &type metadata for Composition);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleSizeOverTexture.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B1BA065C + 4 * byte_1B227D886[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B1BA0690 + 4 * byte_1B227D881[v4]))();
}

uint64_t sub_1B1BA0690(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BA0698(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BA06A0);
  return result;
}

uint64_t sub_1B1BA06AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BA06B4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B1BA06B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BA06C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeOverTexture.CodingKeys()
{
  return &type metadata for ParticleSizeOverTexture.CodingKeys;
}

unint64_t sub_1B1BA06E0()
{
  unint64_t result;

  result = qword_1EEF5B9B0;
  if (!qword_1EEF5B9B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227DA34, &type metadata for ParticleSizeOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9B0);
  }
  return result;
}

unint64_t sub_1B1BA0728()
{
  unint64_t result;

  result = qword_1EEF5B9B8;
  if (!qword_1EEF5B9B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D9A4, &type metadata for ParticleSizeOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9B8);
  }
  return result;
}

unint64_t sub_1B1BA0770()
{
  unint64_t result;

  result = qword_1EEF5B9C0;
  if (!qword_1EEF5B9C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D9CC, &type metadata for ParticleSizeOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9C0);
  }
  return result;
}

uint64_t sub_1B1BA07B4()
{
  uint64_t result;
  BOOL v1;
  char v2;
  size_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v3 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v4, &v3, 0, 0);
  if ((_DWORD)result)
    v1 = 1;
  else
    v1 = v4 == 0;
  v2 = v1;
  byte_1ED4D097C = v2;
  return result;
}

uint64_t sub_1B1BA0838()
{
  sub_1B1BA8384();
  return sub_1B2228A7C();
}

uint64_t sub_1B1BA0894()
{
  sub_1B1BA8384();
  return sub_1B2228A04();
}

void sub_1B1BA08E0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E636F278;
}

float32x2_t sub_1B1BA08F0(uint64_t a1, uint64_t a2)
{
  double (*v4)(void);
  float64x2_t v5;
  float64_t v6;
  double v8;

  v4 = *(double (**)(void))(a2 + 72);
  v8 = v4();
  ((void (*)(uint64_t, uint64_t))v4)(a1, a2);
  v5.f64[0] = v8;
  v5.f64[1] = v6;
  return vcvt_f32_f64(v5);
}

uint64_t sub_1B1BA0944(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  uint64_t result;
  double v6;

  v4 = *(uint64_t (**)(void))(a2 + 72);
  result = v4();
  if (v6 > 0.0)
  {
    ((void (*)(uint64_t, uint64_t, float))v4)(a1, a2, 1.0);
    return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
  }
  return result;
}

uint64_t sub_1B1BA09AC(char a1, uint64_t a2, uint64_t a3)
{
  int v6;
  double (*v7)(uint64_t, uint64_t);
  double v8;
  double v9;
  double v10;
  float v11;
  uint64_t result;
  double (*v13)(uint64_t, uint64_t);
  double v14;
  double v15;
  double v16;
  float v17;

  v6 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 136))(a2, a3);
  switch(v6)
  {
    case 0:
      return a1 & 1;
    case 1:
      v7 = *(double (**)(uint64_t, uint64_t))(a3 + 72);
      v7(a2, a3);
      if (v8 <= 0.0)
      {
        return 1;
      }
      else
      {
        v9 = v7(a2, a3);
        v7(a2, a3);
        v11 = v9 / v10;
        return v11 >= 1.0;
      }
    case 2:
      v13 = *(double (**)(uint64_t, uint64_t))(a3 + 72);
      v13(a2, a3);
      if (v14 <= 0.0)
      {
        return 0;
      }
      else
      {
        v15 = v13(a2, a3);
        v13(a2, a3);
        v17 = v15 / v16;
        return v17 < 1.0;
      }
    default:
      result = sub_1B2229F70();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B1BA0AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 24) = 0xFFFFFFFFLL;
  *(_QWORD *)(v1 + 32) = 2;
  *(double *)(v1 + 40) = nullsub_16(a1);
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  *(_QWORD *)(v1 + 64) = v5;
  *(_DWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 76) = 2;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_WORD *)(v1 + 89) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_BYTE *)(v1 + 144) = 1;
  *(_QWORD *)(v1 + 152) = -1;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)(v1 + 160) = _Q0;
  *(_BYTE *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

id sub_1B1BA0B74(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v5[6];

  v5[4] = sub_1B1BA6520;
  v5[5] = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = sub_1B1BA0C14;
  v5[3] = &unk_1E63E96B8;
  v3 = _Block_copy(v5);
  swift_release();
  objc_msgSend(a2, sel_addPresentedHandler_, v3);
  _Block_release(v3);
  prof_commit();
  return objc_msgSend(a2, sel_present);
}

uint64_t sub_1B1BA0C18(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1BA0C60()
{
  uint64_t v0;

  sub_1B19E5A18(*(_QWORD *)(v0 + 96));
  sub_1B19E5A18(*(_QWORD *)(v0 + 112));
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

id sub_1B1BA0CA0()
{
  uint64_t v0;
  double v1;
  double v2;
  void *v3;
  id result;
  double v5;
  double v6;

  v1 = *(double *)(v0 + 160);
  v2 = *(double *)(v0 + 168);
  v3 = *(void **)(v0 + 16);
  result = objc_msgSend(v3, sel_drawableSize);
  if (v1 != v6 || v2 != v5)
    return objc_msgSend(v3, sel_setDrawableSize_, *(double *)(v0 + 160), *(double *)(v0 + 168));
  return result;
}

uint64_t sub_1B1BA0D04()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t sub_1B1BA0D0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

double (*sub_1B1BA0D14())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1BA0D24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

id sub_1B1BA0D2C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_drawableSize);
}

uint64_t sub_1B1BA0D3C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t sub_1B1BA0D44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t sub_1B1BA0D50()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t sub_1B1BA0D58()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t sub_1B1BA0D60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 32) = 2;
  *(double *)(v2 + 40) = nullsub_16(a1);
  *(_QWORD *)(v2 + 48) = v5;
  *(_QWORD *)(v2 + 56) = v6;
  *(_QWORD *)(v2 + 64) = v7;
  *(_DWORD *)(v2 + 72) = 0;
  *(_BYTE *)(v2 + 76) = 2;
  *(_QWORD *)(v2 + 80) = 0xFFFFFFFFLL;
  *(_BYTE *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)(v2 + 128) = -1;
  *(_BYTE *)(v2 + 136) = 1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_1B1BA0DE0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B19E5A18(*(_QWORD *)(v0 + 96));
  sub_1B19E5A18(*(_QWORD *)(v0 + 112));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BA0E1C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1BA0E24()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1BA0E2C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

double (*sub_1B1BA0E34())(_QWORD)
{
  return nullsub_16;
}

double sub_1B1BA0E44()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, sel_width);
  objc_msgSend(v1, sel_height);
  return (double)(uint64_t)v2;
}

id sub_1B1BA0E8C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_pixelFormat);
}

uint64_t sub_1B1BA0E9C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

double sub_1B1BA0EA4()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t sub_1B1BA0EB0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 136);
}

unint64_t sub_1B1BA0EB8()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 72) | ((unint64_t)*(unsigned __int8 *)(v0 + 76) << 32);
}

uint64_t sub_1B1BA0EC8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t sub_1B1BA0ED0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  sub_1B19F8C48(v1);
  return v1;
}

uint64_t sub_1B1BA0F00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  sub_1B19F8C48(v1);
  return v1;
}

uint64_t sub_1B1BA0F30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v5 + 16) = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)(v5 + 24) = _Q0;
  *(_QWORD *)(v5 + 56) = 0x3FF0000000000000;
  *(_DWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 68) = 2;
  *(_OWORD *)(v5 + 72) = xmmword_1B227DAB0;
  *(double *)(v5 + 88) = nullsub_16(a1);
  *(_QWORD *)(v5 + 96) = v16;
  *(_QWORD *)(v5 + 104) = v17;
  *(_QWORD *)(v5 + 112) = v18;
  *(_WORD *)(v5 + 121) = 0;
  if ((a3 & 1) != 0)
    v19 = 0;
  else
    v19 = a2;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = v19;
  *(_BYTE *)(v5 + 120) = a5;
  *(_QWORD *)(v5 + 128) = a4;
  *(_QWORD *)(v5 + 136) = 0;
  return v5;
}

uint64_t sub_1B1BA0FD4()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

double (*sub_1B1BA0FF8())(_QWORD)
{
  return nullsub_16;
}

double sub_1B1BA1008()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1B1BA1010()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

double sub_1B1BA1018()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t sub_1B1BA1024()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1BA102C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t sub_1B1BA1034()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 121);
}

unint64_t sub_1B1BA103C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
}

uint64_t sub_1B1BA104C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 122);
}

uint64_t sub_1B1BA1054()
{
  return 0;
}

uint64_t PixelFormatDepth.description.getter(char a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      return 0x7469622038;
    case 2:
      return 0x746962203031;
    case 1:
      return 0x746962203631;
  }
  result = sub_1B2229F70();
  __break(1u);
  return result;
}

uint64_t sub_1B1BA10E8()
{
  _BYTE *v0;
  int v1;
  uint64_t result;

  v1 = *v0;
  if (!*v0)
    return 0x7469622038;
  if (v1 == 2)
    return 0x746962203031;
  if (v1 == 1)
    return 0x746962203631;
  result = sub_1B2229F70();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CAMetalLayerRenderOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MTLTextureRenderOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MockRenderOutput()
{
  return objc_opt_self();
}

void sub_1B1BA11D0(void *a1)
{
  uint64_t v1;
  void *v3;
  _QWORD v4[6];

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 352));
  if (sub_1B1B0F738((uint64_t)a1, *(_QWORD *)(v1 + 360)))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 352));
  }
  else
  {
    swift_unknownObjectRetain();
    sub_1B1B8BEF0(v4, (uint64_t)a1);
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 352));
    v4[4] = sub_1B1BA8014;
    v4[5] = v1;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 1107296256;
    v4[2] = sub_1B1BA0C14;
    v4[3] = &unk_1E63D2AC8;
    v3 = _Block_copy(v4);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_addScheduledHandler_, v3);
    _Block_release(v3);
  }
}

void sub_1B1BA12CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a2 + 352));
  v3 = swift_unknownObjectRetain();
  sub_1B1BA5B0C(v3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a2 + 352));
}

void sub_1B1BA1324()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 352));
  v2 = *(os_unfair_lock_s **)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  v3 = 0;
  v4 = v1 + 56;
  v5 = 1 << *(_BYTE *)(v1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (v3 + 1 >= v8)
      goto LABEL_19;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    if (!v12)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_19;
      v12 = *(_QWORD *)(v4 + 8 * v11);
      if (!v12)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v8)
          goto LABEL_19;
        v12 = *(_QWORD *)(v4 + 8 * v11);
        if (!v12)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v8)
            goto LABEL_19;
          v12 = *(_QWORD *)(v4 + 8 * v11);
          if (!v12)
            break;
        }
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v3 = v11;
LABEL_5:
    objc_msgSend(*(id *)(*(_QWORD *)(v1 + 48) + 8 * v10), sel_waitUntilScheduled);
  }
  while (v8 - 5 != v3)
  {
    v12 = *(_QWORD *)(v1 + 96 + 8 * v3++);
    if (v12)
    {
      v11 = v3 + 4;
      goto LABEL_18;
    }
  }
LABEL_19:
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 352));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 352));
}

void *sub_1B1BA147C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;

  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v10 = (id)sub_1B1E599C0();
  if (!v10)
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B50]), sel_init);
  v11 = v10;
  sub_1B1F9B468();
  v12 = objc_msgSend(v11, sel_colorAttachments);
  v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  v15 = nullsub_16(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  objc_msgSend(v13, sel_setTexture_, a1);
  objc_msgSend(v13, sel_setLoadAction_, a2);
  objc_msgSend(v13, sel_setStoreAction_, 1);
  objc_msgSend(v13, sel_setClearColor_, v15, v17, v19, v21);
  objc_msgSend(v13, sel_setLevel_, a6);

  if (a3)
  {
    swift_unknownObjectRetain();
    v22 = objc_msgSend(v11, sel_depthAttachment);
    swift_unknownObjectRetain();
    objc_msgSend(v22, sel_setTexture_, a3);
    objc_msgSend(v22, sel_setLoadAction_, a4);
    objc_msgSend(v22, sel_setStoreAction_, a5);
    objc_msgSend(v22, sel_setClearDepth_, 0.0);
    objc_msgSend(v22, sel_setLevel_, a6);

    swift_unknownObjectRelease();
    sub_1B1F9B834();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }
  else
  {
    swift_unknownObjectRelease();
  }
  return v11;
}

uint64_t sub_1B1BA16BC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _BYTE v10[160];
  uint64_t v11[20];

  v3 = v2;
  sub_1B1BA802C(v3 + 624, (uint64_t)v10);
  sub_1B1BA802C((uint64_t)v10, (uint64_t)v11);
  if (sub_1B1B3C438(v11) == 1)
    return 0;
  if (*(_BYTE *)(v3 + 776) == 1)
  {
    v6 = *(_QWORD *)(v3 + 768);
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 632);
    ObjectType = swift_getObjectType();
    v6 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, double))(v7 + 8))(*(_QWORD *)(v3 + 648), a1, a2 & 1, ObjectType, v7, *(double *)(v3 + 640));
    swift_unknownObjectRelease();
    *(_QWORD *)(v3 + 768) = v6;
    *(_BYTE *)(v3 + 776) = 1;
  }
  swift_unknownObjectRetain();
  return v6;
}

double sub_1B1BA1794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  _QWORD *v6;
  int64_t v7;
  int64_t v8;
  int isUniquelyReferenced_nonNull_native;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  v2 = *(unsigned __int8 *)(v0 + 537);
  *(_OWORD *)(v1 + 16) = xmmword_1B226E100;
  *(_OWORD *)(v1 + 32) = xmmword_1B227DAC0;
  *(_BYTE *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 64) = v2;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 13;
  v3 = *(unsigned __int8 *)(v0 + 600);
  *(_OWORD *)(v1 + 144) = xmmword_1B227DAD0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 176) = v3;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_QWORD *)(v1 + 232) = 0;
  *(_BYTE *)(v1 + 240) = 13;
  v4 = *(unsigned __int8 *)(v0 + 538);
  *(_OWORD *)(v1 + 256) = xmmword_1B227DAE0;
  *(_BYTE *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 288) = v4;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_QWORD *)(v1 + 344) = 0;
  *(_BYTE *)(v1 + 352) = 13;
  *(_QWORD *)(v0 + 512) = v1;
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 537) == 1)
  {
    v6 = *(_QWORD **)(v0 + 512);
    v7 = v6[2];
    v8 = v7 + 5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v0 + 512) = v6;
    if (!isUniquelyReferenced_nonNull_native || v8 > v6[3] >> 1)
    {
      if (v7 <= v8)
        v10 = v7 + 5;
      else
        v10 = v7;
      v6 = sub_1B1C64EC0(isUniquelyReferenced_nonNull_native, v10, 1, v6);
    }
    *(_QWORD *)(v0 + 512) = v6;
    v12 = v6[2];
    v11 = v6[3];
    if (v12 >= v11 >> 1)
    {
      v6 = sub_1B1C64EC0(v11 > 1, v12 + 1, 1, v6);
      *(_QWORD *)(v0 + 512) = v6;
    }
    v6[2] = v12 + 1;
    v13 = &v6[14 * v12];
    *((_OWORD *)v13 + 2) = xmmword_1B227DAF0;
    *((_BYTE *)v13 + 48) = 0;
    v13[8] = 1;
    v14 = 0uLL;
    *(_OWORD *)(v13 + 9) = 0u;
    *(_OWORD *)(v13 + 11) = 0u;
    *(_OWORD *)(v13 + 13) = 0u;
    v13[15] = 0;
    *((_BYTE *)v13 + 128) = 13;
    v15 = *(_QWORD **)(v0 + 512);
    v17 = v15[2];
    v16 = v15[3];
    if (v17 >= v16 >> 1)
    {
      v32 = sub_1B1C64EC0(v16 > 1, v17 + 1, 1, v15);
      v14 = 0uLL;
      v15 = v32;
      *(_QWORD *)(v0 + 512) = v32;
    }
    v15[2] = v17 + 1;
    v18 = &v15[14 * v17];
    *((_OWORD *)v18 + 2) = xmmword_1B227DB00;
    *((_BYTE *)v18 + 48) = 0;
    v18[8] = 1;
    *(_OWORD *)(v18 + 9) = v14;
    *(_OWORD *)(v18 + 11) = v14;
    *(_OWORD *)(v18 + 13) = v14;
    v18[15] = 0;
    *((_BYTE *)v18 + 128) = 13;
    v19 = *(_QWORD **)(v0 + 512);
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
    {
      v19 = sub_1B1C64EC0(v20 > 1, v21 + 1, 1, v19);
      *(_QWORD *)(v0 + 512) = v19;
    }
    v19[2] = v21 + 1;
    v22 = &v19[14 * v21];
    *((_OWORD *)v22 + 2) = xmmword_1B227DB10;
    *((_BYTE *)v22 + 48) = 0;
    v22[8] = 1;
    v23 = 0uLL;
    *(_OWORD *)(v22 + 9) = 0u;
    *(_OWORD *)(v22 + 11) = 0u;
    *(_OWORD *)(v22 + 13) = 0u;
    v22[15] = 0;
    *((_BYTE *)v22 + 128) = 13;
    v24 = *(_QWORD **)(v0 + 512);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
    {
      v33 = sub_1B1C64EC0(v25 > 1, v26 + 1, 1, v24);
      v23 = 0uLL;
      v24 = v33;
      *(_QWORD *)(v0 + 512) = v33;
    }
    v24[2] = v26 + 1;
    v27 = &v24[14 * v26];
    *((_OWORD *)v27 + 2) = xmmword_1B227DB20;
    *((_BYTE *)v27 + 48) = 0;
    v27[8] = 1;
    *(_OWORD *)(v27 + 9) = v23;
    *(_OWORD *)(v27 + 11) = v23;
    *(_OWORD *)(v27 + 13) = v23;
    v27[15] = 0;
    *((_BYTE *)v27 + 128) = 13;
    v28 = *(_QWORD **)(v0 + 512);
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
    {
      v28 = sub_1B1C64EC0(v29 > 1, v30 + 1, 1, v28);
      *(_QWORD *)(v0 + 512) = v28;
    }
    v28[2] = v30 + 1;
    v31 = &v28[14 * v30];
    *((_OWORD *)v31 + 2) = xmmword_1B227DB30;
    *((_BYTE *)v31 + 48) = 0;
    v31[8] = 1;
    result = 0.0;
    *(_OWORD *)(v31 + 9) = 0u;
    *(_OWORD *)(v31 + 11) = 0u;
    *(_OWORD *)(v31 + 13) = 0u;
    v31[15] = 0;
    *((_BYTE *)v31 + 128) = 14;
  }
  return result;
}

uint64_t sub_1B1BA1B14(uint64_t a1)
{
  return sub_1B1BA2814(a1, (uint64_t)&unk_1E63C2618);
}

uint64_t sub_1B1BA1B3C(uint64_t a1)
{
  char v2;
  uint64_t v3;
  int v4;
  id v5;
  id v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t result;
  id v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  RGTextureDescriptorMakeDefault((uint64_t)&v18);
  v2 = BYTE10(v18);
  v15 = v21;
  v3 = v22;
  v4 = v23;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  *(_QWORD *)&v18 = 0x1000100010001;
  WORD4(v18) = 257;
  BYTE10(v18) = v2;
  v19 = xmmword_1B227DB40;
  v20 = xmmword_1B2244C80;
  v21 = v15;
  v22 = v3;
  v23 = v4;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v18, v5);
  v6 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, v5);
  if (v6)
  {
    v7 = v6;
    sub_1B1F326B0((uint64_t)v6);
    swift_getObjectType();
    objc_msgSend(v7, sel_setLabel_, 0);

    v17 = 31743;
    sub_1B1BA59CC((uint64_t)objc_msgSend(v7, sel_width), (uint64_t)objc_msgSend(v7, sel_height), &v18);
    v14 = v19;
    v16 = v18;
    v8 = v20;
    v9 = sub_1B1F9A54C();
    v18 = v16;
    v19 = v14;
    v20 = v8;
    objc_msgSend(v7, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v18, 0, &v17, v9);
    return (uint64_t)v7;
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v18 = 0xD000000000000023;
    *((_QWORD *)&v18 + 1) = 0x80000001B2331BE0;
    v11 = objc_msgSend(v5, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v12 = v18;
    v13 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v18 = 0;
    swift_retain();
    sub_1B1F1AD70(v13, (uint64_t *)&v18, v12, *((uint64_t *)&v12 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA1E3C(uint64_t a1)
{
  return sub_1B1BA2814(a1, (uint64_t)&unk_1E63C2648);
}

uint64_t sub_1B1BA1E64(uint64_t a1)
{
  return sub_1B1BA24E0(a1, (uint64_t)&unk_1E63C2790);
}

uint64_t sub_1B1BA1E84(uint64_t a1)
{
  char v2;
  uint64_t v3;
  int v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  RGTextureDescriptorMakeDefault((uint64_t)&v18);
  v2 = BYTE10(v18);
  v16 = v22;
  v3 = v23;
  v4 = v24;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  *(_QWORD *)&v18 = 0x1000100010001;
  WORD4(v18) = 257;
  BYTE10(v18) = v2;
  v19 = 0x46uLL;
  v20 = 0;
  v21 = 1;
  v22 = v16;
  v23 = v3;
  v24 = v4;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v18, v5);
  v6 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, v5);
  if (v6)
  {
    v7 = v6;
    sub_1B1F326B0((uint64_t)v6);
    swift_getObjectType();
    objc_msgSend(v7, sel_setLabel_, 0);

    sub_1B1BA801C((uint64_t)objc_msgSend(v7, sel_width), (uint64_t)objc_msgSend(v7, sel_height), (uint64_t)objc_msgSend(v7, sel_depth), &v18);
    v15 = v19;
    v17 = v18;
    v8 = v20;
    v9 = v21;
    v10 = sub_1B1F9A54C();
    v18 = v17;
    v19 = v15;
    v20 = v8;
    v21 = v9;
    objc_msgSend(v7, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v18, 0, &unk_1E63C2708, v10);
    return (uint64_t)v7;
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v18 = 0xD000000000000023;
    *((_QWORD *)&v18 + 1) = 0x80000001B2331BE0;
    v12 = objc_msgSend(v5, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v13 = v18;
    v14 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v18 = 0;
    swift_retain();
    sub_1B1F1AD70(v14, (uint64_t *)&v18, v13, *((uint64_t *)&v13 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA218C(uint64_t a1)
{
  return sub_1B1BA2814(a1, (uint64_t)&unk_1E63C2730);
}

uint64_t sub_1B1BA21B4(uint64_t a1)
{
  char v2;
  uint64_t v3;
  int v4;
  id v5;
  id v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t result;
  id v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  RGTextureDescriptorMakeDefault((uint64_t)&v17);
  v2 = BYTE10(v17);
  v15 = v20;
  v3 = v21;
  v4 = v22;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  *(_QWORD *)&v17 = 0x1000100010001;
  WORD4(v17) = 257;
  BYTE10(v17) = v2;
  v18 = xmmword_1B227DB50;
  v19 = xmmword_1B2244C80;
  v20 = v15;
  v21 = v3;
  v22 = v4;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v17, v5);
  v6 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, v5);
  if (v6)
  {
    v7 = v6;
    sub_1B1F326B0((uint64_t)v6);
    swift_getObjectType();
    objc_msgSend(v7, sel_setLabel_, 0);

    sub_1B1BA801C((uint64_t)objc_msgSend(v7, sel_width), (uint64_t)objc_msgSend(v7, sel_height), (uint64_t)objc_msgSend(v7, sel_depth), &v17);
    v14 = v18;
    v16 = v17;
    v8 = v19;
    v9 = sub_1B1F9A54C();
    v17 = v16;
    v18 = v14;
    v19 = v8;
    objc_msgSend(v7, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v17, 0, &unk_1E63C2760, v9);
    return (uint64_t)v7;
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v17 = 0;
    *((_QWORD *)&v17 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v17 = 0xD000000000000023;
    *((_QWORD *)&v17 + 1) = 0x80000001B2331BE0;
    v11 = objc_msgSend(v5, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v12 = v17;
    v13 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v17 = 0;
    swift_retain();
    sub_1B1F1AD70(v13, (uint64_t *)&v17, v12, *((uint64_t *)&v12 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA24C0(uint64_t a1)
{
  return sub_1B1BA24E0(a1, (uint64_t)&unk_1E63C27F8);
}

uint64_t sub_1B1BA24E0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  id v7;
  id v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  RGTextureDescriptorMakeDefault((uint64_t)&v19);
  v4 = BYTE10(v19);
  v17 = v22;
  v5 = v23;
  v6 = v24;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  *(_QWORD *)&v19 = 0x1000100010001;
  WORD4(v19) = 257;
  BYTE10(v19) = v4;
  v20 = xmmword_1B227DB60;
  v21 = xmmword_1B2244C80;
  v22 = v17;
  v23 = v5;
  v24 = v6;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v19, v7);
  v8 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, v7);
  if (v8)
  {
    v9 = v8;
    sub_1B1F326B0((uint64_t)v8);
    swift_getObjectType();
    objc_msgSend(v9, sel_setLabel_, 0);

    sub_1B1BA801C((uint64_t)objc_msgSend(v9, sel_width), (uint64_t)objc_msgSend(v9, sel_height), (uint64_t)objc_msgSend(v9, sel_depth), &v19);
    v16 = v20;
    v18 = v19;
    v10 = v21;
    v11 = sub_1B1F9A54C();
    v19 = v18;
    v20 = v16;
    v21 = v10;
    objc_msgSend(v9, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v19, 0, a2, v11);
    return (uint64_t)v9;
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v19 = 0;
    *((_QWORD *)&v19 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v19 = 0xD000000000000023;
    *((_QWORD *)&v19 + 1) = 0x80000001B2331BE0;
    v13 = objc_msgSend(v7, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v14 = v19;
    v15 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v19 = 0;
    swift_retain();
    sub_1B1F1AD70(v15, (uint64_t *)&v19, v14, *((uint64_t *)&v14 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA27EC(uint64_t a1)
{
  return sub_1B1BA2814(a1, (uint64_t)&unk_1E63C27C0);
}

uint64_t sub_1B1BA2814(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  id v7;
  id v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  RGTextureDescriptorMakeDefault((uint64_t)&v19);
  v4 = BYTE10(v19);
  v17 = v22;
  v5 = v23;
  v6 = v24;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  *(_QWORD *)&v19 = 0x1000100010001;
  WORD4(v19) = 257;
  BYTE10(v19) = v4;
  v20 = xmmword_1B227DB70;
  v21 = xmmword_1B2244C80;
  v22 = v17;
  v23 = v5;
  v24 = v6;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v19, v7);
  v8 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, v7);
  if (v8)
  {
    v9 = v8;
    sub_1B1F326B0((uint64_t)v8);
    swift_getObjectType();
    objc_msgSend(v9, sel_setLabel_, 0);

    sub_1B1BA59CC((uint64_t)objc_msgSend(v9, sel_width), (uint64_t)objc_msgSend(v9, sel_height), &v19);
    v16 = v20;
    v18 = v19;
    v10 = v21;
    v11 = sub_1B1F9A54C();
    v19 = v18;
    v20 = v16;
    v21 = v10;
    objc_msgSend(v9, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v19, 0, a2, v11);
    return (uint64_t)v9;
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v19 = 0;
    *((_QWORD *)&v19 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v19 = 0xD000000000000023;
    *((_QWORD *)&v19 + 1) = 0x80000001B2331BE0;
    v13 = objc_msgSend(v7, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v14 = v19;
    v15 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v19 = 0;
    swift_retain();
    sub_1B1F1AD70(v15, (uint64_t *)&v19, v14, *((uint64_t *)&v14 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void *sub_1B1BA2B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v11[2];

  if (a1 < 1)
    return 0;
  v5 = *(void **)(v2 + 16);
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(v5, sel_newBufferWithLength_options_, a1, a2);
  if (!v6)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v11[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for MTLResourceOptions(0);
    sub_1B22295EC();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, v11, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v7 = v6;
  v8 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setLabel_, v8);

  return v7;
}

BOOL sub_1B1BA2D84(_QWORD *a1, uint64_t a2)
{
  return *a1 == a2;
}

void sub_1B1BA2D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = v4;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 176));
  v11 = *(_QWORD *)(v4 + 216);
  v9 = (_QWORD *)(v4 + 216);
  v10 = (_QWORD *)v11;
  v12 = sub_1B1E51FF0(v11, a1);
  if ((v13 & 1) != 0)
  {
    if (a3)
    {
      swift_unknownObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v9 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v10 = sub_1B1C663BC(0, v10[2] + 1, 1, v10);
        *v9 = v10;
      }
      v19 = v10[2];
      v18 = v10[3];
      if (v19 >= v18 >> 1)
      {
        v10 = sub_1B1C663BC(v18 > 1, v19 + 1, 1, v10);
        *v9 = v10;
      }
      v10[2] = v19 + 1;
      v20 = &v10[2 * v19];
      v20[4] = a3;
      v20[5] = a4;
    }
  }
  else
  {
    v14 = v12;
    if (a3)
    {
      swift_unknownObjectRetain_n();
      v15 = swift_isUniquelyReferenced_nonNull_native();
      *v9 = v10;
      if ((v15 & 1) == 0)
      {
        v10 = sub_1B1FFEE70(v10);
        *v9 = v10;
      }
      v16 = &v10[2 * v14];
      v16[4] = a3;
      v16[5] = a4;
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1B1DBA1B4(v12);
    }
    swift_unknownObjectRelease();
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 176));
}

void sub_1B1BA2EEC(void *a1)
{
  uint64_t Strong;
  uint64_t *v3;
  unsigned int v4;
  double v5;
  double v6;
  double v7;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = (uint64_t *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_counters);
    v4 = *(_DWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_counters + 20);
    objc_msgSend(a1, sel_GPUEndTime);
    v6 = v5;
    objc_msgSend(a1, sel_GPUStartTime);
    if (*v3)
      vfx_counters_update(*v3, v4, v6 - v7);
    swift_release();
  }
  objc_msgSend(a1, sel_kernelStartTime);
  objc_msgSend(a1, sel_kernelEndTime);
  objc_msgSend(a1, sel_GPUStartTime);
  objc_msgSend(a1, sel_GPUEndTime);
  prof_commit();
}

void sub_1B1BA2FBC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;

  if (!*(_QWORD *)(v0 + 376))
    goto LABEL_10;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    if (!**(_QWORD **)(v0 + 496))
      goto LABEL_8;
    objc_msgSend((id)swift_unknownObjectRetain(), sel_endEncoding);
    **(_QWORD **)(v0 + 496) = 0;
    swift_unknownObjectRelease();
  }
  else
  {
    if (!swift_dynamicCastObjCProtocolConditional())
      goto LABEL_8;
    **(_QWORD **)(v0 + 496) = 0;
  }
  swift_unknownObjectRelease();
LABEL_8:
  v1 = *(void **)(v0 + 376);
  if (v1)
  {
    objc_msgSend(v1, sel_endEncoding);
    *(_QWORD *)(v0 + 376) = 0;
    swift_unknownObjectRelease();
  }
LABEL_10:
  v2 = *(void **)(v0 + 392);
  if (v2)
  {
    v3 = v2;
    MEMORY[0x1B5E2064C](v3, v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 400) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 400) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();

    v5 = *(void **)(v0 + 392);
    *(_QWORD *)(v0 + 392) = 0;

  }
}

uint64_t sub_1B1BA3100(void *a1, void *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  objc_super v45;
  _OWORD v46[11];

  v4 = v3;
  *(_BYTE *)(v3 + 32) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  v8 = (_DWORD *)swift_slowAlloc();
  *v8 = 0;
  *(_QWORD *)(v3 + 152) = "Renderer.renderOutputs";
  *(_QWORD *)(v3 + 160) = 22;
  *(_BYTE *)(v3 + 168) = 2;
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(_QWORD *)(v3 + 184) = "Renderer.uploadLock";
  *(_QWORD *)(v3 + 192) = 19;
  *(_BYTE *)(v3 + 200) = 2;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 208) = v9;
  *(_QWORD *)(v4 + 216) = v10;
  *(_QWORD *)(v4 + 224) = v10;
  *(_BYTE *)(v4 + 304) = 0;
  *(_DWORD *)(v4 + 320) = 0;
  *(_BYTE *)(v4 + 324) = 1;
  v11 = (_DWORD *)swift_slowAlloc();
  *v11 = 0;
  *(_QWORD *)(v4 + 328) = "unscheduledCommandBuffersLock";
  *(_QWORD *)(v4 + 336) = 29;
  *(_BYTE *)(v4 + 344) = 2;
  v12 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v4 + 352) = v11;
  *(_QWORD *)(v4 + 360) = v12;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_QWORD *)(v4 + 400) = v10;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_QWORD *)(v4 + 488) = 1;
  *(_QWORD *)(v4 + 512) = v10;
  *(_QWORD *)(v4 + 528) = dispatch_semaphore_create(3);
  sub_1B1BA8190(v46);
  sub_1B1BA802C((uint64_t)v46, v4 + 624);
  *(_QWORD *)(v4 + 784) = v10;
  v13 = (_QWORD *)sub_1B2228B0C();
  v13[2] = 3;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  *(_QWORD *)(v4 + 792) = v13;
  *(_QWORD *)(v4 + 824) = 0;
  *(_QWORD *)(v4 + 832) = 0;
  *(_QWORD *)(v4 + 816) = 0;
  *(_QWORD *)(v4 + 840) = sub_1B1B97E7C(v10);
  *(_QWORD *)(v4 + 848) = sub_1B1B97F80(v10);
  if (a1)
  {
    v14 = a1;
  }
  else
  {
    if (a2)
      v15 = objc_msgSend(a2, sel_device);
    else
      v15 = MTLCreateSystemDefaultDevice();
    v14 = v15;
  }
  *(_QWORD *)(v4 + 16) = v14;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v16 = (_QWORD *)swift_slowAlloc();
  *(_QWORD *)(v4 + 496) = v16;
  *(_QWORD *)(v4 + 504) = 1;
  *v16 = 0;
  v17 = objc_msgSend((id)swift_unknownObjectRetain(), sel_supportsVertexAmplificationCount_, 2);
  if (objc_msgSend(v14, sel_supportsFamily_, 5001))
    v17 |= 2uLL;
  if (objc_msgSend(v14, sel_supportsMeshShaders))
    v18 = v17 | 4;
  else
    v18 = v17;
  v19 = objc_msgSend(v14, sel_supportsDepthClipMode);
  swift_unknownObjectRelease();
  v20 = v18 | 8;
  if (!v19)
    v20 = v18;
  *(_QWORD *)(v4 + 24) = v20;
  v21 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 520) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6C38]), sel_initWithDevice_, v21);
  *(_QWORD *)(v4 + 280) = objc_msgSend(v14, sel_newBufferWithLength_options_, 1024, 0);
  if (a2)
  {
    v22 = a2;
  }
  else
  {
    v22 = objc_msgSend(v21, sel_newCommandQueue);
    v23 = (void *)sub_1B2228728();
    objc_msgSend(v22, sel_setLabel_, v23);

  }
  *(_QWORD *)(v4 + 312) = v22;
  swift_unknownObjectRetain();
  sub_1B1992318(v22);
  v24 = swift_unknownObjectRetain();
  v25 = sub_1B1B40648(v24);
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 232) = v25;
  v26 = swift_unknownObjectRetain();
  v27 = sub_1B1FAF0F4(v26);
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 240) = v27;
  v28 = swift_unknownObjectRetain();
  v29 = sub_1B2130CF8(v28);
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 248) = v29;
  v30 = *(_QWORD *)(v4 + 16);
  sub_1B1BA82C4(0);
  swift_allocObject();
  v31 = swift_unknownObjectRetain();
  *(_QWORD *)(v4 + 264) = sub_1B1BA5928(v31);
  type metadata accessor for ColorRampCache();
  v32 = swift_allocObject();
  v33 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v32 + 16) = sub_1B1B97C0C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v32 + 24) = sub_1B1B97B44(v33);
  swift_weakInit();
  *(_QWORD *)(v4 + 800) = v32;
  type metadata accessor for CurveCache();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = sub_1B1B97B44(v33);
  swift_weakInit();
  *(_QWORD *)(v4 + 808) = v34;
  v35 = (uint64_t)objc_msgSend(v14, sel_minConstantBufferAlignmentBytes);
  if (v35 <= 16)
    v36 = 16;
  else
    v36 = v35;
  type metadata accessor for BufferPool();
  swift_allocObject();
  swift_unknownObjectRetain();
  *(_QWORD *)(v4 + 288) = sub_1B1D21294(0x6F507265646E6552, 0xEA00000000006C6FLL, v30, 0, v36);
  swift_allocObject();
  swift_unknownObjectRetain();
  *(_QWORD *)(v4 + 296) = sub_1B1D21294(0x617246656C6F6857, 0xEE006C6F6F50656DLL, v30, 0, v36);
  v37 = *(_QWORD *)(v4 + 312);
  v38 = *(_QWORD *)(v4 + 232);
  v39 = (objc_class *)type metadata accessor for GPUHelper();
  v40 = (char *)objc_allocWithZone(v39);
  *(_QWORD *)&v40[OBJC_IVAR____TtC3VFX9GPUHelper_shaderCache] = v38;
  *(_QWORD *)&v40[OBJC_IVAR____TtC3VFX9GPUHelper_device] = v30;
  *(_QWORD *)&v40[OBJC_IVAR____TtC3VFX9GPUHelper_commandQueue] = v37;
  v45.receiver = v40;
  v45.super_class = v39;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  *(_QWORD *)(v4 + 256) = objc_msgSendSuper2(&v45, sel_init);
  v41 = a3[3];
  *(_OWORD *)(v4 + 568) = a3[2];
  *(_OWORD *)(v4 + 584) = v41;
  *(_OWORD *)(v4 + 600) = a3[4];
  v42 = a3[1];
  *(_OWORD *)(v4 + 536) = *a3;
  *(_OWORD *)(v4 + 552) = v42;
  type metadata accessor for RenderGraph();
  swift_allocObject();
  v43 = sub_1B2063B58();
  *(_QWORD *)(v4 + 272) = v43;
  v43[2] = v4;
  swift_weakAssign();
  swift_weakAssign();
  swift_weakAssign();
  sub_1B1BA370C();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_1B1BA370C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v1 = v0;
  sub_1B1BA3980();
  sub_1B1BA1794();
  v2 = *(_QWORD *)(v0 + 272);
  result = sub_1B2061BE4(*(_QWORD *)(v1 + 592));
  if (!*(_QWORD *)(v1 + 608))
  {
    v4 = *(unsigned __int8 *)(v1 + 585);
    v5 = *(unsigned __int8 *)(v1 + 600);
    if (v4 == 2)
    {
      v7 = v5 == 0;
      v8 = 552;
    }
    else
    {
      if (v4 == 1)
      {
        v6 = 115;
LABEL_11:
        *(_QWORD *)(v2 + 48) = v6;
        return sub_1B2062FFC(v6);
      }
      if (*(_BYTE *)(v1 + 585))
      {
        result = sub_1B2229F70();
        __break(1u);
        return result;
      }
      v7 = v5 == 0;
      v8 = 70;
    }
    if (v7)
      v6 = v8 + 1;
    else
      v6 = v8;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1B1BA37B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3[20];

  if (*(_QWORD *)(v0 + 496))
  {
    sub_1B1BA8320();
    swift_arrayDestroy();
    v1 = *(_QWORD *)(v0 + 496);
    if (v1)
      MEMORY[0x1B5E23F88](v1, -1, -1);
  }
  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 176), -1, -1);
  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 352), -1, -1);
  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 208), -1, -1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1B1BA802C(v0 + 624, (uint64_t)v3);
  sub_1B1BA81B0(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1BA3940()
{
  sub_1B1BA37B4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Renderer()
{
  return objc_opt_self();
}

uint64_t sub_1B1BA3980()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char **v11;
  char *v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int32x2_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  char *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char **v42;
  char *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char **v76;
  uint64_t v77;
  char *v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char **v87;
  uint64_t v88;
  int64x2_t v89;
  __int128 v90;
  int64x2_t v91;
  __int128 v92;
  int64x2_t v93;
  __int128 v94;
  int64x2_t v95;
  __int128 v96;
  int64x2_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[16];
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[16];
  uint64_t v109;
  _BYTE v110[16];
  uint64_t v111;
  _OWORD v112[5];
  uint64_t v113;
  _BYTE v114[16];
  uint64_t v115;
  _BYTE v116[80];
  __int128 v117;
  _BYTE v118[96];
  int64x2_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[96];

  v1 = v0;
  v2 = (char **)(v0 + 784);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(_QWORD *)(v1 + 784);
  if (isUniquelyReferenced_nonNull_native)
  {
    result = sub_1B1C92E3C(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = (char *)sub_1B1B1C950(0, *(_QWORD *)(v4 + 24) >> 1);
    result = swift_bridgeObjectRelease();
  }
  v87 = v2;
  v6 = *(_QWORD *)(v1 + 608);
  if (v6)
  {
    v88 = *(_QWORD *)(v6 + 16);
    if (v88)
    {
      v7 = qword_1ED4BF578;
      swift_bridgeObjectRetain();
      if (v7 != -1)
        swift_once();
      v8 = 0;
      v9 = v6 + 32;
      v10 = dword_1ED4BF580;
      v11 = v87;
      do
      {
        v13 = v9 + 96 * v8;
        v14 = *(int64x2_t *)(v13 + 24);
        v15 = *(int64x2_t *)(v13 + 8);
        v16 = *(_QWORD *)(v13 + 40);
        v17 = *(int64x2_t *)(v13 + 48);
        v18 = *(int64x2_t *)(v13 + 64);
        v19 = *(int64x2_t *)(v13 + 80);
        v20 = *(_DWORD *)v13 & v10;
        v21 = *v11;
        v22 = *((_QWORD *)*v11 + 2);
        if (v22)
        {
          v23 = v21 + 72;
          v24 = *((_QWORD *)*v11 + 2);
          while (1)
          {
            if (*((_DWORD *)v23 - 10) == v20
              && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*((int64x2_t *)v23 - 2), v15), (int32x4_t)vceqq_s64(*((int64x2_t *)v23 - 1), v14)), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(v23 + 8), v17), (int32x4_t)vceqq_s64(*(int64x2_t *)(v23 + 24), v18)))), 0xFuLL))) & 1) != 0&& *(_QWORD *)v23 == v16)
            {
              v25 = vmovn_s64(vceqq_s64(*(int64x2_t *)(v23 + 40), v19));
              if ((v25.i32[0] & v25.i32[1] & 1) != 0)
                break;
            }
            v23 += 96;
            if (!--v24)
              goto LABEL_19;
          }
        }
        else
        {
LABEL_19:
          v89 = v15;
          v91 = v19;
          v93 = v18;
          v95 = v17;
          v97 = v14;
          v26 = swift_isUniquelyReferenced_nonNull_native();
          *v11 = v21;
          if ((v26 & 1) == 0)
          {
            v21 = sub_1B1C664F0(0, v22 + 1, 1, v21);
            *v11 = v21;
          }
          v28 = *((_QWORD *)v21 + 2);
          v27 = *((_QWORD *)v21 + 3);
          v30 = v95;
          v29 = v97;
          v32 = v91;
          v31 = v93;
          v33 = v89;
          if (v28 >= v27 >> 1)
          {
            v34 = sub_1B1C664F0(v27 > 1, v28 + 1, 1, v21);
            v33 = v89;
            v32 = v91;
            v31 = v93;
            v30 = v95;
            v29 = v97;
            v21 = v34;
          }
          *((_QWORD *)v21 + 2) = v28 + 1;
          v12 = &v21[96 * v28];
          *((_DWORD *)v12 + 8) = v20;
          *(int64x2_t *)(v12 + 40) = v33;
          *(int64x2_t *)(v12 + 56) = v29;
          *((_QWORD *)v12 + 9) = v16;
          *((int64x2_t *)v12 + 5) = v30;
          *((int64x2_t *)v12 + 6) = v31;
          *((int64x2_t *)v12 + 7) = v32;
          *(_QWORD *)(v1 + 784) = v21;
          sub_1B1BA43F4();
          v11 = v87;
        }
        ++v8;
      }
      while (v8 != v88);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (*(_BYTE *)(v1 + 536))
      v35 = 0;
    else
      v35 = 0x4000;
    sub_1B20621D0(&v99);
    v36 = v99;
    v37 = v100;
    v38 = v101;
    v39 = v102;
    v40 = v103;
    v41 = v104;
    if (qword_1ED4BF578 != -1)
    {
      v96 = v100;
      v98 = v99;
      v92 = v102;
      v94 = v101;
      v90 = v103;
      swift_once();
      v40 = v90;
      v39 = v92;
      v38 = v94;
      v37 = v96;
      v36 = v98;
    }
    v42 = v87;
    v43 = *v87;
    *(_DWORD *)v125 = dword_1ED4BF580 & v35;
    *(_OWORD *)&v125[8] = v36;
    *(_OWORD *)&v125[24] = v37;
    *(_OWORD *)&v125[40] = v38;
    *(_OWORD *)&v125[56] = v39;
    *(_OWORD *)&v125[72] = v40;
    *(_QWORD *)&v125[88] = v41;
    if ((sub_1B1DB8F5C((int64x2_t *)v125, (uint64_t)v43) & 1) == 0)
    {
      v44 = swift_isUniquelyReferenced_nonNull_native();
      *v87 = v43;
      if ((v44 & 1) == 0)
      {
        v43 = sub_1B1C664F0(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
        *v87 = v43;
      }
      v46 = *((_QWORD *)v43 + 2);
      v45 = *((_QWORD *)v43 + 3);
      if (v46 >= v45 >> 1)
        v43 = sub_1B1C664F0(v45 > 1, v46 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v46 + 1;
      v47 = &v43[96 * v46];
      v48 = *(_OWORD *)&v125[16];
      *((_OWORD *)v47 + 2) = *(_OWORD *)v125;
      *((_OWORD *)v47 + 3) = v48;
      v49 = *(_OWORD *)&v125[32];
      v50 = *(_OWORD *)&v125[48];
      v51 = *(_OWORD *)&v125[80];
      *((_OWORD *)v47 + 6) = *(_OWORD *)&v125[64];
      *((_OWORD *)v47 + 7) = v51;
      *((_OWORD *)v47 + 4) = v49;
      *((_OWORD *)v47 + 5) = v50;
      *(_QWORD *)(v1 + 784) = v43;
      sub_1B1BA43F4();
      v42 = v87;
    }
    sub_1B206309C(4u, (uint64_t)v105);
    sub_1B206309C(5u, (uint64_t)v108);
    v53 = v106;
    v52 = v107;
    sub_1B206309C(0x13u, (uint64_t)v110);
    sub_1B1BA80C0((uint64_t)v110);
    v54 = v111;
    v55 = v109;
    if (v109 == 260)
      v56 = 260;
    else
      v56 = 0;
    sub_1B1BA80C0((uint64_t)v108);
    sub_1B1BA80C0((uint64_t)v105);
    v57 = *v42;
    v119.i32[0] = 0;
    v119.i64[1] = v53;
    v120 = 0uLL;
    *(_QWORD *)&v121 = 0;
    *((_QWORD *)&v121 + 1) = v54;
    v122 = 0uLL;
    *(_QWORD *)&v123 = 0;
    *((_QWORD *)&v123 + 1) = v55;
    *(_QWORD *)&v124 = v56;
    *((_QWORD *)&v124 + 1) = v52;
    if ((sub_1B1DB8F5C(&v119, (uint64_t)v57) & 1) == 0)
    {
      v58 = swift_isUniquelyReferenced_nonNull_native();
      *v42 = v57;
      if ((v58 & 1) == 0)
      {
        v57 = sub_1B1C664F0(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
        *v42 = v57;
      }
      v60 = *((_QWORD *)v57 + 2);
      v59 = *((_QWORD *)v57 + 3);
      if (v60 >= v59 >> 1)
        v57 = sub_1B1C664F0(v59 > 1, v60 + 1, 1, v57);
      *((_QWORD *)v57 + 2) = v60 + 1;
      v61 = &v57[96 * v60];
      v62 = v120;
      *((int64x2_t *)v61 + 2) = v119;
      *((_OWORD *)v61 + 3) = v62;
      v63 = v121;
      v64 = v122;
      v65 = v124;
      *((_OWORD *)v61 + 6) = v123;
      *((_OWORD *)v61 + 7) = v65;
      *((_OWORD *)v61 + 4) = v63;
      *((_OWORD *)v61 + 5) = v64;
      *(_QWORD *)(v1 + 784) = v57;
      sub_1B1BA43F4();
    }
    sub_1B20621D0(v112);
    v66 = *v42;
    *(_DWORD *)v118 = 0;
    *(_OWORD *)&v118[8] = v112[0];
    *(_OWORD *)&v118[24] = v112[1];
    *(_OWORD *)&v118[40] = v112[2];
    *(_OWORD *)&v118[56] = v112[3];
    *(_OWORD *)&v118[72] = v112[4];
    *(_QWORD *)&v118[88] = v113;
    if ((sub_1B1DB8F5C((int64x2_t *)v118, (uint64_t)v66) & 1) == 0)
    {
      v67 = swift_isUniquelyReferenced_nonNull_native();
      *v42 = v66;
      if ((v67 & 1) == 0)
      {
        v66 = sub_1B1C664F0(0, *((_QWORD *)v66 + 2) + 1, 1, v66);
        *v42 = v66;
      }
      v69 = *((_QWORD *)v66 + 2);
      v68 = *((_QWORD *)v66 + 3);
      if (v69 >= v68 >> 1)
        v66 = sub_1B1C664F0(v68 > 1, v69 + 1, 1, v66);
      *((_QWORD *)v66 + 2) = v69 + 1;
      v70 = &v66[96 * v69];
      v71 = *(_OWORD *)&v118[16];
      *((_OWORD *)v70 + 2) = *(_OWORD *)v118;
      *((_OWORD *)v70 + 3) = v71;
      v72 = *(_OWORD *)&v118[32];
      v73 = *(_OWORD *)&v118[48];
      v74 = *(_OWORD *)&v118[80];
      *((_OWORD *)v70 + 6) = *(_OWORD *)&v118[64];
      *((_OWORD *)v70 + 7) = v74;
      *((_OWORD *)v70 + 4) = v72;
      *((_OWORD *)v70 + 5) = v73;
      *(_QWORD *)(v1 + 784) = v66;
      sub_1B1BA43F4();
    }
    sub_1B206309C(3u, (uint64_t)v114);
    v75 = v115;
    v76 = v42;
    if (v115 == 260)
      v77 = 260;
    else
      v77 = 0;
    sub_1B1BA80C0((uint64_t)v114);
    v78 = *v76;
    *(_DWORD *)v116 = dword_1ED4BF580 & 0x800;
    memset(&v116[8], 0, 64);
    *(_QWORD *)&v116[72] = v75;
    *(_QWORD *)&v117 = v77;
    *((_QWORD *)&v117 + 1) = 1;
    result = sub_1B1DB8F5C((int64x2_t *)v116, (uint64_t)v78);
    if ((result & 1) == 0)
    {
      v79 = swift_isUniquelyReferenced_nonNull_native();
      *v87 = v78;
      if ((v79 & 1) == 0)
      {
        v78 = sub_1B1C664F0(0, *((_QWORD *)v78 + 2) + 1, 1, v78);
        *v87 = v78;
      }
      v81 = *((_QWORD *)v78 + 2);
      v80 = *((_QWORD *)v78 + 3);
      if (v81 >= v80 >> 1)
        v78 = sub_1B1C664F0(v80 > 1, v81 + 1, 1, v78);
      *((_QWORD *)v78 + 2) = v81 + 1;
      v82 = &v78[96 * v81];
      v83 = *(_OWORD *)&v116[16];
      *((_OWORD *)v82 + 2) = *(_OWORD *)v116;
      *((_OWORD *)v82 + 3) = v83;
      v84 = *(_OWORD *)&v116[32];
      v85 = *(_OWORD *)&v116[48];
      v86 = v117;
      *((_OWORD *)v82 + 6) = *(_OWORD *)&v116[64];
      *((_OWORD *)v82 + 7) = v86;
      *((_OWORD *)v82 + 4) = v84;
      *((_OWORD *)v82 + 5) = v85;
      *(_QWORD *)(v1 + 784) = v78;
      return sub_1B1BA43F4();
    }
  }
  return result;
}

void sub_1B1BA4078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 176));
  v4 = *(_QWORD **)(a1 + 176);
  swift_retain();
  v5 = sub_1B1F22B64((uint64_t)&type metadata for EffectsRegistry, (uint64_t)&off_1E6383A70, v4);
  swift_release();
  v6 = sub_1B1E70DE0(v2);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 216) + 16);
  v9 = swift_bridgeObjectRetain();
  if (v8)
  {
    v10 = (__int128 *)(v9 + 32);
    v11 = MEMORY[0x1E0DEE9D8];
    do
    {
      v15 = *v10;
      v16 = *v10;
      swift_unknownObjectRetain();
      if ((sub_1B1BA4220((uint64_t)&v16, &v18, v5, v6, v7) & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1B202AE68(0, *(_QWORD *)(v11 + 16) + 1, 1);
          v11 = v17;
        }
        v14 = *(_QWORD *)(v11 + 16);
        v13 = *(_QWORD *)(v11 + 24);
        if (v14 >= v13 >> 1)
        {
          sub_1B202AE68(v13 > 1, v14 + 1, 1);
          v11 = v17;
        }
        *(_QWORD *)(v11 + 16) = v14 + 1;
        *(_OWORD *)(v11 + 16 * v14 + 32) = v15;
      }
      else
      {
        swift_unknownObjectRelease();
      }
      ++v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 224) = v11;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 176));
}

uint64_t sub_1B1BA4220(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t result;
  void (*v13)(_BYTE *, _QWORD);
  _QWORD *v14;
  uint64_t v15;
  double v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v23[32];

  v9 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(ObjectType, v9) & 1) == 0)
    goto LABEL_9;
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 40);
  result = v11(ObjectType, v9);
  if (!result)
  {
LABEL_10:
    v15 = *a2;
    goto LABEL_11;
  }
  if (v11(ObjectType, v9) >= 1)
  {
    v13 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 56))(v23, ObjectType, v9);
    --*v14;
    v13(v23, 0);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 168))(ObjectType, v9) & 1) != 0)
    goto LABEL_6;
  if ((*(double (**)(uint64_t, uint64_t))(v9 + 72))(ObjectType, v9) == 0.0 && v16 == 0.0)
    goto LABEL_9;
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 144);
  if ((v17(ObjectType, v9) & 0xFFFFFFFFFFLL) != 0x200000000)
  {
    v18 = v17(ObjectType, v9);
    if ((_DWORD)v18)
      v19 = (v18 & 0xFE00000000) == 0;
    else
      v19 = 0;
    if (!v19)
      LODWORD(v18) = dword_1EEFD58F0;
    if (!sub_1B1B0F7F4(v18, a3))
    {
LABEL_9:
      result = 0;
      goto LABEL_10;
    }
  }
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 152))(ObjectType, v9);
  if ((v21 & 1) != 0)
  {
LABEL_6:
    v15 = *a2;
    result = 1;
    goto LABEL_11;
  }
  if (v20 > 119)
  {
    v20 = 120;
  }
  else if (v20 < 1)
  {
    goto LABEL_25;
  }
  a4 /= v20;
LABEL_25:
  if (a4 <= 1)
    v22 = 1;
  else
    v22 = a4;
  v15 = *a2;
  result = (*a2 + a5) % v22 == 0;
LABEL_11:
  *a2 = v15 + 1;
  return result;
}

uint64_t sub_1B1BA43F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v1 + 32;
    do
    {
      ++v3;
      v4 += 96;
      --v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *(char **)(v0 + 792);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 792) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v5 = sub_1B1FFECF0((uint64_t)v5);
  *((_QWORD *)v5 + 4) = v3;
  *(_QWORD *)(v0 + 792) = v5;
  v7 = *(_QWORD *)(v0 + 784);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = v7 + 32;
    do
    {
      if ((*(_BYTE *)(v10 + 1) & 0x50) == 0)
        ++v9;
      v10 += 96;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  v11 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 792) = v5;
  if ((v11 & 1) == 0)
    v5 = sub_1B1FFECF0((uint64_t)v5);
  *((_QWORD *)v5 + 5) = v9;
  *(_QWORD *)(v0 + 792) = v5;
  v12 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = 0;
    v15 = v12 + 32;
    do
    {
      ++v14;
      v15 += 96;
      --v13;
    }
    while (v13);
  }
  else
  {
    v14 = 0;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 792) = v5;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1FFECF0((uint64_t)v5);
    v5 = (char *)result;
  }
  *((_QWORD *)v5 + 6) = v14;
  *(_QWORD *)(v0 + 792) = v5;
  return result;
}

void sub_1B1BA458C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(void *, uint64_t);
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _OWORD v14[10];
  uint64_t aBlock[18];
  uint64_t v16;
  _BYTE v17[160];
  uint64_t v18[20];

  v2 = v1;
  sub_1B1BA2FBC();
  v4 = *(void **)(v1 + 368);
  if (!v4)
    return;
  sub_1B1BA802C(v1 + 624, (uint64_t)v17);
  sub_1B1BA802C((uint64_t)v17, (uint64_t)v18);
  if (sub_1B1B3C438(v18) == 1)
    goto LABEL_15;
  v5 = v18[1];
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v8 = (void (*)(void *, uint64_t))v7(ObjectType, v5);
  swift_unknownObjectRelease();
  if (v8)
  {
    sub_1B1BA802C(v1 + 624, (uint64_t)v14);
    sub_1B1BA802C((uint64_t)v14, (uint64_t)aBlock);
    if (sub_1B1B3C438(aBlock) != 1)
    {
      v9 = v16;
      if (v16)
      {
        swift_unknownObjectRetain();
        v8(v4, v9);
        swift_unknownObjectRelease();
      }
      sub_1B19E5A18((uint64_t)v8);
      goto LABEL_8;
    }
LABEL_15:
    sub_1B2229688();
    __break(1u);
    return;
  }
LABEL_8:
  sub_1B1BA4808();
  if (*(_BYTE *)(v1 + 537) == 1 || *(_BYTE *)(v1 + 539) == 1 || (*(_BYTE *)(v1 + 540) & 1) != 0)
  {
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = *(void **)(v1 + 528);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v10;
    aBlock[4] = (uint64_t)sub_1B1BA8170;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1B1BA0C14;
    aBlock[3] = (uint64_t)&unk_1E63E9780;
    v12 = _Block_copy(aBlock);
    v13 = v10;
    swift_release();
    objc_msgSend(v4, sel_addCompletedHandler_, v12);
    swift_unknownObjectRelease();
    _Block_release(v12);
  }
  sub_1B1BA8190(v14);
  sub_1B1BA802C(v2 + 624, (uint64_t)aBlock);
  sub_1B1BA802C((uint64_t)v14, v2 + 624);
  sub_1B1BA81B0(aBlock);
  *(_QWORD *)(v2 + 368) = 0;
  swift_unknownObjectRelease();
  *(_BYTE *)(*(_QWORD *)(v2 + 288) + 136) = 0;
}

uint64_t sub_1B1BA4808()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v2 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 40) = 0x8000000000000000;
    sub_1B1BA8250();
    sub_1B2229634();
    *(_QWORD *)(v0 + 40) = v2;
    swift_bridgeObjectRelease();
  }
  return sub_1B215FC5C(1);
}

uint64_t sub_1B1BA488C(void *a1)
{
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD v11[6];

  swift_retain();
  v2 = sub_1B1D21D1C();
  v4 = v3;
  swift_release();
  swift_retain();
  v5 = sub_1B1D21D1C();
  v7 = v6;
  swift_release();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v7;
  v11[4] = sub_1B1BA8114;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1B1BA0C14;
  v11[3] = &unk_1E63D2A00;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_addCompletedHandler_, v9);
  _Block_release(v9);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1BA49B0()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BA4A08()
{
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t sub_1B1BA4A40()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BA4A94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  id v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v24;

  if (a1 >= a2)
    v4 = a2;
  else
    v4 = a1;
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  if ((a3 & 0x8000000000000000) == 0 && !HIDWORD(a3) && !HIDWORD(v5))
  {
    v7 = v3;
    v10 = *(_QWORD *)(v3 + 840);
    v11 = a3 | (v5 << 32);
    if (*(_QWORD *)(v10 + 16)
      && (v12 = sub_1B1DC3CA4(a3 | (v5 << 32)), (v13 & 1) != 0)
      && (v14 = *(_QWORD *)(v10 + 56), *(_QWORD *)(v14 + 24 * v12) >= a1))
    {
      v20 = *(id *)(v14 + 24 * v12 + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      v15 = a1 - 1 + a2;
      v16 = v15 / a2;
      if (a3)
        v17 = a3;
      else
        v17 = v15 / a2;
      if (v17 >= v16)
        v18 = v16;
      else
        v18 = v17;
      if (v18 < 1)
        v19 = 2 * a1;
      else
        v19 = 2 * ((a1 - 1 + v18) / v18 + a1) - 2;
      if (v19 >= 0x10000)
      {
        v20 = sub_1B1BA4DC4(v19, a1, v16, v5, v18, v7);
        v21 = 4;
        if (!v20)
          return (uint64_t)v20;
      }
      else
      {
        v20 = sub_1B1BA4CA0(v19, a1, v16, v5, v18, v7);
        v21 = 2;
        if (!v20)
          return (uint64_t)v20;
      }
      swift_unknownObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v24 = *(_QWORD *)(v7 + 840);
      *(_QWORD *)(v7 + 840) = 0x8000000000000000;
      sub_1B1B86AF4(a1, (uint64_t)v20, v21, v11, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v7 + 840) = v24;
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v20;
  }
  result = sub_1B222967C();
  __break(1u);
  return result;
}

id sub_1B1BA4CA0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  id v21;

  v12 = sub_1B19F4168(0, a1);
  if (a2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = (uint64_t)sub_1B1FFEE98(v12);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v12 + 32;
    do
    {
      v19 = 2 * (v13 % (a4 * a3) + v16 / a3);
      if (v14)
      {
        v20 = (_WORD *)(v17 + 2 * v15);
        *v20 = *(v20 - 1);
        v20[1] = v19;
        v15 += 2;
      }
      ++v16;
      v18 = (_WORD *)(v17 + 2 * v15);
      *v18 = v19;
      v18[1] = v19 | 1;
      v15 += 2;
      v14 = v16 % a5 == 0;
      v13 += a4;
    }
    while (a2 != v16);
  }
  v21 = objc_msgSend(*(id *)(a6 + 16), sel_newBufferWithBytes_length_options_, v12 + 32, 2 * a1, 0);
  swift_bridgeObjectRelease();
  return v21;
}

id sub_1B1BA4DC4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  id v21;

  v12 = sub_1B19F4080(0, a1);
  if (a2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = (uint64_t)sub_1B1FFEE84(v12);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v12 + 32;
    do
    {
      v19 = 2 * (v13 % (a4 * a3) + v16 / a3);
      if (v14)
      {
        v20 = (_DWORD *)(v17 + 4 * v15);
        *v20 = *(v20 - 1);
        v20[1] = v19;
        v15 += 2;
      }
      ++v16;
      v18 = (_DWORD *)(v17 + 4 * v15);
      *v18 = v19;
      v18[1] = v19 | 1;
      v15 += 2;
      v14 = v16 % a5 == 0;
      v13 += a4;
    }
    while (a2 != v16);
  }
  v21 = objc_msgSend(*(id *)(a6 + 16), sel_newBufferWithBytes_length_options_, v12 + 32, 4 * a1, 0);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1B1BA4EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _QWORD v20[4];
  char v21;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 848);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = sub_1B1DC488C(a1);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v6 + 56) + 40 * v7;
      v11 = *(void **)v9;
      v10 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      v14 = *(_BYTE *)(v9 + 32);
      result = swift_unknownObjectRetain();
LABEL_6:
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v13;
      *(_BYTE *)(a2 + 32) = v14;
      return result;
    }
  }
  v16 = sub_1B1BA2B0C(*(_QWORD *)(a1 + 16), 32);
  if (v16)
  {
    v11 = v16;
    v12 = v17;
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_BYTE *)(a1 + 32);
    v20[0] = v16;
    v20[1] = 0;
    v20[2] = v17;
    v20[3] = v13;
    v21 = v14;
    swift_unknownObjectRetain_n();
    sub_1B1B40D5C(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *(_QWORD *)(v3 + 848);
    *(_QWORD *)(v3 + 848) = 0x8000000000000000;
    sub_1B1B86C20((uint64_t)v20, a1, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 848) = v19;
    swift_bridgeObjectRelease();
    sub_1B1B40274(a1);
    result = swift_unknownObjectRelease();
    v10 = 0;
    goto LABEL_6;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RendererPostUpdateSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Renderer.StripDesc()
{
  return &type metadata for Renderer.StripDesc;
}

uint64_t destroy for Renderer.CurrentRenderContext()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Renderer.CurrentRenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Renderer.CurrentRenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

__n128 initializeWithTake for Renderer.CurrentRenderContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for Renderer.CurrentRenderContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for Renderer.CurrentRenderContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Renderer.CurrentRenderContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Renderer.CurrentRenderContext()
{
  return &type metadata for Renderer.CurrentRenderContext;
}

uint64_t destroy for Renderer.Options()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Renderer.Options(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Renderer.Options(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Renderer.Options(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Renderer.Options(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Renderer.Options(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Renderer.Options()
{
  return &type metadata for Renderer.Options;
}

ValueMetadata *type metadata accessor for Renderer.UnscheduledCommandBuffer()
{
  return &type metadata for Renderer.UnscheduledCommandBuffer;
}

uint64_t storeEnumTagSinglePayload for StereoMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1BA5664 + 4 * byte_1B227DBA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1BA5698 + 4 * byte_1B227DBA0[v4]))();
}

uint64_t sub_1B1BA5698(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BA56A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BA56A8);
  return result;
}

uint64_t sub_1B1BA56B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BA56BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1BA56C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BA56C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StereoMode()
{
  return &type metadata for StereoMode;
}

unint64_t sub_1B1BA56E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5B9D0;
  if (!qword_1EEF5B9D0)
  {
    sub_1B1A02758(255, &qword_1EEF5B9D8, (uint64_t)&type metadata for StereoMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9D0);
  }
  return result;
}

unint64_t sub_1B1BA574C()
{
  unint64_t result;

  result = qword_1EEF5B9E0;
  if (!qword_1EEF5B9E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E08C, &type metadata for StereoMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9E0);
  }
  return result;
}

unint64_t sub_1B1BA5794()
{
  unint64_t result;

  result = qword_1ED4BA128;
  if (!qword_1ED4BA128)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E0B4, &type metadata for Renderer.UnscheduledCommandBuffer);
    atomic_store(result, (unint64_t *)&qword_1ED4BA128);
  }
  return result;
}

unint64_t sub_1B1BA57DC()
{
  unint64_t result;

  result = qword_1EEF5B9F0;
  if (!qword_1EEF5B9F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E11C, &type metadata for Renderer.StripDesc);
    atomic_store(result, (unint64_t *)&qword_1EEF5B9F0);
  }
  return result;
}

const char *sub_1B1BA5828()
{
  return "RendererPostUpdateSystem";
}

uint64_t sub_1B1BA583C()
{
  return qword_1EEF5DE20;
}

BOOL sub_1B1BA5848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;

  v5 = (_BYTE *)(a1 + 537);
  return (*(_BYTE *)(a1 + 540) != 1 || sub_1B1F2544C(a2, a3)) && (*v5 != 1 || sub_1B1F25470(a2, a3));
}

void sub_1B1BA58B8(uint64_t a1, Swift::Int a2)
{
  uint64_t v2;
  Swift::UInt32 v4;

  if (*(_QWORD *)(v2 + 40))
  {
    swift_getAtKeyPath();
    vfx_counters.add(_:_:)(v4, a2);
  }
}

_QWORD *sub_1B1BA5928(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v1[4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  v3 = MEMORY[0x1E0DEE9D8];
  v1[5] = sub_1B1B7E998(MEMORY[0x1E0DEE9D8]);
  v1[2] = a1;
  type metadata accessor for NoHeapTextureAllocator();
  v4 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v4[4] = 100;
  v4[5] = v3;
  v4[6] = sub_1B1B97B44(v3);
  v4[2] = a1;
  v1[3] = v4;
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_1B1BA59CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = result;
  a3[4] = a2;
  a3[5] = 1;
  return result;
}

unint64_t sub_1B1BA59E0(int a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;

  v3 = *v1;
  sub_1B222A06C();
  sub_1B222A09C();
  v4 = sub_1B222A0C0();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_9:
    v11 = 0;
    v12 = 1;
    return v11 | ((unint64_t)v12 << 32);
  }
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_DWORD *)(v7 + 4 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_9;
    }
    while (*(_DWORD *)(v7 + 4 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v14 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1B91DCC();
    v10 = v14;
  }
  v11 = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 4 * v6);
  sub_1B1BA5D24(v6);
  *v1 = v14;
  swift_bridgeObjectRelease();
  v12 = 0;
  return v11 | ((unint64_t)v12 << 32);
}

uint64_t sub_1B1BA5B0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  v3 = *v1;
  sub_1B222A06C();
  sub_1B222A078();
  v4 = sub_1B222A0C0();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  while (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6) != a1)
  {
    v6 = (v6 + 1) & v7;
    if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      return 0;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v12 = *v1;
  *v1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1B1B9245C();
    v10 = v12;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  sub_1B1BA5EC4(v6);
  *v1 = v12;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1BA5C1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = sub_1B222A060();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B1B90FE4();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_1B1BA6064(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_1B1BA5D24(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A09C();
        v10 = sub_1B222A0C0() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9)
            goto LABEL_5;
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(v3 + 48);
          v12 = (_DWORD *)(v11 + 4 * v2);
          v13 = (_DWORD *)(v11 + 4 * v6);
          if (v2 != v6 || (v2 = v6, v12 >= v13 + 1))
          {
            *v12 = *v13;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  --*(_QWORD *)(v3 + 16);
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_1B1BA5EC4(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A078();
        v10 = sub_1B222A0C0() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9)
            goto LABEL_5;
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(v3 + 48);
          v12 = (_QWORD *)(v11 + 8 * v2);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v12 >= v13 + 1))
          {
            *v12 = *v13;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  --*(_QWORD *)(v3 + 16);
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_1B1BA6064(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = sub_1B222A060() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 < v9 || v2 < v12)
            goto LABEL_5;
        }
        else if (v12 < v9 && v2 < v12)
        {
          goto LABEL_5;
        }
        v15 = (_QWORD *)(v10 + 8 * v2);
        if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
        {
          *v15 = *v11;
          v2 = v6;
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  --*(_QWORD *)(v3 + 16);
  ++*(_DWORD *)(v3 + 36);
  return result;
}

uint64_t *sub_1B1BA61E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  CFTimeInterval v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFTimeInterval v37;
  void *v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  uint64_t v48[20];
  _OWORD v49[7];

  v34 = a1;
  v33 = sub_1B22284E8();
  v11 = *(_QWORD *)(v33 - 8);
  v13 = MEMORY[0x1E0C80A78](v33, v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a3, sel_label, v13);
  if (v16)
  {

  }
  else
  {
    v48[0] = 0;
    v48[1] = 0xE000000000000000;
    sub_1B2228890();
    v35 = a2;
    v36 = a6;
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8418);
    sub_1B22295EC();
    v17 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_setLabel_, v17);

  }
  v18 = (_BYTE *)(a4 + 537);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 120))(a5, a6);
  if (!v19
    || (v20 = (void *)v19, swift_unknownObjectRelease(), v20 != a3)
    || (*v18 & 1) == 0 && *(_BYTE *)(a4 + 539) != 1 && (*(_BYTE *)(a4 + 540) & 1) == 0)
  {
    sub_1B1BA11D0(a3);
  }
  *(_QWORD *)(a4 + 368) = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if ((*v18 & 1) == 0 && *(_BYTE *)(a4 + 539) != 1 && (*(_BYTE *)(a4 + 540) & 1) == 0)
  {
    sub_1B22284DC();
    sub_1B2228FC8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v33);
  }
  *(_QWORD *)(a4 + 408) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 88))(a5, a6);
  *(_QWORD *)(a4 + 472) = *(_QWORD *)(a4 + 592);
  *(_BYTE *)(*(_QWORD *)(a4 + 288) + 136) = 1;
  v21 = v34;
  v22 = sub_1B1EDE688();
  v24 = v23;
  swift_unknownObjectRetain();
  v25 = CACurrentMediaTime();
  v26 = *(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler);
  type metadata accessor for WireframeLayerSystem();
  v27 = *(os_unfair_lock_s **)(v26 + 56);
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v27);
  v28 = sub_1B204E0B8();
  if ((v29 & 1) != 0)
    v30 = 0;
  else
    v30 = *(_BYTE *)(*(_QWORD *)(v26 + 96) + 96 * v28 + 105);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 56));
  swift_release();
  if ((v24 & 1) != 0)
    v31 = 0xFFFFFFFFLL;
  else
    v31 = v22;
  sub_1B1EDE7BC((_QWORD *)v31, (uint64_t)v49);
  v35 = a2;
  v36 = a6;
  v37 = v25;
  v38 = a3;
  v39 = v30;
  v40 = v49[0];
  v41 = v49[1];
  v42 = v49[2];
  v43 = v49[3];
  v44 = v49[4];
  v45 = v49[5];
  v46 = 0;
  v47 = 0;
  nullsub_16(&v35);
  sub_1B1BA802C(a4 + 624, (uint64_t)v48);
  sub_1B1BA802C((uint64_t)&v35, a4 + 624);
  return sub_1B1BA81B0(v48);
}

void sub_1B1BA6520(void *a1)
{
  objc_msgSend(a1, sel_presentedTime);
  prof_commit();
}

uint64_t sub_1B1BA6540()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t result;

  if (*(_QWORD *)(v0 + 368))
  {
    v1 = *(void **)(v0 + 368);
LABEL_5:
    swift_unknownObjectRetain();
    return (uint64_t)v1;
  }
  v2 = objc_msgSend(*(id *)(v0 + 312), sel_commandBuffer);
  if (v2)
  {
    v1 = v2;
    sub_1B2229454();
    v3 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setLabel_, v3);

    sub_1B1BA11D0(v1);
    *(_QWORD *)(v0 + 368) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229454();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BA669C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t result;
  id v12;

  if (a3)
  {
    v5 = a3;
  }
  else
  {
    if (*(_QWORD *)(v3 + 376))
    {
      v6 = swift_dynamicCastObjCProtocolConditional();
      if (v6)
      {
        v7 = (id)v6;
        swift_unknownObjectRetain();
        return (uint64_t)v7;
      }
    }
    sub_1B1BA2FBC();
    v5 = (void *)sub_1B1BA6540();
  }
  swift_unknownObjectRetain();
  v8 = objc_msgSend(v5, sel_computeCommandEncoder);
  if (v8)
  {
    v9 = v8;
    v10 = (void *)sub_1B2228728();
    objc_msgSend(v9, sel_setLabel_, v10);

    v7 = objc_msgSend(objc_allocWithZone((Class)RGCachedComputeCommandEncoder), sel_initWithEncoder_, v9);
    if (a3)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (uint64_t)v7;
    }
    *(_QWORD *)(v3 + 376) = v9;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_QWORD *)(v3 + 384) = v7;
    v12 = v7;
    swift_unknownObjectRelease();
    return (uint64_t)v12;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA683C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t result;

  if (a3)
  {
    v5 = a3;
  }
  else
  {
    if (*(_QWORD *)(v3 + 376))
    {
      v6 = swift_dynamicCastObjCProtocolConditional();
      if (v6)
      {
        v7 = (void *)v6;
        swift_unknownObjectRetain();
        return (uint64_t)v7;
      }
    }
    sub_1B1BA2FBC();
    v5 = (void *)sub_1B1BA6540();
  }
  swift_unknownObjectRetain();
  v8 = objc_msgSend(v5, sel_blitCommandEncoder);
  if (v8)
  {
    v7 = v8;
    v9 = (void *)sub_1B2228728();
    objc_msgSend(v7, sel_setLabel_, v9);

    if (!a3)
    {
      *(_QWORD *)(v3 + 376) = v7;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    return (uint64_t)v7;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BA6994(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v13;
  void *v14;
  void *v15;
  uint64_t (*v16)();
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v23;
  __int128 v24;
  __int128 aBlock;
  uint64_t (*v28)();
  void *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t (*v33)();

  v13 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, a3);
  v14 = (void *)sub_1B2228728();
  objc_msgSend(v13, sel_pushDebugGroup_, v14);

  if (a3)
  {
    v15 = a3;
  }
  else
  {
    v15 = *(void **)(a4 + 368);
    swift_unknownObjectRetain();
  }
  swift_unknownObjectRetain();
  sub_1B19FB884(&aBlock);
  v24 = aBlock;
  v16 = v28;
  swift_getObjectType();
  sub_1B1BA8088((uint64_t)objc_msgSend(a5, sel_width), (uint64_t)objc_msgSend(a5, sel_height), (uint64_t)objc_msgSend(a5, sel_depth), &aBlock);
  v23 = aBlock;
  v17 = v28;
  v18 = sub_1B1F9A54C();
  v19 = sub_1B1F9DC7C();
  aBlock = v24;
  v28 = v16;
  v32 = v23;
  v33 = v17;
  objc_msgSend(v13, sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_, a5, 0, 0, &aBlock, &v32, a6, a7, v18, v19);
  if (a8)
  {
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a8;
    *(_QWORD *)(v20 + 24) = a9;
    v30 = sub_1B1BA80B8;
    v31 = v20;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v28 = sub_1B1BA0C14;
    v29 = &unk_1E63E9708;
    v21 = _Block_copy(&aBlock);
    swift_retain_n();
    swift_release();
    objc_msgSend(v15, sel_addCompletedHandler_, v21);
    _Block_release(v21);
    sub_1B19E5A18(a8);
  }
  swift_unknownObjectRelease();
  if (a3)
    objc_msgSend(v13, sel_endEncoding);
  objc_msgSend(v13, sel_popDebugGroup);
  return swift_unknownObjectRelease();
}

id sub_1B1BA6BFC(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17[6];

  if ((a3 & 1) != 0 && (objc_msgSend(*(id *)(v3 + 16), sel_isDrawableAvailable) & 1) == 0)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v15 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v17[0] = 0;
    swift_retain();
    v14 = 0xD00000000000003ELL;
    v12 = 0x80000001B2331CD0;
    v13 = v15;
    goto LABEL_15;
  }
  v6 = objc_msgSend(*(id *)(v3 + 16), sel_nextDrawable);
  if (!v6)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v11 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v17[0] = 0;
    swift_retain();
    v12 = 0x80000001B2331C90;
    v13 = v11;
    v14 = 0xD000000000000019;
LABEL_15:
    sub_1B1F1AD70(v13, v17, v14, v12);
    swift_release();
    swift_release();
    return 0;
  }
  v7 = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = a2;
  v17[4] = (uint64_t)sub_1B1BA6E9C;
  v17[5] = v8;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1107296256;
  v17[2] = (uint64_t)sub_1B1BA0C14;
  v17[3] = (uint64_t)&unk_1E63D4718;
  v9 = _Block_copy(v17);
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(a1, sel_addScheduledHandler_, v9);
  _Block_release(v9);
  v10 = objc_msgSend(v7, sel_texture);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t sub_1B1BA6E78()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

id sub_1B1BA6E9C(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1BA0B74(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B1BA6EA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  result = *(_QWORD *)(a2 + 112);
  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v11 = swift_bridgeObjectRetain() + 48;
    do
    {
      v20 = *(_QWORD *)v11;
      v21 = *(_QWORD *)(v11 - 8);
      v12 = a5;
      v14 = *(_QWORD *)(v11 + 24);
      v13 = *(_QWORD *)(v11 + 32);
      v15 = *(_QWORD *)(v11 + 40);
      v16 = *(_QWORD *)(v11 - 16) + a4;
      sub_1B19FB884(&v24);
      v17 = v25;
      v18 = v24;
      v24 = *(_OWORD *)(v11 + 8);
      v25 = v14;
      v22 = v18;
      v23 = v17;
      v19 = v13;
      a5 = v12;
      objc_msgSend(a1, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a3, v16, v21, v20, &v24, v12, v19, v15, &v22);
      v11 += 64;
      --v7;
    }
    while (v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1BA6F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;

  v11 = objc_msgSend(*(id *)(a3 + 312), sel_commandBuffer);
  if (v11)
  {
    sub_1B2229454();
    v12 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setLabel_, v12);

    sub_1B1BA11D0(v11);
  }
  swift_unknownObjectRetain();
  v13 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, v11);
  v14 = (void *)sub_1B2228728();
  objc_msgSend(v13, sel_pushDebugGroup_, v14);

  swift_unknownObjectRetain();
  sub_1B1BA6EA4(v13, a4, a5, a6, a7);
  swift_unknownObjectRelease();
  objc_msgSend(v13, sel_endEncoding);
  objc_msgSend(v13, sel_popDebugGroup);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  objc_msgSend(v11, sel_commit);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1BA7104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t result;
  __int128 v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;

  *(_QWORD *)&v38 = a3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v34 - v8;
  *(_QWORD *)&v39 = sub_1B2228110();
  v10 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)sub_1B2228728();
  v15 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v14);

  v40 = a1;
  v16 = (void *)sub_1B2228728();
  v17 = (void *)sub_1B2228728();
  v18 = objc_msgSend(v15, sel_pathForResource_ofType_, v16, v17);

  if (!v18)
  {

    return 0;
  }
  v35 = v15;
  v36 = a2;
  sub_1B222874C();

  RGTextureDescriptor.init()((uint64_t)&v62);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v52 = 0;
  v53 = v62;
  v54 = v63;
  v55 = v64;
  v56 = v65;
  v57 = v66;
  v58 = v67;
  v59 = v68;
  v60 = v69;
  v61 = MEMORY[0x1E0DEE9D8];
  sub_1B2228050();
  swift_bridgeObjectRelease();
  v37 = v3;
  v19 = sub_1B2228128();
  v21 = v20;
  v22 = v39;
  (*(void (**)(char *, char *, _QWORD))(v10 + 16))(v9, v13, v39);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v22);
  sub_1B2023184(v19, v21);
  sub_1B19EC9A4((uint64_t)v9);
  sub_1B1A0DADC(v19, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v22);
  v23 = v49;
  if (v49)
  {
    v24 = v50;
    v25 = v54;
    v26 = v55;
    v38 = v57;
    v39 = v56;
    v34 = v58;
    v27 = v59;
    v28 = objc_allocWithZone(MEMORY[0x1E0CC6BB0]);
    swift_unknownObjectRetain();
    v29 = objc_msgSend(v28, sel_init);
    v41 = v53;
    v42 = v25;
    v43 = v26;
    v44 = v39;
    v45 = v38;
    v46 = v34;
    v47 = v27;
    v48 = v60;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v41, v29);
    v30 = v37;
    v31 = sub_1B1F328F4(v29, v40, v36);

    v32 = v35;
    if (v31)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1B1BA6F94(0xD000000000000014, 0x80000001B2331E20, v30, (uint64_t)&v49, v23, v24, (uint64_t)v31);

      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return (uint64_t)v31;
    }
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BA760C()
{
  uint64_t result;
  _QWORD v1[3];
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v1[1] = 0;
  v1[2] = 0;
  v1[0] = 66;
  v2 = -2;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  v6 = 768;
  result = sub_1B1BA7104(0xD000000000000014, 0x80000001B2331D30, (uint64_t)v1);
  if (!result)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA76E4()
{
  uint64_t result;
  _QWORD v1[3];
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v1[1] = 0;
  v1[2] = 0;
  v1[0] = 66;
  v2 = -2;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  v6 = 768;
  result = sub_1B1BA7104(0xD000000000000012, 0x80000001B2331EA0, (uint64_t)v1);
  if (!result)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BA77BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  id v7;
  BOOL v8;
  id v9;
  uint64_t result;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t);
  int v21;
  float32x4_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float64x2_t v30;
  float64x2_t v31;
  _OWORD v32[3];
  _BYTE v33[160];
  uint64_t v34[20];

  v4 = v3;
  v6 = *(void **)(v3 + 392);
  if (v6 && (v7 = v6, v8 = sub_1B1F9B900(a3), v7, v8))
  {
    v9 = a3;
    MEMORY[0x1B5E2064C]();
    if (*(_QWORD *)((*(_QWORD *)(v4 + 400) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v4 + 400) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    return sub_1B2228AD0();
  }
  else
  {
    sub_1B1BA2FBC();
    v11 = *(void **)(v4 + 392);
    *(_QWORD *)(v4 + 392) = a3;
    v12 = a3;

    **(_QWORD **)(v4 + 496) = 0;
    swift_unknownObjectRelease();
    v13 = objc_msgSend((id)sub_1B1BA6540(), sel_renderCommandEncoderWithDescriptor_, v12);
    if (v13)
    {
      v14 = v13;
      swift_getObjectType();
      v15 = (void *)sub_1B2228728();
      objc_msgSend(v14, sel_setLabel_, v15);

      *(_QWORD *)(v4 + 376) = v14;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v16 = *(_QWORD **)(v4 + 496);
      *v16 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v14);
      swift_unknownObjectRelease();
      sub_1B1BA802C(v4 + 624, (uint64_t)v33);
      sub_1B1BA802C((uint64_t)v33, (uint64_t)v34);
      if (sub_1B1B3C438(v34) == 1)
      {
        v17 = 0;
      }
      else
      {
        v18 = *(_QWORD *)(v4 + 632);
        ObjectType = swift_getObjectType();
        v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 160);
        swift_unknownObjectRetain();
        v17 = (void *)v20(ObjectType, v18);
        swift_unknownObjectRelease();
      }
      if (**(_QWORD **)(v4 + 496))
      {
        swift_getObjectType();
        v21 = *(_DWORD *)(v4 + 24) & 1;
        swift_unknownObjectRetain();
        sub_1B20BFC40(v17, v21);
        swift_unknownObjectRelease();
      }
      *(double *)v22.i64 = sub_1B1F9BA6C();
      v24 = vcvtq_f64_f32(*(float32x2_t *)v22.f32);
      v25 = vcvt_hight_f64_f32(v22);
      if ((_BYTE)v17)
      {
        v30 = v24;
        v31 = v25;
        v26 = (int8x16_t)xmmword_1B2244E10;
        if (v17 == 1)
          v26 = (int8x16_t)xmmword_1B227DB80;
        v28 = (float32x4_t)v26;
        v26.i32[0] = 1;
        v23.i32[0] = (int)v17;
        v29 = (float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v23, v26), 0), (int8x16_t)xmmword_1B227DB90, (int8x16_t)xmmword_1B2244E10);
        sub_1B1791524(0, (unint64_t *)&unk_1EEF5BAC0, (uint64_t (*)(uint64_t))type metadata accessor for MTLViewport, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_1B226CD10;
        *(float64x2_t *)(v27 + 32) = vaddq_f64(vmulq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)v28.f32)), v30);
        *(float64x2_t *)(v27 + 48) = vmulq_f64(v31, vcvt_hight_f64_f32(v28));
        *(_OWORD *)(v27 + 64) = xmmword_1B2245B90;
        *(float64x2_t *)(v27 + 80) = vaddq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v29.f32), v31), v30);
        *(float64x2_t *)(v27 + 96) = vmulq_f64(vcvt_hight_f64_f32(v29), v31);
        *(_OWORD *)(v27 + 112) = xmmword_1B2245B90;
        sub_1B2228FEC();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v32[0] = v24;
        v32[1] = v25;
        v32[2] = xmmword_1B2245B90;
        objc_msgSend(v14, sel_setViewport_, v32);
        swift_unknownObjectRelease();
      }
      return swift_unknownObjectRelease();
    }
    else
    {
      result = sub_1B2229688();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1B1BA7B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v2 = v1;
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 496) + 8 * a1))
  {
    if (*(_QWORD *)(v1 + 376))
    {
      v4 = swift_dynamicCastObjCProtocolConditional();
      if (v4)
      {
        v5 = (void *)v4;
        swift_unknownObjectRetain();
        v6 = objc_msgSend(v5, sel_renderCommandEncoder);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v7 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        objc_msgSend(v6, sel_setLabel_, v7, a1, 0x646F636E45627573, 0xEB000000005B7265, &unk_1EF028DD0);

        v8 = *(_QWORD *)(v2 + 496);
        *(_QWORD *)(v8 + 8 * a1) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v6);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(v2 + 496) + 8 * a1);
}

uint64_t sub_1B1BA7CEC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int32x4_t *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = 4 * a1;
  if (v1[102])
  {
    if (v1[104] >= v3)
      return v1[102];
  }
  else if (v3 < 1)
  {
    return v1[102];
  }
  v4 = sub_1B1BA2B0C(v3, 0);
  if (v4)
  {
    v6 = v4;
    v7 = v5;
    if (objc_msgSend(v4, sel_storageMode) == (id)2)
    {
      v8 = 0;
      if (!a1)
        goto LABEL_23;
    }
    else
    {
      v8 = (int32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v9 = v6;
      if (!a1)
      {
LABEL_23:
        v1[102] = v6;
        v1[103] = 0;
        v1[104] = v7;
        swift_unknownObjectRelease();
        return v1[102];
      }
    }
    v10 = a1 - 1;
    if ((unint64_t)(a1 - 1) >= 0xFFFFFFFF)
      v10 = 0xFFFFFFFFLL;
    if (v10 > 7)
    {
      v13 = v10 + 1;
      v14 = v13 & 7;
      if ((v13 & 7) == 0)
        v14 = 8;
      v11 = v13 - v14;
      v12 = v11 + 1;
      v15 = (int32x4_t)xmmword_1B2240BB0;
      v16 = v8 + 1;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      v19 = v11;
      do
      {
        v16[-1] = v15;
        *v16 = vaddq_s32(v15, v17);
        v15 = vaddq_s32(v15, v18);
        v16 += 2;
        v19 -= 8;
      }
      while (v19);
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v20 = v12 - 0x100000001;
    v21 = a1 - v12;
    while (1)
    {
      v8->i32[v11] = v11;
      if (!v21)
        goto LABEL_23;
      v11 = v12++;
      --v21;
      if (__CFADD__(v20++, 1))
      {
        sub_1B222967C();
        __break(1u);
        goto LABEL_23;
      }
    }
  }
  return v1[102];
}

uint64_t sub_1B1BA7EB0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = *(void **)(v2 + 368);
    if (!v3)
      goto LABEL_8;
    v4 = result;
    swift_retain();
    swift_unknownObjectRetain();
    sub_1B1BA2FBC();
    objc_msgSend(v3, sel_commit);
    swift_unknownObjectRelease();
    *(_QWORD *)(v2 + 368) = 0;
    swift_unknownObjectRelease();
    *(_BYTE *)(v2 + 32) = 0;
    result = swift_release();
    v2 = *(_QWORD *)(v4 + v1);
    if (v2)
    {
LABEL_8:
      if (*(_QWORD *)(v2 + 368))
      {
        swift_getObjectType();
        swift_retain();
        swift_unknownObjectRetain();
        sub_1B1F9BB9C();
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1B1BA7F94(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(void **)(v1 + 368);
    if (v2)
    {
      swift_retain();
      swift_unknownObjectRetain();
      sub_1B1BA2FBC();
      objc_msgSend(v2, sel_commit);
      swift_unknownObjectRelease();
      *(_QWORD *)(v1 + 368) = 0;
      swift_unknownObjectRelease();
      *(_BYTE *)(v1 + 32) = 0;
      return swift_release();
    }
  }
  return result;
}

void sub_1B1BA8014(uint64_t a1)
{
  uint64_t v1;

  sub_1B1BA12CC(a1, v1);
}

uint64_t sub_1B1BA801C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = result;
  a4[4] = a2;
  a4[5] = a3;
  return result;
}

uint64_t sub_1B1BA802C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1BA8088@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_1B1BA8094()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1BA80B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1D434C4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1B1BA80C0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1BA80E8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1BA8114()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  v2 = (*(uint64_t (**)(void))(v0 + 16))();
  return v1(v2);
}

uint64_t sub_1B1BA814C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1B1BA8170()
{
  return sub_1B2228FE0();
}

double sub_1B1BA8190(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t *sub_1B1BA81B0(uint64_t *a1)
{
  sub_1B1BA8218(*a1);
  return a1;
}

uint64_t sub_1B1BA8218(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1B1BA8250()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7A30)
  {
    sub_1B19F8F48(255, (unint64_t *)&qword_1ED4B7990);
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7A30);
  }
}

void sub_1B1BA82C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED4BF520)
  {
    v2 = type metadata accessor for NoHeapTextureAllocator();
    v4 = type metadata accessor for TexturePool(a1, v2, (uint64_t)&off_1E63A7D30, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED4BF520);
  }
}

void sub_1B1BA8320()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB230)
  {
    sub_1B19F8F48(255, &qword_1ED4BB228);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB230);
  }
}

unint64_t sub_1B1BA8384()
{
  unint64_t result;

  result = qword_1EEF5BAD0;
  if (!qword_1EEF5BAD0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for ResizingMode, &type metadata for ResizingMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5BAD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetalDeviceFeatures()
{
  return &type metadata for MetalDeviceFeatures;
}

unint64_t sub_1B1BA8424()
{
  unint64_t result;

  result = qword_1EEF5BB40;
  if (!qword_1EEF5BB40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E224, &type metadata for MetalDeviceFeatures);
    atomic_store(result, (unint64_t *)&qword_1EEF5BB40);
  }
  return result;
}

unint64_t sub_1B1BA846C()
{
  unint64_t result;

  result = qword_1EEF5BB48;
  if (!qword_1EEF5BB48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E1F4, &type metadata for MetalDeviceFeatures);
    atomic_store(result, (unint64_t *)&qword_1EEF5BB48);
  }
  return result;
}

unint64_t sub_1B1BA84B4()
{
  unint64_t result;

  result = qword_1EEF5BB50;
  if (!qword_1EEF5BB50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E24C, &type metadata for MetalDeviceFeatures);
    atomic_store(result, (unint64_t *)&qword_1EEF5BB50);
  }
  return result;
}

unint64_t sub_1B1BA84FC()
{
  unint64_t result;

  result = qword_1EEF5BB58;
  if (!qword_1EEF5BB58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E284, &type metadata for MetalDeviceFeatures);
    atomic_store(result, (unint64_t *)&qword_1EEF5BB58);
  }
  return result;
}

uint64_t sub_1B1BA8544(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)())((char *)sub_1B1BA8560 + 4 * byte_1B227E390[a3 >> 5]))();
}

uint64_t sub_1B1BA8560()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for SerializationError(uint64_t a1)
{
  return sub_1B1BA857C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1B1BA857C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)())((char *)sub_1B1BA8598 + 4 * byte_1B227E398[a3 >> 5]))();
}

uint64_t sub_1B1BA8598()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s3VFX18SerializationErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1BA8544(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SerializationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1BA8544(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1B1BA857C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SerializationError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1B1BA857C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SerializationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x79 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 121);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x78)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SerializationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x78)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 121;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x79)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x79)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1B1BA872C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 5;
}

uint64_t sub_1B1BA8738(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t sub_1B1BA8748(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for SerializationError()
{
  return &type metadata for SerializationError;
}

void sub_1B1BA8770(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t sub_1B1BA87A8()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD00000000000001CLL;
}

void sub_1B1BA8948(int a1, int a2, unsigned __int8 a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  id v15;

  v15 = v13;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1A203F8();
  sub_1B22295EC();
  sub_1B1BA857C((uint64_t)v13, v12, a3);
  JUMPOUT(0x1B1BA8930);
}

void sub_1B1BA89D4()
{
  uint64_t v0;

  sub_1B1BA8770(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1B1BA89E0()
{
  sub_1B1B6AE48();
  return sub_1B2229FE8();
}

uint64_t sub_1B1BA8A28(void (*a1)(_QWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v19;
    v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v9 = *v8;
      v17[0] = *(v8 - 1);
      v17[1] = v9;
      swift_bridgeObjectRetain();
      a1(v18, v17);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v11 = v18[0];
      v10 = v18[1];
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B2029FFC(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      v8 += 2;
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1B1BA8B48(void (*a1)(_QWORD *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v16;
  _QWORD v17[2];
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v18;
    for (i = (char *)(a3 + 32); ; ++i)
    {
      v16 = *i;
      a1(v17, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1B2029FFC(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = v6 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA8C50(void (*a1)(_QWORD *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  return sub_1B1BA8CA0(a1, a2, a3);
}

uint64_t sub_1B1BA8C64(void (*a1)(_QWORD *__return_ptr, __int16 *), uint64_t a2, uint64_t a3)
{
  return sub_1B1BA8DA4(a1, a2, a3);
}

uint64_t sub_1B1BA8C78(void (*a1)(_QWORD *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  return sub_1B1BA8EA8(a1, a2, a3);
}

uint64_t sub_1B1BA8C8C(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_1B1BA8FAC(a1, a2, a3);
}

uint64_t sub_1B1BA8CA0(void (*a1)(_QWORD *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v19;
    v8 = (char *)(a3 + 32);
    while (1)
    {
      v9 = *v8++;
      v17 = v9;
      a1(v18, &v17);
      if (v4)
        break;
      v4 = 0;
      v11 = v18[0];
      v10 = v18[1];
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B2029FFC(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA8DA4(void (*a1)(_QWORD *__return_ptr, __int16 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  __int16 *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v19;
    v8 = (__int16 *)(a3 + 32);
    while (1)
    {
      v9 = *v8++;
      v17 = v9;
      a1(v18, &v17);
      if (v4)
        break;
      v4 = 0;
      v11 = v18[0];
      v10 = v18[1];
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B2029FFC(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA8EA8(void (*a1)(_QWORD *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v19;
    v8 = (int *)(a3 + 32);
    while (1)
    {
      v9 = *v8++;
      v17 = v9;
      a1(v18, &v17);
      if (v4)
        break;
      v4 = 0;
      v11 = v18[0];
      v10 = v18[1];
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B2029FFC(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA8FAC(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v19;
    v8 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v9 = *v8++;
      v17 = v9;
      a1(v18, &v17);
      if (v4)
        break;
      v4 = 0;
      v11 = v18[0];
      v10 = v18[1];
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B2029FFC(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA90B0(void (*a1)(_QWORD *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v16;
  _QWORD v17[2];
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v18;
    for (i = (int *)(a3 + 32); ; ++i)
    {
      v16 = *i;
      a1(v17, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1B2029FFC(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = v6 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA91B8(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v18;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v16 = *i;
      a1(v17, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1B2029FFC(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = v6 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA92C0(void (*a1)(_QWORD *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  return sub_1B1BA92D4(a1, a2, a3);
}

uint64_t sub_1B1BA92D4(void (*a1)(_QWORD *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  __int128 *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v16;
  _QWORD v17[2];
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v5, 0);
    v6 = v18;
    for (i = (__int128 *)(a3 + 32); ; ++i)
    {
      v16 = *i;
      a1(v17, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1B2029FFC(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = v6 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA93DC(void (*a1)(__int128 *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  __int128 *i;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B202B13C(0, v5, 0);
    v6 = v20;
    for (i = (__int128 *)(a3 + 32); ; ++i)
    {
      v17 = *i;
      a1(&v18, &v17);
      if (v4)
        break;
      v4 = 0;
      v10 = v18;
      v11 = v19;
      v20 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v18;
        sub_1B202B13C(v12 > 1, v13 + 1, 1);
        v10 = v16;
        v6 = v20;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 48) = v11;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1BA94FC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  ValueMetadata *v5;
  _UNKNOWN **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  _UNKNOWN **v13;

  v2 = a1 + 1;
  if (a1[1])
  {
    v3 = ptr_auth_strip() - (_QWORD)v2;
    if (sub_1B1BAAABC(*a1) == 14)
    {
      v4 = (unint64_t *)&unk_1EEF5BB78;
      v5 = &type metadata for _ClassContextDescriptor;
      v6 = &off_1E63AD168;
    }
    else
    {
      v4 = (unint64_t *)&unk_1EEF5BB70;
      v5 = &type metadata for _StructContextDescriptor;
      v6 = &off_1E63AF700;
    }
    sub_1B1BAAB98(0, v4, (uint64_t)v5, (uint64_t)v6);
    v9 = v8;
    *((_QWORD *)&v12 + 1) = v8;
    v13 = &off_1E638BB28;
    *(_QWORD *)&v11 = (char *)v2 + v3;
    sub_1B19FA070(&v11, v8);
    v7 = sub_1B1A1B9BC(v9);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    sub_1B1BAA9D8((uint64_t)&v11);
    return 0;
  }
  return v7;
}

uint64_t sub_1B1BA95F0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;

  v3 = a1 + 8;
  v2 = a1[8];
  if (v2)
  {
    v4 = ptr_auth_strip(v2) - (_QWORD)v3;
    if (sub_1B1BAAABC(*a1) == 14)
    {
      v5 = (unint64_t *)&unk_1EEF5BB78;
      v6 = &type metadata for _ClassContextDescriptor;
      v7 = &off_1E63AD168;
    }
    else
    {
      v5 = (unint64_t *)&unk_1EEF5BB70;
      v6 = &type metadata for _StructContextDescriptor;
      v7 = &off_1E63AF700;
    }
    sub_1B1BAAB98(0, v5, (uint64_t)v6, (uint64_t)v7);
    v10 = v9;
    *((_QWORD *)&v13 + 1) = v9;
    v14 = &off_1E638BB28;
    *(_QWORD *)&v12 = (char *)v3 + v4;
    sub_1B19FA070(&v12, v9);
    v8 = sub_1B1A1B9BC(v10);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v12);
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    sub_1B1BAA9D8((uint64_t)&v12);
    return 0;
  }
  return v8;
}

uint64_t sub_1B1BA96E4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  ValueMetadata *v5;
  _UNKNOWN **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t j;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;

  v37 = a1;
  v2 = a1 + 1;
  if (!a1[1])
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    sub_1B1BAA9D8((uint64_t)&v31);
    return 0;
  }
  v3 = ptr_auth_strip() - (_QWORD)v2;
  if (sub_1B1BAAABC(*a1) == 14)
  {
    v4 = (unint64_t *)&unk_1EEF5BB78;
    v5 = &type metadata for _ClassContextDescriptor;
    v6 = &off_1E63AD168;
  }
  else
  {
    v4 = (unint64_t *)&unk_1EEF5BB70;
    v5 = &type metadata for _StructContextDescriptor;
    v6 = &off_1E63AF700;
  }
  sub_1B1BAAB98(0, v4, (uint64_t)v5, (uint64_t)v6);
  *((_QWORD *)&v32 + 1) = v7;
  v33 = &off_1E638BB28;
  *(_QWORD *)&v31 = (char *)v2 + v3;
  sub_1B1A02518(&v31, (uint64_t)v34);
  v8 = v35;
  v9 = v36;
  sub_1B19FA070(v34, v35);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
  if (!v10)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
    return 0;
  }
  v11 = v10;
  v12 = sub_1B1BAAABC(*a1);
  v13 = v35;
  v14 = v36;
  sub_1B19FA070(v34, v35);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v30 = v11;
  v17 = MEMORY[0x1E0DEE9D8];
  if (v12 == 14)
  {
    if (v15)
    {
      *(_QWORD *)&v31 = MEMORY[0x1E0DEE9D8];
      sub_1B202A10C(0, v15 & ~(v15 >> 63), 0);
      v17 = v31;
      v18 = &v37[v11];
      v19 = *(_QWORD *)(v31 + 16);
      for (i = 1; ; ++i)
      {
        v21 = *v18;
        *(_QWORD *)&v31 = v17;
        v22 = *(_QWORD *)(v17 + 24);
        if (v19 >= v22 >> 1)
        {
          sub_1B202A10C(v22 > 1, v19 + 1, 1);
          v17 = v31;
        }
        *(_QWORD *)(v17 + 16) = v19 + 1;
        *(_QWORD *)(v17 + 8 * v19 + 32) = v21;
        if (v15 == i)
          break;
        v18 = &v37[i + v11];
        ++v19;
      }
    }
  }
  else if (v15)
  {
    *(_QWORD *)&v31 = MEMORY[0x1E0DEE9D8];
    sub_1B202A10C(0, v15 & ~(v15 >> 63), 0);
    v23 = 0;
    v17 = v31;
    v24 = &v37[v11];
    v25 = *(_QWORD *)(v31 + 16);
    for (j = v15 - 1; ; --j)
    {
      v27 = *(int *)v24;
      *(_QWORD *)&v31 = v17;
      v28 = *(_QWORD *)(v17 + 24);
      if (v25 >= v28 >> 1)
      {
        sub_1B202A10C(v28 > 1, v25 + 1, 1);
        v17 = v31;
      }
      *(_QWORD *)(v17 + 16) = v25 + 1;
      *(_QWORD *)(v17 + 8 * v25 + 32) = v27;
      if (!j)
        break;
      v24 = (uint64_t *)((char *)&v37[v30] + 4 * ++v23);
      ++v25;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
  return v17;
}

uint64_t sub_1B1BA99B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t j;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _UNKNOWN **v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  v38 = a1;
  v3 = a1 + 8;
  v2 = a1[8];
  if (!v2)
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    sub_1B1BAA9D8((uint64_t)&v32);
    return 0;
  }
  v4 = ptr_auth_strip(v2) - (_QWORD)v3;
  if (sub_1B1BAAABC(*a1) == 14)
  {
    v5 = (unint64_t *)&unk_1EEF5BB78;
    v6 = &type metadata for _ClassContextDescriptor;
    v7 = &off_1E63AD168;
  }
  else
  {
    v5 = (unint64_t *)&unk_1EEF5BB70;
    v6 = &type metadata for _StructContextDescriptor;
    v7 = &off_1E63AF700;
  }
  sub_1B1BAAB98(0, v5, (uint64_t)v6, (uint64_t)v7);
  *((_QWORD *)&v33 + 1) = v8;
  v34 = &off_1E638BB28;
  *(_QWORD *)&v32 = (char *)v3 + v4;
  sub_1B1A02518(&v32, (uint64_t)v35);
  v9 = v36;
  v10 = v37;
  sub_1B19FA070(v35, v36);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  if (!v11)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v35);
    return 0;
  }
  v12 = v11;
  v13 = sub_1B1BAAABC(*a1);
  v14 = v36;
  v15 = v37;
  sub_1B19FA070(v35, v36);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v31 = v12;
  v18 = MEMORY[0x1E0DEE9D8];
  if (v13 == 14)
  {
    if (v16)
    {
      *(_QWORD *)&v32 = MEMORY[0x1E0DEE9D8];
      sub_1B202A10C(0, v16 & ~(v16 >> 63), 0);
      v18 = v32;
      v19 = &v38[v12];
      v20 = *(_QWORD *)(v32 + 16);
      for (i = 1; ; ++i)
      {
        v22 = *v19;
        *(_QWORD *)&v32 = v18;
        v23 = *(_QWORD *)(v18 + 24);
        if (v20 >= v23 >> 1)
        {
          sub_1B202A10C(v23 > 1, v20 + 1, 1);
          v18 = v32;
        }
        *(_QWORD *)(v18 + 16) = v20 + 1;
        *(_QWORD *)(v18 + 8 * v20 + 32) = v22;
        if (v16 == i)
          break;
        v19 = &v38[i + v12];
        ++v20;
      }
    }
  }
  else if (v16)
  {
    *(_QWORD *)&v32 = MEMORY[0x1E0DEE9D8];
    sub_1B202A10C(0, v16 & ~(v16 >> 63), 0);
    v24 = 0;
    v18 = v32;
    v25 = &v38[v12];
    v26 = *(_QWORD *)(v32 + 16);
    for (j = v16 - 1; ; --j)
    {
      v28 = *(int *)v25;
      *(_QWORD *)&v32 = v18;
      v29 = *(_QWORD *)(v18 + 24);
      if (v26 >= v29 >> 1)
      {
        sub_1B202A10C(v29 > 1, v26 + 1, 1);
        v18 = v32;
      }
      *(_QWORD *)(v18 + 16) = v26 + 1;
      *(_QWORD *)(v18 + 8 * v26 + 32) = v28;
      if (!j)
        break;
      v25 = (uint64_t *)((char *)&v38[v31] + 4 * ++v24);
      ++v26;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v35);
  return v18;
}

_QWORD *sub_1B1BA9C84(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  ValueMetadata *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  _UNKNOWN **v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;

  v2 = sub_1B1BA96E4(a1);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = v2;
  v55 = sub_1B1BA94FC(a1);
  if (v55)
  {
    v5 = 0;
    v6 = a1 + 1;
    v7 = a1 + 2;
    v53 = v4 + 32;
    v54 = v3;
    while (!*v6)
    {
      v58 = 0;
      v56 = 0u;
      v57 = 0u;
      sub_1B1BAA9D8((uint64_t)&v56);
LABEL_5:
      if (++v5 == v55)
      {
        swift_bridgeObjectRelease();
        return v54;
      }
    }
    v8 = ((uint64_t (*)(void))ptr_auth_strip)();
    if (sub_1B1BAAABC(*a1) == 14)
    {
      v9 = (unint64_t *)&unk_1EEF5BB78;
      v10 = &type metadata for _ClassContextDescriptor;
      v11 = &off_1E63AD168;
    }
    else
    {
      v9 = (unint64_t *)&unk_1EEF5BB70;
      v10 = &type metadata for _StructContextDescriptor;
      v11 = &off_1E63AF700;
    }
    sub_1B1BAAB98(0, v9, (uint64_t)v10, (uint64_t)v11);
    *((_QWORD *)&v57 + 1) = v12;
    v58 = &off_1E638BB28;
    *(_QWORD *)&v56 = v8;
    sub_1B1A02518(&v56, (uint64_t)v59);
    v13 = v60;
    v14 = v61;
    sub_1B19FA070(v59, v60);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    v16 = ptr_auth_strip(*v6) + v15;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v59);
    v17 = *(int *)(v16 + 28);
    if ((_DWORD)v17)
    {
      v59[0] = v3;
      sub_1B202A144(0, v17 & ~(v17 >> 63), 0);
      v18 = (_QWORD *)v59[0];
      v19 = v16 + 32;
      v20 = *(_QWORD *)(v59[0] + 16);
      do
      {
        v59[0] = v18;
        v21 = v18[3];
        if (v20 >= v21 >> 1)
        {
          sub_1B202A144(v21 > 1, v20 + 1, 1);
          v18 = (_QWORD *)v59[0];
        }
        v18[2] = v20 + 1;
        v18[v20 + 4] = v19;
        v19 += 12;
        ++v20;
        --v17;
      }
      while (v17);
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v7 = a1 + 2;
    }
    else
    {
      v18 = v3;
    }
    v22 = v18[v5 + 4];
    swift_bridgeObjectRelease();
    if (v22 + 8 + *(int *)(v22 + 8))
    {
      v23 = sub_1B22288B4();
      v25 = v24;
      v26 = *v6;
      if (*v6)
        goto LABEL_19;
    }
    else
    {
      v23 = 0;
      v25 = 0xE000000000000000;
      v26 = *v6;
      if (*v6)
      {
LABEL_19:
        v27 = ptr_auth_strip(v26);
        if (sub_1B1BAAABC(*a1) == 14)
        {
          v28 = (unint64_t *)&unk_1EEF5BB78;
          v29 = &type metadata for _ClassContextDescriptor;
          v30 = &off_1E63AD168;
        }
        else
        {
          v28 = (unint64_t *)&unk_1EEF5BB70;
          v29 = &type metadata for _StructContextDescriptor;
          v30 = &off_1E63AF700;
        }
        sub_1B1BAAB98(0, v28, (uint64_t)v29, (uint64_t)v30);
        *((_QWORD *)&v57 + 1) = v31;
        v58 = &off_1E638BB28;
        *(_QWORD *)&v56 = v27;
        sub_1B1A02518(&v56, (uint64_t)v59);
        v33 = v60;
        v32 = v61;
        sub_1B19FA070(v59, v60);
        v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 32))(v33, v32);
        v35 = ptr_auth_strip(*v6) + v34;
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v59);
        v36 = *(int *)(v35 + 28);
        if ((_DWORD)v36)
        {
          v59[0] = v3;
          sub_1B202A144(0, v36 & ~(v36 >> 63), 0);
          v37 = (_QWORD *)v59[0];
          v38 = v35 + 32;
          v39 = *(_QWORD *)(v59[0] + 16);
          do
          {
            v59[0] = v37;
            v40 = v37[3];
            if (v39 >= v40 >> 1)
            {
              sub_1B202A144(v40 > 1, v39 + 1, 1);
              v37 = (_QWORD *)v59[0];
            }
            v37[2] = v39 + 1;
            v37[v39 + 4] = v38;
            v38 += 12;
            ++v39;
            --v36;
          }
          while (v36);
          v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v7 = a1 + 2;
        }
        else
        {
          v37 = v3;
        }
        v41 = v37[v5 + 4];
        swift_bridgeObjectRelease();
        v42 = v41 + 4 + *(int *)(v41 + 4);
        if (v42)
        {
          if (*v6)
          {
            v43 = ptr_auth_strip(*v6);
            if (*v7)
            {
LABEL_34:
              v44 = ptr_auth_strip(v7);
              goto LABEL_37;
            }
          }
          else
          {
            v43 = 0;
            if (*v7)
              goto LABEL_34;
          }
          v44 = 0;
LABEL_37:
          v45 = MEMORY[0x1B5E23E68](v42, 256, v43, v44);
          if (v45)
          {
            v46 = v45;
            v47 = *(_QWORD *)(v53 + 8 * v5);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v48 = v54;
            else
              v48 = sub_1B1C62F3C(0, v54[2] + 1, 1, v54);
            v50 = v48[2];
            v49 = v48[3];
            if (v50 >= v49 >> 1)
              v48 = sub_1B1C62F3C(v49 > 1, v50 + 1, 1, v48);
            v48[2] = v50 + 1;
            v54 = v48;
            v51 = &v48[4 * v50];
            v51[4] = v23;
            v51[5] = v25;
            v51[6] = v46;
            v51[7] = v47;
            v7 = a1 + 2;
            goto LABEL_5;
          }
        }
LABEL_43:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    v58 = 0;
    v56 = 0u;
    v57 = 0u;
    sub_1B1BAA9D8((uint64_t)&v56);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

_QWORD *sub_1B1BAA144(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v1 = sub_1B1BAA25C(a1);
  v3 = v1;
  if (v1)
  {
    v4 = v2;
    if ((v2 & 0x100000000) == 0)
    {
      v5 = v1[2];
      if (v5)
      {
        v6 = v1 + 7;
        v7 = v1[7];
        v16 = MEMORY[0x1E0DEE9D8];
        sub_1B202A160(0, v5, 0);
        v8 = v4 - v7;
        do
        {
          v9 = *(v6 - 3);
          v10 = *v6;
          v11 = *(_QWORD *)(v16 + 16);
          v12 = *(_QWORD *)(v16 + 24);
          v15 = *((_OWORD *)v6 - 1);
          swift_bridgeObjectRetain();
          if (v11 >= v12 >> 1)
            sub_1B202A160(v12 > 1, v11 + 1, 1);
          *(_QWORD *)(v16 + 16) = v11 + 1;
          v13 = v16 + 32 * v11;
          *(_QWORD *)(v13 + 32) = v9;
          v6 += 4;
          *(_OWORD *)(v13 + 40) = v15;
          *(_QWORD *)(v13 + 56) = v8 + v10;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
        return (_QWORD *)v16;
      }
    }
  }
  return v3;
}

_QWORD *sub_1B1BAA25C(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  ValueMetadata *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  _UNKNOWN **v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;

  v2 = sub_1B1BA99B4(a1);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v2)
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v59 = (uint64_t *)a1[1];
    if (!v59)
      return v7;
    goto LABEL_56;
  }
  v4 = v2;
  v69 = sub_1B1BA95F0(a1);
  if (!v69)
  {
    swift_bridgeObjectRelease();
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v59 = (uint64_t *)a1[1];
    if (v59)
      goto LABEL_56;
    return v7;
  }
  v5 = 0;
  v6 = a1 + 8;
  v68 = v4 + 32;
  v7 = v3;
  do
  {
    if (!*v6)
    {
      v72 = 0;
      v70 = 0u;
      v71 = 0u;
      sub_1B1BAA9D8((uint64_t)&v70);
      goto LABEL_5;
    }
    v8 = ptr_auth_strip(*v6);
    if (sub_1B1BAAABC(*a1) == 14)
    {
      v9 = (unint64_t *)&unk_1EEF5BB78;
      v10 = &type metadata for _ClassContextDescriptor;
      v11 = &off_1E63AD168;
    }
    else
    {
      v9 = (unint64_t *)&unk_1EEF5BB70;
      v10 = &type metadata for _StructContextDescriptor;
      v11 = &off_1E63AF700;
    }
    sub_1B1BAAB98(0, v9, (uint64_t)v10, (uint64_t)v11);
    *((_QWORD *)&v71 + 1) = v12;
    v72 = &off_1E638BB28;
    *(_QWORD *)&v70 = v8;
    sub_1B1A02518(&v70, (uint64_t)v73);
    v13 = v74;
    v14 = v75;
    sub_1B19FA070(v73, v74);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    v16 = ptr_auth_strip(*v6) + v15;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v73);
    v17 = *(int *)(v16 + 28);
    if ((_DWORD)v17)
    {
      v73[0] = v3;
      sub_1B202A144(0, v17 & ~(v17 >> 63), 0);
      v18 = (_QWORD *)v73[0];
      v19 = v16 + 32;
      v20 = *(_QWORD *)(v73[0] + 16);
      do
      {
        v73[0] = v18;
        v21 = v18[3];
        if (v20 >= v21 >> 1)
        {
          sub_1B202A144(v21 > 1, v20 + 1, 1);
          v18 = (_QWORD *)v73[0];
        }
        v18[2] = v20 + 1;
        v18[v20 + 4] = v19;
        v19 += 12;
        ++v20;
        --v17;
      }
      while (v17);
    }
    else
    {
      v18 = v3;
    }
    v22 = v18[v5 + 4];
    swift_bridgeObjectRelease();
    if (v22 + 8 + *(int *)(v22 + 8))
    {
      v23 = sub_1B22288B4();
      v25 = v24;
      v26 = *v6;
      if (!*v6)
        goto LABEL_22;
    }
    else
    {
      v23 = 0;
      v25 = 0xE000000000000000;
      v26 = *v6;
      if (!*v6)
      {
LABEL_22:
        v72 = 0;
        v70 = 0u;
        v71 = 0u;
        sub_1B1BAA9D8((uint64_t)&v70);
LABEL_50:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    v27 = ptr_auth_strip(v26);
    if (sub_1B1BAAABC(*a1) == 14)
    {
      v28 = (unint64_t *)&unk_1EEF5BB78;
      v29 = &type metadata for _ClassContextDescriptor;
      v30 = &off_1E63AD168;
    }
    else
    {
      v28 = (unint64_t *)&unk_1EEF5BB70;
      v29 = &type metadata for _StructContextDescriptor;
      v30 = &off_1E63AF700;
    }
    sub_1B1BAAB98(0, v28, (uint64_t)v29, (uint64_t)v30);
    *((_QWORD *)&v71 + 1) = v31;
    v72 = &off_1E638BB28;
    *(_QWORD *)&v70 = v27;
    sub_1B1A02518(&v70, (uint64_t)v73);
    v32 = v74;
    v33 = v75;
    sub_1B19FA070(v73, v74);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 32))(v32, v33);
    v35 = ptr_auth_strip(*v6) + v34;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v73);
    v36 = *(int *)(v35 + 28);
    if ((_DWORD)v36)
    {
      v73[0] = MEMORY[0x1E0DEE9D8];
      sub_1B202A144(0, v36 & ~(v36 >> 63), 0);
      v37 = v73[0];
      v38 = v35 + 32;
      v39 = *(_QWORD *)(v73[0] + 16);
      do
      {
        v73[0] = v37;
        v40 = *(_QWORD *)(v37 + 24);
        if (v39 >= v40 >> 1)
        {
          sub_1B202A144(v40 > 1, v39 + 1, 1);
          v37 = v73[0];
        }
        *(_QWORD *)(v37 + 16) = v39 + 1;
        *(_QWORD *)(v37 + 8 * v39 + 32) = v38;
        v38 += 12;
        ++v39;
        --v36;
      }
      while (v36);
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v37 = MEMORY[0x1E0DEE9D8];
    }
    v41 = *(_QWORD *)(v37 + 8 * v5 + 32);
    swift_bridgeObjectRelease();
    v42 = v41 + 4 + *(int *)(v41 + 4);
    if (!v42)
      goto LABEL_50;
    if (*v6)
    {
      v43 = ptr_auth_strip(*v6);
      v44 = a1[1];
      if (!v44)
        goto LABEL_40;
    }
    else
    {
      v43 = 0;
      v44 = a1[1];
      if (!v44)
        goto LABEL_40;
    }
    if (sub_1B1BAAABC(*(_QWORD *)v44) != 14)
    {
LABEL_40:
      v48 = 0;
      goto LABEL_41;
    }
    v45 = (*(_DWORD *)(v44 + 56) - *(_DWORD *)(v44 + 60));
    v46 = v45 - 80;
    v47 = v45 - 73;
    if ((*(_DWORD *)(v44 + 56) - *(_DWORD *)(v44 + 60)) >= 0x50uLL)
      v47 = v46;
    v48 = v47 >> 3;
LABEL_41:
    v49 = &a1[v48];
    v51 = v49[10];
    v50 = v49 + 10;
    if (v51)
      v52 = v50;
    else
      v52 = 0;
    v53 = MEMORY[0x1B5E23E68](v42, 256, v43, v52);
    if (!v53)
      goto LABEL_50;
    v54 = v53;
    v55 = *(_QWORD *)(v68 + 8 * v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1B1C62F3C(0, v7[2] + 1, 1, v7);
    v57 = v7[2];
    v56 = v7[3];
    if (v57 >= v56 >> 1)
      v7 = sub_1B1C62F3C(v56 > 1, v57 + 1, 1, v7);
    v7[2] = v57 + 1;
    v58 = &v7[4 * v57];
    v58[4] = v23;
    v58[5] = v25;
    v58[6] = v54;
    v58[7] = v55;
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_5:
    ++v5;
  }
  while (v5 != v69);
  swift_bridgeObjectRelease();
  v59 = (uint64_t *)a1[1];
  if (!v59)
    return v7;
LABEL_56:
  if (sub_1B1BAAABC(*v59) == 14)
  {
    v73[0] = v59;
    sub_1B1B9CCA4();
    if (sub_1B22287AC() == 0x6A624F7466697753 && v60 == 0xEB00000000746365)
    {
LABEL_59:
      swift_bridgeObjectRelease();
    }
    else
    {
      v61 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v61 & 1) == 0)
      {
        v73[0] = v59;
        if (sub_1B22287AC() == 0xD000000000000012 && v63 == 0x80000001B2332250)
          goto LABEL_59;
        v64 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v64 & 1) == 0)
        {
          v73[0] = v59;
          if (sub_1B22287AC() == 0xD000000000000013 && v65 == 0x80000001B2332270)
            goto LABEL_59;
          v66 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v66 & 1) == 0)
          {
            v67 = sub_1B1BAA25C(v59);
            if (v67)
            {
              if (!*(_QWORD *)(v67 + 16))
                goto LABEL_59;
              v73[0] = v67;
              sub_1B19F4844((uint64_t)v7);
              return (_QWORD *)v73[0];
            }
          }
        }
      }
    }
  }
  return v7;
}

uint64_t type metadata accessor for Metadata.Class.NameAndType()
{
  return objc_opt_self();
}

uint64_t sub_1B1BAA994()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Metadata.Struct.NameAndType()
{
  return objc_opt_self();
}

uint64_t sub_1B1BAA9D8(uint64_t a1)
{
  uint64_t v2;

  sub_1B1BAAA14();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B1BAAA14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5BB60)
  {
    sub_1B1BAAA68();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5BB60);
  }
}

unint64_t sub_1B1BAAA68()
{
  unint64_t result;

  result = qword_1EEF5BB68;
  if (!qword_1EEF5BB68)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5BB68);
  }
  return result;
}

uint64_t sub_1B1BAAABC(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  if (a1 <= 1023)
  {
    switch(a1)
    {
      case 768:
        result = 3;
        break;
      case 769:
        result = 5;
        break;
      case 770:
        result = 6;
        break;
      case 771:
        result = 7;
        break;
      case 772:
        result = 8;
        break;
      case 773:
        result = 9;
        break;
      case 774:
        result = 10;
        break;
      default:
        v2 = a1 - 512;
        result = 0;
        switch(v2)
        {
          case 0:
            return result;
          case 1:
            result = 1;
            break;
          case 2:
            result = 2;
            break;
          case 3:
            result = 4;
            break;
          default:
            return 14;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 1024:
        return 11;
      case 1280:
        return 12;
      case 1281:
        return 13;
      default:
        return 14;
    }
  }
  return result;
}

void sub_1B1BAAB98(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for ContextDescriptor(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

ValueMetadata *type metadata accessor for _Metadata._Struct()
{
  return &type metadata for _Metadata._Struct;
}

ValueMetadata *type metadata accessor for _Metadata()
{
  return &type metadata for _Metadata;
}

uint64_t getEnumTagSinglePayload for _Metadata._Class(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _Metadata._Class(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Metadata._Class()
{
  return &type metadata for _Metadata._Class;
}

ValueMetadata *type metadata accessor for Metadata()
{
  return &type metadata for Metadata;
}

unint64_t sub_1B1BAACE4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B1BAAD08();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B1BAAD08()
{
  unint64_t result;

  result = qword_1EEF5BB80;
  if (!qword_1EEF5BB80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E4F0, &type metadata for Metadata);
    atomic_store(result, (unint64_t *)&qword_1EEF5BB80);
  }
  return result;
}

unint64_t sub_1B1BAAD4C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B1BAAD70();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B1BAAD70()
{
  unint64_t result;

  result = qword_1EEF5BB88;
  if (!qword_1EEF5BB88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E518, &type metadata for Metadata);
    atomic_store(result, (unint64_t *)&qword_1EEF5BB88);
  }
  return result;
}

uint64_t sub_1B1BAADB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  unsigned int v8;
  float32x4_t v9;
  int32x4_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int8x16_t v51[2];
  char v52;
  _OWORD v53[2];
  uint64_t v54;
  _BYTE v55[40];
  _OWORD v56[2];
  uint64_t v57;

  v2 = v1;
  v3 = *a1;
  v4 = a1[4];
  swift_retain();
  v5 = 0;
  sub_1B1FE08F4(v4, v3);
  v7 = v6;
  sub_1B1D15DF4(v4, (uint64_t)v39);
  sub_1B19F66A0((uint64_t)v39, (uint64_t)v51, &qword_1ED4BA220);
  if (v52)
    v8 = -1;
  else
    v8 = 0;
  v9 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v8), (int8x16_t)xmmword_1B227E550, v51[1]);
  v10 = vcltzq_f32(v9);
  v11 = v10.i32[1];
  if (v10.i32[1] >= v10.i32[0])
    v11 = v10.i32[0];
  if (v10.i32[2] < v11)
    v11 = v10.i32[2];
  if (v11 < 0)
    return swift_release();
  v37 = v9;
  if (v52)
    v12 = -1;
  else
    v12 = 0;
  v35 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v12), (int8x16_t)xmmword_1B2244E20, v51[0]);
  v13 = *(_QWORD *)(sub_1B1E52BD0() + 16);
  swift_release();
  v32 = v13;
  vfx_uniform_grid_init(v13, (__n128)vsubq_f32(v35, v37), (__n128)vaddq_f32(v37, v35), v7);
  v14 = *(_OWORD *)(v2 + 32);
  v56[0] = *(_OWORD *)(v2 + 16);
  v56[1] = v14;
  v57 = *(_QWORD *)(v2 + 48);
  sub_1B1E8FCE4(v3, (uint64_t)v56, 0x200000000, v40);
  sub_1B19F66A0((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v41[0])
  {
LABEL_25:
    vfx_uniform_grid_finalize(v32);
    return swift_release();
  }
  v48 = v41[0];
  v49 = v41[1];
  v50 = v42;
  if (v47 < 1 || (v15 = v44) == 0)
  {
LABEL_24:
    sub_1B19ED748(v40);
    goto LABEL_25;
  }
  v16 = v46;
  v17 = v43;
  v18 = v46[4];
  v19 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v29 = v46 + 8;
  v30 = (uint64_t)(v46 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v20 = (uint64_t *)(v17 + 24);
  v31 = v19;
  while (1)
  {
    v38 = v5;
    v21 = *((unsigned int *)v20 - 6);
    v22 = (uint64_t *)*(v20 - 1);
    v23 = v20[2];
    v34 = *v20;
    v36 = *((unsigned int *)v20 - 5);
    v33 = v20[1];
    if (v19)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v18);
    sub_1B19F66A0(v30, (uint64_t)v55, &qword_1ED4B7FB0);
    v25 = v16[4];
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v16[6] = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    v16[7] = v26;
    v29[1] = 0;
    v29[2] = 0;
    *v29 = 0;
    swift_release();
    v27 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v22, v34, v33, (uint64_t)v16);
    if (v36 - v21 < 0)
      break;
    vfx_uniform_grid_add_points(v32, (char *)(v27 + 16 * v21), v36 - v21);
    v53[0] = v48;
    v53[1] = v49;
    v54 = v50;
    v5 = v38;
    sub_1B1F05D48(v16, (unsigned __int16 **)v53, (uint64_t)v55);
    sub_1B1F03804((char *)v23);
    ecs_stack_allocator_pop_snapshot(v18);
    v19 = v31;
    if (v31)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 376));
    }
    swift_release();
    v20 += 6;
    if (!--v15)
    {
      sub_1B19ED748(v40);
      goto LABEL_24;
    }
  }
  result = sub_1B222967C();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ParticleGenerateGrid.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1BAB1C4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 48);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 80);
  sub_1B1E40AF4(1, (uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1BAB248()
{
  return "ComputeNN.CPU";
}

uint64_t sub_1B1BAB25C()
{
  return type metadata accessor for ParticleGenerateGrid.System();
}

ValueMetadata *type metadata accessor for ParticleGenerateGrid()
{
  return &type metadata for ParticleGenerateGrid;
}

uint64_t sub_1B1BAB288()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1BAB290()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1BAB298()
{
  return swift_bridgeObjectRetain();
}

float sub_1B1BAB2A0()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

id sub_1B1BAB2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1BAE700(&OBJC_IVAR____TtC3VFX19VideoCaptureSession_session, (SEL *)&selRef_stopRunning, a3, (uint64_t (*)(uint64_t))type metadata accessor for VideoCaptureSession);
}

char *sub_1B1BAB338(void *a1, void *a2, int a3)
{
  char *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  id v10;
  CVMetalTextureCacheRef v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  int v24;
  id v25;
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t inited;
  uint64_t v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  int v39;
  uint64_t v40;
  const char *v41;
  id v42;
  void *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char *v54;
  id v55;
  __CVMetalTextureCache *v56;
  uint64_t v58;
  uint64_t v59[2];
  objc_super v60;
  id v61;
  CVMetalTextureCacheRef cacheOut[3];

  cacheOut[1] = *(CVMetalTextureCacheRef *)MEMORY[0x1E0C80C00];
  v5 = &v3[OBJC_IVAR____TtC3VFX19VideoCaptureSession_frameTime];
  v6 = MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_QWORD *)v5 = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)v5 + 1) = *(_QWORD *)(v6 + 8);
  *((_QWORD *)v5 + 2) = v7;
  *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX19VideoCaptureSession_sampleBuffer] = 0;
  v8 = objc_allocWithZone(MEMORY[0x1E0C8B108]);
  v9 = v3;
  v10 = objc_msgSend(v8, sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session] = v10;
  cacheOut[0] = 0;
  CVMetalTextureCacheCreate(0, 0, a1, 0, cacheOut);
  v11 = cacheOut[0];
  *(CVMetalTextureCacheRef *)&v9[OBJC_IVAR____TtC3VFX19VideoCaptureSession_metalTextureCache] = cacheOut[0];
  v56 = v11;

  v60.receiver = v9;
  v60.super_class = (Class)type metadata accessor for VideoCaptureSession();
  v12 = (char *)objc_msgSendSuper2(&v60, sel_init);
  v58 = OBJC_IVAR____TtC3VFX19VideoCaptureSession_session;
  v13 = *(void **)&v12[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
  v14 = v12;
  objc_msgSend(v13, sel_beginConfiguration);
  v15 = (void *)objc_opt_self();
  v16 = *MEMORY[0x1E0C8A808];
  v17 = objc_msgSend(v15, sel_defaultDeviceWithMediaType_, *MEMORY[0x1E0C8A808]);
  v54 = v14;
  if (v17)
  {
    v18 = objc_allocWithZone(MEMORY[0x1E0C8B0B0]);
    v59[0] = 0;
    v19 = v17;
    v20 = objc_msgSend(v18, sel_initWithDevice_error_, v19, v59);
    if (v20)
    {
      v21 = v20;
      v22 = (id)v59[0];
      v23 = v13;
      objc_msgSend(v23, sel_addInput_, v21);

    }
    else
    {
      v25 = (id)v59[0];
      v26 = (void *)sub_1B2227FB4();

      swift_willThrow();
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v27 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v59[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v27, v59, 0xD000000000000019, 0x80000001B2332620);
      swift_release();

      swift_release();
    }
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v24 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v59[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v24, v59, 0xD000000000000019, 0x80000001B2332530);
    swift_release();
    swift_release();
  }
  v28 = v58;
  if (qword_1ED4BF430 != -1)
    swift_once();
  strcpy((char *)v59, "videoDevice ");
  BYTE5(v59[1]) = 0;
  HIWORD(v59[1]) = -5120;
  v61 = v17;
  sub_1B1BB3628();
  v55 = v17;
  swift_retain();
  sub_1B22287AC();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v29 = v59[0];
  v30 = v59[1];
  v31 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v59[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v31, v59, v29, v30);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8B168]), sel_init);
  objc_msgSend(v32, sel_setAlwaysDiscardsLateVideoFrames_, 1);
  sub_1B1ADF51C();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = sub_1B222874C();
  *(_QWORD *)(inited + 40) = v34;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEE0F8];
  *(_DWORD *)(inited + 48) = 1111970369;
  sub_1B1B8021C(inited);
  v35 = (void *)sub_1B2228524();
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setVideoSettings_, v35);

  v36 = v54;
  v37 = a2;
  objc_msgSend(v32, sel_setSampleBufferDelegate_queue_, v54, a2);
  v38 = *(void **)&v12[v58];
  if (objc_msgSend(v38, sel_canAddOutput_, v32))
  {
    objc_msgSend(v38, sel_addOutput_, v32);
    swift_retain();
    v39 = sub_1B2228EA8();
    v59[0] = 0;
    swift_retain();
    v40 = 0xD00000000000001BLL;
    v41 = "session.addOutput succeeded";
  }
  else
  {
    swift_retain();
    v39 = sub_1B2228E90();
    v59[0] = 0;
    swift_retain();
    v40 = 0xD00000000000002ELL;
    v41 = "Could not add video output to capture session.";
  }
  sub_1B1F1AD70(v39, v59, v40, (unint64_t)(v41 - 32) | 0x8000000000000000);
  swift_release();
  swift_release();
  objc_msgSend(*(id *)&v12[v58], sel_commitConfiguration);
  v42 = objc_msgSend(v32, sel_connectionWithMediaType_, v16);
  if (v42)
  {
    v43 = v42;
    swift_retain();
    v44 = sub_1B2228EA8();
    v59[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v44, v59, 0xD00000000000001CLL, 0x80000001B23325C0);
    swift_release();
    swift_release();
    if ((objc_msgSend(v43, sel_isVideoOrientationSupported) & 1) != 0)
      objc_msgSend(v43, sel_setVideoOrientation_, BYTE1(a3) + 1);
    if (objc_msgSend(v43, sel_isVideoMirroringSupported))
    {
      strcpy((char *)v59, "mirroring : ");
      BYTE5(v59[1]) = 0;
      HIWORD(v59[1]) = -5120;
      swift_retain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v45 = v59[0];
      v46 = v59[1];
      v47 = sub_1B2228EA8();
      v59[0] = 0;
      swift_retain();
      v48 = v47;
      v36 = v54;
      sub_1B1F1AD70(v48, v59, v45, v46);
      swift_release();
      v37 = a2;
      swift_bridgeObjectRelease();
      swift_release();
      objc_msgSend(v43, sel_setAutomaticallyAdjustsVideoMirroring_, 0);
      objc_msgSend(v43, sel_setVideoMirrored_, (a3 & 0x10000u) >> 16);
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      swift_retain();
      v50 = sub_1B2228EA8();
      v59[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v50, v59, 0xD000000000000017, 0x80000001B23325E0);

      swift_release();
      swift_release();
    }
    v28 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B2228E90();
    v59[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v49, v59, 0xD000000000000032, 0x80000001B2332580);
    swift_release();
    swift_release();
  }
  objc_msgSend(*(id *)&v12[v28], sel_startRunning);
  swift_retain();
  v51 = sub_1B2228EA8();
  v59[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v51, v59, 0x6E75527472617473, 0xEC000000676E696ELL);

  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  return v36;
}

uint64_t type metadata accessor for VideoCaptureSession()
{
  return objc_opt_self();
}

void sub_1B1BABD60(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3)
{
  __CVBuffer *v5;
  __CVBuffer *v6;
  void *v7;
  __CVMetalTextureCache *v8;
  size_t Width;
  size_t Height;
  CVReturn TextureFromImage;
  CVMetalTextureRef v12;
  int v13;
  id v14;
  void *v15;
  opaqueCMSampleBuffer *v16;
  CMTimeValue value;
  CMTimeEpoch epoch;
  CMTimeValue v19;
  CMTimeValue *v20;
  CMTime v21;
  CVMetalTextureRef image[2];

  image[1] = *(CVMetalTextureRef *)MEMORY[0x1E0C80C00];
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v5 = CMSampleBufferGetImageBuffer(a2);
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(a3 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_metalTextureCache);
      if (v7)
      {
        v8 = v7;
        Width = CVPixelBufferGetWidth(v6);
        Height = CVPixelBufferGetHeight(v6);
        image[0] = 0;
        TextureFromImage = CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, v6, 0, MTLPixelFormatBGRA8Unorm_sRGB, Width, Height, 0, image);
        v12 = image[0];
        if (TextureFromImage)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v13 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v21.value = 0;
          swift_retain();
          sub_1B1F1AD70(v13, &v21.value, 0xD00000000000002DLL, 0x80000001B23327A0);

          swift_release();
          swift_release();
        }
        else
        {
          v14 = CVMetalTextureGetTexture(image[0]);
          v15 = *(void **)(a3 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_sampleBuffer);
          *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_sampleBuffer) = a2;
          v16 = a2;

          *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture) = v14;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          CMSampleBufferGetPresentationTimeStamp(&v21, v16);
          value = v21.value;
          epoch = v21.epoch;
          v19 = *(_QWORD *)&v21.timescale;

          swift_unknownObjectRelease();
          v20 = (CMTimeValue *)(a3 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_frameTime);
          *v20 = value;
          v20[1] = v19;
          v20[2] = epoch;

        }
      }
      else
      {

      }
    }
  }
}

unint64_t sub_1B1BAC070@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1B1BB35D4(*a1);
  *a2 = result;
  return result;
}

void sub_1B1BAC098(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1B1BAC0A4()
{
  sub_1B1BB35E4();
  return sub_1B2228A58();
}

uint64_t sub_1B1BAC100()
{
  sub_1B1BB35E4();
  return sub_1B22289E0();
}

void sub_1B1BAC14C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6378A30;
}

uint64_t sub_1B1BAC15C(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[3];
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v13[1] = a3;
  v13[2] = a4;
  v14 = a2;
  sub_1B19F8E54(0, &qword_1EEF5BD88, (uint64_t (*)(void))sub_1B1BB52F4, (uint64_t)&type metadata for VideoCapture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB52F4();
  sub_1B222A180();
  v19 = 0;
  sub_1B222991C();
  if (!v4)
  {
    v18 = BYTE1(v14);
    v17 = 1;
    sub_1B1A70B28();
    sub_1B2229958();
    v16 = 2;
    sub_1B222991C();
    v15 = 3;
    sub_1B2229910();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_1B1BAC318(char *a1)
{
  sub_1B1F8F210(*a1);
}

uint64_t sub_1B1BAC32C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BAC35C + 4 * byte_1B227E5F0[*v0]))(0x65727574706163, 0xE700000000000000);
}

uint64_t sub_1B1BAC35C()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_1B1BAC380()
{
  return 0x6465726F7272696DLL;
}

uint64_t sub_1B1BAC398()
{
  return 0x696669746E656469;
}

uint64_t sub_1B1BAC3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BB28C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BAC3D8()
{
  sub_1B1BB52F4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BAC400()
{
  sub_1B1BB52F4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BAC428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B1BB368C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_BYTE *)(a2 + 1) = BYTE1(result);
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1BAC468(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;

  if (v1[2])
    v2 = 0x10000;
  else
    v2 = 0;
  return sub_1B1BAC15C(a1, *v1 | (v1[1] << 8) | v2, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

uint64_t sub_1B1BAC4A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  if (a1[2])
    v2 = 0x10000;
  else
    v2 = 0;
  if (a2[2])
    v3 = 0x10000;
  else
    v3 = 0;
  return sub_1B1BB2878(*a1 | (a1[1] << 8) | v2, *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), *a2 | (a2[1] << 8) | v3, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
}

uint64_t sub_1B1BAC4EC()
{
  return 15;
}

uint64_t sub_1B1BAC4F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228260();
  v7 = sub_1B2228224();
  v9 = v8;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1B1BAC590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228260();
  v7 = sub_1B2228224();
  v9 = v8;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v9;
  return result;
}

uint64_t sub_1B1BAC630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1BAC790(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t *result;
  uint64_t v6[12];
  uint64_t v7[12];
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;

  v3 = *(_OWORD *)(v1 + 32);
  v54[0] = *(_OWORD *)(v1 + 16);
  v54[1] = v3;
  v55 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v54, 0x200000000, v6);
  sub_1B1A18378((uint64_t)v6, (uint64_t)&v19, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v19)
  {
    v43 = v19;
    v44 = v20;
    v45 = v21;
    v46 = v22;
    v47 = v23;
    v48 = v24;
    v49 = v25;
    v50 = v26;
    v51 = v27;
    v52 = v28;
    v53 = v29;
    swift_retain();
    sub_1B2197104((uint64_t)&v43, a1);
    swift_release();
    sub_1B19ED748(v6);
  }
  v4 = *(_OWORD *)(v1 + 72);
  v41[0] = *(_OWORD *)(v1 + 56);
  v41[1] = v4;
  v42 = *(_QWORD *)(v1 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v41, 0x200000000, v7);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v8)
  {
    v30 = v8;
    v31 = v9;
    v32 = v10;
    v33 = v11;
    v34 = v12;
    v35 = v13;
    v36 = v14;
    v37 = v15;
    v38 = v16;
    v39 = v17;
    v40 = v18;
    sub_1B21873D0((uint64_t)&v30);
    return sub_1B19ED748(v7);
  }
  return result;
}

uint64_t type metadata accessor for VideoCaptureSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1BAC940()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v20 = qword_1ED4D09F8;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  swift_retain();
  sub_1B1E3CFE4(1, (uint64_t)&v7);
  swift_release();
  v1 = v8;
  v2 = v9;
  v3 = v11;
  v4 = v10 | 4;
  *(_QWORD *)(v0 + 16) = v7;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v14 = qword_1ED4D09F8;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  swift_retain();
  sub_1B1E3D1DC(1, (uint64_t)v12);
  swift_release();
  v5 = v12[1];
  *(_OWORD *)(v0 + 56) = v12[0];
  *(_OWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 88) = v13;
  return v0;
}

uint64_t sub_1B1BACA6C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1BAC940();
  return v0;
}

const char *sub_1B1BACAA0()
{
  return "VideoCapture";
}

void sub_1B1BACAB8(char *a1)
{
  sub_1B1F9045C(*a1);
}

void sub_1B1BACAC4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1BACB0C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1BACB64()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1BACB9C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1BACBE0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1BACC24()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BACC7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BACCB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1BACCDC + 4 * byte_1B227E600[*v0]))();
}

void sub_1B1BACCDC(_QWORD *a1@<X8>)
{
  *a1 = 2036427888;
  a1[1] = 0xE400000000000000;
}

void sub_1B1BACCF0(_QWORD *a1@<X8>)
{
  *a1 = 1702131053;
  a1[1] = 0xE400000000000000;
}

void sub_1B1BACD04(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x73706F6F6CLL;
  a1[1] = v1;
}

uint64_t sub_1B1BACD18()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BACD44 + 4 * byte_1B227E604[*v0]))(0x7465737361, 0xE500000000000000);
}

uint64_t sub_1B1BACD44()
{
  return 2036427888;
}

uint64_t sub_1B1BACD54()
{
  return 1702131053;
}

uint64_t sub_1B1BACD64()
{
  return 0x73706F6F6CLL;
}

uint64_t sub_1B1BACD74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BACDA0()
{
  sub_1B1BB5200();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BACDC8()
{
  sub_1B1BB5200();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BACDF0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  _OWORD v13[3];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19[2];
  char v20;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5BD68, (uint64_t (*)(void))sub_1B1BB5200, (uint64_t)&type metadata for MovieFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB5200();
  sub_1B222A180();
  v11 = v3[1];
  v14 = *v3;
  v15 = v11;
  v16 = v3[2];
  sub_1B1AE72F4((uint64_t)&v16, (uint64_t)v19);
  v17 = v14;
  v18 = v15;
  v13[0] = v14;
  v13[1] = v15;
  v13[2] = v16;
  v20 = 0;
  sub_1B1BB5288((uint64_t)v3);
  sub_1B1BB51BC();
  sub_1B2229958();
  if (v2)
  {
    sub_1B1BA80C0((uint64_t)&v17);
    sub_1B1BA80C0((uint64_t)&v18);
    sub_1B1BB52CC(v19);
  }
  else
  {
    sub_1B1BA80C0((uint64_t)&v17);
    sub_1B1BA80C0((uint64_t)&v18);
    sub_1B1BB52CC(v19);
    LOBYTE(v13[0]) = 1;
    sub_1B222991C();
    LOBYTE(v13[0]) = 2;
    sub_1B222991C();
    LOBYTE(v13[0]) = 3;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

id sub_1B1BACFF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  id v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v7 = (id)v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v7;
}

double sub_1B1BAD040@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  double v7[3];

  sub_1B1BB38F0(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = v7[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
    *(_DWORD *)(a2 + 47) = *(_DWORD *)((char *)&v7[1] + 7);
  }
  return result;
}

uint64_t sub_1B1BAD08C(_QWORD *a1)
{
  return sub_1B1BACDF0(a1);
}

void sub_1B1BAD0CC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 49) = 257;
}

uint64_t sub_1B1BAD0EC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IOSurfaceWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1B1BAD13C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  v3 = (int *)type metadata accessor for MovieRuntime(0);
  *(_QWORD *)(a1 + v3[5]) = 0;
  *(_QWORD *)(a1 + v3[6]) = 0;
  v4 = a1 + v3[7];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + v3[8]) = 0;
  *(_QWORD *)(a1 + v3[9]) = 0;
  *(_QWORD *)(a1 + v3[10]) = 0;
  v5 = v3[11];
  type metadata accessor for IOSurfaceWrapper();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(a1 + v5) = result;
  *(_QWORD *)(a1 + v3[12]) = 0;
  return result;
}

id sub_1B1BAD1F0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t inited;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v1 = *(int *)(type metadata accessor for MovieRuntime(0) + 48);
  v2 = *(void **)(v0 + v1);
  if (v2)
  {
    v3 = *(id *)(v0 + v1);
  }
  else
  {
    sub_1B1BB41D4();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    *(_QWORD *)(inited + 32) = sub_1B222874C();
    *(_QWORD *)(inited + 40) = v5;
    *(_QWORD *)(inited + 48) = 1111970369;
    v6 = sub_1B1B7DF14(inited);
    sub_1B1BAD9AC((uint64_t)v6);
    swift_bridgeObjectRelease();
    v7 = objc_allocWithZone(MEMORY[0x1E0C8B328]);
    v8 = (void *)sub_1B2228524();
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v7, sel_initWithPixelBufferAttributes_, v8);

    *(_QWORD *)(v0 + v1) = v9;
    v3 = v9;
    v2 = 0;
  }
  v10 = v2;
  return v3;
}

uint64_t sub_1B1BAD30C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1BB53C0(0, &qword_1EEF5BDC0, &qword_1EEF5BDC8, (uint64_t)&unk_1EEF5BDD0, (uint64_t)type metadata accessor for Node);
    v2 = sub_1B22296DC();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v26 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = 0;
  v24 = v6 - 6;
  v25 = v6;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_27;
    }
    v13 = v8 + 1;
    if (v8 + 1 >= v25)
      goto LABEL_34;
    v14 = *(_QWORD *)(v26 + 8 * v13);
    if (!v14)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v25)
        goto LABEL_34;
      v14 = *(_QWORD *)(v26 + 8 * v13);
      if (!v14)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v25)
          goto LABEL_34;
        v14 = *(_QWORD *)(v26 + 8 * v13);
        if (!v14)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v25)
            goto LABEL_34;
          v14 = *(_QWORD *)(v26 + 8 * v13);
          if (!v14)
          {
            v13 = v8 + 5;
            if (v8 + 5 >= v25)
              goto LABEL_34;
            v14 = *(_QWORD *)(v26 + 8 * v13);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_26:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v8 = v13;
LABEL_27:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    sub_1B1BB536C(0, (unint64_t *)&unk_1EEF5B8C0, (uint64_t)&qword_1EEF5BDE0, (uint64_t)type metadata accessor for Node, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1B9D98C);
    sub_1B1BB536C(0, &qword_1EEF5BDC8, (uint64_t)&unk_1EEF5BDD0, (uint64_t)type metadata accessor for Node, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1BB5434);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v17 = sub_1B222A060();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v7 + 8 * (v19 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v7 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (v20 + 1 == v21)
          v20 = 0;
        else
          ++v20;
        v22 = *(_QWORD *)(v7 + 8 * v20);
      }
      while (v22 == -1);
      v9 = __clz(__rbit64(~v22)) + (v20 << 6);
    }
    *(_QWORD *)(v7 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = 8 * v9;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + v10) = v16;
    *(_QWORD *)(*(_QWORD *)(v2 + 56) + v10) = v27;
    ++*(_QWORD *)(v2 + 16);
  }
  v15 = v8;
  while (v24 != v15)
  {
    v14 = *(_QWORD *)(a1 + 112 + 8 * v15++);
    if (v14)
    {
      v13 = v15 + 5;
      goto LABEL_26;
    }
  }
LABEL_34:
  swift_release();
  sub_1B19F8D30();
  return v2;
}

uint64_t sub_1B1BAD65C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1BB53C0(0, &qword_1EEF5BD98, &qword_1EEF5BDA0, (uint64_t)&unk_1EEF5BDA8, (uint64_t)type metadata accessor for AuthoringNode);
    v2 = sub_1B22296DC();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v26 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = 0;
  v24 = v6 - 6;
  v25 = v6;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_27;
    }
    v13 = v8 + 1;
    if (v8 + 1 >= v25)
      goto LABEL_34;
    v14 = *(_QWORD *)(v26 + 8 * v13);
    if (!v14)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v25)
        goto LABEL_34;
      v14 = *(_QWORD *)(v26 + 8 * v13);
      if (!v14)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v25)
          goto LABEL_34;
        v14 = *(_QWORD *)(v26 + 8 * v13);
        if (!v14)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v25)
            goto LABEL_34;
          v14 = *(_QWORD *)(v26 + 8 * v13);
          if (!v14)
          {
            v13 = v8 + 5;
            if (v8 + 5 >= v25)
              goto LABEL_34;
            v14 = *(_QWORD *)(v26 + 8 * v13);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_26:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v8 = v13;
LABEL_27:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    sub_1B1BB536C(0, (unint64_t *)&unk_1EEF5BDB0, (uint64_t)&unk_1EEF5B810, (uint64_t)type metadata accessor for AuthoringNode, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1B9D98C);
    sub_1B1BB536C(0, &qword_1EEF5BDA0, (uint64_t)&unk_1EEF5BDA8, (uint64_t)type metadata accessor for AuthoringNode, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1BB5434);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v17 = sub_1B222A060();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v7 + 8 * (v19 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v7 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (v20 + 1 == v21)
          v20 = 0;
        else
          ++v20;
        v22 = *(_QWORD *)(v7 + 8 * v20);
      }
      while (v22 == -1);
      v9 = __clz(__rbit64(~v22)) + (v20 << 6);
    }
    *(_QWORD *)(v7 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = 8 * v9;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + v10) = v16;
    *(_QWORD *)(*(_QWORD *)(v2 + 56) + v10) = v27;
    ++*(_QWORD *)(v2 + 16);
  }
  v15 = v8;
  while (v24 != v15)
  {
    v14 = *(_QWORD *)(a1 + 112 + 8 * v15++);
    if (v14)
    {
      v13 = v15 + 5;
      goto LABEL_26;
    }
  }
LABEL_34:
  swift_release();
  sub_1B19F8D30();
  return v2;
}

_QWORD *sub_1B1BAD9AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1B99918();
    v2 = (_QWORD *)sub_1B22296DC();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = &v37;
  v8 = &v39;
  swift_bridgeObjectRetain();
  i = 0;
  v31 = v6;
  v29 = v1 + 112;
  v30 = v6 - 6;
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  v11 = MEMORY[0x1E0DEB418];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (i + 1 < v31)
  {
    v21 = *(_QWORD *)(v32 + 8 * v20);
    if (v21)
      goto LABEL_25;
    v20 = i + 2;
    if (i + 2 < v31)
    {
      v21 = *(_QWORD *)(v32 + 8 * v20);
      if (v21)
        goto LABEL_25;
      v20 = i + 3;
      if (i + 3 < v31)
      {
        v21 = *(_QWORD *)(v32 + 8 * v20);
        if (v21)
          goto LABEL_25;
        v20 = i + 4;
        if (i + 4 < v31)
        {
          v21 = *(_QWORD *)(v32 + 8 * v20);
          if (v21)
            goto LABEL_25;
          v20 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v20);
            if (!v21)
            {
              v22 = i;
              do
              {
                if (v30 == v22)
                  goto LABEL_29;
                v21 = *(_QWORD *)(v29 + 8 * v22++);
              }
              while (!v21);
              v20 = v22 + 5;
            }
LABEL_25:
            v34 = (v21 - 1) & v21;
            v19 = __clz(__rbit64(v21)) + (v20 << 6);
            for (i = v20; ; v19 = __clz(__rbit64(v5)) | (i << 6))
            {
              v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
              v35 = *v23;
              v36 = v23[1];
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              sub_1B1A0DDAC(v7, v8);
              sub_1B1A0DDAC(v8, v40);
              sub_1B1A0DDAC(v40, &v38);
              v24 = sub_1B1DC3B00(v35, v36);
              v25 = v24;
              if ((v26 & 1) != 0)
              {
                v33 = i;
                v12 = v8;
                v13 = v7;
                v14 = v1;
                v15 = v11;
                v16 = v10;
                v17 = (uint64_t *)(v2[6] + 16 * v24);
                swift_bridgeObjectRelease();
                *v17 = v35;
                v17[1] = v36;
                v10 = v16;
                v11 = v15;
                v1 = v14;
                v7 = v13;
                v8 = v12;
                i = v33;
                v18 = (_OWORD *)(v2[7] + 32 * v25);
                _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);
                sub_1B1A0DDAC(&v38, v18);
                v5 = v34;
                if (!v34)
                  goto LABEL_11;
              }
              else
              {
                *(_QWORD *)((char *)v2 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v24;
                v27 = (uint64_t *)(v2[6] + 16 * v24);
                *v27 = v35;
                v27[1] = v36;
                sub_1B1A0DDAC(&v38, (_OWORD *)(v2[7] + 32 * v24));
                ++v2[2];
                v5 = v34;
                if (!v34)
                  goto LABEL_11;
              }
LABEL_10:
              v34 = (v5 - 1) & v5;
            }
          }
        }
      }
    }
  }
LABEL_29:
  sub_1B19F8D30();
  return v2;
}

uint64_t sub_1B1BADCE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  _OWORD v31[2];
  _OWORD v32[3];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1B1BB4D20();
    v2 = sub_1B22296DC();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v29 = 0;
  v26 = v6 - 6;
  v27 = v6;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v29 << 6);
      goto LABEL_27;
    }
    v11 = v29 + 1;
    if (v29 + 1 >= v27)
      goto LABEL_34;
    v12 = *(_QWORD *)(v28 + 8 * v11);
    if (!v12)
    {
      v11 = v29 + 2;
      if (v29 + 2 >= v27)
        goto LABEL_34;
      v12 = *(_QWORD *)(v28 + 8 * v11);
      if (!v12)
      {
        v11 = v29 + 3;
        if (v29 + 3 >= v27)
          goto LABEL_34;
        v12 = *(_QWORD *)(v28 + 8 * v11);
        if (!v12)
        {
          v11 = v29 + 4;
          if (v29 + 4 >= v27)
            goto LABEL_34;
          v12 = *(_QWORD *)(v28 + 8 * v11);
          if (!v12)
          {
            v11 = v29 + 5;
            if (v29 + 5 >= v27)
              goto LABEL_34;
            v12 = *(_QWORD *)(v28 + 8 * v11);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_26:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v29 = v11;
LABEL_27:
    v15 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v32[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v14 = *(void **)&v32[0];
    *(_QWORD *)&v31[0] = v15;
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
    v16 = v14;
    v17 = v15;
    swift_dynamicCast();
    v18 = *(_QWORD *)&v32[0];
    sub_1B1A0DDAC((_OWORD *)((char *)v32 + 8), v30);
    sub_1B1A0DDAC(v30, v32);
    sub_1B1A0DDAC(v32, v31);
    sub_1B222874C();
    sub_1B222A06C();
    sub_1B2228824();
    v19 = sub_1B222A0C0();
    swift_bridgeObjectRelease();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v7 + 8 * (v21 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v7 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (v22 + 1 == v23)
          v22 = 0;
        else
          ++v22;
        v24 = *(_QWORD *)(v7 + 8 * v22);
      }
      while (v24 == -1);
      v8 = __clz(__rbit64(~v24)) + (v22 << 6);
    }
    *(_QWORD *)(v7 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v18;
    sub_1B1A0DDAC(v31, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v8));
    ++*(_QWORD *)(v2 + 16);
  }
  v13 = v29;
  while (v26 != v13)
  {
    v12 = *(_QWORD *)(a1 + 112 + 8 * v13++);
    if (v12)
    {
      v11 = v13 + 5;
      goto LABEL_26;
    }
  }
LABEL_34:
  swift_release();
  sub_1B19F8D30();
  return v2;
}

uint64_t sub_1B1BAE074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1BAE1D4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[12];
  uint64_t v7[12];
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;

  v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = (uint64_t)result;
    v4 = *(_OWORD *)(v1 + 32);
    v54[0] = *(_OWORD *)(v1 + 16);
    v54[1] = v4;
    v55 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v54, 0x200000000, v6);
    sub_1B1A18378((uint64_t)v6, (uint64_t)&v19, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v19)
    {
      v43 = v19;
      v44 = v20;
      v45 = v21;
      v46 = v22;
      v47 = v23;
      v48 = v24;
      v49 = v25;
      v50 = v26;
      v51 = v27;
      v52 = v28;
      v53 = v29;
      swift_retain();
      sub_1B21975B8((uint64_t)&v43, v2);
      swift_release();
      sub_1B19ED748(v6);
    }
    v5 = *(_OWORD *)(v1 + 72);
    v41[0] = *(_OWORD *)(v1 + 56);
    v41[1] = v5;
    v42 = *(_QWORD *)(v1 + 88);
    sub_1B1E8FCE4(v3, (uint64_t)v41, 0x200000000, v7);
    sub_1B1A18378((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v8)
    {
      v30 = v8;
      v31 = v9;
      v32 = v10;
      v33 = v11;
      v34 = v12;
      v35 = v13;
      v36 = v14;
      v37 = v15;
      v38 = v16;
      v39 = v17;
      v40 = v18;
      swift_retain();
      sub_1B21A0108((uint64_t)&v30, v3);
      swift_release();
      swift_release();
      return sub_1B19ED748(v7);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1BAE3B0()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MovieSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1BAE3FC()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v20 = qword_1ED4D09F8;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  swift_retain();
  sub_1B1E39090(1, (uint64_t)&v7);
  swift_release();
  v1 = v8;
  v2 = v9;
  v3 = v11;
  v4 = v10 | 4;
  *(_QWORD *)(v0 + 16) = v7;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v14 = qword_1ED4D09F8;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  swift_retain();
  sub_1B1B1101C(1, 1, (uint64_t)v12);
  swift_release();
  v5 = v12[1];
  *(_OWORD *)(v0 + 56) = v12[0];
  *(_OWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 88) = v13;
  return v0;
}

uint64_t sub_1B1BAE52C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1BAE3FC();
  return v0;
}

const char *sub_1B1BAE560()
{
  return "Movie";
}

void sub_1B1BAE578(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[6];

  v3 = *(void **)(v1 + OBJC_IVAR____TtC3VFX11AudioPlayer_player);
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = a1;
  v9[4] = sub_1B1BB5364;
  v9[5] = v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1B17915D0;
  v9[3] = &unk_1E63D29D8;
  v6 = _Block_copy(v9);
  v7 = v3;
  v8 = a1;
  swift_release();
  objc_msgSend(v7, sel_scheduleFile_atTime_completionHandler_, v8, 0, v6);
  _Block_release(v6);

}

void sub_1B1BAE674(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = MEMORY[0x1B5E240CC](a1 + 16);
  if (v3)
  {
    v4 = (void *)v3;
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC3VFX11AudioPlayer_loops) == 1)
    {
      v5 = (void *)v3;
      sub_1B1BAE578(a2);
      v4 = v5;
    }

  }
}

id sub_1B1BAE6E0()
{
  return sub_1B1BAE700(&OBJC_IVAR____TtC3VFX11AudioPlayer_player, (SEL *)&selRef_stop, 0, type metadata accessor for AudioPlayer);
}

id sub_1B1BAE700(_QWORD *a1, SEL *a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  char *v4;
  objc_super v8;

  objc_msgSend(*(id *)&v4[*a1], *a2);
  v8.receiver = v4;
  v8.super_class = (Class)a4(a3);
  return objc_msgSendSuper2(&v8, sel_dealloc);
}

id sub_1B1BAE77C(char *a1, uint64_t a2, _QWORD *a3, SEL *a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  void *v9;
  char *v10;
  objc_super v12;

  v9 = *(void **)&a1[*a3];
  v10 = a1;
  objc_msgSend(v9, *a4);
  v12.receiver = v10;
  v12.super_class = (Class)a6(a5);
  return objc_msgSendSuper2(&v12, sel_dealloc);
}

uint64_t sub_1B1BAE870()
{
  return type metadata accessor for AudioPlayer(0);
}

uint64_t type metadata accessor for AudioPlayer(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1EEF5BC98);
}

char *sub_1B1BAE88C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  id v11;
  void *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;
  objc_class *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  objc_super v44;
  void *v45;
  id v46;
  unint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = sub_1B2228110();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[OBJC_IVAR____TtC3VFX11AudioPlayer_loops] = 1;
  v37 = OBJC_IVAR____TtC3VFX11AudioPlayer_isValid;
  v1[OBJC_IVAR____TtC3VFX11AudioPlayer_isValid] = 1;
  v40 = OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRaw;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRaw] = 0;
  v39 = OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawCount;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawCount] = 0;
  v38 = OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawTime;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawTime] = 0;
  v7 = OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawSampleRate;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawSampleRate] = 0x40E5888000000000;
  v8 = OBJC_IVAR____TtC3VFX11AudioPlayer__lock;
  v9 = objc_allocWithZone(MEMORY[0x1E0CB3740]);
  v10 = v1;
  v11 = objc_msgSend(v9, sel_init);
  v12 = (void *)sub_1B2228728();
  objc_msgSend(v11, sel_setName_, v12);

  *(_QWORD *)&v1[v8] = v11;
  v42 = v4;
  v43 = v3;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v14 = a1;
  v13(&v10[OBJC_IVAR____TtC3VFX11AudioPlayer_url], a1, v3);
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89A88]), sel_init);
  v16 = OBJC_IVAR____TtC3VFX11AudioPlayer_engine;
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX11AudioPlayer_engine] = v15;
  v17 = objc_msgSend(v15, sel_mainMixerNode);
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX11AudioPlayer_mixer] = v17;
  *(_QWORD *)&v1[v40] = 0;
  *(_QWORD *)&v1[v39] = 0;
  *(_QWORD *)&v1[v38] = 0;
  *(_QWORD *)&v1[v7] = 0x40E5888000000000;
  objc_msgSend(*(id *)&v10[v16], sel_prepare);
  v18 = *(void **)&v10[v16];
  v46 = 0;
  if (objc_msgSend(v18, sel_startAndReturnError_, &v46))
  {
    v19 = v46;
    v20 = a1;
  }
  else
  {
    v40 = (uint64_t)v13;
    v21 = v46;
    v22 = (void *)sub_1B2227FB4();

    swift_willThrow();
    v1[v37] = 0;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v46 = 0;
    v47 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v45 = v22;
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    v23 = (uint64_t)v46;
    v24 = v47;
    v25 = sub_1B2228E90();
    v20 = v14;
    if (qword_1ED4BF658 != -1)
      swift_once();
    v46 = 0;
    swift_retain();
    sub_1B1F1AD70(v25, (uint64_t *)&v46, v23, v24);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    v13 = (void (*)(char *, uint64_t, uint64_t))v40;
  }
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89AD8]), sel_init);
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX11AudioPlayer_player] = v26;

  v27 = (objc_class *)type metadata accessor for AudioPlayer(0);
  v44.receiver = v10;
  v44.super_class = v27;
  v28 = objc_msgSendSuper2(&v44, sel_init);
  v29 = (uint64_t)v41;
  v30 = v43;
  v13(v41, v20, v43);
  objc_allocWithZone(MEMORY[0x1E0C89A98]);
  v31 = (char *)v28;
  v32 = sub_1B1BB26DC(v29);
  v33 = objc_msgSend(v32, sel_processingFormat);
  v34 = OBJC_IVAR____TtC3VFX11AudioPlayer_engine;
  v35 = OBJC_IVAR____TtC3VFX11AudioPlayer_player;
  objc_msgSend(*(id *)&v31[OBJC_IVAR____TtC3VFX11AudioPlayer_engine], sel_attachNode_, *(_QWORD *)&v31[OBJC_IVAR____TtC3VFX11AudioPlayer_player]);
  objc_msgSend(*(id *)&v31[v34], sel_connect_to_format_, *(_QWORD *)&v31[v35], *(_QWORD *)&v31[OBJC_IVAR____TtC3VFX11AudioPlayer_mixer], v33);
  sub_1B1BAE578(v32);

  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v20, v30);
  return v31;
}

void sub_1B1BAEE90(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  kern_return_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  mach_timebase_info info;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = MEMORY[0x1B5E240CC](a3 + 16);
  if (v5)
  {
    v13 = (char *)v5;
    v6 = (uint64_t *)objc_msgSend(a1, sel_floatChannelData);
    if (v6)
    {
      v7 = *v6;
      v8 = objc_msgSend(a1, sel_frameLength);
      v9 = *(void **)&v13[OBJC_IVAR____TtC3VFX11AudioPlayer__lock];
      objc_msgSend(v9, sel_lock);
      *(_QWORD *)&v13[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRaw] = v7;
      *(_QWORD *)&v13[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawCount] = v8;
      info = 0;
      v10 = mach_timebase_info(&info);
      v11 = -1.0;
      if (!v10)
        v11 = (double)(mach_absolute_time() * info.numer / info.denom) * 0.000000001;
      *(double *)&v13[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawTime] = v11;
      objc_msgSend(a2, sel_sampleRate);
      *(_QWORD *)&v13[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawSampleRate] = v12;
      objc_msgSend(v9, sel_unlock);

    }
    else
    {

    }
  }
}

void sub_1B1BAF014(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, id);
  id v6;
  id v7;

  v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, v6);
  swift_release();

}

uint64_t sub_1B1BAF0AC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1B1BAF14C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;

  *a2 = 0;
  v2 = (char *)a2 + *(int *)(a1 + 20);
  v3 = sub_1B2228110();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

double sub_1B1BAF194@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1BB258C(a1, (void (*)(void))sub_1B2082C6C, a2);
}

uint64_t sub_1B1BAF1B0(_QWORD *a1)
{
  return sub_1B1BB261C(a1);
}

void sub_1B1BAF1C4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

uint64_t sub_1B1BAF1D8(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;

  v12 = a2;
  sub_1B19F8E54(0, &qword_1EEF5BD38, (uint64_t (*)(void))sub_1B1BB5178, (uint64_t)&type metadata for AudioController.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB5178();
  sub_1B222A180();
  v15 = 0;
  sub_1B222991C();
  if (!v2)
  {
    v14 = 1;
    sub_1B222991C();
    v13 = 2;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B1BAF338(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F91068(*a1, *a2);
}

uint64_t sub_1B1BAF344()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1702131053;
  if (*v0 != 1)
    v1 = 0x73706F6F6CLL;
  if (*v0)
    return v1;
  else
    return 2036427888;
}

uint64_t sub_1B1BAF38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2CB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1BAF3B0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B1BAF3BC()
{
  sub_1B1BB5178();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BAF3E4()
{
  sub_1B1BB5178();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BAF40C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1BB4DA4(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result) & 1;
  }
  return result;
}

uint64_t sub_1B1BAF448(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;

  if (v1[2])
    v2 = 0x10000;
  else
    v2 = 0;
  if (v1[1])
    v3 = 256;
  else
    v3 = 0;
  return sub_1B1BAF1D8(a1, v3 | *v1 | v2);
}

void sub_1B1BAF488(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t sub_1B1BAF498(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v12 = a2;
  sub_1B19F8E54(0, &qword_1EEF5BD20, (uint64_t (*)(void))sub_1B1BB5134, (uint64_t)&type metadata for AudioAnalyzer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB5134();
  sub_1B222A180();
  v16 = 0;
  sub_1B222991C();
  if (!v2)
  {
    v15 = 1;
    sub_1B222991C();
    v14 = 2;
    sub_1B222991C();
    v13 = 3;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_1B1BAF620(char *a1)
{
  sub_1B1F8F38C(*a1);
}

uint64_t sub_1B1BAF62C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BAF65C + 4 * byte_1B227E608[*v0]))(0x6D726F6665766177, 0xE800000000000000);
}

uint64_t sub_1B1BAF65C()
{
  return 0x6D75727463657073;
}

uint64_t sub_1B1BAF680()
{
  return 7564658;
}

uint64_t sub_1B1BAF690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2AB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BAF6B4()
{
  sub_1B1BB5134();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BAF6DC()
{
  sub_1B1BB5134();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BAF704@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1BB4F50(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result) & 1;
    a2[3] = BYTE3(result) & 1;
  }
  return result;
}

uint64_t sub_1B1BAF748(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  int v4;

  if (v1[3])
    v2 = 0x1000000;
  else
    v2 = 0;
  if (v1[2])
    v3 = 0x10000;
  else
    v3 = 0;
  if (v1[1])
    v4 = 256;
  else
    v4 = 0;
  return sub_1B1BAF498(a1, v4 | *v1 | v3 | v2);
}

void sub_1B1BAF79C(_DWORD *a1@<X8>)
{
  *a1 = 16843009;
}

vDSP_DFT_Setup sub_1B1BAF7A8()
{
  uint64_t v0;
  vDSP_DFT_Setup result;

  if (*(_BYTE *)(v0 + 56) != 1)
    return *(vDSP_DFT_Setup *)(v0 + 48);
  result = vDSP_DFT_zop_CreateSetup(0, 0x800uLL, vDSP_DFT_FORWARD);
  *(_QWORD *)(v0 + 48) = result;
  *(_BYTE *)(v0 + 56) = 0;
  return result;
}

uint64_t sub_1B1BAF7E8(const vDSP_DFT_SetupStruct *a1)
{
  uint64_t *v1;
  uint64_t v3;
  const float *v4;
  uint64_t v5;
  const float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  DSPSplitComplex __A;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = sub_1B2228B0C();
  *(_QWORD *)(v3 + 16) = 2048;
  v4 = (const float *)(v3 + 32);
  bzero((void *)(v3 + 32), 0x2000uLL);
  v5 = sub_1B2228B0C();
  *(_QWORD *)(v5 + 16) = 2048;
  v6 = (const float *)(v5 + 32);
  bzero((void *)(v5 + 32), 0x2000uLL);
  v7 = *v1;
  if ((unint64_t)(v3 - *v1) >= 0x20)
  {
    for (i = 0; i != 0x2000; i += 32)
    {
      v11 = *(_OWORD *)(v7 + i + 48);
      v12 = v3 + i;
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v7 + i + 32);
      *(_OWORD *)(v12 + 48) = v11;
    }
  }
  else
  {
    v8 = 0;
    v9 = v7 + 32;
    do
    {
      v4[v8] = *(const float *)(v9 + v8 * 4);
      ++v8;
    }
    while (v8 != 2048);
  }
  v13 = (char *)v1[5];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1B1C635D8(0, *((_QWORD *)v13 + 2), 0, v13);
  v14 = (char *)v1[4];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = sub_1B1C635D8(0, *((_QWORD *)v14 + 2), 0, v14);
  v1[4] = (uint64_t)v14;
  vDSP_DFT_Execute(a1, v4, v6, (float *)v13 + 8, (float *)v14 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[5] = (uint64_t)v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_1B1FFEEAC((uint64_t)v13);
    v1[5] = (uint64_t)v13;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = sub_1B1FFEEAC((uint64_t)v14);
  v1[4] = (uint64_t)v14;
  v1[5] = (uint64_t)v13;
  swift_bridgeObjectRelease();
  __A.realp = (float *)(v13 + 32);
  __A.imagp = (float *)(v14 + 32);
  v16 = sub_1B2228B0C();
  *(_QWORD *)(v16 + 16) = 1024;
  bzero((void *)(v16 + 32), 0x1000uLL);
  vDSP_zvabs(&__A, 1, (float *)(v16 + 32), 1, 0x400uLL);
  v17 = sub_1B2228B0C();
  *(_QWORD *)(v17 + 16) = 720;
  bzero((void *)(v17 + 32), 0xB40uLL);
  if ((unint64_t)(v17 - v16 - 24) >= 0x20)
  {
    v19 = 0;
    v20 = (float32x4_t)vdupq_n_s32(0x3CC80000u);
    do
    {
      v21 = vmulq_f32(*(float32x4_t *)(v16 + v19 + 72), v20);
      v22 = (float32x4_t *)(v17 + v19);
      v22[2] = vmulq_f32(*(float32x4_t *)(v16 + v19 + 56), v20);
      v22[3] = v21;
      v19 += 32;
    }
    while (v19 != 2880);
  }
  else
  {
    for (j = 0; j != 2880; j += 4)
      *(float *)(v17 + 32 + j) = *(float *)(v16 + 56 + j) * 0.024414;
  }
  swift_bridgeObjectRelease();
  return v17;
}

void sub_1B1BAFAD8(char *a1)
{
  sub_1B1F8F4E8(*a1);
}

void sub_1B1BAFAE4()
{
  char *v0;

  sub_1B1FB276C(*v0);
}

void sub_1B1BAFAEC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1BAFB28()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1BAFB84(uint64_t a1)
{
  char *v1;

  sub_1B1DB5F84(a1, *v1);
}

uint64_t sub_1B1BAFB8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BAFBC0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1BAFBF0 + 4 * byte_1B227E610[*v0]))();
}

void sub_1B1BAFBF0(_QWORD *a1@<X8>)
{
  *a1 = 0x647574696E67616DLL;
  a1[1] = 0xEA00000000007365;
}

void sub_1B1BAFC10(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001B2328820;
}

void sub_1B1BAFC30(_QWORD *a1@<X8>)
{
  *a1 = 7564658;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1B1BAFC44()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BAFC74 + 4 * byte_1B227E614[*v0]))(0x6D726F6665766177, 0xE800000000000000);
}

uint64_t sub_1B1BAFC74()
{
  return 0x647574696E67616DLL;
}

unint64_t sub_1B1BAFC90()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1BAFCAC()
{
  return 7564658;
}

uint64_t sub_1B1BAFCBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BAFCE8()
{
  sub_1B1BB6144();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BAFD10()
{
  sub_1B1BB6144();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BAFD38(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5BE70, (uint64_t (*)(void))sub_1B1BB6144, (uint64_t)&type metadata for AudioSpectrum.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB6144();
  sub_1B222A180();
  v14 = *v3;
  v13 = 0;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1A1F740((unint64_t *)&qword_1EEF58BD8, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
  sub_1B2229958();
  if (!v2)
  {
    v14 = v3[1];
    v13 = 1;
    sub_1B2229958();
    v14 = v3[2];
    v13 = 2;
    sub_1B2229958();
    LOBYTE(v14) = 3;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1BAFF30@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B1BB5DFC(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B1BAFF78(_QWORD *a1)
{
  return sub_1B1BAFD38(a1);
}

double sub_1B1BAFF8C@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  _OWORD v5[2];

  sub_1B1BB27E4((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  a1[2] = v5[0];
  result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

uint64_t sub_1B1BAFFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = *(_QWORD *)(v2 + 96);
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1BB01B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  char *v75;
  __int128 v76;
  uint64_t *result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101[12];
  uint64_t v102[12];
  uint64_t v103[12];
  uint64_t v104;
  int v105;
  char v106;
  void (*v107)(uint64_t, void *, void *);
  char v108;
  void (*v109)(void *, void *);
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD v133[2];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, void *, void *);
  void *v138;
  void (*v139)(void *, void *);
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD v145[2];
  uint64_t v146;
  _BYTE v147[40];
  _OWORD v148[2];
  uint64_t v149;
  uint64_t v150;
  int v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD v161[2];
  uint64_t v162;

  v2 = v1;
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v4, v5);
  v87 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v78 - v9;
  v88 = sub_1B2228110();
  v92 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v11);
  v86 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v91 = (char *)&v78 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v99 = (char *)&v78 - v18;
  v19 = *(_OWORD *)(v1 + 32);
  v161[0] = *(_OWORD *)(v1 + 16);
  v161[1] = v19;
  v162 = *(_QWORD *)(v1 + 48);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  sub_1B1E8FCE4(a1, (uint64_t)v161, 0x200000000, v101);
  sub_1B1A18378((uint64_t)v101, (uint64_t)&v122, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v122)
  {
    v150 = v122;
    v151 = v123;
    v152 = v124;
    v153 = v125;
    v154 = v126;
    v155 = v127;
    v156 = v128;
    v157 = v129;
    v158 = v130;
    v159 = v131;
    v160 = v132;
    sub_1B2187F08((uint64_t)&v150);
    v21 = 0;
    sub_1B19ED748(v101);
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_OWORD *)(v2 + 72);
  v148[0] = *(_OWORD *)(v2 + 56);
  v148[1] = v22;
  v149 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v148, 0x200000000, v102);
  sub_1B1A18378((uint64_t)v102, (uint64_t)v115, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v115[0])
  {
    if (v121 >= 1)
    {
      v85 = v118;
      if (v118)
      {
        v78 = v20;
        v79 = v2;
        v98 = v10;
        v80 = a1;
        v23 = v120;
        v84 = v117;
        v24 = v120[4];
        v96 = *(unsigned __int8 *)(v119 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v100 = type metadata accessor for AudioPlayerComponent(0);
        v133[0] = v115[0];
        v133[1] = v115[1];
        v134 = v116;
        v97 = v23;
        v81 = v23 + 8;
        v82 = v23 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        v25 = 0;
        v83 = v24;
        while (1)
        {
          v94 = v25;
          v26 = (unsigned int *)(v84 + 48 * v25);
          v90 = *v26;
          v89 = v26[1];
          v28 = (uint64_t *)*((_QWORD *)v26 + 2);
          v27 = *((_QWORD *)v26 + 3);
          v30 = *((_QWORD *)v26 + 4);
          v29 = *((_QWORD *)v26 + 5);
          if (v96)
          {
            v31 = *(os_unfair_lock_s **)(v29 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v31);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v24);
          sub_1B1A18378((uint64_t)v82, (uint64_t)v147, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v32 = v97;
          v33 = v97[4];
          v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 16) + 32) + 16) + 1;
          v35 = (char *)v29;
          swift_retain();
          v32[6] = ecs_stack_allocator_allocate(v33, 48 * v34, 8);
          v32[7] = v34;
          v36 = v81;
          v81[1] = 0;
          v36[2] = 0;
          *v36 = 0;
          swift_release();
          v37 = (void **)sub_1B1A12038(v100, (uint64_t)&off_1E639B140, v28, v27, v30, (uint64_t)v32);
          v93 = v35;
          v38 = sub_1B1A12038((uint64_t)&type metadata for AudioController, (uint64_t)&off_1E6383488, v28, v27, v30, (uint64_t)v32);
          v95 = v21;
          if (!v28)
            break;
          if (v30)
          {
            v40 = *(_QWORD *)(*(_QWORD *)(v100 - 8) + 72);
            v41 = (_BYTE *)(v38 + 1);
            v42 = v88;
            v43 = v92;
            v44 = &qword_1EEFD5000;
            while (1)
            {
              v45 = (char *)*v37;
              if (*(v41 - 1) != 1)
              {
                if (v45)
                {
                  objc_msgSend(*(id *)&v45[OBJC_IVAR____TtC3VFX11AudioPlayer_player], sel_stop);

                }
                *v37 = 0;
                goto LABEL_16;
              }
              if (v45)
                goto LABEL_27;
              v46 = (uint64_t)v98;
              sub_1B19EC90C((uint64_t)v37 + *(int *)(v100 + 20), (uint64_t)v98);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v46, 1, v42) != 1)
                break;
              sub_1B1A04628(v46, (uint64_t (*)(_QWORD))sub_1B17928A0);
              v45 = (char *)*v37;
              if (*v37)
                goto LABEL_27;
LABEL_28:
              v55 = (char *)*v37;
              if (*v41 == 1)
              {
                if (v55)
                {
                  LODWORD(v39) = 0;
                  objc_msgSend(*(id *)&v55[v44[109]], sel_setOutputVolume_, v39);
                }
              }
              else if (v55)
              {
                LODWORD(v39) = 1.0;
                objc_msgSend(*(id *)&v55[v44[109]], sel_setOutputVolume_, v39);
              }
LABEL_16:
              v41 += 3;
              v37 = (void **)((char *)v37 + v40);
              if (!--v30)
                goto LABEL_34;
            }
            v47 = v99;
            (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v99, v46, v42);
            v48 = (uint64_t)v91;
            (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v91, v47, v42);
            v49 = objc_allocWithZone((Class)type metadata accessor for AudioPlayer(0));
            v50 = sub_1B1BAE88C(v48);
            *v37 = v50;
            v90 = OBJC_IVAR____TtC3VFX11AudioPlayer_player;
            v51 = *(void **)&v50[OBJC_IVAR____TtC3VFX11AudioPlayer_player];
            v52 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v139 = sub_1B1BB425C;
            v140 = v52;
            v135 = MEMORY[0x1E0C809B0];
            v136 = 1107296256;
            v137 = sub_1B1BAF014;
            v138 = &unk_1E63E9A20;
            v53 = _Block_copy(&v135);
            v54 = v51;
            swift_release();
            objc_msgSend(v54, sel_installTapOnBus_bufferSize_format_block_, 0, 4192, 0, v53);
            _Block_release(v53);

            if (v50[OBJC_IVAR____TtC3VFX11AudioPlayer_isValid] == 1)
              objc_msgSend(*(id *)&v50[v90], sel_play);
            v43 = v92;
            (*(void (**)(char *, uint64_t))(v92 + 8))(v99, v42);
            v44 = &qword_1EEFD5000;
            v45 = (char *)*v37;
            if (!*v37)
              goto LABEL_28;
LABEL_27:
            v45[OBJC_IVAR____TtC3VFX11AudioPlayer_loops] = v41[1];
            goto LABEL_28;
          }
LABEL_34:
          v56 = v95;
          sub_1B1F05D48(v97, (unsigned __int16 **)v133, (uint64_t)v147);
          v21 = v56;
          v57 = v93;
          sub_1B1F03804(v93);
          v24 = v83;
          ecs_stack_allocator_pop_snapshot(v83);
          if ((v96 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v57 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v57 + 47));
          }
          swift_release();
          v25 = v94 + 1;
          if (v94 + 1 == v85)
          {
            sub_1B19ED748(v102);
            v2 = v79;
            a1 = v80;
            goto LABEL_56;
          }
        }
        if ((_DWORD)v90 == (_DWORD)v89)
          goto LABEL_34;
        v58 = *(_QWORD *)(*(_QWORD *)(v100 - 8) + 72);
        v59 = (_BYTE *)(v38 + 3 * v90 + 1);
        v60 = v89 - v90;
        v61 = (void **)((char *)v37 + v58 * v90);
        v62 = v88;
        v63 = v92;
        v64 = &qword_1EEFD5000;
        while (1)
        {
          v65 = (char *)*v61;
          if (*(v59 - 1) != 1)
          {
            if (v65)
            {
              objc_msgSend(*(id *)&v65[OBJC_IVAR____TtC3VFX11AudioPlayer_player], sel_stop);

            }
            *v61 = 0;
            goto LABEL_38;
          }
          if (v65)
            goto LABEL_49;
          v66 = v87;
          sub_1B19EC90C((uint64_t)v61 + *(int *)(v100 + 20), v87);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v66, 1, v62) != 1)
            break;
          sub_1B1A04628(v66, (uint64_t (*)(_QWORD))sub_1B17928A0);
          v65 = (char *)*v61;
          if (*v61)
            goto LABEL_49;
LABEL_50:
          v75 = (char *)*v61;
          if (*v59 == 1)
          {
            if (v75)
            {
              LODWORD(v39) = 0;
              objc_msgSend(*(id *)&v75[v64[109]], sel_setOutputVolume_, v39);
            }
          }
          else if (v75)
          {
            LODWORD(v39) = 1.0;
            objc_msgSend(*(id *)&v75[v64[109]], sel_setOutputVolume_, v39);
          }
LABEL_38:
          v59 += 3;
          v61 = (void **)((char *)v61 + v58);
          if (!--v60)
            goto LABEL_34;
        }
        v67 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v86, v66, v62);
        v68 = (uint64_t)v91;
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v91, v67, v62);
        v69 = objc_allocWithZone((Class)type metadata accessor for AudioPlayer(0));
        v70 = sub_1B1BAE88C(v68);
        *v61 = v70;
        v90 = OBJC_IVAR____TtC3VFX11AudioPlayer_player;
        v71 = *(void **)&v70[OBJC_IVAR____TtC3VFX11AudioPlayer_player];
        v72 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v139 = sub_1B1BB425C;
        v140 = v72;
        v135 = MEMORY[0x1E0C809B0];
        v136 = 1107296256;
        v137 = sub_1B1BAF014;
        v138 = &unk_1E63D4740;
        v73 = _Block_copy(&v135);
        v74 = v71;
        swift_release();
        objc_msgSend(v74, sel_installTapOnBus_bufferSize_format_block_, 0, 4192, 0, v73);
        _Block_release(v73);

        if (v70[OBJC_IVAR____TtC3VFX11AudioPlayer_isValid] == 1)
          objc_msgSend(*(id *)&v70[v90], sel_play);
        v62 = v88;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v86, v88);
        v64 = &qword_1EEFD5000;
        v65 = (char *)*v61;
        if (!*v61)
          goto LABEL_50;
LABEL_49:
        v65[OBJC_IVAR____TtC3VFX11AudioPlayer_loops] = v59[1];
        goto LABEL_50;
      }
    }
LABEL_56:
    sub_1B19ED748(v102);
  }
  v76 = *(_OWORD *)(v2 + 112);
  v145[0] = *(_OWORD *)(v2 + 96);
  v145[1] = v76;
  v146 = *(_QWORD *)(v2 + 128);
  sub_1B1E8FCE4(a1, (uint64_t)v145, 0x200000000, v103);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v103, (uint64_t)&v104, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v104)
  {
    v135 = v104;
    LODWORD(v136) = v105;
    BYTE4(v136) = v106;
    v137 = v107;
    LOBYTE(v138) = v108;
    v139 = v109;
    v140 = v110;
    v141 = v111;
    v142 = v112;
    v143 = v113;
    v144 = v114;
    sub_1B2187F24((uint64_t)&v135);
    return sub_1B19ED748(v103);
  }
  return result;
}

uint64_t type metadata accessor for AudioSystem()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for AudioAnalyzer(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[4])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioAnalyzer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioAnalyzer()
{
  return &type metadata for AudioAnalyzer;
}

void **sub_1B1BB0CC4(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  uint64_t v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1B2228110();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    v12 = v4;
    if (v11(v8, 1, v9))
    {
      sub_1B17928A0();
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t sub_1B1BB0DB0(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

void **sub_1B1BB0E2C(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  id v11;
  uint64_t v12;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1B2228110();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v4;
  if (v10(v7, 1, v8))
  {
    sub_1B17928A0();
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void **sub_1B1BB0EF0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1B2228110();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

_QWORD *sub_1B1BB1008(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1B2228110();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_1B17928A0();
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void **sub_1B1BB10C0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1B1BB11D4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1BB11E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_1B17928A0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_1B1BB1268()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B1BB1274(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    sub_1B17928A0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AudioPlayerComponent(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1ED4B93B8);
}

void sub_1B1BB12FC()
{
  unint64_t v0;

  sub_1B17928A0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for AudioController(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioController(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioController(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioController()
{
  return &type metadata for AudioController;
}

ValueMetadata *type metadata accessor for AudioFileAsset()
{
  return &type metadata for AudioFileAsset;
}

uint64_t *sub_1B1BB14C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1B2228110();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1B17928A0();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    v14 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v14;
    v15 = a3[7];
    v16 = a3[8];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v19 = a3[9];
    v20 = a3[10];
    v21 = *(void **)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = (uint64_t)v21;
    v22 = *(void **)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = (uint64_t)v22;
    v23 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v24 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v24;
    v25 = v13;
    v26 = v14;
    v27 = v21;
    v28 = v22;
    swift_retain();
    v29 = v24;
  }
  return a1;
}

void sub_1B1BB161C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);

  swift_release();
}

char *sub_1B1BB16C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = *(void **)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = *(void **)&a2[v10];
  *(_QWORD *)&a1[v10] = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  a1[v14] = a2[v14];
  v17 = a3[9];
  v18 = a3[10];
  v19 = *(void **)&a2[v17];
  *(_QWORD *)&a1[v17] = v19;
  v20 = *(void **)&a2[v18];
  *(_QWORD *)&a1[v18] = v20;
  v21 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  v22 = *(void **)&a2[v21];
  *(_QWORD *)&a1[v21] = v22;
  v23 = v11;
  v24 = v12;
  v25 = v19;
  v26 = v20;
  swift_retain();
  v27 = v22;
  return a1;
}

char *sub_1B1BB17E8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;

  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = v14;

  v16 = a3[6];
  v17 = *(void **)&a1[v16];
  v18 = *(void **)&a2[v16];
  *(_QWORD *)&a1[v16] = v18;
  v19 = v18;

  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  a1[a3[8]] = a2[a3[8]];
  v24 = a3[9];
  v25 = *(void **)&a1[v24];
  v26 = *(void **)&a2[v24];
  *(_QWORD *)&a1[v24] = v26;
  v27 = v26;

  v28 = a3[10];
  v29 = *(void **)&a1[v28];
  v30 = *(void **)&a2[v28];
  *(_QWORD *)&a1[v28] = v30;
  v31 = v30;

  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_retain();
  swift_release();
  v32 = a3[12];
  v33 = *(void **)&a1[v32];
  v34 = *(void **)&a2[v32];
  *(_QWORD *)&a1[v32] = v34;
  v35 = v34;

  return a1;
}

char *sub_1B1BB199C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[7];
  v11 = a3[8];
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  a1[v11] = a2[v11];
  v14 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  return a1;
}

char *sub_1B1BB1AA8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;

  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1B17928A0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = a3[6];
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  v16 = a3[7];
  v17 = a3[8];
  v18 = &a1[v16];
  v19 = &a2[v16];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  a1[v17] = a2[v17];
  v20 = a3[9];
  v21 = *(void **)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];

  v22 = a3[10];
  v23 = *(void **)&a1[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];

  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_release();
  v24 = a3[12];
  v25 = *(void **)&a1[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];

  return a1;
}

uint64_t sub_1B1BB1C3C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1BB1C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_1B17928A0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1B1BB1CC4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1B1BB1CD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1B17928A0();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
}

uint64_t type metadata accessor for MovieRuntime(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1ED4B8188);
}

void sub_1B1BB1D5C()
{
  unint64_t v0;

  sub_1B17928A0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeWithCopy for MovieFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (id)v7;
  return a1;
}

uint64_t assignWithCopy for MovieFileAsset(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v7 = v4;

  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  return a1;
}

__n128 initializeWithTake for MovieFileAsset(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MovieFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  return a1;
}

uint64_t getEnumTagSinglePayload for MovieFileAsset(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 51))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MovieFileAsset(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 51) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 51) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MovieFileAsset()
{
  return &type metadata for MovieFileAsset;
}

uint64_t destroy for VideoCaptureRuntime(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VideoCaptureRuntime(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VideoCaptureRuntime(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VideoCaptureRuntime(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoCaptureRuntime(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoCaptureRuntime(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoCaptureRuntime()
{
  return &type metadata for VideoCaptureRuntime;
}

uint64_t destroy for VideoCapture()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s3VFX12VideoCaptureVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VideoCapture(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VideoCapture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoCapture(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoCapture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoCapture()
{
  return &type metadata for VideoCapture;
}

uint64_t sub_1B1BB23A4()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v35 = qword_1ED4D09F8;
  v36 = 0;
  v37 = 2;
  v38 = 0;
  v39 = 2;
  v40 = 0;
  swift_retain();
  sub_1B1B10764(1, 1, (uint64_t)&v11);
  swift_release();
  v1 = v12;
  v2 = v13;
  v3 = v15;
  v4 = v14 | 4;
  *(_QWORD *)(v0 + 16) = v11;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v29 = qword_1ED4D09F8;
  v30 = 0;
  v31 = 2;
  v32 = 0;
  v33 = 2;
  v34 = 0;
  swift_retain();
  sub_1B1B10990(2, 1, (uint64_t)&v16);
  swift_release();
  v5 = v17;
  v6 = v18;
  v7 = v20;
  v8 = v19 | 4;
  *(_QWORD *)(v0 + 56) = v16;
  *(_DWORD *)(v0 + 64) = v5;
  *(_BYTE *)(v0 + 68) = v6;
  *(_QWORD *)(v0 + 72) = v8;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v7;
  v23 = qword_1ED4D09F8;
  v24 = 0;
  v25 = 2;
  v26 = 0;
  v27 = 2;
  v28 = 0;
  swift_retain();
  sub_1B1B10BC0(1, 1, (uint64_t)v21);
  swift_release();
  v9 = v21[1];
  *(_OWORD *)(v0 + 96) = v21[0];
  *(_OWORD *)(v0 + 112) = v9;
  *(_QWORD *)(v0 + 128) = v22;
  return v0;
}

uint64_t sub_1B1BB2540()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1BB23A4();
  return v0;
}

const char *sub_1B1BB2574()
{
  return "Audio";
}

double sub_1B1BB258C@<D0>(uint64_t a1@<X0>, void (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v7;

  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = 0xE000000000000000;
  a2();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0xE000000000000000;
    *(_OWORD *)(a3 + 32) = 0uLL;
  }
  return result;
}

uint64_t sub_1B1BB261C(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1BB51BC();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

id sub_1B1BB26DC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  id v10;
  uint64_t v11;
  id v13[2];

  v2 = v1;
  v13[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)sub_1B2228074();
  v13[0] = 0;
  v5 = objc_msgSend(v2, sel_initForReading_error_, v4, v13);

  v6 = v13[0];
  if (v5)
  {
    v7 = sub_1B2228110();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v9 = v6;
    v8(a1, v7);
  }
  else
  {
    v10 = v13[0];
    sub_1B2227FB4();

    swift_willThrow();
    v11 = sub_1B2228110();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  }
  return v5;
}

void sub_1B1BB27E4(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1B2228B0C();
  *(_QWORD *)(v2 + 16) = 2048;
  bzero((void *)(v2 + 32), 0x2000uLL);
  v3 = sub_1B2228B0C();
  *(_QWORD *)(v3 + 16) = 2048;
  bzero((void *)(v3 + 32), 0x2000uLL);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
}

uint64_t sub_1B1BB2878(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  int v8;

  result = 0;
  v8 = a4 ^ a1;
  if ((v8 & 1) == 0 && (v8 & 0xFF00) == 0 && (v8 & 0x10000) == 0)
  {
    if (a2 == a5 && a3 == a6)
      return 1;
    else
      return sub_1B2229D24();
  }
  return result;
}

uint64_t sub_1B1BB28C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65727574706163 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461746E6569726FLL && a2 == 0xEF65646F4D6E6F69 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465726F7272696DLL && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B1BB2AB0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D726F6665766177 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D75727463657073 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D75727463657073 && a2 == 0xEE00736552776F4CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7564658 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B1BB2C74()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B1BB2CB8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 2036427888 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702131053 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73706F6F6CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_1B1BB2DE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t ObjectType;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  void *v53;
  int *v54;
  id v55;
  id v56;
  id v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  char *v66;
  id v67;
  id v68;
  int v69;
  CVMetalTextureCacheRef v70;
  uint64_t v71;
  void *v72;
  __CVMetalTextureCache *v73;
  uint64_t v74[2];
  char *v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  CVMetalTextureCacheRef cacheOut;
  unint64_t v86;
  uint64_t v87;

  v79 = a3;
  v87 = *MEMORY[0x1E0C80C00];
  sub_1B1BB4174();
  v80 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v9, v10);
  v76 = (uint64_t)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v74 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v74 - v18;
  v20 = sub_1B2228110();
  v82 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v75 = (char *)v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v83 = (char *)v74 - v25;
  v27 = a1[2];
  v26 = a1[3];
  v28 = (void *)a1[4];
  v81 = a2;
  v78 = a1;
  if (v28)
  {
    v29 = a1[5];
    ObjectType = swift_getObjectType();
    v77 = v15;
    v31 = v8;
    v32 = v20;
    v33 = v19;
    v34 = ObjectType;
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8);
    swift_bridgeObjectRetain();
    v36 = v28;
    v37 = v34;
    v19 = v33;
    v20 = v32;
    v8 = v31;
    v15 = v77;
    v38 = v29;
    v39 = v83;
    v35(v27, v26, v37, v38);
    a2 = v81;

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    cacheOut = 0;
    v86 = 0xE000000000000000;
    v77 = (char *)qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v74[0] = (uint64_t)cacheOut;
    v74[1] = v27;
    v40 = v86;
    v41 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    cacheOut = 0;
    swift_retain();
    sub_1B1F1AD70(v41, (uint64_t *)&cacheOut, v74[0], v40);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    v39 = v83;
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  sub_1B19EC90C(a2, (uint64_t)v19);
  v42 = v82;
  v43 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v43(v15, v39, v20);
  v77 = *(char **)(v42 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v77)(v15, 0, 1, v20);
  v44 = (uint64_t)&v8[v80[12]];
  sub_1B19EC90C((uint64_t)v19, (uint64_t)v8);
  sub_1B19EC90C((uint64_t)v15, v44);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v45((uint64_t)v8, 1, v20) != 1)
  {
    v47 = v76;
    sub_1B19EC90C((uint64_t)v8, v76);
    if (v45(v44, 1, v20) != 1)
    {
      v48 = v47;
      v49 = v82;
      v50 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v75, v44, v20);
      sub_1B19E52CC((unint64_t *)&qword_1EEF5D850, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v51 = sub_1B22286E0();
      v52 = *(void (**)(char *, uint64_t))(v49 + 8);
      v52(v50, v20);
      sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1B17928A0);
      sub_1B1A04628((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1B17928A0);
      v52((char *)v48, v20);
      v46 = v83;
      sub_1B1A04628((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B17928A0);
      if ((v51 & 1) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
    sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1B17928A0);
    sub_1B1A04628((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1B17928A0);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v47, v20);
LABEL_13:
    sub_1B1A04628((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1BB4174);
    goto LABEL_17;
  }
  sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1B17928A0);
  v46 = v83;
  sub_1B1A04628((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1B17928A0);
  if (v45(v44, 1, v20) != 1)
    goto LABEL_13;
  sub_1B1A04628((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B17928A0);
LABEL_15:
  if (*(_QWORD *)(v81 + *(int *)(type metadata accessor for MovieRuntime(0) + 20)))
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v46, v20);
    return;
  }
LABEL_17:
  v53 = (void *)sub_1B2228074();
  v54 = (int *)objc_msgSend((id)objc_opt_self(), sel_assetWithURL_, v53);

  v55 = objc_allocWithZone(MEMORY[0x1E0C8B300]);
  v80 = v54;
  v56 = objc_msgSend(v55, sel_initWithAsset_, v54);
  v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8B2E8]), sel_initWithPlayerItem_, v56);
  objc_msgSend(v57, sel_setMuted_, *((unsigned __int8 *)v78 + 49));
  v58 = (int *)type metadata accessor for MovieRuntime(0);
  v59 = v58[5];
  v60 = v81;
  v61 = *(void **)(v81 + v59);
  v62 = v57;

  *(_QWORD *)(v60 + v59) = v57;
  v63 = v58[6];
  v64 = *(void **)(v60 + v63);
  v65 = v56;

  *(_QWORD *)(v60 + v63) = v56;
  v66 = v83;
  sub_1B1A04628(v60, (uint64_t (*)(_QWORD))sub_1B17928A0);
  v43((char *)v60, v66, v20);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v77)(v60, 0, 1, v20);
  v67 = sub_1B1BAD1F0();
  objc_msgSend(v65, sel_addOutput_, v67);

  cacheOut = 0;
  if (CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(id *)(v79 + 16), 0, &cacheOut))
  {
    v68 = v80;
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v69 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v84 = 0;
    swift_retain();
    sub_1B1F1AD70(v69, &v84, 0xD000000000000021, 0x80000001B2332640);

    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v20);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v20);

    v70 = cacheOut;
    v71 = v58[10];
    v72 = *(void **)(v60 + v71);
    v73 = cacheOut;

    *(_QWORD *)(v60 + v71) = v70;
  }

}

unint64_t sub_1B1BB35D4(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

unint64_t sub_1B1BB35E4()
{
  unint64_t result;

  result = qword_1EEF5BCB0;
  if (!qword_1EEF5BCB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F20C, &type metadata for VideoCapture.OrientationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5BCB0);
  }
  return result;
}

void sub_1B1BB3628()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5BCC0)
  {
    sub_1B1B9DAD4(255, &qword_1EEF5BCC8);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5BCC0);
  }
}

uint64_t sub_1B1BB368C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  int v16;
  char v17;
  int v19;
  _BYTE v20[4];
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  unsigned __int8 v26;
  char v27;

  sub_1B19F8E54(0, &qword_1EEF5BD70, (uint64_t (*)(void))sub_1B1BB52F4, (uint64_t)&type metadata for VideoCapture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v20[-v7];
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B2228260();
  sub_1B2228224();
  v22 = v14;
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB52F4();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
    v15 = sub_1B22297D8();
    v25 = 1;
    sub_1B1A70AE4();
    sub_1B2229814();
    v16 = v26;
    v24 = 2;
    v17 = sub_1B22297D8();
    v21 = v16;
    v23 = 3;
    sub_1B22297CC();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    if ((v17 & 1) != 0)
      v19 = 0x10000;
    else
      v19 = 0;
    return v19 | v15 & 1 | (v21 << 8);
  }
}

void sub_1B1BB38F0(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char v28;
  char v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;

  v34 = a2;
  v3 = sub_1B2228110();
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF5BD48, (uint64_t (*)(void))sub_1B1BB5200, (uint64_t)&type metadata for MovieFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v34 - v11;
  v44 = 0;
  v46 = 1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB5200();
  v13 = (uint64_t)v37;
  sub_1B222A150();
  if (v13)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v14 = v6;
    v15 = v36;
    v16 = a1[3];
    v17 = a1[4];
    v37 = a1;
    sub_1B19FA070(a1, v16);
    if (sub_1B2067B64(2031, v16, v17))
    {
      LOBYTE(v38) = 0;
      sub_1B19E52CC((unint64_t *)&qword_1ED4B7B20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
      v18 = v14;
      v19 = v15;
      sub_1B2229814();
      v20 = sub_1B222805C();
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      v23 = 0;
      v35 = 0;
      v36 = v20;
      v24 = v22;
      v25 = v20;
    }
    else
    {
      v45 = 0;
      sub_1B1BB5244();
      sub_1B2229814();
      v25 = v38;
      v24 = v39;
      v22 = v41;
      v23 = v42;
      v35 = v43;
      v36 = v40;
    }
    LOBYTE(v38) = 1;
    v26 = v12;
    v44 = sub_1B22297D8() & 1;
    LOBYTE(v38) = 2;
    v46 = sub_1B22297D8() & 1;
    LOBYTE(v38) = 3;
    v27 = sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v26, v8);
    v28 = v44;
    v29 = v46;
    v30 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v37);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v25;
    v32 = v34;
    *v34 = v31;
    v32[1] = v24;
    v32[2] = v36;
    v32[3] = v22;
    v33 = v35;
    v32[4] = (uint64_t)v23;
    v32[5] = v33;
    *((_BYTE *)v32 + 48) = v28;
    *((_BYTE *)v32 + 49) = v29;
    *((_BYTE *)v32 + 50) = v27 & 1;
  }
}

void sub_1B1BB3C98(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  double v18;
  long double v19;
  long double v20;
  uint64_t v21;
  int v22;
  int v23;
  CMTimeValue value;
  CMTimeFlags flags;
  CMTimeScale timescale;
  void *v27;
  CMTimeEpoch epoch;
  id v29;
  unsigned int v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  __CVMetalTextureCache *v35;
  size_t Width;
  size_t Height;
  void *v38;
  __CVBuffer *v39;
  id v40;
  id v41;
  __IOSurface *v42;
  __IOSurface *v43;
  uint64_t v44;
  __IOSurface *v45;
  __IOSurface *v46;
  __IOSurface *v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  CMTime textureOut;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v11 = type metadata accessor for MovieRuntime(0);
  v12 = *(void **)(a4 + *(int *)(v11 + 20));
  if (v12)
  {
    v13 = (int *)v11;
    v52 = a5;
    v14 = a3[49];
    v15 = v12;
    if ((_DWORD)v14 != objc_msgSend(v15, sel_isMuted))
      objc_msgSend(v15, sel_setMuted_, v14);
    v16 = *(void **)(a4 + v13[6]);
    if (!v16)
      goto LABEL_33;
    v17 = v16;
    objc_msgSend(v17, sel_duration);
    sub_1B2228FF8();
    if (a3[48] == 1)
    {
      v19 = v18;
      if (v18 > 0.0)
      {
        v20 = *(double *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
        if (a3[50] == 1)
        {
          v20 = fmod(v20, v19);
        }
        else if (v19 < v20)
        {
          v20 = v19;
        }
        CMTimeMake(&textureOut, (uint64_t)(v20 * 1000.0), 1000);
        v21 = *MEMORY[0x1E0CA2E68];
        v22 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
        v23 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
        v57 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        v58 = v21;
        v59 = v22;
        v60 = v23;
        v61 = v57;
        v54 = v21;
        v55 = v22;
        v56 = v23;
        objc_msgSend(v15, sel_seekToTime_toleranceBefore_toleranceAfter_, &textureOut, &v58, &v54);
      }
    }
    v51 = a2;
    v53 = v15;
    objc_msgSend(v17, sel_currentTime);
    value = textureOut.value;
    timescale = textureOut.timescale;
    flags = textureOut.flags;
    v27 = v17;
    epoch = textureOut.epoch;
    v29 = sub_1B1BAD1F0();
    textureOut.value = value;
    textureOut.timescale = timescale;
    textureOut.flags = flags;
    textureOut.epoch = epoch;
    v30 = objc_msgSend(v29, sel_hasNewPixelBufferForItemTime_, &textureOut);

    if (!v30
      || (v31 = sub_1B1BAD1F0(),
          textureOut.value = value,
          textureOut.timescale = timescale,
          textureOut.flags = flags,
          textureOut.epoch = epoch,
          v32 = objc_msgSend(v31, sel_copyPixelBufferForItemTime_itemTimeForDisplay_, &textureOut, 0),
          v31,
          !v32))
    {

      return;
    }
    v33 = *(void **)(a4 + v13[10]);
    v34 = v27;
    v15 = v53;
    if (!v33)
    {

      return;
    }
    v35 = v33;
    Width = CVPixelBufferGetWidth((CVPixelBufferRef)v32);
    Height = CVPixelBufferGetHeight((CVPixelBufferRef)v32);
    textureOut.value = 0;
    CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v35, (CVImageBufferRef)v32, 0, MTLPixelFormatBGRA8Unorm_sRGB, Width, Height, 0, (CVMetalTextureRef *)&textureOut);
    v38 = (void *)textureOut.value;
    if (textureOut.value)
    {
      v39 = (__CVBuffer *)(id)textureOut.value;
      v40 = CVMetalTextureGetTexture(v39);
      if (v40)
      {
        v41 = v40;
        v50 = v32;
        swift_unknownObjectRelease();
        *v52 = v41;
        v42 = (__IOSurface *)objc_msgSend((id)swift_unknownObjectRetain(), sel_iosurface);
        if (v42)
        {
          v43 = v42;
          v44 = *(_QWORD *)(a4 + v13[11]);
          v45 = *(__IOSurface **)(v44 + 16);
          *(_QWORD *)(v44 + 16) = v42;
          v46 = v42;
          if (v45)
          {
            IOSurfaceDecrementUseCount(v45);
            v47 = *(__IOSurface **)(v44 + 16);
          }
          else
          {
            v47 = v43;
          }
          if (v47)
            IOSurfaceIncrementUseCount(v47);

        }
        swift_retain();
        v49 = sub_1B1A101F0(v51);
        swift_release();
        sub_1B2094804(v49);

        swift_unknownObjectRelease();
LABEL_33:

        return;
      }

    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v48 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v58 = 0;
    swift_retain();
    sub_1B1F1AD70(v48, &v58, 0xD00000000000001ELL, 0x80000001B23326C0);

    swift_release();
    swift_release();
  }
}

void sub_1B1BB4174()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5BCD0)
  {
    sub_1B17928A0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5BCD0);
  }
}

void sub_1B1BB41D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5BCE0)
  {
    sub_1B1B0BFC8(255, &qword_1EEF5BCE8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5BCE0);
  }
}

uint64_t sub_1B1BB4238()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1B1BB425C(void *a1, void *a2)
{
  uint64_t v2;

  sub_1B1BAEE90(a1, a2, v2);
}

uint64_t sub_1B1BB4264(_QWORD *a1, uint64_t a2, id *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t ObjectType;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(_QWORD, uint64_t, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  id *v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  id *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v65 = a3;
  sub_1B1BB4174();
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v69 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v8, v9);
  v62 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v64 = (uint64_t)&v58 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v58 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v58 - v20;
  v22 = sub_1B2228110();
  v66 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v60 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v58 - v27;
  v29 = a1[3];
  v30 = (void *)a1[4];
  v63 = (void (*)(char *, _QWORD, uint64_t, uint64_t))a1[2];
  if (v30)
  {
    v31 = a1[5];
    ObjectType = swift_getObjectType();
    v59 = v5;
    v33 = v17;
    v34 = v21;
    v35 = ObjectType;
    v61 = (char *)v22;
    v36 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v31 + 8);
    swift_bridgeObjectRetain();
    v37 = v30;
    v38 = v35;
    v21 = v34;
    v17 = v33;
    v5 = v59;
    v36(v63, v29, v38, v31);
    v22 = (uint64_t)v61;

    v39 = (uint64_t)v28;
  }
  else
  {
    v61 = (char *)&v58 - v27;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v67 = 0;
    v68 = 0xE000000000000000;
    v59 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v40 = v67;
    v41 = v68;
    v42 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v67 = 0;
    swift_retain();
    sub_1B1F1AD70(v42, &v67, v40, v41);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    v39 = (uint64_t)v61;
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  v43 = (uint64_t)v65 + *(int *)(type metadata accessor for AudioPlayerComponent(0) + 20);
  sub_1B19EC90C(v43, (uint64_t)v21);
  v44 = v66;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v45(v17, v39, v22);
  v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56);
  v63(v17, 0, 1, v22);
  v46 = *(int *)(v5 + 48);
  v47 = v69;
  v48 = v69 + v46;
  sub_1B19EC90C((uint64_t)v21, v69);
  sub_1B19EC90C((uint64_t)v17, v48);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v49(v47, 1, v22) == 1)
  {
    sub_1B1A04628((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1B17928A0);
    sub_1B1A04628((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B17928A0);
    if (v49(v48, 1, v22) == 1)
      goto LABEL_16;
    goto LABEL_13;
  }
  v61 = v21;
  sub_1B19EC90C(v69, v64);
  if (v49(v48, 1, v22) == 1)
  {
    sub_1B1A04628((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1B17928A0);
    sub_1B1A04628((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1B17928A0);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v22);
LABEL_13:
    sub_1B1A04628(v69, (uint64_t (*)(_QWORD))sub_1B1BB4174);
LABEL_15:
    v54 = v43;
    v55 = (uint64_t)v62;
    v45(v62, v39, v22);
    v63((char *)v55, 0, 1, v22);
    sub_1B1BB47FC(v55, v54);
    v56 = v65;

    *v56 = 0;
    v69 = v55;
LABEL_16:
    sub_1B1A04628(v69, (uint64_t (*)(_QWORD))sub_1B17928A0);
    v53 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8);
    return v53(v39, v22);
  }
  v50 = v66;
  v51 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v60, v48, v22);
  sub_1B19E52CC((unint64_t *)&qword_1EEF5D850, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
  v52 = v64;
  LODWORD(v59) = sub_1B22286E0();
  v53 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
  v53((uint64_t)v51, v22);
  sub_1B1A04628((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1B17928A0);
  sub_1B1A04628((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1B17928A0);
  v53(v52, v22);
  sub_1B1A04628(v69, (uint64_t (*)(_QWORD))sub_1B17928A0);
  if ((v59 & 1) == 0)
    goto LABEL_15;
  return v53(v39, v22);
}

uint64_t sub_1B1BB47FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B17928A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1BB4840(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  int v17;
  uint64_t i;
  __int128 v19;
  uint64_t v20;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;

  v8 = sub_1B2228B0C();
  *(_QWORD *)(v8 + 16) = 2048;
  bzero((void *)(v8 + 32), 0x2000uLL);
  v9 = a2 - 2048;
  if (a2 <= 2048)
  {
    if (!a2)
      return v8;
    if ((unint64_t)a2 >= 8 && (unint64_t)(v8 - a1) < 0xFFFFFFFFFFFFFFE0)
    {
      v12 = a2 & 0xFFFFFFFFFFFFFFF8;
      v22 = (__int128 *)(a1 + 16);
      v23 = (_OWORD *)(v8 + 48);
      v24 = a2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      if (v12 == a2)
        return v8;
    }
    else
    {
      v12 = 0;
    }
    v13 = a2 - v12;
    v14 = 4 * v12;
    v15 = (_DWORD *)(4 * v12 + v8 + 32);
    v16 = (int *)(a1 + v14);
    do
    {
      v17 = *v16++;
      *v15++ = v17;
      --v13;
    }
    while (v13);
    return v8;
  }
  if (v9 >= (uint64_t)(a3 * a4))
    v9 = (uint64_t)(a3 * a4);
  v10 = a1 + 4 * (v9 & ~(v9 >> 63));
  if ((unint64_t)(v8 - v10) < 0xFFFFFFFFFFFFFFE0)
  {
    for (i = 0; i != 0x2000; i += 32)
    {
      v19 = *(_OWORD *)(v10 + i + 16);
      v20 = v8 + i;
      *(_OWORD *)(v20 + 32) = *(_OWORD *)(v10 + i);
      *(_OWORD *)(v20 + 48) = v19;
    }
  }
  else
  {
    for (j = 0; j != 0x2000; j += 4)
      *(_DWORD *)(v8 + 32 + j) = *(_DWORD *)(v10 + j);
  }
  return v8;
}

void sub_1B1BB4990(void **a1, _BYTE *a2, uint64_t a3)
{
  char *v4;
  uint64_t v6;
  void *v7;
  char *v8;
  const float *v9;
  uint64_t v10;
  kern_return_t v11;
  double v12;
  uint64_t v13;
  const vDSP_DFT_SetupStruct *v14;
  uint64_t v15;
  int32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  vDSP_Length v21;
  uint64_t v22;
  mach_timebase_info info;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (char *)*a1;
  if (*a1)
  {
    v6 = OBJC_IVAR____TtC3VFX11AudioPlayer__lock;
    v7 = *(void **)&v4[OBJC_IVAR____TtC3VFX11AudioPlayer__lock];
    v8 = v4;
    objc_msgSend(v7, sel_lock);
    v9 = *(const float **)&v8[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRaw];
    if (!v9)
      goto LABEL_20;
    if ((*a2 & 1) != 0 || (a2[1] & 1) != 0 || a2[2] == 1)
    {
      v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawCount];
      info = 0;
      v11 = mach_timebase_info(&info);
      v12 = -1.0;
      if (!v11)
        v12 = (double)(mach_absolute_time() * info.numer / info.denom) * 0.000000001;
      v13 = sub_1B1BB4840((uint64_t)v9, v10, v12 - *(double *)&v8[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawTime], *(double *)&v8[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawSampleRate]);
      swift_bridgeObjectRelease();
      *(_QWORD *)a3 = v13;
      if ((a2[1] & 1) != 0)
        goto LABEL_10;
    }
    if (a2[2] == 1)
    {
LABEL_10:
      v14 = sub_1B1BAF7A8();
      v15 = sub_1B1BAF7E8(v14);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 8) = v15;
      if (a2[2] == 1)
      {
        v16.i32[0] = 0;
        v17 = sub_1B19F3E1C(*(_QWORD *)(v15 + 16) / 0x14uLL, v16);
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v17 = (uint64_t)sub_1B1FFEEAC(v17);
          v19 = 0;
          v20 = (float *)(v15 + 56);
          do
          {
            *(float *)(v17 + 4 * v19 + 32) = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(v20 - 6) + 0.0) + *(v20 - 5)) + *(v20 - 4)) + *(v20 - 3)) + *(v20 - 2)) + *(v20 - 1)) + *v20) + v20[1]) + v20[2]) + v20[3]) + v20[4]) + v20[5]) + v20[6]) + v20[7])
                                                                                           + v20[8])
                                                                                   + v20[9])
                                                                           + v20[10])
                                                                   + v20[11])
                                                           + v20[12])
                                                   + v20[13])
                                           * 0.05;
            v20 += 20;
            ++v19;
          }
          while (v18 != v19);
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(a3 + 16) = v17;
      }
    }
    if (a2[3] != 1)
      goto LABEL_20;
    v21 = *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX11AudioPlayer_samplesRawCount];
    if ((v21 & 0x8000000000000000) == 0)
    {
      info.numer = 0;
      vDSP_measqv(v9, 1, (float *)&info, v21);
      *(float *)(a3 + 24) = fminf(fmaxf((float)((float)(log10f(*(float *)&info.numer) * 10.0) + 40.0) * 0.0075, 0.0), 1.0);
LABEL_20:
      objc_msgSend(*(id *)&v4[v6], sel_unlock);

      return;
    }
    sub_1B222967C();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)a3 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 8) = v22;
    swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 16) = v22;
    *(_DWORD *)(a3 + 24) = 0;
  }
}

void sub_1B1BB4D20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5BCF8)
  {
    type metadata accessor for Option(255);
    sub_1B19E52CC((unint64_t *)&qword_1EEF5BD00, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C3AC);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5BCF8);
  }
}

uint64_t sub_1B1BB4DA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  sub_1B19F8E54(0, &qword_1EEF5BD28, (uint64_t (*)(void))sub_1B1BB5178, (uint64_t)&type metadata for AudioController.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v15 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB5178();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v18 = 0;
  v9 = sub_1B22297D8();
  v17 = 1;
  v10 = sub_1B22297D8();
  v16 = 2;
  v12 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if ((v12 & 1) != 0)
    v13 = 0x10000;
  else
    v13 = 0;
  if ((v10 & 1) != 0)
    v14 = 256;
  else
    v14 = 0;
  return v14 & 0xFFFFFFFE | v9 & 1 | v13;
}

uint64_t sub_1B1BB4F50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_1B19F8E54(0, &qword_1EEF5BD10, (uint64_t (*)(void))sub_1B1BB5134, (uint64_t)&type metadata for AudioAnalyzer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v17 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BB5134();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v21 = 0;
  v9 = sub_1B22297D8();
  v20 = 1;
  v10 = sub_1B22297D8();
  v19 = 2;
  v11 = sub_1B22297D8();
  v18 = 3;
  v13 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if ((v13 & 1) != 0)
    v14 = 0x1000000;
  else
    v14 = 0;
  if ((v11 & 1) != 0)
    v15 = 0x10000;
  else
    v15 = 0;
  if ((v10 & 1) != 0)
    v16 = 256;
  else
    v16 = 0;
  return v16 & 0xFFFFFFFE | v9 & 1 | v15 | v14;
}

unint64_t sub_1B1BB5134()
{
  unint64_t result;

  result = qword_1EEF5BD18;
  if (!qword_1EEF5BD18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F1BC, &type metadata for AudioAnalyzer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD18);
  }
  return result;
}

unint64_t sub_1B1BB5178()
{
  unint64_t result;

  result = qword_1EEF5BD30;
  if (!qword_1EEF5BD30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F16C, &type metadata for AudioController.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD30);
  }
  return result;
}

unint64_t sub_1B1BB51BC()
{
  unint64_t result;

  result = qword_1EEF5BD40;
  if (!qword_1EEF5BD40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD7D4, &type metadata for Asset);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD40);
  }
  return result;
}

unint64_t sub_1B1BB5200()
{
  unint64_t result;

  result = qword_1EEF5BD50;
  if (!qword_1EEF5BD50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F11C, &type metadata for MovieFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD50);
  }
  return result;
}

unint64_t sub_1B1BB5244()
{
  unint64_t result;

  result = qword_1EEF5BD58;
  if (!qword_1EEF5BD58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD7FC, &type metadata for Asset);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD58);
  }
  return result;
}

uint64_t sub_1B1BB5288(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

id *sub_1B1BB52CC(id *a1)
{

  return a1;
}

unint64_t sub_1B1BB52F4()
{
  unint64_t result;

  result = qword_1EEF5BD78;
  if (!qword_1EEF5BD78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F0CC, &type metadata for VideoCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD78);
  }
  return result;
}

uint64_t sub_1B1BB5338()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1B1BB5364()
{
  uint64_t v0;

  sub_1B1BAE674(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1B1BB536C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_1B2228B6C();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1B1BB53C0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B1BB536C(255, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1BB5434);
    v6 = sub_1B22296E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1B1BB5434(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

ValueMetadata *type metadata accessor for VideoCapture.CodingKeys()
{
  return &type metadata for VideoCapture.CodingKeys;
}

ValueMetadata *type metadata accessor for MovieFileAsset.CodingKeys()
{
  return &type metadata for MovieFileAsset.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AudioController.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1BB550C + 4 * byte_1B227E61D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1BB5540 + 4 * byte_1B227E618[v4]))();
}

uint64_t sub_1B1BB5540(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BB5548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BB5550);
  return result;
}

uint64_t sub_1B1BB555C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BB5564);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1BB5568(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BB5570(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioController.CodingKeys()
{
  return &type metadata for AudioController.CodingKeys;
}

ValueMetadata *type metadata accessor for AudioAnalyzer.CodingKeys()
{
  return &type metadata for AudioAnalyzer.CodingKeys;
}

uint64_t destroy for AudioSpectrum()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AudioSpectrum(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioSpectrum(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  return a1;
}

__n128 initializeWithTake for ReplicationEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioSpectrum(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphEntityComponentPropertyReferences(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphEntityComponentPropertyReferences(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioSpectrum()
{
  return &type metadata for AudioSpectrum;
}

void destroy for ShaderFileAsset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ShaderFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (id)v7;
  return a1;
}

_QWORD *assignWithCopy for ShaderFileAsset(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[4];
  v5 = a2[5];
  v6 = (void *)a1[4];
  a1[4] = v4;
  v7 = v4;

  a1[5] = v5;
  return a1;
}

uint64_t assignWithTake for ShaderFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for CALayerFileAsset()
{
  return &type metadata for CALayerFileAsset;
}

ValueMetadata *type metadata accessor for VideoCapture.OrientationMode()
{
  return &type metadata for VideoCapture.OrientationMode;
}

unint64_t sub_1B1BB59F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5BDE8;
  if (!qword_1EEF5BDE8)
  {
    sub_1B1A02758(255, &qword_1EEF5BDF0, (uint64_t)&type metadata for VideoCapture.OrientationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5BDE8);
  }
  return result;
}

unint64_t sub_1B1BB5A58()
{
  unint64_t result;

  result = qword_1EEF5BDF8;
  if (!qword_1EEF5BDF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227ECDC, &type metadata for VideoCapture.OrientationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5BDF8);
  }
  return result;
}

unint64_t sub_1B1BB5AA0()
{
  unint64_t result;

  result = qword_1EEF5BE00;
  if (!qword_1EEF5BE00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EE44, &type metadata for AudioAnalyzer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE00);
  }
  return result;
}

unint64_t sub_1B1BB5AE8()
{
  unint64_t result;

  result = qword_1EEF5BE08;
  if (!qword_1EEF5BE08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EEFC, &type metadata for AudioController.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE08);
  }
  return result;
}

unint64_t sub_1B1BB5B30()
{
  unint64_t result;

  result = qword_1EEF5BE10;
  if (!qword_1EEF5BE10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EFEC, &type metadata for MovieFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE10);
  }
  return result;
}

unint64_t sub_1B1BB5B78()
{
  unint64_t result;

  result = qword_1EEF5BE18;
  if (!qword_1EEF5BE18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F0A4, &type metadata for VideoCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE18);
  }
  return result;
}

unint64_t sub_1B1BB5BC0()
{
  unint64_t result;

  result = qword_1EEF5BE20;
  if (!qword_1EEF5BE20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F014, &type metadata for VideoCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE20);
  }
  return result;
}

unint64_t sub_1B1BB5C08()
{
  unint64_t result;

  result = qword_1EEF5BE28;
  if (!qword_1EEF5BE28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F03C, &type metadata for VideoCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE28);
  }
  return result;
}

unint64_t sub_1B1BB5C50()
{
  unint64_t result;

  result = qword_1EEF5BE30;
  if (!qword_1EEF5BE30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EF24, &type metadata for MovieFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE30);
  }
  return result;
}

unint64_t sub_1B1BB5C98()
{
  unint64_t result;

  result = qword_1EEF5BE38;
  if (!qword_1EEF5BE38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EF4C, &type metadata for MovieFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE38);
  }
  return result;
}

unint64_t sub_1B1BB5CE0()
{
  unint64_t result;

  result = qword_1EEF5BE40;
  if (!qword_1EEF5BE40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EE6C, &type metadata for AudioController.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE40);
  }
  return result;
}

unint64_t sub_1B1BB5D28()
{
  unint64_t result;

  result = qword_1EEF5BE48;
  if (!qword_1EEF5BE48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EE94, &type metadata for AudioController.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE48);
  }
  return result;
}

unint64_t sub_1B1BB5D70()
{
  unint64_t result;

  result = qword_1EEF5BE50;
  if (!qword_1EEF5BE50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EDB4, &type metadata for AudioAnalyzer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE50);
  }
  return result;
}

unint64_t sub_1B1BB5DB8()
{
  unint64_t result;

  result = qword_1EEF5BE58;
  if (!qword_1EEF5BE58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227EDDC, &type metadata for AudioAnalyzer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE58);
  }
  return result;
}

uint64_t sub_1B1BB5DFC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v17 = a2;
  sub_1B19F8E54(0, &qword_1EEF5BE60, (uint64_t (*)(void))sub_1B1BB6144, (uint64_t)&type metadata for AudioSpectrum.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v18 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v16 - v6;
  v8 = sub_1B2228B0C();
  *(_QWORD *)(v8 + 16) = 2048;
  bzero((void *)(v8 + 32), 0x2000uLL);
  swift_bridgeObjectRetain();
  v9 = sub_1B2228B0C();
  *(_QWORD *)(v9 + 16) = 2048;
  bzero((void *)(v9 + 32), 0x2000uLL);
  v22 = 1;
  v10 = a1[3];
  v19 = a1;
  sub_1B19FA070(a1, v10);
  sub_1B1BB6144();
  swift_bridgeObjectRetain();
  v11 = v20;
  sub_1B222A150();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v23 = 0;
    sub_1B1A1F740((unint64_t *)&qword_1ED4BA4C8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    swift_bridgeObjectRelease();
    v23 = 1;
    sub_1B2229814();
    swift_bridgeObjectRelease();
    v23 = 2;
    sub_1B2229814();
    swift_bridgeObjectRelease();
    LOBYTE(v21) = 3;
    sub_1B22297F0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v18);
    v13 = v22;
    v14 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    v15 = v17;
    *v17 = v14;
    v15[1] = v14;
    v15[2] = v14;
    *((_DWORD *)v15 + 6) = 0;
    v15[4] = v8;
    v15[5] = v9;
    v15[6] = 0;
    *((_BYTE *)v15 + 56) = v13;
  }
  return result;
}

unint64_t sub_1B1BB6144()
{
  unint64_t result;

  result = qword_1EEF5BE68;
  if (!qword_1EEF5BE68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F380, &type metadata for AudioSpectrum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE68);
  }
  return result;
}

uint64_t _s3VFX12VideoCaptureV15OrientationModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1BB61D4 + 4 * byte_1B227E627[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1BB6208 + 4 * byte_1B227E622[v4]))();
}

uint64_t sub_1B1BB6208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BB6210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BB6218);
  return result;
}

uint64_t sub_1B1BB6224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BB622CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1BB6230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BB6238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioSpectrum.CodingKeys()
{
  return &type metadata for AudioSpectrum.CodingKeys;
}

ValueMetadata *type metadata accessor for AudioMeter()
{
  return &type metadata for AudioMeter;
}

unint64_t sub_1B1BB6268()
{
  unint64_t result;

  result = qword_1EEF5BE80;
  if (!qword_1EEF5BE80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F358, &type metadata for AudioSpectrum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE80);
  }
  return result;
}

unint64_t sub_1B1BB62B0()
{
  unint64_t result;

  result = qword_1EEF5BE88;
  if (!qword_1EEF5BE88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F290, &type metadata for AudioSpectrum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE88);
  }
  return result;
}

unint64_t sub_1B1BB62F8()
{
  unint64_t result;

  result = qword_1EEF5BE90;
  if (!qword_1EEF5BE90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F2B8, &type metadata for AudioSpectrum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BE90);
  }
  return result;
}

_QWORD *sub_1B1BB6354(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v24[40];
  _QWORD *v25;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5BEA0, (uint64_t (*)(void))sub_1B1BB94F0, (uint64_t)&_s17CustomCodeSnippetC10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v24[-v9 - 8];
  v11 = a1[3];
  v25 = a1;
  v12 = sub_1B19FA070(a1, v11);
  sub_1B1BB94F0();
  swift_retain();
  v13 = v12;
  sub_1B222A150();
  if (v2)
  {
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v25);
    _s17CustomCodeSnippetCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v14 = v7;
    _s17CodeSourceSnippetCMa();
    sub_1B1BB9EB0(&qword_1EEF58BC8, (uint64_t)&unk_1B229DF3C);
    sub_1B2229814();
    v15 = v6;
    *(_QWORD *)(v3 + 136) = *(_QWORD *)v24;
    swift_release();
    v17 = (uint64_t)v25;
    sub_1B19FA198((uint64_t)v25, (uint64_t)v24);
    v18 = v14;
    v13 = (_QWORD *)sub_1B1FB9F2C(v24);
    v19 = *(void (**)(uint64_t))(*v13 + 1336);
    v20 = swift_retain_n();
    v19(v20);
    v13[12] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    v21 = (_QWORD *)v13[10];
    v22 = v13[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DF6860(v21, v22, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1BB959C);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v15);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
    swift_release();
  }
  return v13;
}

uint64_t sub_1B1BB65DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  _QWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF5BEE0, (uint64_t (*)(void))sub_1B1BB94F0, (uint64_t)&_s17CustomCodeSnippetC10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  result = sub_1B1FBAA8C(a1);
  if (!v2)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1BB94F0();
    sub_1B222A180();
    v11[1] = *(_QWORD *)(v1 + 136);
    _s17CodeSourceSnippetCMa();
    sub_1B1BB9EB0(&qword_1EEF58BE8, (uint64_t)&unk_1B229DF14);
    sub_1B2229958();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

unint64_t sub_1B1BB6720()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_retain();
  sub_1B1ED7610();
  sub_1B2228890();
  swift_release();
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t sub_1B1BB67FC(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unint64_t v67;
  const char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t result;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  const char *v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  int *v148;
  uint64_t v149;
  __int128 v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  _OWORD v159[2];
  uint64_t v160[4];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[5];
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;

  v158 = a2;
  v157 = a1;
  v5 = 0;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v154 = (char *)&v131 - v8;
  sub_1B1B1F358();
  v148 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v147 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1B222820C();
  v145 = *(_QWORD *)(v12 - 8);
  v146 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v144 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = v3;
  v15 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 160);
  if (v15)
  {
    v177 = v15;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1B1BB9534(&v177);
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v177 + 16);
    if (v16)
    {
      v132 = 0;
      v156 = swift_retain();
      v17 = (unint64_t *)(v156 + 40);
      v18 = v158;
      do
      {
        v19 = *(v17 - 1);
        v20 = *v17;
        v177 = v18;
        v178 = a3;
        v174 = v19;
        v175 = v20;
        v173[0] = 36;
        v173[1] = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B1A06460();
        swift_bridgeObjectRetain();
        v18 = sub_1B222922C();
        v22 = v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        a3 = v22;
        v17 += 2;
        --v16;
      }
      while (v16);
      v158 = v18;
      swift_release_n();
      v5 = v132;
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v23 = *(_QWORD *)(v133 + 96);
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v24 = sub_1B22296AC();
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
  }
  v132 = v5;
  if (v24)
  {
    v25 = 0;
    v151 = v23 & 0xC000000000000001;
    v26 = 67;
    if (v157 == 1)
      v26 = 0x6C6174654DLL;
    v139 = v26;
    v27 = 0xE100000000000000;
    if (v157 == 1)
      v27 = 0xE500000000000000;
    v138 = v27;
    v137 = "};out = &#TEMP#[0]";
    v135 = "CodeGenContext.typeAsCode: ";
    v136 = 0x80000001B232B900;
    v134 = 0x80000001B232B920;
    v143 = xmmword_1B226D240;
    v152 = v24;
    v153 = v23;
    do
    {
      v155 = v25;
      if (v151)
      {
        v29 = MEMORY[0x1B5E21018]();
      }
      else
      {
        v29 = *(_QWORD *)(v23 + 8 * v25 + 32);
        swift_retain();
      }
      v30 = v157;
      v31 = *(_QWORD *)(v29 + 24);
      v32 = *(_QWORD *)(v29 + 32);
      sub_1B19FA278(v29 + 56, (uint64_t)v173);
      v156 = v29;
      if (v30 == 2)
      {
        v168 = 544499052;
        v169 = 0xE400000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B19F8C58(v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B19FA278((uint64_t)v173, (uint64_t)&v177);
        if (v178 >= 0x3B)
        {
          if (*(_QWORD *)(v179 + 16) && (sub_1B1DC3C04(2u), (v34 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v150 = v31;
            v163 = 0;
            v164 = 0xE000000000000000;
            v142 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v163 = 0xD00000000000001BLL;
            v164 = v136;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v37 = v163;
            v38 = v164;
            v39 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v149 = v32;
            v40 = qword_1ED4D0FD0;
            v41 = qword_1ED4BF688;
            swift_retain();
            if (v41 != -1)
              swift_once();
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v42 = swift_allocObject();
            *(_OWORD *)(v42 + 16) = v143;
            *(_QWORD *)(v42 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v42 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v42 + 32) = v37;
            *(_QWORD *)(v42 + 40) = v38;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v43 = v144;
            sub_1B2228200();
            v44 = (uint64_t)v147;
            v45 = v148[12];
            v140 = v148[16];
            v141 = v40;
            v46 = (uint64_t *)&v147[v148[20]];
            (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v147, v43, v146);
            *(_BYTE *)(v44 + v45) = v39;
            *(_QWORD *)(v44 + v140) = 0;
            *v46 = v37;
            v46[1] = v38;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v44);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            v32 = v149;
            v31 = v150;
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)v173);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
      else
      {
        v168 = 0x2074736E6F63;
        v169 = 0xE600000000000000;
        sub_1B19FA278((uint64_t)v173, (uint64_t)&v174);
        if (v175 >= 0x3B)
        {
          v35 = *(_QWORD *)(v176 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B19F8C58(v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          if (v35 && (sub_1B1DC3C04(v157), (v36 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v150 = v31;
            v163 = 0;
            v164 = 0xE000000000000000;
            v142 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v163 = 0xD00000000000001BLL;
            v164 = (unint64_t)v137 | 0x8000000000000000;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v47 = v163;
            v48 = v164;
            v49 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v149 = v32;
            v50 = qword_1ED4D0FD0;
            v51 = qword_1ED4BF688;
            swift_retain();
            if (v51 != -1)
              swift_once();
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v52 = swift_allocObject();
            *(_OWORD *)(v52 + 16) = v143;
            *(_QWORD *)(v52 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v52 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v52 + 32) = v47;
            *(_QWORD *)(v52 + 40) = v48;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v53 = v144;
            sub_1B2228200();
            v54 = (uint64_t)v147;
            v55 = v148[12];
            v140 = v148[16];
            v141 = v50;
            v56 = (uint64_t *)&v147[v148[20]];
            (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v147, v53, v146);
            *(_BYTE *)(v54 + v55) = v49;
            *(_QWORD *)(v54 + v140) = 0;
            *v56 = v47;
            v56[1] = v48;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v54);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            v32 = v149;
            v31 = v150;
          }
        }
        else
        {
          v33 = v157;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B19F8C58(v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          if (v33)
            sub_1B1C45B38((uint64_t)v173);
          else
            sub_1B1C460C0((uint64_t)v173);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228890();
      }
      sub_1B19F8C58(v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v58 = v168;
      v57 = v169;
      v59 = v158;
      v168 = v158;
      v169 = a3;
      v163 = v31;
      v164 = v32;
      v60 = sub_1B2228278();
      v61 = (uint64_t)v154;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v154, 1, 1, v60);
      sub_1B1A06460();
      v62 = sub_1B222925C();
      v64 = v63;
      v66 = v65;
      sub_1B1BB9EF0(v61);
      if ((v66 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = a3;
      }
      else
      {
        v158 = sub_1B1D8E6F0(v62, v64, v58, v57, v59, a3);
        v28 = v67;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_bridgeObjectRelease_n();
      v25 = v155 + 1;
      a3 = v28;
      v23 = v153;
    }
    while (v152 != v155 + 1);
  }
  else
  {
    v28 = a3;
  }
  swift_bridgeObjectRelease_n();
  v68 = (const char *)sub_1B1FB750C();
  if (v68)
  {
    v69 = *((_QWORD *)v68 + 2);
    v70 = v158;
    v135 = v68;
    if (v69)
    {
      if (v157 == 1)
        v71 = 0x6C6174654DLL;
      else
        v71 = 67;
      v72 = 0xE100000000000000;
      if (v157 == 1)
        v72 = 0xE500000000000000;
      v140 = v72;
      v141 = v71;
      v73 = (uint64_t)(v68 + 104);
      v152 = MEMORY[0x1E0DEE9B8] + 8;
      v139 = (uint64_t)"};out = &#TEMP#[0]";
      v137 = "CodeGenContext.typeAsCode: ";
      v138 = 0x80000001B232B900;
      v136 = 0x80000001B232B920;
      v150 = xmmword_1B226D240;
      do
      {
        v76 = *(_QWORD *)(v73 - 72);
        v77 = *(_QWORD *)(v73 - 64);
        v78 = sub_1B2228920();
        swift_bridgeObjectRetain();
        v158 = v70;
        if ((v78 & 1) != 0)
        {
          sub_1B2228830();
          sub_1B2228854();
          v79 = sub_1B2228974();
          v81 = v80;
          v83 = v82;
          v85 = v84;
          swift_bridgeObjectRelease();
          v156 = MEMORY[0x1B5E20388](v79, v81, v83, v85);
          v77 = v86;
          swift_bridgeObjectRelease();
        }
        else
        {
          v156 = v76;
        }
        v87 = v157;
        sub_1B1A0DCD4(v73, (uint64_t)v159);
        sub_1B1A0DDAC(v159, v160);
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        sub_1B1E0E85C(v161, v162, &v163);
        v88 = v164;
        v89 = v167;
        v168 = v163;
        v169 = v164;
        v170 = v165;
        v171 = v166;
        v172 = v167;
        v155 = v69;
        v153 = v73;
        if (v87 == 2)
        {
          v160[0] = 544499052;
          v160[1] = 0xE400000000000000;
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          if (v88 >= 0x3B)
          {
            if (*(_QWORD *)(v89 + 16) && (sub_1B1DC3C04(2u), (v90 & 1) != 0))
            {
              swift_bridgeObjectRetain();
            }
            else
            {
              if (qword_1ED4BF430 != -1)
                swift_once();
              *(_QWORD *)&v159[0] = 0;
              *((_QWORD *)&v159[0] + 1) = 0xE000000000000000;
              v149 = qword_1ED4D0FB0;
              swift_retain();
              sub_1B2229430();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v159[0] = 0xD00000000000001BLL;
              *((_QWORD *)&v159[0] + 1) = v138;
              swift_bridgeObjectRetain();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              sub_1B2228890();
              v92 = v159[0];
              LODWORD(v151) = sub_1B2228E9C();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v93 = qword_1ED4D0FD0;
              v94 = qword_1ED4BF688;
              swift_retain();
              v95 = MEMORY[0x1E0DEA968];
              if (v94 != -1)
                swift_once();
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v96 = swift_allocObject();
              *(_OWORD *)(v96 + 16) = v150;
              *(_QWORD *)(v96 + 56) = v95;
              *(_QWORD *)(v96 + 64) = sub_1B1B1F47C();
              *(_OWORD *)(v96 + 32) = v92;
              swift_bridgeObjectRetain();
              sub_1B222835C();
              swift_bridgeObjectRelease();
              swift_retain();
              v97 = v144;
              sub_1B2228200();
              v98 = v148[12];
              v142 = v148[16];
              *(_QWORD *)&v143 = v93;
              v99 = (uint64_t)v147;
              v100 = &v147[v148[20]];
              (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v147, v97, v146);
              *(_BYTE *)(v99 + v98) = v151;
              *(_QWORD *)(v99 + v142) = 0;
              *(_OWORD *)v100 = v92;
              swift_bridgeObjectRetain();
              sub_1B2228428();
              swift_release();
              sub_1B1B429AC(v99);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
          else
          {
            sub_1B1C454D0((uint64_t)&v168);
          }
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B19F8C58(&v163, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
          v101 = v160[1];
          v102 = v160[0];
          v103 = v156;
        }
        else
        {
          v160[0] = 0x2074736E6F63;
          v160[1] = 0xE600000000000000;
          if (v164 >= 0x3B)
          {
            if (*(_QWORD *)(v167 + 16) && (sub_1B1DC3C04(v157), (v91 & 1) != 0))
            {
              swift_bridgeObjectRetain();
            }
            else
            {
              if (qword_1ED4BF430 != -1)
                swift_once();
              *(_QWORD *)&v159[0] = 0;
              *((_QWORD *)&v159[0] + 1) = 0xE000000000000000;
              v149 = qword_1ED4D0FB0;
              swift_retain();
              sub_1B2229430();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v159[0] = 0xD00000000000001BLL;
              *((_QWORD *)&v159[0] + 1) = v139 | 0x8000000000000000;
              swift_bridgeObjectRetain();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              v104 = v159[0];
              LODWORD(v151) = sub_1B2228E9C();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v105 = qword_1ED4D0FD0;
              v106 = qword_1ED4BF688;
              swift_retain();
              v107 = MEMORY[0x1E0DEA968];
              if (v106 != -1)
                swift_once();
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v108 = swift_allocObject();
              *(_OWORD *)(v108 + 16) = v150;
              *(_QWORD *)(v108 + 56) = v107;
              *(_QWORD *)(v108 + 64) = sub_1B1B1F47C();
              *(_OWORD *)(v108 + 32) = v104;
              swift_bridgeObjectRetain();
              sub_1B222835C();
              swift_bridgeObjectRelease();
              swift_retain();
              v109 = v144;
              sub_1B2228200();
              v110 = v148[12];
              v142 = v148[16];
              *(_QWORD *)&v143 = v105;
              v111 = (uint64_t)v147;
              v112 = &v147[v148[20]];
              (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v147, v109, v146);
              *(_BYTE *)(v111 + v110) = v151;
              *(_QWORD *)(v111 + v142) = 0;
              *(_OWORD *)v112 = v104;
              swift_bridgeObjectRetain();
              sub_1B2228428();
              swift_release();
              sub_1B1B429AC(v111);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
          else if ((_BYTE)v157)
          {
            sub_1B1C45B38((uint64_t)&v168);
          }
          else
          {
            sub_1B1C460C0((uint64_t)&v168);
          }
          v103 = v156;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B19F8C58(&v163, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
          v101 = v160[1];
          v102 = v160[0];
        }
        v70 = v158;
        v160[0] = v158;
        v160[1] = v28;
        *(_QWORD *)&v159[0] = v103;
        *((_QWORD *)&v159[0] + 1) = v77;
        v113 = sub_1B2228278();
        v114 = (uint64_t)v154;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v154, 1, 1, v113);
        sub_1B1A06460();
        v115 = sub_1B222925C();
        v117 = v116;
        v119 = v118;
        sub_1B1BB9EF0(v114);
        if ((v119 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v74 = v28;
        }
        else
        {
          v70 = sub_1B1D8E6F0(v115, v117, v102, v101, v70, v28);
          v74 = v120;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v75 = v155;
        swift_bridgeObjectRelease_n();
        v73 = v153 + 104;
        v28 = v74;
        v69 = v75 - 1;
      }
      while (v69);
    }
    else
    {
      v74 = v28;
    }
    swift_bridgeObjectRelease();
    v28 = v74;
  }
  else
  {
    v70 = v158;
  }
  v121 = *(_QWORD *)(v133 + 136);
  if (!*(_QWORD *)(v121 + 200))
    return v70;
  v160[0] = *(_QWORD *)(v121 + 200);
  swift_bridgeObjectRetain_n();
  v122 = v132;
  sub_1B1BB9534(v160);
  if (!v122)
  {
    swift_bridgeObjectRelease();
    v123 = v160[0];
    v124 = *(_QWORD *)(v160[0] + 16);
    if (v124)
    {
      swift_retain();
      v158 = v123;
      v125 = (uint64_t *)(v123 + 40);
      do
      {
        v126 = *(v125 - 1);
        v127 = *v125;
        v160[0] = v70;
        v160[1] = v28;
        *(_QWORD *)&v159[0] = v126;
        *((_QWORD *)&v159[0] + 1) = v127;
        v161 = 36;
        v162 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B1A06460();
        swift_bridgeObjectRetain();
        v70 = sub_1B222922C();
        v129 = v128;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v28 = v129;
        v125 += 2;
        --v124;
      }
      while (v124);
      swift_release();
    }
    swift_release();
    return v70;
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1B1BB7E08(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[2];
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v2 = v1;
  if ((sub_1B1FB4544() & 1) != 0)
  {
    v4 = (_QWORD *)v1[6];
    if (v4[2])
    {
      v5 = v4[4];
      v6 = v4[5];
      v7 = v4[8];
      v81 = v4[6];
      v82 = v4[7];
      sub_1B19FA2B4(v5, v6);
      v8 = (_QWORD *)v2[11];
      if (!v8[2])
      {
        if (v6 != 59)
        {
          v9 = 0;
          v10 = 59;
LABEL_12:
          sub_1B1A20360(v5, v6);
          sub_1B1A20360(v9, v10);
          goto LABEL_13;
        }
        goto LABEL_39;
      }
    }
    else
    {
      v8 = (_QWORD *)v1[11];
      if (!v8[2])
        goto LABEL_39;
      v7 = 0;
      v81 = 0;
      v82 = 0;
      v5 = 0;
      v6 = 59;
    }
    v9 = v8[4];
    v10 = v8[5];
    v11 = v8[6];
    v12 = v8[7];
    v13 = v8[8];
    sub_1B19FA2B4(v9, v10);
    if (v6 == 59)
    {
      if (v10 != 59)
      {
        v6 = 59;
        goto LABEL_12;
      }
      goto LABEL_39;
    }
    if (v10 == 59)
      goto LABEL_12;
    v99 = v5;
    v100 = v6;
    v101 = v81;
    v102 = v82;
    v103 = v7;
    v94 = v9;
    v95 = v10;
    v96 = v11;
    v97 = v12;
    v98 = v13;
    sub_1B19FA2B4(v5, v6);
    v78 = sub_1B1E03DBC();
    v80 = v62;
    if (v78 == sub_1B1E03DBC() && v80 == v63)
    {
      swift_bridgeObjectRelease_n();
      sub_1B1A20360(v9, v10);
      sub_1B1A20360(v5, v6);
      sub_1B1A20360(v5, v6);
      goto LABEL_39;
    }
    v79 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1A20360(v9, v10);
    sub_1B1A20360(v5, v6);
    sub_1B1A20360(v5, v6);
    if ((v79 & 1) != 0)
    {
LABEL_39:
      v64 = v2[7];
      if (v64 >> 62)
      {
        swift_bridgeObjectRetain();
        if (!sub_1B22296AC())
          goto LABEL_43;
      }
      else
      {
        v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v65)
          goto LABEL_43;
      }
      if ((v64 & 0xC000000000000001) != 0)
        MEMORY[0x1B5E21018](0, v64);
      else
        swift_retain();
LABEL_43:
      swift_bridgeObjectRelease();
      v66 = v2[12];
      if (v66 >> 62)
      {
        swift_bridgeObjectRetain();
        v67 = sub_1B22296AC();
        if (v67)
        {
LABEL_45:
          if ((v66 & 0xC000000000000001) != 0)
          {
            v67 = MEMORY[0x1B5E21018](0, v66);
          }
          else
          {
            v67 = *(_QWORD *)(v66 + 32);
            swift_retain();
          }
        }
      }
      else
      {
        v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v67)
          goto LABEL_45;
      }
      swift_bridgeObjectRelease();
      v68 = *a1;
      *(_QWORD *)&v87[0] = 8201;
      *((_QWORD *)&v87[0] + 1) = 0xE200000000000000;
      v69 = *(_BYTE *)(v68 + 24);
      sub_1B19FA278(v67 + 56, (uint64_t)&v88);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B19F8C58(&v88, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      v70 = sub_1B1FC0A9C();
      v72 = v71;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B1C39E78((uint64_t)&v88, v70, v72, 0, v69);
      swift_bridgeObjectRelease();
      sub_1B19F8C58(&v88, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1FC0A9C();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v73 = *(_QWORD **)(v68 + 128);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v68 + 128) = v73;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v73 = sub_1B1C63044(0, v73[2] + 1, 1, v73);
        *(_QWORD *)(v68 + 128) = v73;
      }
      v76 = v73[2];
      v75 = v73[3];
      if (v76 >= v75 >> 1)
      {
        v73 = sub_1B1C63044(v75 > 1, v76 + 1, 1, v73);
        *(_QWORD *)(v68 + 128) = v73;
      }
      v73[2] = v76 + 1;
      v77 = &v73[2 * v76];
      v77[4] = 8201;
      v77[5] = 0xE200000000000000;
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
LABEL_13:
  v14 = *a1;
  v15 = *(_BYTE *)(*a1 + 24);
  swift_retain();
  v16 = sub_1B1ED6A88(v15);
  v18 = v17;
  swift_release();
  if (!v18)
  {
    v51 = v2[3];
    v50 = v2[4];
    v90 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v88 = 0;
    *((_QWORD *)&v88 + 1) = 0xE000000000000000;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v88, v87);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v88);
    sub_1B1A0DDAC(v87, &v88);
    swift_dynamicCast();
    v52 = sub_1B1FB4768();
    v54 = v53;
    *(_QWORD *)&v88 = 0;
    *((_QWORD *)&v88 + 1) = 0xE000000000000000;
    sub_1B2229430();
    v87[0] = v88;
    v84 = v52;
    swift_bridgeObjectRetain();
    sub_1B1B5A1CC();
    swift_bridgeObjectRelease();
    sub_1B222916C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v55 = sub_1B1DCD8E8();
    v57 = v56;
    v59 = v58;
    v61 = v60;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v88 = v55;
    *((_QWORD *)&v88 + 1) = v57;
    v89 = v59;
    v90 = v61;
    sub_1B1B25B50();
    swift_bridgeObjectRetain();
    sub_1B2228878();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    *(_QWORD *)&v88 = v51;
    *((_QWORD *)&v88 + 1) = v50;
    v89 = v85;
    v90 = v86;
    v91 = v84;
    v92 = v54;
    v93 = v87[0];
    sub_1B1E8E08C(&v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v19 = sub_1B1BB67FC(*(unsigned __int8 *)(v14 + 24), v16, v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = v2[17];
  v23 = *(_QWORD *)(v22 + 160);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v83 = v14;
      v25 = v2;
      v26 = swift_bridgeObjectRetain() + 40;
      do
      {
        *(_QWORD *)&v88 = v19;
        *((_QWORD *)&v88 + 1) = v21;
        *(_QWORD *)&v87[0] = 36;
        *((_QWORD *)&v87[0] + 1) = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1FC0A9C();
        swift_bridgeObjectRelease();
        sub_1B1A06460();
        v19 = sub_1B222922C();
        v28 = v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = v28;
        v26 += 16;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      v22 = v25[17];
      v14 = v83;
    }
  }
  v29 = *(_QWORD *)(v22 + 200);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
    {
      v31 = swift_bridgeObjectRetain() + 40;
      do
      {
        *(_QWORD *)&v88 = v19;
        *((_QWORD *)&v88 + 1) = v21;
        *(_QWORD *)&v87[0] = 36;
        *((_QWORD *)&v87[0] + 1) = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1FC0A9C();
        swift_bridgeObjectRelease();
        sub_1B1A06460();
        v19 = sub_1B222922C();
        v33 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = v33;
        v31 += 16;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)&v88 = v19;
  *((_QWORD *)&v88 + 1) = v21;
  *(_QWORD *)&v87[0] = 0x23504D455423;
  *((_QWORD *)&v87[0] + 1) = 0xE600000000000000;
  sub_1B1A06460();
  if ((sub_1B2229274() & 1) != 0)
  {
    *(_QWORD *)&v88 = v19;
    *((_QWORD *)&v88 + 1) = v21;
    *(_QWORD *)&v87[0] = 0x23504D455423;
    *((_QWORD *)&v87[0] + 1) = 0xE600000000000000;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1FC0A9C();
    swift_bridgeObjectRelease();
    sub_1B222922C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v87[0] = 10;
  *((_QWORD *)&v87[0] + 1) = 0xE100000000000000;
  v34 = sub_1B222922C();
  v36 = v35;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v88 = v34;
  *((_QWORD *)&v88 + 1) = v36;
  v37 = sub_1B2229280();
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v37 + 16);
  if (!v38)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v39 = (uint64_t *)(v37 + 56);
  do
  {
    v40 = *(v39 - 3);
    v41 = *(v39 - 2);
    v43 = *(v39 - 1);
    v42 = *v39;
    *(_QWORD *)&v88 = 8201;
    *((_QWORD *)&v88 + 1) = 0xE200000000000000;
    swift_bridgeObjectRetain();
    swift_retain();
    MEMORY[0x1B5E20388](v40, v41, v43, v42);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v44 = *(_QWORD **)(v14 + 128);
    swift_bridgeObjectRetain();
    v45 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v14 + 128) = v44;
    if ((v45 & 1) == 0)
    {
      v44 = sub_1B1C63044(0, v44[2] + 1, 1, v44);
      *(_QWORD *)(v14 + 128) = v44;
    }
    v47 = v44[2];
    v46 = v44[3];
    if (v47 >= v46 >> 1)
    {
      v44 = sub_1B1C63044(v46 > 1, v47 + 1, 1, v44);
      *(_QWORD *)(v14 + 128) = v44;
    }
    v44[2] = v47 + 1;
    v48 = &v44[2 * v47];
    v48[4] = 8201;
    v48[5] = 0xE200000000000000;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v39 += 4;
    --v38;
  }
  while (v38);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1B1BB8B84()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B1BB8B98()
{
  return sub_1B2228824();
}

uint64_t sub_1B1BB8BAC()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B1BB8BC0@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

void sub_1B1BB8BCC(_QWORD *a1@<X8>)
{
  *a1 = 0x656372756F73;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1B1BB8BE4()
{
  return 0x656372756F73;
}

uint64_t sub_1B1BB8BF8@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B1BB8C04()
{
  sub_1B1BB94F0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BB8C2C()
{
  sub_1B1BB94F0();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1BB8C54(_QWORD *a1)
{
  swift_allocObject();
  return sub_1B1BB6354(a1);
}

uint64_t _s17CustomCodeSnippetCMa()
{
  return objc_opt_self();
}

uint64_t sub_1B1BB8CBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1832))();
}

uint64_t sub_1B1BB8CE4()
{
  return sub_1B1BB8E70(36, 0xD000000000000015, 0x80000001B23328F0);
}

uint64_t sub_1B1BB8D08()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B1BB8D18()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B1BB8D28@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

uint64_t sub_1B1BB8D34@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B1BB8D40()
{
  sub_1B1BB9E6C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BB8D68()
{
  sub_1B1BB9E6C();
  return sub_1B222A1E0();
}

void (*sub_1B1BB8D90(_QWORD *a1))(uint64_t)
{
  swift_allocObject();
  return sub_1B1BB9194(a1, &qword_1EEF5BED8, (uint64_t (*)(void))sub_1B1BB9E6C, (uint64_t)&_s15VariableSnippetC10CodingKeysON, (void (*)(uint64_t))_s15VariableSnippetCMa);
}

uint64_t sub_1B1BB8DF8(_QWORD *a1)
{
  return sub_1B1BB93A0(a1, &qword_1EEF5BEC8, (uint64_t (*)(void))sub_1B1BB9E6C, (uint64_t)&_s15VariableSnippetC10CodingKeysON);
}

uint64_t _s15VariableSnippetCMa()
{
  return objc_opt_self();
}

uint64_t sub_1B1BB8E4C()
{
  return sub_1B1BB8E70(45, 0xD00000000000001ELL, 0x80000001B23328D0);
}

uint64_t sub_1B1BB8E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  v9 = a2;
  v10 = a3;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v8 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = 0xE000000000000000;
  sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v7, v6);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v7);
  sub_1B1A0DDAC(v6, &v7);
  swift_dynamicCast();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v9;
}

uint64_t sub_1B1BB8F94()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BB8FE0()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BB9028@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

uint64_t sub_1B1BB9034@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1BB9080@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B1BB908C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1BB90DC()
{
  sub_1B1BB9E28();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BB9104()
{
  sub_1B1BB9E28();
  return sub_1B222A1E0();
}

void (*sub_1B1BB912C(_QWORD *a1))(uint64_t)
{
  swift_allocObject();
  return sub_1B1BB9194(a1, &qword_1EEF5BEC0, (uint64_t (*)(void))sub_1B1BB9E28, (uint64_t)&_s24VariableReferenceSnippetC10CodingKeysON, (void (*)(uint64_t))_s24VariableReferenceSnippetCMa);
}

void (*sub_1B1BB9194(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(uint64_t)))(uint64_t)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  _QWORD *v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v23 = a5;
  v7 = v5;
  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v23 - v13;
  v15 = a1[3];
  v24 = a1;
  sub_1B19FA070(a1, v15);
  a3();
  swift_retain();
  v16 = v27;
  sub_1B222A150();
  if (v16)
  {
    swift_release();
    v17 = v23;
    v18 = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v24);
    v17(v18);
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1B19FA154();
    sub_1B2229814();
    v20 = v26;
    v21 = v25[1];
    *(_OWORD *)(v7 + 144) = v25[0];
    *(_OWORD *)(v7 + 160) = v21;
    *(_QWORD *)(v7 + 176) = v20;
    swift_release();
    v22 = (uint64_t)v24;
    sub_1B19FA198((uint64_t)v24, (uint64_t)v25);
    v17 = (void (*)(uint64_t))sub_1B1BB6354(v25);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v22);
  }
  return v17;
}

uint64_t sub_1B1BB9374(_QWORD *a1)
{
  return sub_1B1BB93A0(a1, &qword_1EEF5BEB0, (uint64_t (*)(void))sub_1B1BB9E28, (uint64_t)&_s24VariableReferenceSnippetC10CodingKeysON);
}

uint64_t sub_1B1BB93A0(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)v18 - v12;
  result = sub_1B1BB65DC(a1);
  if (!v5)
  {
    v22 = v10;
    v15 = a1[3];
    v18[1] = a1[4];
    sub_1B19FA070(a1, v15);
    a3();
    sub_1B222A180();
    v16 = *(_QWORD *)(v4 + 176);
    v17 = *(_OWORD *)(v4 + 160);
    v19 = *(_OWORD *)(v4 + 144);
    v20 = v17;
    v21 = v16;
    sub_1B19FA094();
    sub_1B2229958();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v13, v9);
  }
  return result;
}

uint64_t _s24VariableReferenceSnippetCMa()
{
  return objc_opt_self();
}

unint64_t sub_1B1BB94F0()
{
  unint64_t result;

  result = qword_1EEF5BEA8;
  if (!qword_1EEF5BEA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F800, &_s17CustomCodeSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BEA8);
  }
  return result;
}

uint64_t sub_1B1BB9534(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t *v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B216D588(v2);
  v3 = *(uint64_t **)(v2 + 16);
  v5[0] = (uint64_t *)(v2 + 32);
  v5[1] = v3;
  result = sub_1B1BB95A4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B1BB959C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;

  return sub_1B1FBB3C0(a1, a2, a3, v3);
}

uint64_t sub_1B1BB95A4(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *__dst;
  uint64_t v83;

  v1 = a1;
  v2 = (uint64_t)a1[1];
  result = sub_1B22299E8();
  if (result >= v2)
  {
    if ((unint64_t)v2 >= 2)
    {
      v7 = *v1;
      v8 = -1;
      v9 = 1;
      v10 = *v1;
      do
      {
        v11 = &v7[2 * v9];
        v12 = *v11;
        v13 = v11[1];
        v14 = v8;
        v15 = v10;
        do
        {
          result = *v15;
          if (*v15 == v12 && v15[1] == v13)
            break;
          result = sub_1B2229D24();
          if ((result & 1) == 0)
            break;
          v12 = v15[2];
          v13 = v15[3];
          *((_OWORD *)v15 + 1) = *(_OWORD *)v15;
          *v15 = v12;
          v15[1] = v13;
          v15 -= 2;
        }
        while (!__CFADD__(v14++, 1));
        ++v9;
        v10 += 2;
        --v8;
      }
      while (v9 != v2);
    }
    return result;
  }
  v80 = result;
  if (v2 >= 0)
    v4 = v2;
  else
    v4 = v2 + 1;
  if (v2 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (v2 < 2)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v2 != 1)
    {
      v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v21 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_93;
    }
    v79 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v5 = v4 >> 1;
    v6 = sub_1B2228B0C();
    *(_QWORD *)(v6 + 16) = v5;
    v79 = v6;
    __dst = (char *)(v6 + 32);
  }
  v19 = 0;
  v20 = *v1;
  v77 = v1;
  v78 = (uint64_t)(*v1 + 1);
  v21 = (char *)MEMORY[0x1E0DEE9D8];
  v81 = v2;
  while (2)
  {
    v23 = v19++;
    if (v19 >= v2)
      goto LABEL_53;
    v24 = &v20[2 * v19];
    v25 = *v24;
    v26 = v24[1];
    v27 = &v20[2 * v23];
    if (*v27 == v25 && v27[1] == v26)
    {
      v30 = v23 + 2;
      if (v23 + 2 >= v2)
        goto LABEL_52;
      v29 = 0;
      goto LABEL_35;
    }
    v29 = sub_1B2229D24();
    v30 = v23 + 2;
    if (v23 + 2 < v2)
    {
LABEL_35:
      v31 = (_QWORD *)(v78 + 16 * v30);
      do
      {
        v33 = &v20[2 * v19];
        if (*v33 == *(v31 - 1) && v33[1] == *v31)
        {
          if ((v29 & 1) != 0)
            goto LABEL_47;
        }
        else if (((v29 ^ sub_1B2229D24()) & 1) != 0)
        {
          goto LABEL_46;
        }
        v31 += 2;
        v32 = v30 + 1;
        v19 = v30;
        v30 = v32;
      }
      while (v32 < v2);
      v30 = v32;
    }
LABEL_46:
    v19 = v30;
    if ((v29 & 1) == 0)
      goto LABEL_53;
LABEL_47:
    if (v23 < v30)
    {
      v35 = 2 * v30;
      v36 = 2 * v23;
      v37 = v30;
      v38 = v23;
      do
      {
        if (v38 != --v37)
        {
          v39 = &v20[v35];
          v40 = v20[v36];
          v41 = v20[v36 + 1];
          *(_OWORD *)&v20[v36] = *(_OWORD *)&v20[v35 - 2];
          *(v39 - 2) = v40;
          *(v39 - 1) = v41;
        }
        ++v38;
        v35 -= 2;
        v36 += 2;
      }
      while (v38 < v37);
    }
LABEL_52:
    v19 = v30;
LABEL_53:
    if (v19 < v2 && v19 - v23 < v80)
    {
      v42 = v23 + v80 >= v2 ? v2 : v23 + v80;
      if (v19 != v42)
      {
        v43 = &v20[2 * v19];
        do
        {
          v44 = &v20[2 * v19];
          v45 = *v44;
          v46 = v44[1];
          v47 = v23;
          v48 = v43;
          do
          {
            if (*(v48 - 2) == v45 && *(v48 - 1) == v46)
              break;
            if ((sub_1B2229D24() & 1) == 0)
              break;
            v45 = *v48;
            v46 = v48[1];
            *(_OWORD *)v48 = *((_OWORD *)v48 - 1);
            *(v48 - 1) = v46;
            *(v48 - 2) = v45;
            v48 -= 2;
            ++v47;
          }
          while (v19 != v47);
          ++v19;
          v43 += 2;
        }
        while (v19 != v42);
        v19 = v42;
        v2 = v81;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_1B216CC74(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v51 = *((_QWORD *)v21 + 2);
    v50 = *((_QWORD *)v21 + 3);
    v22 = v51 + 1;
    if (v51 >= v50 >> 1)
      v21 = sub_1B216CC74(v50 > 1, v51 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v22;
    v52 = v21 + 32;
    v53 = &v21[16 * v51 + 32];
    *(_QWORD *)v53 = v23;
    *((_QWORD *)v53 + 1) = v19;
    if (!v51)
    {
      v22 = 1;
      goto LABEL_25;
    }
    while (1)
    {
      v54 = v22 - 1;
      if (v22 >= 4)
      {
        v59 = &v52[16 * v22];
        v60 = *((_QWORD *)v59 - 7) - *((_QWORD *)v59 - 8);
        v57 = *((_QWORD *)v59 - 5) - *((_QWORD *)v59 - 6);
        v58 = v22 - 2;
        v61 = &v52[16 * v22 - 32];
        v55 = *(_QWORD *)v61;
        v56 = *((_QWORD *)v61 + 1);
        if (v57 - v55 + v56 >= v60)
        {
          v64 = v57 < *(_QWORD *)&v52[16 * v54 + 8] - *(_QWORD *)&v52[16 * v54];
LABEL_85:
          if (v64)
            v54 = v58;
          goto LABEL_87;
        }
      }
      else
      {
        if (v22 != 3)
        {
          v62 = *(_QWORD *)&v52[16 * v22 - 24] - *(_QWORD *)&v52[16 * v22 - 32];
          v63 = *(_QWORD *)&v52[16 * v54 + 8] - *(_QWORD *)&v52[16 * v54];
          goto LABEL_82;
        }
        v55 = *((_QWORD *)v21 + 6);
        v56 = *((_QWORD *)v21 + 7);
        v57 = *((_QWORD *)v21 + 5) - *((_QWORD *)v21 + 4);
        v58 = 1;
      }
      v62 = v56 - v55;
      v63 = *(_QWORD *)&v52[16 * v54 + 8] - *(_QWORD *)&v52[16 * v54];
      if (v62 + v63 >= v57)
      {
        v64 = v57 < v63;
        goto LABEL_85;
      }
LABEL_82:
      if (v63 < v62)
        break;
LABEL_87:
      v65 = v21;
      v66 = &v52[16 * v54 - 16];
      v67 = *(_QWORD *)v66;
      v68 = &v52[16 * v54];
      v69 = *((_QWORD *)v68 + 1);
      sub_1B1BB9B90((char *)&v20[2 * *(_QWORD *)v66], (char *)&v20[2 * *(_QWORD *)v68], (unint64_t)&v20[2 * v69], __dst);
      if (v83)
        goto LABEL_90;
      *(_QWORD *)v66 = v67;
      *((_QWORD *)v66 + 1) = v69;
      v21 = v65;
      v70 = *((_QWORD *)v65 + 2);
      v22 = v70 - 1;
      memmove(&v52[16 * v54], v68 + 16, 16 * (v70 - 1 - v54));
      *((_QWORD *)v65 + 2) = v70 - 1;
      v2 = v81;
      if (v70 <= 2)
        goto LABEL_25;
    }
    v2 = v81;
LABEL_25:
    if (v19 < v2)
      continue;
    break;
  }
  v18 = v79;
  v1 = v77;
LABEL_93:
  v79 = v18;
  if (v22 >= 2)
  {
    v71 = *v1;
    do
    {
      v72 = *(_QWORD *)&v21[16 * v22];
      v73 = &v21[16 * v22 + 16];
      v74 = *((_QWORD *)v73 + 1);
      sub_1B1BB9B90((char *)&v71[2 * v72], (char *)&v71[2 * *(_QWORD *)v73], (unint64_t)&v71[2 * v74], __dst);
      if (v83)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_1B216D510((uint64_t)v21);
      v75 = &v21[16 * v22];
      *(_QWORD *)v75 = v72;
      *((_QWORD *)v75 + 1) = v74;
      v76 = *((_QWORD *)v21 + 2);
      memmove(&v21[16 * v22 + 16], &v21[16 * v22 + 32], 16 * (v76 - v22));
      *((_QWORD *)v21 + 2) = v76 - 1;
      v22 = v76 - 1;
    }
    while (v76 > 2);
  }
LABEL_90:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v79 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BB9B90(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = v21 == *((_QWORD *)v17 - 2) && v22 == *((_QWORD *)v17 - 1);
          if (v23 || (sub_1B2229D24() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v4 == *(_QWORD *)v6 && *((_QWORD *)v4 + 1) == *((_QWORD *)v6 + 1);
        if (v15 || (sub_1B2229D24() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_1B216CD50((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

unint64_t sub_1B1BB9E28()
{
  unint64_t result;

  result = qword_1EEF5BEB8;
  if (!qword_1EEF5BEB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F7B0, &_s24VariableReferenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BEB8);
  }
  return result;
}

unint64_t sub_1B1BB9E6C()
{
  unint64_t result;

  result = qword_1EEF5BED0;
  if (!qword_1EEF5BED0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F760, &_s15VariableSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BED0);
  }
  return result;
}

uint64_t sub_1B1BB9EB0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = _s17CodeSourceSnippetCMa();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1BB9EF0(uint64_t a1)
{
  uint64_t v2;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B1BB9F44()
{
  unint64_t result;

  result = qword_1ED4BF440;
  if (!qword_1ED4BF440)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BF440);
  }
  return result;
}

ValueMetadata *_s15VariableSnippetC10CodingKeysOMa()
{
  return &_s15VariableSnippetC10CodingKeysON;
}

ValueMetadata *_s24VariableReferenceSnippetC10CodingKeysOMa()
{
  return &_s24VariableReferenceSnippetC10CodingKeysON;
}

uint64_t _s15VariableSnippetC10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1BB9FFC + 4 * byte_1B227F3E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1BBA01C + 4 * byte_1B227F3E5[v4]))();
}

_BYTE *sub_1B1BB9FFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1BBA01C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1BBA024(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1BBA02C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1BBA034(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1BBA03C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s17CustomCodeSnippetC10CodingKeysOMa()
{
  return &_s17CustomCodeSnippetC10CodingKeysON;
}

unint64_t sub_1B1BBA05C()
{
  unint64_t result;

  result = qword_1EEF5BEE8;
  if (!qword_1EEF5BEE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F558, &_s17CustomCodeSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BEE8);
  }
  return result;
}

unint64_t sub_1B1BBA0A4()
{
  unint64_t result;

  result = qword_1EEF5BEF0;
  if (!qword_1EEF5BEF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F648, &_s24VariableReferenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BEF0);
  }
  return result;
}

unint64_t sub_1B1BBA0EC()
{
  unint64_t result;

  result = qword_1EEF5BEF8;
  if (!qword_1EEF5BEF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F738, &_s15VariableSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BEF8);
  }
  return result;
}

unint64_t sub_1B1BBA134()
{
  unint64_t result;

  result = qword_1EEF5BF00;
  if (!qword_1EEF5BF00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F670, &_s15VariableSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF00);
  }
  return result;
}

unint64_t sub_1B1BBA17C()
{
  unint64_t result;

  result = qword_1EEF5BF08;
  if (!qword_1EEF5BF08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F698, &_s15VariableSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF08);
  }
  return result;
}

unint64_t sub_1B1BBA1C4()
{
  unint64_t result;

  result = qword_1EEF5BF10;
  if (!qword_1EEF5BF10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F580, &_s24VariableReferenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF10);
  }
  return result;
}

unint64_t sub_1B1BBA20C()
{
  unint64_t result;

  result = qword_1EEF5BF18;
  if (!qword_1EEF5BF18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F5A8, &_s24VariableReferenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF18);
  }
  return result;
}

unint64_t sub_1B1BBA254()
{
  unint64_t result;

  result = qword_1EEF5BF20;
  if (!qword_1EEF5BF20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F490, &_s17CustomCodeSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF20);
  }
  return result;
}

unint64_t sub_1B1BBA29C()
{
  unint64_t result;

  result = qword_1EEF5BF28;
  if (!qword_1EEF5BF28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F4B8, &_s17CustomCodeSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF28);
  }
  return result;
}

uint64_t sub_1B1BBA2E4(unint64_t *a1, unint64_t *a2)
{
  return sub_1B1BBB778(*a1, *a2);
}

uint64_t sub_1B1BBA2F0()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  byte_1EEFD53A8 = 1;
  qword_1EEFD53B0 = result | 0x6000000000000004;
  byte_1EEFD53B8 = 0;
  return result;
}

uint64_t sub_1B1BBA344()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  byte_1EEFD53C0 = 1;
  qword_1EEFD53C8 = result | 0x6000000000000000;
  byte_1EEFD53D0 = 0;
  return result;
}

uint64_t sub_1B1BBA390()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10[2];

  if (qword_1EEF572D0 != -1)
    swift_once();
  v1 = byte_1EEFD53A8;
  v2 = qword_1EEFD53B0;
  v3 = byte_1EEFD53B8;
  v4 = MEMORY[0x1E0DEE9D8];
  v10[0] = sub_1B1C71FD4(MEMORY[0x1E0DEE9D8]);
  v10[1] = v5;
  sub_1B1C5E280((uint64_t)sub_1B1BBB6FC, 0, v1, v2, v3, v4, (uint64_t)v10);
  v6 = v10[0];
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 16);
  if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v8 = (uint64_t)sub_1B1DC9664(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
  }
  v10[0] = v8;
  swift_bridgeObjectRetain();
  sub_1B1BBC404(v10, v6, (uint64_t (*)(uint64_t))sub_1B216D614, (void (*)(_QWORD))type metadata accessor for Node, (void (*)(uint64_t **, uint64_t **, char **))sub_1B216D018);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v10[0];
}

uint64_t sub_1B1BBA510()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10[2];

  if (qword_1EEF572D0 != -1)
    swift_once();
  v1 = byte_1EEFD53A8;
  v2 = qword_1EEFD53B0;
  v3 = byte_1EEFD53B8;
  v4 = MEMORY[0x1E0DEE9D8];
  v10[0] = sub_1B1C71FD4(MEMORY[0x1E0DEE9D8]);
  v10[1] = v5;
  sub_1B1C5E610((uint64_t)sub_1B1BBB718, 0, v1, v2, v3, v4, (uint64_t)v10);
  v6 = v10[0];
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 24);
  if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v8 = (uint64_t)sub_1B1DC9A4C(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
  }
  v10[0] = v8;
  swift_bridgeObjectRetain();
  sub_1B1BBC404(v10, v6, (uint64_t (*)(uint64_t))sub_1B216D600, (void (*)(_QWORD))type metadata accessor for AuthoringNode, (void (*)(uint64_t **, uint64_t **, char **))sub_1B216D018);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v10[0];
}

uint64_t sub_1B1BBA690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, __int128 *);
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 32);
  v23 = *(_OWORD *)(a1 + 16);
  v24 = v3;
  v22 = *(_OWORD *)a1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v5, 0);
    v7 = 0;
    v6 = v21;
    v8 = *(_QWORD *)(v21 + 16);
    v9 = 16 * v8;
    do
    {
      v10 = *(_QWORD *)(v4 + v7 + 32);
      v11 = *(_QWORD *)(v4 + v7 + 40);
      *(_QWORD *)&v21 = v6;
      v12 = *(_QWORD *)(v6 + 24);
      swift_retain();
      if (v8 >= v12 >> 1)
      {
        sub_1B202A2C8(v12 > 1, v8 + 1, 1);
        v6 = v21;
      }
      *(_QWORD *)(v6 + 16) = v8 + 1;
      v13 = v6 + v9 + v7;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v11;
      v7 += 16;
      ++v8;
      --v5;
    }
    while (v5);
    a1 = swift_bridgeObjectRelease();
  }
  MEMORY[0x1E0C80A78](a1, a2);
  v20[2] = &v22;
  v14 = sub_1B1BBC4D0(v6, sub_1B1BBB8A4, (uint64_t)v20, (void (*)(BOOL, uint64_t, uint64_t))sub_1B202B1AC);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = (void (*)(uint64_t *__return_ptr, __int128 *))*((_QWORD *)&v23 + 1);
    swift_bridgeObjectRetain();
    v17 = 1;
    v18 = 40;
    do
    {
      v21 = *(_OWORD *)(v14 + v18);
      swift_retain_n();
      v16(&v25, &v21);
      swift_release();
      swift_release();
      v17 += v25;
      v18 += 24;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 1;
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1B1BBA878(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, __int128 *);
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *((_QWORD *)a1 + 1);
  v2 = a1[1];
  v3 = a1[2];
  v17 = *a1;
  v18 = v2;
  v19 = v3;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + 152))(v20);
  v4 = v20[0];
  v26 = v20[0];
  v25 = v20[1];
  sub_1B1B28C6C((uint64_t)&v25);
  v24 = v20[2];
  sub_1B1B28C6C((uint64_t)&v24);
  v23 = v20[3];
  sub_1B1B28C6C((uint64_t)&v23);
  v22 = v20[4];
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = v20[5];
  sub_1B1B28C6C((uint64_t)&v21);
  v5 = *(_QWORD *)(v4 + 16);
  sub_1B1B28C6C((uint64_t)&v26);
  if (*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v5)
    v6 = v5;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v7 = sub_1B2134084(0, v6, v1);
  swift_release();
  v14[2] = &v17;
  v8 = sub_1B1BBC4D0(v7, sub_1B1BBC7A4, (uint64_t)v14, (void (*)(BOOL, uint64_t, uint64_t))sub_1B202B330);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (void (*)(uint64_t *__return_ptr, __int128 *))*((_QWORD *)&v18 + 1);
    swift_bridgeObjectRetain();
    v11 = 1;
    v12 = 40;
    do
    {
      v15 = *(_OWORD *)(v8 + v12);
      swift_retain_n();
      v10(&v16, &v15);
      swift_release();
      swift_release();
      v11 += v16;
      v12 += 24;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 1;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1BBAA64(uint64_t a1)
{
  return sub_1B1BBAA8C(a1, (uint64_t (*)(uint64_t))sub_1B1BBA390, (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))sub_1B2133374);
}

uint64_t sub_1B1BBAA78(uint64_t a1)
{
  return sub_1B1BBAA8C(a1, (uint64_t (*)(uint64_t))sub_1B1BBA510, (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))sub_1B21339B4);
}

uint64_t sub_1B1BBAA8C(uint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;

  sub_1B222A210();
  sub_1B2228890();
  v4 = swift_bridgeObjectRelease();
  v29 = MEMORY[0x1E0DEE9E8];
  v5 = a2(v4);
  if (v5 >> 62)
  {
    v22 = v5;
    v6 = sub_1B22296AC();
    v5 = v22;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      v7 = 0;
      v28 = v5 & 0xC000000000000001;
      v25 = v5 + 32;
      v26 = v5;
      do
      {
        if (v28)
        {
          v16 = MEMORY[0x1B5E21018](v7, v26);
        }
        else
        {
          v16 = *(_QWORD *)(v25 + 8 * v7);
          swift_retain();
        }
        if (*(_QWORD *)(v29 + 16))
        {
          v17 = sub_1B222A060();
          v18 = -1 << *(_BYTE *)(v29 + 32);
          v19 = v17 & ~v18;
          if (((*(_QWORD *)(v29 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            v20 = *(_QWORD *)(v29 + 48);
            if (*(_QWORD *)(v20 + 8 * v19) == v16)
              goto LABEL_5;
            v21 = ~v18;
            while (1)
            {
              v19 = (v19 + 1) & v21;
              if (((*(_QWORD *)(v29 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
                break;
              if (*(_QWORD *)(v20 + 8 * v19) == v16)
                goto LABEL_5;
            }
          }
        }
        v8 = swift_allocObject();
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0xE000000000000000;
        v9 = swift_allocObject();
        *(_QWORD *)(v9 + 16) = 0;
        v10 = swift_allocObject();
        v11 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(v10 + 16) = sub_1B1B989A4(MEMORY[0x1E0DEE9D8]);
        v12 = swift_allocObject();
        *(_QWORD *)(v12 + 16) = sub_1B1B95F7C(v11);
        v13 = swift_retain();
        LOBYTE(v24) = 0;
        a3(v13, 0, 0, 8224, 0xE200000000000000, v8, v12, v10, v24, v9);
        swift_release();
        swift_bridgeObjectRetain();
        v14 = swift_bridgeObjectRetain();
        v15 = sub_1B1F4CE68(v14);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B1BBAF78(v15, (void (*)(_BYTE *, _QWORD))sub_1B1B8AA74);
LABEL_5:
        ++v7;
        swift_release();
      }
      while (v7 != v6);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B567DC(2);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 60;
}

uint64_t sub_1B1BBAE08(uint64_t a1)
{
  return sub_1B1BBAF78(a1, (void (*)(_BYTE *, _QWORD))sub_1B1B8A534);
}

uint64_t sub_1B1BBAE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (v2 + 1 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    if (!v14)
    {
      v13 = v2 + 2;
      if (v2 + 2 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v13);
      if (!v14)
      {
        v13 = v2 + 3;
        if (v2 + 3 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v13);
        if (!v14)
        {
          v13 = v2 + 4;
          if (v2 + 4 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v13);
          if (!v14)
          {
            v13 = v2 + 5;
            if (v2 + 5 >= v7)
              return swift_release();
            v14 = *(_QWORD *)(v3 + 8 * v13);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_20:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v2 = v13;
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_1B1B8B368(&v16, v11, v12);
    swift_bridgeObjectRelease();
  }
  while (v7 - 6 != v2)
  {
    v14 = *(_QWORD *)(v3 + 48 + 8 * v2++);
    if (v14)
    {
      v13 = v2 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1BBAF78(uint64_t a1, void (*a2)(_BYTE *, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v15[8];

  v4 = 0;
  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v12 = v4 + 1;
    if (v4 + 1 >= v9)
      return swift_release();
    v13 = *(_QWORD *)(v5 + 8 * v12);
    if (!v13)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v9)
        return swift_release();
      v13 = *(_QWORD *)(v5 + 8 * v12);
      if (!v13)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v9)
          return swift_release();
        v13 = *(_QWORD *)(v5 + 8 * v12);
        if (!v13)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v9)
            return swift_release();
          v13 = *(_QWORD *)(v5 + 8 * v12);
          if (!v13)
          {
            v12 = v4 + 5;
            if (v4 + 5 >= v9)
              return swift_release();
            v13 = *(_QWORD *)(v5 + 8 * v12);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_20:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v4 = v12;
LABEL_5:
    a2(v15, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11));
  }
  while (v9 - 6 != v4)
  {
    v13 = *(_QWORD *)(v5 + 48 + 8 * v4++);
    if (v13)
    {
      v12 = v4 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

void sub_1B1BBB0C4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  a1[2] = &unk_1E63BA5A8;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
}

uint64_t sub_1B1BBB0E4()
{
  return 0x646574656C65643CLL;
}

_QWORD *sub_1B1BBB100()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  return v0;
}

_QWORD *sub_1B1BBB154(_QWORD *a1)
{
  swift_allocObject();
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B1BBB18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BBB1F0()
{
  return _s11DeletedNodeCMa(0);
}

uint64_t _s11DeletedNodeCMa(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5BF30);
}

uint64_t sub_1B1BBB20C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1BBB240(__objc2_class **a1)
{
  uint64_t v1;

  if (*a1 != _TtC3VFX12SubGraphNode
    || !*(__objc2_class **)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph))
  {
    return 0;
  }
  v1 = swift_dynamicCastClass();
  if (v1)
    swift_retain();
  return v1;
}

uint64_t sub_1B1BBB2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1A0DAC8(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData), *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BBB344()
{
  return _s11DeletedNodeCMa_0(0);
}

uint64_t _s11DeletedNodeCMa_0(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5BF40);
}

uint64_t sub_1B1BBB360()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1BBB394(__objc2_class **a1)
{
  uint64_t v1;

  if (*a1 != _TtC3VFX21AuthoringSubGraphNode)
    return 0;
  v1 = swift_dynamicCastClass();
  if (v1)
    swift_retain();
  return v1;
}

void sub_1B1BBB3F8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  a1[2] = &unk_1E638B5E8;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
}

uint64_t sub_1B1BBB418()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  unint64_t v4;

  v2[0] = 0;
  v2[1] = 0xE000000000000000;
  sub_1B2229430();
  v3 = 0;
  v4 = 0xE000000000000000;
  sub_1B2228890();
  sub_1B19FA198(v0 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode, (uint64_t)v2);
  sub_1B1BBC92C();
  sub_1B22295EC();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
  sub_1B2228890();
  return v3;
}

_QWORD *sub_1B1BBB4D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1B19FA198((uint64_t)a1 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode, v2 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
  return sub_1B1BCE388(a1);
}

void sub_1B1BBB520()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1BBB54C()
{
  uint64_t v0;

  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
}

uint64_t sub_1B1BBB55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BBB5D0()
{
  return type metadata accessor for _PlaceholderNode(0);
}

uint64_t type metadata accessor for _PlaceholderNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5BF50);
}

uint64_t sub_1B1BBB5EC()
{
  return swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for TraversalTag()
{
  return &type metadata for TraversalTag;
}

unint64_t sub_1B1BBB648()
{
  unint64_t result;

  result = qword_1EEF5BF60;
  if (!qword_1EEF5BF60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F910, &type metadata for TraversalTag);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF60);
  }
  return result;
}

_UNKNOWN **sub_1B1BBB68C()
{
  return &off_1ED488F38;
}

_UNKNOWN **sub_1B1BBB698()
{
  return &off_1ED4A7188;
}

uint64_t sub_1B1BBB6A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1BBB6C8()
{
  return swift_deallocObject();
}

uint64_t sub_1B1BBB6D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1BBB6FC@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1BBB734(a1, (uint64_t (*)(_OWORD *))sub_1B1BBA690, a2);
}

uint64_t sub_1B1BBB718@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1BBB734(a1, sub_1B1BBA878, a2);
}

uint64_t sub_1B1BBB734@<X0>(_OWORD *a1@<X0>, uint64_t (*a2)(_OWORD *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[2] = a1[2];
  result = a2(v7);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1B1BBB778(unint64_t a1, unint64_t a2)
{
  int v4;
  unint64_t v5;
  char v6;
  char v7;

  v4 = (a1 >> 59) & 2 | (a1 >> 2) & 1;
  if (v4)
  {
    if (v4 == 1)
    {
      if (((a2 >> 59) & 2 | (a2 >> 2) & 1) == 1)
      {
        sub_1B1BBC9D8(a1, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
        sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
        v5 = a1 & 0xEFFFFFFFFFFFFFFBLL;
LABEL_7:
        sub_1B1D3590C(v5);
        v7 = v6;
        sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
        sub_1B1BBC9D8(a1, (uint64_t (*)(unint64_t))sub_1B19F8D00);
        return v7 & 1;
      }
    }
    else if (((a2 >> 59) & 2 | (a2 >> 2) & 1) == 2 && a2 == 0x1000000000000000)
    {
      return 1;
    }
  }
  else if (!((a2 >> 59) & 2 | (a2 >> 2) & 1))
  {
    sub_1B1BBC9D8(a1, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
    sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
    v5 = a1;
    goto LABEL_7;
  }
  return 0;
}

uint64_t sub_1B1BBB8A4(uint64_t a1, _QWORD *a2)
{
  return sub_1B1BBC7B0(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BBC640);
}

uint64_t sub_1B1BBB8B0(uint64_t *__src, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void (*a6)(uint64_t **, uint64_t **, char **))
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t result;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;

  v7 = a3;
  v8 = a2;
  v9 = __src;
  v10 = (char *)a2 - (char *)__src;
  v11 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v11 = (char *)a2 - (char *)__src;
  v12 = v11 >> 3;
  v13 = (char *)a3 - (char *)a2;
  v14 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v14 = (char *)a3 - (char *)a2;
  v15 = v14 >> 3;
  v42 = __src;
  v41 = a4;
  if (v12 >= v14 >> 3)
  {
    if (v13 < -7)
      goto LABEL_58;
    if (a4 != a2 || &a2[v15] <= a4)
      memmove(a4, a2, 8 * v15);
    v25 = &a4[v15];
    v40 = (char *)v25;
    v42 = v8;
    if (v9 >= v8 || v13 < 8)
    {
LABEL_57:
      a6(&v42, &v41, &v40);
      return 1;
    }
    v26 = (char *)a4;
    v27 = v8;
    while (1)
    {
      v29 = *--v27;
      v28 = v29;
      if (!*(_QWORD *)(a5 + 16))
        break;
      v30 = sub_1B1DC3AC8(*(v25 - 1));
      if ((v31 & 1) != 0)
        v32 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v30);
      else
        v32 = 0;
      v34 = sub_1B1DC3AC8(v28);
      if ((v35 & 1) != 0)
        v36 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v34);
      else
        v36 = 0;
      v33 = v7 - 1;
      if (v32 >= v36)
      {
        v26 = (char *)a4;
        if (v7 != v8)
          goto LABEL_54;
LABEL_53:
        if (v33 >= v8)
LABEL_54:
          *v33 = *v27;
        v42 = v27;
        if (v27 <= v9)
          goto LABEL_57;
        goto LABEL_56;
      }
      v40 = (char *)(v25 - 1);
      v26 = (char *)a4;
      if (v7 < v25 || v33 >= v25 || v7 != v25)
        *v33 = *(v25 - 1);
      v27 = v8;
      --v25;
      if (v8 <= v9)
        goto LABEL_57;
LABEL_56:
      v8 = v27;
      v7 = v33;
      if (v25 <= (uint64_t *)v26)
        goto LABEL_57;
    }
    v33 = v7 - 1;
    if (v7 == v8)
      goto LABEL_53;
    goto LABEL_54;
  }
  if (v10 >= -7)
  {
    v16 = a4;
    if (a4 != __src || &__src[v12] <= a4)
      memmove(a4, __src, 8 * v12);
    v17 = &a4[v12];
    v40 = (char *)v17;
    if (v8 < v7 && v10 >= 8)
    {
      while (1)
      {
        if (*(_QWORD *)(a5 + 16))
        {
          v18 = *v16;
          v19 = sub_1B1DC3AC8(*v8);
          if ((v20 & 1) != 0)
            v21 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v19);
          else
            v21 = 0;
          v22 = sub_1B1DC3AC8(v18);
          if ((v23 & 1) != 0)
          {
            if (v21 < *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v22))
              goto LABEL_23;
          }
          else if (v21 < 0)
          {
LABEL_23:
            if (v9 != v16)
              *v9 = *v16;
            v41 = ++v16;
            v24 = v8;
            goto LABEL_26;
          }
        }
        v24 = v8 + 1;
        if (v9 < v8 || v9 >= v24 || v9 != v8)
          *v9 = *v8;
LABEL_26:
        ++v9;
        if (v16 < v17)
        {
          v8 = v24;
          if (v24 < v7)
            continue;
        }
        v42 = v9;
        goto LABEL_57;
      }
    }
    goto LABEL_57;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  result = sub_1B2229700();
  __break(1u);
  return result;
}

unint64_t sub_1B1BBBBD4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  unint64_t v17;

  v17 = result;
  if (a3 != a2)
  {
    v6 = a3;
    v8 = *a4;
    for (i = *a4 + 8 * a3 - 8; ; i += 8)
    {
      result = *(_QWORD *)(v8 + 8 * v6);
      v10 = v17;
      v11 = (uint64_t *)i;
      while (1)
      {
        v12 = *v11;
        if (*(_QWORD *)(a5 + 16))
          break;
LABEL_6:
        *v11 = result;
        v11[1] = v12;
        --v11;
        if (v6 == ++v10)
          goto LABEL_4;
      }
      v13 = sub_1B1DC3AC8(result);
      v15 = (v14 & 1) != 0 ? *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v13) : 0;
      result = sub_1B1DC3AC8(v12);
      if ((v16 & 1) != 0)
        break;
      if (v15 >= 0)
        goto LABEL_15;
LABEL_4:
      if (++v6 == a2)
        return result;
    }
    if (v15 < *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result))
      goto LABEL_4;
LABEL_15:
    v12 = *v11;
    result = v11[1];
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1B1BBBCC4(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD), void (*a4)(uint64_t **, uint64_t **, char **))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = v4;
  v9 = a1[1];
  swift_bridgeObjectRetain_n();
  v10 = sub_1B22299E8();
  if (v10 >= v9)
  {
    if (v9)
    {
      swift_bridgeObjectRetain();
      sub_1B1BBBBD4(0, v9, 1, a1, a2);
    }
    return swift_bridgeObjectRelease_n();
  }
  v83 = v10;
  if (v9 >= 0)
    v11 = v9;
  else
    v11 = v9 + 1;
  if (v9 < -1)
  {
    swift_bridgeObjectRelease_n();
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v81 = a1;
  v84 = v9;
  if (v9 < 2)
  {
    v15 = (char *)MEMORY[0x1E0DEE9D8];
    v94 = MEMORY[0x1E0DEE9D8];
    v87 = (uint64_t *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v9 != 1)
    {
      v18 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v18 >= 2)
        goto LABEL_90;
      goto LABEL_95;
    }
  }
  else
  {
    v12 = v11 >> 1;
    a3(0);
    v13 = sub_1B2228B0C();
    *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) = v12;
    v87 = (uint64_t *)((v13 & 0xFFFFFFFFFFFFFF8) + 32);
    v94 = v13;
  }
  v93 = v4;
  v16 = 0;
  v80 = *a1 + 16;
  v91 = *a1;
  v82 = *a1 - 8;
  v15 = (char *)MEMORY[0x1E0DEE9D8];
  v17 = v9;
  while (2)
  {
    v19 = v16++;
    v89 = v19;
    if (v16 >= v17)
      goto LABEL_44;
    v85 = *(_QWORD *)(a2 + 16);
    if (v85)
    {
      v20 = *(_QWORD *)(v91 + 8 * v19);
      v21 = sub_1B1DC3AC8(*(_QWORD *)(v91 + 8 * v16));
      if ((v22 & 1) != 0)
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v21);
      else
        v23 = 0;
      v25 = sub_1B1DC3AC8(v20);
      if ((v26 & 1) != 0)
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v25);
      else
        v24 = 0;
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v16 = v19 + 2;
    if (v19 + 2 < v84)
    {
      v27 = (uint64_t *)(v80 + 8 * v19);
      do
      {
        if (v85)
        {
          v28 = *(v27 - 1);
          v29 = sub_1B1DC3AC8(*v27);
          if ((v30 & 1) != 0)
            v31 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v29);
          else
            v31 = 0;
          v32 = sub_1B1DC3AC8(v28);
          if ((v33 & 1) != 0)
            v34 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v32);
          else
            v34 = 0;
          if (v23 >= v24 == v31 < v34)
            goto LABEL_36;
        }
        else if (v23 < v24)
        {
          goto LABEL_43;
        }
        ++v16;
        ++v27;
      }
      while (v84 != v16);
      v16 = v84;
      if (v23 < v24)
        goto LABEL_43;
LABEL_37:
      v19 = v89;
      if (v89 < v16)
      {
        v35 = (uint64_t *)(v82 + 8 * v16);
        v36 = v16;
        v37 = v89;
        v38 = (uint64_t *)(v91 + 8 * v89);
        do
        {
          if (v37 != --v36)
          {
            v39 = *v38;
            *v38 = *v35;
            *v35 = v39;
          }
          ++v37;
          --v35;
          ++v38;
        }
        while (v37 < v36);
      }
      goto LABEL_44;
    }
LABEL_36:
    if (v23 >= v24)
      goto LABEL_37;
LABEL_43:
    v19 = v89;
LABEL_44:
    if (v16 < v84 && v16 - v19 < v83)
    {
      v40 = v19 + v83 >= v84 ? v84 : v19 + v83;
      if (v16 != v40)
      {
        v86 = v15;
        v41 = (uint64_t *)(v82 + 8 * v16);
        while (1)
        {
          v42 = *(_QWORD *)(v91 + 8 * v16);
          v43 = v19;
          v44 = v41;
          do
          {
            v45 = *v44;
            if (!*(_QWORD *)(a2 + 16))
              goto LABEL_55;
            v46 = sub_1B1DC3AC8(v42);
            if ((v47 & 1) != 0)
              v48 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v46);
            else
              v48 = 0;
            v49 = sub_1B1DC3AC8(v45);
            if ((v50 & 1) == 0)
            {
              if (v48 < 0)
                break;
              goto LABEL_54;
            }
            if (v48 < *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v49))
              break;
LABEL_54:
            v45 = *v44;
            v42 = v44[1];
LABEL_55:
            *v44 = v42;
            v44[1] = v45;
            --v44;
            ++v43;
          }
          while (v16 != v43);
          ++v16;
          ++v41;
          v19 = v89;
          if (v16 == v40)
          {
            v16 = v40;
            v15 = v86;
            break;
          }
        }
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_1B216CC74(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v52 = *((_QWORD *)v15 + 2);
    v51 = *((_QWORD *)v15 + 3);
    v18 = v52 + 1;
    if (v52 >= v51 >> 1)
      v15 = sub_1B216CC74(v51 > 1, v52 + 1, 1, v15);
    *((_QWORD *)v15 + 2) = v18;
    v53 = v15 + 32;
    v54 = &v15[16 * v52 + 32];
    *(_QWORD *)v54 = v19;
    *((_QWORD *)v54 + 1) = v16;
    if (!v52)
    {
      v18 = 1;
      goto LABEL_14;
    }
    v90 = v16;
    while (1)
    {
      v55 = v18 - 1;
      if (v18 >= 4)
      {
        v60 = &v53[16 * v18];
        v61 = *((_QWORD *)v60 - 7) - *((_QWORD *)v60 - 8);
        v58 = *((_QWORD *)v60 - 5) - *((_QWORD *)v60 - 6);
        v59 = v18 - 2;
        v62 = &v53[16 * v18 - 32];
        v56 = *(_QWORD *)v62;
        v57 = *((_QWORD *)v62 + 1);
        if (v58 - v56 + v57 >= v61)
        {
          v65 = v58 < *(_QWORD *)&v53[16 * v55 + 8] - *(_QWORD *)&v53[16 * v55];
LABEL_80:
          if (v65)
            v55 = v59;
          goto LABEL_82;
        }
      }
      else
      {
        if (v18 != 3)
        {
          v63 = *(_QWORD *)&v53[16 * v18 - 24] - *(_QWORD *)&v53[16 * v18 - 32];
          v64 = *(_QWORD *)&v53[16 * v55 + 8] - *(_QWORD *)&v53[16 * v55];
          goto LABEL_77;
        }
        v56 = *((_QWORD *)v15 + 6);
        v57 = *((_QWORD *)v15 + 7);
        v58 = *((_QWORD *)v15 + 5) - *((_QWORD *)v15 + 4);
        v59 = 1;
      }
      v63 = v57 - v56;
      v64 = *(_QWORD *)&v53[16 * v55 + 8] - *(_QWORD *)&v53[16 * v55];
      if (v63 + v64 >= v58)
      {
        v65 = v58 < v64;
        goto LABEL_80;
      }
LABEL_77:
      if (v64 < v63)
        break;
LABEL_82:
      v66 = &v53[16 * v55 - 16];
      v67 = *(_QWORD *)v66;
      v68 = &v53[16 * v55];
      v69 = *((_QWORD *)v68 + 1);
      v70 = (uint64_t *)(v91 + 8 * *(_QWORD *)v66);
      v71 = (uint64_t *)(v91 + 8 * *(_QWORD *)v68);
      swift_bridgeObjectRetain();
      sub_1B1BBB8B0(v70, v71, (uint64_t *)(v91 + 8 * v69), v87, a2, a4);
      if (v93)
        goto LABEL_85;
      swift_bridgeObjectRelease();
      *(_QWORD *)v66 = v67;
      *((_QWORD *)v66 + 1) = v69;
      v72 = *((_QWORD *)v15 + 2);
      v18 = v72 - 1;
      memmove(v68, v68 + 16, 16 * (v72 - 1 - v55));
      *((_QWORD *)v15 + 2) = v72 - 1;
      v53 = v15 + 32;
      v16 = v90;
      if (v72 <= 2)
        goto LABEL_14;
    }
    v16 = v90;
LABEL_14:
    v17 = v84;
    if (v16 < v84)
      continue;
    break;
  }
  v6 = v93;
  if (v18 >= 2)
  {
LABEL_90:
    v92 = *v81;
    while (1)
    {
      v73 = *(_QWORD *)&v15[16 * v18];
      v74 = &v15[16 * v18 + 16];
      v75 = *((_QWORD *)v74 + 1);
      v76 = (uint64_t *)(v92 + 8 * *(_QWORD *)v74);
      swift_bridgeObjectRetain();
      sub_1B1BBB8B0((uint64_t *)(v92 + 8 * v73), v76, (uint64_t *)(v92 + 8 * v75), v87, a2, a4);
      if (v6)
        break;
      swift_bridgeObjectRelease();
      v77 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v77 = sub_1B216D510((uint64_t)v15);
      v78 = &v77[16 * v18];
      *(_QWORD *)v78 = v73;
      *((_QWORD *)v78 + 1) = v75;
      v15 = v77;
      v79 = *((_QWORD *)v77 + 2);
      memmove(&v77[16 * v18 + 16], &v77[16 * v18 + 32], 16 * (v79 - v18));
      *((_QWORD *)v77 + 2) = v79 - 1;
      v18 = v79 - 1;
      if (v79 <= 2)
        goto LABEL_95;
    }
LABEL_85:
    swift_bridgeObjectRelease();
  }
LABEL_95:
  swift_bridgeObjectRelease();
  *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  sub_1B2228AD0();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BBC404(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(_QWORD), void (*a5)(uint64_t **, uint64_t **, char **))
{
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14[2];

  v10 = *a1;
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = a3(v10);
    *a1 = v10;
  }
  v12 = *(_QWORD *)(v10 + 16);
  v14[0] = v10 + 32;
  v14[1] = v12;
  swift_bridgeObjectRetain();
  sub_1B1BBBCC4(v14, a2, a4, a5);
  swift_bridgeObjectRelease();
  sub_1B2229538();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1B1BBC4D0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *), uint64_t a3, void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  v6 = 0;
  v7 = a1 + 40;
  v8 = MEMORY[0x1E0DEE9D8];
  v20 = a1 + 40;
  do
  {
    v9 = (uint64_t *)(v7 + 16 * v6);
    for (i = v6; ; ++i)
    {
      v11 = *(v9 - 1);
      v12 = *v9;
      v6 = i + 1;
      v21[0] = v11;
      v21[1] = v12;
      swift_retain();
      if ((a2(i, v21) & 1) != 0)
        break;
      v9 += 2;
      swift_release();
      if (v4 == v6)
        return v8;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      a4(0, *(_QWORD *)(v8 + 16) + 1, 1);
      v8 = v22;
    }
    v15 = *(_QWORD *)(v8 + 16);
    v14 = *(_QWORD *)(v8 + 24);
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      a4(v14 > 1, v15 + 1, 1);
      v16 = v15 + 1;
      v8 = v22;
    }
    *(_QWORD *)(v8 + 16) = v16;
    v17 = (_QWORD *)(v8 + 24 * v15);
    v17[4] = i;
    v17[5] = v11;
    v17[6] = v12;
    v7 = v20;
  }
  while (v4 - 1 != i);
  return v8;
}

uint64_t sub_1B1BBC640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(_QWORD *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2)
    return 0;
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = swift_retain();
  v5(v12, v6);
  v7 = v12[0];
  v17 = v12[1];
  v18 = v12[0];
  sub_1B1B28C6C((uint64_t)&v17);
  v16 = v12[2];
  sub_1B1B28C6C((uint64_t)&v16);
  v15 = v12[3];
  sub_1B1B28C6C((uint64_t)&v15);
  v14 = v12[4];
  sub_1B1B28C6C((uint64_t)&v14);
  v13 = v12[5];
  sub_1B1B28C6C((uint64_t)&v13);
  v8 = *(_QWORD *)(v7 + 8 * a1 + 32);
  sub_1B19F8CD0(v8);
  sub_1B1B28C6C((uint64_t)&v18);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B1D3590C(v8);
  v10 = v9;
  swift_release();
  sub_1B19F8D00(v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (v10 ^ 1) & 1;
}

uint64_t sub_1B1BBC780()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1BBC7A4(uint64_t a1, _QWORD *a2)
{
  return sub_1B1BBC7B0(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BBC7CC);
}

uint64_t sub_1B1BBC7B0(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(a1, *a2, a2[1], *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 24), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 32));
}

uint64_t sub_1B1BBC7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(_QWORD *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a2)
    return 0;
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                            + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = swift_retain();
  v5(v11, v6);
  swift_release();
  v7 = v11[0];
  v16 = v11[1];
  v17 = v11[0];
  sub_1B1B28C6C((uint64_t)&v16);
  v15 = v11[2];
  sub_1B1B28C6C((uint64_t)&v15);
  v14 = v11[3];
  sub_1B1B28C6C((uint64_t)&v14);
  v13 = v11[4];
  sub_1B1B28C6C((uint64_t)&v13);
  v12 = v11[5];
  sub_1B1B28C6C((uint64_t)&v12);
  v8 = *(_QWORD *)(v7 + 8 * a1 + 32);
  sub_1B19F8CD0(v8);
  sub_1B1B28C6C((uint64_t)&v17);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B1D3590C(v8);
  LOBYTE(v5) = v9;
  swift_release();
  sub_1B19F8D00(v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (v5 ^ 1) & 1;
}

unint64_t sub_1B1BBC92C()
{
  unint64_t result;

  result = qword_1EEF5BF68;
  if (!qword_1EEF5BF68)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5BF68);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for MappingMode.InputFilter(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1B1BBC9D8(*a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  *a1 = v3;
  return a1;
}

unint64_t destroy for MappingMode.InputFilter(unint64_t *a1)
{
  return sub_1B1BBC9D8(*a1, (uint64_t (*)(unint64_t))sub_1B19F8D00);
}

unint64_t sub_1B1BBC9D8(unint64_t result, uint64_t (*a2)(unint64_t))
{
  int v2;

  v2 = (result >> 59) & 2 | (result >> 2) & 1;
  if (v2)
  {
    if (v2 != 1)
      return result;
    result &= 0xEFFFFFFFFFFFFFFBLL;
  }
  return a2(result);
}

unint64_t *assignWithCopy for MappingMode.InputFilter(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1B1BBC9D8(*a2, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  v4 = *a1;
  *a1 = v3;
  sub_1B1BBC9D8(v4, (uint64_t (*)(unint64_t))sub_1B19F8D00);
  return a1;
}

unint64_t *assignWithTake for MappingMode.InputFilter(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1B1BBC9D8(v3, (uint64_t (*)(unint64_t))sub_1B19F8D00);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappingMode.InputFilter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xE && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 14);
  v3 = ((((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7) >> 2) & 0xFFFFFFF3 | (4 * (*(_QWORD *)a1 & 3))) ^ 0xF;
  if (v3 >= 0xD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MappingMode.InputFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0xD)
  {
    *(_QWORD *)result = a2 - 14;
    if (a3 >= 0xE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 3 | (4 * (-a2 & 0xF));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0x1000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B1BBCB34(_QWORD *a1)
{
  unsigned int v1;

  v1 = (*a1 >> 59) & 2 | (*a1 >> 2) & 1;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_1B1BBCB58(_QWORD *result)
{
  *result &= 0xEFFFFFFFFFFFFFFBLL;
  return result;
}

_QWORD *sub_1B1BBCB70(_QWORD *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 0xEFFFFFFFFFFFFFF8 | (4 * (a2 & 1));
  else
    *result = (8 * (a2 - 2)) | 0x1000000000000000;
  return result;
}

ValueMetadata *type metadata accessor for MappingMode.InputFilter()
{
  return &type metadata for MappingMode.InputFilter;
}

unint64_t destroy for MappingMode(uint64_t a1)
{
  return sub_1B1BBC9D8(*(_QWORD *)(a1 + 8), (uint64_t (*)(unint64_t))sub_1B19F8D00);
}

uint64_t _s3VFX11MappingModeVwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_1B1BBC9D8(v4, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for MappingMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_1B1BBC9D8(v4, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  sub_1B1BBC9D8(v5, (uint64_t (*)(unint64_t))sub_1B19F8D00);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for MappingMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_1B1BBC9D8(v4, (uint64_t (*)(unint64_t))sub_1B19F8D00);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappingMode(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MappingMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MappingMode()
{
  return &type metadata for MappingMode;
}

uint64_t _s3VFX12TraversalTagOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BBCDC0 + 4 * byte_1B227F855[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BBCDF4 + 4 * byte_1B227F850[v4]))();
}

uint64_t sub_1B1BBCDF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BBCDFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BBCE04);
  return result;
}

uint64_t sub_1B1BBCE10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BBCE18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BBCE1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BBCE24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MappingMode.TraversalOrder()
{
  return &type metadata for MappingMode.TraversalOrder;
}

unint64_t sub_1B1BBCE44()
{
  unint64_t result;

  result = qword_1EEF5BF70;
  if (!qword_1EEF5BF70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227F98C, &type metadata for MappingMode.TraversalOrder);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF70);
  }
  return result;
}

uint64_t sub_1B1BBCE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1B1BBD188();
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v5;
  return v2;
}

uint64_t sub_1B1BBCF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v1 = v0;
  v2 = sub_1B1BBD188();
  if (!v3)
  {
    sub_1B1BBD808();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
    sub_1B19FA278(v0 + 144, (uint64_t)&v11);
    sub_1B19F8C58(&v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    sub_1B1E02E1C(&v11, 1, (uint64_t)&v17);
    sub_1B19F8C58(&v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v6 = v20;
    *(_OWORD *)(v5 + 64) = v19;
    *(_OWORD *)(v5 + 80) = v6;
    *(_OWORD *)(v5 + 96) = v21;
    *(_QWORD *)(v5 + 112) = v22;
    v7 = v18;
    *(_OWORD *)(v5 + 32) = v17;
    *(_OWORD *)(v5 + 48) = v7;
    return v5;
  }
  v4 = sub_1B1FB71E0(v2, v3);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    goto LABEL_7;
  }
  swift_retain();
  sub_1B201D450((uint64_t)&v11);
  swift_release();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_7:
    sub_1B1B1F3E4((uint64_t)&v11, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    sub_1B1BBD808();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
    sub_1B19FA278(v1 + 144, (uint64_t)&v11);
    sub_1B19F8C58(&v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    sub_1B1E02E1C(&v11, 1, (uint64_t)&v17);
    sub_1B19F8C58(&v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v8 = v20;
    *(_OWORD *)(v5 + 64) = v19;
    *(_OWORD *)(v5 + 80) = v8;
    *(_OWORD *)(v5 + 96) = v21;
    *(_QWORD *)(v5 + 112) = v22;
    v9 = v18;
    *(_OWORD *)(v5 + 32) = v17;
    *(_OWORD *)(v5 + 48) = v9;
    swift_release();
    return v5;
  }
  v19 = v13;
  v20 = v14;
  v21 = v15;
  v22 = v16;
  v17 = v11;
  v18 = v12;
  sub_1B1BBD808();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  sub_1B19F8F0C((uint64_t)&v17, v5 + 32);
  swift_release();
  sub_1B1A203C4((uint64_t)&v17);
  return v5;
}

uint64_t sub_1B1BBD188()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5[2];
  __int128 v6;
  uint64_t v7;

  strcpy((char *)v5, "selectedCase");
  BYTE5(v5[1]) = unk_1EEF5BF85;
  HIWORD(v5[1]) = unk_1EEF5BF86;
  swift_bridgeObjectRetain_n();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1E02C04(v5[0], v5[1], &v6);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    sub_1B1B1F3E4((uint64_t)&v6, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  *(_QWORD *)&v6 = *(_QWORD *)(v0 + 40);
  if (!*(_QWORD *)(v6 + 16))
  {
    v1 = MEMORY[0x1E0DEE9D8];
    v2 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v2)
      goto LABEL_5;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1C929C8(0, 1);
  swift_bridgeObjectRelease();
  v1 = v6;
  v2 = *(_QWORD *)(v6 + 16);
  if (!v2)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if (v5[0] >= v2)
    v3 = *(_QWORD *)(v1 + 32);
  else
    v3 = *(_QWORD *)(v1 + 32 + 16 * v5[0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1BBD310@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1BBD360@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1BBD3B4()
{
  sub_1B1BBD768();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BBD3DC()
{
  sub_1B1BBD768();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1BBD404(_QWORD *a1)
{
  swift_allocObject();
  return sub_1B1BBD44C(a1);
}

_QWORD *sub_1B1BBD44C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;

  v3 = v1;
  sub_1B1BBD7AC(0, &qword_1EEF5BF98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v15 - v9;
  v11 = sub_1B19FA070(a1, a1[3]);
  sub_1B1BBD768();
  swift_retain();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    _s19StaticSwitchSnippetCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1B19FA154();
    sub_1B2229814();
    v13 = v16;
    v14 = v15[1];
    *(_OWORD *)(v3 + 144) = v15[0];
    *(_OWORD *)(v3 + 160) = v14;
    *(_QWORD *)(v3 + 176) = v13;
    swift_release();
    sub_1B19FA198((uint64_t)a1, (uint64_t)v15);
    v11 = sub_1B1BB6354(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v11;
}

uint64_t sub_1B1BBD620(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  sub_1B1BBD7AC(0, &qword_1EEF5BF88, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v13 - v8;
  result = sub_1B1BB65DC(a1);
  if (!v2)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1BBD768();
    sub_1B222A180();
    v11 = *(_QWORD *)(v1 + 176);
    v12 = *(_OWORD *)(v1 + 160);
    v13[0] = *(_OWORD *)(v1 + 144);
    v13[1] = v12;
    v14 = v11;
    sub_1B19FA094();
    sub_1B2229958();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t _s19StaticSwitchSnippetCMa()
{
  return objc_opt_self();
}

unint64_t sub_1B1BBD768()
{
  unint64_t result;

  result = qword_1EEF5BF90;
  if (!qword_1EEF5BF90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FB50, &_s19StaticSwitchSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BF90);
  }
  return result;
}

void sub_1B1BBD7AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1BBD768();
    v7 = a3(a1, &_s19StaticSwitchSnippetC10CodingKeysON, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1B1BBD808()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CE80)
  {
    sub_1B1A02758(255, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CE80);
  }
}

uint64_t _s19StaticSwitchSnippetC10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1BBD8B4 + 4 * byte_1B227FA20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1BBD8D4 + 4 * byte_1B227FA25[v4]))();
}

_BYTE *sub_1B1BBD8B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1BBD8D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1BBD8DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1BBD8E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1BBD8EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1BBD8F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s19StaticSwitchSnippetC10CodingKeysOMa()
{
  return &_s19StaticSwitchSnippetC10CodingKeysON;
}

unint64_t sub_1B1BBD914()
{
  unint64_t result;

  result = qword_1EEF5BFA0;
  if (!qword_1EEF5BFA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FB28, &_s19StaticSwitchSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFA0);
  }
  return result;
}

unint64_t sub_1B1BBD95C()
{
  unint64_t result;

  result = qword_1EEF5BFA8;
  if (!qword_1EEF5BFA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FA60, &_s19StaticSwitchSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFA8);
  }
  return result;
}

unint64_t sub_1B1BBD9A4()
{
  unint64_t result;

  result = qword_1EEF5BFB0;
  if (!qword_1EEF5BFB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FA88, &_s19StaticSwitchSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFB0);
  }
  return result;
}

uint64_t sub_1B1BBD9E8()
{
  sub_1B1BBF8EC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BBDA10()
{
  sub_1B1BBF8EC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BBDA38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5BFB8, (uint64_t (*)(void))sub_1B1BBF8EC, (uint64_t)&type metadata for Authoring.CodingKeys);
}

double sub_1B1BBDA64@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B2244EC0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B1BBDA7C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  unsigned int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  _QWORD *v63;
  size_t v64;
  char *v65;
  char *v66;
  char *v67;
  void *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned __int16 *v85;
  uint64_t v86[12];
  _BYTE v87[16];
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[16];
  uint64_t v91;
  _BYTE v92[16];
  uint64_t v93;
  _QWORD v94[12];
  _QWORD v95[10];
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[11];
  _OWORD v101[2];
  uint64_t v102;

  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = result;
    v4 = *(_OWORD *)(v1 + 64);
    v101[0] = *(_OWORD *)(v1 + 48);
    v101[1] = v4;
    v102 = *(_QWORD *)(v1 + 80);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v101, 0x200000000, v86);
    sub_1B1A18378((uint64_t)v86, (uint64_t)v94, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v85 = (unsigned __int16 *)v94[0];
    if (v94[0])
    {
      v72 = v94[5];
      v73 = v3;
      v74 = v94[8];
      v75 = v94[7];
      v5 = (_QWORD *)v94[9];
      v6 = v94[10];
      v69 = v1;
      v7 = *(_QWORD *)(v1 + 32);
      swift_retain();
      v8 = (void *)sub_1B2061C84(v7);
      swift_release();
      v9 = sub_1B2229454();
      v68 = v8;
      sub_1B1BA77BC(v9, v10, v8);
      swift_bridgeObjectRelease();
      v76 = v2;
      sub_1B206309C(4u, (uint64_t)v87);
      sub_1B206309C(5u, (uint64_t)v90);
      v12 = v88;
      v11 = v89;
      sub_1B206309C(0x13u, (uint64_t)v92);
      swift_retain();
      sub_1B1BA80C0((uint64_t)v92);
      v13 = v93;
      v14 = v91;
      if (v91 == 260)
        v15 = 260;
      else
        v15 = 0;
      sub_1B1BA80C0((uint64_t)v90);
      sub_1B1BA80C0((uint64_t)v87);
      swift_release();
      v100[0] = v12;
      memset(&v100[1], 0, 24);
      v100[4] = v13;
      memset(&v100[5], 0, 24);
      v100[8] = v14;
      v100[9] = v15;
      v100[10] = v11;
      v71 = v6;
      if (v6 > 0 && v75)
      {
        v16 = 0;
        v83 = v5[4];
        v17 = *(unsigned __int8 *)(v74 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v70 = v17;
        do
        {
          v18 = (unsigned int *)(v72 + 48 * v16);
          v19 = *v18;
          v20 = v18[1];
          v21 = v18[2];
          v22 = *((_QWORD *)v18 + 2);
          v23 = *((_QWORD *)v18 + 3);
          v25 = *((_QWORD *)v18 + 4);
          v24 = *((_QWORD *)v18 + 5);
          v82 = v16;
          if (v17)
          {
            v26 = *(os_unfair_lock_s **)(v24 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v26);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v83);
          v80 = v5[7];
          v81 = v5[6];
          v78 = v5[9];
          v79 = v5[8];
          v77 = v5[10];
          v27 = v5[4];
          v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
          v84 = (_QWORD *)v24;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
          v5[7] = v28;
          v5[9] = 0;
          v5[10] = 0;
          v5[8] = 0;
          swift_release();
          v95[0] = v74;
          v95[1] = v24;
          v95[2] = v5;
          v95[3] = v21;
          v95[4] = (v20 - v19 + v21);
          v95[5] = v71;
          v95[6] = v19;
          v95[7] = v20;
          v95[8] = 0;
          v95[9] = 0;
          v96 = 1;
          v97 = v22;
          v98 = v23;
          v99 = v25;
          sub_1B1BBE968(v95, v76, v73, v100);
          v29 = v5[6];
          v30 = v5[8];
          if (!v30)
          {
            v56 = v5[7];
            v57 = (_QWORD *)v5[4];
            v58 = v82;
            goto LABEL_50;
          }
          for (i = 0; i != v30; ++i)
          {
            v33 = (uint64_t *)(v29 + 48 * i);
            v34 = *v33;
            v35 = (void (*)(uint64_t))v33[4];
            v36 = v5[9];
            if (v36)
              v37 = v34 == v36;
            else
              v37 = 0;
            if (v37 || !v85[11])
              goto LABEL_15;
            v38 = v85[9];
            v39 = (_QWORD *)((char *)v85 + v85[8] + 41);
            v40 = v33[2];
            v41 = v39;
            v42 = v38 >> 4;
            v43 = (char *)v85 + 41;
            if (v38 >= 0x10)
            {
              while (*v41 != v34)
              {
                ++v43;
                v41 += 2;
                if (!--v42)
                  goto LABEL_30;
              }
              v44 = v43[v85[10]];
              v45 = v44 > 5;
              v46 = (1 << v44) & 0x23;
              if (v45 || v46 == 0)
              {
LABEL_15:
                v32 = swift_retain();
                v35(v32);
                swift_release();
                continue;
              }
            }
LABEL_30:
            if (swift_conformsToProtocol2())
              v48 = v40;
            else
              v48 = 0;
            if (v48)
            {
              if (v38 < 0x10)
                goto LABEL_15;
              v49 = v39;
              v50 = v38 >> 4;
              v51 = (char *)v85 + 41;
              while (*v49 != v48)
              {
                ++v51;
                v49 += 2;
                if (!--v50)
                  goto LABEL_43;
              }
              v52 = v51[v85[10]];
              v45 = v52 > 5;
              v53 = (1 << v52) & 0x23;
              if (v45 || v53 == 0)
                goto LABEL_15;
LABEL_43:
              v55 = 16 * (v38 >> 4);
              while (*v39 != v48)
              {
                v39 += 2;
                v55 -= 16;
                if (!v55)
                  goto LABEL_15;
              }
            }
          }
          v56 = v5[7];
          v29 = v5[6];
          v57 = (_QWORD *)v5[4];
          v58 = v82;
          if ((uint64_t)v5[8] >= 1)
            swift_arrayDestroy();
LABEL_50:
          ecs_stack_allocator_deallocate(v57, v29, 48 * v56);
          v5[6] = v81;
          v5[7] = v80;
          v5[8] = v79;
          v5[9] = v78;
          v5[10] = v77;
          v59 = v84;
          if (*(_QWORD *)(v5[13] + 16))
          {
            v60 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v60, (uint64_t)v84);
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v62 = v5[13];
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v62 + 16));
            }
            else
            {
              v63 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v62 + 24) >= 2uLL)
              {
                sub_1B1BBF038();
                v63 = (_QWORD *)swift_allocObject();
                v64 = j__malloc_size(v63);
                v63[2] = 0;
                v63[3] = 2 * ((uint64_t)(v64 - 32) / 72);
              }
              v5[13] = v63;
              swift_bridgeObjectRelease();
            }
            v59 = v84;
            if (*(unsigned __int8 *)(v5[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v65 = (char *)v84[29];
              v66 = (char *)v84[32];
              if (v65 == v66)
              {
                v67 = (char *)v84[30];
              }
              else
              {
                sub_1B1A1059C(v66, v65);
                v59 = v84;
                v66 = (char *)v84[29];
                v67 = (char *)v84[30];
                if (v67 == v66)
                {
                  v67 = 0;
                  v66 = 0;
                  v84[29] = 0;
                  v84[30] = 0;
                }
              }
              v59[31] = v67;
              v59[32] = v66;
            }
          }
          ecs_stack_allocator_pop_snapshot(v83);
          v17 = v70;
          if ((v70 & 1) != 0)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)v59[43]);
            os_unfair_lock_unlock((os_unfair_lock_t)v59[47]);
          }
          swift_release();
          v16 = v58 + 1;
        }
        while (v16 != v75);
      }

      sub_1B19ED748(v86);
      result = swift_release();
      ++*(_QWORD *)(v69 + 32);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

float sub_1B1BBE134(__n128 a1)
{
  __n128 v1;
  float v2;

  v1 = a1;
  a1.n128_u32[0] = a1.n128_u32[1];
  if (a1.n128_f32[1] >= v1.n128_f32[0])
  {
    if ((a1.n128_u32[1] & 0x7FFFFF) != 0)
      v2 = v1.n128_f32[0];
    else
      v2 = a1.n128_f32[1];
    if ((~a1.n128_u32[1] & 0x7F800000) == 0)
      a1.n128_f32[0] = v2;
  }
  else
  {
    a1.n128_u32[0] = v1.n128_u32[0];
  }
  if (v1.n128_f32[2] >= a1.n128_f32[0])
  {
    if ((v1.n128_u32[2] & 0x7FFFFF) == 0)
      a1.n128_f32[0] = v1.n128_f32[2];
    if ((~v1.n128_u32[2] & 0x7F800000) != 0)
      a1.n128_f32[0] = v1.n128_f32[2];
  }
  return a1.n128_f32[0];
}

float sub_1B1BBE18C(__n128 a1)
{
  __n128 v1;
  float v2;

  v1 = a1;
  a1.n128_u32[0] = a1.n128_u32[1];
  if (a1.n128_f32[1] >= v1.n128_f32[0])
  {
    if ((a1.n128_u32[1] & 0x7FFFFF) != 0)
      v2 = v1.n128_f32[0];
    else
      v2 = a1.n128_f32[1];
    if ((~a1.n128_u32[1] & 0x7F800000) == 0)
      a1.n128_f32[0] = v2;
  }
  else
  {
    a1.n128_u32[0] = v1.n128_u32[0];
  }
  if (v1.n128_f32[2] >= a1.n128_f32[0])
  {
    if ((v1.n128_u32[2] & 0x7FFFFF) == 0)
      a1.n128_f32[0] = v1.n128_f32[2];
    if ((~v1.n128_u32[2] & 0x7F800000) != 0)
      a1.n128_f32[0] = v1.n128_f32[2];
  }
  if (v1.n128_f32[3] >= a1.n128_f32[0])
  {
    if ((v1.n128_u32[3] & 0x7FFFFF) == 0)
      a1.n128_f32[0] = v1.n128_f32[3];
    if ((~v1.n128_u32[3] & 0x7F800000) != 0)
      a1.n128_f32[0] = v1.n128_f32[3];
  }
  return a1.n128_f32[0];
}

uint64_t sub_1B1BBE208()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LegacyParticleRenderSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1BBE24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(v0 + 16) = xmmword_1B227FBA0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v1 = qword_1ED4D09F8;
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleLegacyRenderer;
  *(_QWORD *)(inited + 56) = &off_1E63A8830;
  *(_QWORD *)(inited + 64) = &type metadata for ParticleAngle;
  *(_QWORD *)(inited + 72) = &off_1E637BE00;
  *(_QWORD *)(inited + 80) = &type metadata for Color;
  *(_QWORD *)(inited + 88) = &off_1E63BA208;
  *(_QWORD *)(inited + 96) = &type metadata for Scale;
  *(_QWORD *)(inited + 104) = &off_1E63BAA30;
  v7 = v1;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1B0FA64(inited, (uint64_t)v5);
  swift_setDeallocating();
  swift_release();
  v3 = v5[1];
  *(_OWORD *)(v0 + 48) = v5[0];
  *(_OWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 80) = v6;
  return v0;
}

uint64_t sub_1B1BBE3F0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1BBE24C();
  return v0;
}

const char *sub_1B1BBE424()
{
  return "Legacy Particle Render";
}

uint64_t sub_1B1BBE438()
{
  return qword_1EEF5DE50;
}

uint64_t type metadata accessor for LegacyParticleEmitterSystem()
{
  return objc_opt_self();
}

const char *sub_1B1BBE468()
{
  return "Legacy Particle Emitter";
}

uint64_t sub_1B1BBE47C()
{
  sub_1B1BBFBBC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BBE4A4()
{
  sub_1B1BBFBBC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BBE4CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5BFD8, (uint64_t (*)(void))sub_1B1BBFBBC, (uint64_t)&type metadata for ParticleAffectedByGlobalForce.CodingKeys);
}

uint64_t sub_1B1BBE4F8()
{
  sub_1B1BBFC00();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BBE520()
{
  sub_1B1BBFC00();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BBE548(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5BFE8, (uint64_t (*)(void))sub_1B1BBFC00, (uint64_t)&type metadata for ParticleGlobalForce.CodingKeys);
}

double sub_1B1BBE574()
{
  uint64_t v0;
  double result;

  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleAffectedByGlobalForce;
  *(_QWORD *)(v0 + 40) = &off_1E63B4D48;
  return result;
}

uint64_t sub_1B1BBE5D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1BBF930(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1BBE600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(v2, 2, ObjectType, a2);
}

double sub_1B1BBE648@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *a1 = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B1BBE654(char *a1, char *a2)
{
  return sub_1B1F9A374(*a1, *a2);
}

uint64_t sub_1B1BBE660()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BBE6E8()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BBE74C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BBE7D0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1BBE82C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746E65726170;
  if (*v1)
    v2 = 0x4572657474696D65;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xED0000797469746ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1BBE874()
{
  _BYTE *v0;

  if (*v0)
    return 0x4572657474696D65;
  else
    return 0x746E65726170;
}

uint64_t sub_1B1BBE8B8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1BBE918()
{
  sub_1B1BBFB78();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BBE940()
{
  sub_1B1BBFB78();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BBE968(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  id v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  _OWORD v110[9];
  __int128 v111;
  __int128 v112;
  _BYTE v113[48];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v8 = a1[2];
  v9 = *(_QWORD *)(v8 + 24);
  result = sub_1B1BA7B7C(v9);
  if (result)
  {
    v11 = (void *)result;
    v107 = a3;
    v96 = a4;
    v12 = a1[7] - a1[6];
    swift_unknownObjectRetain();
    swift_retain();
    v13 = (void *)sub_1B1D22DA8(v9, 48 * v12);
    v15 = v14;
    v103 = v16;
    swift_unknownObjectRetain();
    swift_release();
    v106 = (uint64_t)v13;
    v101 = v15;
    if (objc_msgSend(v13, sel_storageMode) == (id)2)
    {
      v105 = 0;
    }
    else
    {
      v17 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v18 = v13;
      v105 = &v17[v15];
    }
    v97 = a2;
    v19 = *(_QWORD *)(v8 + 24);
    swift_retain();
    v20 = (void *)sub_1B1D22DA8(v19, 16 * v12);
    v22 = v21;
    v24 = v23;
    swift_unknownObjectRetain();
    swift_release();
    if (objc_msgSend(v20, sel_storageMode) == (id)2)
    {
      v25 = 0;
    }
    else
    {
      v26 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v27 = v20;
      v25 = &v26[v22];
    }
    ObjectType = swift_getObjectType();
    sub_1B1E125C8(a3, ObjectType);
    sub_1B2118500(v106, v101, v103, 0, 4, ObjectType);
    v95 = v22;
    v99 = ObjectType;
    sub_1B2118500((uint64_t)v20, v22, v24, 0, 5, ObjectType);
    v30 = (uint64_t *)a1[11];
    v29 = a1[12];
    v31 = a1[13];
    v32 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v30, v29, v31, v8);
    v34 = v32;
    if (v32)
      v35 = (v33 - v32) / 16;
    else
      v35 = 0;
    v36 = sub_1B1A12038((uint64_t)&type metadata for ParticleLegacyRenderer, (uint64_t)&off_1E63A8800, v30, v29, v31, v8);
    v104 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngle, (uint64_t)&off_1E637BD88, v30, v29, v31, v8);
    v102 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v30, v29, v31, v8);
    v37 = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v30, v29, v31, v8);
    v38 = v107;
    v39 = *(_QWORD *)(*(_QWORD *)(v107 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)(v8 + 24)
                    + 8);
    v109 = 0;
    memset(v108, 0, sizeof(v108));
    memset(&v113[8], 0, 40);
    v114 = xmmword_1B2246910;
    v115 = 1uLL;
    *(_QWORD *)&v116 = 0;
    *((_QWORD *)&v116 + 1) = 1;
    v117 = 0uLL;
    v113[0] = 3;
    *(_QWORD *)&v111 = v97;
    *((_QWORD *)&v111 + 1) = v107;
    *(_QWORD *)&v112 = v39;
    *((_QWORD *)&v112 + 1) = 1;
    sub_1B1BBF08C((uint64_t)v108, (uint64_t)&v113[8]);
    v110[6] = v115;
    v110[7] = v116;
    v110[8] = v117;
    v110[2] = *(_OWORD *)v113;
    v110[3] = *(_OWORD *)&v113[16];
    v110[4] = *(_OWORD *)&v113[32];
    v110[5] = v114;
    v110[0] = v111;
    v110[1] = v112;
    v40 = v99;
    if (v35)
    {
      v41 = v36;
      v42 = 0;
      v43 = 0;
      v44 = (_QWORD *)(v107 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v45 = v35 - 1;
      do
      {
        while (1)
        {
          v46 = v43;
          v47 = 16 * v43;
          v48 = *(_OWORD *)(v34 + 16 * v43);
          v49 = v41 + 32 * v43;
          v50 = *(_OWORD *)v49;
          v51 = *(_OWORD *)(v37 + 16 * v43);
          LODWORD(v52) = HIDWORD(*(_QWORD *)(v37 + 16 * v43));
          if ((LODWORD(v52) & 0x7FFFFF) != 0)
            LODWORD(v53) = *(_OWORD *)(v37 + 16 * v43);
          else
            LODWORD(v53) = HIDWORD(*(_QWORD *)(v37 + 16 * v43));
          if ((~LODWORD(v52) & 0x7F800000) != 0)
            LODWORD(v53) = HIDWORD(*(_QWORD *)(v37 + 16 * v43));
          if (v52 >= *(float *)&v51)
            v54 = v53;
          else
            LODWORD(v54) = *(_OWORD *)(v37 + 16 * v43);
          if ((DWORD2(v51) & 0x7FFFFF) != 0)
            v55 = v54;
          else
            LODWORD(v55) = *(_QWORD *)(v37 + 16 * v43 + 8);
          if ((~DWORD2(v51) & 0x7F800000) != 0)
            LODWORD(v55) = *(_QWORD *)(v37 + 16 * v43 + 8);
          v56 = *((float *)&v51 + 2) >= v54 ? v55 : v54;
          HIDWORD(v48) = *(_DWORD *)(v104 + 4 * v43);
          v57 = &v105[48 * v43];
          *(_OWORD *)v57 = v48;
          *((_OWORD *)v57 + 1) = v50;
          *((float *)v57 + 8) = v56;
          v58 = 4 * v43++;
          *(float *)(v104 + v58) = *(float *)(v104 + v58) + 0.01;
          *(_OWORD *)&v25[v47] = *(_OWORD *)(v102 + v47);
          v59 = v42 + 1;
          v60 = *(_DWORD *)(v49 + 16);
          v61 = *(_DWORD *)(v49 + 20);
          if (v46 == v45)
            break;
          v62 = v41 + 32 * v43;
          if (v60 != *(_DWORD *)(v62 + 16) || v61 != *(_DWORD *)(v62 + 20))
            break;
          ++v42;
          if (v43 == v35)
            goto LABEL_52;
        }
        if (v60 == -1 && !v61)
          break;
        if (v60 < 0)
          break;
        if (v44[1] <= v60)
          break;
        v63 = *v44 + 12 * v60;
        if (v61 != -1 && *(_DWORD *)(v63 + 8) != v61)
          break;
        v64 = *(_QWORD *)(*(_QWORD *)(v38 + 136) + 8 * *(int *)(*v44 + 12 * v60) + 32);
        v65 = *(_QWORD *)(v64 + 48);
        v66 = *(_QWORD *)(v65 + 16);
        if (!v66)
          break;
        v67 = (_QWORD *)(v65 + 56);
        while ((ValueMetadata *)*(v67 - 3) != &type metadata for MaterialRuntime)
        {
          v67 += 5;
          if (!--v66)
            goto LABEL_52;
        }
        v89 = v43;
        v90 = v45;
        v91 = v44;
        v92 = v37;
        v93 = v41;
        v94 = v25;
        v98 = v35;
        v100 = v34;
        v68 = *(_QWORD *)(v64 + 128) + *v67 + 248 * *(__int16 *)(v63 + 4);
        v69 = *(_OWORD *)(v68 + 48);
        v71 = *(_OWORD *)v68;
        v70 = *(_OWORD *)(v68 + 16);
        *(_OWORD *)v113 = *(_OWORD *)(v68 + 32);
        *(_OWORD *)&v113[16] = v69;
        v111 = v71;
        v112 = v70;
        v72 = *(_OWORD *)(v68 + 112);
        v74 = *(_OWORD *)(v68 + 64);
        v73 = *(_OWORD *)(v68 + 80);
        v115 = *(_OWORD *)(v68 + 96);
        v116 = v72;
        *(_OWORD *)&v113[32] = v74;
        v114 = v73;
        v75 = *(_OWORD *)(v68 + 176);
        v77 = *(_OWORD *)(v68 + 128);
        v76 = *(_OWORD *)(v68 + 144);
        v119 = *(_OWORD *)(v68 + 160);
        v120 = v75;
        v117 = v77;
        v118 = v76;
        v79 = *(_OWORD *)(v68 + 208);
        v78 = *(_OWORD *)(v68 + 224);
        v80 = *(_OWORD *)(v68 + 192);
        v124 = *(_QWORD *)(v68 + 240);
        v122 = v79;
        v123 = v78;
        v121 = v80;
        sub_1B1BBF168((uint64_t)&v111);
        sub_1B1F352F8(&v111, v96, 0, 0, (uint64_t)v110);
        v81 = v40;
        if (v42 <= 0xFFFFFFFFFFFF15A0)
        {
          v82 = 0;
          v83 = (uint64_t)(v42 + 30000) / 30000;
          v84 = v101;
          v85 = v95;
          v86 = 30000;
          do
          {
            if (v86 >= v59)
              v87 = v59;
            else
              v87 = v86;
            v88 = v87 + v82;
            objc_msgSend(v11, sel_setVertexBufferOffset_atIndex_, v84, 4);
            objc_msgSend(v11, sel_setVertexBufferOffset_atIndex_, v85, 5);
            sub_1B20BFD00(v88);
            v86 += 30000;
            v82 -= 30000;
            v85 += 480000;
            v84 += 1440000;
            --v83;
          }
          while (v83);
        }
        sub_1B1BBF28C((uint64_t)&v111);
        v42 = 0;
        v34 = v100;
        v43 = v89;
        v45 = v90;
        v38 = v107;
        v40 = v81;
        v35 = v98;
        v41 = v93;
        v25 = v94;
        v44 = v91;
        v37 = v92;
      }
      while (v89 != v98);
    }
LABEL_52:
    sub_1B1BBF134(v110);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1B1BBF038()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BADE0)
  {
    sub_1B1B1F228();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BADE0);
  }
}

uint64_t sub_1B1BBF08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1BBF0D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1B1BBF0D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7870)
  {
    sub_1B1A025A0(255, (unint64_t *)&unk_1ED4B7860);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7870);
  }
}

_QWORD *sub_1B1BBF134(_QWORD *a1)
{
  destroy for RenderContext(a1);
  return a1;
}

uint64_t sub_1B1BBF168(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 24);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1B1BBF28C(uint64_t a1)
{
  void *v3;

  v3 = *(void **)(a1 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

void sub_1B1BBF3BC(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1BBFC44(255, a3, a4);
    v5 = sub_1B2229A18();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t *sub_1B1BBF414(uint64_t a1)
{
  float v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  float *v18;
  float v19;
  uint64_t v20;
  __int128 v21;
  __n128 *v22;
  float *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  __n128 v27;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int32 v37;
  uint64_t v38;
  __int128 v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42[8];
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _BYTE v54[40];
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v2 = *(float *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v55 = qword_1ED4D09F8;
  v56 = 0;
  v57 = 2;
  v58 = 0;
  v59 = 2;
  v60 = 0;
  swift_retain();
  sub_1B19EFFA0((uint64_t)v40);
  swift_release();
  v52[0] = v40[0];
  v52[1] = v40[1];
  v53 = v41;
  sub_1B1E8FCE4(a1, (uint64_t)v52, 0x200000000, v42);
  sub_1B1A18378((uint64_t)v42, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v43[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v40);
  if (v49 > 0 && (v33 = v46) != 0)
  {
    v3 = v48;
    v36 = v48[4];
    v35 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v50[0] = v43[0];
    v50[1] = v43[1];
    v51 = v44;
    v31 = (uint64_t)(v48 + 6);
    v32 = v45;
    v30 = v48 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (unsigned int *)(v32 + 48 * v4);
      v7 = *v6;
      v38 = v6[1];
      v8 = (uint64_t *)*((_QWORD *)v6 + 2);
      v9 = *((_QWORD *)v6 + 3);
      v11 = *((_QWORD *)v6 + 4);
      v10 = *((_QWORD *)v6 + 5);
      v34 = v5;
      if (v35)
      {
        v12 = *(os_unfair_lock_s **)(v10 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v12);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v36);
      sub_1B1A18378(v31, (uint64_t)v54, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v13 = v3[4];
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v3[6] = ecs_stack_allocator_allocate(v13, 48 * v14, 8);
      v3[7] = v14;
      v30[1] = 0;
      v30[2] = 0;
      *v30 = 0;
      swift_release();
      v15 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v8, v9, v11, (uint64_t)v3);
      v16 = sub_1B1A12038((uint64_t)&type metadata for ParticleCustomEmitter, (uint64_t)&off_1E63A4560, v8, v9, v11, (uint64_t)v3);
      if (v8)
      {
        v17 = v29;
        if (v11)
        {
          v18 = (float *)(v16 + 16);
          do
          {
            v19 = *(v18 - 2) + (float)(*(v18 - 3) + (float)(v2 * *(v18 - 4)));
            *(v18 - 2) = v19;
            v20 = (uint64_t)v19;
            if ((uint64_t)v19 >= 1)
            {
              v21 = *v15;
              HIDWORD(v21) = HIDWORD(v17);
              v39 = v21;
              (*(void (**)(_QWORD *, uint64_t))v18)(v3, v20);
              *(v18 - 2) = *(v18 - 2) - (float)v20;
              v17 = v39;
            }
            v18 += 8;
            ++v15;
            --v11;
          }
          while (v11);
          v29 = v17;
        }
      }
      else if ((_DWORD)v7 != (_DWORD)v38)
      {
        v22 = (__n128 *)&v15[v7];
        v23 = (float *)(v16 + 32 * v7 + 16);
        v24 = v38 - v7;
        do
        {
          v25 = *(v23 - 2) + (float)(*(v23 - 3) + (float)(v2 * *(v23 - 4)));
          *(v23 - 2) = v25;
          v26 = (uint64_t)v25;
          if ((uint64_t)v25 >= 1)
          {
            v27 = *v22;
            v27.n128_u32[3] = v37;
            (*(void (**)(_QWORD *, uint64_t, __n128))v23)(v3, (uint64_t)v25, v27);
            *(v23 - 2) = *(v23 - 2) - (float)v26;
          }
          ++v22;
          v23 += 8;
          --v24;
        }
        while (v24);
      }
      v5 = v34;
      sub_1B1F05D48(v3, (unsigned __int16 **)v50, (uint64_t)v54);
      sub_1B1F03804((char *)v10);
      ecs_stack_allocator_pop_snapshot(v36);
      if ((v35 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
      }
      swift_release();
      ++v4;
    }
    while (v4 != v33);
    sub_1B19ED720((uint64_t)v40);
    sub_1B19ED748(v42);
  }
  else
  {
    sub_1B19ED720((uint64_t)v40);
  }
  return sub_1B19ED748(v42);
}

ValueMetadata *type metadata accessor for Authoring()
{
  return &type metadata for Authoring;
}

ValueMetadata *type metadata accessor for SubEntity()
{
  return &type metadata for SubEntity;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGlobalForce()
{
  return &type metadata for ParticleAffectedByGlobalForce;
}

__n128 initializeWithCopy for ParticleLegacyRenderer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ParticleLegacyRenderer()
{
  return &type metadata for ParticleLegacyRenderer;
}

ValueMetadata *type metadata accessor for ParticleGlobalForce()
{
  return &type metadata for ParticleGlobalForce;
}

unint64_t sub_1B1BBF8EC()
{
  unint64_t result;

  result = qword_1EEF5BFC0;
  if (!qword_1EEF5BFC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280210, &type metadata for Authoring.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFC0);
  }
  return result;
}

uint64_t sub_1B1BBF930(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  _DWORD v16[2];
  _QWORD v17[4];

  sub_1B19F8E54(0, &qword_1EEF5BFC8, (uint64_t (*)(void))sub_1B1BBFB78, (uint64_t)&type metadata for SubEntity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v16 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (!sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1BBFB78();
    sub_1B222A150();
    if (!v1)
    {
      v11 = a1[3];
      v12 = a1[4];
      sub_1B19FA070(a1, v11);
      LOBYTE(v16[0]) = sub_1B2067B64(1036, v11, v12);
      sub_1B1A08878();
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v17[0];
      v15 = HIDWORD(v17[0]);
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v17, v17[3]);
  sub_1B1A08878();
  sub_1B2229D6C();
  v14 = v16[0];
  v15 = v16[1];
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v17);
LABEL_7:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v14 | (unint64_t)(v15 << 32);
}

unint64_t sub_1B1BBFB78()
{
  unint64_t result;

  result = qword_1EEF5BFD0;
  if (!qword_1EEF5BFD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22801C0, &type metadata for SubEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFD0);
  }
  return result;
}

unint64_t sub_1B1BBFBBC()
{
  unint64_t result;

  result = qword_1EEF5BFE0;
  if (!qword_1EEF5BFE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280170, &type metadata for ParticleAffectedByGlobalForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFE0);
  }
  return result;
}

unint64_t sub_1B1BBFC00()
{
  unint64_t result;

  result = qword_1EEF5BFF0;
  if (!qword_1EEF5BFF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280120, &type metadata for ParticleGlobalForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFF0);
  }
  return result;
}

uint64_t sub_1B1BBFC44(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    sub_1B1A025A0(255, a3);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGlobalForce.CodingKeys()
{
  return &type metadata for ParticleGlobalForce.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGlobalForce.CodingKeys()
{
  return &type metadata for ParticleAffectedByGlobalForce.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SubEntity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BBFCF0 + 4 * byte_1B227FBB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BBFD24 + 4 * byte_1B227FBB0[v4]))();
}

uint64_t sub_1B1BBFD24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BBFD2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BBFD34);
  return result;
}

uint64_t sub_1B1BBFD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BBFD48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BBFD4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BBFD54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SubEntity.CodingKeys()
{
  return &type metadata for SubEntity.CodingKeys;
}

ValueMetadata *type metadata accessor for Authoring.CodingKeys()
{
  return &type metadata for Authoring.CodingKeys;
}

unint64_t sub_1B1BBFD84()
{
  unint64_t result;

  result = qword_1EEF5BFF8;
  if (!qword_1EEF5BFF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280058, &type metadata for SubEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5BFF8);
  }
  return result;
}

unint64_t sub_1B1BBFDCC()
{
  unint64_t result;

  result = qword_1EEF5C000;
  if (!qword_1EEF5C000)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22800D0, &type metadata for ParticleGlobalForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C000);
  }
  return result;
}

unint64_t sub_1B1BBFE14()
{
  unint64_t result;

  result = qword_1EEF5C008;
  if (!qword_1EEF5C008)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22800F8, &type metadata for ParticleGlobalForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C008);
  }
  return result;
}

unint64_t sub_1B1BBFE5C()
{
  unint64_t result;

  result = qword_1EEF5C010;
  if (!qword_1EEF5C010)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280080, &type metadata for ParticleAffectedByGlobalForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C010);
  }
  return result;
}

unint64_t sub_1B1BBFEA4()
{
  unint64_t result;

  result = qword_1EEF5C018;
  if (!qword_1EEF5C018)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22800A8, &type metadata for ParticleAffectedByGlobalForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C018);
  }
  return result;
}

unint64_t sub_1B1BBFEEC()
{
  unint64_t result;

  result = qword_1EEF5C020;
  if (!qword_1EEF5C020)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FF90, &type metadata for SubEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C020);
  }
  return result;
}

unint64_t sub_1B1BBFF34()
{
  unint64_t result;

  result = qword_1EEF5C028;
  if (!qword_1EEF5C028)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FFB8, &type metadata for SubEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C028);
  }
  return result;
}

unint64_t sub_1B1BBFF7C()
{
  unint64_t result;

  result = qword_1EEF5C030;
  if (!qword_1EEF5C030)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FF40, &type metadata for Authoring.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C030);
  }
  return result;
}

unint64_t sub_1B1BBFFC4()
{
  unint64_t result;

  result = qword_1EEF5C038;
  if (!qword_1EEF5C038)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227FF68, &type metadata for Authoring.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C038);
  }
  return result;
}

uint64_t sub_1B1BC0008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  uint64_t inited;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v16[40];
  _OWORD v17[2];
  uint64_t v18;
  _BYTE v19[40];
  _OWORD v20[2];
  uint64_t v21;
  _BYTE v22[40];
  _OWORD v23[2];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D15FEC(v3, &v32);
  swift_release();
  if (!(_QWORD)v33)
  {
    sub_1B21451EC((uint64_t)&unk_1E639DEE8);
    sub_1B21451EC((uint64_t)&unk_1E639DE88);
    sub_1B21451EC((uint64_t)&unk_1E639DEB8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a1 + 104);
  v29 = *(_OWORD *)(a1 + 88);
  v30 = v4;
  v31 = *(_QWORD *)(a1 + 120);
  sub_1B19F01A4((uint64_t)v16);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TransientOriginScale;
  *(_QWORD *)(inited + 40) = &off_1E639F8B0;
  sub_1B1E68C98(v17);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v16);
  v6 = v17[1];
  *(_OWORD *)(v1 + 16) = v17[0];
  *(_OWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = v18;
  sub_1B19F03A8((uint64_t)v19);
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v7 + 32) = &type metadata for TransientOriginScale;
  *(_QWORD *)(v7 + 40) = &off_1E639F8B0;
  sub_1B1E68C98(v20);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v19);
  *(_OWORD *)(v1 + 56) = v20[0];
  *(_OWORD *)(v1 + 72) = v20[1];
  *(_QWORD *)(v1 + 88) = v21;
  sub_1B19F05AC((uint64_t)v22);
  v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = &type metadata for TransientOriginScale;
  *(_QWORD *)(v8 + 40) = &off_1E639F8B0;
  sub_1B1E68C98(v23);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v22);
  v9 = v23[1];
  *(_OWORD *)(v1 + 96) = v23[0];
  *(_OWORD *)(v1 + 112) = v9;
  *(_QWORD *)(v1 + 128) = v24;
  v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v10 + 32) = &type metadata for Scale1;
  *(_QWORD *)(v10 + 40) = &off_1E63BC300;
  swift_retain();
  sub_1B1B44110(v25, v10);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v23);
  v11 = v25[1];
  *(_OWORD *)(v1 + 136) = v25[0];
  *(_OWORD *)(v1 + 152) = v11;
  *(_QWORD *)(v1 + 168) = v26;
  v12 = *(_OWORD *)(v1 + 112);
  v32 = *(_OWORD *)(v1 + 96);
  v33 = v12;
  v34 = *(_QWORD *)(v1 + 128);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v13 + 32) = &type metadata for Scale2;
  *(_QWORD *)(v13 + 40) = &off_1E63BC468;
  swift_retain();
  sub_1B1B44110(v27, v13);
  swift_setDeallocating();
  sub_1B1B4F21C(a1);
  sub_1B19ED720((uint64_t)&v32);
  v14 = v27[1];
  *(_OWORD *)(v1 + 176) = v27[0];
  *(_OWORD *)(v1 + 192) = v14;
  *(_QWORD *)(v1 + 208) = v28;
  return v1;
}

uint64_t *sub_1B1BC0390(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float *v30;
  float *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  float *v66;
  float *v67;
  uint64_t v68;
  float *v69;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  os_unfair_lock_s *v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  float *v90;
  float *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  os_unfair_lock_s *v104;
  uint64_t v105;
  uint64_t v106;
  float *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unsigned __int8 v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  _OWORD v154[9];
  int v155;
  _OWORD v156[9];
  int v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  int v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  int v195;
  uint64_t v196[8];
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _OWORD v200[2];
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _OWORD v215[2];
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D15FEC(v1, &v186);
  swift_release();
  v2 = (char *)v187;
  if ((_QWORD)v187)
  {
    v3 = BYTE8(v192);
    v109 = v192;
    v120 = *((_QWORD *)&v191 + 1);
    v121 = v191;
    v114 = *((_QWORD *)&v189 + 1);
    v115 = v190;
    v4 = v188;
    v5 = *((_QWORD *)&v187 + 1);
    v116 = (char *)v189;
    v117 = v186;
    v6 = BYTE8(v186);
    v7 = BYTE8(v188);
    v8 = BYTE8(v190);
  }
  else
  {
    v2 = sub_1B21451EC((uint64_t)&unk_1E639DEE8);
    v5 = v9;
    v116 = sub_1B21451EC((uint64_t)&unk_1E639DE88);
    v114 = v10;
    v11 = sub_1B21451EC((uint64_t)&unk_1E639DEB8);
    v120 = v12;
    v121 = (uint64_t)v11;
    v6 = 0;
    v4 = 0;
    v115 = 0;
    v109 = 0;
    v7 = 1;
    v117 = 2;
    v8 = 1;
    v3 = 1;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1EE00B0((uint64_t)v2, v5, v4, v7, 32, (uint64_t)v156);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v154[6] = v156[6];
  v154[7] = v156[7];
  v154[8] = v156[8];
  v155 = v157;
  v154[2] = v156[2];
  v154[3] = v156[3];
  v154[4] = v156[4];
  v154[5] = v156[5];
  v154[0] = v156[0];
  v154[1] = v156[1];
  if (!v6)
  {
    v32 = *(_OWORD *)(v130 + 32);
    v197 = *(_OWORD *)(v130 + 16);
    v198 = v32;
    v199 = *(_QWORD *)(v130 + 48);
    v33 = swift_retain();
    sub_1B1E8FCE4(v33, (uint64_t)&v197, 0x200000000, v200);
    sub_1B1A18378((uint64_t)v200, (uint64_t)&v186, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v186)
    {
      v167 = v186;
      v168 = v187;
      v140 = *((_QWORD *)&v188 + 1);
      v169 = v188;
      v34 = *((_QWORD *)&v189 + 1);
      v35 = v190;
      v36 = v191;
      swift_release();
      if (v36 > 0 && v34)
      {
        v149 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 32);
        v37 = *(unsigned __int8 *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v215[0] = v167;
        v215[1] = v168;
        v216 = v169;
        swift_retain();
        swift_retain();
        swift_retain();
        v38 = 0;
        v39 = 0;
        v137 = v37;
        do
        {
          v40 = (unsigned int *)(v140 + 48 * v38);
          v144 = *v40;
          v142 = v40[1];
          v41 = (uint64_t *)*((_QWORD *)v40 + 2);
          v42 = *((_QWORD *)v40 + 3);
          v44 = *((_QWORD *)v40 + 4);
          v43 = *((_QWORD *)v40 + 5);
          v146 = v39;
          if (v37)
          {
            v45 = *(os_unfair_lock_s **)(v43 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v45);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v43 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v149);
          sub_1B1A18378(*((_QWORD *)&v35 + 1) + 48, (uint64_t)v196, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v46 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 32);
          v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          *(_QWORD *)(*((_QWORD *)&v35 + 1) + 48) = ecs_stack_allocator_allocate(v46, 48 * v47, 8);
          *(_QWORD *)(*((_QWORD *)&v35 + 1) + 56) = v47;
          *(_OWORD *)(*((_QWORD *)&v35 + 1) + 72) = 0uLL;
          *(_QWORD *)(*((_QWORD *)&v35 + 1) + 64) = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v41, v42, v44, *((uint64_t *)&v35 + 1));
          v48 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v41, v42, v44, *((uint64_t *)&v35 + 1));
          if (v41)
          {
            v37 = v137;
            if (v44)
            {
              sample_curve((uint64_t)v154, *v48);
              __asm { BR              X8 }
            }
          }
          else
          {
            v37 = v137;
            if ((_DWORD)v144 != v142)
            {
              sample_curve((uint64_t)v154, v48[v144]);
              __asm { BR              X8 }
            }
          }
          v39 = v146;
          sub_1B1F05D48(*((_QWORD **)&v35 + 1), (unsigned __int16 **)v215, (uint64_t)v196);
          sub_1B1F03804((char *)v43);
          ecs_stack_allocator_pop_snapshot(v149);
          if ((v35 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v43 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v43 + 376));
          }
          swift_release();
          ++v38;
        }
        while (v38 != v34);
        sub_1B19ED748((uint64_t *)v200);
        sub_1B19ED748((uint64_t *)v200);
      }
      else
      {
        sub_1B19ED748((uint64_t *)v200);
        v39 = 0;
      }
    }
    else
    {
      swift_release();
      v39 = 0;
    }
    v92 = *(_OWORD *)(v130 + 152);
    v175 = *(_QWORD *)(v130 + 168);
    v173 = *(_OWORD *)(v130 + 136);
    v174 = v92;
    swift_retain();
    v93 = swift_retain();
    sub_1B1E8FCE4(v93, (uint64_t)&v173, 0x200000000, &v207);
    sub_1B1A18378((uint64_t)&v207, (uint64_t)&v176, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v176)
    {
      v164 = v176;
      v165 = v177;
      v131 = *((_QWORD *)&v178 + 1);
      v166 = v178;
      v94 = *((_QWORD *)&v179 + 1);
      v95 = v180;
      v96 = v181;
      sub_1B19ED720((uint64_t)&v173);
      swift_release();
      if (v96 > 0 && v94)
      {
        v138 = *(_QWORD *)(*((_QWORD *)&v95 + 1) + 32);
        v97 = *(unsigned __int8 *)(v95 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v170 = v164;
        v171 = v165;
        v172 = v166;
        swift_retain();
        swift_retain();
        swift_retain();
        v98 = 0;
        v129 = v97;
        do
        {
          v99 = (unsigned int *)(v131 + 48 * v98);
          v136 = *v99;
          v132 = v99[1];
          v101 = (uint64_t *)*((_QWORD *)v99 + 2);
          v100 = *((_QWORD *)v99 + 3);
          v103 = *((_QWORD *)v99 + 4);
          v102 = *((_QWORD *)v99 + 5);
          v147 = v39;
          if (v97)
          {
            v104 = *(os_unfair_lock_s **)(v102 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v104);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v102 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v138);
          sub_1B1A18378(*((_QWORD *)&v95 + 1) + 48, (uint64_t)&v217, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v105 = *(_QWORD *)(*((_QWORD *)&v95 + 1) + 32);
          v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          *(_QWORD *)(*((_QWORD *)&v95 + 1) + 48) = ecs_stack_allocator_allocate(v105, 48 * v106, 8);
          *(_QWORD *)(*((_QWORD *)&v95 + 1) + 56) = v106;
          *(_OWORD *)(*((_QWORD *)&v95 + 1) + 72) = 0uLL;
          *(_QWORD *)(*((_QWORD *)&v95 + 1) + 64) = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v101, v100, v103, *((uint64_t *)&v95 + 1));
          v107 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v101, v100, v103, *((uint64_t *)&v95 + 1));
          if (v101)
          {
            v97 = v129;
            if (v103)
            {
              sample_curve((uint64_t)v154, *v107);
              __asm { BR              X8 }
            }
          }
          else
          {
            v97 = v129;
            if ((_DWORD)v136 != v132)
            {
              sample_curve((uint64_t)v154, v107[v136]);
              __asm { BR              X8 }
            }
          }
          v39 = v147;
          sub_1B1F05D48(*((_QWORD **)&v95 + 1), (unsigned __int16 **)&v170, (uint64_t)&v217);
          sub_1B1F03804((char *)v102);
          ecs_stack_allocator_pop_snapshot(v138);
          if ((v95 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v102 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v102 + 376));
          }
          swift_release();
          ++v98;
        }
        while (v98 != v94);
        sub_1B19ED748((uint64_t *)&v207);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v108 = (uint64_t *)&v207;
      return sub_1B19ED748(v108);
    }
    sub_1B19ED720((uint64_t)&v173);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  if (v6 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1EE00B0((uint64_t)v116, v114, v115, v8, 32, (uint64_t)&v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1EE00B0(v121, v120, v109, v3, 32, (uint64_t)&v176);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v199 = *(_QWORD *)(v130 + 128);
    v49 = *(_OWORD *)(v130 + 112);
    v197 = *(_OWORD *)(v130 + 96);
    v198 = v49;
    swift_retain();
    v50 = swift_retain();
    sub_1B1E8FCE4(v50, (uint64_t)&v197, 0x200000000, v200);
    sub_1B1A18378((uint64_t)v200, (uint64_t)&v207, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!(_QWORD)v207)
    {
      sub_1B19ED720((uint64_t)&v197);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_release();
    }
    v217 = v207;
    v218 = v208;
    v112 = v210;
    v219 = v209;
    v51 = v211;
    v52 = v212;
    v126 = v213;
    v53 = v214;
    sub_1B19ED720((uint64_t)&v197);
    swift_release();
    if (v53 > 0 && v51)
    {
      v54 = v126[4];
      v124 = *(unsigned __int8 *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v173 = v217;
      v174 = v218;
      v175 = v219;
      swift_retain();
      swift_retain();
      swift_retain();
      v55 = 0;
      v56 = 0;
      v134 = v117;
      v57 = v117;
      v111 = v51;
      do
      {
        v122 = v55;
        v58 = (unsigned int *)(v112 + 48 * v55);
        v150 = *v58;
        v118 = v58[1];
        v59 = (uint64_t *)*((_QWORD *)v58 + 2);
        v60 = *((_QWORD *)v58 + 3);
        v61 = *((_QWORD *)v58 + 4);
        v62 = *((_QWORD *)v58 + 5);
        v152 = v56;
        if (v124)
        {
          v63 = *(os_unfair_lock_s **)(v62 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v63);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v62 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v54);
        sub_1B1A18378((uint64_t)(v126 + 6), (uint64_t)v196, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v64 = v126[4];
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v126[6] = ecs_stack_allocator_allocate(v64, 48 * v65, 8);
        v126[7] = v65;
        v126[9] = 0;
        v126[10] = 0;
        v126[8] = 0;
        swift_release();
        sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v59, v60, v61, (uint64_t)v126);
        v66 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v59, v60, v61, (uint64_t)v126);
        v67 = v66;
        if (v59)
        {
          v68 = v111;
          v56 = v152;
          if (v61)
          {
            sample_curve((uint64_t)v154, *v66);
            sample_curve((uint64_t)&v186, *v67);
            sample_curve((uint64_t)&v176, *v67);
            __asm { BR              X8 }
          }
        }
        else
        {
          v68 = v111;
          v56 = v152;
          if ((_DWORD)v150 != v118)
          {
            v69 = &v66[v150];
            sample_curve((uint64_t)v154, *v69);
            sample_curve((uint64_t)&v186, *v69);
            sample_curve((uint64_t)&v176, *v69);
            __asm { BR              X8 }
          }
        }
        sub_1B1F05D48(v126, (unsigned __int16 **)&v173, (uint64_t)v196);
        sub_1B1F03804((char *)v62);
        ecs_stack_allocator_pop_snapshot(v54);
        if ((v124 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
        }
        swift_release();
        v55 = v122 + 1;
      }
      while (v122 + 1 != v68);
      sub_1B19ED748((uint64_t *)v200);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v108 = (uint64_t *)v200;
    return sub_1B19ED748(v108);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1EE00B0((uint64_t)v116, v114, v115, v8, 32, (uint64_t)&v186);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v180 = v190;
  v181 = v191;
  v178 = v188;
  v179 = v189;
  v185 = v195;
  v183 = v193;
  v184 = v194;
  v182 = v192;
  v176 = v186;
  v177 = v187;
  v13 = *(_OWORD *)(v130 + 72);
  v173 = *(_OWORD *)(v130 + 56);
  v174 = v13;
  v175 = *(_QWORD *)(v130 + 88);
  v14 = swift_retain();
  sub_1B1E8FCE4(v14, (uint64_t)&v173, 0x200000000, v196);
  sub_1B1A18378((uint64_t)v196, (uint64_t)&v207, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v207)
  {
    v161 = v207;
    v162 = v208;
    v141 = v210;
    v163 = v209;
    v15 = v211;
    v16 = v212;
    v148 = v213;
    v17 = v214;
    swift_release();
    if (v17 > 0 && v15)
    {
      v145 = v148[4];
      v18 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v164 = v161;
      v165 = v162;
      v166 = v163;
      swift_retain();
      swift_retain();
      swift_retain();
      v19 = 0;
      v20 = 0;
      v139 = v18;
      do
      {
        v21 = (unsigned int *)(v141 + 48 * v19);
        v151 = *v21;
        v143 = v21[1];
        v22 = (uint64_t *)*((_QWORD *)v21 + 2);
        v23 = *((_QWORD *)v21 + 3);
        v25 = *((_QWORD *)v21 + 4);
        v24 = *((_QWORD *)v21 + 5);
        v133 = v20;
        if (v18)
        {
          v26 = *(os_unfair_lock_s **)(v24 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v26);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v145);
        sub_1B1A18378((uint64_t)(v148 + 6), (uint64_t)&v217, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v27 = v148[4];
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v148[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
        v148[7] = v28;
        v148[9] = 0;
        v148[10] = 0;
        v148[8] = 0;
        swift_release();
        sub_1B1A12038((uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, v22, v23, v25, (uint64_t)v148);
        v29 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v22, v23, v25, (uint64_t)v148);
        v30 = v29;
        if (v22)
        {
          v18 = v139;
          if (v25)
          {
            sample_curve((uint64_t)v154, *v29);
            sample_curve((uint64_t)&v176, *v30);
            __asm { BR              X8 }
          }
        }
        else
        {
          v18 = v139;
          if ((_DWORD)v151 != v143)
          {
            v31 = &v29[v151];
            sample_curve((uint64_t)v154, *v31);
            sample_curve((uint64_t)&v176, *v31);
            __asm { BR              X8 }
          }
        }
        v20 = v133;
        sub_1B1F05D48(v148, (unsigned __int16 **)&v164, (uint64_t)&v217);
        sub_1B1F03804((char *)v24);
        ecs_stack_allocator_pop_snapshot(v145);
        if ((v18 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
        }
        swift_release();
        ++v19;
      }
      while (v19 != v15);
      sub_1B19ED748(v196);
      sub_1B19ED748(v196);
    }
    else
    {
      sub_1B19ED748(v196);
      v20 = 0;
    }
  }
  else
  {
    swift_release();
    v20 = 0;
  }
  v172 = *(_QWORD *)(v130 + 208);
  v71 = *(_OWORD *)(v130 + 192);
  v170 = *(_OWORD *)(v130 + 176);
  v171 = v71;
  swift_retain();
  v72 = swift_retain();
  sub_1B1E8FCE4(v72, (uint64_t)&v170, 0x200000000, &v197);
  sub_1B1A18378((uint64_t)&v197, (uint64_t)v200, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v200[0])
  {
    sub_1B19ED720((uint64_t)&v170);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v158 = v200[0];
  v159 = v200[1];
  v125 = v202;
  v160 = v201;
  v73 = v203;
  v74 = v204;
  v128 = v205;
  v75 = v206;
  sub_1B19ED720((uint64_t)&v170);
  swift_release();
  if (v75 > 0 && v73)
  {
    v113 = v73;
    v76 = v128[4];
    v77 = *(unsigned __int8 *)(v74 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v167 = v158;
    v168 = v159;
    v169 = v160;
    swift_retain();
    swift_retain();
    swift_retain();
    v78 = 0;
    v110 = v117;
    v79 = v117;
    v119 = v77;
    v123 = v76;
    do
    {
      v135 = v20;
      v80 = (unsigned int *)(v125 + 48 * v78);
      v81 = *v80;
      v153 = v80[1];
      v83 = (uint64_t *)*((_QWORD *)v80 + 2);
      v82 = *((_QWORD *)v80 + 3);
      v85 = *((_QWORD *)v80 + 4);
      v84 = *((_QWORD *)v80 + 5);
      v127 = v78;
      if (v77)
      {
        v86 = *(os_unfair_lock_s **)(v84 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v86);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v84 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v76);
      sub_1B1A18378((uint64_t)(v128 + 6), (uint64_t)v215, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v87 = v128[4];
      v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v128[6] = ecs_stack_allocator_allocate(v87, 48 * v88, 8);
      v128[7] = v88;
      v128[9] = 0;
      v128[10] = 0;
      v128[8] = 0;
      swift_release();
      sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v83, v82, v85, (uint64_t)v128);
      v89 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v83, v82, v85, (uint64_t)v128);
      v90 = v89;
      if (v83)
      {
        v77 = v119;
        if (v85)
        {
          sample_curve((uint64_t)v154, *v89);
          sample_curve((uint64_t)&v176, *v90);
          __asm { BR              X8 }
        }
      }
      else
      {
        v77 = v119;
        if ((_DWORD)v81 != v153)
        {
          v91 = &v89[v81];
          sample_curve((uint64_t)v154, *v91);
          sample_curve((uint64_t)&v176, *v91);
          __asm { BR              X8 }
        }
      }
      v20 = v135;
      v76 = v123;
      sub_1B1F05D48(v128, (unsigned __int16 **)&v167, (uint64_t)v215);
      sub_1B1F03804((char *)v84);
      ecs_stack_allocator_pop_snapshot(v123);
      if ((v77 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v84 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v84 + 376));
      }
      swift_release();
      v78 = v127 + 1;
    }
    while (v127 + 1 != v113);
    sub_1B19ED748((uint64_t *)&v197);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v108 = (uint64_t *)&v197;
  return sub_1B19ED748(v108);
}

uint64_t sub_1B1BC2144()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleSizeOverLife.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1BC21A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[25];
  char v18;

  v3 = v1;
  sub_1B1BC36F0(0, &qword_1EEF5C040, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v17[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BC36AC();
  sub_1B222A180();
  *(_QWORD *)v17 = *(_QWORD *)v3;
  v18 = 0;
  sub_1B1BA05CC();
  sub_1B2229958();
  if (!v2)
  {
    v17[0] = *(_BYTE *)(v3 + 8);
    v18 = 1;
    sub_1B1A71B00();
    sub_1B2229958();
    *(_OWORD *)v17 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)&v17[9] = *(_OWORD *)(v3 + 25);
    v18 = 2;
    sub_1B1A0DBF0(0, v11, v12, v13);
    sub_1B1BC374C((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C, v14, v15);
    sub_1B2229958();
    *(_OWORD *)v17 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)&v17[9] = *(_OWORD *)(v3 + 57);
    v18 = 3;
    sub_1B2229958();
    *(_OWORD *)v17 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)&v17[9] = *(_OWORD *)(v3 + 89);
    v18 = 4;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1BC23D8(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1B1BC0008(a1);
  return v2;
}

const char *sub_1B1BC2418()
{
  return "ParticleSizeOverLife";
}

void sub_1B1BC242C(char *a1)
{
  sub_1B1F94FB0(*a1);
}

uint64_t sub_1B1BC2438()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BC2470 + 4 * byte_1B2280298[*v0]))(0x7469736F706D6F63, 0xEB000000006E6F69);
}

uint64_t sub_1B1BC2470()
{
  return 1701080941;
}

uint64_t sub_1B1BC2480()
{
  return 0x657672754378;
}

uint64_t sub_1B1BC2494()
{
  return 0x657672754379;
}

uint64_t sub_1B1BC24C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BC26A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BC24E4()
{
  sub_1B1BC36AC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BC250C()
{
  sub_1B1BC36AC();
  return sub_1B222A1E0();
}

__n128 sub_1B1BC2534@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  _OWORD v8[2];

  sub_1B1BC2890(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)v8 + 9);
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B1BC2584(_QWORD *a1)
{
  return sub_1B1BC21A8(a1);
}

uint64_t sub_1B1BC2598()
{
  return type metadata accessor for ParticleSizeOverLife.System();
}

char *sub_1B1BC25B4@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  uint64_t v9;

  v2 = sub_1B21451EC((uint64_t)&unk_1E639DEE8);
  v4 = v3;
  v5 = sub_1B21451EC((uint64_t)&unk_1E639DE88);
  v7 = v6;
  result = sub_1B21451EC((uint64_t)&unk_1E639DEB8);
  *(_BYTE *)a1 = 2;
  *(_DWORD *)(a1 + 4) = 1065353216;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleSizeOverLife.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1BC2674()
{
  return "ParticleSizeOverLife.GPU";
}

uint64_t sub_1B1BC2688()
{
  return type metadata accessor for ParticleSizeOverLife.GPUSystem();
}

uint64_t sub_1B1BC26A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657672754378 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657672754379 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65767275437ALL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1B1BC2890@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unsigned __int8 v58;
  char v59;

  sub_1B1BC36F0(0, &qword_1ED4BABD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v40 - v9;
  v11 = sub_1B21451EC((uint64_t)&unk_1E639DBE8);
  v53 = v12;
  v54 = v11;
  v13 = sub_1B21451EC((uint64_t)&unk_1E639DB88);
  v49 = v14;
  v50 = v13;
  v15 = sub_1B21451EC((uint64_t)&unk_1E639DBB8);
  v51 = v16;
  v52 = v15;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BC36AC();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v59 = 0;
    sub_1B1BA0588();
    sub_1B2229814();
    v17 = v55;
    v18 = HIDWORD(v55);
    v59 = 1;
    sub_1B1A71ABC();
    sub_1B2229814();
    v19 = v55;
    sub_1B1A0DBF0(0, v20, v21, v22);
    v24 = v23;
    v59 = 2;
    v47 = sub_1B1BC374C((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94, v25, v26);
    v48 = v24;
    sub_1B2229814();
    v44 = v19;
    v45 = v17;
    v27 = (char *)v55;
    v28 = v56;
    v43 = v58;
    v46 = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = 3;
    sub_1B2229814();
    v54 = v27;
    v30 = v55;
    v29 = v56;
    v31 = v57;
    v41 = v58;
    swift_bridgeObjectRetain();
    v53 = v30;
    swift_bridgeObjectRetain();
    v42 = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = 4;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v47 = v55;
    v49 = v56;
    v50 = v57;
    LODWORD(v48) = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = v54;
    swift_bridgeObjectRetain();
    v33 = v28;
    swift_bridgeObjectRetain();
    v34 = v46;
    swift_bridgeObjectRetain();
    v35 = v53;
    swift_bridgeObjectRetain();
    v36 = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v45;
    *(_DWORD *)(a2 + 4) = v18;
    *(_BYTE *)(a2 + 8) = v44;
    *(_QWORD *)(a2 + 16) = v32;
    *(_QWORD *)(a2 + 24) = v33;
    *(_QWORD *)(a2 + 32) = v34;
    *(_BYTE *)(a2 + 40) = v43;
    *(_QWORD *)(a2 + 48) = v35;
    *(_QWORD *)(a2 + 56) = v36;
    *(_QWORD *)(a2 + 64) = v31;
    *(_BYTE *)(a2 + 72) = v41;
    v39 = v49;
    *(_QWORD *)(a2 + 80) = v37;
    *(_QWORD *)(a2 + 88) = v39;
    *(_QWORD *)(a2 + 96) = v50;
    *(_BYTE *)(a2 + 104) = v48;
  }
  return result;
}

uint64_t sub_1B1BC2DBC(uint64_t a1)
{
  __int128 v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  void *v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v38 = *(_OWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 16);
  swift_retain();
  sub_1B1D15FEC(*((uint64_t *)&v2 + 1), &v39);
  swift_release();
  v3 = v40;
  if (v40)
  {
    v29 = v51;
    v4 = v50;
    v34 = v49;
    v35 = v48;
    v5 = v46;
    v36 = v45;
    v37 = v44;
    v6 = v41;
    v8 = v39;
    v7 = DWORD1(v39);
    v32 = BYTE8(v39);
    v33 = v42;
    v30 = v47;
    v31 = v43;
  }
  else
  {
    v3 = sub_1B21451EC((uint64_t)&unk_1E639DEE8);
    v6 = v9;
    v10 = sub_1B21451EC((uint64_t)&unk_1E639DE88);
    v36 = v11;
    v37 = (uint64_t)v10;
    v12 = sub_1B21451EC((uint64_t)&unk_1E639DEB8);
    v34 = v13;
    v35 = (uint64_t)v12;
    v32 = 0;
    v33 = 0;
    v5 = 0;
    v4 = 0;
    v30 = 1;
    v31 = 1;
    v7 = 1065353216;
    v8 = 2;
    v29 = 1;
  }
  sub_1B1E5371C();
  v14 = sub_1B1E36538((uint64_t)&type metadata for ParticleAge);
  swift_release();
  if (v14 && (sub_1B1E5371C(), v15 = sub_1B1E36538((uint64_t)&type metadata for ParticleLifetime), swift_release(), v15))
  {
    LODWORD(v39) = v7;
    BYTE4(v39) = v8;
    v16 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      ObjectType = swift_getObjectType();
      type metadata accessor for particle_size_over_life_uniforms(0);
      sub_1B1F40E1C((uint64_t)&v39, 1, ObjectType, v18, v19, v20, v21, v22);
    }
    v23 = v6;
    if (v32)
    {
      if (v32 != 1)
      {
        swift_retain();
        v24 = sub_1B20E1C70(v35, v34, v4, v29);
        swift_release();
        if (v16)
          objc_msgSend(v16, sel_setTexture_atIndex_, v24, 2);
        swift_unknownObjectRelease();
      }
      swift_retain();
      v25 = sub_1B20E1C70(v37, v36, v5, v30);
      swift_release();
      if (v16)
        objc_msgSend(v16, sel_setTexture_atIndex_, v25, 1);
      swift_unknownObjectRelease();
    }
    swift_retain();
    v26 = sub_1B20E1C70((uint64_t)v3, v23, v33, v31);
    swift_release();
    if (v16)
      objc_msgSend(v16, sel_setTexture_atIndex_, v26, 0);
    swift_unknownObjectRelease();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1B226D240;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v27 + 32) = xmmword_1B2280260;
    *(_BYTE *)(v27 + 48) = 0;
    *(_QWORD *)(v27 + 64) = v32;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_QWORD *)(v27 + 120) = 0;
    *(_BYTE *)(v27 + 128) = 14;
    swift_retain();
    sub_1B1B1FC34(a1);
    sub_1B1FE6FB8(v38, v2, v16 == 0, v27, a1, 0xD000000000000017, 0x80000001B2332C10, 0);
    sub_1B1B1FC88(a1);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    return swift_deallocClassInstance();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t destroy for ParticleSizeOverLife()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParticleSizeOverLife(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleSizeOverLife(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 initializeWithTake for ParticleSizeOverLife(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ParticleSizeOverLife(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleSizeOverLife(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleSizeOverLife(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeOverLife()
{
  return &type metadata for ParticleSizeOverLife;
}

unint64_t sub_1B1BC36AC()
{
  unint64_t result;

  result = qword_1ED4B95F0;
  if (!qword_1ED4B95F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22804DC, &type metadata for ParticleSizeOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B95F0);
  }
  return result;
}

void sub_1B1BC36F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1BC36AC();
    v7 = a3(a1, &type metadata for ParticleSizeOverLife.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B1BC374C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B1A0DBF0(255, a2, a3, a4);
    result = MEMORY[0x1B5E23E74](a2, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleSizeOverLife.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1BC37D8 + 4 * byte_1B22802A2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1BC380C + 4 * byte_1B228029D[v4]))();
}

uint64_t sub_1B1BC380C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BC3814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BC381CLL);
  return result;
}

uint64_t sub_1B1BC3828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BC3830);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1BC3834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BC383C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeOverLife.CodingKeys()
{
  return &type metadata for ParticleSizeOverLife.CodingKeys;
}

unint64_t sub_1B1BC385C()
{
  unint64_t result;

  result = qword_1EEF5C048;
  if (!qword_1EEF5C048)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22804B4, &type metadata for ParticleSizeOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C048);
  }
  return result;
}

unint64_t sub_1B1BC38A4()
{
  unint64_t result;

  result = qword_1ED4B9600;
  if (!qword_1ED4B9600)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280424, &type metadata for ParticleSizeOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9600);
  }
  return result;
}

unint64_t sub_1B1BC38EC()
{
  unint64_t result;

  result = qword_1ED4B95F8;
  if (!qword_1ED4B95F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228044C, &type metadata for ParticleSizeOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B95F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity()
{
  return &type metadata for Entity;
}

ValueMetadata *type metadata accessor for EntityInstance()
{
  return &type metadata for EntityInstance;
}

unint64_t sub_1B1BC3954()
{
  unint64_t result;

  result = qword_1EEF5C050;
  if (!qword_1EEF5C050)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280584, &type metadata for EntityInstance);
    atomic_store(result, (unint64_t *)&qword_1EEF5C050);
  }
  return result;
}

uint64_t sub_1B1BC3998@<X0>(unint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (a1 == 0xFFFFFFFF)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  swift_retain();
  sub_1B1FD6C70(a1, a2, a3);
  return swift_release();
}

uint64_t sub_1B1BC3A34(_QWORD *a1, unint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  _BYTE v12[24];
  uint64_t v13;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  if ((_DWORD)a2 == -1)
  {
    sub_1B19FA198((uint64_t)a1, (uint64_t)v11);
    if (!HIDWORD(a2))
    {
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
      goto LABEL_9;
    }
  }
  else
  {
    sub_1B19FA198((uint64_t)a1, (uint64_t)v11);
  }
  sub_1B19FA070(v11, v11[3]);
  v4 = sub_1B20680B8();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
  if (v4)
  {
    v5 = a1[3];
    v6 = a1[4];
    sub_1B19FA070(a1, v5);
    if (sub_1B20680FC(v5, v6))
    {
      if ((sub_1B1DA4E70(a2) & 1) == 0)
      {
        sub_1B19FC264((uint64_t)v12, v13);
        sub_1B2229DFC();
        swift_release();
        return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
      }
      swift_release();
    }
  }
LABEL_9:
  v7 = a1[3];
  v8 = a1[4];
  sub_1B19FA070(a1, v7);
  v9 = *(_QWORD *)(sub_1B2068140(v7, v8) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(_QWORD *)(v9 + 16))
    sub_1B1DC3CA4(a2);
  swift_bridgeObjectRelease();
  sub_1B19FC264((uint64_t)v12, v13);
  sub_1B2229DFC();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
}

uint64_t sub_1B1BC3C30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1BC4338(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1BC3C58(_QWORD *a1)
{
  unint64_t *v1;

  return sub_1B1BC3A34(a1, *v1);
}

uint64_t sub_1B1BC3C70()
{
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0x5B797469746E453CLL;
}

uint64_t sub_1B1BC3D40()
{
  return sub_1B1BC3C70();
}

void sub_1B1BC3D48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[4];

  v26[0] = a5;
  v9 = HIDWORD(a2);
  v10 = sub_1B2229124();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v26 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  v18.n128_f64[0] = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)a2 != -1 || (_DWORD)v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v21 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v21)
      {
        v22 = *(_BYTE *)(v21 + 80);
        MEMORY[0x1B5E240CC](v21 + 48);
        v21 = *(_QWORD *)(v21 + 56);
      }
      else
      {
        v22 = 0;
      }
      v28 = 0;
      swift_unknownObjectUnownedInit();
      v27 = a3;
      v28 = v21;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v29 = v22;
      sub_1B1A02530((uint64_t)&v27, (uint64_t)v30);
      sub_1B1BC3F88(v30, a2, a3, a4, v26[0]);
      sub_1B1A0256C((uint64_t)v30);
      sub_1B1E31340(1);
      swift_release();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v14, a4);
      v23 = swift_retain();
      MEMORY[0x1E0C80A78](v23, v24);
      v25 = v26[0];
      v26[-6] = a4;
      v26[-5] = v25;
      v26[-4] = (uint64_t)v20;
      LODWORD(v26[-3]) = a2;
      HIDWORD(v26[-3]) = v9;
      v26[-2] = a3;
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1BC4758);
      swift_release();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v20, a4);
    }
  }
}

_QWORD *sub_1B1BC3F88(_QWORD *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v8 = result;
  v9 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v10 = *result;
    swift_unownedRetainStrong();
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1FE1E1C(a4, a5, a2, 0);
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
    {
      v11 = result;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5) & 1) != 0)
      {
        v12 = (char *)v11 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
        v13 = type metadata accessor for ScriptingConfiguration();
        ++*(_QWORD *)&v12[*(int *)(v13 + 36)];
      }
      result = (_QWORD *)swift_unknownObjectRelease();
    }
    if (*((_BYTE *)v8 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v14[0] = a2;
      v14[1] = v9;
      v15 = v10;
      v16 = a4;
      v17 = a5;
      v18 = 13;
      sub_1B1E2DB30((uint64_t)v14);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v14);
    }
  }
  return result;
}

uint64_t sub_1B1BC40C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a3 != 0xFFFFFFFFLL)
  {
    v3 = swift_retain();
    MEMORY[0x1E0C80A78](v3, v4);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1BC4304);
    return swift_release();
  }
  return result;
}

BOOL sub_1B1BC417C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t sub_1B1BC41AC()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BC4214()
{
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A078();
}

uint64_t sub_1B1BC4258()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

unint64_t sub_1B1BC42C0()
{
  unint64_t result;

  result = qword_1ED4B9F58;
  if (!qword_1ED4B9F58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228064C, &type metadata for Entity);
    atomic_store(result, (unint64_t *)&qword_1ED4B9F58);
  }
  return result;
}

uint64_t sub_1B1BC4304()
{
  uint64_t v0;

  return sub_1B1E2D3C0(*(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1B1BC4338(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v3 = a1[3];
  v4 = a1[4];
  sub_1B19FA070(a1, v3);
  if (sub_1B2067B64(2000, v3, v4))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      sub_1B19FC264((uint64_t)&v26, v28);
      v5 = sub_1B2229AB4();
      sub_1B19FC264((uint64_t)&v26, v28);
      v6 = sub_1B2229AB4();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v26);
      goto LABEL_10;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v7 = a1[3];
  v8 = a1[4];
  sub_1B19FA070(a1, v7);
  LOBYTE(v7) = sub_1B2067B64(2008, v7, v8);
  sub_1B19FA070(&v26, v28);
  if ((v7 & 1) != 0)
  {
    v9 = sub_1B2229D90();
    v5 = v9;
    v6 = HIDWORD(v9);
  }
  else
  {
    v5 = sub_1B2229D78();
    v6 = 0xFFFFFFFFLL;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v26);
LABEL_10:
  if (v5 == -1)
  {
LABEL_21:
    v19 = 0;
    v17 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1B19FA070(a1, v11);
  v13 = *(_QWORD *)(sub_1B20680A8(v11, v12) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v13 + 16) || (v14 = sub_1B1DC3CA4(v5 | (unint64_t)(v6 << 32)), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v20 = a1[3];
    v21 = a1[4];
    sub_1B19FA070(a1, v20);
    v22 = *(_QWORD *)(sub_1B20680A8(v20, v21) + 56);
    swift_release();
    if (qword_1ED4BF430 != -1)
      swift_once();
    v26 = 0;
    v27 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    if (v22)
    {
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v23 = v26;
    v24 = v27;
    v25 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v26 = 0;
    swift_retain();
    sub_1B1F1AD70(v25, &v26, v23, v24);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_21;
  }
  v16 = (unsigned int *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  v17 = *v16;
  v18 = v16[1];
  swift_bridgeObjectRelease();
  v19 = v18 << 32;
LABEL_22:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v19 | v17;
}

uint64_t sub_1B1BC4758()
{
  uint64_t v0;

  return sub_1B1E2D124(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1B1BC478C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    MEMORY[0x1B5E23F88](v1, -1, -1);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameAllocator()
{
  return objc_opt_self();
}

uint64_t sub_1B1BC47E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int128 v15;

  v4 = (a2 + v2[4] - 1) & -a2;
  v5 = v4 + a1;
  v6 = v2[2];
  if (v6)
  {
    if (v2[3] - v6 >= v5)
    {
LABEL_3:
      v2[4] = v5;
      return v6 + v4;
    }
  }
  else if (v5 < 1)
  {
    goto LABEL_3;
  }
  v15 = *((_OWORD *)v2 + 1);
  v8 = (char *)v2[5];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[5] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_1B1C62B70(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v2[5] = v8;
  }
  v11 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  v12 = v15;
  if (v11 >= v10 >> 1)
  {
    v14 = sub_1B1C62B70(v10 > 1, v11 + 1, 1, v8);
    v12 = v15;
    v8 = v14;
  }
  *((_QWORD *)v8 + 2) = v11 + 1;
  *(_OWORD *)&v8[16 * v11 + 32] = v12;
  v2[5] = v8;
  if (v5)
    v13 = 1 << -(char)__clz(v5 - 1);
  else
    v13 = 1;
  result = swift_slowAlloc();
  v2[2] = result;
  v2[3] = result + v13;
  v2[4] = a1;
  return result;
}

ValueMetadata *type metadata accessor for HeapAllocator()
{
  return &type metadata for HeapAllocator;
}

ValueMetadata *type metadata accessor for StackAllocator()
{
  return &type metadata for StackAllocator;
}

uint64_t sub_1B1BC4944(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  sub_1B2228848();
  return sub_1B2228950();
}

uint64_t sub_1B1BC49BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a2 + 16);
  if (v22 >= v3)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, v4, 0);
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = 0;
    v13 = 0;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = 0;
  v23 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    if ((v5 & 1) != 0 || v6 == v3)
    {
      v25 = 1;
      v8 = v6;
    }
    else
    {
      v8 = v6 + 1;
      if (v23 == v22)
      {
        v7 = 0;
        v25 = 1;
        v23 = v22;
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 32 + 8 * v6);
        ++v23;
        sub_1B1B632F0(v7);
        swift_bridgeObjectRetain();
        v25 = 0;
      }
    }
    sub_1B1D76C18(v7);
    if ((v9 & 1) == 0)
      sub_1B2228890();
    sub_1B201E8B0(v7);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1B28D2C(v7);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v27 + 16);
    v10 = *(_QWORD *)(v27 + 24);
    if (v11 >= v10 >> 1)
      sub_1B2029FFC(v10 > 1, v11 + 1, 1);
    *(_QWORD *)(v27 + 16) = v11 + 1;
    v12 = v27 + 16 * v11;
    *(_QWORD *)(v12 + 32) = 8315;
    *(_QWORD *)(v12 + 40) = 0xE200000000000000;
    --v4;
    v6 = v8;
    v5 = v25;
  }
  while (v4);
  if ((v25 & 1) == 0)
  {
    v13 = v23;
LABEL_21:
    if (v6 != v3)
    {
      v24 = a1 + 32;
      v15 = 16 * v13;
      v16 = v22 - v13;
      do
      {
        if (!v16)
          break;
        v26 = v6;
        v17 = *(_QWORD *)(v24 + 8 * v6);
        sub_1B1B632F0(v17);
        swift_bridgeObjectRetain();
        sub_1B1D76C18(v17);
        if ((v18 & 1) == 0)
          sub_1B2228890();
        sub_1B201E8B0(v17);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1B28D2C(v17);
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v27 + 16);
        v19 = *(_QWORD *)(v27 + 24);
        if (v20 >= v19 >> 1)
          sub_1B2029FFC(v19 > 1, v20 + 1, 1);
        v6 = v26 + 1;
        *(_QWORD *)(v27 + 16) = v20 + 1;
        v21 = v27 + 16 * v20;
        *(_QWORD *)(v21 + 32) = 8315;
        *(_QWORD *)(v21 + 40) = 0xE200000000000000;
        v15 += 16;
        --v16;
      }
      while (v3 != v26 + 1);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v27;
}

_BYTE *sub_1B1BC4E08@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B1BC4E14(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_1B1BC4E1C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_1B1BC4E30@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_1B1BC4E44@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B1BC4E58(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_1B1BC4E88@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_1B1BC4EB4@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_1B1BC4ED8(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_1B1BC4EEC(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_1B1BC4F00(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_1B1BC4F14@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B1BC4F28(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B1BC4F3C(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1B1BC4F50(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

_BYTE *sub_1B1BC4F64(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B1BC4F78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

_BYTE *sub_1B1BC4FCC@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1B1BC4FEC()
{
  return swift_release();
}

uint64_t sub_1B1BC4FF4()
{
  return sub_1B1BC505C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B1BC5000()
{
  swift_release();
  return swift_release();
}

uint64_t sub_1B1BC501C()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BC5048()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BC5050()
{
  return sub_1B1BC505C((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B1BC505C(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BC5084()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B1BC50A8()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BC50DC()
{
  uint64_t v0;

  v0 = sub_1B2227DA4();
  sub_1B1BCDB6C(v0, qword_1EEF5C058);
  sub_1B1B40EC8(v0, (uint64_t)qword_1EEF5C058);
  sub_1B2227D98();
  return sub_1B2227D74();
}

uint64_t sub_1B1BC5144(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  sub_1B1BC4944(a1, a2);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    sub_1B2228614();
    swift_bridgeObjectRelease();
  }
  v8 = *(_QWORD *)(v3 + 64);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1B1DC3B00(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v3 + 64) = 0x8000000000000000;
    sub_1B1B86E48(1, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 64) = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = a1;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return v16;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12 = swift_isUniquelyReferenced_nonNull_native();
  v15 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0x8000000000000000;
  sub_1B1B86E48(v11 + 1, a1, a2, v12);
  *(_QWORD *)(v3 + 64) = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = a1;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1B1BC5370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v17;

  swift_bridgeObjectRetain();
  for (i = 9; i != -1; --i)
  {
    swift_bridgeObjectRetain();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1A06460();
    v6 = sub_1B2229274();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
    {
      sub_1B1BC5144(1886217588, 0xE400000000000000);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      a1 = sub_1B222922C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v7 = *(_QWORD *)(a4 + 16);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = a4 + 16 * v7 + 24;
    do
    {
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      a1 = sub_1B222922C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v8;
      v9 -= 16;
    }
    while (v8 != -1);
    v10 = 16 * v7 + 24;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = a4 + v10;
    v13 = (_QWORD *)(a3 + v10);
    v17 = v11;
    do
    {
      if (v7 <= v11 && *v13)
      {
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        a1 = sub_1B222922C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = v17;
      }
      v12 -= 16;
      v13 -= 2;
      --v7;
    }
    while (v7);
  }
  return a1;
}

uint64_t sub_1B1BC5708(unint64_t a1, unsigned __int8 a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;

  v8 = a4 & 1;
  v9 = *(_QWORD *)(v4 + 48);
  if (!*(_QWORD *)(v9 + 16))
LABEL_5:
    __asm { BR              X10 }
  sub_1B1B1DD24(a1);
  swift_bridgeObjectRetain();
  v10 = sub_1B1DC3E04(a1, a2, a3, v8);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1B1A05610(a1);
    goto LABEL_5;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B1A05610(a1);
  return v12;
}

void sub_1B1BC5D7C()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1BC5DD0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  uint64_t v8;
  int64_t v11;
  uint64_t v13;
  int64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;

  v7 = a7;
  v8 = a6;
  v11 = *(_QWORD *)(a4 + 16);
  v45 = v11;
  if ((a5 & 1) != 0)
  {
    if (!v11)
    {
      swift_bridgeObjectRetain();
      sub_1B1BC5144(v8, v7);
      goto LABEL_41;
    }
    swift_bridgeObjectRetain();
    v13 = 0;
    v14 = v11 - 1;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1A06460();
      v15 = sub_1B2229274();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        break;
      v16 = v14 == v13++;
    }
    while (!v16);
    v17 = a4 + 32;
    swift_bridgeObjectRetain();
    v18 = 0;
    v19 = 0;
    do
    {
      while (1)
      {
        v20 = v18 + 1;
        sub_1B1D76C18(*(_QWORD *)(v17 + 8 * v18));
        if ((v21 & 1) == 0)
          break;
        ++v18;
        if (v11 == v20)
          goto LABEL_13;
      }
      ++v19;
      v16 = v14 == v18++;
    }
    while (!v16);
LABEL_13:
    swift_bridgeObjectRelease();
    if (v15 & 1 | (v19 != 1))
      goto LABEL_21;
    v22 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v22 = a1 & 0xFFFFFFFFFFFFLL;
    if (!v22)
    {
LABEL_21:
      v7 = a7;
      v8 = a6;
    }
    else
    {
      v23 = *(_QWORD *)(sub_1B2229214() + 16);
      swift_bridgeObjectRelease();
      v8 = a6;
      if (v23 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease_n();
        a1 = 0x307225206F747561;
      }
      v7 = a7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v44 = sub_1B1BC5144(v8, v7);
  v25 = v24;
  if (v11)
  {
    v47 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v11, 0);
    v26 = 0;
    v27 = v47;
    do
    {
      if (v11 == 1)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
      v29 = *(_QWORD *)(v47 + 16);
      v28 = *(_QWORD *)(v47 + 24);
      if (v29 >= v28 >> 1)
        sub_1B2029FFC(v28 > 1, v29 + 1, 1);
      ++v26;
      *(_QWORD *)(v47 + 16) = v29 + 1;
      v30 = v47 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v44;
      *(_QWORD *)(v30 + 40) = v25;
      v11 = v45;
    }
    while (v45 != v26);
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v47 + 16);
    if (v31)
      goto LABEL_31;
    return a1;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x1E0DEE9D8];
  v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v31)
    return a1;
LABEL_31:
  swift_bridgeObjectRetain();
  v32 = 0;
  v33 = v27 + 40;
  do
  {
    v34 = v32 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v35 = v31;
    sub_1B1A06460();
    v36 = sub_1B222922C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v33 += 16;
    v32 = v34;
  }
  while (v31 != v34);
  v46 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v37 = 0;
  v38 = 0;
  v39 = a3;
  do
  {
    if (v39 && v38 < *(_QWORD *)(v39 + 16))
    {
      if (*(_QWORD *)(v39 + v37 + 40))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v46 = sub_1B222922C();
        v31 = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v39 = a3;
      }
    }
    ++v38;
    v37 += 16;
  }
  while (v31 != v38);
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t sub_1B1BC63B8()
{
  return sub_1B214F2E8(0xD00000000000001ELL, 0x80000001B2333010, (uint64_t (*)(uint64_t))sub_1B1BCDBD0);
}

uint64_t sub_1B1BC6418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  _QWORD *v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  unint64_t v43;
  uint64_t result;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B1B42948();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  v7 = sub_1B2228248();
  v8 = (uint64x2_t)vdupq_n_s64(v7);
  v9.i32[0] = v7;
  v9.i32[1] = v7 >> 8;
  v10 = MEMORY[0x1E0DEDC60];
  v11 = MEMORY[0x1E0DEDCD8];
  *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEDC60];
  *(_QWORD *)(v6 + 64) = v11;
  *(int8x8_t *)(v6 + 32) = vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v9, (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B2280AF0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B2280B00), (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B2280B10))));
  sub_1B2228248();
  v13 = (uint64x2_t)vdupq_n_s64(v12);
  v14.i32[0] = v12;
  v14.i32[1] = v12 >> 8;
  *(_QWORD *)(v6 + 96) = v10;
  *(_QWORD *)(v6 + 104) = v11;
  *(int8x8_t *)(v6 + 72) = vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v14, (int64x2_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B2280AF0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B2280B00), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B2280B10))));
  sub_1B222877C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v15 + 32) = 0xD000000000000018;
  *(_QWORD *)(v15 + 40) = 0x80000001B2333030;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  v16 = sub_1B2229A0C();
  v18 = v17;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v19 + 32) = v16;
  *(_QWORD *)(v19 + 40) = v18;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  v20 = *(_QWORD *)(a3 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = sub_1B214F708(v20, a2);
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v24 + 32) = v21;
  *(_QWORD *)(v24 + 40) = v23;
  *(_QWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 56) = 0;
  v25 = sub_1B2229A0C();
  v27 = v26;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v28 + 32) = v25;
  *(_QWORD *)(v28 + 40) = v27;
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = *(_QWORD *)(a3 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = sub_1B214F708(v29, a4);
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v33 + 32) = v30;
  *(_QWORD *)(v33 + 40) = v32;
  sub_1B1B63150();
  *(_QWORD *)(v33 + 48) = 0;
  *(_QWORD *)(v33 + 56) = 0;
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = qword_1E6375798;
  *(_OWORD *)(inited + 16) = xmmword_1B2280B20;
  *(_QWORD *)(inited + 40) = v15;
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v24;
  *(_QWORD *)(inited + 64) = v28;
  *(_QWORD *)(inited + 72) = v33;
  swift_bridgeObjectRetain();
  v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  for (i = 32; i != 80; i += 8)
  {
    v37 = *(_QWORD *)(inited + i);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = v35[2];
    v40 = v39 + v38;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v40 <= v35[3] >> 1)
    {
      if (!*(_QWORD *)(v37 + 16))
        goto LABEL_2;
    }
    else
    {
      if (v39 <= v40)
        v42 = v39 + v38;
      else
        v42 = v39;
      v35 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v42, 1, v35);
      if (!*(_QWORD *)(v37 + 16))
        goto LABEL_2;
    }
    v43 = (unint64_t)&v35[4 * v35[2] + 4];
    if (v37 + 32 < v43 + 32 * v38 && v43 < v37 + 32 + 32 * v38)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v38)
      v35[2] += v38;
LABEL_2:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return (uint64_t)v35;
}

void sub_1B1BC692C(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD *__return_ptr);
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int64_t v122;
  uint64_t v123;
  char v124;
  int64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int64_t v162;
  _QWORD v163[2];
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD v171[6];
  uint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v6 = sub_1B222826C();
  MEMORY[0x1E0C80A78](v6, v7);
  v11 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (*(_QWORD *)(a2 + 16))
    goto LABEL_65;
  v143 = v11;
  v144 = v9;
  v145 = v8;
  v154 = a3;
  v23 = swift_conformsToProtocol2();
  if (v23)
    v24 = v23;
  else
    v24 = 0;
  if (v23)
    v25 = a1;
  else
    v25 = 0;
  v26 = *v25;
  v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  swift_retain();
  v27(v26, v24);
  v28 = *(uint64_t (**)(void))(v24 + 24);
  v152 = *(unsigned __int8 *)(v161 + 32);
  v155 = v26;
  v156 = v25;
  v157 = v24;
  v29 = v28();
  v31 = v30;
  v158 = a1;
  if (*(_QWORD *)(a1[2] + 16) >= 2uLL
    && (type metadata accessor for PartialComposeNode(0), (v32 = swift_dynamicCastClass()) != 0))
  {
    v33 = (_QWORD *)v32;
    v34 = swift_retain();
    v36 = v158;
  }
  else
  {
    v36 = v158;
    v34 = swift_retain();
    v33 = v36;
  }
  MEMORY[0x1E0C80A78](v34, v35);
  v153 = v33;
  v37 = swift_bridgeObjectRetain();
  v38 = sub_1B1BCCE40(v37, sub_1B1BCDABC);
  v39 = swift_bridgeObjectRelease();
  v40 = *(void (**)(_QWORD *__return_ptr))(*v36 + 152);
  ((void (*)(_QWORD *__return_ptr, uint64_t))v40)(v171, v39);
  v41 = v171[3];
  v187 = v171[0];
  swift_bridgeObjectRetain();
  sub_1B1B28C6C((uint64_t)&v187);
  v186 = v171[1];
  sub_1B1B28C6C((uint64_t)&v186);
  v185 = v171[2];
  sub_1B1B28C6C((uint64_t)&v185);
  swift_bridgeObjectRelease();
  v184 = v171[4];
  sub_1B1B28C6C((uint64_t)&v184);
  v183 = v171[5];
  sub_1B1B28C6C((uint64_t)&v183);
  v151 = v38;
  v42 = sub_1B1BC5370(v29, v31, v41, v38);
  v44 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v172 = v42;
  v173 = v44;
  v169 = 0x616E5F65646F6E25;
  v170 = 0xEA0000000000656DLL;
  v159 = sub_1B1A06460();
  v45 = sub_1B2229274();
  v148 = v44;
  v142 = v42;
  if ((v45 & 1) != 0)
  {
    type metadata accessor for CastNode(0);
    v46 = swift_dynamicCastClass();
    if (v46)
    {
      v47 = v46;
      v48 = *(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
      swift_retain();
      sub_1B1B632F0(v48);
      v49 = sub_1B1D763B0(v48);
      v51 = v50;
      sub_1B1B28D2C(v48);
      v172 = v49;
      v173 = v51;
      sub_1B2228890();
      v52 = *(_QWORD *)(v47 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
      sub_1B1B632F0(v52);
      sub_1B1D763B0(v52);
      sub_1B1B28D2C(v52);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v53 = sub_1B1BCC4D4();
      v55 = v54;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      (*(void (**)(void))(*v36 + 136))();
      v53 = sub_1B1BCC4D4();
      v55 = v56;
      swift_bridgeObjectRelease();
    }
    v57 = sub_1B1BC5144(v53, v55);
    v59 = v58;
    swift_bridgeObjectRelease();
    v172 = v42;
    v173 = v44;
    v169 = 0x616E5F65646F6E25;
    v170 = 0xEA0000000000656DLL;
    v149 = v59;
    v150 = v57;
    v166 = v57;
    v167 = v59;
    v160 = sub_1B222922C();
    v162 = v60;
  }
  else
  {
    swift_bridgeObjectRetain();
    v149 = 0;
    v150 = 0;
    v160 = v42;
    v162 = v44;
  }
  type metadata accessor for FlowControlNode(0);
  v61 = swift_dynamicCastClass();
  v40(&v172);
  v62 = v176;
  v182 = v172;
  swift_bridgeObjectRetain();
  sub_1B1B28C6C((uint64_t)&v182);
  v181 = v173;
  sub_1B1B28C6C((uint64_t)&v181);
  v180 = v174;
  sub_1B1B28C6C((uint64_t)&v180);
  v179 = v175;
  sub_1B1B28C6C((uint64_t)&v179);
  v63 = v62;
  swift_bridgeObjectRelease();
  v178 = v177;
  sub_1B1B28C6C((uint64_t)&v178);
  v64 = v36[4];
  type metadata accessor for CastNode(0);
  v65 = swift_dynamicCastClass();
  if (v65)
  {
    v66 = v65;
    v67 = *(_QWORD *)(v65 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
    swift_retain();
    v68 = v64;
    swift_bridgeObjectRetain();
    sub_1B1B632F0(v67);
    v69 = sub_1B1D763B0(v67);
    v71 = v70;
    sub_1B1B28D2C(v67);
    v169 = v69;
    v170 = v71;
    sub_1B2228890();
    v72 = *(_QWORD *)(v66 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
    sub_1B1B632F0(v72);
    sub_1B1D763B0(v72);
    sub_1B1B28D2C(v72);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v73 = sub_1B1BCC4D4();
    v75 = v74;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v76 = *(void (**)(uint64_t))(*v36 + 136);
    v68 = v64;
    v77 = swift_bridgeObjectRetain();
    v76(v77);
    v73 = sub_1B1BCC4D4();
    v75 = v78;
    swift_bridgeObjectRelease();
  }
  v79 = v160;
  v80 = v161;
  v160 = v61;
  v81 = sub_1B1BC5DD0(v79, v162, v63, v68, v61 == 0, v73, v75);
  v83 = v82;
  v85 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v169 = v81;
  v170 = v83;
  v146 = v85;
  v168 = v85;
  if (!v160)
  {
    v100 = HIBYTE(v83) & 0xF;
    if ((v83 & 0x2000000000000000) == 0)
      v100 = v81 & 0xFFFFFFFFFFFFLL;
    if (v100)
    {
      v166 = v81;
      v167 = v83;
      v164 = 59;
      v165 = 0xE100000000000000;
      if ((sub_1B2229274() & 1) == 0)
        sub_1B2228890();
    }
  }
  v160 = (*(uint64_t (**)(uint64_t))(v157 + 32))(v155);
  if ((__objc2_class *)*v158 == _TtC3VFX17SubGraphEnterNode)
  {
    v87 = v158[3];
    v86 = v158[4];
    swift_retain();
    sub_1B1BCCD2C(v87);
    swift_bridgeObjectRelease();
    v88 = *(_QWORD *)(v86 + 16);
    sub_1B2229E44();
    swift_unknownObjectRetain_n();
    v89 = swift_dynamicCastClass();
    if (!v89)
    {
      swift_bridgeObjectRelease();
      v89 = MEMORY[0x1E0DEE9D8];
    }
    v90 = *(_QWORD *)(v89 + 16);
    swift_release();
    if (v90 == v88 - (v88 != 0))
    {
      v91 = swift_dynamicCastClass();
      if (!v91)
      {
        swift_bridgeObjectRelease();
        v91 = MEMORY[0x1E0DEE9D8];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v91 = sub_1B1DC90DC(v86, v86 + 32, v88 != 0, (2 * v88) | 1);
    }
    swift_bridgeObjectRelease();
    v92 = *(_QWORD *)(v91 + 16);
    swift_release();
    if (v92)
    {
      v164 = MEMORY[0x1E0DEE9D8];
      sub_1B2029FFC(0, v92, 0);
      v93 = 0;
      v94 = v164;
      do
      {
        v166 = 0x6E69627573;
        v167 = 0xE500000000000000;
        v163[0] = v93;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v95 = v166;
        v96 = v167;
        v164 = v94;
        v98 = *(_QWORD *)(v94 + 16);
        v97 = *(_QWORD *)(v94 + 24);
        if (v98 >= v97 >> 1)
        {
          sub_1B2029FFC(v97 > 1, v98 + 1, 1);
          v94 = v164;
        }
        ++v93;
        *(_QWORD *)(v94 + 16) = v98 + 1;
        v99 = v94 + 16 * v98;
        *(_QWORD *)(v99 + 32) = v95;
        *(_QWORD *)(v99 + 40) = v96;
      }
      while (v92 != v93);
      v80 = v161;
    }
    v166 = (uint64_t)&unk_1E63757D8;
    v101 = swift_bridgeObjectRetain();
    sub_1B19F48F0(v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v146 = v166;
    v168 = v166;
  }
  v103 = v169;
  v102 = v170;
  v104 = *(_QWORD *)(v160 + 16);
  if (v104)
  {
    swift_bridgeObjectRetain_n();
    v105 = 32 * v104;
    v147 = v102;
    v106 = v102;
    v162 = v104;
    do
    {
      v107 = v104 - 1;
      v166 = v103;
      v167 = v106;
      v164 = 0x6D6172617025;
      v165 = 0xE600000000000000;
      v163[0] = v104 - 1;
      swift_bridgeObjectRetain();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v108 = sub_1B2229274();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v108 & 1) != 0 && v104 <= v162)
      {
        v109 = *(_QWORD *)(v160 + v105);
        v110 = *(_QWORD *)(v160 + v105 + 16);
        v111 = *(_BYTE *)(v160 + v105 + 24);
        v112 = *(_BYTE *)(v160 + v105 + 8);
        sub_1B1B1DD24(v109);
        v113 = sub_1B1BC5708(v109, v112, v110, v111);
        v115 = v114;
        v166 = v103;
        v167 = v106;
        v164 = 0x6D6172617025;
        v165 = 0xE600000000000000;
        v163[0] = v107;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v163[0] = v113;
        v163[1] = v115;
        v103 = sub_1B222922C();
        v117 = v116;
        sub_1B1A05610(v109);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v80 = v161;
        swift_bridgeObjectRelease();
        v106 = v117;
      }
      v105 -= 32;
      v104 = v107;
    }
    while (v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v106 = v102;
  }
  swift_bridgeObjectRelease();
  v166 = v103;
  v167 = v106;
  v164 = 0x5F74706972637325;
  v165 = 0xEF747865746E6F63;
  swift_bridgeObjectRetain();
  v118 = sub_1B2229274();
  if ((v118 & 1) != 0)
  {
    v166 = v103;
    v167 = v106;
    v164 = 0x5F74706972637325;
    v165 = 0xEF747865746E6F63;
    strcpy((char *)v163, "script_context");
    HIBYTE(v163[1]) = -18;
    v103 = sub_1B222922C();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v119 = sub_1B1BCD354(v103);
  v121 = v120;
  v161 = v123;
  v162 = v122;
  swift_bridgeObjectRelease_n();
  v169 = v119;
  v170 = v121;
  v124 = (*(uint64_t (**)(uint64_t))(v157 + 16))(v155);
  v125 = v148;
  if ((v124 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(v80 + 16) + 16) || sub_1B2228830() > 9)
  {
    swift_bridgeObjectRelease();
    v127 = v158;
    if (v152)
    {
      swift_bridgeObjectRelease();
      v128 = 0;
      goto LABEL_61;
    }
    v128 = 0;
  }
  else
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v126 = swift_allocObject();
    *(_OWORD *)(v126 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v126 + 32) = v142;
    *(_QWORD *)(v126 + 40) = v125;
    swift_bridgeObjectRelease();
    v168 = v126;
    v127 = v158;
    if (v152)
    {
      swift_bridgeObjectRelease();
      v128 = 1;
      goto LABEL_61;
    }
    v128 = 1;
  }
  v129 = *(_QWORD *)(v80 + 16);
  v131 = (uint64_t)v143;
  v130 = v144;
  v132 = v145;
  (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v143, (uint64_t)v127 + OBJC_IVAR____TtC3VFX4Node_authoringID, v145);
  swift_bridgeObjectRetain();
  v133 = sub_1B1B0F8E0(v131, v129);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v132);
  if ((v133 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    v134 = sub_1B214F814(&v169);
    v136 = v135;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v169 = v134;
    v170 = v136;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_61:
  v137 = sub_1B1BC7C5C(v127);
  v139 = v138;
  swift_release();
  swift_release();
  v13 = v168;
  v140 = v170;
  if ((v128 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = v169;
    swift_bridgeObjectRetain();
    v15 = v140;
  }
  v18 = v118 & 1;
  swift_retain();
  swift_bridgeObjectRelease();
  v12 = v127;
  a3 = v154;
  v20 = v149;
  v19 = v150;
  v17 = v161;
  v16 = v162;
  v21 = v137;
  v22 = v139;
LABEL_65:
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v15;
  a3[4] = v16;
  a3[5] = v17;
  a3[6] = v18;
  a3[7] = v19;
  a3[8] = v20;
  a3[9] = v21;
  a3[10] = v22;
}

uint64_t sub_1B1BC77D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  _QWORD v17[11];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a4 + 152))(v16);
  v9 = v16[0];
  v22 = v16[1];
  v23 = v16[0];
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = v16[2];
  sub_1B1B28C6C((uint64_t)&v21);
  v20 = v16[3];
  sub_1B1B28C6C((uint64_t)&v20);
  v19 = v16[4];
  sub_1B1B28C6C((uint64_t)&v19);
  v18 = v16[5];
  sub_1B1B28C6C((uint64_t)&v18);
  v10 = *(_QWORD *)(v9 + 8 * a1 + 32);
  sub_1B19F8CD0(v10);
  sub_1B1B28C6C((uint64_t)&v23);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B1D3590C(v10);
  v12 = v11;
  swift_release();
  sub_1B19F8D00(v10);
  if ((v12 & 1) != 0)
    return 0x3E776F6C663CLL;
  a5(v17, a2);
  v14 = v17[1];
  swift_bridgeObjectRetain();
  sub_1B1BCCDD4(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BCCCA8);
  v13 = *(_QWORD *)(v14 + 16 * a3 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1B1BC7944(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v22;

  v2 = *a1;
  v1 = a1[1];
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v3 + 32) = v2;
  v4 = v3 + 32;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1B214F2E8(0xD00000000000001ELL, 0x80000001B2333010, (uint64_t (*)(uint64_t))sub_1B1BCDBD0);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v7;
  sub_1B1B63150();
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v8;
  v10 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1B1C65D70(0, v10, 1, MEMORY[0x1E0DEE9D8]);
  v12 = v11;
  if (*(_QWORD *)(v3 + 16))
  {
    v13 = (unint64_t)&v11[4 * v11[2] + 4];
    if (v4 < v13 + 32 * v10 && v13 < v4 + 32 * v10)
      goto LABEL_24;
    swift_arrayInitWithCopy();
    if (v10)
      v12[2] += v10;
  }
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(inited + 40);
  v16 = *(_QWORD *)(v15 + 16);
  v17 = v12[2];
  v18 = v12[3];
  swift_bridgeObjectRetain();
  if (v17 + v16 > (uint64_t)(v18 >> 1))
  {
    if (v17 <= v17 + v16)
      v22 = v17 + v16;
    else
      v22 = v17;
    v12 = sub_1B1C65D70(1, v22, 1, v12);
    if (!*(_QWORD *)(v15 + 16))
      goto LABEL_18;
  }
  else if (!v16)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v12;
  }
  v19 = (unint64_t)&v12[4 * v12[2] + 4];
  if (v15 + 32 >= v19 + 32 * v16 || v19 >= v15 + 32 + 32 * v16)
  {
    swift_arrayInitWithCopy();
    if (v16)
      v12[2] += v16;
    goto LABEL_18;
  }
LABEL_24:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1BC7C5C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = (*(uint64_t (**)(void))(*a1 + 136))();
  v3 = a1[3];
  v4 = a1[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1B1BCEB50(v3, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B1BC7D4C()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  if (qword_1EEF572D8 != -1)
    swift_once();
  v1 = byte_1EEFD53C0;
  v2 = qword_1EEFD53C8;
  v3 = byte_1EEFD53D0;
  v4 = MEMORY[0x1E0DEE9D8];
  v17 = sub_1B1C6E974(MEMORY[0x1E0DEE9D8]);
  v18 = v5;
  sub_1B1C5CE3C((uint64_t)sub_1B1BCCE28, v0, v1, v2, v3, v4, (uint64_t)&v17);
  v6 = v17;
  swift_bridgeObjectRelease();
  v7 = sub_1B1F4C910();
  if (v7 >> 62)
    v8 = sub_1B22296AC();
  else
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  v9 = sub_1B1F4C910();
  v10 = v9;
  if (v8 != 1)
  {
    swift_bridgeObjectRetain();
    v15 = sub_1B1BCC05C(v10, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    type metadata accessor for GraphCodeGen.CFGMultiProcedure();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v15;
    return v14;
  }
  if (v9 >> 62)
  {
    if (sub_1B22296AC())
      goto LABEL_8;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_18;
LABEL_8:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = MEMORY[0x1B5E21018](0, v10);
  }
  else
  {
    v11 = *(_QWORD *)(v10 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + 16) && (v12 = sub_1B1DC3AC8(v11), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
    swift_retain();
    swift_bridgeObjectRelease();
    if (v14)
    {
      swift_release();
      return v14;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v17 = 0;
  v18 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BCE95C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
LABEL_22:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BC805C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  _QWORD *v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(a1 + 24);
  swift_retain();
  v5 = sub_1B1BCD60C(v3, v4);
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_1B1BC80B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35[2];
  uint64_t v36;

  v1 = sub_1B1BC7D4C();
  v26 = v1;
  v36 = MEMORY[0x1E0DEE9D8];
  if (qword_1EEF572D0 != -1)
    v1 = swift_once();
  v3 = byte_1EEFD53A8;
  v4 = qword_1EEFD53B0;
  v5 = byte_1EEFD53B8;
  MEMORY[0x1E0C80A78](v1, v2);
  v27 = v0;
  v25[2] = v0;
  v25[3] = &v36;
  v6 = MEMORY[0x1E0DEE9D8];
  v35[0] = sub_1B1C6EB98(MEMORY[0x1E0DEE9D8]);
  v35[1] = v7;
  sub_1B1C5D1D8((uint64_t)sub_1B1BCCD58, (uint64_t)v25, v3, v4, v5, v6, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v36;
  v9 = *(_QWORD *)(v36 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v25[4] = v8;
    v10 = (__int128 *)(v8 + 56);
    v11 = v27;
    do
    {
      v13 = *(__int128 *)((char *)v10 - 24);
      if (**((__objc2_class ***)v10 - 3) == _TtC3VFX12SubGraphNode)
      {
        v30 = *((_QWORD *)v10 - 1);
        v14 = *v10;
        v15 = *((_QWORD *)v10 + 2);
        v29 = *((unsigned __int8 *)v10 + 24);
        v28 = *((_QWORD *)v10 + 4);
        v16 = *((_QWORD *)v10 + 7);
        v17 = *(_QWORD **)(v11 + 40);
        v31 = *(__int128 *)((char *)v10 + 40);
        v32 = v14;
        v18 = v14;
        v34 = v13;
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v33 = v18;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 40) = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v17 = sub_1B1C63A50(0, v17[2] + 1, 1, v17);
          *(_QWORD *)(v11 + 40) = v17;
        }
        v21 = v17[2];
        v20 = v17[3];
        v22 = v34;
        if (v21 >= v20 >> 1)
        {
          v23 = sub_1B1C63A50(v20 > 1, v21 + 1, 1, v17);
          v22 = v34;
          v17 = v23;
          *(_QWORD *)(v27 + 40) = v23;
        }
        v17[2] = v21 + 1;
        v12 = &v17[11 * v21];
        *((_OWORD *)v12 + 2) = v22;
        v12[6] = v30;
        *(_OWORD *)(v12 + 7) = v32;
        v12[9] = v15;
        *((_BYTE *)v12 + 80) = v29;
        v12[11] = v28;
        *((_OWORD *)v12 + 6) = v31;
        v12[14] = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v11 = v27;
      }
      v10 = (__int128 *)((char *)v10 + 88);
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  return v26;
}

uint64_t sub_1B1BC83C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[5];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v17 = *(_QWORD **)(a1 + 8);
  sub_1B1BC692C(v17, *(_QWORD *)(a1 + 16), &v20);
  sub_1B1BCCD78((uint64_t)&v20, (uint64_t)v21);
  if (*(_QWORD *)&v21[0])
  {
    v25 = v21[2];
    v26 = v21[3];
    v27 = v21[4];
    v28 = v22;
    v23 = v21[0];
    v24 = v21[1];
    v6 = *a3;
    sub_1B1BCCDD4(&v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B9D8BC);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = sub_1B1C63A50(0, v6[2] + 1, 1, v6);
      *a3 = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = sub_1B1C63A50(v8 > 1, v9 + 1, 1, v6);
      *a3 = v6;
    }
    v6[2] = v9 + 1;
    v10 = &v6[11 * v9];
    v11 = v24;
    *((_OWORD *)v10 + 2) = v23;
    *((_OWORD *)v10 + 3) = v11;
    v12 = v25;
    v13 = v26;
    v14 = v27;
    v10[14] = v28;
    *((_OWORD *)v10 + 5) = v13;
    *((_OWORD *)v10 + 6) = v14;
    *((_OWORD *)v10 + 4) = v12;
    sub_1B1BCCDD4(&v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BCCCA8);
  }
  sub_1B1BCCDD4(&v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B9D8BC);
  v15 = swift_isUniquelyReferenced_nonNull_native();
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0x8000000000000000;
  sub_1B1B84D44((uint64_t)&v20, (uint64_t)v17, v15);
  *(_QWORD *)(a2 + 56) = v19;
  swift_bridgeObjectRelease();
  return sub_1B1BCCD78((uint64_t)&v20, a4);
}

double sub_1B1BC85D0@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[5];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  a2(v10, &v12);
  v4 = v11;
  result = *(double *)v10;
  v6 = v10[1];
  v7 = v10[2];
  v8 = v10[3];
  v9 = v10[4];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 64) = v9;
  *(_QWORD *)(a3 + 80) = v4;
  return result;
}

uint64_t sub_1B1BC8628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t inited;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t result;
  int v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = &unk_1B226D000;
  if (!v2)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v33 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v33)
      goto LABEL_37;
    goto LABEL_56;
  }
  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = swift_bridgeObjectRetain();
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = (uint64_t *)(v5 + 72);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v51 = v4;
  do
  {
    v54 = v8;
    v9 = *(v7 - 5);
    v10 = *(v7 - 4);
    v11 = *(v7 - 3);
    v12 = *(v7 - 1);
    v13 = *v7;
    sub_1B1B632F0(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52 = v9;
    sub_1B1D759B8(v4, v9);
    v14 = v10 == 0x635F747069726373 && v11 == 0xEE00747865746E6FLL;
    v53 = v2;
    if (v14 || (sub_1B2229D24() & 1) != 0)
    {
      if (v4)
      {
        swift_bridgeObjectRelease();
        v15 = sub_1B1C65D70(0, 0, 1, v6);
        v16 = 0xE700000000000000;
        v17 = 0x20646165726874;
        goto LABEL_14;
      }
LABEL_12:
      v17 = 0;
      v16 = 0xE000000000000000;
      goto LABEL_13;
    }
    if ((v4 & 1) == 0)
      goto LABEL_12;
    v16 = 0xE700000000000000;
    v17 = 0x20646165726874;
LABEL_13:
    v15 = v6;
LABEL_14:
    v55 = v17;
    v56 = v16;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v18 + 32) = v55;
    v19 = v18 + 32;
    *(_QWORD *)(v18 + 40) = v56;
    *(_QWORD *)(v18 + 48) = v12;
    *(_QWORD *)(v18 + 56) = v13;
    sub_1B1B63150();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
    *(_QWORD *)(inited + 32) = v15;
    *(_QWORD *)(inited + 40) = v18;
    v21 = v15[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = sub_1B1C65D70(0, v21, 1, v6);
    v23 = v22;
    if (v15[2])
    {
      v24 = (unint64_t)&v22[4 * v22[2] + 4];
      if ((unint64_t)(v15 + 4) < v24 + 32 * v21 && v24 < (unint64_t)&v15[4 * v21 + 4])
      {
LABEL_66:
        swift_release();
        goto LABEL_67;
      }
      swift_arrayInitWithCopy();
      if (v21)
        v23[2] += v21;
    }
    v25 = v6;
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v18 + 16);
    v28 = v23[2];
    v27 = v23[3];
    swift_bridgeObjectRetain();
    if (v28 + v26 > (uint64_t)(v27 >> 1))
    {
      if (v28 <= v28 + v26)
        v32 = v28 + v26;
      else
        v32 = v28;
      v23 = sub_1B1C65D70(1, v32, 1, v23);
      v6 = v25;
      if (!*(_QWORD *)(v18 + 16))
        goto LABEL_25;
    }
    else
    {
      v6 = v25;
      if (!v26)
        goto LABEL_25;
    }
    v29 = (unint64_t)&v23[4 * v23[2] + 4];
    if (v19 < v29 + 32 * v26 && v29 < v19 + 32 * v26)
      goto LABEL_66;
    swift_arrayInitWithCopy();
    if (v26)
      v23[2] += v26;
LABEL_25:
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    v8 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_1B1C65E78(0, v54[2] + 1, 1, v54);
    v31 = v8[2];
    v30 = v8[3];
    if (v31 >= v30 >> 1)
      v8 = sub_1B1C65E78(v30 > 1, v31 + 1, 1, v8);
    v8[2] = v31 + 1;
    v8[v31 + 4] = v23;
    sub_1B1B28D2C(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 += 6;
    --v2;
    v4 = v51;
  }
  while (v53 != 1);
  swift_bridgeObjectRelease();
  v3 = (_OWORD *)&unk_1B226D000;
  v33 = v8[2];
  if (v33)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    v34 = 0;
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v36 = v8[v34 + 4];
      v37 = *(_QWORD *)(v36 + 16);
      v38 = v35[2];
      v39 = v38 + v37;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v39 <= v35[3] >> 1)
      {
        if (*(_QWORD *)(v36 + 16))
          goto LABEL_47;
      }
      else
      {
        if (v38 <= v39)
          v41 = v38 + v37;
        else
          v41 = v38;
        v35 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v41, 1, v35);
        if (*(_QWORD *)(v36 + 16))
        {
LABEL_47:
          v42 = (unint64_t)&v35[4 * v35[2] + 4];
          if (v36 + 32 < v42 + 32 * v37 && v42 < v36 + 32 + 32 * v37)
            goto LABEL_67;
          swift_arrayInitWithCopy();
          if (v37)
            v35[2] += v37;
        }
      }
      swift_bridgeObjectRelease();
      if (v33 == ++v34)
      {
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
    }
  }
LABEL_56:
  v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_57:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v44 = swift_initStackObject();
  *(_OWORD *)(v44 + 16) = v3[36];
  *(_QWORD *)(v44 + 32) = v35;
  v45 = v35[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = sub_1B1C65D70(0, v45, 1, MEMORY[0x1E0DEE9D8]);
  v47 = v46;
  if (!v35[2])
    goto LABEL_65;
  v48 = (unint64_t)&v46[4 * v46[2] + 4];
  if ((unint64_t)(v35 + 4) >= v48 + 32 * v45 || v48 >= (unint64_t)&v35[4 * v45 + 4])
  {
    swift_arrayInitWithCopy();
    if (v45)
      v47[2] += v45;
LABEL_65:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v47;
  }
LABEL_67:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1BC8D30(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;

  result = sub_1B1B0F0E4(a1, *a2);
  if ((result & 1) == 0)
  {
    sub_1B1B8AA74(&v35, a1);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      v8 = 0;
      v9 = 32;
      do
      {
        v10 = *(_QWORD *)(a1 + 24);
        v11 = *(_QWORD *)(v10 + 8 * v8 + 32);
        swift_retain();
        sub_1B1BCCD2C(v10);
        sub_1B1B632F0(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1D76C18(v11);
        LOBYTE(v10) = v12;
        sub_1B1B28D2C(v11);
        if ((v10 & 1) == 0)
        {
          v13 = swift_retain();
          sub_1B1BC8D30(v13, a2, a3, a4);
          swift_release();
        }
        ++v8;
        swift_release();
        v9 += 16;
      }
      while (v7 != v8);
      swift_bridgeObjectRelease();
    }
    v14 = *(_QWORD *)(a3 + 56);
    if (*(_QWORD *)(v14 + 16) && (result = sub_1B1DC3AC8(a1), (v15 & 1) != 0))
    {
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 88 * result);
      v17 = *v16;
      if (*v16)
      {
        v18 = v16[1];
        v19 = v16[3];
        v20 = v16[5];
        v21 = v16[8];
        v23 = v16[9];
        v22 = v16[10];
        v24 = *(_QWORD **)(a4 + 16);
        v30 = v16[4];
        v31 = v16[2];
        v34 = v16[6];
        v29 = v16[7];
        sub_1B1B9D8BC(v17);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a4 + 16) = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v24 = sub_1B1C63A50(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(a4 + 16) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_1B1C63A50(v26 > 1, v27 + 1, 1, v24);
          *(_QWORD *)(a4 + 16) = v24;
        }
        v24[2] = v27 + 1;
        v28 = &v24[11 * v27];
        v28[4] = v17;
        v28[5] = v18;
        v28[6] = v31;
        v28[7] = v19;
        v28[8] = v30;
        v28[9] = v20;
        *((_BYTE *)v28 + 80) = v34 & 1;
        v28[11] = v29;
        v28[12] = v21;
        v28[13] = v23;
        v28[14] = v22;
        return sub_1B1BCCCA8(v17);
      }
    }
    else
    {
      result = sub_1B2229688();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1B1BC9000(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v3 = v2;
  type metadata accessor for GraphCodeGen.CFGNoop();
  if (swift_dynamicCastClass())
    return 0;
  type metadata accessor for GraphCodeGen.CFGProcedure();
  v6 = swift_dynamicCastClass();
  if (v6)
  {
    v7 = v6;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
    swift_retain();
    v9 = swift_retain();
    sub_1B1BC8D30(v9, a2, v2, v8);
    v10 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    v5 = sub_1B1BCC9CC(v10);
    v12 = v11;
    swift_bridgeObjectRelease();
    v47 = v5;
    v48 = v12;
    if (!*(_QWORD *)(v7 + 24))
    {
      swift_release();
      return v5;
    }
    v44 = *a2;
    swift_bridgeObjectRetain_n();
    v13 = swift_retain();
    v14 = sub_1B1BC9000(v13, &v44);
    v16 = v15;
    swift_bridgeObjectRelease();
    v45 = v14;
    v46 = v16;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return v47;
  }
  type metadata accessor for GraphCodeGen.CFGMultiProcedure();
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v47 = 0;
    v48 = 0xE000000000000000;
    v45 = 0;
    v46 = 0xE000000000000000;
    v18 = *(_QWORD *)(v17 + 16);
    if (v18 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v5 = sub_1B22296AC();
      if (v5)
      {
LABEL_9:
        v19 = 0;
        v43 = v18 & 0xC000000000000001;
        v20 = v18;
        do
        {
          if (v43)
          {
            v21 = MEMORY[0x1B5E21018](v19, v18);
          }
          else
          {
            v21 = *(_QWORD *)(v18 + 8 * v19 + 32);
            swift_retain();
          }
          ++v19;
          sub_1B1BC9000(v21, a2);
          sub_1B2228890();
          sub_1B2228890();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v18 = v20;
        }
        while (v5 != v19);
        swift_release();
        swift_bridgeObjectRelease();
        return v47;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v5)
        goto LABEL_9;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return v5;
  }
  type metadata accessor for GraphCodeGen.CFGBranch();
  v22 = swift_dynamicCastClass();
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 16);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = MEMORY[0x1E0DEE9D8];
    swift_retain();
    v25 = swift_retain();
    sub_1B1BC8D30(v25, a2, v3, v24);
    v26 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    v42 = sub_1B1BCC9CC(v26);
    v28 = v27;
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v3 + 56);
    if (*(_QWORD *)(v29 + 16) && (v30 = sub_1B1DC3AC8(v23), (v31 & 1) != 0))
    {
      v32 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 88 * v30);
      v34 = v32[2];
      v33 = v32[3];
      v35 = *v32;
      sub_1B1B9D8BC(*v32);
    }
    else
    {
      v34 = 0;
      v33 = 0;
      v35 = 1;
    }
    swift_bridgeObjectRetain();
    v36 = sub_1B1BCCC88(v35);
    MEMORY[0x1E0C80A78](v36, v37);
    MEMORY[0x1E0C80A78](v38, v39);
    sub_1B214E740(v34, v33, (uint64_t (*)(uint64_t))sub_1B1BCCD14, v40, (uint64_t (*)(uint64_t))sub_1B1BCCD20);
    swift_bridgeObjectRelease();
    v47 = v42;
    v48 = v28;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v47;
  }
  sub_1B2229430();
  sub_1B2228890();
  type metadata accessor for GraphCodeGen.CFGNode();
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BC9618(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 24);
  v16 = *a3;
  swift_bridgeObjectRetain_n();
  v4 = sub_1B1BC9000(v3, &v16);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v7 + 32) = v4;
  v8 = v7 + 32;
  *(_QWORD *)(v7 + 40) = v6;
  sub_1B1B63150();
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v7;
  v10 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1B1C65D70(0, v10, 1, MEMORY[0x1E0DEE9D8]);
  v12 = v11;
  if (*(_QWORD *)(v7 + 16))
  {
    v13 = (unint64_t)&v11[4 * v11[2] + 4];
    if (v8 < v13 + 32 * v10 && v13 < v8 + 32 * v10)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v10)
      v12[2] += v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return (uint64_t)v12;
}

uint64_t sub_1B1BC9848(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 32);
  v16 = *a3;
  swift_bridgeObjectRetain_n();
  v4 = sub_1B1BC9000(v3, &v16);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v7 + 32) = v4;
  v8 = v7 + 32;
  *(_QWORD *)(v7 + 40) = v6;
  sub_1B1B63150();
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v7;
  v10 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1B1C65D70(0, v10, 1, MEMORY[0x1E0DEE9D8]);
  v12 = v11;
  if (*(_QWORD *)(v7 + 16))
  {
    v13 = (unint64_t)&v11[4 * v11[2] + 4];
    if (v8 < v13 + 32 * v10 && v13 < v8 + 32 * v10)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v10)
      v12[2] += v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return (uint64_t)v12;
}

uint64_t sub_1B1BC9A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v0 = swift_retain();
  sub_1B1B2620C(v0, v1, v31);
  swift_retain();
  v2 = sub_1B1BC80B8();
  v4 = v3;
  swift_release();
  v5 = sub_1B1BCA088(v4);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  v27 = v2;
  if (v6)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    sub_1B202A354(0, v6, 0);
    v7 = v30;
    v8 = (_QWORD *)(v5 + 104);
    do
    {
      v9 = *(v8 - 9);
      v11 = *(v8 - 5);
      v10 = *(v8 - 4);
      v12 = *(v8 - 3);
      v29 = *((_BYTE *)v8 - 16);
      v13 = *v8;
      v28 = *(v8 - 1);
      sub_1B1B1DD24(v9);
      sub_1B1B632F0(v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1A05610(v9);
      v15 = *(_QWORD *)(v30 + 16);
      v14 = *(_QWORD *)(v30 + 24);
      if (v15 >= v14 >> 1)
        sub_1B202A354(v14 > 1, v15 + 1, 1);
      v8 += 10;
      *(_QWORD *)(v30 + 16) = v15 + 1;
      v16 = v30 + 48 * v15;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v10;
      *(_QWORD *)(v16 + 48) = v12;
      *(_BYTE *)(v16 + 56) = v29;
      *(_QWORD *)(v16 + 64) = v28;
      *(_QWORD *)(v16 + 72) = v13;
      --v6;
    }
    while (v6);
    v17 = swift_bridgeObjectRelease();
  }
  else
  {
    v17 = swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  MEMORY[0x1E0C80A78](v17, v18);
  v19 = swift_bridgeObjectRetain();
  v20 = sub_1B1BCC870(v19, (void (*)(_OWORD *__return_ptr, uint64_t, unint64_t))sub_1B1BCC998);
  v21 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v21, v22);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1B1BCC870(v23, (void (*)(_OWORD *__return_ptr, uint64_t, unint64_t))sub_1B1BCC9A0);
  swift_bridgeObjectRelease();
  v37 = v31[0];
  sub_1B1B28C6C((uint64_t)&v37);
  v36 = v31[1];
  sub_1B1B28C6C((uint64_t)&v36);
  v35 = v31[2];
  sub_1B1B28C6C((uint64_t)&v35);
  v34 = v31[3];
  sub_1B1B28C6C((uint64_t)&v34);
  v33 = v31[4];
  sub_1B1B28C6C((uint64_t)&v33);
  v32 = v31[5];
  sub_1B1B28C6C((uint64_t)&v32);
  sub_1B19F4B3C(v20);
  sub_1B19F4B3C(v24);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v25 = sub_1B1BC9F04(0x5F6E66627573, 0xE600000000000000, v7, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v25;
}

unint64_t sub_1B1BC9DF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;

  v8 = sub_1B1BC5144(0x6E69627573, 0xE500000000000000);
  v10 = v9;
  v11 = sub_1B1BCF868(a1, *(_QWORD *)(a3 + 24));
  v13 = v12;
  result = sub_1B1B632F0(a2);
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v13;
  return result;
}

unint64_t sub_1B1BC9E7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;

  v8 = sub_1B1BC5144(0x74756F627573, 0xE600000000000000);
  v10 = v9;
  v11 = sub_1B1BCF868(a1, *(_QWORD *)(a3 + 32));
  v13 = v12;
  result = sub_1B1B632F0(a2);
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = 1;
  *(_QWORD *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v13;
  return result;
}

uint64_t sub_1B1BC9F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = sub_1B214E490(a1, a2, 1684631414, 0xE400000000000000, 0x636974617473, 0xE600000000000000, MEMORY[0x1E0DEE9D8], a3, v5);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  v15 = v10;
  v16 = v12;
  sub_1B2228890();
  v14 = MEMORY[0x1E0DEE9E8];
  sub_1B1BC9000(a4, &v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B567DC(4);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v15;
}

uint64_t sub_1B1BCA088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v3 = v2 != 0;
  v62 = MEMORY[0x1E0DEE9E8];
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!v2)
      goto LABEL_60;
LABEL_55:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1B1C63B74(0, v7[2] + 1, 1, v7);
    v43 = v7[2];
    v42 = v7[3];
    if (v43 >= v42 >> 1)
      v7 = sub_1B1C63B74(v42 > 1, v43 + 1, 1, v7);
    v7[2] = v43 + 1;
    v44 = &v7[10 * v43];
    v44[4] = 0xF000000000000000;
    *((_BYTE *)v44 + 40) = 1;
    v44[6] = 0;
    *((_BYTE *)v44 + 56) = 1;
    *((_OWORD *)v44 + 4) = xmmword_1B2280B30;
    v44[10] = 0xEE00747865746E6FLL;
    *((_BYTE *)v44 + 88) = 0;
    v44[12] = 0;
    v44[13] = 0;
    goto LABEL_60;
  }
  v5 = a1 + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v50 = MEMORY[0x1E0DEE9B8] + 8;
  v51 = v4;
  v52 = v5;
  do
  {
    v8 = v5 + 88 * v6;
    v9 = *(uint64_t **)v8;
    v56 = *(unsigned __int8 *)(v8 + 48);
    v10 = swift_conformsToProtocol2();
    if (v10)
      v11 = v10;
    else
      v11 = 0;
    if (v10)
      v12 = v9;
    else
      v12 = 0;
    if (v12)
    {
      v54 = v3;
      v53 = v6;
      v13 = *v12;
      v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 32);
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = v14(v13, v11);
      swift_release();
      v59 = v62;
      v61 = v15;
      sub_1B1BCBB58();
      sub_1B1A02758(0, &qword_1EEF5C0A0, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1BCBBB0();
      sub_1B1BCBBF8(&qword_1EEF5C0B0, &qword_1EEF5C0A0, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E0DEAF50]);
      sub_1B1BCBC40();
      if ((sub_1B2228D58() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v6 = v53;
        v4 = v51;
        v5 = v52;
      }
      else
      {
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
        {
          v55 = *(_BYTE *)(v57 + 32);
          v17 = (char *)(swift_bridgeObjectRetain() + 56);
          while (1)
          {
            v18 = *((_QWORD *)v17 - 3);
            v19 = *(v17 - 16);
            v20 = *((_QWORD *)v17 - 1);
            v21 = *v17;
            sub_1B1B1DD24(v18);
            sub_1B1B1DD24(v18);
            sub_1B1B8A810((uint64_t)&v59, v18, v19, v20, v21);
            sub_1B1A05610(v59);
            sub_1B1C96CF0(v18);
            v23 = v22;
            v58 = v16;
            if (swift_dynamicCastMetatype())
              goto LABEL_16;
            type metadata accessor for frame_constants(0);
            if (swift_dynamicCastMetatype())
              break;
            if (swift_dynamicCastMetatype()
              || swift_dynamicCastMetatype()
              || swift_dynamicCastMetatype()
              || swift_dynamicCastMetatype()
              || swift_dynamicCastMetatype())
            {
              goto LABEL_27;
            }
            if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
            {
              sub_1B1A0DBF0(0, v37, v38, v39);
              if (!swift_dynamicCastMetatype())
              {
                if (swift_dynamicCastMetatype())
                {
                  v40 = sub_1B2229D24();
                  swift_bridgeObjectRelease();
                  if ((v40 & 1) != 0)
                    goto LABEL_27;
                }
                else
                {
                  if (v23 == v50)
                    goto LABEL_16;
                  if (swift_dynamicCastMetatype())
                    break;
                  type metadata accessor for __vfx_sampler1d(0);
                  if (swift_dynamicCastMetatype())
                    break;
                  type metadata accessor for __vfx_sampler2d(0);
                  if (swift_dynamicCastMetatype())
                    break;
                  type metadata accessor for __vfx_sampler3d(0);
                  if (swift_dynamicCastMetatype())
                    break;
                  if (swift_conformsToProtocol2())
                    v41 = v23;
                  else
                    v41 = 0;
                  if (!v41)
                  {
LABEL_27:
                    sub_1B1C96CF0(v18);
                    v24 = v25;
                    goto LABEL_28;
                  }
                }
              }
            }
LABEL_16:
            if ((v19 & 2) != 0)
              v24 = MEMORY[0x1E0DEBC10];
            else
              v24 = MEMORY[0x1E0DEABD0];
LABEL_28:
            v26 = sub_1B1D76F30(v24);
            if ((~v26 & 0xF000000000000007) == 0)
            {
              v59 = 0;
              v60 = 0xE000000000000000;
              sub_1B2229430();
              v47 = sub_1B222A210();
              v49 = v48;
              swift_bridgeObjectRelease();
              v59 = v47;
              v60 = v49;
              sub_1B2228890();
              result = sub_1B2229688();
              __break(1u);
              return result;
            }
            v27 = v26;
            sub_1B1B632F0(v26);
            v28 = v20;
            v29 = sub_1B1BC5708(v18, v19, v20, v21);
            v31 = v30;
            sub_1B1B1DD24(v18);
            sub_1B1BCBFD0(v27);
            swift_bridgeObjectRetain();
            v32 = v21;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = sub_1B1C63B74(0, v7[2] + 1, 1, v7);
            v34 = v7[2];
            v33 = v7[3];
            v35 = v7;
            if (v34 >= v33 >> 1)
              v35 = sub_1B1C63B74(v33 > 1, v34 + 1, 1, v7);
            v35[2] = v34 + 1;
            v7 = v35;
            v36 = &v35[10 * v34];
            v36[4] = v18;
            *((_BYTE *)v36 + 40) = v19;
            v36[6] = v28;
            *((_BYTE *)v36 + 56) = v32;
            v36[8] = v27;
            v36[9] = v29;
            v36[10] = v31;
            *((_BYTE *)v36 + 88) = (v19 & 2) != 0;
            v36[12] = 0;
            v36[13] = 0;
            sub_1B1BCBFE4(v27);
            sub_1B1BCBFE4(v27);
            swift_bridgeObjectRelease();
            sub_1B1A05610(v18);
            v17 += 32;
            v16 = v58 - 1;
            if (v58 == 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease_n();
              v3 = v54;
              v4 = v51;
              v5 = v52;
              v6 = v53;
              goto LABEL_4;
            }
          }
          if ((v55 & 1) != 0)
            goto LABEL_27;
          goto LABEL_16;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v5 = v52;
        v6 = v53;
        v4 = v51;
      }
    }
LABEL_4:
    ++v6;
    v3 |= v56;
  }
  while (v6 != v4);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    goto LABEL_55;
LABEL_60:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_1B1FFED68(v7);
  v45 = v7[2];
  v59 = (unint64_t)(v7 + 4);
  v60 = v45;
  sub_1B1BCB30C((uint64_t *)&v59);
  swift_bridgeObjectRelease();
  return (uint64_t)v7;
}

uint64_t sub_1B1BCA880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[5];
  uint64_t v49;

  v5 = sub_1B1BC80B8();
  v7 = sub_1B1BCA088(v6);
  swift_bridgeObjectRelease();
  for (i = *(_QWORD **)(v2 + 40); i[2]; i = *(_QWORD **)(v2 + 40))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 40) = i;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      i = sub_1B1FFED90(i);
    v10 = i[2] - 1;
    v11 = &i[11 * v10];
    v12 = *((_OWORD *)v11 + 2);
    v48[1] = *((_OWORD *)v11 + 3);
    v13 = *((_OWORD *)v11 + 4);
    v14 = *((_OWORD *)v11 + 5);
    v15 = *((_OWORD *)v11 + 6);
    v49 = v11[14];
    v48[3] = v14;
    v48[4] = v15;
    v48[2] = v13;
    v48[0] = v12;
    i[2] = v10;
    *(_QWORD *)(v2 + 40) = i;
    sub_1B1BC9A78();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1BCB29C((uint64_t)v48);
  }
  v16 = *(_QWORD *)(v7 + 16);
  v17 = MEMORY[0x1E0DEE9D8];
  v40 = v7;
  v41 = v5;
  if (v16)
  {
    v38 = a1;
    v39 = a2;
    v46 = MEMORY[0x1E0DEE9D8];
    sub_1B202A354(0, v16, 0);
    v17 = v46;
    v18 = (_QWORD *)(v7 + 104);
    v44 = v16;
    v19 = v16;
    do
    {
      v20 = *(v18 - 9);
      v21 = *(v18 - 5);
      v22 = *(v18 - 3);
      v23 = *((_BYTE *)v18 - 16);
      v24 = *v18;
      v42 = *(v18 - 1);
      v43 = *(v18 - 4);
      sub_1B1B1DD24(v20);
      sub_1B1B632F0(v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1A05610(v20);
      v26 = *(_QWORD *)(v46 + 16);
      v25 = *(_QWORD *)(v46 + 24);
      if (v26 >= v25 >> 1)
        sub_1B202A354(v25 > 1, v26 + 1, 1);
      v18 += 10;
      *(_QWORD *)(v46 + 16) = v26 + 1;
      v27 = v46 + 48 * v26;
      *(_QWORD *)(v27 + 32) = v21;
      *(_QWORD *)(v27 + 40) = v43;
      *(_QWORD *)(v27 + 48) = v22;
      *(_BYTE *)(v27 + 56) = v23;
      *(_QWORD *)(v27 + 64) = v42;
      *(_QWORD *)(v27 + 72) = v24;
      --v19;
    }
    while (v19);
    v7 = v40;
    v5 = v41;
    v16 = v44;
    a2 = v39;
    a1 = v38;
  }
  sub_1B1BC9F04(a1, a2, v17, v5);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (v16)
  {
    v47 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A370(0, v16, 0);
    v28 = v7 + 56;
    do
    {
      v45 = v16;
      v29 = *(_QWORD *)(v28 - 24);
      v30 = *(_BYTE *)(v28 - 16);
      v31 = *(_QWORD *)(v28 - 8);
      v32 = *(_BYTE *)v28;
      v33 = *(_QWORD *)(v28 + 8);
      sub_1B1B1DD24(v29);
      sub_1B1B632F0(v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1B1DD24(v29);
      sub_1B1B632F0(v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1B28D2C(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1A05610(v29);
      sub_1B1B28D2C(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = *(_QWORD *)(v47 + 16);
      v34 = *(_QWORD *)(v47 + 24);
      if (v35 >= v34 >> 1)
        sub_1B202A370(v34 > 1, v35 + 1, 1);
      *(_QWORD *)(v47 + 16) = v35 + 1;
      v36 = v47 + 32 * v35;
      *(_QWORD *)(v36 + 32) = v29;
      v28 += 80;
      *(_BYTE *)(v36 + 40) = v30;
      *(_QWORD *)(v36 + 48) = v31;
      *(_BYTE *)(v36 + 56) = v32;
      v16 = v45 - 1;
    }
    while (v45 != 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return 0;
}

uint64_t sub_1B1BCAC64()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GraphCodeGen()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for GraphCodeGen.CFGNode()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for GraphCodeGen.CFGNoop()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for GraphCodeGen.CFGProcedure()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for GraphCodeGen.CFGMultiProcedure()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for GraphCodeGen.CFGBranch()
{
  return objc_opt_self();
}

uint64_t destroy for GraphCodeGen.CodeGenAtom()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphCodeGen.CodeGenAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphCodeGen.CodeGenAtom(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GraphCodeGen.CodeGenAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphCodeGen.CodeGenAtom(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphCodeGen.CodeGenAtom(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphCodeGen.CodeGenAtom()
{
  return &type metadata for GraphCodeGen.CodeGenAtom;
}

ValueMetadata *type metadata accessor for GraphCodeGen.FormattingOptions()
{
  return &type metadata for GraphCodeGen.FormattingOptions;
}

uint64_t storeEnumTagSinglePayload for GraphCodeGen.Language(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BCB0B4 + 4 * byte_1B2280765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BCB0E8 + 4 * byte_1B2280760[v4]))();
}

uint64_t sub_1B1BCB0E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BCB0F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BCB0F8);
  return result;
}

uint64_t sub_1B1BCB104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BCB10CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BCB110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BCB118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphCodeGen.Language()
{
  return &type metadata for GraphCodeGen.Language;
}

unint64_t sub_1B1BCB138()
{
  unint64_t result;

  result = qword_1EEF5C070;
  if (!qword_1EEF5C070)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280914, &type metadata for GraphCodeGen.Language);
    atomic_store(result, (unint64_t *)&qword_1EEF5C070);
  }
  return result;
}

unint64_t sub_1B1BCB180()
{
  unint64_t result;

  result = qword_1EEF5C078;
  if (!qword_1EEF5C078)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228096C, &type metadata for GraphCodeGen.FormattingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C078);
  }
  return result;
}

unint64_t sub_1B1BCB1C8()
{
  unint64_t result;

  result = qword_1EEF5C080;
  if (!qword_1EEF5C080)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228093C, &type metadata for GraphCodeGen.FormattingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C080);
  }
  return result;
}

unint64_t sub_1B1BCB210()
{
  unint64_t result;

  result = qword_1EEF5C088;
  if (!qword_1EEF5C088)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280994, &type metadata for GraphCodeGen.FormattingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C088);
  }
  return result;
}

unint64_t sub_1B1BCB258()
{
  unint64_t result;

  result = qword_1EEF5C090;
  if (!qword_1EEF5C090)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22809CC, &type metadata for GraphCodeGen.FormattingOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C090);
  }
  return result;
}

uint64_t sub_1B1BCB29C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1B1BCB30C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;

  v2 = v1;
  v4 = a1[1];
  result = sub_1B22299E8();
  if ((uint64_t)result >= v4)
  {
    if ((unint64_t)v4 < 2)
      return result;
    v9 = *a1;
    v10 = *a1 + 144;
    v11 = -1;
    v12 = 1;
LABEL_11:
    v13 = *(_QWORD *)(v9 + 80 * v12);
    v14 = v13 >> 60;
    v15 = v11;
    v16 = (_OWORD *)v10;
    while (1)
    {
      if ((v14 - 11) >= 2)
      {
        if ((_DWORD)v14 == 15 && v13 == 0xF000000000000000)
          result = 0;
        else
          result = 2;
      }
      else
      {
        result = 1;
      }
      v17 = *((_QWORD *)v16 - 18);
      if ((v17 >> 60) - 11 >= 2)
      {
        v18 = v17 >> 60 == 15 && v17 == 0xF000000000000000;
        if (v18 || result >= 2)
        {
LABEL_10:
          ++v12;
          v10 += 80;
          --v11;
          if (v12 == v4)
            return result;
          goto LABEL_11;
        }
      }
      else if (result)
      {
        goto LABEL_10;
      }
      result = (unint64_t)(v16 - 4);
      v19 = *((_BYTE *)v16 - 56);
      v20 = *((_QWORD *)v16 - 6);
      v21 = *((_BYTE *)v16 - 40);
      v22 = *((_QWORD *)v16 - 2);
      v23 = *((_BYTE *)v16 - 8);
      v24 = *(v16 - 2);
      v25 = *v16;
      v26 = *(v16 - 6);
      *(v16 - 2) = *(v16 - 7);
      *(v16 - 1) = v26;
      *v16 = *(v16 - 5);
      v27 = *(v16 - 8);
      *(v16 - 4) = *(v16 - 9);
      *(v16 - 3) = v27;
      *(v16 - 5) = v25;
      v16 -= 5;
      *((_QWORD *)v16 - 8) = v13;
      *((_BYTE *)v16 - 56) = v19;
      *((_QWORD *)v16 - 6) = v20;
      *((_BYTE *)v16 - 40) = v21;
      *(v16 - 2) = v24;
      *((_QWORD *)v16 - 2) = v22;
      *((_BYTE *)v16 - 8) = v23;
      if (__CFADD__(v15++, 1))
        goto LABEL_10;
    }
  }
  v105 = result;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v100 = a1;
    if (v4 >= 2)
    {
      v7 = v6 >> 1;
      sub_1B1BCBFF8();
      v8 = sub_1B2228B0C();
      *(_QWORD *)(v8 + 16) = v7;
      v104 = v8;
      v114 = (char *)(v8 + 32);
      goto LABEL_32;
    }
    v29 = (char *)MEMORY[0x1E0DEE9D8];
    v114 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v104 = MEMORY[0x1E0DEE9D8];
    if (v4 == 1)
    {
LABEL_32:
      v30 = 0;
      v103 = *a1 + 160;
      v115 = *a1;
      v102 = *a1 + 64;
      v29 = (char *)MEMORY[0x1E0DEE9D8];
      v106 = v4;
      while (1)
      {
        v32 = v30++;
        if (v30 < v4)
        {
          v33 = *(_QWORD *)(v115 + 80 * v30);
          if ((v33 >> 60) - 11 >= 2)
          {
            if (v33 >> 60 == 15 && v33 == 0xF000000000000000)
              v34 = 0;
            else
              v34 = 2;
          }
          else
          {
            v34 = 1;
          }
          v36 = *(_QWORD *)(v115 + 80 * v32);
          if ((v36 >> 60) - 11 >= 2)
          {
            if (v36 >> 60 == 15 && v36 == 0xF000000000000000)
              v37 = 0;
            else
              v37 = 2;
          }
          else
          {
            v37 = 1;
          }
          v30 = v32 + 2;
          if (v32 + 2 < v4)
          {
            v39 = (unint64_t *)(v103 + 80 * v32);
            while (1)
            {
              v41 = *v39;
              v39 += 10;
              v40 = v41;
              v42 = (v41 >> 60) - 11;
              if (v41 >> 60 == 15 && v40 == 0xF000000000000000)
                v44 = 0;
              else
                v44 = 2;
              if (v42 < 2)
                v44 = 1;
              if ((v33 >> 60) - 11 >= 2)
                v45 = v33 >> 60 == 15 && v33 == 0xF000000000000000 ? 0 : 2;
              else
                v45 = 1;
              if (v34 < v37 == v44 >= v45)
                break;
              ++v30;
              v33 = v40;
              if (v4 == v30)
              {
                v30 = v4;
                break;
              }
            }
          }
          if (v34 < v37 && v32 < v30)
          {
            v46 = 80 * v30;
            v47 = 80 * v32;
            v48 = v30;
            v101 = v32;
            v107 = v29;
            do
            {
              if (v32 != --v48)
              {
                v49 = v115 + v46;
                v50 = *(_QWORD *)(v115 + v47);
                v113 = v2;
                v51 = *(_BYTE *)(v115 + v47 + 8);
                v52 = *(_QWORD *)(v115 + v47 + 16);
                v112 = *(_QWORD *)(v115 + v47 + 48);
                v110 = *(_BYTE *)(v115 + v47 + 24);
                v111 = *(_BYTE *)(v115 + v47 + 56);
                v108 = *(_OWORD *)(v115 + v47 + 32);
                v109 = *(_OWORD *)(v115 + v47 + 64);
                memmove((void *)(v115 + v47), (const void *)(v115 + v46 - 80), 0x50uLL);
                *(_QWORD *)(v49 - 80) = v50;
                *(_BYTE *)(v49 - 72) = v51;
                *(_QWORD *)(v49 - 64) = v52;
                v29 = v107;
                *(_BYTE *)(v49 - 56) = v110;
                *(_OWORD *)(v49 - 48) = v108;
                v2 = v113;
                *(_QWORD *)(v49 - 32) = v112;
                *(_BYTE *)(v49 - 24) = v111;
                *(_OWORD *)(v49 - 16) = v109;
              }
              ++v32;
              v46 -= 80;
              v47 += 80;
            }
            while (v32 < v48);
            v4 = v106;
            v32 = v101;
          }
        }
        if (v30 < v4 && v30 - v32 < v105)
        {
          v53 = v32 + v105;
          if (v32 + v105 >= v4)
            v53 = v4;
          if (v30 != v53)
          {
            v54 = (_OWORD *)(v102 + 80 * v30);
            while (1)
            {
              v55 = *(_QWORD *)(v115 + 80 * v30);
              v56 = v55 >> 60;
              v57 = v32;
              v58 = v54;
              do
              {
                if ((v56 - 11) >= 2)
                {
                  if ((_DWORD)v56 == 15 && v55 == 0xF000000000000000)
                    v59 = 0;
                  else
                    v59 = 2;
                }
                else
                {
                  v59 = 1;
                }
                v60 = *((_QWORD *)v58 - 18);
                if ((v60 >> 60) - 11 < 2)
                {
                  if (v59)
                    break;
                  goto LABEL_102;
                }
                v61 = v60 >> 60 == 15 && v60 == 0xF000000000000000;
                if (v61 || v59 >= 2)
                  break;
LABEL_102:
                v62 = *((_BYTE *)v58 - 56);
                v63 = *((_QWORD *)v58 - 6);
                v64 = *((_BYTE *)v58 - 40);
                v65 = *((_QWORD *)v58 - 2);
                v66 = *((_BYTE *)v58 - 8);
                v67 = *(v58 - 2);
                v68 = *v58;
                v69 = *(v58 - 6);
                *(v58 - 2) = *(v58 - 7);
                *(v58 - 1) = v69;
                *v58 = *(v58 - 5);
                v70 = *(v58 - 8);
                *(v58 - 4) = *(v58 - 9);
                *(v58 - 3) = v70;
                *(v58 - 5) = v68;
                v58 -= 5;
                *((_QWORD *)v58 - 8) = v55;
                *((_BYTE *)v58 - 56) = v62;
                *((_QWORD *)v58 - 6) = v63;
                *((_BYTE *)v58 - 40) = v64;
                *(v58 - 2) = v67;
                *((_QWORD *)v58 - 2) = v65;
                ++v57;
                *((_BYTE *)v58 - 8) = v66;
              }
              while (v30 != v57);
              ++v30;
              v54 += 5;
              if (v30 == v53)
              {
                v30 = v53;
                break;
              }
            }
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v29 = sub_1B216CC74(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
        v72 = *((_QWORD *)v29 + 2);
        v71 = *((_QWORD *)v29 + 3);
        v31 = v72 + 1;
        if (v72 >= v71 >> 1)
          v29 = sub_1B216CC74(v71 > 1, v72 + 1, 1, v29);
        *((_QWORD *)v29 + 2) = v31;
        v73 = v29 + 32;
        v74 = &v29[16 * v72 + 32];
        *(_QWORD *)v74 = v32;
        *((_QWORD *)v74 + 1) = v30;
        if (v72)
          break;
        v31 = 1;
LABEL_34:
        v4 = v106;
        if (v30 >= v106)
          goto LABEL_126;
      }
      while (1)
      {
        v75 = v31 - 1;
        if (v31 >= 4)
        {
          v80 = &v73[16 * v31];
          v81 = *((_QWORD *)v80 - 7) - *((_QWORD *)v80 - 8);
          v78 = *((_QWORD *)v80 - 5) - *((_QWORD *)v80 - 6);
          v79 = v31 - 2;
          v82 = &v73[16 * v31 - 32];
          v76 = *(_QWORD *)v82;
          v77 = *((_QWORD *)v82 + 1);
          if (v78 - v76 + v77 >= v81)
          {
            v85 = v78 < *(_QWORD *)&v73[16 * v75 + 8] - *(_QWORD *)&v73[16 * v75];
            goto LABEL_120;
          }
        }
        else
        {
          if (v31 != 3)
          {
            v83 = *(_QWORD *)&v73[16 * v31 - 24] - *(_QWORD *)&v29[16 * v31];
            v84 = *(_QWORD *)&v73[16 * v75 + 8] - *(_QWORD *)&v73[16 * v75];
LABEL_117:
            if (v84 < v83)
              goto LABEL_34;
            goto LABEL_122;
          }
          v76 = *((_QWORD *)v29 + 6);
          v77 = *((_QWORD *)v29 + 7);
          v78 = *((_QWORD *)v29 + 5) - *((_QWORD *)v29 + 4);
          v79 = 1;
        }
        v83 = v77 - v76;
        v84 = *(_QWORD *)&v73[16 * v75 + 8] - *(_QWORD *)&v73[16 * v75];
        if (v83 + v84 < v78)
          goto LABEL_117;
        v85 = v78 < v84;
LABEL_120:
        if (v85)
          v75 = v79;
LABEL_122:
        v86 = &v73[16 * v75 - 16];
        v87 = *(_QWORD *)v86;
        v88 = &v73[16 * v75];
        v89 = *((_QWORD *)v88 + 1);
        sub_1B1BCBC84((char *)(v115 + 80 * *(_QWORD *)v86), (char *)(v115 + 80 * *(_QWORD *)v88), v115 + 80 * v89, v114);
        if (v2)
          goto LABEL_132;
        *(_QWORD *)v86 = v87;
        *((_QWORD *)v86 + 1) = v89;
        v90 = *((_QWORD *)v29 + 2);
        v31 = v90 - 1;
        memmove(&v73[16 * v75], v88 + 16, 16 * (v90 - 1 - v75));
        *((_QWORD *)v29 + 2) = v90 - 1;
        if (v90 <= 2)
          goto LABEL_34;
      }
    }
    v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_126:
    if (v31 >= 2)
    {
      v91 = *v100;
      do
      {
        v92 = v29 + 32;
        v93 = (uint64_t)v29;
        v94 = *(_QWORD *)&v29[16 * v31];
        v95 = &v92[16 * v31 - 16];
        v96 = *((_QWORD *)v95 + 1);
        sub_1B1BCBC84((char *)(v91 + 80 * v94), (char *)(v91 + 80 * *(_QWORD *)v95), v91 + 80 * v96, v114);
        if (v2)
          break;
        v97 = (char *)v93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v97 = sub_1B216D510(v93);
        v98 = &v97[16 * v31];
        *(_QWORD *)v98 = v94;
        *((_QWORD *)v98 + 1) = v96;
        v29 = v97;
        v99 = *((_QWORD *)v97 + 2);
        memmove(&v97[16 * v31 + 16], &v97[16 * v31 + 32], 16 * (v99 - v31));
        *((_QWORD *)v97 + 2) = v99 - 1;
        v31 = v99 - 1;
      }
      while (v99 > 2);
    }
LABEL_132:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v104 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B1BCBB58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C098)
  {
    sub_1B1B9CB84();
    v0 = sub_1B2228CEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C098);
  }
}

unint64_t sub_1B1BCBBB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C0A8;
  if (!qword_1EEF5C0A8)
  {
    sub_1B1BCBB58();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB3E0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C0A8);
  }
  return result;
}

uint64_t sub_1B1BCBBF8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1BCBC40()
{
  unint64_t result;

  result = qword_1EEF5C0B8;
  if (!qword_1EEF5C0B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2289054, &type metadata for ScriptParameter);
    atomic_store(result, (unint64_t *)&qword_1EEF5C0B8);
  }
  return result;
}

uint64_t sub_1B1BCBC84(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unsigned int v17;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  unint64_t v31;
  uint64_t result;
  char *v33;
  char *v34;
  char *v35;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 80;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 80;
  v35 = __dst;
  v34 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -79)
    {
      if (a4 != __src || &__src[80 * v11] <= a4)
        memmove(a4, __src, 80 * v11);
      v21 = &v4[80 * v11];
      v33 = v21;
      v35 = v6;
      if (v7 < v6 && v10 >= 80)
      {
        v22 = (char *)(a3 - 80);
        while (1)
        {
          v23 = *((_QWORD *)v21 - 10);
          if ((v23 >> 60) - 11 >= 2)
          {
            if (v23 >> 60 == 15 && v23 == 0xF000000000000000)
              v24 = 0;
            else
              v24 = 2;
          }
          else
          {
            v24 = 1;
          }
          v26 = v22 + 80;
          v28 = v6 - 80;
          v27 = *((_QWORD *)v6 - 10);
          v29 = (v27 >> 60) - 11;
          if (v27 >> 60 == 15 && v27 == 0xF000000000000000)
            v31 = 0;
          else
            v31 = 2;
          if (v29 < 2)
            v31 = 1;
          if (v24 >= v31)
          {
            v33 = v21 - 80;
            if (v26 < v21 || v22 >= v21 || v26 != v21)
              memmove(v22, v21 - 80, 0x50uLL);
            v28 = v6;
            v21 -= 80;
            if (v6 <= v7)
              goto LABEL_70;
          }
          else
          {
            if (v26 != v6 || v22 >= v6)
              memmove(v22, v6 - 80, 0x50uLL);
            v35 = v6 - 80;
            if (v28 <= v7)
              goto LABEL_70;
          }
          v22 -= 80;
          v6 = v28;
          if (v21 <= v4)
            goto LABEL_70;
        }
      }
      goto LABEL_70;
    }
  }
  else if (v8 >= -79)
  {
    if (a4 != __dst || &__dst[80 * v9] <= a4)
      memmove(a4, __dst, 80 * v9);
    v12 = &v4[80 * v9];
    v33 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 80)
    {
      do
      {
        v13 = *(_QWORD *)v4;
        v14 = *(_QWORD *)v6 >> 60;
        if ((_DWORD)v14 == 15 && *(_QWORD *)v6 == 0xF000000000000000)
          v16 = 0;
        else
          v16 = 2;
        if ((v14 - 11) < 2)
          v16 = 1;
        v17 = (v13 >> 60) - 11;
        if (v13 >> 60 == 15 && v13 == 0xF000000000000000)
          v19 = 0;
        else
          v19 = 2;
        if (v17 < 2)
          v19 = 1;
        if (v16 >= v19)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x50uLL);
          v4 += 80;
          v34 = v4;
          v20 = v6;
        }
        else
        {
          v20 = v6 + 80;
          if (v7 < v6 || v7 >= v20 || v7 != v6)
            memmove(v7, v6, 0x50uLL);
        }
        v7 += 80;
        if (v4 >= v12)
          break;
        v6 = v20;
      }
      while ((unint64_t)v20 < a3);
      v35 = v7;
    }
LABEL_70:
    sub_1B216CF60((void **)&v35, (const void **)&v34, &v33);
    return 1;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

unint64_t sub_1B1BCBFD0(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1B1B632F0(result);
  return result;
}

unint64_t sub_1B1BCBFE4(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1B1B28D2C(result);
  return result;
}

void sub_1B1BCBFF8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CE40)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CE40);
  }
}

uint64_t sub_1B1BCC05C(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    v6 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1B5E21018](v6, a1);
        if (!*(_QWORD *)(a2 + 16))
          break;
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain();
        if (!*(_QWORD *)(a2 + 16))
          break;
      }
      v8 = sub_1B1DC3AC8(v7);
      if ((v9 & 1) == 0 || !*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v8))
        break;
      ++v6;
      swift_retain();
      swift_release();
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      if (v4 == v6)
        return v10;
    }
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BCE95C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1BCC274(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v21 = a3;
  v5 = *a1;
  v4 = a1[1];
  v19 = 0;
  v20 = 0xE000000000000000;
  if ((v4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(v4) & 0xF;
  else
    v6 = v5 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i < v6; i += v12)
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        v10 = sub_1B2229424();
        v12 = v11;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v18[0] = v5;
          v18[1] = v4 & 0xFFFFFFFFFFFFFFLL;
          v10 = *((unsigned __int8 *)v18 + i);
          if (*((char *)v18 + i) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v9 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0)
            v9 = sub_1B22294FC();
          v10 = *(unsigned __int8 *)(v9 + i);
          if (*(char *)(v9 + i) < 0)
            __asm { BR              X9 }
        }
        v12 = 1;
      }
      v13 = a2(v10);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if ((v13 & 1) == 0)
        sub_1B222880C();
    }
    v15 = a1;
    v6 = v19;
    v16 = v20;
  }
  else
  {
    swift_bridgeObjectRetain();
    v16 = 0xE000000000000000;
    v15 = a1;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v15 = v6;
  v15[1] = v16;
  return result;
}

uint64_t sub_1B1BCC4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v0 = sub_1B2227DA4();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  MEMORY[0x1E0C80A78](v0, v3);
  v30 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1B22287B8();
  v32 = v4;
  v37 = 46;
  v38 = 0xE100000000000000;
  v35 = 95;
  v36 = 0xE100000000000000;
  sub_1B1A06460();
  v5 = sub_1B222922C();
  v7 = v6;
  swift_bridgeObjectRelease();
  v31 = v5;
  v32 = v7;
  v37 = 45;
  v38 = 0xE100000000000000;
  v35 = 95;
  v36 = 0xE100000000000000;
  v8 = sub_1B222922C();
  v10 = v9;
  swift_bridgeObjectRelease();
  v31 = v8;
  v32 = v10;
  v37 = 47;
  v38 = 0xE100000000000000;
  v35 = 95;
  v36 = 0xE100000000000000;
  v11 = sub_1B222922C();
  v13 = v12;
  swift_bridgeObjectRelease();
  v31 = v11;
  v32 = v13;
  v37 = 35;
  v38 = 0xE100000000000000;
  v14 = sub_1B2229214();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_QWORD *)(v14 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = 0xE000000000000000;
  v37 = 0;
  v38 = 0xE000000000000000;
  v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  v31 = v15;
  v32 = v16;
  v33 = 0;
  v34 = v18;
  swift_bridgeObjectRetain();
  v19 = sub_1B22288C0();
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    while (1)
    {
      if ((v21 != 2573 || v22 != 0xE200000000000000) && (sub_1B2229D24() & 1) == 0)
      {
        if ((sub_1B22285F0() & 1) == 0 || (sub_1B1EE7710(v21, v22) & 0xFFFFFF80) != 0)
          goto LABEL_6;
        sub_1B1EE7710(v21, v22);
      }
      MEMORY[0x1B5E20430](v21, v22);
LABEL_6:
      swift_bridgeObjectRelease();
      v21 = sub_1B22288C0();
      v22 = v23;
      if (!v23)
      {
        v24 = v37;
        v17 = v38;
        goto LABEL_15;
      }
    }
  }
  v24 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1EEF572E0 != -1)
    swift_once();
  v25 = sub_1B1B40EC8(v0, (uint64_t)qword_1EEF5C058);
  v26 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v30, v25, v0);
  v27 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v28 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v28 + v27, v26, v0);
  v31 = v24;
  v32 = v17;
  sub_1B1BCC274(&v31, (uint64_t (*)(uint64_t))sub_1B1BCDB28, v28);
  swift_release();
  return v31;
}

uint64_t sub_1B1BCC870(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[3];
  uint64_t v16;

  v16 = MEMORY[0x1E0DEE9D8];
  sub_1B202A354(0, 0, 0);
  v4 = v16;
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    v7 = a1 + 32;
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      sub_1B1B632F0(v8);
      a2(v15, v6, v8);
      sub_1B1B28D2C(v8);
      v16 = v4;
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_1B202A354(v9 > 1, v10 + 1, 1);
        v4 = v16;
      }
      ++v6;
      *(_QWORD *)(v4 + 16) = v10 + 1;
      v11 = (_OWORD *)(v4 + 48 * v10);
      v12 = v15[0];
      v13 = v15[2];
      v11[3] = v15[1];
      v11[4] = v13;
      v11[2] = v12;
    }
    while (v5 != v6);
  }
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_1B1BCC998@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1B1BC9DF8(a1, a2, *(_QWORD *)(v3 + 24), a3);
}

unint64_t sub_1B1BCC9A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1B1BC9E7C(a1, a2, *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_1B1BCC9A8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1BCC9CC(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (unint64_t *)(swift_bridgeObjectRetain() + 56);
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v4 = *v2;
      if (*v2)
      {
        v5 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0)
          v5 = *(v2 - 1) & 0xFFFFFFFFFFFFLL;
        if (v5)
        {
          v6 = v2[2];
          v12 = v2[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((sub_1B2228920() & 1) == 0)
            sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          if (v6)
          {
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v3 = sub_1B1C63044(0, v3[2] + 1, 1, v3);
            v8 = v3[2];
            v7 = v3[3];
            if (v8 >= v7 >> 1)
              v3 = sub_1B1C63044(v7 > 1, v8 + 1, 1, v3);
            v3[2] = v8 + 1;
            v9 = &v3[2 * v8];
            v9[4] = v12;
            v9[5] = v6;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
      }
      v2 += 11;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  v10 = MEMORY[0x1E0DEA968];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8((unint64_t *)&qword_1ED4BA4A0, (unint64_t *)&qword_1ED4BA490, v10, MEMORY[0x1E0DEAF20]);
  sub_1B2228644();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1BCCC88(uint64_t result)
{
  if (result != 1)
    return sub_1B1BCCCA8(result);
  return result;
}

uint64_t sub_1B1BCCCA8(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1BCCD14()
{
  uint64_t v0;

  return sub_1B1BC9618(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1B1BCCD20()
{
  uint64_t v0;

  return sub_1B1BC9848(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1B1BCCD2C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1BCCD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1BC83C4(a1, *(_QWORD *)(v2 + 16), *(_QWORD ***)(v2 + 24), a2);
}

double sub_1B1BCCD70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1BC85D0(a1, *(void (**)(_OWORD *__return_ptr, uint64_t *))(v2 + 16), a2);
}

uint64_t sub_1B1BCCD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1B1BCCDD4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

uint64_t sub_1B1BCCE28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1BC805C(a1, a2);
}

uint64_t sub_1B1BCCE40(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;

  v16 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, 0, 0);
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_retain();
      v8 = a2(v4, v6, v7);
      v10 = v9;
      swift_release();
      v12 = *(_QWORD *)(v16 + 16);
      v11 = *(_QWORD *)(v16 + 24);
      if (v12 >= v11 >> 1)
        sub_1B2029FFC(v11 > 1, v12 + 1, 1);
      ++v4;
      *(_QWORD *)(v16 + 16) = v12 + 1;
      v13 = v16 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
      v5 += 2;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1B1BCCF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1BC49BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x1E0DEA968];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8((unint64_t *)&qword_1ED4BA4A0, (unint64_t *)&qword_1ED4BA490, v4, MEMORY[0x1E0DEAF20]);
  sub_1B2228644();
  swift_bridgeObjectRelease();
  v5 = sub_1B1B567DC(4);
  v7 = v6;
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v7;
  sub_1B1B63150();
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = &unk_1E6375758;
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = &unk_1E6375718;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_1B1C65D70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  if (&v10[4 * v10[2] + 8] > qword_1E6375778 && &v10[4 * v10[2] + 4] < qword_1E6375798)
    goto LABEL_26;
  swift_arrayInitWithCopy();
  ++v10[2];
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(inited + 40);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = v10[2];
  v14 = v10[3];
  swift_bridgeObjectRetain();
  if (v13 + v12 > (uint64_t)(v14 >> 1))
  {
    if (v13 <= v13 + v12)
      v22 = v13 + v12;
    else
      v22 = v13;
    v10 = sub_1B1C65D70(1, v22, 1, v10);
    if (!*(_QWORD *)(v11 + 16))
      goto LABEL_9;
  }
  else if (!v12)
  {
    goto LABEL_9;
  }
  v15 = (unint64_t)&v10[4 * v10[2] + 4];
  if (v11 + 32 < v15 + 32 * v12 && v15 < v11 + 32 + 32 * v12)
    goto LABEL_26;
  swift_arrayInitWithCopy();
  if (v12)
    v10[2] += v12;
LABEL_9:
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(inited + 48);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = v10[2];
  v19 = v10[3];
  swift_bridgeObjectRetain();
  if (v18 + v17 > (uint64_t)(v19 >> 1))
  {
    if (v18 <= v18 + v17)
      v23 = v18 + v17;
    else
      v23 = v18;
    v10 = sub_1B1C65D70(1, v23, 1, v10);
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_15;
  }
  else if (!v17)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v10;
  }
  v20 = (unint64_t)&v10[4 * v10[2] + 4];
  if (v16 + 32 >= v20 + 32 * v17 || v20 >= v16 + 32 + 32 * v17)
  {
    swift_arrayInitWithCopy();
    if (v17)
      v10[2] += v17;
    goto LABEL_15;
  }
LABEL_26:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1BCD354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  sub_1B1A06460();
  if ((sub_1B2229274() & 1) != 0)
  {
    v2 = sub_1B2229214();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = 0;
      v5 = -v3;
      v6 = v2 + 40;
      v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = v2 + 40;
      do
      {
        v7 = (uint64_t *)(v6 + 16 * v4++);
        while (1)
        {
          v8 = *(v7 - 1);
          v9 = *v7;
          swift_bridgeObjectRetain();
          if ((sub_1B2229274() & 1) == 0)
            break;
          v7 += 2;
          swift_bridgeObjectRelease();
          ++v4;
          if (v5 + v4 == 1)
            goto LABEL_15;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = sub_1B1C63044(0, v16[2] + 1, 1, v16);
        v11 = v16[2];
        v10 = v16[3];
        if (v11 >= v10 >> 1)
          v16 = sub_1B1C63044(v10 > 1, v11 + 1, 1, v16);
        v16[2] = v11 + 1;
        v12 = &v16[2 * v11];
        v12[4] = v8;
        v12[5] = v9;
        v6 = v15;
      }
      while (v5 + v4);
    }
LABEL_15:
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEA968];
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1BCBBF8((unint64_t *)&qword_1ED4BA4A0, (unint64_t *)&qword_1ED4BA490, v13, MEMORY[0x1E0DEAF20]);
    a1 = sub_1B2228644();
    swift_bridgeObjectRelease();
    sub_1B2228644();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *sub_1B1BCD60C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __objc2_class *v12;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  type metadata accessor for IfNode(0);
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 32);
    swift_retain();
    v34 = v6;
    swift_retain_n();
    swift_retain();
    swift_retain();
    a2(&v31, &v34);
    v7 = v31;
    if (!v31
      || (swift_release(),
          swift_release(),
          v34 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 48),
          swift_retain(),
          swift_retain(),
          a2(&v31, &v34),
          (v8 = v31) == 0))
    {
      v34 = 0;
      v35 = 0xE000000000000000;
      sub_1B2229430();
      v22 = sub_1B1BCE95C();
      v24 = v23;
      swift_bridgeObjectRelease();
      v34 = v22;
      v35 = v24;
      sub_1B2228890();
      swift_release();
      while (1)
      {
        sub_1B2229688();
        __break(1u);
LABEL_34:
        v31 = 0;
        v32 = 0xE000000000000000;
        sub_1B2229430();
        v25 = sub_1B1BCE95C();
        v27 = v26;
        swift_bridgeObjectRelease();
        v31 = v25;
        v32 = v27;
LABEL_36:
        sub_1B2228890();
        swift_release();
      }
    }
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for GraphCodeGen.CFGBranch();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = a1;
    v9[3] = v7;
    v9[4] = v8;
    goto LABEL_5;
  }
  type metadata accessor for NoopNode(0);
  v10 = swift_dynamicCastClass();
  if (v10)
  {
    v11 = v10;
    type metadata accessor for GraphCodeGen.CFGNoop();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v11;
LABEL_20:
    swift_retain();
    return v9;
  }
  v12 = *(__objc2_class **)a1;
  if ((*(__objc2_class **)a1 == _TtC3VFX17NoopReturnAnyNode
     || v12 == _TtC3VFX14NoopReturnNode)
    && a1 != 0)
  {
    type metadata accessor for GraphCodeGen.CFGProcedure();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = a1;
    v9[3] = 0;
    goto LABEL_20;
  }
  if (v12 == _TtC3VFX12SubGraphNode && a1)
  {
    v15 = off_1ED488B78;
    v16 = swift_retain_n();
    ((void (*)(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>))v15)(v16, v17, &v34);
    v18 = v35;
    v44 = v34;
    v45 = v35;
    sub_1B1B28C6C((uint64_t)&v44);
    v43 = v36;
    sub_1B1B28C6C((uint64_t)&v43);
    v42 = v37;
    sub_1B1B28C6C((uint64_t)&v42);
    v41 = v38;
    sub_1B1B28C6C((uint64_t)&v41);
    v40 = v39;
    sub_1B1B28C6C((uint64_t)&v40);
    v19 = *(_QWORD *)(v18 + 16);
    sub_1B1B28C6C((uint64_t)&v45);
    if (!v19)
    {
      type metadata accessor for GraphCodeGen.CFGNoop();
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = a1;
LABEL_5:
      swift_retain();
      swift_release_n();
      return v9;
    }
  }
  else
  {
    swift_retain_n();
  }
  if ((sub_1B1FF52F4() & 1) != 0)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    swift_retain();
    swift_retain();
    a2((uint64_t *)&v33, &v31);
    v21 = v33;
    if (!v33)
      goto LABEL_34;
    swift_release();
    swift_release();
    type metadata accessor for GraphCodeGen.CFGProcedure();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = a1;
    v9[3] = v21;
    goto LABEL_5;
  }
  if ((sub_1B1FF54E8() & 1) == 0)
  {
    if ((sub_1B1FF56E8() & 1) == 0)
    {
      swift_release_n();
      return 0;
    }
    type metadata accessor for GraphCodeGen.CFGProcedure();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = a1;
    v9[3] = 0;
    goto LABEL_5;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  swift_retain();
  swift_retain();
  a2((uint64_t *)&v33, &v31);
  v9 = v33;
  if (!v33)
  {
    v31 = 0;
    v32 = 0xE000000000000000;
    sub_1B2229430();
    v28 = sub_1B1BCE95C();
    v30 = v29;
    swift_bridgeObjectRelease();
    v31 = v28;
    v32 = v30;
    goto LABEL_36;
  }
  swift_release();
  swift_release_n();
  return v9;
}

uint64_t sub_1B1BCDABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1BC77D4(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(_QWORD *__return_ptr, uint64_t))(v3 + 24));
}

uint64_t sub_1B1BCDAC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1B2227DA4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1B1BCDB28()
{
  sub_1B2227DA4();
  return sub_1B2227D80() & 1;
}

uint64_t *sub_1B1BCDB6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1B1BCDBAC()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1BCDBD0()
{
  uint64_t *v0;

  return sub_1B1BC6418(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t destroy for GraphCodeGen.CodeGenParameter(unint64_t *a1)
{
  sub_1B1B28D2C(*a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphCodeGen.CodeGenParameter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  sub_1B1B632F0(*(_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphCodeGen.CodeGenParameter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  sub_1B1B632F0(*(_QWORD *)a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  sub_1B1B28D2C(v5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GraphCodeGen.CodeGenParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B28D2C(*(_QWORD *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphCodeGen.CodeGenParameter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphCodeGen.CodeGenParameter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphCodeGen.CodeGenParameter()
{
  return &type metadata for GraphCodeGen.CodeGenParameter;
}

uint64_t sub_1B1BCDE00(_QWORD *a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;

  v2 = a1[2];
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    sub_1B2029FFC(0, v2, 0);
    v4 = a1[4];
    v5 = a1[5];
    v6 = 2;
    v15 = v5;
    sub_1B1B99724();
    v7 = (_QWORD *)sub_1B22296DC();
    v8 = &qword_1E6382800;
    do
    {
      v10 = *(v8 - 2);
      v9 = *(v8 - 1);
      v11 = *v8;
      v8 += 3;
      v12 = sub_1B1DC3AC8(v10);
      *(_QWORD *)((char *)v7 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
      *(_QWORD *)(v7[6] + 8 * v12) = v10;
      v13 = (_QWORD *)(v7[7] + 16 * v12);
      *v13 = v9;
      v13[1] = v11;
      ++v7[2];
      swift_bridgeObjectRetain();
      --v6;
    }
    while (v6);
    sub_1B19F8CD0(v15);
    sub_1B1BCF93C();
    swift_arrayDestroy();
    if (v7[2])
    {
      sub_1B1DC3AC8(v4);
      if ((v14 & 1) != 0)
        swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_1B1BCE288(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(uint64_t (**)(uint64_t))(v3 + 112);
  v10 = swift_retain();
  v11 = v9(v10);
  if ((a1 & 1) == 0)
  {
    sub_1B2228260();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v11 + OBJC_IVAR____TtC3VFX4Node_authoringID, v8, v4);
  }
  return v11;
}

void sub_1B1BCE340()
{
  sub_1B2229688();
  __break(1u);
}

_QWORD *sub_1B1BCE388(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1B222826C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0DEE9D8];
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = v8;
  v9 = (char *)v1 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  sub_1B2228260();
  v1[2] = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a1[3];
  v11 = a1[4];
  v12 = v1[3];
  v1[3] = v10;
  v1[4] = v11;
  sub_1B1BCCD2C(v10);
  sub_1B1B28F18(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, (uint64_t)a1 + OBJC_IVAR____TtC3VFX4Node_authoringID, v3);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v9, v7, v3);
  return v1;
}

_QWORD *sub_1B1BCE490()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  return v0;
}

uint64_t sub_1B1BCE4E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1B1BCE388(a1);
  return v2;
}

void sub_1B1BCE51C()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1BCE564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1B1BCE5C4()
{
  return type metadata accessor for Node();
}

uint64_t type metadata accessor for Node()
{
  uint64_t result;

  result = qword_1EEF5C0C0;
  if (!qword_1EEF5C0C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1BCE608()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B222826C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Node.Typing()
{
  return &type metadata for Node.Typing;
}

_QWORD *initializeBufferWithCopyOfBuffer for Node.Port(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Node.Port(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for Node.Port(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Node.Port()
{
  return &type metadata for Node.Port;
}

uint64_t destroy for Signature()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Signature(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Signature(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Signature(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Signature()
{
  return &type metadata for Signature;
}

uint64_t sub_1B1BCE95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(void))(*(_QWORD *)v0 + 144))();
  if (v1)
  {
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v2 = sub_1B2228890();
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 136))(v2);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  else
  {
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v3 = sub_1B2228890();
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 136))(v3);
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 60;
}

uint64_t sub_1B1BCEAB0()
{
  return sub_1B1BCE95C();
}

uint64_t sub_1B1BCEAD0(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112);
  v5 = swift_retain();
  v6 = v4(v5);
  a1();
  if (v2)
    swift_release();
  return v6;
}

uint64_t sub_1B1BCEB44()
{
  uint64_t *v0;

  return sub_1B1BCEE30(*v0, v0[1], v0[2]);
}

uint64_t sub_1B1BCEB50(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
  {
    v14 = *(_QWORD *)(a2 + 16);
    if (!v14)
      return 0;
    goto LABEL_9;
  }
  v25 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_1B2029FFC(0, v3, 0);
  v6 = 0;
  do
  {
    v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
    sub_1B1B632F0(v7);
    v8 = sub_1B1D763B0(v7);
    v10 = v9;
    sub_1B1B28D2C(v7);
    v12 = *(_QWORD *)(v25 + 16);
    v11 = *(_QWORD *)(v25 + 24);
    if (v12 >= v11 >> 1)
      sub_1B2029FFC(v11 > 1, v12 + 1, 1);
    ++v6;
    *(_QWORD *)(v25 + 16) = v12 + 1;
    v13 = v25 + 16 * v12;
    *(_QWORD *)(v13 + 32) = v8;
    *(_QWORD *)(v13 + 40) = v10;
  }
  while (v3 != v6);
  swift_bridgeObjectRelease();
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    sub_1B2228890();
LABEL_9:
    swift_bridgeObjectRetain();
    sub_1B2029FFC(0, v14, 0);
    v15 = 0;
    v16 = v4;
    do
    {
      v17 = *(_QWORD *)(a2 + 8 * v15 + 32);
      sub_1B1B632F0(v17);
      v18 = sub_1B1D763B0(v17);
      v20 = v19;
      sub_1B1B28D2C(v17);
      v22 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      if (v22 >= v21 >> 1)
        sub_1B2029FFC(v21 > 1, v22 + 1, 1);
      ++v15;
      *(_QWORD *)(v16 + 16) = v22 + 1;
      v23 = v16 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v18;
      *(_QWORD *)(v23 + 40) = v20;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    sub_1B19FA1DC();
    sub_1B19FA230();
    sub_1B2228644();
    swift_release();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1B1BCEE28()
{
  uint64_t *v0;

  return sub_1B1BCEB50(*v0, v0[1]);
}

uint64_t sub_1B1BCEE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2029FFC(0, v3, 0);
    __asm { BR              X9 }
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_1B2029FFC(0, v6, 0);
    __asm { BR              X9 }
  }
  sub_1B2228890();
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v10 = *(_QWORD *)(a3 + 8 * v8 + 32);
      sub_1B19F8CD0(v10);
      sub_1B1D3590C(v10);
      if ((v11 & 1) != 0)
      {
        sub_1B19F8D00(v10);
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1B202A128(0, v9[2] + 1, 1);
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
          sub_1B202A128(v12 > 1, v13 + 1, 1);
        v9[2] = v13 + 1;
        v14 = &v9[2 * v13];
        v14[4] = v8;
        v14[5] = v10;
      }
      ++v8;
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
    if (v9[2])
      goto LABEL_16;
LABEL_18:
    swift_release();
    return 0;
  }
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_18;
LABEL_16:
  sub_1B1BCDE00(v9);
  swift_release();
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1B1BCF75C@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(result + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v5 = result;
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B202A328(0, v3, 0);
    v6 = v12;
    v7 = (unint64_t *)(v5 + 32);
    do
    {
      v8 = *v7++;
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      result = sub_1B1B632F0(v8);
      v11 = *(_QWORD *)(v12 + 16);
      v10 = *(_QWORD *)(v12 + 24);
      if (v11 >= v10 >> 1)
        result = sub_1B202A328(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v12 + 16) = v11 + 1;
      *(_QWORD *)(v12 + 8 * v11 + 32) = v9 | 0x6000000000000000;
      --v3;
    }
    while (v3);
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9D8];
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = &unk_1E63C4F10;
  a2[3] = v4;
  a2[4] = v4;
  a2[5] = v4;
  return result;
}

uint64_t sub_1B1BCF86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if ((a1 & 0x8000000000000000) == 0 && *(_QWORD *)(a2 + 16) > a1)
  {
    if (*(_QWORD *)(a2 + 16 * a1 + 40))
    {
      sub_1B1A06460();
      swift_bridgeObjectRetain();
      v2 = *(_QWORD *)(sub_1B2229214() + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_1B1BCF93C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA598)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA598);
  }
}

uint64_t sub_1B1BCF9A0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1BCF9C4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || *(_QWORD *)(a2 + 16) <= a1 || !*(_QWORD *)(a2 + 16 * a1 + 40))
    return sub_1B2229A0C();
  sub_1B1A06460();
  swift_bridgeObjectRetain();
  sub_1B2229214();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 39;
}

uint64_t sub_1B1BCFAD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1B1BD0124(0, &qword_1EEF5C0E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BD00E0();
  sub_1B222A180();
  v12 = 0;
  sub_1B222991C();
  if (!v1)
  {
    v11 = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1BCFBFC(char *a1, char *a2)
{
  return sub_1B1F961DC(*a1, *a2);
}

uint64_t sub_1B1BCFC08()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F6C6F63;
  else
    return 0x7974696361706FLL;
}

uint64_t sub_1B1BCFC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BCFE9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BCFC64()
{
  sub_1B1BD00E0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BCFC8C()
{
  sub_1B1BD00E0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BCFCB4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1BCFF84(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_1B1BCFCE8(_QWORD *a1)
{
  return sub_1B1BCFAD4(a1);
}

void sub_1B1BCFD14(_WORD *a1@<X8>)
{
  *a1 = 257;
}

_WORD *initializeBufferWithCopyOfBuffer for Target(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleVoxelRenderer(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleVoxelRenderer(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BCFE1C + 4 * byte_1B2280C55[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1B1BCFE50 + 4 * byte_1B2280C50[v4]))();
}

uint64_t sub_1B1BCFE50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B1BCFE58(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1B1BCFE60);
  return result;
}

uint64_t sub_1B1BCFE6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1B1BCFE74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BCFE78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B1BCFE80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleVoxelRenderer()
{
  return &type metadata for ParticleVoxelRenderer;
}

uint64_t sub_1B1BCFE9C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7974696361706FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1BCFF84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v11;
  int v12;
  _BYTE v13[16];

  sub_1B1BD0124(0, &qword_1EEF5C0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v13[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BD00E0();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v13[15] = 0;
  v9 = sub_1B22297D8();
  v13[14] = 1;
  v11 = sub_1B22297D8();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if ((v11 & 1) != 0)
    v12 = 256;
  else
    v12 = 0;
  return v12 & 0xFFFFFFFE | v9 & 1;
}

unint64_t sub_1B1BD00E0()
{
  unint64_t result;

  result = qword_1EEF5C0D8;
  if (!qword_1EEF5C0D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280DDC, &type metadata for ParticleVoxelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C0D8);
  }
  return result;
}

void sub_1B1BD0124(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1BD00E0();
    v7 = a3(a1, &type metadata for ParticleVoxelRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleVoxelRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BD01CC + 4 * byte_1B2280C5F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BD0200 + 4 * byte_1B2280C5A[v4]))();
}

uint64_t sub_1B1BD0200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BD0208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BD0210);
  return result;
}

uint64_t sub_1B1BD021C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BD0224);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BD0228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BD0230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleVoxelRenderer.CodingKeys()
{
  return &type metadata for ParticleVoxelRenderer.CodingKeys;
}

unint64_t sub_1B1BD0250()
{
  unint64_t result;

  result = qword_1EEF5C0E8;
  if (!qword_1EEF5C0E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280DB4, &type metadata for ParticleVoxelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C0E8);
  }
  return result;
}

unint64_t sub_1B1BD0298()
{
  unint64_t result;

  result = qword_1EEF5C0F0;
  if (!qword_1EEF5C0F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280D24, &type metadata for ParticleVoxelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C0F0);
  }
  return result;
}

unint64_t sub_1B1BD02E0()
{
  unint64_t result;

  result = qword_1EEF5C0F8;
  if (!qword_1EEF5C0F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280D4C, &type metadata for ParticleVoxelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C0F8);
  }
  return result;
}

uint64_t sub_1B1BD0324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1A12038(a1, a3, *(uint64_t **)(v3 + 88), *(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 16));
}

__n128 initializeWithTake for RenderStates(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for RenderStates(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderStates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChunkQueryCursor()
{
  return &type metadata for ChunkQueryCursor;
}

uint64_t sub_1B1BD0450@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3[0] = 0xD000000000000016;
  v3[1] = 0x80000001B23330E0;
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = MEMORY[0x1E0DEE9D8];
  v3[5] = 0xD000000000000016;
  v3[6] = 0x80000001B2333100;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = MEMORY[0x1E0DEE9D8];
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  nullsub_16(v3);
  return sub_1B19F66A0((uint64_t)v3, a1, &qword_1ED4B8CF8);
}

void *sub_1B1BD04EC(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  id v13;
  char *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  _BYTE v21[80];
  _OWORD v22[4];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(a5 + 8);
  swift_retain();
  sub_1B1D15764(v7, (uint64_t)v21);
  swift_release();
  sub_1B19F66A0((uint64_t)v21, (uint64_t)v22, qword_1ED4B8BB0);
  if ((v23 & 1) != 0)
  {
    v19 = xmmword_1B2244E20;
    v18 = xmmword_1B2244D90;
    v17 = xmmword_1B2244DD0;
    v16 = xmmword_1B2244DB0;
  }
  else
  {
    v16 = v22[0];
    v17 = v22[1];
    v18 = v22[2];
    v19 = v22[3];
  }
  swift_retain();
  v8 = (void *)sub_1B1D22DA8(0, 80);
  v10 = v9;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v20[0] = 0;
    v20[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v11 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v20[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v11, v20, 0xD000000000000044, 0x80000001B2333090);
    swift_release();
    swift_release();
  }
  else
  {
    v12 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v13 = v8;
    v14 = &v12[v10];
    *(_OWORD *)v14 = v16;
    *((_OWORD *)v14 + 1) = v17;
    *((_OWORD *)v14 + 2) = v18;
    *((_OWORD *)v14 + 3) = v19;
    *((float *)v14 + 16) = a1;
    *((float *)v14 + 17) = a2;
  }
  swift_release();
  return v8;
}

uint64_t sub_1B1BD0760(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1B1BD0CB4(0, &qword_1EEF5C110, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BD0C70();
  sub_1B222A180();
  v12 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v11 = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1BD0884(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F95E80(*a1, *a2);
}

uint64_t sub_1B1BD0890()
{
  _BYTE *v0;

  if (*v0)
    return 0x7469736E65746E69;
  else
    return 0x656C616373;
}

uint64_t sub_1B1BD08CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BD0A20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BD08F0()
{
  sub_1B1BD0C70();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD0918()
{
  sub_1B1BD0C70();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BD0940()
{
  return 0x100000001;
}

float sub_1B1BD095C()
{
  return -1.0;
}

uint64_t sub_1B1BD0964()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(4);
  *(_QWORD *)(v0 + 88) = sub_1B1BD0450;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

void *sub_1B1BD09B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;

  return sub_1B1BD04EC(*v3, v3[1], a1, a2, a3);
}

void sub_1B1BD09C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B1BD0B14(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1BD09E8(_QWORD *a1)
{
  return sub_1B1BD0760(a1);
}

double sub_1B1BD0A00@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = 0.00781250186;
  *a1 = 0x3F80000040000000;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAOSphereRenderer()
{
  return &type metadata for ParticleAOSphereRenderer;
}

uint64_t sub_1B1BD0A20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C616373 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

float sub_1B1BD0B14(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v10;
  _BYTE v12[16];

  sub_1B1BD0CB4(0, &qword_1EEF5C100, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BD0C70();
  sub_1B222A150();
  if (!v1)
  {
    v12[15] = 0;
    sub_1B22297F0();
    v2 = v10;
    v12[14] = 1;
    sub_1B22297F0();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1BD0C70()
{
  unint64_t result;

  result = qword_1EEF5C108;
  if (!qword_1EEF5C108)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281030, &type metadata for ParticleAOSphereRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C108);
  }
  return result;
}

void sub_1B1BD0CB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1BD0C70();
    v7 = a3(a1, &type metadata for ParticleAOSphereRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleAOSphereRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BD0D5C + 4 * byte_1B2280E95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BD0D90 + 4 * byte_1B2280E90[v4]))();
}

uint64_t sub_1B1BD0D90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BD0D98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BD0DA0);
  return result;
}

uint64_t sub_1B1BD0DAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BD0DB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BD0DB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BD0DC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAOSphereRenderer.CodingKeys()
{
  return &type metadata for ParticleAOSphereRenderer.CodingKeys;
}

unint64_t sub_1B1BD0DE0()
{
  unint64_t result;

  result = qword_1EEF5C118;
  if (!qword_1EEF5C118)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281008, &type metadata for ParticleAOSphereRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C118);
  }
  return result;
}

unint64_t sub_1B1BD0E28()
{
  unint64_t result;

  result = qword_1EEF5C120;
  if (!qword_1EEF5C120)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280F78, &type metadata for ParticleAOSphereRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C120);
  }
  return result;
}

unint64_t sub_1B1BD0E70()
{
  unint64_t result;

  result = qword_1EEF5C128;
  if (!qword_1EEF5C128)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280FA0, &type metadata for ParticleAOSphereRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C128);
  }
  return result;
}

uint64_t sub_1B1BD0EB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[176];

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v4 = 0u;
    v5 = 0u;
    v6 = 0;
    v7 = 0xD000000000000016;
    v8 = 0x80000001B2333190;
    v9 = 0;
    v10 = 0;
    v11 = MEMORY[0x1E0DEE9D8];
    v12 = 0u;
    v13 = 0u;
    *(_QWORD *)&v14 = 0;
    *((_QWORD *)&v14 + 1) = 0xD000000000000016;
    *(_QWORD *)&v15 = 0x80000001B23331B0;
    *((_QWORD *)&v15 + 1) = 0;
    *(_QWORD *)&v16 = 0;
    *((_QWORD *)&v16 + 1) = MEMORY[0x1E0DEE9D8];
    v17 = 0uLL;
  }
  else
  {
    *(_QWORD *)&v4 = 0xD000000000000016;
    *((_QWORD *)&v4 + 1) = 0x80000001B2333170;
    v5 = 0uLL;
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = 0xD000000000000016;
    v8 = 0x80000001B2333190;
    v9 = 0;
    v10 = 0;
    v11 = MEMORY[0x1E0DEE9D8];
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
  }
  nullsub_16(&v4);
  sub_1B19F66A0((uint64_t)&v4, (uint64_t)v18, &qword_1ED4B8CF8);
  return sub_1B19F66A0((uint64_t)v18, a2, &qword_1ED4B8CF8);
}

void *sub_1B1BD0FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  float v6;
  float v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  char *v13;
  id v14;
  char *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21[2];
  _BYTE v22[80];
  _OWORD v23[4];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a3 + 8);
  swift_retain();
  sub_1B1D15764(v4, (uint64_t)v22);
  swift_release();
  sub_1B19F66A0((uint64_t)v22, (uint64_t)v23, qword_1ED4B8BB0);
  if ((v24 & 1) != 0)
  {
    v20 = xmmword_1B2244E20;
    v19 = xmmword_1B2244D90;
    v18 = xmmword_1B2244DD0;
    v17 = xmmword_1B2244DB0;
  }
  else
  {
    v17 = v23[0];
    v18 = v23[1];
    v19 = v23[2];
    v20 = v23[3];
  }
  v6 = *(float *)(v3 + 12);
  v5 = *(_DWORD *)(v3 + 16);
  v7 = *(float *)(v3 + 20);
  swift_retain();
  v8 = (void *)sub_1B1D22DA8(0, 80);
  v10 = v9;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v21[0] = 0;
    v21[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v11 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v21[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v11, v21, 0xD00000000000004ALL, 0x80000001B2333120);
    swift_release();
    swift_release();
  }
  else
  {
    v12 = fminf(fmaxf(log2f(1.0 - v7), -10000000.0), -0.01);
    v13 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v14 = v8;
    v15 = &v13[v10];
    *(_OWORD *)v15 = v17;
    *((_OWORD *)v15 + 1) = v18;
    *((_OWORD *)v15 + 2) = v19;
    *((_OWORD *)v15 + 3) = v20;
    *((float *)v15 + 16) = v6 * 3.0;
    *((_DWORD *)v15 + 17) = v5;
    *((float *)v15 + 18) = v12;
  }
  swift_release();
  return v8;
}

uint64_t sub_1B1BD1280(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[8];
  uint64_t v13;

  v3 = v1;
  sub_1B1BD1D30(0, &qword_1EEF5C140, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BD1CEC();
  sub_1B222A180();
  v13 = *v3;
  v12[7] = 0;
  type metadata accessor for MTLCullMode(0);
  sub_1B1BD1D8C(&qword_1EEF58C80, (uint64_t)&protocol conformance descriptor for MTLCullMode);
  sub_1B2229958();
  if (!v2)
  {
    v12[6] = *((_BYTE *)v3 + 8);
    v12[5] = 1;
    sub_1B1A719C8();
    sub_1B2229958();
    v12[4] = 2;
    sub_1B2229934();
    v12[3] = 3;
    sub_1B2229934();
    v12[2] = 4;
    sub_1B2229934();
    v12[1] = 5;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B1BD1484(char *a1)
{
  sub_1B1F97528(*a1);
}

uint64_t sub_1B1BD1490()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BD14C0 + 4 * byte_1B2281080[*v0]))(0x65646F4D6C6C7563, 0xE800000000000000);
}

uint64_t sub_1B1BD14C0()
{
  return 0x65646F4D74726F73;
}

uint64_t sub_1B1BD14D4()
{
  return 0x656C616373;
}

uint64_t sub_1B1BD14E8()
{
  return 0x6168706C61;
}

uint64_t sub_1B1BD14FC()
{
  return 0x7265776F70;
}

uint64_t sub_1B1BD1510()
{
  return 0x536873654D657375;
}

uint64_t sub_1B1BD1534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BD17F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1BD1558(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1B1BD1564()
{
  sub_1B1BD1CEC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD158C()
{
  sub_1B1BD1CEC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BD15B4()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1B1BD15BC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1B1BD15C4()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v2 = sub_1B20C3C0C(4);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *v1;
  *(_OWORD *)(v3 + 25) = *(_OWORD *)((char *)v1 + 9);
  *(_QWORD *)(v2 + 88) = sub_1B1BD17F0;
  *(_QWORD *)(v2 + 96) = v3;
  swift_release();
  return v2;
}

uint64_t sub_1B1BD1644(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  int v3;

  v3 = *(unsigned __int8 *)(v2 + 24);
  *(_QWORD *)(result + 16) = 4;
  if (v3 == 1)
  {
    a2[3] = 0;
    a2[7] = 1;
  }
  else
  {
    a2[4] = 3;
  }
  return result;
}

double sub_1B1BD1678@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _OWORD v5[2];

  sub_1B1BD1A84(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = v5[0];
    result = *(double *)((char *)v5 + 9);
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)((char *)v5 + 9);
  }
  return result;
}

uint64_t sub_1B1BD16B8(_QWORD *a1)
{
  return sub_1B1BD1280(a1);
}

uint64_t sub_1B1BD16CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
    return (*(_QWORD *)a1 != *(_QWORD *)a2) | (*(unsigned __int8 *)(a2 + 24) ^ *(unsigned __int8 *)(a1 + 24)) & 1u;
  else
    return 1;
}

double sub_1B1BD1710@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 4;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleGaussianRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleGaussianRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGaussianRenderer()
{
  return &type metadata for ParticleGaussianRenderer;
}

uint64_t sub_1B1BD17E0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1BD17F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B1BD0EB4(v1 + 16, a1);
}

uint64_t sub_1B1BD17F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65646F4D6C6C7563 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65646F4D74726F73 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6168706C61 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7265776F70 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x536873654D657375 && a2 == 0xED00007265646168)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1B1BD1A84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  uint64_t result;
  _BYTE v21[8];
  uint64_t v22;

  sub_1B1BD1D30(0, &qword_1EEF5C130, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v21[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BD1CEC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  type metadata accessor for MTLCullMode(0);
  v21[7] = 0;
  sub_1B1BD1D8C(&qword_1ED4BA620, (uint64_t)&protocol conformance descriptor for MTLCullMode);
  sub_1B2229814();
  v11 = v22;
  v21[5] = 1;
  sub_1B1A71984();
  sub_1B2229814();
  v12 = v21[6];
  v21[4] = 2;
  sub_1B22297F0();
  v14 = v13;
  v21[3] = 3;
  sub_1B22297F0();
  v16 = v15;
  v21[2] = 4;
  sub_1B22297F0();
  v18 = v17;
  v21[1] = 5;
  v19 = sub_1B22297D8();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 12) = v14;
  *(_DWORD *)(a2 + 16) = v16;
  *(_DWORD *)(a2 + 20) = v18;
  *(_BYTE *)(a2 + 24) = v19 & 1;
  return result;
}

unint64_t sub_1B1BD1CEC()
{
  unint64_t result;

  result = qword_1EEF5C138;
  if (!qword_1EEF5C138)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281220, &type metadata for ParticleGaussianRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C138);
  }
  return result;
}

void sub_1B1BD1D30(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1BD1CEC();
    v7 = a3(a1, &type metadata for ParticleGaussianRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B1BD1D8C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MTLCullMode(255);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Scheduler.Action(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleGaussianRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1BD1EA8 + 4 * byte_1B228108B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1BD1EDC + 4 * byte_1B2281086[v4]))();
}

uint64_t sub_1B1BD1EDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BD1EE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BD1EECLL);
  return result;
}

uint64_t sub_1B1BD1EF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BD1F00);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1BD1F04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BD1F0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleGaussianRenderer.CodingKeys()
{
  return &type metadata for ParticleGaussianRenderer.CodingKeys;
}

unint64_t sub_1B1BD1F2C()
{
  unint64_t result;

  result = qword_1EEF5C148;
  if (!qword_1EEF5C148)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22811F8, &type metadata for ParticleGaussianRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C148);
  }
  return result;
}

unint64_t sub_1B1BD1F74()
{
  unint64_t result;

  result = qword_1EEF5C150;
  if (!qword_1EEF5C150)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281168, &type metadata for ParticleGaussianRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C150);
  }
  return result;
}

unint64_t sub_1B1BD1FBC()
{
  unint64_t result;

  result = qword_1EEF5C158;
  if (!qword_1EEF5C158)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281190, &type metadata for ParticleGaussianRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C158);
  }
  return result;
}

uint64_t destroy for FunctionDescriptor()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FunctionDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FunctionDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FunctionDescriptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12MetadataTypeO6CustomVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s12MetadataTypeO6CustomVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FunctionDescriptor()
{
  return &type metadata for FunctionDescriptor;
}

_QWORD *sub_1B1BD2224(void (*a1)(__int128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  unsigned __int8 v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  __int128 v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  id v41;

  v4 = v3;
  v5 = a3;
  v27 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v26 = v5;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_20;
    }
    v14 = v11 + 1;
    if (v11 + 1 >= v10)
      goto LABEL_28;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    if (!v15)
    {
      v14 = v11 + 2;
      if (v11 + 2 >= v10)
        goto LABEL_28;
      v15 = *(_QWORD *)(v27 + 8 * v14);
      if (!v15)
      {
        v14 = v11 + 3;
        if (v11 + 3 >= v10)
          goto LABEL_28;
        v15 = *(_QWORD *)(v27 + 8 * v14);
        if (!v15)
        {
          v14 = v11 + 4;
          if (v11 + 4 >= v10)
            goto LABEL_28;
          v15 = *(_QWORD *)(v27 + 8 * v14);
          if (!v15)
          {
            v14 = v11 + 5;
            if (v11 + 5 >= v10)
              goto LABEL_28;
            v15 = *(_QWORD *)(v27 + 8 * v14);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_19:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v11 = v14;
LABEL_20:
    v41 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v13);
    v16 = v41;
    a1(&v34, &v41);
    if (v4)
    {
      v24 = v33;
      swift_bridgeObjectRelease();
      swift_release();

      return v24;
    }

    v17 = v35;
    if (v35 != 255)
    {
      v31 = v37;
      v32 = v36;
      v30 = v38;
      v28 = v34;
      v29 = v39;
      v18 = v40;
      v19 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_1B1C64EC0(0, v33[2] + 1, 1, v33);
      v20 = v19;
      v21 = v19[2];
      v33 = v20;
      v22 = v20[3];
      if (v21 >= v22 >> 1)
        v33 = sub_1B1C64EC0(v22 > 1, v21 + 1, 1, v33);
      v33[2] = v21 + 1;
      v23 = &v33[14 * v21];
      *((_OWORD *)v23 + 2) = v28;
      *((_BYTE *)v23 + 48) = v17 & 1;
      *((_OWORD *)v23 + 4) = v32;
      *((_OWORD *)v23 + 5) = v31;
      *((_OWORD *)v23 + 6) = v30;
      *((_OWORD *)v23 + 7) = v29;
      *((_BYTE *)v23 + 128) = v18;
      v5 = v26;
    }
  }
  while (v10 - 6 != v11)
  {
    v15 = *(_QWORD *)(v5 + 8 * v11++ + 112);
    if (v15)
    {
      v14 = v11 + 5;
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_release();
  return v33;
}

uint64_t sub_1B1BD24F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1 = v0;
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_1B2229430();
  v3 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v3;
  v12 = v2;
  sub_1B2228890();
  v4 = v0[4];
  sub_1B1C7B528(v4);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v5 = v0[3];
  if (v5)
  {
    v6 = objc_msgSend((id)swift_unknownObjectRetain(), sel_label);
    if (v6)
    {
      v7 = v6;
      sub_1B222874C();
      swift_unknownObjectRelease();

    }
    else
    {
      v9[0] = 0;
      v9[1] = 0xE000000000000000;
      v10 = v5;
      sub_1B22295EC();
      swift_unknownObjectRelease();
    }
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1B40080((uint64_t)(v1 + 2), (uint64_t)v9);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1B40D5C((uint64_t)v9);
  swift_bridgeObjectRetain();
  v10 = sub_1B1BD36A8(v3, v2, v5, v4);
  sub_1B1B40D84();
  sub_1B2228944();
  swift_bridgeObjectRelease();
  sub_1B1B40274((uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1BD2708(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B216D5C4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B1BD29D8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B1BD2770()
{
  uint64_t *v0;

  return sub_1B1BD36A8(*v0, v0[1], v0[3], v0[4]);
}

uint64_t sub_1B1BD277C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1B2228824();
  v2 = *(_QWORD *)(v1 + 16);
  sub_1B222A078();
  if (v2)
  {
    v3 = v1 + 64;
    do
    {
      v4 = *(_QWORD *)(v3 - 32);
      v5 = *(_QWORD *)(v3 - 24);
      v6 = *(unsigned __int8 *)(v3 - 16);
      sub_1B1B2A86C(v3, (uint64_t)&v8);
      sub_1B222A078();
      if (v6 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1B2228824();
      }
      else
      {
        sub_1B222A078();
      }
      v3 += 112;
      sub_1B1B29888();
      sub_1B1B40E74(v4, v5, v6);
      --v2;
    }
    while (v2);
  }
  return sub_1B222A078();
}

uint64_t sub_1B1BD286C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[80];

  v1 = *(_QWORD *)(v0 + 32);
  sub_1B222A06C();
  sub_1B2228824();
  v2 = *(_QWORD *)(v1 + 16);
  sub_1B222A078();
  if (v2)
  {
    v3 = v1 + 64;
    do
    {
      v4 = *(_QWORD *)(v3 - 32);
      v5 = *(_QWORD *)(v3 - 24);
      v6 = *(unsigned __int8 *)(v3 - 16);
      sub_1B1B2A86C(v3, (uint64_t)v8);
      sub_1B222A078();
      if (v6 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1B2228824();
      }
      else
      {
        sub_1B222A078();
      }
      v3 += 112;
      sub_1B1B29888();
      sub_1B1B40E74(v4, v5, v6);
      --v2;
    }
    while (v2);
  }
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BD2974(uint64_t *a1, uint64_t *a2)
{
  return sub_1B1BD339C(*a1, a1[1], a1[3], a1[4], *a2, a2[1], a2[3], a2[4]);
}

unint64_t sub_1B1BD2994()
{
  unint64_t result;

  result = qword_1EEF5C160;
  if (!qword_1EEF5C160)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281288, &type metadata for FunctionDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF5C160);
  }
  return result;
}

uint64_t sub_1B1BD29D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;

  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if (v3)
      return sub_1B1BD3000(0, v3, 1, a1);
    return result;
  }
  v79 = result;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v76 = a1;
  if (v3 >= 2)
  {
    v6 = v5 >> 1;
    v7 = sub_1B2228B0C();
    *(_QWORD *)(v7 + 16) = v6;
    v78 = v7;
    v87 = (char *)(v7 + 32);
    goto LABEL_12;
  }
  v8 = MEMORY[0x1E0DEE9D8];
  v87 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v3 == 1)
  {
    v78 = MEMORY[0x1E0DEE9D8];
LABEL_12:
    v9 = 0;
    v10 = *a1;
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v80 = v3;
    do
    {
      v13 = v9++;
      if (v9 < v3)
      {
        v14 = (uint64_t *)(v10 + 112 * v9);
        v15 = (uint64_t *)(v10 + 112 * v13);
        v16 = *v15;
        v17 = *((unsigned __int8 *)v15 + 16);
        if (*((_BYTE *)v14 + 16))
          v18 = 0;
        else
          v18 = *v14;
        if (v17)
          v19 = 0;
        else
          v19 = v16;
        v9 = v13 + 2;
        if (v13 + 2 < v3)
        {
          v20 = v10 + 128 + 112 * v13;
          while (1)
          {
            v21 = *(_QWORD *)(v20 + 96);
            if (*(_BYTE *)(v20 + 112))
              v21 = 0;
            v22 = *(_BYTE *)v20 ? 0 : *(_QWORD *)(v20 - 16);
            if (v18 < v19 == v21 >= v22)
              break;
            v20 += 112;
            if (v3 == ++v9)
            {
              v9 = v3;
              break;
            }
          }
        }
        if (v18 < v19 && v13 < v9)
        {
          v23 = 112 * v9;
          v24 = v9;
          v25 = v13;
          v77 = v13;
          v26 = 112 * v13;
          v81 = v11;
          do
          {
            if (v25 != --v24)
            {
              v27 = v10 + v23;
              v28 = *(_BYTE *)(v10 + v26 + 16);
              v29 = *(_BYTE *)(v10 + v26 + 96);
              v82 = *(_OWORD *)(v10 + v26);
              v85 = *(_OWORD *)(v10 + v26 + 48);
              v86 = *(_OWORD *)(v10 + v26 + 32);
              v83 = *(_OWORD *)(v10 + v26 + 80);
              v84 = *(_OWORD *)(v10 + v26 + 64);
              memmove((void *)(v10 + v26), (const void *)(v10 + v23 - 112), 0x70uLL);
              *(_OWORD *)(v27 - 112) = v82;
              *(_BYTE *)(v27 - 96) = v28;
              *(_OWORD *)(v27 - 80) = v86;
              *(_OWORD *)(v27 - 64) = v85;
              *(_OWORD *)(v27 - 48) = v84;
              *(_OWORD *)(v27 - 32) = v83;
              *(_BYTE *)(v27 - 16) = v29;
              v11 = v81;
            }
            ++v25;
            v23 -= 112;
            v26 += 112;
          }
          while (v25 < v24);
          v3 = v80;
          v13 = v77;
        }
      }
      if (v9 < v3 && v9 - v13 < v79)
      {
        v30 = v13 + v79;
        if (v13 + v79 >= v3)
          v30 = v3;
        if (v9 != v30)
        {
          v31 = v10 - 112 + 112 * v9;
          do
          {
            v32 = v13;
            v33 = v31;
            do
            {
              v34 = (_OWORD *)(v33 + 112);
              v35 = *(_QWORD *)(v33 + 112);
              v36 = *(_BYTE *)(v33 + 128);
              v37 = *(_QWORD *)v33;
              if (v36)
                v38 = 0;
              else
                v38 = *(_QWORD *)(v33 + 112);
              if (*(_BYTE *)(v33 + 16))
                v37 = 0;
              if (v38 >= v37)
                break;
              v39 = *(_QWORD *)(v33 + 120);
              v40 = *(_BYTE *)(v33 + 208);
              v41 = *(_OWORD *)(v33 + 144);
              v42 = *(_OWORD *)(v33 + 160);
              v43 = *(_OWORD *)(v33 + 176);
              v44 = *(_OWORD *)(v33 + 192);
              v45 = *(_OWORD *)(v33 + 80);
              *(_OWORD *)(v33 + 176) = *(_OWORD *)(v33 + 64);
              *(_OWORD *)(v33 + 192) = v45;
              *(_OWORD *)(v33 + 208) = *(_OWORD *)(v33 + 96);
              v46 = *(_OWORD *)(v33 + 16);
              *v34 = *(_OWORD *)v33;
              *(_OWORD *)(v33 + 128) = v46;
              v48 = *(_OWORD *)(v33 + 32);
              v47 = *(_OWORD *)(v33 + 48);
              *(_QWORD *)v33 = v35;
              *(_QWORD *)(v33 + 8) = v39;
              *(_BYTE *)(v33 + 16) = v36;
              *(_OWORD *)(v33 + 32) = v41;
              *(_OWORD *)(v33 + 48) = v42;
              *(_OWORD *)(v33 + 64) = v43;
              *(_OWORD *)(v33 + 80) = v44;
              *(_BYTE *)(v33 + 96) = v40;
              v33 -= 112;
              ++v32;
              v34[2] = v48;
              v34[3] = v47;
            }
            while (v9 != v32);
            ++v9;
            v31 += 112;
          }
          while (v9 != v30);
          v9 = v30;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1B216CC74(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v50 = *((_QWORD *)v11 + 2);
      v49 = *((_QWORD *)v11 + 3);
      v12 = v50 + 1;
      if (v50 >= v49 >> 1)
        v11 = sub_1B216CC74(v49 > 1, v50 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v12;
      v51 = v11 + 32;
      v52 = &v11[16 * v50 + 32];
      *(_QWORD *)v52 = v13;
      *((_QWORD *)v52 + 1) = v9;
      if (v50)
      {
        while (1)
        {
          v53 = v12 - 1;
          if (v12 >= 4)
          {
            v58 = &v51[16 * v12];
            v59 = *((_QWORD *)v58 - 7) - *((_QWORD *)v58 - 8);
            v56 = *((_QWORD *)v58 - 5) - *((_QWORD *)v58 - 6);
            v57 = v12 - 2;
            v60 = &v51[16 * v12 - 32];
            v54 = *(_QWORD *)v60;
            v55 = *((_QWORD *)v60 + 1);
            if (v56 - v54 + v55 >= v59)
            {
              v63 = v56 < *(_QWORD *)&v51[16 * v53 + 8] - *(_QWORD *)&v51[16 * v53];
              goto LABEL_71;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v61 = *(_QWORD *)&v51[16 * v12 - 24] - *(_QWORD *)&v51[16 * v12 - 32];
              v62 = *(_QWORD *)&v51[16 * v53 + 8] - *(_QWORD *)&v51[16 * v53];
LABEL_68:
              if (v62 < v61)
                goto LABEL_14;
              goto LABEL_73;
            }
            v54 = *((_QWORD *)v11 + 6);
            v55 = *((_QWORD *)v11 + 7);
            v56 = *((_QWORD *)v11 + 5) - *((_QWORD *)v11 + 4);
            v57 = 1;
          }
          v61 = v55 - v54;
          v62 = *(_QWORD *)&v51[16 * v53 + 8] - *(_QWORD *)&v51[16 * v53];
          if (v61 + v62 < v56)
            goto LABEL_68;
          v63 = v56 < v62;
LABEL_71:
          if (v63)
            v53 = v57;
LABEL_73:
          v64 = v11;
          v65 = &v51[16 * v53 - 16];
          v66 = *(_QWORD *)v65;
          v67 = &v51[16 * v53];
          v68 = *((_QWORD *)v67 + 1);
          sub_1B1BD30BC((char *)(v10 + 112 * *(_QWORD *)v65), (char *)(v10 + 112 * *(_QWORD *)v67), v10 + 112 * v68, v87);
          if (v1)
            goto LABEL_76;
          *(_QWORD *)v65 = v66;
          *((_QWORD *)v65 + 1) = v68;
          v11 = v64;
          v69 = *((_QWORD *)v64 + 2);
          v12 = v69 - 1;
          memmove(&v51[16 * v53], v67 + 16, 16 * (v69 - 1 - v53));
          *((_QWORD *)v11 + 2) = v69 - 1;
          if (v69 <= 2)
            goto LABEL_14;
        }
      }
      v12 = 1;
LABEL_14:
      v3 = v80;
    }
    while (v9 < v80);
    v8 = v78;
    goto LABEL_80;
  }
  v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_80:
  v78 = v8;
  if (v12 >= 2)
  {
    v70 = *v76;
    do
    {
      v71 = *(_QWORD *)&v11[16 * v12];
      v72 = &v11[16 * v12 + 16];
      v73 = *((_QWORD *)v72 + 1);
      sub_1B1BD30BC((char *)(v70 + 112 * v71), (char *)(v70 + 112 * *(_QWORD *)v72), v70 + 112 * v73, v87);
      if (v1)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1B216D510((uint64_t)v11);
      v74 = &v11[16 * v12];
      *(_QWORD *)v74 = v71;
      *((_QWORD *)v74 + 1) = v73;
      v75 = *((_QWORD *)v11 + 2);
      memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v75 - v12));
      *((_QWORD *)v11 + 2) = v75 - 1;
      v12 = v75 - 1;
    }
    while (v75 > 2);
  }
LABEL_76:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v78 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BD3000(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a3 != a2)
  {
    v4 = *a4 + 112 * a3 - 112;
    do
    {
      v5 = result;
      v6 = v4;
      do
      {
        v7 = (_OWORD *)(v6 + 112);
        v8 = *(_QWORD *)(v6 + 112);
        v9 = *(_BYTE *)(v6 + 128);
        v10 = *(_QWORD *)v6;
        if (v9)
          v11 = 0;
        else
          v11 = *(_QWORD *)(v6 + 112);
        if (*(_BYTE *)(v6 + 16))
          v10 = 0;
        if (v11 >= v10)
          break;
        v12 = *(_QWORD *)(v6 + 120);
        v13 = *(_BYTE *)(v6 + 208);
        v14 = *(_OWORD *)(v6 + 144);
        v15 = *(_OWORD *)(v6 + 160);
        v16 = *(_OWORD *)(v6 + 176);
        v17 = *(_OWORD *)(v6 + 192);
        v18 = *(_OWORD *)(v6 + 80);
        *(_OWORD *)(v6 + 176) = *(_OWORD *)(v6 + 64);
        *(_OWORD *)(v6 + 192) = v18;
        *(_OWORD *)(v6 + 208) = *(_OWORD *)(v6 + 96);
        v19 = *(_OWORD *)(v6 + 16);
        *v7 = *(_OWORD *)v6;
        *(_OWORD *)(v6 + 128) = v19;
        v21 = *(_OWORD *)(v6 + 32);
        v20 = *(_OWORD *)(v6 + 48);
        *(_QWORD *)v6 = v8;
        *(_QWORD *)(v6 + 8) = v12;
        *(_BYTE *)(v6 + 16) = v9;
        *(_OWORD *)(v6 + 32) = v14;
        *(_OWORD *)(v6 + 48) = v15;
        *(_OWORD *)(v6 + 64) = v16;
        *(_OWORD *)(v6 + 80) = v17;
        *(_BYTE *)(v6 + 96) = v13;
        v6 -= 112;
        ++v5;
        v7[2] = v21;
        v7[3] = v20;
      }
      while (a3 != v5);
      ++a3;
      v4 += 112;
    }
    while (a3 != a2);
  }
  return result;
}

uint64_t sub_1B1BD30BC(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char *v27;
  const void *v28;
  char *v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 112;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 112;
  v29 = __dst;
  v28 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -111)
    {
      v17 = 112 * v11;
      if (a4 != __src || &__src[v17] <= a4)
        memmove(a4, __src, 112 * v11);
      v18 = &v4[v17];
      v27 = &v4[v17];
      v29 = v6;
      if (v7 < v6 && v10 >= 112)
      {
        v19 = (char *)(a3 - 112);
        v20 = v6;
        while (1)
        {
          v21 = v19 + 112;
          v22 = *((_QWORD *)v18 - 14);
          v24 = *((_QWORD *)v20 - 14);
          v20 -= 112;
          v23 = v24;
          if (*(v18 - 96))
            v22 = 0;
          if (v20[16])
            v25 = 0;
          else
            v25 = v23;
          if (v22 >= v25)
          {
            v27 = v18 - 112;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
              memmove(v19, v18 - 112, 0x70uLL);
            v20 = v6;
            v18 -= 112;
            if (v6 <= v7)
              goto LABEL_48;
          }
          else
          {
            if (v21 != v6 || v19 >= v6)
              memmove(v19, v20, 0x70uLL);
            v29 = v20;
            if (v20 <= v7)
              goto LABEL_48;
          }
          v19 -= 112;
          v6 = v20;
          if (v18 <= v4)
            goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -111)
  {
    v12 = 112 * v9;
    if (a4 != __dst || &__dst[v12] <= a4)
      memmove(a4, __dst, v12);
    v13 = &v4[v12];
    v27 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 112)
    {
      do
      {
        v14 = *(_QWORD *)v6;
        if (v6[16])
          v14 = 0;
        if (v4[16])
          v15 = 0;
        else
          v15 = *(_QWORD *)v4;
        if (v14 >= v15)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x70uLL);
          v4 += 112;
          v28 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 112;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            memmove(v7, v6, 0x70uLL);
        }
        v7 += 112;
        if (v4 >= v13)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v29 = v7;
    }
LABEL_48:
    sub_1B216D01C((void **)&v29, &v28, &v27);
    return 1;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1BD339C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (sub_1B2229D24() & 1) != 0)
  {
    if (a3)
    {
      if (a7 && a3 == a7)
        return sub_1B1CC95F4(a4, a8);
    }
    else if (!a7)
    {
      return sub_1B1CC95F4(a4, a8);
    }
  }
  return 0;
}

uint64_t sub_1B1BD3420@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[4];
  _QWORD *v20;

  v6 = a1;
  v8 = objc_msgSend(a1, sel_functionConstantsDictionary);
  sub_1B1B42540();
  v9 = sub_1B2228530();

  if (*(_QWORD *)(v9 + 16))
  {
    MEMORY[0x1E0C80A78](v10, v11);
    v19[2] = a3;
    swift_bridgeObjectRetain();
    v12 = sub_1B1BD2224((void (*)(__int128 *__return_ptr, id *))sub_1B1BD37BC, (uint64_t)v19, v9);
    swift_bridgeObjectRelease();
    v20 = v12;
    swift_bridgeObjectRetain();
    sub_1B1BD2708((uint64_t *)&v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = (uint64_t)v20;
    v14 = objc_msgSend(v6, sel_name);
    v15 = sub_1B222874C();
    v17 = v16;

    swift_unknownObjectRetain();
    result = swift_unknownObjectRetain();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v15 = 0;
    v17 = 0;
    v6 = 0;
    a2 = 0;
    v13 = 0;
  }
  *a4 = v15;
  a4[1] = v17;
  a4[2] = (uint64_t)v6;
  a4[3] = a2;
  a4[4] = v13;
  return result;
}

uint64_t sub_1B1BD35A8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X4>, uint64_t *a4@<X8>)
{
  void *v6;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16[5];

  v6 = a3;
  if (!a3)
  {
    swift_unknownObjectRetain();
    v6 = a2;
  }
  swift_unknownObjectRetain();
  v8 = (void *)sub_1B2228728();
  v9 = objc_msgSend(v6, sel_newFunctionWithName_, v8);

  if (v9)
  {
    swift_unknownObjectRetain();
    sub_1B1BD3420(v9, (uint64_t)v6, a1, v16);
    v10 = v16[0];
    v11 = v16[1];
    v12 = v16[2];
    v13 = v16[3];
    v14 = v16[4];
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  result = swift_unknownObjectRelease();
  *a4 = v10;
  a4[1] = v11;
  a4[2] = v12;
  a4[3] = v13;
  a4[4] = v14;
  return result;
}

uint64_t sub_1B1BD36A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE v11[80];

  sub_1B222A06C();
  sub_1B2228824();
  v5 = *(_QWORD *)(a4 + 16);
  sub_1B222A078();
  if (v5)
  {
    v6 = a4 + 64;
    do
    {
      v7 = *(_QWORD *)(v6 - 32);
      v8 = *(_QWORD *)(v6 - 24);
      v9 = *(unsigned __int8 *)(v6 - 16);
      sub_1B1B2A86C(v6, (uint64_t)v11);
      sub_1B222A078();
      if (v9 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1B2228824();
      }
      else
      {
        sub_1B222A078();
      }
      v6 += 112;
      sub_1B1B29888();
      sub_1B1B40E74(v7, v8, v9);
      --v5;
    }
    while (v5);
  }
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BD37BC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C7CF1C(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_1B1BD37D4()
{
  qword_1EEF5C168 = (uint64_t)&unk_1E63B6608;
}

void sub_1B1BD37E8()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1BD3818()
{
  char v0;

  sub_1B1BD44C4();
  if ((v0 & 1) == 0)
    sub_1B2228890();
  return 0x736F656E6F687069;
}

void sub_1B1BD38C4()
{
  __asm { BR              X9 }
}

uint64_t sub_1B1BD3904()
{
  int v0;
  char v1;
  uint64_t v2;
  uint64_t result;

  v1 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v2 = 56;
    if (v0 != 2)
      v2 = 13617;
    if (v0 == 1)
      return 12849;
    else
      return v2;
  }
  return result;
}

void sub_1B1BD39F0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1BD3A38()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_1B1BD3AA0 + 4 * byte_1B22812FC[*(unsigned __int8 *)(v0 + 17)]))(0x34365F363878);
}

uint64_t sub_1B1BD3AA0()
{
  uint64_t v1;

  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1BD38C4();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1BD3B58(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD v65[4];
  _QWORD v66[2];
  uint64_t v67;
  unint64_t v68;

  v2 = v1;
  sub_1B1BD7144();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_recursive_lock_lock_with_options();
  if (v1[11] || v1[13])
    return os_unfair_recursive_lock_unlock();
  sub_1B1BD37E8();
  v10 = v9;
  v12 = v11;
  v13 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  v14 = *(_QWORD *)(a1 + 16);
  v65[2] = v13;
  v65[3] = v14;
  sub_1B1BD4144();
  v65[1] = v15;
  v17 = v16;
  v18 = v16[2];
  v19 = v18 + 5;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && (v21 = v17[3], v22 = v21 >> 1, (uint64_t)(v21 >> 1) >= v19))
  {
    v23 = v17;
  }
  else
  {
    if (v18 <= v19)
      v24 = v18 + 5;
    else
      v24 = v18;
    v23 = sub_1B1C63044(isUniquelyReferenced_nonNull_native, v24, 1, v17);
    v21 = v23[3];
    v22 = v21 >> 1;
  }
  v25 = v23[2];
  v26 = v25 + 1;
  if (v22 <= v25)
  {
    v62 = sub_1B1C63044(v21 > 1, v25 + 1, 1, v23);
    v26 = v25 + 1;
    v23 = v62;
    v21 = v62[3];
    v22 = v21 >> 1;
  }
  v23[2] = v26;
  v27 = &v23[2 * v25];
  v27[4] = 0x69756265646F6378;
  v27[5] = 0xEA0000000000646CLL;
  if ((uint64_t)v22 < (uint64_t)(v25 + 2))
  {
    v63 = v26;
    v64 = sub_1B1C63044(v21 > 1, v25 + 2, 1, v23);
    v26 = v63;
    v23 = v64;
  }
  v23[2] = v25 + 2;
  v28 = &v23[2 * v26];
  v28[4] = 0x6E6F69737265762DLL;
  v28[5] = 0xE800000000000000;
  v30 = v23[2];
  v29 = v23[3];
  v31 = v30 + 1;
  if (v30 >= v29 >> 1)
    v23 = sub_1B1C63044(v29 > 1, v30 + 1, 1, v23);
  v23[2] = v31;
  v32 = &v23[2 * v30];
  v32[4] = 1801745197;
  v32[5] = 0xE400000000000000;
  v33 = v23[3];
  v34 = v30 + 2;
  swift_bridgeObjectRetain();
  if (v31 >= v33 >> 1)
    v23 = sub_1B1C63044(v33 > 1, v30 + 2, 1, v23);
  v23[2] = v34;
  v35 = &v23[2 * v31];
  v35[4] = v10;
  v35[5] = v12;
  v36 = v23[3];
  if ((uint64_t)(v30 + 3) > (uint64_t)(v36 >> 1))
    v23 = sub_1B1C63044(v36 > 1, v30 + 3, 1, v23);
  v23[2] = v30 + 3;
  v37 = &v23[2 * v34];
  v37[4] = 1752457552;
  v37[5] = 0xE400000000000000;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v67 = 0;
  v68 = 0xE000000000000000;
  v66[0] = 10;
  v66[1] = 0xE100000000000000;
  sub_1B1A06460();
  v38 = (_QWORD *)sub_1B2229214();
  if (v38[2])
  {
    v40 = v38[4];
    v39 = v38[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = 0;
    v39 = 0xE000000000000000;
  }
  v2[10] = v40;
  v2[11] = v39;
  swift_bridgeObjectRelease();
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  sub_1B1BD4144();
  v42 = v41;
  v43 = v41[2];
  v44 = v43 + 2;
  swift_bridgeObjectRetain();
  v45 = swift_isUniquelyReferenced_nonNull_native();
  if (v45 && (v46 = v42[3], v47 = v46 >> 1, (uint64_t)(v46 >> 1) >= v44))
  {
    v48 = v42;
  }
  else
  {
    if (v43 <= v44)
      v49 = v43 + 2;
    else
      v49 = v43;
    v48 = sub_1B1C63044(v45, v49, 1, v42);
    v46 = v48[3];
    v47 = v46 >> 1;
  }
  v50 = v48[2];
  v51 = v50 + 1;
  if (v47 <= v50)
  {
    v48 = sub_1B1C63044(v46 > 1, v50 + 1, 1, v48);
    v46 = v48[3];
    v47 = v46 >> 1;
  }
  v48[2] = v51;
  v52 = &v48[2 * v50];
  v52[4] = 26157;
  v52[5] = 0xE200000000000000;
  v53 = v50 + 2;
  if ((uint64_t)v47 < v53)
    v48 = sub_1B1C63044(v46 > 1, v53, 1, v48);
  v48[2] = v53;
  v54 = &v48[2 * v51];
  v54[4] = 0x7466697773;
  v54[5] = 0xE500000000000000;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = 0xE000000000000000;
  v67 = 0;
  v68 = 0xE000000000000000;
  v66[0] = 10;
  v66[1] = 0xE100000000000000;
  v56 = (_QWORD *)sub_1B2229214();
  if (v56[2])
  {
    v57 = v56[4];
    v55 = v56[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v57 = 0;
  }
  swift_bridgeObjectRelease();
  v67 = v57;
  v68 = v55;
  strcpy((char *)v66, ".xctoolchain/");
  HIWORD(v66[1]) = -4864;
  v58 = sub_1B2228278();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v7, 1, 1, v58);
  sub_1B222925C();
  v60 = v59;
  sub_1B1BB9EF0((uint64_t)v7);
  swift_bridgeObjectRelease();
  if ((v60 & 1) == 0)
  {
    v67 = v57;
    v68 = v55;
    sub_1B22287E8();
    v61 = v68;
    v2[12] = v67;
    v2[13] = v61;
  }
  swift_bridgeObjectRelease();
  return os_unfair_recursive_lock_unlock();
}

void sub_1B1BD4144()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B1BD70F0();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B227BE30;
  *(_QWORD *)(v1 + 32) = 0x6B64732D2DLL;
  *(_QWORD *)(v1 + 40) = 0xE500000000000000;
  sub_1B1BD37E8();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = 0x68636C6F6F742D2DLL;
  *(_QWORD *)(v1 + 72) = 0xEB000000006E6961;
  __asm { BR              X10 }
}

uint64_t sub_1B1BD41E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v1 + 64))
  {
    v2 = *(_QWORD *)(v1 + 56);
    v3 = swift_bridgeObjectRetain();
  }
  else
  {
    v3 = 0xE700000000000000;
    v2 = 0x746C7561666564;
  }
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = v3;
  return 0x6E69622F7273752FLL;
}

uint64_t sub_1B1BD4270()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 == 2)
  {
    sub_1B1BD42A8(v0);
    *(_BYTE *)(v0 + 112) = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

void sub_1B1BD42A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1B2228110();
  MEMORY[0x1E0C80A78](v2, v3);
  __asm { BR              X10 }
}

uint64_t sub_1B1BD4320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  swift_bridgeObjectRelease();
  v3 = (void *)sub_1B2228728();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v3);

  v5 = objc_msgSend(v4, sel_bundleURL);
  sub_1B22280C8();

  sub_1B22280D4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  v6 = (void *)sub_1B2228728();
  v7 = (void *)sub_1B2228728();
  v8 = objc_msgSend(v6, sel_stringByAppendingPathComponent_, v7);
  swift_bridgeObjectRelease();

  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1B1BD44C4()
{
  __asm { BR              X9 }
}

uint64_t sub_1B1BD4514()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1BD4594 + 4 * byte_1B2281308[v0]))(0x34365F363878);
}

uint64_t sub_1B1BD4594()
{
  swift_bridgeObjectRelease();
  return 1;
}

_QWORD *sub_1B1BD46A0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;

  v1 = sub_1B2228110();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v34 - v8;
  sub_1B1BD44C4();
  if ((v10 & 1) == 0)
  {
    v34 = MEMORY[0x1E0DEE9D8];
    __asm { BR              X10 }
  }
  v11 = (void *)sub_1B2228728();
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_bundleWithIdentifier_, v11);

  v14 = objc_msgSend(v13, sel_bundleURL);
  sub_1B22280C8();

  sub_1B22280B0();
  v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15(v5, v1);
  v16 = sub_1B22280D4();
  v18 = v17;
  v15(v9, v1);
  v19 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v21 = v19[2];
  v20 = v19[3];
  if (v21 >= v20 >> 1)
    v19 = sub_1B1C63044(v20 > 1, v21 + 1, 1, v19);
  v19[2] = v21 + 1;
  v22 = &v19[2 * v21];
  v22[4] = v16;
  v22[5] = v18;
  v23 = objc_msgSend(v12, sel_mainBundle);
  v24 = objc_msgSend(v23, sel_bundlePath);

  v25 = sub_1B222874C();
  v27 = v26;

  v34 = v25;
  v35 = v27;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v28 = v34;
  v29 = v35;
  v31 = v19[2];
  v30 = v19[3];
  if (v31 >= v30 >> 1)
    v19 = sub_1B1C63044(v30 > 1, v31 + 1, 1, v19);
  v19[2] = v31 + 1;
  v32 = &v19[2 * v31];
  v32[4] = v28;
  v32[5] = v29;
  return v19;
}

char *sub_1B1BD4BD8()
{
  return sub_1B1BD4BE8(17965);
}

char *sub_1B1BD4BE0()
{
  return sub_1B1BD4BE8(19501);
}

char *sub_1B1BD4BE8(uint64_t a1)
{
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = sub_1B1BD46A0();
  v3 = v2[2];
  if (v3)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B202AE28(0, v3, 0);
    v4 = v13;
    sub_1B1BD70F0();
    v5 = v2 + 5;
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v8 + 32) = a1;
      *(_QWORD *)(v8 + 40) = 0xE200000000000000;
      *(_QWORD *)(v8 + 48) = v6;
      *(_QWORD *)(v8 + 56) = v7;
      v9 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1)
        sub_1B202AE28(v10 > 1, v9 + 1, 1);
      v5 += 2;
      *(_QWORD *)(v13 + 16) = v9 + 1;
      *(_QWORD *)(v13 + 8 * v9 + 32) = v8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x1E0DEE9D8];
  }
  v11 = sub_1B1C6AD90(v4);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1BD4D38(char *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)swift_slowAlloc();
  *v4 = 0;
  *(_QWORD *)(v1 + 24) = "xcodeinfo";
  *(_QWORD *)(v1 + 32) = 9;
  *(_BYTE *)(v1 + 40) = 2;
  *(_QWORD *)(v1 + 48) = v4;
  v5 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v6 = (void *)sub_1B2228728();
  v7 = objc_msgSend(v5, sel_stringForKey_, v6);

  if (v7)
  {
    v8 = sub_1B222874C();
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  *(_QWORD *)(v1 + 56) = v8;
  *(_QWORD *)(v1 + 64) = v10;
  v11 = (void *)sub_1B2228728();
  v12 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v11);

  *(_QWORD *)(v1 + 72) = v12;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_BYTE *)(v1 + 112) = 2;
  *(_BYTE *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 17) = v3;
  return v1;
}

uint64_t sub_1B1BD4EA8()
{
  uint64_t v0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 48), -1, -1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XcodeInfo()
{
  return objc_opt_self();
}

_QWORD *sub_1B1BD4F14()
{
  _QWORD *result;

  result = sub_1B1B7FB30(MEMORY[0x1E0DEE9D8]);
  off_1EEF5C170 = result;
  return result;
}

id sub_1B1BD4F38()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  qword_1EEF5C178 = (uint64_t)result;
  return result;
}

uint64_t sub_1B1BD4F68(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v7[8];

  v2 = *a1;
  v3 = a1[1];
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v4;
  *(_BYTE *)(v1 + 26) = 0;
  *(_QWORD *)(v1 + 64) = &unk_1E639AFC8;
  *(_BYTE *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 25) = v3;
  v7[0] = v2;
  v7[1] = v3;
  *(_QWORD *)(v1 + 16) = sub_1B1BD6A08(v7);
  swift_retain();
  sub_1B1BD3B58(v1);
  swift_release();
  v5 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v5 + 88) && *(_QWORD *)(v5 + 104))
    __asm { BR              X9 }
  swift_release();
  return 0;
}

char *sub_1B1BD51BC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202AE28(0, v2, 0);
    v3 = v12;
    sub_1B1BD70F0();
    v4 = (uint64_t *)(v1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v7 + 32) = 0x6F77656D6172662DLL;
      *(_QWORD *)(v7 + 40) = 0xEA00000000006B72;
      *(_QWORD *)(v7 + 48) = v5;
      *(_QWORD *)(v7 + 56) = v6;
      v8 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
        sub_1B202AE28(v9 > 1, v8 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v12 + 16) = v8 + 1;
      *(_QWORD *)(v12 + 8 * v8 + 32) = v7;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v10 = sub_1B1C6AD90(v3);
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B1BD530C()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202AE28(0, v2, 0);
    v3 = v10;
    sub_1B1BD70F0();
    v4 = v1 + 40;
    do
    {
      v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      *(_QWORD *)(v5 + 32) = 27693;
      *(_QWORD *)(v5 + 40) = 0xE200000000000000;
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v10 + 16);
      v6 = *(_QWORD *)(v10 + 24);
      if (v7 >= v6 >> 1)
        sub_1B202AE28(v6 > 1, v7 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v10 + 16) = v7 + 1;
      *(_QWORD *)(v10 + 8 * v7 + 32) = v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v8 = sub_1B1C6AD90(v3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1BD5468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v5 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v7 = v5[2];
  v6 = v5[3];
  v8 = v6 >> 1;
  v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    v5 = sub_1B1C63044(v6 > 1, v7 + 1, 1, v5);
    v6 = v5[3];
    v8 = v6 >> 1;
  }
  v5[2] = v9;
  v10 = &v5[2 * v7];
  v10[4] = 0x676E616C63;
  v10[5] = 0xE500000000000000;
  v11 = v7 + 2;
  if (v8 < v11)
    v5 = sub_1B1C63044(v6 > 1, v11, 1, v5);
  v5[2] = v11;
  v12 = &v5[2 * v9];
  v12[4] = 25389;
  v12[5] = 0xE200000000000000;
  v14 = v5[2];
  v13 = v5[3];
  if (v14 >= v13 >> 1)
    v5 = sub_1B1C63044(v13 > 1, v14 + 1, 1, v5);
  v5[2] = v14 + 1;
  v15 = &v5[2 * v14];
  v15[4] = 0x7465677261742DLL;
  v15[5] = 0xE700000000000000;
  sub_1B1BD39F0();
  v17 = v16;
  v19 = v18;
  v21 = v5[2];
  v20 = v5[3];
  v22 = v20 >> 1;
  v23 = v21 + 1;
  if (v20 >> 1 <= v21)
  {
    v5 = sub_1B1C63044(v20 > 1, v21 + 1, 1, v5);
    v20 = v5[3];
    v22 = v20 >> 1;
  }
  v5[2] = v23;
  v24 = &v5[2 * v21];
  v24[4] = v17;
  v24[5] = v19;
  if (v22 < (uint64_t)(v21 + 2))
    v5 = sub_1B1C63044(v20 > 1, v21 + 2, 1, v5);
  v5[2] = v21 + 2;
  v25 = &v5[2 * v23];
  v25[4] = 0x636970662DLL;
  v25[5] = 0xE500000000000000;
  v26 = swift_bridgeObjectRetain();
  sub_1B19F48F0(v26);
  if (*(_BYTE *)(v3 + 26))
    v27 = &unk_1E639AEA8;
  else
    v27 = &unk_1E639AE78;
  sub_1B19F48F0((uint64_t)v27);
  v28 = sub_1B1BD4BD8();
  sub_1B19F48F0((uint64_t)v28);
  sub_1B2228890();
  v29 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v29 = sub_1B1C63044(0, v5[2] + 1, 1, v5);
  v31 = v29[2];
  v30 = v29[3];
  v32 = v31 + 1;
  if (v31 >= v30 >> 1)
    v29 = sub_1B1C63044(v30 > 1, v31 + 1, 1, v29);
  v29[2] = v32;
  v33 = &v29[2 * v31];
  v33[4] = 28461;
  v33[5] = 0xE200000000000000;
  v34 = v29[3];
  swift_bridgeObjectRetain();
  if (v32 >= v34 >> 1)
    v29 = sub_1B1C63044(v34 > 1, v31 + 2, 1, v29);
  v29[2] = v31 + 2;
  v35 = &v29[2 * v32];
  v35[4] = a1;
  v35[5] = a2;
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  sub_1B1BD4144();
  v37 = v36;
  sub_1B19F48F0((uint64_t)v29);
  return v37;
}

uint64_t sub_1B1BD57C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = v2;
  v5 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v7 = v5[2];
  v6 = v5[3];
  v8 = v6 >> 1;
  v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    v5 = sub_1B1C63044(v6 > 1, v7 + 1, 1, v5);
    v6 = v5[3];
    v8 = v6 >> 1;
  }
  v5[2] = v9;
  v10 = &v5[2 * v7];
  v10[4] = 0x676E616C63;
  v10[5] = 0xE500000000000000;
  v11 = v7 + 2;
  if (v8 < v11)
    v5 = sub_1B1C63044(v6 > 1, v11, 1, v5);
  v5[2] = v11;
  v12 = &v5[2 * v9];
  v12[4] = 0x6465726168732DLL;
  v12[5] = 0xE700000000000000;
  v14 = v5[2];
  v13 = v5[3];
  if (v14 >= v13 >> 1)
    v5 = sub_1B1C63044(v13 > 1, v14 + 1, 1, v5);
  v5[2] = v14 + 1;
  v15 = &v5[2 * v14];
  v15[4] = 0x7465677261742DLL;
  v15[5] = 0xE700000000000000;
  sub_1B1BD39F0();
  v17 = v16;
  v19 = v18;
  v21 = v5[2];
  v20 = v5[3];
  v22 = v20 >> 1;
  v23 = v21 + 1;
  if (v20 >> 1 <= v21)
  {
    v5 = sub_1B1C63044(v20 > 1, v21 + 1, 1, v5);
    v20 = v5[3];
    v22 = v20 >> 1;
  }
  v5[2] = v23;
  v24 = &v5[2 * v21];
  v24[4] = v17;
  v24[5] = v19;
  if (v22 < (uint64_t)(v21 + 2))
    v5 = sub_1B1C63044(v20 > 1, v21 + 2, 1, v5);
  v5[2] = v21 + 2;
  v25 = &v5[2 * v23];
  v25[4] = 0x636970662DLL;
  v25[5] = 0xE500000000000000;
  v26 = swift_bridgeObjectRetain();
  sub_1B19F48F0(v26);
  v27 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v27 = sub_1B1C63044(0, v5[2] + 1, 1, v5);
  v29 = v27[2];
  v28 = v27[3];
  v30 = v28 >> 1;
  v31 = v29 + 1;
  if (v28 >> 1 <= v29)
  {
    v27 = sub_1B1C63044(v28 > 1, v29 + 1, 1, v27);
    v28 = v27[3];
    v30 = v28 >> 1;
  }
  v27[2] = v31;
  v32 = &v27[2 * v29];
  v32[4] = 7171117;
  v32[5] = 0xE300000000000000;
  v33 = v29 + 2;
  if (v30 < v33)
    v27 = sub_1B1C63044(v28 > 1, v33, 1, v27);
  v27[2] = v33;
  v34 = &v27[2 * v31];
  v34[4] = 6515757;
  v34[5] = 0xE300000000000000;
  if (*(_BYTE *)(v3 + 26))
    v35 = &unk_1E639AF88;
  else
    v35 = &unk_1E639AF58;
  sub_1B19F48F0((uint64_t)v35);
  v36 = sub_1B1BD4BD8();
  sub_1B19F48F0((uint64_t)v36);
  v37 = sub_1B1BD51BC();
  sub_1B19F48F0((uint64_t)v37);
  sub_1B2228890();
  v38 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v38 = sub_1B1C63044(0, v27[2] + 1, 1, v27);
  v40 = v38[2];
  v39 = v38[3];
  v41 = v40 + 1;
  if (v40 >= v39 >> 1)
    v38 = sub_1B1C63044(v39 > 1, v40 + 1, 1, v38);
  v38[2] = v41;
  v42 = &v38[2 * v40];
  v42[4] = 28461;
  v42[5] = 0xE200000000000000;
  v43 = v38[3];
  swift_bridgeObjectRetain();
  if (v41 >= v43 >> 1)
    v38 = sub_1B1C63044(v43 > 1, v40 + 2, 1, v38);
  v38[2] = v40 + 2;
  v44 = &v38[2 * v41];
  v44[4] = a1;
  v44[5] = a2;
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  sub_1B1BD4144();
  v46 = v45;
  sub_1B19F48F0((uint64_t)v38);
  return v46;
}

uint64_t sub_1B1BD5BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;

  v5 = v4;
  v9 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v11 = v9[2];
  v10 = v9[3];
  v12 = v10 >> 1;
  v13 = v11 + 1;
  if (v10 >> 1 <= v11)
  {
    v9 = sub_1B1C63044(v10 > 1, v11 + 1, 1, v9);
    v10 = v9[3];
    v12 = v10 >> 1;
  }
  v9[2] = v13;
  v14 = &v9[2 * v11];
  v14[4] = 0x637466697773;
  v14[5] = 0xE600000000000000;
  if (v12 < (uint64_t)(v11 + 2))
    v9 = sub_1B1C63044(v10 > 1, v11 + 2, 1, v9);
  v9[2] = v11 + 2;
  v15 = &v9[2 * v13];
  v15[4] = 0x6E65746E6F72662DLL;
  v15[5] = 0xE900000000000064;
  v17 = v9[2];
  v16 = v9[3];
  v18 = v16 >> 1;
  v19 = v17 + 1;
  if (v16 >> 1 <= v17)
  {
    v9 = sub_1B1C63044(v16 > 1, v17 + 1, 1, v9);
    v16 = v9[3];
    v18 = v16 >> 1;
  }
  v9[2] = v19;
  v20 = &v9[2 * v17];
  v20[4] = 25389;
  v20[5] = 0xE200000000000000;
  if (v18 < (uint64_t)(v17 + 2))
    v9 = sub_1B1C63044(v16 > 1, v17 + 2, 1, v9);
  v9[2] = v17 + 2;
  v21 = (char *)&v9[2 * v19];
  strcpy(v21 + 32, "-primary-file");
  *((_WORD *)v21 + 23) = -4864;
  v23 = v9[2];
  v22 = v9[3];
  v24 = v22 >> 1;
  v25 = v23 + 1;
  swift_bridgeObjectRetain();
  if (v22 >> 1 <= v23)
  {
    v9 = sub_1B1C63044(v22 > 1, v23 + 1, 1, v9);
    v22 = v9[3];
    v24 = v22 >> 1;
  }
  v9[2] = v25;
  v26 = &v9[2 * v23];
  v26[4] = a1;
  v26[5] = a2;
  if (v24 < (uint64_t)(v23 + 2))
    v9 = sub_1B1C63044(v22 > 1, v23 + 2, 1, v9);
  v9[2] = v23 + 2;
  v27 = &v9[2 * v25];
  v27[4] = 0x7465677261742DLL;
  v27[5] = 0xE700000000000000;
  v28 = *(_QWORD *)(v5 + 16);
  sub_1B1BD39F0();
  v30 = v29;
  v32 = v31;
  v34 = v9[2];
  v33 = v9[3];
  v35 = v33 >> 1;
  v36 = v34 + 1;
  if (v33 >> 1 <= v34)
  {
    v9 = sub_1B1C63044(v33 > 1, v34 + 1, 1, v9);
    v33 = v9[3];
    v35 = v33 >> 1;
  }
  v9[2] = v36;
  v37 = &v9[2 * v34];
  v37[4] = v30;
  v37[5] = v32;
  if (v35 < (uint64_t)(v34 + 2))
    v9 = sub_1B1C63044(v33 > 1, v34 + 2, 1, v9);
  v9[2] = v34 + 2;
  v38 = &v9[2 * v36];
  v38[4] = 1801745197;
  v38[5] = 0xE400000000000000;
  v40 = *(_QWORD *)(v28 + 80);
  v39 = *(_QWORD *)(v28 + 88);
  v41 = v9[2];
  v42 = v9[3];
  v43 = v42 >> 1;
  v44 = v41 + 1;
  swift_bridgeObjectRetain();
  if (v42 >> 1 <= v41)
  {
    v9 = sub_1B1C63044(v42 > 1, v41 + 1, 1, v9);
    v42 = v9[3];
    v43 = v42 >> 1;
  }
  v9[2] = v44;
  v45 = &v9[2 * v41];
  v45[4] = v40;
  v45[5] = v39;
  if (v43 < (uint64_t)(v41 + 2))
    v9 = sub_1B1C63044(v42 > 1, v41 + 2, 1, v9);
  v9[2] = v41 + 2;
  v46 = (char *)&v9[2 * v44];
  strcpy(v46 + 32, "-swift-version");
  v46[47] = -18;
  v48 = v9[2];
  v47 = v9[3];
  v49 = v47 >> 1;
  v50 = v48 + 1;
  if (v47 >> 1 <= v48)
  {
    v9 = sub_1B1C63044(v47 > 1, v48 + 1, 1, v9);
    v47 = v9[3];
    v49 = v47 >> 1;
  }
  v9[2] = v50;
  v51 = &v9[2 * v48];
  v51[4] = 53;
  v51[5] = 0xE100000000000000;
  if (v49 < (uint64_t)(v48 + 2))
    v9 = sub_1B1C63044(v47 > 1, v48 + 2, 1, v9);
  v9[2] = v48 + 2;
  v52 = (char *)&v9[2 * v50];
  strcpy(v52 + 32, "-module-name");
  v52[45] = 0;
  *((_WORD *)v52 + 23) = -5120;
  v53 = v9[2];
  v54 = v9[3];
  swift_bridgeObjectRetain();
  if (v53 >= v54 >> 1)
    v9 = sub_1B1C63044(v54 > 1, v53 + 1, 1, v9);
  v9[2] = v53 + 1;
  v55 = &v9[2 * v53];
  v55[4] = a3;
  v55[5] = a4;
  if (*(_BYTE *)(v5 + 26))
    v56 = &unk_1E639AF18;
  else
    v56 = &unk_1E639AEE8;
  sub_1B19F48F0((uint64_t)v56);
  v57 = sub_1B1BD4BD8();
  sub_1B19F48F0((uint64_t)v57);
  v58 = sub_1B1BD6D78();
  sub_1B19F48F0((uint64_t)v58);
  v59 = swift_bridgeObjectRetain();
  sub_1B19F48F0(v59);
  sub_1B2228890();
  v60 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v60 = sub_1B1C63044(0, v9[2] + 1, 1, v9);
  v62 = v60[2];
  v61 = v60[3];
  if (v62 >= v61 >> 1)
    v60 = sub_1B1C63044(v61 > 1, v62 + 1, 1, v60);
  v60[2] = v62 + 1;
  v63 = &v60[2 * v62];
  v63[4] = 28461;
  v63[5] = 0xE200000000000000;
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  sub_1B1BD4144();
  v65 = v64;
  sub_1B19F48F0((uint64_t)v60);
  return v65;
}

void sub_1B1BD61A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0;
  v2 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v4 = v2[2];
  v3 = v2[3];
  v5 = v3 >> 1;
  v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    v2 = sub_1B1C63044(v3 > 1, v4 + 1, 1, v2);
    v3 = v2[3];
    v5 = v3 >> 1;
  }
  v2[2] = v6;
  v7 = &v2[2 * v4];
  v7[4] = 0x676E616C63;
  v7[5] = 0xE500000000000000;
  v8 = v4 + 2;
  if (v5 < v8)
    v2 = sub_1B1C63044(v3 > 1, v8, 1, v2);
  v2[2] = v8;
  v9 = &v2[2 * v6];
  v9[4] = 0x686372612DLL;
  v9[5] = 0xE500000000000000;
  __asm { BR              X10 }
}

uint64_t sub_1B1BD6670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v2 = v1;
  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v11 = v9[2];
  v10 = v9[3];
  v12 = v10 >> 1;
  v13 = v11 + 1;
  if (v10 >> 1 <= v11)
  {
    v9 = sub_1B1C63044(v10 > 1, v11 + 1, 1, v9);
    v10 = v9[3];
    v12 = v10 >> 1;
  }
  v9[2] = v13;
  v14 = &v9[2 * v11];
  v14[4] = 1869637996;
  v14[5] = 0xE400000000000000;
  if (v12 < (uint64_t)(v11 + 2))
    v9 = sub_1B1C63044(v10 > 1, v11 + 2, 1, v9);
  v9[2] = v11 + 2;
  v15 = &v9[2 * v13];
  v15[4] = 0x6574616572632DLL;
  v15[5] = 0xE700000000000000;
  v17 = v9[2];
  v16 = v9[3];
  if (v17 >= v16 >> 1)
    v9 = sub_1B1C63044(v16 > 1, v17 + 1, 1, v9);
  v9[2] = v17 + 1;
  v18 = &v9[2 * v17];
  v18[4] = 0x74757074756F2DLL;
  v18[5] = 0xE700000000000000;
  v19 = sub_1B22280D4();
  v21 = v20;
  v23 = v9[2];
  v22 = v9[3];
  if (v23 >= v22 >> 1)
    v9 = sub_1B1C63044(v22 > 1, v23 + 1, 1, v9);
  v9[2] = v23 + 1;
  v24 = &v9[2 * v23];
  v24[4] = v19;
  v24[5] = v21;
  v46 = v9;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = MEMORY[0x1E0DEE9D8];
  if (v25)
  {
    v41 = v2;
    v45 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v25, 0);
    v27 = a1 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    v42 = *(_QWORD *)(v44 + 72);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
    do
    {
      v29 = v43;
      v28(v8, v27, v43);
      v30 = sub_1B22280D4();
      v32 = v31;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v29);
      v26 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B2029FFC(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = v45;
      }
      v34 = *(_QWORD *)(v26 + 16);
      v33 = *(_QWORD *)(v26 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1B2029FFC(v33 > 1, v34 + 1, 1);
        v26 = v45;
      }
      *(_QWORD *)(v26 + 16) = v34 + 1;
      v35 = v26 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v30;
      *(_QWORD *)(v35 + 40) = v32;
      v27 += v42;
      --v25;
    }
    while (v25);
  }
  sub_1B19F48F0(v26);
  v36 = (uint64_t)v46;
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  sub_1B1BD4144();
  v38 = v37;
  v45 = v39;
  sub_1B19F48F0(v36);
  return v38;
}

uint64_t sub_1B1BD699C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XcodeCommandBuilder()
{
  return objc_opt_self();
}

uint64_t sub_1B1BD6A08(unsigned __int8 *a1)
{
  __int16 v1;
  __int16 v2;
  _QWORD *v3;
  __int16 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  void *v11;
  char v12[2];

  v1 = *a1;
  v2 = a1[1];
  if (qword_1EEF572F8 != -1)
    swift_once();
  objc_msgSend((id)qword_1EEF5C178, sel_lock);
  if (qword_1EEF572F0 != -1)
    swift_once();
  v3 = off_1EEF5C170;
  v4 = v1 | (v2 << 8);
  if (*((_QWORD *)off_1EEF5C170 + 2) && (sub_1B1DC43A8(v1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(v3[7] + 8 * v5);
    v8 = (void *)qword_1EEF5C178;
    swift_retain();
  }
  else
  {
    v12[0] = v1;
    v12[1] = v2;
    type metadata accessor for XcodeInfo();
    swift_allocObject();
    v7 = sub_1B1BD4D38(v12);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = off_1EEF5C170;
    off_1EEF5C170 = (_UNKNOWN *)0x8000000000000000;
    sub_1B1B86438(v7, v4, isUniquelyReferenced_nonNull_native);
    off_1EEF5C170 = v11;
    swift_bridgeObjectRelease();
    v8 = (void *)qword_1EEF5C178;
  }
  objc_msgSend(v8, sel_unlock, v11);
  return v7;
}

uint64_t sub_1B1BD6B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v10 = v8[2];
  v9 = v8[3];
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_1B1C63044(v9 > 1, v10 + 1, 1, v8);
    v9 = v8[3];
    v11 = v9 >> 1;
  }
  v8[2] = v12;
  v13 = &v8[2 * v10];
  v13[4] = 0x6C6174656DLL;
  v13[5] = 0xE500000000000000;
  v14 = v10 + 2;
  if (v11 < v14)
    v8 = sub_1B1C63044(v9 > 1, v14, 1, v8);
  v8[2] = v14;
  v15 = &v8[2 * v12];
  v15[4] = 25389;
  v15[5] = 0xE200000000000000;
  v16 = v8[2];
  v17 = v8[3];
  v18 = v17 >> 1;
  v19 = v16 + 1;
  swift_bridgeObjectRetain();
  if (v17 >> 1 <= v16)
  {
    v8 = sub_1B1C63044(v17 > 1, v16 + 1, 1, v8);
    v17 = v8[3];
    v18 = v17 >> 1;
  }
  v8[2] = v19;
  v20 = &v8[2 * v16];
  v20[4] = a1;
  v20[5] = a2;
  if (v18 < (uint64_t)(v16 + 2))
    v8 = sub_1B1C63044(v17 > 1, v16 + 2, 1, v8);
  v8[2] = v16 + 2;
  v21 = &v8[2 * v19];
  v21[4] = 28461;
  v21[5] = 0xE200000000000000;
  v22 = v8[2];
  v23 = v8[3];
  swift_bridgeObjectRetain();
  if (v22 >= v23 >> 1)
    v8 = sub_1B1C63044(v23 > 1, v22 + 1, 1, v8);
  v8[2] = v22 + 1;
  v24 = &v8[2 * v22];
  v24[4] = a3;
  v24[5] = a4;
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  sub_1B1BD4144();
  v26 = v25;
  sub_1B19F48F0((uint64_t)v8);
  return v26;
}

char *sub_1B1BD6D78()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundlePath);

  v2 = sub_1B222874C();
  v4 = v3;

  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v6 = v2;
  v5 = v4;
  v13 = MEMORY[0x1E0DEE9D8];
  sub_1B202AE28(0, 1, 0);
  v7 = v13;
  sub_1B1BD70F0();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v8 + 32) = 18733;
  *(_QWORD *)(v8 + 40) = 0xE200000000000000;
  *(_QWORD *)(v8 + 48) = v6;
  *(_QWORD *)(v8 + 56) = v5;
  v9 = *(_QWORD *)(v13 + 16);
  v10 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain();
  if (v9 >= v10 >> 1)
  {
    sub_1B202AE28(v10 > 1, v9 + 1, 1);
    v7 = v13;
  }
  *(_QWORD *)(v7 + 16) = v9 + 1;
  *(_QWORD *)(v7 + 8 * v9 + 32) = v8;
  swift_bridgeObjectRelease();
  v11 = sub_1B1C6AD90(v7);
  swift_release();
  return v11;
}

unint64_t sub_1B1BD6EF0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  v0 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v2 = v0[2];
  v1 = v0[3];
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    v0 = sub_1B1C63044(v1 > 1, v2 + 1, 1, v0);
    v1 = v0[3];
    v3 = v1 >> 1;
  }
  v0[2] = v4;
  v5 = &v0[2 * v2];
  v5[4] = 0x6563726F662D2DLL;
  v5[5] = 0xE700000000000000;
  v6 = v2 + 2;
  if (v3 < v6)
    v0 = sub_1B1C63044(v1 > 1, v6, 1, v0);
  v0[2] = v6;
  v7 = &v0[2 * v4];
  v7[4] = 0x6E6769732D2DLL;
  v7[5] = 0xE600000000000000;
  v9 = v0[2];
  v8 = v0[3];
  v10 = v8 >> 1;
  v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    v0 = sub_1B1C63044(v8 > 1, v9 + 1, 1, v0);
    v8 = v0[3];
    v10 = v8 >> 1;
  }
  v0[2] = v11;
  v12 = &v0[2 * v9];
  v12[4] = 45;
  v12[5] = 0xE100000000000000;
  v13 = v9 + 2;
  if (v10 < v13)
    v0 = sub_1B1C63044(v8 > 1, v13, 1, v0);
  v0[2] = v13;
  v14 = &v0[2 * v11];
  v14[4] = 0xD000000000000010;
  v14[5] = 0x80000001B2333330;
  v15 = sub_1B22280D4();
  v17 = v16;
  v19 = v0[2];
  v18 = v0[3];
  if (v19 >= v18 >> 1)
    v0 = sub_1B1C63044(v18 > 1, v19 + 1, 1, v0);
  v0[2] = v19 + 1;
  v20 = &v0[2 * v19];
  v20[4] = v15;
  v20[5] = v17;
  sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  return 0xD000000000000011;
}

void sub_1B1BD70F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE70)
  {
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE70);
  }
}

void sub_1B1BD7144()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7B60)
  {
    sub_1B2228278();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7B60);
  }
}

uint64_t sub_1B1BD7198(uint64_t a1, char a2, char a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  _QWORD v33[4];
  float v34;
  float v35;
  char v36;

  sub_1B1BDB5D0();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v11 + 32) = &type metadata for Skybox;
  *(_QWORD *)(v11 + 40) = &off_1E63BD078;
  *(_QWORD *)(v11 + 48) = &type metadata for Name;
  *(_QWORD *)(v11 + 56) = &off_1E63B9AE8;
  v12 = (_QWORD *)type metadata accessor for VFXObjectTag();
  *(_QWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 72) = &off_1E63786A0;
  if ((a2 & 1) != 0)
  {
    v14 = 4;
    v12 = sub_1B1C62F18(1, 4, 1, (char *)v11);
    v11 = (uint64_t)v12;
    v12[2] = 4;
    v12[10] = &type metadata for IBLGenerator;
    v12[11] = &off_1E6375A98;
    if ((a3 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v14 = 3;
    if ((a3 & 1) == 0)
      goto LABEL_8;
  }
  v15 = *(_QWORD *)(v11 + 24);
  if (v14 >= v15 >> 1)
  {
    v12 = sub_1B1C62F18(v15 > 1, v14 + 1, 1, (char *)v11);
    v11 = (uint64_t)v12;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  v16 = v11 + 16 * v14;
  *(_QWORD *)(v16 + 32) = &type metadata for Orientation;
  *(_QWORD *)(v16 + 40) = &off_1E6371540;
LABEL_8:
  v17 = **(_QWORD **)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  MEMORY[0x1E0C80A78](v12, v13);
  v33[2] = v5;
  v33[3] = a1;
  v34 = a4;
  v35 = a5;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = v18 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v20 = *(os_unfair_lock_s **)(v18 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v20);
  v21 = swift_bridgeObjectRetain();
  v22 = sub_1B1DAD000(v21, MEMORY[0x1E0DEE9D8]);
  v24 = v23;
  swift_bridgeObjectRelease();
  v25 = sub_1B1DA8760(v22);
  if ((v26 & 1) != 0 || (v27 = sub_1B1DA87D4(v24, v25), v28 = v27, (v27 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v28 = sub_1B1DA8838(v22, v24, v11, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v18 + 80) + 8 * v28 + 32);
  v30 = *(os_unfair_lock_s **)(v19 + 24);
  swift_retain();
  os_unfair_lock_unlock(v30);
  swift_release();
  v36 = 1;
  v31 = sub_1B1F071A0(v29, 1, 1, 0x100000000uLL, (void (*)(_QWORD *))sub_1B1BDB624, (uint64_t)v33, v17);
  swift_bridgeObjectRelease_n();
  swift_release();
  return v31;
}

unint64_t sub_1B1BD7430(unint64_t a1, char a2, char a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t KeyPath;
  uint64_t v35;
  signed int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43[2];
  int v44[3];

  v11 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
  {
LABEL_2:
    v12 = 0;
    LODWORD(v13) = -1;
    return v13 | (v12 << 32);
  }
  v12 = 0;
  LODWORD(v13) = -1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    if (HIDWORD(a1) != -1
      && *(_DWORD *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a1 + 8) != HIDWORD(a1))
    {
      goto LABEL_2;
    }
    v15 = sub_1B20F26A4(a1, v43);
    swift_unknownObjectRelease();
    if (!v15)
      goto LABEL_2;
    sub_1B1BDB5D0();
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1B226E100;
    *(_QWORD *)(v16 + 32) = &type metadata for Skybox;
    *(_QWORD *)(v16 + 40) = &off_1E63BD078;
    *(_QWORD *)(v16 + 48) = &type metadata for Name;
    *(_QWORD *)(v16 + 56) = &off_1E63B9AE8;
    *(_QWORD *)(v16 + 64) = type metadata accessor for VFXObjectTag();
    *(_QWORD *)(v16 + 72) = &off_1E63786A0;
    if ((a2 & 1) != 0)
    {
      v17 = 4;
      v16 = (uint64_t)sub_1B1C62F18(1, 4, 1, (char *)v16);
      *(_QWORD *)(v16 + 16) = 4;
      *(_QWORD *)(v16 + 80) = &type metadata for IBLGenerator;
      *(_QWORD *)(v16 + 88) = &off_1E6375A98;
    }
    else
    {
      v17 = 3;
    }
    if ((a3 & 1) != 0)
    {
      v18 = *(_QWORD *)(v16 + 24);
      if (v17 >= v18 >> 1)
        v16 = (uint64_t)sub_1B1C62F18(v18 > 1, v17 + 1, 1, (char *)v16);
      *(_QWORD *)(v16 + 16) = v17 + 1;
      v19 = v16 + 16 * v17;
      *(_QWORD *)(v19 + 32) = &type metadata for Orientation;
      *(_QWORD *)(v19 + 40) = &off_1E6371540;
    }
    if ((sub_1B1FE0234(a1, v5) & 1) == 0)
      sub_1B1FDF274(a1, v5);
    v20 = **(_QWORD **)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = v21 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
    v23 = *(os_unfair_lock_s **)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v23);
    v24 = swift_bridgeObjectRetain();
    v25 = sub_1B1DAD000(v24, MEMORY[0x1E0DEE9D8]);
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = sub_1B1DA8760(v25);
    if ((v29 & 1) != 0 || (v30 = sub_1B1DA87D4(v27, v28), v31 = v30, (v30 & 0x100000000) != 0))
    {
      swift_bridgeObjectRetain();
      v31 = sub_1B1DA8838(v25, v27, v16, MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
    }
    v32 = *(_QWORD *)(*(_QWORD *)(v21 + 80) + 8 * v31 + 32);
    v33 = *(os_unfair_lock_s **)(v22 + 24);
    swift_retain();
    os_unfair_lock_unlock(v33);
    swift_release();
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, 1);
    swift_release();
    swift_release();
    swift_retain();
    v35 = swift_getKeyPath();
    sub_1B1DAC77C(v35, 1);
    swift_release();
    swift_release();
    v36 = *(_DWORD *)(v32 + 204);
    if ((*(_BYTE *)(v32 + 208) & 1) != 0)
    {
      v12 = 0;
      LODWORD(v13) = -1;
    }
    else
    {
      swift_retain();
      v13 = sub_1B1DA8E54();
      swift_release();
      v12 = HIDWORD(v13);
    }
    v44[0] = -1;
    v43[0] = 0;
    v43[1] = 0;
    v37 = *(_QWORD *)(v20 + 16);
    swift_retain();
    swift_retain();
    sub_1B1C92338(v36, 0x100000000uLL, 1, v37, v43, v13, v44, v32, v20, v36, SHIWORD(v36), 1);
    swift_release();
    swift_release();
    v38 = v43[0];
    swift_retain();
    v39 = sub_1B1A11FDC((uint64_t)&type metadata for Skybox);
    if ((v40 & 1) != 0)
      v41 = 0;
    else
      v41 = v39 + 32 * v38;
    v42 = (_QWORD *)(sub_1B1A11FDC((uint64_t)&type metadata for Name) + 16 * v38);
    *(_DWORD *)v41 = a1;
    *(_DWORD *)(v41 + 4) = v11;
    *(float *)(v41 + 8) = a4;
    *(float *)(v41 + 12) = a5;
    *v42 = 0x786F62796B53;
    v42[1] = 0xE600000000000000;
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v13 | (v12 << 32);
}

void sub_1B1BD78B4(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;

  v18 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1B19F8E54(0, &qword_1EEF5C1B0, (uint64_t (*)(void))sub_1B1BDB8C8, (uint64_t)&type metadata for ImageResizingMode.SizeToFitCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v17[7] = *(_QWORD *)(v4 - 8);
  v17[8] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v17[6] = (char *)v17 - v6;
  sub_1B19F8E54(0, &qword_1EEF5C1B8, (uint64_t (*)(void))sub_1B1BDB90C, (uint64_t)&type metadata for ImageResizingMode.SizeToFillCodingKeys, v3);
  v17[4] = *(_QWORD *)(v7 - 8);
  v17[5] = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v17[3] = (char *)v17 - v9;
  sub_1B19F8E54(0, &qword_1EEF5C1C0, (uint64_t (*)(void))sub_1B1BDB950, (uint64_t)&type metadata for ImageResizingMode.StretchCodingKeys, v3);
  v17[1] = *(_QWORD *)(v10 - 8);
  v17[2] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v17[0] = (char *)v17 - v12;
  sub_1B19F8E54(0, &qword_1EEF5C1C8, (uint64_t (*)(void))sub_1B1BDB994, (uint64_t)&type metadata for ImageResizingMode.CenterCodingKeys, v3);
  MEMORY[0x1E0C80A78](v13, v14);
  sub_1B19F8E54(0, &qword_1EEF5C1D0, (uint64_t (*)(void))sub_1B1BDB9D8, (uint64_t)&type metadata for ImageResizingMode.CodingKeys, v3);
  v17[9] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BDB9D8();
  sub_1B222A180();
  __asm { BR              X10 }
}

uint64_t sub_1B1BD7ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 68) = 0;
  sub_1B1BDB994();
  sub_1B22298BC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v4, v2);
}

uint64_t sub_1B1BD7C0C()
{
  sub_1B1BDB994();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD7C34()
{
  sub_1B1BDB994();
  return sub_1B222A1E0();
}

void sub_1B1BD7C5C(char *a1)
{
  sub_1B1F92684(*a1);
}

uint64_t sub_1B1BD7C68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BD7C94 + 4 * byte_1B22813E4[*v0]))(0x7265746E6563, 0xE600000000000000);
}

uint64_t sub_1B1BD7C94()
{
  return 0x68637465727473;
}

uint64_t sub_1B1BD7CAC()
{
  return 0x69466F54657A6973;
}

uint64_t sub_1B1BD7CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BD9010(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BD7CF8()
{
  sub_1B1BDB9D8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD7D20()
{
  sub_1B1BDB9D8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BD7D48()
{
  sub_1B1BDB90C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD7D70()
{
  sub_1B1BDB90C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BD7D98()
{
  sub_1B1BDB8C8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD7DC0()
{
  sub_1B1BDB8C8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BD7DE8()
{
  sub_1B1BDB950();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD7E10()
{
  sub_1B1BDB950();
  return sub_1B222A1E0();
}

ValueMetadata *sub_1B1BD7E38@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  ValueMetadata *result;

  result = sub_1B1BD9218(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

void sub_1B1BD7E60(_QWORD *a1)
{
  unsigned __int8 *v1;

  sub_1B1BD78B4(a1, *v1);
}

void sub_1B1BD7E78(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638CA08;
}

void sub_1B1BD7E88(char *a1)
{
  sub_1B1F99548(*a1);
}

void sub_1B1BD7E94()
{
  char *v0;

  sub_1B1FB32FC(*v0);
}

void sub_1B1BD7E9C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1BD7ED8()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1BD7F7C(uint64_t a1)
{
  char *v1;

  sub_1B1DB4B0C(a1, *v1);
}

uint64_t sub_1B1BD7F84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BD91D0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BD7FB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1BD7FE0 + 4 * byte_1B22813EE[*v0]))();
}

void sub_1B1BD7FE0(_QWORD *a1@<X8>)
{
  *a1 = 0x7469736E65746E69;
  a1[1] = 0xE900000000000079;
}

void sub_1B1BD8004(_QWORD *a1@<X8>)
{
  *a1 = 0x6576654C72756C62;
  a1[1] = 0xE90000000000006CLL;
}

void sub_1B1BD8028(_QWORD *a1@<X8>)
{
  *a1 = 0x646F4D646E656C62;
  a1[1] = 0xE900000000000065;
}

void sub_1B1BD8048(_QWORD *a1@<X8>)
{
  *a1 = 0x66666F747563;
  a1[1] = 0xE600000000000000;
}

void sub_1B1BD8060(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "resizingMode");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1B1BD8084()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1BD80B4 + 4 * byte_1B22813F4[*v0]))(0x65727574786574, 0xE700000000000000);
}

uint64_t sub_1B1BD80B4()
{
  return 0x7469736E65746E69;
}

uint64_t sub_1B1BD80D4()
{
  return 0x6576654C72756C62;
}

uint64_t sub_1B1BD80F4()
{
  return 0x646F4D646E656C62;
}

uint64_t sub_1B1BD8110()
{
  return 0x66666F747563;
}

uint64_t sub_1B1BD8124()
{
  return 0x676E697A69736572;
}

uint64_t sub_1B1BD8144@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BD91D0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BD8168()
{
  sub_1B1BDB504();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BD8190()
{
  sub_1B1BDB504();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BD81B8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;

  v3 = (int *)v1;
  sub_1B19F8E54(0, &qword_1EEF5C180, (uint64_t (*)(void))sub_1B1BDB504, (uint64_t)&type metadata for Skybox.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BDB504();
  sub_1B222A180();
  v13 = *(_QWORD *)v3;
  v15 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1B2229934();
    LOBYTE(v13) = 2;
    sub_1B2229934();
    sub_1B1AE6738(v3 + 4, (uint64_t)&v14);
    sub_1B1AE6738(&v14, (uint64_t)&v13);
    v15 = 3;
    sub_1B1A72118();
    sub_1B2229958();
    LOBYTE(v13) = 4;
    sub_1B2229934();
    LOBYTE(v13) = *((_BYTE *)v3 + 28);
    v15 = 5;
    sub_1B1BDB58C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1BD83E4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _OWORD v5[2];

  sub_1B1BD96B4(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = v5[0];
    result = *(double *)((char *)v5 + 13);
    *(_OWORD *)((char *)a2 + 13) = *(_OWORD *)((char *)v5 + 13);
  }
  return result;
}

uint64_t sub_1B1BD8424(_QWORD *a1)
{
  return sub_1B1BD81B8(a1);
}

BOOL sub_1B1BD845C(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

double sub_1B1BD8488@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) = 1065353216;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = -1082130432;
  *(_BYTE *)(a1 + 28) = 1;
  return result;
}

uint64_t sub_1B1BD84B4(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  __int16 v21;
  _QWORD *v22;
  char v23;
  _QWORD v24[3];
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = sub_1B1A11FDC((uint64_t)&type metadata for Skybox);
  if ((v11 & 1) != 0)
    v12 = 0;
  else
    v12 = v10 + 32 * v9;
  v13 = sub_1B1A11FDC((uint64_t)&type metadata for Name);
  if ((v14 & 1) != 0)
    v15 = 0;
  else
    v15 = (_QWORD *)(v13 + 16 * v9);
  v24[1] = 0;
  v24[2] = 0;
  v24[0] = 82;
  v25 = -2;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 768;
  v16 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v17 = sub_1B20F4600();
  v20[2] = a3;
  v21 = 0;
  v22 = v24;
  v23 = 1;
  v18 = sub_1B1F4EF68((uint64_t)v17, 0x100000000uLL, (uint64_t)sub_1B1BDB640, (uint64_t)v20, v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)v12 = v18;
  *(float *)(v12 + 8) = a4;
  *(float *)(v12 + 12) = a5;
  *v15 = 0x786F62796B53;
  v15[1] = 0xE600000000000000;
  return swift_bridgeObjectRelease();
}

double sub_1B1BD8614()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1E386B8(1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1ED4D0A48 = v1[0];
  unk_1ED4D0A58 = v1[1];
  qword_1ED4D0A68 = v2;
  return result;
}

uint64_t type metadata accessor for SkyboxSystem()
{
  return objc_opt_self();
}

__n128 initializeWithCopy for Skybox(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Skybox(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 29))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 28);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Skybox(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 29) = 0;
    if (a2)
      *(_BYTE *)(result + 28) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Skybox()
{
  return &type metadata for Skybox;
}

const char *sub_1B1BD8790()
{
  return "RenderSkybox";
}

uint64_t sub_1B1BD87A4()
{
  return qword_1EEF5DE48;
}

uint64_t sub_1B1BD87B0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if ((unint64_t)v3 >= 2)
    {
      v9 = *v2;
      v10 = *v2 + 8;
      v11 = -1;
      for (i = 1; i != v3; ++i)
      {
        v13 = *(_DWORD *)(v9 + 12 * i + 8);
        v14 = v11;
        v15 = v10;
        do
        {
          if (v13 >= *(_DWORD *)v15)
            break;
          v16 = *(_QWORD *)(v15 + 4);
          *(_QWORD *)(v15 + 4) = *(_QWORD *)(v15 - 8);
          *(_DWORD *)(v15 + 12) = *(_DWORD *)v15;
          *(_QWORD *)(v15 - 8) = v16;
          *(_DWORD *)v15 = v13;
          v15 -= 12;
        }
        while (!__CFADD__(v14++, 1));
        v10 += 12;
        --v11;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v6 = result;
  if (v3 >= 2)
  {
    v7 = v5 >> 1;
    sub_1B1BDB310();
    v8 = sub_1B2228B0C();
    *(_QWORD *)(v8 + 16) = v7;
    v74 = v8;
    __dst = (char *)(v8 + 32);
    goto LABEL_19;
  }
  v18 = MEMORY[0x1E0DEE9D8];
  __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v3 == 1)
  {
    v74 = MEMORY[0x1E0DEE9D8];
LABEL_19:
    v19 = 0;
    v73 = v2;
    v20 = *v2;
    v21 = (char *)MEMORY[0x1E0DEE9D8];
    v75 = v6;
    v76 = v3;
    do
    {
      v23 = v19++;
      if (v19 < v3)
      {
        v24 = *(_DWORD *)(v20 + 12 * v19 + 8);
        v25 = *(_DWORD *)(v20 + 12 * v23 + 8);
        v19 = v23 + 2;
        if (v23 + 2 < v3)
        {
          v26 = (int *)(v20 + 32 + 12 * v23);
          v27 = v24;
          while (1)
          {
            v29 = *v26;
            v26 += 3;
            v28 = v29;
            if (v24 < v25 == v29 >= v27)
              break;
            ++v19;
            v27 = v28;
            if (v3 == v19)
            {
              v19 = v3;
              break;
            }
          }
        }
        if (v24 < v25 && v23 < v19)
        {
          v30 = 12 * v19;
          v31 = 12 * v23;
          v32 = v19;
          v33 = v23;
          do
          {
            if (v33 != --v32)
            {
              v34 = v20 + v31;
              v35 = v20 + v30;
              v36 = *(_DWORD *)(v20 + v31 + 8);
              v37 = *(_QWORD *)(v20 + v31);
              v38 = *(_DWORD *)(v20 + v30 - 4);
              *(_QWORD *)v34 = *(_QWORD *)(v20 + v30 - 12);
              *(_DWORD *)(v34 + 8) = v38;
              *(_QWORD *)(v35 - 12) = v37;
              *(_DWORD *)(v35 - 4) = v36;
            }
            ++v33;
            v30 -= 12;
            v31 += 12;
          }
          while (v33 < v32);
        }
      }
      if (v19 < v3 && v19 - v23 < v6)
      {
        v39 = v23 + v6;
        if (v23 + v6 >= v3)
          v39 = v3;
        if (v19 != v39)
        {
          v40 = (uint64_t *)(v20 + 12 * v19);
          do
          {
            v41 = *(_DWORD *)(v20 + 12 * v19 + 8);
            v42 = v23;
            v43 = v40;
            do
            {
              if (v41 >= *((_DWORD *)v43 - 1))
                break;
              v44 = *v43;
              *v43 = *(uint64_t *)((char *)v43 - 12);
              *((_DWORD *)v43 + 2) = *((_DWORD *)v43 - 1);
              *(uint64_t *)((char *)v43 - 12) = v44;
              *((_DWORD *)v43 - 1) = v41;
              ++v42;
              v43 = (uint64_t *)((char *)v43 - 12);
            }
            while (v19 != v42);
            ++v19;
            v40 = (uint64_t *)((char *)v40 + 12);
          }
          while (v19 != v39);
          v19 = v39;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_1B216CC74(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
      v46 = *((_QWORD *)v21 + 2);
      v45 = *((_QWORD *)v21 + 3);
      v22 = v46 + 1;
      if (v46 >= v45 >> 1)
        v21 = sub_1B216CC74(v45 > 1, v46 + 1, 1, v21);
      *((_QWORD *)v21 + 2) = v22;
      v47 = v21 + 32;
      v48 = &v21[16 * v46 + 32];
      *(_QWORD *)v48 = v23;
      *((_QWORD *)v48 + 1) = v19;
      if (v46)
      {
        while (1)
        {
          v49 = v22 - 1;
          if (v22 >= 4)
          {
            v54 = &v47[16 * v22];
            v55 = *((_QWORD *)v54 - 7) - *((_QWORD *)v54 - 8);
            v52 = *((_QWORD *)v54 - 5) - *((_QWORD *)v54 - 6);
            v53 = v22 - 2;
            v56 = &v47[16 * v22 - 32];
            v50 = *(_QWORD *)v56;
            v51 = *((_QWORD *)v56 + 1);
            if (v52 - v50 + v51 >= v55)
            {
              v59 = v52 < *(_QWORD *)&v47[16 * v49 + 8] - *(_QWORD *)&v47[16 * v49];
              goto LABEL_61;
            }
          }
          else
          {
            if (v22 != 3)
            {
              v57 = *(_QWORD *)&v47[16 * v22 - 24] - *(_QWORD *)&v21[16 * v22];
              v58 = *(_QWORD *)&v47[16 * v49 + 8] - *(_QWORD *)&v47[16 * v49];
LABEL_58:
              if (v58 < v57)
                goto LABEL_21;
              goto LABEL_63;
            }
            v50 = *((_QWORD *)v21 + 6);
            v51 = *((_QWORD *)v21 + 7);
            v52 = *((_QWORD *)v21 + 5) - *((_QWORD *)v21 + 4);
            v53 = 1;
          }
          v57 = v51 - v50;
          v58 = *(_QWORD *)&v47[16 * v49 + 8] - *(_QWORD *)&v47[16 * v49];
          if (v57 + v58 < v52)
            goto LABEL_58;
          v59 = v52 < v58;
LABEL_61:
          if (v59)
            v49 = v53;
LABEL_63:
          v60 = &v47[16 * v49 - 16];
          v61 = *(_QWORD *)v60;
          v62 = &v47[16 * v49];
          v63 = *((_QWORD *)v62 + 1);
          sub_1B1BD8D54((char *)(v20 + 12 * *(_QWORD *)v60), (char *)(v20 + 12 * *(_QWORD *)v62), v20 + 12 * v63, __dst);
          if (v1)
            goto LABEL_74;
          *(_QWORD *)v60 = v61;
          *((_QWORD *)v60 + 1) = v63;
          v64 = *((_QWORD *)v21 + 2);
          v22 = v64 - 1;
          memmove(&v47[16 * v49], v62 + 16, 16 * (v64 - 1 - v49));
          *((_QWORD *)v21 + 2) = v64 - 1;
          if (v64 <= 2)
            goto LABEL_21;
        }
      }
      v22 = 1;
LABEL_21:
      v6 = v75;
      v3 = v76;
    }
    while (v19 < v76);
    v18 = v74;
    v2 = v73;
    goto LABEL_68;
  }
  v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v21 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_68:
  v74 = v18;
  if (v22 >= 2)
  {
    v65 = *v2;
    do
    {
      v66 = *(_QWORD *)&v21[16 * v22];
      v67 = &v21[16 * v22 + 16];
      v68 = *((_QWORD *)v67 + 1);
      sub_1B1BD8D54((char *)(v65 + 12 * v66), (char *)(v65 + 12 * *(_QWORD *)v67), v65 + 12 * v68, __dst);
      if (v1)
        break;
      v69 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v69 = sub_1B216D510((uint64_t)v21);
      v70 = v69 + 32;
      v71 = &v69[16 * v22];
      *(_QWORD *)v71 = v66;
      *((_QWORD *)v71 + 1) = v68;
      v21 = v69;
      v72 = *((_QWORD *)v69 + 2);
      memmove(&v70[16 * v22 - 16], &v70[16 * v22], 16 * (v72 - v22));
      *((_QWORD *)v21 + 2) = v72 - 1;
      v22 = v72 - 1;
    }
    while (v72 > 2);
  }
LABEL_74:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v74 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BD8D54(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  const void *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 12;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 12;
  v27 = __src;
  v26 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -11)
    {
      if (__dst != a2 || &a2[12 * v11] <= __dst)
        memmove(__dst, a2, 12 * v11);
      v17 = &v4[12 * v11];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v10 >= 12)
      {
        v18 = a3 - 12;
        do
        {
          v19 = (char *)(v18 + 12);
          if (*((_DWORD *)v17 - 1) >= *((_DWORD *)v6 - 1))
          {
            v22 = v17 - 12;
            v25 = v17 - 12;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              v23 = *(_QWORD *)v22;
              *(_DWORD *)(v18 + 8) = *((_DWORD *)v22 + 2);
              *(_QWORD *)v18 = v23;
            }
            v20 = v6;
            v17 = v22;
            if (v6 <= v7)
              break;
          }
          else
          {
            v20 = v6 - 12;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              v21 = *(_QWORD *)v20;
              *(_DWORD *)(v18 + 8) = *((_DWORD *)v6 - 1);
              *(_QWORD *)v18 = v21;
            }
            v27 = v6 - 12;
            if (v20 <= v7)
              break;
          }
          v18 -= 12;
          v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      sub_1B216D0D8((void **)&v27, &v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -11)
  {
    if (__dst != __src || &__src[12 * v9] <= __dst)
      memmove(__dst, __src, 12 * v9);
    v12 = &v4[12 * v9];
    v25 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 12)
    {
      v13 = v4;
      while (1)
      {
        if (*((_DWORD *)v6 + 2) >= *((_DWORD *)v13 + 2))
        {
          v4 = v13 + 12;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 12;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 12;
          }
        }
        else
        {
          v14 = v6 + 12;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_QWORD *)v15;
        *((_DWORD *)v7 + 2) = *((_DWORD *)v15 + 2);
        *(_QWORD *)v7 = v16;
LABEL_18:
        v7 += 12;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1BD9010(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265746E6563 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x68637465727473 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69466F54657A6973 && a2 == 0xEA00000000006C6CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69466F54657A6973 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B1BD91D0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

ValueMetadata *sub_1B1BD9218(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  ValueMetadata *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1B19F8E54(0, &qword_1ED4BAB48, (uint64_t (*)(void))sub_1B1BDB8C8, (uint64_t)&type metadata for ImageResizingMode.SizeToFitCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v43 = v3;
  v39 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v42 = (char *)&v31 - v5;
  sub_1B19F8E54(0, &qword_1ED4BAB50, (uint64_t (*)(void))sub_1B1BDB90C, (uint64_t)&type metadata for ImageResizingMode.SizeToFillCodingKeys, v2);
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v41 = (char *)&v31 - v8;
  sub_1B19F8E54(0, &qword_1ED4BAB40, (uint64_t (*)(void))sub_1B1BDB950, (uint64_t)&type metadata for ImageResizingMode.StretchCodingKeys, v2);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v40 = (char *)&v31 - v11;
  sub_1B19F8E54(0, &qword_1ED4BAB38, (uint64_t (*)(void))sub_1B1BDB994, (uint64_t)&type metadata for ImageResizingMode.CenterCodingKeys, v2);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v31 - v14;
  v16 = &type metadata for ImageResizingMode.CodingKeys;
  sub_1B19F8E54(0, &qword_1ED4BAB30, (uint64_t (*)(void))sub_1B1BDB9D8, (uint64_t)&type metadata for ImageResizingMode.CodingKeys, v2);
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v31 - v21;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BDB9D8();
  v23 = v44;
  sub_1B222A150();
  if (!v23)
  {
    v31 = v15;
    v32 = a1;
    v44 = v19;
    v24 = v22;
    v25 = sub_1B2229880();
    if (*(_QWORD *)(v25 + 16) == 1)
      __asm { BR              X9 }
    v26 = sub_1B22294CC();
    swift_allocError();
    v28 = v27;
    sub_1B1BDBA1C();
    v16 = (ValueMetadata *)((char *)v28 + *(int *)(v29 + 48));
    *v28 = &type metadata for ImageResizingMode;
    sub_1B2229760();
    sub_1B22294B4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC450], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v18);
    a1 = v32;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v16;
}

uint64_t sub_1B1BD96B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;
  float v20;
  char v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;

  v31 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAC68, (uint64_t (*)(void))sub_1B1BDB504, (uint64_t)&type metadata for Skybox.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v31 - v8;
  v34 = 1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BDB504();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v11 = v31;
  v35 = 0;
  sub_1B1A08878();
  v12 = v9;
  sub_1B2229814();
  v13 = v5;
  v14 = v32;
  LOBYTE(v32) = 1;
  sub_1B22297F0();
  v16 = v15;
  LOBYTE(v32) = 2;
  sub_1B22297F0();
  v19 = v18;
  v35 = 3;
  sub_1B1A720D4();
  sub_1B2229814();
  v20 = *(float *)&v32;
  v21 = BYTE4(v32);
  v34 = BYTE4(v32);
  v35 = 5;
  sub_1B1BDB548();
  sub_1B2229814();
  v22 = v21;
  v23 = v12;
  v33 = v32;
  v24 = a1[3];
  v25 = a1[4];
  sub_1B19FA070(a1, v24);
  if (sub_1B2067B64(2047, v24, v25))
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v13);
    if ((v22 & 1) != 0)
    {
      v26 = v20;
      v20 = -1.0;
    }
    else
    {
      v34 = 1;
      v26 = 0.0;
    }
  }
  else
  {
    LOBYTE(v32) = 4;
    sub_1B22297F0();
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v13);
    v26 = v20;
    v20 = v28;
  }
  v29 = v33;
  v30 = v34;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)v11 = v14;
  *(_DWORD *)(v11 + 8) = v16;
  *(_DWORD *)(v11 + 12) = v19;
  *(float *)(v11 + 16) = v26;
  *(_BYTE *)(v11 + 20) = v30;
  *(float *)(v11 + 24) = v20;
  *(_BYTE *)(v11 + 28) = v29;
  return result;
}

uint64_t sub_1B1BD99F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[10];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
    v3 = *(_QWORD *)(v1 + 272);
    sub_1B206309C(0, (uint64_t)v12);
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 264) + 40) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v4)
    {
      v6 = v12[0];
      v5 = v12[1];
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(v6, v5);
      if ((v7 & 1) != 0)
      {
        swift_unknownObjectRetain();
        sub_1B1BA80C0((uint64_t)v12);
        swift_release();
        sub_1B1BA80C0((uint64_t)v12);
        swift_release();
        swift_unknownObjectRelease();
        return swift_release();
      }
      sub_1B1BA80C0((uint64_t)v12);
    }
    swift_release();
    sub_1B1BA80C0((uint64_t)v12);
    swift_release();
    v8 = *(_BYTE **)(v1 + 272);
    if (v8[24] != 2)
    {
      v8[33] = 1;
      v8[31] = 1;
    }
    swift_retain();
    v9 = (void *)sub_1B2061C84(v2);
    swift_release();
    v10 = sub_1B2229454();
    sub_1B1BA77BC(v10, v11, v9);

    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1BD9B80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  float32x4_t v12;
  __int128 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  int *v50;
  _QWORD *v51;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  float v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  float v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v102;
  __int128 v103;
  void *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int v139;
  __int128 v140;
  int v141;
  float32x4_t v142;
  uint64_t v143;
  float32x2_t v144;
  uint64_t v145;
  __int128 v146;
  char v147;
  float32x4_t v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  _BOOL4 v152;
  double v153;
  void *v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  float32x4_t v167;
  uint64_t v168;
  float32x4_t v169;
  int v170;
  _QWORD *v171;
  float32x4_t v172;
  uint64_t v173;
  id v174[2];
  unsigned int *v175;
  void *v176;
  float32x4_t v177;
  __int128 v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  _OWORD v201[2];
  uint64_t v202;
  _OWORD v203[2];
  uint64_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  __int128 v209;
  uint64_t v210;
  _OWORD v211[2];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unsigned int *v221;
  uint64_t v222;
  _BYTE v223[160];
  uint64_t v224[21];
  uint64_t v225[8];
  uint64_t v226[101];
  _OWORD v227[2];
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _OWORD v234[11];
  _QWORD v235[6];
  __int16 v236;
  _QWORD v237[6];
  _BYTE v238[40];
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(result + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2) & 1) != 0)
    return result;
  v1 = result;
  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v2)
    return result;
  sub_1B1A18378(v2 + 624, (uint64_t)v223, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  sub_1B1A18378((uint64_t)v223, (uint64_t)v224, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  if (sub_1B1B3C438(v224) == 1)
    goto LABEL_126;
  v3 = v224[1];
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 144);
  swift_unknownObjectRetain();
  swift_retain();
  v6 = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  if (qword_1ED4B8480 != -1)
    swift_once();
  v203[0] = xmmword_1ED4D0A48;
  v203[1] = unk_1ED4D0A58;
  v204 = qword_1ED4D0A68;
  sub_1B1E8FCE4(v1, (uint64_t)v203, v6 & 0xFFFFFFFFFFLL, v225);
  sub_1B1A18378((uint64_t)v225, (uint64_t)v227, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v227[0])
    return swift_release();
  v155 = v2 + 624;
  v198 = v227[0];
  v199 = v227[1];
  v162 = v229;
  v200 = v228;
  v163 = v230;
  v7 = v231;
  v171 = v232;
  v8 = v233;
  sub_1B1BD99F4(v1);
  v9 = *(void **)(v2 + 392);
  if (v9)
  {
    v10 = v9;
    sub_1B1F9AEC4((uint64_t)&v179);
    v172 = v180;
    *(float32x4_t *)v174 = v179;
    v167 = v182;
    v169 = v181;
    v165 = v183;
    v11 = v184;

    v13 = v165;
    v12 = v167;
    v14 = v169;
    v16 = v172;
    v15 = *(float32x4_t *)v174;
  }
  else
  {
    sub_1B20621D0(&v179);
    v15 = v179;
    v16 = v180;
    v14 = v181;
    v12 = v182;
    v13 = v183;
    v11 = v184;
  }
  v192 = v15;
  v193 = v16;
  v194 = v14;
  v195 = v12;
  v196 = v13;
  v197 = v11;
  v156 = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare);
  v158 = (void *)sub_1B1BA7B7C(0);
  v17 = *(_QWORD *)(**(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues) + 32);
  swift_unknownObjectRetain();
  ecs_stack_allocator_push_snapshot(v17);
  v175 = (unsigned int *)ecs_stack_allocator_allocate(v17, 12 * v8, 4);
  v221 = v175;
  v222 = 12 * v8 / 12;
  v159 = v2;
  v160 = v1;
  v157 = v17;
  if (v8 >= 1 && v163)
  {
    v18 = v171[4];
    v170 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    swift_retain();
    swift_retain();
    swift_retain();
    v19 = 0;
    v20 = 0;
    v161 = v18;
    while (1)
    {
      v168 = v20;
      v166 = v19;
      v21 = (unsigned int *)(v162 + 48 * v19);
      v22 = *v21;
      v23 = v21[1];
      v173 = v21[2];
      v24 = (uint64_t *)*((_QWORD *)v21 + 2);
      v164 = *((_QWORD *)v21 + 3);
      v25 = *((_QWORD *)v21 + 4);
      v26 = *((_QWORD *)v21 + 5);
      if (v170)
      {
        v27 = *(os_unfair_lock_s **)(v26 + 376);
        swift_retain();
        os_unfair_lock_lock(v27);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v18);
      sub_1B1A18378((uint64_t)(v171 + 6), (uint64_t)v238, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v28 = v171[4];
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v171[6] = ecs_stack_allocator_allocate(v28, 48 * v29, 8);
      v171[7] = v29;
      v171[9] = 0;
      v171[10] = 0;
      v171[8] = 0;
      swift_release();
      sub_1B1A12038((uint64_t)&type metadata for Skybox, (uint64_t)&off_1E63BD078, v24, v164, v25, (uint64_t)v171);
      if (v24)
      {
        if (v25)
        {
          v30 = 0;
          do
          {
            v31 = v24[v30];
            v32 = *(_QWORD *)(v26 + 48);
            v33 = *(_QWORD *)(v32 + 16);
            if (v33)
            {
              v34 = (_QWORD *)(v32 + 56);
              while ((ValueMetadata *)*(v34 - 3) != &type metadata for RenderingOrder)
              {
                v34 += 5;
                if (!--v33)
                  goto LABEL_25;
              }
              v35 = *(_DWORD *)(*(_QWORD *)(v26 + 128) + *v34 + 4 * v31);
            }
            else
            {
LABEL_25:
              v35 = 0;
            }
            v36 = swift_retain();
            if ((*(_BYTE *)(v26 + 184) & 1) != 0)
              goto LABEL_126;
            v37 = *(_DWORD *)(*(_QWORD *)(v26 + 168) + 4 * v31);
            v38 = *(_DWORD *)(*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v37 + 8);
            swift_release();
            v39 = &v175[3 * v30 + 3 * v173];
            *v39 = v37;
            v39[1] = v38;
            v39[2] = v35;
          }
          while (++v30 != v25);
        }
      }
      else if ((_DWORD)v22 != (_DWORD)v23)
      {
        v40 = v173 - v22;
        while (1)
        {
          v41 = *(_QWORD *)(v26 + 48);
          v42 = *(_QWORD *)(v41 + 16);
          if (v42)
          {
            v43 = (_QWORD *)(v41 + 56);
            while ((ValueMetadata *)*(v43 - 3) != &type metadata for RenderingOrder)
            {
              v43 += 5;
              if (!--v42)
                goto LABEL_36;
            }
            v44 = *(_DWORD *)(*(_QWORD *)(v26 + 128) + *v43 + 4 * v22);
          }
          else
          {
LABEL_36:
            v44 = 0;
          }
          v45 = swift_retain();
          if ((*(_BYTE *)(v26 + 184) & 1) != 0)
            break;
          v46 = *(_DWORD *)(*(_QWORD *)(v26 + 168) + 4 * v22);
          v47 = *(_DWORD *)(*(_QWORD *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v46 + 8);
          swift_release();
          v48 = &v175[3 * v22 + 3 * v40];
          *v48 = v46;
          v48[1] = v47;
          v48[2] = v44;
          if (++v22 == v23)
            goto LABEL_40;
        }
        while (1)
        {
LABEL_126:
          sub_1B2229688();
          __break(1u);
        }
      }
LABEL_40:
      v201[0] = v198;
      v201[1] = v199;
      v202 = v200;
      v20 = v168;
      sub_1B1F05D48(v171, (unsigned __int16 **)v201, (uint64_t)v238);
      sub_1B1F03804((char *)v26);
      v18 = v161;
      ecs_stack_allocator_pop_snapshot(v161);
      if ((v170 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
      }
      swift_release();
      v19 = v166 + 1;
      if (v166 + 1 == v163)
      {
        sub_1B19ED748(v225);
        break;
      }
    }
  }
  sub_1B1BD87B0(&v221);
  v49 = v221;
  if (!v221 || !v222)
    goto LABEL_123;
  v50 = (int *)&v221[3 * v222];
  v51 = (_QWORD *)(v160 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  __asm
  {
    FMOV            V10.2S, #1.0
    FMOV            V0.4S, #1.0
  }
  v148 = _Q0;
  _Q0.i32[1] = 0;
  while (1)
  {
    v57 = v49[1];
    v58 = (int)*v49;
    _ZF = (_DWORD)v58 == -1 && (_DWORD)v57 == 0;
    if (_ZF || (v58 & 0x80000000) != 0 || v51[1] <= v58)
      goto LABEL_48;
    v60 = *v51 + 12 * (int)v58;
    if ((_DWORD)v57 != -1 && *(_DWORD *)(v60 + 8) != (_DWORD)v57)
      goto LABEL_48;
    v62 = *(_QWORD *)(*(_QWORD *)(v160 + 136) + 8 * *(int *)(*v51 + 12 * (int)v58) + 32);
    v63 = *(_QWORD *)(v62 + 48);
    v64 = *(_QWORD *)(v63 + 16);
    if (!v64)
      goto LABEL_48;
    v65 = *v49;
    v66 = *(__int16 *)(v60 + 4);
    v67 = (_QWORD *)(v63 + 56);
    while ((ValueMetadata *)*(v67 - 3) != &type metadata for Skybox)
    {
      v67 += 5;
      if (!--v64)
        goto LABEL_48;
    }
    v68 = (float *)(*(_QWORD *)(v62 + 128) + *v67 + 32 * v66);
    v69 = *(unsigned int *)v68;
    v70 = *((unsigned int *)v68 + 1);
    if ((_DWORD)v69 == -1 && (_DWORD)v70 == 0)
      goto LABEL_48;
    v72 = v68[2];
    _Q0.f32[0] = v68[3];
    v153 = *(double *)_Q0.i64;
    v73 = *((int *)v68 + 4);
    v74 = *((unsigned __int8 *)v68 + 20);
    v145 = *((unsigned __int8 *)v68 + 28);
    v176 = (void *)sub_1B20F26A4(v69 | (v70 << 32), v211);
    if (!v176)
    {
      v75 = *(_QWORD *)(v159 + 240);
      swift_retain();
      v176 = sub_1B1FAE198(0x42746C7561666544, 0xEF7865546B63616CLL, v75, v159);
      swift_release();
    }
    v76 = v72 < 0.0 ? 0.0 : v72;
    v146 = LODWORD(v76);
    v178 = LODWORD(v76);
    v77 = v65 | (v57 << 32);
    v78 = sub_1B1D160B4(v77);
    if ((v79 & 1) == 0
      && *(float *)&v153 > 0.0
      && (v80 = v78, objc_msgSend(v176, sel_textureType, v153) == (id)5)
      && (v81 = sub_1B20F26A4(v80, v211)) != 0)
    {
      v82 = (void *)v81;
      v83 = v146;
      DWORD1(v83) = LODWORD(v153);
      v178 = v83;
    }
    else
    {
      v82 = v176;
      swift_unknownObjectRetain();
    }
    v84 = sub_1B1D15930(v77);
    v143 = v85;
    v144 = (float32x2_t)v84;
    v150 = v86;
    v142.i64[0] = sub_1B203F17C(v77, v160);
    v88 = v87;
    v147 = v89;
    v90 = v74 ? qword_1B2281B70[v73] : 0;
    v91 = *(unsigned __int8 *)(v159 + 600);
    v151 = v90;
    v92 = !*(_BYTE *)(v159 + 585) || sub_1B1F9BE6C(*(_QWORD *)(v159 + 408)) == 4;
    v152 = v92;
    v154 = v82;
    v142.i64[1] = v88;
    if (objc_msgSend(v82, sel_textureType) != (id)5)
      break;
    if ((v150 & 1) != 0)
      v94 = 0xD000000000000012;
    else
      v94 = 0xD00000000000001ELL;
    if ((v150 & 1) != 0)
      v95 = 0x80000001B2333540;
    else
      v95 = 0x80000001B2333580;
    v96 = 0xD000000000000014;
    v97 = 0x80000001B2333560;
    *(float32x2_t *)&v93 = _D10;
    v149 = v93;
    v98 = v91;
LABEL_104:
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v106 = swift_allocObject();
    *(_OWORD *)(v106 + 16) = xmmword_1B226CD10;
    *(_OWORD *)(v106 + 32) = xmmword_1B22813C0;
    *(_BYTE *)(v106 + 48) = 0;
    *(_QWORD *)(v106 + 64) = v98;
    *(_OWORD *)(v106 + 72) = 0u;
    *(_OWORD *)(v106 + 88) = 0u;
    *(_OWORD *)(v106 + 104) = 0u;
    *(_QWORD *)(v106 + 120) = 0;
    *(_BYTE *)(v106 + 128) = 13;
    *(_OWORD *)(v106 + 144) = xmmword_1B22813D0;
    *(_BYTE *)(v106 + 160) = 0;
    *(_QWORD *)(v106 + 176) = v152;
    *(_OWORD *)(v106 + 184) = 0u;
    *(_OWORD *)(v106 + 200) = 0u;
    *(_OWORD *)(v106 + 216) = 0u;
    *(_QWORD *)(v106 + 232) = 0;
    *(_BYTE *)(v106 + 240) = 13;
    *(_QWORD *)&v211[0] = v94;
    *((_QWORD *)&v211[0] + 1) = v95;
    v211[1] = 0uLL;
    *(_QWORD *)&v212 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v212 + 1) = v96;
    *(_QWORD *)&v214 = 0;
    v213 = v97;
    *((_QWORD *)&v214 + 1) = MEMORY[0x1E0DEE9D8];
    v217 = 0u;
    v218 = 0u;
    v215 = 0u;
    v216 = 0u;
    v219 = 0u;
    v220 = 0u;
    v234[1] = 0uLL;
    v234[0] = v211[0];
    memset(&v234[5], 0, 96);
    v234[4] = v214;
    v234[2] = v212;
    v234[3] = v97;
    v186 = 0;
    v185 = 0;
    v187 = 1;
    v188 = v151;
    v189 = 1;
    v190 = v151;
    v191 = 15;
    v235[1] = 0;
    v235[0] = 0;
    v235[2] = 1;
    v235[3] = v151;
    v235[4] = 1;
    v235[5] = v151;
    v236 = 15;
    v237[0] = 0;
    v237[1] = 0;
    v237[2] = 2;
    memset(&v237[3], 0, 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1FD1C40((uint64_t *)v234, &v192, 0, 0, v106, (uint64_t)v235, 3, (uint64_t)v237, (uint64_t)v226, 1, 1);
    sub_1B1BDB228((uint64_t *)v211);
    swift_retain();
    v107 = sub_1B1B32B58((uint64_t)v226, 0);
    v109 = v108;
    if (v107 >= 3)
    {
      v110 = v107;
      v111 = swift_unknownObjectRetain();
      sub_1B1B427DC(v111, v109);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (v158)
      {
        v112 = swift_getObjectType();
        objc_msgSend((id)swift_unknownObjectRetain(), sel_setRenderPipelineState_, v110);
        objc_msgSend(v158, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v159 + 248) + 168));
        sub_1B1E125C8(v160, v112);
        v113 = (float32x4_t)xmmword_1B2244DB0;
        v114 = (float32x4_t)xmmword_1B2244DD0;
        v115 = (float32x4_t)xmmword_1B2244D90;
        if ((v147 & 1) == 0)
        {
          v116 = vdivq_f32(v148, v142);
          v117 = vabsq_f32(v116);
          v117.i32[3] = 0;
          v118.i64[0] = 0x8000000080000000;
          v118.i64[1] = 0x8000000080000000;
          v119 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v117, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v116, v118));
          v113 = vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v119.f32[0]), (float32x4_t)0);
          v118.i8[3] = 0;
          v118.i8[7] = 0;
          v118.i8[11] = 0;
          v118.i8[15] = 0;
          v114 = vaddq_f32(vmlaq_lane_f32((float32x4_t)v118, (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v119.f32, 1), (float32x4_t)0);
          v115 = vaddq_f32(vmlaq_laneq_f32((float32x4_t)0, (float32x4_t)xmmword_1B2244D90, v119, 2), (float32x4_t)0);
        }
        *(float32x2_t *)v120.f32 = vdiv_f32(_D10, *(float32x2_t *)&v149);
        v120.i64[1] = __PAIR64__(HIDWORD(v149), 1.0);
        v121 = vabsq_f32(v120);
        v121.i32[3] = 0;
        v122.i64[0] = 0x8000000080000000;
        v122.i64[1] = 0x8000000080000000;
        v123 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v121, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v120, v122));
        v124 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v113, v123.f32[0]), (float32x4_t)0, v114), (float32x4_t)0, v115), (float32x4_t)0);
        v125 = vmulq_f32(v113, (float32x4_t)0);
        v126 = vaddq_f32(vmlaq_f32(vmlaq_lane_f32(v125, v114, *(float32x2_t *)v123.f32, 1), (float32x4_t)0, v115), (float32x4_t)0);
        v127 = vmlaq_f32(v125, (float32x4_t)0, v114);
        v128 = vaddq_f32(vmlaq_laneq_f32(v127, v115, v123, 2), (float32x4_t)0);
        v205 = v124;
        v206 = v126;
        v129 = vaddq_f32(vmlaq_f32(v127, (float32x4_t)0, v115), (float32x4_t)xmmword_1B2244E20);
        v207 = v128;
        v208 = v129;
        if ((v150 & 1) == 0)
        {
          *(float32x2_t *)v130.f32 = v144;
          v130.i64[1] = v143;
          v131 = vmulq_f32(v130, v130);
          v132 = vmulq_laneq_f32(v130, v130, 3);
          v130.f32[0] = vmuls_lane_f32(v144.f32[0], v144, 1);
          v131.f32[0] = 0.5 - v131.f32[0];
          v133 = vmul_n_f32(v144, *(float *)&v143);
          v134.i32[3] = 0;
          v134.f32[0] = (float)(0.5 - v131.f32[1]) - v131.f32[2];
          v134.f32[1] = v130.f32[0] + v132.f32[2];
          v134.f32[2] = v133.f32[0] - v132.f32[1];
          v135 = vaddq_f32(v134, v134);
          v136.i32[3] = 0;
          v136.f32[0] = v130.f32[0] - v132.f32[2];
          v136.f32[1] = v131.f32[0] - v131.f32[2];
          v136.f32[2] = v133.f32[1] + v132.f32[0];
          *(int32x2_t *)v130.f32 = vrev64_s32(*(int32x2_t *)v132.f32);
          v132.i32[0] = vadd_f32(v133, *(float32x2_t *)v130.f32).u32[0];
          v132.i32[1] = vsub_f32(v133, *(float32x2_t *)&v130).i32[1];
          v132.f32[2] = v131.f32[0] - v131.f32[1];
          v137 = vaddq_f32(v136, v136);
          v132.i32[3] = 0;
          v138 = vaddq_f32(v132, v132);
          v205 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, v135.f32[0]), v126, *(float32x2_t *)v135.f32, 1), v128, v135, 2), v129, v135, 3);
          v206 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, v137.f32[0]), v126, *(float32x2_t *)v137.f32, 1), v128, v137, 2), v129, v137, 3);
          v207 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, v138.f32[0]), v126, *(float32x2_t *)v138.f32, 1), v128, v138, 2), v129, v138, 3);
          v208 = vaddq_f32(v129, vmlaq_f32(vmlaq_f32(vmulq_f32(v124, (float32x4_t)0), (float32x4_t)0, v126), (float32x4_t)0, v128));
        }
        objc_msgSend(v158, sel_setVertexBytes_length_atIndex_, &v205, 64, 6);
        objc_msgSend(v158, sel_setFragmentTexture_atIndex_, v154, 0);
        objc_msgSend(v158, sel_setFragmentBytes_length_atIndex_, &v178, 16, 0);
        sub_1B20BFD20(1);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        sub_1B1B41134(v226);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        sub_1B1B41134(v226);
        swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_1B1B427DC(v107, v108);
      swift_release();
      if ((v156 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        sub_1B1B41134(v226);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v205.i64[0] = 0;
        v205.i64[1] = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v177 = v205;
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v208 = v195;
        v209 = v196;
        v210 = v197;
        v205 = v192;
        v206 = v193;
        v207 = v194;
        sub_1B22295EC();
        sub_1B2228890();
        MEMORY[0x1B5E20670](v106, &type metadata for FunctionConstant);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2158038();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v139 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v205.i64[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v139, (uint64_t *)&v205, v177.i64[0], v177.i64[1]);
        swift_unknownObjectRelease();
        swift_release();
        sub_1B1B41134(v226);
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
LABEL_48:
    v49 += 3;
    if (v49 == (unsigned int *)v50)
      goto LABEL_123;
  }
  if (objc_msgSend(v82, sel_textureType) == (id)2)
  {
    sub_1B1A18378(v155, (uint64_t)&v205, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    sub_1B1A18378((uint64_t)&v205, (uint64_t)v211, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    if (sub_1B1B3C438((uint64_t *)v211) != 1)
    {
      v99 = *((_QWORD *)&v211[0] + 1);
      v100 = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1B1BA08F0(v100, v99);
      swift_unknownObjectRelease();
      __asm { FMOV            V0.2S, #1.0 }
      objc_msgSend(v82, sel_width);
      objc_msgSend(v82, sel_height);
      __asm { BR              X8 }
    }
    goto LABEL_126;
  }
  v102 = objc_msgSend(v82, sel_textureType);
  v104 = v82;
  v95 = 0x80000001B2333450;
  if (v102 == (id)3)
  {
    v96 = 0xD00000000000001FLL;
    v105 = "fragment_skybox_texture3d";
LABEL_103:
    v97 = (unint64_t)v105 | 0x8000000000000000;
    *(float32x2_t *)&v103 = _D10;
    v149 = v103;
    v94 = 0xD000000000000010;
    v98 = v91;
    goto LABEL_104;
  }
  v96 = 0xD000000000000019;
  if (objc_msgSend(v104, sel_textureType) == (id)7)
  {
    v105 = "or skybox vertex: ";
    goto LABEL_103;
  }
  if (!objc_msgSend(v104, (SEL)&selRef_unmapVolatileMesh_modifiedVerticesCount_))
  {
    v95 = 0x80000001B2333450;
    v105 = "vertex_skybox_2d";
    goto LABEL_103;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  *(_QWORD *)&v211[0] = 0;
  *((_QWORD *)&v211[0] + 1) = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  v205.i64[0] = (uint64_t)objc_msgSend(v104, sel_textureType);
  type metadata accessor for MTLTextureType(0);
  sub_1B22295EC();
  v140 = v211[0];
  v141 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v211[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v141, (uint64_t *)v211, v140, *((uint64_t *)&v140 + 1));
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
LABEL_123:
  ecs_stack_allocator_pop_snapshot(v157);
  swift_unknownObjectRelease();
  sub_1B19ED748(v225);
  return swift_release();
}

uint64_t *sub_1B1BDB228(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[10];
  v5 = a1[11];
  v7 = a1[16];
  v8 = a1[15];
  sub_1B1B41238(*a1, a1[1]);
  sub_1B1B41238(v2, v3);
  sub_1B1B41238(v4, v5);
  sub_1B1B41238(v8, v7);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

void sub_1B1BDB310()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5E890)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5E890);
  }
}

uint64_t sub_1B1BDB378(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[10];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
    v3 = *(_QWORD *)(v1 + 272);
    sub_1B206309C(0, (uint64_t)v12);
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 264) + 40) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v4)
    {
      v6 = v12[0];
      v5 = v12[1];
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(v6, v5);
      if ((v7 & 1) != 0)
      {
        swift_unknownObjectRetain();
        sub_1B1BA80C0((uint64_t)v12);
        swift_release();
        sub_1B1BA80C0((uint64_t)v12);
        swift_release();
        swift_unknownObjectRelease();
        return swift_release();
      }
      sub_1B1BA80C0((uint64_t)v12);
    }
    swift_release();
    sub_1B1BA80C0((uint64_t)v12);
    swift_release();
    v8 = *(_BYTE **)(v1 + 272);
    if (v8[24] != 2)
    {
      v8[33] = 1;
      v8[31] = 1;
    }
    swift_retain();
    v9 = (void *)sub_1B2061C84(v2);
    swift_release();
    v10 = sub_1B2229454();
    sub_1B1BA77BC(v10, v11, v9);

    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t sub_1B1BDB504()
{
  unint64_t result;

  result = qword_1ED4B9F90;
  if (!qword_1ED4B9F90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281714, &type metadata for Skybox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9F90);
  }
  return result;
}

unint64_t sub_1B1BDB548()
{
  unint64_t result;

  result = qword_1ED4B8F80[0];
  if (!qword_1ED4B8F80[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22816EC, &type metadata for ImageResizingMode);
    atomic_store(result, qword_1ED4B8F80);
  }
  return result;
}

unint64_t sub_1B1BDB58C()
{
  unint64_t result;

  result = qword_1EEF5C188;
  if (!qword_1EEF5C188)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22816C4, &type metadata for ImageResizingMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5C188);
  }
  return result;
}

void sub_1B1BDB5D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAD80)
  {
    sub_1B19ED84C();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAD80);
  }
}

uint64_t sub_1B1BDB624(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1BD84B4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(float *)(v1 + 32), *(float *)(v1 + 36));
}

double sub_1B1BDB640(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B20FB0FC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(unsigned __int8 *)(v3 + 25), *(__int128 **)(v3 + 32));
}

uint64_t storeEnumTagSinglePayload for Skybox.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1BDB6B0 + 4 * byte_1B2281407[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1BDB6E4 + 4 * byte_1B2281402[v4]))();
}

uint64_t sub_1B1BDB6E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BDB6EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BDB6F4);
  return result;
}

uint64_t sub_1B1BDB700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BDB708);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1BDB70C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BDB714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Skybox.CodingKeys()
{
  return &type metadata for Skybox.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageResizingMode()
{
  return &type metadata for ImageResizingMode;
}

unint64_t sub_1B1BDB748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C190;
  if (!qword_1EEF5C190)
  {
    sub_1B1A02758(255, &qword_1EEF5C198, (uint64_t)&type metadata for ImageResizingMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C190);
  }
  return result;
}

unint64_t sub_1B1BDB7AC()
{
  unint64_t result;

  result = qword_1EEF5C1A0;
  if (!qword_1EEF5C1A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22815AC, &type metadata for ImageResizingMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5C1A0);
  }
  return result;
}

unint64_t sub_1B1BDB7F4()
{
  unint64_t result;

  result = qword_1EEF5C1A8;
  if (!qword_1EEF5C1A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228169C, &type metadata for Skybox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C1A8);
  }
  return result;
}

unint64_t sub_1B1BDB83C()
{
  unint64_t result;

  result = qword_1ED4B9FA0;
  if (!qword_1ED4B9FA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22815D4, &type metadata for Skybox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9FA0);
  }
  return result;
}

unint64_t sub_1B1BDB884()
{
  unint64_t result;

  result = qword_1ED4B9F98;
  if (!qword_1ED4B9F98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22815FC, &type metadata for Skybox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9F98);
  }
  return result;
}

unint64_t sub_1B1BDB8C8()
{
  unint64_t result;

  result = qword_1ED4B8F50;
  if (!qword_1ED4B8F50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281B1C, &type metadata for ImageResizingMode.SizeToFitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F50);
  }
  return result;
}

unint64_t sub_1B1BDB90C()
{
  unint64_t result;

  result = qword_1ED4B8F68;
  if (!qword_1ED4B8F68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281ACC, &type metadata for ImageResizingMode.SizeToFillCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F68);
  }
  return result;
}

unint64_t sub_1B1BDB950()
{
  unint64_t result;

  result = qword_1ED4B8F38;
  if (!qword_1ED4B8F38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281A7C, &type metadata for ImageResizingMode.StretchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F38);
  }
  return result;
}

unint64_t sub_1B1BDB994()
{
  unint64_t result;

  result = qword_1ED4B8F20;
  if (!qword_1ED4B8F20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281A2C, &type metadata for ImageResizingMode.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F20);
  }
  return result;
}

unint64_t sub_1B1BDB9D8()
{
  unint64_t result;

  result = qword_1ED4B8F08;
  if (!qword_1ED4B8F08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22819DC, &type metadata for ImageResizingMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F08);
  }
  return result;
}

void sub_1B1BDBA1C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BB160)
  {
    sub_1B1BDBA88();
    sub_1B22294C0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BB160);
  }
}

unint64_t sub_1B1BDBA88()
{
  unint64_t result;

  result = qword_1ED4BB158;
  if (!qword_1ED4BB158)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BB158);
  }
  return result;
}

uint64_t _s3VFX17ImageResizingModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1BDBB10 + 4 * byte_1B2281411[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1BDBB44 + 4 * byte_1B228140C[v4]))();
}

uint64_t sub_1B1BDBB44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BDBB4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BDBB54);
  return result;
}

uint64_t sub_1B1BDBB60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BDBB68);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1BDBB6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BDBB74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageResizingMode.CodingKeys()
{
  return &type metadata for ImageResizingMode.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageResizingMode.CenterCodingKeys()
{
  return &type metadata for ImageResizingMode.CenterCodingKeys;
}

ValueMetadata *type metadata accessor for ImageResizingMode.StretchCodingKeys()
{
  return &type metadata for ImageResizingMode.StretchCodingKeys;
}

ValueMetadata *type metadata accessor for ImageResizingMode.SizeToFillCodingKeys()
{
  return &type metadata for ImageResizingMode.SizeToFillCodingKeys;
}

ValueMetadata *type metadata accessor for ImageResizingMode.SizeToFitCodingKeys()
{
  return &type metadata for ImageResizingMode.SizeToFitCodingKeys;
}

unint64_t sub_1B1BDBBD4()
{
  unint64_t result;

  result = qword_1EEF5C1D8;
  if (!qword_1EEF5C1D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22819B4, &type metadata for ImageResizingMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C1D8);
  }
  return result;
}

unint64_t sub_1B1BDBC1C()
{
  unint64_t result;

  result = qword_1ED4B8F18;
  if (!qword_1ED4B8F18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281924, &type metadata for ImageResizingMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F18);
  }
  return result;
}

unint64_t sub_1B1BDBC64()
{
  unint64_t result;

  result = qword_1ED4B8F10;
  if (!qword_1ED4B8F10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228194C, &type metadata for ImageResizingMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F10);
  }
  return result;
}

unint64_t sub_1B1BDBCAC()
{
  unint64_t result;

  result = qword_1ED4B8F30;
  if (!qword_1ED4B8F30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22818D4, &type metadata for ImageResizingMode.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F30);
  }
  return result;
}

unint64_t sub_1B1BDBCF4()
{
  unint64_t result;

  result = qword_1ED4B8F28;
  if (!qword_1ED4B8F28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22818FC, &type metadata for ImageResizingMode.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F28);
  }
  return result;
}

unint64_t sub_1B1BDBD3C()
{
  unint64_t result;

  result = qword_1ED4B8F48;
  if (!qword_1ED4B8F48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281884, &type metadata for ImageResizingMode.StretchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F48);
  }
  return result;
}

unint64_t sub_1B1BDBD84()
{
  unint64_t result;

  result = qword_1ED4B8F40;
  if (!qword_1ED4B8F40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22818AC, &type metadata for ImageResizingMode.StretchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F40);
  }
  return result;
}

unint64_t sub_1B1BDBDCC()
{
  unint64_t result;

  result = qword_1ED4B8F78;
  if (!qword_1ED4B8F78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281834, &type metadata for ImageResizingMode.SizeToFillCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F78);
  }
  return result;
}

unint64_t sub_1B1BDBE14()
{
  unint64_t result;

  result = qword_1ED4B8F70;
  if (!qword_1ED4B8F70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228185C, &type metadata for ImageResizingMode.SizeToFillCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F70);
  }
  return result;
}

unint64_t sub_1B1BDBE5C()
{
  unint64_t result;

  result = qword_1ED4B8F60;
  if (!qword_1ED4B8F60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22817E4, &type metadata for ImageResizingMode.SizeToFitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F60);
  }
  return result;
}

unint64_t sub_1B1BDBEA4()
{
  unint64_t result;

  result = qword_1ED4B8F58;
  if (!qword_1ED4B8F58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228180C, &type metadata for ImageResizingMode.SizeToFitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8F58);
  }
  return result;
}

uint64_t sub_1B1BDBEE8(uint64_t result, uint64_t *a2, uint64_t (*a3)(_OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  char v8;
  _OWORD v9[3];
  uint64_t v10;

  v3 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  v4 = *a2;
  v5 = *(_OWORD *)(result + 16);
  v9[0] = *(_OWORD *)result;
  v9[1] = v5;
  v9[2] = *(_OWORD *)(result + 32);
  if (!v4)
  {
    swift_retain();
    sub_1B1B28C44((uint64_t)&v10);
    swift_retain();
    v8 = a3(v9);
    swift_release();
    sub_1B1B28C6C((uint64_t)&v10);
    result = swift_release();
    if ((v8 & 1) != 0)
    {
      swift_release();
      *a2 = v3;
      return swift_retain();
    }
  }
  return result;
}

uint64_t sub_1B1BDBFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

id sub_1B1BDC054()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GraphDiagnostics();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GraphDiagnostics()
{
  return objc_opt_self();
}

uint64_t sub_1B1BDC0DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  _QWORD v35[3];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v38 = sub_1B222826C();
  v2 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v3);
  v36 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v0;
  if (qword_1EEF572D0 != -1)
    swift_once();
  v5 = byte_1EEFD53A8;
  v6 = qword_1EEFD53B0;
  v7 = byte_1EEFD53B8;
  v8 = MEMORY[0x1E0DEE9D8];
  v39 = sub_1B1C6E444(MEMORY[0x1E0DEE9D8]);
  v40 = v9;
  sub_1B1C5D498((uint64_t)sub_1B1BDC57C, 0, v5, v6, v7, v8, (uint64_t)&v39);
  if (v1)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v10 = sub_1B1C6A120(v39, v40, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1BE20A4, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v8;
    v11 = v10[2];
    if (v11)
    {
      swift_retain();
      for (i = 0; i != v11; ++i)
      {
        if (v10[i + 4])
        {
          v13 = swift_retain();
          MEMORY[0x1B5E2064C](v13);
          if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
        }
      }
      swift_release();
      v8 = v39;
    }
    swift_release();
    v14 = v37;
    swift_retain();
    v15 = sub_1B1BE272C(v8);
    swift_bridgeObjectRelease();
    swift_release();
    v35[1] = type metadata accessor for Graph();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    MEMORY[0x1E0C80A78](v16, v17);
    v35[-2] = sub_1B1BE2C4C;
    v35[-1] = v14;
    swift_retain();
    v18 = MEMORY[0x1E0DEE9D8];
    v39 = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
    v40 = v19;
    v35[2] = v16;
    sub_1B1C5CC00((uint64_t)sub_1B1BE2C54, (uint64_t)&v35[-4], 1, 0x1000000000000000uLL, 0, v18, (uint64_t *)&v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = sub_1B2147FBC();
    v21 = v38;
    v35[0] = 0;
    if (v20 >> 62)
    {
      v22 = sub_1B22296AC();
      v24 = (uint64_t)v36;
      v23 = v37;
      if (v22)
        goto LABEL_14;
    }
    else
    {
      v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      v24 = (uint64_t)v36;
      v23 = v37;
      if (v22)
      {
LABEL_14:
        v25 = 0;
        v41 = v20 & 0xC000000000000001;
        while (1)
        {
          if (v41)
          {
            v26 = MEMORY[0x1B5E21018](v25, v20);
          }
          else
          {
            v26 = *(_QWORD *)(v20 + 8 * v25 + 32);
            swift_retain();
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v24, v26 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v21);
          v27 = *(_QWORD *)(v23 + 32);
          if (!*(_QWORD *)(v27 + 16))
            goto LABEL_16;
          swift_bridgeObjectRetain();
          v28 = sub_1B1DC3CA8(v24);
          if ((v29 & 1) == 0)
            break;
          v30 = *(_QWORD *)(v27 + 56) + 16 * v28;
          v31 = *(id *)v30;
          v32 = *(_BYTE *)(v30 + 8);
          sub_1B1BE2C40(*(id *)v30, v32);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v24, v38);
          if ((v32 & 1) != 0)
          {
            v39 = (unint64_t)v31;
            sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
            swift_willThrowTypedImpl();
            swift_bridgeObjectRelease();
            swift_release();
            return swift_release_n();
          }
          swift_release();
          sub_1B1B9CAE0(v31, 0);
          v23 = v37;
          v21 = v38;
          v24 = (uint64_t)v36;
LABEL_17:
          if (v22 == ++v25)
            goto LABEL_27;
        }
        swift_bridgeObjectRelease();
LABEL_16:
        (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v24, v21);
        swift_release();
        goto LABEL_17;
      }
    }
LABEL_27:
    swift_bridgeObjectRelease();
    v34 = sub_1B1F4C910();
    swift_release_n();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v34;
  }
  return result;
}

uint64_t sub_1B1BDC57C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
    result = 0;
  else
    result = swift_retain();
  *a2 = result;
  return result;
}

uint64_t sub_1B1BDC5B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1B1BE20B0(v4, a2);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v3 + 16) = v5;
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1BDC62C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  id v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD v56[6];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v1;
  v5 = (int *)type metadata accessor for GraphError();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (uint64_t *)((char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                       + 152))(v56, v7);
  v10 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  v62 = v56[0];
  v12 = *(_QWORD *)(v56[0] + 16);
  sub_1B1B28C6C((uint64_t)&v62);
  v61 = v56[1];
  sub_1B1B28C6C((uint64_t)&v61);
  v60 = v56[2];
  sub_1B1B28C6C((uint64_t)&v60);
  v59 = v56[3];
  sub_1B1B28C6C((uint64_t)&v59);
  v58 = v56[4];
  sub_1B1B28C6C((uint64_t)&v58);
  v57 = v56[5];
  sub_1B1B28C6C((uint64_t)&v57);
  v54 = v3;
  if (v11 == v12)
  {
    v13 = *(_QWORD *)(a1 + v10);
    v14 = *(_QWORD *)(v13 + 16);
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v14)
    {
      v16 = 0;
      v17 = 32;
      do
      {
        if (!*(_QWORD *)(v13 + v17))
        {
          sub_1B1BE2940();
          v39 = swift_allocError();
          v53 = v40;
          *v9 = a1;
          v41 = (char *)v9 + v5[5];
          v42 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
          v43 = sub_1B222826C();
          v44 = *(_QWORD *)(v43 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v41, v42, v43);
          v45 = v43;
          v33 = (void *)v39;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v45);
          v46 = (char *)v9 + v5[6];
          *(_QWORD *)v46 = v16;
          v46[8] = 0;
          v47 = (_QWORD *)((char *)v9 + v5[7]);
          *v47 = 0xD00000000000001DLL;
          v47[1] = 0x80000001B2333830;
          sub_1B1BE2988((uint64_t)v9, v53);
          v36 = *(_QWORD *)(v54 + 24);
          v37 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
          v15 = *(_QWORD **)(v36 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
          swift_retain();
          v38 = v33;
          goto LABEL_13;
        }
        ++v16;
        v17 += 16;
      }
      while (v14 != v16);
      v54 = v2;
      v55 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1B202AE84(0, v14, 0);
      v18 = 0;
      v15 = v55;
      v19 = v55[2];
      v20 = 2 * v19;
      do
      {
        v21 = *(_QWORD *)(v13 + v18 * 8 + 32);
        v22 = *(_QWORD *)(v13 + v18 * 8 + 40);
        v55 = v15;
        v23 = v15[3];
        swift_retain();
        if (v19 >= v23 >> 1)
        {
          sub_1B202AE84(v23 > 1, v19 + 1, 1);
          v15 = v55;
        }
        v15[2] = v19 + 1;
        v24 = &v15[v20 + v18];
        v24[4] = v21;
        v24[5] = v22;
        v18 += 2;
        ++v19;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1B1BE2940();
    v25 = swift_allocError();
    v27 = v26;
    *v9 = a1;
    v28 = (char *)v9 + v5[5];
    v29 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v30 = sub_1B222826C();
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v28, v29, v30);
    v32 = v30;
    v33 = (void *)v25;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v32);
    v34 = (char *)v9 + v5[6];
    *(_QWORD *)v34 = 0;
    v34[8] = 1;
    v35 = (_QWORD *)((char *)v9 + v5[7]);
    *v35 = 0xD000000000000018;
    v35[1] = 0x80000001B2333810;
    sub_1B1BE2988((uint64_t)v9, v27);
    v36 = *(_QWORD *)(v54 + 24);
    v37 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    v15 = *(_QWORD **)(v36 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    swift_retain();
    v38 = (void *)v25;
LABEL_13:
    v48 = v38;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v36 + v37) = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = sub_1B1C63944(0, v15[2] + 1, 1, v15);
      *(_QWORD *)(v36 + v37) = v15;
    }
    v51 = v15[2];
    v50 = v15[3];
    if (v51 >= v50 >> 1)
    {
      v15 = sub_1B1C63944(v50 > 1, v51 + 1, 1, v15);
      *(_QWORD *)(v36 + v37) = v15;
    }
    v15[2] = v51 + 1;
    v15[v51 + 4] = v33;
    swift_willThrow();
  }
  return v15;
}

void *sub_1B1BDCA80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, double);
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  void (*v21)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *__return_ptr, uint64_t);
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  char v34;
  char v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[6];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v42 - v12;
  v48 = a1;
  v14 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v15((char *)&v42 - v12, a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4, v11);
  v16 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    v17 = sub_1B1DC3CA8((uint64_t)v13);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v16 + 56) + 16 * v17;
      v20 = *(void **)v19;
      sub_1B1BE2C40(*(id *)v19, *(_BYTE *)(v19 + 8));
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      return v20;
    }
    swift_bridgeObjectRelease();
  }
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v13, v4);
  v46 = v14;
  v47 = (void (*)(char *, uint64_t, uint64_t))v15;
  ((void (*)(char *, uint64_t, uint64_t))v15)(v8, v14, v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v50[0] = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0x8000000000000000;
  sub_1B1B870BC(1, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 40) = v50[0];
  swift_bridgeObjectRelease();
  v45 = v21;
  v21(v8, v4);
  v23 = *(_QWORD *)(v48 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v43 = v8;
    v44 = v4;
    v25 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
    swift_bridgeObjectRetain();
    v26 = 0;
    v27 = 32;
    do
    {
      if (*(_QWORD *)(v23 + v27))
      {
        v28 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v48 + v25) + 152);
        v29 = swift_retain_n();
        v28(v50, v29);
        v55 = v50[1];
        v56 = v50[0];
        sub_1B1B28C6C((uint64_t)&v55);
        v54 = v50[2];
        sub_1B1B28C6C((uint64_t)&v54);
        v53 = v50[3];
        sub_1B1B28C6C((uint64_t)&v53);
        v52 = v50[4];
        sub_1B1B28C6C((uint64_t)&v52);
        v51 = v50[5];
        sub_1B1B28C6C((uint64_t)&v51);
        v30 = *(_QWORD *)(v56 + 8 * v26 + 32);
        sub_1B19F8CD0(v30);
        sub_1B1B28C6C((uint64_t)&v56);
        *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
        sub_1B1D3590C(v30);
        LOBYTE(v28) = v31;
        swift_release();
        sub_1B19F8D00(v30);
        if ((v28 & 1) == 0)
        {
          v32 = swift_retain();
          v33 = (void *)sub_1B1BDCA80(v32);
          v35 = v34;
          swift_release();
          sub_1B1B9CAE0(v33, v35 & 1);
        }
        swift_release_n();
      }
      ++v26;
      v27 += 16;
    }
    while (v24 != v26);
    swift_bridgeObjectRelease();
    v8 = v43;
    v4 = v44;
  }
  v20 = sub_1B1BDF690(v48);
  v37 = v46;
  v36 = v47;
  v47(v8, v46, v4);
  sub_1B1BE2C40(v20, 0);
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v49 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0x8000000000000000;
  sub_1B1B87200((uint64_t)v20, 0, (uint64_t)v8, v38);
  *(_QWORD *)(v2 + 32) = v49;
  swift_bridgeObjectRelease();
  v39 = v45;
  v45(v8, v4);
  v36(v8, v37, v4);
  v40 = swift_isUniquelyReferenced_nonNull_native();
  v49 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0x8000000000000000;
  sub_1B1B870BC(0, (uint64_t)v8, v40);
  *(_QWORD *)(v2 + 40) = v49;
  swift_bridgeObjectRelease();
  v39(v8, v4);
  return v20;
}

uint64_t sub_1B1BDCE70(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t result;

  switch(a2 >> 61)
  {
    case 0uLL:
      v6 = *(_QWORD *)(a2 + 16);
      v5 = *(_QWORD *)(a2 + 24);
      sub_1B19F8CD0(v5);
      v7 = sub_1B1BDCE70(a1, v5, a3);
      sub_1B19F8D00(v5);
      if ((~v7 & 0xF000000000000007) != 0)
      {
        v8 = swift_allocObject();
        *(_QWORD *)(v8 + 16) = v6;
        *(_QWORD *)(v8 + 24) = v7;
        return v8 | 0x3000000000000000;
      }
      return v7;
    case 1uLL:
      result = sub_1B2229688();
      __break(1u);
      return result;
    case 2uLL:
      if (!*(_QWORD *)(a3 + 16))
        goto LABEL_7;
      v9 = sub_1B1DC3AC8(*(_QWORD *)(a2 + 16));
      if ((v10 & 1) == 0)
        goto LABEL_7;
      v7 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v9);
LABEL_9:
      sub_1B1B632F0(v7);
      break;
    case 3uLL:
      v7 = *(_QWORD *)(a2 + 16);
      goto LABEL_9;
    default:
LABEL_7:
      v7 = 0xF000000000000007;
      break;
  }
  return v7;
}

_QWORD *sub_1B1BDCFA8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  __objc2_class **v68;

  v63 = *v3;
  v64 = a3;
  v7 = type metadata accessor for GraphError();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph);
  v12 = (void *)v3[3];
  type metadata accessor for GraphTypeResolver();
  v13 = swift_allocObject();
  swift_retain();
  v14 = v12;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v13 + 32) = sub_1B1B7E514(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v13 + 40) = sub_1B1B7E6C8(v15);
  *(_QWORD *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 56) = 1;
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v14;
  v65 = v14;
  if (a2[2] && (v16 = a2[4], sub_1B1B632F0(v16), sub_1B1D76C18(v16), v18 = v17, sub_1B1B28D2C(v16), (v18 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    v19 = a2;
  }
  else
  {
    v66 = &unk_1E638C838;
    v20 = swift_bridgeObjectRetain();
    sub_1B19F5108(v20);
    v19 = v66;
  }
  *(_QWORD *)(v13 + 48) = v19;
  v21 = swift_bridgeObjectRelease();
  v22 = (_QWORD *)v13;
  v23 = sub_1B1BDC0DC(v21);
  if (!v4)
  {
    v25 = (int *)v7;
    v61 = a1;
    v68 = 0;
    MEMORY[0x1E0C80A78](v23, v24);
    v27 = v26;
    *(&v60 - 4) = (uint64_t)&v68;
    *(&v60 - 3) = (uint64_t)sub_1B1BDD53C;
    *(&v60 - 2) = 0;
    MEMORY[0x1E0C80A78](v26, v28);
    *(&v60 - 2) = (uint64_t)sub_1B1BE2B90;
    *(&v60 - 1) = v29;
    v30 = MEMORY[0x1E0DEE9D8];
    v66 = (void *)sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
    v67 = v31;
    v62 = v27;
    sub_1B1C5CC00((uint64_t)sub_1B1B28F5C, (uint64_t)(&v60 - 4), 1, 0x1000000000000000uLL, 0, v30, (uint64_t *)&v66);
    swift_bridgeObjectRelease();
    v32 = swift_bridgeObjectRelease();
    v34 = v61;
    v35 = v25;
    if (v68)
    {
      if (*v68 == _TtC3VFX17SubGraphEnterNode)
      {
        v68 = 0;
        MEMORY[0x1E0C80A78](v32, v33);
        *(&v60 - 4) = (uint64_t)&v68;
        *(&v60 - 3) = (uint64_t)sub_1B1BDD56C;
        *(&v60 - 2) = 0;
        MEMORY[0x1E0C80A78](v52, v53);
        *(&v60 - 2) = (uint64_t)sub_1B1BE2B90;
        *(&v60 - 1) = v54;
        v55 = MEMORY[0x1E0DEE9D8];
        v66 = (void *)sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
        v67 = v56;
        sub_1B1C5CC00((uint64_t)sub_1B1BE3678, (uint64_t)(&v60 - 4), 1, 0x1000000000000000uLL, 0, v55, (uint64_t *)&v66);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v61;
        if (v68)
        {
          if (*v68 == _TtC3VFX18SubGraphReturnNode)
          {
            MEMORY[0x1E0C80A78](v68, v57);
            v58 = v64;
            *(&v60 - 6) = v62;
            *(&v60 - 5) = v58;
            *(&v60 - 4) = (uint64_t)a2;
            *(&v60 - 3) = v59;
            *(&v60 - 2) = v63;
            swift_retain();
            v22 = (_QWORD *)sub_1B1BCEAD0((void (*)(void))sub_1B1BE2BDC);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            return v22;
          }
          swift_release();
        }
      }
      swift_release();
    }
    sub_1B1BE2940();
    v36 = (void *)swift_allocError();
    v64 = v37;
    *v10 = v34;
    v38 = (char *)v10 + v35[5];
    v39 = v34 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v40 = sub_1B222826C();
    v41 = *(_QWORD *)(v40 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    v42 = (char *)v10 + v35[6];
    *(_QWORD *)v42 = 1;
    v43 = v64;
    v44 = v65;
    v42[8] = -96;
    v45 = (_QWORD *)((char *)v10 + v35[7]);
    *v45 = 0xD00000000000002ELL;
    v45[1] = 0x80000001B2333780;
    sub_1B1BE2988((uint64_t)v10, v43);
    v46 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    v22 = *(_QWORD **)&v44[OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics];
    swift_retain();
    v47 = v36;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v44[v46] = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = sub_1B1C63944(0, v22[2] + 1, 1, v22);
      *(_QWORD *)&v44[v46] = v22;
    }
    v50 = v22[2];
    v49 = v22[3];
    if (v50 >= v49 >> 1)
    {
      v22 = sub_1B1C63944(v49 > 1, v50 + 1, 1, v22);
      *(_QWORD *)&v65[v46] = v22;
    }
    v22[2] = v50 + 1;
    v22[v50 + 4] = v36;
    swift_willThrow();
    swift_release();
  }
  swift_release();
  return v22;
}

BOOL sub_1B1BDD53C(uint64_t a1)
{
  return !*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16)
      && **(_QWORD **)(a1 + 8) == (_QWORD)_TtC3VFX17SubGraphEnterNode;
}

BOOL sub_1B1BDD56C(uint64_t a1)
{
  return !*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16)
      && **(_QWORD **)(a1 + 8) == (_QWORD)_TtC3VFX18SubGraphReturnNode;
}

uint64_t sub_1B1BDD59C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = a2;
  swift_retain();
  swift_release();
  a1[2] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a5 + 24);
  v10 = a1[3];
  a1[3] = a4;
  a1[4] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B1B28F18(v10);
}

uint64_t sub_1B1BDD63C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  unint64_t v26[5];
  unint64_t v27;
  uint64_t v28;
  _BYTE v29[32];

  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v26 - v10;
  v12 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16 * a1 + 32)
                  + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  swift_retain();
  v14 = sub_1B1BDCE70(0, a4, a3);
  v15 = v14;
  if ((~v14 & 0xF000000000000007) != 0)
    v16 = v14;
  else
    v16 = 0x8000000000000050;
  sub_1B1A02864(v13 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v27);
  sub_1B1BCBFD0(v15);
  swift_dynamicCast();
  sub_1B1D750D8(v16, (uint64_t)v29, *(double *)v26);
  sub_1B1A02864((uint64_t)v29, (uint64_t)&v28);
  v27 = v16;
  type metadata accessor for ImplicitConstantNode(0);
  v17 = (_QWORD *)swift_allocObject();
  sub_1B1A02828(&v27, v26);
  v18 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828(v26, (_QWORD *)((char *)v17 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v17 + v18) = xmmword_1B2246910;
  v19 = MEMORY[0x1E0DEE9D8];
  v17[2] = MEMORY[0x1E0DEE9D8];
  v17[3] = 0;
  v17[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0(v26);
  sub_1B1A028A0(&v27);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
  v20 = sub_1B222826C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 1, 1, v20);
  type metadata accessor for AuthoringNode();
  swift_allocObject();
  v21 = sub_1B20E4E94((uint64_t)v17, v19, (uint64_t)v11, 0, 0xF000000000000000);
  swift_release();
  v22 = *(_QWORD **)(a2 + v12);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + v12) = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v22 = sub_1B1FFEED4(v22);
    *(_QWORD *)(a2 + v12) = v22;
  }
  v24 = &v22[2 * a1];
  v24[4] = v21;
  v24[5] = 0;
  swift_release();
  swift_release();
  sub_1B1BCBFE4(v15);
  return swift_release();
}

uint64_t sub_1B1BDD8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v55;
  _QWORD v57[2];
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[6];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = v3;
  v63 = a3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v61 = (char *)v57 - v10;
  v11 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 200))(1, v9);
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v11
                                                                           + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                             + 152);
  v13 = swift_retain();
  v12(v69, v13);
  swift_release();
  v14 = v69[0];
  v75 = v69[0];
  v74 = v69[1];
  sub_1B1B28C6C((uint64_t)&v74);
  v73 = v69[2];
  sub_1B1B28C6C((uint64_t)&v73);
  v72 = v69[3];
  sub_1B1B28C6C((uint64_t)&v72);
  v71 = v69[4];
  sub_1B1B28C6C((uint64_t)&v71);
  v70 = v69[5];
  sub_1B1B28C6C((uint64_t)&v70);
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15 || (v64 = *(_QWORD *)(a2 + 16)) == 0)
  {
    sub_1B1B28C6C((uint64_t)&v75);
    swift_release();
    return 0;
  }
  v57[1] = v4;
  v16 = *(_QWORD *)(v14 + 32);
  v68 = a2 + 32;
  v62 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  v57[0] = a2;
  swift_bridgeObjectRetain();
  v17 = 0;
  v18 = 0;
  v67 = v15 - 1;
  v66 = v14 + 40;
  v19 = 4;
  v60 = xmmword_1B226D240;
  v65 = v11;
  v20 = v63;
  v21 = v64;
  while (1)
  {
    v22 = *(_QWORD *)(v68 + 8 * v18);
    sub_1B19F8CD0(v16);
    sub_1B1B632F0(v22);
    sub_1B1D76C18(v22);
    if ((v23 & 1) != 0)
    {
      sub_1B1BDD63C(v18, v11, v20, v16);
      sub_1B1B28D2C(v22);
      sub_1B19F8D00(v16);
      if (v67 == v18)
        goto LABEL_32;
      goto LABEL_5;
    }
    if (v16 >> 61 == 2)
      break;
    sub_1B1D35CEC(v22, v16);
    if ((v27 & 1) != 0)
      goto LABEL_18;
    if (v16 >> 61 == 3)
    {
      v28 = *(_QWORD *)(v16 + 16);
      sub_1B1B632F0(v28);
    }
    else
    {
      v28 = 0xF000000000000007;
    }
    v43 = v62;
    v44 = (uint64_t *)(*(_QWORD *)(v11 + v62) + v19 * 8);
    v45 = *v44;
    v58 = v44[1];
    type metadata accessor for AutoCastNode(0);
    v46 = (_QWORD *)swift_allocObject();
    *(_QWORD *)((char *)v46 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v22;
    *(_QWORD *)((char *)v46 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v28;
    v46[2] = MEMORY[0x1E0DEE9D8];
    v46[3] = 0;
    v46[4] = 0;
    sub_1B1B632F0(v22);
    swift_retain();
    v59 = v28;
    sub_1B1BCBFD0(v28);
    sub_1B2228260();
    sub_1B1791524(0, (unint64_t *)&qword_1EEF5C1F8, (uint64_t (*)(uint64_t))sub_1B1BE2AC0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v60;
    v48 = v58;
    *(_QWORD *)(inited + 32) = v45;
    *(_QWORD *)(inited + 40) = v48;
    v49 = sub_1B222826C();
    v50 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v61, 1, 1, v49);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    swift_retain();
    v51 = sub_1B20E4E94((uint64_t)v46, inited, v50, 0, 0xF000000000000000);
    swift_release();
    v52 = v65;
    v53 = *(_QWORD **)(v65 + v43);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v52 + v43) = v53;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v53 = sub_1B1FFEED4(v53);
      *(_QWORD *)(v65 + v62) = v53;
    }
    v20 = v63;
    v21 = v64;
    v55 = &v53[v19];
    *v55 = v51;
    v55[1] = 0;
    swift_release();
    swift_release();
    swift_release();
    sub_1B1BCBFE4(v59);
    sub_1B19F8D00(v16);
    sub_1B1B28D2C(v22);
    v11 = v65;
    if (v67 == v18)
    {
LABEL_32:
      sub_1B1B28C6C((uint64_t)&v75);
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_5:
    v17 = 1;
LABEL_6:
    v16 = *(_QWORD *)(v66 + 8 * v18);
    v19 += 2;
    if (v21 == ++v18)
      goto LABEL_30;
  }
  if (*(_QWORD *)(v20 + 16) && (v24 = sub_1B1DC3AC8(*(_QWORD *)(v16 + 16)), (v25 & 1) != 0))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v24);
    sub_1B1B632F0(v26);
  }
  else
  {
    v26 = 0xF000000000000007;
  }
  sub_1B1D76C18(v26);
  if ((v29 & 1) == 0)
  {
    v30 = (unint64_t *)(*(_QWORD *)(v11 + v62) + v19 * 8);
    v32 = *v30;
    v31 = v30[1];
    type metadata accessor for AutoCastNode(0);
    v33 = (_QWORD *)swift_allocObject();
    *(_QWORD *)((char *)v33 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v22;
    *(_QWORD *)((char *)v33 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v26;
    v33[2] = MEMORY[0x1E0DEE9D8];
    v33[3] = 0;
    v33[4] = 0;
    sub_1B1B632F0(v22);
    swift_retain();
    sub_1B1BCBFD0(v26);
    sub_1B2228260();
    sub_1B1791524(0, (unint64_t *)&qword_1EEF5C1F8, (uint64_t (*)(uint64_t))sub_1B1BE2AC0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = v60;
    *(_QWORD *)(v34 + 32) = v32;
    *(_QWORD *)(v34 + 40) = v31;
    v35 = sub_1B222826C();
    v36 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v61, 1, 1, v35);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    v59 = v32;
    swift_retain();
    v37 = sub_1B20E4E94((uint64_t)v33, v34, v36, 0, 0xF000000000000000);
    swift_release();
    v38 = v62;
    v39 = v65;
    v40 = *(_QWORD **)(v65 + v62);
    swift_retain();
    v41 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v39 + v38) = v40;
    if ((v41 & 1) == 0)
    {
      v40 = sub_1B1FFEED4(v40);
      *(_QWORD *)(v65 + v62) = v40;
    }
    v20 = v63;
    v42 = &v40[v19];
    *v42 = v37;
    v42[1] = 0;
    swift_release();
    swift_release();
    swift_release();
    sub_1B1BCBFE4(v26);
    sub_1B1B28D2C(v22);
    sub_1B19F8D00(v16);
    v11 = v65;
    v21 = v64;
    if (v67 == v18)
      goto LABEL_32;
    goto LABEL_5;
  }
  sub_1B1BCBFE4(v26);
  v21 = v64;
LABEL_18:
  sub_1B1B28D2C(v22);
  sub_1B19F8D00(v16);
  if (v67 != v18)
    goto LABEL_6;
LABEL_30:
  sub_1B1B28C6C((uint64_t)&v75);
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    swift_release();
    return 0;
  }
  return v11;
}

uint64_t sub_1B1BDE070(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  BOOL v41;
  char v42;
  _QWORD *v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, uint64_t);
  void *v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(_QWORD *__return_ptr);
  uint64_t v78;
  unint64_t v79;
  int *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  id v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  id v99;
  unint64_t v100;
  uint64_t v101;
  int *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  id v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  void *v120;
  id v121;
  _QWORD *v122;
  int *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD v140[3];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[3];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[3];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v129 = a3;
  v8 = type metadata accessor for GraphError();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1B1B980BC(MEMORY[0x1E0DEE9D8]);
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13 || (v14 = *(_QWORD *)(a2 + 16)) == 0)
  {
LABEL_34:
    v43 = sub_1B1BE1ED4((uint64_t)v12);
    swift_bridgeObjectRelease();
    return (uint64_t)v43;
  }
  v123 = (int *)v8;
  v124 = v11;
  v125 = v4;
  v126 = a4;
  v15 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = v13 - 1;
  v130 = a1;
  v131 = a2;
  v132 = v13 - 1;
  v133 = v14;
  while (1)
  {
    v18 = *(_QWORD *)(a2 + 8 * v16 + 32);
    sub_1B19F8CD0(v18);
    sub_1B1B632F0(v15);
    sub_1B1D35B14(v18);
    if ((v19 & 1) != 0 || (v137 = (void *)sub_1B1D35B14(v18), sub_1B1D76C18(v15), (v20 & 1) != 0))
    {
      sub_1B19F8D00(v18);
      sub_1B1B28D2C(v15);
      goto LABEL_7;
    }
    sub_1B1D35CEC(v15, v18);
    if ((v21 & 1) == 0)
    {
      v122 = v12;
      v45 = sub_1B1D363CC((uint64_t)v137);
      v136 = v46;
      v137 = (void *)v45;
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v126 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                   + 152))(v152);
      v179 = v153;
      sub_1B1BCF9C4(v16, v153);
      v178 = v152[0];
      sub_1B1B28C6C((uint64_t)&v178);
      v177 = v152[1];
      sub_1B1B28C6C((uint64_t)&v177);
      v176 = v152[2];
      sub_1B1B28C6C((uint64_t)&v176);
      sub_1B1B28C6C((uint64_t)&v179);
      v175 = v154;
      sub_1B1B28C6C((uint64_t)&v175);
      v174 = v155;
      sub_1B1B28C6C((uint64_t)&v174);
      v138 = 0;
      v139 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v138 = 0x207475706E49;
      v139 = 0xE600000000000000;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B1D763B0(v15);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v135 = v18;
      sub_1B1D35B98(v18);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v136 = v138;
      v134 = v139;
      sub_1B1BE2940();
      v47 = v123;
      v137 = (void *)swift_allocError();
      v133 = v48;
      v49 = (uint64_t)v124;
      v50 = v126;
      *v124 = v126;
      v51 = v49 + v47[5];
      v132 = v50 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
      v52 = sub_1B222826C();
      v53 = *(_QWORD *)(v52 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v132, v52);
      v54 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56);
      v55 = v137;
      v54(v51, 0, 1, v52);
      v56 = v49 + v47[6];
      *(_QWORD *)v56 = v16;
      *(_BYTE *)(v56 + 8) = 32;
      v57 = (unint64_t *)(v49 + v47[7]);
      v58 = v133;
      v59 = v134;
      *v57 = v136;
      v57[1] = v59;
      sub_1B1BE2988(v49, v58);
      v60 = *(_QWORD *)(v125 + 24);
      v61 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
      v62 = *(_QWORD **)(v60 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
      swift_retain();
      v63 = v55;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v60 + v61) = v62;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v62 = sub_1B1C63944(0, v62[2] + 1, 1, v62);
        *(_QWORD *)(v60 + v61) = v62;
      }
      v66 = v62[2];
      v65 = v62[3];
      if (v66 >= v65 >> 1)
      {
        v62 = sub_1B1C63944(v65 > 1, v66 + 1, 1, v62);
        *(_QWORD *)(v60 + v61) = v62;
      }
      v62[2] = v66 + 1;
      v62[v66 + 4] = v55;
      swift_willThrow();
      v67 = v55;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B19F8D00(v135);
      sub_1B1B28D2C(v15);
      v68 = v55;
      goto LABEL_40;
    }
    sub_1B1D3602C(v15, v18);
    v23 = v22;
    if (!v12[2])
      break;
    v24 = sub_1B1DC3AC8((uint64_t)v137);
    if ((v25 & 1) == 0)
      break;
    v26 = (uint64_t *)(v12[7] + 16 * v24);
    v27 = v26[1];
    v127 = *v26;
    sub_1B1B632F0(v27);
    sub_1B1B632F0(v27);
    sub_1B1D76C18(v23);
    if ((v28 & 1) != 0)
    {
      sub_1B1B28D2C(v27);
      sub_1B1B28D2C(v23);
      sub_1B19F8D00(v18);
      sub_1B1B28D2C(v15);
      sub_1B1B28D2C(v27);
    }
    else
    {
      v128 = v27;
      if ((v129 & 1) == 0)
      {
        sub_1B1B28D2C(v27);
        v69 = (uint64_t)v137;
        v70 = sub_1B1D363CC((uint64_t)v137);
        v135 = v18;
        v136 = v70;
        v71 = v12[2];
        v122 = v12;
        v134 = v23;
        if (v71 && (v72 = sub_1B1DC3AC8(v69), (v73 & 1) != 0))
        {
          v74 = (uint64_t *)(v12[7] + 16 * v72);
          v75 = *v74;
          v76 = v74[1];
          sub_1B1B632F0(v76);
        }
        else
        {
          v75 = 0;
          v76 = 0xF000000000000007;
        }
        v137 = (void *)sub_1B1D763B0(v76);
        v100 = sub_1B1BE2B14(v75, v76);
        v101 = v126;
        (*(void (**)(_QWORD *__return_ptr, unint64_t))(**(_QWORD **)(v126
                                                                                     + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                                       + 152))(v140, v100);
        v173 = v141;
        sub_1B1BCF9C4(v16, v141);
        v172 = v140[0];
        sub_1B1B28C6C((uint64_t)&v172);
        v171 = v140[1];
        sub_1B1B28C6C((uint64_t)&v171);
        v170 = v140[2];
        sub_1B1B28C6C((uint64_t)&v170);
        sub_1B1B28C6C((uint64_t)&v173);
        v169 = v142;
        sub_1B1B28C6C((uint64_t)&v169);
        v168 = v143;
        sub_1B1B28C6C((uint64_t)&v168);
        v138 = 0;
        v139 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v138 = 0x207475706E49;
        v139 = 0xE600000000000000;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1D763B0(v15);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v136 = v139;
        v137 = (void *)v138;
        sub_1B1BE2940();
        v102 = v123;
        v103 = (void *)swift_allocError();
        v133 = v104;
        v105 = (uint64_t)v124;
        *v124 = v101;
        v106 = v105 + v102[5];
        v132 = v101 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v107 = sub_1B222826C();
        v108 = *(_QWORD *)(v107 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v106, v132, v107);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v106, 0, 1, v107);
        v109 = v105 + v102[6];
        *(_QWORD *)v109 = v16;
        *(_BYTE *)(v109 + 8) = 32;
        v110 = (_QWORD *)(v105 + v102[7]);
        v111 = v136;
        *v110 = v137;
        v110[1] = v111;
        sub_1B1BE2988(v105, v133);
        v112 = *(_QWORD *)(v125 + 24);
        v113 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
        v114 = *(_QWORD **)(v112 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
        swift_retain();
        v137 = v103;
        v115 = v103;
        v116 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v112 + v113) = v114;
        if ((v116 & 1) == 0)
        {
          v114 = sub_1B1C63944(0, v114[2] + 1, 1, v114);
          *(_QWORD *)(v112 + v113) = v114;
        }
        v117 = v128;
        v119 = v114[2];
        v118 = v114[3];
        if (v119 >= v118 >> 1)
        {
          v114 = sub_1B1C63944(v118 > 1, v119 + 1, 1, v114);
          *(_QWORD *)(v112 + v113) = v114;
        }
        v114[2] = v119 + 1;
        v120 = v137;
        v114[v119 + 4] = v137;
        swift_willThrow();
        v121 = v120;
        sub_1B19F8D00(v135);
        sub_1B1B28D2C(v15);
        sub_1B1B28D2C(v134);
        sub_1B1B28D2C(v117);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68 = v120;
        goto LABEL_40;
      }
      type metadata accessor for CastNode(0);
      if (sub_1B1F127E8(v23, v27) != 1)
      {
        v135 = v18;
        v122 = v12;
        v77 = *(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v126 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                          + 152);
        v77(v144);
        v167 = v145;
        sub_1B1BCF9C4(v16, v145);
        v166 = v144[0];
        sub_1B1B28C6C((uint64_t)&v166);
        v165 = v144[1];
        sub_1B1B28C6C((uint64_t)&v165);
        v164 = v144[2];
        sub_1B1B28C6C((uint64_t)&v164);
        sub_1B1B28C6C((uint64_t)&v167);
        v163 = v146;
        sub_1B1B28C6C((uint64_t)&v163);
        v162 = v147;
        v78 = sub_1B1B28C6C((uint64_t)&v162);
        ((void (*)(_QWORD *__return_ptr, uint64_t))v77)(v148, v78);
        v161 = v149;
        v137 = (void *)sub_1B1BCF9C4(v127, v149);
        v160 = v148[0];
        sub_1B1B28C6C((uint64_t)&v160);
        v159 = v148[1];
        sub_1B1B28C6C((uint64_t)&v159);
        v158 = v148[2];
        sub_1B1B28C6C((uint64_t)&v158);
        sub_1B1B28C6C((uint64_t)&v161);
        v157 = v150;
        sub_1B1B28C6C((uint64_t)&v157);
        v156 = v151;
        sub_1B1B28C6C((uint64_t)&v156);
        v138 = 0;
        v139 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v138 = 0x207475706E49;
        v139 = 0xE600000000000000;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v134 = v23;
        sub_1B1D763B0(v23);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v79 = v128;
        sub_1B1D763B0(v128);
        sub_1B1B28D2C(v79);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v136 = v139;
        v137 = (void *)v138;
        sub_1B1BE2940();
        v80 = v123;
        v81 = (void *)swift_allocError();
        v133 = v82;
        v83 = (uint64_t)v124;
        v84 = v126;
        *v124 = v126;
        v85 = v83 + v80[5];
        v132 = v84 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v86 = sub_1B222826C();
        v87 = *(_QWORD *)(v86 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v85, v132, v86);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v87 + 56))(v85, 0, 1, v86);
        v88 = v83 + v80[6];
        *(_QWORD *)v88 = v16;
        *(_BYTE *)(v88 + 8) = 32;
        v89 = (_QWORD *)(v83 + v80[7]);
        v90 = v136;
        *v89 = v137;
        v89[1] = v90;
        sub_1B1BE2988(v83, v133);
        v91 = *(_QWORD *)(v125 + 24);
        v92 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
        v93 = *(_QWORD **)(v91 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
        swift_retain();
        v94 = v81;
        v95 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v91 + v92) = v93;
        if ((v95 & 1) == 0)
        {
          v93 = sub_1B1C63944(0, v93[2] + 1, 1, v93);
          *(_QWORD *)(v91 + v92) = v93;
        }
        v97 = v93[2];
        v96 = v93[3];
        v98 = v128;
        if (v97 >= v96 >> 1)
        {
          v93 = sub_1B1C63944(v96 > 1, v97 + 1, 1, v93);
          *(_QWORD *)(v91 + v92) = v93;
        }
        v93[2] = v97 + 1;
        v93[v97 + 4] = v81;
        swift_willThrow();
        v99 = v81;
        sub_1B19F8D00(v135);
        sub_1B1B28D2C(v15);
        sub_1B1B28D2C(v134);
        sub_1B1B28D2C(v98);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68 = v81;
LABEL_40:

        return swift_bridgeObjectRelease();
      }
      if (sub_1B1F10F1C(v23, v128))
      {
        v40 = v128;
        sub_1B1B28D2C(v128);
      }
      else
      {
        v41 = sub_1B1F10F1C(v128, v23);
        sub_1B1B28D2C(v128);
        if (v41)
        {
          sub_1B1B28D2C(v128);
          sub_1B1B632F0(v23);
          v40 = v23;
          v127 = v16;
        }
        else
        {
          v40 = v128;
        }
      }
      sub_1B1B632F0(v40);
      v42 = swift_isUniquelyReferenced_nonNull_native();
      v138 = (uint64_t)v12;
      sub_1B1B87374(v127, v40, (uint64_t)v137, v42);
      v12 = (_QWORD *)v138;
      swift_bridgeObjectRelease();
      sub_1B1B28D2C(v40);
      sub_1B1B28D2C(v23);
      sub_1B19F8D00(v18);
      sub_1B1B28D2C(v15);
      a2 = v131;
    }
    v17 = v132;
    v14 = v133;
LABEL_7:
    if (v17 != v16)
    {
      v15 = *(_QWORD *)(a1 + 8 * v16++ + 40);
      if (v14 != v16)
        continue;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v134 = v23;
  v135 = v18;
  sub_1B1B632F0(v23);
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v138 = (uint64_t)v12;
  v30 = (uint64_t)v137;
  v31 = sub_1B1DC3AC8((uint64_t)v137);
  v33 = v32;
  v34 = v12[2] + ((v32 & 1) == 0);
  if (v12[3] >= v34)
  {
    if ((v29 & 1) == 0)
      sub_1B1EAD470();
    goto LABEL_20;
  }
  sub_1B1E99DBC(v34, v29);
  v35 = sub_1B1DC3AC8(v30);
  if ((v33 & 1) == (v36 & 1))
  {
    v31 = v35;
LABEL_20:
    a1 = v130;
    a2 = v131;
    v12 = (_QWORD *)v138;
    if ((v33 & 1) != 0)
    {
      v37 = (uint64_t *)(*(_QWORD *)(v138 + 56) + 16 * v31);
      sub_1B1B28D2C(v37[1]);
      v38 = v134;
      *v37 = v16;
      v37[1] = v38;
    }
    else
    {
      *(_QWORD *)(v138 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      *(_QWORD *)(v12[6] + 8 * v31) = v137;
      v39 = (uint64_t *)(v12[7] + 16 * v31);
      v38 = v134;
      *v39 = v16;
      v39[1] = v38;
      ++v12[2];
    }
    v17 = v132;
    swift_bridgeObjectRelease();
    sub_1B1B28D2C(v38);
    sub_1B19F8D00(v135);
    sub_1B1B28D2C(v15);
    v14 = v133;
    goto LABEL_7;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1BDEF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t result;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  uint64_t inited;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void (*v45)(void);
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD v75[6];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15, v16);
  result = 0;
  if (*(_BYTE *)(v2 + 56) == 1)
  {
    v73 = (char *)&v56 - v17;
    v20 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 200))(1, v18);
    v21 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v20
                                                                             + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                               + 152);
    v22 = swift_retain();
    v21(v75, v22);
    swift_release();
    v23 = v75[0];
    v80 = v75[1];
    v81 = v75[0];
    sub_1B1B28C6C((uint64_t)&v80);
    v79 = v75[2];
    sub_1B1B28C6C((uint64_t)&v79);
    v78 = v75[3];
    sub_1B1B28C6C((uint64_t)&v78);
    v77 = v75[4];
    sub_1B1B28C6C((uint64_t)&v77);
    v76 = v75[5];
    sub_1B1B28C6C((uint64_t)&v76);
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v66 = v14;
      v74 = v20;
      v67 = v9;
      v72 = v6;
      v71 = v5;
      v25 = 0;
      v26 = 0;
      v69 = 0;
      v70 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
      v27 = v23 + 32;
      v28 = a2 + 32;
      v65 = v24 - 1;
      v64 = xmmword_1B226D240;
      v68 = xmmword_1B2281D30;
LABEL_4:
      v29 = 2 * v26;
      v30 = v26;
      do
      {
        v31 = *(_QWORD *)(v27 + 8 * v30);
        if (v31 >> 61 == 3)
        {
          v32 = *(_QWORD *)(v28 + 8 * v30);
          v33 = *(_QWORD *)(v31 + 16);
          sub_1B19F8CD0(*(_QWORD *)(v27 + 8 * v30));
          sub_1B1B632F0(v32);
          sub_1B1B632F0(v33);
          if ((sub_1B1D77578(v32, v33) & 1) == 0)
          {
            type metadata accessor for CastNode(0);
            if (sub_1B1F127E8(v32, v33) == 1)
            {
              type metadata accessor for AutoCastNode(0);
              v34 = (_QWORD *)swift_allocObject();
              *(_QWORD *)((char *)v34 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v32;
              *(_QWORD *)((char *)v34 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v33;
              v34[2] = MEMORY[0x1E0DEE9D8];
              v34[3] = 0;
              v34[4] = 0;
              v35 = (char *)v34 + OBJC_IVAR____TtC3VFX4Node_authoringID;
              v36 = v34;
              sub_1B1B632F0(v32);
              sub_1B1B632F0(v33);
              v61 = v35;
              sub_1B2228260();
              sub_1B1791524(0, (unint64_t *)&qword_1EEF5C1F8, (uint64_t (*)(uint64_t))sub_1B1BE2AC0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              inited = swift_initStackObject();
              v60 = inited;
              *(_OWORD *)(inited + 16) = v64;
              v62 = *(_OWORD *)(*(_QWORD *)(v74 + v70) + 16 * v30 + 32);
              *(_OWORD *)(inited + 32) = v62;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v73, 1, 1, v71);
              type metadata accessor for AuthoringNode();
              v38 = swift_allocObject();
              v63 = v38;
              *(_OWORD *)(v38 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v68;
              *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) = v36;
              v59 = swift_allocObject();
              v57 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
              *(_QWORD *)(v59 + 16) = v57;
              v58 = swift_allocObject();
              v39 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
              *(_QWORD *)(v58 + 16) = v39;
              swift_retain();
              *(_QWORD *)&v62 = v36;
              swift_retain();
              sub_1B1B632F0(v57);
              sub_1B1B632F0(v39);
              swift_release();
              swift_release();
              v40 = v69;
              v59 = sub_1B1C6D288(0, 1, v60);
              v69 = v40;
              v41 = (uint64_t)v73;
              swift_bridgeObjectRelease();
              *(_QWORD *)(v63 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v59;
              v42 = (uint64_t)v66;
              sub_1B1B28FC8(v41, (uint64_t)v66);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v42, 1, v71) == 1)
              {
                sub_1B2228260();
                v43 = v41;
                v44 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
                sub_1B1B1DC9C(v43, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
                sub_1B1B1DC9C(v42, (unint64_t *)&qword_1ED4B7B50, v44);
                v45 = *(void (**)(void))(v72 + 32);
              }
              else
              {
                sub_1B1B1DC9C(v41, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
                v46 = v42;
                v47 = *(void (**)(void))(v72 + 32);
                ((void (*)(char *, uint64_t, uint64_t))v47)(v67, v46, v71);
                v45 = v47;
              }
              v48 = v63;
              v60 = v63 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
              v49 = v71;
              v45();
              v50 = *(_QWORD *)(v48 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
              v51 = *(_QWORD *)(v48 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
              *(_OWORD *)(v48 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v68;
              sub_1B1A0DAC8(v50, v51);
              (*(void (**)(char *, uint64_t, uint64_t))(v72 + 24))(v61, v60, v49);
              swift_release();
              v52 = v70;
              v53 = *(_QWORD **)(v74 + v70);
              swift_retain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v74 + v52) = v53;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v53 = sub_1B1FFEED4(v53);
                *(_QWORD *)(v74 + v70) = v53;
              }
              v55 = &v53[v29];
              v26 = v30 + 1;
              v55[4] = v63;
              v55[5] = 0;
              swift_release();
              sub_1B1B28D2C(v32);
              sub_1B1B28D2C(v33);
              swift_release();
              sub_1B19F8D00(v31);
              v25 = 1;
              if (v65 == v30)
              {
                sub_1B1B28C6C((uint64_t)&v81);
                return v74;
              }
              goto LABEL_4;
            }
          }
          sub_1B1B28D2C(v33);
          sub_1B1B28D2C(v32);
          sub_1B19F8D00(v31);
        }
        ++v30;
        v29 += 2;
      }
      while (v24 != v30);
      sub_1B1B28C6C((uint64_t)&v81);
      if ((v25 & 1) == 0)
        goto LABEL_20;
      return v74;
    }
    else
    {
      sub_1B1B28C6C((uint64_t)&v81);
LABEL_20:
      swift_release();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1B1BDF690(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  __objc2_class **v20;
  __objc2_class **v21;
  __objc2_class_ro *info;
  unint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  BOOL v41;
  unint64_t v42;
  __objc2_class_ro *v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __objc2_class **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __objc2_class **v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  __objc2_class **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  id v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  __objc2_class **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __objc2_class **v122;
  unint64_t *v123;
  _QWORD *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  __objc2_class **v130;
  unint64_t v131;
  __objc2_class ***v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[3];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179[6];
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v3 = v2;
  v4 = v1;
  v131 = *v1;
  sub_1B1791524(0, &qword_1EEF5C1F0, (uint64_t (*)(uint64_t))type metadata accessor for GraphError, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v120 - v8);
  v10 = (int *)type metadata accessor for GraphError();
  v11 = *((_QWORD *)v10 - 1);
  MEMORY[0x1E0C80A78](v10, v12);
  v132 = (__objc2_class ***)((char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v120 - v16;
  v18 = (_QWORD *)type metadata accessor for AuthoringGraph();
  sub_1B20396B0(a1, v9);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10) == 1)
  {
    v19 = sub_1B1B1DC9C((uint64_t)v9, &qword_1EEF5C1F0, (uint64_t (*)(uint64_t))type metadata accessor for GraphError);
    v20 = (__objc2_class **)a1;
    v21 = *(__objc2_class ***)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
    info = (*v21)[3].info;
    v23 = v4;
    ((void (*)(uint64_t *__return_ptr, uint64_t))info)(&v135, v19);
    v18 = v4;
    v24 = sub_1B1BDC62C((uint64_t)v20);
    if (v2)
    {
      v196 = v135;
      sub_1B1B28C6C((uint64_t)&v196);
      v195 = v136;
      sub_1B1B28C6C((uint64_t)&v195);
      v194 = v137;
      sub_1B1B28C6C((uint64_t)&v194);
      v193 = v138;
      sub_1B1B28C6C((uint64_t)&v193);
      v192 = v139;
      sub_1B1B28C6C((uint64_t)&v192);
      v191 = v140;
      sub_1B1B28C6C((uint64_t)&v191);
    }
    else
    {
      v130 = v21;
      MEMORY[0x1E0C80A78](v24, v25);
      *(&v120 - 4) = (uint64_t)&v135;
      *(&v120 - 3) = (uint64_t)v4;
      *(&v120 - 2) = (uint64_t)v20;
      v29 = v28;
      v30 = swift_bridgeObjectRetain();
      v31 = sub_1B1BE2370(v30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1BE2924);
      swift_bridgeObjectRelease();
      v32 = sub_1B1BDEF3C((uint64_t)v20, v31);
      if (!v32)
      {
        v121 = v29;
        v122 = v20;
        v34 = v135;
        v35 = *(_QWORD *)(v31 + 16);
        v124 = (_QWORD *)v31;
        v36 = v23;
        if (v35 && (v128 = *(_QWORD *)(v135 + 16)) != 0)
        {
          v37 = *(_QWORD *)(v31 + 32);
          v129 = v135 + 32;
          v120 = v135;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v38 = 0;
          v126 = (char *)(v31 + 40);
          v127 = v35 - 1;
          v123 = v23;
          while (1)
          {
            v39 = *(_QWORD *)(v129 + 8 * v38);
            sub_1B1B632F0(v37);
            sub_1B19F8CD0(v39);
            sub_1B1D35CEC(v37, v39);
            if ((v40 & 1) == 0)
            {
              v41 = *((_BYTE *)v36 + 56) == 1 && (v39 & 0xE000000000000000) == 0x6000000000000000;
              if (!v41)
                break;
              v42 = *(_QWORD *)(v39 + 16);
              type metadata accessor for CastNode(0);
              v125 = v38;
              sub_1B1B632F0(v42);
              v43 = info;
              v44 = v3;
              v45 = sub_1B1F127E8(v37, v42);
              v46 = v42;
              v36 = v123;
              v31 = (uint64_t)v124;
              sub_1B1B28D2C(v46);
              v41 = v45 == 1;
              v3 = v44;
              info = v43;
              v38 = v125;
              if (!v41)
                break;
            }
            sub_1B19F8D00(v39);
            sub_1B1B28D2C(v37);
            if (v127 != v38)
            {
              v37 = *(_QWORD *)&v126[8 * v38++];
              if (v128 != v38)
                continue;
            }
            v47 = v120;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v34 = v47;
            goto LABEL_22;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v190 = v136;
          sub_1B1B28C6C((uint64_t)&v190);
          v189 = v137;
          sub_1B1B28C6C((uint64_t)&v189);
          v188 = v138;
          sub_1B1B28C6C((uint64_t)&v188);
          v187 = v139;
          sub_1B1B28C6C((uint64_t)&v187);
          v186 = v140;
          sub_1B1B28C6C((uint64_t)&v186);
          swift_bridgeObjectRelease();
          v133 = 0;
          v134 = 0xE000000000000000;
          sub_1B2229430();
          v53 = swift_bridgeObjectRelease();
          v133 = 0x207475706E49;
          v134 = 0xE600000000000000;
          ((void (*)(_QWORD *__return_ptr, uint64_t))info)(v141, v53);
          v185 = v142;
          sub_1B1BCF9C4(v38, v142);
          v54 = v122;
          v184 = v141[0];
          sub_1B1B28C6C((uint64_t)&v184);
          v183 = v141[1];
          sub_1B1B28C6C((uint64_t)&v183);
          v182 = v141[2];
          sub_1B1B28C6C((uint64_t)&v182);
          sub_1B1B28C6C((uint64_t)&v185);
          v181 = v143;
          sub_1B1B28C6C((uint64_t)&v181);
          v180 = v144;
          sub_1B1B28C6C((uint64_t)&v180);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v130 = (__objc2_class **)v39;
          sub_1B1D35B98(v39);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v131 = v37;
          sub_1B1D763B0(v37);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v128 = v134;
          v129 = v133;
          sub_1B1BE2940();
          v55 = (void *)swift_allocError();
          v127 = v56;
          v57 = (uint64_t)v132;
          *v132 = v54;
          v58 = v57 + v10[5];
          v59 = (char *)v54 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
          v60 = sub_1B222826C();
          v61 = *(_QWORD *)(v60 - 8);
          (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v58, v59, v60);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
          v62 = v57 + v10[6];
          *(_QWORD *)v62 = v38;
          *(_BYTE *)(v62 + 8) = 32;
          v63 = (uint64_t *)(v57 + v10[7]);
          v64 = v127;
          v65 = v128;
          *v63 = v129;
          v63[1] = v65;
          sub_1B1BE2988(v57, v64);
          v66 = v123[3];
          v67 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
          v18 = *(_QWORD **)(v66 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
          swift_retain();
          v68 = v55;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v66 + v67) = v18;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v18 = sub_1B1C63944(0, v18[2] + 1, 1, v18);
            *(_QWORD *)(v66 + v67) = v18;
          }
          v71 = v18[2];
          v70 = v18[3];
          if (v71 >= v70 >> 1)
          {
            v18 = sub_1B1C63944(v70 > 1, v71 + 1, 1, v18);
            *(_QWORD *)(v66 + v67) = v18;
          }
          v18[2] = v71 + 1;
          v18[v71 + 4] = v55;
          swift_willThrow();
          v72 = v55;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B1B28D2C(v131);
          sub_1B19F8D00((unint64_t)v130);
        }
        else
        {
LABEL_22:
          v48 = v34;
          v49 = v122;
          v50 = sub_1B1BDE070(v31, v34, *((unsigned __int8 *)v36 + 56), (uint64_t)v122);
          v120 = v48;
          v51 = sub_1B1BDD8E0((uint64_t)v49, v31, v50);
          if (v51)
          {
            v52 = v51;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v155 = v136;
            sub_1B1B28C6C((uint64_t)&v155);
            v154 = v137;
            sub_1B1B28C6C((uint64_t)&v154);
            v153 = v138;
            sub_1B1B28C6C((uint64_t)&v153);
            v152 = v139;
            sub_1B1B28C6C((uint64_t)&v152);
            v151 = v140;
            sub_1B1B28C6C((uint64_t)&v151);
            swift_bridgeObjectRelease();
            v18 = (_QWORD *)sub_1B1BDF690(v52);
            swift_release();
            return v18;
          }
          v126 = 0;
          v123 = v36;
          v73 = *(_QWORD *)(v50 + 64);
          v129 = v50 + 64;
          v74 = 1 << *(_BYTE *)(v50 + 32);
          v75 = -1;
          if (v74 < 64)
            v75 = ~(-1 << v74);
          v76 = v75 & v73;
          v77 = (unint64_t)(v74 + 63) >> 6;
          swift_bridgeObjectRetain();
          v78 = 0;
          v127 = v50 + 104;
          v128 = v77 - 5;
          v79 = v50;
          if (!v76)
            goto LABEL_33;
LABEL_32:
          v80 = __clz(__rbit64(v76));
          v76 &= v76 - 1;
          v81 = v80 | (v78 << 6);
          while (1)
          {
            v84 = *(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v81);
            v85 = *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v81);
            v160 = v137;
            v86 = *(_QWORD *)(v137 + 8 * v84 + 32);
            sub_1B1B632F0(v85);
            sub_1B19F8CD0(v86);
            sub_1B1D35CEC(v85, v86);
            if ((v87 & 1) == 0)
              break;
            sub_1B19F8D00(v86);
            sub_1B1B28D2C(v85);
            if (v76)
              goto LABEL_32;
LABEL_33:
            v82 = v78 + 1;
            if (v78 + 1 >= v77)
              goto LABEL_54;
            v83 = *(_QWORD *)(v129 + 8 * v82);
            if (!v83)
            {
              v82 = v78 + 2;
              if (v78 + 2 >= v77)
                goto LABEL_54;
              v83 = *(_QWORD *)(v129 + 8 * v82);
              if (!v83)
              {
                v82 = v78 + 3;
                if (v78 + 3 >= v77)
                  goto LABEL_54;
                v83 = *(_QWORD *)(v129 + 8 * v82);
                if (!v83)
                {
                  v82 = v78 + 4;
                  if (v78 + 4 >= v77)
                    goto LABEL_54;
                  v83 = *(_QWORD *)(v129 + 8 * v82);
                  if (!v83)
                  {
                    while (v128 != v78)
                    {
                      v83 = *(_QWORD *)(v127 + 8 * v78++);
                      if (v83)
                      {
                        v82 = v78 + 4;
                        goto LABEL_44;
                      }
                    }
LABEL_54:
                    v106 = v124;
                    v107 = swift_release();
                    MEMORY[0x1E0C80A78](v107, v108);
                    v18 = v123;
                    *(&v120 - 2) = (uint64_t)v123;
                    *(&v120 - 1) = (uint64_t)&v135;
                    v109 = v126;
                    v110 = sub_1B1BE24B4(v121, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1BE29CC);
                    if (v109)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v179[0] = v136;
                      sub_1B1B28C6C((uint64_t)v179);
                      v178 = v137;
                      sub_1B1B28C6C((uint64_t)&v178);
                      v177 = v138;
                      sub_1B1B28C6C((uint64_t)&v177);
                      v176 = v139;
                      sub_1B1B28C6C((uint64_t)&v176);
                      v175 = v140;
                      sub_1B1B28C6C((uint64_t)&v175);
                    }
                    else
                    {
                      v111 = v110;
                      swift_bridgeObjectRelease();
                      v112 = v122;
                      if (*v122 == _TtC3VFX21AuthoringSubGraphNode)
                      {
                        swift_retain();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v165 = v136;
                        sub_1B1B28C6C((uint64_t)&v165);
                        v164 = v137;
                        sub_1B1B28C6C((uint64_t)&v164);
                        v163 = v138;
                        sub_1B1B28C6C((uint64_t)&v163);
                        v162 = v139;
                        sub_1B1B28C6C((uint64_t)&v162);
                        v161 = v140;
                        sub_1B1B28C6C((uint64_t)&v161);
                        v18 = sub_1B1BDCFA8((uint64_t)v112, v106, v111);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_release();
                      }
                      else
                      {
                        if (*v130 == _TtC3VFX17SubGraphEnterNode)
                        {
                          swift_retain();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v170 = v136;
                          sub_1B1B28C6C((uint64_t)&v170);
                          v169 = v137;
                          sub_1B1B28C6C((uint64_t)&v169);
                          v168 = v138;
                          sub_1B1B28C6C((uint64_t)&v168);
                          v167 = v139;
                          sub_1B1B28C6C((uint64_t)&v167);
                          v166 = v140;
                          sub_1B1B28C6C((uint64_t)&v166);
                          swift_release();
                          v116 = v18[6];
                          v117 = swift_bridgeObjectRetain();
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                          v113 = v136;
                          v174 = v137;
                          sub_1B1B28C6C((uint64_t)&v174);
                          v173 = v138;
                          sub_1B1B28C6C((uint64_t)&v173);
                          v172 = v139;
                          sub_1B1B28C6C((uint64_t)&v172);
                          v171 = v140;
                          v114 = sub_1B1B28C6C((uint64_t)&v171);
                          MEMORY[0x1E0C80A78](v114, v115);
                          *(&v120 - 4) = (uint64_t)v18;
                          *(&v120 - 3) = (uint64_t)v112;
                          *(&v120 - 2) = v79;
                          v116 = sub_1B1BE2600(v113, sub_1B1BE29E4);
                          swift_bridgeObjectRelease();
                          v117 = swift_bridgeObjectRelease();
                        }
                        MEMORY[0x1E0C80A78](v117, v118);
                        *(&v120 - 6) = (uint64_t)v122;
                        *(&v120 - 5) = v111;
                        *(&v120 - 4) = (uint64_t)v124;
                        *(&v120 - 3) = v116;
                        *(&v120 - 2) = v119;
                        v18 = (_QWORD *)sub_1B1BCEAD0((void (*)(void))sub_1B1BE2A00);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                    }
                    return v18;
                  }
                }
              }
            }
LABEL_44:
            v76 = (v83 - 1) & v83;
            v81 = __clz(__rbit64(v83)) + (v82 << 6);
            v78 = v82;
          }
          swift_bridgeObjectRelease();
          v131 = v79;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v159 = v136;
          sub_1B1B28C6C((uint64_t)&v159);
          sub_1B1B28C6C((uint64_t)&v160);
          v158 = v138;
          sub_1B1B28C6C((uint64_t)&v158);
          v157 = v139;
          sub_1B1B28C6C((uint64_t)&v157);
          v156 = v140;
          sub_1B1B28C6C((uint64_t)&v156);
          swift_bridgeObjectRelease();
          sub_1B1D363CC(v84);
          v133 = 0;
          v134 = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v133 = 0x6465766C6F736552;
          v134 = 0xE900000000000020;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v130 = (__objc2_class **)v85;
          sub_1B1D763B0(v85);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B1D35B98(v86);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v128 = v134;
          v129 = v133;
          sub_1B1BE2940();
          v55 = (void *)swift_allocError();
          v127 = v88;
          v89 = (uint64_t)v132;
          v90 = v122;
          *v132 = v122;
          v91 = v89 + v10[5];
          v126 = (char *)v90 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
          v92 = sub_1B222826C();
          v93 = *(_QWORD *)(v92 - 8);
          (*(void (**)(uint64_t, char *, uint64_t))(v93 + 16))(v91, v126, v92);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v91, 0, 1, v92);
          v94 = v89 + v10[6];
          *(_QWORD *)v94 = 0;
          *(_BYTE *)(v94 + 8) = 33;
          v95 = (uint64_t *)(v89 + v10[7]);
          v96 = v127;
          v97 = v128;
          *v95 = v129;
          v95[1] = v97;
          sub_1B1BE2988(v89, v96);
          v98 = v123[3];
          v99 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
          v18 = *(_QWORD **)(v98 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
          swift_retain();
          v100 = v55;
          v101 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v98 + v99) = v18;
          if ((v101 & 1) == 0)
          {
            v18 = sub_1B1C63944(0, v18[2] + 1, 1, v18);
            *(_QWORD *)(v98 + v99) = v18;
          }
          v103 = v18[2];
          v102 = v18[3];
          v104 = (unint64_t)v130;
          if (v103 >= v102 >> 1)
          {
            v18 = sub_1B1C63944(v102 > 1, v103 + 1, 1, v18);
            *(_QWORD *)(v98 + v99) = v18;
          }
          v18[2] = v103 + 1;
          v18[v103 + 4] = v55;
          swift_willThrow();
          v105 = v55;
          swift_release();
          sub_1B19F8D00(v86);
          sub_1B1B28D2C(v104);
        }

        return v18;
      }
      v33 = v32;
      swift_bridgeObjectRelease();
      v150 = v135;
      sub_1B1B28C6C((uint64_t)&v150);
      v149 = v136;
      sub_1B1B28C6C((uint64_t)&v149);
      v148 = v137;
      sub_1B1B28C6C((uint64_t)&v148);
      v147 = v138;
      sub_1B1B28C6C((uint64_t)&v147);
      v146 = v139;
      sub_1B1B28C6C((uint64_t)&v146);
      v145 = v140;
      sub_1B1B28C6C((uint64_t)&v145);
      swift_bridgeObjectRelease();
      v18 = (_QWORD *)sub_1B1BDF690(v33);
      swift_release();
    }
  }
  else
  {
    sub_1B1BE2988((uint64_t)v9, (uint64_t)v17);
    sub_1B1BE2940();
    swift_allocError();
    sub_1B1BE2A1C((uint64_t)v17, v26);
    swift_willThrow();
    sub_1B1BE2A60((uint64_t)v17);
  }
  return v18;
}

_QWORD *sub_1B1BE07D4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v43 = a6;
  v11 = (_QWORD *)0x8000000000000008;
  v12 = (int *)type metadata accessor for GraphError();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (uint64_t *)((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(*a4 + 8 * a1 + 32);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B19F8CD0(v16);
  sub_1B1D3590C(v16);
  v18 = v17;
  swift_release();
  sub_1B19F8D00(v16);
  if ((v18 & 1) == 0)
  {
    v11 = a5;
    v19 = sub_1B1BDCA80(a2);
    v20 = (uint64_t *)v19;
    if ((v21 & 1) != 0)
    {
      v45 = v19;
      sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
      swift_willThrowTypedImpl();
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + 152))(&v46);
      v22 = v47;
      v57 = v47;
      v56 = v46;
      sub_1B1B28C6C((uint64_t)&v56);
      v55 = v48;
      sub_1B1B28C6C((uint64_t)&v55);
      v54 = v49;
      sub_1B1B28C6C((uint64_t)&v54);
      v53 = v50;
      sub_1B1B28C6C((uint64_t)&v53);
      v52 = v51;
      sub_1B1B28C6C((uint64_t)&v52);
      v23 = *(_QWORD *)(v22 + 16);
      sub_1B1B28C6C((uint64_t)&v57);
      if (v23 <= a3)
      {
        v42 = v20;
        sub_1B1BE2940();
        v44 = swift_allocError();
        v25 = v24;
        v26 = v43;
        *v15 = v43;
        v27 = (char *)v15 + v12[5];
        v28 = v26 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v29 = sub_1B222826C();
        v30 = *(_QWORD *)(v29 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        v31 = (char *)v15 + v12[6];
        *(_QWORD *)v31 = 3;
        v31[8] = -96;
        *(_OWORD *)((char *)v15 + v12[7]) = xmmword_1B2281D40;
        sub_1B1BE2988((uint64_t)v15, v25);
        v32 = a5[3];
        v33 = (void *)v44;
        v34 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
        v11 = *(_QWORD **)(v32 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
        swift_retain();
        v35 = v33;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v32 + v34) = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v11 = sub_1B1C63944(0, v11[2] + 1, 1, v11);
          *(_QWORD *)(v32 + v34) = v11;
        }
        v38 = v11[2];
        v37 = v11[3];
        v39 = v42;
        if (v38 >= v37 >> 1)
        {
          v11 = sub_1B1C63944(v37 > 1, v38 + 1, 1, v11);
          *(_QWORD *)(v32 + v34) = v11;
        }
        v11[2] = v38 + 1;
        v11[v38 + 4] = v33;
        swift_willThrow();
        sub_1B1B9CAE0(v39, 0);
      }
      else
      {
        v11 = *(_QWORD **)(v20[4] + 8 * a3 + 32);
        sub_1B1BCCD2C(v20[3]);
        sub_1B1B632F0((unint64_t)v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1B9CAE0(v20, 0);
      }
    }
  }
  return v11;
}

_QWORD *sub_1B1BE0B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  _QWORD v28[5];

  v27 = a3;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v28[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v14, a2 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v9, v12);
  v15 = *(_QWORD *)(a4 + 40);
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v16 = sub_1B1DC3CA8((uint64_t)v14);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    goto LABEL_7;
  }
  v18 = *(_BYTE *)(*(_QWORD *)(v15 + 56) + v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_7:
  v19 = *(_QWORD *)(*a5 + 8 * a1 + 32);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B19F8CD0(v19);
  sub_1B1D3590C(v19);
  v21 = v20;
  swift_release();
  sub_1B19F8D00(v19);
  if ((v21 & 1) != 0)
  {
LABEL_8:
    type metadata accessor for _PlaceholderNode(0);
    v22 = (_QWORD *)swift_allocObject();
    v28[3] = type metadata accessor for AuthoringNode();
    v28[4] = &off_1ED488F38;
    v28[0] = a2;
    sub_1B19FA198((uint64_t)v28, (uint64_t)v22 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
    v23 = MEMORY[0x1E0DEE9D8];
    v22[3] = 0;
    v22[4] = 0;
    v22[2] = v23;
    swift_retain();
    sub_1B2228260();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
    return v22;
  }
  v24 = sub_1B1BDCA80(a2);
  v22 = (_QWORD *)v24;
  if ((v25 & 1) != 0)
  {
    v28[0] = v24;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    swift_willThrowTypedImpl();
  }
  return v22;
}

uint64_t sub_1B1BE0D94(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v10 = (int *)type metadata accessor for GraphError();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1B1BDCE70(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw), a2, a5);
  if ((~result & 0xF000000000000007) == 0)
  {
    v36 = result;
    v37 = 0;
    v38 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v37 = 0x2074757074754FLL;
    v38 = 0xE700000000000000;
    v39 = a1;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v34 = v38;
    v35 = v37;
    sub_1B1BE2940();
    v15 = (void *)swift_allocError();
    v33 = v16;
    *v13 = a4;
    v17 = (char *)v13 + v10[5];
    v18 = a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v19 = sub_1B222826C();
    v20 = a3;
    v21 = *(_QWORD *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v19);
    v22 = (char *)v13 + v10[6];
    *(_QWORD *)v22 = 5;
    v22[8] = -96;
    v23 = (_QWORD *)((char *)v13 + v10[7]);
    v24 = v33;
    v25 = v34;
    *v23 = v35;
    v23[1] = v25;
    sub_1B1BE2988((uint64_t)v13, v24);
    v26 = *(_QWORD *)(v20 + 24);
    v27 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    v28 = *(_QWORD **)(v26 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    swift_retain();
    v29 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v26 + v27) = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = sub_1B1C63944(0, v28[2] + 1, 1, v28);
      *(_QWORD *)(v26 + v27) = v28;
    }
    v32 = v28[2];
    v31 = v28[3];
    if (v32 >= v31 >> 1)
    {
      v28 = sub_1B1C63944(v31 > 1, v32 + 1, 1, v28);
      *(_QWORD *)(v26 + v27) = v28;
    }
    v28[2] = v32 + 1;
    v28[v32 + 4] = v15;
    swift_willThrow();
    return v36;
  }
  return result;
}

uint64_t sub_1B1BE1034(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v9 = a2 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v10 = (char *)a1 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v11 = sub_1B222826C();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  a1[2] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a1[3];
  a1[3] = a4;
  a1[4] = a5;
  swift_bridgeObjectRetain();
  return sub_1B1B28F18(v13);
}

uint64_t sub_1B1BE10FC()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GraphTypeResolver()
{
  return objc_opt_self();
}

unint64_t sub_1B1BE1160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + 152))(&v23);
  v34 = v23;
  if (*(_QWORD *)(v23 + 16) <= a2)
    goto LABEL_9;
  v6 = *(_QWORD *)(v23 + 8 * a2 + 32);
  if (v6 >> 61 != 3)
  {
    sub_1B19F8CD0(v6);
    v9 = sub_1B1D35B14(v6);
    if ((v10 & 1) == 0)
    {
      v11 = v9;
      v33 = v25;
      v12 = *(_QWORD *)(v25 + 8 * v9 + 32);
      if (v12 >> 61 == 3)
      {
        v7 = *(_QWORD *)(v12 + 16);
        sub_1B1B632F0(v7);
        sub_1B19F8D00(v6);
        sub_1B1B28C6C((uint64_t)&v34);
        v32 = v24;
        sub_1B1B28C6C((uint64_t)&v32);
        v8 = &v33;
        goto LABEL_7;
      }
      sub_1B1B28C6C((uint64_t)&v34);
      sub_1B1B28C6C((uint64_t)&v33);
      v14 = v24;
      v31 = v26;
      v32 = v24;
      sub_1B1B28C6C((uint64_t)&v31);
      v30 = v27;
      sub_1B1B28C6C((uint64_t)&v30);
      v29 = v28;
      sub_1B1B28C6C((uint64_t)&v29);
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        for (i = 0; v15 != i; ++i)
        {
          v17 = *(_QWORD *)(v14 + 32 + 8 * i);
          sub_1B19F8CD0(v17);
          v18 = sub_1B1D35B14(v17);
          if ((v19 & 1) == 0 && v18 == v11 && (v20 = *(_QWORD *)(v3 + 48), *(_QWORD *)(v20 + 16)))
          {
            swift_retain_n();
            swift_bridgeObjectRetain();
            v21 = sub_1B1DC423C(a1, i);
            if ((v22 & 1) != 0)
            {
              v7 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
              sub_1B1B632F0(v7);
              sub_1B19F8D00(v17);
              swift_bridgeObjectRelease();
              swift_release_n();
              sub_1B1B28C6C((uint64_t)&v32);
              sub_1B19F8D00(v6);
              return v7;
            }
            sub_1B19F8D00(v17);
            swift_bridgeObjectRelease();
            swift_release_n();
          }
          else
          {
            sub_1B19F8D00(v17);
          }
        }
      }
      sub_1B1B28C6C((uint64_t)&v32);
      sub_1B19F8D00(v6);
      return 0xF000000000000007;
    }
    sub_1B19F8D00(v6);
LABEL_9:
    sub_1B1B28C6C((uint64_t)&v34);
    v33 = v24;
    sub_1B1B28C6C((uint64_t)&v33);
    v32 = v25;
    sub_1B1B28C6C((uint64_t)&v32);
    v31 = v26;
    sub_1B1B28C6C((uint64_t)&v31);
    v30 = v27;
    sub_1B1B28C6C((uint64_t)&v30);
    v29 = v28;
    sub_1B1B28C6C((uint64_t)&v29);
    return 0xF000000000000007;
  }
  v7 = *(_QWORD *)(v6 + 16);
  sub_1B1B632F0(v7);
  sub_1B1B28C6C((uint64_t)&v34);
  v33 = v24;
  sub_1B1B28C6C((uint64_t)&v33);
  v32 = v25;
  v8 = &v32;
LABEL_7:
  sub_1B1B28C6C((uint64_t)v8);
  v31 = v26;
  sub_1B1B28C6C((uint64_t)&v31);
  v30 = v27;
  sub_1B1B28C6C((uint64_t)&v30);
  v29 = v28;
  sub_1B1B28C6C((uint64_t)&v29);
  return v7;
}

uint64_t sub_1B1BE1460()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[2];

  v1 = v0;
  v2 = v0 + 3;
  v3 = swift_retain();
  MEMORY[0x1B5E2064C](v3);
  if (*(_QWORD *)((v1[3] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[3] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  result = sub_1B2228AD0();
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v74 = sub_1B22296AC();
    result = swift_bridgeObjectRelease();
    if (!v74)
      return result;
  }
  else if (!*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v5 = MEMORY[0x1E0DEE9D8];
  v77 = v0 + 4;
  v78 = v0;
  v75 = v0 + 3;
  while (1)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62
      && (swift_bridgeObjectRetain(), sub_1B22296AC(),
                                      swift_bridgeObjectRelease(),
                                      v6 = *v2,
                                      (unint64_t)*v2 >> 62))
    {
      swift_bridgeObjectRetain();
      v8 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v8)
      {
LABEL_8:
        if ((v6 & 0xC000000000000001) != 0)
        {
          v7 = MEMORY[0x1B5E21018](0, v6);
        }
        else
        {
          v7 = *(_QWORD *)(v6 + 32);
          swift_retain();
        }
        goto LABEL_13;
      }
    }
    else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_8;
    }
    v7 = 0;
LABEL_13:
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    sub_1B1C938C4(0, v9 != 0);
    v10 = *v77;
    if (*(_QWORD *)(*v77 + 16))
    {
      v11 = sub_1B222A060();
      v12 = -1 << *(_BYTE *)(v10 + 32);
      v13 = v11 & ~v12;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
      {
        v14 = *(_QWORD *)(v10 + 48);
        if (*(_QWORD *)(v14 + 8 * v13) == v7)
          goto LABEL_79;
        v15 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v15;
          if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v13) == v7)
            goto LABEL_79;
        }
      }
    }
    sub_1B1B8AA74(&v83, v7);
    v16 = *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
      break;
    v83 = v5;
LABEL_77:
    swift_bridgeObjectRetain();
    v72 = v5;
LABEL_78:
    swift_bridgeObjectRelease();
    sub_1B19F4AF4(v72);
LABEL_79:
    result = swift_release();
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v73 = sub_1B22296AC();
      result = swift_bridgeObjectRelease();
      if (!v73)
        return result;
    }
    else if (!*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
  }
  v76 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  v18 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
  v19 = v16 + 32;
  swift_bridgeObjectRetain();
  v20 = 0;
  v79 = v18;
  v80 = v17;
  v81 = v19;
  while (1)
  {
    v21 = (uint64_t *)(v19 + 16 * v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(v7 + v18) + 152);
    v25 = swift_retain();
    v24(&v84, v25);
    v114[0] = v84;
    if (v20 < *(_QWORD *)(v84 + 16))
      break;
    sub_1B1B28C6C((uint64_t)v114);
    v113 = v85;
    sub_1B1B28C6C((uint64_t)&v113);
    v112 = v86;
    sub_1B1B28C6C((uint64_t)&v112);
    v111 = v87;
    sub_1B1B28C6C((uint64_t)&v111);
    v110 = v88;
    sub_1B1B28C6C((uint64_t)&v110);
    v109 = v89;
    sub_1B1B28C6C((uint64_t)&v109);
    swift_release();
LABEL_25:
    if (++v20 == v17)
    {
      swift_bridgeObjectRelease();
      v66 = *(_QWORD *)(v7 + v76);
      v67 = *(_QWORD *)(v66 + 16);
      v5 = MEMORY[0x1E0DEE9D8];
      v83 = MEMORY[0x1E0DEE9D8];
      if (!v67)
      {
        v2 = v75;
        goto LABEL_77;
      }
      v68 = v66;
      swift_bridgeObjectRetain_n();
      v69 = v68;
      v70 = 32;
      v2 = v75;
      do
      {
        if (*(_QWORD *)(v69 + v70))
        {
          v71 = swift_retain();
          MEMORY[0x1B5E2064C](v71);
          if (*(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
          v69 = v68;
        }
        v70 += 16;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease();
      v72 = v83;
      goto LABEL_78;
    }
  }
  v82 = v23;
  v26 = *(_QWORD *)(v84 + 8 * v20 + 32);
  if (v26 >> 61 == 3)
  {
    v27 = *(_QWORD *)(v26 + 16);
    sub_1B1B632F0(v27);
    sub_1B1B28C6C((uint64_t)v114);
    v94 = v85;
    sub_1B1B28C6C((uint64_t)&v94);
    v93 = v86;
    sub_1B1B28C6C((uint64_t)&v93);
    v92 = v87;
    sub_1B1B28C6C((uint64_t)&v92);
    v91 = v88;
    sub_1B1B28C6C((uint64_t)&v91);
    v90 = v89;
    v28 = &v90;
LABEL_29:
    sub_1B1B28C6C((uint64_t)v28);
    goto LABEL_30;
  }
  sub_1B19F8CD0(v26);
  v39 = sub_1B1D35B14(v26);
  if ((v40 & 1) != 0)
  {
    sub_1B19F8D00(v26);
    sub_1B1B28C6C((uint64_t)v114);
    v108 = v85;
    sub_1B1B28C6C((uint64_t)&v108);
    v107 = v86;
    sub_1B1B28C6C((uint64_t)&v107);
    v106 = v87;
    sub_1B1B28C6C((uint64_t)&v106);
    v105 = v88;
    sub_1B1B28C6C((uint64_t)&v105);
    v104 = v89;
    sub_1B1B28C6C((uint64_t)&v104);
    swift_release();
    v19 = v81;
    goto LABEL_25;
  }
  v41 = v39;
  v103 = v86;
  v42 = *(_QWORD *)(v86 + 8 * v39 + 32);
  if (v42 >> 61 == 3)
  {
    v27 = *(_QWORD *)(v42 + 16);
    sub_1B1B632F0(v27);
    sub_1B19F8D00(v26);
    sub_1B1B28C6C((uint64_t)v114);
    v98 = v85;
    sub_1B1B28C6C((uint64_t)&v98);
    sub_1B1B28C6C((uint64_t)&v103);
    v97 = v87;
    sub_1B1B28C6C((uint64_t)&v97);
    v96 = v88;
    sub_1B1B28C6C((uint64_t)&v96);
    v95 = v89;
    v28 = &v95;
    goto LABEL_29;
  }
  sub_1B1B28C6C((uint64_t)v114);
  sub_1B1B28C6C((uint64_t)&v103);
  v101 = v87;
  v102 = v85;
  sub_1B1B28C6C((uint64_t)&v101);
  v100 = v88;
  sub_1B1B28C6C((uint64_t)&v100);
  v99 = v89;
  sub_1B1B28C6C((uint64_t)&v99);
  v57 = *(_QWORD *)(v102 + 16);
  if (!v57)
  {
LABEL_61:
    sub_1B1B28C6C((uint64_t)&v102);
    sub_1B19F8D00(v26);
    swift_release();
    v1 = v78;
LABEL_62:
    v17 = v80;
LABEL_63:
    v18 = v79;
    v19 = v81;
    goto LABEL_25;
  }
  v58 = 0;
  v59 = v102 + 32;
  while (1)
  {
    v60 = *(_QWORD *)(v59 + 8 * v58);
    sub_1B19F8CD0(v60);
    v61 = sub_1B1D35B14(v60);
    if ((v62 & 1) == 0 && v61 == v41)
    {
      v63 = v78[6];
      if (*(_QWORD *)(v63 + 16))
        break;
    }
    sub_1B19F8D00(v60);
LABEL_55:
    if (v57 == ++v58)
      goto LABEL_61;
  }
  swift_retain_n();
  swift_bridgeObjectRetain();
  v64 = sub_1B1DC423C(v7, v58);
  if ((v65 & 1) == 0)
  {
    sub_1B19F8D00(v60);
    swift_bridgeObjectRelease();
    swift_release_n();
    goto LABEL_55;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64);
  sub_1B1B632F0(v27);
  sub_1B19F8D00(v60);
  swift_bridgeObjectRelease();
  swift_release_n();
  sub_1B1B28C6C((uint64_t)&v102);
  sub_1B19F8D00(v26);
  v1 = v78;
LABEL_30:
  swift_retain();
  sub_1B1B632F0(v27);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v83 = v1[5];
  v30 = v83;
  v1[5] = 0x8000000000000000;
  v32 = sub_1B1DC423C(v7, v20);
  v33 = v31;
  v34 = *(_QWORD *)(v30 + 16) + ((v31 & 1) == 0);
  if (*(_QWORD *)(v30 + 24) >= v34)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v37 = (_QWORD *)v83;
      if ((v31 & 1) != 0)
        goto LABEL_39;
    }
    else
    {
      sub_1B1EAD62C();
      v37 = (_QWORD *)v83;
      if ((v33 & 1) != 0)
        goto LABEL_39;
    }
LABEL_33:
    v37[(v32 >> 6) + 8] |= 1 << v32;
    v38 = (uint64_t *)(v37[6] + 16 * v32);
    *v38 = v7;
    v38[1] = v20;
    *(_QWORD *)(v37[7] + 8 * v32) = v27;
    ++v37[2];
    swift_retain();
LABEL_40:
    v1[5] = v37;
    swift_release();
    swift_bridgeObjectRelease();
    if (!v22)
    {
      sub_1B1B28D2C(v27);
      goto LABEL_62;
    }
    swift_retain_n();
    sub_1B1B632F0(v27);
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v83 = v1[6];
    v46 = v83;
    v1[6] = 0x8000000000000000;
    v47 = sub_1B1DC423C(v22, v82);
    v49 = v48;
    v50 = *(_QWORD *)(v46 + 16) + ((v48 & 1) == 0);
    if (*(_QWORD *)(v46 + 24) >= v50)
    {
      if ((v45 & 1) == 0)
        sub_1B1EAD62C();
    }
    else
    {
      sub_1B1E9A05C(v50, v45);
      v51 = sub_1B1DC423C(v22, v82);
      if ((v49 & 1) != (v52 & 1))
        goto LABEL_88;
      v47 = v51;
    }
    v17 = v80;
    v53 = (_QWORD *)v83;
    if ((v49 & 1) != 0)
    {
      v54 = *(_QWORD *)(v83 + 56);
      v55 = 8 * v47;
      sub_1B1B28D2C(*(_QWORD *)(v54 + v55));
      *(_QWORD *)(v54 + v55) = v27;
    }
    else
    {
      *(_QWORD *)(v83 + 8 * (v47 >> 6) + 64) |= 1 << v47;
      v56 = (uint64_t *)(v53[6] + 16 * v47);
      *v56 = v22;
      v56[1] = v82;
      *(_QWORD *)(v53[7] + 8 * v47) = v27;
      ++v53[2];
      swift_retain();
    }
    v1[6] = v53;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1B28D2C(v27);
    swift_release_n();
    goto LABEL_63;
  }
  sub_1B1E9A05C(v34, isUniquelyReferenced_nonNull_native);
  v35 = sub_1B1DC423C(v7, v20);
  if ((v33 & 1) == (v36 & 1))
  {
    v32 = v35;
    v37 = (_QWORD *)v83;
    if ((v33 & 1) == 0)
      goto LABEL_33;
LABEL_39:
    v43 = v37[7];
    v44 = 8 * v32;
    sub_1B1B28D2C(*(_QWORD *)(v43 + v44));
    *(_QWORD *)(v43 + v44) = v27;
    goto LABEL_40;
  }
LABEL_88:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1BE1E70()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GraphTypeInference()
{
  return objc_opt_self();
}

_QWORD *sub_1B1BE1ED4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  sub_1B1BE2B2C();
  v2 = sub_1B22296B8();
  v3 = (_QWORD *)v2;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = v2 + 64;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_5;
    }
    v16 = v4 + 1;
    if (v4 + 1 >= v9)
      return v3;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v16 = v4 + 2;
      if (v4 + 2 >= v9)
        return v3;
      v17 = *(_QWORD *)(v5 + 8 * v16);
      if (!v17)
      {
        v16 = v4 + 3;
        if (v4 + 3 >= v9)
          return v3;
        v17 = *(_QWORD *)(v5 + 8 * v16);
        if (!v17)
        {
          v16 = v4 + 4;
          if (v4 + 4 >= v9)
            return v3;
          v17 = *(_QWORD *)(v5 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v16 << 6);
    v4 = v16;
LABEL_5:
    v13 = 8 * v12;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v12 + 8);
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(v3[6] + v13) = v14;
    *(_QWORD *)(v3[7] + v13) = v15;
    ++v3[2];
    sub_1B1B632F0(v15);
  }
  while (v9 - 5 != v4)
  {
    v17 = *(_QWORD *)(a1 + 104 + 8 * v4++);
    if (v17)
    {
      v16 = v4 + 4;
      goto LABEL_18;
    }
  }
  return v3;
}

uint64_t sub_1B1BE2068(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  return a2(&v3);
}

uint64_t sub_1B1BE20A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_retain();
}

uint64_t sub_1B1BE20B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __objc2_class **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char v36[40];
  uint64_t v37;

  v30 = a2;
  v4 = sub_1B222826C();
  MEMORY[0x1E0C80A78](v4, v5);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v28[1] = v2;
    v29 = v9;
    v31 = v7;
    v32 = v6;
    v37 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v10, 0);
    v11 = v37;
    v12 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v13 = (__objc2_class **)*(v12 - 1);
      v14 = *v12;
      if (*v13 == _TtC3VFX16_PlaceholderNode)
        break;
      swift_retain();
LABEL_13:
      v37 = v11;
      v25 = *(_QWORD *)(v11 + 16);
      v24 = *(_QWORD *)(v11 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_1B202A29C(v24 > 1, v25 + 1, 1);
        v11 = v37;
      }
      v12 += 2;
      *(_QWORD *)(v11 + 16) = v25 + 1;
      v26 = v11 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v13;
      *(_QWORD *)(v26 + 40) = v14;
      if (!--v10)
        return v11;
    }
    v33 = *v12;
    sub_1B19FA198((uint64_t)v13 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode, (uint64_t)v36);
    sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5BF68);
    type metadata accessor for AuthoringNode();
    swift_retain_n();
    swift_dynamicCast();
    v16 = v31;
    v15 = v32;
    v17 = (uint64_t)v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, v35 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v32);
    swift_release();
    v18 = *(_QWORD *)(v30 + 32);
    if (*(_QWORD *)(v18 + 16))
    {
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3CA8(v17);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(v18 + 56) + 16 * v19;
        v22 = *(id *)v21;
        v23 = *(_BYTE *)(v21 + 8);
        sub_1B1BE2C40(*(id *)v21, v23);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v17, v32);
        if ((v23 & 1) != 0)
        {
          v34 = v22;
          sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
          swift_willThrowTypedImpl();
          swift_release();
          sub_1B1B9CAE0(v22, 1);
        }
        else
        {
          swift_release_n();
          v13 = (__objc2_class **)v22;
        }
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v17, v32);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v15);
    }
    swift_release();
LABEL_12:
    v14 = v33;
    goto LABEL_13;
  }
  return v11;
}

uint64_t sub_1B1BE2370(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v16;

  v3 = v2;
  v16 = MEMORY[0x1E0DEE9D8];
  sub_1B202AEB0(0, 0, 0);
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v9 = *(v7 - 1);
      v8 = *v7;
      swift_retain();
      v10 = a2(v6, v9, v8);
      if (v3)
        break;
      v11 = v10;
      swift_release();
      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        sub_1B202AEB0(v12 > 1, v13 + 1, 1);
      ++v6;
      *(_QWORD *)(v16 + 16) = v13 + 1;
      *(_QWORD *)(v16 + 8 * v13 + 32) = v11;
      v7 += 2;
      if (v5 == v6)
        goto LABEL_7;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t sub_1B1BE24B4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;

  v3 = v2;
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1B202A29C(0, 0, 0);
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v18 = v5;
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v9 = *(v7 - 1);
      v8 = *v7;
      swift_retain();
      v10 = a2(v6, v9, v8);
      if (v3)
        break;
      v12 = v10;
      v13 = v11;
      swift_release();
      v15 = *(_QWORD *)(v20 + 16);
      v14 = *(_QWORD *)(v20 + 24);
      if (v15 >= v14 >> 1)
        sub_1B202A29C(v14 > 1, v15 + 1, 1);
      ++v6;
      *(_QWORD *)(v20 + 16) = v15 + 1;
      v16 = v20 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      v7 += 2;
      if (v18 == v6)
        goto LABEL_7;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  return v20;
}

uint64_t sub_1B1BE2600(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;

  v13 = MEMORY[0x1E0DEE9D8];
  sub_1B202AEB0(0, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
      sub_1B19F8CD0(v6);
      v7 = a2(v5, v6);
      if (v2)
        break;
      v8 = v7;
      sub_1B19F8D00(v6);
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      if (v10 >= v9 >> 1)
        sub_1B202AEB0(v9 > 1, v10 + 1, 1);
      ++v5;
      *(_QWORD *)(v13 + 16) = v10 + 1;
      *(_QWORD *)(v13 + 8 * v10 + 32) = v8;
      if (v4 == v5)
        goto LABEL_9;
    }
    sub_1B19F8D00(v6);
    swift_release();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1B1BE272C(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v2 = sub_1B22296AC();
  if (!v2)
    goto LABEL_15;
LABEL_3:
  for (i = 0; i != v2; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = MEMORY[0x1B5E21018](i, a1);
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 8 * i + 32);
      swift_retain();
    }
    v5 = sub_1B1BDCA80(v4);
    if ((v6 & 1) != 0)
    {
      sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
      swift_willThrowTypedImpl();
      sub_1B1B9CAE0(v5, 1);
      swift_release();
    }
    else
    {
      v7 = swift_release();
      MEMORY[0x1B5E2064C](v7);
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t type metadata accessor for GraphError()
{
  uint64_t result;

  result = qword_1EEF5C208;
  if (!qword_1EEF5C208)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_1B1BE2924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1BE07D4(a1, a2, a3, *(_QWORD **)(v3 + 16), *(_QWORD **)(v3 + 24), *(_QWORD *)(v3 + 32));
}

unint64_t sub_1B1BE2940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5CE00;
  if (!qword_1EEF5CE00)
  {
    v1 = type metadata accessor for GraphError();
    result = MEMORY[0x1B5E23E74](&unk_1B2281CE0, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5CE00);
  }
  return result;
}

uint64_t sub_1B1BE2988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1B1BE29CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1BE0B48(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD **)(v3 + 24));
}

uint64_t sub_1B1BE29E4(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  return sub_1B1BE0D94(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1B1BE2A00(uint64_t a1)
{
  return sub_1B1BE2BF8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BE1034);
}

uint64_t sub_1B1BE2A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1BE2A60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GraphError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1BE2A9C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

void sub_1B1BE2AC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CE10)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CE10);
  }
}

unint64_t sub_1B1BE2B14(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  if ((~a2 & 0xF000000000000007) != 0)
    return sub_1B1B28D2C(a2);
  return result;
}

void sub_1B1BE2B2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C200)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C200);
  }
}

uint64_t sub_1B1BE2B90(_OWORD *a1)
{
  return sub_1B1BE2BA4(a1);
}

uint64_t sub_1B1BE2BA4(_OWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[3];

  v2 = *(uint64_t **)(v1 + 16);
  v3 = *(uint64_t (**)(_OWORD *))(v1 + 24);
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[2] = a1[2];
  return sub_1B1BDBEE8((uint64_t)v6, v2, v3);
}

uint64_t sub_1B1BE2BDC(uint64_t a1)
{
  return sub_1B1BE2BF8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BDD59C);
}

uint64_t sub_1B1BE2BF8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1B1BE2C1C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

id sub_1B1BE2C40(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

uint64_t sub_1B1BE2C4C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1BDC5B8(a1, v1);
}

uint64_t sub_1B1BE2C54(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  return v2(&v4);
}

uint64_t *sub_1B1BE2C90(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B222826C();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[6];
    v16 = a3[7];
    v17 = (char *)v7 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = (uint64_t *)((char *)v7 + v16);
    v20 = (uint64_t *)((char *)a2 + v16);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1B1BE2DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1BE2E5C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = (_QWORD *)((char *)a1 + v14);
  v18 = (_QWORD *)((char *)a2 + v14);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1B1BE2F7C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1B1BE3100(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *sub_1B1BE3204(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[6];
  v16 = a3[7];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = (_QWORD *)((char *)a1 + v16);
  v20 = (_QWORD *)((char *)a2 + v16);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1BE336C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1BE3378(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_1B1BE3418()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B1BE3424(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1B1BE34B0()
{
  unint64_t v0;

  sub_1B1791524(319, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for RenderPass.Dimension(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for GraphError.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 123);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GraphError.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1B1BE3610(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 <= 0x9F)
    return v1 >> 5;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_1B1BE362C(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x1Fu;
  return result;
}

uint64_t sub_1B1BE363C(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 5;
    *(_BYTE *)(result + 8) = -96;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphError.Kind()
{
  return &type metadata for GraphError.Kind;
}

uint64_t sub_1B1BE3678(_OWORD *a1)
{
  return sub_1B1B28F5C(a1);
}

void sub_1B1BE368C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63A37E0;
}

uint64_t sub_1B1BE369C()
{
  sub_1B1BE3A20();
  return sub_1B2228A70();
}

uint64_t sub_1B1BE36F8()
{
  sub_1B1BE3A20();
  return sub_1B22289F8();
}

uint64_t type metadata accessor for OrientationConstraint.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1BE3764(_QWORD *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v4 = a2 & 1;
  sub_1B1BE4774(0, &qword_1EEF5C248, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BE4730();
  sub_1B222A180();
  v15 = v4;
  v14 = 0;
  sub_1B1A70C60();
  sub_1B2229958();
  if (!v2)
  {
    v13 = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B1BE38A0()
{
  return "OrientationBillboard";
}

uint64_t sub_1B1BE38B4(char *a1, char *a2)
{
  return sub_1B1F95DE8(*a1, *a2);
}

uint64_t sub_1B1BE38C0()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F74636166;
  else
    return 1701080941;
}

uint64_t sub_1B1BE38F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BE3A64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BE3914()
{
  sub_1B1BE4730();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BE393C()
{
  sub_1B1BE4730();
  return sub_1B222A1E0();
}

void sub_1B1BE3964(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;

  v5 = sub_1B1BE45C0(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = v4 & 1;
    *(float *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1BE3994(_QWORD *a1)
{
  char *v1;

  return sub_1B1BE3764(a1, *v1);
}

uint64_t sub_1B1BE39B0()
{
  return type metadata accessor for OrientationConstraint.System();
}

double sub_1B1BE39CC()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for Orientation;
  *(_QWORD *)(v0 + 40) = &off_1E6371540;
  return result;
}

void sub_1B1BE3A10(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1065353216;
}

unint64_t sub_1B1BE3A20()
{
  unint64_t result;

  result = qword_1EEF5C218;
  if (!qword_1EEF5C218)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281F30, &type metadata for OrientationConstraint.Mode);
    atomic_store(result, (unint64_t *)&qword_1EEF5C218);
  }
  return result;
}

uint64_t sub_1B1BE3A64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F74636166 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t *sub_1B1BE3B3C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t v6;
  float32x4_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  int8x16_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  unsigned __int32 v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __int32 v41;
  int8x16_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  int8x16_t v57;
  float v58;
  float v59;
  float v60;
  float32x2_t v62;
  float v63;
  int32x2_t v64;
  float v65;
  uint64_t v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  unsigned __int32 v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  __int32 v79;
  int8x16_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float v92;
  float v93;
  float v94;
  int8x16_t v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v100;
  float v101;
  int32x2_t v102;
  float v103;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  __int32 v113;
  __int32 v114;
  float32x4_t v115;
  __int32 v116;
  __int32 v117;
  _BYTE v118[72];
  _OWORD v119[2];
  uint64_t v120;
  uint64_t v121[8];
  _OWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char v129[48];
  float32x4_t v130;
  char v131;
  _OWORD v132[2];
  uint64_t v133;
  _OWORD v134[2];
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  _BYTE v139[56];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  swift_retain_n();
  v4 = sub_1B1D160C0(v2);
  swift_release();
  if (v4 == 2)
    v5 = 1.0;
  else
    v5 = *((float *)&v4 + 1);
  if ((v4 & 1) != 0)
  {
    v10 = sub_1B1D15838(v2);
    v7 = 0uLL;
    if ((v12 & 1) == 0)
    {
      v7.i64[0] = v10;
      v7.i64[1] = v11;
    }
  }
  else
  {
    v6 = sub_1B1E126A4();
    v7 = 0uLL;
    if ((v8 & 1) == 0)
    {
      v9 = (_QWORD *)v6;
      if (v6 != 0xFFFFFFFFLL)
      {
        swift_retain();
        sub_1B1D15764(v9, (uint64_t)v118);
        swift_release();
        sub_1B1A18378((uint64_t)v118, (uint64_t)v129, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
        v7 = 0uLL;
        if ((v131 & 1) == 0)
          v7 = v130;
      }
    }
  }
  v115 = v7;
  v13 = *(_OWORD *)(a1 + 104);
  v136 = *(_OWORD *)(a1 + 88);
  v137 = v13;
  v138 = *(_QWORD *)(a1 + 120);
  sub_1B19F07B0((uint64_t)v119);
  v134[0] = v119[0];
  v134[1] = v119[1];
  v135 = v120;
  sub_1B1E8FCE4(v3, (uint64_t)v134, 0x200000000, v121);
  sub_1B1A18378((uint64_t)v121, (uint64_t)v122, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v122[0])
  {
    if (v128 > 0)
    {
      v109 = v125;
      if (v125)
      {
        v14 = v127[4];
        v15 = *(_BYTE *)(v126 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v132[0] = v122[0];
        v132[1] = v122[1];
        v133 = v123;
        v107 = (uint64_t)(v127 + 6);
        v108 = v124;
        v112 = v127;
        v106 = v127 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v16 = 0;
        v105 = v15;
        while (1)
        {
          v17 = (unsigned int *)(v108 + 48 * v16);
          v18 = *v17;
          v20 = (uint64_t *)*((_QWORD *)v17 + 2);
          v19 = *((_QWORD *)v17 + 3);
          v22 = *((_QWORD *)v17 + 4);
          v21 = *((_QWORD *)v17 + 5);
          v111 = v16;
          v110 = v17[1];
          if ((v15 & 1) != 0)
          {
            v23 = *(os_unfair_lock_s **)(v21 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v23);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v14);
          sub_1B1A18378(v107, (uint64_t)v139, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v24 = v112[4];
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v112[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
          v112[7] = v25;
          v106[1] = 0;
          v106[2] = 0;
          *v106 = 0;
          swift_release();
          v26 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v20, v19, v22, (uint64_t)v112);
          v27 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v20, v19, v22, (uint64_t)v112);
          v29 = (float32x4_t *)v27;
          if (v20)
          {
            if (!v22)
            {
LABEL_41:
              v15 = v105;
              v32 = v111;
              goto LABEL_62;
            }
            v30 = v115;
            v31.i32[3] = v116;
            v32 = v111;
            v28.i32[0] = 1.0;
            while (2)
            {
              v41 = v31.i32[3];
              v31 = *v29;
              v31.i32[3] = v41;
              v42 = (int8x16_t)vabdq_f32(v30, v31);
              if (*(float *)v42.i32 <= 0.00000011921)
              {
                v42.i32[0] = vextq_s8(v42, v42, 8uLL).u32[0];
                *(int32x2_t *)v42.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v42.i8);
                if ((v42.i8[4] & 1) != 0 && (v42.i8[0] & 1) != 0)
                  goto LABEL_25;
              }
              v43 = vsubq_f32(v30, v31);
              v44 = (int32x4_t)vmulq_f32(v43, v43);
              v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
              v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
              v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
              v47 = vmulq_n_f32(v43, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).f32[0]);
              v48 = vmulq_f32(v47, v47);
              v48.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).u64[0];
              v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 0);
              v49.i32[3] = 0;
              v50 = vrsqrteq_f32(v49);
              v51 = vmulq_f32(v50, vrsqrtsq_f32(v49, vmulq_f32(v50, v50)));
              v52 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v48.f32[0] != 0.0)), 0x1FuLL));
              v52.i32[3] = 0;
              v57 = (int8x16_t)vcltzq_s32(v52);
              v53 = (float32x4_t)vbslq_s8(v57, (int8x16_t)vmulq_f32(v47, vmulq_f32(v51, vrsqrtsq_f32(v49, vmulq_f32(v51, v51)))), (int8x16_t)v47);
              v51.i32[0] = v53.i32[2];
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v54 = *(float *)vbslq_s8(v38, v28, (int8x16_t)v51).i32;
              *(float *)v38.i32 = v53.f32[1] / (float)(fabsf(v53.f32[2]) + *(float *)v28.i32);
              v55 = vmuls_lane_f32(*(float *)v38.i32, *(float32x2_t *)v53.f32, 1);
              *(float *)v38.i32 = -(float)(v53.f32[0] * *(float *)v38.i32);
              v56 = v53.f32[2] + (float)(v54 * v55);
              *(float *)v57.i32 = v54 * *(float *)v38.i32;
              v58 = *(float *)v28.i32 - v55;
              v59 = vmuls_lane_f32(-v54, *(float32x2_t *)v53.f32, 1);
              v60 = v53.f32[2] + (float)(v56 + v58);
              v117 = v31.i32[3];
              if (v60 > 0.0)
              {
                v33 = (float32x2_t)vrev64_s32(*(int32x2_t *)v53.f32);
                *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), 0);
                v37.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v33.u32[1], LODWORD(v59)), v33).u32[0];
                v34 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v60 + *(float *)v28.i32)), v57.u32[0]);
                v35 = vmul_f32(v34, v34);
                v34.i32[0] = v38.i32[0];
                v36 = vsub_f32(*(float32x2_t *)v57.i8, v34).u32[0];
                v38.i32[1] = v35.i32[1];
                v37.i64[1] = v38.i64[0];
                *(float *)v38.i32 = 0.5 / v34.f32[1];
              }
              else
              {
                if (v56 >= v58 && v56 >= v53.f32[2])
                {
                  v63 = sqrtf((float)((float)(v56 + *(float *)v28.i32) - v58) - v53.f32[2]);
                  v39.f32[0] = v63 * v63;
                  v39.f32[1] = *(float *)v38.i32 + *(float *)v57.i32;
                  v64 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v59), v53.u32[0]), *(float32x2_t *)v53.f32);
                  goto LABEL_37;
                }
                if (v58 > v53.f32[2])
                {
                  v63 = sqrtf((float)((float)(v58 + *(float *)v28.i32) - v56) - v53.f32[2]);
                  v39.f32[0] = *(float *)v38.i32 + *(float *)v57.i32;
                  v62 = (float32x2_t)vrev64_s32(*(int32x2_t *)v53.f32);
                  v39.f32[1] = v63 * v63;
                  v64 = (int32x2_t)vadd_f32(v62, (float32x2_t)__PAIR64__(v62.u32[1], LODWORD(v59)));
LABEL_37:
                  *(int32x2_t *)&v39.u32[2] = v64;
                  *(float *)v64.i32 = 0.5 / v63;
                  v37 = (float32x4_t)vdupq_lane_s32(v64, 0);
LABEL_24:
                  sub_1B1BE4440(*v26, vmulq_f32(v37, v39), v5);
                  *v26 = v40;
                  v30 = v115;
                  v31.i32[3] = v117;
                  v28.i32[0] = 1.0;
LABEL_25:
                  ++v29;
                  ++v26;
                  if (!--v22)
                  {
                    v116 = v31.i32[3];
                    goto LABEL_61;
                  }
                  continue;
                }
                v65 = sqrtf((float)((float)(v53.f32[2] + *(float *)v28.i32) - v56) - v58);
                v37.i32[0] = vsubq_f32(v53, v53).u32[0];
                v37.f32[1] = v53.f32[1] + v59;
                v37.f32[2] = v65 * v65;
                v37.f32[3] = *(float *)v57.i32 - *(float *)v38.i32;
                *(float *)v38.i32 = 0.5 / v65;
              }
              break;
            }
            v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 0);
            goto LABEL_24;
          }
          if ((_DWORD)v18 == (_DWORD)v110)
            goto LABEL_41;
          v66 = v110 - v18;
          v67 = (float32x4_t *)(v27 + 16 * v18);
          v68 = &v26[v18];
          v70.i32[3] = v113;
          v69 = v115;
          v32 = v111;
          v28.i32[0] = 1.0;
          do
          {
            v79 = v70.i32[3];
            v70 = *v67;
            v70.i32[3] = v79;
            v80 = (int8x16_t)vabdq_f32(v69, v70);
            if (*(float *)v80.i32 > 0.00000011921
              || (v80.i32[0] = vextq_s8(v80, v80, 8uLL).u32[0],
                  *(int32x2_t *)v80.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v80.i8),
                  (v80.i8[4] & 1) == 0)
              || (v80.i8[0] & 1) == 0)
            {
              v114 = v70.i32[3];
              v81 = vsubq_f32(v69, v70);
              v82 = (int32x4_t)vmulq_f32(v81, v81);
              v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
              v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
              v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
              v85 = vmulq_n_f32(v81, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
              v86 = vmulq_f32(v85, v85);
              v86.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).u64[0];
              v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 0);
              v87.i32[3] = 0;
              v88 = vrsqrteq_f32(v87);
              v89 = vmulq_f32(v88, vrsqrtsq_f32(v87, vmulq_f32(v88, v88)));
              v90 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v86.f32[0] != 0.0)), 0x1FuLL));
              v90.i32[3] = 0;
              v95 = (int8x16_t)vcltzq_s32(v90);
              v91 = (float32x4_t)vbslq_s8(v95, (int8x16_t)vmulq_f32(v85, vmulq_f32(v89, vrsqrtsq_f32(v87, vmulq_f32(v89, v89)))), (int8x16_t)v85);
              v89.i32[0] = v91.i32[2];
              v76.i64[0] = 0x8000000080000000;
              v76.i64[1] = 0x8000000080000000;
              v92 = *(float *)vbslq_s8(v76, v28, (int8x16_t)v89).i32;
              *(float *)v76.i32 = v91.f32[1] / (float)(fabsf(v91.f32[2]) + *(float *)v28.i32);
              v93 = vmuls_lane_f32(*(float *)v76.i32, *(float32x2_t *)v91.f32, 1);
              *(float *)v76.i32 = -(float)(v91.f32[0] * *(float *)v76.i32);
              v94 = v91.f32[2] + (float)(v92 * v93);
              *(float *)v95.i32 = v92 * *(float *)v76.i32;
              v96 = *(float *)v28.i32 - v93;
              v97 = vmuls_lane_f32(-v92, *(float32x2_t *)v91.f32, 1);
              v98 = v91.f32[2] + (float)(v94 + v96);
              if (v98 > 0.0)
              {
                v71 = (float32x2_t)vrev64_s32(*(int32x2_t *)v91.f32);
                *(int32x2_t *)v75.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), 0);
                v75.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v71.u32[1], LODWORD(v97)), v71).u32[0];
                v72 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v98 + *(float *)v28.i32)), v95.u32[0]);
                v73 = vmul_f32(v72, v72);
                v72.i32[0] = v76.i32[0];
                v74 = vsub_f32(*(float32x2_t *)v95.i8, v72).u32[0];
                v76.i32[1] = v73.i32[1];
                v75.i64[1] = v76.i64[0];
                *(float *)v76.i32 = 0.5 / v72.f32[1];
              }
              else
              {
                if (v94 >= v96 && v94 >= v91.f32[2])
                {
                  v101 = sqrtf((float)((float)(v94 + *(float *)v28.i32) - v96) - v91.f32[2]);
                  v77.f32[0] = v101 * v101;
                  v77.f32[1] = *(float *)v76.i32 + *(float *)v95.i32;
                  v102 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v97), v91.u32[0]), *(float32x2_t *)v91.f32);
                  goto LABEL_58;
                }
                if (v96 > v91.f32[2])
                {
                  v101 = sqrtf((float)((float)(v96 + *(float *)v28.i32) - v94) - v91.f32[2]);
                  v77.f32[0] = *(float *)v76.i32 + *(float *)v95.i32;
                  v100 = (float32x2_t)vrev64_s32(*(int32x2_t *)v91.f32);
                  v77.f32[1] = v101 * v101;
                  v102 = (int32x2_t)vadd_f32(v100, (float32x2_t)__PAIR64__(v100.u32[1], LODWORD(v97)));
LABEL_58:
                  *(int32x2_t *)&v77.u32[2] = v102;
                  *(float *)v102.i32 = 0.5 / v101;
                  v75 = (float32x4_t)vdupq_lane_s32(v102, 0);
LABEL_45:
                  sub_1B1BE4440(*v68, vmulq_f32(v75, v77), v5);
                  *v68 = v78;
                  v70.i32[3] = v114;
                  v69 = v115;
                  v28.i32[0] = 1.0;
                  goto LABEL_46;
                }
                v103 = sqrtf((float)((float)(v91.f32[2] + *(float *)v28.i32) - v94) - v96);
                v75.i32[0] = vsubq_f32(v91, v91).u32[0];
                v75.f32[1] = v91.f32[1] + v97;
                v75.f32[2] = v103 * v103;
                v75.f32[3] = *(float *)v95.i32 - *(float *)v76.i32;
                *(float *)v76.i32 = 0.5 / v103;
              }
              v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.i8, 0);
              goto LABEL_45;
            }
LABEL_46:
            ++v67;
            ++v68;
            --v66;
          }
          while (v66);
          v113 = v70.i32[3];
LABEL_61:
          v15 = v105;
LABEL_62:
          sub_1B1F05D48(v112, (unsigned __int16 **)v132, (uint64_t)v139);
          sub_1B1F03804((char *)v21);
          ecs_stack_allocator_pop_snapshot(v14);
          if ((v15 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 376));
          }
          swift_release();
          v16 = v32 + 1;
          if (v16 == v109)
            goto LABEL_66;
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_66:
    swift_release();
    sub_1B19ED720((uint64_t)v119);
    sub_1B19ED748(v121);
    return sub_1B19ED748(v121);
  }
  else
  {
    swift_release();
    return (uint64_t *)sub_1B19ED720((uint64_t)v119);
  }
}

void sub_1B1BE4440(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vmulq_f32(a1, a2);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i32[0] = 0;
  sub_1B1BE4974(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

uint64_t getEnumTagSinglePayload for OrientationConstraint(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OrientationConstraint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrientationConstraint()
{
  return &type metadata for OrientationConstraint;
}

ValueMetadata *type metadata accessor for OrientationConstraint.Mode()
{
  return &type metadata for OrientationConstraint.Mode;
}

unint64_t sub_1B1BE4518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C220;
  if (!qword_1EEF5C220)
  {
    sub_1B1A02758(255, &qword_1EEF5C228, (uint64_t)&type metadata for OrientationConstraint.Mode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C220);
  }
  return result;
}

unint64_t sub_1B1BE457C()
{
  unint64_t result;

  result = qword_1EEF5C230;
  if (!qword_1EEF5C230)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281E88, &type metadata for OrientationConstraint.Mode);
    atomic_store(result, (unint64_t *)&qword_1EEF5C230);
  }
  return result;
}

float sub_1B1BE45C0(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v11;
  uint64_t v12;
  char v13;
  char v14;

  sub_1B1BE4774(0, &qword_1EEF5C238, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BE4730();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B1A70C1C();
    sub_1B2229814();
    v13 = 1;
    sub_1B22297F0();
    v2 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1BE4730()
{
  unint64_t result;

  result = qword_1EEF5C240;
  if (!qword_1EEF5C240)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228204C, &type metadata for OrientationConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C240);
  }
  return result;
}

void sub_1B1BE4774(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1BE4730();
    v7 = a3(a1, &type metadata for OrientationConstraint.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t _s3VFX21OrientationConstraintV4ModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BE481C + 4 * byte_1B2281D55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BE4850 + 4 * byte_1B2281D50[v4]))();
}

uint64_t sub_1B1BE4850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BE4858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BE4860);
  return result;
}

uint64_t sub_1B1BE486C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BE4874);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BE4878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BE4880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OrientationConstraint.CodingKeys()
{
  return &type metadata for OrientationConstraint.CodingKeys;
}

unint64_t sub_1B1BE48A0()
{
  unint64_t result;

  result = qword_1EEF5C250;
  if (!qword_1EEF5C250)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282024, &type metadata for OrientationConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C250);
  }
  return result;
}

unint64_t sub_1B1BE48E8()
{
  unint64_t result;

  result = qword_1EEF5C258;
  if (!qword_1EEF5C258)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281F94, &type metadata for OrientationConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C258);
  }
  return result;
}

unint64_t sub_1B1BE4930()
{
  unint64_t result;

  result = qword_1EEF5C260;
  if (!qword_1EEF5C260)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2281FBC, &type metadata for OrientationConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C260);
  }
  return result;
}

void sub_1B1BE4974(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v5 = 1.0 - a3;
  v6 = vsubq_f32(a1, a2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, a2);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * a3;
  if (v12 != 0.0)
    sinf(v12);
}

uint64_t sub_1B1BE4ADC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PostProcessSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1BE4B10()
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  return result;
}

const char *sub_1B1BE4B34()
{
  return "Post Processing";
}

uint64_t sub_1B1BE4B48()
{
  return qword_1EEF5DE58;
}

void sub_1B1BE4B54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  void *v18;
  id v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double (*v31)(uint64_t, uint64_t);
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  _BOOL8 v42;
  _BOOL8 v44;
  unsigned __int8 v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  unint64_t v50;
  void *v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double (*v57)(uint64_t, uint64_t);
  double v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float32x4_t v74;
  int32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float v79;
  int32x2_t v80;
  float32x4_t v81;
  int32x2_t v82;
  int32x2_t v83;
  uint64_t v84;
  float64_t v85;
  __int128 v86;
  float64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  float v103;
  int v104;
  unsigned __int8 v105;
  uint64_t v106;
  __int128 v107;
  float64_t v108;
  uint64_t v109;
  char v110;
  _BOOL8 v111;
  __int128 v112;
  double v113;
  unint64_t v114;
  char v115;
  int v116;
  void *v117;
  id v118[2];
  uint64_t v119;
  void *v120;
  id v121;
  _OWORD v122[5];
  uint64_t v123;
  _OWORD v124[5];
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  _OWORD v132[2];
  float32x4_t v133;
  _BYTE v134[80];
  _BYTE v135[160];
  uint64_t v136[20];
  _BYTE v137[160];
  uint64_t v138[20];
  __int128 v139;
  __int128 v140;
  _BYTE v141[24];
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _BYTE v150[160];
  uint64_t v151[20];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float v159[4];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned __int8 v164;
  _QWORD v165[10];
  _BYTE v166[80];
  _BYTE v167[80];
  _BYTE v168[80];
  _OWORD v169[11];
  _QWORD v170[6];
  __int16 v171;
  _QWORD v172[9];

  v172[6] = *MEMORY[0x1E0C80C00];
  v2 = swift_retain();
  v3 = sub_1B1F215A8(v2);
  v5 = v4;
  swift_release();
  if ((v5 & 1) != 0)
    return;
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 272);
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 == 2)
    return;
  swift_retain();
  swift_retain();
  v9 = sub_1B2062324(a1);
  if (!v9)
  {
    swift_release();
    swift_release();
    return;
  }
  v121 = (id)v9;
  v10 = sub_1B2229454();
  sub_1B1BA77BC(v10, v11, v121);
  v12 = sub_1B1BA7B7C(0);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (!v12)
  {
    swift_release();
    swift_release();

    return;
  }
  v117 = (void *)v12;
  v133 = 0uLL;
  v126 = 0;
  v127 = 0u;
  v128 = 0;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  memset(v132, 0, 28);
  *(_OWORD *)v118 = 0u;
  v106 = sub_1B1D1619C(v3);
  v110 = v13;
  sub_1B1D1627C(v3, (uint64_t)&v152);
  v103 = *(float *)&v152;
  v104 = v158;
  v14 = sub_1B1D16348(v3);
  v88 = sub_1B1D1640C(v3);
  v89 = v15;
  v115 = v16;
  sub_1B1D16418(v3, (uint64_t)&v152);
  v90 = *(float *)&v153;
  v91 = v155;
  v95 = v156;
  v96 = v154;
  v92 = v158;
  v93 = v159[0];
  v97 = v157;
  v98 = v160;
  v94 = v161;
  v99 = v162;
  v100 = v152;
  v17 = v163;
  v116 = v164;
  v105 = sub_1B1D164E8(v3);
  v18 = *(void **)(v6 + 392);
  if (v18)
  {
    v19 = v18;
    sub_1B1F9AEC4((uint64_t)v122);
    *(_OWORD *)v118 = v122[0];
    v112 = v122[1];
    v107 = v122[2];
    v101 = v122[3];
    v86 = v122[4];
    v20 = v123;

    v21 = v86;
    v22 = v101;
    v23 = v107;
    v24 = v112;
  }
  else
  {
    v20 = 0;
    v24 = 0uLL;
    v23 = 0uLL;
    v22 = 0uLL;
    v21 = 0uLL;
  }
  v124[0] = *(_OWORD *)v118;
  v124[1] = v24;
  v124[2] = v23;
  v124[3] = v22;
  v124[4] = v21;
  v125 = v20;
  sub_1B1BA802C(v6 + 624, (uint64_t)v150);
  sub_1B1BA802C((uint64_t)v150, (uint64_t)v151);
  if (sub_1B1B3C438(v151) == 1)
    goto LABEL_71;
  v25 = v151[1];
  ObjectType = swift_getObjectType();
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 104);
  swift_unknownObjectRetain();
  v28 = v27(ObjectType, v25);
  swift_unknownObjectRelease();
  v102 = v6 + 624;
  if (v28 != 1)
  {
    sub_1B1BA802C(v6 + 624, (uint64_t)v169);
    sub_1B1BA802C((uint64_t)v169, (uint64_t)&v152);
    if (sub_1B1B3C438(&v152) != 1)
    {
      v29 = v153;
      v30 = swift_getObjectType();
      v31 = *(double (**)(uint64_t, uint64_t))(v29 + 112);
      swift_unknownObjectRetain();
      v113 = v31(v30, v29);
      v108 = v32;
      v85 = v34;
      v87 = v33;
      swift_unknownObjectRelease();
      v35 = 0;
      v36.f64[0] = v87;
      v36.f64[1] = v85;
      v37.f64[0] = v113;
      v37.f64[1] = v108;
      v133 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v37), v36);
      goto LABEL_17;
    }
LABEL_71:
    sub_1B2229688();
    __break(1u);
    return;
  }
  v35 = 5;
LABEL_17:
  v38 = 0;
  v114 = v8 & 0x10000000000;
  LODWORD(v39) = (v110 & 1) == 0;
  v40 = *(float *)&v14;
  v42 = *(float *)&v14 > 0.0 && (v14 & 0xFF00000000) != 0x300000000;
  v111 = v42;
  if (*((float *)&v106 + 1) > 0.0)
    v39 = v39;
  else
    v39 = 0;
  v109 = v39;
  v44 = v103 > 0.0 && v104 != 2;
  if ((unint64_t)v118[0] - 71 <= 0x2C && ((1 << (LOBYTE(v118[0]) - 71)) & 0x100000000401) != 0
    || v118[0] == (id)553)
  {
    v45 = v105;
  }
  else
  {
    v45 = v105;
    if (v118[0] != (id)555)
      v38 = 1;
  }
  v119 = *(unsigned __int8 *)(v6 + 600);
  *(_QWORD *)&v139 = 0xD000000000000010;
  *((_QWORD *)&v139 + 1) = 0x80000001B23338F0;
  v46 = v28 != 1;
  v140 = 0uLL;
  *(_OWORD *)&v141[8] = xmmword_1B22820A0;
  if (v45 == 4)
    v47 = 0xFFFFFFFFLL;
  else
    v47 = v45;
  *(_QWORD *)v141 = MEMORY[0x1E0DEE9D8];
  v142 = 0;
  *(_QWORD *)&v143 = 0;
  *((_QWORD *)&v143 + 1) = MEMORY[0x1E0DEE9D8];
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v169[2] = *(_OWORD *)v141;
  v169[1] = v140;
  v169[0] = v139;
  memset(&v169[5], 0, 96);
  v169[4] = v143;
  v169[3] = *(unint64_t *)&v141[16];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1B22820B0;
  *(_OWORD *)(v48 + 32) = xmmword_1B22820C0;
  *(_BYTE *)(v48 + 48) = 0;
  *(_QWORD *)(v48 + 64) = v47;
  *(_OWORD *)(v48 + 72) = 0u;
  *(_OWORD *)(v48 + 88) = 0u;
  *(_OWORD *)(v48 + 104) = 0u;
  *(_QWORD *)(v48 + 120) = 0;
  *(_BYTE *)(v48 + 128) = 14;
  *(_OWORD *)(v48 + 144) = xmmword_1B22820D0;
  *(_BYTE *)(v48 + 160) = 0;
  *(_QWORD *)(v48 + 176) = v109;
  *(_OWORD *)(v48 + 184) = 0u;
  *(_OWORD *)(v48 + 200) = 0u;
  *(_OWORD *)(v48 + 216) = 0u;
  *(_QWORD *)(v48 + 232) = 0;
  *(_BYTE *)(v48 + 240) = 13;
  *(_OWORD *)(v48 + 256) = xmmword_1B22820E0;
  *(_BYTE *)(v48 + 272) = 0;
  *(_QWORD *)(v48 + 288) = v111;
  *(_QWORD *)(v48 + 344) = 0;
  *(_OWORD *)(v48 + 312) = 0u;
  *(_OWORD *)(v48 + 328) = 0u;
  *(_OWORD *)(v48 + 296) = 0u;
  *(_BYTE *)(v48 + 352) = 13;
  *(_OWORD *)(v48 + 368) = xmmword_1B22820F0;
  *(_BYTE *)(v48 + 384) = 0;
  *(_QWORD *)(v48 + 400) = (v115 & 1) == 0;
  *(_OWORD *)(v48 + 408) = 0u;
  *(_OWORD *)(v48 + 424) = 0u;
  *(_OWORD *)(v48 + 440) = 0u;
  *(_QWORD *)(v48 + 456) = 0;
  *(_BYTE *)(v48 + 464) = 13;
  *(_OWORD *)(v48 + 480) = xmmword_1B2282100;
  *(_BYTE *)(v48 + 496) = 0;
  *(_QWORD *)(v48 + 512) = v116 ^ 1u;
  *(_QWORD *)(v48 + 568) = 0;
  *(_OWORD *)(v48 + 536) = 0u;
  *(_OWORD *)(v48 + 552) = 0u;
  *(_OWORD *)(v48 + 520) = 0u;
  *(_BYTE *)(v48 + 576) = 13;
  *(_OWORD *)(v48 + 592) = xmmword_1B2282110;
  *(_BYTE *)(v48 + 608) = 0;
  v49 = v44;
  *(_QWORD *)(v48 + 624) = v44;
  *(_OWORD *)(v48 + 632) = 0u;
  *(_OWORD *)(v48 + 648) = 0u;
  *(_OWORD *)(v48 + 664) = 0u;
  *(_QWORD *)(v48 + 680) = 0;
  *(_BYTE *)(v48 + 688) = 13;
  *(_OWORD *)(v48 + 704) = xmmword_1B2282120;
  *(_BYTE *)(v48 + 720) = 0;
  *(_QWORD *)(v48 + 736) = v114 >> 40;
  *(_OWORD *)(v48 + 744) = 0u;
  *(_OWORD *)(v48 + 760) = 0u;
  *(_OWORD *)(v48 + 776) = 0u;
  *(_QWORD *)(v48 + 792) = 0;
  *(_BYTE *)(v48 + 800) = 13;
  *(_OWORD *)(v48 + 816) = xmmword_1B2282130;
  *(_BYTE *)(v48 + 832) = 0;
  *(_OWORD *)(v48 + 880) = 0u;
  *(_OWORD *)(v48 + 896) = 0u;
  *(_OWORD *)(v48 + 848) = 0u;
  *(_OWORD *)(v48 + 864) = 0u;
  *(_BYTE *)(v48 + 912) = 13;
  *(_OWORD *)(v48 + 928) = xmmword_1B2282140;
  *(_BYTE *)(v48 + 944) = 0;
  *(_QWORD *)(v48 + 960) = v38;
  *(_QWORD *)(v48 + 1016) = 0;
  *(_OWORD *)(v48 + 984) = 0u;
  *(_OWORD *)(v48 + 1000) = 0u;
  *(_OWORD *)(v48 + 968) = 0u;
  *(_BYTE *)(v48 + 1024) = 13;
  *(_OWORD *)(v48 + 1040) = xmmword_1B2282150;
  *(_BYTE *)(v48 + 1056) = 0;
  *(_QWORD *)(v48 + 1072) = v46;
  *(_QWORD *)(v48 + 1128) = 0;
  *(_OWORD *)(v48 + 1096) = 0u;
  *(_OWORD *)(v48 + 1112) = 0u;
  *(_OWORD *)(v48 + 1080) = 0u;
  *(_BYTE *)(v48 + 1136) = 13;
  *(_OWORD *)(v48 + 1152) = xmmword_1B2282160;
  *(_BYTE *)(v48 + 1168) = 0;
  *(_QWORD *)(v48 + 1184) = v119;
  *(_QWORD *)(v48 + 1240) = 0;
  *(_OWORD *)(v48 + 1208) = 0u;
  *(_OWORD *)(v48 + 1224) = 0u;
  *(_OWORD *)(v48 + 1192) = 0u;
  *(_BYTE *)(v48 + 1248) = 13;
  v170[0] = 0;
  v170[1] = 0;
  v170[2] = 1;
  v170[3] = v35;
  v170[4] = 1;
  v170[5] = v35;
  v171 = 15;
  v172[0] = 0;
  v172[1] = 0;
  v172[2] = 2;
  memset(&v172[3], 0, 24);
  sub_1B1FD1C40((uint64_t *)v169, v124, 0, 0, v48, (uint64_t)v170, 3, (uint64_t)v172, (uint64_t)&v152, 1, 1);
  sub_1B1BDB228((uint64_t *)&v139);
  swift_retain();
  v50 = sub_1B1B32B58((uint64_t)&v152, 0);
  v52 = v50;
  v53 = v51;
  if (v50 < 3)
  {
    sub_1B1B427DC(v50, v51);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    sub_1B1B41134(&v152);
    return;
  }
  v54 = swift_unknownObjectRetain();
  sub_1B1B427DC(v54, v53);
  swift_release();
  swift_getObjectType();
  objc_msgSend(v117, sel_setRenderPipelineState_, v52);
  v120 = sub_1B2062908();
  RGTextureDescriptor.init()((uint64_t)v134);
  sub_1B1BA802C(v102, (uint64_t)v137);
  sub_1B1BA802C((uint64_t)v137, (uint64_t)v138);
  if (sub_1B1B3C438(v138) == 1)
    goto LABEL_71;
  v55 = v138[1];
  v56 = swift_getObjectType();
  v57 = *(double (**)(uint64_t, uint64_t))(v55 + 72);
  swift_unknownObjectRetain();
  v58 = v57(v56, v55);
  swift_unknownObjectRelease();
  sub_1B1BA802C(v102, (uint64_t)v135);
  sub_1B1BA802C((uint64_t)v135, (uint64_t)v136);
  if (sub_1B1B3C438(v136) == 1)
    goto LABEL_71;
  v59 = v136[1];
  v60 = swift_getObjectType();
  v61 = *(void (**)(uint64_t, uint64_t))(v59 + 72);
  swift_unknownObjectRetain();
  v61(v60, v59);
  v63 = v62;
  swift_unknownObjectRelease();
  if ((v109 & 1) == 0)
  {
    v70 = 0;
    goto LABEL_53;
  }
  sub_1B206309C(2u, (uint64_t)v165);
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 264) + 40);
  v65 = *(_QWORD *)(v64 + 16);
  swift_retain();
  if (!v65)
    goto LABEL_51;
  v66 = v165[1];
  v67 = v165[0];
  swift_bridgeObjectRetain();
  v68 = sub_1B1DC3B00(v67, v66);
  if ((v69 & 1) == 0)
  {
    sub_1B1BA80C0((uint64_t)v165);
LABEL_51:
    swift_release();
    sub_1B1BA80C0((uint64_t)v165);
    v70 = 0;
    goto LABEL_52;
  }
  v70 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v68);
  swift_unknownObjectRetain();
  sub_1B1BA80C0((uint64_t)v165);
  swift_release();
  sub_1B1BA80C0((uint64_t)v165);
LABEL_52:
  v126 = v106;
LABEL_53:
  if (v49)
  {
    sub_1B206309C(0xAu, (uint64_t)v166);
    v71 = sub_1B206318C((uint64_t)v166, 1, 0, 2);
    sub_1B1BA80C0((uint64_t)v166);
  }
  else
  {
    v71 = 0;
  }
  if (v111)
  {
    sub_1B206309C(9u, (uint64_t)v167);
    v72 = sub_1B206318C((uint64_t)v167, 1, 0, 2);
    sub_1B1BA80C0((uint64_t)v167);
    *((float *)&v132[1] + 2) = (float)(v40 * 0.01) * (float)(uint64_t)objc_msgSend(v120, sel_height);
  }
  else
  {
    v72 = 0;
  }
  if ((v115 & 1) == 0)
  {
    v73 = (float)(unsigned __int16)(uint64_t)v63 / (float)(unsigned __int16)(uint64_t)v58;
    *((float *)&v127 + 1) = v73 + (float)((float)(1.0 - v73) * fminf(fmaxf(*((float *)&v88 + 1), 0.0), 1.0));
    LODWORD(v127) = fminf(fmaxf(*(float *)&v88, 0.0), 1.0);
    DWORD2(v127) = fminf(fmaxf(1.0 - *(float *)&v89, 0.0), 1.0);
    *((float *)&v127 + 3) = *((float *)&v127 + 2) + *((float *)&v89 + 1);
    if ((v116 & 1) == 0)
      goto LABEL_61;
LABEL_64:
    if (v114)
      goto LABEL_62;
    goto LABEL_65;
  }
  if ((v116 & 1) != 0)
    goto LABEL_64;
LABEL_61:
  v74.i64[0] = v96;
  v74.i64[1] = v91;
  v75.i32[1] = HIDWORD(v92);
  v76.i64[0] = v97;
  v76.i64[1] = v92;
  v77.i64[0] = v98;
  v77.i64[1] = v94;
  v78 = 0.31271 - (float)(*((float *)&v100 + 1) * 0.1);
  v79 = (float)(v90 * 0.1) + (float)((float)((float)(v78 * 2.87) + (float)(v78 * (float)(v78 * -3.0))) + -0.275);
  v80 = (int32x2_t)vmul_f32((float32x2_t)__PAIR64__(HIDWORD(v96), v91), (float32x2_t)0x3F3717593D93DD98);
  *(float *)v80.i32 = *(float *)v80.i32 + (float)((float)(*(float *)&v96 * 0.2126) + *(float *)&v80.i32[1]);
  v81 = vsubq_f32(vaddq_f32((float32x4_t)vdupq_n_s32(v95), v74), (float32x4_t)vdupq_lane_s32(v80, 0));
  v129 = vdivq_f32((float32x4_t)xmmword_1B2247950, vmlaq_n_f32(vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2247920, v78 / v79), (float32x4_t)xmmword_1B2247930), (float32x4_t)xmmword_1B2247940, (float)((float)(1.0 - v78) - v79) / v79));
  v130 = v81;
  v81.f32[0] = v93 + 1.0;
  v82 = (int32x2_t)vmul_f32((float32x2_t)__PAIR64__(HIDWORD(v97), v92), (float32x2_t)0x3F3717593D93DD98);
  *(float *)v82.i32 = *(float *)v82.i32 + (float)((float)(*(float *)&v97 * 0.2126) + *(float *)&v82.i32[1]);
  *(float *)v75.i32 = *(float *)&v99 + 1.0;
  v83 = (int32x2_t)vmul_f32((float32x2_t)__PAIR64__(HIDWORD(v98), v94), (float32x2_t)0x3F3717593D93DD98);
  *(float *)v83.i32 = *(float *)v83.i32 + (float)((float)(*(float *)&v98 * 0.2126) + *(float *)&v83.i32[1]);
  v131 = vsubq_f32(vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0)), (float32x4_t)vdupq_lane_s32(v82, 0));
  v132[0] = vsubq_f32(vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(v75, 0)), (float32x4_t)vdupq_lane_s32(v83, 0));
  v128 = v100;
  *(_QWORD *)&v132[1] = __PAIR64__(v17, HIDWORD(v99));
  if (v114)
  {
LABEL_62:
    sub_1B206309C(0xCu, (uint64_t)v168);
    v84 = sub_1B206318C((uint64_t)v168, 1, 0, 2);
    sub_1B1BA80C0((uint64_t)v168);
    goto LABEL_66;
  }
LABEL_65:
  v84 = 0;
LABEL_66:
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2) == 1
    && (uint64_t)objc_msgSend(v120, sel_sampleCount) >= 2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1B41134(&v152);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    objc_msgSend(v117, sel_setFragmentTexture_atIndex_, v120, 0);
    objc_msgSend(v117, sel_setFragmentTexture_atIndex_, v70, 1);
    objc_msgSend(v117, sel_setFragmentTexture_atIndex_, v71, 2);
    objc_msgSend(v117, sel_setFragmentTexture_atIndex_, v72, 3);
    objc_msgSend(v117, sel_setFragmentTexture_atIndex_, v84, 4);
    objc_msgSend(v117, sel_setFragmentBytes_length_atIndex_, &v126, 128, 0);
    sub_1B20BFD20(1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1B41134(&v152);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();

}

uint64_t sub_1B1BE5AE0(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  sub_1B19F8E54(0, &qword_1EEF5C298, (uint64_t (*)(void))sub_1B1BEA310, (uint64_t)&type metadata for KillShape.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BEA310();
  sub_1B222A180();
  v15 = a2;
  v14 = 0;
  sub_1B1A70BC4();
  sub_1B2229958();
  if (!v2)
  {
    v13 = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1BE5C28()
{
  sub_1B1BE70B8();
  return sub_1B2228A70();
}

uint64_t sub_1B1BE5C84()
{
  sub_1B1BE70B8();
  return sub_1B22289F8();
}

void sub_1B1BE5CD0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C3D28;
}

uint64_t sub_1B1BE5CE0(char *a1, char *a2)
{
  return sub_1B1F9A090(*a1, *a2);
}

uint64_t sub_1B1BE5CEC()
{
  _BYTE *v0;

  if (*v0)
    return 0x656469736E69;
  else
    return 0x6570616873;
}

uint64_t sub_1B1BE5D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1BE70FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BE5D44()
{
  sub_1B1BEA310();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BE5D6C()
{
  sub_1B1BEA310();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BE5D94@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1BE71DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_1B1BE5DC4(_QWORD *a1)
{
  char *v1;

  return sub_1B1BE5AE0(a1, *v1);
}

void sub_1B1BE5DF0(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1B1BE5DF8()
{
  sub_1B1BEA354();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BE5E20()
{
  sub_1B1BEA354();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BE5E48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF5C2A0, (uint64_t (*)(void))sub_1B1BEA354, (uint64_t)&type metadata for ParticleKillable.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BEA354();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1BE5F28()
{
  return type metadata accessor for ParticleKillable.CPUSystem();
}

double sub_1B1BE5F44()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B19F09B4((uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD53E8 = v1[0];
  unk_1EEFD53F8 = v1[1];
  qword_1EEFD5408 = v2;
  return result;
}

uint64_t *sub_1B1BE5FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  float32x2_t *v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  simd_float4x4 v47;
  simd_float4x4 *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  BOOL v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _QWORD *v73;
  float32x2_t *v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  simd_float4x4 v88;
  simd_float4x4 *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t *result;
  simd_float4 v100;
  char v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  simd_float4 v109;
  simd_float4 v110;
  simd_float4 v111;
  simd_float4 v112;
  uint64_t v113;
  simd_float4 v114;
  uint64_t v115;
  uint64_t v116;
  simd_float4 v117;
  simd_float4 v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  BOOL v122;
  int v123;
  uint64_t v124;
  int v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[8];
  _BYTE v131[80];
  _BYTE v132[80];
  _BYTE v133[80];
  _BYTE v134[80];
  simd_float4x4 v135;
  char v136;
  float32x4_t v137[4];
  char v138;
  simd_float4x4 v139;
  char v140;
  float32x4_t v141[4];
  char v142;
  _OWORD v143[2];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _OWORD v153[2];
  uint64_t v154;
  _BYTE v155[40];
  _OWORD v156[2];
  uint64_t v157;
  simd_float4x4 v158;
  simd_float4x4 v159;
  simd_float4x4 v160;
  simd_float4x4 v161;
  simd_float4x4 v162;
  simd_float4x4 v163;

  v1 = *(_QWORD *)a1;
  v2 = qword_1EEF57308;
  swift_retain();
  if (v2 != -1)
    swift_once();
  v156[0] = xmmword_1EEFD53E8;
  v156[1] = unk_1EEFD53F8;
  v157 = qword_1EEFD5408;
  sub_1B1E8FCE4(v1, (uint64_t)v156, 0x200000000, v130);
  sub_1B1A18378((uint64_t)v130, (uint64_t)v143, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v143[0])
    return (uint64_t *)swift_release();
  v150 = v143[0];
  v151 = v143[1];
  v152 = v144;
  if (v149 <= 0)
  {
    swift_release();
    return sub_1B19ED748(v130);
  }
  v108 = v146;
  if (!v146)
  {
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_117:
    swift_release();
    sub_1B19ED748(v130);
    return sub_1B19ED748(v130);
  }
  v3 = v148;
  v107 = v145;
  v4 = v148[4];
  v5 = *(_BYTE *)(v147 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v105 = v148 + 8;
  v106 = (uint64_t)(v148 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = 0;
  v116 = 0;
  v103 = v4;
  v104 = v3;
  v102 = v5;
  while (1)
  {
    v7 = (unsigned int *)(v107 + 48 * v6);
    v124 = *v7;
    v113 = v7[1];
    v9 = (uint64_t *)*((_QWORD *)v7 + 2);
    v8 = *((_QWORD *)v7 + 3);
    v10 = *((_QWORD *)v7 + 5);
    v120 = *((_QWORD *)v7 + 4);
    v119 = v10;
    if ((v5 & 1) != 0)
    {
      v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      v12 = v11;
      v10 = v119;
      os_unfair_lock_lock(v12);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v119 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v4);
    sub_1B1A18378(v106, (uint64_t)v155, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v13 = v3[4];
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v3[6] = ecs_stack_allocator_allocate(v13, 48 * v14, 8);
    v3[7] = v14;
    v105[1] = 0;
    v105[2] = 0;
    *v105 = 0;
    swift_release();
    v15 = v120;
    v16 = sub_1B1A12038((uint64_t)&type metadata for KillShape, (uint64_t)&off_1E63C3E28, v9, v8, v120, (uint64_t)v3);
    v128 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v9, v8, v120, (uint64_t)v3);
    v129 = v16;
    v115 = v6;
    if (!v9)
      break;
    v17 = v116;
    if (v120)
    {
      v18 = 0;
      v19 = *(_DWORD *)(a1 + 36);
      v20 = *(int *)(a1 + 32);
      v22 = v20 == -1 && v19 == 0;
      v122 = v22;
      v125 = *(_DWORD *)(a1 + 36);
      while (1)
      {
        swift_retain();
        if (v122)
          goto LABEL_119;
        if ((v20 & 0x80000000) != 0)
          goto LABEL_119;
        v23 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v20)
          goto LABEL_119;
        v24 = *v23;
        v25 = *v23 + 12 * (int)v20;
        v26 = *(__int16 *)(v25 + 4);
        if (v19 != -1 && *(_DWORD *)(v25 + 8) != v19)
          goto LABEL_119;
        v27 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v24 + 12 * (int)v20) + 32);
        v28 = *(_QWORD *)(v27 + 48);
        v29 = *(_QWORD *)(v28 + 16);
        if (!v29)
          goto LABEL_119;
        v30 = (_BYTE *)(v16 + 2 * v18);
        v31 = (_QWORD *)(v28 + 56);
        v32 = (float32x2_t *)(v128 + (v18 << 6));
        while ((ValueMetadata *)*(v31 - 3) != &type metadata for EmitterDescription)
        {
          v31 += 5;
          if (!--v29)
            goto LABEL_119;
        }
        v33 = *(_BYTE *)(*(_QWORD *)(v27 + 128) + *v31 + 88 * v26 + 56);
        swift_release();
        if ((v33 & 1) == 0)
        {
          v41 = *(_QWORD **)(v1 + 176);
          swift_retain();
          swift_retain();
          os_unfair_recursive_lock_lock_with_options();
          v42 = v41[6];
          v43 = *(_QWORD *)(v42 + 16);
          if (!v43)
            goto LABEL_50;
          v44 = 0;
          v45 = (_QWORD *)(v42 + 56);
          v46 = 24;
          while ((ValueMetadata *)*(v45 - 3) != &type metadata for WorldFromScene)
          {
            ++v44;
            v46 += 32;
            v45 += 5;
            if (v43 == v44)
              goto LABEL_50;
          }
          if (v44 < 0x40 && ((v41[15] >> v44) & 1) != 0)
          {
            v48 = (simd_float4x4 *)(v41[2] + *v45);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v41[4] + v46));
            os_unfair_recursive_lock_unlock();
            v158 = *v48;
            v15 = v120;
            v159 = __invert_f4(v158);
            v117 = v159.columns[0];
            v111 = v159.columns[2];
            v114 = v159.columns[1];
            v109 = v159.columns[3];
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v41[4] + v46));
            swift_release();
            swift_release();
            v50 = (float32x4_t)v109;
            v49 = (float32x4_t)v111;
            v51 = (float32x4_t)v114;
            v52 = (float32x4_t)v117;
          }
          else
          {
LABEL_50:
            os_unfair_recursive_lock_unlock();
            swift_release();
            swift_release();
            v50 = (float32x4_t)xmmword_1B2244E20;
            v49 = (float32x4_t)xmmword_1B2244D90;
            v51 = (float32x4_t)xmmword_1B2244DD0;
            v52 = (float32x4_t)xmmword_1B2244DB0;
          }
          v19 = v125;
          goto LABEL_58;
        }
        v34 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v35 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
        swift_retain();
        v36 = v35 <= v20;
        v19 = v125;
        if (v36)
          break;
        v37 = *v34;
        if (v125 != -1 && *(_DWORD *)(v37 + 12 * (int)v20 + 8) != v125)
          break;
        sub_1B1D1EF80(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v37 + 12 * (int)v20) + 32), *(_DWORD *)(v37 + 12 * (int)v20), *(_WORD *)(v37 + 12 * (int)v20 + 4), 64, v1, (uint64_t)v131);
        swift_release();
        sub_1B1A18378((uint64_t)v131, (uint64_t)v137, &qword_1ED4B9808, (uint64_t)&type metadata for InverseWorldTransform);
        if ((v138 & 1) != 0)
          goto LABEL_37;
        v52 = v137[0];
        v51 = v137[1];
        v49 = v137[2];
        v50 = v137[3];
LABEL_58:
        v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)v32->f32)), v51, *v32, 1), v49, *(float32x4_t *)v32->f32, 2), v50, *(float32x4_t *)v32->f32, 3);
        v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)v32[2].f32)), v51, v32[2], 1), v49, *(float32x4_t *)v32[2].f32, 2), v50, *(float32x4_t *)v32[2].f32, 3);
        v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)v32[4].f32)), v51, v32[4], 1), v49, *(float32x4_t *)v32[4].f32, 2), v50, *(float32x4_t *)v32[4].f32, 3);
        v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)v32[6].f32)), v51, v32[6], 1), v49, *(float32x4_t *)v32[6].f32, 2), v50, *(float32x4_t *)v32[6].f32, 3);
        if (*v30)
        {
          v16 = v129;
          v57 = v129 + 2 * v18;
          if (*v30 == 1)
            sub_1B1BE7E48(*(_BYTE *)(v57 + 1), v1, v127, v53, v54, v55, v56);
          else
            sub_1B1BE8C08((uint64_t *)*(unsigned __int8 *)(v57 + 1), v1, v127, v53, v54, v55, v56);
        }
        else
        {
          v16 = v129;
          sub_1B1BE7434(*(_BYTE *)(v129 + 2 * v18 + 1), v1, v127, v53, v54, v55, v56);
        }
        if (++v18 == v15)
          goto LABEL_63;
      }
      swift_release();
LABEL_37:
      v38 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
      swift_retain();
      if (v39 <= v20)
      {
        swift_release();
        v47.columns[3] = (simd_float4)xmmword_1B2244E20;
        v47.columns[2] = (simd_float4)xmmword_1B2244D90;
        v47.columns[1] = (simd_float4)xmmword_1B2244DD0;
        v47.columns[0] = (simd_float4)xmmword_1B2244DB0;
        v19 = v125;
      }
      else
      {
        v40 = *v38;
        v19 = v125;
        if (v125 == -1 || *(_DWORD *)(v40 + 12 * (int)v20 + 8) == v125)
        {
          sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v40 + 12 * (int)v20) + 32), *(_DWORD *)(v40 + 12 * (int)v20), *(_WORD *)(v40 + 12 * (int)v20 + 4), 64, v1, (uint64_t)v132);
          swift_release();
          sub_1B1A18378((uint64_t)v132, (uint64_t)&v135, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
          if ((v136 & 1) == 0)
          {
            v47 = v135;
            goto LABEL_57;
          }
        }
        else
        {
          swift_release();
        }
        v47.columns[3] = (simd_float4)xmmword_1B2244E20;
        v47.columns[2] = (simd_float4)xmmword_1B2244D90;
        v47.columns[1] = (simd_float4)xmmword_1B2244DD0;
        v47.columns[0] = (simd_float4)xmmword_1B2244DB0;
      }
LABEL_57:
      v160 = __invert_f4(v47);
      v52 = (float32x4_t)v160.columns[0];
      v51 = (float32x4_t)v160.columns[1];
      v49 = (float32x4_t)v160.columns[2];
      v50 = (float32x4_t)v160.columns[3];
      goto LABEL_58;
    }
LABEL_63:
    v153[0] = v150;
    v153[1] = v151;
    v154 = v152;
    v3 = v104;
    sub_1B1F05D48(v104, (unsigned __int16 **)v153, (uint64_t)v155);
    v116 = v17;
    sub_1B1F03804((char *)v119);
    v4 = v103;
    ecs_stack_allocator_pop_snapshot(v103);
    v5 = v102;
    if ((v102 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v119 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v119 + 376));
    }
    swift_release();
    v6 = v115 + 1;
    if (v115 + 1 == v108)
      goto LABEL_117;
  }
  v58 = v113;
  v59 = v124;
  v17 = v116;
  if ((_DWORD)v124 == (_DWORD)v113)
    goto LABEL_63;
  v60 = *(_DWORD *)(a1 + 36);
  v61 = *(int *)(a1 + 32);
  v63 = v61 == -1 && v60 == 0;
  v121 = v63;
  v123 = *(_DWORD *)(a1 + 36);
  while (1)
  {
    v64 = v59;
    swift_retain();
    if (v121)
      break;
    if ((v61 & 0x80000000) != 0)
      break;
    v65 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v61)
      break;
    v66 = *v65;
    v67 = *v65 + 12 * (int)v61;
    v68 = *(__int16 *)(v67 + 4);
    if (v60 != -1 && *(_DWORD *)(v67 + 8) != v60)
      break;
    v69 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v66 + 12 * (int)v61) + 32);
    v70 = *(_QWORD *)(v69 + 48);
    v71 = *(_QWORD *)(v70 + 16);
    if (!v71)
      break;
    ++v59;
    v72 = (_BYTE *)(v16 + 2 * v64);
    v73 = (_QWORD *)(v70 + 56);
    v74 = (float32x2_t *)(v128 + (v64 << 6));
    while ((ValueMetadata *)*(v73 - 3) != &type metadata for EmitterDescription)
    {
      v73 += 5;
      if (!--v71)
        goto LABEL_119;
    }
    v126 = v72;
    v75 = *(_BYTE *)(*(_QWORD *)(v69 + 128) + *v73 + 88 * v68 + 56);
    swift_release();
    if ((v75 & 1) == 0)
    {
      v82 = *(_QWORD **)(v1 + 176);
      swift_retain();
      swift_retain();
      os_unfair_recursive_lock_lock_with_options();
      v83 = v82[6];
      v84 = *(_QWORD *)(v83 + 16);
      if (!v84)
        goto LABEL_102;
      v85 = 0;
      v86 = (_QWORD *)(v83 + 56);
      v87 = 24;
      while ((ValueMetadata *)*(v86 - 3) != &type metadata for WorldFromScene)
      {
        ++v85;
        v87 += 32;
        v86 += 5;
        if (v84 == v85)
          goto LABEL_102;
      }
      if (v85 < 0x40 && ((v82[15] >> v85) & 1) != 0)
      {
        v89 = (simd_float4x4 *)(v82[2] + *v86);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v82[4] + v87));
        os_unfair_recursive_lock_unlock();
        v161 = *v89;
        v58 = v113;
        v162 = __invert_f4(v161);
        v118 = v162.columns[0];
        v110 = v162.columns[2];
        v112 = v162.columns[1];
        v100 = v162.columns[3];
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v82[4] + v87));
        swift_release();
        swift_release();
        v90 = (float32x4_t)v100;
        v92 = (float32x4_t)v110;
        v91 = (float32x4_t)v112;
        v93 = (float32x4_t)v118;
      }
      else
      {
LABEL_102:
        os_unfair_recursive_lock_unlock();
        swift_release();
        swift_release();
        v93 = (float32x4_t)xmmword_1B2244DB0;
        v91 = (float32x4_t)xmmword_1B2244DD0;
        v92 = (float32x4_t)xmmword_1B2244D90;
        v90 = (float32x4_t)xmmword_1B2244E20;
      }
      v60 = v123;
      goto LABEL_110;
    }
    v76 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v77 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
    swift_retain();
    v36 = v77 <= v61;
    v60 = v123;
    if (v36 || (v78 = *v76, v123 != -1) && *(_DWORD *)(v78 + 12 * (int)v61 + 8) != v123)
    {
      swift_release();
LABEL_89:
      v79 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v80 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
      swift_retain();
      if (v80 <= v61)
      {
        swift_release();
        v88.columns[0] = (simd_float4)xmmword_1B2244DB0;
        v88.columns[1] = (simd_float4)xmmword_1B2244DD0;
        v88.columns[2] = (simd_float4)xmmword_1B2244D90;
        v88.columns[3] = (simd_float4)xmmword_1B2244E20;
        v60 = v123;
      }
      else
      {
        v81 = *v79;
        v60 = v123;
        if (v123 != -1 && *(_DWORD *)(v81 + 12 * (int)v61 + 8) != v123)
        {
          swift_release();
          goto LABEL_107;
        }
        sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v81 + 12 * (int)v61) + 32), *(_DWORD *)(v81 + 12 * (int)v61), *(_WORD *)(v81 + 12 * (int)v61 + 4), 64, v1, (uint64_t)v134);
        swift_release();
        sub_1B1A18378((uint64_t)v134, (uint64_t)&v139, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
        if ((v140 & 1) != 0)
        {
LABEL_107:
          v88.columns[0] = (simd_float4)xmmword_1B2244DB0;
          v88.columns[1] = (simd_float4)xmmword_1B2244DD0;
          v88.columns[2] = (simd_float4)xmmword_1B2244D90;
          v88.columns[3] = (simd_float4)xmmword_1B2244E20;
        }
        else
        {
          v88 = v139;
        }
      }
      v163 = __invert_f4(v88);
      v93 = (float32x4_t)v163.columns[0];
      v91 = (float32x4_t)v163.columns[1];
      v92 = (float32x4_t)v163.columns[2];
      v90 = (float32x4_t)v163.columns[3];
      goto LABEL_110;
    }
    sub_1B1D1EF80(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v78 + 12 * (int)v61) + 32), *(_DWORD *)(v78 + 12 * (int)v61), *(_WORD *)(v78 + 12 * (int)v61 + 4), 64, v1, (uint64_t)v133);
    swift_release();
    sub_1B1A18378((uint64_t)v133, (uint64_t)v141, &qword_1ED4B9808, (uint64_t)&type metadata for InverseWorldTransform);
    if ((v142 & 1) != 0)
      goto LABEL_89;
    v93 = v141[0];
    v91 = v141[1];
    v92 = v141[2];
    v90 = v141[3];
LABEL_110:
    v94 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, COERCE_FLOAT(*(_OWORD *)v74->f32)), v91, *v74, 1), v92, *(float32x4_t *)v74->f32, 2), v90, *(float32x4_t *)v74->f32, 3);
    v95 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, COERCE_FLOAT(*(_OWORD *)v74[2].f32)), v91, v74[2], 1), v92, *(float32x4_t *)v74[2].f32, 2), v90, *(float32x4_t *)v74[2].f32, 3);
    v96 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, COERCE_FLOAT(*(_OWORD *)v74[4].f32)), v91, v74[4], 1), v92, *(float32x4_t *)v74[4].f32, 2), v90, *(float32x4_t *)v74[4].f32, 3);
    v97 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, COERCE_FLOAT(*(_OWORD *)v74[6].f32)), v91, v74[6], 1), v92, *(float32x4_t *)v74[6].f32, 2), v90, *(float32x4_t *)v74[6].f32, 3);
    if (*v126)
    {
      v16 = v129;
      v98 = v129 + 2 * v64;
      if (*v126 == 1)
        sub_1B1BE7E48(*(_BYTE *)(v98 + 1), v1, v127, v94, v95, v96, v97);
      else
        sub_1B1BE8C08((uint64_t *)*(unsigned __int8 *)(v98 + 1), v1, v127, v94, v95, v96, v97);
    }
    else
    {
      v16 = v129;
      sub_1B1BE7434(*(_BYTE *)(v129 + 2 * v64 + 1), v1, v127, v94, v95, v96, v97);
    }
    if (v59 == v58)
      goto LABEL_63;
  }
LABEL_119:
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = (uint64_t *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BE6DC0(uint64_t a1, float32x4_t a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int8x16_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v24[3];
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = ecs_stack_allocator_allocate(*(_QWORD *)(v7 + 32), 8 * (v6 - v5), 8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v7);
  v11 = 0;
  for (i = v6 - v5; v6 != v5; ++v5)
  {
    v13 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v10 + 16 * v5), a2);
    if ((float)(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL))) * a3) < 0.0)
      v8[v11++] = v5;
  }
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v29 = 5;
  if (v11 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v11 == *(_QWORD *)(v9 + 240) - *(_QWORD *)(v9 + 232))
    {
      sub_1B1BE90FC((uint64_t)v27, (uint64_t)v24);
      v26 = 0;
      v25 = 0uLL;
    }
    else
    {
      sub_1B1BE90FC((uint64_t)v27, (uint64_t)v24);
      *(_QWORD *)&v25 = v8;
      *((_QWORD *)&v25 + 1) = i;
      v26 = v11;
    }
    v14 = *(_QWORD **)(v7 + 104);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v7 + 104) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_1B1C631A0(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(v7 + 104) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_1B1C631A0(v16 > 1, v17 + 1, 1, v14);
      *(_QWORD *)(v7 + 104) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[9 * v17];
    *((_OWORD *)v18 + 2) = v24[0];
    v19 = v24[1];
    v20 = v24[2];
    v21 = v25;
    v18[12] = v26;
    *((_OWORD *)v18 + 4) = v20;
    *((_OWORD *)v18 + 5) = v21;
    *((_OWORD *)v18 + 3) = v19;
  }
  sub_1B1B68F14((uint64_t)v27);
  return swift_release();
}

uint64_t type metadata accessor for ParticleKillable.CPUSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1BE6FCC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 120);
  sub_1B1B6F40C((uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1BE7050()
{
  return "KillShape";
}

uint64_t type metadata accessor for ParticleKillable.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1BE7088()
{
  return "KillShapeSystem.GPU";
}

uint64_t sub_1B1BE709C()
{
  return type metadata accessor for ParticleKillable.GPUSystem();
}

unint64_t sub_1B1BE70B8()
{
  unint64_t result;

  result = qword_1EEF5C268;
  if (!qword_1EEF5C268)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282494, &type metadata for KillShape.Shape);
    atomic_store(result, (unint64_t *)&qword_1EEF5C268);
  }
  return result;
}

uint64_t sub_1B1BE70FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6570616873 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656469736E69 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1BE71DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  char v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  sub_1B19F8E54(0, &qword_1EEF5C288, (uint64_t (*)(void))sub_1B1BEA310, (uint64_t)&type metadata for KillShape.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v13 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BEA310();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v15 = 0;
  sub_1B1A70B80();
  sub_1B2229814();
  v9 = v16;
  v14 = 1;
  v11 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if ((v11 & 1) != 0)
    v12 = 256;
  else
    v12 = 0;
  return v12 | v9;
}

uint64_t sub_1B1BE7368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t result;

  swift_retain();
  v4 = sub_1B2020528(a1, (uint64_t)&type metadata for IsSubEntityOf);
  v6 = v5;
  swift_release();
  if ((v6 & 1) != 0)
    return MEMORY[0x1E0DEE9D8];
  swift_retain();
  v7 = sub_1B1FE0A90(v4, a2);
  swift_release();
  if ((v7 & 1) == 0)
    return MEMORY[0x1E0DEE9D8];
  sub_1B1BDB5D0();
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1B226D240;
  *(_QWORD *)(result + 32) = &type metadata for ParticleAge;
  *(_QWORD *)(result + 40) = &off_1E63717C8;
  return result;
}

uint64_t *sub_1B1BE7434(char a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  __int128 v26;
  uint64_t *result;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v92;
  uint64_t v94;
  uint64_t v96;
  unsigned __int16 *v97;
  uint64_t v98[12];
  _QWORD v99[7];
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD v104[10];
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD v109[2];
  uint64_t v110;

  v7 = (int32x4_t)vmulq_f32(a4, a4);
  v8 = (int32x4_t)vmulq_f32(a5, a5);
  v9 = (int32x4_t)vmulq_f32(a6, a6);
  v10 = vzip2q_s32(v7, v9);
  v11 = (float32x4_t)vzip1q_s32(vzip1q_s32(v7, v9), v8);
  v12 = (float32x4_t)vtrn2q_s32(v7, v8);
  v12.i32[2] = v9.i32[1];
  v13 = vaddq_f32((float32x4_t)vzip1q_s32(v10, vdupq_laneq_s32(v8, 2)), vaddq_f32(v11, v12));
  __asm { FMOV            V3.4S, #1.0 }
  v18 = vceqzq_f32(v13);
  v18.i32[3] = 0;
  v19 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v18), (int8x16_t)v13, (int8x16_t)vdivq_f32(_Q3, v13));
  v82 = 0u;
  v20 = vmlaq_f32(vaddq_f32(vmulq_lane_f32(a5, *(float32x2_t *)v19.f32, 1), vmulq_f32(vmulq_laneq_f32(a6, v19, 2), (float32x4_t)0)), (float32x4_t)0, vmulq_n_f32(a4, v19.f32[0]));
  v21 = (int8x16_t)vabsq_f32(v20);
  if (*(float *)v21.i32 > 0.00000011921
    || (v21.i32[0] = vextq_s8(v21, v21, 8uLL).u32[0],
        *(int32x2_t *)v21.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v21.i8),
        (v21.i8[4] & 1) == 0)
    || (v21.i8[0] & 1) == 0)
  {
    v22 = (int32x4_t)vmulq_f32(v20, v20);
    v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
    v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
    v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
    v82 = vmulq_n_f32(v20, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  }
  if ((a1 & 1) != 0)
    v25 = -1.0;
  else
    v25 = 1.0;
  v26 = *(_OWORD *)(a3 + 32);
  v109[0] = *(_OWORD *)(a3 + 16);
  v109[1] = v26;
  v110 = *(_QWORD *)(a3 + 48);
  sub_1B1E8FCE4(a2, (uint64_t)v109, 0x200000000, v98);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v98, (uint64_t)v99, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v97 = (unsigned __int16 *)v99[0];
  if (v99[0])
  {
    v81 = v103;
    if (v103 >= 1)
    {
      v80 = v100;
      if (v100)
      {
        v28 = 0;
        v29 = v82;
        v30 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(a7, (float32x4_t)0, a6), (float32x4_t)0, a5), (float32x4_t)0, a4), v82);
        v29.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0];
        v83 = v29;
        v79 = v99[5];
        v31 = v102;
        v78 = v101;
        v32 = *(unsigned __int8 *)(v101 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v33 = v102[4];
        v75 = v102 + 8;
        v96 = v99[0] + 41;
        v77 = v32;
        v76 = v33;
        do
        {
          v34 = (unsigned int *)(v79 + 48 * v28);
          v35 = *v34;
          v36 = v34[1];
          v37 = v34[2];
          v38 = *((_QWORD *)v34 + 2);
          v39 = *((_QWORD *)v34 + 3);
          v40 = *((_QWORD *)v34 + 5);
          v90 = v28;
          v92 = *((_QWORD *)v34 + 4);
          if (v32)
          {
            v41 = *(os_unfair_lock_s **)(v40 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v41);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v40 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v33);
          v85 = v31[7];
          v86 = v31[6];
          v84 = v31[8];
          v88 = v31[9];
          v94 = v31[10];
          v42 = v31[4];
          v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v31[6] = ecs_stack_allocator_allocate(v42, 48 * v43, 8);
          v31[7] = v43;
          v75[1] = 0;
          v75[2] = 0;
          *v75 = 0;
          swift_release();
          v104[0] = v78;
          v104[1] = v40;
          v87 = v40;
          v104[2] = v31;
          v104[3] = v37;
          v104[4] = (v36 - v35 + v37);
          v104[5] = v81;
          v104[6] = v35;
          v104[7] = v36;
          v104[8] = 0;
          v104[9] = 0;
          v105 = 1;
          v106 = v38;
          v107 = v39;
          v108 = v92;
          sub_1B1BE6DC0((uint64_t)v104, v83, v25);
          v44 = v31[6];
          v45 = v31[8];
          if (!v45)
          {
            v71 = v31[7];
            v72 = (_QWORD *)v31[4];
            v74 = v88;
            v73 = v90;
            goto LABEL_53;
          }
          for (i = 0; i != v45; ++i)
          {
            v48 = (uint64_t *)(v44 + 48 * i);
            v49 = *v48;
            v50 = (void (*)(uint64_t))v48[4];
            v51 = v31[9];
            if (v51)
              _ZF = v49 == v51;
            else
              _ZF = 0;
            if (_ZF || !v97[11])
              goto LABEL_18;
            v53 = v97[9];
            v54 = (_QWORD *)(v96 + v97[8]);
            v55 = v48[2];
            v56 = v54;
            v57 = v53 >> 4;
            v58 = v96;
            if (v53 >= 0x10)
            {
              while (*v56 != v49)
              {
                ++v58;
                v56 += 2;
                if (!--v57)
                  goto LABEL_33;
              }
              v59 = *(unsigned __int8 *)(v58 + v97[10]);
              v60 = v59 > 5;
              v61 = (1 << v59) & 0x23;
              if (v60 || v61 == 0)
              {
LABEL_18:
                v47 = swift_retain();
                v50(v47);
                swift_release();
                continue;
              }
            }
LABEL_33:
            if (swift_conformsToProtocol2())
              v63 = v55;
            else
              v63 = 0;
            if (v63)
            {
              if (v53 < 0x10)
                goto LABEL_18;
              v64 = v54;
              v65 = v53 >> 4;
              v66 = v96;
              while (*v64 != v63)
              {
                ++v66;
                v64 += 2;
                if (!--v65)
                  goto LABEL_46;
              }
              v67 = *(unsigned __int8 *)(v66 + v97[10]);
              v60 = v67 > 5;
              v68 = (1 << v67) & 0x23;
              if (v60 || v68 == 0)
                goto LABEL_18;
LABEL_46:
              v70 = 16 * (v53 >> 4);
              while (*v54 != v63)
              {
                v54 += 2;
                v70 -= 16;
                if (!v70)
                  goto LABEL_18;
              }
            }
          }
          v71 = v31[7];
          v44 = v31[6];
          v72 = (_QWORD *)v31[4];
          v74 = v88;
          v73 = v90;
          if ((uint64_t)v31[8] >= 1)
            swift_arrayDestroy();
LABEL_53:
          ecs_stack_allocator_deallocate(v72, v44, 48 * v71);
          v31[6] = v86;
          v31[7] = v85;
          v31[8] = v84;
          v31[9] = v74;
          v31[10] = v94;
          sub_1B1F03804((char *)v87);
          v33 = v76;
          ecs_stack_allocator_pop_snapshot(v76);
          v32 = v77;
          if ((v77 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v87 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v87 + 376));
          }
          swift_release();
          v28 = v73 + 1;
        }
        while (v28 != v80);
      }
    }
    return sub_1B19ED748(v98);
  }
  return result;
}

uint64_t sub_1B1BE79D0(uint64_t a1, char a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t i;
  __int32 v15;
  int32x4_t v16;
  int v17;
  int32x4_t v18;
  int v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v31[3];
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  char v36;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = ecs_stack_allocator_allocate(*(_QWORD *)(v8 + 32), 8 * (v7 - v6), 8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v8);
  v13 = 0;
  for (i = v7 - v6; v7 != v6; ++v6)
  {
    v15 = v12.i32[3];
    v12 = vabdq_f32(*(float32x4_t *)(v11 + 16 * v6), a3);
    v12.i32[3] = v15;
    if ((a2 & 1) != 0)
    {
      v16 = vcgtq_f32(v12, a4);
      v17 = v16.i32[1];
      if (v16.i32[1] >= v16.i32[0])
        v17 = v16.i32[0];
      if (v16.i32[2] < v17)
        v17 = v16.i32[2];
      if ((v17 & 0x80000000) == 0)
        continue;
    }
    else
    {
      v18 = vcgtq_f32(a4, v12);
      v19 = v18.i32[1];
      if (v18.i32[1] <= v18.i32[0])
        v19 = v18.i32[0];
      if (v18.i32[2] > v19)
        v19 = v18.i32[2];
      if ((v19 & 0x80000000) == 0)
        continue;
    }
    v9[v13++] = v6;
  }
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  v36 = 5;
  if (v13 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v13 == *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232))
    {
      sub_1B1BE90FC((uint64_t)v34, (uint64_t)v31);
      v33 = 0;
      v32 = 0uLL;
    }
    else
    {
      sub_1B1BE90FC((uint64_t)v34, (uint64_t)v31);
      *(_QWORD *)&v32 = v9;
      *((_QWORD *)&v32 + 1) = i;
      v33 = v13;
    }
    v20 = *(_QWORD **)(v8 + 104);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v8 + 104) = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = sub_1B1C631A0(0, v20[2] + 1, 1, v20);
      *(_QWORD *)(v8 + 104) = v20;
    }
    v23 = v20[2];
    v22 = v20[3];
    if (v23 >= v22 >> 1)
    {
      v20 = sub_1B1C631A0(v22 > 1, v23 + 1, 1, v20);
      *(_QWORD *)(v8 + 104) = v20;
    }
    v20[2] = v23 + 1;
    v24 = &v20[9 * v23];
    *((_OWORD *)v24 + 2) = v31[0];
    v25 = v31[1];
    v26 = v31[2];
    v27 = v32;
    v24[12] = v33;
    *((_OWORD *)v24 + 4) = v26;
    *((_OWORD *)v24 + 5) = v27;
    *((_OWORD *)v24 + 3) = v25;
  }
  sub_1B1B68F14((uint64_t)v34);
  return swift_release();
}

uint64_t sub_1B1BE7BFC(uint64_t a1, char a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t i;
  __int32 v17;
  int32x4_t v18;
  int v19;
  int32x4_t v20;
  int v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v35[3];
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  char v40;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = ecs_stack_allocator_allocate(*(_QWORD *)(v10 + 32), 8 * (v9 - v8), 8);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v10);
  v15 = 0;
  for (i = v9 - v8; v9 != v8; ++v8)
  {
    v17 = v14.i32[3];
    v14 = vabsq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(v13 + 16 * v8))), a4, *(float32x2_t *)(v13 + 16 * v8), 1), a5, *(float32x4_t *)(v13 + 16 * v8), 2), a6, *(float32x4_t *)(v13 + 16 * v8), 3));
    v14.i32[3] = v17;
    if ((a2 & 1) != 0)
    {
      v18 = vcgtq_f32(v14, (float32x4_t)xmmword_1B227E550);
      v19 = v18.i32[1];
      if (v18.i32[1] >= v18.i32[0])
        v19 = v18.i32[0];
      if (v18.i32[2] < v19)
        v19 = v18.i32[2];
      if ((v19 & 0x80000000) == 0)
        continue;
    }
    else
    {
      v20 = vcgtq_f32((float32x4_t)xmmword_1B227E550, v14);
      v21 = v20.i32[1];
      if (v20.i32[1] <= v20.i32[0])
        v21 = v20.i32[0];
      if (v20.i32[2] > v21)
        v21 = v20.i32[2];
      if ((v21 & 0x80000000) == 0)
        continue;
    }
    v11[v15++] = v8;
  }
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v40 = 5;
  if (v15 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v15 == *(_QWORD *)(v12 + 240) - *(_QWORD *)(v12 + 232))
    {
      sub_1B1BE90FC((uint64_t)v38, (uint64_t)v35);
      v37 = 0;
      v36 = 0uLL;
    }
    else
    {
      sub_1B1BE90FC((uint64_t)v38, (uint64_t)v35);
      *(_QWORD *)&v36 = v11;
      *((_QWORD *)&v36 + 1) = i;
      v37 = v15;
    }
    v22 = *(_QWORD **)(v10 + 104);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 104) = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = sub_1B1C631A0(0, v22[2] + 1, 1, v22);
      *(_QWORD *)(v10 + 104) = v22;
    }
    v25 = v22[2];
    v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      v22 = sub_1B1C631A0(v24 > 1, v25 + 1, 1, v22);
      *(_QWORD *)(v10 + 104) = v22;
    }
    v22[2] = v25 + 1;
    v26 = &v22[9 * v25];
    *((_OWORD *)v26 + 2) = v35[0];
    v27 = v35[1];
    v28 = v35[2];
    v29 = v36;
    v26[12] = v37;
    *((_OWORD *)v26 + 4) = v28;
    *((_OWORD *)v26 + 5) = v29;
    *((_OWORD *)v26 + 3) = v27;
  }
  sub_1B1B68F14((uint64_t)v38);
  return swift_release();
}

uint64_t *sub_1B1BE7E48(char a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  int32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float v34;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v41;
  int8x16_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  uint64_t v47;
  int32x2_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  uint64_t v52;
  float32x4_t v53;
  BOOL v54;
  float v55;
  float v56;
  simd_float4 v57;
  uint64_t *result;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t i;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void (*v79)(uint64_t);
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  int v90;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t j;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  void (*v123)(uint64_t);
  uint64_t v124;
  BOOL v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  float32x4_t v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v165;
  float32x4_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x4_t v183;
  uint64_t v184;
  uint64_t v185;
  float32x4_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int16 *v189;
  unsigned __int16 *v190;
  float32x4_t v191;
  __int128 v192;
  uint64_t v193[12];
  _QWORD v194[5];
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  simd_float4 v215;
  uint64_t v216;
  simd_float4x4 v217;
  simd_float4x4 v218;

  v12 = (int32x4_t)vmulq_f32(a4, a4);
  v13 = vmulq_f32(a5, a5);
  v14 = (int32x4_t)vmulq_f32(a6, a6);
  v15 = vzip2q_s32(v12, v14);
  v16 = (float32x4_t)vzip1q_s32(vzip1q_s32(v12, v14), (int32x4_t)v13);
  v17 = (float32x4_t)vtrn2q_s32(v12, (int32x4_t)v13);
  v17.i32[2] = v14.i32[1];
  v18 = vaddq_f32((float32x4_t)vzip1q_s32(v15, vdupq_laneq_s32((int32x4_t)v13, 2)), vaddq_f32(v16, v17));
  v13.i64[0] = 0x80000000800000;
  v13.i64[1] = 0x80000000800000;
  v19 = vcgeq_f32(v13, v18);
  v18.i32[3] = 0;
  v20 = vrsqrteq_f32(v18);
  v21 = vmulq_f32(v20, vrsqrtsq_f32(v18, vmulq_f32(v20, v20)));
  v22 = v19;
  v22.i32[3] = 0;
  v23 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v22), (int8x16_t)v18, (int8x16_t)vmulq_f32(v21, vrsqrtsq_f32(v18, vmulq_f32(v21, v21))));
  v24 = vmulq_n_f32(a4, v23.f32[0]);
  v25 = vmulq_lane_f32(a5, *(float32x2_t *)v23.f32, 1);
  v26 = vmulq_laneq_f32(a6, v23, 2);
  v27 = (int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26);
  v28 = (int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25);
  v29 = (int32x4_t)v24;
  if (v19.i32[0])
  {
    v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v27, (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8(v28, (int8x16_t)v25, 0xCuLL));
    v29 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
  }
  v31 = (int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24);
  v32 = v25;
  if (v19.i32[1])
  {
    v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v31, (int8x16_t)v24, 0xCuLL), vnegq_f32(v26)), v24, (float32x4_t)vextq_s8(v27, (int8x16_t)v26, 0xCuLL));
    v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
  }
  if (v19.i32[2])
  {
    v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v28, (int8x16_t)v25, 0xCuLL), vnegq_f32(v24)), v25, (float32x4_t)vextq_s8(v31, (int8x16_t)v24, 0xCuLL));
    v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL);
  }
  v34 = (float)(*(float *)v29.i32 + v32.f32[1]) + v26.f32[2];
  if (v34 > 0.0)
  {
    v35 = (float32x4_t)vzip2q_s32((int32x4_t)v32, vuzp1q_s32((int32x4_t)v32, (int32x4_t)v26));
    v35.i32[2] = v29.i32[1];
    v36 = sqrtf(v34 + 1.0);
    v37 = (float32x4_t)vtrn2q_s32((int32x4_t)v26, vzip2q_s32((int32x4_t)v26, v29));
    v37.i32[2] = v32.i32[0];
    v39 = vsubq_f32(v35, v37);
    v35.f32[3] = v36;
    v37.f32[3] = v36;
    v38 = vmulq_f32(v35, v37);
    v39.i32[3] = v38.i32[3];
LABEL_18:
    v38.f32[0] = 0.5 / v36;
    v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0);
    goto LABEL_19;
  }
  if (*(float *)v29.i32 < v32.f32[1] || *(float *)v29.i32 < v26.f32[2])
  {
    if (v32.f32[1] <= v26.f32[2])
    {
      v36 = sqrtf((float)((float)(v26.f32[2] + 1.0) - *(float *)v29.i32) - v32.f32[1]);
      *(float32x2_t *)v39.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v29, (int32x4_t)v32), *(float32x2_t *)v26.f32);
      v50 = (float32x2_t)__PAIR64__(v29.u32[1], LODWORD(v36));
      v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.f32, 0);
      *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)v29.i8, v51);
      v51.f32[0] = v36;
      v51.i32[0] = vmul_f32(v50, v51).u32[0];
      v51.i32[1] = v38.i32[1];
      *(float32x2_t *)&v39.u32[2] = v51;
      goto LABEL_18;
    }
    v43 = sqrtf((float)((float)(v32.f32[1] + 1.0) - *(float *)v29.i32) - v26.f32[2]);
    *(int32x2_t *)v19.i8 = vdup_laneq_s32((int32x4_t)v32, 2);
    v41 = (int8x16_t)v19;
    *(float *)v41.i32 = v43;
    v41.i32[0] = vmul_f32(*(float32x2_t *)v41.i8, (float32x2_t)__PAIR64__(v26.u32[1], LODWORD(v43))).u32[0];
    v41.i32[1] = vadd_f32(*(float32x2_t *)&v19, *(float32x2_t *)&v26).i32[1];
    v42 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1), v32);
    v48 = (int32x2_t)vsubq_f32(v26, (float32x4_t)vdupq_laneq_s32(v29, 2)).u64[0];
    v49 = (float32x4_t)vextq_s8(vextq_s8(v42, v42, 4uLL), v41, 0xCuLL);
    v49.i32[3] = v48.i32[0];
  }
  else
  {
    v43 = sqrtf((float)((float)(*(float *)v29.i32 + 1.0) - v32.f32[1]) - v26.f32[2]);
    v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.f32, 0);
    v45 = vadd_f32(*(float32x2_t *)v29.i8, v44);
    v44.f32[0] = v43;
    v49.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v29.u32[1], LODWORD(v43)), v44).u32[0];
    v49.i32[1] = v45.i32[1];
    v46 = (float32x2_t)vzip2q_s32(v29, (int32x4_t)v32).u64[0];
    LODWORD(v47) = vadd_f32(v46, *(float32x2_t *)v26.f32).u32[0];
    v48 = (int32x2_t)vsub_f32(v46, *(float32x2_t *)v26.f32);
    HIDWORD(v47) = v48.i32[1];
    v49.i64[1] = v47;
  }
  *(float *)v48.i32 = 0.5 / v43;
  v39 = (float32x4_t)vdupq_lane_s32(v48, 0);
LABEL_19:
  v52 = 0;
  v53 = vmulq_f32(v39, v49);
  while (1)
  {
    v191 = v53;
    v55 = *(float *)((unint64_t)&v191 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
    v192 = xmmword_1B2244E20;
    v56 = *(float *)((unint64_t)&v192 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
    v54 = v55 == v56;
    if (v52 == 3)
      break;
    while (1)
    {
      ++v52;
      if (v54)
        break;
      if (v52 == 3)
        goto LABEL_73;
      v54 = 0;
    }
  }
  if (v55 == v56)
  {
    v180 = a5;
    v183 = a4;
    v186 = a6;
    v57 = *(simd_float4 *)(a3 + 32);
    v214 = *(_OWORD *)(a3 + 16);
    v215 = v57;
    v216 = *(_QWORD *)(a3 + 48);
    sub_1B1E8FCE4(a2, (uint64_t)&v214, 0x200000000, v193);
    result = (uint64_t *)sub_1B1A18378((uint64_t)v193, (uint64_t)v194, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v189 = (unsigned __int16 *)v194[0];
    if (!v194[0])
      return result;
    v162 = v199;
    if (v199 >= 1)
    {
      v160 = v196;
      if (v196)
      {
        v59 = 0;
        v165 = vmlaq_f32(vmlaq_f32(vmlaq_f32(a7, (float32x4_t)0, v186), (float32x4_t)0, v180), (float32x4_t)0, v183);
        v158 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v180 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)xmmword_1B227E550), (float32x4_t)xmmword_1B227E550, (float32x4_t)(*(_OWORD *)&v183 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (float32x4_t)xmmword_1B227E550, (float32x4_t)(*(_OWORD *)&v186 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v156 = v195;
        v60 = v198;
        v61 = *(unsigned __int8 *)(v197 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v62 = v198[4];
        v150 = v198 + 8;
        v187 = v194[0] + 41;
        v147 = v61;
        v152 = v62;
        v154 = v197;
        while (1)
        {
          v176 = v59;
          v63 = (unsigned int *)(v156 + 48 * v59);
          v64 = *v63;
          v65 = v63[1];
          v66 = v63[2];
          v67 = *((_QWORD *)v63 + 3);
          v178 = *((_QWORD *)v63 + 2);
          v69 = *((_QWORD *)v63 + 4);
          v68 = *((_QWORD *)v63 + 5);
          if (v61)
          {
            v70 = *(os_unfair_lock_s **)(v68 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v70);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v68 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v62);
          v170 = v60[7];
          v172 = v60[6];
          v168 = v60[8];
          v184 = v60[9];
          v181 = v60[10];
          v71 = v60[4];
          v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v60[6] = ecs_stack_allocator_allocate(v71, 48 * v72, 8);
          v60[7] = v72;
          v150[1] = 0;
          v150[2] = 0;
          *v150 = 0;
          swift_release();
          v200 = v154;
          v201 = v68;
          v174 = v68;
          v202 = v60;
          v203 = v66;
          v204 = (v65 - v64 + v66);
          v205 = v162;
          v206 = v64;
          v207 = v65;
          v208 = 0;
          v209 = 0;
          v210 = 1;
          v211 = v178;
          v212 = v67;
          v213 = v69;
          sub_1B1BE79D0((uint64_t)&v200, a1 & 1, v165, v158);
          v73 = v60[6];
          v74 = v60[8];
          if (!v74)
          {
            v100 = v60[7];
            v101 = (_QWORD *)v60[4];
            v102 = v176;
            v61 = v147;
            goto LABEL_71;
          }
          for (i = 0; i != v74; ++i)
          {
            v77 = (uint64_t *)(v73 + 48 * i);
            v78 = *v77;
            v79 = (void (*)(uint64_t))v77[4];
            v80 = v60[9];
            if (v80)
              v81 = v78 == v80;
            else
              v81 = 0;
            if (v81 || !v189[11])
              goto LABEL_36;
            v82 = v189[9];
            v83 = (_QWORD *)(v187 + v189[8]);
            v84 = v77[2];
            v85 = v83;
            v86 = v82 >> 4;
            v87 = v187;
            if (v82 >= 0x10)
            {
              while (*v85 != v78)
              {
                ++v87;
                v85 += 2;
                if (!--v86)
                  goto LABEL_51;
              }
              v88 = *(unsigned __int8 *)(v87 + v189[10]);
              v89 = v88 > 5;
              v90 = (1 << v88) & 0x23;
              if (v89 || v90 == 0)
              {
LABEL_36:
                v76 = swift_retain();
                v79(v76);
                swift_release();
                continue;
              }
            }
LABEL_51:
            if (swift_conformsToProtocol2())
              v92 = v84;
            else
              v92 = 0;
            if (v92)
            {
              if (v82 < 0x10)
                goto LABEL_36;
              v93 = v83;
              v94 = v82 >> 4;
              v95 = v187;
              while (*v93 != v92)
              {
                ++v95;
                v93 += 2;
                if (!--v94)
                  goto LABEL_64;
              }
              v96 = *(unsigned __int8 *)(v95 + v189[10]);
              v89 = v96 > 5;
              v97 = (1 << v96) & 0x23;
              if (v89 || v97 == 0)
                goto LABEL_36;
LABEL_64:
              v99 = 16 * (v82 >> 4);
              while (*v83 != v92)
              {
                v83 += 2;
                v99 -= 16;
                if (!v99)
                  goto LABEL_36;
              }
            }
          }
          v100 = v60[7];
          v73 = v60[6];
          v101 = (_QWORD *)v60[4];
          v102 = v176;
          v61 = v147;
          if ((uint64_t)v60[8] >= 1)
            swift_arrayDestroy();
LABEL_71:
          ecs_stack_allocator_deallocate(v101, v73, 48 * v100);
          v60[6] = v172;
          v60[7] = v170;
          v60[8] = v168;
          v60[9] = v184;
          v60[10] = v181;
          sub_1B1F03804((char *)v174);
          v62 = v152;
          ecs_stack_allocator_pop_snapshot(v152);
          if ((v61 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v174 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v174 + 376));
          }
          swift_release();
          v59 = v102 + 1;
          if (v59 == v160)
            return sub_1B19ED748(v193);
        }
      }
    }
    return sub_1B19ED748(v193);
  }
LABEL_73:
  v217.columns[0] = (simd_float4)a4;
  v217.columns[1] = (simd_float4)a5;
  v217.columns[2] = (simd_float4)a6;
  v217.columns[3] = (simd_float4)a7;
  v218 = __invert_f4(v217);
  v163 = (float32x4_t)v218.columns[1];
  v166 = (float32x4_t)v218.columns[0];
  v159 = (float32x4_t)v218.columns[3];
  v161 = (float32x4_t)v218.columns[2];
  v218.columns[1] = *(simd_float4 *)(a3 + 32);
  v214 = *(_OWORD *)(a3 + 16);
  v215 = v218.columns[1];
  v216 = *(_QWORD *)(a3 + 48);
  sub_1B1E8FCE4(a2, (uint64_t)&v214, 0x200000000, v193);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v193, (uint64_t)v194, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v190 = (unsigned __int16 *)v194[0];
  if (!v194[0])
    return result;
  v157 = v199;
  if (v199 >= 1)
  {
    v155 = v196;
    if (v196)
    {
      v103 = 0;
      v153 = v195;
      v104 = v198;
      v105 = *(unsigned __int8 *)(v197 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v106 = v198[4];
      v148 = v198 + 8;
      v188 = v194[0] + 41;
      v146 = v105;
      v149 = v106;
      v151 = v197;
      do
      {
        v177 = v103;
        v107 = (unsigned int *)(v153 + 48 * v103);
        v108 = *v107;
        v109 = v107[1];
        v110 = v107[2];
        v111 = *((_QWORD *)v107 + 3);
        v179 = *((_QWORD *)v107 + 2);
        v113 = *((_QWORD *)v107 + 4);
        v112 = *((_QWORD *)v107 + 5);
        if (v105)
        {
          v114 = *(os_unfair_lock_s **)(v112 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v114);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v112 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v106);
        v171 = v104[7];
        v173 = v104[6];
        v169 = v104[8];
        v185 = v104[9];
        v182 = v104[10];
        v115 = v104[4];
        v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v104[6] = ecs_stack_allocator_allocate(v115, 48 * v116, 8);
        v104[7] = v116;
        v148[1] = 0;
        v148[2] = 0;
        *v148 = 0;
        swift_release();
        v200 = v151;
        v201 = v112;
        v175 = v112;
        v202 = v104;
        v203 = v110;
        v204 = (v109 - v108 + v110);
        v205 = v157;
        v206 = v108;
        v207 = v109;
        v208 = 0;
        v209 = 0;
        v210 = 1;
        v211 = v179;
        v212 = v111;
        v213 = v113;
        sub_1B1BE7BFC((uint64_t)&v200, a1 & 1, v166, v163, v161, v159);
        v117 = v104[6];
        v118 = v104[8];
        if (!v118)
        {
          v143 = v104[7];
          v144 = (_QWORD *)v104[4];
          v145 = v177;
          v105 = v146;
          goto LABEL_118;
        }
        for (j = 0; j != v118; ++j)
        {
          v121 = (uint64_t *)(v117 + 48 * j);
          v122 = *v121;
          v123 = (void (*)(uint64_t))v121[4];
          v124 = v104[9];
          if (v124)
            v125 = v122 == v124;
          else
            v125 = 0;
          if (v125 || !v190[11])
            goto LABEL_83;
          v126 = v190[9];
          v127 = (_QWORD *)(v188 + v190[8]);
          v128 = v121[2];
          v129 = v127;
          v130 = v126 >> 4;
          v131 = v188;
          if (v126 >= 0x10)
          {
            while (*v129 != v122)
            {
              ++v131;
              v129 += 2;
              if (!--v130)
                goto LABEL_98;
            }
            v132 = *(unsigned __int8 *)(v131 + v190[10]);
            v89 = v132 > 5;
            v133 = (1 << v132) & 0x23;
            if (v89 || v133 == 0)
            {
LABEL_83:
              v120 = swift_retain();
              v123(v120);
              swift_release();
              continue;
            }
          }
LABEL_98:
          if (swift_conformsToProtocol2())
            v135 = v128;
          else
            v135 = 0;
          if (v135)
          {
            if (v126 < 0x10)
              goto LABEL_83;
            v136 = v127;
            v137 = v126 >> 4;
            v138 = v188;
            while (*v136 != v135)
            {
              ++v138;
              v136 += 2;
              if (!--v137)
                goto LABEL_111;
            }
            v139 = *(unsigned __int8 *)(v138 + v190[10]);
            v89 = v139 > 5;
            v140 = (1 << v139) & 0x23;
            if (v89 || v140 == 0)
              goto LABEL_83;
LABEL_111:
            v142 = 16 * (v126 >> 4);
            while (*v127 != v135)
            {
              v127 += 2;
              v142 -= 16;
              if (!v142)
                goto LABEL_83;
            }
          }
        }
        v143 = v104[7];
        v117 = v104[6];
        v144 = (_QWORD *)v104[4];
        v145 = v177;
        v105 = v146;
        if ((uint64_t)v104[8] >= 1)
          swift_arrayDestroy();
LABEL_118:
        ecs_stack_allocator_deallocate(v144, v117, 48 * v143);
        v104[6] = v173;
        v104[7] = v171;
        v104[8] = v169;
        v104[9] = v185;
        v104[10] = v182;
        sub_1B1F03804((char *)v175);
        v106 = v149;
        ecs_stack_allocator_pop_snapshot(v149);
        if ((v105 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v175 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v175 + 376));
        }
        swift_release();
        v103 = v145 + 1;
      }
      while (v103 != v155);
    }
  }
  return sub_1B19ED748(v193);
}

uint64_t sub_1B1BE8A04(uint64_t a1, char a2, float32x4_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v26[3];
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = ecs_stack_allocator_allocate(*(_QWORD *)(v7 + 32), 8 * (v6 - v5), 8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v7);
  v11 = 0;
  v12 = v6 - v5;
  if (v6 != v5)
  {
    v13 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(a3, a3), 3);
    do
    {
      v14 = vsubq_f32(a3, *(float32x4_t *)(v10 + 16 * v5));
      v15 = vmulq_f32(v14, v14);
      if ((vmovn_s32(vcgeq_f32(v13, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))))).u32[0] & 1) != (a2 & 1))v8[v11++] = v5;
      ++v5;
    }
    while (v6 != v5);
  }
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v31 = 5;
  if (v11 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v11 == *(_QWORD *)(v9 + 240) - *(_QWORD *)(v9 + 232))
    {
      sub_1B1BE90FC((uint64_t)v29, (uint64_t)v26);
      v28 = 0;
      v27 = 0uLL;
    }
    else
    {
      sub_1B1BE90FC((uint64_t)v29, (uint64_t)v26);
      *(_QWORD *)&v27 = v8;
      *((_QWORD *)&v27 + 1) = v12;
      v28 = v11;
    }
    v16 = *(_QWORD **)(v7 + 104);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v7 + 104) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = sub_1B1C631A0(0, v16[2] + 1, 1, v16);
      *(_QWORD *)(v7 + 104) = v16;
    }
    v19 = v16[2];
    v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      v16 = sub_1B1C631A0(v18 > 1, v19 + 1, 1, v16);
      *(_QWORD *)(v7 + 104) = v16;
    }
    v16[2] = v19 + 1;
    v20 = &v16[9 * v19];
    *((_OWORD *)v20 + 2) = v26[0];
    v21 = v26[1];
    v22 = v26[2];
    v23 = v27;
    v20[12] = v28;
    *((_OWORD *)v20 + 4) = v22;
    *((_OWORD *)v20 + 5) = v23;
    *((_OWORD *)v20 + 3) = v21;
  }
  sub_1B1B68F14((uint64_t)v29);
  return swift_release();
}

uint64_t *sub_1B1BE8C08(uint64_t *result, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  char v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83[12];
  _QWORD v84[7];
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD v89[10];
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v13 = vmulq_f32(a4, a4);
  v13.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  v14 = vmulq_f32(a5, a5);
  v14.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
  v15 = vmulq_f32(a6, a6);
  v15.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]);
  if (vabds_f32(fmaxf(fmaxf(v13.f32[0], v15.f32[0]), v14.f32[0]), fminf(fminf(v13.f32[0], v15.f32[0]), v14.f32[0])) <= 0.00001)
  {
    v96 = v7;
    v97 = v8;
    v18 = (char)result;
    v72 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, a4, a5, a6, a7);
    v19 = *(_OWORD *)(a3 + 32);
    v94[0] = *(_OWORD *)(a3 + 16);
    v94[1] = v19;
    v95 = *(_QWORD *)(a3 + 48);
    sub_1B1E8FCE4(a2, (uint64_t)v94, 0x200000000, v83);
    result = (uint64_t *)sub_1B1A18378((uint64_t)v83, (uint64_t)v84, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v82 = (unsigned __int16 *)v84[0];
    if (v84[0])
    {
      v71 = v88;
      if (v88 >= 1)
      {
        v70 = v85;
        if (v85)
        {
          v20 = 0;
          v69 = v84[5];
          v21 = v87;
          v22 = v87[4];
          v67 = v22;
          v68 = v86;
          v23 = *(unsigned __int8 *)(v86 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v65 = v87 + 8;
          v81 = v84[0] + 41;
          v64 = v18 & 1;
          v66 = v23;
          do
          {
            v24 = (unsigned int *)(v69 + 48 * v20);
            v25 = *v24;
            v26 = v24[1];
            v27 = v24[2];
            v28 = *((_QWORD *)v24 + 2);
            v29 = *((_QWORD *)v24 + 3);
            v30 = *((_QWORD *)v24 + 5);
            v78 = v20;
            v79 = *((_QWORD *)v24 + 4);
            if (v23)
            {
              v31 = *(os_unfair_lock_s **)(v30 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v31);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v30 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v22);
            v75 = v21[7];
            v76 = v21[6];
            v73 = v21[9];
            v74 = v21[8];
            v80 = v21[10];
            v32 = v21[4];
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v21[6] = ecs_stack_allocator_allocate(v32, 48 * v33, 8);
            v21[7] = v33;
            v65[1] = 0;
            v65[2] = 0;
            *v65 = 0;
            swift_release();
            v89[0] = v68;
            v89[1] = v30;
            v77 = v30;
            v89[2] = v21;
            v89[3] = v27;
            v89[4] = (v26 - v25 + v27);
            v89[5] = v71;
            v89[6] = v25;
            v89[7] = v26;
            v89[8] = 0;
            v89[9] = 0;
            v90 = 1;
            v91 = v28;
            v92 = v29;
            v93 = v79;
            sub_1B1BE8A04((uint64_t)v89, v64, (float32x4_t)v72);
            v34 = v21[6];
            v35 = v21[8];
            if (!v35)
            {
              v61 = v21[7];
              v62 = (_QWORD *)v21[4];
              v63 = v78;
              goto LABEL_47;
            }
            for (i = 0; i != v35; ++i)
            {
              v38 = (uint64_t *)(v34 + 48 * i);
              v39 = *v38;
              v40 = (void (*)(uint64_t))v38[4];
              v41 = v21[9];
              if (v41)
                v42 = v39 == v41;
              else
                v42 = 0;
              if (v42 || !v82[11])
                goto LABEL_12;
              v43 = v82[9];
              v44 = (_QWORD *)(v81 + v82[8]);
              v45 = v38[2];
              v46 = v44;
              v47 = v43 >> 4;
              v48 = v81;
              if (v43 >= 0x10)
              {
                while (*v46 != v39)
                {
                  ++v48;
                  v46 += 2;
                  if (!--v47)
                    goto LABEL_27;
                }
                v49 = *(unsigned __int8 *)(v48 + v82[10]);
                v50 = v49 > 5;
                v51 = (1 << v49) & 0x23;
                if (v50 || v51 == 0)
                {
LABEL_12:
                  v37 = swift_retain();
                  v40(v37);
                  swift_release();
                  continue;
                }
              }
LABEL_27:
              if (swift_conformsToProtocol2())
                v53 = v45;
              else
                v53 = 0;
              if (v53)
              {
                if (v43 < 0x10)
                  goto LABEL_12;
                v54 = v44;
                v55 = v43 >> 4;
                v56 = v81;
                while (*v54 != v53)
                {
                  ++v56;
                  v54 += 2;
                  if (!--v55)
                    goto LABEL_40;
                }
                v57 = *(unsigned __int8 *)(v56 + v82[10]);
                v50 = v57 > 5;
                v58 = (1 << v57) & 0x23;
                if (v50 || v58 == 0)
                  goto LABEL_12;
LABEL_40:
                v60 = 16 * (v43 >> 4);
                while (*v44 != v53)
                {
                  v44 += 2;
                  v60 -= 16;
                  if (!v60)
                    goto LABEL_12;
                }
              }
            }
            v61 = v21[7];
            v34 = v21[6];
            v62 = (_QWORD *)v21[4];
            v63 = v78;
            if ((uint64_t)v21[8] >= 1)
              swift_arrayDestroy();
LABEL_47:
            ecs_stack_allocator_deallocate(v62, v34, 48 * v61);
            v21[6] = v76;
            v21[7] = v75;
            v21[8] = v74;
            v21[9] = v73;
            v21[10] = v80;
            sub_1B1F03804((char *)v77);
            v22 = v67;
            ecs_stack_allocator_pop_snapshot(v67);
            v23 = v66;
            if ((v66 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v77 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v77 + 376));
            }
            swift_release();
            v20 = v63 + 1;
          }
          while (v20 != v70);
        }
      }
      return sub_1B19ED748(v83);
    }
  }
  return result;
}

uint64_t sub_1B1BE90FC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PrivateCommandQueue.Operation(a2, a1);
  return a2;
}

uint64_t *sub_1B1BE9138(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *result;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _QWORD *v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  int v130;
  simd_float4x4 v131;
  simd_float4x4 v132;
  uint64_t v133;
  int v134;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  char v141;
  char v142;
  uint64_t v143[8];
  _BYTE v144[80];
  _BYTE v145[80];
  float32x4_t v146[4];
  char v147;
  float32x4_t v148[4];
  char v149;
  _OWORD v150[2];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  _OWORD v160[2];
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  _OWORD v164[6];
  int v165;
  _BYTE v166[40];
  _OWORD v167[2];
  uint64_t v168;
  unsigned int v169;
  char v170;

  v1 = *(_OWORD *)(a1 + 96);
  v164[2] = *(_OWORD *)(a1 + 80);
  v164[3] = v1;
  v2 = *(_OWORD *)(a1 + 128);
  v164[4] = *(_OWORD *)(a1 + 112);
  v164[5] = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v162 = *(_OWORD *)(a1 + 16);
  v163 = v3;
  v4 = *(_OWORD *)(a1 + 64);
  v164[0] = *(_OWORD *)(a1 + 48);
  v164[1] = v4;
  v5 = v162;
  v6 = qword_1EEF57308;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v167[0] = xmmword_1EEFD53E8;
  v167[1] = unk_1EEFD53F8;
  v168 = qword_1EEFD5408;
  sub_1B1BE9FDC((int *)v164 + 2, (uint64_t)&v165);
  sub_1B1BE9FDC(&v165, (uint64_t)&v169);
  if (v170)
    v7 = 0x200000000;
  else
    v7 = v169;
  sub_1B1E8FCE4(v162, (uint64_t)v167, v7, v143);
  sub_1B1A18378((uint64_t)v143, (uint64_t)v150, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v150[0])
    return (uint64_t *)swift_release();
  v157 = v150[0];
  v158 = v150[1];
  v159 = v151;
  if (v156 <= 0)
  {
    swift_release();
    return sub_1B19ED748(v143);
  }
  v112 = v153;
  if (!v153)
  {
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_103:
    swift_release();
    sub_1B19ED748(v143);
    return sub_1B19ED748(v143);
  }
  v111 = v152;
  v8 = v155[4];
  v114 = *(_BYTE *)(v154 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v115 = v155;
  v109 = v155 + 8;
  v110 = (uint64_t)(v155 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = 0;
  v108 = v8;
  while (1)
  {
    v10 = (unsigned int *)(v111 + 48 * v9);
    v11 = *v10;
    v125 = v10[1];
    v12 = (uint64_t *)*((_QWORD *)v10 + 2);
    v13 = *((_QWORD *)v10 + 5);
    v127 = *((_QWORD *)v10 + 4);
    v113 = v9;
    v133 = *((_QWORD *)v10 + 3);
    if ((v114 & 1) != 0)
    {
      v14 = *(os_unfair_lock_s **)(v13 + 376);
      swift_retain();
      os_unfair_lock_lock(v14);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    sub_1B1A18378(v110, (uint64_t)v166, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v117 = v13;
    v15 = v115[4];
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v115[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
    v115[7] = v16;
    v109[1] = 0;
    v109[2] = 0;
    *v109 = 0;
    swift_release();
    v136 = sub_1B1A12038((uint64_t)&type metadata for KillShape, (uint64_t)&off_1E63C3E28, v12, v133, v127, (uint64_t)v115);
    v129 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v12, v133, v127, (uint64_t)v115);
    if (!v12)
      break;
    if (v127)
    {
      v17 = 0;
      v18 = SLODWORD(v164[0]);
      v19 = DWORD1(v164[0]);
      v21 = SLODWORD(v164[0]) == -1 && DWORD1(v164[0]) == 0;
      v126 = v21;
      v130 = DWORD1(v164[0]);
      while (1)
      {
        v132 = __invert_f4(*(simd_float4x4 *)(v129 + (v17 << 6)));
        swift_retain();
        if (v126)
          goto LABEL_105;
        if ((v18 & 0x80000000) != 0)
          goto LABEL_105;
        v22 = (uint64_t *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if (*(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v18)
          goto LABEL_105;
        v23 = *v22;
        v24 = *v22 + 12 * (int)v18;
        v25 = *(__int16 *)(v24 + 4);
        if (v19 != -1 && *(_DWORD *)(v24 + 8) != v19)
          goto LABEL_105;
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v23 + 12 * (int)v18) + 32);
        v27 = *(_QWORD *)(v26 + 48);
        v28 = *(_QWORD *)(v27 + 16);
        if (!v28)
          goto LABEL_105;
        v29 = (_QWORD *)(v27 + 56);
        while ((ValueMetadata *)*(v29 - 3) != &type metadata for EmitterDescription)
        {
          v29 += 5;
          if (!--v28)
            goto LABEL_105;
        }
        v30 = *(_BYTE *)(*(_QWORD *)(v26 + 128) + *v29 + 88 * v25 + 56);
        swift_release();
        if ((v30 & 1) == 0)
          break;
        v31 = (uint64_t *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v32 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
        swift_retain();
        if (v32 <= v18)
          goto LABEL_41;
        v33 = *v31;
        v19 = v130;
        if (v130 == -1 || *(_DWORD *)(v33 + 12 * (int)v18 + 8) == v130)
        {
          sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v33 + 12 * (int)v18) + 32), *(_DWORD *)(v33 + 12 * (int)v18), *(_WORD *)(v33 + 12 * (int)v18 + 4), 64, v5, (uint64_t)v144);
          swift_release();
          sub_1B1A18378((uint64_t)v144, (uint64_t)v146, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
          if ((v147 & 1) == 0)
          {
            v38 = v146[0];
            v39 = v146[1];
            v41 = v146[2];
            v40 = v146[3];
            goto LABEL_44;
          }
        }
        else
        {
          swift_release();
        }
        v38 = (float32x4_t)xmmword_1B2244DB0;
        v39 = (float32x4_t)xmmword_1B2244DD0;
        v41 = (float32x4_t)xmmword_1B2244D90;
        v40 = (float32x4_t)xmmword_1B2244E20;
LABEL_44:
        v44 = *(_BYTE *)(v136 + 2 * v17);
        v45 = *(_BYTE *)(v136 + 2 * v17 + 1);
        v137 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v132.columns[0], v38.f32[0]), (float32x4_t)v132.columns[1], *(float32x2_t *)v38.f32, 1), (float32x4_t)v132.columns[2], v38, 2), (float32x4_t)v132.columns[3], v38, 3);
        v138 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v132.columns[0], v39.f32[0]), (float32x4_t)v132.columns[1], *(float32x2_t *)v39.f32, 1), (float32x4_t)v132.columns[2], v39, 2), (float32x4_t)v132.columns[3], v39, 3);
        v139 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v132.columns[0], v41.f32[0]), (float32x4_t)v132.columns[1], *(float32x2_t *)v41.f32, 1), (float32x4_t)v132.columns[2], v41, 2), (float32x4_t)v132.columns[3], v41, 3);
        v140 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v132.columns[0], v40.f32[0]), (float32x4_t)v132.columns[1], *(float32x2_t *)v40.f32, 1), (float32x4_t)v132.columns[2], v40, 2), (float32x4_t)v132.columns[3], v40, 3);
        v141 = v44;
        v142 = v45;
        v46 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          ObjectType = swift_getObjectType();
          type metadata accessor for emitter_killshape_uniforms(0);
          v48 = ObjectType;
          v19 = v130;
          sub_1B1F40E1C((uint64_t)&v137, 1, v48, v49, v50, v51, v52, v53);
        }
        v54 = (_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v55 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
        swift_retain();
        if (v55 <= v18)
          goto LABEL_105;
        v56 = *v54 + 12 * (int)v18;
        v57 = *(__int16 *)(v56 + 4);
        if (v19 != -1 && *(_DWORD *)(v56 + 8) != v19)
          goto LABEL_105;
        v58 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(*v54 + 12 * (int)v18) + 32);
        v59 = *(_QWORD *)(v58 + 48);
        v60 = *(_QWORD *)(v59 + 16);
        if (!v60)
          goto LABEL_105;
        v61 = (_QWORD *)(v59 + 56);
        while ((ValueMetadata *)*(v61 - 3) != &type metadata for EmitterRuntime)
        {
          v61 += 5;
          if (!--v60)
            goto LABEL_105;
        }
        sub_1B1E53BF4(*(_QWORD *)(v58 + 128) + *v61 + 656 * v57, v46 == 0, 0, a1, 0xD000000000000011, 0x80000001B2333990, 0);
        swift_release();
        if (++v17 == v127)
          goto LABEL_58;
      }
      v34 = *(_QWORD *)(v5 + 176);
      swift_retain();
      swift_retain();
      os_unfair_recursive_lock_lock_with_options();
      v35 = sub_1B1F21F0C((uint64_t)&type metadata for WorldFromScene);
      if ((v37 & 1) != 0)
      {
        v42 = (float32x4_t *)(*(_QWORD *)(v34 + 16) + v35);
        v43 = 32 * v36;
        os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v34 + 32) + 32 * v36 + 24));
        os_unfair_recursive_lock_unlock();
        v122 = v42[1];
        v124 = *v42;
        v118 = v42[3];
        v120 = v42[2];
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(v34 + 32) + v43 + 24));
        swift_release();
        swift_release();
        v39 = v122;
        v38 = v124;
        v40 = v118;
        v41 = v120;
      }
      else
      {
        os_unfair_recursive_lock_unlock();
        swift_release();
LABEL_41:
        swift_release();
        v38 = (float32x4_t)xmmword_1B2244DB0;
        v39 = (float32x4_t)xmmword_1B2244DD0;
        v41 = (float32x4_t)xmmword_1B2244D90;
        v40 = (float32x4_t)xmmword_1B2244E20;
      }
      v19 = v130;
      goto LABEL_44;
    }
LABEL_58:
    v160[0] = v157;
    v160[1] = v158;
    v161 = v159;
    sub_1B1F05D48(v115, (unsigned __int16 **)v160, (uint64_t)v166);
    sub_1B1F03804((char *)v117);
    v8 = v108;
    ecs_stack_allocator_pop_snapshot(v108);
    if ((v114 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v117 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v117 + 376));
    }
    swift_release();
    v9 = v113 + 1;
    if (v113 + 1 == v112)
      goto LABEL_103;
  }
  if ((_DWORD)v11 == (_DWORD)v125)
    goto LABEL_58;
  v62 = SLODWORD(v164[0]);
  v134 = DWORD1(v164[0]);
  v64 = SLODWORD(v164[0]) == -1 && DWORD1(v164[0]) == 0;
  v128 = v64;
  while (1)
  {
    v131 = __invert_f4(*(simd_float4x4 *)(v129 + (v11 << 6)));
    swift_retain();
    if (v128)
      break;
    if ((v62 & 0x80000000) != 0)
      break;
    v65 = (uint64_t *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (*(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v62)
      break;
    v66 = *v65;
    v67 = *v65 + 12 * (int)v62;
    v68 = *(__int16 *)(v67 + 4);
    if (v134 != -1 && *(_DWORD *)(v67 + 8) != v134)
      break;
    v69 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v66 + 12 * (int)v62) + 32);
    v70 = *(_QWORD *)(v69 + 48);
    v71 = *(_QWORD *)(v70 + 16);
    if (!v71)
      break;
    v72 = v11 + 1;
    v73 = (char *)(v136 + 2 * v11);
    v74 = (_QWORD *)(v70 + 56);
    while ((ValueMetadata *)*(v74 - 3) != &type metadata for EmitterDescription)
    {
      v74 += 5;
      if (!--v71)
        goto LABEL_105;
    }
    v75 = *(_BYTE *)(*(_QWORD *)(v69 + 128) + *v74 + 88 * v68 + 56);
    swift_release();
    if ((v75 & 1) != 0)
    {
      v76 = (uint64_t *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v77 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
      swift_retain();
      if (v77 > v62)
      {
        v78 = *v76;
        if (v134 == -1 || *(_DWORD *)(v78 + 12 * (int)v62 + 8) == v134)
        {
          sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v78 + 12 * (int)v62) + 32), *(_DWORD *)(v78 + 12 * (int)v62), *(_WORD *)(v78 + 12 * (int)v62 + 4), 64, v5, (uint64_t)v145);
          swift_release();
          sub_1B1A18378((uint64_t)v145, (uint64_t)v148, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
          if ((v149 & 1) == 0)
          {
            v83 = v148[0];
            v84 = v148[1];
            v86 = v148[2];
            v85 = v148[3];
            goto LABEL_88;
          }
          goto LABEL_86;
        }
      }
    }
    else
    {
      v79 = *(_QWORD *)(v5 + 176);
      swift_retain();
      swift_retain();
      os_unfair_recursive_lock_lock_with_options();
      v80 = sub_1B1F21F0C((uint64_t)&type metadata for WorldFromScene);
      if ((v82 & 1) != 0)
      {
        v87 = (float32x4_t *)(*(_QWORD *)(v79 + 16) + v80);
        v88 = 32 * v81;
        os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v79 + 32) + 32 * v81 + 24));
        os_unfair_recursive_lock_unlock();
        v121 = v87[1];
        v123 = *v87;
        v119 = v87[2];
        v116 = v87[3];
        v89 = *(_QWORD *)(v79 + 32) + v88;
        v73 = (char *)(v136 + 2 * v11);
        v72 = v11 + 1;
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v89 + 24));
        swift_release();
        swift_release();
        v84 = v121;
        v83 = v123;
        v86 = v119;
        v85 = v116;
        goto LABEL_88;
      }
      os_unfair_recursive_lock_unlock();
      swift_release();
    }
    swift_release();
LABEL_86:
    v83 = (float32x4_t)xmmword_1B2244DB0;
    v84 = (float32x4_t)xmmword_1B2244DD0;
    v86 = (float32x4_t)xmmword_1B2244D90;
    v85 = (float32x4_t)xmmword_1B2244E20;
LABEL_88:
    v90 = *v73;
    v91 = *(_BYTE *)(v136 + 2 * v11 + 1);
    v137 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v131.columns[0], v83.f32[0]), (float32x4_t)v131.columns[1], *(float32x2_t *)v83.f32, 1), (float32x4_t)v131.columns[2], v83, 2), (float32x4_t)v131.columns[3], v83, 3);
    v138 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v131.columns[0], v84.f32[0]), (float32x4_t)v131.columns[1], *(float32x2_t *)v84.f32, 1), (float32x4_t)v131.columns[2], v84, 2), (float32x4_t)v131.columns[3], v84, 3);
    v139 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v131.columns[0], v86.f32[0]), (float32x4_t)v131.columns[1], *(float32x2_t *)v86.f32, 1), (float32x4_t)v131.columns[2], v86, 2), (float32x4_t)v131.columns[3], v86, 3);
    v140 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v131.columns[0], v85.f32[0]), (float32x4_t)v131.columns[1], *(float32x2_t *)v85.f32, 1), (float32x4_t)v131.columns[2], v85, 2), (float32x4_t)v131.columns[3], v85, 3);
    v141 = v90;
    v142 = v91;
    v92 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v93 = swift_getObjectType();
      type metadata accessor for emitter_killshape_uniforms(0);
      sub_1B1F40E1C((uint64_t)&v137, 1, v93, v94, v95, v96, v97, v98);
    }
    v99 = (_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v100 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
    swift_retain();
    if (v100 <= v62)
      break;
    v101 = *v99 + 12 * (int)v62;
    v102 = *(__int16 *)(v101 + 4);
    if (v134 != -1 && *(_DWORD *)(v101 + 8) != v134)
      break;
    v103 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(*v99 + 12 * (int)v62) + 32);
    v104 = *(_QWORD *)(v103 + 48);
    v105 = *(_QWORD *)(v104 + 16);
    if (!v105)
      break;
    v106 = (_QWORD *)(v104 + 56);
    while ((ValueMetadata *)*(v106 - 3) != &type metadata for EmitterRuntime)
    {
      v106 += 5;
      if (!--v105)
        goto LABEL_105;
    }
    sub_1B1E53BF4(*(_QWORD *)(v103 + 128) + *v106 + 656 * v102, v92 == 0, 0, a1, 0xD000000000000011, 0x80000001B2333990, 0);
    swift_release();
    v11 = v72;
    if (v72 == v125)
      goto LABEL_58;
  }
LABEL_105:
  v137.i64[0] = 0;
  v137.i64[1] = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = (uint64_t *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BE9FDC(int *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for QueryScope(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for KillShape(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KillShape(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BEA108 + 4 * byte_1B22821E5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1B1BEA13C + 4 * byte_1B22821E0[v4]))();
}

uint64_t sub_1B1BEA13C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B1BEA144(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1B1BEA14CLL);
  return result;
}

uint64_t sub_1B1BEA158(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1B1BEA160);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_1B1BEA164(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B1BEA16C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KillShape()
{
  return &type metadata for KillShape;
}

uint64_t storeEnumTagSinglePayload for KillShape.Shape(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1BEA1D4 + 4 * byte_1B22821EF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1BEA208 + 4 * byte_1B22821EA[v4]))();
}

uint64_t sub_1B1BEA208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BEA210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BEA218);
  return result;
}

uint64_t sub_1B1BEA224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BEA22CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1BEA230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BEA238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KillShape.Shape()
{
  return &type metadata for KillShape.Shape;
}

ValueMetadata *type metadata accessor for ParticleKillable()
{
  return &type metadata for ParticleKillable;
}

unint64_t sub_1B1BEA268()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C270;
  if (!qword_1EEF5C270)
  {
    sub_1B1A02758(255, &qword_1EEF5C278, (uint64_t)&type metadata for KillShape.Shape, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C270);
  }
  return result;
}

unint64_t sub_1B1BEA2CC()
{
  unint64_t result;

  result = qword_1EEF5C280;
  if (!qword_1EEF5C280)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228241C, &type metadata for KillShape.Shape);
    atomic_store(result, (unint64_t *)&qword_1EEF5C280);
  }
  return result;
}

unint64_t sub_1B1BEA310()
{
  unint64_t result;

  result = qword_1EEF5C290;
  if (!qword_1EEF5C290)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282650, &type metadata for KillShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C290);
  }
  return result;
}

unint64_t sub_1B1BEA354()
{
  unint64_t result;

  result = qword_1EEF5C2A8;
  if (!qword_1EEF5C2A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282600, &type metadata for ParticleKillable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleKillable.CodingKeys()
{
  return &type metadata for ParticleKillable.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KillShape.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BEA3F4 + 4 * byte_1B22821F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BEA428 + 4 * byte_1B22821F4[v4]))();
}

uint64_t sub_1B1BEA428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BEA430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BEA438);
  return result;
}

uint64_t sub_1B1BEA444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BEA44CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BEA450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BEA458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KillShape.CodingKeys()
{
  return &type metadata for KillShape.CodingKeys;
}

unint64_t sub_1B1BEA478()
{
  unint64_t result;

  result = qword_1EEF5C2B0;
  if (!qword_1EEF5C2B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282588, &type metadata for KillShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2B0);
  }
  return result;
}

unint64_t sub_1B1BEA4C0()
{
  unint64_t result;

  result = qword_1EEF5C2B8;
  if (!qword_1EEF5C2B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22825B0, &type metadata for ParticleKillable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2B8);
  }
  return result;
}

unint64_t sub_1B1BEA508()
{
  unint64_t result;

  result = qword_1EEF5C2C0;
  if (!qword_1EEF5C2C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22825D8, &type metadata for ParticleKillable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2C0);
  }
  return result;
}

unint64_t sub_1B1BEA550()
{
  unint64_t result;

  result = qword_1EEF5C2C8;
  if (!qword_1EEF5C2C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22824F8, &type metadata for KillShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2C8);
  }
  return result;
}

unint64_t sub_1B1BEA598()
{
  unint64_t result;

  result = qword_1EEF5C2D0;
  if (!qword_1EEF5C2D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282520, &type metadata for KillShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2D0);
  }
  return result;
}

int8x16_t *sub_1B1BEA5DC(uint64_t a1, int8x16_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  unint64_t v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a3;
  v5 = a3 + 63;
  v6 = (a3 + 63) >> 6;
  if (a3 + 63 <= 127)
    v7 = 8;
  else
    v7 = 8 * v6;
  if (a3 + 63 <= 127)
    v8 = 1;
  else
    v8 = (a3 + 63) >> 6;
  v9 = (int8x16_t *)ecs_stack_allocator_allocate(a1, v7, 8);
  bzero(v9, v7);
  v10 = 0;
  if (v8 < 4)
    goto LABEL_12;
  if ((unint64_t)((char *)v9 - (char *)a2) < 0x20)
    goto LABEL_12;
  v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  v11 = a2 + 1;
  v12 = v9 + 1;
  v13 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v14 = vmvnq_s8(*v11);
    v12[-1] = vmvnq_s8(v11[-1]);
    *v12 = v14;
    v11 += 2;
    v12 += 2;
    v13 -= 4;
  }
  while (v13);
  if (v8 != v10)
  {
LABEL_12:
    v15 = v8 - v10;
    v16 = v10;
    v17 = &v9->i64[v10];
    v18 = &a2->i64[v16];
    do
    {
      v19 = *v18++;
      *v17++ = ~v19;
      --v15;
    }
    while (v15);
  }
  v20 = v6 - 1;
  if (v5 <= 127)
    v20 = 0;
  v9->i64[v20] &= ~(-1 << v3);
  return v9;
}

unint64_t *sub_1B1BEA6E8(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int8x16_t *v10;
  int64x2_t v11;
  unint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t *result;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t *i;
  unint64_t v23;
  unint64_t v24;

  v5 = a2 + 63;
  v6 = (a2 + 63) >> 6;
  if (a2 + 63 <= 127)
    v7 = 1;
  else
    v7 = (a2 + 63) >> 6;
  if (v7 < 4)
  {
    v8 = 0;
    v9 = 0;
LABEL_9:
    v14 = v7 - v9;
    v15 = (int8x8_t *)a1 + v9;
    do
    {
      v16 = *v15++;
      v17 = (uint8x8_t)vcnt_s8(v16);
      v17.i16[0] = vaddlv_u8(v17);
      v8 += v17.u32[0];
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = a1 + 1;
  v11 = 0uLL;
  v12 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  v13 = 0uLL;
  do
  {
    v11 = (int64x2_t)vpadalq_u32((uint64x2_t)v11, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v10[-1]))));
    v13 = (int64x2_t)vpadalq_u32((uint64x2_t)v13, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v10))));
    v10 += 2;
    v12 -= 4;
  }
  while (v12);
  v8 = vaddvq_s64(vaddq_s64(v13, v11));
  if (v7 != v9)
    goto LABEL_9;
LABEL_11:
  result = ecs_stack_allocator_allocate(a3, 8 * v8, 8);
  if (a2 >= 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    for (i = result; ; ++i)
    {
      v23 = (unint64_t)a1->i64[v20] >> v21;
      if (!v23)
      {
        v19 = v20 << 6;
        do
        {
          if (v5 < 128)
          {
            if (v20 < 0x7FFFFFFFFFFFFFFFLL)
              return result;
          }
          else if ((uint64_t)(v20 + 1) >= v6)
          {
            return result;
          }
          v23 = a1->u64[v20 + 1];
          v19 += 64;
          ++v20;
        }
        while (!v23);
      }
      v24 = __clz(__rbit64(v23)) + v19;
      *i = v24;
      v19 = v24 + 1;
      if ((uint64_t)(v24 + 1) >= a2)
        break;
      v20 = v19 >> 6;
      v21 = v19 & 0x3F;
    }
  }
  return result;
}

uint64_t sub_1B1BEA85C()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  double v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned int *v37;

  v1 = v0[10];
  v2 = sub_1B1C63D98(0, v1 & ~(v1 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  if (v1 >= 1)
  {
    v4 = (_QWORD *)thread_worker_index(v3);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues) + 8 * *v4 + 8)
                   + 32);
    ecs_stack_allocator_push_snapshot(v6);
    v7 = ecs_stack_allocator_allocate(v6, 8 * v1, 4);
    v8 = v0[7];
    if (v8)
    {
      v34 = v6;
      v35 = v2;
      v9 = 0;
      v10 = (unsigned int *)v0[5];
      v33 = v7;
      v36 = (char *)v7 + 4;
      v37 = &v10[12 * v8];
      do
      {
        v11 = (uint64_t *)*((_QWORD *)v10 + 2);
        v12 = *((_QWORD *)v10 + 5);
        if (v11)
        {
          v13 = *((_QWORD *)v10 + 4);
          if (v13)
          {
            swift_retain();
            v14 = &v36[8 * v9];
            while (1)
            {
              v16 = *v11++;
              v15 = v16;
              v17 = swift_retain();
              if ((*(_BYTE *)(v12 + 184) & 1) != 0)
                break;
              v18 = *(_DWORD *)(*(_QWORD *)(v12 + 168) + 4 * v15);
              v19 = *(_DWORD *)(*(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v18 + 8);
              swift_release();
              *((_DWORD *)v14 - 1) = v18;
              *(_DWORD *)v14 = v19;
              ++v9;
              v14 += 8;
              if (!--v13)
                goto LABEL_4;
            }
LABEL_26:
            result = sub_1B2229688();
            __break(1u);
            return result;
          }
        }
        else
        {
          v21 = *v10;
          v20 = v10[1];
          if ((_DWORD)v21 != (_DWORD)v20)
          {
            swift_retain();
            v22 = &v36[8 * v9];
            while (1)
            {
              v23 = swift_retain();
              if ((*(_BYTE *)(v12 + 184) & 1) != 0)
                goto LABEL_26;
              v24 = *(_DWORD *)(*(_QWORD *)(v12 + 168) + 4 * v21);
              v25 = v21 + 1;
              v26 = *(_DWORD *)(*(_QWORD *)(v23 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v24 + 8);
              swift_release();
              *((_DWORD *)v22 - 1) = v24;
              *(_DWORD *)v22 = v26;
              ++v9;
              v22 += 8;
              v21 = v25;
              if (v20 == v25)
              {
LABEL_4:
                swift_release();
                break;
              }
            }
          }
        }
        v10 += 12;
      }
      while (v10 != v37);
      if (v9)
      {
        v2 = v35;
        v27 = *((_QWORD *)v35 + 2);
        v28 = 8 * v9;
        v29 = v33;
        v6 = v34;
        do
        {
          v30 = *v29;
          v31 = *((_QWORD *)v2 + 3);
          if (v27 >= v31 >> 1)
            v2 = sub_1B1C63D98(v31 > 1, v27 + 1, 1, v2);
          ++v29;
          *((_QWORD *)v2 + 2) = v27 + 1;
          *(_QWORD *)&v2[8 * v27++ + 32] = v30;
          v28 -= 8;
        }
        while (v28);
      }
      else
      {
        v6 = v34;
        v2 = v35;
      }
    }
    ecs_stack_allocator_pop_snapshot(v6);
  }
  return (uint64_t)v2;
}

uint64_t sub_1B1BEAAFC(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  _OWORD v46[3];
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  char v51;

  v45 = result;
  if ((uint64_t)v1[10] >= 1)
  {
    v2 = v1[7];
    if (v2)
    {
      v44 = v1;
      v3 = 48 * v2;
      for (i = (uint64_t *)(v1[5] + 40); ; i += 6)
      {
        v5 = *i;
        if ((v45 & 1) == 0)
          break;
        v13 = v3;
        v14 = v1[9];
        v50 = 0;
        memset(v49, 0, sizeof(v49));
        v51 = 5;
        swift_retain_n();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v46[0] = *(_QWORD *)(v14 + 96);
        v16 = *(_QWORD *)&v46[0];
        *(_QWORD *)(v14 + 96) = 0x8000000000000000;
        v17 = sub_1B1DC3BAC(v5);
        v19 = v18;
        v20 = *(_QWORD *)(v16 + 16) + ((v18 & 1) == 0);
        if (*(_QWORD *)(v16 + 24) >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1B1EA7EC0();
            v16 = *(_QWORD *)&v46[0];
          }
        }
        else
        {
          sub_1B1E909F0(v20, isUniquelyReferenced_nonNull_native);
          type metadata accessor for ComponentsDataChunk();
          v16 = *(_QWORD *)&v46[0];
          v21 = sub_1B1DC3BAC(v5);
          if ((v19 & 1) != (v22 & 1))
          {
            result = sub_1B2229FC4();
            __break(1u);
            return result;
          }
          v17 = v21;
        }
        *(_QWORD *)(v14 + 96) = v16;
        swift_bridgeObjectRelease();
        v27 = *(_QWORD **)(v14 + 96);
        swift_bridgeObjectRetain();
        if ((v19 & 1) == 0)
        {
          sub_1B1B1B5C4(v46);
          v28 = *(_QWORD *)&v46[0];
          v27[(v17 >> 6) + 8] |= 1 << v17;
          *(_QWORD *)(v27[6] + 8 * v17) = v5;
          *(_QWORD *)(v27[7] + 8 * v17) = v28;
          ++v27[2];
          swift_retain();
        }
        v29 = v27[7];
        swift_bridgeObjectRelease();
        sub_1B1BE90FC((uint64_t)v49, (uint64_t)v46);
        v48 = 0;
        v47 = 0uLL;
        v30 = *(_QWORD **)(v29 + 8 * v17);
        v31 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v29 + 8 * v17) = v30;
        if ((v31 & 1) == 0)
        {
          v30 = sub_1B1C631A0(0, v30[2] + 1, 1, v30);
          *(_QWORD *)(v29 + 8 * v17) = v30;
        }
        v3 = v13;
        v33 = v30[2];
        v32 = v30[3];
        if (v33 >= v32 >> 1)
        {
          v30 = sub_1B1C631A0(v32 > 1, v33 + 1, 1, v30);
          *(_QWORD *)(v29 + 8 * v17) = v30;
        }
        v1 = v44;
        v30[2] = v33 + 1;
        v34 = &v30[9 * v33];
        *((_OWORD *)v34 + 2) = v46[0];
        v35 = v46[1];
        v36 = v46[2];
        v37 = v47;
        v34[12] = v48;
        *((_OWORD *)v34 + 4) = v36;
        *((_OWORD *)v34 + 5) = v37;
        *((_OWORD *)v34 + 3) = v35;
        swift_release();
        sub_1B1B68F14((uint64_t)v49);
LABEL_5:
        result = swift_release();
        v3 -= 48;
        if (!v3)
          return result;
      }
      v6 = *(os_unfair_lock_s **)(v5 + 376);
      swift_retain();
      os_unfair_lock_lock(v6);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 344));
      v8 = *(_QWORD *)(v5 + 232);
      v7 = *(_QWORD *)(v5 + 240);
      v9 = *(_QWORD *)(v5 + 40);
      if (*(_BYTE *)(v9 + 200) == 1)
      {
        *(_BYTE *)(*(_QWORD *)(v5 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
        v9 = *(_QWORD *)(v5 + 40);
      }
      sub_1B1FE2814(v9, v5, v8, v7);
      v10 = *(_QWORD *)(v5 + 232);
      if (v10 < v8 || v10 >= v7)
      {
        sub_1B1FD6E48(*(_QWORD *)(v5 + 40), v8, v7, 1, v5);
        v12 = v7 - v8;
LABEL_38:
        v43 = *(_QWORD *)(v5 + 16);
        if (*(_QWORD *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
          vfx_counters.add(_:_:)(*(_DWORD *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 44), v12);
        if (*(_QWORD *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
          vfx_counters.add(_:_:)(*(_DWORD *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 48), -v12);
        ++*(_DWORD *)(v5 + 116);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 376));
        goto LABEL_5;
      }
      v12 = v7 - v8;
      v23 = v10 + v7 - v8;
      v24 = *(_QWORD *)(v5 + 240) - v10;
      v25 = v23;
      if (v12 < 1)
      {
        if (v24 <= 0)
        {
          v26 = v12 < v24;
LABEL_31:
          if (v26)
            v25 = *(_QWORD *)(v5 + 240);
          else
            v25 = v23;
        }
      }
      else if ((v24 & 0x8000000000000000) == 0)
      {
        v26 = v24 < (unint64_t)v12;
        goto LABEL_31;
      }
      *(_QWORD *)(v5 + 232) = v25;
      v38 = *(_QWORD *)(v5 + 248);
      if (v25 > v38)
        v38 = v25;
      *(_QWORD *)(v5 + 248) = v38;
      v39 = *(_QWORD *)(v5 + 192);
      if (v39)
      {
        v40 = v3;
        v41 = *(_QWORD *)(v5 + 208);
        sub_1B19FA6EC(v10, v23, v39);
        v42 = v41;
        v3 = v40;
        sub_1B19FA6EC(v10, v23, v42);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t sub_1B1BEAF4C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = v0[4];
  v3 = (_QWORD *)v0[2];
  v2 = v0[3];
  if (v0[5] >= 1)
    swift_arrayDestroy();
  ecs_stack_allocator_deallocate(v3, v2, 48 * v1);
  ecs_stack_allocator_pop_snapshot(v0[2]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QueryResult.Deallocator()
{
  return objc_opt_self();
}

uint64_t destroy for MetalFunctionReflection.Arg()
{
  return swift_release();
}

uint64_t initializeWithCopy for QueryResult.ChunkResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QueryResult.ChunkResult(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for QueryResult.ChunkResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetalFunctionReflection.Arg(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalFunctionReflection.Arg(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryResult.ChunkResult()
{
  return &type metadata for QueryResult.ChunkResult;
}

uint64_t destroy for QueryResult()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for QueryResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QueryResult(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for Scheduler.Job(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for QueryResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryResult()
{
  return &type metadata for QueryResult;
}

void sub_1B1BEB43C(char a1, uint64_t a2)
{
  uint64_t v2;

  if ((a1 & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 40);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 344));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 376));
  }
}

char *sub_1B1BEB470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v4 = *(_QWORD **)(a1 + 72);
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = *(_QWORD *)(a1 + 32);
  sub_1B1F05D48(v4, (unsigned __int16 **)v7, a2);
  return sub_1B1F03804(*(char **)(a3 + 40));
}

uint64_t sub_1B1BEB4CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((uint64_t)v0[10] >= 1)
  {
    v1 = v0[7];
    if (v1)
    {
      v2 = 48 * v1;
      v3 = v0[5] + 40;
      do
      {
        v5 = *(_QWORD *)v3;
        v6 = *(os_unfair_lock_s **)(*(_QWORD *)v3 + 376);
        swift_retain();
        os_unfair_lock_lock(v6);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 344));
        v7 = *(_QWORD *)(v5 + 232);
        v8 = *(_QWORD *)(v5 + 240);
        if (v8 != v7)
        {
          v9 = *(_QWORD *)(v5 + 192);
          if (v9)
          {
            v10 = *(_QWORD *)(v5 + 208);
            sub_1B19FA4BC(*(_QWORD *)(v5 + 232), *(_QWORD *)(v5 + 240), v9);
            sub_1B19FA6EC(v7, v8, v10);
          }
          sub_1B1FE2814(*(_QWORD *)(v5 + 40), v5, v7, v8);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 376));
        result = swift_release();
        v3 += 48;
        v2 -= 48;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t sub_1B1BEB5D8(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char v27;
  char **v28;
  char *v29;
  char v30;
  _QWORD *v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  char **v43;
  char *v44;
  char v45;
  _QWORD *v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char **v62;
  uint64_t v63;
  int v64;
  char v65;

  v65 = result;
  if ((uint64_t)v1[10] >= 1)
  {
    v2 = v1[7];
    if (v2)
    {
      v3 = v1[5];
      v4 = v3 + 48 * v2;
      v5 = result & 1;
      v63 = v4;
      v64 = v5;
      while (1)
      {
        v6 = *(_QWORD *)(v3 + 40);
        if (*(unsigned __int8 *)(v6 + 120) != v5)
          break;
LABEL_5:
        v3 += 48;
        if (v3 == v4)
          return result;
      }
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_DWORD *)(v6 + 188);
      v9 = *(int *)(v6 + 24);
      v10 = *(os_unfair_lock_s **)(v7 + 128);
      swift_retain();
      swift_retain();
      os_unfair_lock_lock(v10);
      v11 = *(_QWORD **)(v7 + 96);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v7 + 96) = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v11 = sub_1B1FFECDC(v11);
        *(_QWORD *)(v7 + 96) = v11;
      }
      v13 = v11 + 4;
      v14 = (uint64_t)&v11[5 * (int)v9 + 4];
      if ((v65 & 1) != 0)
      {
        v15 = &v13[5 * (int)v9];
        v18 = v15[1];
        v16 = v15 + 1;
        v17 = v18;
        v19 = v18 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          v20 = *(_QWORD *)v14;
          if (v19 != 1 && *(_DWORD *)(*(_QWORD *)v14 + 32) != v8)
          {
            if (*(_DWORD *)(v20 + 36) == v8)
            {
              v22 = 1;
              goto LABEL_17;
            }
            v52 = 0;
            v53 = v19 - 2;
            v54 = v20 + 40;
            while (v53 != v52)
            {
              v55 = *(_DWORD *)(v54 + 4 * v52++);
              if (v55 == v8)
              {
                v22 = v52 + 1;
                goto LABEL_17;
              }
            }
          }
        }
        v22 = 0;
LABEL_17:
        v23 = v17 - 1;
        *v16 = v17 - 1;
        if (v22 != v17 - 1)
        {
          v24 = *(_QWORD *)v14;
          v25 = *(_QWORD *)v14 + 32;
          v59 = *(_DWORD *)(v25 + 4 * v22);
          v61 = *(_DWORD *)(v25 + 4 * v23);
          v26 = (char **)v14;
          v27 = swift_isUniquelyReferenced_nonNull_native();
          *v26 = (char *)v24;
          if ((v27 & 1) != 0)
          {
            v28 = v26;
          }
          else
          {
            v56 = sub_1B1FFED2C(v24);
            v28 = v26;
            v24 = (uint64_t)v56;
            *v26 = v56;
          }
          *(_DWORD *)(v24 + 4 * v22 + 32) = v61;
          v29 = *v28;
          v30 = swift_isUniquelyReferenced_nonNull_native();
          *v26 = v29;
          if ((v30 & 1) == 0)
          {
            v29 = sub_1B1FFED2C((uint64_t)v29);
            *v26 = v29;
          }
          v4 = v63;
          *(_DWORD *)&v29[4 * v23 + 32] = v59;
        }
        v31 = &v13[5 * (int)v9];
        v33 = *((_DWORD *)v31 + 9);
        v32 = (_DWORD *)v31 + 9;
        if (v33 == v8)
        {
          *v32 = -1;
          LODWORD(v13[5 * (int)v9 + 4]) = v8;
        }
LABEL_36:
        v5 = v64;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * v9 + 32) + 200) & 1) != 0)
          *(_BYTE *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 128));
        swift_release();
        *(_BYTE *)(v6 + 120) = v64;
        result = swift_release();
        goto LABEL_5;
      }
      v34 = *(_QWORD *)v14;
      v35 = &v13[5 * (int)v9];
      v38 = v35[1];
      v36 = v35 + 1;
      v37 = v38;
      v39 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      if (v38 != v39)
      {
        v41 = *(_DWORD *)(v34 + 32 + 4 * v37);
        if (v41 == v8)
          goto LABEL_34;
        v40 = v37 + 1;
        if (v37 + 1 != v39)
        {
          if (*(_DWORD *)(v34 + 32 + 4 * v40) == v8)
            goto LABEL_28;
          v49 = v39 - 2;
          v50 = v37;
          while (v49 != v50)
          {
            v51 = *(_DWORD *)(v34 + 40 + 4 * v50++);
            if (v51 == v8)
            {
              v40 = v50 + 1;
              if (v50 + 1 == v37)
                goto LABEL_34;
              goto LABEL_27;
            }
          }
        }
      }
      v40 = 0;
      if (v37)
      {
LABEL_27:
        v41 = *(_DWORD *)(v34 + 4 * v37 + 32);
LABEL_28:
        v58 = *(_DWORD *)(v34 + 4 * v40 + 32);
        v60 = v41;
        v62 = (char **)v14;
        v42 = swift_isUniquelyReferenced_nonNull_native();
        v43 = v62;
        *v62 = (char *)v34;
        if ((v42 & 1) == 0)
        {
          v57 = sub_1B1FFED2C(v34);
          v43 = v62;
          v34 = (uint64_t)v57;
          *v62 = v57;
        }
        *(_DWORD *)(v34 + 4 * v40 + 32) = v60;
        v44 = *v43;
        v45 = swift_isUniquelyReferenced_nonNull_native();
        *v62 = v44;
        if ((v45 & 1) == 0)
        {
          v44 = sub_1B1FFED2C((uint64_t)v44);
          *v62 = v44;
        }
        *(_DWORD *)&v44[4 * v37 + 32] = v58;
      }
LABEL_34:
      *v36 = v37 + 1;
      v46 = &v13[5 * (int)v9];
      v48 = *((_DWORD *)v46 + 8);
      v47 = v46 + 4;
      v4 = v63;
      if (v48 == v8)
      {
        HIDWORD(v13[5 * (int)v9 + 4]) = v8;
        *v47 = -1;
      }
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t sub_1B1BEB988(unsigned __int16 **a1, uint64_t a2, char **a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _OWORD *f32;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  _QWORD *v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  _QWORD *v66;
  size_t v67;
  char *v68;
  char *v69;
  char *v70;
  unsigned __int16 *v72;
  float32x4_t *v73;
  uint64_t v74;
  _OWORD *v75;
  unsigned __int16 *v82;
  uint64_t v83;
  float32x4_t *v84;
  unsigned __int16 *v85;
  int v86;
  unsigned __int16 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 *v95;

  v8 = a1[9];
  v9 = *((_QWORD *)v8 + 4);
  v10 = a1[5];
  v11 = a1[7];
  if (v11 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v9);
    v17 = (uint64_t)a1[10];
    v84 = (float32x4_t *)ecs_stack_allocator_allocate(v9, 32 * v17, 16);
    if (v17 <= 0 || !v11)
    {
LABEL_67:
      sub_1B20E02E8(v84, a2, a3, a4, a5, a6, a7);
      return ecs_stack_allocator_pop_snapshot(v9);
    }
    v18 = 0;
    v19 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v95 = *a1;
    v94 = (uint64_t)*a1 + 41;
    v85 = v11;
    v86 = v19;
    v82 = v10;
    v83 = v9;
LABEL_8:
    v20 = (unsigned int *)&v10[24 * (_QWORD)v18];
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    v24 = *((_QWORD *)v20 + 5);
    if (v19)
    {
      v25 = *(os_unfair_lock_s **)(v24 + 376);
      swift_retain();
      os_unfair_lock_lock(v25);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    v91 = *((_QWORD *)v8 + 7);
    v92 = *((_QWORD *)v8 + 6);
    v89 = *((_QWORD *)v8 + 9);
    v90 = *((_QWORD *)v8 + 8);
    v88 = *((_QWORD *)v8 + 10);
    v26 = *((_QWORD *)v8 + 4);
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
    v93 = v24;
    swift_retain();
    *((_QWORD *)v8 + 6) = ecs_stack_allocator_allocate(v26, 48 * v27, 8);
    *((_QWORD *)v8 + 7) = v27;
    *((_QWORD *)v8 + 9) = 0;
    *((_QWORD *)v8 + 10) = 0;
    *((_QWORD *)v8 + 8) = 0;
    swift_release();
    v28 = v22 - v21;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, 0, 0, 0, (uint64_t)v8);
    v87 = v18;
    if ((v30 & 1) != 0)
    {
      if ((_DWORD)v22 != (_DWORD)v21)
      {
        f32 = (_OWORD *)v84[2 * v23 + 1].f32;
        do
        {
          *(f32 - 1) = xmmword_1B2244E20;
          *f32 = xmmword_1B227E550;
          f32 += 2;
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      memcpy(&v84[2 * v23], (const void *)(v29 + 32 * v21), 32 * v28);
    }
    swift_release();
    v32 = *((_QWORD *)v8 + 6);
    v33 = *((_QWORD *)v8 + 8);
    if (!v33)
    {
      v59 = *((_QWORD *)v8 + 7);
      v60 = (_QWORD *)*((_QWORD *)v8 + 4);
      v61 = v85;
      v62 = v87;
      goto LABEL_53;
    }
    v34 = 0;
    while (1)
    {
      v36 = (uint64_t *)(v32 + 48 * v34);
      v37 = *v36;
      v38 = (void (*)(uint64_t))v36[4];
      v39 = *((_QWORD *)v8 + 9);
      if (v39)
        v40 = v37 == v39;
      else
        v40 = 0;
      if (!v40 && v95[11])
      {
        v41 = v95[9];
        v42 = (_QWORD *)(v94 + v95[8]);
        v43 = v36[2];
        v44 = v42;
        v45 = v41 >> 4;
        v46 = v94;
        if (v41 < 0x10)
          goto LABEL_33;
        while (*v44 != v37)
        {
          ++v46;
          v44 += 2;
          if (!--v45)
            goto LABEL_33;
        }
        v47 = *(unsigned __int8 *)(v46 + v95[10]);
        v48 = v47 > 5;
        v49 = (1 << v47) & 0x23;
        if (!v48 && v49 != 0)
        {
LABEL_33:
          if (swift_conformsToProtocol2())
            v51 = v43;
          else
            v51 = 0;
          if (!v51)
            goto LABEL_19;
          v52 = v42;
          v53 = v41 >> 4;
          v54 = v94;
          if (v41 >= 0x10)
          {
            while (*v52 != v51)
            {
              ++v54;
              v52 += 2;
              if (!--v53)
                goto LABEL_45;
            }
            v55 = *(unsigned __int8 *)(v54 + v95[10]);
            v48 = v55 > 5;
            v56 = (1 << v55) & 0x23;
            if (v48 || v56 == 0)
              goto LABEL_18;
LABEL_45:
            v58 = 16 * (v41 >> 4);
            while (*v42 != v51)
            {
              v42 += 2;
              v58 -= 16;
              if (!v58)
                goto LABEL_18;
            }
            goto LABEL_19;
          }
        }
      }
LABEL_18:
      v35 = swift_retain();
      v38(v35);
      swift_release();
LABEL_19:
      if (++v34 == v33)
      {
        v59 = *((_QWORD *)v8 + 7);
        v32 = *((_QWORD *)v8 + 6);
        v60 = (_QWORD *)*((_QWORD *)v8 + 4);
        v61 = v85;
        v62 = v87;
        if (*((uint64_t *)v8 + 8) >= 1)
          swift_arrayDestroy();
        v10 = v82;
        v9 = v83;
LABEL_53:
        ecs_stack_allocator_deallocate(v60, v32, 48 * v59);
        *((_QWORD *)v8 + 6) = v92;
        *((_QWORD *)v8 + 7) = v91;
        *((_QWORD *)v8 + 8) = v90;
        *((_QWORD *)v8 + 9) = v89;
        *((_QWORD *)v8 + 10) = v88;
        if (*(_QWORD *)(*((_QWORD *)v8 + 13) + 16))
        {
          v63 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v63, v93);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v65 = *((_QWORD *)v8 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v65 + 16));
          }
          else
          {
            v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v65 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v66 = (_QWORD *)swift_allocObject();
              v67 = j__malloc_size(v66);
              v66[2] = 0;
              v66[3] = 2 * ((uint64_t)(v67 - 32) / 72);
            }
            *((_QWORD *)v8 + 13) = v66;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v8 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v68 = *(char **)(v93 + 232);
            v69 = *(char **)(v93 + 256);
            if (v68 == v69)
            {
              v70 = *(char **)(v93 + 240);
            }
            else
            {
              sub_1B1A1059C(v69, v68);
              v69 = *(char **)(v93 + 232);
              v70 = *(char **)(v93 + 240);
              if (v70 == v69)
              {
                v70 = 0;
                v69 = 0;
                *(_QWORD *)(v93 + 232) = 0;
                *(_QWORD *)(v93 + 240) = 0;
              }
            }
            *(_QWORD *)(v93 + 248) = v70;
            *(_QWORD *)(v93 + 256) = v69;
          }
        }
        ecs_stack_allocator_pop_snapshot(v9);
        v19 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v93 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v93 + 376));
        }
        swift_release();
        v18 = (unsigned __int16 *)((char *)v62 + 1);
        if (v18 == v61)
          goto LABEL_67;
        goto LABEL_8;
      }
    }
  }
  v14 = *(unsigned int *)v10;
  swift_retain();
  v15 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, 0, 0, 0, (uint64_t)v8);
  if ((v16 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v9);
    v72 = a1[10];
    v73 = (float32x4_t *)ecs_stack_allocator_allocate(v9, 32 * (_QWORD)v72, 16);
    if (32 * (_QWORD)v72)
    {
      v74 = (32 * (uint64_t)v72) >> 5;
      v75 = (_OWORD *)v73[1].f32;
      do
      {
        *(v75 - 1) = xmmword_1B2244E20;
        *v75 = xmmword_1B227E550;
        v75 += 2;
        --v74;
      }
      while (v74);
    }
    sub_1B20E02E8(v73, a2, a3, a4, a5, a6, a7);
    ecs_stack_allocator_pop_snapshot(v9);
  }
  else
  {
    sub_1B20E02E8((float32x4_t *)(v15 + 32 * v14), a2, a3, a4, a5, a6, a7);
  }
  return swift_release();
}

uint64_t sub_1B1BEC018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 56);
  if (!v2)
    return 0xFFFFFFFFLL;
  for (i = *(_QWORD *)(v1 + 40); ; i += 48)
  {
    v4 = *(unsigned int *)(i + 8);
    if (a1 >= v4 && (v4 - *(_DWORD *)i + *(_DWORD *)(i + 4)) > a1)
      break;
    if (!--v2)
      return 0xFFFFFFFFLL;
  }
  return *(unsigned int *)(*(_QWORD *)(i + 40) + 188);
}

uint64_t sub_1B1BEC088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)(v0 + 80))
    return 0;
  sub_1B1BEC018(0);
  v2 = v1;
  swift_retain();
  v3 = sub_1B1A101F0(v2);
  swift_release();
  return v3;
}

uint64_t sub_1B1BEC0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_1B1BEC018(a3);
  v5 = v4;
  v6 = sub_1B1A11FDC(a1);
  if ((v7 & 1) != 0)
    return 0;
  else
    return v6 + sub_1B1F24AA4(a1) * v5;
}

uint64_t sub_1B1BEC17C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;

  if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4) || (v6 = *a5, (*a5 & 0x8000000000000000) != 0) || HIDWORD(v6))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    *a5 = v6 + a4;
    *(_DWORD *)a6 = 0;
    *(_DWORD *)(a6 + 4) = a4;
    *(_DWORD *)(a6 + 8) = v6;
    *(_QWORD *)(a6 + 16) = a2;
    *(_QWORD *)(a6 + 24) = a3;
    *(_QWORD *)(a6 + 32) = a4;
    *(_QWORD *)(a6 + 40) = result;
  }
  return result;
}

void sub_1B1BEC24C(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v18;
  int v23;
  int v24;
  uint64_t v25;
  size_t v26;
  int8x16_t *v27;
  int8x16_t *v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int8x16_t *v46;
  int64x2_t v47;
  unint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  int8x8_t *v51;
  int8x8_t v52;
  uint8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  int8x16_t *v64;
  int8x16_t *v65;
  unint64_t v66;
  int8x16_t v67;
  unint64_t v68;
  int v69;
  __int128 v70;
  unint64_t v71;
  uint64_t *v72;

  v9 = (uint64_t *)a5;
  v11 = *(_QWORD *)(a5 + 256);
  v12 = *(_QWORD *)(a5 + 240);
  if (v12 == v11)
    goto LABEL_2;
  v18 = a7;
  v23 = *(_DWORD *)(a5 + 28);
  if (BYTE4(a1))
  {
    if (BYTE4(a1) == 1)
    {
      v24 = v23 == (_DWORD)a1 ? 1 : *(unsigned __int8 *)(a5 + 32);
      if (v24 != 1)
        goto LABEL_2;
    }
  }
  else if ((*(_BYTE *)(a5 + 32) & 1) != 0 || v23 != (_DWORD)a1)
  {
    goto LABEL_2;
  }
  if ((a2 & 8) != 0 && v12 == *(_QWORD *)(a5 + 248) || (a2 & 0x10) != 0 && *(_QWORD *)(a5 + 232) == v11)
    goto LABEL_2;
  if (a6)
  {
    v25 = (a7 + 63) >> 6;
    if (v25 <= 1)
      v25 = 1;
    v26 = 8 * v25;
    v27 = (int8x16_t *)ecs_stack_allocator_allocate(a8, 8 * v25, 8);
    memcpy(v27, a6, v26);
  }
  else
  {
    v27 = 0;
    v18 = 0;
  }
  if ((a2 & 0x24) == 0)
    goto LABEL_44;
  v28 = (int8x16_t *)sub_1B1D3B0BC(a3);
  if (!v28)
  {
LABEL_2:
    swift_release();
    v13 = 0;
    LODWORD(v14) = 0;
    v15 = 0;
    v9 = 0;
LABEL_3:
    v16 = 0uLL;
LABEL_4:
    *(_QWORD *)a9 = v13;
    *(_QWORD *)(a9 + 8) = v14;
    *(_OWORD *)(a9 + 16) = v16;
    *(_QWORD *)(a9 + 32) = v15;
    *(_QWORD *)(a9 + 40) = v9;
    return;
  }
  v30 = v28;
  v31 = v29;
  if (v27)
  {
    if ((a2 & 4) == 0)
    {
      sub_1B19FA78C((unint64_t)v28, v29, (unint64_t)v27, v18);
      goto LABEL_43;
    }
    if (v18 + 63 <= 127)
      v33 = 1;
    else
      v33 = (v18 + 63) >> 6;
    if (v33 < 6 || (int8x16_t *)((char *)v28 + 8 * v33) > v27 && (int8x16_t *)((char *)v27 + 8 * v33) > v28)
    {
      v34 = 0;
LABEL_37:
      v35 = v33 - v34;
      v36 = v34;
      v37 = &v28->i64[v34];
      v38 = &v27->i64[v36];
      do
      {
        v39 = *v37++;
        *v38++ &= v39;
        --v35;
      }
      while (v35);
      goto LABEL_43;
    }
    v34 = v33 & 0xFFFFFFFFFFFFFFFCLL;
    v64 = v27 + 1;
    v65 = v28 + 1;
    v66 = v33 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v67 = vandq_s8(*v65, *v64);
      v64[-1] = vandq_s8(v65[-1], v64[-1]);
      *v64 = v67;
      v64 += 2;
      v65 += 2;
      v66 -= 4;
    }
    while (v66);
    if (v33 != v34)
      goto LABEL_37;
  }
  else if ((a2 & 4) != 0)
  {
    v40 = (v29 + 63) >> 6;
    if (v40 <= 1)
      v40 = 1;
    v41 = 8 * v40;
    v27 = (int8x16_t *)ecs_stack_allocator_allocate(a8, 8 * v40, 8);
    memcpy(v27, v30, v41);
    v18 = v31;
  }
  else
  {
    v27 = sub_1B1BEA5DC(a8, v28, v29);
    v18 = v32;
  }
LABEL_43:
  if ((a2 & 0x20) != 0)
  {
    if (!v27)
      goto LABEL_60;
    v42 = v9[30];
    sub_1B19FA6EC(0, v9[29], (uint64_t)v27);
    sub_1B19FA6EC(v42, v18, (uint64_t)v27);
    goto LABEL_48;
  }
LABEL_44:
  if (!v27)
    goto LABEL_60;
LABEL_48:
  if (v18 + 63 <= 127)
    v43 = 1;
  else
    v43 = (v18 + 63) >> 6;
  if (v43 >= 4)
  {
    v45 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    v46 = v27 + 1;
    v47 = 0uLL;
    v48 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    v49 = 0uLL;
    do
    {
      v47 = (int64x2_t)vpadalq_u32((uint64x2_t)v47, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v46[-1]))));
      v49 = (int64x2_t)vpadalq_u32((uint64x2_t)v49, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v46))));
      v46 += 2;
      v48 -= 4;
    }
    while (v48);
    v44 = vaddvq_s64(vaddq_s64(v49, v47));
    if (v43 == v45)
      goto LABEL_58;
  }
  else
  {
    v44 = 0;
    v45 = 0;
  }
  v50 = v43 - v45;
  v51 = (int8x8_t *)v27 + v45;
  do
  {
    v52 = *v51++;
    v53 = (uint8x8_t)vcnt_s8(v52);
    v53.i16[0] = vaddlv_u8(v53);
    v44 += v53.u32[0];
    --v50;
  }
  while (v50);
LABEL_58:
  v54 = v9[29];
  v55 = v9[30];
  if (v44 != v55 - v54)
  {
    if ((a2 & 8) != 0)
    {
      v60 = v9[31];
    }
    else if ((a2 & 0x10) != 0)
    {
      v60 = v9[32];
      v55 = v9[29];
    }
    else
    {
      v60 = v9[29];
    }
    sub_1B19FA6EC(0, v60, (uint64_t)v27);
    sub_1B19FA6EC(v55, v18, (uint64_t)v27);
    if (!sub_1B19FA690(v27, v18))
    {
      v61 = sub_1B1BEA6E8(v27, v18, a8);
      sub_1B1BEC17C((uint64_t)v9, (uint64_t)v61, v62, v63, a4, (uint64_t)&v68);
      v13 = v68;
      LODWORD(v14) = v69;
      v16 = v70;
      v15 = v71;
      v9 = v72;
      goto LABEL_4;
    }
    goto LABEL_2;
  }
  sub_1B19FA6EC(0, v54, (uint64_t)v27);
  sub_1B19FA6EC(v55, v18, (uint64_t)v27);
LABEL_60:
  v56 = 32;
  v57 = 29;
  if ((a2 & 0x10) == 0)
  {
    v56 = 29;
    v57 = 30;
  }
  if ((a2 & 8) != 0)
  {
    v56 = 31;
    v57 = 30;
  }
  v58 = v9[v57];
  v59 = v9[v56];
  if (v58 == v59)
    goto LABEL_2;
  v14 = *a4;
  if ((*a4 & 0x8000000000000000) == 0)
  {
    v15 = HIDWORD(v14);
    if (!HIDWORD(v14))
    {
      *a4 = v58 - v59 + v14;
      v13 = v59 | ((unint64_t)v58 << 32);
      goto LABEL_3;
    }
  }
  sub_1B222967C();
  __break(1u);
}

_QWORD *sub_1B1BEC74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int32x2_t v40;
  __int128 v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int32x2_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int32x2_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char isUniquelyReferenced_nonNull_native;
  unsigned int v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  _QWORD *result;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int32x2_t v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v134 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v134);
  v13 = *(_QWORD *)(a3 + 16);
  v135 = a1;
  v133 = *(_QWORD *)a3;
  v131 = *(_BYTE *)(a3 + 12);
  v132 = *(_DWORD *)(a3 + 8);
  v130 = *(_BYTE *)(a3 + 24);
  v129 = *(_QWORD *)(a3 + 32);
  if (*(_BYTE *)(*(_QWORD *)a3 + 40) != 1)
  {
    v127 = a5;
    v128 = a7;
    swift_retain();
    sub_1B1B7C5AC(a3);
LABEL_120:
    v109 = a6;
    a5 = v127;
    a7 = v128;
    v110 = v135;
    if (a6)
    {
      if (a6 == 1)
      {
        v109 = 0;
        v111 = 0;
      }
      else
      {
        v112 = 0;
        v113 = 0;
        v111 = a6 & 0xFFFFFFFFFFFFFFFELL;
        v114 = (unsigned int *)(a4 + 56);
        v115 = a6 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v116 = *(v114 - 12);
          v117 = *(v114 - 13) - *(v114 - 14);
          v118 = *(v114 - 1) - *(v114 - 2);
          v119 = *v114;
          v114 += 24;
          v112 = v112 - v116 + (v117 + v116);
          v113 = v113 - v119 + v118 + v119;
          v115 -= 2;
        }
        while (v115);
        v109 = v113 + v112;
        if (v111 == a6)
          goto LABEL_130;
      }
      v120 = a6 - v111;
      v121 = (unsigned int *)(a4 + 48 * v111 + 8);
      do
      {
        v122 = *(v121 - 2);
        v123 = *(v121 - 1);
        v124 = *v121;
        v121 += 12;
        v109 = v109 - v124 + v123 - v122 + v124;
        --v120;
      }
      while (v120);
    }
LABEL_130:
    type metadata accessor for QueryResult.Deallocator();
    result = (_QWORD *)swift_allocObject();
    result[4] = a5;
    result[5] = a6;
    result[2] = v134;
    result[3] = a4;
    *(_QWORD *)a7 = v133;
    *(_DWORD *)(a7 + 8) = v132;
    *(_BYTE *)(a7 + 12) = v131;
    *(_QWORD *)(a7 + 16) = v13;
    *(_BYTE *)(a7 + 24) = v130;
    *(_QWORD *)(a7 + 32) = v129;
    *(_QWORD *)(a7 + 40) = a4;
    *(_QWORD *)(a7 + 48) = a5;
    *(_QWORD *)(a7 + 56) = a6;
    *(_QWORD *)(a7 + 64) = v110;
    *(_QWORD *)(a7 + 72) = a2;
    *(_QWORD *)(a7 + 80) = v109;
    *(_QWORD *)(a7 + 88) = result;
    return result;
  }
  if (!a6)
  {
    swift_retain();
    v125 = a3;
    v110 = a1;
    sub_1B1B7C5AC(v125);
    v109 = 0;
    goto LABEL_130;
  }
  v127 = a5;
  v128 = a7;
  swift_retain();
  sub_1B1B7C5AC(a3);
  v14 = 0;
  v136 = a4;
  v137 = a6;
  v141 = v13;
  while (1)
  {
    v15 = (_QWORD *)(a4 + 48 * v14);
    v16 = (uint64_t *)v15[2];
    v17 = v15[5];
    v146 = v17;
    if (!v16)
    {
      v23 = *(_QWORD *)(v17 + 232);
      v147 = *(_QWORD *)(v17 + 240);
      if (v147 != v23)
      {
        v24 = *(_QWORD *)(v17 + 192);
        swift_retain();
        if (v24)
        {
          v25 = *(_QWORD *)(v17 + 208);
          sub_1B19FA4BC(v23, v147, v24);
          if ((v13 & 4) != 0)
            sub_1B19FA4BC(v23, v147, v25);
          else
            sub_1B19FA6EC(v23, v147, v25);
          v17 = v146;
        }
        if (*(_BYTE *)(*(_QWORD *)(v17 + 40) + 213) == 1)
        {
          v85 = *(_QWORD *)(v17 + 48);
          v86 = *(_QWORD *)(v85 + 16);
          v138 = v14;
          if (v86)
          {
            v87 = (uint64_t *)(v85 + 56);
            v88 = v147;
            while ((ValueMetadata *)*(v87 - 3) != &type metadata for PropagateDirtiness)
            {
              v87 += 5;
              if (!--v86)
                goto LABEL_102;
            }
            v86 = *v87;
          }
          else
          {
            v88 = v147;
          }
LABEL_102:
          v89 = *(_QWORD *)(v17 + 128) + v86;
          v90 = *(_QWORD *)(v17 + 16);
          do
          {
            swift_retain();
            if ((*(_BYTE *)(v17 + 184) & 1) != 0)
              goto LABEL_132;
            v92 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v23);
            v93 = (unsigned int *)(v89 + 8 * v23);
            v94 = *(unsigned int *)(*(_QWORD *)(v90 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v92 + 8);
            swift_release();
            v95 = *v93;
            v96 = v93[1];
            if ((_DWORD)v95 != -1 || (_DWORD)v96 != 0)
            {
              v98 = *(_QWORD *)(a2 + 88);
              sub_1B222A06C();
              sub_1B222A09C();
              sub_1B222A09C();
              v99 = sub_1B222A0C0();
              v100 = -1 << *(_BYTE *)(v98 + 32);
              v101 = v99 & ~v100;
              v102 = v98 + 56;
              if (((*(_QWORD *)(v98 + 56 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) != 0)
              {
                v103 = ~v100;
                v104 = *(_QWORD *)(v98 + 48);
                v88 = v147;
                while (1)
                {
                  v105 = v104 + 16 * v101;
                  v107 = *(_DWORD *)(v105 + 8);
                  v106 = *(_DWORD *)(v105 + 12);
                  if (v107 == (_DWORD)v95 && v106 == (_DWORD)v96)
                    break;
                  v101 = (v101 + 1) & v103;
                  if (((*(_QWORD *)(v102 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
                    goto LABEL_103;
                }
              }
              else
              {
LABEL_103:
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v153 = *(_QWORD *)(a2 + 88);
                *(_QWORD *)(a2 + 88) = 0x8000000000000000;
                sub_1B1B8F344(v92 | (unint64_t)(v94 << 32), v95 | (v96 << 32), v101, isUniquelyReferenced_nonNull_native);
                *(_QWORD *)(a2 + 88) = v153;
                v88 = v147;
                swift_bridgeObjectRelease();
              }
            }
            ++v23;
            v17 = v146;
          }
          while (v23 != v88);
LABEL_118:
          swift_release();
          a4 = v136;
          a6 = v137;
          v13 = v141;
          v14 = v138;
        }
        else
        {
          swift_release();
        }
      }
      goto LABEL_5;
    }
    v18 = v15[4];
    if (v18)
      break;
LABEL_5:
    if (++v14 == a6)
      goto LABEL_120;
  }
  v138 = v14;
  v19 = *v16;
  v20 = *v16 + 1;
  if (v18 == 1)
  {
    swift_retain();
LABEL_10:
    v21 = *(_QWORD *)(v17 + 192);
    if (v21)
    {
      v22 = *(_QWORD *)(v17 + 208);
      sub_1B19FA4BC(v19, v20, v21);
      if ((v13 & 4) != 0)
        sub_1B19FA4BC(v19, v20, v22);
      else
        sub_1B19FA6EC(v19, v20, v22);
      v17 = v146;
    }
    if (*(_BYTE *)(*(_QWORD *)(v17 + 40) + 213) == 1)
    {
      v59 = *(_QWORD *)(v17 + 48);
      v60 = *(_QWORD *)(v59 + 16);
      if (v60)
      {
        v61 = (uint64_t *)(v59 + 56);
        while ((ValueMetadata *)*(v61 - 3) != &type metadata for PropagateDirtiness)
        {
          v61 += 5;
          if (!--v60)
            goto LABEL_71;
        }
        v60 = *v61;
        if (v19 != v20)
        {
LABEL_74:
          v62 = *(_QWORD *)(v17 + 128) + v60;
          v63 = *(_QWORD *)(v17 + 16);
          while (1)
          {
            swift_retain();
            if ((*(_BYTE *)(v17 + 184) & 1) != 0)
              goto LABEL_132;
            v66 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v19);
            v67 = (unsigned int *)(v62 + 8 * v19);
            v68 = *(unsigned int *)(*(_QWORD *)(v63 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v66 + 8);
            swift_release();
            v69 = *v67;
            v70 = v67[1];
            if ((_DWORD)v69 != -1 || (_DWORD)v70 != 0)
            {
              v149 = v68;
              v72 = v62;
              v73 = v20;
              v74 = *(_QWORD *)(a2 + 88);
              sub_1B222A06C();
              sub_1B222A09C();
              sub_1B222A09C();
              v75 = sub_1B222A0C0();
              v76 = -1 << *(_BYTE *)(v74 + 32);
              v77 = v75 & ~v76;
              v78 = v74 + 56;
              if (((*(_QWORD *)(v74 + 56 + ((v77 >> 3) & 0xFFFFFFFFFFFFF8)) >> v77) & 1) != 0)
              {
                v79 = ~v76;
                v80 = *(_QWORD *)(v74 + 48);
                v20 = v73;
                v62 = v72;
                v64 = v149;
                while (1)
                {
                  v81 = v80 + 16 * v77;
                  v83 = *(_DWORD *)(v81 + 8);
                  v82 = *(_DWORD *)(v81 + 12);
                  if (v83 == (_DWORD)v69 && v82 == (_DWORD)v70)
                    break;
                  v77 = (v77 + 1) & v79;
                  if (((*(_QWORD *)(v78 + ((v77 >> 3) & 0xFFFFFFFFFFFFF8)) >> v77) & 1) == 0)
                    goto LABEL_76;
                }
              }
              else
              {
                v20 = v73;
                v62 = v72;
                v64 = v149;
LABEL_76:
                v65 = swift_isUniquelyReferenced_nonNull_native();
                v152 = *(_QWORD *)(a2 + 88);
                *(_QWORD *)(a2 + 88) = 0x8000000000000000;
                sub_1B1B8F344(v66 | (unint64_t)(v64 << 32), v69 | (v70 << 32), v77, v65);
                *(_QWORD *)(a2 + 88) = v152;
                swift_bridgeObjectRelease();
              }
            }
            ++v19;
            v17 = v146;
            if (v19 == v20)
              goto LABEL_118;
          }
        }
      }
      else
      {
LABEL_71:
        if (v19 != v20)
          goto LABEL_74;
      }
    }
    swift_release();
    a4 = v136;
    a6 = v137;
    v14 = v138;
    goto LABEL_5;
  }
  v26 = v18;
  swift_retain();
  v27 = 1;
  v139 = v26;
  v140 = v16;
  while (1)
  {
    v28 = v16[v27];
    if (v20 == v28)
      goto LABEL_19;
    v29 = *(_QWORD *)(v17 + 192);
    if (v29)
    {
      v30 = *(_QWORD *)(v17 + 208);
      sub_1B19FA4BC(v19, v20, v29);
      if ((v13 & 4) != 0)
      {
        sub_1B19FA4BC(v19, v20, v30);
        v17 = v146;
      }
      else
      {
        v17 = v146;
        if (v20 != v19)
        {
          v31 = v28;
          v143 = v27;
          v32 = v19 >> 6;
          v33 = v20 >> 6;
          v34 = ~(-1 << v19);
          v35 = -1 << v20;
          if (v20 >> 6 == v19 >> 6)
          {
            *(_QWORD *)(v30 + 8 * v32) &= v35 ^ v34;
          }
          else
          {
            if ((v20 >> 6) - (v19 >> 6) >= 2)
              bzero((void *)(v30 + 8 * v32 + 8), 8 * (v33 + ~v32));
            *(_QWORD *)(v30 + 8 * v32) &= v34;
            *(_QWORD *)(v30 + 8 * v33) &= v35;
          }
          v17 = v146;
          v16 = v140;
          v27 = v143;
          v28 = v31;
          v13 = v141;
        }
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(v17 + 40) + 213) == 1)
    {
      v36 = *(_QWORD *)(v17 + 48);
      v37 = *(_QWORD *)(v36 + 16);
      if (!v37)
      {
LABEL_36:
        if (v19 != v20)
          break;
        goto LABEL_18;
      }
      v38 = (uint64_t *)(v36 + 56);
      while ((ValueMetadata *)*(v38 - 3) != &type metadata for PropagateDirtiness)
      {
        v38 += 5;
        if (!--v37)
          goto LABEL_36;
      }
      v37 = *v38;
      if (v19 != v20)
        break;
    }
LABEL_18:
    v19 = v28;
LABEL_19:
    ++v27;
    v20 = v28 + 1;
    if (v27 == v26)
      goto LABEL_10;
  }
  v142 = v28;
  v144 = v27;
  v145 = *(_QWORD *)(v17 + 128) + v37;
  v39 = *(_QWORD *)(v17 + 16);
  while (1)
  {
    swift_retain();
    if ((*(_BYTE *)(v17 + 184) & 1) != 0)
      break;
    v42 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v19);
    v43 = *(_DWORD *)(*(_QWORD *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v42 + 8);
    swift_release();
    if (*(_QWORD *)(v145 + 8 * v19) != -1 || HIDWORD(*(_QWORD *)(v145 + 8 * v19)) != 0)
    {
      v148 = *(int32x2_t *)(v145 + 8 * v19);
      v45 = *(_QWORD *)(a2 + 88);
      sub_1B222A06C();
      sub_1B222A09C();
      sub_1B222A09C();
      v46 = sub_1B222A0C0();
      v47 = -1 << *(_BYTE *)(v45 + 32);
      v48 = v46 & ~v47;
      v49 = v45 + 56;
      if (((*(_QWORD *)(v45 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) != 0)
      {
        v50 = ~v47;
        v51 = *(_QWORD *)(v45 + 48);
        v17 = v146;
        while (1)
        {
          v52 = vceq_s32(*(int32x2_t *)(v51 + 16 * v48 + 8), v148);
          if ((v52.i32[0] & v52.i32[1] & 1) != 0)
            break;
          v48 = (v48 + 1) & v50;
          if (((*(_QWORD *)(v49 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) == 0)
            goto LABEL_54;
        }
      }
      else
      {
LABEL_54:
        v53 = swift_isUniquelyReferenced_nonNull_native();
        v151 = *(_QWORD *)(a2 + 88);
        v58 = (_QWORD *)v151;
        *(_QWORD *)(a2 + 88) = 0x8000000000000000;
        if (v58[3] > v58[2])
        {
          if ((v53 & 1) == 0)
          {
            sub_1B1B91000();
            v58 = (_QWORD *)v151;
          }
        }
        else
        {
          if (v53)
            sub_1B1B8C63C();
          else
            sub_1B1B92C64();
          v58 = (_QWORD *)v151;
          sub_1B222A06C();
          sub_1B222A09C();
          sub_1B222A09C();
          v54 = sub_1B222A0C0();
          v55 = -1 << *(_BYTE *)(v151 + 32);
          v48 = v54 & ~v55;
          if (((*(_QWORD *)(v151 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) != 0)
          {
            v56 = ~v55;
            v40 = v148;
            while (1)
            {
              v57 = vceq_s32(*(int32x2_t *)(*(_QWORD *)(v151 + 48) + 16 * v48 + 8), v148);
              if ((v57.i32[0] & v57.i32[1] & 1) != 0)
                break;
              v48 = (v48 + 1) & v56;
              if (((*(_QWORD *)(v151 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) == 0)
                goto LABEL_43;
            }
            sub_1B2229FB8();
            __break(1u);
            break;
          }
        }
        v40 = v148;
LABEL_43:
        *(_QWORD *)((char *)v58 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v48;
        *(_QWORD *)&v41 = __PAIR64__(v43, v42);
        *((int32x2_t *)&v41 + 1) = v40;
        *(_OWORD *)(v58[6] + 16 * v48) = v41;
        ++v58[2];
        *(_QWORD *)(a2 + 88) = v58;
        swift_bridgeObjectRelease();
        v17 = v146;
      }
    }
    if (++v19 == v20)
    {
      v13 = v141;
      v28 = v142;
      v19 = v142;
      v26 = v139;
      v16 = v140;
      v27 = v144;
      goto LABEL_19;
    }
  }
LABEL_132:
  result = (_QWORD *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1BED22C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t i;
  uint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int64_t v77;
  uint64_t v78;
  int *v79;
  __int128 v80;
  int *v81;
  int *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _BYTE v88[48];
  _BYTE v89[48];
  _BYTE v90[48];
  uint64_t v91;
  unsigned int v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD v102[2];
  __int128 v103;
  _OWORD v104[2];
  __int128 v105;
  _OWORD v106[2];
  __int128 v107;

  v86 = (_QWORD *)result;
  v6 = 0;
  v7 = 0uLL;
  if (!a4 || !a5)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0uLL;
    v28 = 0;
    goto LABEL_47;
  }
  v8 = a4;
  v9 = a3;
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 32);
  v13 = __clz(__rbit64(v12));
  v14 = *(_QWORD *)(result + 96) + 32;
  v15 = 4 * a5;
  v16 = a4;
  do
  {
    v18 = *v16;
    if (v12)
    {
      v19 = *(_QWORD *)(v14 + 40 * v18 + 16);
      if (v13 >= *(_QWORD *)(v19 + 16))
        v17 = 0;
      else
        v17 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v13 + 32) + 16);
    }
    else
    {
      v20 = *(_QWORD *)(v14 + 40 * v18);
      if ((v11 & 1) != 0)
        v17 = *(_QWORD *)(v20 + 16);
      else
        v17 = *(_QWORD *)(v20 + 16) - *(_QWORD *)(v14 + 40 * v18 + 8);
    }
    v10 += v17;
    ++v16;
    v15 -= 4;
  }
  while (v15);
  if (v10 <= 0)
  {
    v6 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v27 = 0uLL;
    goto LABEL_47;
  }
  v74 = a6;
  v29 = *(_QWORD *)(a2 + 32);
  v78 = *(_QWORD *)(a3 + 32);
  v79 = &a4[a5];
  v77 = v13;
  ecs_stack_allocator_push_snapshot(v29);
  v72 = v10;
  v30 = v29;
  v31 = ecs_stack_allocator_allocate(v29, 48 * v10, 8);
  v33 = v77;
  v32 = v78;
  v34 = v79;
  v84 = (uint64_t)v31;
  v35 = 0;
  v87 = 0;
  v75 = v9;
  do
  {
    v36 = *v8;
    if ((v11 & 2) != 0 || (*(_BYTE *)(*(_QWORD *)(v86[10] + 8 * v36 + 32) + 209) & 1) == 0)
    {
      v37 = v86[12] + 32;
      if (v32)
      {
        v38 = *(_QWORD *)(v37 + 40 * (int)v36 + 16);
        if (v33 < *(_QWORD *)(v38 + 16))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v38 + 8 * v33 + 32) + 16);
          if (v39)
          {
            v81 = v8;
            v40 = *(_BYTE *)(v9 + 24);
            v41 = *(unsigned int *)(v9 + 8) | ((unint64_t)*(unsigned __int8 *)(v9 + 12) << 32);
            v42 = (uint64_t *)(swift_retain() + 48);
            do
            {
              v43 = (const void *)*(v42 - 1);
              v44 = *v42;
              v45 = *(_QWORD *)(v86[17] + 8 * *((int *)v42 - 4) + 32);
              swift_retain_n();
              sub_1B1BEC24C(v41, v11, v40, &v87, v45, v43, v44, v30, (uint64_t)v89);
              sub_1B1A18378((uint64_t)v89, (uint64_t)v106, (unint64_t *)&unk_1ED4B7DD0, (uint64_t)&type metadata for QueryResult.ChunkResult);
              if (*((_QWORD *)&v107 + 1))
              {
                v46 = (_OWORD *)(v84 + 48 * v35);
                v47 = v106[0];
                v48 = v107;
                v46[1] = v106[1];
                v46[2] = v48;
                *v46 = v47;
                swift_release();
                ++v35;
              }
              else
              {
                swift_release();
              }
              v42 += 3;
              --v39;
            }
            while (v39);
            swift_release();
            v9 = v75;
            v8 = v81;
LABEL_16:
            v32 = v78;
            v34 = v79;
            v33 = v77;
          }
        }
      }
      else
      {
        v49 = (_QWORD *)(v37 + 40 * (int)v36);
        v50 = *v49;
        v51 = v49[1];
        v52 = *(_QWORD *)(*v49 + 16);
        if (v51 != v52)
        {
          v76 = *v8;
          v82 = v8;
          v53 = *(_BYTE *)(v9 + 24);
          v54 = *(unsigned int *)(v9 + 8) | ((unint64_t)*(unsigned __int8 *)(v9 + 12) << 32);
          swift_bridgeObjectRetain();
          do
          {
            v55 = *(_QWORD *)(v86[17] + 8 * *(int *)(v50 + 4 * v51 + 32) + 32);
            swift_retain_n();
            sub_1B1BEC24C(v54, v11, v53, &v87, v55, 0, 0, v30, (uint64_t)v88);
            sub_1B1A18378((uint64_t)v88, (uint64_t)v104, (unint64_t *)&unk_1ED4B7DD0, (uint64_t)&type metadata for QueryResult.ChunkResult);
            if (*((_QWORD *)&v105 + 1))
            {
              v56 = (_OWORD *)(v84 + 48 * v35);
              v57 = v104[0];
              v58 = v105;
              v56[1] = v104[1];
              v56[2] = v58;
              *v56 = v57;
              swift_release();
              ++v35;
            }
            else
            {
              swift_release();
            }
            ++v51;
          }
          while (v52 != v51);
          swift_bridgeObjectRelease();
          v8 = v82;
          v32 = v78;
          v34 = v79;
          LODWORD(v36) = v76;
          v33 = v77;
        }
        if ((v11 & 1) != 0)
        {
          v59 = v86[12] + 40 * (int)v36;
          v60 = *(_QWORD *)(v59 + 40) & 0x7FFFFFFFFFFFFFFFLL;
          if (v60)
          {
            v61 = v8;
            v62 = *(_QWORD *)(v59 + 32);
            v63 = *(_BYTE *)(v9 + 24);
            v64 = *(unsigned int *)(v9 + 8) | ((unint64_t)*(unsigned __int8 *)(v9 + 12) << 32);
            swift_bridgeObjectRetain();
            for (i = 0; i != v60; ++i)
            {
              v66 = *(_QWORD *)(v86[17] + 8 * *(int *)(v62 + 4 * i + 32) + 32);
              swift_retain_n();
              sub_1B1BEC24C(v64, v11, v63, &v87, v66, 0, 0, v30, (uint64_t)v90);
              sub_1B1A18378((uint64_t)v90, (uint64_t)v102, (unint64_t *)&unk_1ED4B7DD0, (uint64_t)&type metadata for QueryResult.ChunkResult);
              if (*((_QWORD *)&v103 + 1))
              {
                v67 = (_OWORD *)(v84 + 48 * v35);
                v68 = v102[0];
                v69 = v103;
                v67[1] = v102[1];
                v67[2] = v69;
                *v67 = v68;
                swift_release();
                ++v35;
              }
              else
              {
                swift_release();
              }
            }
            swift_bridgeObjectRelease();
            v9 = v75;
            v8 = v61;
            goto LABEL_16;
          }
        }
      }
    }
    ++v8;
  }
  while (v8 != v34);
  if (v35)
  {
    swift_retain();
    sub_1B1B7C5AC(v9);
    sub_1B1BEC74C((uint64_t)v86, a2, v9, v84, v72, v35, (uint64_t)&v91);
    v6 = v91;
    v85 = v92;
    v70 = v93;
    v22 = v94;
    v23 = v95;
    v71 = v9;
    v24 = v96;
    v25 = v97;
    v80 = v99;
    v83 = v98;
    v26 = v100;
    v28 = v101;
    sub_1B19ED720(v71);
    swift_release();
    result = ecs_stack_allocator_pop_snapshot(v30);
    v27 = v80;
    v7 = v83;
    v21 = v85 | (v70 << 32);
    a6 = v74;
  }
  else
  {
    result = ecs_stack_allocator_pop_snapshot(v30);
    v6 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v27 = 0uLL;
    a6 = v74;
    v7 = 0uLL;
  }
LABEL_47:
  *(_QWORD *)a6 = v6;
  *(_QWORD *)(a6 + 8) = v21;
  *(_QWORD *)(a6 + 16) = v22;
  *(_QWORD *)(a6 + 24) = v23;
  *(_QWORD *)(a6 + 32) = v24;
  *(_QWORD *)(a6 + 40) = v25;
  *(_OWORD *)(a6 + 48) = v7;
  *(_OWORD *)(a6 + 64) = v27;
  *(_QWORD *)(a6 + 80) = v26;
  *(_QWORD *)(a6 + 88) = v28;
  return result;
}

uint64_t sub_1B1BED808(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B202AF94(0, v2, 0);
    v4 = 0;
    result = v13;
    v5 = (__int128 *)(a1 + 32);
    v6 = *(_QWORD *)(v13 + 16);
    v7 = 24 * v6;
    do
    {
      v8 = *v5;
      v14 = result;
      v9 = *(_QWORD *)(result + 24);
      v10 = v6 + 1;
      if (v6 >= v9 >> 1)
      {
        v12 = *v5;
        sub_1B202AF94(v9 > 1, v6 + 1, 1);
        v8 = v12;
        result = v14;
      }
      *(_QWORD *)(result + 16) = v10;
      v11 = result + v7;
      v7 += 24;
      *(_OWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 48) = v4;
      ++v5;
      v6 = v10;
      v4 += *((_QWORD *)&v8 + 1);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1B1BED8F4(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, float a9, float a10, uint64_t a11, char a12)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  _BYTE v55[48];

  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = sub_1B1C67600(0, v16 & ~(v16 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  if (*(uint64_t *)(a1 + 80) >= 1 && v16)
  {
    v18 = 0;
    v19 = *(_QWORD **)(a1 + 72);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v52 = v19[4];
    v21 = *(_OWORD *)(a1 + 16);
    v53[0] = *(_OWORD *)a1;
    v53[1] = v21;
    v54 = *(_QWORD *)(a1 + 32);
    v22 = (uint64_t *)(v15 + 24);
    v46 = v20;
    do
    {
      v50 = v18;
      v51 = v17;
      v23 = *((unsigned int *)v22 - 6);
      v48 = (uint64_t *)*(v22 - 1);
      v49 = *((unsigned int *)v22 - 5);
      v24 = v22[1];
      v47 = *v22;
      v25 = v22[2];
      if (v20)
      {
        v26 = *(os_unfair_lock_s **)(v25 + 376);
        swift_retain();
        os_unfair_lock_lock(v26);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v52);
      sub_1B1A18378((uint64_t)(v19 + 6), (uint64_t)v55, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v27 = v19[4];
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v19[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
      v19[7] = v28;
      v19[9] = 0;
      v19[10] = 0;
      v19[8] = 0;
      swift_release();
      v29 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v48, v47, v24, (uint64_t)v19);
      if (v29)
        v30 = v29 + 16 * v23;
      else
        v30 = 0;
      v17 = v51;
      v32 = *((_QWORD *)v51 + 2);
      v31 = *((_QWORD *)v51 + 3);
      if (v32 >= v31 >> 1)
        v17 = sub_1B1C67600(v31 > 1, v32 + 1, 1, v51);
      v20 = v46;
      *((_QWORD *)v17 + 2) = v32 + 1;
      v33 = &v17[16 * v32];
      *((_QWORD *)v33 + 4) = v30;
      *((_QWORD *)v33 + 5) = v49 - v23;
      v18 = v50;
      sub_1B1F05D48(v19, (unsigned __int16 **)v53, (uint64_t)v55);
      sub_1B1F03804((char *)v25);
      ecs_stack_allocator_pop_snapshot(v52);
      if (v46)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
      }
      swift_release();
      v22 += 6;
      --v16;
    }
    while (v16);
  }
  v34 = swift_bridgeObjectRetain();
  v35 = (_QWORD *)sub_1B1BED808(v34);
  v37 = v36;
  swift_bridgeObjectRelease();
  sub_1B1C8C72C(v35, v37, a2, a3, a4, a5, a6 & 1, a7, a9, a10, a8 & 1, a11, a12 & 1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1BEDBE8(unsigned __int16 **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  double v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v83;
  _QWORD *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  __int128 v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = a1[9];
  v15 = *((_QWORD *)v14 + 4);
  v16 = a1[5];
  v98 = v15;
  v99 = a1[7];
  if (v99 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v15);
    v21 = (uint64_t)a1[10];
    v97 = ecs_stack_allocator_allocate(v15, 16 * v21, 16);
    v23 = v15;
    if (v21 <= 0 || !v99)
    {
LABEL_66:
      v81 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                      + 8 * *(_QWORD *)thread_worker_index(v22)
                      + 8);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1B1BEE528(a9);
      sub_1B1F0BC10(0, a3, 1, a4 | ((HIDWORD(a4) & 1) << 32), a6 - a5, v81, a5, a7, (uint64_t)v97, a2, a8, a9, a10, a11 & 1);
      sub_1B1B4F21C(a9);
      swift_release();
      swift_release();
      swift_release();
      return ecs_stack_allocator_pop_snapshot(v23);
    }
    v24 = 0;
    v25 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v109 = *a1;
    v106 = (uint64_t)*a1 + 41;
    v96 = v25;
    v95 = v16;
LABEL_8:
    v26 = (unsigned int *)&v16[24 * v24];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = *((_QWORD *)v26 + 5);
    v31 = v16;
    if (v25)
    {
      v32 = *(os_unfair_lock_s **)(v30 + 376);
      swift_retain();
      os_unfair_lock_lock(v32);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v30 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v23);
    v102 = *((_QWORD *)v14 + 7);
    v103 = *((_QWORD *)v14 + 6);
    v101 = *((_QWORD *)v14 + 8);
    v100 = *((_QWORD *)v14 + 9);
    v104 = *((_QWORD *)v14 + 10);
    v33 = *((_QWORD *)v14 + 4);
    v34 = v30;
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v14 + 6) = ecs_stack_allocator_allocate(v33, 48 * v35, 8);
    *((_QWORD *)v14 + 7) = v35;
    *((_QWORD *)v14 + 9) = 0;
    *((_QWORD *)v14 + 10) = 0;
    *((_QWORD *)v14 + 8) = 0;
    swift_release();
    v36 = &v97[2 * v29];
    v37 = v28 - v27;
    swift_retain();
    v38 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, 0, 0, 0, (uint64_t)v14);
    if ((v39 & 1) != 0)
    {
      v110 = xmmword_1B2244E20;
      memset_pattern16_nocache(v36, &v110, 16 * v37);
    }
    else
    {
      memcpy(v36, (const void *)(v38 + 16 * v27), 16 * v37);
    }
    swift_release();
    v16 = v31;
    v105 = v34;
    v40 = *((_QWORD *)v14 + 6);
    v41 = *((_QWORD *)v14 + 8);
    if (!v41)
    {
      v67 = *((_QWORD *)v14 + 7);
      v68 = (_QWORD *)*((_QWORD *)v14 + 4);
      goto LABEL_51;
    }
    v42 = 0;
    while (1)
    {
      v44 = (uint64_t *)(v40 + 48 * v42);
      v45 = *v44;
      v46 = (void (*)(uint64_t))v44[4];
      v47 = *((_QWORD *)v14 + 9);
      if (v47)
        v48 = v45 == v47;
      else
        v48 = 0;
      if (!v48 && v109[11])
      {
        v49 = v109[9];
        v50 = (_QWORD *)(v106 + v109[8]);
        v51 = v44[2];
        v52 = v50;
        v53 = v49 >> 4;
        v54 = v106;
        if (v49 < 0x10)
          goto LABEL_31;
        while (*v52 != v45)
        {
          ++v54;
          v52 += 2;
          if (!--v53)
            goto LABEL_31;
        }
        v55 = *(unsigned __int8 *)(v54 + v109[10]);
        v56 = v55 > 5;
        v57 = (1 << v55) & 0x23;
        if (!v56 && v57 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v59 = v51;
          else
            v59 = 0;
          if (!v59)
            goto LABEL_17;
          v60 = v50;
          v61 = v49 >> 4;
          v62 = v106;
          if (v49 >= 0x10)
          {
            while (*v60 != v59)
            {
              ++v62;
              v60 += 2;
              if (!--v61)
                goto LABEL_43;
            }
            v63 = *(unsigned __int8 *)(v62 + v109[10]);
            v56 = v63 > 5;
            v64 = (1 << v63) & 0x23;
            if (v56 || v64 == 0)
              goto LABEL_16;
LABEL_43:
            v66 = 16 * (v49 >> 4);
            while (*v50 != v59)
            {
              v50 += 2;
              v66 -= 16;
              if (!v66)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v43 = swift_retain();
      v46(v43);
      swift_release();
LABEL_17:
      if (++v42 == v41)
      {
        v67 = *((_QWORD *)v14 + 7);
        v40 = *((_QWORD *)v14 + 6);
        v68 = (_QWORD *)*((_QWORD *)v14 + 4);
        if (*((uint64_t *)v14 + 8) >= 1)
          swift_arrayDestroy();
        v16 = v95;
LABEL_51:
        ecs_stack_allocator_deallocate(v68, v40, 48 * v67);
        *((_QWORD *)v14 + 6) = v103;
        *((_QWORD *)v14 + 7) = v102;
        *((_QWORD *)v14 + 8) = v101;
        *((_QWORD *)v14 + 9) = v100;
        v69 = v105;
        *((_QWORD *)v14 + 10) = v104;
        if (*(_QWORD *)(*((_QWORD *)v14 + 13) + 16))
        {
          v70 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v70, v105);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v72 = *((_QWORD *)v14 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v72 + 16));
          }
          else
          {
            v73 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v72 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v69 = v105;
              v73 = (_QWORD *)swift_allocObject();
              v74 = j__malloc_size(v73);
              v73[2] = 0;
              v73[3] = 2 * ((uint64_t)(v74 - 32) / 72);
            }
            *((_QWORD *)v14 + 13) = v73;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v14 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v75 = v69;
            v78 = *(char **)(v69 + 232);
            v77 = (_QWORD *)(v69 + 232);
            v76 = v78;
            v79 = (char *)v77[3];
            if (v78 == v79)
            {
              v80 = *(char **)(v75 + 240);
              v69 = v75;
            }
            else
            {
              sub_1B1A1059C(v79, v76);
              v79 = *(char **)(v75 + 232);
              v80 = *(char **)(v75 + 240);
              if (v80 == v79)
              {
                v80 = 0;
                v79 = 0;
                *v77 = 0;
                v77[1] = 0;
              }
              v69 = v105;
            }
            *(_QWORD *)(v69 + 248) = v80;
            *(_QWORD *)(v69 + 256) = v79;
          }
        }
        v23 = v98;
        ecs_stack_allocator_pop_snapshot(v98);
        v25 = v96;
        if (v96)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v69 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v69 + 376));
        }
        swift_release();
        if ((unsigned __int16 *)++v24 == v99)
          goto LABEL_66;
        goto LABEL_8;
      }
    }
  }
  v107 = *(unsigned int *)v16;
  swift_retain();
  v17 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, 0, 0, 0, (uint64_t)v14);
  if ((v19 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v15);
    v83 = 16 * (_QWORD)a1[10];
    v84 = ecs_stack_allocator_allocate(v15, v83, 16);
    v86 = (uint64_t)v84;
    if (v83)
      memset_pattern16(v84, &xmmword_1B2244E20, v83);
    v87 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index(v85)
                    + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1BEE528(a9);
    sub_1B1F0BC10(0, a3, 1, a4 | ((HIDWORD(a4) & 1) << 32), a6 - a5, v87, a5, a7, v86, a2, a8, a9, a10, a11 & 1);
    sub_1B1B4F21C(a9);
    swift_release();
    swift_release();
    swift_release();
    ecs_stack_allocator_pop_snapshot(v15);
  }
  else
  {
    v108 = v17 + 16 * v107;
    v20 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index(v18)
                    + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1BEE528(a9);
    sub_1B1F0BC10(0, a3, 1, a4 | ((HIDWORD(a4) & 1) << 32), a6 - a5, v20, a5, a7, v108, a2, a8, a9, a10, a11 & 1);
    sub_1B1B4F21C(a9);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1B1BEE528(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1B1BEE55C(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t *a6)
{
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  _QWORD *v61;
  size_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int16 *v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  unsigned __int16 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v7 = a1[9];
  v8 = *((_QWORD *)v7 + 4);
  v9 = a1[5];
  v80 = a1[7];
  if (v80 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v8);
    v14 = (uint64_t)a1[10];
    v79 = ecs_stack_allocator_allocate(v8, 16 * v14, 16);
    v70 = (16 * v14) >> 4;
    if (v14 <= 0 || !v80)
    {
LABEL_65:
      sub_1B1D2D78C((uint64_t)v79, v70, a2, a3, a4, a5, a6);
      return ecs_stack_allocator_pop_snapshot(v8);
    }
    v15 = 0;
    v16 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v89 = *a1;
    v88 = (uint64_t)*a1 + 41;
    v78 = v16;
    v76 = v9;
    v77 = v8;
LABEL_8:
    v17 = (unsigned int *)&v9[24 * v15];
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = *((_QWORD *)v17 + 5);
    v84 = v15;
    if (v16)
    {
      v22 = *(os_unfair_lock_s **)(v21 + 376);
      swift_retain();
      os_unfair_lock_lock(v22);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    v82 = *((_QWORD *)v7 + 7);
    v83 = *((_QWORD *)v7 + 6);
    v81 = *((_QWORD *)v7 + 8);
    v86 = *((_QWORD *)v7 + 9);
    v85 = *((_QWORD *)v7 + 10);
    v23 = *((_QWORD *)v7 + 4);
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v7 + 6) = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
    *((_QWORD *)v7 + 7) = v24;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 10) = 0;
    *((_QWORD *)v7 + 8) = 0;
    swift_release();
    v25 = &v79[2 * v20];
    v26 = v19 - v18;
    swift_retain();
    v27 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, 0, 0, 0, (uint64_t)v7);
    v87 = v21;
    if ((v28 & 1) != 0)
    {
      v90 = xmmword_1B2244E20;
      memset_pattern16_nocache(v25, &v90, 16 * v26);
    }
    else
    {
      memcpy(v25, (const void *)(v27 + 16 * v18), 16 * v26);
    }
    swift_release();
    v29 = *((_QWORD *)v7 + 6);
    v30 = *((_QWORD *)v7 + 8);
    if (!v30)
    {
      v56 = *((_QWORD *)v7 + 7);
      v57 = (_QWORD *)*((_QWORD *)v7 + 4);
      goto LABEL_51;
    }
    v31 = 0;
    while (1)
    {
      v33 = (uint64_t *)(v29 + 48 * v31);
      v34 = *v33;
      v35 = (void (*)(uint64_t))v33[4];
      v36 = *((_QWORD *)v7 + 9);
      if (v36)
        v37 = v34 == v36;
      else
        v37 = 0;
      if (!v37 && v89[11])
      {
        v38 = v89[9];
        v39 = (_QWORD *)(v88 + v89[8]);
        v40 = v33[2];
        v41 = v39;
        v42 = v38 >> 4;
        v43 = v88;
        if (v38 < 0x10)
          goto LABEL_31;
        while (*v41 != v34)
        {
          ++v43;
          v41 += 2;
          if (!--v42)
            goto LABEL_31;
        }
        v44 = *(unsigned __int8 *)(v43 + v89[10]);
        v45 = v44 > 5;
        v46 = (1 << v44) & 0x23;
        if (!v45 && v46 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v48 = v40;
          else
            v48 = 0;
          if (!v48)
            goto LABEL_17;
          v49 = v39;
          v50 = v38 >> 4;
          v51 = v88;
          if (v38 >= 0x10)
          {
            while (*v49 != v48)
            {
              ++v51;
              v49 += 2;
              if (!--v50)
                goto LABEL_43;
            }
            v52 = *(unsigned __int8 *)(v51 + v89[10]);
            v45 = v52 > 5;
            v53 = (1 << v52) & 0x23;
            if (v45 || v53 == 0)
              goto LABEL_16;
LABEL_43:
            v55 = 16 * (v38 >> 4);
            while (*v39 != v48)
            {
              v39 += 2;
              v55 -= 16;
              if (!v55)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v32 = swift_retain();
      v35(v32);
      swift_release();
LABEL_17:
      if (++v31 == v30)
      {
        v56 = *((_QWORD *)v7 + 7);
        v29 = *((_QWORD *)v7 + 6);
        v57 = (_QWORD *)*((_QWORD *)v7 + 4);
        if (*((uint64_t *)v7 + 8) >= 1)
          swift_arrayDestroy();
        v9 = v76;
        v8 = v77;
LABEL_51:
        ecs_stack_allocator_deallocate(v57, v29, 48 * v56);
        *((_QWORD *)v7 + 6) = v83;
        *((_QWORD *)v7 + 7) = v82;
        *((_QWORD *)v7 + 8) = v81;
        *((_QWORD *)v7 + 9) = v86;
        *((_QWORD *)v7 + 10) = v85;
        if (*(_QWORD *)(*((_QWORD *)v7 + 13) + 16))
        {
          v58 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v58, v87);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v60 = *((_QWORD *)v7 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v60 + 16));
          }
          else
          {
            v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v60 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v61 = (_QWORD *)swift_allocObject();
              v62 = j__malloc_size(v61);
              v61[2] = 0;
              v61[3] = 2 * ((uint64_t)(v62 - 32) / 72);
            }
            *((_QWORD *)v7 + 13) = v61;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v7 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v63 = *(char **)(v87 + 232);
            v64 = *(char **)(v87 + 256);
            if (v63 == v64)
            {
              v65 = *(char **)(v87 + 240);
            }
            else
            {
              sub_1B1A1059C(v64, v63);
              v64 = *(char **)(v87 + 232);
              v65 = *(char **)(v87 + 240);
              if (v65 == v64)
              {
                v65 = 0;
                v64 = 0;
                *(_QWORD *)(v87 + 232) = 0;
                *(_QWORD *)(v87 + 240) = 0;
              }
            }
            *(_QWORD *)(v87 + 248) = v65;
            *(_QWORD *)(v87 + 256) = v64;
          }
        }
        ecs_stack_allocator_pop_snapshot(v8);
        v16 = v78;
        if (v78)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v87 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v87 + 376));
        }
        swift_release();
        v15 = v84 + 1;
        if ((unsigned __int16 *)(v84 + 1) == v80)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v10 = *(unsigned int *)v9;
  v11 = *((unsigned int *)v9 + 1);
  swift_retain();
  v12 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, 0, 0, 0, (uint64_t)v7);
  if ((v13 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v8);
    v67 = 16 * (_QWORD)a1[10];
    v68 = ecs_stack_allocator_allocate(v8, v67, 16);
    v69 = (uint64_t)v68;
    if (v67)
      memset_pattern16(v68, &xmmword_1B2244E20, v67);
    sub_1B1D2D78C(v69, v67 >> 4, a2, a3, a4, a5, a6);
    ecs_stack_allocator_pop_snapshot(v8);
  }
  else
  {
    sub_1B1D2D78C(v12 + 16 * v10, v11 - v10, a2, a3, a4, a5, a6);
  }
  return swift_release();
}

uint64_t sub_1B1BEEBFC(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v92 = *((_QWORD *)v9 + 10);
    v93 = *((_QWORD *)v9 + 9);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98 = xmmword_1B2244E20;
      memset_pattern16_nocache(v27, &v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      memset_pattern16(v74, &xmmword_1B2244E20, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t sub_1B1BEF2D0(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v93 = *((_QWORD *)v9 + 9);
    v92 = *((_QWORD *)v9 + 10);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98[0] = 0;
      v98[1] = 0;
      memset_pattern16_nocache(v27, v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      bzero(v74, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t sub_1B1BEF990(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v93 = *((_QWORD *)v9 + 9);
    v92 = *((_QWORD *)v9 + 10);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for UserData4, (uint64_t)&off_1E63C5DE8, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98[0] = 0;
      v98[1] = 0;
      memset_pattern16_nocache(v27, v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for UserData4, (uint64_t)&off_1E63C5DE8, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      bzero(v74, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t sub_1B1BF0050(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v93 = *((_QWORD *)v9 + 9);
    v92 = *((_QWORD *)v9 + 10);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for UserData3, (uint64_t)&off_1E63C5BF0, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98[0] = 0;
      v98[1] = 0;
      memset_pattern16_nocache(v27, v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for UserData3, (uint64_t)&off_1E63C5BF0, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      bzero(v74, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t sub_1B1BF0710(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v93 = *((_QWORD *)v9 + 9);
    v92 = *((_QWORD *)v9 + 10);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for UserData2, (uint64_t)&off_1E63C59F8, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98[0] = 0;
      v98[1] = 0;
      memset_pattern16_nocache(v27, v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for UserData2, (uint64_t)&off_1E63C59F8, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      bzero(v74, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t sub_1B1BF0DD0(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v93 = *((_QWORD *)v9 + 9);
    v92 = *((_QWORD *)v9 + 10);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for UserData1, (uint64_t)&off_1E63C5800, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98[0] = 0;
      v98[1] = 0;
      memset_pattern16_nocache(v27, v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for UserData1, (uint64_t)&off_1E63C5800, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      bzero(v74, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t sub_1B1BF1490(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v81;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v81 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v88 = a1[7];
  if (v88 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v87 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v76 = (16 * v16) >> 4;
    if (v16 <= 0 || !v88)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v87, v76, a2, a3, a4, a5, a6, v81, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v97 = *a1;
    v96 = (uint64_t)*a1 + 41;
    v86 = v18;
    v84 = v11;
    v85 = v10;
LABEL_8:
    v19 = (unsigned int *)&v11[24 * v17];
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = *((_QWORD *)v19 + 5);
    v95 = v17;
    if (v18)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v90 = *((_QWORD *)v9 + 7);
    v91 = *((_QWORD *)v9 + 6);
    v89 = *((_QWORD *)v9 + 8);
    v92 = *((_QWORD *)v9 + 10);
    v93 = *((_QWORD *)v9 + 9);
    v25 = *((_QWORD *)v9 + 4);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    *((_QWORD *)v9 + 7) = v26;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v27 = &v87[2 * v22];
    v28 = v21 - v20;
    swift_retain();
    v29 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, 0, 0, 0, (uint64_t)v9);
    v94 = v23;
    if ((v30 & 1) != 0)
    {
      v98 = xmmword_1B2244E20;
      memset_pattern16_nocache(v27, &v98, 16 * v28);
    }
    else
    {
      memcpy(v27, (const void *)(v29 + 16 * v20), 16 * v28);
    }
    swift_release();
    v31 = *((_QWORD *)v9 + 6);
    v32 = *((_QWORD *)v9 + 8);
    if (!v32)
    {
      v58 = *((_QWORD *)v9 + 7);
      v59 = (_QWORD *)*((_QWORD *)v9 + 4);
      v62 = v90;
      v61 = v91;
      v63 = v89;
      v60 = v93;
      goto LABEL_51;
    }
    v33 = 0;
    while (1)
    {
      v35 = (uint64_t *)(v31 + 48 * v33);
      v36 = *v35;
      v37 = (void (*)(uint64_t))v35[4];
      v38 = *((_QWORD *)v9 + 9);
      if (v38)
        v39 = v36 == v38;
      else
        v39 = 0;
      if (!v39 && v97[11])
      {
        v40 = v97[9];
        v41 = (_QWORD *)(v96 + v97[8]);
        v42 = v35[2];
        v43 = v41;
        v44 = v40 >> 4;
        v45 = v96;
        if (v40 < 0x10)
          goto LABEL_31;
        while (*v43 != v36)
        {
          ++v45;
          v43 += 2;
          if (!--v44)
            goto LABEL_31;
        }
        v46 = *(unsigned __int8 *)(v45 + v97[10]);
        v47 = v46 > 5;
        v48 = (1 << v46) & 0x23;
        if (!v47 && v48 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v50 = v42;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_17;
          v51 = v41;
          v52 = v40 >> 4;
          v53 = v96;
          if (v40 >= 0x10)
          {
            while (*v51 != v50)
            {
              ++v53;
              v51 += 2;
              if (!--v52)
                goto LABEL_43;
            }
            v54 = *(unsigned __int8 *)(v53 + v97[10]);
            v47 = v54 > 5;
            v55 = (1 << v54) & 0x23;
            if (v47 || v55 == 0)
              goto LABEL_16;
LABEL_43:
            v57 = 16 * (v40 >> 4);
            while (*v41 != v50)
            {
              v41 += 2;
              v57 -= 16;
              if (!v57)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v34 = swift_retain();
      v37(v34);
      swift_release();
LABEL_17:
      if (++v33 == v32)
      {
        v58 = *((_QWORD *)v9 + 7);
        v31 = *((_QWORD *)v9 + 6);
        v59 = (_QWORD *)*((_QWORD *)v9 + 4);
        v60 = v93;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v84;
        v10 = v85;
        v62 = v90;
        v61 = v91;
        v63 = v89;
LABEL_51:
        ecs_stack_allocator_deallocate(v59, v31, 48 * v58);
        *((_QWORD *)v9 + 6) = v61;
        *((_QWORD *)v9 + 7) = v62;
        *((_QWORD *)v9 + 8) = v63;
        *((_QWORD *)v9 + 9) = v60;
        *((_QWORD *)v9 + 10) = v92;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v64 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v64, v94);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v66 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v66 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v66 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v67;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v94 + 232);
            v70 = *(char **)(v94 + 256);
            if (v69 == v70)
            {
              v71 = *(char **)(v94 + 240);
            }
            else
            {
              sub_1B1A1059C(v70, v69);
              v70 = *(char **)(v94 + 232);
              v71 = *(char **)(v94 + 240);
              if (v71 == v70)
              {
                v71 = 0;
                v70 = 0;
                *(_QWORD *)(v94 + 232) = 0;
                *(_QWORD *)(v94 + 240) = 0;
              }
            }
            *(_QWORD *)(v94 + 248) = v71;
            *(_QWORD *)(v94 + 256) = v70;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v86;
        if (v86)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 376));
        }
        swift_release();
        v17 = v95 + 1;
        if ((unsigned __int16 *)(v95 + 1) == v88)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v73 = 16 * (_QWORD)a1[10];
    v74 = ecs_stack_allocator_allocate(v10, v73, 16);
    v75 = (uint64_t)v74;
    if (v73)
      memset_pattern16(v74, &xmmword_1B2244E20, v73);
    sub_1B1BF1B64(v75, v73 >> 4, a2, a3, a4, a5, a6, v81, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v81, a8);
  }
  return swift_release();
}

uint64_t *sub_1B1BF1B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[40];
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84[8];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD v93[12];
  _BYTE v94[40];
  uint64_t v95;

  v77 = 0;
  v95 = *MEMORY[0x1E0C80C00];
  if (a1)
    v15 = (16 * a2) >> 4;
  else
    v15 = 0;
  v16 = *(_OWORD *)(a3 + 104);
  v82[0] = *(_OWORD *)(a3 + 88);
  v82[1] = v16;
  v83 = *(_QWORD *)(a3 + 120);
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226D240;
  v65 = a4;
  v66 = a5;
  v18 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v17 + 32) = a4;
  *(_QWORD *)(v17 + 40) = v18;
  swift_retain();
  sub_1B1B0FA64(v17, (uint64_t)v78);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v82);
  sub_1B1E8FCE4(a6, (uint64_t)v78, 0x200000000, v84);
  sub_1B1A18378((uint64_t)v84, (uint64_t)v93, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v93[0])
    v19 = v93[10];
  else
    v19 = 0;
  if ((a8 & 1) == 0 && (a7 & 0x8000000000000000) == 0 && a7)
  {
LABEL_29:
    sub_1B1A18378((uint64_t)v84, (uint64_t)&v85, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v85)
    {
      if (v92 <= 0)
        goto LABEL_47;
      v64 = v89;
      if (!v89)
        goto LABEL_47;
      v36 = v91;
      v37 = v91[4];
      v38 = *(unsigned __int8 *)(v90 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v79 = v85;
      v80 = v86;
      v81 = v87;
      v56 = (uint64_t)(v91 + 6);
      v58 = v88;
      v54 = v91 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v39 = 0;
      v60 = v38;
      v62 = v37;
      do
      {
        v40 = (unsigned int *)(v58 + 48 * v39);
        v41 = v40[2];
        v42 = *((_QWORD *)v40 + 5);
        v74 = v40[1];
        v76 = *v40;
        v70 = *((_QWORD *)v40 + 3);
        v72 = (uint64_t *)*((_QWORD *)v40 + 2);
        v68 = *((_QWORD *)v40 + 4);
        if (v38)
        {
          v43 = *(os_unfair_lock_s **)(v42 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v43);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v42 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v37);
        sub_1B1A18378(v56, (uint64_t)v94, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v44 = v36[4];
        v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v36[6] = ecs_stack_allocator_allocate(v44, 48 * v45, 8);
        v36[7] = v45;
        v54[1] = 0;
        v54[2] = 0;
        *v54 = 0;
        swift_release();
        v46 = sub_1B1A12038(v65, v66, v72, v70, v68, (uint64_t)v36);
        if ((_DWORD)v76 == (_DWORD)v74)
        {
          v47 = v77;
          v38 = v60;
        }
        else
        {
          v48 = (_OWORD *)(v46 + 16 * v76);
          v49 = v74 - v76;
          v47 = v77;
          v38 = v60;
          do
          {
            v50 = 0uLL;
            if (v41 / a7 < v15)
              v50 = *(_OWORD *)(a1 + 16 * (v41 / a7));
            *v48++ = v50;
            ++v41;
            --v49;
          }
          while (v49);
        }
        sub_1B1F05D48(v36, (unsigned __int16 **)&v79, (uint64_t)v94);
        v77 = v47;
        sub_1B1F03804((char *)v42);
        v37 = v62;
        ecs_stack_allocator_pop_snapshot(v62);
        if ((v38 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 376));
        }
        swift_release();
        ++v39;
      }
      while (v39 != v64);
      goto LABEL_46;
    }
    return (uint64_t *)sub_1B19ED720((uint64_t)v78);
  }
  if (*(_QWORD *)(a9 + 80) >= v19)
  {
    a7 = 1;
    goto LABEL_29;
  }
  v52 = *(_QWORD *)(a9 + 80);
  sub_1B1A18378((uint64_t)v84, (uint64_t)&v85, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!(_QWORD)v85)
    return (uint64_t *)sub_1B19ED720((uint64_t)v78);
  if (v92 <= 0)
    goto LABEL_47;
  v63 = v89;
  if (!v89)
    goto LABEL_47;
  v20 = v91;
  v21 = v91[4];
  v22 = *(unsigned __int8 *)(v90 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v79 = v85;
  v80 = v86;
  v81 = v87;
  v57 = (uint64_t)(v91 + 6);
  v59 = v88;
  v55 = v91 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v23 = 0;
  v24 = 0;
  v25 = -1;
  v53 = v22;
  v61 = v21;
  do
  {
    v26 = (unsigned int *)(v59 + 48 * v24);
    v27 = *((_QWORD *)v26 + 5);
    v73 = *v26;
    v75 = v26[1];
    v69 = *((_QWORD *)v26 + 3);
    v71 = (uint64_t *)*((_QWORD *)v26 + 2);
    v67 = *((_QWORD *)v26 + 4);
    if (v22)
    {
      v28 = *(os_unfair_lock_s **)(v27 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v28);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v21);
    sub_1B1A18378(v57, (uint64_t)v94, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v29 = v20[4];
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v20[6] = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
    v20[7] = v30;
    v55[1] = 0;
    v55[2] = 0;
    *v55 = 0;
    swift_release();
    v31 = sub_1B1A12038(v65, v66, v71, v69, v67, (uint64_t)v20);
    if ((_DWORD)v73 == (_DWORD)v75)
    {
      v32 = v77;
      v22 = v53;
    }
    else
    {
      v33 = v19 + v73;
      v34 = v75 - v73;
      v35 = (_OWORD *)(v31 + 16 * v73);
      v32 = v77;
      v22 = v53;
      do
      {
        if (!v23)
        {
          ++v25;
          v23 = v19 / (v52 - v25);
        }
        *v35++ = *(_OWORD *)(a1 + 16 * v25);
        --v19;
        --v23;
        --v34;
      }
      while (v34);
      v19 = v33 - v75;
    }
    sub_1B1F05D48(v20, (unsigned __int16 **)&v79, (uint64_t)v94);
    v77 = v32;
    sub_1B1F03804((char *)v27);
    v21 = v61;
    ecs_stack_allocator_pop_snapshot(v61);
    if ((v22 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 376));
    }
    swift_release();
    ++v24;
  }
  while (v24 != v63);
LABEL_46:
  sub_1B19ED748(v84);
LABEL_47:
  sub_1B19ED720((uint64_t)v78);
  return sub_1B19ED748(v84);
}

uint64_t sub_1B1BF21DC(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  _QWORD *v71;
  size_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char v85;
  __int128 v88;
  unsigned __int16 *v89;
  uint64_t v90;
  int v91;
  _QWORD *v92;
  unsigned __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v85 = a7 & 1;
  v9 = a1[9];
  v10 = *((_QWORD *)v9 + 4);
  v11 = a1[5];
  v93 = a1[7];
  if (v93 != (unsigned __int16 *)1)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v16 = (uint64_t)a1[10];
    v92 = ecs_stack_allocator_allocate(v10, 16 * v16, 16);
    v80 = (16 * v16) >> 4;
    if (v16 <= 0 || !v93)
    {
LABEL_65:
      sub_1B1BF1B64((uint64_t)v92, v80, a2, a3, a4, a5, a6, v85, a8);
      return ecs_stack_allocator_pop_snapshot(v10);
    }
    v17 = 0;
    v18 = *((unsigned __int8 *)a1[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v102 = *a1;
    v101 = (uint64_t)*a1 + 41;
    __asm { FMOV            V0.4S, #1.0 }
    v88 = _Q0;
    v91 = v18;
    v89 = v11;
    v90 = v10;
LABEL_8:
    v23 = (unsigned int *)&v11[24 * v17];
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    v27 = *((_QWORD *)v23 + 5);
    v100 = v17;
    if (v18)
    {
      v28 = *(os_unfair_lock_s **)(v27 + 376);
      swift_retain();
      os_unfair_lock_lock(v28);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    v95 = *((_QWORD *)v9 + 7);
    v96 = *((_QWORD *)v9 + 6);
    v94 = *((_QWORD *)v9 + 8);
    v97 = *((_QWORD *)v9 + 10);
    v98 = *((_QWORD *)v9 + 9);
    v29 = *((_QWORD *)v9 + 4);
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v9 + 6) = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
    *((_QWORD *)v9 + 7) = v30;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    swift_release();
    v31 = &v92[2 * v26];
    v32 = v25 - v24;
    swift_retain();
    v33 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, 0, 0, 0, (uint64_t)v9);
    v99 = v27;
    if ((v34 & 1) != 0)
    {
      v103 = v88;
      memset_pattern16_nocache(v31, &v103, 16 * v32);
    }
    else
    {
      memcpy(v31, (const void *)(v33 + 16 * v24), 16 * v32);
    }
    swift_release();
    v35 = *((_QWORD *)v9 + 6);
    v36 = *((_QWORD *)v9 + 8);
    if (!v36)
    {
      v62 = *((_QWORD *)v9 + 7);
      v63 = (_QWORD *)*((_QWORD *)v9 + 4);
      v66 = v95;
      v65 = v96;
      v67 = v94;
      v64 = v98;
      goto LABEL_51;
    }
    v37 = 0;
    while (1)
    {
      v39 = (uint64_t *)(v35 + 48 * v37);
      v40 = *v39;
      v41 = (void (*)(uint64_t))v39[4];
      v42 = *((_QWORD *)v9 + 9);
      if (v42)
        _ZF = v40 == v42;
      else
        _ZF = 0;
      if (!_ZF && v102[11])
      {
        v44 = v102[9];
        v45 = (_QWORD *)(v101 + v102[8]);
        v46 = v39[2];
        v47 = v45;
        v48 = v44 >> 4;
        v49 = v101;
        if (v44 < 0x10)
          goto LABEL_31;
        while (*v47 != v40)
        {
          ++v49;
          v47 += 2;
          if (!--v48)
            goto LABEL_31;
        }
        v50 = *(unsigned __int8 *)(v49 + v102[10]);
        v51 = v50 > 5;
        v52 = (1 << v50) & 0x23;
        if (!v51 && v52 != 0)
        {
LABEL_31:
          if (swift_conformsToProtocol2())
            v54 = v46;
          else
            v54 = 0;
          if (!v54)
            goto LABEL_17;
          v55 = v45;
          v56 = v44 >> 4;
          v57 = v101;
          if (v44 >= 0x10)
          {
            while (*v55 != v54)
            {
              ++v57;
              v55 += 2;
              if (!--v56)
                goto LABEL_43;
            }
            v58 = *(unsigned __int8 *)(v57 + v102[10]);
            v51 = v58 > 5;
            v59 = (1 << v58) & 0x23;
            if (v51 || v59 == 0)
              goto LABEL_16;
LABEL_43:
            v61 = 16 * (v44 >> 4);
            while (*v45 != v54)
            {
              v45 += 2;
              v61 -= 16;
              if (!v61)
                goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_16:
      v38 = swift_retain();
      v41(v38);
      swift_release();
LABEL_17:
      if (++v37 == v36)
      {
        v62 = *((_QWORD *)v9 + 7);
        v35 = *((_QWORD *)v9 + 6);
        v63 = (_QWORD *)*((_QWORD *)v9 + 4);
        v64 = v98;
        if (*((uint64_t *)v9 + 8) >= 1)
          swift_arrayDestroy();
        v11 = v89;
        v10 = v90;
        v66 = v95;
        v65 = v96;
        v67 = v94;
LABEL_51:
        ecs_stack_allocator_deallocate(v63, v35, 48 * v62);
        *((_QWORD *)v9 + 6) = v65;
        *((_QWORD *)v9 + 7) = v66;
        *((_QWORD *)v9 + 8) = v67;
        *((_QWORD *)v9 + 9) = v64;
        *((_QWORD *)v9 + 10) = v97;
        if (*(_QWORD *)(*((_QWORD *)v9 + 13) + 16))
        {
          v68 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v68, v99);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v70 = *((_QWORD *)v9 + 13);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v70 + 16));
          }
          else
          {
            v71 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v70 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v71 = (_QWORD *)swift_allocObject();
              v72 = j__malloc_size(v71);
              v71[2] = 0;
              v71[3] = 2 * ((uint64_t)(v72 - 32) / 72);
            }
            *((_QWORD *)v9 + 13) = v71;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(*((_QWORD *)v9 + 2) + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v73 = *(char **)(v99 + 232);
            v74 = *(char **)(v99 + 256);
            if (v73 == v74)
            {
              v75 = *(char **)(v99 + 240);
            }
            else
            {
              sub_1B1A1059C(v74, v73);
              v74 = *(char **)(v99 + 232);
              v75 = *(char **)(v99 + 240);
              if (v75 == v74)
              {
                v75 = 0;
                v74 = 0;
                *(_QWORD *)(v99 + 232) = 0;
                *(_QWORD *)(v99 + 240) = 0;
              }
            }
            *(_QWORD *)(v99 + 248) = v75;
            *(_QWORD *)(v99 + 256) = v74;
          }
        }
        ecs_stack_allocator_pop_snapshot(v10);
        v18 = v91;
        if (v91)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 376));
        }
        swift_release();
        v17 = v100 + 1;
        if ((unsigned __int16 *)(v100 + 1) == v93)
          goto LABEL_65;
        goto LABEL_8;
      }
    }
  }
  v12 = *(unsigned int *)v11;
  v13 = *((unsigned int *)v11 + 1);
  swift_retain();
  v14 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, 0, 0, 0, (uint64_t)v9);
  if ((v15 & 1) != 0)
  {
    ecs_stack_allocator_push_snapshot(v10);
    v77 = 16 * (_QWORD)a1[10];
    v78 = ecs_stack_allocator_allocate(v10, v77, 16);
    v79 = (uint64_t)v78;
    if (v77)
      memset_pattern16(v78, &xmmword_1B2244E30, v77);
    sub_1B1BF1B64(v79, v77 >> 4, a2, a3, a4, a5, a6, v85, a8);
    ecs_stack_allocator_pop_snapshot(v10);
  }
  else
  {
    sub_1B1BF1B64(v14 + 16 * v12, v13 - v12, a2, a3, a4, a5, a6, v85, a8);
  }
  return swift_release();
}

void sub_1B1BF28AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1B2229A18();
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for AABB()
{
  return &type metadata for AABB;
}

double sub_1B1BF2908(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vsubq_f32(a1, a2).u64[0];
  return result;
}

double sub_1B1BF2910(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(a1, a2).u64[0];
  return result;
}

__n128 sub_1B1BF2918(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  unsigned int v7;
  __n128 v8;
  unsigned int v9;
  float32x4_t v11;

  v11 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  v5 = vmulq_f32(a2, a2);
  v6 = vmulq_f32(a3, a3);
  *(float *)&v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  v8 = (__n128)vmulq_f32(a4, a4);
  *(float *)&v9 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32((float32x4_t)v8, (float32x4_t)vdupq_lane_s32((int32x2_t)v8.n128_u64[0], 1))).f32[0]);
  v8.n128_u64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0])), v7);
  v8.n128_u64[1] = v9;
  sub_1B1BBE134(v8);
  return (__n128)v11;
}

uint64_t sub_1B1BF29BC()
{
  return 0x736E6169646172;
}

uint64_t sub_1B1BF29D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E6169646172 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1BF2A68()
{
  sub_1B1BF464C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BF2A90()
{
  sub_1B1BF464C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BF2AB8@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _DWORD *v15;

  v15 = a2;
  sub_1B19F8E54(0, &qword_1EEF5C308, (uint64_t (*)(void))sub_1B1BF464C, (uint64_t)&type metadata for AngleF.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v14 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BF464C();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v15;
  sub_1B22297F0();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v12;
  return result;
}

uint64_t sub_1B1BF2C04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF5C318, (uint64_t (*)(void))sub_1B1BF464C, (uint64_t)&type metadata for AngleF.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BF464C();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

BOOL sub_1B1BF2D0C(float *a1, float *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B1BF2D20(float *a1, float *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B1BF2D34(float *a1, float *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B1BF2D48(float *a1, float *a2)
{
  return *a2 < *a1;
}

BOOL sub_1B1BF2D5C(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B1BF2D70()
{
  return 0x656761726F7473;
}

uint64_t sub_1B1BF2D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656761726F7473 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1BF2E1C()
{
  sub_1B1BF4608();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BF2E44()
{
  sub_1B1BF4608();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BF2E6C@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  _DWORD *v14;

  v14 = a2;
  sub_1B19F8E54(0, &qword_1EEF5C2F0, (uint64_t (*)(void))sub_1B1BF4608, (uint64_t)&type metadata for ColorU8.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BF4608();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v14;
  v11 = sub_1B2229868();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v11;
  return result;
}

uint64_t sub_1B1BF2FAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF5C300, (uint64_t (*)(void))sub_1B1BF4608, (uint64_t)&type metadata for ColorU8.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BF4608();
  sub_1B222A180();
  sub_1B22299AC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

BOOL sub_1B1BF30AC(__n128 a1)
{
  int32x2_t v1;
  int32x2_t v2;

  v1 = vdup_n_s32(0x7F800000u);
  v2 = vceq_s32((int32x2_t)vand_s8((int8x8_t)vrev64_s32((int32x2_t)a1.n128_u64[0]), (int8x8_t)v1), v1);
  return ((v2.i32[1] | v2.i32[0]) & 1) == 0 && (~a1.n128_u32[2] & 0x7F800000) != 0;
}

BOOL sub_1B1BF30E8(__n128 a1)
{
  int32x2_t v1;

  v1 = vceqz_s32((int32x2_t)(*(_QWORD *)&vrev64_s32((int32x2_t)a1.n128_u64[0]) & 0x7FFFFFFF7FFFFFFFLL));
  if ((v1.i32[1] & v1.i32[0] & 1) == 0)
    return 0;
  if ((a1.n128_u32[2] & 0x7F800000) != 0)
    return 0;
  return (a1.n128_u32[2] & 0x7FFFFF) == 0;
}

float32x2_t sub_1B1BF3124(float a1, float32x4_t a2, float32x4_t a3)
{
  return vadd_f32(*(float32x2_t *)a2.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(a2, a3), a2), a1));
}

double sub_1B1BF314C(float32x4_t a1, double a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  double result;

  *(_QWORD *)&result = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a6, a5, a1, 2), a4, *(float32x2_t *)a1.f32, 1), a3, a1.f32[0]).u64[0];
  return result;
}

BOOL sub_1B1BF3184(__n128 *a1, __n128 *a2)
{
  return sub_1B1BF3DFC(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1B1BF3190()
{
  sub_1B2228890();
  sub_1B2228C98();
  sub_1B2228890();
  sub_1B2228C98();
  sub_1B2228890();
  sub_1B2228C98();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228C98();
  sub_1B2228890();
  sub_1B2228C98();
  sub_1B2228890();
  sub_1B2228C98();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0x3A206E696DLL;
}

uint64_t sub_1B1BF335C()
{
  return sub_1B1BF3190();
}

uint64_t sub_1B1BF3364(char *a1, char *a2)
{
  return sub_1B1F990B4(*a1, *a2);
}

uint64_t sub_1B1BF3370()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BF33EC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BF3444()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BF34BC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1BF3518(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7265746E6563;
  if (*v1)
    v2 = 0x657A6953666C6168;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1BF3554()
{
  _BYTE *v0;

  if (*v0)
    return 0x657A6953666C6168;
  else
    return 0x7265746E6563;
}

uint64_t sub_1B1BF358C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1BF35EC()
{
  sub_1B1BF4358();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BF3614()
{
  sub_1B1BF4358();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BF363C(_QWORD *a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v12;
  __n128 v13;
  char v14;
  __n128 v15;

  v12 = a3;
  v13 = a2;
  sub_1B19F8E54(0, &qword_1EEF5C2E0, (uint64_t (*)(void))sub_1B1BF4358, (uint64_t)&type metadata for AABB.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BF4358();
  sub_1B222A180();
  v15 = v13;
  v14 = 0;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1BF439C((unint64_t *)&qword_1ED4B7318, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  if (!v3)
  {
    v15 = v12;
    v14 = 1;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1BF37CC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = sub_1B1BF4180(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_1B1BF37F4(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1BF363C(a1, *v1, v1[1]);
}

unint64_t sub_1B1BF3810()
{
  unint64_t result;

  result = qword_1EEF5C2D8;
  if (!qword_1EEF5C2D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22827B4, &type metadata for AngleF);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2D8);
  }
  return result;
}

float32x4_t sub_1B1BF3854(float32x4_t *a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t result;

  v7 = vsubq_f32(a6, a7);
  v8 = (int32x4_t)vaddq_f32(a7, a7);
  v9 = (float32x4_t)vdupq_laneq_s32(v8, 3);
  v9.i32[0] = v8.i32[0];
  v10 = vaddq_f32(v7, v9);
  v11 = vaddq_f32(v7, (float32x4_t)vtrn2q_s32(vuzp2q_s32(v8, v8), v8));
  v12 = vaddq_f32(v9, v11);
  v13.i64[1] = v8.i64[1];
  v13.i32[0] = v8.i32[3];
  v13.i32[1] = v8.i32[3];
  v14 = vaddq_f32(v7, v13);
  v15 = vaddq_f32(v13, v10);
  v16 = vaddq_f32(v13, v11);
  v17 = vaddq_f32(v13, v12);
  *a1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v7.f32[0]), a3, *(float32x2_t *)v7.f32, 1), a4, v7, 2), a5, v7, 3);
  a1[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v10.f32[0]), a3, *(float32x2_t *)v10.f32, 1), a4, v10, 2), a5, v10, 3);
  a1[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v11.f32[0]), a3, *(float32x2_t *)v11.f32, 1), a4, v11, 2), a5, v11, 3);
  a1[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v12.f32[0]), a3, *(float32x2_t *)v12.f32, 1), a4, v12, 2), a5, v12, 3);
  a1[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v14.f32[0]), a3, *(float32x2_t *)v14.f32, 1), a4, v14, 2), a5, v14, 3);
  a1[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v15.f32[0]), a3, *(float32x2_t *)v15.f32, 1), a4, v15, 2), a5, v15, 3);
  v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v16.f32[0]), a3, *(float32x2_t *)v16.f32, 1), a4, v16, 2), a5, v16, 3);
  result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v17.f32[0]), a3, *(float32x2_t *)v17.f32, 1), a4, v17, 2), a5, v17, 3);
  a1[6] = v18;
  a1[7] = result;
  return result;
}

double sub_1B1BF3928(float32x4_t a1, int32x4_t a2, int8x16_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  int32x2_t v5;
  float32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;

  v3 = vmulq_f32(a1, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a3, a3, 0xCuLL), a3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), a3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL)));
  v4 = vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1));
  v5 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v4).u64[0];
  if (*(float *)v5.i32 != 0.0)
  {
    v6 = a1;
    v6.f32[0] = -a1.f32[3];
    v7 = a2;
    *(float *)v7.i32 = -*(float *)&a2.i32[3];
    v8 = (int32x4_t)a3;
    *(float *)v8.i32 = -*(float *)&a3.i32[3];
    v9 = (int32x4_t)vmulq_f32(v6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL)));
    v10 = a1;
    v10.f32[1] = -a1.f32[3];
    v11 = a2;
    *(float *)&v11.i32[1] = -*(float *)&a2.i32[3];
    v12 = (int32x4_t)a3;
    *(float *)&v12.i32[1] = -*(float *)&a3.i32[3];
    v13 = (int32x4_t)vmulq_f32(v10, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL), (int8x16_t)v12, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), (int8x16_t)v11, 8uLL)));
    a1.f32[2] = -a1.f32[3];
    *(float *)&a2.i32[2] = -*(float *)&a2.i32[3];
    *(float *)&a3.i32[2] = -*(float *)&a3.i32[3];
    *(float32x2_t *)v4.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v9, v13), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v13.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v13.i8)));
    a1 = vmulq_f32(a1, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a3, a3, 0xCuLL), a3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), a3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL)));
    v4.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)a1, 2), vaddq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1.f32, 1))).u32[0];
    a1.i64[0] = vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(v5, 0)).u64[0];
  }
  return *(double *)a1.i64;
}

uint64_t sub_1B1BF3AAC(float32x4_t a1, float32x4_t a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x2_t v36;
  int32x2_t v37;
  __int32 v38;
  float32x4_t v39;

  v3 = v2[1];
  v4 = v2[2];
  v5 = v2[3];
  v6 = (int32x4_t)vmulq_f32(*v2, a1);
  v7 = (int32x4_t)vmulq_f32(v3, a1);
  v8 = (int32x4_t)vmulq_f32(v4, a1);
  v9 = (int32x4_t)vmulq_f32(v5, a1);
  v10 = vzip1q_s32(v6, v8);
  v11 = vzip2q_s32(v6, v8);
  v12 = vzip1q_s32(v7, v9);
  v13 = vzip2q_s32(v7, v9);
  v14 = vaddq_f32((float32x4_t)vzip2q_s32(v11, v13), vaddq_f32((float32x4_t)vzip1q_s32(v11, v13), vaddq_f32((float32x4_t)vzip1q_s32(v10, v12), (float32x4_t)vzip2q_s32(v10, v12))));
  v15 = (int32x4_t)vmulq_f32(vabsq_f32(*v2), a2);
  v16 = (int32x4_t)vmulq_f32(vabsq_f32(v3), a2);
  v17 = (int32x4_t)vmulq_f32(vabsq_f32(v4), a2);
  v18 = (int32x4_t)vmulq_f32(vabsq_f32(v5), a2);
  v19 = vzip1q_s32(v15, v17);
  v20 = vzip2q_s32(v15, v17);
  v21 = vzip1q_s32(v16, v18);
  v22 = vzip2q_s32(v16, v18);
  v23 = (int8x16_t)vmaxnmq_f32(vsubq_f32(vabsq_f32(v14), vaddq_f32((float32x4_t)vzip2q_s32(v20, v22), vaddq_f32((float32x4_t)vzip1q_s32(v20, v22), vaddq_f32((float32x4_t)vzip1q_s32(v19, v21), (float32x4_t)vzip2q_s32(v19, v21))))), (float32x4_t)0);
  v22.i64[0] = 0x8000000080000000;
  v22.i64[1] = 0x8000000080000000;
  v24 = (float32x4_t)vbslq_s8((int8x16_t)v22, (int8x16_t)v14, v23);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcltzq_f32(v24))) & 1) != 0)
    return 1;
  v27 = v2[4];
  v26 = v2[5];
  v28 = (int32x4_t)vmulq_f32(v27, a1);
  v29 = (int32x4_t)vmulq_f32(v26, a1);
  v30 = (int8x16_t)vzip1q_s32(v28, v29);
  v31 = (int8x16_t)vzip2q_s32(v28, v29);
  *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vadd_f32(*(float32x2_t *)v31.i8, vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))));
  v32 = (int32x4_t)vmulq_f32(vabsq_f32(v27), a2);
  v33 = (int32x4_t)vmulq_f32(vabsq_f32(v26), a2);
  v34 = (int8x16_t)vzip1q_s32(v32, v33);
  v35 = (int8x16_t)vzip2q_s32(v32, v33);
  v36 = (float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, *(int8x8_t *)v31.i8, (int8x8_t)vmaxnm_f32(vsub_f32(vabs_f32(*(float32x2_t *)v31.i8), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vadd_f32(*(float32x2_t *)v35.i8, vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL))))), 0));
  v37 = vcltz_f32(v36);
  v38 = v37.i32[1];
  if (v37.i32[1] >= v37.i32[0])
    v38 = v37.i32[0];
  if (v38 < 0)
    return 1;
  *(float32x2_t *)v39.f32 = vmul_f32(*(float32x2_t *)v24.f32, v36);
  v39.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  return 2 * (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v39))) & 1u);
}

void sub_1B1BF3C1C(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;

  v24 = *(int32x4_t *)v1;
  v20 = *((int32x4_t *)v1 + 2);
  v21 = *((int32x4_t *)v1 + 1);
  v23 = *((int32x4_t *)v1 + 3);
  v22 = *((float32x4_t *)v1 + 4);
  v19 = *((float32x4_t *)v1 + 5);
  sub_1B1BF3928(v19, v20, (int8x16_t)v21);
  *a1 = v3;
  a1[1] = v4;
  sub_1B1BF3928(v19, v24, (int8x16_t)v20);
  a1[2] = v5;
  a1[3] = v6;
  sub_1B1BF3928(v19, v21, (int8x16_t)v23);
  a1[4] = v7;
  a1[5] = v8;
  sub_1B1BF3928(v19, v23, (int8x16_t)v24);
  a1[6] = v9;
  a1[7] = v10;
  sub_1B1BF3928(v22, v20, (int8x16_t)v21);
  a1[8] = v11;
  a1[9] = v12;
  sub_1B1BF3928(v22, v24, (int8x16_t)v20);
  a1[10] = v13;
  a1[11] = v14;
  sub_1B1BF3928(v22, v21, (int8x16_t)v23);
  a1[12] = v15;
  a1[13] = v16;
  sub_1B1BF3928(v22, v23, (int8x16_t)v24);
  a1[14] = v17;
  a1[15] = v18;
}

float32x4_t sub_1B1BF3CE4(CGColor *a1)
{
  float32x4_t *v1;
  float32x4_t *v2;
  CGColorSpace *v4;
  const __CFString *v5;
  CGColorSpaceRef v6;
  CGColorSpaceRef v7;
  CGColorSpace *v8;
  char v9;
  CGColorRef CopyByMatchingToColorSpace;
  CGColorSpace *v11;
  uint64_t v12;
  float32x4_t result;
  float64x2_t v14;
  float64x2_t v15;

  v2 = v1;
  v4 = CGColorGetColorSpace(a1);
  v5 = (const __CFString *)*MEMORY[0x1E0C9DA00];
  v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  v7 = v6;
  if (!v4)
  {

    goto LABEL_5;
  }
  type metadata accessor for CGColorSpace(0);
  sub_1B1BF43FC();
  v8 = v4;
  v9 = sub_1B2228290();

  if ((v9 & 1) == 0)
  {
LABEL_5:
    v11 = CGColorSpaceCreateWithName(v5);
    CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(v11, kCGRenderingIntentDefault, a1, 0);

    goto LABEL_6;
  }
  CopyByMatchingToColorSpace = a1;
LABEL_6:
  v12 = sub_1B2228E54();
  v14 = *(float64x2_t *)(v12 + 32);
  v15 = *(float64x2_t *)(v12 + 48);

  swift_bridgeObjectRelease();
  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v15);
  *v2 = result;
  return result;
}

BOOL sub_1B1BF3DFC(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  BOOL v5;
  _BOOL8 result;
  float v7;
  float v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;

  v4 = 0;
  while (1)
  {
    v14 = a1;
    v7 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v15 = a3;
    v8 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v5 = v7 == v8;
    if (v4 == 3)
      break;
    while (1)
    {
      ++v4;
      if (v5)
        break;
      v5 = 0;
      result = 0;
      if (v4 == 3)
        return result;
    }
  }
  if (v7 != v8)
    return 0;
  v9 = 0;
  while (1)
  {
    v12 = a2;
    v11 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v13 = a4;
    v10 = v11 == *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    result = v10;
    if (v9 == 3)
      break;
    while (1)
    {
      ++v9;
      if (v10)
        break;
      v10 = 0;
      result = 0;
      if (v9 == 3)
        return result;
    }
  }
  return result;
}

unint64_t sub_1B1BF3ED8(unint64_t result, unint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0
    || HIDWORD(result)
    || (a2 & 0x8000000000000000) != 0
    || HIDWORD(a2)
    || (a3 & 0x8000000000000000) != 0
    || HIDWORD(a3))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  return result;
}

simd_float4 sub_1B1BF3FA8(int a1, int8x16_t a2, int8x16_t a3)
{
  simd_float4 v3;
  int32x4_t v4;
  simd_float4 result;
  float32x4_t v6;
  unsigned __int32 v7;

  v7 = a2.i32[0];
  *(float *)a2.i32 = (float)a1;
  a3.i32[0] = BYTE1(a1);
  a3.i32[1] = BYTE2(a1);
  *(float32x2_t *)a3.i8 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a3.i8, (int8x8_t)0xFF000000FFLL));
  v6 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a2, a2, 4uLL), a3, 0xCuLL), (float32x4_t)vdupq_n_s32(0x3B808081u));
  v3 = (simd_float4)vdivq_f32(vaddq_f32(v6, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
  v3.i32[3] = 0;
  result = _simd_pow_f4(v3, (simd_float4)xmmword_1B2268F30);
  v4 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v6);
  v4.i32[3] = 0;
  result.i64[0] = vbslq_s8((int8x16_t)vcltzq_s32(v4), (int8x16_t)vdivq_f32(v6, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)result).u64[0];
  result.i32[3] = v7;
  return result;
}

double sub_1B1BF4070(CGColor *a1)
{
  CGColorSpace *v2;
  const __CFString *v3;
  CGColorSpaceRef v4;
  CGColorSpaceRef v5;
  CGColorSpace *v6;
  char v7;
  CGColorRef CopyByMatchingToColorSpace;
  CGColorSpace *v9;
  uint64_t v10;
  double result;
  float64x2_t v12;
  float64x2_t v13;

  v2 = CGColorGetColorSpace(a1);
  v3 = (const __CFString *)*MEMORY[0x1E0C9DA00];
  v4 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  v5 = v4;
  if (!v2)
  {

    goto LABEL_5;
  }
  type metadata accessor for CGColorSpace(0);
  sub_1B1BF43FC();
  v6 = v2;
  v7 = sub_1B2228290();

  if ((v7 & 1) == 0)
  {
LABEL_5:
    v9 = CGColorSpaceCreateWithName(v3);
    CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(v9, kCGRenderingIntentDefault, a1, 0);

    goto LABEL_6;
  }
  CopyByMatchingToColorSpace = a1;
LABEL_6:
  v10 = sub_1B2228E54();
  v12 = *(float64x2_t *)(v10 + 32);
  v13 = *(float64x2_t *)(v10 + 48);

  swift_bridgeObjectRelease();
  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v13).u64[0];
  return result;
}

uint64_t sub_1B1BF4180(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  char v13;

  sub_1B19F8E54(0, &qword_1ED4BAC58, (uint64_t (*)(void))sub_1B1BF4358, (uint64_t)&type metadata for AABB.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1BF4358();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    LOBYTE(v11) = 0;
    sub_1B1BF439C((unint64_t *)&qword_1ED4B7330, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    v10[1] = v12;
    v13 = 1;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10[0] = v11;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B1BF4358()
{
  unint64_t result;

  result = qword_1ED4B9DB0;
  if (!qword_1ED4B9DB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22829F8, &type metadata for AABB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9DB0);
  }
  return result;
}

uint64_t sub_1B1BF439C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1BF43FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B79B8;
  if (!qword_1ED4B79B8)
  {
    type metadata accessor for CGColorSpace(255);
    result = MEMORY[0x1B5E23E74](&unk_1B226C544, v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B79B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AABB.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1BF4490 + 4 * byte_1B22826FD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1BF44C4 + 4 * asc_1B22826F8[v4]))();
}

uint64_t sub_1B1BF44C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BF44CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1BF44D4);
  return result;
}

uint64_t sub_1B1BF44E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1BF44E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1BF44EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1BF44F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AABB.CodingKeys()
{
  return &type metadata for AABB.CodingKeys;
}

ValueMetadata *type metadata accessor for ColorU8()
{
  return &type metadata for ColorU8;
}

ValueMetadata *type metadata accessor for AngleF()
{
  return &type metadata for AngleF;
}

unint64_t sub_1B1BF4534()
{
  unint64_t result;

  result = qword_1EEF5C2E8;
  if (!qword_1EEF5C2E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282980, &type metadata for AABB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2E8);
  }
  return result;
}

unint64_t sub_1B1BF457C()
{
  unint64_t result;

  result = qword_1ED4B9DC0;
  if (!qword_1ED4B9DC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22828B8, &type metadata for AABB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9DC0);
  }
  return result;
}

unint64_t sub_1B1BF45C4()
{
  unint64_t result;

  result = qword_1ED4B9DB8;
  if (!qword_1ED4B9DB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22828E0, &type metadata for AABB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9DB8);
  }
  return result;
}

unint64_t sub_1B1BF4608()
{
  unint64_t result;

  result = qword_1EEF5C2F8;
  if (!qword_1EEF5C2F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282C24, &type metadata for ColorU8.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C2F8);
  }
  return result;
}

unint64_t sub_1B1BF464C()
{
  unint64_t result;

  result = qword_1EEF5C310;
  if (!qword_1EEF5C310)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282BD4, &type metadata for AngleF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C310);
  }
  return result;
}

ValueMetadata *type metadata accessor for AngleF.CodingKeys()
{
  return &type metadata for AngleF.CodingKeys;
}

uint64_t _s3VFX6AngleFV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1BF46E4 + 4 * byte_1B2282702[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1BF4704 + 4 * byte_1B2282707[v4]))();
}

_BYTE *sub_1B1BF46E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1BF4704(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1BF470C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1BF4714(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1BF471C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1BF4724(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ColorU8.CodingKeys()
{
  return &type metadata for ColorU8.CodingKeys;
}

__n128 initializeWithCopy for Torus(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StencilDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StencilDescriptor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Torus()
{
  return &type metadata for Torus;
}

ValueMetadata *type metadata accessor for Cylinder()
{
  return &type metadata for Cylinder;
}

ValueMetadata *type metadata accessor for Sphere()
{
  return &type metadata for Sphere;
}

ValueMetadata *type metadata accessor for Ray()
{
  return &type metadata for Ray;
}

unint64_t sub_1B1BF47EC()
{
  unint64_t result;

  result = qword_1EEF5C320;
  if (!qword_1EEF5C320)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282AF4, &type metadata for ColorU8.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C320);
  }
  return result;
}

unint64_t sub_1B1BF4834()
{
  unint64_t result;

  result = qword_1EEF5C328;
  if (!qword_1EEF5C328)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282BAC, &type metadata for AngleF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C328);
  }
  return result;
}

unint64_t sub_1B1BF487C()
{
  unint64_t result;

  result = qword_1EEF5C330;
  if (!qword_1EEF5C330)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282B1C, &type metadata for AngleF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C330);
  }
  return result;
}

unint64_t sub_1B1BF48C4()
{
  unint64_t result;

  result = qword_1EEF5C338;
  if (!qword_1EEF5C338)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282B44, &type metadata for AngleF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C338);
  }
  return result;
}

unint64_t sub_1B1BF490C()
{
  unint64_t result;

  result = qword_1EEF5C340;
  if (!qword_1EEF5C340)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282A64, &type metadata for ColorU8.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C340);
  }
  return result;
}

unint64_t sub_1B1BF4954()
{
  unint64_t result;

  result = qword_1EEF5C348[0];
  if (!qword_1EEF5C348[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282A8C, &type metadata for ColorU8.CodingKeys);
    atomic_store(result, qword_1EEF5C348);
  }
  return result;
}

uint64_t sub_1B1BF499C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _QWORD *v26;
  uint64_t v27;

  v17 = *a9;
  v18 = *a10;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_BYTE *)(v16 + 112) = 1;
  *(_QWORD *)(v16 + 128) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_QWORD *)(v16 + 120) = 0;
  *(_QWORD *)(v16 + 160) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v16 + 205) = 16777472;
  *(_QWORD *)(v16 + 216) = 0;
  v19 = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a9;
  *(_QWORD *)(v16 + 40) = v19;
  *(_QWORD *)(v16 + 48) = 0;
  *(_BYTE *)(v16 + 56) = 1;
  *(_WORD *)(v16 + 58) = a15 | 0x480;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 144) = a11;
  *(_QWORD *)(v16 + 152) = a12;
  v20 = *(double *)&a3;
  v21 = v20;
  if ((a4 & 1) != 0)
    v21 = 0.0;
  *(float *)(v16 + 184) = v21;
  *(_BYTE *)(v16 + 188) = a4 & 1;
  v22 = *(double *)&a5;
  v23 = v22;
  if ((a6 & 1) != 0)
    v23 = 0.0;
  *(float *)(v16 + 192) = v23;
  *(_BYTE *)(v16 + 196) = a6 & 1;
  v24 = *(double *)&a7;
  v25 = v24;
  if ((a8 & 1) != 0)
    v25 = 0.0;
  *(float *)(v16 + 200) = v25;
  *(_BYTE *)(v16 + 204) = a8 & 1;
  *(_WORD *)(v16 + 210) = a15 | 0x480;
  *(_QWORD *)(v16 + 168) = a13;
  *(_QWORD *)(v16 + 176) = a14;
  *(_QWORD *)(v16 + 80) = a10;
  *(_QWORD *)(v16 + 88) = &off_1E63754E8;
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = *(_QWORD *)(v17 + *MEMORY[0x1E0DEC5B8]);
  v26[3] = a16;
  v26[4] = a10;
  v27 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v16 + 64) = sub_1B1BF6FF0;
  *(_QWORD *)(v16 + 72) = v26;
  swift_retain();
  sub_1B19E5A18(v27);
  return v16;
}

uint64_t sub_1B1BF4AEC()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1B19E5A18(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease();
  swift_release();
  sub_1B19E5A18(*(_QWORD *)(v0 + 120));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

_QWORD *sub_1B1BF4B58(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  type metadata accessor for EntityGetSet(0, *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a1 + 8), a3, a4);
  v7 = (_QWORD *)swift_allocObject();
  v8 = *(_QWORD *)(v4 + 80);
  v7[2] = v8;
  v7[3] = a2;
  v7[4] = a1;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a2;
  v9[4] = a1;
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1BF6CFC;
  v10[5] = v7;
  v10[2] = sub_1B1BF6D08;
  v10[3] = v9;
  v10[6] = a1;
  swift_retain_n();
  return v10;
}

_QWORD *sub_1B1BF4C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[2] = a3;
  result[3] = a4;
  result[6] = a5;
  return result;
}

uint64_t sub_1B1BF4C88(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16)
{
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  v18 = a4 & 1;
  v19 = a6 & 1;
  v20 = a8 & 1;
  v21 = swift_allocObject();
  sub_1B1BF499C(a1, a2, a3, v18, a5, v19, a7, v20, a9, a10, a11, a12, a13, a14, a15, a16);
  return v21;
}

uint64_t sub_1B1BF4D50(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, char a11, uint64_t a12, char a13, unint64_t a14, char a15, unint64_t a16, char a17, __int16 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;

  v26 = *a3;
  type metadata accessor for PropertyDescription();
  type metadata accessor for EntityGetSet(0, *(_QWORD *)(*MEMORY[0x1E0DEC880] + v26 + 8), v27, v28);
  swift_retain();
  v31 = sub_1B1BF4B58(a3, a23, v29, v30);
  v32 = swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1BF54C0(a1, a2, a8, a9 & 1, a10, a11 & 1, a12, a13 & 1, a14, a15 & 1, a16, a17 & 1, a7, a5, a6, v31, v34, a3, a19,
    a20,
    a18,
    a21,
    a22,
    a23);
  return v32;
}

void sub_1B1BF4EF8()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1BF4F40()
{
  return swift_getKeyPath();
}

_WORD *sub_1B1BF4F6C@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_WORD *sub_1B1BF4F78@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_WORD *sub_1B1BF4F8C@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_WORD *sub_1B1BF4FA0@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B1BF4FB4(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *sub_1B1BF4FE4@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_WORD)v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *sub_1B1BF5010@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *sub_1B1BF5034(_WORD *result)
{
  _WORD *v1;

  *v1 |= *result;
  return result;
}

_WORD *sub_1B1BF5048(_WORD *result)
{
  _WORD *v1;

  *v1 &= *result;
  return result;
}

_WORD *sub_1B1BF505C(_WORD *result)
{
  _WORD *v1;

  *v1 ^= *result;
  return result;
}

_WORD *sub_1B1BF5070@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B1BF5084(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B1BF5098(_WORD *a1)
{
  _WORD *v1;

  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL sub_1B1BF50AC(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B1BF50C0()
{
  _WORD *v0;

  return *v0 == 0;
}

_WORD *sub_1B1BF50D0(_WORD *result)
{
  _WORD *v1;

  *v1 &= ~*result;
  return result;
}

_WORD *sub_1B1BF50E4@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_1B1BF50F4(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

BOOL sub_1B1BF5100(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B1BF5114@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int16 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOWORD(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1B1BF5168(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, unint64_t a9, char a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  char v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  char v36;
  uint64_t result;

  v21 = v20;
  *(_OWORD *)(v20 + 64) = 0u;
  v26 = v20 + 64;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_BYTE *)(v26 + 48) = 1;
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 141) = 16777472;
  v27 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 112) = 0;
  *(_QWORD *)(v26 + 96) = v27;
  *(_WORD *)(v26 + 146) = 0;
  *(_QWORD *)(v26 + 152) = 0;
  KeyPath = swift_getKeyPath();
  v29 = 0;
  *(_QWORD *)(v26 - 48) = a1;
  *(_QWORD *)(v26 - 40) = a2;
  *(_QWORD *)(v26 - 32) = KeyPath;
  *(_QWORD *)(v26 - 24) = a16;
  *(_QWORD *)(v26 - 16) = 0;
  *(_BYTE *)(v26 - 8) = 1;
  *(_WORD *)(v26 - 6) = a19 | 0x400;
  v30 = *(double *)&a3;
  v31 = v30;
  if ((a4 & 1) != 0)
    v31 = 0.0;
  *(float *)(v26 + 120) = v31;
  *(_BYTE *)(v26 + 124) = a4 & 1;
  v32 = *(double *)&a5;
  v33 = v32;
  if ((a6 & 1) != 0)
    v33 = 0.0;
  *(float *)(v26 + 128) = v33;
  *(_BYTE *)(v26 + 132) = a6 & 1;
  v34 = *(double *)&a7;
  v35 = v34;
  if ((a8 & 1) != 0)
    v35 = 0.0;
  *(float *)(v26 + 136) = v35;
  *(_BYTE *)(v26 + 140) = a8 & 1;
  if ((a10 & 1) != 0 || (v29 = a9, (a9 & 0x8000000000000000) == 0) && a9 < 0x100)
  {
    *(_BYTE *)(v21 + 205) = v29;
    *(_BYTE *)(v21 + 206) = a10 & 1;
    if ((a12 & 1) != 0)
    {
      v36 = 0;
LABEL_14:
      *(_BYTE *)(v21 + 207) = v36;
      *(_BYTE *)(v21 + 208) = a12 & 1;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v21 + 96) = a13;
      *(_WORD *)(v21 + 210) = a19;
      *(_QWORD *)(v21 + 144) = a14;
      *(_QWORD *)(v21 + 152) = a15;
      *(_QWORD *)(v21 + 168) = a17;
      *(_QWORD *)(v21 + 176) = a18;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 160) = a20;
      swift_bridgeObjectRelease();
      return v21;
    }
    v36 = a11;
    if ((a11 & 0x8000000000000000) == 0 && a11 < 0x100)
      goto LABEL_14;
  }
  result = sub_1B222967C();
  __break(1u);
  return result;
}

uint64_t sub_1B1BF53AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, unint64_t a9, char a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,__int16 a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  char v29;

  v24 = a4 & 1;
  v25 = a6 & 1;
  v29 = a8 & 1;
  v26 = swift_allocObject();
  sub_1B1BF54C0(a1, a2, a3, v24, a5, v25, a7, v29, a9, a10 & 1, a11, a12 & 1, a13, a14, a15, a16, v28, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
  return v26;
}

uint64_t sub_1B1BF54C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, unint64_t a9, char a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,__int16 a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  _QWORD *v25;
  uint64_t v32;
  char v33;
  float v34;
  float v35;
  __int128 v36;
  float v37;
  float v38;
  float v39;
  float v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  __int128 v57;
  _OWORD v58[2];

  v25 = (_QWORD *)v24;
  v56 = *a16;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_BYTE *)(v24 + 112) = 1;
  *(_QWORD *)(v24 + 128) = 0;
  *(_QWORD *)(v24 + 136) = 0;
  *(_QWORD *)(v24 + 120) = 0;
  v32 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v24 + 168) = 0;
  *(_QWORD *)(v24 + 176) = 0;
  *(_QWORD *)(v24 + 160) = v32;
  *(_DWORD *)(v24 + 184) = 0;
  *(_BYTE *)(v24 + 188) = 1;
  *(_DWORD *)(v24 + 192) = 0;
  *(_BYTE *)(v24 + 196) = 1;
  *(_QWORD *)(v24 + 200) = 0x1000100000000;
  *(_BYTE *)(v24 + 208) = 1;
  *(_WORD *)(v24 + 210) = 0;
  *(_QWORD *)(v24 + 216) = 0;
  sub_1B1B69B64(a1, a2, a18, a21, (uint64_t)&v57);
  swift_bridgeObjectRelease();
  v33 = 0;
  v34 = *(double *)&a3;
  v35 = v34;
  if ((a4 & 1) != 0)
    v35 = 0.0;
  *(float *)(v24 + 184) = v35;
  v36 = v58[0];
  *(_OWORD *)(v24 + 16) = v57;
  *(_OWORD *)(v24 + 32) = v36;
  *(_OWORD *)(v24 + 44) = *(_OWORD *)((char *)v58 + 12);
  *(_BYTE *)(v24 + 188) = a4 & 1;
  v37 = *(double *)&a5;
  v38 = v37;
  if ((a6 & 1) != 0)
    v38 = 0.0;
  *(float *)(v24 + 192) = v38;
  *(_BYTE *)(v24 + 196) = a6 & 1;
  v39 = *(double *)&a7;
  v40 = v39;
  if ((a8 & 1) != 0)
    v40 = 0.0;
  *(float *)(v24 + 200) = v40;
  *(_BYTE *)(v24 + 204) = a8 & 1;
  if ((a10 & 1) == 0)
  {
    v33 = a9;
    if ((a9 & 0x8000000000000000) != 0 || a9 >= 0x100)
      goto LABEL_34;
  }
  *(_BYTE *)(v24 + 205) = v33;
  *(_BYTE *)(v24 + 206) = a10 & 1;
  if ((a12 & 1) == 0)
  {
    v41 = a11;
    if ((a11 & 0x8000000000000000) == 0 && a11 < 0x100)
      goto LABEL_14;
LABEL_34:
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v41 = 0;
LABEL_14:
  *(_BYTE *)(v24 + 207) = v41;
  *(_BYTE *)(v24 + 208) = a12 & 1;
  v42 = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v24 + 64) = 0;
  *(_QWORD *)(v24 + 72) = 0;
  sub_1B19E5A18(v42);
  *(_QWORD *)(v24 + 96) = a13;
  swift_retain();
  swift_release();
  *(_QWORD *)(v24 + 144) = a14;
  *(_QWORD *)(v24 + 152) = a15;
  *(_QWORD *)(v24 + 80) = a16;
  *(_QWORD *)(v24 + 88) = &off_1E63754E8;
  swift_retain();
  swift_unknownObjectRelease();
  *(_WORD *)(v24 + 210) = a21;
  if (*(_QWORD *)(a22 + 16))
  {
    swift_release();
    swift_release();
    *(_QWORD *)(v24 + 160) = a22;
    swift_bridgeObjectRelease();
    v43 = a18;
    v44 = a24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v45 = *(_QWORD *)(v56 + 80);
    v46 = swift_conformsToProtocol2();
    if (v46)
      v47 = v46;
    else
      v47 = 0;
    if (v46)
      v48 = v45;
    else
      v48 = 0;
    if (v48)
      v45 = (*(uint64_t (**)(void))(v47 + 8))();
    v43 = a18;
    v44 = a24;
    v49 = swift_conformsToProtocol2();
    if (v49)
      v50 = v49;
    else
      v50 = 0;
    if (v49)
      v51 = v45;
    else
      v51 = 0;
    if (v51)
    {
      v52 = (*(uint64_t (**)(void))(v50 + 8))();
      swift_release();
      swift_release();
      v25[20] = v52;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = v44;
  *(_QWORD *)(v53 + 24) = v43;
  v54 = v25[8];
  v25[8] = sub_1B1BF7020;
  v25[9] = v53;
  sub_1B19E5A18(v54);
  v25[21] = a19;
  v25[22] = a20;
  swift_bridgeObjectRelease();
  v25[27] = a23;
  swift_release();
  return (uint64_t)v25;
}

_QWORD *sub_1B1BF5878@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  v10 = type metadata accessor for EntityValueAccessors(0, *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a3 + 8), (uint64_t)a3, a4);
  v11 = swift_allocObject();
  swift_retain();
  result = sub_1B1BF68D4(a1, a2, a3, a4);
  a5[3] = v10;
  a5[4] = (uint64_t)&off_1E6382A70;
  *a5 = v11;
  return result;
}

uint64_t sub_1B1BF5920(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  sub_1B1BF68D4(a1, a2, a3, a4);
  return v8;
}

_QWORD *sub_1B1BF5984@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v9 = type metadata accessor for EntityValueAccessors(0, *(_QWORD *)(*(_QWORD *)a3 + 80), a3, a4);
  v10 = swift_allocObject();
  swift_retain();
  result = sub_1B1BF6574(a1, a2, a3);
  a5[3] = v9;
  a5[4] = (uint64_t)&off_1E6382A70;
  *a5 = v10;
  return result;
}

uint64_t sub_1B1BF5A0C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_1B1BF6574(a1, a2, a3);
  return v6;
}

uint64_t sub_1B1BF5A60(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = 1;
  switch(result)
  {
    case 0:
      goto LABEL_23;
    case 1:
      v2 = 2;
      goto LABEL_23;
    case 2:
      v2 = 3;
      goto LABEL_23;
    case 3:
      v2 = 5;
      goto LABEL_23;
    case 4:
      v2 = 6;
      goto LABEL_23;
    case 5:
      v2 = 7;
      goto LABEL_23;
    case 6:
      v2 = 8;
      goto LABEL_23;
    case 7:
      v2 = 9;
      goto LABEL_23;
    case 8:
      v2 = 10;
      goto LABEL_23;
    case 9:
      v2 = 11;
      goto LABEL_23;
    case 10:
      v2 = 12;
      goto LABEL_23;
    case 11:
      goto LABEL_25;
    case 12:
      v2 = 13;
      goto LABEL_23;
    case 13:
      v2 = 19;
      goto LABEL_23;
    case 14:
      v2 = 15;
      goto LABEL_23;
    case 15:
      v2 = 21;
      goto LABEL_23;
    case 16:
      v2 = 20;
      goto LABEL_23;
    case 17:
      v2 = 18;
      goto LABEL_23;
    case 18:
      v2 = 4;
      goto LABEL_23;
    case 19:
      v2 = 14;
      goto LABEL_23;
    case 20:
      v2 = 22;
      goto LABEL_23;
    case 21:
      v2 = 23;
      goto LABEL_23;
    case 22:
      v2 = 24;
LABEL_23:
      *v1 = v2;
      v1[1] = 0;
      break;
    default:
      sub_1B2229430();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
LABEL_25:
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B1BF5C34(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x17)
    return 11;
  else
    return qword_1B2283220[a1 - 1];
}

unint64_t sub_1B1BF5C58(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1 - 1;
  result = 1701736302;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x656C616373;
      break;
    case 2:
      result = 0x656C676E61;
      break;
    case 3:
      result = 0x73726574656DLL;
      break;
    case 4:
      result = 0x73746E65747865;
      break;
    case 5:
      result = 0x726F6C6F63;
      break;
    case 6:
      result = 0x6C676E4173697861;
      break;
    case 7:
    case 13:
      result = 0xD000000000000010;
      break;
    case 8:
      result = 0x656665526873656DLL;
      break;
    case 9:
      result = 0xD000000000000013;
      break;
    case 10:
      result = 0x72657474696D65;
      break;
    case 11:
      result = 0x74694B656E656373;
      break;
    case 12:
      result = 0x75466C656E72656BLL;
      break;
    case 14:
      result = 0x6946726564616873;
      break;
    case 15:
      result = 0x726564616873;
      break;
    case 16:
    case 17:
      result = 0x6C6169726574616DLL;
      break;
    case 18:
      result = 0x656C67676F74;
      break;
    case 19:
      result = 0x65646E496D756E65;
      break;
    case 20:
      result = 7107189;
      break;
    case 21:
      result = 0x61547265646E6572;
      break;
    case 22:
      result = 0x56664F746E696F70;
      break;
    case 23:
      result = 0x6174736554746968;
      break;
    default:
      result = 0x6F43656372756F73;
      break;
  }
  return result;
}

uint64_t sub_1B1BF5EF8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1BF5C34(v1);
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BF5F44()
{
  uint64_t *v0;

  sub_1B1BF5C34(*v0);
  return sub_1B222A078();
}

uint64_t sub_1B1BF5F70()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1BF5C34(v1);
  sub_1B222A078();
  return sub_1B222A0C0();
}

_QWORD *sub_1B1BF5FB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1B1BF6E40(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1BF5FE0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  v2 = *v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B1BF5C34(v2);
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B2229DD8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1BF6084()
{
  sub_1B1BF4AEC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PropertyDescription()
{
  return objc_opt_self();
}

uint64_t sub_1B1BF60C4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B1BF6108()
{
  uint64_t v1;

  sub_1B2229304();
  v1 = sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL sub_1B1BF6184(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  sub_1B222A06C();
  sub_1B1BF5C34(v2);
  sub_1B222A078();
  v4 = sub_1B222A0C0();
  sub_1B222A06C();
  sub_1B1BF5C34(v3);
  sub_1B222A078();
  return v4 == sub_1B222A0C0();
}

uint64_t sub_1B1BF6210()
{
  return sub_1B1BF64DC();
}

uint64_t type metadata accessor for ValueAccessors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueAccessors);
}

uint64_t sub_1B1BF6224()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B1BF6278()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1B1BF6298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;

  v7 = (*v3)[10];
  v8 = sub_1B2229124();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v17 - v12;
  ((void (*)(uint64_t, uint64_t, double))v3[4])(a1, a2, v11);
  v14 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v7) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a3 + 24) = v7;
    v16 = sub_1B1A137F4((uint64_t *)a3);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v14 + 32))(v16, v13, v7);
  }
  return result;
}

uint64_t sub_1B1BF6384(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void (*v9)(uint64_t, uint64_t, _BYTE *);
  uint64_t v10;
  _BYTE v12[32];

  v5 = *(_QWORD *)(*v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (void (*)(uint64_t, uint64_t, _BYTE *))v2[2];
  sub_1B1A02864(v10, (uint64_t)v12);
  swift_dynamicCast();
  v9(a1, a2, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B1BF6448@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (uint64_t *)(*a2 + *MEMORY[0x1E0DEC880]);
  v8 = *v6;
  v7 = v6[1];
  swift_retain();
  sub_1B1E1A7B0(a1, v8, (uint64_t)a2, v7, a3);
  return swift_release();
}

uint64_t sub_1B1BF64D4()
{
  return sub_1B1BF64DC();
}

uint64_t sub_1B1BF64DC()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntityGetSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EntityGetSet);
}

uint64_t sub_1B1BF6520()
{
  return swift_initClassMetadata2();
}

_QWORD *sub_1B1BF6574(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a1;
  v7 = HIDWORD(a1);
  v3[6] = a1;
  v3[7] = a2;
  v3[8] = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_DWORD *)(v8 + 24) = v6;
  *(_DWORD *)(v8 + 28) = v7;
  *(_QWORD *)(v8 + 32) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_DWORD *)(v9 + 24) = v6;
  *(_DWORD *)(v9 + 28) = v7;
  *(_QWORD *)(v9 + 32) = a2;
  v3[2] = sub_1B1BF6FD8;
  v3[3] = v8;
  v3[4] = sub_1B1BF6FE4;
  v3[5] = v9;
  swift_retain_n();
  return v3;
}

uint64_t sub_1B1BF6620(void (**a1)(_QWORD, _QWORD, double), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v22;

  v6 = *((_QWORD *)*a1 + 10);
  v7 = sub_1B2229124();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1[4](a2, a3, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return sub_1B2228B00();
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v19(v17, v11, v6);
    sub_1B1BF6D44(v6, v6);
    swift_allocObject();
    v18 = sub_1B2228ADC();
    v19(v20, v17, v6);
    sub_1B2228B6C();
  }
  return v18;
}

uint64_t sub_1B1BF6798(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v8 = (*a2)[10];
  v9 = sub_1B2229124();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v20 - v11;
  v13 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = a1;
  v18 = sub_1B2228B6C();
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v18);
  sub_1B2228DC4();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, v8);
  ((void (*)(uint64_t, uint64_t, char *))a2[2])(a3, a4, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v8);
}

_QWORD *sub_1B1BF68D4(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = v4;
  v9 = a1;
  v10 = HIDWORD(a1);
  v11 = *v4;
  v12 = *a3;
  v4[6] = a1;
  v4[7] = a2;
  type metadata accessor for EntityGetSet(0, *(_QWORD *)(v11 + 120), (uint64_t)a3, a4);
  swift_retain();
  v15 = sub_1B1BF4B58(a3, a4, v13, v14);
  swift_release();
  v5[8] = v15;
  swift_release();
  v16 = v5[8];
  v17 = swift_allocObject();
  v18 = *(_QWORD *)(v12 + *MEMORY[0x1E0DEC880]);
  *(_QWORD *)(v17 + 16) = v18;
  *(_QWORD *)(v17 + 24) = a4;
  *(_QWORD *)(v17 + 32) = v16;
  *(_DWORD *)(v17 + 40) = v9;
  *(_DWORD *)(v17 + 44) = v10;
  *(_QWORD *)(v17 + 48) = a2;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = v16;
  *(_DWORD *)(v19 + 40) = v9;
  *(_DWORD *)(v19 + 44) = v10;
  *(_QWORD *)(v19 + 48) = a2;
  v5[2] = sub_1B1BF6F3C;
  v5[3] = v17;
  v5[4] = sub_1B1BF6F4C;
  v5[5] = v19;
  swift_retain_n();
  return v5;
}

uint64_t sub_1B1BF69F0()
{
  return swift_release();
}

uint64_t sub_1B1BF69F8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B1BF6A24()
{
  sub_1B1BF69F8();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntityValueAccessors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EntityValueAccessors);
}

ValueMetadata *type metadata accessor for PropertyDescription.Flags()
{
  return &type metadata for PropertyDescription.Flags;
}

uint64_t getEnumTagSinglePayload for PropertyDescription.Semantic(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFE6 && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483623);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 0x19)
    return (v3 - 24);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PropertyDescription.Semantic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFE7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483623;
    if (a3 >= 0x7FFFFFE7)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFE7)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 24;
  }
  return result;
}

uint64_t sub_1B1BF6B10(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_1B1BF6B30(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    result[1] = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyDescription.Semantic()
{
  return &type metadata for PropertyDescription.Semantic;
}

unint64_t sub_1B1BF6B74()
{
  unint64_t result;

  result = qword_1EEF5C450;
  if (!qword_1EEF5C450)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283148, &type metadata for PropertyDescription.Semantic);
    atomic_store(result, (unint64_t *)&qword_1EEF5C450);
  }
  return result;
}

unint64_t sub_1B1BF6BBC()
{
  unint64_t result;

  result = qword_1EEF5C458;
  if (!qword_1EEF5C458)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282FC8, &type metadata for PropertyDescription.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF5C458);
  }
  return result;
}

unint64_t sub_1B1BF6C04()
{
  unint64_t result;

  result = qword_1EEF5C460;
  if (!qword_1EEF5C460)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282F98, &type metadata for PropertyDescription.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF5C460);
  }
  return result;
}

unint64_t sub_1B1BF6C4C()
{
  unint64_t result;

  result = qword_1EEF5C468;
  if (!qword_1EEF5C468)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282FF0, &type metadata for PropertyDescription.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF5C468);
  }
  return result;
}

